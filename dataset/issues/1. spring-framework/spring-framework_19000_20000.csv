"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","11168","Broken @RequestMapping inheritance [SPR-6502]","**[Łukasz Dywicki](https://jira.spring.io/secure/ViewProfile.jspa?name=splatch)** opened **[SPR-6502](https://jira.spring.io/browse/SPR-6502?redirect=false)** and commented  After switch from Spring 3.0.0 RC1 to Spring 3.0.0 RC3 my controlers stop working. Spring says:  ``` No adapter for handler [org.code_house.spring3.web.UserControllerImpl@5a7691c0]: Does your handler implement a supported interface like Controller? ```  Test application (war, jar with sources) are available in Maven repository: http://repository.code-house.org/content/repositories/code-house.internal.snapshot/org/code-house/spring3/test/1.0.0.SNAPSHOT/  Controller code:  ``` package org.code_house.spring3.web;  import java.util.List;  import org.code_house.spring3.api.UserController; import org.code_house.spring3.dao.api.UserDAO; import org.code_house.spring3.domain.Group; import org.code_house.spring3.domain.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping;  @Controller @RequestMapping(""/users"") public class UserControllerImpl extends GenericControllerImpl     implements UserController {      private UserDAO daoImpl;      public List listAssigns() {         return daoImpl.listAssigns();     }      public boolean assign(@PathVariable Integer number) {         daoImpl.assign(number);         return Boolean.TRUE;     }      @Autowired     public void setDaoImpl(UserDAO daoImpl) {         setDao(daoImpl);         this.daoImpl = daoImpl;     } } ```  ---  **Affects:** 3.0 RC3  **Attachments:** - [spring.log](https://jira.spring.io/secure/attachment/15986/spring.log) (_108.36 kB_)  **Issue Links:** - #10874 When looking up methods with `@RequestMapping` annotation, unannotated bridge methods are included  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27e06425435d4476ac8e840dc4217921e3ae01a3","closed","type: bug,","spring-projects-issues","2009-12-02T21:48:42Z","2019-01-13T07:56:40Z"
"","11789","Add support for public/private Cache-Control HTTP header [SPR-7129]","**[Zoran Regvart](https://jira.spring.io/secure/ViewProfile.jspa?name=zregvart)** opened **[SPR-7129](https://jira.spring.io/browse/SPR-7129?redirect=false)** and commented  As per The HTTP 1.1 RFC (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1) Cache-Control HTTP header can have keywords public or private specified.  One would use the public keyword for cacheable resources that are behind HTTP authentication -- a common case would be static javascript or image files that not accessible to general public. An even stronger case could be made for JSON/XML data intended for an AJAX client behind HTTP authentication that still wants to cache the response.  The private keyword is intended in cases where privacy of the cached data should be enforced -- for example for cached profile pages of the user.  These improvements would benefit applications that want comply with the recent trends in web site optimizations, such as the ones outlined in the best practices for caching section of Google's page speed project (http://code.google.com/speed/page-speed/docs/caching.html).  ---  **Affects:** 3.0.2  This issue is a sub-task of #16413  **Issue Links:** - #13194 Provide controller method level alternative to WebContentInterceptor - #15948 ServletWebRequest can't validate Etag and Last-Modified together.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38f32e38169f7779b9fe20d46b69024039f190ce  11 votes, 23 watchers","closed","has: votes-jira,","spring-projects-issues","2010-04-23T23:58:34Z","2019-01-11T13:36:12Z"
"","11137","Typo in usage scenario diagram [SPR-6471]","**[Zach A. Thomas](https://jira.spring.io/secure/ViewProfile.jspa?name=zathomas)** opened **[SPR-6471](https://jira.spring.io/browse/SPR-6471?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/images/overview-full.png  Diagram reads ""Dymaic Binding to Domain Model,"" should read ""Dynamic Binding to Domain Model""  ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2  **Attachments:** - [graphics.patch](https://jira.spring.io/secure/attachment/16348/graphics.patch) (_604 bytes_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16349/mylyn-context.zip) (_1.22 kB_)  **Issue Links:** - #12371 ""Dynamic"" spelled ""Dymaic"" typo section 1.3 (_**""is superseded by""**_)","closed","","spring-projects-issues","2009-11-29T06:31:38Z","2019-01-11T15:37:27Z"
"","11796","Logging for RmiServiceExporter shows incorrect registry port [SPR-7137]","**[Yuri Schimke](https://jira.spring.io/secure/ViewProfile.jspa?name=yschimke)** opened **[SPR-7137](https://jira.spring.io/browse/SPR-7137?redirect=false)** and commented  2010-04-27 15:18:26,952 INFO  [Thread main] remoting.rmi.RmiServiceExporter -  - Unbinding RMI service 'Rewind' from registry at port '1099'  When configuring a RmiRegistry on a non standard port, the shutdown logging message displays the default rmi port even though it isn't used to create the rmi registry.  In the case above there is no rmi registry running at port 1099   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/159f98728e0a26dccac9e5ccbc4adf4966b20b1b","closed","type: bug,","spring-projects-issues","2010-04-27T01:43:10Z","2012-06-19T03:44:15Z"
"","11212","The Javadoc comments for Bean.java need to update [SPR-6546]","**[Younghoe Ahn](https://jira.spring.io/secure/ViewProfile.jspa?name=younghoe)** opened **[SPR-6546](https://jira.spring.io/browse/SPR-6546?redirect=false)** and commented  I found the difference between the javadoc for the `@Bean` annotation and the reference doc in RC 3.0 release.  The javadoc reads: *  \Constraints\ *   \ *         Bean methods are valid only when declared within an {@link Configuration @Configuration}-annotated class  But, the reference(3.10.4 Defining bean metadata within components) says:  `@Component` public class FactoryMethodComponent {      private static int i;          @Bean @Qualifier(""public"")     public TestBean publicInstance() {          return new TestBean(""publicInstance"");     }    ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3cfac84bff556d1d96fa2ea2bc2e1a571091e5a3","closed","in: core,","spring-projects-issues","2009-12-10T17:51:43Z","2012-06-19T03:43:17Z"
"","11198","Regression in @RequestMapping parsing path variable in the url [SPR-6532]","**[Youen Chéné](https://jira.spring.io/secure/ViewProfile.jspa?name=youen.chene)** opened **[SPR-6532](https://jira.spring.io/browse/SPR-6532?redirect=false)** and commented  Hi i've got the this spring mvc code which works fines with RC2.  `@RequestMapping`(value={""/product-{id}.html"",""/product-{id}-{name}.html""}) public String showProduct(`@PathVariable` String id,`@RequestParam`(value=""loc"",required=false) String location,Model model)  When I am switching with RC3, it is only handle the /product-{id}.html url pattern and not the /product-{id}-{name}.html pattern. In fact with this last pattern it try to put {id}-{name} in the id path variable instead of just put {id}.  Sorry, if it is a duplicate, after a quick looking it dot not seems to be one.   ---  **Affects:** 3.0 RC3","closed","status: declined,","spring-projects-issues","2009-12-07T06:54:47Z","2019-01-12T16:38:40Z"
"","11605","Apache HttpClient 4.1 pooled coonection manager support in Spring Web [SPR-6940]","**[Yevhen Yaremchuk](https://jira.spring.io/secure/ViewProfile.jspa?name=yevhen)** opened **[SPR-6940](https://jira.spring.io/browse/SPR-6940?redirect=false)** and commented  In current stable release (4.0) of Apache HttpClient API to support pooled connection manager is very limited but they have changed and extended ThreadSafeClientConnManager in 4.1-alpha1 significantly.  I understand that this is early days of next stable release and many changes in API and implementation are still possible. I needed that support in my current project and implemented it myself.  ---  **Affects:** 3.0 GA  **Attachments:** - [httpclient-4.1-aplha1_support.zip](https://jira.spring.io/secure/attachment/16255/httpclient-4.1-aplha1_support.zip) (_38.45 kB_)  **Issue Links:** - #14110 Upgrade commons-httpclient from version 4.1  to version 4.2  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-03T21:12:56Z","2019-01-11T16:31:04Z"
"","11604","XStreamMarshaller + JsonHierarchicalStreamDriver + JsonWriter.DROP_ROOT_MODE produce empty output [SPR-6939]","**[Yevhen Yaremchuk](https://jira.spring.io/secure/ViewProfile.jspa?name=yevhen)** opened **[SPR-6939](https://jira.spring.io/browse/SPR-6939?redirect=false)** and commented  When using XStreamMarshaller for serializing object to JSON by customizing StreamDriver to skip root node resulting in empty output. Configuration of StreamDriver illustrated by the following snapshot  ``` final XStreamMarshaller marshaller = new XStreamMarshaller();  marshaller.setStreamDriver(new JsonHierarchicalStreamDriver() {     public HierarchicalStreamWriter createWriter(Writer writer) {         return new JsonWriter(writer, JsonWriter.DROP_ROOT_MODE);     } }); ```  At the same time using XSTream directly works just fine.  ``` final XStream xStream = new XStream(new JsonHierarchicalStreamDriver() {     public HierarchicalStreamWriter createWriter(Writer writer) {         return new JsonWriter(writer, JsonWriter.DROP_ROOT_MODE);     } }); ```    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac9a625ccc9c70abcecc4b21c894b5363bf97040","closed","type: bug,","spring-projects-issues","2010-03-03T20:47:24Z","2012-06-19T03:44:14Z"
"","10885","MVC Code example error in Chapter 15.3 [SPR-6217]","**[Yann Nicolas](https://jira.spring.io/secure/ViewProfile.jspa?name=yannart)** opened **[SPR-6217](https://jira.spring.io/browse/SPR-6217?redirect=false)** and commented  There is an error in the code in the MVC section: Chapter 15.3, (Page 399 in the PDF, ch15s03.html in html)  `@Controller` public class HelloWorldController { `@RequestMapping`(""/helloWorld"") public ModelAndView helloWorld() { ModelAndView mac = new ModelAndView(); //--> error must be ModelAndView mav = new ModelAndView(); mav.setViewName(""helloWorld""); mav.addObject(""message"", ""Hello World!""); return mav; }   ---  **Affects:** 3.0 RC1","closed","type: bug,","spring-projects-issues","2009-10-09T22:33:07Z","2012-06-19T03:44:04Z"
"","11074","Add full support for JPA 2.0 PersistenceUnitInfo [SPR-6408]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-6408](https://jira.spring.io/browse/SPR-6408?redirect=false)** and commented  javax.persistence.spi.PersistenceUnitInfo add three methods in JPA2      @Override     public String getPersistenceXMLSchemaVersion() {     	return ""1.0"";     }          @Override     public SharedCacheMode getSharedCacheMode() {     	return SharedCacheMode.NONE;     }          @Override     public ValidationMode getValidationMode() {     	return ValidationMode.NONE;     }  please add it to org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo  ---  **Issue Links:** - #11371 Spring 3.0 not compatible with Hibernate 3.5 beta3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ba83755467dabdc6c133d663ece66815407913d  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-22T12:01:16Z","2019-01-11T15:28:51Z"
"","11355","Class level @RequestMapping along with method level annotation makes REST endpoint unreachable for Spring 3.0.0.RELEASE Library Distribution [SPR-6689]","**[Yagnesh Chawda](https://jira.spring.io/secure/ViewProfile.jspa?name=yagnesh.chawda)** opened **[SPR-6689](https://jira.spring.io/browse/SPR-6689?redirect=false)** and commented  My controller class declared with `@RequestMapping` and some methods declared with RequestMapping as well, causes the endpoints unreacable. But when I comment Class level `@RequestMapping` and prepend that string at method level RequestMapping annotation, it works fine.  I am not getting exact version of the Spring in the avaialble options while Jira creation, but i got it as a dependency with following :                             org.springframework            org.springframework.spring-library            libd          3.0.0.RELEASE                                     javax.servlet               com.springsource.javax.servlet                                               org.aopalliance                         com.springsource.org.aopalliance                                      Sample Controller is given below which is NOT working when class level `@RequestMapping` is uncommented `@Controller` `@RequestMapping`(""/follow-redirect/1.0"") public class FollowRedirectService {  .....  `@RequestMapping`(value=""/{key}.**"", method=RequestMethod.GET)  /**  This Does not work when class level RequestMapping is declared \*/ //`@RequestMapping`(value=""/follow-redirect/1.0/{key}.**"", method=RequestMethod.GET) /** This works when Class level RequestMapping is commented  */ public void handleGet(HttpServletRequest request, HttpServletResponse response, `@PathVariable`(""key"") String key) { .....    } }    --- No further details from [SPR-6689](https://jira.spring.io/browse/SPR-6689?redirect=false)","closed","status: declined,","spring-projects-issues","2010-01-13T23:15:27Z","2019-01-12T16:38:24Z"
"","11139","@MVC should allow a way to configure ""input"" page in case of validation failure [SPR-6473]","**[Xiaohong Zheng](https://jira.spring.io/secure/ViewProfile.jspa?name=xzheng)** opened **[SPR-6473](https://jira.spring.io/browse/SPR-6473?redirect=false)** and commented  Currently, if validation fails, e.g. with Bean validation, it throws an exception that propagates all the way to the DispatchServlet if the handler method doesn't take an BindingResult as an argument. There should be a way to configure an ""input"" page to return to in case of validation failure.   ---  **Affects:** 3.0 RC2  5 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-30T01:54:42Z","2019-01-11T15:37:31Z"
"","11138","@MVC should provide a way to invoke custom code at preBind stage [SPR-6472]","**[Xiaohong Zheng](https://jira.spring.io/secure/ViewProfile.jspa?name=xzheng)** opened **[SPR-6472](https://jira.spring.io/browse/SPR-6472?redirect=false)** and commented  Our security policy requires basic validation to be executed before binding user input. An `@PreBind` annotation at method level can achieve this. This method should be able to receive same parameters as the handler method.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11103 `@MVC` should provide an ""onBind"" hook prior to automatic validation - #11200 Custom DataBinder Hook  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-30T01:49:36Z","2019-09-13T10:58:13Z"
"","11671","ProxyFactoryBean for intercept-methods can't predict type of bean to be created [SPR-7006]","**[Wouter Coekaerts](https://jira.spring.io/secure/ViewProfile.jspa?name=woutercoekaerts)** opened **[SPR-7006](https://jira.spring.io/browse/SPR-7006?redirect=false)** and commented  When using the intercept-methods tag, a ProxyFactoryBean is created for which Spring can't predict the type of the bean that it will create (ProxyFactoryBean.getObjectType() is null).  That is a real problem because such beans are initialized at (to a non-spring-internals-expert) unpredictable and inappropriate moments in an attempt to determine their type. For example when autowiring another (totally unrelated) bean.  Attached is a simple test case reproducing this problem. If you put a breakpoint at the constructor of the AImpl class, you'll see it is initializing AImpl at that moment because it is looking for a ""C"" to autowire into ""b"". But (as seen in the stack at that point) AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(String, RootBeanDefinition) is in the case commented by ""No type found - fall back to full creation of the FactoryBean instance."", because getTypeForFactoryBean() on the ProxyFactoryBean created by Spring Security returned null. Spring Security should create a ProxyFactoryBean that properly declares the type it will return.  In the test case, this screws up the initialization order causing a NPE (which is then silently ignored), and if you uncomment the last part of the config xml, it goes entirely wrong. But that's (probably) another Spring bug, which is just triggered by this problem.  Anyways, even without this further failing, the totally changed initialization order because of some security interceptors can clearly not be intentional.   ---  **Affects:** 2.5.6  **Attachments:** - [autowire-issue.zip](https://jira.spring.io/secure/attachment/16422/autowire-issue.zip) (_8.32 kB_) - [SecurityProxyFactoryBean.java](https://jira.spring.io/secure/attachment/16322/SecurityProxyFactoryBean.java) (_6.55 kB_) - [spring-security-init-test.zip](https://jira.spring.io/secure/attachment/16278/spring-security-init-test.zip) (_5.33 kB_)  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2010-03-11T00:41:11Z","2019-01-13T21:46:39Z"
"","11639","Proxy created for intercept-methods doesn't respect autowire-candidate attribute [SPR-6974]","**[Wouter Coekaerts](https://jira.spring.io/secure/ViewProfile.jspa?name=woutercoekaerts)** opened **[SPR-6974](https://jira.spring.io/browse/SPR-6974?redirect=false)** and commented  When using intercept-methods in a bean definition with autowire-candidate=""false"", the created proxy is still a candidate for autowiring.  Attached a sample to reproduce the problem.  This is the same problem as was fixed for aop:scoped-proxy in #8484.  ---  **Affects:** 3.0.1  **Attachments:** - [autowire-test.zip](https://jira.spring.io/secure/attachment/16271/autowire-test.zip) (_2.22 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d4de1ac3467f4a78db60b2a6191bbb04858aac2e","closed","in: core,","spring-projects-issues","2010-03-09T20:19:28Z","2019-01-11T16:35:19Z"
"","11508","AbstractInterceptorDrivenBeanDefinitionDecorator NPE for bean definitions without direct class attribute [SPR-6842]","**[Wouter Coekaerts](https://jira.spring.io/secure/ViewProfile.jspa?name=woutercoekaerts)** opened **[SPR-6842](https://jira.spring.io/browse/SPR-6842?redirect=false)** and commented  `AbstractInterceptorDrivenBeanDefinitionDecorator.decorate` calls `isProxyFactoryBeanDefinition` that does:  ``` return existingDefinition.getBeanClassName().equals(ProxyFactoryBean.class.getName()); ```  This throws a NullPointerException when `existingDefinition` doesn't have a ""class"" attribute on it.  For example, using `` on a bean where the class is defined in a parent bean:  ```  	  	 		 	  ```  Causes:  ``` java.lang.NullPointerException at org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator.isProxyFactoryBeanDefinition at org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator.decorate at org.springframework.security.config.InterceptMethodsBeanDefinitionDecorator.decorate at org.springframework.beans.factory.xml.NamespaceHandlerSupport.decorate ... ```    ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2010-02-15T01:59:04Z","2012-06-19T03:43:27Z"
"","11668","bundle org.springframework.orm does not see package org.hibernate.cache in OSGi environment [SPR-7003]","**[Wolfgang Schell](https://jira.spring.io/secure/ViewProfile.jspa?name=jetztgradnet)** opened **[SPR-7003](https://jira.spring.io/browse/SPR-7003?redirect=false)** and commented  ## Problem description  I'm working on an OSGi plugin for Grails, which uses using Spring and Hibernate. Grails tries to create a Hibernate session with a HibernateTransactionManager, which fails with a `NoClassDefFoundException: org.hibernate.cache.CacheProvider`, because the Spring ORM bundle doesn't see package `org.hibernate.cache`, which is provided by the Hibernate bundle from [EBR](http://www.springsource.com/repository/app/).  I'm using bundles [`org.springframework.orm (3.0.1.RELEASE-A)`](http://www.springsource.com/repository/app/bundle/version/detail?name=org.springframework.orm&version=3.0.1.RELEASE-A) and [`com.springsource.org.hibernate (3.3.2.GA)`](http://www.springsource.com/repository/app/library/version/detail?name=org.hibernate.ejb&version=3.3.2.GA) from EBR with Equinox 3.5.1. When running with Equinox's trace option `org.eclipse.osgi/resolver/wiring = true`, the following statement can be seen in the OSGi console:  ``` ...         (w) [org.springframework.orm_3.0.1.RELEASE-A]:org.hibernate.cfg -> [com.springsource.org.hibernate_3.3.2.GA]:org.hibernate.cfg         (w) [org.springframework.orm_3.0.1.RELEASE-A]:org.hibernate.cache.access -> [com.springsource.org.hibernate_3.3.2.GA]:org.hibernate.cache.access         (w) [org.springframework.orm_3.0.1.RELEASE-A]:org.hibernate.cache -> OPTIONAL (could not be wired)         (w) [org.springframework.orm_3.0.1.RELEASE-A]:org.hibernate.annotations -> [com.springsource.org.hibernate_3.3.2.GA]:org.hibernate.annotations         (w) [org.springframework.orm_3.0.1.RELEASE-A]:org.hibernate -> [com.springsource.org.hibernate_3.3.2.GA]:org.hibernate ... ```  Please note the part `org.hibernate.cache -> OPTIONAL (could not be wired)`.  ## How to reproduce  I attached a zip file with a PAX Runner configuration, which reproduces the test environment. The configuration contains a profile with all required settings and a Equinox trace file, which enables tracing of package wiring.  After downloading Pax Runner from http://paxrunner.ops4j.org/display/paxrunner/Download and adding the bin directory to the `PATH`, the test can be run like this:  **Linux/Mac OSX**  ``` pax-run.sh --args=file:springdm-test.profile --log=debug ```  **Windows**  ``` pax-run.bat ""--args=file:hibcache-test.profile"" ""--log=debug"" ```  Please see http://paxrunner.ops4j.org/display/paxrunner/Using+proxies, when connecting to the Internet through a proxy (for download of dependencies from Maven repos).  The initial start may take some time, to download all required bundles from Maven repos (mostly from EBR).  After start up, the OSGi console prints many log messages, because of wiring trace options. When everything has settled down, the bundle list may be obtain with the command `ss`, which produces the list of bundles as seen below. When refreshing the Spring ORM bundle (which has **id 15** in the example below), the wiring message above can be seen on the console:  ``` osgi> refresh 15 ```  ## List of bundles  ``` id      State       Bundle 0       ACTIVE      org.eclipse.osgi_3.5.1.R35x_v20090827 1       ACTIVE      org.eclipse.osgi.util_3.2.0.v20090520-1800 2       ACTIVE      org.eclipse.osgi.services_3.2.0.v20090520-1800 3       ACTIVE      com.springsource.org.apache.log4j_1.2.15 4       ACTIVE      org.ops4j.pax.logging.pax-logging-api_1.4.0 5       ACTIVE      org.ops4j.pax.logging.pax-logging-service_1.4.0 6       ACTIVE      org.springframework.aop_3.0.1.RELEASE-A 7       ACTIVE      org.springframework.asm_3.0.1.RELEASE-A 8       ACTIVE      org.springframework.aspects_3.0.1.RELEASE-A 9       ACTIVE      org.springframework.beans_3.0.1.RELEASE-A 10      ACTIVE      org.springframework.context_3.0.1.RELEASE-A 11      ACTIVE      org.springframework.context.support_3.0.1.RELEASE-A 12      ACTIVE      org.springframework.core_3.0.1.RELEASE-A 13      ACTIVE      org.springframework.expression_3.0.1.RELEASE-A 14      ACTIVE      org.springframework.jdbc_3.0.1.RELEASE-A 15      ACTIVE      org.springframework.orm_3.0.1.RELEASE-A 16      ACTIVE      org.springframework.oxm_3.0.1.RELEASE-A 17      ACTIVE      org.springframework.transaction_3.0.1.RELEASE-A 18      ACTIVE      org.springframework.web_3.0.1.RELEASE-A 19      ACTIVE      org.springframework.web.servlet_3.0.1.RELEASE-A 20      ACTIVE      com.springsource.org.aopalliance_1.0.0 21      ACTIVE      com.springsource.org.objectweb.asm_2.2.3 22      ACTIVE      com.springsource.net.sf.cglib_2.2.0 23      ACTIVE      com.springsource.javax.annotation_1.0.0 24      ACTIVE      com.springsource.javax.el_1.0.0 25      ACTIVE      com.springsource.javax.ejb_3.0.0 26      ACTIVE      com.springsource.javax.mail_1.4.1 27      ACTIVE      com.springsource.javax.persistence_1.99.0 28      ACTIVE      com.springsource.javax.transaction_1.1.0 29      ACTIVE      com.springsource.javax.servlet_2.5.0 30      ACTIVE      com.springsource.javax.servlet.jsp_2.1.0 31      ACTIVE      com.springsource.javax.xml.rpc_1.1.0 32      ACTIVE      com.springsource.org.apache.commons.beanutils_1.8.0 33      ACTIVE      com.springsource.org.apache.commons.collections_3.2.1 34      ACTIVE      com.springsource.org.apache.commons.codec_1.3.0 35      ACTIVE      com.springsource.org.apache.commons.dbcp_1.2.2.osgi 36      ACTIVE      com.springsource.org.apache.commons.el_1.0.0 37      ACTIVE      com.springsource.org.apache.commons.digester_1.8.1 38      ACTIVE      com.springsource.org.apache.commons.fileupload_1.2.1 39      ACTIVE      com.springsource.org.apache.commons.httpclient_3.1.0 40      ACTIVE      com.springsource.org.apache.commons.io_1.4.0 41      ACTIVE      com.springsource.org.apache.commons.lang_2.4.0 42      ACTIVE      com.springsource.org.apache.commons.pool_1.5.3 43      ACTIVE      com.springsource.org.apache.commons.validator_1.3.1 44      ACTIVE      com.springsource.org.apache.oro_2.0.8 45      ACTIVE      com.springsource.org.apache.ivy_2.0.0 46      ACTIVE      com.springsource.org.apache.tools.ant_1.7.1 47      ACTIVE      com.springsource.antlr_2.7.7 48      ACTIVE      com.springsource.org.dom4j_1.6.1 49      ACTIVE      com.springsource.javassist_3.9.0.GA 50      ACTIVE      com.springsource.org.objectweb.asm_1.5.3 51      ACTIVE      com.springsource.org.jboss.cache_3.2.0.GA 52      ACTIVE      com.springsource.org.jboss.util_2.2.13.GA 53      ACTIVE      com.springsource.org.jboss.logging_2.0.5.GA 54      ACTIVE      com.springsource.org.jgroups_2.5.1 55      ACTIVE      com.springsource.net.sf.ehcache_1.6.2 56      ACTIVE      com.springsource.org.hibernate.annotations.common_3.3.0.ga 57      RESOLVED    com.springsource.org.hibernate.annotations_3.4.0.GA                     Master=59 58      RESOLVED    com.springsource.org.hibernate.cache_3.3.2.GA                     Master=59 59      ACTIVE      com.springsource.org.hibernate_3.3.2.GA                     Fragments=57, 58 60      ACTIVE      com.springsource.org.xmlpull_1.1.4.c 61      RESOLVED    com.springsource.org.apache.xerces_2.9.1                     Master=65 62      ACTIVE      com.springsource.org.apache.xalan_2.7.1 63      ACTIVE      com.springsource.org.apache.xml.serializer_2.7.1 64      ACTIVE      com.springsource.org.apache.xml.resolver_1.2.0 65      ACTIVE      com.springsource.org.apache.xmlcommons_1.3.4                     Fragments=61 66      ACTIVE      com.springsource.org.apache.xml.security_1.4.2 67      ACTIVE      org.eclipse.equinox.util_1.0.100.v20090520-1800 68      ACTIVE      org.eclipse.equinox.ds_1.1.1.R35x_v20090806 69      ACTIVE      org.eclipse.equinox.cm_1.0.100.v20090520-1800 70      ACTIVE      org.eclipse.equinox.supplement_1.1.0.v20080421-2006 71      ACTIVE      org.eclipse.equinox.common_3.4.0.v20080421-2006 72      ACTIVE      org.eclipse.equinox.preferences_3.2.201.R34x_v20080709 73      ACTIVE      org.ops4j.pax.url.assembly_1.1.1 74      ACTIVE      org.ops4j.pax.url.classpath_1.1.1 75      ACTIVE      org.ops4j.pax.url.cache_1.1.1 76      ACTIVE      org.ops4j.pax.url.mvn_1.1.1 77      ACTIVE      org.ops4j.pax.url.link_1.1.1 78      ACTIVE      org.ops4j.pax.url.war_1.1.1 79      ACTIVE      org.ops4j.pax.url.wrap_1.1.1 ```    ---  **Affects:** 3.0.1  **Attachments:** - [spring-hibernate-test.zip](https://jira.spring.io/secure/attachment/16316/spring-hibernate-test.zip) (_2.80 kB_)","closed","status: declined,","spring-projects-issues","2010-03-18T00:17:17Z","2019-01-12T16:38:05Z"
"","11166","Consider requiring explicit @PathVariable value [SPR-6500]","**[Willie Wheeler](https://jira.spring.io/secure/ViewProfile.jspa?name=wwheeler)** opened **[SPR-6500](https://jira.spring.io/browse/SPR-6500?redirect=false)** and commented  In the new REST support, I saw in the reference manual that one can suppress the `@PathVariable` value in cases where the build is compiled with debugging enabled. This strikes me as an anti-feature; I don't think it makes sense to support a style of coding where the application breaks if debugging is disabled. I would suggest simply removing that capability and simply requiring the `@PathVariable` value to be explicitly set in all cases.   ---  **Affects:** 3.0 RC3","closed","type: enhancement,","spring-projects-issues","2009-12-02T17:14:21Z","2015-09-22T17:45:51Z"
"","11053","Add support for the HIbernate RegionFactory cache API to LocalSessionFactoryBean [SPR-6387]","**[William Ashley](https://jira.spring.io/secure/ViewProfile.jspa?name=washley)** opened **[SPR-6387](https://jira.spring.io/browse/SPR-6387?redirect=false)** and commented  LocalSessionFactoryBean currently supports configuring hibernate with a spring-managed CacheProvider, however this API is deprecated and the new one is based on org.hibernate.cache.RegionFactory. It would be nice to have similar functionality in the LocalSessionFactoryBean for this new API.  ---  **Issue Links:** - #11470 Hibernate cache SPI integration -> LocalRegionFactoryProxy needs a LocalRegionFactoryProxy(Properties) constructor - #11125 Hibernate support does not support Hibernate 3.2 (only 3.3) - #11471 Hibernate cache SPI integration -> LocalRegionFactoryProxy does not implement Hibernate 3.5's getDefaultAccessType()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1cf0c126745aace71bb0b47bdf72ce551e5b5a64, https://github.com/spring-projects/spring-framework/commit/eb0b4f0cbd6d981e6864d4f02bc04b678be4cd1c","closed","type: enhancement,","spring-projects-issues","2009-11-18T06:44:31Z","2019-01-11T14:38:47Z"
"","11034","PropertyPlaceholder Value not resolved with ExecutorBeanDefinitionParser (""Invalid pool-size value [${task.executors}]"") [SPR-6368]","**[Willi Wurzer](https://jira.spring.io/secure/ViewProfile.jspa?name=williausrohr)** opened **[SPR-6368](https://jira.spring.io/browse/SPR-6368?redirect=false)** and commented  I have      ${task.schedulers} gets resolved, ${task.executors} not  SchedulerBeanDefinitionParser uses builder.addPropertyValue(""poolSize"", poolSize)  ExecutorBeanDefinitionParser parses the unresolved attribute String poolSize = element.getAttribute(""pool-size"");   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a6b6ba88dc96b4121d103bb54471acf49320bc3b","closed","in: core,","spring-projects-issues","2009-11-16T20:03:20Z","2012-06-19T03:44:06Z"
"","11264","@RequestMapping no longer seems to support multiple directory matching (**/) [SPR-6598]","**[Will Ryan](https://jira.spring.io/secure/ViewProfile.jspa?name=willryanuk)** opened **[SPR-6598](https://jira.spring.io/browse/SPR-6598?redirect=false)** and commented  Have recently upgraded to Spring 3 and a number of RequestMapping annotations no longer appear to match. Previously, I could use  `@RequestMapping`(""**/company"")  to match all urls with company in it no matter how many directories deep. Now I need to be more precise with my matcher:  `@RequestMapping`(""/*/company"")  Has this ANT-style directory matching been dropped?   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e74b33242b7e0f720183da7eb43fb020aabd55bf","closed","type: bug,","spring-projects-issues","2009-12-21T20:47:53Z","2012-06-19T03:44:15Z"
"","10914","Velocity MethodInvocationExceptions not properly reported [SPR-6246]","**[Will Glass-Husain](https://jira.spring.io/secure/ViewProfile.jspa?name=wglass)** opened **[SPR-6246](https://jira.spring.io/browse/SPR-6246?redirect=false)** and commented  My velocity properties include the following \  (I'm using Velocity 1.6.2)  This will throw a MethodInvocationException (runtime exception, as of Velocity 1.5) if a reference is incorrect.  When I have a bad reference in my page (example: $!user.firstName when $user is not available in the context), I get a runtime error reported in my browser.  (This is good).  The problem is that the Velocity error is not wrapped correctly due to an apparent bug in NestedServletException which does not wrap the cause.  The actual error reported:  org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: Can't overwrite cause org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:583) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)  ...  com.forio.servlet.RequestEncodingFilter.doFilter(RequestEncodingFilter.java:37)  root cause  java.lang.IllegalStateException: Can't overwrite cause java.lang.Throwable.initCause(Throwable.java:320) org.springframework.web.util.NestedServletException.\(NestedServletException.java:65) org.springframework.web.servlet.view.velocity.VelocityView.mergeTemplate(VelocityView.java:556) org.springframework.web.servlet.view.velocity.VelocityLayoutView.doRender(VelocityLayoutView.java:162)  root cause  org.springframework.web.servlet.view.AbstractTemplateView.renderMergedOutputModel(AbstractTemplateView.java:174) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:257) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1183) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:902) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:807) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)  This is due to the following code in VelocityView:  protected void mergeTemplate( Template template, Context context, HttpServletResponse response) throws Exception {  try { template.merge(context, response.getWriter()); } catch (MethodInvocationException ex) { throw new NestedServletException( ""Method invocation failed during rendering of Velocity view with name '"" + getBeanName() + ""': "" + ex.getMessage() + ""; reference ["" + ex.getReferenceName() + ""], method '"" + ex.getMethodName() + ""'"", ex.getWrappedThrowable()); } }  specifically failing on the ""initCause"" line in NestedServletException:  public NestedServletException(String msg, Throwable cause) { super(msg, cause); // Set JDK 1.4 exception chain cause if not done by ServletException class already // (this differs between Servlet API versions). if (getCause() == null) { initCause(cause); } }  I have solved this by creating a CustomVelocityView which just lets the MethodException pass through.  protected void mergeTemplate(Template template, Context context, HttpServletResponse response) throws { template.merge(context, response.getWriter()); }  Then I get the much more useful message:  org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.apache.velocity.exception.MethodInvocationException: Variable $user has not been set at layout/slide_login.vm[line 13, column 117] org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:583) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)    ---  **Affects:** 2.5 final  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e85c66f2f42bde85dd83b4d2482bfe8d7bff488, https://github.com/spring-projects/spring-framework/commit/bce723d9e3f0b8b7ac730852963a027854cc6db7, https://github.com/spring-projects/spring-framework/commit/c63cdb2444f10b53ac662cf7d80a4bff1c1ad85b","closed","type: bug,","spring-projects-issues","2009-10-16T03:29:24Z","2012-06-19T03:43:59Z"
"","11773","Spring Groovy Beans cannot be debugged, because information about source file is lost during bean instantiation [SPR-7113]","**[Vladislavs Korehovs](https://jira.spring.io/secure/ViewProfile.jspa?name=vladlv)** opened **[SPR-7113](https://jira.spring.io/browse/SPR-7113?redirect=false)** and commented  GroovyScriptFactory class is stipping off file information while script class is instantiated:  this.scriptClass = getGroovyClassLoader().parseClass(scriptSource.getScriptAsString(), scriptSource.suggestedClassName());  This is a big problem because this code cannot be debugged after this!!! However File information can usually be extracted at least from ""file:"" locations(not sure about classpath:)  My proposition is something like this:      File scriptFile = null;     if(scriptSource instanceof ResourceScriptSource) {              Resource resource = ((ResourceScriptSource)scriptSource).getResource();              if(resource instanceof UrlResource) {                       scriptFile = ((UrlResource)resource).getFile();              }     }     //     if(scriptFile != null) {         this.scriptClass = getGroovyClassLoader().parseClass(scriptFile);     }     else {this.scriptClass = getGroovyClassLoader().parseClass(scriptSource.getScriptAsString(), scriptSource.suggestedClassName());					  }   ---  **Affects:** 3.0.2  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-19T22:07:34Z","2015-09-22T17:34:38Z"
"","11790","oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' is back [SPR-7130]","**[Viczai Gábor](https://jira.spring.io/secure/ViewProfile.jspa?name=gviczai)** opened **[SPR-7130](https://jira.spring.io/browse/SPR-7130?redirect=false)** and commented  We are currently working on an enterprise project for one of our biggest clients. We are using Spring 2.0 and Spring Web Flow 1.0 Rc4. While deploying the application to Oracle 9ias 10.1.2.0.2 in our development environment, we encountered the following error. We experienced the same error in Spring 2.0 RC2 and it was fixed in Spring 2.0 RC3 by Rick Evans. The ticket No is SPR - 2290. Kindly fix the bug. I will attach the XMLParser Oracle uses so you guys can test it. This is a critical error and we are unable to move forward.  EXCEPTION FROM THE LOG FILE:  ---  06/10/11 17:58:18 Started 06/10/11 17:58:21 drlm: jsp: init 06/10/11 17:58:21 drlm: context: init 06/10/11 17:58:21 drlm: Loading Spring root WebApplicationContext 06/10/11 17:58:52 drlm: Error initializing servlet org.springframework.beans.factory.BeanDefinitionStoreException: Line 8 in XML document from ServletContext resource [/WEB-INF/drlm-servlet.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' at oracle.xml.parser.v2.XMLError.flushErrorHandler(XMLError.java:444) at oracle.xml.parser.v2.XMLError.flushErrors1(XMLError.java:303) at oracle.xml.parser.v2.NonValidatingParser.parseDocument(NonValidatingParser.java:290) at oracle.xml.parser.v2.XMLParser.parse(XMLParser.java:196) at oracle.xml.jaxp.JXDocumentBuilder.parse(JXDocumentBuilder.java:151) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:83) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.evermind.server.http.HttpApplication.loadServlet(HttpApplication.java:2354) at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4795) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: Error preloading servlet javax.servlet.ServletException: Error initializing servlet at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4846) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: drlm: init 06/10/11 17:58:52 drlm: Loading WebApplicationContext for Spring FrameworkServlet 'drlm' 06/10/11 17:58:52 drlm: Error initializing servlet org.springframework.beans.factory.BeanDefinitionStoreException: Line 8 in XML document from ServletContext resource [/WEB-INF/drlm-servlet.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' at oracle.xml.parser.v2.XMLError.flushErrorHandler(XMLError.java:444) at oracle.xml.parser.v2.XMLError.flushErrors1(XMLError.java:303) at oracle.xml.parser.v2.NonValidatingParser.parseDocument(NonValidatingParser.java:290) at oracle.xml.parser.v2.XMLParser.parse(XMLParser.java:196) at oracle.xml.jaxp.JXDocumentBuilder.parse(JXDocumentBuilder.java:151) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:83) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.evermind.server.http.HttpApplication.loadServlet(HttpApplication.java:2354) at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4795) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: Error preloading servlet javax.servlet.ServletException: Error initializing servlet at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4846) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: dwr-invoker: init 06/10/11 17:58:53 drlm: Started  drlm-servlet.xml file:  ---  \  \  \    - Message source for this context, loaded from localized ""messages_xx"" files.   - Could also reside in the root application context, as it is generic,   - but is currently just used within DRLM's web tier.     -->       	              uk.ltd.getahead.dwr.DWRServlet   dwr-invoker    true                            		   		           flowController   				  drlmMainMenuController                                                     	              	   	                                            	   	   	              	  \  ---  **Affects:** 2.0 final  **Issue Links:** - #6979 oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' in spring-util.xsd. We are unable to start OC4j Server.  9 votes, 10 watchers","closed","in: core,","spring-projects-issues","2010-04-24T22:41:33Z","2019-01-13T21:46:14Z"
"","11755","Email message is truncated when large text without spaces  is sent through JavaMailSender [SPR-7095]","**[Venkata Kishore Chegondi](https://jira.spring.io/secure/ViewProfile.jspa?name=chvenkatakishore)** opened **[SPR-7095](https://jira.spring.io/browse/SPR-7095?redirect=false)** and commented  Hi we are implementing the below code  private JavaMailSender mailSender;  public void sendEmail(InternetAddress addressTo, InternetAddress addressFrom, InternetAddress[] addressBcc, StringWriter htmlBody, StringWriter txtBody, StringWriter subject, List\ attachments)   throws FailedToSendEmailException, InvalidEmailAddressException {      try {          MimeMessage message = mailSender.createMimeMessage();               MimeMessageHelper helper  = new MimeMessageHelper(message, true, ""UTF-8"");               if(addressTo.getAddress() != null){               helper.setTo(addressTo);          }               helper.setFrom(addressFrom);               if(addressBcc != null){               helper.setBcc(addressBcc);          }               helper.setText(txtBody.toString(), htmlBody.toString());          helper.setSubject(subject.toString());               if ((null != attachments) && (attachments.size() > 0)) {               for (EmailAttachement eA:attachments) {                    helper.addAttachment(eA.getFileName(), eA.getFile());               }          }          if(logger.isInfoEnabled()){               logger.info(""Sending email to "" + addressTo!=null?addressTo.getAddress():null);               logger.info(""Sending BCC email to "" + addressBcc != null?InternetAddress.toString(addressBcc):null);          }          mailSender.send(message);     }   If we are setting large text without spaces(say 4000 characters) in helper.setText(), in the email which we recieve the text is truncated  to 284 characters.   --- No further details from [SPR-7095](https://jira.spring.io/browse/SPR-7095?redirect=false)","closed","in: core,","spring-projects-issues","2010-04-14T03:55:57Z","2019-01-12T16:38:03Z"
"","11325","Missing  around two annotations [SPR-6659]","**[Valentin Crettaz](https://jira.spring.io/secure/ViewProfile.jspa?name=consulthys)** opened **[SPR-6659](https://jira.spring.io/browse/SPR-6659?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/testing.html#testcontext-support-classes  In the section Custom JUnit 4.5+ Runner  `@TestExecutionListeners` and `@ContextConfiguration` should be wrapped in \\   ---  **Affects:** 3.0 GA","closed","type: documentation,","spring-projects-issues","2010-01-07T23:43:22Z","2012-06-19T03:42:55Z"
"","11324","Typo in the Spring reference documentation (chapter 9. Testing) [SPR-6658]","**[Valentin Crettaz](https://jira.spring.io/secure/ViewProfile.jspa?name=consulthys)** opened **[SPR-6658](https://jira.spring.io/browse/SPR-6658?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/testing.html#testcontext-support-classes  In section Custom JUnit 4.5+ Runner  `@Runwith`(SpringJUnit4ClassRunner.class) should read `@RunWith`(SpringJUnit4ClassRunner.class)   ---  **Affects:** 3.0 GA","closed","type: documentation,","spring-projects-issues","2010-01-07T23:40:33Z","2012-06-19T03:44:14Z"
"","11323","Typo in the MVC documentation [SPR-6657]","**[Valentin Crettaz](https://jira.spring.io/secure/ViewProfile.jspa?name=consulthys)** opened **[SPR-6657](https://jira.spring.io/browse/SPR-6657?redirect=false)** and commented  In the Spring reference documentation (http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html), chapter 15 MVC, first paragraph, `@PathVarariable` should read `@PathVariable`   ---  **Affects:** 3.0 GA","closed","type: documentation,","spring-projects-issues","2010-01-07T23:20:52Z","2012-06-19T03:43:08Z"
"","11872","Per-Controller MessageConverter [SPR-7213]","**[Tyler Vallillee](https://jira.spring.io/secure/ViewProfile.jspa?name=tkvallil)** opened **[SPR-7213](https://jira.spring.io/browse/SPR-7213?redirect=false)** and commented  I would like to know whether there is a way to specify the order of message converters on a per-controller basis.  For example, let's assume I have the following POJO:  ``` @XmlRootElement(""foo"") public class Foo {     private String messageText;    private Integer messageId;  ... //getters and setters skipped } ```  And I have the following controllers. First, a controller whose clients expect XML to be returned:  ``` @Controller public MyXmlController {  	@RequestMapping(value=""/{id}"", method=RequestMethod.GET) 	public @ResponseBody Foo getFooById(@PathVariable int id) { 		 		Foo foo = myService.getFooById(id); 		return foo; 	} } ```  and now a controller whose clients expect JSON back:  ``` @Controller public MyJsonController {  	@RequestMapping(value=""/{id}"", method=RequestMethod.GET) 	public @ResponseBody Foo getFooForUser(@PathVariable int id) { 		 		Foo foo = myService.getFooByUser(id); 		return foo; 	} } ```  Now in my servlet.xml file, I have the following to handle `@ResponseBody` marshalling:  ```                                                                                                                                                                                                                      ```  The limitation here is that, given a HTTP request with an ""Accept: *"" header (as is typical from most web browsers) the data from MyJsonController will always be returned as XML as the XML marshaller is the first listed messageConverter for the AnnotationMethodHandlerAdapter.  Is there a way I can specify a different ordered messageConverter list that the JsonController could reference?  I am aware of ContentNegotiatingViewResolver, however in my case the API paths are legacy and difficult to update.  It would be ideal if my controller could give a hint to the MessageConverter it prefers, or if it could have its own preferred list of MessageConverters   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?p=299622","closed","type: enhancement,","spring-projects-issues","2010-05-18T02:54:43Z","2019-01-11T13:18:14Z"
"","11844","Web Interceptor consumes InputStream before MessageConverter [SPR-7185]","**[Tyler Vallillee](https://jira.spring.io/secure/ViewProfile.jspa?name=tkvallil)** opened **[SPR-7185](https://jira.spring.io/browse/SPR-7185?redirect=false)** and commented  I have a web controller that is registered with an interceptor.  The intercepter overrides the preHandle method of HandlerInterceptorAdapter.  My web controller methods use HttpMessageConverters to unmarshall request data for a `@RequestBody` parameter.  When I do not use the intercepter, the unmarshalling occurs properly and I receive a properly initialized POJO in my controller method.  However, when I do use the intercepter, the unmarshaller returns an uninitialized POJO.  Digging into the source code shows the ""inputMessage.getBody()"" call of the HttpMessageConverter returns an empty string.  My assumption is that the preHandle method of the intercepter parsed the input stream and thus the input stream is empty.  Ideally, the interceptor would not consume the input stream and leave it in the same state as it was before the intercepter was invoked.  Example:  Intercepter:  ```  public class RequestLoggerInterceptor extends HandlerInterceptorAdapter {          @Override 	public boolean preHandle( HttpServletRequest req, HttpServletResponse resp, Object handler) throws Exception { 		String userId = req.getParameter(""userId""); 		String path = req.getServletPath();                 return true;         } } ```  Controller:  ``` @RequestMapping(value=""/{entryType}"" ,method=RequestMethod.POST) public void doProcessPOST(@PathVariable String entryType, @RequestBody EntryCommand command, HttpServletRequest request, HttpServletResponse response) throws Exception {      processRequest(entryType, command, request, response);     }	 ```  Note that when the intercepter is disabled, I get a fully initialized command object.  With the intercepter, the command object is empty.   ---  **Affects:** 3.0.2","closed","status: invalid,","spring-projects-issues","2010-05-10T11:17:42Z","2019-01-12T05:32:05Z"
"","11696","XmlBeans UnMarshalling - does not work with RequestBody annotation [SPR-7034]","**[Tyler Vallillee](https://jira.spring.io/secure/ViewProfile.jspa?name=tkvallil)** opened **[SPR-7034](https://jira.spring.io/browse/SPR-7034?redirect=false)** and commented  When unmarshalling controller parameters using the ""`@RequestBody`"" annotation and XmlBeans, I get spurious unmarshalling exceptions: ""Unexpected end of file after null""  These errors seem to be pretty consistent after the first request  XmlBeans has identified this issue as an input stream problem: http://issues.apache.org/jira/browse/XMLBEANS-226  It looks like Spring may not be handling input streams in an XmlBeans-friendly manner.  Here is my unmarshaller config:  ```xml                                                                                               ```  Here is my controller method:  ```java @RequestMapping(method = RequestMethod.POST) @ResponseBody public SampleResponseDocument doMethod(@RequestBody SampleRequestDocument requestDocument) {                return myservice.sampleMethod(requestDocument);  } ```  The method body is reached in the first invocation, but almost all subsequent invocations give the XmlBeans end of file error.  Please let me know if more information is needed   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f836601e0f6d55e3dd1117346773ab17dd85b5be","closed","type: bug,","spring-projects-issues","2010-03-24T11:19:48Z","2012-06-19T03:43:34Z"
"","11698","BeanMetadataAttribute with multiple values [SPR-7036]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-7036](https://jira.spring.io/browse/SPR-7036?redirect=false)** and commented  There are times when same key would require multiple values but currently both qualifier \ and \ tags override the previous values. This makes array based qualifier methods impossible as well as restricts more elaborate LDAP attribute style meta-data from being used.  New BeanMetadataAttribute#getValues() similar to JNDI Attribute#getAll() would solve this problem without breaking existing implementations.  BeanMetadataAttributeAccessor#addMetadataAttribute could also retain the functionality backwards compatible if new method similar to Attribute#add() is introduced. BeanMetadataAttribute would become mutable but with MutablePropertyValues style approach with along with casting it could remain immutable.   ---  **Affects:** 2.5.6, 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-03-24T23:43:34Z","2018-12-28T11:37:23Z"
"","11802","UrlPathHelper could make use of request.getPathInfo in some special cases [SPR-7143]","**[Triqui Galletas](https://jira.spring.io/secure/ViewProfile.jspa?name=triqui)** opened **[SPR-7143](https://jira.spring.io/browse/SPR-7143?redirect=false)** and commented  As explained in the thread referenced ([welcome-file-list not being fully honoured](http://forum.springsource.org/showthread.php?t=79758)), the method getPathWithinServletMapping returns the _wrong_ path when a welcome file in web.xml is pointing to a controller mapping.  ```xml     myservelt    /app/*       app/welcome  ```  Adding a check to see if request.getPathInfo is not null, would fix the problem. This behavior is already the default in FlowUrlHandler. I paste below a modified method with the values returned when http://server/context in accessed.  ```    public String getPathWithinServletMapping(HttpServletRequest request) {       String pathWithinApp = getPathWithinApplication(request);   //","closed","type: bug,","spring-projects-issues","2010-04-27T22:04:12Z","2012-06-19T03:43:22Z"
"","11707","Allow global hibernate filters with parameters for all Sessions that an accessor works with [SPR-7046]","**[Triqui Galletas](https://jira.spring.io/secure/ViewProfile.jspa?name=triqui)** opened **[SPR-7046](https://jira.spring.io/browse/SPR-7046?redirect=false)** and commented  The methods [HibernateAccessor.setFilterName](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/orm/hibernate3/HibernateAccessor.html#setFilterName(java.lang.String)) and [HibernateAccessor.setFilterNames](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/orm/hibernate3/HibernateAccessor.html#setFilterNames(java.lang.String\[\))] are ok, but there are many situations where parameters need to be added to the filters. The method [HibernateTemplate.enableFilter](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/orm/hibernate3/HibernateTemplate.html#enableFilter(java.lang.String)) is not good enough since it applies to current session only.  It would be great modify HibernateAccessor with something like this:  ``` public void setFilter(String filterName, Map parameters) {     this.filters.put(filterName, parameters); }  protected void enableFilters(Session session) {     Map filters = getFilters();     if (filters != null) {         for (String filterName : filters.keySet()) {             Filter filter = session.enableFilter(filterName);             Map parameters = filters.get(filterName);             for (String parameterName : parameters.keySet()) {                 parameterValue = parameters.get(parameterName);                 if (parameterValue instanceof Collection                  || parameterValue.getClass().isArray()) {                     filter.setParameterList(parameterName, parameterValue);                  } else {                     filter.setParameter(parameterName, parameterValue);                  }             }         }     } } ```  That would apply those filters to all sessions the same way.  PS: I messed up everything when trying to create this issue related to a previous one, and so I created two other issues that should be deleted: [SPR-7026](http://jira.springframework.org/browse/SPR-7026) and [SPR-7045](http://jira.springframework.org/browse/SPR-7045). If someone could fix those, please!!   ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-03-29T00:38:45Z","2018-12-28T10:57:51Z"
"","11496","Add setStripTrailingSlash to DefaultRequestToViewNameTranslator [SPR-6830]","**[Triqui Galletas](https://jira.spring.io/secure/ViewProfile.jspa?name=triqui)** opened **[SPR-6830](https://jira.spring.io/browse/SPR-6830?redirect=false)** and commented  I think it would be nice to be able to remove trailing slash when translating requests to views. In my case I've been forced to subclass DefaultRequestToViewNameTranslator to do it.  see http://forum.springsource.org/showthread.php?t=84648.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=84648  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/103ac0359d1b725bab3bb8e64df04255c0846338","closed","type: enhancement,","spring-projects-issues","2010-02-12T02:30:50Z","2012-06-19T03:44:02Z"
"","11456","form input tag disabled attribute only works for string input [SPR-6790]","**[Travis Dixon](https://jira.spring.io/secure/ViewProfile.jspa?name=thetrav)** opened **[SPR-6790](https://jira.spring.io/browse/SPR-6790?redirect=false)** and commented  AbstractHtmlInputElementTag.isDisabled has the single line: return ""true"".equals(evaluate(""disabled"", getDisabled()));  When getDisabled has the el ${true} evaluate returns Boolean.TRUE which is of a different type to the String ""true"" so .equals resolves to false.  A solution would be: final Object eval = evaluate(""disabled"", getDisabled()); return eval == null ? false : ""true"".equals(eval.toString());  This would better match the description of the disabled element in the tld: http://static.springsource.org/spring/docs/2.0.x/reference/spring-form.tld.html#spring-form.tld.input ""HTML Optional Attribute. Setting the value of this attribute to 'true' (without the quotes) will disable the HTML element.""   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=281813  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d897e7ab5ca713afd386664acde33ed1996b6f0","closed","type: enhancement,","spring-projects-issues","2010-02-02T09:09:37Z","2012-06-19T03:44:09Z"
"","11122","ReloadableResourceBundleMessageSource should be searching for any matching ResourceBundle [SPR-6456]","**[Tor Anders Johansen](https://jira.spring.io/secure/ViewProfile.jspa?name=toralux)** opened **[SPR-6456](https://jira.spring.io/browse/SPR-6456?redirect=false)** and commented  The current implementation of ReloadableResourceBundleMessageSource does only search for one matching ResourceBundle, the first found in the path specified by a basename, for every basename if several basenames is listed.  This is because of that the refreshProperties()-method calls the ResourceLoader-interfaces getResource()-method, even if an object implementing the ResourcePatternResolver-interface is available. (The ResourcePatternResolver-interface has a getResources()-method and will return all matching ResourceBundles, and has also other advantages as it support asterisk and double-asterisk for the basename as this example:  ```xml          classpath*:com/company/**/i18n     classpath*: i18n/i18n     ```  About the example: The first basename will search for i18n at any arbitrary location below the com/company, thus having more flexibility. The second basename will search for any i18n ResourceBundle found in a i18n-folder. Even if the solution is divided into modules / consists of several subprojects, any ResourceBundle from any of those modules will be will be loaded. This way it is easier to for instance maintain different translations for each module in the solution.  I have encountered threads discussing this limitation on the Spring forum: http://forum.springsource.org/showthread.php?t=57650 http://forum.springsource.org/showthread.php?t=80555  A proposed solution: The class ReloadableResourceBundleMessageSource has a private member ""private ResourceLoader resourceLoader"".  Instead of always using the limited functionality of the ResourceLoader-interface, I suggest (and apply a patch) for using the more extended functionality of ResourcePatternResolver-interface if the injected object is actually implementing the ResourcePatternResolver-interface (which is a super-interface of the ResourceLoader-interface).  If no object is injected I propose that an instance of the PathMatchingResourcePatternResolver-class (which implements the ResourcePatternResolver-interface) is used as default instead of an instance of the DefaultResourceLoader-class (which implements the ResourceLoader-interface). I provide a new implementation of the refreshProperties()-method that considers what interface the injected object implements; ""if (resourceLoader instanceof ResourcePatternResolver) ...""  Provided path:  ``` public class ReloadableResourceBundleMessageSource extends AbstractMessageSource     implements ResourceLoaderAware {  --	private ResourceLoader resourceLoader = new DefaultResourceLoader(); ++	private ResourceLoader resourceLoader = new PathMatchingResourcePatternResolver();          public void setResourceLoader( ResourceLoader resourceLoader )         { --		this.resourceLoader = (resourceLoader != null ? resourceLoader : new DefaultResourceLoader()); ++        	this.resourceLoader = (resourceLoader != null ? resourceLoader : new PathMatchingResourcePatternResolver());         }          protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) {                 long refreshTimestamp = (this.cacheMillis < 0) ? -1 : System.currentTimeMillis();                  Properties mergedProps = new Properties();                 PropertiesHolder mergedHolder = new PropertiesHolder(mergedProps, -1);                                  Resource[] resources = null;                 try                 {                     if (resourceLoader instanceof ResourcePatternResolver)                     {                         ResourcePatternResolver resolver = (ResourcePatternResolver)resourceLoader;                         resources = resolver.getResources(filename + PROPERTIES_SUFFIX);                         if (resources.length","closed","type: enhancement,","spring-projects-issues","2009-11-26T20:34:40Z","2015-09-22T17:34:38Z"
"","11501","SchedulerAccessor uses a protected log, so if the class is inherited, you may get the wrong line number of caller class [SPR-6835]","**[Tomer Cohen](https://jira.spring.io/secure/ViewProfile.jspa?name=tomerc)** opened **[SPR-6835](https://jira.spring.io/browse/SPR-6835?redirect=false)** and commented  Right now the log in the class is defined as: protected final Log logger = LogFactory.getLog(getClass());  this causes incorrect results in the log (specifically in line number of caller) when inheriting from this class.   ---  **Affects:** 3.0 GA","closed","status: bulk-closed,","spring-projects-issues","2010-02-14T00:39:01Z","2019-01-12T03:50:32Z"
"","10948","default PathVariable and RequestParam values [SPR-6281]","**[Tomas Vojtech](https://jira.spring.io/secure/ViewProfile.jspa?name=blaf)** opened **[SPR-6281](https://jira.spring.io/browse/SPR-6281?redirect=false)** and commented  Support for default PathVariable and RequestParam values would be nice.  For now if I have  ```java @RequestMapping(""/x/{x}/y/{y}"") public String meth(@PathVariable int x, @PathVariable int y) {  } ```  it ends with an exception for url http://server/x/5 because there's no appropriate handler. I mean it would be nice to be able to write  ```java @RequestMapping(""/x/{x}/y/{y}"") public String meth(@PathVariable int x, @PathVariable(default = ""1"") int y) {  } ```  so this value would be used if no value in url.   --- No further details from [SPR-6281](https://jira.spring.io/browse/SPR-6281?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-10-27T21:58:40Z","2012-06-19T02:28:18Z"
"","10947","PathVariable resolution does not work properly [SPR-6280]","**[Tomas Vojtech](https://jira.spring.io/secure/ViewProfile.jspa?name=blaf)** opened **[SPR-6280](https://jira.spring.io/browse/SPR-6280?redirect=false)** and commented  For controller  ```java @Controller @RequestMapping(""/category"") public class CategoryController extends AbstractCsController {      @Autowired     private ICraftService craftService;      @RequestMapping(value = {""/{category}/page/{page}"", ""/**/{category}/page/{page}""})     public String category(@PathVariable String category, @PathVariable int page, Model model) {         model.addAttribute(""categories"", craftService.findSubcategories(category));         return ""craft/category"";     }      @RequestMapping(value = {""/{category}"", ""/**/{category}""})     public String category(@PathVariable String category, Model model) {         return category(category, 1, model);     }      @RequestMapping(value = {""""})     public String category(Model model) {         return category(1, model);     }      @RequestMapping(value = {""/page/{page}""})     public String category(@PathVariable int page, Model model) {         return category(null, page, model);     }  } ```  I get following error for url like localhost:8080/context/category/page/5  ``` org.springframework.web.bind.annotation.support.HandlerMethodInvocationException: Failed to invoke handler method [public java.lang.String net.tv.cs.craft.controller.CategoryController.category(int,org.springframework.ui.Model)]; nested exception is java.lang.IllegalStateException: Could not find @PathVariable [page] in @RequestMapping 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:164) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:378) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:366) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:781) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:726) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:636) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:545) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) 	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1093) 	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:125) 	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:76) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) 	at org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:57) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) 	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360) 	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) 	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) 	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726) 	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405) 	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206) 	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) 	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) 	at org.mortbay.jetty.Server.handle(Server.java:324) 	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505) 	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:829) 	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514) 	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) 	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380) 	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395) 	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:488) Caused by: java.lang.IllegalStateException: Could not find @PathVariable [page] in @RequestMapping 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.resolvePathVariable(AnnotationMethodHandlerAdapter.java:660) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolvePathVariable(HandlerMethodInvoker.java:542) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:282) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:156) 	... 35 more ```  Problem seems to be in AbstractUrlHandlerMapping.lookupHandler. MAybe in code:  ```java // Pattern match? String bestPathMatch = null; for (String registeredPath : this.handlerMap.keySet()) { 	if (getPathMatcher().match(registeredPath, urlPath) && 		(bestPathMatch == null || bestPathMatch.length() < registeredPath.length())) { 		bestPathMatch = registeredPath; 	} } ```  After ending this loop the **bestPathMatch** variable has value _/category/\*\*/{category}/_ but it should have _/category/page/{page}_. Because of this code ```java Map uriTemplateVariables = getPathMatcher().extractUriTemplateVariables(bestPathMatch, urlPath);  ```gives map with ```category -> 5 ``` entry, but should  ```page -> 5 ```. Because of the *uriTemplateVariables* doesn't contain the _page_ key it ends with the exception.  I think it is a bug because it resolves method handler correctly but the parameter resolution is not correct. ```  ---  **Affects:** 3.0 RC1  **Issue Links:** - #11148 `@RequestMapping` handled incorrectly when value contains ""."" (dot) character  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef50082cadd5fd835136c4c45a5d7e1c71f78098","closed","type: bug,","spring-projects-issues","2009-10-27T21:44:10Z","2019-01-13T07:57:36Z"
"","11492","Spring 3.0, EclipseLink 2.0.0 (JPA 2.0), getCriteriaBuilder() NullPointerException [SPR-6826]","**[Tomas Milo](https://jira.spring.io/secure/ViewProfile.jspa?name=tomsk)** opened **[SPR-6826](https://jira.spring.io/browse/SPR-6826?redirect=false)** and commented  With final version of Spring 3.0 after calling getCriteriaBuilder() I received following exception:  Exception in thread ""main"" java.lang.NullPointerException at org.eclipse.persistence.internal.jpa.metamodel.MetamodelImpl.initialize(MetamodelImpl.java:370) at org.eclipse.persistence.internal.jpa.metamodel.MetamodelImpl.\(MetamodelImpl.java:101) at org.eclipse.persistence.internal.jpa.metamodel.MetamodelImpl.\(MetamodelImpl.java:120) at org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl.getMetamodel(EntityManagerSetupImpl.java:1939) at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getMetamodel(EntityManagerFactoryImpl.java:472) at org.eclipse.persistence.internal.jpa.EntityManagerFactoryImpl.getCriteriaBuilder(EntityManagerFactoryImpl.java:456) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean$ManagedEntityManagerFactoryInvocationHandler.invoke(AbstractEntityManagerFactoryBean.java:431) at $Proxy6.getCriteriaBuilder(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:160) at $Proxy10.getCriteriaBuilder(Unknown Source) at dao.impl.TestDao.getCustomerBySurname(TestDao.java:32) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy12.getCustomerBySurname(Unknown Source) at service.impl.TestService.getCustomerBySurname(TestService.java:30) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:107) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy13.getCustomerBySurname(Unknown Source) at main.StartTest.main(StartTest.java:26)  In latest nightly snapshot (3.0.1.CI-577) it also doesn't work. With Spring 3.0 RC3 it works.   ---  **Affects:** 3.0 GA  **Attachments:** - [SpringJPATest.zip](https://jira.spring.io/secure/attachment/16172/SpringJPATest.zip) (_12.84 kB_)","closed","status: declined,","spring-projects-issues","2010-02-11T04:36:52Z","2019-01-12T16:38:15Z"
"","11454","The class MediaType has a natural ordering that is inconsistent with equals, which is generally recommended or should otherwise at least be indicated in the javadoc [SPR-6788]","**[Tomas Johansson](https://jira.spring.io/secure/ViewProfile.jspa?name=tomas_johansson)** opened **[SPR-6788](https://jira.spring.io/browse/SPR-6788?redirect=false)** and commented  For example, if you use these two strings: ""text/html; q=0.7; charset=iso-8859-1"" ""text/html; q=0.7"" then the compareTo method will return zero but equals will return false.  I suggest that a consistent implementation should either be fixed, or otherwise (if necessary for some reason ?) at least it should be mentioned in the javadoc that the natural ordering that is inconsistent with equals.  Example of JUnit test that I think should pass:  ``` 	@Test 	public void verifyConsistentImplementationOf_equals_And_compareTo() { 		verifyConsistentImplementationOf_equals_And_compareTo( 			MediaType.parseMediaType(""text/html; q=0.7; charset=iso-8859-1""), 			MediaType.parseMediaType(""text/html; q=0.7"") 		); 		verifyConsistentImplementationOf_equals_And_compareTo( 				[add more test cases ...] 		); 		[add more test cases ...] 	}  	private void verifyConsistentImplementationOf_equals_And_compareTo(MediaType mediaType1, MediaType mediaType2) { 		assertEquals(mediaType1.equals(mediaType2), mediaType1.compareTo(mediaType2) == 0); 	} ```  / Tomas Johansson   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-02-01T03:39:12Z","2012-06-19T03:43:56Z"
"","11452","The method org.springframework.http.MediaType.parseMediaType  does not always throw IllegalArgumentException as the documentantion claims [SPR-6786]","**[Tomas Johansson](https://jira.spring.io/secure/ViewProfile.jspa?name=tomas_johansson)** opened **[SPR-6786](https://jira.spring.io/browse/SPR-6786?redirect=false)** and commented  For example, the following invocation throws a StringIndexOutOfBoundsException:  ``` MediaType.parseMediaType(""audio""); ```  (because the implementation assumes existance of a slash and does not check the value of the index before trying to get the assumed substrings separated by slashes)  The following input string passes without getting IllegalArgumentException:  ``` MediaType mediaType = MediaType.parseMediaType(""audio/*;q=""); ```  but when you then invoke 'mediaType.getQualityValue()' you get a NumberFormatException. This validation should be taken care of by the parser method as the documentation claims.  Except from these kind of obvious and easy fixes, I wonder if there also should not be some kind of sanity check, or if it should be considered as correct behaviour that the following kind of test currently passes green:  ``` String mediaTypeUsedAsTypeAndSubtype = ""´`'*^~:.,@!$%&{}[]()&""; MediaType mediaType = MediaType.parseMediaType(mediaTypeUsedAsTypeAndSubtype + ""/"" + mediaTypeUsedAsTypeAndSubtype); assertEquals(mediaTypeUsedAsTypeAndSubtype, mediaType.getType()); assertEquals(mediaTypeUsedAsTypeAndSubtype, mediaType.getSubtype()); ```  / Tomas Johansson   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/44626054ce681a7295e055e2ca0a06e0bdb3451e, https://github.com/spring-projects/spring-framework/commit/0135a9451a751203fa1fc7b683bcbf49daac5863","closed","type: bug,","spring-projects-issues","2010-02-01T03:19:20Z","2012-06-19T03:43:30Z"
"","11672","AbstractDataBoundFormElementTag generates incorrect input name attribute when using indexed properties [SPR-7007]","**[Tom Chambers](https://jira.spring.io/secure/ViewProfile.jspa?name=tccham182)** opened **[SPR-7007](https://jira.spring.io/browse/SPR-7007?redirect=false)** and commented  When binding to a list or map in a form tag, in my case:  ```  ```  The checkbox is correctly bound and rendered (using a custom property editors etc), however on submission the request parameters are not correctly bound to the form object.  After investigation it appears that the HTML ""name"" attribute of the input field is incorrect, before 3.0.1 (RELEASE-A) it would render:  ```   ```  It now renders:  ``` // Note the missing square brackets in the name   ```  I am aware that in 2.5 the ""id"" attribute of input fields were changed to remove the square brackets [ and ].  However it seems that the ""name"" also has these removed causing the request parameters to not be bound on submission of the form.  Manually editing the HTML to include the [ and ] characters in the ""name"" attribute fixes the issue.  Although I have found this in using the portlet API and the  tag, I suspect that it is common in the servlet code (and other form tags) too - it seems to be in AbstractDataBoundFormElementTag:  In 3.0.0 (working):  ```java  	protected String autogenerateId() throws JspException { 		return StringUtils.deleteAny(getName(), ""[]""); 	}  	protected String getName() throws JspException { 		return getPropertyPath(); 	}  ```  In 3.0.1 RELEASE A:  ```java  	protected String autogenerateId() throws JspException { 		return getName(); 	}  	protected String getName() throws JspException { 		return StringUtils.deleteAny(getPropertyPath(), ""[]""); 	}  ```  Please feel free to shoot me down - I have spent a while on this and I cant see how the above is supposed to work.  ---  **Affects:** 3.0.1  **Issue Links:** - #11654 Spring web's tag library removes ""["" and ""]"" in the path attribute for input (and possibly others). (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2010-03-18T12:08:26Z","2019-01-12T16:49:40Z"
"","11413","templated FactoryBean getObject() allows invalid class type to be returned [SPR-6747]","**[Tim Bavaro](https://jira.spring.io/secure/ViewProfile.jspa?name=timba)** opened **[SPR-6747](https://jira.spring.io/browse/SPR-6747?redirect=false)** and commented  The FactoryBean\ interface specifies a return type of ""Class","closed","status: declined,","spring-projects-issues","2010-01-21T08:51:15Z","2019-01-12T16:38:20Z"
"","11703","Provide simple means to escape bean value expressions to prevent SpEL parsing [SPR-7041]","**[Thomas Timbul](https://jira.spring.io/secure/ViewProfile.jspa?name=ttimbul)** opened **[SPR-7041](https://jira.spring.io/browse/SPR-7041?redirect=false)** and commented  There appear to be no (documented) means to escape value expressions from being evaluated. There may be situations where #{} is included in a bean property value (such as a String containing ognl) which the developer wishes to keep as part of the value, rather than being evaluated by the container. This applies primarily to Strings rather than objects.  My suggested solution would be to interpret a backslash in front of #{} or ${} as escapes, so that expressions with this prefix are not evaluated. The escaping backslash should be removed in the final result. If the backslash is part of the value, it needs to be escaped itself (\\).  Let me know if I have missed something or if such facility already exists (other than using something like #{' #{not evaluated} '})   ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?p=291683  6 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-28T02:46:11Z","2015-09-22T18:20:31Z"
"","11644","org.springframework.core.TypeDescriptor.getAnnotations() should return the method annotation when it wraps the return parameter of the Method [SPR-6979]","**[Thomas Scheiblauer](https://jira.spring.io/secure/ViewProfile.jspa?name=atomium)** opened **[SPR-6979](https://jira.spring.io/browse/SPR-6979?redirect=false)** and commented  If a TypeDescriptor is created from the return parameter of a method e.g. TypeDescriptor typeDescr = new TypeDescriptor(new MethodParameter(method, -1)) where -1 denotes the return parameter then typeDescr.getAnnotations() should return the annotations applied to the method. 3.0.1 crashes with an array index out of bounds exception because the called MethodParameter.getParameterAnnotations() tries to index an empty Annotations Array with -1, the current 3.0.2 nightly fixes at least the exception by returning an empty Array in this case. Since e.g. org.springframework.core.convert.ConversionService or org.codehaus.jackson.map.JsonSerializer\ need the TypeDescriptor for type conversions either MethodParameter.getParameterAnnotations() or TypeDescriptor.getAnnotations() should return the method annotations in case of a wrapped return parameter. I bumped into this problem while trying to modify the getTypeDescriptorForSerializer method in this mvc ajax example: https://src.springframework.org/svn/spring-samples/mvc-ajax/trunk/src/main/java/org/springframework/samples/mvc/ajax/json/FormatAnnotationIntrospector.java according to the TODO note.   ---  **Affects:** 3.0.1, 3.0.2  **Attachments:** - [FormatAnnotationIntrospector.java](https://jira.spring.io/secure/attachment/16287/FormatAnnotationIntrospector.java) (_1.77 kB_) - [typedescriptor.diff](https://jira.spring.io/secure/attachment/16286/typedescriptor.diff) (_713 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65b0a8fcb2eab55631ebb7f8780cef4aed0bedc5","closed","type: enhancement,","spring-projects-issues","2010-03-13T10:02:21Z","2012-06-19T03:43:04Z"
"","11849","Add configuration option to control creation of new consumers in DefaultMessageListenerContainer [SPR-7189]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-7189](https://jira.spring.io/browse/SPR-7189?redirect=false)** and commented  We have a customer requesting that an ""idleTaskExecutionLimit"" property be exposed for tuning purposes.  Instead of comparing against a hard coded zero value, this property will allow consumers to be created in a more aggressive manner. Bruce has looked at this and created a patch against 3.0 trunk. He commented: ""I see no harm in allowing this, especially since the customer's use case has proven that doing so improves his ability to consume messages faster.""  -Thomas    ---  **Affects:** 2.5.6, 3.0.2  **Attachments:** - [DefaultMessageListenerContainer.java-3.0.x-diff.txt](https://jira.spring.io/secure/attachment/16548/DefaultMessageListenerContainer.java-3.0.x-diff.txt) (_2.84 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad5c7aeb3198da061367cd039f490c6d70f37785","closed","type: enhancement,","spring-projects-issues","2010-05-11T06:26:14Z","2012-06-19T03:44:01Z"
"","11695","Strange MANIFEST.MF and extra jar file inside org.springframework.web.struts jar artifact [SPR-7033]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-7033](https://jira.spring.io/browse/SPR-7033?redirect=false)** and commented  The org.springframework.web.struts released jar contains strange MANIFEST.MF and also contains a com.springsource.org.apache.struts-1.2.9.jar  This causes problems when we try to instrument this jar for com.springsource.instrumented.springframework.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/47389a0edd961ae789a83a668a0396b67e9fde7f, https://github.com/spring-projects/spring-framework/commit/a5f3d009774551f2c70a5284891c0f4d1ec9b599","closed","type: bug,","spring-projects-issues","2010-03-24T10:38:07Z","2012-06-19T03:43:57Z"
"","11068","Update docs to use 3.0 JavaDoc links for references [SPR-6402]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-6402](https://jira.spring.io/browse/SPR-6402?redirect=false)** and commented  Change  docs/2.5.x/api  TO  docs/3.0.x/javadoc-api   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5fbd87d939776590264f1b8332b5b3a69fe7cb0f","closed","type: documentation,","spring-projects-issues","2009-11-20T06:39:39Z","2012-06-19T03:42:58Z"
"","11058","Transaction management fails when using AspectJ and load-time weaving [SPR-6392]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-6392](https://jira.spring.io/browse/SPR-6392?redirect=false)** and commented  Having issues running the 2.5.6 sample application using AspectJ and load-time weaving for the transaction support. This showed up during testing of JPA on JBoss but it also happens on Tomcat 6.0.  Steps to reproduce:  download and extract: spring-framework-2.5.6.SEC01-with-dependencies.zip apache-tomcat-6.0.20.tar.gz  set up and configure the HSQL db  modify: war/WEB-INF/web.xml - change to use /WEB-INF/application-context-jpa.xml instead of the jdbc one war/META-INF/context.xml - un-comment the class loader entry  copy: spring-tomcat-weaver.jar to ~/apache-tomcat-6.0.20/lib  run: ant warfile  copy: dist/petclinic.war to ~/apache-tomcat-6.0.20/webapps  open a browser ant point to http://localhost:8080/petclinic go to ""Find owner"" screen and click [FIND OWNERS] from the list click on one and on the edit screen click [EDIT OWNER] then click [UPDATE OWNER]  Sometimes it works on the first deploy but I usually see the following error on subsequent deploys:  Data access failure: Exception Description: No transaction is currently active; nested exception is javax.persistence.TransactionRequiredException: Exception Description: No transaction is currently active  org.springframework.dao.InvalidDataAccessApiUsageException: Exception Description: No transaction is currently active; nested exception is javax.persistence.TransactionRequiredException: Exception Description: No transaction is currently active at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:291) at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:352) at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:62) at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:212) at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:146) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy19.storeOwner(Unknown Source) at org.springframework.samples.petclinic.web.EditOwnerForm.processSubmit(EditOwnerForm.java:56) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doInvokeMethod(HandlerMethodInvoker.java:421) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:136) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:326) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:313) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:807) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:511) at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454) at java.lang.Thread.run(Thread.java:619) Caused by: javax.persistence.TransactionRequiredException: Exception Description: No transaction is currently active at oracle.toplink.essentials.internal.ejb.cmp3.transaction.EntityTransactionWrapper.throwCheckTransactionFailedException(EntityTransactionWrapper.java:70) at oracle.toplink.essentials.internal.ejb.cmp3.transaction.base.EntityTransactionWrapper.checkForTransaction(EntityTransactionWrapper.java:62) at oracle.toplink.essentials.internal.ejb.cmp3.base.EntityManagerImpl.checkForTransaction(EntityManagerImpl.java:616) at oracle.toplink.essentials.internal.ejb.cmp3.base.EntityManagerImpl.flush(EntityManagerImpl.java:335) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:358) at $Proxy16.flush(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:198) at $Proxy16.flush(Unknown Source) at org.springframework.samples.petclinic.jpa.EntityManagerClinic.storeOwner(EntityManagerClinic.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ... 30 more  ---  **Affects:** 2.5.6, 3.0 RC2  **Attachments:** - [spr-6392-test.zip](https://jira.spring.io/secure/attachment/16136/spr-6392-test.zip) (_1.98 kB_)  **Issue Links:** - #11291 TransactionSynchronizationUtils.unwrapResourceIfNecessary() overwrites InfrastructureProxy.getWrappedObject() results - #10984 Investigate issues around local resource transaction management in JBoss 5.1  4 votes, 5 watchers","closed","in: core,","spring-projects-issues","2009-11-19T02:26:52Z","2019-01-11T14:38:41Z"
"","11004","Remove references and example of Commons Attributes usage for the JMX chapter [SPR-6338]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-6338](https://jira.spring.io/browse/SPR-6338?redirect=false)** and commented  Remove references and example of Commons Attributes usage for the JMX chapter.   ---  **Affects:** 3.0 RC1","closed","type: documentation,","spring-projects-issues","2009-11-12T05:06:10Z","2012-06-19T03:44:12Z"
"","10984","Investigate issues around local resource transaction management in JBoss 5.1 [SPR-6318]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-6318](https://jira.spring.io/browse/SPR-6318?redirect=false)** and commented  Deploying the PetClinic app from 2.5.6 upgraded to current 3.0 jars - I get an exception when the application tries to commit an updated owner:  Data access failure: Exception Description: No transaction is currently active; nested exception is javax.persistence.TransactionRequiredException: Exception Description: No transaction is currently active  org.springframework.dao.InvalidDataAccessApiUsageException: Exception Description: No transaction is currently active; nested exception is javax.persistence.TransactionRequiredException: Exception Description: No transaction is currently active at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:307) at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:349) at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:58) at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213) at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:145) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy278.storeOwner(Unknown Source) at org.springframework.samples.petclinic.web.EditOwnerForm.processSubmit(EditOwnerForm.java:56) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doInvokeMethod(HandlerMethodInvoker.java:683) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:163) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:378) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:366) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:633) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:549) at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:235) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:190) at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:92) at org.jboss.web.tomcat.security.SecurityContextEstablishmentValve.process(SecurityContextEstablishmentValve.java:126) at org.jboss.web.tomcat.security.SecurityContextEstablishmentValve.invoke(SecurityContextEstablishmentValve.java:70) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:158) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:330) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:829) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:598) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:637) Caused by: javax.persistence.TransactionRequiredException: Exception Description: No transaction is currently active at oracle.toplink.essentials.internal.ejb.cmp3.transaction.EntityTransactionWrapper.throwCheckTransactionFailedException(EntityTransactionWrapper.java:70) at oracle.toplink.essentials.internal.ejb.cmp3.transaction.base.EntityTransactionWrapper.checkForTransaction(EntityTransactionWrapper.java:62) at oracle.toplink.essentials.internal.ejb.cmp3.base.EntityManagerImpl.checkForTransaction(EntityManagerImpl.java:616) at oracle.toplink.essentials.internal.ejb.cmp3.base.EntityManagerImpl.flush(EntityManagerImpl.java:335) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:365) at $Proxy277.flush(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:224) at $Proxy277.flush(Unknown Source) at org.springframework.samples.petclinic.jpa.EntityManagerClinic.storeOwner(EntityManagerClinic.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137) ... 38 more  ---  **Issue Links:** - #11058 Transaction management fails when using AspectJ and load-time weaving - #10434 Load-Time Weaving does not work in JBoss AS 5","closed","type: task,","spring-projects-issues","2009-11-09T06:05:45Z","2019-01-11T14:30:35Z"
"","10888","Typo in section 3.3.1.1 (Aliasing a bean outside the bean definition) of the reference manual [SPR-6220]","**[Teemu Pöntelin](https://jira.spring.io/secure/ViewProfile.jspa?name=tehapo)** opened **[SPR-6220](https://jira.spring.io/browse/SPR-6220?redirect=false)** and commented  The section 3.3.1.1 (Aliasing a bean outside the bean definition) in reference manual has misspelled word **DataSource** as **DattaSource**.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/afe87ea881e0c7502d3d145f77dc7ae1446def3a","closed","type: documentation,","spring-projects-issues","2009-10-10T20:10:53Z","2009-11-12T02:53:36Z"
"","10887","Typo in section 2.5.2 (Spring Expression Language) of the reference manual [SPR-6219]","**[Teemu Pöntelin](https://jira.spring.io/secure/ViewProfile.jspa?name=tehapo)** opened **[SPR-6219](https://jira.spring.io/browse/SPR-6219?redirect=false)** and commented  Typo in section 2.5.2 (Spring Expression Language) of the reference manual. The example method signature is missing a space between `void` and the method name.  `public voidsetKeyGenerator(KeyGenerator kg)`  should be  `public void setKeyGenerator(KeyGenerator kg)`   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/94aad0b537ae8c5a450c0eedd36ea59362644d4e","closed","type: documentation,","spring-projects-issues","2009-10-10T03:20:23Z","2009-11-12T02:56:25Z"
"","11127","Property setting of Map type object does not appear to work properly [SPR-6461]","**[Ted Poovey](https://jira.spring.io/secure/ViewProfile.jspa?name=darted)** opened **[SPR-6461](https://jira.spring.io/browse/SPR-6461?redirect=false)** and commented  I have tried several versions of setting \ type context and setting using \  all throw the same not writable error.  I have tried setting the variable to instance as well.  Same error. NOTE:  Single setting of a Properties works fine! Annotated or not the Map will not set properly.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=271398#post271398","closed","in: core,","spring-projects-issues","2009-11-27T04:47:04Z","2019-01-12T05:32:52Z"
"","11543","AnnotationMethodHandlerAdapter.handleResponseBody prioritizes messageConverter over MediaType [SPR-6877]","**[Ted Bergeron](https://jira.spring.io/secure/ViewProfile.jspa?name=tedberg)** opened **[SPR-6877](https://jira.spring.io/browse/SPR-6877?redirect=false)** and commented  The nested loop should be flip flopped.  The current logic iterates over the message converters, then looks at the media types.  For request header:  ``` Accept	application/json, text/javascript, */* ```  Which is sent via jQuery, this logic picks the first converter than can handle ``` \*/\*  ```It should start with application/json and scan all message converters looking for a match.  Only when a match isn't found should the logic ever consider the second or third arguments.  ```      	private void handleResponseBody(Object returnValue, ServletWebRequest webRequest)     			throws ServletException, IOException {          		HttpInputMessage inputMessage = new ServletServerHttpRequest(webRequest.getRequest());     		List acceptedMediaTypes = inputMessage.getHeaders().getAccept();     		if (acceptedMediaTypes.isEmpty()) {     			acceptedMediaTypes = Collections.singletonList(MediaType.ALL);     		}     		MediaType.sortBySpecificity(acceptedMediaTypes);     		HttpOutputMessage outputMessage = new ServletServerHttpResponse(webRequest.getResponse());     		Class returnValueType = returnValue.getClass();     		List allSupportedMediaTypes = new ArrayList();     		if (messageConverters != null) {     			for (HttpMessageConverter messageConverter : messageConverters) {     				allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes());     				for (MediaType acceptedMediaType : acceptedMediaTypes) {     					if (messageConverter.canWrite(returnValueType, acceptedMediaType)) {     						messageConverter.write(returnValue, acceptedMediaType, outputMessage);     						this.responseArgumentUsed = true;     						return;     					}     				}     			}     		}     		throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes);     	}  ```  In my case, I've registered the converters in the order matching the docs: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/remoting.html#rest-message-conversion  ```  \ \ \ \ \ \ \ \ \ \ \  ```  If I enable the xml converter, it tries to process my request, despite the json accept header.  Nothing in the docs indicate that the ordering is very important, as I'd expect these to be mutually exclusive.  If there is a specific ordering that should be used, please add that to the docs.  The only ordering I can see is the default in the code of:  ```  private HttpMessageConverter[] messageConverters = new HttpMessageConverter[]{new ByteArrayHttpMessageConverter(), new StringHttpMessageConverter(), new FormHttpMessageConverter(), new SourceHttpMessageConverter()};  ```    ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c8a47bd06023cf8eba681f56720c7dc5d532662, https://github.com/spring-projects/spring-framework/commit/62f9f477f5887c3c6237472d7d8db04510675ceb ```","closed","type: bug,","spring-projects-issues","2010-02-19T07:26:48Z","2019-01-13T21:46:58Z"
"","11165","@MVC URI Template Variable Regression - Matching values containing . (dot) [SPR-6499]","**[Ted Bergeron](https://jira.spring.io/secure/ViewProfile.jspa?name=tedberg)** opened **[SPR-6499](https://jira.spring.io/browse/SPR-6499?redirect=false)** and commented  Given the URI Template: http://www.example.com/users/{username}/blah.html  In M1 - M3 and RC1 the username could be ""bill"" or ""bill.smith"" and everything would work.  Starting with RC3 (I never got around to using RC2) ""bill"" still works fine, but ""bill.smith"" causes a HTTP 404 to be returned due to:  DispatcherServlet.noHandlerFound(962) | No mapping found for HTTP request with URI  ---  **Affects:** 3.0 RC3  **Issue Links:** - #11148 `@RequestMapping` handled incorrectly when value contains ""."" (dot) character (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2009-12-02T12:10:05Z","2019-01-13T07:56:42Z"
"","11704","Spring Form Tags cause AccessControlException on Google App Engine [SPR-7042]","**[Taylor Leese](https://jira.spring.io/secure/ViewProfile.jspa?name=tleese22)** opened **[SPR-7042](https://jira.spring.io/browse/SPR-7042?redirect=false)** and commented  Using the Spring form tags on Google App Engine cause an AccessControlException.  java.security.AccessControlException: access denied (java.lang.RuntimePermission getClassLoader) at com.google.appengine.runtime.Request.process-d79f579d4f635f5e(Request.java) at java.security.AccessControlContext.checkPermission(AccessControlContext.java:355) at java.security.AccessController.checkPermission(AccessController.java:567) at java.lang.SecurityManager.checkPermission(Unknown Source) at java.lang.ClassLoader.getSystemClassLoader(Unknown Source) at org.springframework.beans.BeanUtils.findEditorByConvention(BeanUtils.java:392) at org.springframework.validation.AbstractPropertyBindingResult.getCustomEditor(AbstractPropertyBindingResult.java:137) at org.springframework.validation.AbstractPropertyBindingResult.formatFieldValue(AbstractPropertyBindingResult.java:107) at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:227) at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:120) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:174) at org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.resolveCssClass(AbstractHtmlElementTag.java:449) at org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.writeOptionalAttributes(AbstractHtmlElementTag.java:419) at org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.writeDefaultAttributes(AbstractHtmlElementTag.java:410) at org.springframework.web.servlet.tags.form.LabelTag.writeTagContent(LabelTag.java:90) at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:102) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:79) at org.apache.jsp.WEB_002dINF.view.create_jsp._jspx_meth_form_label_0(create_jsp.java:222) at org.apache.jsp.WEB_002dINF.view.create_jsp._jspService(create_jsp.java:78) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:94) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)  I found other references to this same issue on Google Groups and blog postings. I wasn't able to find an existing issue logged in JIRA for it though so logging it now.  http://groups.google.com/group/google-appengine-java/browse_thread/thread/54aadf8164be7bf0 http://www.answercow.com/2010/02/spring-forms-on-google-app-engine.html   ---  **Affects:** 3.0.1","closed","type: bug,","spring-projects-issues","2010-03-28T20:02:31Z","2012-06-19T03:43:48Z"
"","10969","Add more logging to RestTemplate [SPR-6303]","**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[SPR-6303](https://jira.spring.io/browse/SPR-6303?redirect=false)** and commented  It would be nice to add more logging to RestTemplate. Particularity, logging http status codes would make debugging easier.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db252cd0af9dfeb62c9a000372f6a13488b3009e","closed","type: enhancement,","spring-projects-issues","2009-11-04T20:33:35Z","2012-06-19T03:43:03Z"
"","10968","Create a @ResponseHeader annotation [SPR-6302]","**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[SPR-6302](https://jira.spring.io/browse/SPR-6302?redirect=false)** and commented  Create a `@ResponseHeader` annotation, analogous to `@RequestHeader`.   ---  **Affects:** 3.0.5  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-04T20:26:28Z","2011-11-15T09:13:18Z"
"","10967","Support @RequestHeader on HttpHeaders parameters [SPR-6301]","**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[SPR-6301](https://jira.spring.io/browse/SPR-6301?redirect=false)** and commented  It would be useful to support mapping all request headers to a HttpHeaders instance in a controller method.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8de34c6fa7b2e6494b42b6f6a75c7ee10f6d73ed","closed","type: enhancement,","spring-projects-issues","2009-11-04T20:23:13Z","2012-06-19T03:43:47Z"
"","11794","org.springframework.http.MediaType#checkParameters fails to process a Content-Type like application/xml;charset=""utf-8"" [SPR-7135]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-7135](https://jira.spring.io/browse/SPR-7135?redirect=false)** and commented  Accoring to RFC 2045, the following is a valid content type response header:  ---  Content-Type: application/xml;charset=""utf-8""  ---  Trying to access a resource that serves such a header (through RestTemplate) throws the following exception:  ---  Exception in thread ""main"" java.nio.charset.IllegalCharsetNameException: ""utf-8"" at java.nio.charset.Charset.checkName(Charset.java:284) at java.nio.charset.Charset.lookup2(Charset.java:458) at java.nio.charset.Charset.lookup(Charset.java:437) at java.nio.charset.Charset.forName(Charset.java:502) at org.springframework.http.MediaType.checkParameters(MediaType.java:300) at org.springframework.http.MediaType.\(MediaType.java:266) at org.springframework.http.MediaType.parseMediaType(MediaType.java:570) at org.springframework.http.HttpHeaders.getContentType(HttpHeaders.java:286) at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:64) at org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor.extractData(RestTemplate.java:619) at org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor.extractData(RestTemplate.java:1) at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:446) at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:401) at org.springframework.web.client.RestTemplate.getForEntity(RestTemplate.java:221)   ---  I assume MediaType is simply missing the logic to optionally unwrap the value.  ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c2707150b12399427bd96b5932c783992f90a6ea","closed","type: bug,","spring-projects-issues","2010-04-26T04:50:14Z","2019-01-13T21:46:12Z"
"","11530","spring taglib documentation doesn't mention new url tag [SPR-6864]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-6864](https://jira.spring.io/browse/SPR-6864?redirect=false)** and commented  Appendix F described the ""classic"" spring taglib, but fails to mention the new ""spring:url"" tag   ---  **Affects:** 3.0 GA","closed","type: task,","spring-projects-issues","2010-02-18T01:32:55Z","2012-06-19T02:28:25Z"
"","11759","Constructor resolution uses InputSource instead of URL argument for DBUnit FlatXmlDataSet [SPR-7099]","**[tanmoy banerjee](https://jira.spring.io/secure/ViewProfile.jspa?name=tanmoy.banerjee)** opened **[SPR-7099](https://jira.spring.io/browse/SPR-7099?redirect=false)** and commented  For a bean definition given below:  \ \ \  the container loads vehicleDataSet properly in Spring 2.5.6, but after migrating it to 3.0.2.RELEASE, it starts giving exception, the root cause of which is :  Caused by: java.net.MalformedURLException: unknown protocol: classpath at java.net.URL.\(URL.java:574) at java.net.URL.\(URL.java:464) at java.net.URL.\(URL.java:413) at org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source) at org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source) at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source) at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source) at org.apache.xerces.parsers.XMLParser.parse(Unknown Source) at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source) at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source) at org.dbunit.dataset.xml.FlatXmlProducer.produce(FlatXmlProducer.java:340) ... 52 more  As per the previous JIRA tickets, (#6229), this error has resurfaced after being fixed in response to #5052.  Has this resurfaced again, or what is the recommendation if this is an expected behaviour. I did not find any changelog to support this.  ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=87856  **Issue Links:** - #6229 String references to resources instead of object references","closed","in: core,","spring-projects-issues","2010-04-15T05:13:17Z","2019-01-11T13:24:52Z"
"","11758","Property placeholder with expression as default fallback fails [SPR-7098]","**[Tamas SANDOR](https://jira.spring.io/secure/ViewProfile.jspa?name=tsandor)** opened **[SPR-7098](https://jira.spring.io/browse/SPR-7098?redirect=false)** and commented  I was using the default fallback mechanism Spring3 has introduced: `${MY_PROPERTY:DEFAULT}`  In my approach the `DEFAULT` value will come as an _SpEL_. Here's my case: `${OUTPUT_FOLDER:#{systemProperties['java.io.tmpdir']}}`  The problem is when the `OUTPUT_FOLDER` is defined it will add the last `'}'` character as a suffix (however it's the closing bracket for `'${}'`, but I guess it matches only for the first end bracket that is of `'#{}'`. So at the end `OUTPUT_FOLDER` will look like `'C:\myfolder}`  ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77074c6c87dd58ed97932afc9fd6fc03e0787587","closed","in: core,","spring-projects-issues","2010-04-15T01:25:07Z","2019-01-13T23:37:34Z"
"","11738","ReflectionUtils.makeAccessible(Field) should check for Modifier.isFinal [SPR-7078]","**[Sören Chittka](https://jira.spring.io/secure/ViewProfile.jspa?name=soeren.chittka@googlemail.com)** opened **[SPR-7078](https://jira.spring.io/browse/SPR-7078?redirect=false)** and commented  While browsing the Source-Code of ReflectionUtils I noticed, that makeAccessible for Fields only checks if the field or its containing class are not public. But for setting a public final Field in an public class the call to setAccessible is still neccessary.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d2a398cbc0f93842c5e427e4eb71fa3751e35fc","closed","in: core,","spring-projects-issues","2010-04-07T20:08:22Z","2012-06-19T03:43:33Z"
"","10970","Wrapped Hibernate SQLGrammarException loses the potential SQL statement that caused the exception [SPR-6304]","**[Sébastien Launay](https://jira.spring.io/secure/ViewProfile.jspa?name=yabon)** opened **[SPR-6304](https://jira.spring.io/browse/SPR-6304?redirect=false)** and commented  When an `org.hibernate.exception.SQLGrammarException` occurs because a table is missing i have the following stace trace:  ``` Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.jasig.cas.services.DefaultServicesManagerImpl]: Constructor threw exception; nested exception is org.springframework.dao.InvalidDataAccessResourceUsageException: could not execute query; nested exception is org.hibernate.exception.SQLGrammarException: could not execute query  at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:115)  at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87)  at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:248)  ... 76 more Caused by: org.springframework.dao.InvalidDataAccessResourceUsageException: could not execute query; nested exception is org.hibernate.exception.SQLGrammarException: could not execute query  at org.springframework.orm.hibernate3.SessionFactoryUtils.convertHibernateAccessException(SessionFactoryUtils.java:630)  at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:95)  at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:212)  at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152)  at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:189)  at org.springframework.orm.jpa.JpaTemplate.executeFind(JpaTemplate.java:151)  at org.springframework.orm.jpa.JpaTemplate.find(JpaTemplate.java:311)  at org.springframework.orm.jpa.JpaTemplate.find(JpaTemplate.java:307)  at org.jasig.cas.services.JpaServiceRegistryDaoImpl.load(JpaServiceRegistryDaoImpl.java:30)  at org.jasig.cas.services.DefaultServicesManagerImpl.load(DefaultServicesManagerImpl.java:134)  at org.jasig.cas.services.DefaultServicesManagerImpl.(DefaultServicesManagerImpl.java:61)  at org.jasig.cas.services.DefaultServicesManagerImpl.(DefaultServicesManagerImpl.java:43)  at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)  at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)  at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)  at java.lang.reflect.Constructor.newInstance(Constructor.java:513)  at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100)  ... 78 more Caused by: org.hibernate.exception.SQLGrammarException: could not execute query  at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:90)  at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:66)  at org.hibernate.loader.Loader.doList(Loader.java:2235)  at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2129)  at org.hibernate.loader.Loader.list(Loader.java:2124)  at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:401)  at org.hibernate.hql.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:363)  at org.hibernate.engine.query.HQLQueryPlan.performList(HQLQueryPlan.java:196)  at org.hibernate.impl.SessionImpl.list(SessionImpl.java:1149)  at org.hibernate.impl.QueryImpl.list(QueryImpl.java:102)  at org.hibernate.ejb.QueryImpl.getResultList(QueryImpl.java:67)  at org.springframework.orm.jpa.JpaTemplate$9.doInJpa(JpaTemplate.java:319)  at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:184)  ... 90 more Caused by: java.sql.SQLException: ORA-00942: table or view does not exist  at oracle.jdbc.driver.SQLStateMapping.newSQLException(SQLStateMapping.java:133)  at oracle.jdbc.driver.DatabaseError.newSQLException(DatabaseError.java:115)  at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:221)  at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:467)  at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:417)  at oracle.jdbc.driver.T4C8Oall.receive(T4C8Oall.java:1084)  at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:215)  at oracle.jdbc.driver.T4CPreparedStatement.executeForDescribe(T4CPreparedStatement.java:1032)  at oracle.jdbc.driver.T4CPreparedStatement.executeMaybeDescribe(T4CPreparedStatement.java:1139)  at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1471)  at oracle.jdbc.driver.OraclePreparedStatement.executeInternal(OraclePreparedStatement.java:3874)  at oracle.jdbc.driver.OraclePreparedStatement.executeQuery(OraclePreparedStatement.java:3944)  at oracle.jdbc.driver.OraclePreparedStatementWrapper.executeQuery(OraclePreparedStatementWrapper.java:3613)  at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:93)  at org.hibernate.jdbc.AbstractBatcher.getResultSet(AbstractBatcher.java:208)  at org.hibernate.loader.Loader.getResultSet(Loader.java:1812)  at org.hibernate.loader.Loader.doQuery(Loader.java:697)  at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:259)  at org.hibernate.loader.Loader.doList(Loader.java:2232)  ... 100 more ```  Because the `SQLGrammarException` is wrapped like any other exception we lose the SQL statement that caused the exception which can be handy in my case because I do not know which table does not exist :(.  This maybe more of a Hibernate issue than a Spring issue (SQL in not append in the message but kept in a private field) but this is not the case for the parent class (`org.hibernate.JDBCException`) where the SQL statement is integrated by Spring in the stack trace.  By looking at the 3.x source code, I think this issue also occurs in the future 3.0 version but I have not tested it.   ---  **Affects:** 2.5.6  **Attachments:** - [SPR-6304-2.5.x-hibernate-sql-grammar-exception-2009-11-05.patch](https://jira.spring.io/secure/attachment/15884/SPR-6304-2.5.x-hibernate-sql-grammar-exception-2009-11-05.patch) (_914 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/86934e2403126661c266fd7fd52103b4e942a06c","closed","type: enhancement,","spring-projects-issues","2009-11-04T20:51:26Z","2013-07-10T13:36:36Z"
"","10935","Annotated Groovy controllers don't work properly [SPR-6268]","**[Szczepan Kuzniarz](https://jira.spring.io/secure/ViewProfile.jspa?name=szczepan.kuzniarz)** opened **[SPR-6268](https://jira.spring.io/browse/SPR-6268?redirect=false)** and commented  In the following example:  ``` package test @Controller class TestController {     @RequestMapping(value = ""/testGroovy.do"", method = RequestMethod.GET)     public String handler(HttpServletRequest request) {         return ""success""     } } ```  ```xml    ```  ```xml      test     org.springframework.web.servlet.DispatcherServlet       test     *.do  ```  DefaultAnnotationHandlerMapping class discovers the Groovy controller and registers a handler as it logs:  ``` INFO: Mapped URL path [/testGroovy.do] onto handler [test.TestController@134237] ```  but accessing such a controller causes ServletException:  ``` javax.servlet.ServletException: No adapter for handler [test.TestController@134237]: Does your handler implement a supported interface like Controller?     org.springframework.web.servlet.DispatcherServlet.getHandlerAdapter(DispatcherServlet.java:992)     org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:780)     org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:726)     org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:636)     org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:545)     javax.servlet.http.HttpServlet.service(HttpServlet.java:617)     javax.servlet.http.HttpServlet.service(HttpServlet.java:717) ```  I'm not 100% sure, but it seems AnnotationMethodHandlerAdapter.getMethodResolver is unable to determine proper type of the handler. It uses ClassUtils.getUserClass (which returns proxy as a type) but for Groovy script the right type is it's MetaClass (getMethodResolver should use something like ((groovy.lang.GroovyObject) handler).getMetaClass().getTheClass()).  Maybe the problem with Groovy scripts is more general, and not limited to a MVC controller case?  ---  **Affects:** 3.0 RC1  **Issue Links:** - #15317  tag in version 2.5 and higher doesn't work for refreshable Spring MVC endpoints - #10419 AspectJ pointcut advisors are not working with Groovy script beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64fd0b081d9367a764b88f1894f3f92198e85b07, https://github.com/spring-projects/spring-framework/commit/8e357348562774952a75e414a66377c4898a28dd  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2009-10-23T03:46:27Z","2019-01-11T15:11:55Z"
"","11392","EntityManager won't get closed when using SharedEntityManagerBean [SPR-6726]","**[Sven Linstaedt](https://jira.spring.io/secure/ViewProfile.jspa?name=tzwoenn)** opened **[SPR-6726](https://jira.spring.io/browse/SPR-6726?redirect=false)** and commented  javax.persistence.Query is designed as builder pattern, thus returning itself when invoked with a method like Query#set*().  Unfortunately the query proxy org.springframework.orm.jpa.SharedEntityManagerCreator.DeferredQueryInvocationHandler returns the internal Query object from the JPA implementation, so subsequent calls this query won't get through the proxy any more. As a consequence the EntityManager won't get closed after query execution (getResultList, getSingleResult or executeUpdate).  This results in memory and connection leaks, at least until timeouts occur.  The fix is quite simple: Just return DeferredQueryInvocationHandler.this on method calls, which have a return type of javax.persistence.Query.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b6f3f1f226d381f460aec4680e87bebb7521547","closed","type: bug,","spring-projects-issues","2010-01-19T23:35:10Z","2012-06-19T03:43:35Z"
"","11051","Context Scanning doesnt work in Jboss 5 [SPR-6385]","**[Sundar Sankarnarayanan](https://jira.spring.io/secure/ViewProfile.jspa?name=fatboysuns)** opened **[SPR-6385](https://jira.spring.io/browse/SPR-6385?redirect=false)** and commented  Hi All, When I use context scanning and deploy it on Jboss5. Spring somehow seem to have issue of finding the beans in the classpath. If the same war is dropped on Jboss 4.X it seems to Work just fine.  I tried using the newer Spring3 - m3 as well with no luck.  Any suggestions is appreciated.  -Sundar  http://forum.springsource.org/showthread.php?p=269977  ---  **Affects:** 2.5.6  **Issue Links:** - #9793 Spring component scanning does not work within JBoss EJB container (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2009-11-18T02:19:15Z","2019-01-12T16:50:01Z"
"","11655","Allow multiple http method in request mapping  [SPR-6990]","**[Sun Ning](https://jira.spring.io/secure/ViewProfile.jspa?name=sunng)** opened **[SPR-6990](https://jira.spring.io/browse/SPR-6990?redirect=false)** and commented  allow a single method to handle multiple HTTP request on a specified path. could be something like:  `@RequestMapping`(value=""/helloworld"", method=RequestMethod.GET|RequestMethod.POST) public ModelAndView handle() ....    ---  **Affects:** 3.0.1","closed","status: invalid,","spring-projects-issues","2010-03-15T21:03:29Z","2019-01-12T05:32:20Z"
"","11653","improve the functionality of webmvc handler interceptor [SPR-6988]","**[Sun Ning](https://jira.spring.io/secure/ViewProfile.jspa?name=sunng)** opened **[SPR-6988](https://jira.spring.io/browse/SPR-6988?redirect=false)** and commented  The scenario is: I want to do some edit job on servlet request (such as html escaping) in handler interceptor. However, the handler interceptor API doesn't provide user any way to modify request's parameters. With current API, the Request object is readonly, and we can only control the execution of chain.  It will be appreciate to use the mechanism of Filter in Servlet API which will enable user to pass a wrapper of ServletRequest into the chain    ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-03-15T19:00:02Z","2012-05-18T16:00:30Z"
"","11285","An error in documentation [SPR-6619]","**[Sun Ning](https://jira.spring.io/secure/ViewProfile.jspa?name=sunng)** opened **[SPR-6619](https://jira.spring.io/browse/SPR-6619?redirect=false)** and commented  A Documentation error. There is an error in the sample code, in section 3.11.2.2 as listed below  3.11.2.2 Building the container programmatically using register(Class...)  ....  public static void main(String[] args) { ApplicationContext ctx = new AnnotationConfigApplicationContext(); ctx.register(AppConfig.class, OtherConfig.class); ctx.register(AdditionalConfig.class); ctx.refresh(); MyService myService = ctx.getBean(MyService.class); myService.doStuff(); }  The code cannot be compiled because of there is no such a register method defined in interface ""ApplicationContext"". Should be changed to: public static void main(String[] args) { AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(); ctx.register(AppConfig.class, OtherConfig.class); ctx.register(AdditionalConfig.class); ctx.refresh(); MyService myService = ctx.getBean(MyService.class); myService.doStuff(); }   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d2f28ccf41814f5b529e5c82449a2525830ebf72","closed","type: bug,","spring-projects-issues","2009-12-22T17:27:29Z","2012-06-19T03:43:57Z"
"","11404","getBean(Class) does not work when invoked with CGLIB subclass for prototyped bean [SPR-6738]","**[Sumit Khanna](https://jira.spring.io/secure/ViewProfile.jspa?name=sumdog)** opened **[SPR-6738](https://jira.spring.io/browse/SPR-6738?redirect=false)** and commented  If I use the new getBean() method that takes in a class type and have a bean defined along with the DefaultAdvisorAutoProxyCreator, I keep getting an exception ""no unique bean of type is defined"" with Spring searching for the class with the ""$$EnhancedByCGLIB$$"" in its name.  My constructor looked like this:  public FlatXMLReader(String baseElement, String[] fields, ModelBase model)  and in the constructor it had a 'private Class modelType' that was set to model.getClass()  In the function, I had: MySpring.getObject(modelType) (MySpring is just a static function I have which loads my ApplicationContext by class path if it isn't all ready loaded and then looks up the bean: ctx.getBean())  My XML file had:             		      		      			      			  SystemHeader      			  FrameworkVersion                                    ...      			      		      		                       	                                                            ...                                                                          	         	               ---  If the model bean is a singleton, it works fine. If it make it a prototype, I get an exception for being unable to find the bean (it searched for Tag with the enhanced by CGLIB proxy class). The workaround I've put in place for now is turn that ref in the constructor to a value and use the name of the bean to create multiple instances of it. This works fine and autoproxys correctly. The problem seems to be with the getBean(Class\) version of the function.  ---  **Affects:** 3.0 GA","closed","in: core,","spring-projects-issues","2010-01-20T23:47:52Z","2019-01-13T21:47:25Z"
"","11816","JSR-303 field-level constraints lead to error if no getter/setter available [SPR-7157]","**[Sudhir nimavat](https://jira.spring.io/secure/ViewProfile.jspa?name=sudhir)** opened **[SPR-7157](https://jira.spring.io/browse/SPR-7157?redirect=false)** and commented  ``` @Entity public class User extends BaseEntity {          @NotEmpty 	@Basic 	private String _email;	        //No java bean style getter setter        	public String getEmail() { 		return _email; 	}  	public void setEmail(String email) { 		_email = email; 	}         } ```  The above code will cause the spring to through error  ``` Invalid property '_email' of bean class [org.ramanandi.matri.domain.model.User]: Bean property '_email' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?  Caused by:  org.springframework.beans.NotReadablePropertyException: Invalid property '_email' of bean class [org.ramanandi.matri.domain.model.User]: Bean property '_email' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? 	at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:674) 	at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:666) 	at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:96) 	at org.springframework.validation.AbstractBindingResult.rejectValue(AbstractBindingResult.java:103) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:79) 	at org.springframework.validation.DataBinder.validate(DataBinder.java:692) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doBind(HandlerMethodInvoker.java:797) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:349) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:169) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:421) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:409) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)  ................ ............... ```  As per the specification, Field level constraint should not need java bean style getters/setters and should be accessed using field access strategy  See http://docs.jboss.org/hibernate/stable/validator/reference/en/html/validator-usingvalidator.html#d0e265  > When using field level constraints field access strategy is used to access the value to be validated. This means the instance variable directly independed of the access type.  However spring forces me to have a pair of getter/setter.   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?p=297732  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2010-05-02T03:51:40Z","2019-01-12T16:37:58Z"
"","11798","Provide a customtag to call another controller from view [SPR-7139]","**[Sudhir nimavat](https://jira.spring.io/secure/ViewProfile.jspa?name=sudhir)** opened **[SPR-7139](https://jira.spring.io/browse/SPR-7139?redirect=false)** and commented  Please provide some facility to call another controller from view Struts2 has this functionality See http://struts.apache.org/2.0.14/docs/action.html  It's a great custom tag(amongst many others) provided by struts2.  This tag can be very useful in developing views as components that servers the content from different controllers.   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=88435","closed","type: enhancement,","spring-projects-issues","2010-04-27T04:14:10Z","2012-12-13T08:45:56Z"
"","11689","Allows for on-the-fly persistence units merge without using hardcoded jar urls [SPR-7055]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-7055](https://jira.spring.io/browse/SPR-7055?redirect=false)** and commented  Since 3.0.1, `DefaultPersistenceUnitManager` does not return a `MutablePersistenceUnitInfo` but the standard `PersistenceUnitInfo`.  We have an extension of this class that allows to re conciliate multiple persistence.xml in a single one on the fly. Here's the idea. Assume that we have defined an empty persistence unit called ""pu"" and that is used by our entity manager. Our extensions of the PersistenceUnitManager scans all persistence.xml and if it matches a certain condition (here if the unit name starts with 'pu') then it is re conciliated with our bootstrap persistence unit.  To do so, we use the getPersistenceUnitInfo(String name) of the class. Up to 3.0, it was returning `MutablePersistenceUnitInfo`. Is there any way to have a protected method that returns the mutable class?  Btw, this is similar to what is described in #7287 except that JPA does not allow two different persistence.xml with the same persistence unit name (Weblogic namely checks that when deploying an app).  What do you think of our approach? I think I can workaround by casting but then:  1. My code is no longer working with Spring 2.5.7 2. Casting isn't ideal  Thanks  ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/11bb7264a2144c6877283d3caf8e76f9c693d0b4, https://github.com/spring-projects/spring-framework/commit/4ee67353766da2a3286636ef633860f04534d4d6","closed","type: enhancement,","spring-projects-issues","2010-03-30T21:07:19Z","2019-01-11T13:22:40Z"
"","11370","When Ibatis Integrated into Spring, it always close statement twice [SPR-6704]","**[Stondubleyt](https://jira.spring.io/secure/ViewProfile.jspa?name=store88)** opened **[SPR-6704](https://jira.spring.io/browse/SPR-6704?redirect=false)** and commented  When I user spring + ibatis + proxool, I got a lot of these junk messages in the warn log.  2009.01.15 11:05:01 000069 (01/04/00) - #3 registered a statement as closed which wasn't known to be open. This could happen if you close a statement twice. 2009.01.15 11:05:01 000070 (01/04/00) - #4 registered a statement as closed which wasn't known to be open. This could happen if you close a statement twice.  And I fixed it, see details in forum   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=278521#post278521","closed","","spring-projects-issues","2010-01-14T21:40:45Z","2019-01-11T15:42:47Z"
"","10961","PathMatchingResourcePatternResolver should close jar file from JarURLConnection if not cached [SPR-6295]","**[Stoehr Sukachevin](https://jira.spring.io/secure/ViewProfile.jspa?name=stoehr)** opened **[SPR-6295](https://jira.spring.io/browse/SPR-6295?redirect=false)** and commented  The ""org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindPathMatchingJarResources(Resource, String)"" method does not close a Jar file that it opens if it gets it from a JarURLConnection directly.  The reason that is given in the code as to why the Jar file is not closed from a JarURLConnection is because the JarURLConnection ""might cache the file reference"".  However, ""setUseCaches(false)"" is called on the JarURLConnection instance when it is first obtained presumably because we do not want any caching done.  (And internally, at least for the Sun JVM version of the JarURLConnection subclass [sun.net.www.protocol.jar.JarURLConnection], if ""useCaches"" is ""false"", then the Jar file is closed after it is no longer needed [e.g., when the input stream from the JarURLConnection instance is closed].)  The net result of this is that the Jar file will NOT be closed for an undetermined length of time (until the Jar file's ""finalize()"" method is called by the GC), and in Windows, the Jar file will most likely have an open-file lock on it unnecessarily after this method completes.  The solution is to simply close the Jar file unconditionally at the end of the method.  (Curently, it is only closed when the ""newJarFile"" flag is set, which is not the case when the Jar file is retrieved from a JarURLConnection directly.)  ---  **Affects:** 2.5.6  **Issue Links:** - #17521 Regression: DLL handled as classpath resource - #16711 PathMatchingResourcePatternResolver cannot search for ""classpath*"" patterns in a jar file roots - #18260 PathMatchingResourcePatternResolver does not consider manifest based classpaths - #18657 PathMatchingResourcePatternResolver should enforce consistent alphabetical sorting of directory content  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c964473b19590780b9ddad34c832f0b2b4f47d8  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-02T17:22:21Z","2019-01-11T14:25:14Z"
"","11414","Typo in ""Pooling target sources"" paragraph of reference manual [SPR-6748]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-6748](https://jira.spring.io/browse/SPR-6748?redirect=false)** and commented  In ""8.10.2 Pooling target sources"" there is a sentence ""See the havadoc for AbstractPoolingTargetSource and the concrete..."" which should probably be ""See the javadoc for AbstractPoolingTargetSource and the concrete...""   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3339356a552a446d9115c70f4f84290b32643f78","closed","type: bug,","spring-projects-issues","2010-01-21T08:53:15Z","2012-06-19T03:44:12Z"
"","11357","Broken link to ""Method Injection"" blog entry in spring reference manual [SPR-6691]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-6691](https://jira.spring.io/browse/SPR-6691?redirect=false)** and commented  A note in [spring-reference beans chapter](https://src.springframework.org/svn/spring-framework/tags/spring-framework-3.0.0.RELEASE/spring-framework-reference/src/beans.xml), [3.4.7.1 Lookup method injection](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-lookup-method-injection) paragraph contains a [broken link](http://blog.springframework.com/rod/?p=1) which should probably lead to Rod's [""Method Injection"" blog entry](http://blog.springsource.com/2004/08/06/method-injection/).   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/23b0f82173790e266ae3e2c6eeb8e2b89ec3a49a","closed","type: bug,","spring-projects-issues","2010-01-14T01:36:45Z","2012-06-19T03:43:26Z"
"","11332","CronTrigger/CronSequenceGenerator fails to handle daylight saving timezone changes [SPR-6666]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-6666](https://jira.spring.io/browse/SPR-6666?redirect=false)** and commented  While building spring-framework 3.0.1 SNAPSHOT r2795, CronTriggerTests testDailyTriggerInLongMonth fails (see [1]). Problem seems to be in CronSequenceGenerator's findNext method, where at line 198 calendar.add call is made. Before that call calendar.getTime() returns date ""Sun Oct 31 01:00:00 CEST 2010"", while after the call (addition of 23 hours) calendar.getTime() returns date ""Sun Oct 31 23:00:00 CET 2010"". In calendar.set(field, nextValue) call that follows, HOUR_OF_DAY is reset to 0 (nextValue), calendar will be set to ""Sun Oct 31 00:00:00 CEST 2010"", while it was expected to get ""Mon Nov 01 00:00:00 CET 2010"".  [1] failed build log snippet  ```     [junit] Testsuite: org.springframework.scheduling.support.CronTriggerTests     [junit] Tests run: 36, Failures: 1, Errors: 0, Time elapsed: 0,038 sec     [junit]     [junit] Testcase: testDailyTriggerInLongMonth(org.springframework.scheduling.support.CronTriggerTests):     FAILED     [junit] expected: but was:     [junit] junit.framework.AssertionFailedError: expected: but was:     [junit]     at org.springframework.scheduling.support.CronTriggerTests.testDailyTriggerInLongMonth(CronTriggerTests. java:239)     [junit]     [junit]    [subant] Leaving directory: C:\Users\Stevo Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\org.spring framework.context  BUILD FAILED C:\Users\Stevo Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\spring-build\multi-bundle\quality.xml:23:  The following error occurred while executing this line: C:\Users\Stevo Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\spring-build\multi-bundle\common.xml:71: The following error occurred while executing this line: C:\Users\Stevo Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\spring-build\common\quality.xml:36: The f ollowing error occurred while executing this line: C:\Users\Stevo Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\spring-build\common\quality.xml:194: Test s failed ```    ---  **Affects:** 3.0 GA  **Attachments:** - [org.springframework.context-CronSequenceGenerator_findNext.patch](https://jira.spring.io/secure/attachment/16077/org.springframework.context-CronSequenceGenerator_findNext.patch) (_880 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8cc5001c32d18ca6a6211639f2c3b12f9f95cdf5, https://github.com/spring-projects/spring-framework/commit/543515e36cf2cdc1cae518c6de96d5e1d9a61d46","closed","in: core,","spring-projects-issues","2010-01-09T10:41:59Z","2012-06-19T03:42:53Z"
"","11330","XmlBeanFactoryTests testFileSystemResourceWithImport fails if build path contains spaces [SPR-6664]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-6664](https://jira.spring.io/browse/SPR-6664?redirect=false)** and commented  ```     [junit] Testcase: testFileSystemResourceWithImport(org.springframework.beans.factory.xml.XmlBeanFactoryTests): Caused an ERROR     [junit] IOException parsing XML document from file [C:\Users\Stevo%20Slavic\Work\java\eclipse\workspaces\oss\spring\ spring-framework\org.springframework.context\target\test-classes\org\springframework\beans\factory\xml\XmlBeanFactoryTes ts-resource.xml]; nested exception is java.io.FileNotFoundException: C:\Users\Stevo%20Slavic\Work\java\eclipse\workspace s\oss\spring\spring-framework\org.springframework.context\target\test-classes\org\springframework\beans\factory\xml\XmlB eanFactoryTests-resource.xml (The system cannot find the path specified)     [junit] org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from file [ C:\Users\Stevo%20Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\org.springframework.context\target\test -classes\org\springframework\beans\factory\xml\XmlBeanFactoryTests-resource.xml]; nested exception is java.io.FileNotFou ndException: C:\Users\Stevo%20Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\org.springframework.contex t\target\test-classes\org\springframework\beans\factory\xml\XmlBeanFactoryTests-resource.xml (The system cannot find the  path specified)     [junit]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionRe ader.java:341)     [junit]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionRe ader.java:302)     [junit]     at org.springframework.beans.factory.xml.XmlBeanFactory.(XmlBeanFactory.java:73)     [junit]     at org.springframework.beans.factory.xml.XmlBeanFactory.(XmlBeanFactory.java:61)     [junit]     at org.springframework.beans.factory.xml.XmlBeanFactoryTests.testFileSystemResourceWithImport(XmlBeanFac toryTests.java:1134)     [junit] Caused by: java.io.FileNotFoundException: C:\Users\Stevo%20Slavic\Work\java\eclipse\workspaces\oss\spring\sp ring-framework\org.springframework.context\target\test-classes\org\springframework\beans\factory\xml\XmlBeanFactoryTests -resource.xml (The system cannot find the path specified)     [junit]     at java.io.FileInputStream.open(Native Method)     [junit]     at java.io.FileInputStream.(FileInputStream.java:106)     [junit]     at org.springframework.core.io.FileSystemResource.getInputStream(FileSystemResource.java:110)     [junit]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionRe ader.java:328)     [junit]     [junit]    [subant] Leaving directory: C:\Users\Stevo Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\org.spring framework.context  BUILD FAILED C:\Users\Stevo Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\spring-build\multi-bundle\quality.xml:23:  The following error occurred while executing this line: C:\Users\Stevo Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\spring-build\multi-bundle\common.xml:71: The following error occurred while executing this line: C:\Users\Stevo Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\spring-build\common\quality.xml:36: The f ollowing error occurred while executing this line: C:\Users\Stevo Slavic\Work\java\eclipse\workspaces\oss\spring\spring-framework\spring-build\common\quality.xml:194: Test s failed ```  ---  **Attachments:** - [org.springframework.context-XmlBeanFactoryTests_testFileSystemResourceWithImport.patch](https://jira.spring.io/secure/attachment/16076/org.springframework.context-XmlBeanFactoryTests_testFileSystemResourceWithImport.patch) (_1.14 kB_)  **Issue Links:** - #13085 XmlBeanFactoryTests.testFileSystemResourceWithImport fails on Windows if path contains spaces (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2010-01-08T11:08:59Z","2019-01-12T16:49:47Z"
"","11614","Using JdbcTemplate with TransactionAwareDataSourceProxy and TransactionSynchronization causes multiple ConnectionHolders to be bound to the current thread for same connection [SPR-6949]","**[Steve Willcox](https://jira.spring.io/secure/ViewProfile.jspa?name=steve@rallydev.com)** opened **[SPR-6949](https://jira.spring.io/browse/SPR-6949?redirect=false)** and commented  Say we start a transaction where some Hibernate or EclipseLink code is invoked that calls TransactionAwareDataSourceProxy.getConnection() to execute some sql. When methods on that connection are called it will invoke the TransactionAwareInvocationHandler connection proxy and call DataSourceUtils.doGetConnection() passing it the 'target' datasource - the one that is being wrapped. If transaction synchronization is active it will create a connection holder with the target datasource as the key for the bind resource on the thread.  Now in the same transaction some JdbcTemplate is invoked. The JdbcTemplate bean is configured to use the TransactionAwareDataSourceProxy datasource. The JdbcTempate execute call  will result in a direct call to DataSourceUtils.getConnection() using the Proxy and not the target. Since transaction synchronization is active in this case, this method will create an additional connection holder and bind it to the thread using the Proxy datasource. This results in two connection holder resources bound to the thread - one for the target and one for the Proxy. I believe they both end up pointing to the same physical database connection but I believe this can cause some bad side effects.  I noticed that during this tx commit, when DataSourceUtils.beforeCompletion() is called (due to synchronization being active), it closes the connection shared by both connection holders when it shouldn't. There's probably other bad side effects as well.  It seems like the DataSourceUtils.doGetConnection() should never bind a TransactionAwareDataSourceProxy datasource to the thread but unwrap it and look to see if the target is bound to the thread and if not bind the target to the thread in the case of transaction synchronization being active. Diddo for the DataSourceUtils.doReleaseConnection().  Or when the datasource is a TransactionAwareDataSourceProxy, Spring TX code should not call DataSourceUtils.getConnection() or doGetConnection() directly but call TransactionAwareDataSourceProxy.getConnection() instead.    ---  **Affects:** 3.0.1  0 votes, 6 watchers","closed","status: declined,","spring-projects-issues","2010-03-04T08:46:04Z","2019-01-12T16:38:10Z"
"","10936","Include 'ASE' in the list of product names recognised by JDBCUtils as Sybase [SPR-6269]","**[Steve Barham](https://jira.spring.io/secure/ViewProfile.jspa?name=steve_barham)** opened **[SPR-6269](https://jira.spring.io/browse/SPR-6269?redirect=false)** and commented  JdbcUtils#commonDatabaseName uses a number of hardcoded database product names to identify Sybase.  public static String commonDatabaseName(String source) { String name = source; if (source != null && source.startsWith(""DB2"")) { name = ""DB2""; } else if (""Sybase SQL Server"".equals(source) || ""Adaptive Server Enterprise"".equals(source) || ""sql server"".equals(source) ) { name = ""Sybase""; } return name; }  Unfortunately, when using JTDS 1.2.4 against a Sybase 15.0.3 server, JtdsDatabaseMetadata will (for some server configurations) return 'ASE' rather than 'sql server'.  This has knock on implications, most notably in this case in CallMetaDataProviderFactory, which uses the common database name to determine which meta data provider to use:  else if (""Sybase"".equals(databaseProductName)) { provider = new SybaseCallMetaDataProvider((databaseMetaData)); }  The net result of this is that a generic provider is used rather than a Sybase provider. The generic provider does not function correctly with at least one stored procedure in one of our applications, which results in no parameters being passed to the server.  The proposed change would be to introduce 'ASE' alongside the existing Sybase product name checks in JdbcUtils, so that it is identified correctly as Sybase.  ---  **Affects:** 2.5.6  **Issue Links:** - #10722 Cannot retrieve database metadata for Sybase (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-10-24T03:16:51Z","2019-01-11T15:11:58Z"
"","11427","Proposal: placeholder expansion in imports [SPR-6761]","**[Stephen Crawley](https://jira.spring.io/secure/ViewProfile.jspa?name=crawley)** opened **[SPR-6761](https://jira.spring.io/browse/SPR-6761?redirect=false)** and commented  As described in the forum posting, I have implemented a proof of concept for substituting placeholders in \ elements in an XML wiring file.  The general approach is to arrange that the properties from other properties files are included in the set that ""SystemPropertyUtils.resolvePlaceholders(...)"" will substitute.  In my proof of concept code, this is done by adding the properties to the System properties object (OUCH!) but I'm sure this could be implemented more cleanly.    ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=80929  **Attachments:** - [ContextLoaderListener.java](https://jira.spring.io/secure/attachment/16112/ContextLoaderListener.java) (_4.74 kB_)","closed","type: enhancement,","spring-projects-issues","2010-01-24T17:29:25Z","2018-12-26T17:30:52Z"
"","11069","Incorrent H2 versions in reference documentation, section 12.8.6 [SPR-6403]","**[Stephan Vollmer](https://jira.spring.io/secure/ViewProfile.jspa?name=svollmer)** opened **[SPR-6403](https://jira.spring.io/browse/SPR-6403?redirect=false)** and commented  There is a minor error in the Spring Reference Documentation:  In section 12.8.6, the supported versions for the H2 database are _""1.8.0 to 2.0.0""._ But those H2 versions don't exist.  Maybe these versions got mixed with the HSQL versions in section 12.8.5?   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5d2d2bcf396035cb89076bd870b4b526599ac3e4","closed","type: bug,","spring-projects-issues","2009-11-21T02:26:27Z","2012-06-19T03:43:48Z"
"","11733","Support loading of Spring InstrumentationSavingAgent without explicit -javaagent JVM arg [SPR-7073]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-7073](https://jira.spring.io/browse/SPR-7073?redirect=false)** and commented  Sun JVM since 1.6 allows adding of agent after JVM startup.  VirtualMachine vm = com.sun.tools.attach.VirtualMachine.attach(processIdOfJvm); vm.loadAgent(""spring-agent.jar""); vm.detach();  more details there: http://sleeplessinslc.blogspot.com/2008/09/java-instrumentation-with-jdk-16x-class.html   ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-04-06T22:45:04Z","2015-09-22T17:34:35Z"
"","11562","JdbcTemplate.newArgPreparedStatementSetter should return PreparedStatementSetter [SPR-6897]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-6897](https://jira.spring.io/browse/SPR-6897?redirect=false)** and commented  JdbcTemplate.newArgPreparedStatementSetter should return PreparedStatementSetter, currently it returns concrete class ArgPreparedStatementSetter. This change is be backward-compatible, since ArgPreparedStatementSetter class is package-protected, and it is unlikely that somebody has overridden the method.  Related to #8657.  ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4bda92fd8a309c308b066233672db17e3100c0c7","closed","type: task,","spring-projects-issues","2010-02-23T03:39:36Z","2019-01-11T17:04:26Z"
"","11553","SQLErrorCodesFactory.dataSourceCache should be WeakHashMap [SPR-6887]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-6887](https://jira.spring.io/browse/SPR-6887?redirect=false)** and commented  OutOfMemoryError happens in scenario:  ``` while (true) {   jt = new JdbcTemplate(new SingleConnectionDataSource(conn, true));   jt.getExceptionTranslator(); } ```  Because in each loop iteration new instance of data source created, and it stored in dataSourceCache map, and cannot be garbage collected. To avoid this situation, dataSourceCache should be WeakHashMap, so data sources could be garbage collected.  Workaround is to call jt.setExceptionTranslator(...) explicitly.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09f02bc620fbc1d8e7b753097e0a280b7858c8f9","closed","type: bug,","spring-projects-issues","2010-02-22T00:52:53Z","2012-06-19T03:42:47Z"
"","11714","Allow null options in Spring MVC form:select tag  [SPR-7053]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-7053](https://jira.spring.io/browse/SPR-7053?redirect=false)** and commented  (This has been raised in [ROO-581](https://jira.spring.io/browse/ROO-581))  Currently the Spring MVC form:select tag has no notion to handle null selections. One would have to include a custom option:  ```              ```  and in addition one needs to register a custom converter to handle the potential null value appropriately.  I think the option to allow a default null option is common enough for Spring MVC to offer it out of the box rather than requiring the developer to work around it.  Here is a suggested solution for it:  ```   ```  (Obviously the attribute name can be discussed). The presence of this attribute should then indicate for the select tag to include a null option with the label specified.  Furthermore it would be good if the current IdToEntityConveter could handle null values accordingly (http://maciej.inszy.org/2010/02/18/spring-3-mvc-and-optional-relationships/ discusses a solution).    ---  **Affects:** 3.0.1  **Attachments:** - [select.tagx](https://jira.spring.io/secure/attachment/17587/select.tagx) (_6.75 kB_)  **Issue Links:** - [ROO-581](https://jira.spring.io/browse/ROO-581) Create and update views don't allow nullable reference field to be null  (_**""is depended on by""**_)  21 votes, 15 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-03-29T15:32:25Z","2019-01-12T03:50:24Z"
"","11157","Lenient property name casing (beyond standard JavaBeans conventions) [SPR-6491]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-6491](https://jira.spring.io/browse/SPR-6491?redirect=false)** and commented  Problems arise when using MVC form-objects are bound through the data binder when the fields use 'unusual' capitalizations:  ``` class Book {      String Title;      String ISBN;      int nInStock;      public String Book.getTitle() { ... }      public void   Book.setTitle(String Title) { ...  }       public String Book.getISBN() { ... }      public void   Book.setISBN(String ISBN) { ... }       public int    Book.getNInStock() { ... }      public void   Book.setNInStock(int nInStock) { ... } } ```  Only the following representation of these fields in a MVC form works:  ```    ```  Note, the Title needs to be lowercased whereas ISBN needs to remain uppercase (ie iSBN raises a NotReadablePropertyException). Same for the nInStock field which needs to be uppercased (first letter) and nInStock would raise a NotReadablePropertyException).  This seems to be inconsistent w/r to the conventions used here. Why is title handled different to the other two? Also, why can't we allow a convention where title, iSBN and nInStock all work assuming that the get methods follow JavaBean conventions with correct accessors and mutators as shown above? The data binder would just uppercase the first letter of the form field and prepend get and set accordingly.  Maybe I am missing a pattern here but this seems to be handled very inconsistently.  ---  **Affects:** 3.0 RC3  **Issue Links:** - [ROO-446](https://jira.spring.io/browse/ROO-446) Uppercase domain properties are not used correctly in views (_**""is depended on by""**_) - #12046 Spring Framework fails to find bean property if the setter contains more than one capital after the word set (e.g., setTEmailAddr)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/388edd7aaa4810fe3ff80b0aaabfbaaaa69cc01d","closed","type: enhancement,","spring-projects-issues","2009-12-01T15:50:42Z","2019-01-11T15:40:37Z"
"","11156","Spring formatters applied by to all numeric types [SPR-6490]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-6490](https://jira.spring.io/browse/SPR-6490?redirect=false)** and commented  Assume there is the following use-case:  A form backing object contains the following field annotated with JSR 303:  ``` @Size(min = 16, max = 16) private Long creditCardNumber; ```  and this field is bound through Spring MVC:  ```   ```  The user enters a 15 digit number: 123456789012345 Spring MVC would convert and bind the field, validate it and return it to the form for correction. Only now the field is presented after a default formatting has been applied: 123,456,789,012,345. The user does now need to remove the default formatting to make the Long type valid again.  I think by default formatters for numeric types should be disabled to prevent such unexpected behaviour. Unless the user explicitly asks to format a value (using `@NumberFormat`(style=Style.CURRENCY)) it should not be applied.    ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73a75220a8ba7b494868b9fff22652c36a38cdd9","closed","type: bug,","spring-projects-issues","2009-12-01T15:37:22Z","2012-06-19T03:44:03Z"
"","11080","mvc:interceptors configuration is not aware of 'p' namespace [SPR-6414]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-6414](https://jira.spring.io/browse/SPR-6414?redirect=false)** and commented  With the new mvc:interceptors configuration option introduced by #11018 I can register interceptors:  ```xml                                          ```  While the LocaleChangeInterceptor bean definition does register the paramName property correctly, the ThemeChangeInterceptor does not. This is due to the use of the xmlns:p=""http://www.springframework.org/schema/p"" namespace which does not seem to be taken into account.  ---  **Issue Links:** - [ROO-385](https://jira.spring.io/browse/ROO-385) Use new Spring MVC namespace (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de1d54872565a8e62e90a4993b20251c372c0fe7","closed","type: bug,","spring-projects-issues","2009-11-23T17:47:08Z","2019-01-11T15:35:45Z"
"","11866","Ref Doc still contains a section about ServerSessionMessageListenerContainer [SPR-7207]","**[Stefan Scheidt](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.scheidt@opitz-consulting.de)** opened **[SPR-7207](https://jira.spring.io/browse/SPR-7207?redirect=false)** and commented  The reference documentation still contains a section about ServerSessionMessageListenerContainer, see http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jms.html#jms-asynchronousMessageReception, Section 21.2.4.3.  This class was removed in Spring 3, see http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/jms/listener/serversession/ServerSessionMessageListenerContainer.html:  Deprecated. as of Spring 2.5, in favor of DefaultMessageListenerContainer and JmsMessageEndpointManager. To be removed in Spring 3.0.   ---  **Affects:** 3.0.1","closed","type: bug,","spring-projects-issues","2010-05-15T19:28:13Z","2012-06-19T03:43:01Z"
"","11489","Let Spring Web MVC controller handler methods return ints interpreted as HTTP status codes [SPR-6823]","**[Stefan Scheidt](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.scheidt@opitz-consulting.de)** opened **[SPR-6823](https://jira.spring.io/browse/SPR-6823?redirect=false)** and commented  It would be nice if handler methods of Spring Web MVC controller classes could return ints that would then be interpreted as HTTP Status codes and returned to the Client.  So instead of doing this:  ```java @RequestMapping(value = ""/someurl"", method = RequestMethod.POST) public void doSomething(@RequestParam String param, HttpServletResponse response) {     someService.proccess(param);     response.setStatus(HttpServletResponse.SC_OK); } ```  one would do this:  ```java @RequestMapping(value = ""/someurl"", method = RequestMethod.POST) public int doSomething(@RequestParam String param) {     someService.proccess(param);     return HttpServletResponse.SC_OK; } ```  Would be a little bit nicer, wouldn't it?  Regards Stefan    ---  **Affects:** 3.0 GA  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-10T16:59:17Z","2012-02-28T05:56:45Z"
"","11365","Explain the concept of a parent container [SPR-6699]","**[Stefan Ocke](https://jira.spring.io/secure/ViewProfile.jspa?name=stefanoc)** opened **[SPR-6699](https://jira.spring.io/browse/SPR-6699?redirect=false)** and commented  In the reference documentation, starting from http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html , chapter 3.3.2.3, the terms ""parent / anchestor container"" and ""container hierarchy"" are used.  However, those concepts are not explained anywhere before in the documentation.  It should be explained, what a parent container is, how it can be set and what influence the existence of a parent container has on creation of the application context (f.e. are the beans fro mthe parent overidden?).   ---  **Affects:** 3.0 GA  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2010-01-14T18:34:44Z","2018-12-28T09:58:15Z"
"","11302","Missing package import for javax.persistence.criteria in ORM [SPR-6636]","**[Stefan Ocke](https://jira.spring.io/secure/ViewProfile.jspa?name=stefanoc)** opened **[SPR-6636](https://jira.spring.io/browse/SPR-6636?redirect=false)** and commented  In ORM, dynamic proxies for EntityManagers are created (in SharedEntityManagerCreator.createSharedEntityManager())  When creating dynamic proxies, all classes that the to be proxified class depends on, must be on classpath.  Since JPA 2.0.0, EntityManager has a dependency on javax.persistence.criteria.  Thus, a (optional) package import on javax.persistence.criteria must be added to the MANIFEST.MF of ORM bundle.  Otherwise, we get NoClassDefFoundError for class javax.persistence.criteria.CriteriaQuery, when using `@PersistenceContext` in OSGi environments.  Note: There are some cases, when this error not occurs, for example, if the EntityManagerFactory created in the same bundle as where `@PersistenceContext` is used and if this bundle has some import on javax.persistence.criteria. But in other cases, when EntityManagerFactory is provided as an OSGi-service and used by other (DAO-)Bundles, we have no chance to workaround the missin import, since in those cases, always the Bundle classloader of ORM is used:  108 if (emf instanceof EntityManagerFactoryInfo) { 109 	                        cl = ((EntityManagerFactoryInfo) emf).getBeanClassLoader(); 110 	                } 111 	                Class[] ifcs = new Class[entityManagerInterfaces.length + 1]; 112 	                System.arraycopy(entityManagerInterfaces, 0, ifcs, 0, entityManagerInterfaces.length); 113 	                ifcs[entityManagerInterfaces.length] = EntityManagerProxy.class; 114 	                return (EntityManager) Proxy.newProxyInstance( 115 	                                (cl != null ? cl : **SharedEntityManagerCreator.class.getClassLoader())**, 116 	                                ifcs, new SharedEntityManagerInvocationHandler(emf, properties));    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e328083d118670e9853d73ee04ffd139488543e8, https://github.com/spring-projects/spring-framework/commit/2a19148eed5388e0d3e7daa3fe60fb22b4a411f0","closed","type: bug,","spring-projects-issues","2010-01-04T20:04:09Z","2012-06-19T03:43:55Z"
"","11226","Requests URIs containing . cannot be mapped correctly using @RequestMapping in RC3  [SPR-6560]","**[Stefan Magnus Landrø](https://jira.spring.io/secure/ViewProfile.jspa?name=landro)** opened **[SPR-6560](https://jira.spring.io/browse/SPR-6560?redirect=false)** and commented  I have the following request mapping.  `@RequestMapping`(value = ""/{username}/{domain}/{theme}/{locale}/{documenttype}"", method = RequestMethod.GET)  In RC1 it works like a breeze, regardless the values of the different elements. In RC3, however, whenever a path element contains a . (dot), the URI is not mapped correctly.  In this project, we're using email addresses as usernames, and this is a major problem for us now.  ---  **Affects:** 3.0 RC3  **Issue Links:** - #11148 `@RequestMapping` handled incorrectly when value contains ""."" (dot) character (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2009-12-13T18:19:08Z","2019-01-13T07:56:26Z"
"","11352","@ResponseBody throws HttpMediaTypeNotAcceptableException if client accepts ""*/*"" [SPR-6686]","**[Stefan Feier](https://jira.spring.io/secure/ViewProfile.jspa?name=sfeier)** opened **[SPR-6686](https://jira.spring.io/browse/SPR-6686?redirect=false)** and commented  It seems an old bug has cropped up again, see #10882  ``` protected boolean isSupported(MediaType mediaType) { 	if (mediaType == null) { 		return true; 	} 	for (MediaType supportedMediaType : getSupportedMediaTypes()) { 		if (supportedMediaType.includes(mediaType)) { 			return true; 		} 	} 	return false; } ```  I think the check should be reversed:  **`if (mediaType.includes(supportedMediaType)) ....`**  ---  **Affects:** 3.0 GA  **Issue Links:** - #10882 Using `@ResponseBody` throws HttpMediaTypeNotAcceptableException when it supports writing an acceptable MediaType - #11635 AbstractHttpMessageConverter canWrite logic the wrong way round??  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d5fc2bf919d809a12d5572406235ac769bfe57e","closed","type: bug,","spring-projects-issues","2010-01-13T03:55:44Z","2019-01-13T07:56:01Z"
"","10954","getenv.* : Access denied (java.lang.RuntimePermission getenv.*) [SPR-6287]","**[Sree Vaddi](https://jira.spring.io/secure/ViewProfile.jspa?name=sreevaddi)** opened **[SPR-6287](https://jira.spring.io/browse/SPR-6287?redirect=false)** and commented  I get the following error. Upon investigation, I found that org.springframework.context-3.0.0.RC1.jar, calls System.getProperties() and System.getenv() to initialize SYSTEM_PROPERTIES_BEAN_NAME & SYSTEM_ENVIRONMENT_BEAN_NAME. Both these calls raises exceptions on my server, due to our policies.  My company restricts me from entering a line in 'policy' file that has a wildcard, in this case getenv.*.  Is there a work around ? Basically, custom building the mentioned jar without these two beans initialized ?  Any insite is highly appreciated!  Thanks in advance. SreeV  [10/30/09 3:06:45:594 CDT] 00000016 SecurityManag W SECJ0314W: Current Java 2 Security policy reported a potential violation of Java 2 Security Permission. Please refer to InfoCenter for further information.  Permission:  getenv.* : Access denied (java.lang.RuntimePermission getenv.*)  Code:  org.springframework.context.support.AbstractApplic ationContext in {file:/opt/httpd/root/apps/wszng/ibm/ccix-dev-ear/wszngWeb.war/WEB-INF/lib/org.springframework.context-3.0.0.RC1.jar}  Stack Trace:  java.security.AccessControlException: Access denied (java.lang.RuntimePermission getenv.*) at java.security.AccessController.checkPermission(Acc essController.java:108) at java.lang.SecurityManager.checkPermission(Security Manager.java:558) at com.ibm.ws.security.core.SecurityManager.checkPerm ission(SecurityManager.java:212) at java.lang.System.getenv(System.java:632) at org.springframework.context.support.AbstractApplic ationContext.prepareBeanFactory(AbstractApplicatio nContext.java:474)  ---  **Affects:** 3.0 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?t=79877  **Issue Links:** - #10974 Spring Expression Language creates systemProperties bean calling System.getProperties() which in enterprise shared containers is locked down","closed","in: core,","spring-projects-issues","2009-10-30T05:56:22Z","2019-01-11T15:11:04Z"
"","11851","should supports the attributes of setting customized HttpMessageConverter bean list [SPR-7191]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-7191](https://jira.spring.io/browse/SPR-7191?redirect=false)** and commented  Currently, the  doesn't allow the HttpMessageConverters be customizable (It is read-only in AnnotationDrivenBeanDefinitionParser).  It is recommended to allow the MessageConverters be reference by external HttpMessageConverter beans list.  ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2  **Issue Links:** - #12161 Make it easier to add new Message Converters to AnnotationMethodHandlerAdapter - #11751 AnnotationDrivenBeanDefinitionParser should allow injection of custom HttpMessageConverter's  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f26b499cbd2a58b0db47595ba48c89c350c11bbb  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-05-11T13:06:53Z","2019-01-11T13:10:30Z"
"","11850","AnnotationMethodHandlerAdapter and AnnotationMethodHandlerExceptionResolver should supports MappingJacksonHttpMessageConverter by default [SPR-7190]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-7190](https://jira.spring.io/browse/SPR-7190?redirect=false)** and commented  The AnnotationMethodHandlerAdapter and AnnotationMethodHandlerExceptionResolver should supports MappingJacksonHttpMessageConverter (and other HttpMessageConverter, such as Jaxb2RootElementHttpMessageConverter etc if the libraries are found in classpath) by default, to make it consistent with the class AnnotationDrivenBeanDefinitionParser that used internally for mvc:annotation-driven / >  ---  **Affects:** 3.0.2  **Issue Links:** - #11567 `@ResponseBody` does not work with `@ExceptionHandler` (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-05-11T12:56:12Z","2019-01-13T07:53:58Z"
"","11737","doesn't allow CustomPropertyEditor be co-exists [SPR-7077]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-7077](https://jira.spring.io/browse/SPR-7077?redirect=false)** and commented  Although it is preferable to use conversionService rather than use the CustomEditor, in some situation, custom editor is still required (e.g. StringTrimmerEditor). The current AnnotationDrivenBeanDefinitionParser (used by MvcNamespaceHandler for ) will create a ConfigurableWebBindingInitializer instance internally, which doesn't allow to register custom editors with propertyEditorRegistrars.  ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=84267  **Issue Links:** - #13290 Declaring RequestMappingHandlerAdapter before  makes Spring ignore my custom WebBindingInitializer  7 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-07T17:52:36Z","2019-01-11T13:25:15Z"
"","11667","RestTemplate fails to convert properly for Generic Type Container with MappingJacksonHttpMessageConverter [SPR-7002]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-7002](https://jira.spring.io/browse/SPR-7002?redirect=false)** and commented  When I used RestTemplate to retrieve the result in Generic Type Container, the MappingJacksonHttpMessageConverter could not properly determine the type (due to erasure)  e.g.  List\ myDomainList = restTemplate.getForObject(uri, List.class); will throw ClassCastException  the MappingJacksonHttpMessageConverter could not determine that the List container should stores MyDomain objects by passing the List.class, it could only stores as List\  Recommend to add something similar to TypeReference in Jackson. http://wiki.fasterxml.com/JacksonInFiveMinutes (Section: Data Binding with Generics) to solve this issue.  Personal speaking, if the new HttpEntity could provide a setTypeReference() would be much convenient. e.g. HttpEntity httpEntity = new HttpEntity(); httpEntity.setTypeReference(new TypeReference() {});  List\ myDomainList = restTemplate.getForObject(uri, httpEntity);  ---  **Affects:** 3.0 GA, 3.0.1  **Issue Links:** - #11685 Proper handling of parameterized types in RestTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1f6eabbce88a076dcc36a6b216fae00184f2d6e, https://github.com/spring-projects/spring-framework/commit/247c46e6ea6c710fa8a34352e1e08b4f6cc37ff8, https://github.com/spring-projects/spring-framework/commit/212daa19954ec639e493554ade50149995f4e802  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-17T14:05:55Z","2019-01-11T12:59:33Z"
"","11666","RestTemplate's ResponseErrorHandler should take care the detail message at @ResponseBody from @ExceptionHandler [SPR-7001]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-7001](https://jira.spring.io/browse/SPR-7001?redirect=false)** and commented  Regarding to https://jira.springsource.org/browse/SPR-6902, After implement the `@ResponseBody` at `@ExceptionHandler`, the ResponseErrorHandler's handleError() method should provide a way to access the `@ResponseBody` content.  ---  **Affects:** 3.0.2  **Issue Links:** - #20103 RestTemplate is missing ""Typed"" error handler.  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-17T13:50:25Z","2019-01-11T12:59:39Z"
"","11646","Spring TaskScheduler not accurate [SPR-6981]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-6981](https://jira.spring.io/browse/SPR-6981?redirect=false)** and commented  I got the latest task-basic spring samples from svn. I have tried to changed the cron expression to ""0/10 * * * * ?"" and verify the triggering time. I found that the triggering time is not exactly every ONCE for every 10 seconds. It might execute twice and have some time variation.  Mon Mar 15 11:00:40 CST 2010","closed","in: core,","spring-projects-issues","2010-03-14T15:10:54Z","2019-01-12T16:49:41Z"
"","11641","Add debug log for HttpMessageConverter usage [SPR-6976]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-6976](https://jira.spring.io/browse/SPR-6976?redirect=false)** and commented  It would be nice to add more debug logging message for HttpMessageConverter usage in AnnotationMethodHandlerAdapter.java, RestTemplate.java and HttpMessageConverterExtractor.java for the following  - The accepted MediaType list from Client - The actual HttpMessageConverter (and the supported media types) be used that can read/write for that HttpMessage - The final output MediaType in the response.    ---  **Affects:** 3.0 GA, 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4880d1d4617175cf8ff24dce872a97c363bea06d","closed","type: enhancement,","spring-projects-issues","2010-03-11T16:55:14Z","2012-06-19T03:44:01Z"
"","11768","ClassCastException on ValidationMode and SharedCacheMode while using the Spring 3.0.2 + OpenJPA 2.0.0-M3 [SPR-7108]","**[Simon So](https://jira.spring.io/secure/ViewProfile.jspa?name=sso)** opened **[SPR-7108](https://jira.spring.io/browse/SPR-7108?redirect=false)** and commented  To run the attached project:  mvn clean install mvn tomcat:run  Exception upon initialization...  Please also add 3.0.2 + openjpa 2.0.0 as part of the unit test.  Apr 13, 2010 1:43:51 PM org.apache.catalina.core.ApplicationContext log INFO: Initializing Spring FrameworkServlet 'ecomapp' Apr 13, 2010 1:59:21 PM org.apache.catalina.core.ApplicationContext log SEVERE: StandardWrapper.Throwable org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in ServletContext resource [/WEB-INF/conf/spring/dataaccess/openjpa/openjpa.xml]: Invocation of init method failed; nested exception is java.lang.ClassCastException: javax.persistence.ValidationMode cannot be cast to javax.persistence.spi.ValidationMode at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1412) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:546) at : at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) Caused by: java.lang.ClassCastException: javax.persistence.ValidationMode cannot be cast to javax.persistence.spi.ValidationMode at $Proxy0.getValidationMode(Unknown Source) at org.apache.openjpa.persistence.PersistenceUnitInfoImpl.toOpenJPAProperties(PersistenceUnitInfoImpl.java:487) at org.apache.openjpa.persistence.PersistenceProductDerivation.load(PersistenceProductDerivation.java:208) at org.apache.openjpa.persistence.PersistenceProviderImpl.createContainerEntityManagerFactory(PersistenceProviderImpl.java:158) at org.apache.openjpa.persistence.PersistenceProviderImpl.createContainerEntityManagerFactory(PersistenceProviderImpl.java:59) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:225) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:308) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1469) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1409) ... 41 more   ---  **Affects:** 3.0.2  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/16678/pom.xml) (_7.13 kB_)","closed","in: core,","spring-projects-issues","2010-04-16T09:27:24Z","2019-01-12T05:32:12Z"
"","10995","Multiple constructor-arg with same index=0 withing the same bean element does not throw exception [SPR-6329]","**[shine paul](https://jira.spring.io/secure/ViewProfile.jspa?name=shinep)** opened **[SPR-6329](https://jira.spring.io/browse/SPR-6329?redirect=false)** and commented  I have a custom class MyClass  class MyClass { String string = null; int count = 0; public Class(String string){ this.string = string; } public class MyString(String string, int count) { this.string = string; this.count = count; }  In my applicationContext.xml I have something like this  \ 	\ 	\ \  I have typed the second index=0 by mistake (It should have been 1, so that spring could create the object with two arguments) However Spring silently ignores my mistake and creates an instance of MyClass which only takes String as the argument.  I would rather like Spring to complain about my mistake at this point.    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5d772554aeacc790a6ef18a079485ac0ccce4bde","closed","in: core,","spring-projects-issues","2009-11-11T03:47:59Z","2012-06-19T03:44:11Z"
"","11686","OptionWriter.renderFromMap fails when map key is null [SPR-7024]","**[Shai Yallin](https://jira.spring.io/secure/ViewProfile.jspa?name=electricmonk)** opened **[SPR-7024](https://jira.spring.io/browse/SPR-7024?redirect=false)** and commented  When using a Map as the items values for an OptionWriter-based tag and ommiting the itemValue property (valueProperty is null), OptionWriter still creates BeanWrappers around the map key and values although they are never used.  As a result of that, one is unable to use null as a map key, which may be useful for instance when the map contains enum values as keys and their localized names as values. In this scenario, it may be useful to include null as a map key which represents an empty field value.  affected code: {{ Object mapKey = entry.getKey(); Object mapValue = entry.getValue(); BeanWrapper mapKeyWrapper = PropertyAccessorFactory.forBeanPropertyAccess(mapKey); BeanWrapper mapValueWrapper = PropertyAccessorFactory.forBeanPropertyAccess(mapValue); Object renderValue = (this.valueProperty != null ? mapKeyWrapper.getPropertyValue(this.valueProperty) : mapKey.toString()); Object renderLabel = (this.labelProperty != null ? mapValueWrapper.getPropertyValue(this.labelProperty) : mapValue.toString()); renderOption(tagWriter, mapKey, renderValue, renderLabel); }}  fix suggestion: only create the wrappers if this.valueProperty != null   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a61443089903f42d9bc07c2acd05274abfa4ed05","closed","type: bug,","spring-projects-issues","2010-03-23T03:41:51Z","2012-06-19T03:43:48Z"
"","11172","should allow overriding all WebBindingInitializer properties [SPR-6506]","**[Shai Yallin](https://jira.spring.io/secure/ViewProfile.jspa?name=electricmonk)** opened **[SPR-6506](https://jira.spring.io/browse/SPR-6506?redirect=false)** and commented  Currently, one may only override the validator and conversionService properties of the WebBindingInitializer using the  tag; more complicated use cases (such as mine, attempting to define an alternate MessageCodesResolver in order to support custom error code prefixes) require the user to drop usage of this tag altogether. I strongly suggest adding all properties of the WebBindingInitializer as  properties.  Thanks   ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f26b499cbd2a58b0db47595ba48c89c350c11bbb  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-03T01:15:07Z","2012-06-19T03:43:51Z"
"","10891","framework reference 3.0 RC1 page57 grammer [SPR-6223]","**[Shahzada Hatim](https://jira.spring.io/secure/ViewProfile.jspa?name=shahzada.hatim)** opened **[SPR-6223](https://jira.spring.io/browse/SPR-6223?redirect=false)** and commented  spring documentation PDF page 57, The ApplicationContext is created _AND_ initialized....  for 3-  the grammer  is not correct in my opnion, i cannot understand how the resolution is done in clear way.   --- No further details from [SPR-6223](https://jira.spring.io/browse/SPR-6223?redirect=false)","closed","","spring-projects-issues","2009-10-11T10:14:13Z","2019-01-11T15:08:04Z"
"","10916","Accept header should not be mandatory for properly handling response body. [SPR-6248]","**[Sergio Bossa](https://jira.spring.io/secure/ViewProfile.jspa?name=sbtourist)** opened **[SPR-6248](https://jira.spring.io/browse/SPR-6248?redirect=false)** and commented  While trying to find suitable HttpMessageConverters for a custom object returned by a RequestMapping-annotated method, AnnotationMethodHandlerAdapter#handleResponseBody(Object, ServletWebRequest) fails because the request doesn't contain any Accept header.  However, the Http rfc states as follows (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html):  ""If no Accept header field is present, then it is assumed that the client accepts all media types.""  So, Accept header should not be mandatory: if not present, the response body should be handled whatever its media type.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d54a975af403aa79866e2cf34ac2809e298bfafd","closed","type: bug,","spring-projects-issues","2009-10-17T19:39:27Z","2012-06-19T03:42:41Z"
"","11272","Tiles 2 and Spring MVC 3RC3 : java.lang.ClassCastException: org.apache.tiles.web.util.ServletContextAdapter [SPR-6606]","**[Sebastien Caron](https://jira.spring.io/secure/ViewProfile.jspa?name=tilucifer)** opened **[SPR-6606](https://jira.spring.io/browse/SPR-6606?redirect=false)** and commented  The integration of Apache Tiles version 2.1.4 with Spring doesn't work on Weblogic server 10g  The class TilesConfigurer fails to initialize properly the Tiles environment, as you can see in the stack trace below:  14:42:26,612 ERROR (FrameworkServlet.java:315) Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tilesConfigurer' defined in ServletContext resource [/WEB-INF/starterkit-servlet.xml]: Invocation of init method failed; nested exception is java.lang.ClassCastException: org.apache.tiles.web.util.ServletContextAdapter at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1401) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:289) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:286) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:188) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:558) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:842) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:416) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:443) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:459) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:340) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:307) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) at javax.servlet.GenericServlet.init(GenericServlet.java:241) at weblogic.servlet.internal.StubSecurityHelper$ServletInitAction.run(StubSecurityHelper.java:283) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(Unknown Source) at weblogic.servlet.internal.StubSecurityHelper.createServlet(StubSecurityHelper.java:64) at weblogic.servlet.internal.StubLifecycleHelper.createOneInstance(StubLifecycleHelper.java:58) at weblogic.servlet.internal.StubLifecycleHelper.\(StubLifecycleHelper.java:48) at weblogic.servlet.internal.ServletStubImpl.prepareServlet(ServletStubImpl.java:521) at weblogic.servlet.internal.WebAppServletContext.preloadServlet(WebAppServletContext.java:1899) at weblogic.servlet.internal.WebAppServletContext.loadServletsOnStartup(WebAppServletContext.java:1873) at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:1791) at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletContext.java:3005) at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.java:1371) at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:468) at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:204) at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:37) at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:60) at weblogic.application.internal.flow.ScopedModuleDriver.start(ScopedModuleDriver.java:200) at weblogic.application.internal.flow.ModuleListenerInvoker.start(ModuleListenerInvoker.java:117) at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:204) at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:37) at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:60) at weblogic.application.internal.flow.StartModulesFlow.activate(StartModulesFlow.java:27) at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.java:635) at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:37) at weblogic.application.internal.BaseDeployment.activate(BaseDeployment.java:212) at weblogic.application.internal.EarDeployment.activate(EarDeployment.java:16) at weblogic.application.internal.DeploymentStateChecker.activate(DeploymentStateChecker.java:162) at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(AppContainerInvoker.java:79) at weblogic.deploy.internal.targetserver.operations.AbstractOperation.activate(AbstractOperation.java:569) at weblogic.deploy.internal.targetserver.operations.ActivateOperation.activateDeployment(ActivateOperation.java:140) at weblogic.deploy.internal.targetserver.operations.ActivateOperation.doCommit(ActivateOperation.java:106) at weblogic.deploy.internal.targetserver.operations.AbstractOperation.commit(AbstractOperation.java:323) at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploymentCommit(DeploymentManager.java:820) at weblogic.deploy.internal.targetserver.DeploymentManager.activateDeploymentList(DeploymentManager.java:1227) at weblogic.deploy.internal.targetserver.DeploymentManager.handleCommit(DeploymentManager.java:436) at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.commit(DeploymentServiceDispatcher.java:163) at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.doCommitCallback(DeploymentReceiverCallbackDeliverer.java:181) at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.access$100(DeploymentReceiverCallbackDeliverer.java:12) at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer$2.run(DeploymentReceiverCallbackDeliverer.java:67) at weblogic.work.SelfTuningWorkManagerImpl$WorkAdapterImpl.run(SelfTuningWorkManagerImpl.java:516) at weblogic.work.ExecuteThread.execute(ExecuteThread.java:201) at weblogic.work.ExecuteThread.run(ExecuteThread.java:173) Caused by: java.lang.ClassCastException: org.apache.tiles.web.util.ServletContextAdapter at weblogic.servlet.jsp.JspFactoryImpl.getJspApplicationContext(JspFactoryImpl.java:55) at org.apache.tiles.jsp.evaluator.el.JspExpressionFactoryFactory.getExpressionFactory(JspExpressionFactoryFactory.java:62) at org.apache.tiles.evaluator.el.ELAttributeEvaluator.init(ELAttributeEvaluator.java:111) at org.apache.tiles.factory.TilesContainerFactory.storeContainerDependencies(TilesContainerFactory.java:447) at org.apache.tiles.factory.TilesContainerFactory.initializeContainer(TilesContainerFactory.java:368) at org.apache.tiles.factory.TilesContainerFactory.createTilesContainer(TilesContainerFactory.java:287) at org.apache.tiles.factory.TilesContainerFactory.createContainer(TilesContainerFactory.java:231) at org.apache.tiles.startup.BasicTilesInitializer.createContainer(BasicTilesInitializer.java:117) at org.apache.tiles.startup.BasicTilesInitializer.initialize(BasicTilesInitializer.java:53) at org.springframework.web.servlet.view.tiles2.TilesConfigurer.afterPropertiesSet(TilesConfigurer.java:203) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1460) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1398) ... 57 more  Nevertheless the alternate solution mentioned in SpringSource Forum on this link http://forum.springsource.org/showthread.php?t=65907 works  So currently we use specific configuration of bean ""tilesConfigurer"" which calls our specific class TilesConfigurer    ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3322368106f3e3bca23b5f52e690d80ed052bb40, https://github.com/spring-projects/spring-framework/commit/b5941924255265a2d500d583bfb5b091c7897983  2 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2009-12-23T01:03:54Z","2012-06-19T03:44:16Z"
"","11123","NoSuchMethodError in org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata() [SPR-6457]","**[Sebastian Staudt](https://jira.spring.io/secure/ViewProfile.jspa?name=koraktor)** opened **[SPR-6457](https://jira.spring.io/browse/SPR-6457?redirect=false)** and commented  Upgrading from 3.0.0.RC1 to 3.0.0.RC2 I started receiving this error on application startup:  ``` java.lang.NoSuchMethodError: org.springframework.beans.factory.annotation.InjectionMetadata.(Ljava/lang/Class;Ljava/util/Collection;)V         at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:377)         at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(PersistenceAnnotationBeanPostProcessor.java:295)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:786)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450)         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:289)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:286)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:192)         at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:892)         at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:588)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369)         at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:270)         at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197)         at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)         at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3934)         at org.apache.catalina.core.StandardContext.start(StandardContext.java:4429)         at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)         at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)         at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:526)         at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:630)         at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:514)         at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1288)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)         at java.lang.reflect.Method.invoke(Method.java:597)         at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:297)         at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)         at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)         at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1473)         at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:824)         at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:350)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:617)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)         at org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:859)         at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:574)         at org.apache.tomcat.util.net.AprEndpoint$Worker.run(AprEndpoint.java:1527)         at java.lang.Thread.run(Thread.java:619) ```    ---  **Affects:** 3.0 RC2  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/16036/pom.xml) (_20.55 kB_) - [trace.txt](https://jira.spring.io/secure/attachment/16037/trace.txt) (_34.51 kB_)","closed","","spring-projects-issues","2009-11-26T21:31:05Z","2019-01-11T15:39:29Z"
"","11112","Provde setter for formatters in FormattingConversionServiceFactoryBean [SPR-6446]","**[Sebastian Beigel](https://jira.spring.io/secure/ViewProfile.jspa?name=sbeigel)** opened **[SPR-6446](https://jira.spring.io/browse/SPR-6446?redirect=false)** and commented  It would be nice to have convenience setters in FormattingConversionServiceFactoryBean to add custom formatters (and maybe converters and converter factories...). It's much easier to explicitly declare a \ and customize it than to implement, declare and customize a FormatterRegistry.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #12388 Make it easier to register custom Formatters (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2009-11-25T00:08:15Z","2019-01-11T15:32:20Z"
"","11111","Provide setters for pattern and dateStyle in FormattingConversionServiceFactoryBean [SPR-6445]","**[Sebastian Beigel](https://jira.spring.io/secure/ViewProfile.jspa?name=sbeigel)** opened **[SPR-6445](https://jira.spring.io/browse/SPR-6445?redirect=false)** and commented  Provide setters for NumberFormatter's pattern and JodaTimeFormattingConfigurer's dateStyle in FormattingConversionServiceFactoryBean to customize the default formatting style.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #12567 FormattingConversionServiceFactoryBean enhancements","closed","status: invalid,","spring-projects-issues","2009-11-25T00:03:26Z","2019-01-12T05:32:54Z"
"","11108","Difference Formatter/Converter - separate functionality? [SPR-6442]","**[Sebastian Beigel](https://jira.spring.io/secure/ViewProfile.jspa?name=sbeigel)** opened **[SPR-6442](https://jira.spring.io/browse/SPR-6442?redirect=false)** and commented  I don't really understand the difference between the two systems Formatter vs. Converter. I think it would simpler and better to separate the functionality like this:  public interface Formatter\ { String format(T input, Locale locale); }  and  public interface Converter\ { T convert(String input, Class","closed","type: enhancement,","spring-projects-issues","2009-11-24T21:26:02Z","2011-09-27T11:05:50Z"
"","11073","Provide localized field name in JSR-303 validation messages [SPR-6407]","**[Sebastian Beigel](https://jira.spring.io/secure/ViewProfile.jspa?name=sbeigel)** opened **[SPR-6407](https://jira.spring.io/browse/SPR-6407?redirect=false)** and commented  I think it would be a good idea to provide the (localized) field name in JSR-303 validation messages as the first argument (""{0}""). It would be consistent with Spring's other validation (type conversion) messages and essential if you want to show a validation error summary (vs. showing the error message next to the input field in the UI, i.e. ""Foo must match [a-z]+"").  I have extended LocalValidatorFactoryBean and overridden validate(Object target, Errors errors) to include the field name (as a DefaultMessageSourceResolvable) as the first argument. But I think it should be included directly in LocalValidatorFactoryBean (i.e. SpringValidatorAdapter).  The code could look something like this (sorry, too lazy to make a patch :)      public void validate(Object target, Errors errors) {         Set result = getValidator().validate(target);         for (ConstraintViolation violation : result) {             String field = violation.getPropertyPath().toString();             FieldError fieldError = errors.getFieldError(field);             if (fieldError == null || !fieldError.isBindingFailure()) {                 // build argument list...                 Collection args = new ArrayList();                 // ...containing the localized field name as first arg (trying the codes ""model.field"" and ""field"")...                 args.add(new DefaultMessageSourceResolvable(new String[] { errors.getObjectName() + ""."" + field, field }));                 // ...and JSR-303 validator's other arguments                 args.addAll(violation.getConstraintDescriptor().getAttributes().values());                 errors.rejectValue(field,                         violation.getConstraintDescriptor().getAnnotation().annotationType().getSimpleName(),                         args.toArray(),                         violation.getMessage());             }         }  Resolving to messages like this:  Pattern={0} must match {4}! model.field=Foo field=Bar  => Foo must match [a-z]+  Of course you could provide all the messages in the ""direct"" form: ""Pattern.field=Field must match {4}"" (w/out the patch) -- but this is cumbersome and redundant :)   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/69124f9392dc0692191c9200230ada76531b5ef5","closed","type: enhancement,","spring-projects-issues","2009-11-22T02:02:42Z","2012-06-19T03:42:48Z"
"","11396","Access JSR-303 validation contraint attributes in localized messages [SPR-6730]","**[Scott Frederick](https://jira.spring.io/secure/ViewProfile.jspa?name=scottyfred)** opened **[SPR-6730](https://jira.spring.io/browse/SPR-6730?redirect=false)** and commented  Related to: #11073 and #10092.  When using declarative validation constraints with Spring, custom/localized messages should be able to access the arguments to the validation annotation in a consistent manner that is guaranteed to work across validator providers.  For example, when applying an annotation like ""`@Size`(min=1, max=25)"" to a field you should be able to provide an error message format like ""Size.fieldName=Size of {0} must be between {1} and {2}"".  Currently, the values of the arguments passed to the annotation are available to the message source in an arguments array, but the position of each value in the array is not consistent. It appears that the positions of the arguments in the array can change depending on the validator provider and potentially change between releases of a validator provider. If the framework does currently provide some guarantee of the order, then this should be documented.  Here are some examples of validator annotations and the arguments array that is available to the message source when the validation fails. In all cases the first ([0]) element in the array is a DefaultMessageSourceResolvable containing the name of the field in error.  `@Size`(min=1, max=25)  |index|contents| |:---|:---| |1|""message"" argument from annotation| |2|""min"" argument from annotation| |3|""payload"" argument from annotation| |4|""max"" attribute of annotation| |5|""groups"" attribute of annotation|  `@Max`(25)  |index|contents| |:---|:---| |1|""value"" argument from annotation| |2|""message"" argument from annotation| |3|""groups"" attribute of annotation| |4|""payload"" argument from annotation|  `@Min`(1)  |index|contents| |:---|:---| |1|""value"" argument from annotation| |2|""message"" argument from annotation| |3|""groups"" attribute of annotation| |4|""payload"" argument from annotation|  `@Pattern`(regexp=""[A-Z]+"")  |index|contents| |:---|:---| |1|""message"" argument from annotation| |2|""payload"" argument from annotation| |3|""flags"" argument from annotation| |4|""regexp"" attribute of annotation| |5|""groups"" attribute of annotation|  ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?p=279199#post279199  **Attachments:** - [ConstraintsArgumentsMappings.java](https://jira.spring.io/secure/attachment/16780/ConstraintsArgumentsMappings.java) (_2.17 kB_) - [SpringValidatorAdapterWithGroups.java](https://jira.spring.io/secure/attachment/16779/SpringValidatorAdapterWithGroups.java) (_2.67 kB_)  **Issue Links:** - #11966 Expose MessageSource through Hibernate Validator 4.1's ResourceBundleLocator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7304c090213a38108f9f06cf1d2db3f9f754c621  3 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-20T05:07:30Z","2019-01-13T21:47:27Z"
"","11375","JSR-303 @Valid validation is not invoked for @RequestBody controller method arguments [SPR-6709]","**[Scott Frederick](https://jira.spring.io/secure/ViewProfile.jspa?name=scottyfred)** opened **[SPR-6709](https://jira.spring.io/browse/SPR-6709?redirect=false)** and commented  If an argument to a Spring MVC Controller method is annotated with both the `@RequestBody` and `@Valid` annotations, the argument should be passed to the validation framework after being populated, but the validation is not invoked.  More details and an example are included in the forum thread.   ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=81563  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f1ad53d570b407a88665560c1e4adc61a21d6ab8, https://github.com/spring-projects/spring-framework/commit/9d2ee7061c93453d9cac411aee6df03e34b12a88, https://github.com/spring-projects/spring-framework/commit/18f5d90235873f02a6c41f13b2231537b08424d4  26 votes, 30 watchers","closed","has: votes-jira,","spring-projects-issues","2010-01-15T05:07:15Z","2013-03-27T03:21:38Z"
"","11359","@ExceptionHandler methods should support naked beans as return values [SPR-6693]","**[Scott Frederick](https://jira.spring.io/secure/ViewProfile.jspa?name=scottyfred)** opened **[SPR-6693](https://jira.spring.io/browse/SPR-6693?redirect=false)** and commented  Spring MVC `@ExceptionHandler` controller methods support a flexible argument list and return value, similiar to `@RequestMapping-annotated` methods. One option that is supported by `@RequestMapping` methods but not `@ExceptionHandler` methods is returning naked bean objects from the exception handler method.  For example, this type of exception handler method would be very convenient, especially when building RESTful services using a MarshallingView (the important detail is the ""HelloResponse"" return value from the handleBindException method):  ``` @Controller @RequestMapping(""/Hello"") public class HelloController {   @RequestMapping(value = ""/greet"", method = RequestMethod.GET)   public HelloResponse greetGet(@Valid HelloRequest request) {     String message = ""Hello, "" + request.getTitle() + "" "" + request.getName();     return new HelloResponse(message);   }    @ExceptionHandler(BindException.class)   public HelloResponse handleBindException(BindException be) {     List errors = be.getFieldErrors();     HelloResponse response = new HelloResponse();     for (FieldError error : errors) {       response.addError(error.toString());     }     return response;   } } ```  With a response object that looks like this:  ``` @XmlRootElement(name = ""response"") public class HelloResponse {   private String message;   private List errors;   // getters and setters } ```  Currently this code will throw an exception when the exception handler method returns to the framework:  ``` java.lang.IllegalArgumentException: Invalid handler method return value: HelloResponse@caf0ed 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.getModelAndView(AnnotationMethodHandlerExceptionResolver.java:353) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.doResolveException(AnnotationMethodHandlerExceptionResolver.java:101) 	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:109) 	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1004) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:792) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:552) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) ```    ---  **Affects:** 3.0 GA  **Attachments:** - [ExceptionHandler-return.patch](https://jira.spring.io/secure/attachment/16092/ExceptionHandler-return.patch) (_5.70 kB_)  13 votes, 19 watchers","closed","has: votes-jira,","spring-projects-issues","2010-01-14T01:57:19Z","2012-06-19T03:43:03Z"
"","11243","MarshallingView auto detect model with Jaxb2Marshaller chooses the wrong object [SPR-6577]","**[Scott Frederick](https://jira.spring.io/secure/ViewProfile.jspa?name=scottyfred)** opened **[SPR-6577](https://jira.spring.io/browse/SPR-6577?redirect=false)** and commented  When using MarshallingView with a Jaxb2Marshaller and more than one object in the model has JAXB annotations on it, automatic detection of the appropriate object in the model does not work as expected.  Using this example MVC RESTful service:  Request and Response classes:  ``` @XmlRootElement(name = ""request"") public class HelloRequest {   private String name;   private String title;   // getters and setters }  @XmlRootElement(name = ""response"") public class HelloResponse {   private String message;   // getters and setters } ```  Controller:  ``` @Controller @RequestMapping(""/Hello"") public class HelloController {   @RequestMapping(value = ""/greet"", method = RequestMethod.GET)   public HelloResponse greetGet(HelloRequest request) {     String message = ""Hello, "" + request.getTitle() + "" "" + request.getName();     return new HelloResponse(message);   } } ```  -servlet.xml  ```                                                                                                   ```  In this scenario, the Controller simply returns a response object. The model is automatically generated, and includes both the request and response objects (along with a few other objects). The model is passed to the MarshallingView, which tries to detect the appropriate model object for rendering the view (since no modelKey property was set on the MarshallingView). MarshallingView calls the supports() method of the configured Marshaller with each object in the model until supports() returns true. The detected object is then passed to the Marshaller for marshalling.  When MarshallingView is used with Jaxb2Marshaller this causes a problem. Jaxb2Marshaller.supports(Class c) will return true for any type that has a JAXB `@XmlRootElement` annotation on it, even if that Marshaller is not configured to support that class. In this scenario, MarshallingView encounters the request object in the model first and passes it to Jaxb2Marshaller.supports(), which returns true because the request object is annotated with `@XmlRootElement`. MarshallingView then passes the request object to Jaxb2Marshaller.marshal(). This call fails because the Marshaller is not configured to handle HelloRequest objects:  ``` org.springframework.oxm.UncategorizedMappingException: Unknown JAXB exception; nested exception is  javax.xml.bind.JAXBException: class com.test.domain.HelloRequest nor any of its super class is known to this context. 	at org.springframework.oxm.jaxb.Jaxb2Marshaller.convertJaxbException(Jaxb2Marshaller.java:580) 	at org.springframework.oxm.jaxb.Jaxb2Marshaller.marshal(Jaxb2Marshaller.java:412) 	at org.springframework.oxm.jaxb.Jaxb2Marshaller.marshal(Jaxb2Marshaller.java:395) 	at org.springframework.web.servlet.view.xml.MarshallingView.renderMergedOutputModel(MarshallingView.java:103) 	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1060) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:798) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647) 	... 37 more Caused by: javax.xml.bind.JAXBException: class com.test.domain.HelloRequest nor any of its super class is known to this context. 	at com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl.getBeanInfo(JAXBContextImpl.java:554) 	at com.sun.xml.internal.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:470) 	at com.sun.xml.internal.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:314) 	at com.sun.xml.internal.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:243) 	at org.springframework.oxm.jaxb.Jaxb2Marshaller.marshal(Jaxb2Marshaller.java:408) 	... 44 more ```  If the Jaxb2Marshaller were configured to support HelloRequest objects, then this exception would not be thrown but the request object would incorrectly be marshalled to the output view instead of the response object.  To fix this, either the `@XmlRootElement` must be removed from the HelloRequest class, or the modelKey property must be set on the MarshallingView (to ""helloResponse"" in this case) to override automatic detection of the appropriate model object. Neither of these is a good solution. * The HelloRequest class does not need the `@XmlRootElement` annotation on it for this example, but in the real-world scenario this class is also used for other POST requests with the `@RequestBody` annotation. * Setting the modelKey property on the view would require a unique view bean to match each response object, since the name of the response object class is used to generate the model key.    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b1e2a2ec3c12e896824dfeb71f0e44b4a85c736f","closed","type: enhancement,","spring-projects-issues","2009-12-17T05:55:26Z","2012-06-19T03:43:02Z"
"","11231","Dependency Validation for Beans via JSR303 Validation Specification [SPR-6565]","**[Scott Battaglia](https://jira.spring.io/secure/ViewProfile.jspa?name=sbattaglia)** opened **[SPR-6565](https://jira.spring.io/browse/SPR-6565?redirect=false)** and commented  Since Spring Framework 3 includes support for the Bean Validation API it would seem a natural extension to add support for using these annotations for more than just domain validation.  The `@Required` annotation is too coarse grained to provide much support for validating APIs.  Using a combination of Assert.notNull (or other asserts) in an afterPropertiesSet is rather tedious.  Being able to annotation the collaborators with annotations such as `@NotNull`, etc. and then having them automatically validated when the container starts would be really useful.  We've actually implemented this for CAS, but I'd like to see it available in Spring if possible, as I know we would find it useful for multiple projects (and copying it to each project is probably not a good idea).  Our implementation is here: https://www.ja-sig.org/svn/cas3/trunk/cas-server-core/src/main/java/org/jasig/cas/util/ValidatorBeanPostProcessor.java  Its relatively trivial.  There might be improvements that could be made to it.  Thanks Scott   ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d6f4f4c7b4d06dc3653d74c492645242f8eb76dc  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-15T01:05:03Z","2012-06-19T03:42:42Z"
"","11723","MappingJacksonHttpMessageConverter breaks with Jackson 1.0.x [SPR-7063]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-7063](https://jira.spring.io/browse/SPR-7063?redirect=false)** and commented  As of Spring 3.0.2.RELEASE, MappingJacksonHttpMessageConverter breaks when using Jackson 1.0.1.  TypeFactory#type was introduced in Jackson 1.3.  Upgrading to Jackson 1.4.2 resolves this issue.  ``` SEVERE: Servlet.service() for servlet Spring MVC Dispatcher Servlet threw exception java.lang.NoSuchMethodError: org.codehaus.jackson.map.type.TypeFactory.type(Ljava/lang/reflect/Type;)Lorg/codehaus/jackson/type/JavaType; 	at org.springframework.http.converter.json.MappingJacksonHttpMessageConverter.getJavaType(MappingJacksonHttpMessageConverter.java:114) 	at org.springframework.http.converter.json.MappingJacksonHttpMessageConverter.canRead(MappingJacksonHttpMessageConverter.java:91) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.readWithMessageConverters(HandlerMethodInvoker.java:618) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveRequestBody(HandlerMethodInvoker.java:587) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:336) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:169) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:421) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:409) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) ```    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b5b60cafb757e51294a96e94843ba94d46f24f38","closed","type: bug,","spring-projects-issues","2010-04-02T03:41:23Z","2012-06-19T03:43:36Z"
"","11633","SpEL support for bean property access via square brackets [SPR-6968]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-6968](https://jira.spring.io/browse/SPR-6968?redirect=false)** and commented  SpEL currently supports using square brackets '[]' to allow indexed access to arrays and maps.  It should also support property lookups on objects.  JSP/Unified EL supports this syntax.  For example:  where 'object' is a bean with a method getFoo() { return ""bar""; } and 'field' is string ""foo""  #{object[field]} should resolve to ""bar""  Currently, this expression results in a NumberFormatException attempting to coerce ""foo"" to an integer.  A good general rule of thumb for square brackets should be that unless the target type is an array (or array like), the result of the sub expression in the brackets should be evaluated against the target as if it were attached to the target with a dot '.'    ---  **Affects:** 3.0.1  **Issue Links:** - [ROO-689](https://jira.spring.io/browse/ROO-689) display.tagx should use  instead of  to use custom converters (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/81b10be1d06b6cf96b227515030f822325ab3207  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-10T08:46:11Z","2012-06-19T03:44:08Z"
"","11588","SpEL resolving nested property as outer object [SPR-6923]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-6923](https://jira.spring.io/browse/SPR-6923?redirect=false)** and commented  Using the new spring:eval tag and evaluating an expression against a ServletRequest attribute results in inconsistent behavior.    produces  SEVERE: Servlet.service() for servlet default threw exception org.springframework.expression.spel.SpelEvaluationException: EL1008E:(pos 18): Field or property 'server' cannot be found on object of type 'com.springsource.insight.dashboard.resources.ResourceSummary' at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:180) at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:60) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:57) at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102) at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97) at org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:108) at org.apache.jsp.WEB_002dINF.controllers.resources.resource_jsp._jspx_meth_spring_005feval_005f1(resource_jsp.java:1295)  Modifying the expression to use the get*() method invocation syntax works as expected:   The ResourceSummary instance is stored as a servlet request attribute under 'resource'.  ResourceSummary has a method getResource() which returns a Resource instance which has a getServer() method.  The ResourceSummary#getResource() does not reference itself in anyway.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50c55937404d1ece094dec6ccb5a89f5d3cc567e","closed","type: bug,","spring-projects-issues","2010-03-02T07:50:05Z","2012-06-19T03:43:10Z"
"","11443","NoSuchBeanDefinitionException autowiring to collection with no matching types [SPR-6777]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-6777](https://jira.spring.io/browse/SPR-6777?redirect=false)** and commented  When autowiring to a collection, if there are no beans that match the collection's type, a NoSuchBeanDefinitionException is thrown saying at least one matching bean is required.  In this case, I would rather have an empty list injected then the container fail to initialize.  ``` @Autowired public void setFoo(List foo) {   assert foo.isEmpty(); } ```  ---  **Affects:** 3.0 GA  **Issue Links:** - #13164 Support injection of collection-typed beans using `@Autowired`+`@Qualifier` or `@Inject`+`@Named`","closed","type: enhancement,","spring-projects-issues","2010-01-28T03:06:44Z","2019-01-13T07:55:44Z"
"","11315","Request mapping incorrectly receiving all dispatches for a controller [SPR-6649]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-6649](https://jira.spring.io/browse/SPR-6649?redirect=false)** and commented  In a controller I have a request mapping with the value ""/"" alongside other mappings that begin with a template variable.  All requests dispatched to this controller are mapped to the ""/"" method even if they match the pattern for another mapping.  Other controllers are not affected, only mappings within the same controller.  A test case is attached.   ---  **Affects:** 3.0 GA  **Attachments:** - [testcase.diff](https://jira.spring.io/secure/attachment/16072/testcase.diff) (_1.40 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ead5df45460972c8a8ad2ee6a429bc440c61ebfa","closed","type: bug,","spring-projects-issues","2010-01-06T07:05:55Z","2012-06-19T03:43:48Z"
"","11232","URL JSP tag is missing from the reference guide [SPR-6566]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-6566](https://jira.spring.io/browse/SPR-6566?redirect=false)** and commented  The  JSP tag is not included in the reference guide.  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/apf.html   ---  **Affects:** 3.0 RC3  1 votes, 1 watchers","closed","type: documentation,","spring-projects-issues","2009-12-15T03:06:38Z","2012-06-19T03:43:07Z"
"","11018","mvc namespace should support adding HandlerInterceptors [SPR-6352]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-6352](https://jira.spring.io/browse/SPR-6352?redirect=false)** and commented  The mvc namespace currently configures the DefaultAnnotationHandlerMapping, but does not provide a way to register handler interceptors.  This functionality could be something like:    \ \ ...     ---  **Affects:** 3.0 RC2","closed","type: enhancement,","spring-projects-issues","2009-11-13T06:50:04Z","2012-06-19T03:43:27Z"
"","11017","classpath*: is no longer finding resources with  [SPR-6351]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-6351](https://jira.spring.io/browse/SPR-6351?redirect=false)** and commented  Between RC1 and RC2, classpath*: file paths stopped working.  In a web app context, I am importing a set of spring contexts that form a plugin system.  None of the files that match this pattern are detected \  Removing the wild card and hard coding the path also does not pickup the files. \  Replacing the classpath*: with classpath: it is able to find the file. \  Using classpath: with a wild card only imports a single resource. (appears to be the first match alphabetically) \  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11032 Cannot import bean definitions using classpath*: resource location (_**""duplicates""**_)  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2009-11-13T06:27:19Z","2019-01-11T14:35:14Z"
"","11016","Converting from String to Properties with leading/trailing whitespace results in ConversionFailedException [SPR-6350]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-6350](https://jira.spring.io/browse/SPR-6350?redirect=false)** and commented  The new conversion service fails when a java.util.Properties object is defined via XML with leading and/or trailing line breaks.  Removing the white space resolves the issue.  I encountered this issue bootstrapping Tiles with tilesProperties.  \ \ \ org.apache.tiles.definition.dao.LocaleUrlDefinitionDAO.CHECK_REFRESH=false \ \ \ \ \/WEB-INF/**/tiles*.xml\ \ \ \ ERROR: org.springframework.web.servlet.DispatcherServlet - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tilesConfigurer' defined in ServletContext resource [/WEB-INF/config/mvc-config.xml]: Initialization of bean failed; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value org.apache.tiles.definition.dao.LocaleUrlDefinitionDAO.CHECK_REFRESH=false from type [java.lang.String] to type [java.util.Properties]; reason = 'Invalid String property ' '; properties should be in the format name=value'; nested exception is java.lang.IllegalArgumentException: Invalid String property ' '; properties should be in the format name=value at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:289) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:286) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:188) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:558) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:852) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:422) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:443) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:459) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:340) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:307) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) at javax.servlet.GenericServlet.init(GenericServlet.java:212) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1173) at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:809) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:615) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:436) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:374) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:302) at org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195) at org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159) at org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141) at org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90) at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at com.springsource.insight.collection.web.HttpRequestMetricCollectionValve.invoke(HttpRequestMetricCollectionValve.java:43) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:379) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:637) Caused by: org.springframework.core.convert.ConversionFailedException: Unable to convert value org.apache.tiles.definition.dao.LocaleUrlDefinitionDAO.CHECK_REFRESH=false from type [java.lang.String] to type [java.util.Properties]; reason = 'Invalid String property ' '; properties should be in the format name=value'; nested exception is java.lang.IllegalArgumentException: Invalid String property ' '; properties should be in the format name=value at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:34) at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182) at org.springframework.format.support.FormattingConversionService.convert(FormattingConversionService.java:133) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:179) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:135) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:442) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1351) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1310) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1067) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:511) ... 40 more Caused by: java.lang.IllegalArgumentException: Invalid String property ' '; properties should be in the format name=value at org.springframework.core.convert.support.CollectionToMapConverter.parseProperty(CollectionToMapConverter.java:103) at org.springframework.core.convert.support.CollectionToMapConverter.convert(CollectionToMapConverter.java:66) at org.springframework.core.convert.support.ArrayToMapConverter.convert(ArrayToMapConverter.java:37) at org.springframework.core.convert.support.ObjectToMapConverter.convert(ObjectToMapConverter.java:49) at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:32) ... 49 more   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aac9107f6bafb1552dfd2032c7e75e0852558438","closed","in: core,","spring-projects-issues","2009-11-13T04:51:15Z","2012-06-19T03:44:11Z"
"","11015","Formatting subsystem contains Java 6 API dependency [SPR-6349]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-6349](https://jira.spring.io/browse/SPR-6349?redirect=false)** and commented  Caused by: java.lang.NoSuchMethodError: java.lang.String.isEmpty()Z at org.springframework.format.support.FormattingConversionService$ParserConverter.convert(FormattingConversionService.java:188) at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:32) at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182) at org.springframework.format.support.FormattingConversionService.convert(FormattingConversionService.java:133) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:179) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:135) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:442) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1351) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1310) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1067) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:511) ... 31 more  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11093 FormattingConversionService is incompatible with Java SE 5 (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2009-11-13T04:05:04Z","2019-01-11T14:36:38Z"
"","10962","Spring:url tag should not use application/x-www-form-urlencoded encoding [SPR-6296]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-6296](https://jira.spring.io/browse/SPR-6296?redirect=false)** and commented  The spring:url tag currently uses java.net.URLEncoder to URL encode template variables.  URLEncoder does not follow raw URL encoding, but rather the application/x-www-form-urlencoded MIME format.  This has the effect of encoding space charters as '+' instead of '%20'.  application/x-www-form-urlencoded is defined as part of the HTML spec (see http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1) and not the URL spec.  While the spring:url tag is often used for HTML, it should not be assumed that the URL will be used in HTML, or with an application/x-www-form-urlencoded content type.  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10187 RestTemplate should encode the url variables  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/67b5781dab2004905de4fe504e7583f59495ee1e","closed","type: bug,","spring-projects-issues","2009-11-03T06:52:15Z","2019-01-11T14:25:17Z"
"","11446","@RequestMapping does not pick up encoded URL's [SPR-6780]","**[Sascha Goldsmith](https://jira.spring.io/secure/ViewProfile.jspa?name=saish)** opened **[SPR-6780](https://jira.spring.io/browse/SPR-6780?redirect=false)** and commented  If a URL is encoded via URLEncoder.encode(url, ""utf-8), then `@RequestMapping` and `@PathVariable` cannot resolve the controller method to invoke (404 returned).  If the same URL is decoded and submitted, the mapping and path variable work fine.  The following is the (redacted) controller method:  `@RequestMapping`(""/foo"")  public ModelAndView foo(`@RequestParam` final String selectedImport, `@RequestParam` final String selectedJournalLine)  URL that faile to bind to `@PathVariable`: foo%3FselectedImport%3D1048%26selectedJournalLine%3D14  URL succeeds foo?selectedImport=1048&selectedJournalLine=14  I solved the problem by only URL encoding each portion of the path variable (recommended by Find Bugs) but IMO the `@PathVariable` and `@RequestMapping` should recognize the encoded URL as a whole as well.    --- No further details from [SPR-6780](https://jira.spring.io/browse/SPR-6780?redirect=false)","closed","status: declined,","spring-projects-issues","2010-01-29T06:15:37Z","2019-01-12T16:38:17Z"
"","11625","CronTrigger for short running tasks calculating next execution time wrongly [SPR-6960]","**[Sargis Harutyunyan](https://jira.spring.io/secure/ViewProfile.jspa?name=armsargis)** opened **[SPR-6960](https://jira.spring.io/browse/SPR-6960?redirect=false)** and commented  I have following code:  Code:      TaskScheduler scheduler = new ConcurrentTaskScheduler();     ScheduledFuture scheduledFuture = scheduler.schedule(new Runnable(){         @Override         public void run() {             System.out.printf(""Some messages with date: %s%n"", new Date());         }     }, new CronTrigger(""* 0/20 9-21 * * MON-SAT""));  And I have following output:  Some messages with date: Sat Mar 06 20:20:00 CET 2010 Some messages with date: Sat Mar 06 20:20:01 CET 2010 Some messages with date: Sat Mar 06 20:20:02 CET 2010 Some messages with date: Sat Mar 06 20:20:03 CET 2010 Some messages with date: Sat Mar 06 20:20:04 CET 2010 Some messages with date: Sat Mar 06 20:20:05 CET 2010 Some messages with date: Sat Mar 06 20:20:06 CET 2010 Some messages with date: Sat Mar 06 20:20:07 CET 2010 Some messages with date: Sat Mar 06 20:20:08 CET 2010 Some messages with date: Sat Mar 06 20:20:09 CET 2010  Spring printing like this until 20:21, seams Spring calculating next execution time wrongly for short running tasks. As I understand it should print once after calculate next execution time which is: 20.40 and reschedule for 20.40.   ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=85719","closed","in: core,","spring-projects-issues","2010-03-08T18:34:53Z","2019-01-12T05:32:21Z"
"","11292","Add proper URL support for theme tag [SPR-6626]","**[Sam Wilson](https://jira.spring.io/secure/ViewProfile.jspa?name=turksheadsw)** opened **[SPR-6626](https://jira.spring.io/browse/SPR-6626?redirect=false)** and commented  The existing  tag doesn't really work that much differently from the  tag: it simply resolves resource properties and dumps them into the page. However, the types of values it is typically rendering are quite different from those of the  tag. Specifically, it is typically rendering values that are web resources, not just simple text.  This becomes problematic if you want to make sure that all of your resources get loaded properly. The existing  can be used to ensure that servlet context path is applied to the resource URL, as in:    But this is convoluted and unnecessary.  In order to maintain compatibility, I suggest the creation of a new  tag the combines the function of the  and  tag. So the above would read:    It avoids the convoluted embedding of tags and would allow for backward compatibility with people who are already using the  tag in the above manner.   ---  **Affects:** 3.0 GA  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-29T08:59:42Z","2015-09-22T18:20:32Z"
"","11820","Update reference manual regarding PetClinic [SPR-7161]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-7161](https://jira.spring.io/browse/SPR-7161?redirect=false)** and commented  The reference manual should updated regarding PetClinic's new location (i.e., available in a separate subversion repository), etc.  See comments in the forums.  ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=73291&page=2  **Issue Links:** - #11822 Link to location of Spring samples in reference documentation (_**""is duplicated by""**_) - #10890 Update PetClinic tutorial, readme files, and DB scripts for Spring 3.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42cdfbcd89c3116622fee5d1c57435ae70fcc344","closed","status: duplicate,","spring-projects-issues","2010-05-02T23:37:57Z","2019-01-11T13:09:05Z"
"","11487","Remove remaining reference to StandardScopes from the reference manual [SPR-6821]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6821](https://jira.spring.io/browse/SPR-6821?redirect=false)** and commented  In #10494, Nick dos Remedios commented that there are still lingering references to StandardScopes in the documentation.  ---  **Affects:** 3.0 GA  **Issue Links:** - #10494 Remove references to StandardScopes from the reference manual  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/69cb15f27fb0c19e48ba3e03d7da748a2385e942","closed","type: documentation,","spring-projects-issues","2010-02-10T07:31:10Z","2019-01-11T16:47:19Z"
"","11227","Double-to-Integer number coercion in ApplicationContext fails on Windows XP [SPR-6561]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6561](https://jira.spring.io/browse/SPR-6561?redirect=false)** and commented  The following code passes both on the Mac and Windows XP:  ``` public static void main(String[] args) {     ExpressionParser parser = new SpelExpressionParser();     Expression exp = parser.parseExpression(""T(java.lang.Math).random() * 10.0"");     Integer randomNumber = exp.getValue(Integer.class);     System.out.println(""Random number = "" + randomNumber);     if (randomNumber < 0 || randomNumber > 10) {         System.err.println(""Random number is out of bounds: "" + randomNumber);     } } ```  When similar SpEL related code is introduced into the ApplicationContext, however, there is a discrepancy between the behavior on Mac and Windows. For example, given the following configuration and test case, the test case passes on the Mac but fails on Windows with a NumberFormatException (e.g., NumberFormatException: For input string: ""1.23456789"").  ```        ```  ``` @Test public void spelInXmlBeanDefinition() {     ApplicationContext appCtx = new ClassPathXmlApplicationContext(""context.xml"");     Integer randomNumber = appCtx.getBean(""randomNumber"", Integer.class);     assertNotNull(randomNumber);     assertTrue(randomNumber >= 0 && randomNumber","closed","type: enhancement,","spring-projects-issues","2009-12-13T21:38:28Z","2015-09-22T17:34:36Z"
"","11189","Introduce 'merge' attribute for util namespace collection elements [SPR-6523]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6523](https://jira.spring.io/browse/SPR-6523?redirect=false)** and commented  Section _C.2.2.4 _ of the reference manual states:  > Finally, you can also control the merging behavior using the 'merge' attribute of the  element; collection merging is described in more detail in the section called ""Collection merging"".  This is, however, not true. In contrast to the standard support for collections (i.e., array, list, set, map) in the _beans_ namespace, the _util_ namespace does not support the merge attribute for collections.  Is this an oversight in the documentation or missing functionality in the util namespace support?  On a related note (perhaps worthy of its own JIRA issue), given the following application context configuration and JUnit test class...  ```                           red         green         blue                                        cyan         magenta         yellow         black                  ```  ``` package com.example;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotNull;  import java.util.List;  import org.junit.Test; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext;  public class MergedListTests {    @Test   public void mergedList() {     ApplicationContext appCtx = new ClassPathXmlApplicationContext(       ""/com/example/MergedListTests-context.xml"");     ListHolder listHolder = appCtx.getBean(""listHolder"", ListHolder.class);     assertNotNull(listHolder);     assertEquals(7, listHolder.getList().size());   }    public static class ListHolder {      private List list;      public List getList() {       return this.list;     }      public void setList(List list) {       this.list = list;     }   } } ```  ... changing the **** definition in _listHolderParent_ to **** results in the following exception:  > java.lang.IllegalArgumentException: Cannot merge with object of type [class org.springframework.beans.factory.config.BeanDefinitionHolder] > at org.springframework.beans.factory.support.ManagedList.merge(ManagedList.java:98) > at org.springframework.beans.factory.support.ManagedList.merge(ManagedList.java:1) > at org.springframework.beans.MutablePropertyValues.mergeIfRequired(MutablePropertyValues.java:221) > at org.springframework.beans.MutablePropertyValues.addPropertyValue(MutablePropertyValues.java:169) > at org.springframework.beans.MutablePropertyValues.addPropertyValues(MutablePropertyValues.java:138) > at org.springframework.beans.factory.support.AbstractBeanDefinition.overrideFrom(AbstractBeanDefinition.java:300) > at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:1114) > at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:1054) > at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1040) > at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:294) > at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:578) > at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:398) > at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) > at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) > at com.example.MergedListTests.mergedList(MergedListTests.java:17) > at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) > ...  ---  **Issue Links:** - #10561 Merge multiple lists/maps/sets that share the same id  into a single map/list (_**""Cloned from""**_) - #9658 support cascading merge operation (_**""is duplicated by""**_) - #13477 Add MapCombiningFactoryBean (_**""is duplicated by""**_) - #7575 Support easier merge/concatenation of lists (_**""is duplicated by""**_) - #14186 Respect 'merge' attribute of  and  elements in conjunction with nested property paths - #9437 Merge of util:map does not work - #6201 Support for Collection Merging in Parent/Child Bean Definitions - #9872 Re-allow merge of util:map list, set, ... based on the same bean ID  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a827ab88b160acdcb46c2d21c5dabb4b41dd57c5  16 votes, 18 watchers","closed","has: votes-jira,","spring-projects-issues","2009-12-04T21:36:02Z","2019-01-11T15:14:59Z"
"","11149","Regression when using @RequestMapping, @PathVariable, and GenericConversionService [SPR-6483]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6483](https://jira.spring.io/browse/SPR-6483?redirect=false)** and commented  Given the following `@MVC` controllers...  ``` @Controller @RequestMapping(value = ""/{id}"") public class OrderDetailsController {  	@RequestMapping(method = GET) 	public String display(@PathVariable(""id"") Long id) { 		// ... 	} } ```  ``` @Controller @RequestMapping(""/new*"") public class NewOrderController {  	@RequestMapping(method = GET) 	public final String edit() { 		// ... 	} } ```  ...the following URL worked with Spring 3.0.0.RC2:  http://localhost:8080/order/new  After upgrading from RC2 to RC3, I get the following exception when attempting to access the above URL:  ``` org.springframework.core.convert.ConversionFailedException: Unable to convert value new from type [java.lang.String] to type [java.lang.Long]; reason = 'Unable to convert value new from type [java.lang.String] to type [java.lang.Long]; reason = 'new'; nested exception is java.text.ParseException: new'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value new from type [java.lang.String] to type [java.lang.Long; reason = 'new'; nested exception is java.text.ParseException: new         at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:40)         at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:130)         at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:199)         at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:104)         at org.springframework.beans.SimpleTypeConverter.convertIfNecessary(SimpleTypeConverter.java:47)         at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:526)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolvePathVariable(HandlerMethodInvoker.java:618)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:292)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:164)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:385)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:373)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647)         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:552)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) ... ```  The only way to access the ""new"" page with the ""/new*"" RequestMapping is by adding a bogus file extension such as "".htm"" (FYI: simply appending a dot ""."" suffices), for example: http://localhost:8080/order/new.htm or http://localhost:8080/order/new.  By using a ""/new/*"" RequestMapping instead, the ""new"" page can only be accessed by adding a bogus subpath such as ""/x"" (FYI: simply appending a slash ""/"" does not suffice), for example: http://localhost:8080/order/new/x  Changing the RequestMapping for the OrderDetailsController from ""/{id}"" to ""/{id}/"" almost effects the desired reseults; however, this mapping requires that URLs such as http://localhost:8080/order/10000 be appended with a trailing slash ""/"" which is undesirable.  In the end, using a RequestMapping of ""/{id}**"" for the OrderDetailsController achieves the desired results (i.e., same behavior as with Spring 3.0.0.RC2). Thus the question remains:  Was this change intentional?  Or should the mappings from RC2 continue to work with RC3 and beyond?  ---  **Affects:** 3.0 RC3  **Issue Links:** - #11184 Url suffix after dot is omitted","closed","in: web,","spring-projects-issues","2009-12-01T02:23:09Z","2019-01-11T15:36:53Z"
"","11103","@MVC should provide an ""onBind"" hook prior to automatic validation [SPR-6437]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6437](https://jira.spring.io/browse/SPR-6437?redirect=false)** and commented  When using `@Valid` to drive automatic validation of a model object, it is currently not possible to modify the bound model object prior to validation.  With the SimpleFormController hierarchy it was straightforward to override BaseCommandController's onBind() or onBindAndValidate() methods to achieve custom binding; however, with `@MVC` it is currently not possible. Neither the WebBindingInitializer API nor an `@InitBinder` method provides a mechanism to plug in custom binding.  Note that this was not an issue prior to support for `@Valid`, since without `@Valid` developers were responsible for executing validation code within a handler method.  One possible solution would be to add support for an `@PostBinding` method or `@PreValidation` method (or similar) which would be allowed to modify the model after binding but prior to executing the handler method.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #12449 Support for interception of controller method invocation after binding has completed (_**""is duplicated by""**_) - #10091 Integrating validation into the `@MVC` request lifecycle - #11138 `@MVC` should provide a way to invoke custom code at preBind stage  6 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-24T07:48:59Z","2019-01-13T07:57:02Z"
"","11093","FormattingConversionService is incompatible with Java SE 5 [SPR-6427]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6427](https://jira.spring.io/browse/SPR-6427?redirect=false)** and commented  **FormattingConversionService$ParserConverter.convert()** calls Java SE 6's **isEmpty()** method on the _submittedValue_ String.  To reproduce, adding  and then launching the web application using Java SE 5 leads to the following error:  ``` java.lang.NoSuchMethodError: java.lang.String.isEmpty()Z         at org.springframework.format.support.FormattingConversionService$ParserConverter.convert(FormattingConversionService.java:188)         at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:32)         at org.springframework.core.convert.support.CollectionToArrayConverter.convert(CollectionToArrayConverter.java:67)         at org.springframework.core.convert.support.ArrayToArrayConverter.convert(ArrayToArrayConverter.java:38)         at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:32)         at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)         at org.springframework.format.support.FormattingConversionService.convert(FormattingConversionService.java:133)         at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:179)         at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:135)         at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1055)         at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:846)         at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76)         at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:635)         at org.springframework.validation.DataBinder.doBind(DataBinder.java:540)         at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:190)         at org.springframework.web.bind.support.WebRequestDataBinder.bind(WebRequestDataBinder.java:105)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doBind(HandlerMethodInvoker.java:744)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:293)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:161)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:378)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:366)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647)         at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:563)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)         at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)         at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148)         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)         at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1139)         at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:378)         at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)         at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)         at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)         at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417)         at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)         at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)         at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)         at org.mortbay.jetty.Server.handle(Server.java:324)         at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)         at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:880)         at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)         at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)         at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)         at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)         at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)  ```  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11015 Formatting subsystem contains Java 6 API dependency (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2009-11-23T22:10:00Z","2019-01-12T16:49:58Z"
"","10895","Generify ClassUtils [SPR-6227]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6227](https://jira.spring.io/browse/SPR-6227?redirect=false)** and commented  Where feasible, parametrize Class as Class\ or Class.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/704d4b785b4d5de108b97ad754336d960e38cdb5","closed","in: core,","spring-projects-issues","2009-10-12T22:08:21Z","2012-06-19T03:43:50Z"
"","10890","Update PetClinic tutorial, readme files, and DB scripts for Spring 3.0 [SPR-6222]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6222](https://jira.spring.io/browse/SPR-6222?redirect=false)** and commented  The readme files, HTML tutorial, and DB scripts for PetClinic are no longer in sync with the changes made to the sample application for Spring 3.0.  The following need to be proofread and updated accordingly; scripts need to be tested.  - readme.txt: already partially updated by Sam - db/build.xml: test for both MySQL and HSQL; determine if we need to keep the HSQL scripts, since we now use an in-memory HSQLDB by default. - db/mysql/petclinic_db_setup_mysql.txt - src/main/webapp/html/tutorial.html: instructions and descriptions are outdated; links are broken;  See also: http://stackoverflow.com/questions/2536292/how-to-run-spring-3-0-petclinic-in-tomcat-with-hibernate-backed-jpa  ---  **Affects:** 3.0 RC1  **Issue Links:** - #11546 Petclinic startup error when using OpenJPA and Tomcat 6-  w/solution - #11820 Update reference manual regarding PetClinic  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3dfb1d5c9cca05222aaab64f4bbd6845b89b9198, https://github.com/spring-projects/spring-framework/commit/f57d70237086dbe6f6963811ef0847907d5d5e38, https://github.com/spring-projects/spring-framework/commit/2e59673e73fb61b99c069eeef41e965dbe47d51c","closed","status: declined,","spring-projects-issues","2009-10-11T05:05:50Z","2019-01-11T15:08:00Z"
"","11385","CommonsClientHttpRequestFactory getHttpClient() returns HttpClient from Commons HttpClient 3.x which has been EOL'd [SPR-6719]","**[Ryan LaMothe](https://jira.spring.io/secure/ViewProfile.jspa?name=subaruwrc)** opened **[SPR-6719](https://jira.spring.io/browse/SPR-6719?redirect=false)** and commented  I need to extend CommonsClientHttpRequestFactory and override getHttpClient() in order to use RestTemplate(ClientHttpRequestFactory requestFactory) to make authenticated restful web service calls.  Unfortunately, getHttpClient() returns HttpClient from Commons HttpClient 3.x which has been end-of-life'd (EOL) and is no longer supported.  The CommonsClientHttpRequestFactory and in turn RestTemplate need to use the supported HttpCore 4.x and HttpClient 4.x libraries.  ---  **Affects:** 3.0 GA  **Attachments:** - [httpcomponent_wrappers.zip](https://jira.spring.io/secure/attachment/17667/httpcomponent_wrappers.zip) (_4.12 kB_)  **Issue Links:** - #10848 Upgrade Apache HttpClient to version 4.0 (_**""duplicates""**_) - #12041 Offer a ClientHttpRequestFactory for usage with Apache HttpComponents HttpClient (_**""is duplicated by""**_) - #12082 CommonsClientHttpRequestFactory depends on outdated ""commons-httpclient"" 3.1 (_**""is duplicated by""**_) - #11990 Provide a ""username"" and ""password"" properties for RestTemplate  8 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-19T11:09:35Z","2019-01-11T15:42:37Z"
"","11616","Decode URI template variables if the AbstractHandlerMethodMapping.setUrlDecode() property is set to false [SPR-6951]","**[Rusty Weneck](https://jira.spring.io/secure/ViewProfile.jspa?name=rweneck)** opened **[SPR-6951](https://jira.spring.io/browse/SPR-6951?redirect=false)** and commented  When determining which method of a controller to invoke it can be important to not decode url encodings, especially if the data on the REST request path contains the / (forward slash) character. However once this data is passed to the method as a parameter it would be nice to have it restored to its original encoding. I propose adding an additional boolean which optionally url decodes the return value from AnnotationMethodHandlerAdapter.ServletHandlerMethodInvoker.resolvePathVariable . This issues is particularly tricky as AnnotationMethodHandlerAdapter.ServletHandlerMethodInvoker is a private inner class and cannot easily be overridden.  ---  **Affects:** 3.0.1  **Attachments:** - [AnnotationMethodHandlerAdapter.patch](https://jira.spring.io/secure/attachment/16258/AnnotationMethodHandlerAdapter.patch) (_3.43 kB_)  **Issue Links:** - #13736 Decode URI variable values when UrlPathHelper.setUrlDecode() is set to false  (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0105c5ebb9896641bdc601ff164a2404e817e505","closed","type: enhancement,","spring-projects-issues","2010-03-05T00:01:28Z","2019-01-11T16:30:31Z"
"","11574","Add support for data binding from URI template variables to JavaBeans [SPR-6909]","**[Rostislav Hristov](https://jira.spring.io/secure/ViewProfile.jspa?name=rostislav.hristov)** opened **[SPR-6909](https://jira.spring.io/browse/SPR-6909?redirect=false)** and commented  The recently introduced URI templates work great when the `@PathVariable` annotation is used. They can be even better if the template variables are automatically bound to `@ModelAttribute` annotated beans. Currently the binding mechanism supports only request parameters which is not enough in cases of clean URIs. The following example demonstrates how the `@PathVariable` is still required in a case where it potentially can be skipped.  `@RequestMapping`(""/path/{resource}"") public Object resource(`@Valid` `@ModelAttribute` ResourceBean bean, `@PathVariable` String resource) throws Exception { bean.setResource(resource); return new ModelMap(bean); }  An improved version can look like this:  `@RequestMapping`(""/path/{resource}"") public Object resource(`@Valid` `@ModelAttribute` ResourceBean bean) throws Exception { // do something with bean.getResource(); return new ModelMap(bean); }    ---  **Affects:** 3.0.1  **Attachments:** - [URITemplateVariablesToJavaBeansBinding.patch](https://jira.spring.io/secure/attachment/16239/URITemplateVariablesToJavaBeansBinding.patch) (_9.57 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e240d814b1d621a1da85c1515f3e3a1fa7567f7, https://github.com/spring-projects/spring-framework/commit/50117dce40fa3bcf87acfca6ef26b7607a311518  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-25T03:48:05Z","2019-01-11T16:29:20Z"
"","11871","ClassUtils does not include void.class in its primitiveWrapperTypeMap [SPR-7212]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-7212](https://jira.spring.io/browse/SPR-7212?redirect=false)** and commented  The standard Java ObjectInputStream has a primClasses map that includes this entry: primClasses.put(""void"",void.class);  ClassUtils.forName should also have an entry for ""void"" in its primitiveWrapperTypeMap.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de326e5e95b066bfae6905fee79c6fa3fd601eec  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2010-05-17T17:13:24Z","2012-06-19T03:43:28Z"
"","11847","MockHttpServletResponse remembers only one include URL. [SPR-7188]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-7188](https://jira.spring.io/browse/SPR-7188?redirect=false)** and commented  MockHttpServletResponse remembers one forward and one include URL. However, with includes it's possible to have more than one. It should be possible to test what all paths that were included were.   ---  **Affects:** 3.0.2  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/16547/patch.txt) (_2.29 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa7472c0571e480fbcb8fbd5b41dd8318117cca8, https://github.com/spring-projects/spring-framework/commit/bd1b559d47603748f6d57a0ff21f68505258ace5","closed","type: enhancement,","spring-projects-issues","2010-05-11T02:33:33Z","2012-06-19T03:43:41Z"
"","11821","Custom converter ignored when source type is Object. [SPR-7162]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-7162](https://jira.spring.io/browse/SPR-7162?redirect=false)** and commented  The specific use case is registering a converter with Object.class as the source type and javax.faces.DataModel as the the target type. The actual object being converted at runtime maybe a List in which case the CollectionToObjectConverter takes over and prevents the desired (Object-to-DataModel) converter from being used.  I will attach a patch that demonstrates the issue.   ---  **Affects:** 3.0.2  **Attachments:** - [collectionToObjectWithCustomConverterPatch.txt](https://jira.spring.io/secure/attachment/16521/collectionToObjectWithCustomConverterPatch.txt) (_1.70 kB_)","closed","type: enhancement,","spring-projects-issues","2010-05-03T02:32:10Z","2010-05-03T08:37:40Z"
"","11809","GenericConversionService can't find converters for interface-based arrays. [SPR-7150]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-7150](https://jira.spring.io/browse/SPR-7150?redirect=false)** and commented  I will attach a patch that demonstrates the issue.  ---  **Affects:** 3.0.2  **Attachments:** - [interfaceArrayConversionPatch.txt](https://jira.spring.io/secure/attachment/16495/interfaceArrayConversionPatch.txt) (_2.69 kB_)  **Issue Links:** - #11739 ConversionService cannot override existing Resource editors (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15321197878f7b863976393a1b2cf89ba0469083  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-04-28T22:36:32Z","2019-01-11T13:09:44Z"
"","11052","MappingJacksonHttpMessageConverter ignores supported media types property [SPR-6386]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-6386](https://jira.spring.io/browse/SPR-6386?redirect=false)** and commented  The MappingJacksonHttpMessageConverter getContentType() method always returns a media type of ""application/json"", which ignores the media types I may have set it up with via setSupportedMediaTypes (e.g. ""application/vnd.stocks+json"").   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01ce468ff263f9c8ec232a7748715cb34b948d7f","closed","type: bug,","spring-projects-issues","2009-11-18T02:48:14Z","2019-01-11T14:39:12Z"
"","10894","The PathVariable annotation should provide an option for decoding [SPR-6226]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-6226](https://jira.spring.io/browse/SPR-6226?redirect=false)** and commented  The value that is extracted from the URL requires additional work to have it decoded. It would be nice to have it automatically decoded.   ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-10-12T20:23:24Z","2012-06-19T02:28:08Z"
"","11062","When binding directly to fields (binder.initDirectFieldAccess()), @DateTimeFormat fails [SPR-6396]","**[Ronald Tetsuo Miura](https://jira.spring.io/secure/ViewProfile.jspa?name=ronaldtm)** opened **[SPR-6396](https://jira.spring.io/browse/SPR-6396?redirect=false)** and commented  When binding directly to fields (binder.initDirectFieldAccess()), `@DateTimeFormat` fails.  It works fine when binding to bean properties.  Stack trace:  java.lang.IllegalArgumentException: Invalid format: ""10/10/2005"" is too short at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:673) at org.springframework.format.datetime.joda.DateTimeParser.parse(DateTimeParser.java:43) at org.springframework.format.datetime.joda.DateTimeParser.parse(DateTimeParser.java:1) at org.springframework.format.support.FormattingConversionService$ParserConverter.convert(FormattingConversionService.java:193) at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:32) at org.springframework.core.convert.support.CollectionToObjectConverter.convert(CollectionToObjectConverter.java:101) at org.springframework.core.convert.support.ArrayToObjectConverter.convert(ArrayToObjectConverter.java:38) at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:32) at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182) at org.springframework.format.support.FormattingConversionService.convert(FormattingConversionService.java:133) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:179) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:121) at org.springframework.beans.DirectFieldAccessor.setPropertyValue(DirectFieldAccessor.java:126) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(AbstractPropertyAccessor.java:50) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76) at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:635) at org.springframework.validation.DataBinder.doBind(DataBinder.java:540) at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:190) at org.springframework.web.bind.support.WebRequestDataBinder.bind(WebRequestDataBinder.java:105) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doBind(HandlerMethodInvoker.java:744) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:293) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:161) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:378) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:366) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:563) at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454) at java.lang.Thread.run(Thread.java:619)      @InitBinder     public void initBinder(WebDataBinder binder) {         binder.initDirectFieldAccess(); // works if I comment this line     }     public static class Param {         public String descricao;         @DateTimeFormat(pattern = ""dd/MM/yyyy"")         public Date dataCriacao;         public String getDescricao() {             return descricao;         }         public void setDescricao(String descricao) {             this.descricao = descricao;         }         public Date getDataCriacao() {             return dataCriacao;         }         public void setDataCriacao(Date dataCriacao) {             this.dataCriacao = dataCriacao;         }     }    ---  **Affects:** 3.0 RC2","closed","in: core,","spring-projects-issues","2009-11-19T06:51:43Z","2012-06-19T03:43:24Z"
"","11061","DateTimeFormatAnnotationFormatterFactory calls String.isEmpty(), which exists only in JDK1.6+ [SPR-6395]","**[Ronald Tetsuo Miura](https://jira.spring.io/secure/ViewProfile.jspa?name=ronaldtm)** opened **[SPR-6395](https://jira.spring.io/browse/SPR-6395?redirect=false)** and commented  String.isEmpty() only exists in JDK 1.6+, but it is called by DateTimeFormatAnnotationFormatterFactory.  Stack trace:  java.lang.NoSuchMethodError: java.lang.String.isEmpty()Z at org.springframework.format.datetime.joda.DateTimeFormatAnnotationFormatterFactory.configureDateTimeFormatterFrom(DateTimeFormatAnnotationFormatterFactory.java:91) at org.springframework.format.datetime.joda.DateTimeFormatAnnotationFormatterFactory.getPrinter(DateTimeFormatAnnotationFormatterFactory.java:57) at org.springframework.format.datetime.joda.DateTimeFormatAnnotationFormatterFactory.getPrinter(DateTimeFormatAnnotationFormatterFactory.java:1) at org.springframework.format.support.FormattingConversionService$1.convert(FormattingConversionService.java:91) at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:32) at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182) at org.springframework.format.support.FormattingConversionService.convert(FormattingConversionService.java:133) at org.springframework.validation.AbstractPropertyBindingResult.formatFieldValue(AbstractPropertyBindingResult.java:120) at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:227) at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:120) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:175) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getPropertyPath(AbstractDataBoundFormElementTag.java:195) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getName(AbstractDataBoundFormElementTag.java:161) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.autogenerateId(AbstractDataBoundFormElementTag.java:148) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.resolveId(AbstractDataBoundFormElementTag.java:139) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.writeDefaultAttributes(AbstractDataBoundFormElementTag.java:123) at org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.writeDefaultAttributes(AbstractHtmlElementTag.java:409) at org.springframework.web.servlet.tags.form.InputTag.writeTagContent(InputTag.java:140) at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:91) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:78) at org.apache.jsp.WEB_002dINF.jsp.registros.index_jsp._jspx_meth_form_005finput_005f1(index_jsp.java:189) at org.apache.jsp.WEB_002dINF.jsp.registros.index_jsp._jspx_meth_form_005fform_005f0(index_jsp.java:121) at org.apache.jsp.WEB_002dINF.jsp.registros.index_jsp._jspService(index_jsp.java:78) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) at org.apache.jasper.servlet.JspServlet._serviceJspFile(JspServlet.java:344) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:436) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:374) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:302) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:239) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1060) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:798) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:552) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454) at java.lang.Thread.run(Thread.java:595)   ---  **Affects:** 3.0 RC2","closed","in: web,","spring-projects-issues","2009-11-19T06:18:32Z","2019-01-12T16:50:00Z"
"","11670","PropertyPlaceholderConfigurer extensibility [SPR-7005]","**[Roman Pichlík](https://jira.spring.io/secure/ViewProfile.jspa?name=dagi)** opened **[SPR-7005](https://jira.spring.io/browse/SPR-7005?redirect=false)** and commented  I've been forced to task extend the behavior of PropertyPlaceholderConfigurer class. We have beans that may specify meta element.  \ \ \  This meta element is processed by own PostProcessor, it's not really interesting why. The problem is that we would like to use placeholders inside the meta element as well. The current implementation of PropertyPlaceholderConfigurer doesn't support it. So i decided to implement it by myself and it was a pain, because PropertyPlaceholderConfigurer isn't really well designed. I've implemented BeanDefinitionVisitor enhanced about visiting bean's attributes. But there is no way to inject this, let say strategy, into PropertyPlaceholderConfigurer. Therefore i've had to subclass  PropertyPlaceholderConfigurer, copy processProperties method from the super class and replace BeanDefinitionVisitor by my own implementation.    ---  **Affects:** 2.5.6  **Attachments:** - [EnhancedBeanDefinitionVisitor.java](https://jira.spring.io/secure/attachment/16317/EnhancedBeanDefinitionVisitor.java) (_1.35 kB_) - [EnhancedPropertyPlaceHolderConfigurer.java](https://jira.spring.io/secure/attachment/16318/EnhancedPropertyPlaceHolderConfigurer.java) (_2.68 kB_)","closed","type: enhancement,","spring-projects-issues","2010-03-18T03:29:49Z","2012-06-19T09:36:27Z"
"","11400","MockStaticEntityMethods is not honored by AnnotationDrivenStaticEntityMockingControl pointcuts [SPR-6734]","**[Rodolfo Hansen](https://jira.spring.io/secure/ViewProfile.jspa?name=kryptt)** opened **[SPR-6734](https://jira.spring.io/browse/SPR-6734?redirect=false)** and commented  the methodToMock() pointcut does not honor the `@MockStaticEntityMethods` and simply applies to pointcut for all `@Entity` beans.   ---  **Affects:** 3.0 GA  **Attachments:** - [EntityMockControl.patch](https://jira.spring.io/secure/attachment/16104/EntityMockControl.patch) (_1.04 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f82cc6458bbae0e4d0f5feb13f0692e8dcc25876","closed","in: core,","spring-projects-issues","2010-01-20T11:13:15Z","2012-06-19T03:42:50Z"
"","11417","Support EL together with Provider Interface in XML configuration [SPR-6751]","**[Robert Schmelzer](https://jira.spring.io/secure/ViewProfile.jspa?name=roschmel)** opened **[SPR-6751](https://jira.spring.io/browse/SPR-6751?redirect=false)** and commented  Based on a discussion with Jürgen we had the idea that we can use the Provider\ Interface together with EL to realize configuration properties which can be changed at runtime. So you can use for example a database storage to store a webservice url, use a expression to fetch the url from the db and in your componenet you use Provider\.get() to resolve the expression at runtime whenever needed.  I implemented this and based on http://jira.springframework.org/browse/SPR-6079 it should also work. But this gets only really nice, when you can configure this in xml because otherwise, you have the knowledge from where the value comes again in your component soure at the `@Value` annotation.  Currently this only works with `@Value` but not with XML configuration. I will attache Testcode.  ---  **Affects:** 3.0 GA  **Attachments:** - [spring-runtime-config-test.zip](https://jira.spring.io/secure/attachment/16107/spring-runtime-config-test.zip) (_8.98 kB_)  **Issue Links:** - #11663 Provide mechanism for injecting a Serializable Provider or ObjectFactory via XML  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-22T02:06:12Z","2019-01-11T15:43:41Z"
"","11779","Extend ""renderedAttributes"" across all Models. [SPR-7119]","**[Robert Pond](https://jira.spring.io/secure/ViewProfile.jspa?name=rpond)** opened **[SPR-7119](https://jira.spring.io/browse/SPR-7119?redirect=false)** and commented  Currently I use the ContentNegotiatingViewResolver to render both JSON and XML.  The MappingJacksonJsonView has the renderedAttributes property to tell Jackson which properties of a bean to include in the json.  It would be nice if this property was extended to the other views.  In my case (we use hibernate) I don't always want the full object graph to be serialized and since I use the ContentNegotiationViewResolver I also don't want to have to check if the controller method should render json or xml and don't want to modify queries to only return specific fields.   --- No further details from [SPR-7119](https://jira.spring.io/browse/SPR-7119?redirect=false)","closed","status: invalid,","spring-projects-issues","2010-04-21T23:52:14Z","2019-01-12T05:32:10Z"
"","11720","@ResponseStatus: The reason value is not used. [SPR-7060]","**[Robert Pond](https://jira.spring.io/secure/ViewProfile.jspa?name=rpond)** opened **[SPR-7060](https://jira.spring.io/browse/SPR-7060?redirect=false)** and commented  When using the `@ResponseStatus` annotation on a controller method, if you specify a value for reason such as  `@ResponseStatus`(value=HttpStatus.BAD_REQUEST, reason=""More than 1000 results were returned. Please be more specific."")  The response still only writes out the default message for the Status, in this case it would be ""The request sent was syntactically incorrect.""    ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a1a23af8361b986832be9b4befefe353afcd333","closed","type: bug,","spring-projects-issues","2010-04-01T03:18:09Z","2012-06-19T03:44:12Z"
"","11008","Documentation glitch [SPR-6342]","**[Robert Lichtenberger](https://jira.spring.io/secure/ViewProfile.jspa?name=effad)** opened **[SPR-6342](https://jira.spring.io/browse/SPR-6342?redirect=false)** and commented  In section 3.5 Bean scopes the sentence ""This approach powerful and flexible in that you can choose the scope of the objects you create through configuration instead of having to bake in the scope of an object at the Java class level."" is missing ""is"" as third word of sentence   ---  **Affects:** 3.0 RC1","closed","type: documentation,","spring-projects-issues","2009-11-12T18:04:02Z","2012-06-19T03:43:15Z"
"","11464","provide more detail about cause of failure in exception message thrown from AbstractMethodMockingControl [SPR-6798]","**[Robert Blumen](https://jira.spring.io/secure/ViewProfile.jspa?name=rblumen)** opened **[SPR-6798](https://jira.spring.io/browse/SPR-6798?redirect=false)** and commented  AbstractMethodMockingControl.checkSignature throws two exceptions with messages ""signature doesn't match"" and ""Arguments don't match""  1) In the case of signature not matching, it would be helpful for identifying the cause of test failures if theses messages contained the expected signature and the actual signature. 2) In the case of argument not matching, it would be helpful if the message included a list of the arguments that do match and the arguments that do not match. 3) It would be helpful if this aspect contained a logger with log messages, at DEBUG level, written during playback, describing the mock calls/mock throws that the mock is about to make    ---  **Affects:** 3.0 GA","closed","in: core,","spring-projects-issues","2010-02-04T02:11:35Z","2019-01-12T05:32:37Z"
"","11169","Manuall handling of namespace prefix handling [SPR-6503]","**[Robert Alexandersson](https://jira.spring.io/secure/ViewProfile.jspa?name=alero)** opened **[SPR-6503](https://jira.spring.io/browse/SPR-6503?redirect=false)** and commented  I have an interrest in creating a generic nameprefix overrider for several Marchallers. I have tried this out for JaxB and the config for this at is quite ugly, it is also sensitive for changes. For example the java 5.0 or 6.0.4 has another. In our project we use Castor and Oracle XML parsers.  If this is interresting for spring OXM as well instead of just my own project. My interrest is to make this into a simple one-interface-fits-all component that can be created using spring OXM and then the uglier details can be managed by Spring itself. Giving the possibility to create and config a spring-namespace-prefix-overrider.  Code needed today: \ \\ \ \\ \ \ \\ \ \ \ \  public class RewardNetworkNamespaceMapperV5 extends com.sun.xml.bind.marshaller.NamespacePrefixMapper { `@Override` public String getPreferredPrefix(String namespaceUri, String suggestion, boolean requirePrefix) { if(""http://www.springsource.com/reward-network"".equals(namespaceUri)){ return ""reward""; } return suggestion; } }   --- No further details from [SPR-6503](https://jira.spring.io/browse/SPR-6503?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-12-02T23:52:06Z","2012-06-19T09:36:20Z"
"","11788","HandlerExceptionResolver for @Valid [SPR-7128]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-7128](https://jira.spring.io/browse/SPR-7128?redirect=false)** and commented  Create a HandlerExceptionResolver that handles BindExceptions so that boilerplate code can be removed from controllers using `@Valid`. See the Spring forum reference for details.  PS: I would be more than happy to contribute this  ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=87408  **Attachments:** - [SPR-7128.patch](https://jira.spring.io/secure/attachment/16748/SPR-7128.patch) (_28.86 kB_)  **Issue Links:** - #12196 Allow standard form ""retry on error"" logic to be handled by framework code instead of duplicated across `@Controller` code","closed","type: enhancement,","spring-projects-issues","2010-04-23T09:00:18Z","2019-01-13T07:54:17Z"
"","11447","Dealing with multiple persistence units - Documentation Corrections [SPR-6781]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-6781](https://jira.spring.io/browse/SPR-6781?redirect=false)** and commented  I have a few corrections for the ""Dealing with multiple persistence units"" example provided in the spring documentation (http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/orm.html#orm-jpa-multiple-pu).  First, the bean of type DefaultPersistenceUnitManager should change the property name persistenceXmlLocation to persistenceXmlLocations to avoid the error below.  > Caused by: java.lang.IllegalStateException: Cannot convert value of type [java.util.ArrayList] to required type [java.lang.String] for property 'persistenceXmlLocation': no matching editors or conversion strategy found > at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:289) > at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:154) > at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:452) > ... 40 more  Second, LocalContainerEntityManagerFactoryBean should specify the property persistenceUnitName to avoid the following exception from being thrown:  > Caused by: java.lang.IllegalStateException: No single default persistence unit defined in {org/springframework/orm/jpa/domain/persistence-multi.xml, classpath:/my/package/\*\*/custom-persistence.xml, classpath\*:META-INF/persistence.xml} > at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.obtainDefaultPersistenceUnitInfo(DefaultPersistenceUnitManager.java:367) > at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.determinePersistenceUnitInfo(LocalContainerEntityManagerFactoryBean.java:247) > at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:196) > at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:288) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1460) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1398) > ... 37 more  Last, the second correction leads me to ask how do I appropriately deal with the other persistence unit names? Do I have to create a new instance of LocalContainerEntityManagerFactoryBean for each persistence unit (hope not)?  ---  **Affects:** 2.5.6, 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d6ea2f4feab6a76148b28cbbd8e5f3bef64ec7b","closed","type: bug,","spring-projects-issues","2010-01-29T09:44:53Z","2019-01-13T21:47:16Z"
"","11793","Add getLastTask() method to o.sf.util.StopWatch (and fix a couple of typos) [SPR-7134]","**[Richard Fearn](https://jira.spring.io/secure/ViewProfile.jspa?name=richardfearn)** opened **[SPR-7134](https://jira.spring.io/browse/SPR-7134?redirect=false)** and commented  It would be handy to have a `getLastTask()` method to allow the `TaskInfo` object to be passed around (e.g. for logging). Something like this:  ``` /**  * Return the last task.  */ public TaskInfo getLastTask() throws IllegalStateException { 	if (this.lastTaskInfo == null) { 		throw new IllegalStateException(""No tasks run: can't get last task""); 	} 	return this.lastTaskInfo; } ```  Also, there's a typo in `getLastTaskName()`, presumably because `getLastTaskTimeMillis()` was copied. The exception message should read `""can't get last name""` instead of `""can't get last interval""`.  Finally, I imagine this has something to do with the original use of this code, but shouldn't the execption messages in both `getLastTaskName()` and `getLastTaskTimeMillis()` refer to `""tasks""` instead of `""tests""`?   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ceb668ac6cba288b59b3d840679ab62308a647f6","closed","type: enhancement,","spring-projects-issues","2010-04-26T02:29:12Z","2012-06-19T03:44:01Z"
"","11152","Access URI template variables in view [SPR-6486]","**[Rich Kroll](https://jira.spring.io/secure/ViewProfile.jspa?name=rkroll)** opened **[SPR-6486](https://jira.spring.io/browse/SPR-6486?redirect=false)** and commented  I have a URI template in the form of ""/hotels/{hotel}/bookings/{booking}"", and can access the path variables in the controller via `@PathVariable`, but when building links in the view I need a reference to the different path variables.  As an example, let's say the user requests ""/hotels/Hotelier/bookings/booking-123"", and as is a common use case in the view, there is a need to link back to the bookings listing ""/hotels/Hotelier/bookings/"". The only way currently to access the URI template variables is to manually inject them each time into the view.  I suggest that a tag be created that is capable of building a link from the same URI template style that is used in the `@RequestMapping`, something like go.  ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3  **Issue Links:** - #12200 Automatically expose `@PathVariables` in the Model (_**""is duplicated by""**_)  7 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-01T07:46:16Z","2019-01-13T07:56:46Z"
"","11046","Import of XML resources with 'classpath*:' URLs doesn't work [SPR-6379]","**[Radim Tlusty](https://jira.spring.io/secure/ViewProfile.jspa?name=radim.tlusty)** opened **[SPR-6379](https://jira.spring.io/browse/SPR-6379?redirect=false)** and commented  it's probably related to #10432.  I think, that the issue is in DefaultBeanDefinitionDocumentReader class. In 3.0.0.RC1 there was used call 'ResourcePatternUtils.isUrl(location)', in 3.0.0.RC2 it's changed and I think, that it's related to this correction.  When the classes are unpacked, it leads to transformation of classpath* URL to file URL, which causes the problem.  Attach is simple test case, which works in 3.0.0.RC1, but fail on 3.0.0.RC2.  ---  **Affects:** 3.0 RC2  **Attachments:** - [SPR-5762.ZIP](https://jira.spring.io/secure/attachment/15933/SPR-5762.ZIP) (_2.78 kB_)  **Issue Links:** - #11032 Cannot import bean definitions using classpath*: resource location (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2009-11-17T19:22:24Z","2019-01-12T16:50:02Z"
"","11236","Ability to exclude HandlerInterceptor from specific path with  [SPR-6570]","**[R. A.](https://jira.spring.io/secure/ViewProfile.jspa?name=ramanauskas.adomas)** opened **[SPR-6570](https://jira.spring.io/browse/SPR-6570?redirect=false)** and commented  **mvc:interceptor** should have a path parameter to exclude path from intercepting. For example: Interceptor runs for all paths /* , but it must not intercept specified paths: /admin/ *. /image/ * and /styles/ *  ---  **Affects:** 3.0 GA  **Issue Links:** - #17466 Ability to exclude HandlerInterceptors from specific path with   **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92759ed1f881fcb1a92aa661d80c53a2827e67db  24 votes, 25 watchers","closed","has: votes-jira,","spring-projects-issues","2009-12-16T05:51:00Z","2019-01-11T15:26:13Z"
"","11448","mvc:view-controller has too low priority [SPR-6782]","**[prevsetko](https://jira.spring.io/secure/ViewProfile.jspa?name=prevsetko)** opened **[SPR-6782](https://jira.spring.io/browse/SPR-6782?redirect=false)** and commented  When I have defined method with request mapping that matches also  definitions, method has higher priority. Let say I have mapping like  ``` @RequestMapping(value = ""/{company}"", method = RequestMethod.GET) public ModelAndView showCompany(@PathVariable String company) { ... } ```  and configuration for Spring Security login screen defined in XML:  ```  ```  In this case correct login screen is not shown. Workaround for this is to instead of  use some plain request mapping method like  ``` @RequestMapping(value = ""/login"", method = RequestMethod.GET) public String loginForm() { 	return ""login""; } ```    ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-01-31T03:07:30Z","2014-03-07T06:44:23Z"
"","11613","JPA entitymanager documentation addition [SPR-6948]","**[Phill Moran](https://jira.spring.io/secure/ViewProfile.jspa?name=springin2action)** opened **[SPR-6948](https://jira.spring.io/browse/SPR-6948?redirect=false)** and commented  We should add some text that getting a JPA entitymanager one needs to call afterPropertiesSet() prior to accessing the entitymanager otherwise a null reference is returned.  Here is a code snippet that works \ public EntityManagerFactory entityManagerFactory() { LocalContainerEntityManagerFactoryBean theEntityManager = new   LocalContainerEntityManagerFactoryBean(); theEntityManager.setDataSource(pooledDataSource()); theEntityManager.setPersistenceUnitName(configrationProperties .getString(""db.jpa.persistanceUnit"")); theEntityManager.setJpaVendorAdapter(jpaVendorAdapter()); theEntityManager.setJpaProperties(jpaProperties()); theEntityManager.afterPropertiesSet(); EntityManagerFactory emf = theEntityManager .nativeEntityManagerFactory; return emf; \  We could also add a note that the Maven plugin will draw in a prior OpenJPA jar (1.2.x) if not otherwise specified with a dependency within the plugin configuration. Causes a validation error   ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=84807","closed","status: declined,","spring-projects-issues","2010-03-04T07:20:56Z","2018-12-28T10:11:53Z"
"","11339","Dependency injection not working for JavaConfig project [SPR-6673]","**[Phill Moran](https://jira.spring.io/secure/ViewProfile.jspa?name=springin2action)** opened **[SPR-6673](https://jira.spring.io/browse/SPR-6673?redirect=false)** and commented  Getting this exception on junit run. Included applicationcontext and javaconfig file in zip file  org.springframework.beans.factory.BeanInitializationException: Properties 'categoryFactory', 'dataSource' and 'storeFactory' are required for bean 'ca.BidSpec.testing.emall.StoreFactoryTest' at org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.postProcessPropertyValues(RequiredAnnotationBeanPostProcessor.java:149) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1055) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:374) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:110) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:333) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:220) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:301) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:303) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) at org.junit.runners.Suite.runChild(Suite.java:128) at org.junit.runners.Suite.runChild(Suite.java:24) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)    ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=82927  **Attachments:** - [Javaconfig-setup.zip](https://jira.spring.io/secure/attachment/16082/Javaconfig-setup.zip) (_3.11 kB_)","closed","in: core,","spring-projects-issues","2010-01-11T14:58:38Z","2019-01-12T05:32:43Z"
"","11826","Creating a BeanFactoryPostProcessor in a @Configuration class changes the behaviour and is not documented. [SPR-7167]","**[Philippe Laflamme](https://jira.spring.io/secure/ViewProfile.jspa?name=plaflamme)** opened **[SPR-7167](https://jira.spring.io/browse/SPR-7167?redirect=false)** and commented  Given this class:  `@Configuration` public class MyConfig {  `@Bean` public Dependency someDependency() { return new Dependency(); }  `@Bean` public BeanFactoryPostProcessor thePostProcessor() { return new MyPostProcessor(someDependency()); } }  This will correctly be executed, meaning that the dependency bean will be created and the post processor added to the BeanFactory. The issue is that it does not behave like ""normal"" `@Configuration` instances: everytime the someDependency method is invoked, a new Dependency bean is created instead of re-using the singleton instance.  If we print the class name at runtime, we can see that it hasn't been enhanced by CGLIB.  It seems that because this `@Configuration` class is creating a BeanFactoryPostProcessor, the normal behaviour of `@Configuration` changes. Furthermore, `@Autowired` annotation is not permitted (#9610), so the dependency cannot be declared anywhere else.  If this is not an issue, then it requires some documentation.  ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c2df7f555a16f00467b5badb082fa2b9e55145c, https://github.com/spring-projects/spring-framework/commit/57a503b2744cd9c8e0d182c3ef6a38a9941b840e","closed","in: core,","spring-projects-issues","2010-05-04T02:09:19Z","2019-01-11T13:08:57Z"
"","11484","Unexpected behaviour when using AUTOWIRE_NO in combination with dependency checking [SPR-6818]","**[Philip Graham](https://jira.spring.io/secure/ViewProfile.jspa?name=pgraham)** opened **[SPR-6818](https://jira.spring.io/browse/SPR-6818?redirect=false)** and commented  When using AUTOWIRE_NO in combination with dependency checking one would only expect dependency checking to be performed for properties that would actually be set (ie. properties annotated with `@Autowired`).  However this does not seem to be the case.  Doing something similar to the following will result in a dependency error for the logger property of the NonSpringAwareBaseClass.  public abstract class NonSpringAwareBaseClass {      private Logger log;          public void setLogger(Logger aLogger) {         log = aLogger;     }          // ...  }  public class IKnowAboutSpring extends NonSpringAwareBaseClass {      private SomeClass myObj;          @Autowired     public void setMyObject(SomeClass aObj) {         myObj = aObj;     }  }  public class Main {      public static void main(String[] args) {         ApplicationContext ctx = new ClassPathXmlApplicationContext(""classpath*:resources/applicationContext-*.xml"");         AutowireCapableBeanFactory factory = ctx.getAutowireCapableBeanFactory();                  IKnowAboutSpring populateMeSpring = new IKnowAboutSpring();         factory.autowireBeanProperties(populateMeSpring, AutoWireCapableBeanFactory.AUTOWIRE_NO, true);     }  }   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2010-02-09T07:47:06Z","2019-01-12T16:38:16Z"
"","11505","Hibernate cannot perform out of transaction work when using DataSourceTransactionManager [SPR-6839]","**[Peter Plosz](https://jira.spring.io/secure/ViewProfile.jspa?name=ploszpe)** opened **[SPR-6839](https://jira.spring.io/browse/SPR-6839?redirect=false)** and commented  In our environment we need to handle transactions on database connection level. But because in this case the database connection is bound to a thread, when Hibernate tries to fetch an another connection for non transactional work (eg. using TableGenerator for id generation) it will fetch the same connection as the main transaction do. When Hibernate finishes the the non transactional work, it will commit the database connection before the transaction ends.   ---  **Affects:** 3.0 GA  **Attachments:** - [hibenate_spring.zip](https://jira.spring.io/secure/attachment/16188/hibenate_spring.zip) (_13.23 kB_)","closed","type: enhancement,","spring-projects-issues","2010-02-14T19:33:49Z","2011-04-01T01:12:27Z"
"","11333","Make comment prefix configurable in ResourceDatabasePopulator [SPR-6667]","**[Peter Plosz](https://jira.spring.io/secure/ViewProfile.jspa?name=ploszpe)** opened **[SPR-6667](https://jira.spring.io/browse/SPR-6667?redirect=false)** and commented  At the moment ResourceDatabasePopulator always uses ""--"" as comment prefix. By making it configurable we could replace our legacy code with ResourceDatabasePopulator.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c41e2c6e1f06b4b0d55527a683054a93d334c6e","closed","type: enhancement,","spring-projects-issues","2010-01-11T00:18:19Z","2012-06-19T03:43:57Z"
"","11624","Exceptions thrown from an ActionRequest are not handled via @ExceptionHandler [SPR-6959]","**[Peter Oxenham](https://jira.spring.io/secure/ViewProfile.jspa?name=peterox)** opened **[SPR-6959](https://jira.spring.io/browse/SPR-6959?redirect=false)** and commented  Exceptions thrown from a controller due to an ActionRequest are not handled via the AnnotationMethodHandlerExceptionResolver.  This seems to be because the 'handler' argument is never passed to the resolveException method.  I changed org.springframework.web.portlet.DispatcherPortlet.doRenderService(RenderRequest, RenderResponse) to call getHandler() before the processing of the ACTION_EXCEPTION_RENDER_PARAMETER and this seemed to fix the problem (though I'm not sure of any other ramifications of this change).    ---  **Affects:** 3.0.1  **Attachments:** - [DispatcherPortlet.java](https://jira.spring.io/secure/attachment/16265/DispatcherPortlet.java) (_52.02 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b67b5ec40866894ad48549d6bb8b8e2e46d00b52, https://github.com/spring-projects/spring-framework/commit/65e88449aa0f970d0d52e4e8364ce4b7faa51b94","closed","type: bug,","spring-projects-issues","2010-03-08T13:36:31Z","2012-06-19T03:44:15Z"
"","11854","Custom Collection Editor default does not handle duplicates [SPR-7195]","**[Pete van de Water](https://jira.spring.io/secure/ViewProfile.jspa?name=pete.vandewater)** opened **[SPR-7195](https://jira.spring.io/browse/SPR-7195?redirect=false)** and commented  org.springframework.beans.propertyeditors.createCollection() explicitly checks for a List (line 159) and defaults to a Set (line 166) if the Collection type can not be determined. It should be the other way around (or use a Bag etc) so that if you declare a field as a Collection and then put duplicates in it they don't get stomped on!   ---  **Affects:** 3.0.2","closed","status: invalid,","spring-projects-issues","2010-05-12T12:39:07Z","2019-01-12T05:32:03Z"
"","11039","Support for validation groups in @Valid used by spring MVC [SPR-6373]","**[Pavla Nováková](https://jira.spring.io/secure/ViewProfile.jspa?name=pavla)** opened **[SPR-6373](https://jira.spring.io/browse/SPR-6373?redirect=false)** and commented  It would be useful to be able to use validation groups in spring MVC as specified by JSR-303. With the improvement it should be possible to write something like:  `@RequestMapping`(""/foo"", method=RequestMethod.POST) public void processFoo(`@Valid`(groups={Default.class, MyValidationGroup.class}) Foo foo) { ... }  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11035 Support for 'groups' in addition to `@Valid` for `@MVC` Controllers (_**""is duplicated by""**_) - #11722 Add Group Class support to JSR-303 Validation using `@Valid` (_**""is duplicated by""**_) - #12504 ValidationUtils: add support for Validation group interfaces  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/00133179df27fc8b2c8c3b5d9377985279122691, https://github.com/spring-projects/spring-framework/commit/49a2aaf023e2da5efb0ef49785499053ebd42c61  54 votes, 53 watchers","closed","has: votes-jira,","spring-projects-issues","2009-11-17T04:43:39Z","2019-01-13T07:57:16Z"
"","11583","@Value does not work with the test context framework [SPR-6918]","**[Pavel Müller](https://jira.spring.io/secure/ViewProfile.jspa?name=garyfisher)** opened **[SPR-6918](https://jira.spring.io/browse/SPR-6918?redirect=false)** and commented  `@Value` annotation does not work in Spring unit tests. My unit test extends AbstractJUnit4SpringContextTests and everything works fine including the `@Autowired` annotation.  But if I tried to use the new Spring 3.0 feature to inject property from config file like this:  `@Value`(""${timeout}"") private String timeout;  Spring EL expressions do not work too.  Exception: ERROR - Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@19e8f17] to prepare test instance [com.aspectworks.hammer.invoice.selenium.WorkflowTest@c44b88] org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.aspectworks.hammer.invoice.selenium.WorkflowTest': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void com.aspectworks.hammer.invoice.selenium.WorkflowTest.setTimeout(java.lang.String); nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'com.aspectworks.hammer.invoice.selenium.WorkflowTest' is defined  See attachment for full log.    ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=85334  **Attachments:** - [AtValueTestContextTests.java](https://jira.spring.io/secure/attachment/16301/AtValueTestContextTests.java) (_516 bytes_) - [AtValueTestContextTests-context.xml](https://jira.spring.io/secure/attachment/16302/AtValueTestContextTests-context.xml) (_537 bytes_) - [value.log](https://jira.spring.io/secure/attachment/16250/value.log) (_5.28 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/69cbadf7e93d360f41730a3e1e3dad253977e324, https://github.com/spring-projects/spring-framework/commit/b8c0e153e3f6f7beae5b4927f0bb0dff2971edf9  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2010-03-01T00:14:13Z","2012-06-19T03:43:38Z"
"","11200","Custom DataBinder Hook [SPR-6534]","**[Pavel Müller](https://jira.spring.io/secure/ViewProfile.jspa?name=garyfisher)** opened **[SPR-6534](https://jira.spring.io/browse/SPR-6534?redirect=false)** and commented  I'm migrating our project to Spring 3.0. Most of the issues is resolved but one of them not.  We used to create our own custom DataBinder in a AnnotationMethodHandlerAdapter subclass. We used to override the createBinder() method and created our own DataBinder implementation there.  How to achieve the same in Spring 3.0. The createBinder() method disappeared.  I think this issue hurts backwards compatibility too. Our project has a lot of following methods: `@InitBinder`     public void initBinder(MyDataBinder binder) { ...define custom editors here. }  We use custom data binder to specify empty values for bound fields as well as allowed fields and other things.  ---  **Affects:** 3.0 RC1, 3.0 RC2, 3.0 RC3  **Reference URL:** http://forum.springsource.org/showthread.php?t=81209  **Issue Links:** - #11138 `@MVC` should provide a way to invoke custom code at preBind stage  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e1964a0606d50d70e77aee016e44594812f04d0","closed","type: enhancement,","spring-projects-issues","2009-12-08T00:17:37Z","2019-01-13T07:56:33Z"
"","11182","AnnotationMethodHandlerAdapter should also implement Ordered interface [SPR-6516]","**[Pavel Marinchev](https://jira.spring.io/secure/ViewProfile.jspa?name=paulisio)** opened **[SPR-6516](https://jira.spring.io/browse/SPR-6516?redirect=false)** and commented  The initHandlerAdapters(...) method in the DispatcherServlet class expects all the discovered adapters being sorted. It tries to keep them in sorted order. That's nice and makes sense. BTW, this strategy is working fine also for HandlerMapping implementations.  The bad thing is that the default implementation of HandlerAdapter interface being used for the annotation driven context (AnnotationMethodHandlerAdapter) doesn't support ordering. That makes some inconveniences for our team dealing with several contexts.  It would be nice if the AnnotationMethodHandlerAdapter class could also implement Ordered interface so that the DispatcherServlet could keep defined ordering for the handler adapters.  Thanks in advance! Pavel   ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f72769a62107f229e9b562304660e2eb4350bd18","closed","type: enhancement,","spring-projects-issues","2009-12-03T22:25:15Z","2012-06-19T03:43:05Z"
"","11650","Incorrect OSGi dependencies in 3.0.1 RELEASE [SPR-6985]","**[Pavel Kuzin](https://jira.spring.io/secure/ViewProfile.jspa?name=kuzmich)** opened **[SPR-6985](https://jira.spring.io/browse/SPR-6985?redirect=false)** and commented  In RELEASE archive all packages in spring bundles requires for dependency bundles with version=[3.0.0,3.0.1)  It`s developers joke ?   ---  **Affects:** 3.0.1","closed","in: core,","spring-projects-issues","2010-03-15T05:54:15Z","2012-06-19T03:42:57Z"
"","11025","lifecycleProcessor Is NULL [SPR-6359]","**[Pavel Kuzin](https://jira.spring.io/secure/ViewProfile.jspa?name=kuzmich)** opened **[SPR-6359](https://jira.spring.io/browse/SPR-6359?redirect=false)** and commented  Error while deploing application. With RC1 - it was OK.  SEVERE: Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=ndx.billing.DatabaseFunctions, config=osgibundle:/META-INF/spring/*.xml))                         java.lang.NullPointerException                                                                                                                                                       at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:861)                                                         at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)                                at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)                        at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)                                                                     at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)              at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)                                                                                                                                                                       at java.lang.Thread.run(Thread.java:619)                                                                                                                                     Nov 16, 2009 12:27:05 PM                                                                                                                                                             SEVERE: Exception in thread ""SpringOsgiExtenderThread-14""                                                                                                                            Nov 16, 2009 12:27:05 PM                                                                                                                                                             SEVERE: java.lang.NullPointerException                                                                                                                                               at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:861)                                                         at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)                                at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)                        at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)                                                                     at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)              at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)                                                                                                                                                                       at java.lang.Thread.run(Thread.java:619)  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11022 NPE in AbstractApplicationContext finishRefresh when initialized via Spring DM (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2009-11-15T19:36:53Z","2019-01-12T16:50:04Z"
"","10933","Upgrade to new version of javax.el [SPR-6265]","**[Pavel Kuzin](https://jira.spring.io/secure/ViewProfile.jspa?name=kuzmich)** opened **[SPR-6265](https://jira.spring.io/browse/SPR-6265?redirect=false)** and commented  In the end of 2009 sun will release JSF 2.0 specification and libs. Currently org.springfaces.web depends on javax.el version 1.0 But jsf 2.0 depends on javax.faces version 2.1.  In OSGI environment this dependencies can`t be satisfied, and webapp bundle will throw ""conflicted dependency"".  If springframework will not be updated it can`t be used with jsf 2.0   --- No further details from [SPR-6265](https://jira.spring.io/browse/SPR-6265?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-10-22T08:36:16Z","2012-06-19T03:44:05Z"
"","11485","AnnotationDrivenStaticEntityMockingControl in spring-aspects module require javax.persistence.Entity on compiler classpath  [SPR-6819]","**[Pavel Král](https://jira.spring.io/secure/ViewProfile.jspa?name=pkral)** opened **[SPR-6819](https://jira.spring.io/browse/SPR-6819?redirect=false)** and commented  Aspect **org.springframework.mock.staticmock.AnnotationDrivenStaticEntityMockingControl** require for ajc javax.persistence.Entity to be on classpath, hovewer spring-aspect pom.xml doesn't provide such dependency. As workaround one must declare dependency in affected module pom.xml  ```    javax.persistence   persistence-api   1.0   provided  ```  ---  **Affects:** 3.0 GA  **Attachments:** - [ajdtCompilerOutput.txt](https://jira.spring.io/secure/attachment/17119/ajdtCompilerOutput.txt) (_30.22 kB_) - [bla.txt](https://jira.spring.io/secure/attachment/17118/bla.txt) (_7.31 kB_)  **Issue Links:** - #16777 JCache dependency in spring-aspects - #11943 Spring aspects depends on javax.persistence/persistence-api 1.0. Conflicts with ROO including  hibernate-jpa-2.0-api  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bd88bbab4a929dd07d4e29a08ba3d27749b8ec36, https://github.com/spring-projects/spring-framework/commit/4ddcd35d133d5274b8698f6f1758f6892ef487e2, https://github.com/spring-projects/spring-framework/commit/353781021d135f33cc727cf43c20bbb126871dda, https://github.com/spring-projects/spring-framework/commit/99c5a70ce3a3e7c4b0c36c70bdf37013be4e67ed, https://github.com/spring-projects/spring-framework/commit/82ec515e598caa971b92cdc4f86c8f894705deb7, https://github.com/spring-projects/spring-framework/commit/d9df50c6cd4c5b126b621dd932f1a0611baf4b7b, https://github.com/spring-projects/spring-framework/commit/94292cad1ceb3c541f5ab3906758fe2c67cfd144, https://github.com/spring-projects/spring-framework/commit/6e516b7281e92e3ae00343437ce5d16ebc9bacf5  7 votes, 19 watchers","closed","in: core,","spring-projects-issues","2010-02-09T21:39:33Z","2019-01-13T21:47:10Z"
"","11622","doGetBean() visibility changed from protected to private [SPR-6957]","**[Pavel Kryl](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel@kryl.eu)** opened **[SPR-6957](https://jira.spring.io/browse/SPR-6957?redirect=false)** and commented  We have encountered the following issue while migrating to Spring 3.0.1 from Spring 2.5.6: - we implemented our own application context which fixes not very well performing doGetBean() method of XmlWebApplicationContext (declared on org.springframework.beans.factory.support.AbstractBeanFactory) - however when migrating to Spring 3.0.1 we found out that visibility of the method doGetBean() has changed from protected to private - this makes absolutely impossible any kind of hooking into bean resolution process  We would be glad to see this method protected again.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95ad7168bf3fb92c54ab38c5fc4843cd31f50131","closed","in: core,","spring-projects-issues","2010-03-08T00:30:50Z","2012-06-19T03:43:58Z"
"","11581","a bean with an id=""conversionService"" gives an Exception only in version 3.0.1 [SPR-6916]","**[Paulo De Carvalho](https://jira.spring.io/secure/ViewProfile.jspa?name=paudeca)** opened **[SPR-6916](https://jira.spring.io/browse/SPR-6916?redirect=false)** and commented  Hello,  Since I updated my project with spring 3.0.1, I have an exception at startup (with 3.0.0, it's work). My application has a bean called ""conversionService"" and it seems that this id couldn't be used in this version.  To reproduce, a simple example : {code:xml|title:applicationContext.xml} \ \\ \  ``` {code:java|title:Main.java} 		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(""applicationContext.xml""); 		String conversionService = applicationContext.                         getBean(""conversionService"",String.class); 		System.out.println(""conversionService=""+conversionService); ```  And the exception :  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanNotOfRequiredTypeException:  Bean named 'conversionService' must be of type [org.springframework.core.convert.ConversionService],  but was actually of type [java.lang.String] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:348) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:423) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83) 	at example.Main.main(Main.java:10) ```  I know to fix it, I could rename my bean with an another id, but I've spend a time to understand my pb.  Thanks, Paulo De Carvalho   ---  **Affects:** 3.0.1","closed","in: core,","spring-projects-issues","2010-02-27T09:44:51Z","2012-06-19T03:44:17Z"
"","11386","ConstructorResolver ignores exceptions when autowiring multiple constructors [SPR-6720]","**[Paul Nepywoda](https://jira.spring.io/secure/ViewProfile.jspa?name=ionized)** opened **[SPR-6720](https://jira.spring.io/browse/SPR-6720?redirect=false)** and commented  in autowireConstructor() the ""List causes"" variable is re-instantiated on every loop iteration.  https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java?r=1779#l178  This means that all but the last exception is lost.  The author possibly meant to initialize this variable outside of the for loop.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/45448463b87629bdd85cb375d3faa391bfaf147f","closed","type: bug,","spring-projects-issues","2010-01-19T13:54:13Z","2012-06-19T03:43:12Z"
"","11756","Problem with spring:eval under Jetty but not Tomcat [SPR-7096]","**[Paul Chapman](https://jira.spring.io/secure/ViewProfile.jspa?name=paul.chapman)** opened **[SPR-7096](https://jira.spring.io/browse/SPR-7096?redirect=false)** and commented  I have the following  ```  ```  in a JSP page and it generates a null-pointer exception.  If I use  ```  ```  it works fine.  If I use Tomcat instead of Jetty it works OK too.  Maybe this is related to the EL API?  The stack trace is:  2010-04-15 10:16:22,930 [1144706373@qtp-1689272752-4] DEBUG org.springframework.web.servlet.DispatcherServlet - Could not complete request org.apache.tiles.impl.CannotRenderException: JSPException including path '/WEB-INF/views/visits/show.jspx'. at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:692) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:644) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:627) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:321) at org.springframework.web.servlet.view.tiles2.TilesView.renderMergedOutputModel(TilesView.java:124) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1060) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:798) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:327) at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:126) at org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195) at org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159) at org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141) at org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90) at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:113) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:326) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:547) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582) Caused by: org.apache.tiles.util.TilesIOException: JSPException including path '/WEB-INF/views/visits/show.jspx'. at org.apache.tiles.servlet.context.ServletUtil.wrapServletException(ServletUtil.java:241) at org.apache.tiles.jsp.context.JspTilesRequestContext.include(JspTilesRequestContext.java:105) at org.apache.tiles.jsp.context.JspTilesRequestContext.dispatch(JspTilesRequestContext.java:96) at org.apache.tiles.renderer.impl.TemplateAttributeRenderer.write(TemplateAttributeRenderer.java:44) at org.apache.tiles.renderer.impl.AbstractBaseAttributeRenderer.render(AbstractBaseAttributeRenderer.java:106) at org.apache.tiles.renderer.impl.ChainedDelegateAttributeRenderer.write(ChainedDelegateAttributeRenderer.java:76) at org.apache.tiles.renderer.impl.AbstractBaseAttributeRenderer.render(AbstractBaseAttributeRenderer.java:106) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:670) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:336) at org.apache.tiles.template.InsertAttributeModel.renderAttribute(InsertAttributeModel.java:210) at org.apache.tiles.template.InsertAttributeModel.end(InsertAttributeModel.java:126) at org.apache.tiles.jsp.taglib.InsertAttributeTag.doTag(InsertAttributeTag.java:311) at org.apache.jsp.WEB_002dINF.layouts.default_jspx._jspx_meth_tiles_insertAttribute_1(org.apache.jsp.WEB_002dINF.layouts.default_jspx:450) at org.apache.jsp.WEB_002dINF.layouts.default_jspx._jspService(org.apache.jsp.WEB_002dINF.layouts.default_jspx:137) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:327) at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:126) at org.apache.tiles.servlet.context.ServletTilesRequestContext.forward(ServletTilesRequestContext.java:241) at org.apache.tiles.servlet.context.ServletTilesRequestContext.dispatch(ServletTilesRequestContext.java:222) at org.apache.tiles.renderer.impl.TemplateAttributeRenderer.write(TemplateAttributeRenderer.java:44) at org.apache.tiles.renderer.impl.AbstractBaseAttributeRenderer.render(AbstractBaseAttributeRenderer.java:106) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:670) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:690) ... 51 more Caused by: javax.servlet.jsp.JspException: org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property 'object': 'Unexpected exc eption occurred accessing 'object' as an implicit variable' at org.apache.jsp.tag.web.form.fields.display_tagx.doTag(org.apache.jsp.tag.web.form.fields.display_tagx:210) at org.apache.jsp.WEB_002dINF.views.visits.show_jspx._jspx_meth_field_display_0(org.apache.jsp.WEB_002dINF.views.visits.show_jspx:100) at org.apache.jsp.WEB_002dINF.views.visits.show_jspx.access$0(org.apache.jsp.WEB_002dINF.views.visits.show_jspx:85) at org.apache.jsp.WEB_002dINF.views.visits.show_jspx$show_jspxHelper.invoke0(org.apache.jsp.WEB_002dINF.views.visits.show_jspx:177) at org.apache.jsp.WEB_002dINF.views.visits.show_jspx$show_jspxHelper.invoke(org.apache.jsp.WEB_002dINF.views.visits.show_jspx:199) at org.apache.jsp.tag.web.form.show_tagx._jspx_meth_c_when_0(org.apache.jsp.tag.web.form.show_tagx:303) at org.apache.jsp.tag.web.form.show_tagx._jspx_meth_c_choose_0(org.apache.jsp.tag.web.form.show_tagx:272) at org.apache.jsp.tag.web.form.show_tagx.doTag(org.apache.jsp.tag.web.form.show_tagx:147) at org.apache.jsp.WEB_002dINF.views.visits.show_jspx._jspx_meth_page_show_0(org.apache.jsp.WEB_002dINF.views.visits.show_jspx:81) at org.apache.jsp.WEB_002dINF.views.visits.show_jspx._jspService(org.apache.jsp.WEB_002dINF.views.visits.show_jspx:52) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) at org.mortbay.jetty.servlet.Dispatcher.include(Dispatcher.java:192) at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:1013) at org.apache.jasper.runtime.PageContextImpl.include(PageContextImpl.java:698) at org.apache.tiles.jsp.context.JspTilesRequestContext.include(JspTilesRequestContext.java:103) ... 83 more Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property 'object': 'Unexpected exception occurred accessing 'objec t' as an implicit variable' at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:199) at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:71) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:52) at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102) at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97) at org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:108) at org.apache.jsp.tag.web.form.fields.display_tagx._jspx_meth_spring_eval_0(org.apache.jsp.tag.web.form.fields.display_tagx:485) at org.apache.jsp.tag.web.form.fields.display_tagx._jspx_meth_c_otherwise_0(org.apache.jsp.tag.web.form.fields.display_tagx:457) at org.apache.jsp.tag.web.form.fields.display_tagx._jspx_meth_c_choose_0(org.apache.jsp.tag.web.form.fields.display_tagx:344) at org.apache.jsp.tag.web.form.fields.display_tagx.doTag(org.apache.jsp.tag.web.form.fields.display_tagx:196) ... 108 more Caused by: org.springframework.expression.AccessException: Unexpected exception occurred accessing 'object' as an implicit variable at org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.resolveImplicitVariable(EvalTag.java:177) at org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.canRead(EvalTag.java:153) at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:189) ... 117 more Caused by: java.lang.NullPointerException at org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.resolveImplicitVariable(EvalTag.java:174) ... 119 more   ---  **Affects:** 3.0.1  **Issue Links:** - [ROO-826](https://jira.spring.io/browse/ROO-826) SpelEvaluationException 'Unexpected exception occurred accessing 'object' as an implicit variable' (_**""is depended on by""**_) - [ROO-870](https://jira.spring.io/browse/ROO-870) Entity view doesn't work when run in Jetty (_**""is depended on by""**_)","closed","type: bug,","spring-projects-issues","2010-04-14T11:29:15Z","2012-06-19T03:43:41Z"
"","11662","Extract a generic factory interface from BeanFactory [SPR-6997]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-6997](https://jira.spring.io/browse/SPR-6997?redirect=false)** and commented  JSR-330 has the Provider interface. I don't think BeanFactory will ever be retrofitted with it as it would break binary compatibility (i.e., changes signature), but you could extract a Factory superinterface for the getObject() method.   ---  **Affects:** 3.0.1","closed","in: core,","spring-projects-issues","2010-03-17T03:40:19Z","2018-12-28T11:53:55Z"
"","11576","Undeprecate AssertThrows [SPR-6911]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-6911](https://jira.spring.io/browse/SPR-6911?redirect=false)** and commented  The API doc says this is deprecated in ""favor use of JUnit 4's `@Test`(expected=...) support"". It's unfortunate, because JUnit cannot replace this class wholly. JUnit can only capture exceptions at the test level; not at a method level. If multiple invoked methods can throw the same exception, it's not possible for `@Test` to determine which one failed. It is not always practical -- or desireable -- to refactor testing methods that invoke multiple methods; building tests sometimes require complicated setup.  I recommend simply noting the benefits and drawbacks between AssertThrows and `@Test` and remove the deprecation. Deprecations get removed from the framework; this should not be a candidate for removal.  ---  **Issue Links:** - #11028 Refactor AssertThrows to support Throwable instead of Exception  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2010-02-25T12:59:17Z","2019-01-11T16:29:17Z"
"","11028","Refactor AssertThrows to support Throwable instead of Exception [SPR-6362]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-6362](https://jira.spring.io/browse/SPR-6362?redirect=false)** and commented  I was testing an AspectJ advice:  ```java @Test public void testBubbleException() {   pjp = createMock(ProceedingJoinPoint.class);   pjp.proceed();   expectLastCall().andThrow(new RuntimeException());   replay(pjp);    new AssertThrows(RuntimeException.class) {       @Override       public void test() throws Exception {           advice.targetCall(pjp);       }   }.runTest();   verify(pjp); } ```  Note that the signature of my pointcut method **throws Throwable**. Yet, `AssertThrows#test()` only allows the throwing of `Exception`. Can't that be loosened to throw `Throwable`? After all, that's what's part of `@Test(expectedException=)`, except I can't use it here because I want to afterwards verify certain calls in my aspect.  ---  **Affects:** 2.5.6, 3.0 RC2  **Issue Links:** - #11576 Undeprecate AssertThrows  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8008e466aa675ea3dcffbea2b0e59e609319c818","closed","type: enhancement,","spring-projects-issues","2009-11-16T01:48:23Z","2019-01-11T14:33:53Z"
"","10960","Allow further assertion checking with AssertThrows successes [SPR-6294]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-6294](https://jira.spring.io/browse/SPR-6294?redirect=false)** and commented  I often need to check beyond the correct type of an exception. I work with a business exception hierarchy that provides custom error codes and such that require assertion checking too.  It would be nice if AssertThrows contained a protected method to perform additional success checking... that is, more assert() calls. The closest is checkExceptionExpectations, but I am not interested in providing a message. How about a new method that still passes the exception, but simply returns void?   ---  **Affects:** 2.5.6","closed","status: invalid,","spring-projects-issues","2009-11-02T09:05:46Z","2019-01-12T05:32:57Z"
"","11163","@RequestMapping should support accept header and url extension [SPR-6497]","**[Paul Bakker](https://jira.spring.io/secure/ViewProfile.jspa?name=paulb)** opened **[SPR-6497](https://jira.spring.io/browse/SPR-6497?redirect=false)** and commented  Sometimes it's necessary to execute different code to setup a model for a different type of content. For example; a list of employees should be returned directly for rendering HTML, but should be wrapped in a JAXB class for rendering XML, as in the following example.  ```java @RequestMapping(value = ""/list.html"") //Doesn't work for accept header! public ModelAndView listHTML(HttpServletRequest request) {      ModelAndView mav = new ModelAndView();     mav.addObject(""employees"", employeeDao.listEmployees());     return mav; }  @RequestMapping(value = ""/list.xml"") //Doesn't work for accept header! public ModelAndView listXML(HttpServletRequest request) {     ModelAndView mav = new ModelAndView();     mav.addObject(""employees"", new EmployeeList(employeeDao.listEmployees()));      return mav; } ```  There seems to be no easy way at this moment to apply this. Of course you could use the headers parameter in the `@RequestMapping`, but that doesn't work when a request is done without the accept header using an extension in the url instead (e.g. list.xml). When using an url extension as in the above example it doesn't work when only the accept header is set.  JAX-RS has a `@Produces` and `@Consumes` annotation which does the job perfectly. Wouldn't we need something similar in Spring?  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11658 Add content-negotiation to RequestBody and ResponseBody processing (_**""is duplicated by""**_) - #12378 `@RequestMapping` should support alternative between a header and a url extension (_**""is duplicated by""**_) - #13190 Spring MVC - Ability to use a Converter based on the Path Extension instead of Accep Header. (_**""is duplicated by""**_) - #13057 Content negotiation improvements (_**""is superseded by""**_)  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-02T01:25:07Z","2019-01-13T07:56:44Z"
"","11687","GenericFilterBean and ContextLoaderListener error handling [SPR-7025]","**[Paul Austin](https://jira.spring.io/secure/ViewProfile.jspa?name=p_d_austin)** opened **[SPR-7025](https://jira.spring.io/browse/SPR-7025?redirect=false)** and commented  Right now the GenericFilterBean and ContextLoaderListener cause the web applications to fail to initialize if there was an error in the initialization. The error in the tomcat log does not include a stack trace of the error.  Would it be possible to wrap the initialization with a try catch block to catch the error and do a printStack trace on it so that the error is in the log. As you can't guarantee logging is installed e.printStackTrace would be used instead of a logging call.  The error can then be re-thrown if required   --- No further details from [SPR-7025](https://jira.spring.io/browse/SPR-7025?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-03-23T05:27:11Z","2012-02-28T05:56:10Z"
"","11658","Add content-negotiation to RequestBody and ResponseBody processing [SPR-6993]","**[Paul Austin](https://jira.spring.io/secure/ViewProfile.jspa?name=p_d_austin)** opened **[SPR-6993](https://jira.spring.io/browse/SPR-6993?redirect=false)** and commented  At the moment the AnnotationMethodHandlerAdaptor only uses a simple approach to content negotiation for RequestBody and ResponseBody parameters using the Accept and Content-type headers.  It would be useful if additional content negotiation, such as using file name extensions, request parameter and a default media type were also provided. This is similar to the approach provided by the ContentNegotiatingViewResolver for views.  I have implemented an example implementation if you'd like to use that as a basis for the implementation.  Look at the ServletHandlerMethodInvoker.handleResponseBodyMethod and the ServletHandlerMethodInvoker.resolveRequestBody. You'll see it uses a MediaTypeUtils class to get all the possible accepted media types.  The MediaTypeUtils uses the mediaTypeOrder field to decide which order the content negotiation should be performed in. This gives the developer the option to decide which types of content negotiation can be performed and the precedence order of these. The important thing to note is that all media types from all the selected sources are added so that there is fall back if one of the options is not supported by the different message converters.  ---  **Affects:** 3.0.1  **Attachments:** - [AnnotationMethodHandlerAdapter.java](https://jira.spring.io/secure/attachment/16304/AnnotationMethodHandlerAdapter.java) (_47.27 kB_) - [ContentNegotatingResponseBody.java](https://jira.spring.io/secure/attachment/16474/ContentNegotatingResponseBody.java) (_5.91 kB_) - [ContentNegotatingResponseBody.java](https://jira.spring.io/secure/attachment/16473/ContentNegotatingResponseBody.java) (_5.86 kB_) - [MediaTypeUtil.java](https://jira.spring.io/secure/attachment/16303/MediaTypeUtil.java) (_4.29 kB_)  **Issue Links:** - #11163 `@RequestMapping` should support accept header and url extension (_**""duplicates""**_) - #13057 Content negotiation improvements (_**""is superseded by""**_)  9 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-16T03:37:51Z","2019-01-13T07:54:48Z"
"","11861","Better exception when annotated calling controller methods [SPR-7202]","**[Patras Vlad Sebastian](https://jira.spring.io/secure/ViewProfile.jspa?name=senoctar)** opened **[SPR-7202](https://jira.spring.io/browse/SPR-7202?redirect=false)** and commented  After figuring out arguments needed for a handler (controller) method, HandlerMethodInvoker.invokeHandlerMethod calls handlerMethodToInvoke.invoke(handler, args), where handlerMethodToInvoke is the method of controller to call. This Java reflection method simply throws an IllegalArgumentException if the arguments do not match, it does not say anything about what method is called or what argument does not match.  Determining what argument does not match using something like Class.isAssignableFrom would be nice, but at least the IllegalArgumentException should be wrapped in an exception that contains the handler's method name in the message. Errors caused by bad `@RequestMapping`'s for example would be spotted from the log message, without having to place a breakpoint in spring's source code.   ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-05-13T20:31:16Z","2019-01-11T13:18:45Z"
"","11835","SessionAttributes does not mimic setSessionForm functionality of SimpleFormController [SPR-7176]","**[Patras Vlad Sebastian](https://jira.spring.io/secure/ViewProfile.jspa?name=senoctar)** opened **[SPR-7176](https://jira.spring.io/browse/SPR-7176?redirect=false)** and commented  Although not stated in the documentation, there are statements in forums and even JIRA issue comments that SessionAttributes behaves like setSessionForm functionality of the deprecated SimpleFormController.  However SimpleFormController guarantees each controller has it's own form object in session (by adding the class name as a prefix for the session attribute), the DefaultSessionAttributeStore does not, it just uses the attribute name.  Unless you use a custom SessionAttributeStore, usages like these will fail with an exception (if the session state is not completed) :  `@SessionAttributes`(""command"") public class AController { public void doSomething(`@ModelAttribute`(""command"") ACommand) {...} }  `@SessionAttributes`(""command"") public class BController { public void doSomething(`@ModelAttribute`(""command"") BCommand) {...} }   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=49396","closed","type: enhancement,","spring-projects-issues","2010-05-05T21:50:14Z","2018-12-28T10:44:27Z"
"","10958","Bean Binding Problem [SPR-6292]","**[Parikh, Pratik](https://jira.spring.io/secure/ViewProfile.jspa?name=tiki)** opened **[SPR-6292](https://jira.spring.io/browse/SPR-6292?redirect=false)** and commented  I have a StringDelimiterCollectionEditor which get initialized for binding in my controller as following:      @InitBinder     private void initBinder(final WebDataBinder binder) {     	binder.registerCustomEditor(Date.class, new CustomDateEditor(     			new SimpleDateFormat(""dd-MMM-yyyy""), true));     	binder.registerCustomEditor(List.class,     			new StringDelimiterCollectionEditor(ArrayList.class, true));     }  This use to work with Spring 3 M3 but when i tried to update to Spring RC1 this stopped working. By this i am mean when a string would come with comma deliminator e.g. A1235,B23456 then it would get converted into ArrayList with first and second element beign A1235,B23456. But now with Spring RC1 it just remains as String in first element.   ---  **Affects:** 3.0 RC1","closed","in: core,","spring-projects-issues","2009-11-02T07:52:43Z","2019-01-12T16:38:53Z"
"","11105","Possible issue with advice ordering when creating programmaticaly proxies using AspectJProxyFactory [SPR-6439]","**[Panos Athanasiou](https://jira.spring.io/secure/ViewProfile.jspa?name=packux)** opened **[SPR-6439](https://jira.spring.io/browse/SPR-6439?redirect=false)** and commented  As i refer in my post in Spring forum, while creating programmaticaly a proxied object using AspectJProxyFactory, i realised that the advice ordering is not respected, even though i followed the guidelines provided in manual (i.e. implement Ordered and return appropriately an integer, lower for higher precedence).  After a small research, I came to the point where DefaultAdvisorChainFactory creates the chain of callbacks, and there saw that the method getInterceptorsAndDynamicInterceptionAdvice() does not take under consideration whether any of my aspects use either Ordered interface or `@Order`.  In the forum reference, you can find the test i performed to check whether this functionality works. It could be the case that I misunderstood something or did not use properly the API, but given the fact that i got no answers in the forum, I suspect it's better to raise a JIRA issue.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=80868","closed","type: enhancement,","spring-projects-issues","2009-11-24T19:46:25Z","2012-06-18T12:44:27Z"
"","11434","Change in documentation [SPR-6768]","**[pankaj](https://jira.spring.io/secure/ViewProfile.jspa?name=pankajgupta)** opened **[SPR-6768](https://jira.spring.io/browse/SPR-6768?redirect=false)** and commented  Please change respectedly to respectively in URL mentioned(in line ""There are two exceptions that can be thrown, ParseException and EvaluationException when calling 'parser.parseExpression' and 'exp.getValue' respectedly.""). i didnt knew where to file for doc issues.   ---  **Reference URL:** http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch07s03.html","closed","type: enhancement,","spring-projects-issues","2010-01-25T16:28:04Z","2012-06-19T03:42:44Z"
"","11629","Problem with Spring 3.0 when DispatcherServlet is decladed as a Spring bean itself [SPR-6964]","**[Pablo](https://jira.spring.io/secure/ViewProfile.jspa?name=gpablo)** opened **[SPR-6964](https://jira.spring.io/browse/SPR-6964?redirect=false)** and commented  When multiple DispatcherServlet instances are configured in the root application context, in spring 3.0, all those instances get the refresh events from all application contexts. Each refresh event forces the DispatcherServlet to reconfigure the handler mappings with the context being refreshed. As a result, all DispatcherServlets end up being configured with the same mappings, as if they all where sharing the same spring app context.   ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?p=287750#post287750  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/461c200ce611666106a86e670076833bd3e0c706","closed","type: bug,","spring-projects-issues","2010-03-09T23:32:38Z","2012-06-19T03:42:46Z"
"","11495","using Scanner for command reading after loading ApplicationContext, causes a bug in veriso 3.0 and later nightly builds [SPR-6829]","**[oner ekiz](https://jira.spring.io/secure/ViewProfile.jspa?name=ekizoner)** opened **[SPR-6829](https://jira.spring.io/browse/SPR-6829?redirect=false)** and commented  using Scanner for command reading after loading ApplicationContext, causes a bug in veriso 3.0 and later nightly builds. when i removed spring 3.0 libraries and include 2.5 verison instead, this bug does not occure.  Here is my codes, to produce it  applicationContext.xml  ---  \ \\ \ \ \ \ \ \ \  applicationContext-persistence.xml  ---  \ \ \ \ \ \  Classes in test package: Service.java  ---  package test; public class Service {      private Dao dao;          public void anyDBCall(){     	dao.anyDBCall();     }          public void setDao(Dao dao) {     	this.dao = dao;     }  }  Dao.java  ---  package test;  import javax.sql.DataSource;  import org.springframework.jdbc.core.JdbcTemplate; public class Dao { private JdbcTemplate jdbcTemplate; public void anyDBCall(){ try{ System.out.println(""CALL ?"");                  StringBuilder sb = new StringBuilder();     	sb.append(""Select MessageId from Message Where MessageId=1""); //any query, for simplicity     	jdbcTemplate.execute(sb.toString());          	System.out.println(""CALLED."");     	}catch(Exception e){     		e.printStackTrace();     	}     }          public void setDataSource(DataSource dataSource) {         this.jdbcTemplate = new JdbcTemplate(dataSource);     }  }  MyThread.java  ---  package test; public class MyThread implements Runnable{ private Service service;      @Override     public void run() {     	while(true){     		try {     			service.anyDBCall();     			     			Thread.sleep(10*1000);     		} catch (Exception e) {     			e.printStackTrace();     		}     	}     }          public void setService(Service service) {     	this.service = service;     }  }  AppStarter.java  ---  package test; import java.util.Scanner; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; public class AppStarter {      public AppStarter(){     	String[] configFiles = new String[] {""applicationContext.xml"", ""applicationContext-persistence.xml""};     	ApplicationContext context = new ClassPathXmlApplicationContext(configFiles);     	     	MyThread myThread = (MyThread)context.getBean(""myThread"");     	new Thread(myThread).start();     	     	//THIS PART IS CAUSING TO THE BUG     	//IF YOU CLOSE THESE Scanner PART, EVERYTHING WORKS.     	Scanner sc = new Scanner(System.in);     	while(true){     		String command = sc.nextLine();     	}     	     }          public static void main(String[] a){     	new AppStarter();     }  }  libraries:  ---  commons-collections-3.2.jar commons-dbcp.jar commons-logging.jar commons-pool.jar jtds-1.2.jar org.springframework.**********-3.0.0.RELEASE.jar  (spring 3.0 libraries) spring-2.5.jar (spring 2.5 library)  using 3.0 libraries causes the program to hang on ""jdbcTemplate.execute(sb.toString());"" line on Dao. if i remove the Scanner lines in AppStarter.java, program does not stops.  using 2.5 library does not cause any thing wheather Scanner line is removed or not.  ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=84534","closed","status: invalid,","spring-projects-issues","2010-02-12T00:26:07Z","2019-01-13T21:47:05Z"
"","11116","Spring does not detect nested JBoss RollbackException [SPR-6450]","**[Olivier BILLIARD](https://jira.spring.io/secure/ViewProfile.jspa?name=obilliard)** opened **[SPR-6450](https://jira.spring.io/browse/SPR-6450?redirect=false)** and commented  I am using Spring 2.0.2 with JBoss 4.2.1 which uses Arjuna Transaction Manager. When i am trying to rollback a transaction i am getting the error message as IllegalStateException""No Active JTA Transaction"" The integration between Spring and JBOSS does not work properly anymore after upgrading jboss from 4.0.4 to 4.2.1.  Raised the same issue in the JBoss forum but they have replied that it is a spring bug that it is trying to synchronise a inactive transaction.  For more information Please refer the below links.  http://jira.jboss.com/jira/browse/JBAS-4972 http://www.jboss.com/index.html?module=bb&op=viewtopic&t=118261  I have also raised it in the spring forum Please refer the below link  http://forum.springframework.org/showthread.php?t=27867  Can you please help me out in this as this seems to be very critical.  Thanks, Kavipriya   ---  **Affects:** 2.5.6  **Attachments:** - [AbstractPlatformTransactionManager.java](https://jira.spring.io/secure/attachment/15962/AbstractPlatformTransactionManager.java) (_54.01 kB_) - [JtaTransactionManager.java](https://jira.spring.io/secure/attachment/15963/JtaTransactionManager.java) (_50.44 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c4d8f6b3eb5c6a008d86c871b624d4a7ece9e323","closed","type: enhancement,","spring-projects-issues","2009-11-25T03:23:13Z","2012-06-19T03:44:16Z"
"","11845","Doc: AspectJ argument binding does not work with typed collections [SPR-7186]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7186](https://jira.spring.io/browse/SPR-7186?redirect=false)** and commented  Suppose you have a generic class with a method accepting a collection of the generic type:  ```java public class FooImpl extends Foo{    @Override   public void bar(List param) {     ...   } } ```  Now want to intercept the method calls whenever a list of **special T's** is given:  ```java @Before(""execution(* Foo+.bar(..)) && args(param)"") public void method(List param) {   ... } ```  Unfortunately this gets also invoked if `FooImpl.bar(...)` is called with a list consisting of non-`MySpecialType` instances which results in a `ClassCastException`. The reason for this probably lies in the fact, that of course `List` gets erased to `List` and thus the pointcut arguments get a primitive type of `List` assigned and thus matches also lists of non-`MySpecialType`. I tried to add concrete type information to the `args(...)` directive as follows:  ```java @Before(""execution(* Foo+.bar(..)) && args(param)"") ```  This get's parsed by the `PointcutParser` successfully but the information is neglected during matching. The only way around seems to be making a collection member type check inside the advice manually which is a little ugly IMHO.  Regards, Ollie   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/680bfbe718bc47897bb9b2aac068dd764a2a7bcb  1 votes, 2 watchers","closed","type: documentation,","spring-projects-issues","2010-05-10T21:01:23Z","2012-06-19T03:43:10Z"
"","11828","Allow @Bean in test classes to override beans loaded via @ContextConfiguration [SPR-7169]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7169](https://jira.spring.io/browse/SPR-7169?redirect=false)** and commented  It would be cool if test classes executed with `SpringJUnit4ClassRunner` would be considered as `@Configuration` classes, too. This way the following would be possible.  ```java @RunWith(SpringJUnitClassRunner.class) @ContextConfigLocation(""classpath:foo.xml"") public class SampleTest {    @Autowired   private MyService myService;    @Bean   public MyRepository repository() {     return Mockito.mock(MyRepository.class);   }    // Testcases } ```  IMHO this has the benefit of not polluting the test resources with zillions of config files that you might want to declare to override certain beans from your default configuration (which you would additionally load inside `@ContextConfigLocation`). As this co-locates customization needed for the tests and the tests themselves it reduces scattering of artifacts needed for the tests.   ---  **Affects:** 3.0.2  3 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2010-05-04T19:11:47Z","2019-07-10T16:16:59Z"
"","11812","Potential null-pointer in TransactionAspectSupport.determineTransactionManager() [SPR-7153]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7153](https://jira.spring.io/browse/SPR-7153?redirect=false)** and commented  The logic in `TransactionInterceptor.invoke(...)` retrieves `TransactionAttribute` from a `TransactionAttributeSource` which according to the API can be `null`. `determineTransactionManager` of the super class then accesses `txAttr.getQualifier()` without a `null` check. The qualifier can be simply `null` in case `txAttr` is `null`.  ---  **Affects:** 3.0.2  **Issue Links:** - #17145 `@Transactional` qualifier is ignored by TransactionAspectSupport if default transaction manager is set (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0afa0c4727aff343a5e3bb43022b154fcd3fb38","closed","type: bug,","spring-projects-issues","2010-04-29T08:50:48Z","2019-01-13T07:54:11Z"
"","11763","Mention position of Errors instance in method signature more explicitly [SPR-7103]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7103](https://jira.spring.io/browse/SPR-7103?redirect=false)** and commented  It's a common issue that developers run into the case where they declare handler method parameters in a way, that the `Errors` or `BindingResult` parameter is not the one directly behind the parameter to be bound. Yes, the need to do that is documented in the section that lists all supported parameter types but at is that easy to do wrong and the error message in this case is not really helpful at all, I think this deserves more detailled description. I think it's also worthwhile to give a short rationale because as the order of all other parameters is pretty much doesn't matter.  ---  **Affects:** 3.0.2  **Issue Links:** - #12016 About `@ModelAttribute`, two commands, BindingResult","closed","type: documentation,","spring-projects-issues","2010-04-16T03:00:39Z","2019-01-13T07:54:21Z"
"","11753","Allow configuring view resolution through the MVC Java config and the MVC Namespace [SPR-7093]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7093](https://jira.spring.io/browse/SPR-7093?redirect=false)** and commented  It would be cool to have `ViewResolvers` like `InternalResourceViewResolver` available to be declared via the MVC namespace. I imagine something similar to the `` element already present, where you provide either predefined subelements or plain bean definitions. Although one could argue that the benefit is rather limited it completes the picture of configurable MVC components nicely, especially as the order can then be determined explicitly.  Maybe one can also ease the use of `ContentNegotiatingViewResolver` which is not the most approachable class in regards of configuration currently ;).  I'll probably provide a draft implementation as patch in a few days.  ---  **Sub-tasks:** - #16605 Update documentation with MVC config view resolution examples  **Issue Links:** - #14167 Allow configuring view resolution through the MVC Java config (_**""is duplicated by""**_) - #11222 Add mvc:annotation-driven Tiles Configuration (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dfcc1d7e8c8051004b6a8cd8329eed0f6c71efd2, https://github.com/spring-projects/spring-framework/commit/52f1be7ade665a0c6030cff630ce980827b4c304, https://github.com/spring-projects/spring-framework/commit/10a4c2cd8140095777343262ba728e51a5f6c873, https://github.com/spring-projects/spring-framework/commit/a26b1ef8d9e95ee636ccfb4cbc26b5afc8812f24, https://github.com/spring-projects/spring-framework/commit/5e1a5c8d5182e04acd35ebeb5dee098104439c1d, https://github.com/spring-projects/spring-framework/commit/f54cee47b06c041c5c976ce23fc2079d70fad404, https://github.com/spring-projects/spring-framework/commit/92402e7715fc1dfdf4cba8eb00e1fc787d434bcf, https://github.com/spring-projects/spring-framework/commit/5bc793768cb3d5a584e10175fe73ea5baa8e372a, https://github.com/spring-projects/spring-framework/commit/cc7e8f55583b91c29dc1375160d7f7d2403590ff  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-13T21:07:15Z","2019-01-11T13:25:03Z"
"","11726","Interface-based CGLib created beans cannot be used as factory beans [SPR-7066]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7066](https://jira.spring.io/browse/SPR-7066?redirect=false)** and commented  Suppose you have a bean that is effectively a CGLib proxy for an interface (**not** for a class). If this bean is referenced as factory-bean from another bean declaration the factory-method lookup will fail as `ConstructorResolver` uses `ClassUtils.getUserClass(...)` uses the superclass of the CGLib class which is `Object` for proxies of an interface and thus the interface's factory method can't be found. I wonder what's the exact rationale behind the user class lookup? Is it possible to explicitly handle `Object` superclasses (as one can assume that the CGLib proxy has to have been created for an interface) and use the CGLib class then?  In my particular usecase I setup mocks for interfaces using Mockito which creates exactly such a scenario. My workaround in this case is to let the proxy be created for an implementation of the interface, so that the superclass is not object then. As such scenarios probably only pop up in test case scenarios, it's probably no big deal. But as it works with 2.5.6 (that doesn't have the user class lookup included) the effect is probably quite puzzling when upgrading to 3.0.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2a9bc9c6658226c283a50c807e2de5053a21cee  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-04-03T20:32:48Z","2012-06-19T03:43:07Z"
"","11710","Allow reuse of include and exclude context namespace elements in custom namespace [SPR-7049]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7049](https://jira.spring.io/browse/SPR-7049?redirect=false)** and commented  Suppose you write a custom namespace using classpath scanning facilities. You pretty much want to reuse `` and ``, too. I'd either be happy with a simple utility method that returns all `TypeFilter` instances parsed from nested `include` and `exclude` elements of a given element or a base class extracted from `ComponentScanBeanDefinitionParser` that simply sets up a general `ClassPathScanningCandidateComponentProvider` with the parsed `TypeFilter` instances applied.   ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-03-29T04:58:35Z","2018-12-26T17:32:32Z"
"","11556","Maven build: Spring Context cant be built due to missing dependency atinject TCK [SPR-6890]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6890](https://jira.spring.io/browse/SPR-6890?redirect=false)** and commented  Spring Context module tests can't be compiled due to the TCK for JSR-330 missing in any Maven repository. It can be downloaded here: http://code.google.com/p/atinject/downloads/list. So it seems it's worth maybe deploying it to the SpringSource externals repository?   --- No further details from [SPR-6890](https://jira.spring.io/browse/SPR-6890?redirect=false)","closed","status: declined,","spring-projects-issues","2010-02-22T17:51:45Z","2012-05-16T01:23:20Z"
"","11555","Maven Build: Failing tests because resources reside in src/test/java [SPR-6889]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6889](https://jira.spring.io/browse/SPR-6889?redirect=false)** and commented  The Maven build for a lot of modules fail due to the fact that integration test configuration files reside in `src/test/java` instead of `src/test/resources` so that Surefire plugin executing the tests doesn't find the resources in the classpath.  I thought about providing a patch but it seems to be easier to simply move all non `*.java` files than applying a move-patch esp. if there are changes done to the files until this one here gains attention.   --- No further details from [SPR-6889](https://jira.spring.io/browse/SPR-6889?redirect=false)","closed","in: core,","spring-projects-issues","2010-02-22T17:39:10Z","2012-04-10T01:58:29Z"
"","11550","Maven Build: remove custom  section from context-support pom [SPR-6884]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6884](https://jira.spring.io/browse/SPR-6884?redirect=false)** and commented  The custom `` element contained in the pom of the context support module causes the Maven build not to regard `src/test/resources` as resource folder and thus a lot of the tests fail, when being executed with Maven.  If the element is removed, the build runs fine.   --- No further details from [SPR-6884](https://jira.spring.io/browse/SPR-6884?redirect=false)","closed","in: core,","spring-projects-issues","2010-02-21T05:21:57Z","2012-05-16T01:23:22Z"
"","11549","Maven Build: Allow Spring ASM to be built with maven [SPR-6883]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6883](https://jira.spring.io/browse/SPR-6883?redirect=false)** and commented  Attached you'll find a corrected version for Spring ASM module to be built with Maven to use the original ASM libraries from the local Maven repository instead of a custom folder. I have also replace the jarjar plugin with one available in Maven central repo.  ```              org/objectweb/asm         com.springsource.org.objectweb.asm         ${asm.artifactId}.commons         2.2.3                                                  maven-antrun-plugin                                                               jarjar                         process-classes                                                      runcom.tonicsystems                         jarjar                         0.6                                                                   org.objectweb.asm                         com.springsource.org.objectweb.asm                         ${asm.version}                                                                   org.objectweb.asm                         com.springsource.org.objectweb.asm.commons                         ${asm.version}                                                                  ```    --- No further details from [SPR-6883](https://jira.spring.io/browse/SPR-6883?redirect=false)","closed","status: declined,","spring-projects-issues","2010-02-21T04:31:29Z","2012-05-16T01:23:24Z"
"","11548","Maven Build: Add generation of XML bound classes for test cases [SPR-6882]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6882](https://jira.spring.io/browse/SPR-6882?redirect=false)** and commented  Building the module with Maven currently doesn't work as JAXB, XMLBeans and JiBX classes are not generated compiled correctly. I've just thrown the required configuration together:  ```                                org.jvnet.jaxb2.maven2             maven-jaxb2-plugin             0.7.2                                                   **/*.xsd                                  true                 ${basedir}/src/test/resources                 ${basedir}/src/test/java                 org.springframework.oxm.jaxb.test                 true                                                                generate-jaxb-classes                     generate-test-sources                                              generate                                                                                          org.codehaus.mojo             castor-maven-plugin             1.0                              ${basedir}/src/test/resources/org/springframework/oxm                 ${basedir}/src/test/java                 org.springframework.oxm.castor                 ${basedir}/castorbuilder.properties                                                                generate-castor-classes                     generate-test-sources                                              generate                                                                                          org.codehaus.mojo             xmlbeans-maven-plugin             2.3.3                              ${basedir}/src/test/resources/org/springframework/oxm                                                                generate-xmlbeans-classes                     generate-test-sources                                              xmlbeans-test                                                                                                    ```  I had to comment out JiBX as the Maven plugin is a rather ugly beast as there is no way to configure it to use source files from `src/test/java`. I did a quick test moving the necessary classes into the main source tree and it worked out then. I've opened a ticket at the JiBX issuetracker to solve the issue (http://jira.codehaus.org/browse/JIBX-355). Furthermore http://jira.codehaus.org/browse/JIBX-155 is also a little glitch as it prevents the directory to be prepended with `${basedir`} which could cause problems in multi module build.   ---  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2010-02-21T03:56:01Z","2012-05-16T01:22:51Z"
"","11547","Portlet pom states dependency to spring-asm twice [SPR-6881]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6881](https://jira.spring.io/browse/SPR-6881?redirect=false)** and commented  The dependency to spring-asm is declared twice, what causes Maven to raise a warning. Simply deleting one of the entries solves the issue:  https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.web.portlet/pom.xml?r=HEAD   --- No further details from [SPR-6881](https://jira.spring.io/browse/SPR-6881?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-02-21T01:04:19Z","2012-06-19T03:43:47Z"
"","11437","HttpMessageConverter should accept Class","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6771](https://jira.spring.io/browse/SPR-6771?redirect=false)** and commented  There's a small glitch similar to #11408 inside `HttpMessageConverter`. If you use it programatically you usually ask `canRead(Class","closed","type: enhancement,","spring-projects-issues","2010-01-25T19:26:23Z","2019-01-11T16:00:38Z"
"","11428","Doc: Be more detailed about constructor resolution in XML based autowiring [SPR-6762]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6762](https://jira.spring.io/browse/SPR-6762?redirect=false)** and commented  The [reference docs](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-autowire) on autowiring by XML are quite silent when it comes to deal with multiple constructors. All explainations seem to assume only one constructor on the class to be autowired.  Especially when using CGLib and thus having to provide a (at least protected) no-arg constructor Spring seems to choose the empty no-arg constructor when resolution fails for any other constructor. This raises the general question in what order constructors are considered if multiple are available. I've been searching the docs, logging output and the forums but couldn't find any real details.  Attached you'll find a sample project with:  * a class with a no-arg constructor and one to be wired to an interface * two implementations of that interface to simulate ambiguity * a test case that proofs the no-arg constructor to be used    ---  **Affects:** 3.0 GA  **Attachments:** - [constructor-res.zip](https://jira.spring.io/secure/attachment/16113/constructor-res.zip) (_18.67 kB_)","closed","status: declined,","spring-projects-issues","2010-01-24T18:19:44Z","2015-09-22T18:20:31Z"
"","11364","RedirectView should also allow to prepend servlet path [SPR-6698]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6698](https://jira.spring.io/browse/SPR-6698?redirect=false)** and commented  In case you declare a `DispatcherServlet` and bind it to e.g. ""/web/**"" all redirect view names have to either start with ""/web/"" or be relative to the current request. The latter is problematic as redirects might lead to false places depending on the incoming URL being trainling-slashed or not. The first one is problematic as the you spread web.xml configuration all around the controllers.  So I'd suggest to introduce a flag similar to `contextRelative`, e.g. `servletRelative` which would set `contextRelative` to true if it is set to true itself as prepending servlet path does not make sense without prepending context path.   ---  **Affects:** 3.0 GA","closed","status: bulk-closed,","spring-projects-issues","2010-01-14T17:39:39Z","2019-01-12T03:50:38Z"
"","11354","ResourceDatabasePopulator does not regard escaped ' charachters [SPR-6688]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6688](https://jira.spring.io/browse/SPR-6688?redirect=false)** and commented  `splitSqlScript` in `ResourceDatabasePopulator` traverses the SQL String and splits it up at `;` characters if they do not occur inside an `'..'`. As it does thecheck for `'` on a per-character basis it cannot distinguish between real `'` and SQL escaped ones (`\'`). So whenever the SQL file contains an escaped `'` the `inLiteral` flag is incorrectly flipped.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/645631ad2e454074eca1a35c677be7c4e5964dde  1 votes, 0 watchers","closed","type: bug,","spring-projects-issues","2010-01-13T21:08:04Z","2012-06-19T03:44:16Z"
"","11337","ClassCastException on EventListener invocation when proxies come into play [SPR-6671]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6671](https://jira.spring.io/browse/SPR-6671?redirect=false)** and commented  There is a subtle issue with `EventListener` handling. `EventListeners` are generic since Spring 3.0 and works perfectly fine in most cases. Suppose the folloeing case:  You have an interface as well as an implementation. The implementation is using `@Transactional` for transaction demarcation **and** implements `EventListener`. As there is a JDK dynamic proxy created by Spring, the reflective lookup of the event type fails, which causes Spring to assume the implementation actually declares a raw `EventListener` and thus also hands `ContextClosedEvent` e.g. which then in turn leads to a `ClassCastException` as the method only accepts `ContextRefreshedEvent` as parameter.  The major problem is that I see no correct way of solving this as Spring cannot simply reject the listener instead of blindly handing all events to it. As the main issue with the current situation is, that it is not really obvious **why** the `ClassCastException` occurs, a feasible solution might be to check the inspected listener instance for implementing `Adviced` and log a warning if also implements `EventListener` **and** does not return the event type.  Test case reproducing the issue attached.  ---  **Affects:** 3.0 GA  **Attachments:** - [event-listener-bug.zip](https://jira.spring.io/secure/attachment/16081/event-listener-bug.zip) (_10.71 kB_)  **Issue Links:** - #11262 Parameterized ApplicationListener does not work with AOP proxies (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-01-11T07:19:58Z","2019-01-11T16:17:09Z"
"","11260","HiddenHttpMethodFilter does not support multipart requests [SPR-6594]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6594](https://jira.spring.io/browse/SPR-6594?redirect=false)** and commented  `HiddenHttpMethodFilter` currently does not work when handling multipart request, as it relies on `request.getParameter(..)` which does not return the actual parameter's value in multipart requests.  As I can understand that one might want to keep the filter independent of Spring MVC, I'd suggest to introduce a subclass that might lookup a configured multipartResolver from the application context and use it to obtain the parameters. As we deal with a filter this would require the resolver being declared inside the `ApplicationContext` loaded by the `ContextLoaderListener`. This feels a little ugly as one probably should tend to avoid web things inside this `ApplicationContext`.  As the only existing implementation is `CommonsMultipartResolver` and this implementation uses a static method of `ServletFileUpload` a reasonable way might also be just to check the availablity of Commons Fileupload in the classpath and using this method to determine the multipart nature of the request then.  ---  **Affects:** 3.0 GA  **Issue Links:** - [ROO-442](https://jira.spring.io/browse/ROO-442) Provide multipart file upload support (_**""is depended on by""**_) - #12451 ServletRequestDataBinder does not bind MultipartFile with HiddenHttpMethodFilter and Multipart Request  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c9753ad253e2280ce846ff3155bbe6706883fcf, https://github.com/spring-projects/spring-framework/commit/0eabef072077bbd49dc5f757564266d1dea52255  4 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-21T02:58:57Z","2019-01-11T15:24:44Z"
"","11136","Make filterModel() in MappingJacksonJsonView more lenient [SPR-6470]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6470](https://jira.spring.io/browse/SPR-6470?redirect=false)** and commented  `MappingJacksonJsonView` has a filter callback used to respect `BindingResult` configuration applied to the model. It returns a `Map` and the result of the filtering is directly passed to the underlying `ObjectMapper`.  It would be cool if it was possible to reduce the return type to `Object` as it would allow more sophisticated model filtering. E.g. the current implementation **always** hands a map to the Jackson `ObjectMapper`, whereas it might be reasonable to just hand a single object to it. With the more lenient signature one could extract the single object from the model and only hand this to Jackson. In case you already return a container object from the list (e.g. to ensure correct list rendering in XML mapping) the JSON result is effectively wrapped twice (the actual container object + the map that results from Spring's model handling)   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc3239987853251f825054f5da97fd24630911a0","closed","type: enhancement,","spring-projects-issues","2009-11-29T01:10:09Z","2012-06-19T03:43:16Z"
"","11133","Allow ContentNegotiatingViewResolver to be strict ant return a 406 if no view found [SPR-6467]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6467](https://jira.spring.io/browse/SPR-6467?redirect=false)** and commented  Currently `ContentNegotiatingViewResolver` acts lenient as it returns `null` when it can not resolve any view to indicate that further `ViewResolvers` configured shall step in and try to resolve the view.  In cases when `ContentNegotiatingViewResolver` is the only resolver configured, not resolving the view should be answered with a `406 Not Acceptable` status code. A quick hack I did was to add a property `beStrict` to `CNVR` an implement an inner class to return the appropriate statuscode. See applied patch.  This solves the problem at a first glance but I think it would be more clean to prevent processing of the request entirely if no valid accept header was set by using the algorithm `getmediaTypes(..)` in `CNVR`. Currently this method is not public, but I could imagine a `HandlerInterceptor` implementation that gets a reference to the `CNVR` injected and call to `getMediaType(..)` to decide whether to process the request at all.  ---  **Affects:** 3.0 RC2  **Attachments:** - [bestrict.patch](https://jira.spring.io/secure/attachment/15972/bestrict.patch) (_2.43 kB_)  **Issue Links:** - #11559 exotic MIME-Type leads to 500 Internal Server Error (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1cd0a9750da46d35a6ff8eadccb4d3be22afeb9e","closed","type: enhancement,","spring-projects-issues","2009-11-28T02:09:22Z","2019-01-11T15:38:08Z"
"","11132","ContentNegotiatingViewResolver can not handle View implementations returning null as content type [SPR-6466]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6466](https://jira.spring.io/browse/SPR-6466?redirect=false)** and commented  The `View` interface allows `getContentType()` to return `null`. But `View`s returning `null` can not be handled by `ContentNegotiatingViewResolver` as it directly pipes the result of the call to `getContentType()` to `MediaType.parseMediaType(..)` which rejects `null` values passed.   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73b54f4efe43dbe674621ba81c7ab7e04e1157c8","closed","type: bug,","spring-projects-issues","2009-11-28T01:26:29Z","2012-06-19T03:43:52Z"
"","10889","Improve logging in MessageSourceSupport class hierarchy [SPR-6221]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6221](https://jira.spring.io/browse/SPR-6221?redirect=false)** and commented  `MessageSourceSupport` declares an instance variable for logging and uses `getClass()` to obtain the concrete logger. This causes ugly sideffects: First, log output will allways appear to come from the most concrete class in the hierarchy although the actual call was made from one of the supreclasses. Second, if you implement your own subclass inside a completely different package (`com.acme`) and have dbug logging activated for this scope, you now get a ton of logging information due to the problem (class hierarchy) described above.  I'd propose the usage of static final Log instances. See attached patch for details.   ---  **Affects:** 3.0 RC1  **Attachments:** - [improvedlogging.patch](https://jira.spring.io/secure/attachment/15798/improvedlogging.patch) (_3.53 kB_)","closed","type: enhancement,","spring-projects-issues","2009-10-11T02:08:31Z","2009-12-09T03:14:08Z"
"","11846","Accessing map values via a PropertyAccessor fails for missing keys [SPR-7187]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-7187](https://jira.spring.io/browse/SPR-7187?redirect=false)** and commented  Accessing a map via a PropertyAccessor as map.key (org.springframework.context.expression.MapAccessor) behaves differently from using the index based access as map['key'] (org.springframework.expression.spel.ast.Indexer) in case there is no value for the requested key. The first approach throws an exception, the second approach evaluates to null. This means one cannot safely use the property accessor.  The simple solution for this problem is apparently changing  public boolean canRead(EvaluationContext context, Object target, String name) throws AccessException { return (((Map) target).containsKey(name)); }  in MapAccessor to  public boolean canRead(EvaluationContext context, Object target, String name) throws AccessException { return true; }   ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-05-10T21:30:26Z","2015-09-22T18:20:32Z"
"","11681","Validation for nested properties is buggy [SPR-7019]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-7019](https://jira.spring.io/browse/SPR-7019?redirect=false)** and commented  When validating nested properties, Spring computes a wrong property path (a.k.a. fieldname).  See org.springframework.validation.AbstractBindingResult      public String[] resolveMessageCodes(String errorCode, String field) {     	String fixedField = fixedField(field);     	Class fieldType = getFieldType(fixedField);     	return getMessageCodesResolver().resolveMessageCodes(errorCode, getObjectName(), fixedField, fieldType);     }  The problem is that getFieldType will be called already with a fixedField parameter. However, getFieldType again invokes fixedField(String) with the passed string. So in the end the fixedField method will be called twice, which in turn prepends a nestedPath twice.  The quickfix is most probably to change the second line of resolveMessageCodes into Class fieldType = getFieldType(field);   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2c3274b8e798c3641486530f998ba62f47c3269","closed","in: core,","spring-projects-issues","2010-03-21T23:37:21Z","2012-06-19T03:43:52Z"
"","11415","Optimize GenericConversionService.findConverterForClassPair [SPR-6749]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6749](https://jira.spring.io/browse/SPR-6749?redirect=false)** and commented  The method findConverterForClassPair in GenericConversionService checks interfaces unnecessarily multiple times. This will lead to a performance penalty if no converter can be found.  The point is that addInterfaceHierarchy() adds the entire interface hierarchy to the classQueue (which was done for fixing #10963). However for every processed interface in the queue its entire hierarchy is appended to queue again. In the end a base interface of a multi-level interface hierarchy will be processed multiple times.  ---  **Affects:** 3.0 GA  This issue is a sub-task of #10963  **Issue Links:** - #10980 Review Converter resolution algorithm - #11770 Cache results of Converter lookup in GenericConversionService to improve performance  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad93d20a6c6987ec15dca9a43eb1e3a02ff2183d  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2010-01-21T22:29:52Z","2019-01-11T15:44:18Z"
"","10963","Inadequate implementation of GenericConversionService.findConverterByClassPair(Class, Class) [SPR-6297]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6297](https://jira.spring.io/browse/SPR-6297?redirect=false)** and commented  The algorithm implemented in GenericFormatterRegistry.findConverterByClassPair(Class, Class) apparently goes up the superinterface and superclass hierarchy to find a proper converter for a given source type. However, since the DefaultConversionService registers an ObjectToStringConverter, this converter will be preferred over specialized converters for interfaces.  Consider the following situation: class X implements the interface I which in turn is a subinterface of J. There is a special converter for J-to-String. The classQueue will be filled in this case with - X - I (from X.getInterfaces()) - Object (from X.getSuperclass()) - J (from I.getInterfaces())  Since Object appears before J the generic ObjectToStringConverter will be used here instead of the more specific converter for J.  A more appropriate algorithm should probably consider first **all** interfaces before using the superclasses. In any case the ObjectToStringConverter should always be the last converter to be used.  ---  **Affects:** 3.0 RC1  **Sub-tasks:** - #11415 Optimize GenericConversionService.findConverterForClassPair  **Issue Links:** - #10980 Review Converter resolution algorithm  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/010e72c35a65ce5ff77cdee3e4dcfbe6ef0e3498","closed","in: core,","spring-projects-issues","2009-11-03T07:06:18Z","2019-01-11T14:25:19Z"
"","10945","CompositeStringExpression doesn't use the ConversionService [SPR-6278]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6278](https://jira.spring.io/browse/SPR-6278?redirect=false)** and commented  Method org.springframework.expression.common.CompositeStringExpression.getValue(...) simply calls ObjectUtils.getDisplayString for creating the resulting string. Since Spring provides a ConversionService, a proper toString TypeConverter should be used instead. (if canConvert returns true, otherwise use getDisplayString)   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3361de38755e3eec3c1e2868fd23dda55145c739","closed","type: enhancement,","spring-projects-issues","2009-10-27T01:32:07Z","2012-06-19T03:43:02Z"
"","10913","ConversionService is not set for nested BeanWrappers [SPR-6245]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6245](https://jira.spring.io/browse/SPR-6245?redirect=false)** and commented  When using nested properties (e.g. ""foo.bar"") the ConversionService is not set for the nested BeanWrapperImpl that is constructed in BeanWrapperImpl.getNestedBeanWrapper(String). Additionally to copying the default editors and custom editors (lines 498 + 499), nestedBw.setConversionService(getConversionService()) should be called.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4f50f5b7396a88471869c387f2a7fbf2c424a65","closed","","spring-projects-issues","2009-10-16T03:28:02Z","2019-01-11T15:05:15Z"
"","11286","Converters that call back into the conversion system are dependent on GenericConversionService instead of the core strategy such as ConversionService interface [SPR-6620]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=oleg.zhurakousky@springsource.com)** opened **[SPR-6620](https://jira.spring.io/browse/SPR-6620?redirect=false)** and commented  When implementing custom ConversionService existing converters are no longer re-usable. Substituting GenericConversionService with ConversionService interface inside of individual converters reveals that there are several method calls to the methods only available on GenericConversionService. Of course custom ConversionService could subclass GenericConversionService, but then what is the value of the core strategy (ConversionService) if nothing depends on it?   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2009-12-28T00:43:40Z","2012-06-19T03:43:16Z"
"","11047","Need more flexibility around conversion strategies and how to bootstrap different conversion strategies.  [SPR-6381]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=oleg.zhurakousky@springsource.com)** opened **[SPR-6381](https://jira.spring.io/browse/SPR-6381?redirect=false)** and commented  Related to #10464  As a developer I need: - Ability to create ConversionService instance with no default converters pre-registered or only have NumberToString and vice versa type converters:   For example:   Object.toString() is not always the right default strategy since implementation of the toString() method often tailored more toward displaying an object in the logs, rather then creating a true String representation of it   Object to Map and vice versa, also is not always a good default strategy since Object might represent some type of a structure that could be represented as more then a single entry Map   The bottom line is as a developer I want to have a choice and control as to how canConvert() method behaves. In other words if I want to convert Foo to String and there is no FooToString cnverter I want to see can't convert exception and not rely on the default generic strategy.  Currently in SI we have to remove bunch of converters in order to use the ConversionService  I also need ability to chain/synthesize converters. However, this strategy will not work if we have ObjectTo* and *ToObject converters since everything is an object, which means the default state of such converter must only have strongly typed converters pre-registered or empty.  Overall I think we need flexibility and therefore several strategies needed. So I think what would be appropriate is to have a Factory class with Factory methods fronting the ConversionService creation, this allowing to bootstrap several implementations.  For example  - public static ConversionService createGenericConverter(List additionalConverters) - will retur the instance of GenericConversionService - public static ConversionService createDefaultConverter(List. additionalConverters) - will retur the instance of DefaultConversionService - public static ConversionService createSyntheticConverter(List additionalConverters) - will retur the instance of SyntheticConversionService - public static ConversionService createEmptySyntheticConverter()   etc. . .  Obviously not passing any additional converters will result in the initial state of the ConversionService to correspond to the implementation of the factory method. Configuration would also be simple: {CODE} \ \ \ . . .      	       \ {CODE}  ---  **Affects:** 3.0 RC2  **Issue Links:** - #10464 Composing synthetic converters from concrete converters (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2009-11-17T21:58:17Z","2019-01-11T14:39:18Z"
"","11630","Sybase isn't detected by metadata when using WebLogic JDBC Driver [SPR-6965]","**[Oleg Efimov](https://jira.spring.io/secure/ViewProfile.jspa?name=oefimov)** opened **[SPR-6965](https://jira.spring.io/browse/SPR-6965?redirect=false)** and commented  When trying to use Spring JDBC classes with Sybase through WebLogic JDBC driver, you get exception like ""SQL Server is not one of the databases fully supported for procedure calls..."".  Research shows that WebLogic driver returns ""SQL Server"" to ""getDatabaseProductName"" metadata call, unlike JConnect driver which returns ""Sybase SQL Server"". I also found corresponding issue CR120330 in [documentation](http://download.oracle.com/docs/cd/E13222_01/wls/docs81/notes/issues.html).  ---  **Affects:** 2.5.6  **Issue Links:** - #10722 Cannot retrieve database metadata for Sybase (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2010-03-09T23:51:24Z","2019-01-12T16:49:42Z"
"","11743","Unable to inject a URI with a fragment as a bean property value [SPR-7083]","**[Olav Reinert](https://jira.spring.io/secure/ViewProfile.jspa?name=oreinert)** opened **[SPR-7083](https://jira.spring.io/browse/SPR-7083?redirect=false)** and commented  If I create a bean with a property of type `java.net.URI`, and try to initialize it in an XML bean definition file, I'm unable to define a URI instance with a fragment in it.  For example, consider the following bean definition  ```xml    	 		 		 	  ```  I apply this bean definition using the following test program:  ``` import java.net.URI;  import org.springframework.beans.factory.BeanFactory; import org.springframework.beans.factory.xml.XmlBeanFactory; import org.springframework.core.io.ClassPathResource;  public class TestInitURI {      private String uriSpec;     private URI uri;      public void setUri(URI uri) { this.uri = uri; }     public void setUriSpec(String uriSpec) { this.uriSpec = uriSpec; }      public static void main(String[] args) {         BeanFactory beanFactory = new XmlBeanFactory(new ClassPathResource(""beans.xml""));         TestInitURI bean = beanFactory.getBean(TestInitURI.class);         show(""Bean property"", bean.uri);         show(""Expected "", URI.create(bean.uriSpec));     }      private static void show(String prefix, URI uri) {         System.out.println(prefix + "" URI "" + uri + "" (host="" + uri.getHost() + "", authority="" + uri.getAuthority() + "", path=""                 + uri.getPath() + "", fragment="" + uri.getFragment() + "")"");     } } ```  The output is the following:  ``` Bean property URI env://server%233 (host=null, authority=server#3, path=, fragment=null) Expected  URI env://server#3 (host=server, authority=server, path=, fragment=3) ```  In other words, I would expect that defining a URI property in an XML bean definition file with a string constant is equivalent to initializing that property with a URI created by invoking `URI.create(String)` with the same string constant.  ---  **Affects:** 3.0.2  **Issue Links:** - #21123 URIEditor should not double escape classpath: URIs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03120b70d0c2f953e21fa3ae1b208a9b0f32f646","closed","in: core,","spring-projects-issues","2010-04-08T23:30:37Z","2019-01-11T13:25:10Z"
"","11002","Setting validationMode to NONE in org.springframework.beans.factory.xml.XmlBeanDefinitionReader disables namespace support [SPR-6336]","**[Olaf Otto](https://jira.spring.io/secure/ViewProfile.jspa?name=olaf)** opened **[SPR-6336](https://jira.spring.io/browse/SPR-6336?redirect=false)** and commented  When changing the validationMode to XmlBeanDefinitionReader.VALIDATION_NONE, the context will silently ignore schema-based configuration such as:  whereas this setting should only affect the validation phase and not the semantics of the context IMHO. This is very likely due to the XmlBeanDefinitionReader.namespaceAware property being set to true for validation modes other than NONE.    ---  **Affects:** 2.5.6  **Attachments:** - [validationmode-test.zip](https://jira.spring.io/secure/attachment/15912/validationmode-test.zip) (_3.13 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a6bba67bcadcd11b27692637bc70556321544fa0","closed","type: enhancement,","spring-projects-issues","2009-11-12T00:09:53Z","2012-06-19T03:43:47Z"
"","11205","Support for DataNucleus (JPA) [SPR-6539]","**[Nobody](https://jira.spring.io/secure/ViewProfile.jspa?name=datanucleus)** opened **[SPR-6539](https://jira.spring.io/browse/SPR-6539?redirect=false)** and commented  Spring has explicit support for various other JPA implementations and Spring people on the forum claim that DataNucleus is supported, yet there is no explicit support. Perhaps you'd like to add some ... ;-)   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=75172  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-09T21:21:51Z","2015-09-22T17:34:32Z"
"","10950","Add transactionManager property to @Transactional configuration [SPR-6283]","**[Niklas Saers](https://jira.spring.io/secure/ViewProfile.jspa?name=niklassaers)** opened **[SPR-6283](https://jira.spring.io/browse/SPR-6283?redirect=false)** and commented  Hi guys, When I write my tests I can say ""`@TransactionConfiguration`(transactionManager=""transactionManager"", defaultRollback=true)"". It would be great to have the transactionManager part available, either as a similar `@TransactionConfiguration` annotation, or as a property on `@Transactional`. Right now it's non-trivial to use multiple transaction managers like I have when dealing with multiple legacy databases from within the same Spring application  Cheers      Nik    ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-10-29T19:36:38Z","2012-06-19T03:43:32Z"
"","11518","Latest snapshot does not work with Tiles2 due to EL error [SPR-6852]","**[Nigel Sim](https://jira.spring.io/secure/ViewProfile.jspa?name=nigelsim)** opened **[SPR-6852](https://jira.spring.io/browse/SPR-6852?redirect=false)** and commented  The following regression has occurred. spring-webmvc-3.0.1.BUILD-20100202.212524-12.jar worked with Tiles2 (although there was a bug with the name of the config file being locked to tiles.xml). The following snapshots fail: spring-webmvc-3.0.1.BUILD-20100215.200456-25.jar spring-webmvc-3.0.1.BUILD-20100216.213016-27.jar  3567 [main] ERROR org.springframework.web.servlet.DispatcherServlet initServletBean - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tilesConfigurer' defined in ServletContext resource [/WEB-INF/portal-servlet.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1400) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:562) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:871) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:423) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:443) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:459) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:340) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:307) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) at javax.servlet.GenericServlet.init(GenericServlet.java:212) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1161) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:981) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4058) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4364) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardHost.start(StandardHost.java:719) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.startup.Embedded.start(Embedded.java:825) at org.codehaus.mojo.tomcat.AbstractRunMojo.startContainer(AbstractRunMojo.java:385) at org.codehaus.mojo.tomcat.AbstractRunMojo.execute(AbstractRunMojo.java:144) at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:483) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:678) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:553) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:523) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:371) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:332) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:181) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:356) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:137) at org.apache.maven.cli.MavenCli.main(MavenCli.java:362) at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:41) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315) at org.codehaus.classworlds.Launcher.launch(Launcher.java:255) at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430) at org.codehaus.classworlds.Launcher.main(Launcher.java:375) Caused by: java.lang.NullPointerException at org.apache.tiles.jsp.evaluator.el.JspExpressionFactoryFactory.getExpressionFactory(JspExpressionFactoryFactory.java:62) at org.apache.tiles.evaluator.el.ELAttributeEvaluator.init(ELAttributeEvaluator.java:111) at org.apache.tiles.factory.TilesContainerFactory.storeContainerDependencies(TilesContainerFactory.java:447) at org.apache.tiles.factory.TilesContainerFactory.initializeContainer(TilesContainerFactory.java:368) at org.apache.tiles.factory.TilesContainerFactory.createTilesContainer(TilesContainerFactory.java:287) at org.apache.tiles.factory.TilesContainerFactory.createContainer(TilesContainerFactory.java:231) at org.apache.tiles.startup.BasicTilesInitializer.createContainer(BasicTilesInitializer.java:117) at org.apache.tiles.startup.BasicTilesInitializer.initialize(BasicTilesInitializer.java:53) at org.springframework.web.servlet.view.tiles2.TilesConfigurer.afterPropertiesSet(TilesConfigurer.java:297) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1457) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1397) ... 45 more   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/36940c5fc8ec34e56775d17152b34b136c80d9b8","closed","type: bug,","spring-projects-issues","2010-02-16T09:16:10Z","2012-06-19T03:42:51Z"
"","11000","JdbcTemplate batch update - Managing batchSize inferior to the number of rows to be updated [SPR-6334]","**[Nicolas FABRE](https://jira.spring.io/secure/ViewProfile.jspa?name=nico.fabre)** opened **[SPR-6334](https://jira.spring.io/browse/SPR-6334?redirect=false)** and commented  Using org.springframework.jdbc.core.JdbcTemplate.batchUpdate(String sql, BatchPreparedStatementSetter pss), if the number of rows I want to insert (update or delete) is greater than the batch size I define in the BatchPreparedStatementSetter, the rows after the batch size limit are not inserted. However if I have a huge amount of rows to insert (for example 100000), I think it is not good to set the batch size to 100000. The database could be oppressed if it receives 100000 rows to process on a single call. Am I wrong ?  So would it be possible to use batchUpdate with a number of updates to be performed not equals to the batch size ? May I request the creation of the following method to manage this problem ?  ```         // the batch size is set in the BatchPreparedStatementSetter, the number of rows we want to process is equal to the nbUpdates parameter 	public int[] batchUpdate(String sql, final long nbUpdates, final BatchPreparedStatementSetter pss) throws DataAccessException { 		if (logger.isDebugEnabled()) { 			logger.debug(""Executing SQL batch update ["" + sql + ""]""); 		}  		return (int[]) execute(sql, new PreparedStatementCallback() { 			public Object doInPreparedStatement(PreparedStatement ps) throws SQLException { 				try { 					int batchSize = pss.getBatchSize(); 					InterruptibleBatchPreparedStatementSetter ipss = (pss instanceof InterruptibleBatchPreparedStatementSetter ? (InterruptibleBatchPreparedStatementSetter) pss 							: null); 					if (JdbcUtils.supportsBatchUpdates(ps.getConnection())) { 						List rowsAffected = new ArrayList(); 						for (int i = 1; i","closed","type: enhancement,","spring-projects-issues","2009-11-11T23:13:33Z","2019-01-11T14:37:10Z"
"","11509","Map logical view names to physical view names [SPR-6843]","**[Nicolas Di Benedetto](https://jira.spring.io/secure/ViewProfile.jspa?name=nicodb)** opened **[SPR-6843](https://jira.spring.io/browse/SPR-6843?redirect=false)** and commented  I would like to have the ability to use constants to define ""logical"" view names and have them mapped to physical ones. Use case example: `return ModelAndView(""successView"");` Beeing ""`successView`"" translated into ""`/WEB-INF/someDir/someView.jsp`"".  This is really trivial and can be solved with the following code:  ```  /**  * MappingViewResolver  * Implementation of the ViewResolver (Spring-specific) interface.  * This implementations utilizes a mapping between logical names and view names.  * The idea is to decouple controllers and views using logical names in controllers  *  and the views in a separate place (this resolver!).   * @author Nicolás L. Di Benedetto  * @version ($Revision$)  * @date Feb 4, 2010  */  public class MappingViewResolver extends UrlBasedViewResolver implements ViewResolver { 	 	/** 	 * The mapping between logical name and real views' name. 	 */ 	private Map viewsMap = null; 	 	/** 	 * Default constructor. 	 */ 	public MappingViewResolver() {}  	/** 	 * @see org.springframework.web.servlet.ViewResolver#resolveViewName(java.lang.String, java.util.Locale) 	 */ 	@Override 	public View resolveViewName(String viewName, Locale locale) throws Exception { 		return new InternalResourceView(getViewsMap().get(viewName)); 	}  	/** 	 * Getter method for the viewsMap attribute. 	 * @return the viewsMap attribute. 	 */ 	public Map getViewsMap() { 		return (null == this.viewsMap) ? this.viewsMap = new HashMap() : this.viewsMap; 	}  	/** 	 * Setter method for the viewsMap attribute. 	 * @param viewsMap the viewsMap attribute to set. 	 */ 	public void setViewsMap(Map viewsMap) { 		this.viewsMap = viewsMap; 	}  } ```  ```xml                                                                                                        ```    --- No further details from [SPR-6843](https://jira.spring.io/browse/SPR-6843?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-02-15T03:20:58Z","2018-12-12T16:37:28Z"
"","11647","Deprecate SqlXmlObjectMappingHandler [SPR-6982]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-6982](https://jira.spring.io/browse/SPR-6982?redirect=false)** and commented  SqlXmlObjectMappingHandler uses and returns Object, it should use generics to avoid casts   ---  **Affects:** 3.0.1","closed","type: task,","spring-projects-issues","2010-03-14T23:00:53Z","2019-02-11T13:36:37Z"
"","11403","(maven) dependency on spring-tx is declared optional, but JmsTempate does import some org.springframework.transaction. [SPR-6737]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-6737](https://jira.spring.io/browse/SPR-6737?redirect=false)** and commented  JmsTemplate is a major class in spring-jms (isn't it ?) As it declare some import on org.springframework.transaction.support.TransactionSynchronizationManager I don't thing the \ element in maven pom should be set to ""true""   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b54a099f4968e269f6b8ae9ba4bfc5fbfdac39ab","closed","type: bug,","spring-projects-issues","2010-01-20T23:19:19Z","2012-06-19T03:44:19Z"
"","11341","cannot be injected using @Inject but can using @Resource [SPR-6675]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-6675](https://jira.spring.io/browse/SPR-6675?redirect=false)** and commented  I'm using Apache CXF 2.2.5 to build JaxWS client proxies :  ```xml   ```  From my business service, I want it to get injected :  ```java   @Inject @Named( ""myServicePortType"" ) private MyServicePortType portType; ```  ApplicationContext startup fails with a NoSuchBean exception.  Switching the field injected attribute to ""Object"" solve the issue, and I can check that the injected Proxy implements the PortType interface.  ```java   @Inject @Named( ""myServicePortType"" ) private Object portType;  ... Assert.isTrue( portType instanceof MyServicePortType ); ```  Replacing the `@Inject` field injection with `@Resource` one fix the issue  ```java   @Resource( ""myServicePortType"" ) private MyServicePortType portType; ```  Cannot say if this is a CXF or Spring-`@Inject-support` issue   ---  **Affects:** 3.0 GA","closed","in: core,","spring-projects-issues","2010-01-11T23:58:04Z","2019-01-12T16:38:27Z"
"","11001","Assert should use MessageFormat to avoid building unecessary Strings as error message [SPR-6335]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-6335](https://jira.spring.io/browse/SPR-6335?redirect=false)** and commented  log4j users used to wrapp debug code with isDebugEnabled to avoid building logging Strings and calling toString() when not necessary. slf4j Uses MessageFormat as a workaround :  logger.debug( ""some log about {}"", object );  Spring Assert also is supposed to only fire an exception when some unexpected error occurs. Using same strategy it could avoid building the error message anytime an assertion is checked :  // Many String concatenation + implicit toString() calls Assert.notNull( ""the entity "" + entity + "" with ID "" + id + "" is not of type "" + type );  // Less useless CPU consumed in happy path Assert.notNull( ""the entity {} with ID {} is not of type {}"", entity, id, type );  using varags can also make the parameter list as long as necessary for assertion message to contain all contextual elements the developper may provide.  ---  **Issue Links:** - #9822 Use MessageFormat to pass messages to spring Assert (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-11-12T00:06:44Z","2019-01-11T14:37:21Z"
"","11309","Http invoker streaming the request [SPR-6643]","**[Nicolas CAZOTTES](https://jira.spring.io/secure/ViewProfile.jspa?name=ncazottes)** opened **[SPR-6643](https://jira.spring.io/browse/SPR-6643?redirect=false)** and commented  Using HTTPInvoker, I encountered OutOfMemory errors when creating HTTP request containing Objects whose in memory serialized form is large. My objects are typically files that are big (> 100Mb) that are not in memory but that can be serialized using the Externalizable interface.  The problem is that in current Spring implementation, the request object is serialized in memory and then send to the wire.  The request here is to do it by streaming the object as the RMI protocol does. A solution exists, it is to use the chunked HTTP request.  Note : there is no problem for HTTP response as it is not buffered in memory and is transmitted in streamed way.   ---  **Affects:** 2.5.6  **Attachments:** - [Spring-httpInvoker.zip](https://jira.spring.io/secure/attachment/16067/Spring-httpInvoker.zip) (_6.36 kB_)","closed","type: enhancement,","spring-projects-issues","2010-01-05T03:38:04Z","2015-09-22T17:34:33Z"
"","11065","GenericTypeAwarePropertyDescriptor warns when creating java.security.SecureRandom bean [SPR-6399]","**[Nickolay Mazurkin](https://jira.spring.io/secure/ViewProfile.jspa?name=nickmz)** opened **[SPR-6399](https://jira.spring.io/browse/SPR-6399?redirect=false)** and commented  I create a bean with java.security.SecureRandom type property which is injected.  GenericTypeAwarePropertyDescriptor warns me that SecureRandom has ambiguous write methods with the following message.  Invalid JavaBean property 'seed' being accessed! Ambiguous write methods found next to actually used [public void java.security.SecureRandom.setSeed(long)]: [public synchronized void java.security.SecureRandom.setSeed(byte[])]  I fully understand that it does mean. But java.security.SecureRandom is a JDK's class and I can do nothing to make this bean properly formed. And I don't want to see this warn message in my log too.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #9606 Spring inconsistently resolves an overloaded setter method  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/61f23710ebed6d7feb1e7b477d301d952d3cde5f","closed","in: core,","spring-projects-issues","2009-11-20T00:25:35Z","2019-01-11T14:38:31Z"
"","11048","Quartz SchedulerFactoryBean delayed start [SPR-6382]","**[Nickolay Mazurkin](https://jira.spring.io/secure/ViewProfile.jspa?name=nickmz)** opened **[SPR-6382](https://jira.spring.io/browse/SPR-6382?redirect=false)** and commented  I've created Quartz scheduler with SchedulerFactoryBean factory. To start scheduler automatically I've set ""autoStartup"" property to ""true"" and ""startupDelay"" property to ""120"" seconds (exact duration has no sense here). Application starts properly and then scheduler starts in 120 seconds after factory has been created in context.  So, everything works fine. But now imagine the following situation.  Right after the application successfully start I decide to shutdown it. This could be required for some reasons. This situation is typical when developing.  So Tomcat has been shutdowned. Context has been destroyed. But SchedulerFactoryBean's thread is still sleeping and waiting while specified timeout ends. The JVM is waiting for this thread and can not be closed. And after timeout ends the Quartz scheduler starts in destroyed context.  My idea is to set ""daemon flag"" in SchedulerFactoryBean's waiting thread - this will prevent JVM from waiting this useless thread.    ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/08f9f8b8fb4d2fd09669cd61321468b9c5bbd4e4","closed","type: enhancement,","spring-projects-issues","2009-11-18T00:09:05Z","2012-06-19T03:43:44Z"
"","11050","SimpleJdbcInsert Attempts to Insert Computed Columns [SPR-6384]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-6384](https://jira.spring.io/browse/SPR-6384?redirect=false)** and commented  I have a table in SQL Server 2008 specified as follows:  ```SQL CREATE TABLE lookup_codes ( 	tableId BIGINT NOT NULL, 	code VARCHAR(40) DEFAULT '' NOT NULL, 	code_binary AS (CONVERT(varbinary(40), code, 0)) PERSISTED, 	description VARCHAR(60) DEFAULT '' NOT NULL, 	description_binary AS (CONVERT(varbinary(60), description, 0)) PERSISTED, 	CONSTRAINT lookup_codes_fkTable FOREIGN KEY (tableId) REFERENCES tables (tableId) ON DELETE CASCADE, 	CONSTRAINT lookup_codes_tableCode UNIQUE (tableId, code) ); CREATE INDEX lookup_codes_conflictCode ON lookup_codes (tableId, code, description_binary); CREATE INDEX lookup_codes_conflictDescription ON lookup_codes (tableId, description, code_binary, code); ```  Notice that code_binary and description_binary are computed columns. That is, they don't actually exist; instead, SQL Server computes their values based on other columns' values whenever a record is inserted or updated. (This is necessary for me because there are times I need to do case-insensitive comparisons on these columns and times I need to do case-sensitive comparisons, and SQL Server is case-insensitive on varchar columns and case-sensitive on varbinary columns.)  I then perform an insert on this table as follows:  ``` int count = (new SimpleJdbcInsert(this.getDataSource())).withTableName(""lookup_codes"").execute( 		(new MapSqlParameterSource()).addValue(""tableId"", code.getTableId()). 				addValue(""code"", code.getCode()). 				addValue(""description"", code.getDescription()) ); ```  Spring JDBC them attempts to insert unspecified (unknown-to-me) values into code_binary and description_binary and the following error occurs:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is  	org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar  	[INSERT INTO lookup_codes (tableId, code, description, code_binary, description_binary)  		VALUES(?, ?, ?, ?, ?)]; nested exception is  		com.microsoft.sqlserver.jdbc.SQLServerException: The column ""code_binary"" cannot be modified  			because it is either a computed column or is the result of a UNION operator. ```  If I add .usingColumns(""tableId"", ""code"", ""description"") to the Java statement, it works, so this isn't a blocker, but SimpleJdbcInsert should not attempt to insert values into computed columns, even if usingColumns is not called.   ---  **Affects:** 3.0 RC2","closed","status: bulk-closed,","spring-projects-issues","2009-11-18T02:10:14Z","2019-01-12T03:50:44Z"
"","11029","Add (and throw) ForeignKeyException (extends DataIntegrityViolationException) [SPR-6363]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-6363](https://jira.spring.io/browse/SPR-6363?redirect=false)** and commented  Currently, Spring DAO has an org.springframework.dao.DuplicateKeyException that extends org.springframework.dao.DataIntegrityViolationException. This exception indicates that the specific data integrity violation was due to a unique key violation. It is very helpful in determining specific errors that occurred in an application.  However, if I want to determine if a data integrity violation was due to a foreign key violation, I have to test e.getMessage().toLowerCase().contains(""foreign key"").  I think Spring would be greatly improved if there were a ForeignKeyException that, by whatever way duplicate key violations are detected and thrown as a DuplicateKeyException, would be thrown if foreign key violations are detected.  Let me know if you have any questions.   ---  **Affects:** 3.0 RC2","closed","type: enhancement,","spring-projects-issues","2009-11-16T05:42:47Z","2012-06-19T02:28:17Z"
"","10934","SimpleJdbcInsert.executeAndReturnKey Fails for HSQLDB version 1.9.0 [SPR-6266]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-6266](https://jira.spring.io/browse/SPR-6266?redirect=false)** and commented  In previous versions of HSQL DB, generated identity primary key values could not be returned via JDBC. They can be returned in HSQL DB 1.9.0 (and possibly 1.8, but I haven't tested that).  In IntelliJ I am running a unit test with which I am testing a data access object. I am using the EmbeddedDatabaseBuilder to create, populate, and discard a database for each test executed and pass the data source it generates to my DAO. Everything works well until the DAO I am testing calls executeAndReturnKey() on a SimpleJdbcInsert object. This method throws a DataIntegrityViolationException with message ""Unable to retreive[sic] the generated key for the insert"".  I debugged a single insert for over an hour, going nearly 100 levels deep into the stacktrace, and determined that the HSQL DB 1.9.0 JDBC driver is, for sure, returning the generated key. For some reason, Spring isn't picking it up and thinks it failed, thus throwing the exception.  Needless to say, this makes testing inserts using HSQL DB rather difficult. I currently have an ugly workaround to make sure the insert at least succeeded. It does. I just can't get the generated key. My target database will actually be SQL Server, so I'm not concerned about this affecting my production application. It just affects testing.  OT Note: Notice that there is also a misspelling (""retreive"") in the message for the exception thrown.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2cd9093069c4f18fb1f5d99e5043fef4e6e3d61, https://github.com/spring-projects/spring-framework/commit/4a315ba6d1a9066db6cecb625a9d9e0449160082","closed","type: bug,","spring-projects-issues","2009-10-22T10:31:24Z","2012-06-19T03:42:49Z"
"","11786","Allow the Status Code to be Determined Based on the Existence of a Request Parameter [SPR-7126]","**[Nick Padgett](https://jira.spring.io/secure/ViewProfile.jspa?name=npadgett)** opened **[SPR-7126](https://jira.spring.io/browse/SPR-7126?redirect=false)** and commented  Allow SimpleMappingExceptionResolver to resolve a status code based on the existence of a request parameter.  When using jsonp all response codes should be 200 event in error conditions.  I determine whether I am using jsonp based off the existence of a request parameter.   --- No further details from [SPR-7126](https://jira.spring.io/browse/SPR-7126?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-04-23T02:37:07Z","2014-05-19T13:14:30Z"
"","11775","Resolve MediaType in ContentNegotiatingViewResolver Based on Request Parameter Existence [SPR-7115]","**[Nick Padgett](https://jira.spring.io/secure/ViewProfile.jspa?name=npadgett)** opened **[SPR-7115](https://jira.spring.io/browse/SPR-7115?redirect=false)** and commented  There are scenarios where the content type for a request should be determined based off of the existence of a request parameter.  For example, when a user requests http://some.tld/events they might get an ""application/json"" response, but when they request http://some.tld/events?callback=random_method they might get an ""text/javascript"" response.  This is the expected behavior when working with JsonP.  Here's a sample URL from Amazon.  Ignore the http response code and look at the http response content types: http://query.yahooapis.com/v1/public/yql?q=select * from social.connections where owner_guid=me&format=json http://query.yahooapis.com/v1/public/yql?q=select * from social.connections where owner_guid=me&format=json&callback=cbfunc  More documentation: http://developer.yahoo.com/yql/guide/response.html  ---  **Affects:** 3.0.2  **Issue Links:** - #13068 Update the MVC Java config and the MVC namespace to support content negotiation options (_**""is superseded by""**_)  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-21T01:58:46Z","2019-01-11T13:36:39Z"
"","11774","Allow Errors/BindingResult after @RequestBody [SPR-7114]","**[Nick Padgett](https://jira.spring.io/secure/ViewProfile.jspa?name=npadgett)** opened **[SPR-7114](https://jira.spring.io/browse/SPR-7114?redirect=false)** and commented  Instead of using a command/form object, I bind much of my data to the request body.  I expected that I could specify an Errors/BindingResult object after a `@RequestBody` method parameter.  Currently, I do the following:  ``` @RequestMapping(value = ""/events"", method = RequestMethod.POST) public String create(@RequestBody final Event event,         final HttpServletResponse response, final Model model)         throws BindException {     final BindingResult result = new BeanPropertyBindingResult(event, """");     ValidationUtils.invokeValidator(this.eventValidator, event, result);     if (result.hasErrors()) {         throw new BindException(result);     }     ... } ```  I would like to do the following:  ``` @RequestMapping(value = ""/events"", method = RequestMethod.POST) public String create(@RequestBody final Event event,         final BindingResult result, final HttpServletResponse response,         final Model model) throws BindException {     ValidationUtils.invokeValidator(this.eventValidator, event, result);     if (result.hasErrors()) {         throw new BindException(result);     }     ... } ```  However, when I do, I receive the following exception:  ``` 2010-04-21 09:48:09,014 [http-8080-2] WARN org.springframework.web.servlet.handler.SimpleMappingExceptionResolver  - Handler execution resulted in exception org.springframework.web.bind.annotation.support.HandlerMethodInvocationException: Failed to invoke handler method [public java.lang.String com.playonsports.event.controller.EventController.create(com.playonsports.event.bean.Event,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model) throws org.springframework.validation.BindException]; nested exception is java.lang.IllegalStateException: Errors/BindingResult argument declared without preceding model attribute. Check your handler method signature!         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:171)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:414)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:402)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716)         ... Caused by: java.lang.IllegalStateException: Errors/BindingResult argument declared without preceding model attribute. Check your handler method signature!         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:264)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:163)         ... 54 more ```    ---  **Affects:** 3.0.2  **Attachments:** - [HandlerMethodInvoker.java](https://jira.spring.io/secure/attachment/16783/HandlerMethodInvoker.java) (_35.20 kB_)  11 votes, 13 watchers","closed","has: votes-jira,","spring-projects-issues","2010-04-21T01:17:34Z","2012-08-21T18:53:44Z"
"","10909","java.lang.NoClassDefFoundError: org/hibernate/event/EventListeners$2 Thrown on Shutdown [SPR-6241]","**[Nick Padgett](https://jira.spring.io/secure/ViewProfile.jspa?name=npadgett)** opened **[SPR-6241](https://jira.spring.io/browse/SPR-6241?redirect=false)** and commented  Every time I shutdown my web server, I receive the following warning message in my log files: 2009-10-14 17:15:25,695 [main] WARN org.springframework.beans.factory.support.DisposableBeanAdapter  - Invocation of destroy method failed on bean with name 'sessionFactory': java.lang.NoClassDefFoundError: org/hibernate/event/EventListeners$2  I verified that the class exists in my hibernate dependency: \ \org.hibernate\ \hibernate-core\ \3.3.2.GA\ \  Here's my bean definition for sessionFactory: \ \  \ \   ---  **Affects:** 3.0 RC1","closed","status: declined,","spring-projects-issues","2009-10-15T02:32:30Z","2019-01-12T16:38:56Z"
"","11877","Spring XML bean definition parser interprets  tags that are not in the beans namespace  [SPR-7218]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-7218](https://jira.spring.io/browse/SPR-7218?redirect=false)** and commented  I've got a namespace which defines a `slices:constructor-arg` element (to be used in place of the `beans:constructor-arg` element).  When running up an ApplicationContext I get the following error:  ``` Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem:  element must specify a ref or value Offending resource: '/Users/benhale/dev/workspaces/slices/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/slice-app/WEB-INF/lib/slice-2.jar': 'META-INF/slices/slice-context.xml' Bean '' 	-> Constructor-arg 	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68) 	at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85) 	at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:80) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.error(BeanDefinitionParserDelegate.java:284) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parsePropertyValue(BeanDefinitionParserDelegate.java:938) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseConstructorArgElement(BeanDefinitionParserDelegate.java:800) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseConstructorArgElements(BeanDefinitionParserDelegate.java:684) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(BeanDefinitionParserDelegate.java:481) ```  Simply changing the name of my tag to something other than `constructor-arg` resolves the issue.  I've not tried with some of the other well known names (`property` comes to mind) but there might be issues there as well.   ---  **Affects:** 3.0.2  **Issue Links:** - [SLICE-100](https://jira.spring.io/browse/SLICE-100) Change the name of the ca tag to constructor-arg upon completion of SPR-7218 (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2676771255c92873473d677381791ace10c471a1, https://github.com/spring-projects/spring-framework/commit/a6d9c908410a0d41a90422816b112708f4e27894","closed","type: bug,","spring-projects-issues","2010-05-19T03:05:32Z","2012-06-19T03:43:10Z"
"","11869","Views: setModelKey, setRenderedAttributes should be consistent [SPR-7210]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-7210](https://jira.spring.io/browse/SPR-7210?redirect=false)** and commented  The following is required to use ContentNegotiatingViewResolver for XML and JSON.  The two views are inconsistent in how they determine what should be rendered.  This could be improved, at least by having them implement one interface and a consistent behaviour, but possibly also by allowing the key to result bean to be specified in the view resolver.  ```xml                                                                                                                                                                                                                                                                                           ```    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5797fe7f6231afa25bffeb87300c34181db2d377","closed","type: enhancement,","spring-projects-issues","2010-05-16T23:20:56Z","2012-06-19T03:43:28Z"
"","11810","Add factory-class and factory-method to context:component-scan [SPR-7151]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-7151](https://jira.spring.io/browse/SPR-7151?redirect=false)** and commented  I would like to be able to create proxied objects for autowiring by type using component-scan:  An example with mocks would be:  ```xml  ```  instead of the following for each service bean:  ```xml  	 	  ```    ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-04-29T03:29:38Z","2018-12-28T11:26:20Z"
"","11797","As a developer I want to conveniently enumerate the names I use in @ModelAttribute [SPR-7138]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-7138](https://jira.spring.io/browse/SPR-7138?redirect=false)** and commented  `@ModelAttribute` cannot be applied to an annotation type, so cannot be specialised in the way that @ and `@Qualifier` can.  I would like to be able to define my own stereotypes, for example:  ``` ... @ModelAttribute(""form"") public @interface Form { } ```  or  ``` ... @ModelAttribute public @interface ModelAttributeEnumerated { // okay.. a long name I know but only an example     MyAttributesEnum value() } ```  such that I can do:  ``` @ModelAttributeEnumerated(MyAttributesEnum.CHOICES) public List getChoices() {      ... }  ```  Naturally, it's not just a simple change to add ElementType.ANNOTATION_TYPE to `@Target`, but I suspect the code supporting `@Qualifier` could be leveraged.  Is this worth a patch submission?   ---  **Affects:** 3.0.2  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-27T02:46:55Z","2018-12-28T10:25:55Z"
"","11719","[doc][spel]  Documentation refers to TemplatedParserContext. Class is TemplateParserContext [SPR-7059]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-7059](https://jira.spring.io/browse/SPR-7059?redirect=false)** and commented  At http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/expressions.html, the examples given refer to TemplatedParserContext.  The actual class is TemplateParserContext.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/52179d8bfb789ddc2561152b823f5c40552d8ac0","closed","in: core,","spring-projects-issues","2010-03-31T20:45:21Z","2012-06-19T03:42:53Z"
"","11716","As a developer, I want to qualify Controllers and RequestMappings to allow varying interceptor lists [SPR-7056]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-7056](https://jira.spring.io/browse/SPR-7056?redirect=false)** and commented  Simply put, I want to be able to:  ```xml      	                                                                                  	                                                                                             ```  With this configured, I should then be able to do:  ``` @Controller @Qualifier(""simple"") public class ServerLoadAsJson {   // ... } ```  For now, the following code is my workaround  ``` public class QualifiedControllerHandlerMapping extends DefaultAnnotationHandlerMapping {           private String qualifier;      public void setQualifier(String qualifier) {         this.qualifier = qualifier;     }          @Override     protected String[] determineUrlsForHandler(String beanName) {         // If qualifier isn't set, return all matching beans         if (qualifier == null) {             return super.determineUrlsForHandler(beanName);         }          // If then only match beans which are annotated with a matching qualifier         ApplicationContext context = getApplicationContext();         Qualifier mapping = context.findAnnotationOnBean(beanName, Qualifier.class);         if (mapping != null && mapping.value().equals(qualifier)){             return super.determineUrlsForHandler(beanName);         }          // no match - return empty list         return null;     } } ```    ---  **Affects:** 3.0.1  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-31T01:35:54Z","2011-10-10T01:28:35Z"
"","11124","CLONE -org.springframework.web.servlet.DispatcherServlet noHandlerFound [SPR-6458]","**[Naveen Reddy Alka](https://jira.spring.io/secure/ViewProfile.jspa?name=alkanaveen)** opened **[SPR-6458](https://jira.spring.io/browse/SPR-6458?redirect=false)** and commented  I am getting this error org.springframework.web.servlet.DispatcherServlet  noHandlerFound WARNING: No mapping for [/myServlet/services/GetService] in DispatcherServlet with name 'myServlet'  I have tomcat context file context file \  web.xml has  ---  \ \contextConfigLocation\ \/WEB-INF/myServlet-servlet.xml\ \ \ \context\ \org.springframework.web.context.ContextLoaderServlet\ \1\ \ \ \web-sim-frwk\ \org.springframework.web.servlet.DispatcherServlet\ \1\ \ \ \myServlet\ \/services/*\ \  ---  myServlet-servlet.xml  \ \ \ /services/GetService=simulatorController \ \                                                                                                                           \  with this configuration when the browser sends a request http://host:port/myServlet/services/GetService i am getting the above error in log  but if i change URL pattern in web.xml \ \myServlet\ \/services/GetService\ \  it works even if i change myServlet-servlet.xml to  \ \ \ /services/*=simulatorController \ \                                                                                                                           \  I couldn't understand this behaviour. Could someone please explain what's happening here.  Thanks, MK  ---  **Affects:** 2.0.3","closed","status: invalid,","spring-projects-issues","2009-11-26T21:56:28Z","2019-01-13T21:48:15Z"
"","11318","Bug in SpEL documentation [SPR-6652]","**[Narada Sage](https://jira.spring.io/secure/ViewProfile.jspa?name=narada)** opened **[SPR-6652](https://jira.spring.io/browse/SPR-6652?redirect=false)** and commented  Hi,  As mentioned in forum post there is a bug in the spel documentation where a method is used on the interface that in fact only exists on the concrete class. More details on the forum post.  Many thanks.  ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=82258  **Issue Links:** - #11380 Wrong example of SpEL in chapter 6.3 in reference documentation (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2010-01-06T20:45:14Z","2019-01-11T16:19:15Z"
"","11317","Cannot access system properties in SpEL programmatically [SPR-6651]","**[Narada Sage](https://jira.spring.io/secure/ViewProfile.jspa?name=narada)** opened **[SPR-6651](https://jira.spring.io/browse/SPR-6651?redirect=false)** and commented  Hi,  As mentioned on forum post accessing system properties in SpEL programmatically does not work for me. The manual only refers to use of system properties in xml which I haven't tried. However shouldn't this work programmatically as well?  If you need further details please let me know.  Thanks.   ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=82259  **Attachments:** - [SystemPropertiesAccessor.java](https://jira.spring.io/secure/attachment/20975/SystemPropertiesAccessor.java) (_2.10 kB_) - [SystemPropertiesAccessorUnitTest.java](https://jira.spring.io/secure/attachment/20974/SystemPropertiesAccessorUnitTest.java) (_2.65 kB_)  2 votes, 4 watchers","open","type: enhancement,","spring-projects-issues","2010-01-06T20:40:24Z","2013-02-25T02:38:32Z"
"","11382","Using Google Collections (Guava) instead Commons Collections [SPR-6716]","**[Nanda Firdausi Muhammad](https://jira.spring.io/secure/ViewProfile.jspa?name=enefem)** opened **[SPR-6716](https://jira.spring.io/browse/SPR-6716?redirect=false)** and commented  What about using Google Collections (Guava) instead of Commons Collections?  I think two great teams using the same thing will benefit all of us.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9e642e75b2eb17fcc27d5870eaaebde81495841b","closed","type: enhancement,","spring-projects-issues","2010-01-18T19:10:46Z","2010-01-19T00:19:44Z"
"","11859","Need to support warning and info messages as well in the spring form tag. [SPR-7200]","**[Naga C nandivelugu](https://jira.spring.io/secure/ViewProfile.jspa?name=nandivelugu)** opened **[SPR-7200](https://jira.spring.io/browse/SPR-7200?redirect=false)** and commented  Currently there is no support for the Info and Warning messages in the spring:form tags.  When i use the message builder to add info message there is no wasy i can show this message in the jsp using spring:form tags.  MessageBuilder().info().arg(arg1).code(""somecode"").build()  It would be nice if we also support the warning and info messages in addition to the error messages.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2010-05-13T05:25:18Z","2012-06-19T09:36:22Z"
"","11356","unexpected behaviour with AntPatternComparator [SPR-6690]","**[Nabil Ben Said](https://jira.spring.io/secure/ViewProfile.jspa?name=nsaid)** opened **[SPR-6690](https://jira.spring.io/browse/SPR-6690?redirect=false)** and commented  Hi guys,  the issue only starts from upgrade from 2.5.6 to 3.0.0.  let's say we have two urlMapping in a SimpleUrlHandlerMapping:  ```                        ```  when using the url: **http://www.domain.com/context/web/endUser/action/login.html** in spring 2.5.6 the **AbstractUrlHandletMapping** returns the second match as best match:  ``` String urlPath - org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.lookupHandler(String, HttpServletRequest) ```  This is ok, because the count of wildcasts for both entries are equal and the second entry matchs more charachters than the first one.  This behaviour is changed in spring 3.0.0. A new introduced AntPatternComparator in 3.0.0 is used for this propose:  ``` org.springframework.util.AntPathMatcher.AntPatternComparator ```  In this case the comparator sorts the shorter url mapping (/\*\*/login.\*) higher than the longer one (/\*\*/endUser/action/login.\*). This results in matching  controller1 when using the url: **http://www.domain.com/context/web/endUser/action/login.html** Which is not correct in my view.  I presume that a best match is the match with the most matched characters in url path.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cb9271b9528cf863f43fc67977ec60f1cda2067","closed","","spring-projects-issues","2010-01-14T00:26:34Z","2019-01-11T16:25:06Z"
"","11721","Provide a way to specify the class of an scoped proxy [SPR-7061]","**[Musachy Barroso](https://jira.spring.io/secure/ViewProfile.jspa?name=musachy)** opened **[SPR-7061](https://jira.spring.io/browse/SPR-7061?redirect=false)** and commented  When creating a scoped proxy with ""aop:scoped-proxy"" there is no way to specify the class of the target proxy. This is not a problem when Spring can determine the actual type, but when the type is ""Object"", there should be a way to specify the actual type, for example:  class MyFactory { public Object build(Class clazz) { //do something and return an object } }  class MyModel { `@Resource`(name = ""myservice"") public void setService(MyService service) { } }  XML:  \ \ \ \ \  Now, Spring will throw an error when trying to inject the service in ""MyModel"" because the created CGLib proxy does not implement ""MyService"", because the type could not be determined from the factory method. It would be nice to have an attribute in scoped-proxy like ""target-class""(or target-interfaces) where I could set target-class=""MyService"" and ScopedProxyFactoryBean would know how to use it.  My solution for now is to make my own ScopedProxyFactoryBean, and add class=""MyService"" to the bean definition, so my ScopedProxyFactoryBean gets the class from there, kind of naive but it works :)   ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-04-01T07:56:35Z","2018-12-28T11:35:19Z"
"","11076","Behavior of Bean loading changed in RC2 (Incompatible to Apache CXF) [SPR-6410]","**[Mos](https://jira.spring.io/secure/ViewProfile.jspa?name=mos)** opened **[SPR-6410](https://jira.spring.io/browse/SPR-6410?redirect=false)** and commented  Please check http://forum.springsource.org/showthread.php?t=80800  RC2 doesn't work with Apache CXF anymore. I'm sure there are other frameworks out there which also breaks with RC2.  M4 and RC1 didn't have this problem. Was there an accidental breaking change in RC2?  ---  **Affects:** 3.0 RC2  **Reference URL:** http://forum.springsource.org/showthread.php?t=80800  **Issue Links:** - #11078 CXF integration broken in Spring 3 RC2 (_**""duplicates""**_) - #11032 Cannot import bean definitions using classpath*: resource location  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2009-11-23T01:49:08Z","2019-01-11T15:35:24Z"
"","11109","@ResponseBody doesn't obey CharacterEncodingFilter [SPR-6443]","**[Morten Egelund Rasmussen](https://jira.spring.io/secure/ViewProfile.jspa?name=silverjam)** opened **[SPR-6443](https://jira.spring.io/browse/SPR-6443?redirect=false)** and commented  I have a `@Controller` class defined as a REST webservice endpoint. It has a method, which is annotated with  `@ResponseBody`.  Class looks something like this:  ``` @Controller @RequestMapping(""/foo"") public class Foo {     @RequestMapping(value=""/foobar"", method=RequestMethod.GET)     @ResponseBody     public string getFoobar() {       // Do something that returns some UTF-8 stuff (probably some XML).     } } ```  It seems that it always returns content encoded in ISO-8859-1, even if I have a CharacterEncodingFilter defined first in the chain like:  ```              CharacterEncodingFilter         org.springframework.web.filter.CharacterEncodingFilter                      encoding             UTF-8                               forceEncoding             true                             CharacterEncodingFilter         /*      ```  I have debugged and printed the string output to the logs, and it goes to the logfile just fine in UTF-8. However, it ends out in the browser as ISO-8859-1.  ---  **Issue Links:** - #11225 `@ResponseBody` overwrites ContentType","closed","status: invalid,","spring-projects-issues","2009-11-24T22:21:41Z","2019-01-13T07:57:00Z"
"","11383","Support destroy scripts in DataSourceInitializer [SPR-6717]","**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[SPR-6717](https://jira.spring.io/browse/SPR-6717?redirect=false)** and commented  The DataSourceInitializer in Spring 3.0 is a very handy feature when writing integration tests. I do miss one feature though, that was present in the DataSourceInitializer in Spring Batch (which I guess prompted the inclusion of this component in Spring-jdbc), and that is the possiblity to add destroy scripts. When working on a shared db, being able to (at least try) set the db back to its original state would be nice.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6933a1af28ba28e083adbad3f1d0a36060aa1ec8","closed","type: enhancement,","spring-projects-issues","2010-01-18T23:06:34Z","2012-06-19T03:44:08Z"
"","11440","BeanNameAutoProxyCreator does not work if the given beanNames are ses [SPR-6774]","**[Moritz Siuts](https://jira.spring.io/secure/ViewProfile.jspa?name=mosti)** opened **[SPR-6774](https://jira.spring.io/browse/SPR-6774?redirect=false)** and commented  I have a bean called ""mybean"" and an alias of this bean configured like \.  Because I want an Interceptor applied to this bean I configure a BeanNameAutoProxyCreator like this:  \ \ \ \ \ \ \ \ \aliasofmybean\ \				 \ \ \  Of course there is a ""myInterceptor"" bean defined properly.  Whenever I get the ""aliasofmybean"" or ""mybean"" I won't get the proxy - the BeanNameAutoProxyCreator does not work in this case. I have to use ""mybean"" as an Element of BeanNameAutoProxyCreator.beanNames to make it work.  This is not mentioned in the documentation (neither for the BeanNameAutoProxyCreator nor for the \), so I did not expect this behaviour. I think the issue is the same in Spring 3.0, but I only tested it with Spring 2.5.6.  The above example with the alias isn't quite usefull, but we have a lot of components and some generated wiring so that we have a real use case for the \ tags.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6070a498fe65d849371664947f638033355a1b97","closed","type: enhancement,","spring-projects-issues","2010-01-26T19:22:06Z","2012-06-19T03:43:18Z"
"","11393","Could not autowire field of type org.springframework.web.context.request.WebRequest [SPR-6727]","**[Mischa Neumann](https://jira.spring.io/secure/ViewProfile.jspa?name=mischa)** opened **[SPR-6727](https://jira.spring.io/browse/SPR-6727?redirect=false)** and commented  In a portlet environment it is not possible to autowire fields of type org.springframework.web.context.request.WebRequest in a request scoped proxy. Autowiring javax.portlet.PortletRequest works fine.  ---  **Affects:** 3.0 GA  **Issue Links:** - #16416 Expose current HttpServletResponse for autowiring  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a6f2348b8b0549c6a9ba64499d70be7964450ff","closed","type: enhancement,","spring-projects-issues","2010-01-20T00:15:37Z","2019-01-11T15:42:29Z"
"","11378","restore request attributes after include [SPR-6712]","**[Mischa Neumann](https://jira.spring.io/secure/ViewProfile.jspa?name=mischa)** opened **[SPR-6712](https://jira.spring.io/browse/SPR-6712?redirect=false)** and commented  when including page fragments through spring-web from within spring-portlet the following error is thrown by weblogic when the DispatcherServlet tries to restore the original request attributes:  java.lang.IllegalArgumentException: The request attribute [javax.portlet.userinfo] is reserved and can not be set by portlets. at com.bea.portlet.container.HttpServletRequestImpl.setAttribute(HttpServletRequestImpl.java:198) at org.springframework.web.servlet.DispatcherServlet.restoreAttributesAfterInclude(DispatcherServlet.java:1158) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:721) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:552)  of course the DispatcherServlet cannot know the reserved attributes from the portlet context, but it could avoid settting unchanged attributes. a solution could therefore check if the attribute to restore is still present and unchanged after the include and skip the resetting for such attributes.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/88ff3c9a23c71a545ee80b3edfa86c495060b04f","closed","type: bug,","spring-projects-issues","2010-01-17T21:23:18Z","2012-06-19T03:43:04Z"
"","12386","MTOM on Websphere [SPR-7730]","**[Mirko Zeibig](https://jira.spring.io/secure/ViewProfile.jspa?name=mzeibig)** opened **[SPR-7730](https://jira.spring.io/browse/SPR-7730?redirect=false)** and commented  I am unable to use MTOM with Jaxb2 on Websphere 6.1 During unmarshalling the attachments can not be found because of a different interpretation of the content-id.  In `org.springframework.oxm.jaxb.Jaxb2Marshaller.Jaxb2AttachmentUnmarshaller.getAttachmentAsDataHandler(String)` the content-id is surrounded with angle brackets. The MimeHeader datastructure inside the Websphere contains the content-id without brackets. I am not sure if this is a bug in Websphere but OXM should be aware of this.   ---  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-08T19:40:02Z","2015-09-22T16:42:15Z"
"","11665","AnnotationMethodHandlerAdapter gives priority to media type order over quality when selecting a method [SPR-7000]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-7000](https://jira.spring.io/browse/SPR-7000?redirect=false)** and commented  AnnotationMethodHandlerAdapter.RequestMappingInfoComparator doesn't appear to order the requested accept value by quality.  Meaning that if I submit a request value like the following:  (Taken from Webkit's standard accept header)  ``` application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5 ```  And I have a controller like the following:  ``` @Controller public class ExampleController {     @RequestMapping(value=""/secure/example"", headers=""accept=text/html"", method=RequestMethod.GET)     public String showHtml() {         ...     }      @RequestMapping(value=""/secure/example"", headers=""accept=image/png"", method=RequestMethod.GET)     public String showPng() {         ...     } } ```  Then the showHtml method is selected because it is closest to the left where the showPng method should have been selected as it expresses a higher preferred quality level from the client (default quality=1).  This issue is related to #11663 but the order of the header media types should probably be taken into account AFTER the quality is taken into account.  This issue is also related to #11617 though since it appears #11617 won't make it into 3.0.x I think that this issue represents a more direct problem with a more straight forward solution that I believe should be included in to a 3.0.x release.  I think the order of media type method resolution should be the following:  1. Quality 2. Specificity 3. Order of content types from left to right (#11663)  FYI, the patch for #11617 includes a MediaType comparator that will sort by quality before specificity if you want to use it.  ---  **Affects:** 3.0.1  **Issue Links:** - #11617 MediaType Quality not being factored into mvc Content Negotiation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/753a54096f503f51ba6ba19f9840926dcaed249a","closed","type: bug,","spring-projects-issues","2010-03-17T10:39:32Z","2019-01-11T12:59:17Z"
"","11663","Provide mechanism for injecting a Serializable Provider or ObjectFactory via XML [SPR-6998]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6998](https://jira.spring.io/browse/SPR-6998?redirect=false)** and commented  This issue is related to #11417 though I think it should work for non EL situations as well.  To fix this I would be happy if something like ObjectFactoryCreatingFactoryBean were created for the Provider\ interface as well.  And that both were enhanced to make the respective Provider or ObjectFactory serializable similar to what can be done with `@Inject`/`@Autowired` with #10747.  That said if the decision were made to only support this through EL (#11417) that would be fine too though it may be less risky to simply make ObjectFactoryCreatingFactoryBean return a serializable ObjectFactory sooner?  ---  **Affects:** 3.0.1  **Issue Links:** - #11417 Support EL together with Provider Interface in XML configuration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/16eb915c95cebe263fd3b33c99d493fd9fb84e1d","closed","type: enhancement,","spring-projects-issues","2010-03-17T08:17:10Z","2019-01-11T16:33:24Z"
"","11617","MediaType Quality not being factored into mvc Content Negotiation [SPR-6952]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6952](https://jira.spring.io/browse/SPR-6952?redirect=false)** and commented  I am attempting to create a controller that can serve up html, xml and json from the same url.  I would like html returned to browsers and xml or json returned to computer clients that request that specific content type. I have a controller that looks like the following:  ``` @Controller public class ExampleController {     @RequestMapping(value="" /example"", headers={""accept=application/xml,application/json""})     public SomeObject restService() {...}      @RequestMapping(value="" /example"", headers={""accept=text/html,application/html+xml""})     public String html() {...} } ```  This looks like it will work until you run into a browser like WebKit that uses an accept header like:  ``` Accept=application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5 ```  Or IE that submits an accept header like:  ``` */* ```  This problem is somewhat related to #11599.  Though it turns out that identifying the correct handler method based on accept header is actually more complicated than simply the order of the accept media types like I originally thought. :)  After some research I believe Spring MVC should employ a content negotiation method similar to the one implemented in Apache (http://httpd.apache.org/docs/2.2/content-negotiation.html) though without having to deal with language, encoding, or charset.  The basic premise is that just like the client can notify the server how well it can support various content types using the 'q' or 'quality' modifier the server should have equal ability to say the level of quality it provides various content types.  If server side quality were used in content negotiation in Spring MVC that would allow me to change my ExampleController to prefer html to xml or json like so:  ``` @Controller public class ExampleController {     @RequestMapping(value="" /example"", headers={""accept=application/xml;q=0.5,application/json;q=0.4""})     public SomeObject restService() {...}      @RequestMapping(value="" /example"", headers={""accept=text/html,application/html+xml""})     public String html() {...} } ```  Following the content negotiation rules detailed in the Apache document spring mvc would multiply the ""q"" values of the client and server media types that match preferring more specific matches to less specific matches.  In the example above using WebKit's accept header when requesting '/example' the combined media types would be resolved to the following table:  |Client|Server|Result| |:---|:---|:---| |application/xhtml+xml;q=1|x application/xhtml+xml;q=1|== appilication/xhtml+xml;q=1| |text/html;q=0.9|x text/html;q=1|== text/html;q=0.9| |application/xml;q=1|x application/xml;q=0.5|== application/xml;q=0.5| |\*/\*;q=0.5|x application/json;q=0.4|== application/json;q=0.2|  If there is a tie then the client accept header that comes first is selected (#11599).  In the case of wildcards without quality modifiers apache applies a lower default quality \*/\*;q=0.1 image/*;q=0.2.  I imagine Spring MVC would want to do the same.  So and IE result table would look like the following:  |Client|Server|Result| |:---|:---|:---| |\*/\*;q=0.1|x application/xhtml+xml;q=1|== appilication/xhtml+xml;q=.1| |\*/\*;q=0.1|x text/html;q=1|== text/html;q=0.1| |\*/\*;q=0.1|x application/xml;q=0.5|== application/xml;q=0.05| |\*/\*;q=0.1|x application/json;q=0.5|== application/json;q=0.04|  The result of this algorithm would also need to be applied to the `@ResponseBody` rendering especially with the fix for #11543.  And it will need to be applied to ContentNegotiatingViewResolver and can be specified as part of the mediaTypes specified in the mediaTypes property.  In this case the negotiation wouldn't be on a per methodhandler basis but should still work.  I would be happy to supply a patch if you think that would be useful.  ---  **Affects:** 3.0.1  **Attachments:** - [quality1.patch](https://jira.spring.io/secure/attachment/16269/quality1.patch) (_11.58 kB_) - [quality2.patch](https://jira.spring.io/secure/attachment/16270/quality2.patch) (_11.85 kB_)  **Issue Links:** - #11665 AnnotationMethodHandlerAdapter gives priority to media type order over quality when selecting a method","closed","type: enhancement,","spring-projects-issues","2010-03-05T06:07:46Z","2019-01-11T16:30:46Z"
"","11599","AnnotationMethodHandlerAdapter should take into account request accept header ordering [SPR-6934]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6934](https://jira.spring.io/browse/SPR-6934?redirect=false)** and commented  I have a controller like so:  ``` public class ExampleController { 	@RequestMapping(value=""/secure/example"", headers=""accept=text/html"",method=RequestMethod.GET) 	public String list(@ModelAttribute ExampleModel example, Model model) {             ... 	}  	@RequestMapping(value=""/secure/example"", headers={""accept=application/xml""}, method=RequestMethod.GET) 	public List listXml() {             ... 	} } ```  If I submit a request with accept=application/xml,text/html  I would expect that my listXml() method would be resolved before list().  However, because list() is declared first in the class it ends up being the one chosen by AnnotationMethodHandlerAdapter.  It appears that RequestMappingInfoComparator doesn't take into account the order of the accept media types on the request.  I believe it should.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4f4f3fab7d23a571ff267bf4b11ed33aedea26dc","closed","type: bug,","spring-projects-issues","2010-03-03T11:17:41Z","2012-06-19T03:44:18Z"
"","11597","Support for single value responses using ContentNegotiatingViewResolver [SPR-6932]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6932](https://jira.spring.io/browse/SPR-6932?redirect=false)** and commented  I'm attempting to use Spring MVC as a Rest services framework.  Our rest services are multichannel.  I would like to use the content negotiation rules supported in the ContentNegotiatingViewResolver to determine the content type of my response.  This work great.  However, all of my encoded responses include the Key from the ModelAndView map key making my restful services response ugly.  I can use `@ResponseBody` on my handler method which will produce a clean response but then the response content type negotiation is determined by AnnotationMethodHandlerAdapter.ServletHandlerMethodInvoker.handleResponseBody(Object, ServletWebRequest) completely bypassing ContentNegotiatingViewResolver and rendering useless my HandlerInterceptors that depend upon response not being committed before they are called.  handleResponseBody() is much less extensible than using a ViewResolver.  I can work around this issue by overriding the filterModel() method in the View implementations I configure in ContentNegotiatingViewResolver to simply check to see if there is a single item in the model and returning only that single item if there is.  It would be nice to have a standard solution for this problem.  Using `@ResponseBody` and ignoring my ViewResolver doesn't work for me and seems like the wrong solution here.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/386d8fdaa6bde6e1e73dcc2edf2e80e830d27fe5  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-03T07:08:42Z","2019-01-11T16:31:49Z"
"","11478","Make context:component-scan more pluggable [SPR-6812]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6812](https://jira.spring.io/browse/SPR-6812?redirect=false)** and commented  As Spring evolves to be more and more annotation driven context:component-scan is relied upon more and more for adding beans to a context.  It would be nice if context:component-scan were made more pluggable so that one or more ""ComponentScanPostProcessors"" can be provided to further manipulate bean definitions found during component-scan.  This can be accomplished today be creating a custom NameSpaceHandler that uses a customized version of ClassPathBeanDefinitionScanner that overrides ""postProcessBeanDefinition"".  However, this approach has 2 problems: 1. Impacts the usability of my customization because it is a non spring standard handler which impacts IDE, documentation, etc. 2. If I have 2 component scan manipulations things get more complicated because now I need to make a singe handler that does all my custom scanning operations (not very modular) or I need to create 3 different scanners (one for each manipulation and one that does both). 3. postProcessBeanDefinition should return an instance of AbstractBeanDefinition so that the Component created beandefinition can be more fully manipulated (e.g. wrapping it in a proxy or something).  context:component scan could simply accept a list of beans that implement an interfaces with a single method similar to postProcessBeanDefinition.  Spring could have a set of default ""ScanPostProcessors"" that do some standard stuff like apply scoped proxy wrappers.   ---  **Affects:** 3.0 GA  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-08T09:39:12Z","2018-12-27T11:26:00Z"
"","11275","Document configuring and exposing a ValidatorFactory not just a Validator [SPR-6609]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6609](https://jira.spring.io/browse/SPR-6609?redirect=false)** and commented  Sometimes a ValidatorFactory is required by thirdparty libraries such as JPA 2.0 with the ""javax.persistence.validation.factory"" property.  It would be nice if it were possible to configure a single ValidatorFactory that can be passed to JPA 2.0 and LocalValidatorFactoryBean to help provide a more consistent validation configuration across an application's configuration.  This could simply be a bean similar to LocalValidatorFactoryBean but instead of providing a Validator it provided a ValidatorFactory.  Then modifying LocalValidatorFactoryBean or creating a new bean based on SpringValidatorAdapter that accepts a ValidatorFactory.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a70bb40b3df1a45fcc2438694918e8097a594b59","closed","type: documentation,","spring-projects-issues","2009-12-23T04:50:39Z","2012-06-19T03:44:13Z"
"","10893","Support the CallbackPreferringPlatformTransactionManager interface in AbstractPollingMessageListenerContainer.receiveAndExecute [SPR-6225]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6225](https://jira.spring.io/browse/SPR-6225?redirect=false)** and commented  It would be nice if AbstractPollingMessageListenerContainer supported using a CallbackPreferringPlatformTransactionManager to better support Websphere.  Perhaps the code could just be refactored to use a TransactionTemplate?   ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-10-12T06:55:00Z","2015-09-22T17:34:34Z"
"","11860","support pretty printing in MappingJacksonHttpMessageConverter  [SPR-7201]","**[Mike Yin](https://jira.spring.io/secure/ViewProfile.jspa?name=yincrash)** opened **[SPR-7201](https://jira.spring.io/browse/SPR-7201?redirect=false)** and commented  It would be nice to have a pretty printing property that could be set, so writeInternal would output pretty JSON. The JsonGenerator has a method that will turn on a default one.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db289495e546f09b7ad55426001b56f52e67c173  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-05-13T06:28:43Z","2019-01-11T13:18:50Z"
"","10879","DisposableBeanAdapter throws NPE for default-destroy-method [SPR-6211]","**[Mike Quilleash](https://jira.spring.io/secure/ViewProfile.jspa?name=quilleashm)** opened **[SPR-6211](https://jira.spring.io/browse/SPR-6211?redirect=false)** and commented  I have a spring \ with default-destroy-method=""destroy"".  Some of my beans have a destroy() method, some don't.  It looks like, inside the DisposableBeanAdapter the following happens for the beans that do NOT have a destroy() method.  - Construction - destroyMethodName looked up from bean definition - destoryMethod looked up from name, gets null - validates that destroy method can be null (beanDefinition.isEnforceDestroyMethod())  Then on dispose  - destroyMethod is null - destroyMethodName is not null, tries to look up destroyMethod again, and gets null again - passes result to invokeCustomDestroyMethod() - invokeCustomDestroyMethod() throws NPE as destroyMethod is null  Possible solution would be to null out destroyMethodName in the constructor if the method is not found, or perhaps not create the DisposableBeanAdapter at all.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/11d987009a982852a5ae4e7489cc9025c011519d","closed","in: core,","spring-projects-issues","2009-10-08T23:04:08Z","2012-06-19T03:43:22Z"
"","11819","ShallowEtagHeaderFilter not adding ETag [SPR-7160]","**[Mike Pugmire](https://jira.spring.io/secure/ViewProfile.jspa?name=mpugmire)** opened **[SPR-7160](https://jira.spring.io/browse/SPR-7160?redirect=false)** and commented  ShallowEtagHeaderFilter has not been adding an ETag to the HTTP header in 3.0.1.RELEASE and 3.0.2.RELEASE in my environment.  ShallowEtagHeaderFilter in 3.0.0.RELEASE does add an ETag to the HTTP header in my environment.  What is preventing the ETag from being added is a statusCode (ShallowEtagHeaderFilter:60) that is always equal to -1.  I cannot find what is causing the statusCode to be equal to -1.  ```      ShallowEtagHeaderFilter     org.springframework.web.filter.ShallowEtagHeaderFilter       ShallowEtagHeaderFilter     /*  ```    ---  **Affects:** 3.0.1, 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dd8c18188f357eba4ce58d9c1abc3fb2b016ac3e","closed","type: bug,","spring-projects-issues","2010-05-02T14:52:50Z","2012-06-19T03:43:37Z"
"","11724","@RequestMapping ""/"" Paths [SPR-7064]","**[Mike Pugmire](https://jira.spring.io/secure/ViewProfile.jspa?name=mpugmire)** opened **[SPR-7064](https://jira.spring.io/browse/SPR-7064?redirect=false)** and commented  I am having a new issue where every request mapping ending in a ""/"" is mapped to the root mapping. In addition, in 3.0.1 the handler ignored the trailing slash in mappings allowing a request for ""/test/"" to be mapped to the method annotated with ""/test"".  Below are the methods in my test controller and the corresponding log messages.  This issue started with my upgrade to 3.0.2.  Could it be related to #11713?  `@RequestMapping`(value = ""/"", method = RequestMethod.GET) public String index(ModelMap model) throws Exception { // In 3.0.1 this mapped only to ""/"".  In 3.0.2 maps to all paths ending in ""/"".  // Context Path = ""/application"" // Servlet Path = ""/"" // Request Uri = ""/application/"" }  `@RequestMapping`(value = ""/test"", method = RequestMethod.GET) public String test(ModelMap model) throws Exception { // In 3.0.1 this method mapped to the ""/test/"" path and ""/test"" path.  // Context Path = ""/application"" // Servlet Path = ""/test"" // Request Uri = ""/application/test"" }  `@RequestMapping`(value = ""/test/"", method = RequestMethod.GET) public String test2(ModelMap model) throws Exception { // In 3.0.1 this method mapped to the ""/test/"" path  // Context Path = ""/application"" // Servlet Path = ""/test/"" // Request Uri = ""/application/test/"" }  [DefaultAnnotationHandlerMapping:397] Root mapping to handler [TestController@fa5e4e4] [DefaultAnnotationHandlerMapping:410] Mapped URL path [/test] onto handler [TestController@fa5e4e4] [DefaultAnnotationHandlerMapping:410] Mapped URL path [/test/] onto handler [TestController@fa5e4e4] [DefaultAnnotationHandlerMapping:220] Mapping [/] to handler 'TestController@fa5e4e4' [DispatcherServlet:690] DispatcherServlet with name 'spring' processing GET request for [/application/test/] [HandlerMethodInvoker:171] Invoking request handler method: public java.lang.String TestController.index(org.springframework.ui.ModelMap) throws java.lang.Exception  ---  **Affects:** 3.0.2  **Issue Links:** - #11713 MVC 3 not forwarding ""/"" path in WebSphere 7  2 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2010-04-02T06:15:44Z","2019-01-11T13:25:42Z"
"","11657","Cglib make it impossible to autowire a sub-class [SPR-6992]","**[Michel Zanini](https://jira.spring.io/secure/ViewProfile.jspa?name=michelz)** opened **[SPR-6992](https://jira.spring.io/browse/SPR-6992?redirect=false)** and commented  Let`s say you have a class A and this class uses the ``@Async`` annotation. Then class B extends class A.  When you try to autowire class B like this:  public class UnitTest {  `@Autowired` private B b;  }  It does not work. I wonder if this is expected behaviour or not.  ---  **Affects:** 3.0.1  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/16300/test.zip) (_7.87 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/7477645992f05da42539140db3b149025af73ec2  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-03-16T00:58:03Z","2019-01-13T07:54:49Z"
"","11240","@Valid doesn't work with HibernateValidator [SPR-6574]","**[Michał Borek](https://jira.spring.io/secure/ViewProfile.jspa?name=michalborek)** opened **[SPR-6574](https://jira.spring.io/browse/SPR-6574?redirect=false)** and commented  `@Valid` annotation worked fine in 3.0 RC3 but it doesn't know. Example:      public String processSubmit(@Valid Game game, BindingResult errors, SessionStatus status) {                  if (!errors.hasErrors()) {             ...             return ""redirect:/publishers/games/add/images.html"";         }         return null;     }  Game has Hibernate Validator annotations like `@NotEmpty`.  In appConf:   BindingResult show always 0 errors (even if there were errors).  I worked fine in 3.0 RC3    ---  **Affects:** 3.0 GA","closed","in: web,","spring-projects-issues","2009-12-16T21:37:10Z","2019-01-11T15:26:04Z"
"","11374","The locateToBeMarshalled method of the MarshallingView class returns only the first object in ModelAndView [SPR-6708]","**[Michal Huniewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=m1ckey)** opened **[SPR-6708](https://jira.spring.io/browse/SPR-6708?redirect=false)** and commented  The locateToBeMarshalled method of the MarshallingView class returns only the first object in ModelAndView.  In other words, if I add more than 1 object to a ModelAndView object, only one of them will make it to the XML. This does not seem to depend on the marshaller.  Please see forum reference for dummy code.   ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=83141","closed","status: declined,","spring-projects-issues","2010-01-15T02:59:48Z","2019-01-12T16:38:22Z"
"","11811","Documentation incorrect for blob insert when blob is a string containing special characters  [SPR-7152]","**[Michael Perlin](https://jira.spring.io/secure/ViewProfile.jspa?name=iliaar)** opened **[SPR-7152](https://jira.spring.io/browse/SPR-7152?redirect=false)** and commented  Inserting as blob a string containing german umlauts, i.e. ""Löffel Übersicht"". Using example from http://static.springsource.org/spring/docs/2.5.x/reference/jdbc.html (11.7.2) The inserting string in DB incomplete like ""Löffel Übersic"" It works correct as I use blobIn.available() instead of blobIn.length() Maybe you need to improve the dokumentation, maybe also for clobs.   ---  **Affects:** 3.0.1","closed","status: declined,","spring-projects-issues","2010-04-29T04:42:03Z","2015-09-22T16:55:21Z"
"","11801","Improve the way we access to Session attributes [SPR-7142]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-7142](https://jira.spring.io/browse/SPR-7142?redirect=false)** and commented  1) Accessing to an existing attribute    The Javadoc about `@SessionAttributes` currently states the following:    For permanent session attributes, e.g. a user authentication object, use the traditional session.setAttribute method    Consequently, when accessing a session attribute, I need to perform the following:  ``` public String updateClient(HttpSession session) { 	Client client = (Client) session.getAttribute(""client""); } ```  It would be much easier if the syntax was similar to what we currently can do with request attributes:  ``` public String updateClient(@SessionAttribute Client client) { 	//... } ```  In a similar fashion, we could create an annotation called `@ServletContextAttribute` to access objects that have been stored in the ServletContext:  ```  public String updateClient(@ServletContextAttribute Client client) { 	//... } ```  2) Adding a new attribute to the session scope    Currently, I need to perform the following:  ``` public String updateClient(HttpSession session) { 	Client client = session.setAttribute(client,  client); } ```  It would be nice if I could do something like this instead:  ``` public String updateClient(Model model) { 	Client client = model.put( ""client"", client, Scope.SESSION_SCOPE); } ```  Note: I'm guessing this will interfere with the annotation `@SessionAttributes` that we currently put on top of the controller classes. Anyway, given that we're gonna introduce the conversation scope in Spring 3.1, I can't see how we could keep `@SessionAttributes`. It should be called `@ConversationAttributes` instead.  ---  **Issue Links:** - #16171 Provide `@ModelAttribute`(required=""false"") for session attributes - #18468 Convenient access to session and request attributes in controller methods (_**""is superseded by""**_)  11 votes, 5 watchers","closed","has: votes-jira,","spring-projects-issues","2010-04-27T20:55:56Z","2019-01-13T07:54:13Z"
"","11610",": propose a limited number of values for the method attribute [SPR-6945]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6945](https://jira.spring.io/browse/SPR-6945?redirect=false)** and commented  The  tag has been improved to handle Rest-style syntax.  Consequently, if I write this:  ```xml  	...  ```  I get this:  ```xml   	...  ```  This is absolutely fine. However, if my understanding is correct, there are only 4 possible values for the method attribute: GET, PUT, POST, DELETE.  If I try to set it to ""foo"", I have the following result:  ```xml  	...  ```  ```xml   	...  ```  My web browser (Firefox) runs fine and considers this is a ""GET"". To avoid any messy situation, I believe it would be better to throw an exception in that specific case.    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59084354e2277c4244e8949128466b33e7c9206d","closed","type: enhancement,","spring-projects-issues","2010-03-04T02:36:19Z","2012-06-19T03:43:05Z"
"","11609","Prepend contextPath in form tag [SPR-6944]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6944](https://jira.spring.io/browse/SPR-6944?redirect=false)** and commented  Currently, if I need to write a form that links to my web application, I usually write it that way:  ```xml   ...  ```  Generated HTML is as follows:  ```xml  	Inside form  ```  It would be easier if the form tag could include the context path out of the box (for any path starting with ""/"" for instance). In that way, I would not need to use the  tag anymore.  ---  **Issue Links:** - #13326 Form tag should prepend the contextPath and servletPath if not present (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2010-03-04T02:22:07Z","2019-01-11T16:31:23Z"
"","11573","Broaden scope of transaction rollback in integration tests [SPR-6908]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6908](https://jira.spring.io/browse/SPR-6908?redirect=false)** and commented  #### Overview  It is nice that we can use `@Transactional` in integration tests so that transactions are not committed at the end of the test.  However, when the test method calls a method that has a propagation level of `REQUIRES_NEW`, the first transaction commits before the second transaction does a rollback. Consequently the database is not in the same state as it was before the test.  #### Proposal  I would suggest that we add one attribute in the transactionManager as follows:  ```xml  	 	  ```  If a method has a propagation level of REQUIRES_NEW or NESTED, it would automatically lower to REQUIRED   ---  26 votes, 23 watchers","open","has: votes-jira,","spring-projects-issues","2010-02-25T01:57:25Z","2016-12-28T11:36:59Z"
"","11551","Improve documentation for JavaConfig's use of CGLIB for all @Configuration annotated classes [SPR-6885]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6885](https://jira.spring.io/browse/SPR-6885?redirect=false)** and commented  All `@Configuration` classes are dynamically subclassed with CGLIB, and the MethodInterceptor that is applied in the overridden versions of all `@Bean` methods check the container first for any cached (scoped) beans, of course including singletons.  See ConfigurationClassEnhancer and BeanMethodInterceptor for details.  For this reason, `@Configuration` classes have certain restrictions, such as that they (and their `@Bean` methods) may not be final; they must have a no-arg constructor, etc.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9e5b129ba55107d446cfb54637ebf0d5ba5645b0, https://github.com/spring-projects/spring-framework/commit/6af91773ee24fe3d4a12fa5f4d642600c350d847","closed","type: enhancement,","spring-projects-issues","2010-02-21T16:21:42Z","2012-06-19T03:44:04Z"
"","11521","Documentation on Spring-Struts 1 integration needs to be updated [SPR-6855]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6855](https://jira.spring.io/browse/SPR-6855?redirect=false)** and commented  ``` Struts is the de facto web framework for Java applications ```  We're in 2010, that needs to be updated :).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6aa05994aee334d90ec5e75d1aeb583b364d7ad4","closed","type: enhancement,","spring-projects-issues","2010-02-17T01:52:30Z","2012-06-19T03:42:52Z"
"","11515","add varags constructor for ClassPathXmlApplicationContext and FileSystemXmlApplicationContext [SPR-6849]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6849](https://jira.spring.io/browse/SPR-6849?redirect=false)** and commented  Currently the syntax for those constructors is a little verbose:  ```java new ClassPathXmlApplicationContext(new String[] {         ""com/acme/dao/dao-config.xml"", ""com/acme/service/service-config.xml""} ); ```  Now that Spring 3.0 uses Java 5+ syntax, it would be simpler if we could take advantage of varags as follows:  ```java new ClassPathXmlApplicationContext(""com/acme/dao/dao-config.xml"", ""com/acme/service/service-config.xml""); ```    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/60ac23909163a6588c2b792ea5424ca6ee0fd826","closed","type: enhancement,","spring-projects-issues","2010-02-15T21:33:36Z","2012-06-19T03:43:49Z"
"","11512","Improve documentation on ""Instantiation using an instance factory method"" [SPR-6846]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6846](https://jira.spring.io/browse/SPR-6846?redirect=false)** and commented   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c0f4d9c8932f64ee5c4126f62cbc157a4d6bdf4e","closed","type: enhancement,","spring-projects-issues","2010-02-15T08:20:45Z","2012-06-19T03:43:26Z"
"","11503","factory-method - improve error message when method is not static [SPR-6837]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6837](https://jira.spring.io/browse/SPR-6837?redirect=false)** and commented  I'm using the following configuration:  ```xml  ```  ```java public class ClientServiceSingleton { 	 	private static ClientServiceSingleton instance = new ClientServiceSingleton(); 	 	private ClientServiceSingleton() {}	 	public ClientServiceSingleton getInstance() { 		return instance; 	}  } ```  As you might have noticed, I have omitted declaring the getInstance method as static. In that case, the error message is as follows:  ``` Error creating bean with name 'clientServiceSingleton' defined in class path resource [factory/method/factorymethod-config.xml]:  No matching factory method found: factory method 'getInstance' ```  Also, STS is not showing an explicit message either.  I believe the error message could show something such as:  ``` No matching factory method found: factory method 'getInstance'. Check that the method exists and that it is static. ```  note: in case the return type is incorrect, it crashes far after, when injecting the dependency. So at this stage, the error message should not mention that the return type might be wrong.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/18bd4a83375a1815dbf83aca384cf7f5c27e93f5","closed","type: enhancement,","spring-projects-issues","2010-02-14T15:57:10Z","2012-06-19T03:44:14Z"
"","11477","@Transactional(""transactionManager"") and logging [SPR-6811]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6811](https://jira.spring.io/browse/SPR-6811?redirect=false)** and commented  Starting from Spring 3.0 I now can declare the transactionManager inside my `@Transactional` annotation as follows:  ```java @Transactional(""transactionManager"") public void updateClient(Client client) { ... } ```  It would be nice if the existing loggers could show information about which transactionManager we are currenty using.  I am especially thinking of 2 specific loggers: the ones for DataSourceTransactionManager and AnnotationTransactionAttributeSource.  ``` DEBUG: org.springframework.jdbc.datasource.DataSourceTransactionManager - Creating new transaction with name [testCollision1stTime]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT DEBUG: org.springframework.transaction.annotation.AnnotationTransactionAttributeSource - Adding transactional method [dao1UpdateAccount] with attribute [PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly]  ```    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f0bb45ae2869920cfa29a46ea7704b1a6c69ab37","closed","type: enhancement,","spring-projects-issues","2010-02-07T20:22:22Z","2012-06-19T03:43:39Z"
"","11476","@Transactional(""transactionManager"") and error handling [SPR-6810]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6810](https://jira.spring.io/browse/SPR-6810?redirect=false)** and commented  Starting from Spring 3.0 I now can declare the transactionManager inside my `@Transactional` annotation as follows:  ```java @Transactional(""transactionManager"") public void updateClient(Client client) { ... } ```  However, if I try that with a transactionManager that does not exist (such as `@Transactional`(""foo"")), there is no error message. I believe it just ignores the annotation. It would be much safer if I had an error at startup saying that the transactionManager does not exist.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c5c38c6664d65a76d4a1c3880c73383b06f5a89b","closed","type: enhancement,","spring-projects-issues","2010-02-07T20:16:55Z","2012-06-19T03:43:11Z"
"","11140","JavaConfig - provide more tooling when working with a FactoryBean implementation [SPR-6474]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6474](https://jira.spring.io/browse/SPR-6474?redirect=false)** and commented  Please consider that you need to declare an EntityManagerFactory using JavaConfig.  Currently, the code you need to write looks like this:  ```java @Bean public EntityManagerFactory entityManagerFactory() {          LocalContainerEntityManagerFactoryBean entityManagerFactory = new         LocalContainerEntityManagerFactoryBean();         //... 	entityManagerFactory.afterPropertiesSet(); 	return entityManagerFactory.getObject(); } ```  There are 2 things that I can easily forget here: the calls to afterPropertiesSet() and to getObject(). It will be much easier if we provide a convenience class called ConfigurationUtils that we could use in that way:  ```java @Bean public EntityManagerFactory entityManagerFactory() {          LocalContainerEntityManagerFactoryBean entityManagerFactory = new         LocalContainerEntityManagerFactoryBean();         //... 	return ConfigurationUtils.proceedFactoryBean(entityManagerFactory); } ```  ---  **Issue Links:** - #12076 Provide alternatives to using FactoryBean types within `@Bean` methods (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2009-11-30T03:10:41Z","2019-01-13T07:56:52Z"
"","11119","Generate client-side validation from the Bean Validation annotations [SPR-6453]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6453](https://jira.spring.io/browse/SPR-6453?redirect=false)** and commented  Spring `@MVC` now integrates JSR 303 (Bean Validation). It would be great if we could generate client-side validation automatically (based on Spring JS).  Ideally, I was thinking that we could use this kind of syntax:  ```xml  	 	  ```  I am not sure that we are able to to retrieve the full class name from the modelAttribute name. Consequently, we might have to use a separate tag as follows:  ```xml           	 	  ```    ---  **Attachments:** - [input.tagx](https://jira.spring.io/secure/attachment/17367/input.tagx) (_5.47 kB_)  14 votes, 13 watchers","closed","has: votes-jira,","spring-projects-issues","2009-11-25T18:45:11Z","2015-09-22T18:55:03Z"
"","11036","Theme support in Spring MVC - caching issue when browsing several applications [SPR-6370]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6370](https://jira.spring.io/browse/SPR-6370?redirect=false)** and commented  case 1: Last week I have used a Spring `@MVC` application that used a theme called ""green"". It stored the following cookie in my browser: org.springframework.web.servlet.theme.CookieThemeResolver.THEME=**green**  case 2: Today, I'm using Roo that also uses themes but with different names such as this one: org.springframework.web.servlet.theme.CookieThemeResolver.THEME=**right**  When connecting to the second application, it appears that the cookie I had from the previous application is sent anyway. The 2nd application does not have any theme called ""green"". Consequently I've got an exception stacktrace (see below).  I believe we would need to make this Cookie application-specific.  ```java javax.servlet.ServletException: javax.servlet.jsp.JspTagException: Theme 'green': No message found under code 'styleSheet' for locale 'en'. 	org.apache.jasper.runtime.PageContextImpl.doHandlePageException(PageContextImpl.java:850) 	org.apache.jasper.runtime.PageContextImpl.handlePageException(PageContextImpl.java:779) 	org.apache.jsp.WEB_002dINF.layouts.default_jspx._jspService(default_jspx.java:160) 	org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:803) 	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) 	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:337) 	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:803) 	org.apache.tiles.servlet.context.ServletTilesRequestContext.forward(ServletTilesRequestContext.java:241) 	org.apache.tiles.servlet.context.ServletTilesRequestContext.dispatch(ServletTilesRequestContext.java:222) 	org.apache.tiles.renderer.impl.TemplateAttributeRenderer.write(TemplateAttributeRenderer.java:44) 	org.apache.tiles.renderer.impl.AbstractBaseAttributeRenderer.render(AbstractBaseAttributeRenderer.java:103) 	org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:669)  ```    ---  **Affects:** 3.0 RC2  4 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-17T01:06:25Z","2015-09-22T17:34:36Z"
"","11009","Annotation for xml-parent - Solution [SPR-6343]","**[Michael Hauser](https://jira.spring.io/secure/ViewProfile.jspa?name=mike41)** opened **[SPR-6343](https://jira.spring.io/browse/SPR-6343?redirect=false)** and commented  I have a solution for this problem, see 3 Code snippets below:  1)--- The annotation `@Interface` CildOf.java  package ??????? ; // fill in whatever suits you  import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  import org.springframework.stereotype.Component;  /** * Annotation for Bean definition Inheritance - must be processed by a * BeanFactoryPostProcessor prior to Instantiation of the Beans\ * Indicates that this bean is ChildOf the named parent Bean and inherits all * (set) properties of the parent Class *  * `@author` HAUSER * `@since` 2009-05-12 *   */ `@Target`(ElementType.TYPE) `@Retention`(RetentionPolicy.RUNTIME) `@Documented` `@Component` public `@interface` ChildOf {      /**      * The value may indicate a suggestion for a logical component name,      * to be turned into a Spring bean in case of an autodetected component.      * @return the suggested component name, if any      */     String value() default """";          /**      * The name of the parent bean - must NOT be null      *       * @return the parent beanname      */     String parent() default """";  }  2)--- The BeanFactoryPostProcessor to digest this BeanFactoryPostProcessor.java  package ??????? ; // fill in whatever suits you  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.springframework.beans.BeansException; import org.springframework.beans.FatalBeanException; import org.springframework.beans.factory.config.BeanDefinition; import org.springframework.beans.factory.config.BeanFactoryPostProcessor; import org.springframework.beans.factory.config.ConfigurableListableBeanFactory; import org.springframework.core.Ordered; import org.springframework.core.PriorityOrdered; import org.springframework.core.annotation.AnnotationUtils; import org.springframework.util.StringUtils;  /** * BeanFactoryPostProcessor for Inheritance of Bean Properties via Annotations * {`@link` at.gv.brz.spring.beans.ChildOf `@ChildOf`} *  * `@author` HAUSER * `@since` 2009-05-12 *   */ public class ChildOfBeanFactoryPostProcessor implements BeanFactoryPostProcessor, PriorityOrdered {      protected final Log logger = LogFactory.getLog(getClass());          private int order = Ordered.LOWEST_PRECEDENCE;  // default: same as non-Ordered          public void setOrder(int order) {       this.order = order;     }          public int getOrder() {       return this.order;     }          /**      * Modify the application context's internal bean factory after its standard      * initialization. All bean definitions will have been loaded, but no beans      * will have been instantiated yet. This allows for overriding or adding      * properties even to eager-initializing beans.      *       * @param beanFactory      *            the bean factory used by the application context      * @throws org.springframework.beans.BeansException      *             in case of errors      */     @SuppressWarnings(""unchecked"")     public void postProcessBeanFactory(     		ConfigurableListableBeanFactory beanFactory) throws BeansException {          	String[] beanNames = beanFactory.getBeanDefinitionNames();     	for (int i = 0; i < beanNames.length; i++) {     		String beanName = beanNames[i];     		BeanDefinition bd = beanFactory.getBeanDefinition(beanName);     		String className = bd.getBeanClassName();     		// some classnames are nulls, why ?     		if (!StringUtils.hasText(className)) {     			continue;     		}     		try {     			Class clazz = Class.forName(className);     			ChildOf childOf = AnnotationUtils.findAnnotation(clazz,     					ChildOf.class);     			if (childOf != null) {     				String parentName = childOf.parent();     				if (!StringUtils.hasText(parentName)) {     					throw new FatalBeanException(     							""ChildOf Annotation of bean ["" + beanName     									+ ""] has no parent Value"");     				}     				if (logger.isDebugEnabled()) {     					logger.debug(""Found parentName ["" + parentName     							+ ""] for bean ["" + beanName + ""]"");     				}     				// is there already a different parent ?     				String oldParentName = bd.getParentName();     				if (StringUtils.hasText(oldParentName)     						&& !parentName.equals(oldParentName)) {     					logger.warn(""bean ["" + beanName     							+ ""] has already parent ["" + oldParentName     							+ ""] set - new annotated parent["" + parentName     							+ ""] will be ignored"");     				}          				// and set the parentName     				bd.setParentName(parentName);     			}          		} catch (ClassNotFoundException e) {     			logger.error(""Bean ["" + beanName + ""] has invalid ClassName[""     					+ bd.getBeanClassName()     					+ ""] - Exception will be ignored"");     		}     	}          }  }  3) register the BFPostprocessor somewhere in Your applicationConfig.xml like:  \ 4) and final annotate any `@Component`, `@Controller` , ... etc like: `@ChildOf`(parent = ""baseController"") `@Controller` public class MyDerivedController extends BaseController {  ---  **Affects:** 2.5.6  **Reference URL:** http://jira.springframework.org/browse/SPR-5580  This issue is a sub-task of #10251  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2009-11-12T23:59:58Z","2019-01-11T14:36:01Z"
"","11237","Reference Documentation refers to ""new getting started tutorial"" which isn't there [SPR-6571]","**[Michael Bannister](https://jira.spring.io/secure/ViewProfile.jspa?name=michaelbannister)** opened **[SPR-6571](https://jira.spring.io/browse/SPR-6571?redirect=false)** and commented  One of the New Features and Enhancements listed in the 3.0 reference docs (section 2.3) says, ""There is now a new getting started tutorial for developing a basic Spring 3.0 MVC web application. This tutorial is a separate document that can be found at the Spring Documentation page."" The nearest I can find on the linked page is: ""Developing a Spring MVC application step-by-step (revised for Spring 2.5)."" ...which doesn't sound like it's new for 3.0.   ---  **Affects:** 3.0 GA  1 votes, 2 watchers","closed","status: invalid,","spring-projects-issues","2009-12-16T09:07:19Z","2019-01-12T05:32:47Z"
"","11270","Conversation initialization callback interface [SPR-6604]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6604](https://jira.spring.io/browse/SPR-6604?redirect=false)** and commented  Starting a new conversation might use some initialization logic and tasks to be done. The manager will invoke an optionally initializer callback object if a new conversation was started by providing such callbacks.  This could be the case, if any detached entities would have to be merged into a conversation scoped entity manager to become managed for instance.  ---  This issue is a sub-task of #11082  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8dd9f1a3af81c17c5492a9bbf9964e8c43aa48d2, https://github.com/spring-projects/spring-framework/commit/789b931c96211a0cfd4253a5cd8958395e458a72, https://github.com/spring-projects/spring-framework/commit/a54623c54013d433ca9a5cdb83488219214d50ed  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2009-12-22T20:30:08Z","2019-01-11T16:12:24Z"
"","11102","Window Management API [SPR-6436]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6436](https://jira.spring.io/browse/SPR-6436?redirect=false)** and commented  A simple API to manage the window id programmatically.  Methods should include: - programmatically create a new window id instead of using an existing one - programmatically set the current window id - get the current window id (internally using the RequestContextHolder to get the window id request parameter)  ---  This issue is a sub-task of #11083  1 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2009-11-24T02:33:49Z","2019-01-11T15:33:35Z"
"","11101","Window Management Use Cases [SPR-6435]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6435](https://jira.spring.io/browse/SPR-6435?redirect=false)** and commented  The following use cases must be supported by the window management: 1. initial GET request without window id request parameter -> treated as a new window / tab, creating a new window id 2. initial GET request having a non-valid window id (from a bookmark for instance) -> same as 1. 3. GET or POST request having a valid window id -> is automatically mapped to the appropriate window id on the server side 4. GET or POST request opening a new window or tab or popup sharing the same window id (done through specific request parameter) 5. same as 4. but NOT sharing the current window id (also done through specific request parameter) 6. Copy / paste of an existing URL including the window id and opening that in a new window -> cannot be handled without some piece of javascript -> still to be investigated 7. Refresh the current page -> if the URL includes the window id, this is not a problem (if the redirect is done, the URL should always include the window id)  How does that apply in a portal environment?  ---  This issue is a sub-task of #11083  1 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2009-11-24T02:31:31Z","2019-01-11T15:33:30Z"
"","11100","Window Management Configuration [SPR-6434]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6434](https://jira.spring.io/browse/SPR-6434?redirect=false)** and commented  The configuration should be quite simple, the activation is implicitly done by adding the appropriate window management servlet filter within the web.xml. The window id generation strategy must be configurable, maybe through a namespace handler.  ---  This issue is a sub-task of #11083","closed","status: declined,","spring-projects-issues","2009-11-24T02:26:20Z","2019-01-11T15:33:23Z"
"","11098","Servlet Filter for Window Id Handling [SPR-6432]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6432](https://jira.spring.io/browse/SPR-6432?redirect=false)** and commented  The servlet filter will handle the window id request parameter check. - create a new window id, if not present and immediately returns a redirect containing the same request url, but including the new window id  ---  **Attachments:** - [ConversationAwareVariableResolver.java](https://jira.spring.io/secure/attachment/17732/ConversationAwareVariableResolver.java) (_4.27 kB_) - [ConversationFramework.java](https://jira.spring.io/secure/attachment/17734/ConversationFramework.java) (_1.14 kB_) - [ConversationFrameworkImpl.java](https://jira.spring.io/secure/attachment/17735/ConversationFrameworkImpl.java) (_2.50 kB_) - [FacesContextConversationFramework.java](https://jira.spring.io/secure/attachment/17733/FacesContextConversationFramework.java) (_1.56 kB_) - [WebRequestContextListener.java](https://jira.spring.io/secure/attachment/17703/WebRequestContextListener.java) (_2.32 kB_) - [WebRequestConversationResolver.java](https://jira.spring.io/secure/attachment/17702/WebRequestConversationResolver.java) (_2.98 kB_) - [WebRequestPortletFilter.java](https://jira.spring.io/secure/attachment/17704/WebRequestPortletFilter.java) (_4.13 kB_)  This issue is a sub-task of #11083  2 votes, 6 watchers","closed","status: declined,","spring-projects-issues","2009-11-24T02:22:50Z","2019-01-13T21:48:22Z"
"","11097","Window Id [SPR-6431]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6431](https://jira.spring.io/browse/SPR-6431?redirect=false)** and commented  - The window id representing the current browser window / tab is submitted as a request parameter. - The window id will become available through the RequestContextHolder as a request attribute. - It will automatically be added to any url within a response using a decorated servlet response adding the window id through encodeURL. - An initial GET request without window id is automatically treated as a new window / tab and a new window id is assigned to it.  To avoid wrong window id mapping (through a bookmarked URL for instance, including the window id): - The window id is built from a session based counter as well as from a hash code of the current session id - If a window id is present through a request parameter, but is not valid (no longer in use), a new one is created and assigned and the request is treated as a new window / tab request  The generation of the window id (window id strategy) should be an extension point having two out-of-the box implementations: - default strategy, using a combination of a counter value and the hash code of the current session id - simple strategy just using a counter (smaller and easier, but could be conflicting with bookmarks)  There must be a way to access the current window id even in a portal environment.  ---  This issue is a sub-task of #11083  1 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2009-11-24T02:00:55Z","2019-01-11T15:33:09Z"
"","11092","Conversation Namespace [SPR-6426]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6426](https://jira.spring.io/browse/SPR-6426?redirect=false)** and commented  Either create a new conversation namespace and handler for easy configuration and activation or add those conversation dependent features to the existing context namespace.  Possibilities should include: - definition of the default conversation manager (equal to the transaction namespace where the transaction manager might be specified) - definition of the conversation store and current conversation resolver - fine grained setup like timeout, default join mode, etc.  ---  This issue is a sub-task of #11082  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2009-11-23T19:40:43Z","2019-01-11T15:34:49Z"
"","11091","Conversation Listener [SPR-6425]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6425](https://jira.spring.io/browse/SPR-6425?redirect=false)** and commented  The conversation management must support conversation listener to be added to existing conversation objects or in a more general way being added to the conversation manager.  If such a listener interface is implemented within a bean having conversation scope, that bean should be added as a listener to its conversation automatically. One use case for that is for example an EntityManager, which in the case of being conversation scoped could be added as a listener too in order to do a proper cleanup upon ending the conversation.  ---  This issue is a sub-task of #11082  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2009-11-23T19:38:14Z","2019-01-11T15:34:46Z"
"","11090","Conversation Annotations [SPR-6424]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6424](https://jira.spring.io/browse/SPR-6424?redirect=false)** and commented  Instead of using the conversation manager API, conversation can be created and ended through annotations. The scanning for those annotations could be enabled through the context namespace handler like .  Different types of annotations: - BeginConversation - EndConversation - Conversational (has the same effect as placing begin and end annotations to the same method)  Annotations should be handled by the auto proxy creator in a similar way as the Transactional annotation for instance.  ---  This issue is a sub-task of #11082  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2009-11-23T19:34:38Z","2019-01-11T15:34:44Z"
"","11089","Conversation Object [SPR-6423]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6423](https://jira.spring.io/browse/SPR-6423?redirect=false)** and commented  Conversations are created and managed by the conversation manager but offer a simple API as well.  - adding / removing a conversation listener bound to that specific conversation - attribute access (put / get / remove, etc) - access to the conversation hierarchy (parent, nesting, etc) - register destruction callback  ---  This issue is a sub-task of #11082  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2009-11-23T19:24:42Z","2019-01-11T15:34:37Z"
"","11088","Current Conversation Resolver [SPR-6422]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6422](https://jira.spring.io/browse/SPR-6422?redirect=false)** and commented  The current conversation resolver is another extension point for the conversation manager to easily change the default behavior of storing the currently used conversation id.  In a web environment, the current conversation id would most likely be bound to the current window / tab (see #11083) and hence be based on the window management. This makes it possible to run different conversations per browser window and isolating them from each other by default.  In a unit-test or batch environment the current conversation could be bound to the current thread to make conversations be available in a non-web environment as well.  The current conversation id is stored in a ThreadLocal and available through a ConversationContextHolder which itself will use the conversation resolver to determine the current conversation id. In a web environment, this resolver could be done by using the a window scoped bean to hold the current conversation id or directly do it by combining the current window id and the conversation id. See LocaleResolver and LocaleContextHolder to apply the same pattern for the ConversationContext and ConversationContextHolder.  ---  This issue is a sub-task of #11082  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2009-11-23T19:04:07Z","2019-01-11T15:34:33Z"
"","11087","Conversation Store [SPR-6421]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6421](https://jira.spring.io/browse/SPR-6421?redirect=false)** and commented  Conversations are stored within a ""conversation store"" which itself is an extension point through an interface within the conversation manager so its easy to change the storage of conversations.  In a web environment, the store should be related to the http session by default, in a batch or desktop environment, the store would be most likely an application singleton. If the conversation management is used for a process engine like approach (like a workflow or webflow), the store could even be persistent in order to make conversations persist over multiple sessions and even be used across sessions.  ---  This issue is a sub-task of #11082  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2009-11-23T19:00:22Z","2019-01-11T15:34:27Z"
"","11086","Conversation Scope [SPR-6420]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6420](https://jira.spring.io/browse/SPR-6420?redirect=false)** and commented  The conversation management should be exposed through an out-of-the box ""conversation"" scope. The scope would be related to the default conversation manager by convention as there might be more than one conversation manager available in an application context. More conversational scopes should be configurable through the conversation namespace (or the conversation configuration might be added to the existing context namespace).  ---  This issue is a sub-task of #11082  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92ff07de155c3c202bd8d5035923e860550b51f6, https://github.com/spring-projects/spring-framework/commit/662301d73ada2f8a765c52242467cf7b6553dd81, https://github.com/spring-projects/spring-framework/commit/f73184ca0bc210d80777edd2288b5db4a36f86b0, https://github.com/spring-projects/spring-framework/commit/cf13de54a1a3748ffae343715e16d080b804fc74, https://github.com/spring-projects/spring-framework/commit/2f21e4aa11bf77d57ab4049c900ddb46691c300c  8 votes, 9 watchers","closed","in: core,","spring-projects-issues","2009-11-23T18:56:16Z","2019-01-11T15:34:25Z"
"","11085","Conversation Manager API [SPR-6419]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6419](https://jira.spring.io/browse/SPR-6419?redirect=false)** and commented  The conversation management can either be used through annotations or through a fine grained conversation management API. This issue holds the general requirements for the conversation manager API.  - begin and end a conversation - support temporary conversations - support timeout capability for conversations - support nested conversations - support different join modes for new conversations (like joined, nested, isolated, etc) - support initialization callback - return current conversation - switching current conversations - support listeners for conversations - support different endings for a conversation (should be optional, like commit-end or rollback-end) - support extension points for conversation storage and current conversation resolver  More than one conversation manager must be able to coexist within the same application context, even having different setups, stores and current conversation resolver, however, there must be a default one to be used, if no specific one defined (within the annotation for instance).  ---  This issue is a sub-task of #11082  7 votes, 11 watchers","closed","in: core,","spring-projects-issues","2009-11-23T18:53:05Z","2019-01-11T15:35:41Z"
"","11083","Top level issue for the window management [SPR-6417]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6417](https://jira.spring.io/browse/SPR-6417?redirect=false)** and commented  This is the top level issue for the window management supporting the generic isolation of windows (tabs) in web browsers by a serverside management of a window id attached to it.  You might also want to look at the conversation management, as it will take advantage of the window management (see #11082).  General architecture: - a window / tab is mapped to an id managed by the server side window management - the window id is passed along as a request parameter and stored as an attribute within the servlet request - to ensure it is always available, the encodeURL within a decorated response should add the window id to the url (the same way as the session id is added in the case cookies are turned off)  ---  **Sub-tasks:** - #11097 Window Id - #11098 Servlet Filter for Window Id Handling - #11100 Window Management Configuration - #11101 Window Management Use Cases - #11102 Window Management API  13 votes, 17 watchers","closed","has: votes-jira,","spring-projects-issues","2009-11-23T18:39:55Z","2019-01-11T15:35:35Z"
"","11082","Provide conversation management support [SPR-6416]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6416](https://jira.spring.io/browse/SPR-6416?redirect=false)** and commented  This is the top level issue related to the new conversation management to be added for Spring 3.1. It will contain major features and elements as sub issues and all fine grained features and requirements will be linked to those sub issues to easily get the big picture for the conversation management.  You might also want to look at the window management feature as the conversation management will take advantage of in a web environment (see #11083).  ---  **Sub-tasks:** - #11085 Conversation Manager API - #11086 Conversation Scope - #11087 Conversation Store - #11088 Current Conversation Resolver - #11089 Conversation Object - #11090 Conversation Annotations - #11091 Conversation Listener - #11092 Conversation Namespace - #11270 Conversation initialization callback interface  **Issue Links:** - #11209 Support for JSF 2 view and flow scopes  34 votes, 35 watchers","closed","has: votes-jira,","spring-projects-issues","2009-11-23T18:37:50Z","2019-01-11T15:35:50Z"
"","11784","Web session replication support for scoped proxies (serialization across ClassLoaders) [SPR-7124]","**[Mauricio Noda](https://jira.spring.io/secure/ViewProfile.jspa?name=mnoda)** opened **[SPR-7124](https://jira.spring.io/browse/SPR-7124?redirect=false)** and commented  When CGLIB based scoped proxies are serialized across ClassLoaders, a ClassNotFoundException is thrown. It happens when a reference to a scoped proxy exists somewhere in the web session scope, it is serialized in one application server instance, and deserialized in another.  In theory, it is possible to serialize/deserialize CGLIB scoped proxies across ClassLoaders in a cluster as a different but equivalent scoped proxy exists in each instance.  If an object from a static class containing the name of the Spring Bean is serialized using writeReplace, the equivalent proxy can be retrieved using readResolve when deserializing. (CGLIB and Java Serialization - http://cglib.sourceforge.net/howto.html)   ---  **Affects:** 3.0.1  6 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-22T09:30:15Z","2015-09-22T17:34:36Z"
"","11575","Spring AOP proxies with annotation-based pointcuts are not serializable [SPR-6910]","**[Mauricio Noda](https://jira.spring.io/secure/ViewProfile.jspa?name=mnoda)** opened **[SPR-6910](https://jira.spring.io/browse/SPR-6910?redirect=false)** and commented  If a Spring bean is intercepted with an proxy based aspect using annotations on the pointcut expression, when Spring Web Flow tries to serialize the flow scope, the following exception is thrown:  org.springframework.webflow.execution.repository.snapshot.SnapshotCreationException: Could not serialize flow execution; make sure all objects stored in flow or flash scope are serializable at org.springframework.webflow.execution.repository.snapshot.SerializedFlowExecutionSnapshot.\(SerializedFlowExecutionSnapshot.java:74) at org.springframework.webflow.execution.repository.snapshot.SerializedFlowExecutionSnapshotFactory.createSnapshot(SerializedFlowExecutionSnapshotFactory.java:70) at org.springframework.webflow.execution.repository.snapshot.AbstractSnapshottingFlowExecutionRepository.snapshot(AbstractSnapshottingFlowExecutionRepository.java:75) at org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository.putFlowExecution(DefaultFlowExecutionRepository.java:123) at org.springframework.webflow.executor.FlowExecutorImpl.resumeExecution(FlowExecutorImpl.java:165) Truncated. see log file for complete stacktrace java.io.NotSerializableException: org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1156) at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1338) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1146) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) Truncated. see log file for complete stacktrace   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4adb7e2500a15c19e755b214fd792c1bde55911d  12 votes, 12 watchers","closed","has: votes-jira,","spring-projects-issues","2010-02-25T04:45:28Z","2016-04-06T08:38:14Z"
"","11410","Make HttpServletRequest and HttpServletResponse available for injection [SPR-6744]","**[Mauricio Noda](https://jira.spring.io/secure/ViewProfile.jspa?name=mnoda)** opened **[SPR-6744](https://jira.spring.io/browse/SPR-6744?redirect=false)** and commented  While creating a custom Spring Security AuthenticationProvider I stumbled on the need for instances of both HttpServletRequest and HttpServletResponse. There´s no way to easily access them. Modifying org.springframework.web.context.request.RequestContextListener to register both instances in Spring request scope would be ideal.  I´m trying to integrate Spring Security with Weblogic Servlet Authentication. (http://download.oracle.com/docs/cd/E15051_01/wls/docs103/javadocs/weblogic/servlet/security/ServletAuthentication.html)  I see it becoming a major issue for any web container as JSR-196, which has the same problem, made its way into JEE 1.6 specification.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11409 Make HttpServlertRequest and HttpServletResponse available for injection (_**""is duplicated by""**_)","closed","status: invalid,","spring-projects-issues","2010-01-21T08:25:57Z","2019-01-12T05:32:41Z"
"","11409","Make HttpServlertRequest and HttpServletResponse available for injection [SPR-6743]","**[Mauricio Noda](https://jira.spring.io/secure/ViewProfile.jspa?name=mnoda)** opened **[SPR-6743](https://jira.spring.io/browse/SPR-6743?redirect=false)** and commented  ---  **Affects:** 3.0 GA  **Issue Links:** - #11410 Make HttpServletRequest and HttpServletResponse available for injection (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-01-21T08:13:53Z","2019-01-11T15:44:24Z"
"","11350","SpringORM - Scoped proxies for EntityManager injected with @PersistenceContext [SPR-6684]","**[Mauricio Noda](https://jira.spring.io/secure/ViewProfile.jspa?name=mnoda)** opened **[SPR-6684](https://jira.spring.io/browse/SPR-6684?redirect=false)** and commented  Instances of EntityManager injected with `@PersistenceContext` can´t have scoped proxies in them, creating serialization issues.  The workaround is to declare org.springframework.orm.jpa.support.SharedEntityManagerBean in the XML, configure it with  and them inject with `@Autowired` or `@Resource`.  Being able to use `@PersistenceContext` without the serialization issues would be nice.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db71811c5a2427af512022ea60bf3240c020fa15","closed","type: enhancement,","spring-projects-issues","2010-01-13T02:42:40Z","2019-01-11T16:16:08Z"
"","11349","Spring beans in singleton scope are ignoring default component-scan scoped-proxy configuration [SPR-6683]","**[Mauricio Noda](https://jira.spring.io/secure/ViewProfile.jspa?name=mnoda)** opened **[SPR-6683](https://jira.spring.io/browse/SPR-6683?redirect=false)** and commented    It doesn´t matter what is configured in the scoped-proxy attribute, singleton scoped beans defaults to ""no"" and they have to be all configured explicity in a one-by-one basis using `@Scope`(proxyMode = TARGET_CLASS).  It generates a lot of annoying java.io.NotSerializableException in common web applications until all singletons are found and have their proxyMode attribute set.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abdc35c893568642ffcdddd767dd5a495cd24bbb, https://github.com/spring-projects/spring-framework/commit/56d2c9daf513e130fe92d78bb93d68054c1fa639","closed","type: enhancement,","spring-projects-issues","2010-01-13T02:16:10Z","2012-06-19T03:43:07Z"
"","11347","Spring AOP proxies with annotation based pointcuts are not serializable [SPR-6681]","**[Mauricio Noda](https://jira.spring.io/secure/ViewProfile.jspa?name=mnoda)** opened **[SPR-6681](https://jira.spring.io/browse/SPR-6681?redirect=false)** and commented  If a Spring bean is intercepted with an proxy based aspect using annotations on the pointcut expression, when Spring Web Flow tries to serialize the flow scope, the following exception is thrown:  org.springframework.webflow.execution.repository.snapshot.SnapshotCreationException: Could not serialize flow execution; make sure all objects stored in flow or flash scope are serializable at org.springframework.webflow.execution.repository.snapshot.SerializedFlowExecutionSnapshot.\(SerializedFlowExecutionSnapshot.java:74) at org.springframework.webflow.execution.repository.snapshot.SerializedFlowExecutionSnapshotFactory.createSnapshot(SerializedFlowExecutionSnapshotFactory.java:70) at org.springframework.webflow.execution.repository.snapshot.AbstractSnapshottingFlowExecutionRepository.snapshot(AbstractSnapshottingFlowExecutionRepository.java:75) at org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository.putFlowExecution(DefaultFlowExecutionRepository.java:123) at org.springframework.webflow.executor.FlowExecutorImpl.resumeExecution(FlowExecutorImpl.java:165) Truncated. see log file for complete stacktrace java.io.NotSerializableException: org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1156) at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1338) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1146) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) Truncated. see log file for complete stacktrace   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d525901ff6b11d6d26dc072f640b6a4d698cee8","closed","type: enhancement,","spring-projects-issues","2010-01-13T01:58:10Z","2012-06-19T03:43:32Z"
"","11346","Spring beans annotated with @Transactional are not serializable [SPR-6680]","**[Mauricio Noda](https://jira.spring.io/secure/ViewProfile.jspa?name=mnoda)** opened **[SPR-6680](https://jira.spring.io/browse/SPR-6680?redirect=false)** and commented  If a Spring bean in flow scope is annotated with `@Transactional`, the following exception is thrown when Spring Web Flow tries to serialize the scope:  org.springframework.webflow.execution.repository.snapshot.SnapshotCreationException: Could not serialize flow execution; make sure all objects stored in flow or flash scope are serializable at org.springframework.webflow.execution.repository.snapshot.SerializedFlowExecutionSnapshot.\(SerializedFlowExecutionSnapshot.java:74) at org.springframework.webflow.execution.repository.snapshot.SerializedFlowExecutionSnapshotFactory.createSnapshot(SerializedFlowExecutionSnapshotFactory.java:70) at org.springframework.webflow.execution.repository.snapshot.AbstractSnapshottingFlowExecutionRepository.snapshot(AbstractSnapshottingFlowExecutionRepository.java:75) at org.springframework.webflow.execution.repository.impl.DefaultFlowExecutionRepository.putFlowExecution(DefaultFlowExecutionRepository.java:123) at org.springframework.webflow.executor.FlowExecutorImpl.resumeExecution(FlowExecutorImpl.java:165) Truncated. see log file for complete stacktrace java.io.NotSerializableException: java.lang.Object at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1156) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) Truncated. see log file for complete stacktrace   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df54c8613d1fb8750ebbbfff4284555e44226ba0","closed","type: enhancement,","spring-projects-issues","2010-01-13T01:47:16Z","2012-06-19T03:43:03Z"
"","11366","NPE in InitDestroyAnnotationBeanPostProcessor [SPR-6700]","**[Matthias Seidel](https://jira.spring.io/secure/ViewProfile.jspa?name=mseidel)** opened **[SPR-6700](https://jira.spring.io/browse/SPR-6700?redirect=false)** and commented  I have a bean defined something like this:  \ \ \  Now depending on the property this MAY return null, which is perfectly fine for the component that is going to use this bean. And since the documentation of the FactoryBean interface states the getObject method is allowed to return null, I figured it is acceptable to have 'null' beans in the context and the setup with factory-bean should work too.  But with  enabled, I get the following NPE:  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myBean' defined in class path resource [context.xml]: Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:557) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:842) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:416) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) at de.idealo.test.TestMain.main(TestMain.java:19) Caused by: java.lang.NullPointerException at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1394) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512) ... 11 more  Is this a bug or am I doing something wrong?   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95c695eb2f205c13b870e06091e764a1153d1d62","closed","in: core,","spring-projects-issues","2010-01-14T19:37:19Z","2012-06-19T03:44:16Z"
"","11193","add validate property with binding the result [SPR-6527]","**[Matthias Koch](https://jira.spring.io/secure/ViewProfile.jspa?name=gideon)** opened **[SPR-6527](https://jira.spring.io/browse/SPR-6527?redirect=false)** and commented  I think it is a good idea to add support for just property validation to Spring validator. with JSR 303 property validation is available. The Spring validator just implement the validator interface from from jsr 303, but the property validation is 1. not viewable because the Spring validator interface have to extend the jsr 303 interface 2. if using the methodes (after casting to Spring Validator Implementation) to validate property, the result will not be bind to BindingResult (Errors)  support should be added to be 100% jsr 303 complaint. i think its just easy to add this and I would be glad if this comes with spring 3.0  sorry for my bad english. thx   --- No further details from [SPR-6527](https://jira.spring.io/browse/SPR-6527?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-12-06T20:55:11Z","2015-09-22T17:34:37Z"
"","10892","correct reference documentation for ResourceBundleViewResolver [SPR-6224]","**[Matthias Koch](https://jira.spring.io/secure/ViewProfile.jspa?name=gideon)** opened **[SPR-6224](https://jira.spring.io/browse/SPR-6224?redirect=false)** and commented  the reference documentation for the ResourceBundleViewResolver tells that the view class will marked with: viewname.class= in the properties file.  if doing so in spring 3, it won't work.  the right syntax is: viewname.(class)=  this should be the right syntax since spring 2 regarding to this issue: http://jira.springframework.org/browse/SPR-1664  i found this deprected/wrong doku here:  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch15s05.html#mvc-viewresolver-resolver http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch16s02.html http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch16s03.html  thanks kg Matthias Koch  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10104 Spring MVC views.properties uses xl.(class) syntax  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d293c2248c1be2b4c0283c5d1161f0fb8c713fcc","closed","type: bug,","spring-projects-issues","2009-10-11T19:20:22Z","2019-01-11T15:08:08Z"
"","11225","@ResponseBody overwrites ContentType [SPR-6559]","**[matthias boehmer](https://jira.spring.io/secure/ViewProfile.jspa?name=mboehmer)** opened **[SPR-6559](https://jira.spring.io/browse/SPR-6559?redirect=false)** and commented  I have a controller with a method returning a simple string that contains a JSON object. The HttpServletRespose is avaiable as a method parameter. When I try to set the content type of the response to ""application/json"" is gets overwritten when I use `@ResponseBody` for mapping the return value to the response. It works well when I set the return type to void and write the response body directly into the HttpServletResponse using response.getWriter().write(jsonString).  Should not it be possible to set the content type, when I use `@ResponseBody`? This might be a bug, or at least it should be documented that `@ResponseBody` implicitly sets the content type.  ---  **Issue Links:** - #11109 `@ResponseBody` doesn't obey CharacterEncodingFilter - #11368 Explicitly set response Content-Type in `@ResponseBody`","closed","status: declined,","spring-projects-issues","2009-12-13T12:00:15Z","2019-01-13T07:56:27Z"
"","11563","Support for XSSFWorkbook and SXSSFWorkbook (xmlx format; POI 3.9+) [SPR-6898]","**[Matteo Zardini](https://jira.spring.io/secure/ViewProfile.jspa?name=mzardini)** opened **[SPR-6898](https://jira.spring.io/browse/SPR-6898?redirect=false)** and commented  I think it's a good improvement if buildExcelDocument can use the new XSSFWorkbook class, XSSF is the POI Project's pure Java implementation of the Excel 2007 OOXML (.xlsx) file format. Many people are beginning to use this new format, this is a default with Office 2007.  ---  **Affects:** 3.1.1  **Attachments:** - [AbstractPOIExcelView.java](https://jira.spring.io/secure/attachment/19470/AbstractPOIExcelView.java) (_2.75 kB_) - [AbstractPOIExcelViewThreeWorkbookTypes.java](https://jira.spring.io/secure/attachment/22437/AbstractPOIExcelViewThreeWorkbookTypes.java) (_2.92 kB_)  **Issue Links:** - #17441 add support of xlsx format to JasperReportsMultiFormatView  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/76cf5beb59e52395602ff2d71afe5ca6c10c53c4  9 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-23T19:18:37Z","2019-01-11T17:04:29Z"
"","11862","[SpEL] Valid Expression throws ArrayIndexOutOfBoundsException for map reference (3.0.2.RELEASE) [SPR-7203]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=solid)** opened **[SPR-7203](https://jira.spring.io/browse/SPR-7203?redirect=false)** and commented  I upgraded from spring-expression-3.0.1.RELEASE to spring-expression-3.0.2.RELEASE and suddenly my expressions referencing individual map entries are throwing ArrayIndexOutOfBoundsException.  This worked in 3.0.1 and it is valid syntax.  [code] public class SpELUtilsTest  {      @Test     public void testGetValue(){          	Map props1= new HashMap();     	props1.put(""key1"", ""value1"");     	props1.put(""key2"", ""value2"");     	props1.put(""key3"", ""value3"");          	     	Object bean = new TestBean(""name1"",new TestBean(""name2"",null,""Description 2"",15,props1),""description 1"", 6,props1);          	ExpressionParser parser = new SpelExpressionParser();     	Expression exp = parser.parseExpression(""testBean.properties['key2']"");     	String key= (String)exp.getValue(bean);     	     	}          public static class TestBean     {     	private String name;     	private TestBean testBean;     	private String description;     	private Integer priority;     	private Map properties;          	     	public TestBean() {     		super();     	}     			     	public TestBean(String name, TestBean testBean, String description,Integer priority,Map props) {     		super();     		this.name = name;     		this.testBean = testBean;     		this.description = description;     		this.priority=priority;     		this.properties=props;     	}          	public String getName() {     		return name;     	}     	public void setName(String name) {     		this.name = name;     	}     	public TestBean getTestBean() {     		return testBean;     	}     	public void setTestBean(TestBean testBean) {     		this.testBean = testBean;     	}     	public String getDescription() {     		return description;     	}     	public void setDescription(String description) {     		this.description = description;     	}     	          	public Integer getPriority() {     		return priority;     	}          	public void setPriority(Integer priority) {     		this.priority = priority;     	}          	public Map getProperties() {     		return properties;     	}          	public void setProperties(Map properties) {     		this.properties = properties;     	}     	     	     	     }  } [/code]   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=89289","closed","status: invalid,","spring-projects-issues","2010-05-14T02:14:26Z","2019-01-12T05:32:02Z"
"","11742","servlet mapping disbatcher servlet does not appear to be working as expected. [SPR-7082]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=solid)** opened **[SPR-7082](https://jira.spring.io/browse/SPR-7082?redirect=false)** and commented  Spring servlet mapping does not seem to work when a path prefix is specified as ""/somedirectory/**"".  The url I am trying to hit is http://localhost:8080/myapp/resources/logo.png.  Of course the spring logging says that no handler is mapped (or some similar message) and it returns a 404.  However if I change the servlet mapping from a path prefix to ""/**"" , suddenly the method starts being triggered as expected.  Why does the path prefix not work?  Is there something wrong with a non-html extension in the URL (.png)?  Here is my servlet mapping:  ```xml      springMVC     org.springframework.web.servlet.DispatcherServlet              contextConfigLocation                     springMVC     /resources/*  ```  Here is the controller that is supposed to be mapped:  ```java @RequestMapping(value = ""/resources/{resourceName:.*}"", method = RequestMethod.GET) public void renderPages(@PathVariable(""resourceName"" ) String resourceName,                         HttpServletResponse resp) {     LOGGER.error(""[""+resourceName+""]"");       // load file data from database and write to output stream here } ```    ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=87481","closed","status: invalid,","spring-projects-issues","2010-04-08T02:06:32Z","2019-01-12T05:32:14Z"
"","11526","Ability to configure retry on scheduled tasks either in annotation on in XML config [SPR-6860]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=attack7)** opened **[SPR-6860](https://jira.spring.io/browse/SPR-6860?redirect=false)** and commented  I've recently deployed an application with a scheduled task that used a required JPA-enhanced class that was mistakenly not listed in the persistence.xml file.  An exception is thrown when the method is run  - as expected, but the exception is thrown ~ 10,000 times.  It appears that this is because some kind of re-try behavior in the tasks scheduler.  If I'm correct about this, it would be convenient to be able to set a number of times to re-try a method that throws an exception during a scheduled task.   ---  **Affects:** 3.0 GA  3 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-17T03:40:08Z","2015-09-22T16:33:57Z"
"","11525","Scheduled tasks seem to run twice [SPR-6859]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=attack7)** opened **[SPR-6859](https://jira.spring.io/browse/SPR-6859?redirect=false)** and commented  I posted this on the forum, but with no response... I wondered if you all could look into it.  I was stubbing out some code that I'd like to run on a schedule, and just to test it, I have it running once every 60 seconds. I noticed that in my logging, the method seems to be executed twice. To make sure it wasn't a logging issue, I put a static int counter into the class and have it increment on each call. So I can confirm the method is actually being run twice.  I suspect that this is something like doing a context:component-scan twice-over and resulting in double execution, but can't seem to locate the problem.  I thought I would check first if there were any pointers.  The class Code: /** * Date: Feb 15, 2010  * Time: 10:54:36 AM   */   `@Component`   public class DataHarvestingServiceImpl implements DataHarvestingService {   private static final Logger logger = Logger.getLogger(DataHarvestingServiceImpl.class);    private static int count = 0;    `@Override`   //  Every night at 1 AM   // `@Scheduled`(cron = ""* * 1 * * ?"")    `@Scheduled`(cron = ""0 * * * * ?"")   public void collectSocialMediaData() {   logger.info(""Starting data retrieval at "" + new Date(System.currentTimeMillis()));        logger.info(""Finished media data retrieval at "" + new Date(System.currentTimeMillis()));       System.out.println(""count is "" + count++);    }  } The configuration  Code:  \  \                                      \ The output I see: Code: 11316 [searchScheduler-1] INFO  com.vodori.cms.feature.socialMedia.service.impl.DataHarvestingServiceImpl  - Starting data retrieval at Mon Feb 15 14:56:00 CST 2010 11321 [searchScheduler-1] INFO  com.vodori.cms.feature.socialMedia.service.impl.DataHarvestingServiceImpl  - Finished media data retrieval at Mon Feb 15 14:56:00 CST 2010 count is 0 11321 [searchScheduler-1] INFO  com.vodori.cms.feature.socialMedia.service.impl.DataHarvestingServiceImpl  - Starting data retrieval at Mon Feb 15 14:56:00 CST 2010 11321 [searchScheduler-1] INFO  com.vodori.cms.feature.socialMedia.service.impl.DataHarvestingServiceImpl  - Finished media data retrieval at Mon Feb 15 14:56:00 CST 2010 count is 1 71318 [searchScheduler-1] INFO  xxx.service.impl.DataHarvestingServiceImpl  - Starting data retrieval at Mon Feb 15 14:57:00 CST 2010 71318 [searchScheduler-1] INFO  xxx.service.impl.DataHarvestingServiceImpl  - Finished media data retrieval at Mon Feb 15 14:57:00 CST 2010 count is 2 71318 [searchScheduler-1] INFO  xxx.service.impl.DataHarvestingServiceImpl  - Starting data retrieval at Mon Feb 15 14:57:00 CST 2010 71318 [searchScheduler-1] INFO  xxx.service.impl.DataHarvestingServiceImpl  - Finished media data retrieval at Mon Feb 15 14:57:00 CST 2010 count is 3 Any insight very much appreciated.  ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=84747  **Issue Links:** - #11322 ScheduledAnnotationBeanPostProcessor registers schedules twice in web application (_**""duplicates""**_) - #14094 CronSequenceGenerator fails to accurately compute earliest next date when using second expression - #11669 CronTrigger is not triggered at correct time  5 votes, 21 watchers","closed","in: core,","spring-projects-issues","2010-02-17T03:36:40Z","2020-11-16T11:35:56Z"
"","11283","make private methods protected in DefaultLifecycleProcessor for extension [SPR-6617]","**[Matt Goldspink](https://jira.spring.io/secure/ViewProfile.jspa?name=mattgoldspink)** opened **[SPR-6617](https://jira.spring.io/browse/SPR-6617?redirect=false)** and commented  We have a use case where we'd like to be able to stop and start all SmartLifecycle beans that implement a specific interface but in the correct order using JMX. The DefaultLifecycleProcessor could be extended for our use case and we would simply override the getLifecycleBeans() method and return the subset of beans that meet our requirements. It would be great if this method could be made protected to allow for this kind of extension.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/431fd5bb222c321957ae8853ff8e47891fafe093","closed","type: enhancement,","spring-projects-issues","2009-12-27T07:13:20Z","2012-06-19T03:43:11Z"
"","11057","BeanDefinitions are no longer singletons by default which breaks apache cxf [SPR-6391]","**[Matt Goldspink](https://jira.spring.io/secure/ViewProfile.jspa?name=mattgoldspink)** opened **[SPR-6391](https://jira.spring.io/browse/SPR-6391?redirect=false)** and commented  While trying to migrate to 3.0 RC2 I found that my cxf application would not start up. After digging around a bit I found that the default scope for all beans is no longer singleton scope (found in AbstractBeanDefinition) and this breaks a lot of core code in CXF. Is this an intentional change? If so what was the reasoning as it seems like it could have a lot of consequences on other frameworks which make use of the default scope for beans being singletons. Is there any workaround?   ---  **Affects:** 3.0 RC2","closed","in: core,","spring-projects-issues","2009-11-19T02:09:22Z","2012-06-19T03:44:03Z"
"","11049","INDEX.LIST uses incorrect jar names [SPR-6383]","**[Matt Goldspink](https://jira.spring.io/secure/ViewProfile.jspa?name=mattgoldspink)** opened **[SPR-6383](https://jira.spring.io/browse/SPR-6383?redirect=false)** and commented  The INDEX.LIST files generated in the jars have the incorrect jar names in them which don't match up to those in download for 3.0 RC2. For example the aop jar contains:  ``` JarIndex-Version: 1.0  org.springframework.aop.jar org org/springframework org/springframework/aop org/springframework/aop/aspectj org/springframework/aop/aspectj/annotation org/springframework/aop/aspectj/autoproxy org/springframework/aop/config org/springframework/aop/framework org/springframework/aop/framework/adapter org/springframework/aop/framework/autoproxy org/springframework/aop/framework/autoproxy/target org/springframework/aop/interceptor org/springframework/aop/scope org/springframework/aop/support org/springframework/aop/support/annotation org/springframework/aop/target org/springframework/aop/target/dynamic overview.html ```  but the actual jar in the zip file downloaded is: org.springframework.aop-3.0.RC2.jar  I'm not sure what problems this causes but one of our users pointed this out a while back in rc1.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #13846 application context created within java web start application triggers many http requests for non existing resorces  (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2fe74a4ef0cb8f667c4fa342e649bc75da4d8a6a  11 votes, 15 watchers","closed","has: votes-jira,","spring-projects-issues","2009-11-18T02:08:56Z","2019-01-11T14:38:59Z"
"","10989","Add AMF support to Spring REST [SPR-6323]","**[Matt Goldspink](https://jira.spring.io/secure/ViewProfile.jspa?name=mattgoldspink)** opened **[SPR-6323](https://jira.spring.io/browse/SPR-6323?redirect=false)** and commented  It would be awesome if there was away to have the content negotiation in Spring 3.0 also handle support for AMF for Flex frontends sending:  application/x-amf  Or even calling urls like:  http://example.com/hotels.amf  Not sure if this should live in Spring or Spring BlazeDS, but since JSON and others are already in the core framework filing this here for now.   ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-11-10T03:27:02Z","2014-05-27T14:25:29Z"
"","10975","Tiles 2.1 support in Spring 3.0 is not compatible with Tomcat 5.5 [SPR-6309]","**[Matt Goldspink](https://jira.spring.io/secure/ViewProfile.jspa?name=mattgoldspink)** opened **[SPR-6309](https://jira.spring.io/browse/SPR-6309?redirect=false)** and commented  We have some users who tried to upgrade to Spring 3.0.RC1 but could not because they were using Spring MVC with tiles. Unfortunately since Tiles 2.1.x they have added a dependency on the Tomcat 6:  References for the conclusion we came to are:  http://issues.apache.org/struts/browse/TILES-268, http://issues.apache.org/struts/browse/TILES-447  and http://svn.apache.org/viewvc?view=revision&revision=798098  We do not have Tomcat 6.x in our firms environment and it will not be ready for about 6 months due to other on going priorities. We would really like to let all our users use Spring 3.0 but this is issue is unfortunately a blocker for those guys and we've not yet found workaround.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4e233047c805b56c4e101f5fcce97b4d66c29234  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-05T23:38:53Z","2012-06-19T03:43:11Z"
"","10974","Spring Expression Language creates systemProperties bean calling System.getProperties() which in enterprise shared containers is locked down [SPR-6308]","**[Matt Goldspink](https://jira.spring.io/secure/ViewProfile.jspa?name=mattgoldspink)** opened **[SPR-6308](https://jira.spring.io/browse/SPR-6308?redirect=false)** and commented  We have a shared hosting environment for all our Tomcat containers in the firm and multiple teams may have webapps in the same Tomcat instance. As such the security policy is setup to disallow access to System.getProperties() as this will return a mutable view of all the system properties and if one application were to manipulate these it may adversely affect other applications in the same container.  We know the workaround for now is to simply drop in a bean named systemProperties but we would prefer a fix on the Spring side for this because it will likely catch all other groups that run a similar model to us. It seams like adding a simple bean which just delegates the call to System.getProperty(""name"") (which is not locked down) would be good enough to do this.  ---  **Affects:** 3.0 RC1  **Issue Links:** - #14994 SPR-6308 problem still exists in Spring Release 3.1.3 - #15921 StandardEnvironment's system environment access produces warning with stacktrace on WebSphere - #10954 getenv.* : Access denied (java.lang.RuntimePermission getenv.*)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/68f57aa953015d3145efa2bacdeff97e2448ee88","closed","type: enhancement,","spring-projects-issues","2009-11-05T23:29:04Z","2019-01-11T14:31:52Z"
"","11632","Typo in 'Logging' section [SPR-6967]","**[Matt Altermatt](https://jira.spring.io/secure/ViewProfile.jspa?name=matt.altermatt)** opened **[SPR-6967](https://jira.spring.io/browse/SPR-6967?redirect=false)** and commented  At the end of the Logging section, the last paragraph of 'Not Using Commons Logging', it states:  so to fix it a new one has to be prvided.  Where it should be:  so to fix it a new one has to be provided.  Thanks   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1d6f37497017cabe466aac0f752135623d584d9a","closed","type: documentation,","spring-projects-issues","2010-03-10T06:10:48Z","2012-06-19T03:42:53Z"
"","11314","Allowing a flexible reference to JBoss Work Manager [SPR-6648]","**[Matias Urbieta](https://jira.spring.io/secure/ViewProfile.jspa?name=matiasurbieta)** opened **[SPR-6648](https://jira.spring.io/browse/SPR-6648?redirect=false)** and commented  I'm currently defining different work managers at jboss as for custom concurrency configuration. When i tried to use JBossWorkManagerUtils for resolving the a given work manager,  i realized that it only resolves the default work manager published by jboss using JMX technology under  ""jboss.jca:service=WorkManager"" object name. So i propose the following refactoring where JBossWorkManagerUtils provides two methods: * getDefaultWorkManager : resolves the default jboss workmanager using ""jboss.jca:service=WorkManager"" as object name * getWorkManager(wm) : produces a JMX lookup process using ""wm"" parameter as workmanager's object name.  The JBossWorkManagerTaskExecutor was refactorized in order to be compliant with the new version of JBossWorkManagerUtils. Additionally a new property was added called ""workManagerObjectName"" which allows to specify a custom work manager object name that later is used for invoking JBossWorkManagerUtils.getWorkManager method. [#JBossWorkManagerUtils] [^JBossWorkManagerTaskExecutor]   ---  **Affects:** 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6  **Attachments:** - [JBossWorkManagerTaskExecutor.java](https://jira.spring.io/secure/attachment/16069/JBossWorkManagerTaskExecutor.java) (_1.47 kB_) - [JBossWorkManagerUtils.java](https://jira.spring.io/secure/attachment/16070/JBossWorkManagerUtils.java) (_3.10 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ba1dd47b099970be707f81e4e515a9d122304e7","closed","type: enhancement,","spring-projects-issues","2010-01-06T05:10:17Z","2012-06-19T03:43:44Z"
"","11420","Validator should be generic [SPR-6754]","**[Mathieu Larchet](https://jira.spring.io/secure/ViewProfile.jspa?name=mlarchet)** opened **[SPR-6754](https://jira.spring.io/browse/SPR-6754?redirect=false)** and commented  Now that there's no more need for Java 1.4 compatibility, Validator interface should use generics. There are 2 attached files with this issue, first one is a generic Validator interface (named SimpleValidator). Second one is an abstract class (named AbstractValidator) using implementing old Validator interface but offering a 'generized' validation method.   ---  **Affects:** 3.0 GA  **Attachments:** - [AbstractValidator.java](https://jira.spring.io/secure/attachment/16109/AbstractValidator.java) (_530 bytes_) - [SimpleValidator.java](https://jira.spring.io/secure/attachment/16108/SimpleValidator.java) (_176 bytes_)  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-22T03:34:49Z","2018-12-28T12:21:22Z"
"","11282","Spring 3 should be in Maven Central Repository [SPR-6616]","**[Mathieu Larchet](https://jira.spring.io/secure/ViewProfile.jspa?name=mlarchet)** opened **[SPR-6616](https://jira.spring.io/browse/SPR-6616?redirect=false)** and commented  Everything is in the title. Despite some blog saying that Spring release repository is synchronized with Maven Central Repository every 6 hours, Spring 3.0 GA is still not available.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2009-12-27T06:25:22Z","2009-12-31T13:47:35Z"
"","11195","DateTimeFormatAnnotationFormatterFactory calls String.isEmpty(), which exists only in JDK1.6+ [SPR-6529]","**[Marty Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=martyjones)** opened **[SPR-6529](https://jira.spring.io/browse/SPR-6529?redirect=false)** and commented  This issue has already been raised (#11061) but was closed as a duplicate and was marked as fixed in RC3.  I looked at the source and as you can see from this snippet that the isEmpty call is still there.  ``` private DateTimeFormatter configureDateTimeFormatterFrom(DateTimeFormat annotation) { 	if (!annotation.pattern().isEmpty()) { 			return forPattern(annotation.pattern()); 	} 	else if (annotation.iso() != ISO.NONE) { 		return forIso(annotation.iso()); 	} 	else { 		return forStyle(annotation.style()); 	} } ```  ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/231c8337d2eb4065732c88235314e9b89cf29d5b","closed","type: bug,","spring-projects-issues","2009-12-07T00:08:00Z","2019-01-11T15:14:47Z"
"","11179","ResourceBundleMessageSource resolution [SPR-6513]","**[Martin Vanek](https://jira.spring.io/secure/ViewProfile.jspa?name=anthavio)** opened **[SPR-6513](https://jira.spring.io/browse/SPR-6513?redirect=false)** and commented  I have \ \ \ \ and mymessages.properties contains (default) english strings mymessages_cs.properties contains czech strings  Request has header Accept-Language	en-US,en;q=0.8,en-us;q=0.5,cs;q=0.3 When JSP is rendered... Request LocaleContextHolder is en_US JVM Locale.getDefault() is cs_CZ  11:23:17.361 [http-8080-1] DEBUG o.s.c.s.ReloadableResourceBundleMessageSource - No properties file found for [classpath:mymessages_en_US] - neither plain properties nor XML 11:23:17.361 [http-8080-1] DEBUG o.s.c.s.ReloadableResourceBundleMessageSource - No properties file found for [classpath:mymessages_en] - neither plain properties nor XML 11:23:17.377 [http-8080-1] DEBUG o.s.c.s.ReloadableResourceBundleMessageSource - No properties file found for [classpath:mymessages_cs_CZ] - neither plain properties nor XML 11:23:17.377 [http-8080-1] DEBUG o.s.c.s.ReloadableResourceBundleMessageSource - Loading properties [mymessages_cs.properties]  So czech resource bundle is chosen and I think that it is not not cool.   ---  **Affects:** 3.0 RC3","closed","status: declined,","spring-projects-issues","2009-12-03T20:46:45Z","2019-01-12T16:38:42Z"
"","11150","Change com.springsource.junit dependency compile scope to test scope in org.springframework.aspects [SPR-6484]","**[Martin Vanek](https://jira.spring.io/secure/ViewProfile.jspa?name=anthavio)** opened **[SPR-6484](https://jira.spring.io/browse/SPR-6484?redirect=false)** and commented  This is just not cool in org.springframework.aspects's pom.xml. It is generated from ivy.             org.junit       com.springsource.org.junit       4.7.0       compile         ---  **Affects:** 3.0 RC3","closed","type: task,","spring-projects-issues","2009-12-01T05:24:04Z","2012-06-19T03:44:10Z"
"","11072","StringToClassConverter missing [SPR-6406]","**[Martin Vanek](https://jira.spring.io/secure/ViewProfile.jspa?name=anthavio)** opened **[SPR-6406](https://jira.spring.io/browse/SPR-6406?redirect=false)** and commented  When new ConversionService is used, \ this will fail    org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from [java.lang.String] to [java.lang.Class]  Probably due to nonexisting StringToClassConverter or such... (and no registration of it in DefaultConversionService)   ---  **Affects:** 3.0 RC2","closed","type: enhancement,","spring-projects-issues","2009-11-21T23:44:53Z","2012-06-19T03:42:51Z"
"","10966","ModelAndViewAssert.assertViewName() is not nullsafe [SPR-6300]","**[Martin Flower](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvestris)** opened **[SPR-6300](https://jira.spring.io/browse/SPR-6300?redirect=false)** and commented  line 204 contains expectedName.equals()  it could be improved to check for expectedName != null   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/613b4d182b23b474db4e43257cf75ef8454e6bdf","closed","type: bug,","spring-projects-issues","2009-11-04T19:23:58Z","2012-06-19T03:42:43Z"
"","10899","RESTful URLs with path variables containing dots are incorrectly mapped [SPR-6231]","**[Martin Desrosiers](https://jira.spring.io/secure/ViewProfile.jspa?name=mdesrosiers)** opened **[SPR-6231](https://jira.spring.io/browse/SPR-6231?redirect=false)** and commented  The change made in #10208 effectively strips any file extension in GET requests in order to exclude it from the path variable value. Unfortunately, this prevents queries that contains dots as part of the path variable, i.e. an email address. Therefore the following request:  http://localhost:8080/rest/emailaddress/email/test%40mail.com  with the following controller request mapping:  `@RequestMapping`(value = ""/email/{email}"", method = RequestMethod.GET) public ModelAndView getEmail(`@PathVariable`(""email"") final String email) { }  will map the value ""test@mail"" to the variable email.  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10832 a Uri Value is incorrectly extracted if it contains '.'. (_**""duplicates""**_) - #10208 ReSTful URLs with content type extension do not work properly","closed","in: web,","spring-projects-issues","2009-10-13T04:29:28Z","2019-01-12T16:50:08Z"
"","10897","Radiobutton/radiobuttons Enum binding fails with IllegalStateException [SPR-6229]","**[Martin Caslavsky](https://jira.spring.io/secure/ViewProfile.jspa?name=martiner)** opened **[SPR-6229](https://jira.spring.io/browse/SPR-6229?redirect=false)** and commented  Submitting form with radiobutton(s) tag:  ```  ```  fails with:  ``` Failed to convert property value of type java.lang.String[] to required type MyEnum for property myenumproperty;  nested exception is java.lang.IllegalStateException: Cannot convert value of type [java.lang.String[]]  to required type [MyEnum] for property myenumproperty: no matching editors or conversion strategy found ```  Works well in M3  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10858 Binding Enum values to beans broken in Spring 3 RC1 (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2009-10-13T02:26:43Z","2019-01-12T16:50:09Z"
"","10955","RequestContextListener initializes Log4J ahead of call to Log4jConfigListener [SPR-6288]","**[Martin Buch](https://jira.spring.io/secure/ViewProfile.jspa?name=mabuch)** opened **[SPR-6288](https://jira.spring.io/browse/SPR-6288?redirect=false)** and commented  This bug is related to #10645 which I believe is not solved at all (neither in 3.0 nor in 2.5.x).  In web.xml I have Log4jConfigListener declared ahead of RequestContextListener, but the application server container is instantiating RequestContextListener before Log4jConfigListener's requestInitialized is called. This causes Log4J Logger member variable of RequestContextListener initialized: RequestContextListener protected final Log logger = LogFactory.getLog(getClass());  The problem seems like the reporter of #10645 describes: At least in Tomcat 6, the listeners all appear to be instantiated, then the contextInitialized(...) method is called on them in the order declared in the web.xml.  It appears that the same happens with Oracle OC4J and maybe Weblogic and other AppServers.  The only solution for me to overcome the problem is to complety define my own copy of RequestContextListener without logger member.  ---  **Affects:** 2.5.5, 2.5.6, 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f595b67618487b930a1869d5d86b15171743f578","closed","type: bug,","spring-projects-issues","2009-10-30T12:56:36Z","2019-01-11T15:10:55Z"
"","11664","Performance improvement for TransactionSynchronizationManager.getSynchronizations() [SPR-6999]","**[Martin Aubele](https://jira.spring.io/secure/ViewProfile.jspa?name=aubelix)** opened **[SPR-6999](https://jira.spring.io/browse/SPR-6999?redirect=false)** and commented  TransactionSynchronizationManager.getSynchronizations() is a bottleneck in our Liferay Portal:  List is sorted even if empty. During the whole function an array and several lists are created whithout any need.  Please see the attachement for a fix.  Thanks, Martin   ---  **Affects:** 3.0.1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/16310/patch.txt) (_1.62 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5dc59aaa7b5c888b433636f322ed5dcfa7305418, https://github.com/spring-projects/spring-framework/commit/19b4618fb5eca3a9212caafecb1e7ad85ce78bd4","closed","type: enhancement,","spring-projects-issues","2010-03-17T10:15:22Z","2012-06-19T03:43:35Z"
"","11619","Spring EL: support resolution of bean reference in indexer e.g #{someBean[otherBean]} [SPR-6954]","**[Martin Ahrer](https://jira.spring.io/secure/ViewProfile.jspa?name=martinahrer)** opened **[SPR-6954](https://jira.spring.io/browse/SPR-6954?redirect=false)** and commented  Looks like the Spring EL parser interprets an index always as a value but never as a bean reference. However supporting this feature would come handy in many occasions.  {Code:title=springel.xml}                                                                               {Code}  {Code} `@ContextConfiguration`(locations = { ""classpath:springel.xml"" }) public class SpringElIndexedPropertyTest extends AbstractJUnit4SpringContextTests {      @Resource     private String selected;          @Test     public void testSelected() {         assertEquals(""A-value"", selected);     }  } {Code}   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=85582","closed","type: enhancement,","spring-projects-issues","2010-03-07T02:57:33Z","2018-12-28T11:46:14Z"
"","11661","Allow mvc:interceptor to have a ref to a bean [SPR-6996]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-6996](https://jira.spring.io/browse/SPR-6996?redirect=false)** and commented  Currently it is quite hard to reuse beans with the mvc:interceptors namespace. Interceptors must be specified as inner beans to mvc:interceptors or mvc:interceptor, it would be nice if mvc:interceptor would have a ref element to reference a HandlerInterceptor instead of defining it with an inner bean definition.  This would also allow for re-use of HandlerInterceptors.   ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?p=289456  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1784df8d3ee4c0ef27f78c56f393be94afe6d017  15 votes, 10 watchers","closed","has: votes-jira,","spring-projects-issues","2010-03-16T19:11:31Z","2012-06-19T03:42:53Z"
"","11469","Improve documentation on component-scan using a ContextLoaderListener and DispatcherServlet [SPR-6803]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-6803](https://jira.spring.io/browse/SPR-6803?redirect=false)** and commented  Since the introduction of  I answer more and more question on issues regarding transactions and proxying in general. Mostly due to the fact that tx:annotation-driven is configured in the root ApplicationContext and that context:component-scan is defined in both the root as well as the servlet ApplicationContext. This results in 2 instances of a `@Service`/`@Repository` being available.  A hint/example in the web chapter of the reference guide would help here on how to configure the context:component-scan in such a case. 1. only scan `@Controller` in the servlet and everything but `@Controller` in the root. 2. Configure mvc to look for `@Controller` in the root context, leaving the servlet context almost clean.  either way should work, although I guess that option 1 is the preffered way.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=282436#post282436","closed","status: bulk-closed,","spring-projects-issues","2010-02-04T23:44:10Z","2019-01-12T03:50:33Z"
"","10943","CookieGenerator.DEFAULT_COOKIE_MAX_AGE is no longer available. Not backwards compatible [SPR-6276]","**[Mark Spritzler](https://jira.spring.io/secure/ViewProfile.jspa?name=bytor99999)** opened **[SPR-6276](https://jira.spring.io/browse/SPR-6276?redirect=false)** and commented  After upgrading to Spring 3.0.0.RC the use of the CookieGenerator.DEFAULT_COOKIE_MAX_AGE constant no longer works. It has been removed from the class. This is breaking our code that worked with 2.5.2  // This probably should be another jira, but I am adding it to the contents here. Since max age is an int and there isn't a way to set a coookie to never expire. Any value we are setting sets the expiration to that time, but also until session expires. We don't want the cookie to expire, especially if the session expires.  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10505 CookieGenerator default max age value leads to expiration date back in 1977  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d59db79440474be91fed8d163cb6865e80f9fde","closed","type: bug,","spring-projects-issues","2009-10-26T13:34:18Z","2019-01-11T15:11:32Z"
"","11488","Having GET and POST methods for the same URL on different classes causes error when using annotation-driven [SPR-6822]","**[Mark Hopkins](https://jira.spring.io/secure/ViewProfile.jspa?name=markhopkins)** opened **[SPR-6822](https://jira.spring.io/browse/SPR-6822?redirect=false)** and commented  Given the following:  ``` @Controller public class Controller1 {   @RequestMapping(value=""/someurl"", method=GET)   public String doGet() {     return ""view"";	   }	 } ```  ``` @Controller public class Controller2 {   @RequestMapping(value=""/someurl"", method=POST)   public String doPost() {     // do something different for posts	     return ""view"";	   }	 } ```  ```xml ....                     .... ```  you get the following exception:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0' defined in ServletContext resource [/WEB-INF/web-application-config.xml]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Cannot map handler [controller2] to URL path [/someurl]: There is already handler [Controller1@1830ec7] mapped. 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:557) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:842) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:416) 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:443) 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:459) 	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:340) 	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:307) 	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) ... ```  In our specific domain it makes most sense to have the GET and POST for the same URL split over two different classes.   ---  **Affects:** 3.0 GA  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-10T11:23:50Z","2019-01-11T16:47:21Z"
"","11513","Enable Executor qualification with @Async [SPR-6847]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6847](https://jira.spring.io/browse/SPR-6847?redirect=false)** and commented  The approach should be consistent with `@Transactional`: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#tx-multiple-tx-mgrs-with-attransactional  The bean name may be considered, but the 'qualifier' is generally recommended.  ``` @Async(""beanNameOrQualifierValue"") public void someOp() {    ... } ```  ---  **Affects:** 3.0 GA  **Sub-tasks:** - #14079 Backport ""Enable Executor qualification with `@Async`""  **Issue Links:** - #13956 `@Async` groups (_**""is duplicated by""**_) - #11705 Allow `@Async` to specify which executor to use (_**""is duplicated by""**_) - #14209 Issue with `@Async` in version 3.1.2 linking to the task executor it is assigned to (instead of the default) - #13338 Introduce qualifier in `@Cacheable` for cache manager name - #18792 Enable Executor qualification with `@Scheduled` - #18392 BeanFactoryAnnotationUtils.qualifiedBeanOfType does not work for `@Qualifier` on bean class  14 votes, 14 watchers","closed","has: votes-jira,","spring-projects-issues","2010-02-15T08:21:10Z","2019-01-13T07:55:28Z"
"","11431","LinkedMultiValueMap should implement Serializable [SPR-6765]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6765](https://jira.spring.io/browse/SPR-6765?redirect=false)** and commented   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0968e9fbd063c3200586e2454322f2ede6cc7ee8","closed","type: enhancement,","spring-projects-issues","2010-01-25T01:33:51Z","2012-06-19T03:44:19Z"
"","11430","ReflectiveMethodResolver should provide a MethodFilter strategy [SPR-6764]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6764](https://jira.spring.io/browse/SPR-6764?redirect=false)** and commented  It would be convenient if the resolver implementation provided a hook for more fine-grained control. What I have done in the meantime is added the following:  ``` public MethodExecutor resolve(EvaluationContext context,       Object targetObject, String name, Class[] argumentTypes) throws AccessException {     try {       TypeConverter typeConverter = context.getTypeConverter();       Class type = (targetObject instanceof Class ? (Class) targetObject : targetObject.getClass());        // added this for Spring Integration message processor       Method[] methods = ObjectUtils.containsElement(this.filteredTypes, type) ?             this.methodFilter.filter(type.getMethods()) : type.getMethods();    ... ```    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66f708392e463a564ecf99caf057add20f6ff395","closed","type: enhancement,","spring-projects-issues","2010-01-25T00:33:47Z","2012-06-19T03:43:58Z"
"","11429","Enable more control of StandardEvaluationContext strategies [SPR-6763]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6763](https://jira.spring.io/browse/SPR-6763?redirect=false)** and commented  Currently, there are only 'add' methods for ConstructorResolver, MethodResolver, and PropertyAccessor strategies. It would be nice to have setter methods and possibly clear/remove methods.  In my case, I would like to replace the existing MethodResolver with a new one, but otherwise the StandardEvaluationContext works fine as-is.  Perhaps another option is to provide a base class that is essentially an ""empty"" version of what the StandardEvaluationContext provides (same strategies but not yet configured). Another idea (perhaps going too far) would be to provide a utility class with factory methods.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ca1f11ce2dbc70d4e3e6306c2f5a26666a1504a","closed","type: enhancement,","spring-projects-issues","2010-01-25T00:28:15Z","2012-06-19T03:43:53Z"
"","11426","SpEL evaluation for MethodReference causes multiple invocations when an Exception is thrown [SPR-6760]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6760](https://jira.spring.io/browse/SPR-6760?redirect=false)** and commented  I discovered this while tracking down a Spring Integration issue: https://jira.springsource.org/browse/INT-969  The problem is in the getValueInternal(..) method of MethodReference. There is a retry with a new MethodExecutor after one AccessException, yet the AccessException is also the root cause of **any** Exception thrown from the actual code being invoked. Here's an excerpt from the relevant code:  ``` MethodExecutor executorToUse = this.cachedExecutor; if (executorToUse != null) {    try {       return executorToUse.execute(...);    }    catch (AccessException ae) {       // this is OK - it may have gone stale due to a class change,       // let's try to get a new one and call it before giving up       this.cachedExecutor = null;    } }  // either there was no accessor or it no longer existed executorToUse = findAccessorForMethod(this.name, getTypes(arguments), state); this.cachedExecutor = executorToUse; try {    return executorToUse.execute(...); } catch (AccessException ae) {    throw new SpelEvaluationException(...) } ```    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c35697c79a944c2083a067fd9ec5082a54dafcf","closed","in: core,","spring-projects-issues","2010-01-24T15:06:33Z","2012-06-19T03:43:55Z"
"","11336","@Scheduled annotation should support property placeholder values [SPR-6670]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6670](https://jira.spring.io/browse/SPR-6670?redirect=false)** and commented  This would promote externalization of the actual scheduling configuration.  Rather than:  ``` @Scheduled(cron = ""0 0 9-17 * * MON-FRI"") public void doSomething() {...} ```  The cron expression could be in a properties file, so the annotation no longer contains a hard-coded value:  ``` @Scheduled(""${schedules.businessHours}"") public void doSomething() {...} ```  This should also work with meta-annotations, e.g.:  ``` @Scheduled(cron = ""${schedules.businessHours}"") @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME)	 public @interface BusinessHours {} ```  ...would apply to:  ``` @BusinessHours public void doSomething() {...} ```  ---  **Affects:** 3.0 GA  **Issue Links:** - #12722 `@Scheduled`'s int attributes do not allow for placeholder values  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/410dd0aa9fa5a0970aa60849cfcac94dc540ddb4","closed","type: enhancement,","spring-projects-issues","2010-01-11T05:45:09Z","2019-01-13T07:56:05Z"
"","11335","Add support for @Scheduled as a meta-annotation [SPR-6669]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6669](https://jira.spring.io/browse/SPR-6669?redirect=false)** and commented  Rather than requiring the `@Scheduled` annotation directly on a method, we should also support it as a meta-annotation. This would not only avoid a direct dependency on the Spring annotation class, but more importantly, it would enable the use of custom scheduling annotations with encapsulated trigger information to be applied via simplified annotations.  For example, the following annotation...  ``` @Scheduled(cron = ""0 0 * * * ?"") @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface Hourly {} ```  ...could be applied to a method:  ``` public class ReportGenerator {      @Hourly     public void generateReport() {       ...     } } ```    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1284086ffad7eccc43b883c865d72e58de83c905","closed","type: enhancement,","spring-projects-issues","2010-01-11T04:28:42Z","2012-06-19T03:44:14Z"
"","11310","The 'id' value from an 'executor' element in the task namespace should be used as the thread name prefix [SPR-6644]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6644](https://jira.spring.io/browse/SPR-6644?redirect=false)** and commented  The 'scheduler' element properly handles this, but we apparently lost this behavior for 'executor' during the refactoring to a TaskExecutorFactoryBean (see: #11034).  We need to add a unit test similar to the following for the ""scheduler"" element:  ``` @Test public void threadNamePrefix() {     ThreadPoolTaskScheduler scheduler = (ThreadPoolTaskScheduler) this.context.getBean(""customScheduler"");     assertEquals(""customScheduler-"", scheduler.getThreadNamePrefix()); } ```  ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ab4fa704245f33bae20157e24ead42e67b84d6a","closed","in: core,","spring-projects-issues","2010-01-05T05:47:25Z","2019-01-11T16:14:09Z"
"","11126","Add namespace support for ""phase"" on JMS listener-container [SPR-6460]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6460](https://jira.spring.io/browse/SPR-6460?redirect=false)** and commented  This will pass through to the container's setPhase() method. The value there is used to determine ordering in the startup and shutdown process according to the logic within DefaultLifecycleProcessor.  This should be available for both the ""listener-container"" and ""jca-listener-container"" elements.  ---  **Issue Links:** - #10179 Phased Lifecycle Stop  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1ac7b95c1dcc1792b4f351a6700dd42363f9f1e0, https://github.com/spring-projects/spring-framework/commit/dc24944cd9a237d7496e6f5db21e98692263502a","closed","type: enhancement,","spring-projects-issues","2009-11-27T02:20:10Z","2019-01-11T15:38:11Z"
"","11030","The schema for the task namespace has not been published [SPR-6364]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6364](https://jira.spring.io/browse/SPR-6364?redirect=false)** and commented  The schema should be available at: http://www.springframework.org/schema/task/spring-task-3.0.xsd   ---  **Affects:** 3.0 RC2","closed","in: core,","spring-projects-issues","2009-11-16T07:28:09Z","2012-06-19T03:44:05Z"
"","10973","Quartz scheduler should not start until context is refreshed [SPR-6307]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6307](https://jira.spring.io/browse/SPR-6307?redirect=false)** and commented  This is the same basic issue as #9393  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91297d98636fee4c4e84fc720e6073e70127c62e","closed","type: enhancement,","spring-projects-issues","2009-11-05T09:23:39Z","2019-01-11T14:31:47Z"
"","10908","Add namespace support for ErrorHandler on MessageListener containers [SPR-6240]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6240](https://jira.spring.io/browse/SPR-6240?redirect=false)** and commented  An ""error-handler"" attribute should be available on the \ element in the JMS namespace.  It will provide a reference to any bean implementing the ErrorHandler interface.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0400b68afbbacc6229a25c6b278cc8cb23be6dc3","closed","type: enhancement,","spring-projects-issues","2009-10-15T01:51:22Z","2012-06-19T03:42:42Z"
"","11856","Spring 3 classpath scanning fails on JBoss AS 6.0.0.M3 [SPR-7197]","**[Marius Bogoevici](https://jira.spring.io/secure/ViewProfile.jspa?name=mbogoevici)** opened **[SPR-7197](https://jira.spring.io/browse/SPR-7197?redirect=false)** and commented  Context scanning fails in JBoss AS 6.0.0.M3 due to VFS issues. The VFS classes have moved from org.jboss.virtual to org.jboss.vfs. As well, a few methods have changed their names. Therefore, the fixes provided for #9793 need an update to match the current package structure.  I will attached a patch that abstracts the VFS2 and VFS3 code so that Spring 3 can detect the VFS version and run in either environments (JBoss AS 5 and JBoss AS 6).  ---  **Affects:** 3.0.2  **Attachments:** - [vfs.patch](https://jira.spring.io/secure/attachment/16549/vfs.patch) (_140.13 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cbb90236dc3f47cff593b0feda94832c6397b7f2, https://github.com/spring-projects/spring-framework/commit/d9a664a5881bab964fd44ed9af2ecccada807c33, https://github.com/spring-projects/spring-framework/commit/578e80c1cf5cf51f6d2b23e5c033838cac58c799, https://github.com/spring-projects/spring-framework/commit/e9ecf5d716c638778f4939004693ca1cc42f8113  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-05-12T16:57:47Z","2019-01-11T13:10:18Z"
"","10925","PropertyPlaceholderConfigurer xml configuration example error in pdf reference [SPR-6257]","**[Marius Barbulescu](https://jira.spring.io/secure/ViewProfile.jspa?name=marius.barbulescu)** opened **[SPR-6257](https://jira.spring.io/browse/SPR-6257?redirect=false)** and commented  At page 73 in the pdf reference documentation:  \ \ \ \ Property tag is closed twice.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46818b038ab2d6d7d4682f4f05c77f2a60b12444","closed","in: core,","spring-projects-issues","2009-10-21T16:35:51Z","2012-06-19T03:42:43Z"
"","11345","Provide PersistenceAnnotationBeanPostProcessor without JNDI dependency. [SPR-6679]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-6679](https://jira.spring.io/browse/SPR-6679?redirect=false)** and commented  org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor currently entends JndiLocatorSupport and catches a couple of NamingException's.  This causes problem when using the PersistenceAnnotationBeanPostProcessor on Google App Engine. So I think it would be good to refactor out common stuff and provide a PersistenceAnnotationBeanPostProcessor (default; also supports JNDI) and a ContextOnlyPersistenceAnnotationBeanPostProcessor. The ContextOnlyPersistenceAnnotationBeanPostProcessor could also be useful in other non-JEE environments where JNDI would not be supported.  I've attached my own ContextOnlyPersistenceAnnotationBeanPostProcessor which is a copy of the PersistenceAnnotationBeanPostProcessor but without JNDI support and dependencies.  Also see these articles realted to this problem on Google App Engine: http://blog.smart-java.nl/blog/index.php/2009/06/05/getting-on-the-cloud/ http://objectuser.wordpress.com/2009/05/19/spring-jpa-in-google-app-engine/  ---  **Affects:** 3.0 GA  **Attachments:** - [ContextOnlyPersistenceAnnotationBeanPostProcessor.java](https://jira.spring.io/secure/attachment/16087/ContextOnlyPersistenceAnnotationBeanPostProcessor.java) (_17.54 kB_)  **Issue Links:** - #11297 AnnotationContextUtils.registerAnnotationConfigProcessors() register bean definitions for bean processors even if such beans exist in parent registry, then singletons are removed from config  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cef44f6d5356adcb924f8c60d9de66ede5daeef6","closed","type: enhancement,","spring-projects-issues","2010-01-13T00:38:35Z","2019-01-11T16:17:26Z"
"","11307","Move org.springframework.js.resource.ResourceServlet to Spring framework core [SPR-6641]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-6641](https://jira.spring.io/browse/SPR-6641?redirect=false)** and commented  Spring Webflow's org.springframework.js.resource.ResourceServlet is very useful for serving js, images etc. from a jar archive.  This servlet was written to serve js files needed for webflow, but it can be used more in general. So hence I think it would be good to move/copy this servlet to Spring core web.  ---  **Issue Links:** - #11776 Add ResourceHttpRequestHandler for efficiently serving static resouces (_**""is superseded by""**_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-05T00:27:58Z","2019-01-11T16:13:47Z"
"","11246","context:property-placeholder has no property attribute [SPR-6580]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-6580](https://jira.spring.io/browse/SPR-6580?redirect=false)** and commented  context:property-placeholder has no property attribute. Note that it has a property-ref attribute.  I would like to replace this:  ```   ```  by:  ```   ```    ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2009-12-18T00:41:00Z","2015-09-22T16:33:20Z"
"","11838","404 when a %3B character is used in the URL [SPR-7179]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-7179](https://jira.spring.io/browse/SPR-7179?redirect=false)** and commented  When an ; character is translated by an url function to %3B and used in the url, Spring throws a 404. As %3B is valid for urls, this should not happen.  In my case this occurred when I activated URLescaping by default for Spring in order to stave of XSS attacks. This resulted in some Ampersands (&) translating to &, which ended up in my url translated again as %26amp%3B. Go figure. It's probably not the most common of occurences but still a bug.   ---  **Affects:** 3.0.2","closed","status: invalid,","spring-projects-issues","2010-05-07T04:33:42Z","2019-01-12T05:32:06Z"
"","11390","Documentation update for web.xml configuration and REST [SPR-6724]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-6724](https://jira.spring.io/browse/SPR-6724?redirect=false)** and commented  I spent about a day trying to figure out the best way to migrate my project to a REST style configuration. I'm sure more developers will run into this.  Basically, in order to support REST, your web.xml dispatcher servlet ""suddenly"" has to accept any kind of url-pattern as opposed to *.html. This opens a can of worms as the dispatcher servlet then tries to map all kinds of resources passing through. The solutions is to either  1. Have a prefix in front of all your controller mappings and using url rewriting to rewrite incoming urls to that prefix 2. Use the default servlet to filter out all the static resources.  Both have pros and cons Ad 1. You have to create a prefix. Sucks on an existing project you want to refactor to REST I haven't found an option in Spring to set a ""default"" prefix for all handler mappings. Would be a nice to have. Then you would never need Ad 2  Ad 2. You have to know all file extensions of resources to be served. Possible in most projects, but not all.  The forum reference suggests the possible solutions I found as described above. Definitely something to be aware of at the start of a project. And therefore a good idea to add to the documentation.  Cheers,  Marc   ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=279278#post279278","closed","","spring-projects-issues","2010-01-19T20:13:10Z","2019-01-11T15:42:34Z"
"","11120","SpringSessionContext.getCurrentSession ignores caught exception stacktrace [SPR-6454]","**[Marat Radchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=slonopotamus)** opened **[SPR-6454](https://jira.spring.io/browse/SPR-6454?redirect=false)** and commented  SpringSessionContext.getCurrentSession ignores caught exception stacktrace.  So, instead of  ``` catch (IllegalStateException ex) {   throw new HibernateException(ex.getMessage()); } ```  it should read  ``` catch (IllegalStateException ex) {   throw new HibernateException(ex.getMessage(), ex); } ```    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-11-25T23:18:08Z","2012-06-18T12:44:49Z"
"","11027","TransactionTemplate leaks transactions when TransactionCallback propagates undeclared checked exception [SPR-6361]","**[Marat Radchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=slonopotamus)** opened **[SPR-6361](https://jira.spring.io/browse/SPR-6361?redirect=false)** and commented  TransactionTemplate doesn't neither commit nor rollback on checked exception, causing leakage.  See attached testcase.  ---  **Affects:** 2.5.6  **Attachments:** - [CheckedExceptionTest.java](https://jira.spring.io/secure/attachment/15930/CheckedExceptionTest.java) (_2.61 kB_)  **Issue Links:** - #19560 Clarify rollback-on consistency between DefaultTransactionAttribute and TransactionTemplate - #14781 Remove unreachable code from TransactionTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a7414104219a1bfde0f252588f02c2e34597b220","closed","in: core,","spring-projects-issues","2009-11-16T01:15:39Z","2019-01-11T14:33:47Z"
"","11471","Hibernate cache SPI integration -> LocalRegionFactoryProxy does not implement Hibernate 3.5's getDefaultAccessType() [SPR-6805]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-6805](https://jira.spring.io/browse/SPR-6805?redirect=false)** and commented  RegionFactory.getDefaultAccessType() is a new method added in the latest Hibernate 3.5.0 betas. This needs to be implemented ASAP.  This still works because, AFAIK, this method is used nowhere yet, but if it's there then it means that Hibernate folks plan on it being used pretty soon.  ---  **Attachments:** - [LocalRegionFactoryProxy.java](https://jira.spring.io/secure/attachment/16148/LocalRegionFactoryProxy.java) (_3.50 kB_)  **Issue Links:** - #11053 Add support for the HIbernate RegionFactory cache API to LocalSessionFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b25dc7cc55ae13ba66daf94007aac9b7ef34dade","closed","type: enhancement,","spring-projects-issues","2010-02-05T15:40:37Z","2019-01-11T16:46:18Z"
"","11470","Hibernate cache SPI integration -> LocalRegionFactoryProxy needs a LocalRegionFactoryProxy(Properties) constructor [SPR-6804]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-6804](https://jira.spring.io/browse/SPR-6804?redirect=false)** and commented  Hibernate's RegionFactory interface's Javadoc states that implementations should either provide parameterless constructors, or a constructor that takes a Properties object as its only argument. However, only the second option actually works, since Hibernate's SettingsFactory attempts to find such a constructor via reflection and fails if it does not one.  This is an unresolved Hibernate bug, but affects LocalRegionFactoryProxy which does not work as it currently exists.  Hibernate bug: http://opensource.atlassian.com/projects/hibernate/browse/HHH-3695  This issue is related to: http://jira.springframework.org/browse/SPR-6387  ---  **Affects:** 3.0 GA  **Attachments:** - [LocalRegionFactoryProxy.java](https://jira.spring.io/secure/attachment/16147/LocalRegionFactoryProxy.java) (_3.50 kB_)  **Issue Links:** - #11053 Add support for the HIbernate RegionFactory cache API to LocalSessionFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b25dc7cc55ae13ba66daf94007aac9b7ef34dade","closed","type: bug,","spring-projects-issues","2010-02-05T13:21:11Z","2019-01-11T16:46:14Z"
"","11095","AbstractExcelView did not work with IE [SPR-6429]","**[Manfred Quasten](https://jira.spring.io/secure/ViewProfile.jspa?name=mquasten)** opened **[SPR-6429](https://jira.spring.io/browse/SPR-6429?redirect=false)** and commented  In the Controller a model and view is created :  return  new ModelAndView(""relations.xls"", new ExcelRelationModel(...);  public abstract class AbstractSingleSheetExcelView extends AbstractExcelView {      protected String sheetName = "" "";          @SuppressWarnings(""unchecked"")     @Override     public void buildExcelDocument(Map model, HSSFWorkbook workbook,                                   HttpServletRequest request, HttpServletResponse response) throws Exception {     	// this 2 lines will make it work in IE                 response.setContentType( ""application/ms-excel"" );     	response.setHeader( ""Content-disposition"", ""attachment; filename=bids.xls"" );      	     	buildExcelDocument(model, new HSSFacade(workbook, sheetName));     }              ...  }  `@Component`(""relations.xls"") public class ExcelRelationView extends AbstractSingelSheetExcelView {      protected void buildExcelDocument(Map model, HSSFacade facade) {     	buildExcelDocument(new ExcelRelationModel(model), facade);     }               private void buildExcelDocument(final ExcelRelationModel model, final HSSFacade facade) {     	     	...     }  }  The request url for example showBids4Tender.htm is used as ""filename for the download"". I think the viewName from ModelAndView should be used, so that the browser can be able to resolve the postfix .xls.  If I use response.setHeader( ""Content-disposition"", ""attachment; filename=bids.xls"" );  bids.xls is used as downlod file name and everything will work even in IE  I mean .xls is specific to the wiew and should have nothing to do with request-url.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-11-23T22:41:55Z","2012-06-19T09:36:12Z"
"","11466","Problem with initialization of ConversionService and custom converters [SPR-6800]","**[Mandus Elfving](https://jira.spring.io/secure/ViewProfile.jspa?name=mel)** opened **[SPR-6800](https://jira.spring.io/browse/SPR-6800?redirect=false)** and commented  Setting up a ConversionService as follows makes the initialization of the application context fail.  ```xml                                                                            ```  Due to the context wanting to setup the ConversionService before anything else (I suppose) it will try to create the AccountService using the default constructor. The AccountService bean however has has been annotated with `@Service` and the constructor with `@Autowired` to make Spring create it and inject the necessary dependencies automatically. This therefore makes startup fail with the error:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'conversionService' defined in ServletContext resource [/WEB-INF/spring/general.xml]: Cannot create inner bean 'com.test.converters.StringToAccountConverter#1e565bd' of type [com.test.converters.StringToAccountConverter] while setting bean property 'converters' with key [0]; nested exception is  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.test.StringToAccountConverter#1e565bd' defined in ServletContext resource [/WEB-INF/spring/general.xml]: Cannot resolve reference to bean 'accountService' while setting bean property 'accountService';  nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accountService' defined in file [...AccountServiceImpl.class]: Instantiation of bean failed;  nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [com.test.AccountServiceImpl]: No default constructor found;  nested exception is java.lang.NoSuchMethodException: com.test.AccountServiceImpl.() ```  A temporary fix is to put the conversion service in the servlet specific Web Application context (and not the global application context) as it can then initialize the global context with the AccountService before creating the conversion service. It would however be nice to put the conversion service in the global context to make the custom converters globally available.  As a reference here is the relevant parts of the AccountService class:  ```   @Service(""accountService"") public class AccountServiceImpl implements AccountService {      private final GraphDatabaseService graphDatabaseService;     private final IndexService indexService;      private Node accountsNode;      @Autowired     public AccountServiceImpl(GraphDatabaseService graphDatabaseService, IndexService indexService) {         this.graphDatabaseService = graphDatabaseService;         this.indexService = indexService;     }      ... ```    ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=81536  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/870507cc36ca1ec699591b33aecd6fbcd5e3c4a3","closed","in: core,","spring-projects-issues","2010-02-04T17:37:32Z","2012-06-19T03:44:08Z"
"","11342","MapToMapConverter cannot handle unbounded wildcard Value type [SPR-6676]","**[Mandus Elfving](https://jira.spring.io/secure/ViewProfile.jspa?name=mel)** opened **[SPR-6676](https://jira.spring.io/browse/SPR-6676?redirect=false)** and commented  We have a UrlBasedViewResolver bean for which we want to inject custom attributes using the attributesMap property. The property is of type Map and trying to inject a map using XML config (\\\) will create a LinkedHashMap and trigger the MapToMapConverter, which will try to convert the LinkedHashMap to a map of type Map. This doesn't work as the TypeDescriptor for Map reports that the value doesn't have a type, i.e. TypeDescriptor.NULL, which will eventually lead to a RuntimeException being thrown and as such the application cannot be started. I guess it is the wildcard that makes it difficult for the TypeDescriptor to decide on a type for the value, as the GenericCollectionTypeResolver cannot get a type for the unbounded wildcard.  I don't know if the problem is supposed to be fixed in UrlBasedViewResolver (by changing the type of the argument to setAttributesMap) or if it is the MapToMapConverter, TypeDescriptor or GenericCollectionTypeResolver that is at fault and should be fixed.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11473 ConversionService fails with CustomEditorConfigurer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7cbd9e1d93b712f5ac098f06b7407dfc90e0d1d8","closed","in: core,","spring-projects-issues","2010-01-12T00:21:44Z","2019-01-11T16:16:54Z"
"","11873","Please provide better logging [SPR-7214]","**[Maddy Lakshmanan](https://jira.spring.io/secure/ViewProfile.jspa?name=luvfort)** opened **[SPR-7214](https://jira.spring.io/browse/SPR-7214?redirect=false)** and commented  I'm integrating voldemort into my project. If I instantiate the voldemort factory in a non-spring way, it is working great. however when i wire the factory using spring, i'm getting the error ""Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory"". All my singletons are getting destroyed and my voldemort stuff breaks. i don't see any problem in the xml file. I have marked my log at TRACE level. I feel spring should log the error in more meaningful manner so that the users can determine the problem with out pulling too much hair. Here is my application-context-cache.xml where I've configured voldemort.  ```                                                                                ```    ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-05-18T07:25:30Z","2015-09-22T17:34:36Z"
"","11792","AnnotationTransactionAttributeSource should not be a candidate for AOP advice [SPR-7133]","**[Luke Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=luke)** opened **[SPR-7133](https://jira.spring.io/browse/SPR-7133?redirect=false)** and commented  See related [SEC-1467](https://jira.spring.io/browse/SEC-1467).   ---  **Issue Links:** - [SEC-1467](https://jira.spring.io/browse/SEC-1467) NPE in DelegatingMethodSecurityMetadataSource when running contacts sample","closed","type: enhancement,","spring-projects-issues","2010-04-25T09:35:57Z","2015-09-22T17:34:37Z"
"","11734","Add support in AopUtils for obtaining target class transitively when target is an AopProxy [SPR-7074]","**[Luke Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=luke)** opened **[SPR-7074](https://jira.spring.io/browse/SPR-7074?redirect=false)** and commented  See [SEC-1454](https://jira.spring.io/browse/SEC-1454). Methods like AopUtils.getMostSpecificMethod(method, target) do not currently take account of the situation where the target is a proxy.  ---  **Affects:** 3.0.2  **Issue Links:** - [SEC-1454](https://jira.spring.io/browse/SEC-1454) `@PreAutorize`(#username == principal.username) issues - when target is AOPProxy (_**""is depended on by""**_) - #13204 Add option to Proxy factories to copy parameter-level annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87e327773ee7be8fca0c0a5f5724b42de5c512dd  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-07T00:35:38Z","2019-01-13T07:54:26Z"
"","11192","Add hook in NamespaceHandlerSupport to allow version checking etc before parsing an element [SPR-6526]","**[Luke Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=luke)** opened **[SPR-6526](https://jira.spring.io/browse/SPR-6526?redirect=false)** and commented  This is related to [BATCH-1456](https://jira.spring.io/browse/BATCH-1456) and [SEC-1312](https://jira.spring.io/browse/SEC-1312).  Currently the parse method is final, which is ideally where any schema version checking would go. Instead it has to be added to the parse method of each registered parser. Adding a hook or making the method non-final would make this less brittle.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abf6a7ee18d65ecafdf3cbdf7dced6f18b1c8201","closed","type: enhancement,","spring-projects-issues","2009-12-06T02:57:40Z","2012-06-19T03:42:48Z"
"","11740","NumberFormatter for Style.PERCENT that doesn't just display integers [SPR-7080]","**[Luke Pryor](https://jira.spring.io/secure/ViewProfile.jspa?name=lukosan)** opened **[SPR-7080](https://jira.spring.io/browse/SPR-7080?redirect=false)** and commented  The current PercentFormatter will render BigDecimal(""0.135"") as ""14%"" instead of ""13.5%"". The code below fixes this. Arguably it's a bit of an overkill using Integer.MAX_VALUE decimal places and the call to format.setParseIntegerOnly(false) is redundant unless Java happens to change the default value but I've stuck it in for illustrative purposes.  ``` package wherever.you.like;  import java.text.DecimalFormat; import java.text.NumberFormat; import java.util.Locale;  import org.springframework.format.number.AbstractNumberFormatter;  /**  * A Number formatter for percent values, that actually includes fractional values  * by default for all conceivably useful numbers  *  * Delegates to {@link NumberFormat#getPercentInstance(Locale)}.  * Configures BigDecimal parsing so there is no loss in precision.  * The {@link #parse(String, Locale)} routine always returns a BigDecimal.  *  * @author Luke Pryor  */ public final class PercentFormatter extends AbstractNumberFormatter {  	protected NumberFormat getNumberFormat(Locale locale) { 		NumberFormat format = NumberFormat.getPercentInstance(locale); 		if (format instanceof DecimalFormat) { 			((DecimalFormat) format).setParseBigDecimal(true); 		} 		format.setMaximumFractionDigits(Integer.MAX_VALUE); 		format.setParseIntegerOnly(false); 		return format; 	}  } ```    ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-04-08T01:34:01Z","2015-09-22T16:49:59Z"
"","11558","NullPointerException in $Proxyxxx.hashCode() [SPR-6893]","**[Lukas Herman](https://jira.spring.io/secure/ViewProfile.jspa?name=lukas.herman)** opened **[SPR-6893](https://jira.spring.io/browse/SPR-6893?redirect=false)** and commented  When the server runs for some time (~20 hours), exception pops up in Transaction handling code, effectively blocking further executions.  ``` 3173959 Tue Feb 23 10:55:11 CET 2010 ERROR [MethodInvokingRunnable.run] Invocation of method 'registerPhysicalFiles' on target class [class $Proxy687] failed java.lang.NullPointerException         at org.springframework.aop.framework.JdkDynamicAopProxy.hashCode(JdkDynamicAopProxy.java:267)         at org.springframework.aop.framework.JdkDynamicAopProxy.hashCode(JdkDynamicAopProxy.java:267)         at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:164)         at $Proxy667.hashCode(Unknown Source)         at java.util.HashMap.hash(HashMap.java:324)         at java.util.HashMap.removeEntryForKey(HashMap.java:773)         at java.util.HashMap.remove(HashMap.java:762)         at org.springframework.transaction.support.TransactionSynchronizationManager.doUnbindResource(TransactionSynchronizationManager.java:223)         at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(TransactionSynchronizationManager.java:197)         at org.springframework.orm.hibernate3.HibernateTransactionManager.doCleanupAfterCompletion(HibernateTransactionManager.java:715)         at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:1011)         at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804)         at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723)         at sun.reflect.GeneratedMethodAccessor4333.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:618)         at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307)         at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)         at etm.contrib.aop.aopalliance.EtmMethodCallInterceptor.invoke(EtmMethodCallInterceptor.java:62)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)         at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)         at $Proxy680.commit(Unknown Source)         at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:394)         at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:117)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)         at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)         at $Proxy686.getProcessingPathParameterValue(Unknown Source)         at com.logica.server.modules.agent.FileSystemAgentImpl.registerPhysicalFiles(FileSystemAgentImpl.java:91)         at com.logica.server.modules.agent.FileSystemAgentImpl.registerPhysicalFiles(FileSystemAgentImpl.java:254)         at sun.reflect.GeneratedMethodAccessor4883.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:618)         at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307)         at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)         at etm.contrib.aop.aopalliance.EtmMethodCallInterceptor.invoke(EtmMethodCallInterceptor.java:62)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)         at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)         at $Proxy687.registerPhysicalFiles(Unknown Source)         at sun.reflect.GeneratedMethodAccessor4882.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:618)         at org.springframework.util.MethodInvoker.invoke(MethodInvoker.java:273)         at org.springframework.scheduling.support.MethodInvokingRunnable.run(MethodInvokingRunnable.java:65)         at sun.reflect.GeneratedMethodAccessor4338.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:618)         at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307)         at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)         at etm.contrib.aop.aopalliance.EtmMethodCallInterceptor.invoke(EtmMethodCallInterceptor.java:62)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)         at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)         at $Proxy759.run(Unknown Source)         at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:51)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:432)         at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:295)         at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:80)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:157)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:181)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:665)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:690)         at java.lang.Thread.run(Thread.java:810) 3175326 Tue Feb 23 10:55:12 CET 2010 ERROR [TaskUtils$LoggingErrorHandler.handleError] Unexpected error occurred in scheduled task. java.lang.NullPointerException         at org.springframework.aop.framework.JdkDynamicAopProxy.hashCode(JdkDynamicAopProxy.java:267)         at org.springframework.aop.framework.JdkDynamicAopProxy.hashCode(JdkDynamicAopProxy.java:267)         at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:164)         at $Proxy667.hashCode(Unknown Source)         at java.util.HashMap.hash(HashMap.java:324)         at java.util.HashMap.get(HashMap.java:426)         at org.springframework.transaction.support.TransactionSynchronizationManager.doGetResource(TransactionSynchronizationManager.java:153)         at org.springframework.transaction.support.TransactionSynchronizationManager.getResource(TransactionSynchronizationManager.java:137)         at org.springframework.orm.hibernate3.HibernateTransactionManager.doGetTransaction(HibernateTransactionManager.java:459)         at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:335)         at sun.reflect.GeneratedMethodAccessor4332.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:618)         at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307)         at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)         at etm.contrib.aop.aopalliance.EtmMethodCallInterceptor.invoke(EtmMethodCallInterceptor.java:62)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)         at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)         at $Proxy680.getTransaction(Unknown Source)         at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:336)         at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:102)         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)         at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)         at $Proxy765.run(Unknown Source)         at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:51)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:432)         at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:295)         at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:80)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:157)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:181)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:665)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:690)         at java.lang.Thread.run(Thread.java:810) ```    ---  **Affects:** 3.0 GA","closed","in: core,","spring-projects-issues","2010-02-22T20:53:10Z","2019-01-11T17:03:51Z"
"","11659","CronTrigger causing: java.lang.OutOfMemoryError: PermGen space [SPR-6994]","**[Luis Trigueiros](https://jira.spring.io/secure/ViewProfile.jspa?name=luist)** opened **[SPR-6994](https://jira.spring.io/browse/SPR-6994?redirect=false)** and commented  Greatings, I have a webapp running a cron trigger and if the application is stopped and restarted by tomcat manager it causes this exception. I belive that it is to do with the initialization on the cron trigger. It is handy to be able to stop and start the webapp to avoid running cron tasks, sometimes. Thank you, Oscar Is this something that should be possible ?  2010-03-16 18:17:34,031 ERROR http-9090-5 [org.springframework.web.servlet.DispatcherServlet:315] - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.scheduling.config.ScheduledTaskRegistrar#0': Invocation of init method failed; nested exception is java.lang.OutOfMemoryError: PermGen space at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1403) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:562) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:871) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:423) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:443) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:459) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:340) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:307) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) at javax.servlet.GenericServlet.init(GenericServlet.java:212) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1173) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:993) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4149) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4458) at org.jstripe.tomcat.probe.Tomcat55ContainerAdaptor.start(Tomcat55ContainerAdaptor.java:63) at org.jstripe.tomcat.probe.controllers.StartContextController.executeAction(StartContextController.java:21) at org.jstripe.tomcat.probe.controllers.NoSelfContextHandlerController.handleContext(NoSelfContextHandlerController.java:43) at org.jstripe.tomcat.probe.controllers.ContextHandlerController.handleRequestInternal(ContextHandlerController.java:39) at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:44) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:723) at org.jstripe.tomcat.probe.ProbeServlet.doDispatch(ProbeServlet.java:49) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:663) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:394) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:348) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:120) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.jstripe.tomcat.probe.Tomcat55AgentValve.invoke(Tomcat55AgentValve.java:20) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:859) at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:574) at org.apache.tomcat.util.net.AprEndpoint$Worker.run(AprEndpoint.java:1527) at java.lang.Thread.run(Unknown Source) Caused by: java.lang.OutOfMemoryError: PermGen space at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(Unknown Source) at java.security.SecureClassLoader.defineClass(Unknown Source) at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1850) at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:890) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1354) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1233) at java.lang.ClassLoader.loadClassInternal(Unknown Source) at org.springframework.scheduling.support.CronTrigger.\(CronTrigger.java:44) at org.springframework.scheduling.support.CronTrigger.\(CronTrigger.java:53) at org.springframework.scheduling.config.ScheduledTaskRegistrar.afterPropertiesSet(ScheduledTaskRegistrar.java:102) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1460) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1400) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:562) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:871) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:423) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:443) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:459) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:340) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:307) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) at javax.servlet.GenericServlet.init(GenericServlet.java:212) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1173) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:993) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4149) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4458)   ---  **Affects:** 3.0.1","closed","in: core,","spring-projects-issues","2010-03-16T06:40:40Z","2019-01-12T16:38:06Z"
"","11585","Making org.springframework.scheduling.support.CronSequenceGenerator a public class [SPR-6920]","**[Luis Trigueiros](https://jira.spring.io/secure/ViewProfile.jspa?name=luist)** opened **[SPR-6920](https://jira.spring.io/browse/SPR-6920?redirect=false)** and commented  Hi please make the org.springframework.scheduling.support.CronSequenceGenerator public class. While using the cron to trigger periodic tasks in my application I need to display the information of the next scheduled run to the user. But because the class is packege scoped, I can´t obtain this information by using the the next method.  Thank you, Oscar.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c39f90466549563ca8da5f8b61c1d916fe5513f","closed","type: enhancement,","spring-projects-issues","2010-03-01T22:28:21Z","2012-06-19T03:43:16Z"
"","11627","Validation of Configurable annotation on application context load [SPR-6962]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6962](https://jira.spring.io/browse/SPR-6962?redirect=false)** and commented  This is from spring support incident: https://support.springsource.com/spring_support_client_getIncidentById/99281990-e48c-59d7-573a-4b94883d9adc  It would be good if we can ask Spring to validate that `@Configurable` objects will be correctly resolved at Runtime at the point it loads the Application Context?  For example from what I can tell by default if you new an `@Configurable` object which does not have its dependencies configured it will error on the Constructor instantiation.  If there is a way of indicating to validate pre this stage it would be less fragile.  The only way I have found so far is by preprocessing this manually with a specialized bean  i.e.  `@PostConstruct` public void checkDependencies() throws Exception { ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false) ; scanner.addIncludeFilter(new AnnotationTypeFilter(DependencyChecked.class)); for (BeanDefinition bd : scanner.findCandidateComponents(basePackagePattern )) { // force instantiation } }   ---  **Affects:** 3.0.1  **Attachments:** - [dependencycheck.zip](https://jira.spring.io/secure/attachment/16267/dependencycheck.zip) (_2.03 kB_)","closed","type: enhancement,","spring-projects-issues","2010-03-09T11:55:23Z","2015-09-22T19:13:23Z"
"","11589","Spring 3.0.1 cannot concatenate Spring with SpEL expression in debug mode [SPR-6924]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6924](https://jira.spring.io/browse/SPR-6924?redirect=false)** and commented  Hi, Spring 3.0.1 cannot process the SpEL expression if SpEL is concatenated with other String in the **value** attribute of bean tag. However, it works fine in Spring 3.0.0. It will have a big impact because it results in all config with SpEL fails to get started. Please see my test case below.  E.g. The config below can work in Spring 3.0.0, but it fails in 3.0.1.  \ \ \  Is it a known issue in Spring 3.0.1?  David  ---  **Affects:** 3.0.1  **Attachments:** - [testing.zip](https://jira.spring.io/secure/attachment/16254/testing.zip) (_3.42 MB_)  **Issue Links:** - #11531 Expression.getValue(..., Class) calls that invoke methods fail with a ArrayIndexOutOfBoundsException when method return value needs to be converted to the desired result type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0444ab236ae5529514a71cffa4d2686e8e1a2d37","closed","in: core,","spring-projects-issues","2010-03-02T17:57:09Z","2019-01-11T16:29:04Z"
"","11459","Race condition between AbstractApplicationContext.close() and Spring's shutdownHook [SPR-6793]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6793](https://jira.spring.io/browse/SPR-6793?redirect=false)** and commented  In Spring's AbstractApplicationContext.registerShutdownHook() , it will register a shutdownhook to jvm. however, this shutdownhook is not threadsafe.  If we call AbstractApplicationContext.close(), it will stop all lifecycle beans in its context. however, as soon as all non-daemon threads have been stopped during applictioncontext.close(), jvm will shutdown itself and call shutdownhooks.  The issue is that AbstractApplicationContext.close() will also try to remove the shutdownhook from jvm, so close() will throw one exception **java.lang.IllegalStateException: Shutdown in progress**.  Could spring fix this issue? thanks.    ---  **Affects:** 3.0 GA  **Attachments:** - [context.xml](https://jira.spring.io/secure/attachment/16162/context.xml) (_1.07 kB_) - [SpringShutdownRaceCondition.java](https://jira.spring.io/secure/attachment/16161/SpringShutdownRaceCondition.java) (_2.92 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03e9e4568f919240c56ecb3faf95b00c5bfc2215, https://github.com/spring-projects/spring-framework/commit/82178b8d93c2eefcb912220c6367c0ed07e689a1","closed","in: core,","spring-projects-issues","2010-02-03T17:03:15Z","2012-06-19T03:43:44Z"
"","11436","Does not catch exception during stopping Lifecycle bean can cause resource leak [SPR-6770]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6770](https://jira.spring.io/browse/SPR-6770?redirect=false)** and commented  When Spring stops its application context, it will call DefaultLifecycleProcessor to stop all Lifecycle beans in its context. However, it does not catch the exception when it stops beans. The problem of not catching exception is that it can cause the resource leak. E.g. we have 5 Lifecycle beans which should be stopped, if the second bean throws one Exception which can cause Spring gives up stopping rest beans, so that other beans are unable to release the resource they have which leads to resource leak.  Can we catch the exception during bean.stop() and logging it?  ```   if (bean.isRunning()) {   if (bean instanceof SmartLifecycle) {   	((SmartLifecycle) bean).stop(new Runnable() {    public void run() {    	latch.countDown();    }   	});   }   else {   	bean.stop();   } } ```  ---  **Affects:** 3.0 GA  **Issue Links:** - #11435 Need detailed log for start and stop Lifecycle beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a897e3f01f56c9379b76c36855802eab914d2226","closed","in: core,","spring-projects-issues","2010-01-25T17:58:29Z","2019-01-11T16:00:33Z"
"","11435","Need detailed log for start and stop Lifecycle beans [SPR-6769]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6769](https://jira.spring.io/browse/SPR-6769?redirect=false)** and commented  When Spring starts/stops its application context, it uses the class DefaultLifecycleProcessor in Spring 3 to start/stop all Lifecycle beans. However, I think the logging information in DefaultLifecycleProcessor's LifecycleGroup.start() and LifecycleGroup.stop() method is not enough, which does not have some useful information, such as bean name,  Currently, it only has this log info in its class: if (logger.isWarnEnabled()) { logger.warn(""failed to shutdown beans with phase value "" + this.phase + "" within timeout of "" + this.timeout); }  Can we add more detailed debug info here to indicate which bean has been started and which bean has been stopped, and which bean failed?  ---  **Affects:** 3.0 GA  **Issue Links:** - #11436 Does not catch exception during stopping Lifecycle bean can cause resource leak  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a897e3f01f56c9379b76c36855802eab914d2226","closed","type: enhancement,","spring-projects-issues","2010-01-25T17:42:14Z","2019-01-11T15:43:20Z"
"","11311","PropertyPlaceholder does not work for @ImportResource in JavaConfig [SPR-6645]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6645](https://jira.spring.io/browse/SPR-6645?redirect=false)** and commented  PropertyPlaceholder fails to replace the placeholder in the XML Config files when they are in `@ImportResource` annotation of a JavaConfig.  I have one test which is a JavaConfig class and it uses `@ImportResource` to import one XML Config file importContext.xml, however, PropertyPlaceholder does not replace any placeholder (e.g. ${TEST}) in importContext.xml. Next, I add \ in the root XML Config file, but PropertyPlaceholder still does not work. Finally, I remove `@ImportResource` from my JavaConfig class, and PropertyPlaceholder works.  I think it is a bug in JavaConfig. Please see my test case in the attachment.  ---  **Affects:** 3.0 GA  **Attachments:** - [prop.zip](https://jira.spring.io/secure/attachment/16068/prop.zip) (_1.55 kB_)  **Issue Links:** - #11121 AnnotationConfigApplicationContext does not detect BeanFactoryPostProcessor  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-01-05T13:47:46Z","2019-01-11T16:14:16Z"
"","11301","Interoperability issue between XmlConfig and JavaConfig in Spring 3 [SPR-6635]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6635](https://jira.spring.io/browse/SPR-6635?redirect=false)** and commented  It seems that the interoperability between JavaConfig and XmlConfig in Spring 3 can only support one way, either inject beans from JavaConfig into XmlConfig, or inject beans from XmlConfig into JavaConfig.  When I try to use `@Autowire` to link all beans together, I got one exception because JavaConfig cannot find out the bean. In the test case, I have Spring's JaxWsPortProxyFactoryBean bean in xml config, and I use `@Autowire` to get its instance in JavaConfig. Next, I have one ComponentManager bean in XML config which will query application context to extract all components. Finally, I have one bean which called **myconnection**, which is used by JaxWsPortProxyFactoryBean.  The issue is: * When I declare the bean myconnection in XML Config, every thing is fine, and spring will successfully get started. * When I declare the bean myconnection in JavaConfig, Spring will fail to start its application context, because it cannot find out the bean for `@Autowire`  After looking into the code, I find that Spring treats JavaConfig class as a normal bean which causes circular dependencies issue in my `@Configuration` class. The reason is that my `@Configuration` class uses `@Autowire` to extract bean A from context, and the bean A need bean B in my JavaConfig. So, spring find there is a circular reference [@Configuration class] javaconfig -> `@Autowire` [bean A from xml config] -> inject [bean B from javaconfig] , and Spring cannot resolve this issue, so it throws one NoSuchBeanDefinitionException to say no A has been found.  Once we move myconnection from javaconfig to xml config the issue just goes away. Please see my test case.   ---  **Affects:** 3.0 GA  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/16064/test.zip) (_2.52 kB_)","closed","in: core,","spring-projects-issues","2010-01-04T12:37:53Z","2019-01-12T16:38:29Z"
"","11284","Cannot override bean in Spring 3 JavaConfig [SPR-6618]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6618](https://jira.spring.io/browse/SPR-6618?redirect=false)** and commented  I am trying to override a `@Bean` configuration in the JavaConfig by extending the configuration from another `@Configuration` class. However, Spring 3 complains that I cannot override existing `@Bean` definition and throw one exception below.  I think we need ability to override one bean definition in JavaConfig, that would be as same as what we have in XML Config. Also, I think you may allow one value in `@Bean` annotation to indicate it overrides the parent's method, such as `@Bean`(override=true)  My Test case:  ``` @Configuration public class AbstractConfig {      @Bean     public C3 c3() { return new C3(); } }  @Configuration public class Config extends AbstractConfig  {     @Override     @Bean     public C3 c3() {  return new AnotherC3(); } } ```  Exception in thread ""main"" org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: `@Configuration` class 'Config' has 2 overloaded factory methods of name 'dao'. Only one factory method of the same name allowed. Offending resource: class Config at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68) at org.springframework.context.annotation.ConfigurationClass.validate(ConfigurationClass.java:125) at org.springframework.context.annotation.ConfigurationClassParser.validate(ConfigurationClassParser.java:180) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:184) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:146) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:624) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:614) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:398) at org.springframework.context.annotation.AnnotationConfigApplicationContext.\(AnnotationConfigApplicationContext.java:65)   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d1b3f57320d5567ff8f6420c9bcf07521ea5e2b9","closed","in: core,","spring-projects-issues","2009-12-27T16:48:48Z","2012-06-19T03:43:20Z"
"","11279","Doc: @Value does not work when the bean implements BeanPostProcessor and PriorityOrdered [SPR-6613]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6613](https://jira.spring.io/browse/SPR-6613?redirect=false)** and commented  In Spring 3, the `@Value` annotation does not work when the javaconfig class has the bean which implements BeanPostProcessor and PriorityOrdered. It looks like that the `@bean` class will be impacted by other beans in the same java config file.  I think all beans in the same java config file should not impact each other, because they do not have any relationship.  Please see my test case: public class MyBeanPostProcessor implements BeanPostProcessor, PriorityOrdered { ... }  `@Configuration` public class ValueTest { `@Value`(""${TEST}"") public String t;      @Bean     public String c1() {         System.out.println(this.t);         Assert.isTrue(""ttt"".equals(t));         return ""c1"";     }          @Bean     public MyBeanPostProcessor postProcessor() {         return new MyBeanPostProcessor();//without this bean, @Value works.     }          public static void main(String[] args) {         new ClassPathXmlApplicationContext(""classpath:test.xml"");     }  }  test.xml \ \ \      ---  **Affects:** 3.0 GA  **Attachments:** - [base-spring.zip](https://jira.spring.io/secure/attachment/16088/base-spring.zip) (_34.51 kB_)","closed","in: core,","spring-projects-issues","2009-12-24T18:03:12Z","2015-09-22T17:34:38Z"
"","11277","@Value does not work with AnnotationConfigApplicationContext [SPR-6611]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6611](https://jira.spring.io/browse/SPR-6611?redirect=false)** and commented  I have one java config class called FactoryBeanConfig which tries to extract properties value by using `@Value` annotation. However, it does not work when I use `@ImportResource` + AnnotationConfigApplicationContext. So, I change the main class to start Spring by  ClassPathXmlApplicationContext + context:component-scan, and it works.  Can AnnotationConfigApplicationContext/JavaConfig support `@Value` to extract value from PropertyPlaceholderConfigurer?  My Test case, it is similar to the test case of #11268. `@Configuration` `@ImportResource`(""classpath:propertiesConfig.xml"") public class FactoryBeanConfig { `@Bean` public C3 c3() throws Exception { C3 c = new C3();  System.out.println(""******* test="" + test);  return c; }  `@Value`(""${test}"") public String test; }  propertiesConfig.xml \ \ \  Main.java, `@Value` cannot get value. ApplicationContext context = new AnnotationConfigApplicationContext(FactoryBeanConfig.class);  However, when I use ClassPathXmlApplicationContext+context:component-scan, `@Value` works: ApplicationContext context = new ClassPathXmlApplicationContext(""context.xml"");  context.xml: \      ---  **Affects:** 3.0 GA  **Issue Links:** - #11121 AnnotationConfigApplicationContext does not detect BeanFactoryPostProcessor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8ab9da446129218607d4e3a6f4fd466a407c2896, https://github.com/spring-projects/spring-framework/commit/6b2b5c4c233bba63fa5da2b11146ffaf66f9de80  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2009-12-23T20:44:44Z","2019-01-11T16:15:55Z"
"","11268","Calls to FactoryBean @Bean methods cause ClassCastException [SPR-6602]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6602](https://jira.spring.io/browse/SPR-6602?redirect=false)** and commented  Hi, It looks like that the javaconfig in Spring 3 does not support configure a FactoryBean in javaconfig, and then easily inject it to another Bean.  What I want in Spring 3 java config is: class MyFactoryBean implements FactoryBean\{}      @Bean     public MyFactoryBean bFactoryBean() {         return new MyFactoryBean();     }          @Bean     public A a(B b) {         A a = new A();         a.setB( bFactoryBean().getObject() );         return a;     }  Can Spring 3 support FactoryBean in its javaconfig?  ---  **Affects:** 3.0 GA  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16100/mylyn-context.zip) (_26.96 kB_) - [repro.zip](https://jira.spring.io/secure/attachment/16097/repro.zip) (_5.68 kB_)  **Issue Links:** - #17514 ConfigurationClassEnhancer.enhanceFactoryBean is not transparent for method calls other than getObject()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c05eaeb1622a66bac98a06faf971fcc3b871cb4  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2009-12-22T19:26:33Z","2019-01-11T16:12:46Z"
"","11263","Should spring-agent.jar be spring-instrument in InstrumentationLoadTimeWeaver class [SPR-6597]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6597](https://jira.spring.io/browse/SPR-6597?redirect=false)** and commented  Currently, the javadoc in InstrumentationLoadTimeWeaver class said: Start the JVM specifying the Java agent to be used, like as follows: -javaagent:path/to/spring-agent.jar where spring-agent.jar is a JAR file containing the InstrumentationSavingAgent class.  Should spring-agent.jar  be org.springframework.instrument?   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7f143ae581289b541d81be1661b015de2a0b408, https://github.com/spring-projects/spring-framework/commit/b56328aa9e0565bf2053a9cd6a8acdfd0e4255e4","closed","in: core,","spring-projects-issues","2009-12-21T13:22:03Z","2012-06-19T03:43:33Z"
"","11230","Spring ConversionService breaks String-to-Resource resolution [SPR-6564]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6564](https://jira.spring.io/browse/SPR-6564?redirect=false)** and commented  It looks like Spring ConversionService cannot convert String to a org.springframework.core.io.Resource. The code below actually works without any issue if I did not set **conversionService** in the config file. However, it will throw exception when I config **conversionService** because there is not StringToResourceConverter in conversionService.  It will be a big issue when we use ConversionService because it breaks the existing Spring application.  Java: public class TestBean { private Map resources; public void setResources(Map resources) { this.resources = resources; } }  Spring config: \  \ \ \ \\ \ \ \   ---  **Affects:** 3.0 RC3  **Attachments:** - [ConversionServiceIsBrokenTest.zip](https://jira.spring.io/secure/attachment/17752/ConversionServiceIsBrokenTest.zip) (_894 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/b1c61983b241e2e6e5dac437aeb5b76e0785f149","closed","in: core,","spring-projects-issues","2009-12-14T16:00:59Z","2019-01-12T16:38:33Z"
"","11229","Spring ConversionService does not work with SpEL [SPR-6563]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6563](https://jira.spring.io/browse/SPR-6563?redirect=false)** and commented  We encounter two issues when we configured conversionService in Spring config file. Please see attached test case: Java: public class TestBean{ private List\ addresses; ... }  Config: \  \     \ \ \#{'test-' + strValue + '-end'}\ \#{'test-' + strValue}\ \#{'test-' + numValue+ '-end'}\ \#{'test-' + numValue}\ \ \ \ \ \ \ \ \ \   ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c33206042c09a4344e5e4a1c6b759eb6180274c","closed","in: core,","spring-projects-issues","2009-12-14T15:51:42Z","2012-06-19T03:43:46Z"
"","11211","Does not auto-start FactoryBean if it implements SmartLifecycle  [SPR-6545]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6545](https://jira.spring.io/browse/SPR-6545?redirect=false)** and commented  It looks like the latest snapshot of Spring change the way it gets Bean in DefaultLifecycleProcessor. In 3.0.rc3, all FactoryBean itself which implements SmartLifecycle will get auto-started. However, the FactoryBean itself is not started by Spring in the latest snapshot.  ---  **Affects:** 3.0 RC3  **Issue Links:** - #11181 Spring does not start SmartLifecycle bean if it is lazy-init  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d2f7934deadbb08f7324dab08d6871d0eb1a402, https://github.com/spring-projects/spring-framework/commit/42c7be45904be7480e8fcd8653e6f9607e438cd6, https://github.com/spring-projects/spring-framework/commit/a0c4d2c13c7cbe8216bdb8d3b2ecd7c2ff83d23b","closed","in: core,","spring-projects-issues","2009-12-10T15:30:39Z","2019-01-11T15:22:18Z"
"","11181","Spring does not start SmartLifecycle bean if it is lazy-init [SPR-6515]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6515](https://jira.spring.io/browse/SPR-6515?redirect=false)** and commented  If one SmartLifecycle bean is * lazy-init=""true""*, Spring will not auto start it during refresh and application.start()  ---  **Affects:** 3.0 RC3  **Issue Links:** - #11211 Does not auto-start FactoryBean if it implements SmartLifecycle  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/736c7212dbaf357bb1f45c546b94c7c2669a369e, https://github.com/spring-projects/spring-framework/commit/93b17042a2bd165e89c7ce3a5c3afb92b6d36d07","closed","in: core,","spring-projects-issues","2009-12-03T22:21:05Z","2019-01-11T15:16:21Z"
"","11155","Support scope in context:annotation-config [SPR-6489]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6489](https://jira.spring.io/browse/SPR-6489?redirect=false)** and commented  Hi, Can we give the **annotation scope** to , e.g.  The idea is to allow infrastructure libraries to isolate themselves from application code.   ---  **Affects:** 3.0 RC3","closed","type: enhancement,","spring-projects-issues","2009-12-01T12:46:40Z","2015-09-22T17:34:32Z"
"","11084","Support convert context in ConversionService [SPR-6418]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6418](https://jira.spring.io/browse/SPR-6418?redirect=false)** and commented  In the ConversionService and Converter, we can convert an object from source type to target type. In addition, I think it would be good if we can allow people passing context during convert, says: Converter: T convert(S source, Object context) ConversionService: \ T convert(Object source, Class\ targetType, Object context);.  In some cases, we want to call ConversionService not only in configuration, but also in the runtime. When we call ConversionService in the runtime, the source can be convert to target type with a certain context.  e.g. we want to convert one string to a Date with a given timezone.  Date convert(String s, Object context){ TimeZone tz = (TimeZone) context; return  FastDateFormat.getInstance(""yyyy-MM-dd HH:mm:ss"", tz ).parse(s); }  Can we add this feature in ConversionService?  ---  **Affects:** 3.0 RC2  **Issue Links:** - #12252 Allow org.springframework.core.convert.TypeDescriptor to be subclassed","closed","type: enhancement,","spring-projects-issues","2009-11-23T18:48:14Z","2019-01-11T15:35:39Z"
"","11081","Converter auto-register itself to ConversionService [SPR-6415]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-6415](https://jira.spring.io/browse/SPR-6415?redirect=false)** and commented  Hi, Currently, we can only register a CustomConverter by configuring it in Spring configuration file in Spring 3.0.0.RC2. However, we want the ability which allows all Converters to register themselves into the global ConversionService by default.  In Spring 3.0.RC2, we can use ConversionServiceFactoryBean to create a ConversionService in Spring config. If people have a lot of Converter in the infrastructure libraries, they need to register all customized converters by themself, so we think it would be good if Converter itself can register itself.   ---  **Affects:** 3.0 RC1, 3.0 RC2  4 votes, 8 watchers","closed","status: declined,","spring-projects-issues","2009-11-23T18:25:26Z","2021-09-20T09:27:43Z"
"","11306","PathVariable does not work properly after updated to 3.0 GA [SPR-6640]","**[Lei Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=o__jedy__o)** opened **[SPR-6640](https://jira.spring.io/browse/SPR-6640?redirect=false)** and commented  Controller:  `@Controller` `@RequestMapping`(""/*/menu/**"") public class MenuTreeController {      @RequestMapping(""type/```  "") public ModelAndView getFirstLevelFunctionNodes(`@PathVariable`(""code"") String code) {      }  }  I get following error for url like localhost:8080/book/menu/type/M5  org.springframework.web.bind.annotation.support.HandlerMethodInvocationException: Failed to invoke handler method [public org.springframework.web.servlet.ModelAndView com.abc.MenuTreeController.getFirstLevelFunctionNodes(java.lang.String)]; nested exception is java.lang.IllegalStateException: Could not find `@PathVariable` [code] in `@RequestMapping` at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:171) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:414) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:402)  I works for me, before. Can you guys help me to solve this problem, thanks. btw, problem seems to be in AntPathStringMatcher.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb3c8e5c8774512ee72ab93e656c9b1b0d1c3c78","closed","type: bug,","spring-projects-issues","2010-01-05T00:18:38Z","2012-06-19T03:43:31Z"
"","11709","InputStream never closed when using JasperReports 3.x [SPR-7048]","**[Leandro Borges](https://jira.spring.io/secure/ViewProfile.jspa?name=lpborges)** opened **[SPR-7048](https://jira.spring.io/browse/SPR-7048?redirect=false)** and commented  At org.springframework.web.servlet.view.jasperreports.AbstractJasperReportsView the method:  ""protected final JasperReport loadReport(Resource resource)""  should close the InputStream (from resource.getInputStream()) after load the JasperReport. This cause a warning: ""WARNING: Input stream has been finalized or forced closed without being explicitly closed; stream instantiation reported in following stack trace"" at glassfish after redeploy.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fba8bcc7dc5c91b886474596dd21ba32b1e03833","closed","type: bug,","spring-projects-issues","2010-03-29T04:57:45Z","2012-06-19T03:42:57Z"
"","11700","ConfigurableWebBindingInitializer should provide setAutoGrowNestedPaths method [SPR-7038]","**[Laurent Grangier](https://jira.spring.io/secure/ViewProfile.jspa?name=lgrangier)** opened **[SPR-7038](https://jira.spring.io/browse/SPR-7038?redirect=false)** and commented  I need to configure autoGrowNestedPaths to true on the WebDataBinder for all my controllers. It could be helpful to add a ConfigurableWebBindingInitializer.setAutoGrowNestedPaths() method which will configure the corresponding property of the WebDataBinder.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-03-25T20:54:30Z","2012-06-19T03:44:11Z"
"","11238","Application context does not properly handle non-running SmartLifecyle beans [SPR-6572]","**[Lance Arlaus](https://jira.spring.io/secure/ViewProfile.jspa?name=lance2010)** opened **[SPR-6572](https://jira.spring.io/browse/SPR-6572?redirect=false)** and commented  Application contexts do not close properly when the context contains a `SmartLifecycle` bean that is in a non-running state (isRunning() returns false).  This issue was first noticed when using a `DefaultMessageListenerContainer`, but it affects any similar bean.  **Root Cause** The `DefaultLifecycleProcessor` used by the `AbstractApplicationContext` class does not properly maintain its internal countdown latch.  The latch is initialized with the total `SmartLifecycle` bean count.  However, if a bean returns false from its `isRunning()` method, the latch is never decremented in the {{doStop()} method.  The result is a timeout during close waiting for the latch to be decremented.  Unless I'm missing something, a simple else block with a decrement on the latch should do the trick.  Note to the team - this was a nasty little bug that took quite some time to ferret out.  Relevant code and test case follow.  ``` 	private void doStop(Map lifecycleBeans, String beanName, final CountDownLatch latch) { 		Lifecycle bean = lifecycleBeans.get(beanName); 		if (bean != null) { 			String[] dependentBeans = this.beanFactory.getDependentBeans(beanName); 			for (String dependentBean : dependentBeans) { 				doStop(lifecycleBeans, dependentBean, latch); 			} 			if (bean.isRunning()) { 				if (bean instanceof SmartLifecycle) { 					((SmartLifecycle) bean).stop(new Runnable() { 						public void run() { 							latch.countDown(); 						} 					}); 				} 				else { 					bean.stop(); 				} 			} 			// ===================================== 			// Latch is never decremented  			lifecycleBeans.remove(beanName); 		} 	} ```  ``` public class SmartLifecycleBugCheck {  	@Test(timeout=2000) 	public void testNotRunningBean() { 		final ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(); 		 		context.refresh(); 		context.getBeanFactory().registerSingleton(""testBean"", new TestBean()); 		 		context.start(); 		context.close(); 	} 	 	 	public static class TestBean implements SmartLifecycle { 		public int getShutdownOrder() { 			return 0; 		} 		public boolean isAutoStartup() { 			return false; 		} 		public void stop(Runnable callback) { 			callback.run(); 		} 		public boolean isRunning() { 			return false; 		} 		public void start() { 			 		} 		public void stop() { 		} 	} 	 } ```  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11020 ApplicationContext very slow to shutdown with bean of type org.springframework.scheduling.quartz.SchedulerFactoryBean","closed","in: core,","spring-projects-issues","2009-12-16T16:51:01Z","2019-01-11T15:26:16Z"
"","11144","ConversionService does not support List to Iterable [SPR-6478]","**[Lance Arlaus](https://jira.spring.io/secure/ViewProfile.jspa?name=lance2010)** opened **[SPR-6478](https://jira.spring.io/browse/SPR-6478?redirect=false)** and commented  DefaultConversionService does not support converting a List to an Iterable  The expectation is to return the original list unchanged (a no-op conversion). Instead, conversion fails trying to convert the first element of the list to Iterable.  ``` @Test public void testListToIterableConversionBug() {      final DefaultConversionService conversionService = new DefaultConversionService();      final List raw = new ArrayList();      raw.add(""one"");      raw.add(""two"");      final Object converted = conversionService.convert(raw, Iterable.class);           Assert.assertSame(raw, converted); } ```  ``` org.springframework.core.convert.ConversionFailedException: Unable to convert value [one, two] from type [java.util.ArrayList] to type [java.lang.Iterable]; reason = 'No converter found capable of converting from [java.lang.String] to [java.lang.Iterable]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from [java.lang.String] to [java.lang.Iterable] ```    ---  **Affects:** 3.0 RC2","closed","in: core,","spring-projects-issues","2009-11-30T16:24:47Z","2012-06-19T03:42:48Z"
"","11143","ConversionService does not support List to Object [SPR-6477]","**[Lance Arlaus](https://jira.spring.io/secure/ViewProfile.jspa?name=lance2010)** opened **[SPR-6477](https://jira.spring.io/browse/SPR-6477?redirect=false)** and commented  DefaultConversionService does not support converting a List to an Object  The expectation is to return the original list unchanged (a no-op conversion). Instead, the first element of the list is returned.  ``` @Test public void testListToObjectConversionBug() {      final DefaultConversionService conversionService = new DefaultConversionService();      final List raw = new ArrayList();      raw.add(""one"");      raw.add(""two"");      final Object converted = conversionService.convert(raw, Object.class);           Assert.assertSame(raw, converted); } ```  `Test Output: junit.framework.AssertionFailedError: expected same: was not:`   ---  **Affects:** 3.0 RC2","closed","in: core,","spring-projects-issues","2009-11-30T16:14:43Z","2012-06-19T03:43:43Z"
"","11142","ConversionService does not support Map to Object [SPR-6476]","**[Lance Arlaus](https://jira.spring.io/secure/ViewProfile.jspa?name=lance2010)** opened **[SPR-6476](https://jira.spring.io/browse/SPR-6476?redirect=false)** and commented  DefaultConversionService does not support converting a Map to an Object  The expectation is to return the original object unchanged (a no-op conversion). Instead, null is returned.  ``` @Test public void testMapToObjectConversionBug() {      final DefaultConversionService conversionService = new DefaultConversionService();      final Map raw = new HashMap();      raw.put(""key"", ""value"");      final Object converted = conversionService.convert(raw, Object.class);           Assert.assertSame(raw, converted); } ```    ---  **Affects:** 3.0 RC2","closed","in: core,","spring-projects-issues","2009-11-30T16:08:57Z","2012-06-19T03:43:25Z"
"","10881","Review collection/map converter optimizations that don't create new collection instances [SPR-6213]","**[Lance Arlaus](https://jira.spring.io/secure/ViewProfile.jspa?name=lance2010)** opened **[SPR-6213](https://jira.spring.io/browse/SPR-6213?redirect=false)** and commented  See comments below —  This bug was originally encountered while converting lists.  Passing in a list for conversion to list, one would expect a new list containing the elements of the original list. Instead, the converted object that's returned is the original list itself.  The test case below demonstrates this.  Note that this test succeeds in version 3.0.0.M4  ``` public class DefaultConversionServiceBugTest {  	@Test 	@SuppressWarnings(""unchecked"") 	public void testUnmodifiableListConversion() { 		List stringList = new ArrayList(); 		stringList.add(""foo""); 		stringList.add(""bar"");  		List frozenList = Collections.unmodifiableList(stringList); 		ConversionService conversionService = new DefaultConversionService(); 		 		List converted = conversionService.convert(frozenList, List.class);  		// The converted list should contain all the elements in the original list 		Assert.assertEquals(frozenList, converted); 		Assert.assertNotSame(frozenList, converted); 	} 	 } ```  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10980 Review Converter resolution algorithm","closed","type: enhancement,","spring-projects-issues","2009-10-09T07:02:47Z","2019-01-11T15:09:40Z"
"","11297","AnnotationContextUtils.registerAnnotationConfigProcessors() register bean definitions for bean processors even if such beans exist in parent registry, then singletons are removed from config [SPR-6631]","**[Krzysztof Trojan](https://jira.spring.io/secure/ViewProfile.jspa?name=trojanbug)** opened **[SPR-6631](https://jira.spring.io/browse/SPR-6631?redirect=false)** and commented  AnnotationContextUtils.registerAnnotationConfigProcessors() don't check if the bean definition exists in parent registry (or registry chain). Constructs such as !registry.containsBeanDefinition(...) check only in current registry, thus resulting in the processors being created, if only config scanning is used ( as one notable example of the configuration cousing it to happen).  It seems that thus redundand instances are then removed by call to destroySingletons() [guess, did not manage to understand all the details].  I have noticed, that for SWF, GenericWebApplicationContext is created for the flow definition, and the processors are always created in that context, even if no configuration causing this is present in other places (in main Web App context, or in Dispatcher Servlet context linked to it).  In most situations the impact is negligible, only few extra definitions are added (do beans themselves get created ? not sure ...). However, AnnotationContextUtils use concrete classes, and cause them to load. If the loading of the classes fail, entire context is not loaded, even though the beans that are being defined could be potentially removed at once by destroySingletons().  In some cases, such as in Google App Engine and PersistenceAnnotationBeanPostProcessor, the simple fact that the class cannot be loaded renders entire context unusable. There is no way it can be overcomed, cause even if the bean named appripriately is defined in the main app context, id does not stop the offending class from loading, when AnnotationContextUtils are used.  ---  **Affects:** 2.5.6  **Issue Links:** - #11345 Provide PersistenceAnnotationBeanPostProcessor without JNDI dependency.","closed","in: core,","spring-projects-issues","2009-12-31T04:35:37Z","2019-01-12T16:38:30Z"
"","10952","listener-container xml element does not allow to specify durableSubscriptionName [SPR-6285]","**[koen janssens](https://jira.spring.io/secure/ViewProfile.jspa?name=janssk1)** opened **[SPR-6285](https://jira.spring.io/browse/SPR-6285?redirect=false)** and commented  The AbstractMessageListenerContainer class has a means to set durable subcription name, but it's not available in the 'typesafe' xml counterpart.  The workaround is to fall back to old style xml.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-10-30T04:40:52Z","2015-09-22T17:34:33Z"
"","11748","Add Hibernate 3.5.0-Final support to Spring Framework [SPR-7088]","**[Klaus Kreuzwieser](https://jira.spring.io/secure/ViewProfile.jspa?name=klaus.kreuzwieser)** opened **[SPR-7088](https://jira.spring.io/browse/SPR-7088?redirect=false)** and commented  Hibernate 3.5.0-Final ships with interface class PersistenceUnitInfo declaring the methods public SharedCacheMode getSharedCacheMode(); public ValidationMode getValidationMode();  Spring Framework implements methods in SpringPersistenceUnitInfo, but these implementations seem to be for older Hibernate versions. public String getSharedCacheModeName(); public String getValidationModeName();  Deploying applications with Spring 3.0.2-RELEASE and Hibernate 3.5.0-Final result in ""java.lang.NoSuchMethodError: getValidationMode"" exceptions.   ---  **Affects:** 3.0.2","closed","status: invalid,","spring-projects-issues","2010-04-11T17:49:44Z","2019-01-12T05:32:13Z"
"","11274","The reference document has wrong terminology that is 'static inner class'. [SPR-6608]","**[Kevin SeongHyun Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=kevinshlee)** opened **[SPR-6608](https://jira.spring.io/browse/SPR-6608?redirect=false)** and commented  On the right hand side of the following document has a box talking about 'static inner class'. http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-class-ctor  However, there is no such thing as 'static inner class' in Java. It is indeed 'static nested class'. Java has four types of nested classes namely, 'static nested class', 'inner class', 'local class' and 'anonymous class'. http://java.sun.com/docs/books/tutorial/java/javaOO/summarynested.html  The explanation about the terminology on the web page from the following link can probably be a reason why the term 'static inner class' is wrong. http://java.sun.com/docs/books/tutorial/java/javaOO/nested.html  It says, ""Terminology: Nested classes are divided into two categories: static and non-static. Nested classes that are declared static are simply called static nested classes. Non-static nested classes are called inner classes.""  As it tells, 'inner class' already means 'NON-static' thus the term 'static inner class' itself is contradictory.  It is also explained in the book entitled 'The Java Programming Language' that ""Non-static nested classes are called inner classes"" (Arnold, Gosling & Holmes 2006, p.136).  Regards, Kevin  Reference Arnold K., Gosling J. and Holmes D. 2006, The Java Programming Language, 5th edn, Addison-Wesley, California.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4931e8b229f5357b360accf46198123e30568aa9","closed","type: documentation,","spring-projects-issues","2009-12-23T04:36:52Z","2012-06-19T03:43:38Z"
"","10978","PersistenceAnnotationBeanPostProcessor initializes EntityManagerFactory even if the latter is marked as lazy-init=true [SPR-6312]","**[Kent Tong](https://jira.spring.io/secure/ViewProfile.jspa?name=freemant)** opened **[SPR-6312](https://jira.spring.io/browse/SPR-6312?redirect=false)** and commented  PersistenceAnnotationBeanPostProcessor tries to find all beans implementing the EntityManagerFactory interface and somehow actually initializes the EntityManagerFactory bean. This slows down the pace of development (eg, webapp reload).   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-11-08T20:19:02Z","2012-06-19T09:36:19Z"
"","11778","Refactor InternalResourceView to expose getRequestDispatcher for overriding [SPR-7118]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7118](https://jira.spring.io/browse/SPR-7118?redirect=false)** and commented  `InternalResourceView` obtains the `RequestDispatcher` within the `renderMergedOutputModel`. Please refactor this so that this logic to done by a protected `getRequestDispatcher method`, allowing subclasses to override the means by which the `RequestDispatcher` is located.  Use case: getting the `RequestDispatcher` from a different `ServletContext`.   ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-04-21T22:22:46Z","2012-06-19T03:42:49Z"
"","11705","Allow @Async to specify which executor to use [SPR-7043]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7043](https://jira.spring.io/browse/SPR-7043?redirect=false)** and commented  I would like to see an attribute added to the `@Async` annotation, which allows the specification of the name of the executor bean to be used for invocations on that method. This would be an alternative to specifying the executor name in the `` element.  The use case is that sometimes you want multiple executors in a context, and different `@Async`-annotated beans need to use different executors. Currently, there is no way to do this - all `@Async`-annotated beans in a given context must use whichever executor is configured in the `` element.  ---  **Affects:** 3.0.1  **Issue Links:** - #11513 Enable Executor qualification with `@Async` (_**""duplicates""**_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-28T23:31:16Z","2019-01-13T07:54:38Z"
"","11688","Detect circular @Bean references [SPR-7027]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7027](https://jira.spring.io/browse/SPR-7027?redirect=false)** and commented  When building a Spring context config using `@Configuration` and `@Bean`, it is easy to accidentally add a circular reference between beans without realising it. While this sort of circular reference is not a problem with XML configuration, it doesn't work with the `@Bean` style, giving a stackoverflow when deployed.  Diagnosing exactly where the circular reference is can be very difficult.  Judging by the stack trace, the `@Configuration-annotated` classes appear to be instrumented, which should make it possible for the instrumentation to detect a circular `@Bean` reference and fail with a meaningful, helpful error, preventing the stackoverflwo from happening, and aiding diagnoses.    ---  **Affects:** 3.0.1  2 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-03-24T00:48:21Z","2019-01-12T03:50:26Z"
"","11621","Provide utility for obtaining Resource content as a String [SPR-6956]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6956](https://jira.spring.io/browse/SPR-6956?redirect=false)** and commented  I'd like to see Spring provide an easy convenience utility for obtaining the content of a `Resource` instance as a `String`.  I have found myself writing logic to do this on more occasions than I care to count.  Perhaps the `ResourceUtils class` would be a good place for this, if not on the `Resource` class itself.   ---  **Affects:** 3.0.1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-07T22:41:13Z","2018-12-28T10:59:12Z"
"","11539","Allow @Async yo be used with request- and session-scoped beans [SPR-6873]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6873](https://jira.spring.io/browse/SPR-6873?redirect=false)** and commented  The new `@Async` mechanism is great, but sadly it doesn't work well in situations where request- and session-scoped beans are being used.  This is because those bean scopes are bound to ThreadLocals, which are not visible in cases where `@Async` is configured to use a `ThreadPoolExecutor`. It only works where a new thread is spawned for every invocation, as is the case with `SimpelAsyncTaskExecutor`, with the ThreadLocals being inherited by the spawned thread. However, thread spawning is not a scalable option.  Could the `AsyncExecutionInterceptor` be altered to manually propagate the scoped beans from the calling thread to the executor thread, either individually (via configuration), or automatically?   ---  **Affects:** 3.0.1  19 votes, 20 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-02-18T21:56:52Z","2019-01-12T03:50:29Z"
"","11538","AbstractFactoryBean.getObjectType() signature is incorrect [SPR-6872]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6872](https://jira.spring.io/browse/SPR-6872?redirect=false)** and commented  For #11358, the return type of `FactoryBean.getObjectType()` was changed from `Class`. This is great, but unfortunately, the correspinding abstract method in `AbstractFactoryBean` wasn't changed, so any classes which extend `AbstractFactoryBean` cannot use the wider return type.  ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12b30843c5d28739dcf6bc73a43f3ba1bac779e3","closed","in: core,","spring-projects-issues","2010-02-18T21:48:16Z","2019-01-11T17:00:18Z"
"","11522","Could SimpleJdbcTemplate/Operations/DaoSupport be deprecated now? [SPR-6856]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6856](https://jira.spring.io/browse/SPR-6856?redirect=false)** and commented  The types `SimpleJdbcDaoSupport` (which extends `JdbcDaoSupport`), `SimpleJdbcTemplate` and `SimpleJdbcOperations` were introduced in Spring 2.0 to make life easier for Java 5 users.  Now that Spring 3.0 is Java5+ only, would it be worthwhile moving the methods and code from the `SimpleJdbcXYZ` types into the corresponding `JbcXYZ` types, and then deprecating the `SimpleJdbcXYZ` versions? Assuming that this can done in a backwards-compatible way, then the reasons for the separation are now purely historical.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11524 Push the Java 5 simplifications in SimpleJdbcTemplate up to JdbcTemplate (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-02-17T03:16:17Z","2019-01-11T17:02:07Z"
"","11500","Add support for no-transform cache control header [SPR-6834]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6834](https://jira.spring.io/browse/SPR-6834?redirect=false)** and commented  The HTTP 1.1 RFC defines an optional ""no-transform"" value for the `Cache-Control` response header:  http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.5  Mobile web sites are generally recommended to set this header to prevent transcoders from mangling the markup.  Can we have support for this header value added to `WebContentGenerator`? It already has support for `no-store` and `no-cache`, so it would seem a logical place for it to go.  ---  **Affects:** 3.0 GA  This issue is a sub-task of #16413  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38f32e38169f7779b9fe20d46b69024039f190ce  1 votes, 4 watchers","closed","type: task,","spring-projects-issues","2010-02-12T22:48:34Z","2019-01-11T16:47:10Z"
"","11494","Extract URL construction logic out of UrlTag [SPR-6828]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6828](https://jira.spring.io/browse/SPR-6828?redirect=false)** and commented  I'd like to see the URL-creation logic extracted out of `UrlTag` into a standalone utility, more suitable for use within controller logic. This utility would essentially contain the logic currently held in `urlTag.createUrl()`. The tag need only collect the required information, then delegate to this utility.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-02-11T21:54:06Z","2011-03-02T04:35:11Z"
"","11491","Update PagedListHolder with generics [SPR-6825]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6825](https://jira.spring.io/browse/SPR-6825?redirect=false)** and commented  `org.springframework.beans.support.PagedListHolder` is still using a raw `List`, it should be updated to use generics, e.g. `PagedListHolder`   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f781e6266c7979747be38521834acba4f3e4fa5","closed","type: enhancement,","spring-projects-issues","2010-02-11T03:17:35Z","2012-06-19T03:43:56Z"
"","11416","Add customArgumentResolvers to  [SPR-6750]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6750](https://jira.spring.io/browse/SPR-6750?redirect=false)** and commented  The  schema permits the specification of messageConverters, which are passed on to the generated AnnotationMethodHandlerAdapter. I'd like to see the ability to specify the customArgumentResolvers also.  I suppose there's a fine line between making  minimalist and supporting common use cases only, and simply duplicating every property from AnnotationMethodHandlerAdapter and DefaultAnnotationHandlerMapping.   ---  **Affects:** 3.0 GA","closed","status: invalid,","spring-projects-issues","2010-01-22T00:30:56Z","2019-01-12T05:32:40Z"
"","11373","Selecting primary bean definition for autowiring with multi-level contexts [SPR-6707]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6707](https://jira.spring.io/browse/SPR-6707?redirect=false)** and commented  In #10541, behaviour was added to preferentially select primary=""true"" beans in the child context, in preference to primary=""true"" beans in the parent context. This works as expected.  There is an additional corner case that needs to be handled, however, when you have a multi-level context hierarchy.  For example, say I have contextA, containing beanA, marked as primary=""true"".  Now contextA has a child context (contextB), containing beanB, also marked as primary=""true"". Finally, we have contextC, which is a child of contextB. A bean in contextC wants auto-wiring with a bean.  Currently this will fail, since neither of beanA or beanB is in contextC. It would make sense, however, for contextC to preferentially select beanB from contextB, since it's in the ""nearest parent"" context.  I hope that makes sense.  ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-01-15T02:34:29Z","2019-01-11T15:42:43Z"
"","11372","Add conversion support for Joda Duration and Period [SPR-6706]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6706](https://jira.spring.io/browse/SPR-6706?redirect=false)** and commented  Spring 3 introduced formatting support for JodaTime's LocalDate, LocalTime, DateTime and ReadableInstant.  Can we please also have support for Duration and Period, using the ISO standard formats, e.g. PT1H2M  ---  **Affects:** 3.0 GA  **Issue Links:** - #18156 Add conversion support for java.time.Duration - #18294 Add JSR 310 Period and Duration Converters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc0b707175719d186a9c35f020e7a7ce57cf866e  7 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-14T22:33:15Z","2019-01-11T15:42:54Z"
"","11367","Add Resource support to OXM interfaces [SPR-6701]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6701](https://jira.spring.io/browse/SPR-6701?redirect=false)** and commented  It would be great if the OXM Unmarshaller interface had explicit support for the Spring Resource abstraction, i.e.  `Object unmarshal(Resource resource)`  This would make the Unmarshaller and Marshaller interfaces rather asymmetric, but it would make integration with other Spring components easier.   ---  **Affects:** 3.0 GA  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-14T20:13:41Z","2018-12-26T17:31:51Z"
"","11358","Generic return type on FactoryBean.getObjectType causes problems [SPR-6692]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6692](https://jira.spring.io/browse/SPR-6692?redirect=false)** and commented  I'm reluctant to classify this as a bug, but considering the lack of an acceptable workaround, it seems appropriate. This is related to #10650, but that issue was filed as an improvement, and I think the case is stronger than that.  Since Spring 3.0 supported Java5 generics, the return type of the `*getObject()*` method of `*FactoryBean*` has been narrowed to `*Class","closed","in: core,","spring-projects-issues","2010-01-14T01:55:03Z","2019-01-11T16:24:11Z"
"","11326","Disallow destroy-method when scope is prototype [SPR-6660]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6660](https://jira.spring.io/browse/SPR-6660?redirect=false)** and commented  Having recently encountered an obscure bug where a bean definition had both scope=""prototype"" and destroy-method specified, I'd like to suggest that when the bean scope is ""prototype"", the bean definition is not allowed to also specify destroy-method, since it will never be invoked.  Ideally, this would also apply to `@PreDestroy-annotated` bean classes, throwing an exception when the bean definition is parsed, but that might be a step too far.  ---  **Affects:** 3.0 GA  **Issue Links:** - #14027 Support DisposableBean on prototype and `@Configurable` beans using weak references  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-08T01:39:40Z","2019-01-13T07:56:08Z"
"","11280","Add human-readable descriptions for statuc codes in HttpStatus [SPR-6614]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6614](https://jira.spring.io/browse/SPR-6614?redirect=false)** and commented  I'd like to see the values defined in the org.springframework.http.HttpStatus enum be extended to include human-readable descriptions of each code, as defined in the HTTP RFC. These could be retrieved using a getStatusDescription() method.  This is already implemented in Commons HttpClient (see http://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/HttpStatus.html#getStatusText%28int%29), and it would good to see it in Spring also.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/416777022dff7a420d3d0d3d1a04c71905b67828","closed","type: enhancement,","spring-projects-issues","2009-12-25T19:39:54Z","2012-06-19T03:43:30Z"
"","11239","Reduce REST-related log noise [SPR-6573]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6573](https://jira.spring.io/browse/SPR-6573?redirect=false)** and commented  When using `@PathVariable` REST-style annotations, you can get a lot of log noise at context startup. Each generated URL mapping triggers a log entry like this:  [DefaultAnnotationHandlerMapping] Mapped URL path [/myPath.*] onto handler [com.xyz.MyController@100571e]  With relatively simple REST applications, you can get dozens of log entries as each path is expended into multiple mappings.  These log entries are generated by AbstractUrlHandlerMapping.registerHandler(). Can they be knocked down to DEBUG level?   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2009-12-16T20:57:06Z","2014-09-19T12:23:02Z"
"","11214","MBeanClientInterceptor doesn't handle arrays of CompositeData [SPR-6548]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6548](https://jira.spring.io/browse/SPR-6548?redirect=false)** and commented  The convertResultValueIfNecessary method of MBeanClientInterceptor has explicit support for the CompositeData and TabularData types used by MXBeans. Howwver, it doesn't handle arrays of those types, which is permitted by the MXBean standard.  For example, take the MXBean interface com.sun.management.HotSpotDiagnosticMXBean, which is part of the Sun JRE 1.6, and implemented by sun.management.HotSpotDiagnostic.  This has a getDiagnosticOptions method which, when invoked, returns an array of CompositeData. MBeanClientInterceptor doesn't recognise it and throws an exception.  MBeanClientInterceptor needs to recognise this array, unwrap it, convert the elements of the array, then repack into the appropriate form.   ---  **Affects:** 2.5.6, 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1ff99f25694167d3a9d800d80acb04aba7a3709c","closed","in: core,","spring-projects-issues","2009-12-10T22:25:04Z","2012-06-19T03:43:10Z"
"","11173","@since missing on JBossLoadTimeWeaver [SPR-6507]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6507](https://jira.spring.io/browse/SPR-6507?redirect=false)** and commented  Uber-trivial documentation issue, but the new org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver class is missing the javadoc ""`@since` 3.0""   ---  **Affects:** 3.0 RC3","closed","type: bug,","spring-projects-issues","2009-12-03T02:08:17Z","2012-06-19T03:44:02Z"
"","11010","InitDestroyAnnotationBeanPostProcessor is flipping the initialization order [SPR-6344]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6344](https://jira.spring.io/browse/SPR-6344?redirect=false)** and commented  As of RC1, the order in which bean init methods are being executed has been reversed, compared to the behaviour in 2.5.6 and M4.  Specifically, InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata.addInitMethod is now adding each successive init method to the front of the list. Prior versions added it to the end.  This manifests itself as a problem in code where there are multiple init methods (e.g. multiple `@PostConstruct` methods) in one class. We have code where we're relying on those methods being executed in order, as returned by the reflection API. If there's executed in reverse order, it all breaks.  Is there a reason these methods are being explicitly reversed?   ---  **Affects:** 3.0 RC1, 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3b9605bc57f5d456be4471cac5e7073fe3657a79","closed","in: core,","spring-projects-issues","2009-11-13T01:13:29Z","2012-06-19T03:43:19Z"
"","10982","Provide a ""FrameworkFilter"" as a Wicket-friendly alternative to FrameworkServlet [SPR-6316]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6316](https://jira.spring.io/browse/SPR-6316?redirect=false)** and commented  I've been doing some work seeing how best to integrate Apache Wicket into our existing Spring MVC applications. In particular, I'm trying to retain our ""one spring context per servlet"" architecture.  I've had a look at how the Wicket folks have integrated with Spring already, and in order for Wicket code to access spring beans, it requires that those spring beans reside in the root webapp context. This isn't always desirable, however, such as in our case where each servlet has its own spring context. So I've been trying to see how to allow Wicket to access the servlet appcontext.  The main problem is that Wicket is implemented as a Filter, not a Servlet. This makes the lifecycle of the application a bit fragile. If there's a Spring servlet that creates and manages the appcontext, and this servlet is configured to initialise on container startup, then it can publish the appcontext to the ServletContext. When the first request comes in, the Wicket filter can retrieve this context and the beans therein.  If the ""load on startup"" flag is not set on the servlet, however, this all breaks, which makes things all a little bit too fragile.  Additionally, we need to have a Spring DispatcherServlet present in order to manage the context, even though Spring will not be doing any actual dispatching, since Wicket has control. The servlet is there purely to perform appcontext management.  My suggestion is to provide a servlet Filter which would sit in front of the Wicket filter, and would perform similar tasks to that currently performed by FrameworkServlet, e.g. context initialization and publishing. Perhaps the meat of FrameworkServlet could be extracted into a more neutral class, and invoked by both FrameworkServlet and our new filter.  There's a strong similarity here to ContextLoader and ContextLoaderListener, but those are very simple, performing only root context initialisation.   ---  **Affects:** 2.5.6, 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-11-09T01:41:20Z","2018-12-26T16:24:49Z"
"","10981","parseStringValue gone from PropertyPlaceholderConfigurer [SPR-6315]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6315](https://jira.spring.io/browse/SPR-6315?redirect=false)** and commented  This is a deliberately refiled duplicate of #10827, which was originally filed as a ""refactor"", and I think it perhaps should be ""bug"".  Between 3.0.0 M4 and RC1, the protected parseStringValue method disappeared from PropertyPlaceholderConfigurer. For custom subclasses, this method was the main entry point into the superclass functionality. Since it had not been deprecated, it seemed like the correct thing to do, but has now been removed, breaking compile-time compatibility between 2.5 and 3.0.  Can the method be reinstated somehow, that perhaps invokes the new methods that do the work? It can then be marked as deprecated.  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10827 parseStringValue gone from PropertyPlaceholderConfigurer (_**""duplicates""**_) - #11180 Backward compatibility issue in class org.springframework.beans.factory.config.PropertyPlaceholderConfigurer","closed","in: core,","spring-projects-issues","2009-11-09T01:14:11Z","2019-01-12T16:38:52Z"
"","10911","Add autodetectInterfaces capability to ProxyFactory [SPR-6243]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6243](https://jira.spring.io/browse/SPR-6243?redirect=false)** and commented  ProxyFactoryBean has the ""autodetectInterfaces"" property which, when set to true, will cause the factory to generate a JDK proxy if the target has visible interfaces.  ProxyFactory, on the other hand, does not have this ability, and will only generate a JDK proxy if explicitly given a list of interfaces to proxy.  Can we have autodetectInterfaces added to ProxyFactory?  More generally, I think ProxyFactory and ProxyFactoryBean need to have more in common, if possible. Is there a way that ProxyFactoryBean could simply be made a subclass of ProxyFactory, adding only the FactoryBean semantics?   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-10-15T19:39:01Z","2012-06-19T09:36:25Z"
"","10903","Make EhCacheFactoryBean.createCache() protected [SPR-6235]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6235](https://jira.spring.io/browse/SPR-6235?redirect=false)** and commented  EhCacheFactoryBean's createCache() method is currently private. Please make this protected, to allow subclasses to override.   ---  **Affects:** 2.5.6, 3.0 M4","closed","type: task,","spring-projects-issues","2009-10-13T20:54:34Z","2012-06-19T03:43:15Z"
"","10902","Add facility to EhCacheFactorybean for registering event listeners [SPR-6234]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6234](https://jira.spring.io/browse/SPR-6234?redirect=false)** and commented  With EhCach you can register event listeners with individual caches. Unfortunately, Spring's EhCacheFactoryBean does not provide the facility for configuring these.  We still have the option of configuring the caches in ehcache.xml (see http://ehcache.org/EhcacheUserGuide.html#id.s28), but I much prefer doing this via EhCacheFactoryBean.  I suggest being able to inject a List of CacheEventListenerFactory objects into EhCacheFactoryBean, which would then register them with the cache it creates.  ---  **Affects:** 2.5.6, 3.0 M4  **Issue Links:** - #10312 EhCacheFactoryBean should support CacheEventListener (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/747300f34ce80dca644b82d314b8ebb727b4882e","closed","type: enhancement,","spring-projects-issues","2009-10-13T20:50:38Z","2019-01-11T15:06:46Z"
"","11312","The Reference Documentation 2.5.6 states that the AbstractController.handleRequest() method is final [SPR-6646]","**[Kengkaj S.](https://jira.spring.io/secure/ViewProfile.jspa?name=kengkaj.s)** opened **[SPR-6646](https://jira.spring.io/browse/SPR-6646?redirect=false)** and commented  In this page: http://static.springsource.org/spring/docs/2.5.6/reference/mvc.html, the document states that:  > Note that you cannot add advice to final methods using Spring MVC. This means it won't be possible to add advice to for example the AbstractController.handleRequest() method.  But in Spring Framework 2.5.6 the AbstractController.handleRequest() method is not a final method.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f840b10975ae6d6380a10ef3b9f63fb78414c9c","closed","type: documentation,","spring-projects-issues","2010-01-05T20:16:39Z","2012-06-19T03:42:50Z"
"","11045","RC2: Issue with RequestMethod.GET differs from M2 [SPR-6378]","**[Ken Sipe](https://jira.spring.io/secure/ViewProfile.jspa?name=kensipe)** opened **[SPR-6378](https://jira.spring.io/browse/SPR-6378?redirect=false)** and commented  I have a demo for Spring 3 Web that I've been running for some time... the upgrade to RC2 broke the demo.  The code is listed below.  What we need is details on the order of requestmappings... I thought I saw that earlier this year in the forums, but I can't find it anymore.  Can someone please provide the details on the order of requestmappings... thanks.  The code below (which worked before) now fails for a GET request against the list method or http://localhost:8080/mvc/book/list  I had specified the GET and POST for clarification before on the create methods... after some investigation, I discovered that if I remove the method = RequestMethod.GET on the create method that the app begins to work.  So I can work around this.  What behavior should be expected?  ``` @Controller public class BookController {      @Autowired     BookDAO dao;      // http://localhost:8080/mvc/book/list     @RequestMapping(""list"")     public List list() {         return dao.findAllBooks();     }      // http://localhost:8080/mvc/book/book?id=12     @RequestMapping(""book"")     public Book book(@RequestParam(required = true) Long id) {          Book book = dao.getBook(id);         return book;     }      @RequestMapping(method = RequestMethod.GET)     public Book create() {         return new Book();      }      // http://localhost:8080/mvc/book/create (POST)     @RequestMapping(method = RequestMethod.POST)     public String create(@ModelAttribute Book book, BindingResult results) {          if (book == null)             return null;          dao.save(book);          return ""redirect:list"";     } } ```  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11141 Combining ControllerClassNameHandlerMapping and `@RequestMapping` with relative value on Controller method  doesn't work anymore (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/89975c8b79f052fa218e247d3c33e3ad1fb1bcf5","closed","type: bug,","spring-projects-issues","2009-11-17T15:52:48Z","2019-01-13T07:57:12Z"
"","11715","Allow usage of ConversionService for Jackson HttpMessageConverter [SPR-7054]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-7054](https://jira.spring.io/browse/SPR-7054?redirect=false)** and commented  I am having a heck of a time doing complex Ajax stuff with Spring MVC 3.0. While I totally appreciate a lot of the advancements, there are a few features that are just ""missing"".  The one thing I am having problems with is `@RequestBody`. It seems that Spring is handling JSON mappings to Strings, ints, longs and other primitive types just fine. Unfortunately... and this is extremely disappointing... Spring does not also use the property editors.  So, in its current state, we can create an object with ""long myDomainObjectId"" but not ""MyDomainObject myDomainObject"" and have Spring do the mapping for us. Instead, Spring throws back:  ``` The server refused this request because the request entity is in a format not supported by the requested resource for the requested method (). ```  In Firebug, it just says, ""Unsupported Mime type"". And before you say anything, I am sending ""application/json"" with the charset set to utf8 (as many examples say to do, although I've tried it all kinds of ways). I have used every option conceivable in jQuery - this is a problem with Spring.  So guys... are we supposed to do all this mapping ourselves? What if we are sending json data that is nested 2 or 3 times - do we manually traverse the ""long[] ids"" arrays and fetch everything ourselves? What if we have to do this for 100 controllers actions? My god, that is insane.  ---  Now, I have tried to use GET instead of POST, even though POST is what I want. However, this causes all kinds of other problems with jQuery. For example,  ``` {""activeQuestion"":""551"",""categories"":[""129"",""129"",""128""],""categoryAnswers"":[""487"",""489"",""488""]} ```  You would think that this would transfer fine... but it doesn't. jQuery creates these GET Request headers:  ``` ?activeQuestion=551& categories[]=129& categories[]=128& categoryAnswers[]=487& categoryAnswers[]=488 ```  As you can see, it doesn't put the indexes for the array notation, and it also chops out a duplicate. The only way to fix this via jQuery is to wrap the numbers in their own objects. Man, talk about bloated! That means we have to create bloated DTO objects that mirror the JSON data... and then convert to the ""REAL"" domain model afterward.  While this GET approach is slightly better because at least Spring does in fact do use the property editors... we still have to create a bunch of dummy objects that pollute the system for every controller action. Not to mention, we have to use GET for everything - even things that should be POST.  ---  I will admit, maybe I don't know enough about Spring 3.0's new features and there is solutions around this stuff... but that only emphasizes the failure of your documentation then... as well as the failure in your ""Spring 3.0 Simplications for Ajax"" article, which doesn't talk about doing anything complicated.  And I'm just getting started... but it seems all Ajax examples in every framework - JavaScript or otherwise - just show really simple, easy examples. I guess they know their frameworks aren't up to snuff when it comes to something complex - like ""a list of numbers"".  Guys, why can't we just get this stuff to ""Work""? :(  Thanks for listening. I apologize for venting, but I have went from YUI 3.0 -> jQuery... and now because of jQuery's poor API design as well as it's crappy .ajax implementation, I may have to try out Dojo to see if it's any better. YUI 3.0 is bloated beyond belief, it's ajax requests are 10x slower than jQuery's... and ultimately, the new sandbox model is terrible for trying to wrap YUI in an application core framework to make sure it doesn't get exposed to higher levels of the application-specific JavaScript.  It would seem that nobody has gotten this ajax stuff to work seamlessly. Yuck. No wonder I don't want to touch it. Now I have to.  ---  **Affects:** 3.0.2  **Issue Links:** - #11397 MappingJacksonHttpMessageConverter's ObjectMapper does not use ConversionService when binding JSON to JavaBean properties (_**""duplicates""**_) - #15394 Spring dependency injection for Jackson serializers - #16758  Support jackson mix-in classes in Jackson2ObjectMapperFactoryBean - #16918 Add serializerByType() deserializerByType() and mixIn() to Jackson2ObjectMapperBuilder - #11406 Spring MVC Binding Lifecycle differs between `@RequestBody` arguments and plain JavaBean arguments  7 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-29T21:08:18Z","2019-01-13T21:46:32Z"
"","11673","Problem with running openSessionInView on tomcat 6 debian server using lastest 3.0.2 snapshot [SPR-7008]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-7008](https://jira.spring.io/browse/SPR-7008?redirect=false)** and commented  Okay, I've been using the 3.0.2 snapshots because there was a big in the form tag library where it was deleting ""["" and ""]"" from the path attribute. Now that I go to deploy my application to tomcat... it is having problems with the OpenSessionInView filter. I know the filter was previously setup correctly, so something got changed by upgrading from 3.0.1.RELEASE to 3.0.2 snapshot in the last 2 days.  Here's the error: [code] INFO: Deploying web application archive jobprep.war Mar 19, 2010 9:12:49 AM org.apache.catalina.core.ApplicationContext log INFO: Initializing Spring root WebApplicationContext Mar 19, 2010 9:13:10 AM org.apache.catalina.core.StandardContext filterStart SEVERE: Exception starting filter openSessionInViewFilter java.lang.NoSuchFieldError: MANUAL at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.\(OpenSessionInViewFilter.java:102) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:513) at java.lang.Class.newInstance0(Class.java:355) at java.lang.Class.newInstance(Class.java:308) at org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:255) at org.apache.catalina.core.ApplicationFilterConfig.setFilterDef(ApplicationFilterConfig.java:397) at org.apache.catalina.core.ApplicationFilterConfig.\(ApplicationFilterConfig.java:108) at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:3800) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4450) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:526) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:850) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:724) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:493) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1206) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:314) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) at org.apache.catalina.core.StandardHost.start(StandardHost.java:722) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:516) at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) at org.apache.catalina.startup.Catalina.start(Catalina.java:583) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413) Mar 19, 2010 9:13:10 AM org.apache.catalina.core.StandardContext start SEVERE: Error filterStart Mar 19, 2010 9:13:10 AM org.apache.catalina.core.StandardContext start SEVERE: Context [/jobprep] startup failed due to previous errors Mar 19, 2010 9:13:10 AM [/code]  I can disable it now and maybe my app will mostly work. Help?  If I don't use the 3.0.2 snapshot, what else can I use?   ---  **Affects:** 3.0.2","closed","status: invalid,","spring-projects-issues","2010-03-18T21:40:28Z","2019-01-12T05:32:19Z"
"","11654","Spring web's tag library removes ""["" and ""]"" in the path attribute for input (and possibly others). [SPR-6989]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-6989](https://jira.spring.io/browse/SPR-6989?redirect=false)** and commented  I have some code that purposefully puts ""["" and ""]"" in the path, which eventually gets rendered to the id and name attributes on the input tag.  Code:  ```  ```  At a high level, it gets used like this: Code:  ```  ```  Unfortunately, spring's tag library is removing the ""["" and ""]"", so what is left over is a giant string value. I **must** use this pattern since this page has multiple input fields that are totally random based on the list of text chunks.  Each form value is supposed to map to this:  ``` private Map answers = new HashMap(); ```  Of course, when the server tries to get the values, there are NPE's everywhere due to Spring's stupidity.  How did this break? I was using plain html before, and I just recently switched over to the tag library because it was the only way to get multipart's working correctly. Otherwise, Spring didn't pass the MultipartFile object to the domain object. I tried everything, and this is what fixed it.  Now that I have converted about 50 forms to use the tag library, I have finally arrived to the 1 outlier form that does not covert over successfully. Sigh.  Please tell me how I can get this to work so I can get this production code launched.  ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=86199  **Issue Links:** - #11672 AbstractDataBoundFormElementTag generates incorrect input name attribute when using indexed properties (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2010-03-15T19:21:13Z","2019-01-11T16:34:15Z"
"","10937","a value that is null set on a @PathVariable should return a better exception message [SPR-6270]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-6270](https://jira.spring.io/browse/SPR-6270?redirect=false)** and commented  Currently, if a path variable is not passed in the url, this is the exception that gets thrown:  java.lang.IllegalArgumentException: Attribute value must not be null  When working on the web application, this exception doesn't say that much. It is extremely confusing because the exception trace has NOTHING to do with the developer's code at all. The exception text does not at all tell the developer what went wrong - not even an indication, which leads to extra time figuring out what happened (which is not fun).  The exception should say something like, ""The Path Variable {blahId} was set to null on url /rest/myController/{blahId}.""  This would make it instantly clear what went wrong. Please make this change.   ---  **Affects:** 3.0 RC1","closed","in: web,","spring-projects-issues","2009-10-24T09:48:45Z","2019-01-11T15:11:34Z"
"","10886","spring-form:select tag does not work [SPR-6218]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-6218](https://jira.spring.io/browse/SPR-6218?redirect=false)** and commented  I'm trying to get spring's select tag to work in spring 3.0.0rc1, and it doesn't work.  ```  ```  This is the code called from freemarker. everything else works out of freemarker except for this, and I doubt freemarker is the problem.  The problem is that when the form loads, the spring select tag does not set the initial value, even though it is 100% set. I can verify this by outputting ${myobject.province.id} and it will give an id like 6. Since there is most definitely an object in ""provinces"" list with an id of 6, it should add selected=""selected"". However, it is not.  I know this is a problem with the tag because it has 100% nothing to do with my code. Upon selecting an option, it gets bound properly through the property editor and eventually arrives in the databases. So basically, the problem is with the tag itself.  I have made my own rudimentary \ and \ that work... so I dunno why Spring's tag doesn't work.  New Bug introduced in rc1?   ---  **Affects:** 3.0 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?p=264127#post264127","closed","status: invalid,","spring-projects-issues","2009-10-09T23:18:51Z","2019-01-12T05:33:00Z"
"","10884","OpenSessionInViewFilter doesn't work properly [SPR-6216]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-6216](https://jira.spring.io/browse/SPR-6216?redirect=false)** and commented  Hi,  I've been trying forever to get the open session in view filter to work... and it doesn't. My sessionFactory is actually called ""sessionFactory"". I get log output saying that it is opening and closing. However, whence it finally gets to a proxy, I get a lazy initialization exception. Basically, this filter isn't doing what it is supposed to do at all.  ```              openSessionInViewFilter         org.springframework.orm.hibernate3.support.OpenSessionInViewFilter                      sessionFactoryBeanName             sessionFactory                             openSessionInViewFilter         myDispatcherServlet         /*      ```  I've tried virtually every combination of parameters I can think of... no url pattern, no servlet name, etc. I've tried the session param name as well with false and true values that is expressed in the documentation. Nothing works.  Is it tomcat 6? Is it spring rc1? Anything I am doing wrong?   ---  **Affects:** 3.0 RC1","closed","in: web,","spring-projects-issues","2009-10-09T21:22:20Z","2019-01-11T15:10:11Z"
"","11729","Support @Required on field [SPR-7069]","**[Kek](https://jira.spring.io/secure/ViewProfile.jspa?name=kek)** opened **[SPR-7069](https://jira.spring.io/browse/SPR-7069?redirect=false)** and commented  It could be helpfull to have the same target scope for annotation `@Required` as for `@Autowired`. When I need to be sure, that the field will be injected (configured) than I want to use `@Required` annotation on the field.  But in current version I must define the setter for this field, because the annotation has `@Target`(ElementType.METHOD). But in my opinion it could be the same as for `@Autowired` annotation `@Target`({ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD}). I'm not sure with the Constructor target, but the ElementType.FIELD could be helpfull.   ---  **Affects:** 3.0.1","closed","in: core,","spring-projects-issues","2010-04-05T23:37:13Z","2019-01-12T05:32:15Z"
"","11822","Link to location of Spring samples in reference documentation [SPR-7163]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7163](https://jira.spring.io/browse/SPR-7163?redirect=false)** and commented  Spring sample projects reside in the following SVN repository: http://src.springframework.org/svn/spring-samples.  Users are expected to check this repository out to build, deploy, and review our sample applications.  This needs to be mentioned in the reference documentation.  We may also want to mention tips for how to checkout using a SVN client.  ---  **Affects:** 3.0.2  **Issue Links:** - #11820 Update reference manual regarding PetClinic (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42cdfbcd89c3116622fee5d1c57435ae70fcc344","closed","in: core,","spring-projects-issues","2010-05-03T02:58:21Z","2019-01-11T13:09:17Z"
"","11800","Add support for versioning resources [SPR-7141]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7141](https://jira.spring.io/browse/SPR-7141?redirect=false)** and commented  As a user, I would like support for resource versioning so it is possible to get the benefits of caching with the ability to refresh changes.  Implementation option #1  ---  Automatic versioning with file timestamps e.g. /resources/main.123456789.css  Implementation option #2  ---  Manual versioning with version number e.g. /resources/version-1.0.0/main.css  Both options would require ResourceHttpRequestHandler to strip out the version number from the request URI to obtain the ""real"" resource path.  In addition, a view helper function or tag would be needed to generate versioned URLs e.g.  might generate http://localhost:8080/app/resources/main.123456789.css.  Resources: http://stackoverflow.com/questions/118884/what-is-an-elegant-way-to-force-browsers-to-reload-cached-css-js-files http://particletree.com/notebook/automatically-version-your-css-and-javascript-files/  ---  **Affects:** 3.0.2  This issue is a sub-task of #12058  **Issue Links:** - #12401 Support for generating links to static resources such as CSS and JS files hosted at a CDN such as Amazon Cloudfront  2 votes, 4 watchers","closed","in: web,","spring-projects-issues","2010-04-27T08:04:53Z","2019-01-13T21:46:10Z"
"","11799","Add support for compressing resources [SPR-7140]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7140](https://jira.spring.io/browse/SPR-7140?redirect=false)** and commented  As a user, I would like static resources of text/* mime-types compressed by default.  All text resources should be gzipped.  JavaScript and CSS files should be minified before they are gzipped.  There should be the option to disable runtime compression, since you don't want this on in development mode and it's possible some environments will compress as part of their build process.  Implementation option #1: - Compress each time a resource is requested.  Implementation option #2: - Compress the first time a resource is requested.  After that, add the compressed version to a disk-level cache.  Future requests for the resource are served from the cache.  ---  **Affects:** 3.0.2  This issue is a sub-task of #11776  **Issue Links:** - #16336 gzip compression in DispatcherServlet  2 votes, 1 watchers","closed","in: core,","spring-projects-issues","2010-04-27T07:55:09Z","2019-01-11T13:10:16Z"
"","11787","Minor issues with the core.io.Resource abstraction [SPR-7127]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7127](https://jira.spring.io/browse/SPR-7127?redirect=false)** and commented  Noticed when implementing #11776:  * No way to obtain original resource path without down-casting to implementation e.g. ClassPathResource or ServletContextResource.  Casting to ContextResource is a possibility but most public resource implementations do not implement this.  One consequence of this is it makes it difficult to enforce that a specific path is a directory path having a final slash, for example ""resources/"".  * resource.isReadable() returns true in most cases, even if resource.exists() returns false.  One case is a ClassPathResource.  I found this odd.  ---  **Affects:** 3.0.2","closed","status: bulk-closed,","spring-projects-issues","2010-04-23T06:28:06Z","2019-01-12T03:50:20Z"
"","11776","Add ResourceHttpRequestHandler for efficiently serving static resouces [SPR-7116]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7116](https://jira.spring.io/browse/SPR-7116?redirect=false)** and commented  The Spring JavaScript module of the Web Flow project contains a ResourceServlet that efficently serves static resources such as .css and .js files.  This servlet has proven generally useful and, as a user, I'd like this functionality available in Spring Framework's core web support.  Specifically:  * I'd like this functionality to be configurable within a Spring MVC DispatcherServlet, without requiring another servlet to be configured in web.xml.  This simplifies setup and also allows for greater configuration control with the Spring MVC namespace.  * Caching should be aggressive.  All resources served up should be cached with a far out expiration date (e.g. 1 year).  * Compression should be applied to text-based resources e.g. .css, .js, .json, and .xml files (should be possible to disable)  * Minification should be applied to text-based resources where possible e.g. .js (should be possible to disable)  * Resource bundling should be supported.  This provides the ability to load multiple resources in one HTTP request, which can improve performance.  * Resource versioning should be supported.  This causes clients to refresh cached resources when a new version of the application is deployed.  This prevents clients from working with stale content after deployment of a new version. (should be possible to disable, when disabled no caching should be performed)  * It should be possible to serve resources out of the webapp root as well as jar file bundles.  * The ResourceHandler should aim to be compatible with JSF 2.0 resource handling as far as possible (we should not make compromises but we shouldn't be different when we can align).  The ResourceHandler should also be capable of being the ""default handler"" for the DispatcherServlet.  This would provide a static resource handling fallback similar to how the Servlet Container works.  ---  **Affects:** 3.0.2  **Attachments:** - [ResourceHttpRequestHandler.java](https://jira.spring.io/secure/attachment/16481/ResourceHttpRequestHandler.java) (_9.01 kB_) - [ResourceHttpRequestHandlerTests.java](https://jira.spring.io/secure/attachment/16482/ResourceHttpRequestHandlerTests.java) (_6.44 kB_)  **Sub-tasks:** - #11799 Add support for compressing resources  **Issue Links:** - #12058 Improve handling of static resources  (_**""is depended on by""**_) - #11307 Move org.springframework.js.resource.ResourceServlet to Spring framework core (_**""supersedes""**_)  9 votes, 16 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-21T13:47:00Z","2019-01-13T21:46:18Z"
"","11771","TypeDescriptor context lost when converting collection or map elements [SPR-7111]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7111](https://jira.spring.io/browse/SPR-7111?redirect=false)** and commented  When performing a collection-conversion such as ArrayToCollection, CollectionToCollection, or MapToMap, as part of a collection-field binding, annotations on the target field can be used to influence conversion behavior; for example, to apply a specific mask when binding a set of string values to a Set\.  For this to work, the TypeDescriptor context for the target field needs to be preserved across the element conversions.  Currently this context is lost when actually converting the individual elements.   ---  **Affects:** 3.0.2","closed","in: core,","spring-projects-issues","2010-04-17T06:42:00Z","2012-06-19T03:43:13Z"
"","11770","Cache results of Converter lookup in GenericConversionService to improve performance [SPR-7110]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7110](https://jira.spring.io/browse/SPR-7110?redirect=false)** and commented  Currently every call into the ConversionService results in a fairly-involved search to match the Converter to use for a given source/target TypeDescriptor pair.  Performance could likely be improved significantly by caching the results of converter lookup operations.  ---  **Affects:** 3.0.2  **Issue Links:** - #11415 Optimize GenericConversionService.findConverterForClassPair","closed","type: enhancement,","spring-projects-issues","2010-04-17T06:37:52Z","2019-01-13T21:46:20Z"
"","11769","Optimize ObjectToStringConverter to ensure copies are not made when source is already a String [SPR-7109]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7109](https://jira.spring.io/browse/SPR-7109?redirect=false)** and commented  The existing String should be returned as-is unless their is some specific transformation that needs to be applied by some other converter.   ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-04-17T06:34:49Z","2012-06-19T03:43:57Z"
"","11765","Improve conversion system logging [SPR-7105]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7105](https://jira.spring.io/browse/SPR-7105?redirect=false)** and commented  * In GenericConversionService, log calls to canConvert explicitly like we do calls to convert * In FormattingConversionService, log calls to the AnnotationFormatterFactories; also log any special coersion that is required for Parser/Printer instances returned by these factories.    ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-04-16T03:13:17Z","2012-06-19T03:42:57Z"
"","11764","Cache the annotation-driven converters created from a AnnotationFormatterFactory to improve performance [SPR-7104]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7104](https://jira.spring.io/browse/SPR-7104?redirect=false)** and commented  Currently FormattingConversionService delegates to an AnnotationFormatterFactory on every conversion attempt to obtain the Printer or Parser to print/parse an annotated-field value, respectively.  This is a bit inefficient, especially since each invocation also results in generic type introspection against the Printer/Parser instance.  We can improve performance by caching by Annotation + field type.  So when the same annotation with the same attributes is found for the same field type across different fields, we'd still resolve the same (cached) Printer/Parser instance.   ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-04-16T03:10:26Z","2012-06-19T03:44:10Z"
"","11762","Field Annotation-driven conversion fails for properties where the first and second letters are upper case [SPR-7102]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7102](https://jira.spring.io/browse/SPR-7102?redirect=false)** and commented  The Roo project team has encountered a strange issue where a Date field named ""aDate"" annotated with `@DateTimeFormat` fails to convert properly when bound to by Spring's DataBinder.  I've reproduced the issue in both an acceptance test (inside a sample Spring MVC web application) & a standalone unit test.  From what I can tell, this problem has to do with the use of ITDs on the bind target class.  In this sample, `@RooJavaBean` is placed on the class & used to generate an ITD that introduces getter/setter property accessors for the ""aDate"" field.  When conversion runs, the TypeDescriptor built for this property simply does NOT contain the field annotation-information, so `@DateTimeFormat` is not respected and the conversion rule is not applied.  If I remove use of ITDs, and just end up with a plain JavaBean, binding & type conversion works fine--the TypeDescriptor is built properly.  What makes this issue more odd is it seems limited to this one field named ""aDate"".  Binding to another field named ""birthDate"" works fine, even when ITDs are used.  So the name of the field also appears to have something to do with this.  Here are the artifacts illustrating the problem:  The JavaBean bind target:  ``` @RooJavaBean public class Stefan {      @DateTimeFormat(style = ""S-"")     private Date birthDate;      @DateTimeFormat(style = ""S-"")     private Date aDate; } ```  The Roo-generated ITD:  ```  privileged aspect Stefan_Roo_JavaBean {          public Date Stefan.getBirthDate() {         return this.birthDate;     }          public void Stefan.setBirthDate(Date birthDate) {         this.birthDate = birthDate;     }          public Date Stefan.getADate() {         return this.aDate;     }          public void Stefan.setADate(Date aDate) {         this.aDate = aDate;     }      } ```  Test case:  ``` public class DataBinderTests { 	@Test 	public void testaDate() { 		Stefan s = new Stefan(); 		DataBinder binder = new DataBinder(s); 		FormattingConversionServiceFactoryBean factory = new FormattingConversionServiceFactoryBean(); 		factory.afterPropertiesSet(); 		FormattingConversionService conversionService = factory.getObject(); 		binder.setConversionService(conversionService); 		MutablePropertyValues pvs = new MutablePropertyValues(); 		pvs.addPropertyValue(""birthDate"", ""4/15/10""); 		pvs.addPropertyValue(""aDate"", ""4/15/10""); 		binder.bind(pvs); 		assertFalse(binder.getBindingResult().hasFieldErrors(""birthDate""));		 		assertFalse(binder.getBindingResult().hasFieldErrors(""aDate""));		 		assertEquals(""4/15/10"", binder.getBindingResult().getFieldValue(""birthDate"")); 		// FAILS -- value is Thu Apr 15 00:00:00 EDT 2010 - which is date.toString() 		assertEquals(""4/15/10"", binder.getBindingResult().getFieldValue(""aDate"")); 	} } ```  If you take the Stefan class and ""push in"" the ITD to make it a regular JavaBean, the test case will pass.   ---  **Affects:** 3.0.2  **Issue Links:** - [ROO-787](https://jira.spring.io/browse/ROO-787) Calendar widget doesn't show in update view (_**""is depended on by""**_)","closed","in: core,","spring-projects-issues","2010-04-16T01:20:27Z","2012-06-19T03:43:35Z"
"","11712","Common ""Invoke POJO Method in Context"" abstraction for Spring MVC, Web Flow, and Integration [SPR-7051]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7051](https://jira.spring.io/browse/SPR-7051?redirect=false)** and commented  There are at least three places in Spring where POJO methods with flexible signatures can be invoked: - Spring MVC `@Controllers` - Spring Web Flow 3 Java `@Flows` - Spring Integration 2 Java-based Endpoint Consumers  It would be nice and easier for us to maintain if each of these programming models was able to utilize a common abstraction.  In all cases, there is the common concept of ""invoking a POJO method in a context"", where the method signature is flexible and argument values are resolved against the context.  To this end, I've attempted to extract the basics of such an abstraction to meet Web Flow 3's needs.  It is reviewable here:  API: — https://src.springframework.org/svn/spring-webflow/trunk/webflow-core/src/main/java/org/springframework/webflow/util/method/  SPI: — https://src.springframework.org/svn/spring-webflow/trunk/webflow-core/src/main/java/org/springframework/webflow/util/method/spi/  General implementation support: — https://src.springframework.org/svn/spring-webflow/trunk/webflow-core/src/main/java/org/springframework/webflow/util/method/support/  Example usage: — https://src.springframework.org/svn/spring-webflow/trunk/webflow-core/src/main/java/org/springframework/webflow/java/engine/JavaFlowDefinitionFactory.java (see FlowMethodInvokerFactory nested class)   ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-03-29T07:17:02Z","2018-12-28T10:19:24Z"
"","11711","Add Method[] ReflectionUtils.findMethods(Class, MethodFilter) [SPR-7050]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7050](https://jira.spring.io/browse/SPR-7050?redirect=false)** and commented  Useful for finding an array of methods that match a specific criteria.  Needed by Web Flow 3 Java Flow definition compiler.  A variant that returns **exactly one** method that matches the filter would also be useful.  ```  	public static Method[] findMethods(Class clazz, MethodFilter filter) { 		Method[] methods = ReflectionUtils.getAllDeclaredMethods(clazz); 		List matched = new ArrayList(); 		for (Method method : methods) { 			if (filter.matches(method)) { 				matched.add(method); 			} 		} 		return matched.toArray(new Method[matched.size()]); 	}  ```    ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-03-29T07:01:25Z","2018-12-28T09:52:54Z"
"","11652","String Template support [SPR-6987]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6987](https://jira.spring.io/browse/SPR-6987?redirect=false)** and commented  Support for generating Strings from templates using the StringTemplate library (www.stringtemplate.org)   ---  **Affects:** 3.0.1  **Attachments:** - [DefaultStringTemplateFactory.java](https://jira.spring.io/secure/attachment/16295/DefaultStringTemplateFactory.java) (_2.95 kB_) - [StringTemplate.java](https://jira.spring.io/secure/attachment/16294/StringTemplate.java) (_193 bytes_) - [StringTemplateFactory.java](https://jira.spring.io/secure/attachment/16293/StringTemplateFactory.java) (_210 bytes_)  **Issue Links:** - [INT-1036](https://jira.spring.io/browse/INT-1036) Add templating support to ObjectToStringTransformer (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2010-03-15T11:26:59Z","2015-09-22T18:20:32Z"
"","11651","Add @Bean @javax.inject.Qualifier [SPR-6986]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6986](https://jira.spring.io/browse/SPR-6986?redirect=false)** and commented  I was investigating using `@Inject`, `@Qualifier`, and Provider instead of `@Autowired`, `@Qualifier`, and ObjectFactory.  I need to be able to perform by-name injection via a constructor-arg.  I can do this with Spring's `@Qualifier` by specifying a value, but javax.inject.Qualifier supports no such value.  A `@Bean` `@Qualifier` annotation that defined a value could be a good addition, unless there is another way to do this with JSR-330 I am missing.   ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-03-15T09:48:46Z","2010-03-15T11:25:33Z"
"","11578","Allow for scoped proxy status to be specified on a injection point such as a Constructor argument, field, or setter. [SPR-6913]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6913](https://jira.spring.io/browse/SPR-6913?redirect=false)** and commented  I have a bean stored in session scope that should ideally be marked serializable.  I can't make it serializable, however, because it depends on singleton services that are not serializable.  If I mark those services transient, their references are not restored on deserialization, leading to Null pointer exceptions.  I could trigger these service implementations to be wrapped in a serializable scoped-proxy through XML configuration, but that would make them serializable for every context they are used & requires global configuration.  If I could express the service serialization requirement in the context of my serializable bean, e.g. through the ability to mark an injection point as a scoped proxy, that would be ideal I think.   ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-02-26T02:04:34Z","2018-12-28T11:52:34Z"
"","11569","Expose ""request"" implicit variable to JSP pages. [SPR-6904]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6904](https://jira.spring.io/browse/SPR-6904?redirect=false)** and commented  Having to traverse the JSP ${pageContext} variable just to access request data from a JSP page is verbose e.g. ${pageContext.request.contextPath}.  In addition, it seems Spring Security already exposes request data under the EL variable ""request"", as shown in sample code here: http://git.springsource.org/spring-security/spring-security/blobs/master/samples/openid/src/main/webapp/index.jsp.  It'd be nice if MVC also made a ""request"" EL variable available e.g. to allow for more concise lookups like ${request.contextPath}.  We should consider matching the implicit variables available between MVC and JSF environments (where possible).   ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-02-24T13:33:02Z","2015-09-22T18:20:31Z"
"","11568","Make it possible for the Spring MVC DispatcherServlet to bootstrap a Filter chain [SPR-6903]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6903](https://jira.spring.io/browse/SPR-6903?redirect=false)** and commented  It would be convenient, particularly for integrating filter-based frameworks such as Spring Security, for the Spring MVC DispatcherServlet to provide the capability to fully manage a Servlet Filter chain it could delegate to as part of the request processing lifecycle.  Currently, integrating such frameworks like Spring Security require the registration of a DelegatingFilterProxy in web.xml that calls into a Root WebApplicationContext, which must also be setup and configured.  The introduction of a context hierarchy just to satisfy the technical limitations of container-managed filters is a source of complexity.  For many applications, a single DispatcherServlet-based WebApplicationContext is sufficient and provides a simpler home for web application beans.  It also puts more logic under the control of the DispatcherServlet, which allows you to keep your configuration consistently Spring-based instead of a mix of Spring and web.xml configuration.  I could imagine this being implemented by having the DispatcherServlet detect a special ""filterChain"" bean by name on deployment, similar to the other pluggable DispatcherServlet services.   ---  **Affects:** 3.0.1  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-24T13:08:20Z","2018-12-26T12:29:15Z"
"","11542","RequestMethod does not appear to factor into @RequestMapping uniqueness in some cases [SPR-6876]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6876](https://jira.spring.io/browse/SPR-6876?redirect=false)** and commented  To reproduce:  Define the following two mappings  ``` @Controller @RequestMapping(""/test"") public class TestController {      @RequestMapping(""/{foo}"", method=RequestMethod.GET)     public void foo() {         System.out.println(""Foo called"");     }      @RequestMapping(""/{bar}"", method=RequestMethod.DELETE)     public void bar() {         System.out.println(""Bar called"");     } } ```  Try:  ``` http GET /test/foo - this will work ```  Then try:  ``` http DELETE /test/bar - this will fail with error ""No path variable {bar} defined"". ```  If you rename {bar} to {foo}, both the GET and DELETE requests will work.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5675046cb78ffc960eae4f85d7f33637ee480733","closed","type: bug,","spring-projects-issues","2010-02-19T06:44:52Z","2012-06-19T03:44:03Z"
"","11532","Invalid expression strings result in cryptic NullPointerException when parsed [SPR-6866]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6866](https://jira.spring.io/browse/SPR-6866?redirect=false)** and commented  A typo (trailing dot) in my expression string ""appointmentCalendar.day."" led to this low-level exception:  [2/18/10 5:34:07 PM] Keith Donald: java.lang.NullPointerException org.springframework.expression.spel.standard.InternalSpelExpressionParser.toString(InternalSpelExpressionParser.java:737) org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatDottedNode(InternalSpelExpressionParser.java:339) org.springframework.expression.spel.standard.InternalSpelExpressionParser.maybeEatNode(InternalSpelExpressionParser.java:302) org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatPrimaryExpression(InternalSpelExpressionParser.java:288) org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatUnaryExpression(InternalSpelExpressionParser.java:279) org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatPowerExpression(InternalSpelExpressionParser.java:255) org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatProductExpression(InternalSpelExpressionParser.java:236) org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatSumExpression(InternalSpelExpressionParser.java:219) org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatRelationalExpression(InternalSpelExpressionParser.java:181) org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatLogicalAndExpression(InternalSpelExpressionParser.java:169) org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatLogicalOrExpression(InternalSpelExpressionParser.java:157) org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatExpression(InternalSpelExpressionParser.java:133) org.springframework.expression.spel.standard.InternalSpelExpressionParser.doParseExpression(InternalSpelExpressionParser.java:114) org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:56) org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:1) org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:66) org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:56) org.springframework.web.servlet.tags.EvalTag.setExpression(EvalTag.java:70)   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c31213e5cbcde9c95e934ae1b9e7acea5cff0a4e","closed","in: core,","spring-projects-issues","2010-02-18T09:03:04Z","2012-06-19T03:44:16Z"
"","11531","Expression.getValue(..., Class) calls that invoke methods fail with a ArrayIndexOutOfBoundsException when method return value needs to be converted to the desired result type [SPR-6865]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6865](https://jira.spring.io/browse/SPR-6865?redirect=false)** and commented  To reproduce: - Parse an expression that when evaluated will invoke a method that returns a value, such as a Long. - Evaluate the expression by requesting a desired result type of another type, such as a String.  Make sure a ConversionService that respects annotation-driven conversion rules is configured on your StandardEvalautionContext (You can get one via FormattingConversionServiceFactoryBean)  During conversion from the method return type to the desired result type, the following exception will be thrown:  ``` java.lang.ArrayIndexOutOfBoundsException: -1 	org.springframework.core.MethodParameter.getParameterAnnotations(MethodParameter.java:233) 	org.springframework.core.convert.TypeDescriptor.getAnnotations(TypeDescriptor.java:348) 	org.springframework.core.convert.TypeDescriptor.getAnnotation(TypeDescriptor.java:359) 	org.springframework.format.support.FormattingConversionService$1.matches(FormattingConversionService.java:75) 	org.springframework.core.convert.support.GenericConversionService$MatchableConverters.matchConverter(GenericConversionService.java:454) 	org.springframework.core.convert.support.GenericConversionService.matchConverter(GenericConversionService.java:370) 	org.springframework.core.convert.support.GenericConversionService.getMatchingConverterForTarget(GenericConversionService.java:336) 	org.springframework.core.convert.support.GenericConversionService.findConverterForClassPair(GenericConversionService.java:277) 	org.springframework.core.convert.support.GenericConversionService.getConverter(GenericConversionService.java:189) 	org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:134) 	org.springframework.expression.spel.support.StandardTypeConverter.convertValue(StandardTypeConverter.java:70) 	org.springframework.expression.common.ExpressionUtils.convertTypedValue(ExpressionUtils.java:68) 	org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:98) 	org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:108) ```  ---  **Affects:** 3.0.1  **Issue Links:** - #11589 Spring 3.0.1 cannot concatenate Spring with SpEL expression in debug mode","closed","in: core,","spring-projects-issues","2010-02-18T09:00:12Z","2019-01-11T17:01:24Z"
"","11524","Push the Java 5 simplifications in SimpleJdbcTemplate up to JdbcTemplate [SPR-6858]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6858](https://jira.spring.io/browse/SPR-6858?redirect=false)** and commented  Since Spring 3 targets Java 5, I wouldn't expect to need SimpleJdbcTemplate anymore.  I'd expect Java 5 functionality to be incorporated in the base JdbcTemplate so I could take advantage of simplifications there without having to bring in another class.  Then I would only ever want to work with JdbcTemplate.  The most useful feature of SimpleJdbcTemplate not in JdbcTemplate is the ability to specify args using var args.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11522 Could SimpleJdbcTemplate/Operations/DaoSupport be deprecated now? (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c39b529c9387c58826aa0d2f73b123ea11071ba7","closed","type: enhancement,","spring-projects-issues","2010-02-17T03:34:41Z","2019-01-11T17:01:37Z"
"","11523","maven.springframework.org nightly snapshots don't appear to have sources [SPR-6857]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6857](https://jira.spring.io/browse/SPR-6857?redirect=false)** and commented  I am unable to Download Sources of Spring snapshots making debugging of newly integrated fixes more difficult. We should be publishing sources, too.   ---  **Affects:** 3.0 GA  **Attachments:** - [Screen shot 2010-02-19 at 13.12.32.png](https://jira.spring.io/secure/attachment/16214/Screen+shot+2010-02-19+at+13.12.32.png) (_188.30 kB_)","closed","","spring-projects-issues","2010-02-17T03:16:30Z","2019-01-11T17:01:35Z"
"","11493","Allow SpEl expressions to be evaluated from JSPs [SPR-6827]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6827](https://jira.spring.io/browse/SPR-6827?redirect=false)** and commented  As a user, I would like to be able to evaluate SpEL expressions from my JSPs to take advantage of all that SpEL has to offer, such as the ability to invoke methods on Java objects.  The EvaluationContext should expose access to the same variables standard EL expressions have access to, such as page scope and request scope.  We should look at a dedicated spring:eval tag for this, as well as opportunities to directly hook into the JSP engine itself so standard ${exp} syntax can be used for evaluating SpEL expressions.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11411 SpEL does not expose field-level annotations when setting bean properties (_**""depends on""**_) - #10748 Create a Unified EL implementation with Spring EL (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2010-02-11T05:41:37Z","2019-01-11T16:47:17Z"
"","11453","Change green JavaDocs API to standard JavaDoc colors with SpringSource logo [SPR-6787]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6787](https://jira.spring.io/browse/SPR-6787?redirect=false)** and commented  The green color scheme makes the JavaDocs harder to read and different than most other API documentation.  I think we'd get better branding by simply reverting to the standard JavaDoc API color scheme and adding in the SpringSource logo.  ---  **Affects:** 3.0 GA  This issue is a sub-task of #12770  1 votes, 1 watchers","closed","type: documentation,","spring-projects-issues","2010-02-01T03:29:49Z","2019-01-11T15:47:26Z"
"","11423","Spring docs state inaccurately that Spring MVC tutorial ships in distribution [SPR-6757]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6757](https://jira.spring.io/browse/SPR-6757?redirect=false)** and commented  ""This tutorial is available in the docs directory of the Spring distribution"" is stated several times in the reference documentation, which is not correct.  We should fix this and link to the actual location of tutorial resources at springsource.org for 3.0.1.   ---  **Affects:** 3.0 GA","closed","type: documentation,","spring-projects-issues","2010-01-22T05:25:03Z","2012-06-19T03:44:13Z"
"","11412","A matched null ""default converter"" results in a confusing log message [SPR-6746]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6746](https://jira.spring.io/browse/SPR-6746?redirect=false)** and commented  EBUG: org.springframework.core.convert.support.GenericConversionService - Converter lookup [MATCHED] null  This is not very good.  When the defaultConverter is null for a set of MatchableConverters, no log message should be written.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d7b79dc9a96c4a2a99351de8d83ba723ab77403c","closed","type: enhancement,","spring-projects-issues","2010-01-21T08:45:22Z","2012-06-19T03:43:22Z"
"","11411","SpEL does not expose field-level annotations when setting bean properties [SPR-6745]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6745](https://jira.spring.io/browse/SPR-6745?redirect=false)** and commented  This means annotation-driven type conversion does not work when binding to JavaBean properties with SpEL.  This can be worked around by defining annotations on the method parameter of a setter method, and the return value of a getter, but is not ideal.  SpEL should be consistent with BeanWrapper with its TypeDescriptor configuration when getting and setting JavaBean properties.  This likely means use of a BeanTypeDescriptor in those cases.  This was noticed when attempting to use a SpEL-based data mapper to map String fields in a Map to a JavaBean, where annotation-driven parsing rules were specified on JavaBean fields.  This works fine with a BeanWrapper since the BeanTypeDescriptor exposes annotations from the field, getter, and setter.  Unfortunately, SpEl just uses the default TypeDescriptor in these cases which only exposes parameter annotations.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11493 Allow SpEl expressions to be evaluated from JSPs (_**""is depended on by""**_) - #10748 Create a Unified EL implementation with Spring EL  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/117b1382333bd7e2ae26a85359b3cda89df9afef","closed","in: core,","spring-projects-issues","2010-01-21T08:33:52Z","2019-01-13T21:47:23Z"
"","11408","FormattingConversionServiceFactoryBean.setConverters declares Set ParameterizedType restricting programmatic usage [SPR-6742]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6742](https://jira.spring.io/browse/SPR-6742?redirect=false)** and commented  Shouldn't:      public void setConverters(Set converters)  be written as:      public void setConverters(Set","closed","type: bug,","spring-projects-issues","2010-01-21T06:07:46Z","2012-06-19T03:43:50Z"
"","11406","Spring MVC Binding Lifecycle differs between @RequestBody arguments and plain JavaBean arguments [SPR-6740]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6740](https://jira.spring.io/browse/SPR-6740?redirect=false)** and commented  Differences I've noticed so far:  - When using `@RequestBody` to bind the request body to a JavaBean, you cannot also declare a BindingResult parameter to trap bind failures.  Any failures result seems to result in an exception (500) being thrown.  For example, when Jackson fails to bind a 500 error is returned and you have no control over this like you do when failures are first added to the BindingResult context.  - When using `@RequestBody` you cannot trigger execution of a validation step post binding with the `@Valid` annotation.  We should look at getting consistency between the ""traditional"" DataBinder mechanism and the `@RequestBody` mechanism where it is possible.  If it's not possible or practical, we should at least document the differences between traditional binding and `@RequestBody`/`@ResponseBody` usage.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11715 Allow usage of ConversionService for Jackson HttpMessageConverter  4 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-21T02:04:58Z","2019-12-20T14:49:51Z"
"","11405","Document location of nightly snapshot .zip downloads [SPR-6739]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6739](https://jira.spring.io/browse/SPR-6739?redirect=false)** and commented  Maven usage is now documented, but not the snapshot .zip download page.   ---  **Affects:** 3.0 GA","closed","status: declined,","spring-projects-issues","2010-01-21T00:05:07Z","2014-09-19T14:40:35Z"
"","11398","Snapshot Builds: Inconsistency in publishing betweeen EBR and Maven-Central compatible repository [SPR-6732]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6732](https://jira.spring.io/browse/SPR-6732?redirect=false)** and commented  There seems to be quite a few inconsistencies between the nightly Spring artifacts published to EBR (repository.springsource.com/snapshot) and maven.springframework.org/snapshot.  Specifically:  1. The content of the artifact jars between the two repos is actually different.  For example, the MANIFEST.mf of the artifacts posted to EBR have a Build-Version in format CI-### (e.g. CI-546), while the Build-Version of the artifacts posted to maven.springframework.org have format BUILD-\ (e.g. BUILD-20100113111737).  2. The latest maven.springframework.org snapshot is from January 13th, a week ago.  I do not know when the next one will publish, but I would expect them to publish consistent with EBR snapshot publication (nightly).  Otherwise its difficult for our user community, particularly those using Maven, to test out fixes in advance of the next release.  It's important to our user community and those managing our sample applications to see consistency in the publishing process between EBR and maven.springframework.org.  Right now it seems maven.springframework.org is getting the short-end of the stick--snapshots are not published there often (or in an automated fashion), and the artifact contents are actually different.  Since most of our users would want to use maven.springframework.org for snapshots and milestones (instead of EBR), we should fix this.   ---  **Affects:** 3.0 GA","closed","type: bug,","spring-projects-issues","2010-01-20T07:58:12Z","2012-06-19T03:43:02Z"
"","11397","MappingJacksonHttpMessageConverter's ObjectMapper does not use ConversionService when binding JSON to JavaBean properties [SPR-6731]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6731](https://jira.spring.io/browse/SPR-6731?redirect=false)** and commented  Noticed when using `@RequestBody` to bind an incoming JSON string to an Account JavaBean.  I was expecting the binding process to respect format annotations such as `@NumberFormat` and `@DateTimeFormat` during string-to-propertyType conversion.  However, this did not happen since it appears the MappingJacksonHttpMessageConverter is using the default Jackson ObjectMapper by default.  For consistency, we should consider configuring Jackson to work with the ConversionService during its mapping process.  This would allow format annotations like `@NumberFormat` and `@DateTimeFormat` to be respected.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11715 Allow usage of ConversionService for Jackson HttpMessageConverter (_**""is duplicated by""**_) - #16758  Support jackson mix-in classes in Jackson2ObjectMapperFactoryBean - #16918 Add serializerByType() deserializerByType() and mixIn() to Jackson2ObjectMapperBuilder - #11395 resolveRequestBody algorithm does not take into account ConversionService when determining if binding is possible  13 votes, 20 watchers","closed","has: votes-jira,","spring-projects-issues","2010-01-20T06:56:35Z","2019-01-11T15:44:59Z"
"","11395","resolveRequestBody algorithm does not take into account ConversionService when determining if binding is possible [SPR-6729]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6729](https://jira.spring.io/browse/SPR-6729?redirect=false)** and commented  I noticed this when using `@RequestBody` on an Account JavaBean `@Controller` parameter, when the ContentType of my POST /accounts request was ""application/x-www-form-urlencoded"".  In this case, the resolved FormHttpMessageConverter is only capable of reading a MultiValueMap, not an Account, so I get a 415 back due to a HttpMediaTypeNotSupportedException.  However, the ConversionService configured with Spring MVC may be capable of mapping a MultiValueMap to a JavaBean, but it is never queried inside resolveRequestBody of AnnotationMethodHandlerAdapter.  If the ConversionService is capable of such a mapping, should it be invoked to allow the Account binding to succeed? Or should it be the sole responsibility of the MessageConverter to determine if binding is possible?  ---  **Affects:** 3.0 GA  **Issue Links:** - #13063 Clarify use of ""x-www-form-urlencoded"" in reference documentation - #11397 MappingJacksonHttpMessageConverter's ObjectMapper does not use ConversionService when binding JSON to JavaBean properties  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-20T04:53:17Z","2019-01-11T15:45:27Z"
"","11394","Document Spring MVC exception -> HTTP status code mappings [SPR-6728]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6728](https://jira.spring.io/browse/SPR-6728?redirect=false)** and commented  There are a number of ""built-in"" cases where an exception thrown by Spring MVC is mapped to a specific HTTP status code.  For example, with `@RequestBody`, when a HttpMessageConverter does not support a specific content type, a HttpMediaTypeNotSupportedException is thrown that results in a Status Code of 415 being sent to the client.  I could not figure out what exactly was trigger this 415 response from the documentation, and had to turn on the debugger to verify which exception was being thrown and where the exception->code mapping was occuring.  As a user, I would find it useful to have a table in the documentation that explains the mappings between Spring MVC exceptions and HTTP status codes.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c18137d40ac9ecf7b44435442cdb7bbbb860a78e","closed","type: documentation,","spring-projects-issues","2010-01-20T04:44:00Z","2012-06-19T03:44:01Z"
"","11257","Document @ResponseStatus [SPR-6591]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6591](https://jira.spring.io/browse/SPR-6591?redirect=false)** and commented  This is a nice feature but I cannot find any reference to it in the ref docs.   ---  **Affects:** 3.0 GA","closed","","spring-projects-issues","2009-12-19T08:48:00Z","2019-01-11T15:25:01Z"
"","11253","Add sample showing Portlet 2.0 (JSR-286) support [SPR-6587]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6587](https://jira.spring.io/browse/SPR-6587?redirect=false)** and commented   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2009-12-19T01:32:37Z","2014-09-19T14:02:29Z"
"","11252","Make default bind failure messages consistent with default validation messages [SPR-6586]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6586](https://jira.spring.io/browse/SPR-6586?redirect=false)** and commented  With JSR 303 the default messages are fairly readable e.g. ""date must be in the future""; however, default type conversion error messages are very verbose and unusable e.g. ""Failed to convert property value of type java.lang.String to required type java.math.BigDecimal for property percent; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value gfd from type java.lang.String to type java.math.BigDecimal; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value gfd from type java.lang.String to type java.math.BigDecimal; nested exception is java.text.ParseException: gfd Date ""  It would be nice if these messages were default consistent in presentation and readable.  Also it looks like there may be some unnecessary exception wrapping going on.    ---  **Affects:** 3.0 GA  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-18T11:21:08Z","2015-09-22T18:20:32Z"
"","11251","Request attributes not conveniently accessible using @Value in @Controllers [SPR-6585]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6585](https://jira.spring.io/browse/SPR-6585?redirect=false)** and commented  Because HttpServletRequest does not expose request attributes in a data structure SpEL natively understands, such as a Map, a user of `@Value` in a `@Controller` method who needs to access a request attribute must use SpEL to invoke the request.getAttribute(String) method directly, which is verbose.  It'd be nice if there was a PropertyAccessor registered in the Spring MVC `@Controller` context that provided convenient variable resolution for things like request attributes, allowing concise expressions like `@Value`(""request.attributes.foo)"")  ---  **Affects:** 3.0 GA  **Issue Links:** - #12468 Allow custom request mapping conditions (_**""is depended on by""**_) - #18468 Convenient access to session and request attributes in controller methods (_**""is superseded by""**_)  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-18T09:37:49Z","2019-01-11T15:25:20Z"
"","11250","Allow resolved path variables to be evaluated in @Value @Controller expressions [SPR-6584]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6584](https://jira.spring.io/browse/SPR-6584?redirect=false)** and commented  For example:  ``` @RequestMapping(""/entry/#{month}/#{year}"", method=RequestMethod.GET) public void getEntriesForMonth(@Value(""#{year}-#{month}"") @DateTimeFormat(pattern=""yyyy-MM"") Date date) {  } ```  We should also look at what else makes since to be resolvable via `@Value` expression in a MVC context and make it available.  As I understand it, only RequestScope and Spring Beans are resolvable in 3.0.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2009-12-18T09:28:14Z","2018-12-27T10:34:59Z"
"","11249","Allow messages to be resolved in JSP, Freemarker, and Velocity views using EL [SPR-6583]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6583](https://jira.spring.io/browse/SPR-6583?redirect=false)** and commented  For example, the following:  ```   	${messages.welcome.title}    	${messages.welcome.title}    ```  Is more convenient, portable, and designer friendly than:  ```      	    	    ```    ---  **Affects:** 3.0 GA  5 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-18T09:21:18Z","2018-12-27T10:51:22Z"
"","11244","Make spring-aop required for spring-context (in spring-context POM) [SPR-6578]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6578](https://jira.spring.io/browse/SPR-6578?redirect=false)** and commented  The ivy says its required to compile. I think the .pom is wrong.  The result is spring-aop is not included when obtaining spring-context from Maven Central for spring apps; it must be added to pom manually.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38cf127c8b1d37f1c7299cb59eccfdb3628230e9","closed","type: enhancement,","spring-projects-issues","2009-12-17T07:53:41Z","2012-06-19T03:42:46Z"
"","11242","Consider collapsing org.springframework.aspects module into org.springframework.aop [SPR-6576]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6576](https://jira.spring.io/browse/SPR-6576?redirect=false)** and commented  As a user, I find it confusing there is an ""aop"" module and an ""aspects"" module.  Looking inside aspects, there's not much to it.  Does it make sense to collapse aspects into aop, giving us one aop module?  I would find this more intuitive but perhaps I am missing something.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2009-12-17T01:53:36Z","2018-12-26T16:18:31Z"
"","11241","Add Gradle task for building zip with dependencies [SPR-6575]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6575](https://jira.spring.io/browse/SPR-6575?redirect=false)** and commented  Several classes of users would benefit from a -with-dependencies.zip download in addition to the regular spring-framework download: 1. Those who do not yet use automated dependency management tool such as Maven or Ivy 2. Those behind corporate firewalls that cannot access remote repositories such as Maven Central or the EBR  Spring Web Flow, also using the ""Spring Build"" Ant+Ivy-based build system, originally published one .zip without dependencies, but added back a -with-dependencies.zip after user demand.  To make it work, we added a few customizations to the package-top-level.xml fragment here: https://src.springframework.org/svn/spring-webflow/branches/spring-webflow-2.0-maintenance/build-spring-webflow/package-top-level.xml  ---  **Affects:** 3.0 GA  **Issue Links:** - #12444 Chapter 7.2.1 of the ref manual still refers to the Spring-with-dependencies distribution (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5fe08040178d3e216998c22b4ad50528f7d981c2, https://github.com/spring-projects/spring-framework/commit/e5bbec7e2b322f280cffc540d3419baefd29d187  27 votes, 18 watchers","closed","has: votes-jira,","spring-projects-issues","2009-12-17T00:03:11Z","2019-01-11T15:26:06Z"
"","11216","Index HTML multi-page reference documentation files by section id instead of chapter and section number. [SPR-6550]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6550](https://jira.spring.io/browse/SPR-6550?redirect=false)** and commented  This is the way it used to be and allows sections to be moved around without breaking links.  Reported by David Winterfeldt.   ---  **Affects:** 3.0 RC3","closed","type: enhancement,","spring-projects-issues","2009-12-11T05:03:02Z","2012-06-19T03:43:33Z"
"","11208","ISO datetime parsing fallback would make @DateTimeFormat more flexible [SPR-6542]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6542](https://jira.spring.io/browse/SPR-6542?redirect=false)** and commented  Currently when you use `@DateTimeFormat` like:  ``` public class Account {      @DateTimeFormat(style=""S-"")     private Date activationDate; } ```  ... 'activationDate' would be printed in a localized short date format (e.g. MM/dd/yy), and can also be parsed using that same format.  In many client-side UI frameworks, such as Dojo for example, it is possible (perhaps even common?) to use a different format pattern for rendering a value and sending a value back to the server.  For example, by default a Dojo Date widget will render a date in a browser-locale-specific way but will send back a normalized ISO date string.  In cases like this, it would be helpful if the datetime parser could also handle ISO date strings as a fallback, in cases where the parser was unable to parse a string by adhering to the configured localized style or pattern-based format also used for printing.  Alternatively or in addition, perhaps it should be possible to turn on an exclusive ISO-based parsing option.  This would make the parser more flexible for cases where printing client-side is handled in a locale specific manner but parsing server-side is sometimes/always ISO.  This could also potentially simplify the use of frameworks like Dojo in conjunction with JDK-based DateTime libraries such as Joda Time, since you would no longer need to ensure both libraries can handle the same localized pattern strings.  Rather, you'd simply configure Dojo displayPattern based on the `@DateTimeFormat` annotation, and use simpler (and more predictable) ISO parsing on postback.  As an example, Dojo doesn't directly support the pattern that corresponds to Joda's ""L"" (Long) style.  With no ISO parsing fallback, such a pattern has to be configurable though, otherwise parsing would fail on postback.  With an ISO parsing fallback, ""L"" could map to a Dojo specific pattern code; even if this Dojo specific ""L"" pattern did not match Joda's ""L"" pattern, parsing could still be done against a normalized ISO format as a fallback.   ---  **Affects:** 3.0 RC3","closed","type: enhancement,","spring-projects-issues","2009-12-10T00:20:16Z","2019-01-11T15:21:55Z"
"","11207","Spring's Maven Central compatible .poms contain numerous repository definitions that hurt user build performance [SPR-6541]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6541](https://jira.spring.io/browse/SPR-6541?redirect=false)** and commented  The parent pom contains the following global repository definitions:  ```           java.net      Java.net Repository for Maven      http://download.java.net/maven/1/      legacy      false                  jboss      JBoss Repository      http://repository.jboss.org/maven2      false              EclipseLink Repo      http://mirror.cc.vt.edu/pub/eclipse/rt/eclipselink/maven.repo/      false                  sun-repo-2      http://download.java.net/maven/2/      false                      com.springsource.repository.bundles.release      SpringSource Enterprise Bundle Repository - SpringSource Bundle Releases      http://repository.springsource.com/maven/bundles/release/      false              com.springsource.repository.bundles.external      SpringSource Enterprise Bundle Repository - External Bundle Releases      http://repository.springsource.com/maven/bundles/external/      false       ```  This is not good, since now anytime a user attempts to import a Spring artifact each of these repositories is pinged before the artifact is retrieved, slowing performance.  Also, should the EBR repositories be listed at all?  We should update the parent pom to remove the repositories and instead use a Maven profile that declares them and allows us to test a Maven-based build of Spring.   ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63996cbb063fc7cb4bd3b6e5d7dd04243aea0986, https://github.com/spring-projects/spring-framework/commit/143ce57e7683287237a358558dd7cd28f8534ff2","closed","type: bug,","spring-projects-issues","2009-12-10T00:03:41Z","2012-06-19T03:44:10Z"
"","11203","ConversionService#canConvert(Class, Class) matches for Collection-based conversions even if conversion between underlying element types is not supported [SPR-6537]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6537](https://jira.spring.io/browse/SPR-6537?redirect=false)** and commented  Reported already: * String to Class conversion failure when setting up OXM with a ConversionService registered   Other areas this could show up: * String to Resource  canConvert(Class, Class) should return false if the element conversion cannot be performed.   ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/96de14ef2e7018cb0c6cf889b83503c50efc2c72","closed","in: core,","spring-projects-issues","2009-12-09T07:37:25Z","2012-06-19T03:44:17Z"
"","11079","Add mvc namespace element for registering Parameterizable View Controllers [SPR-6413]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6413](https://jira.spring.io/browse/SPR-6413?redirect=false)** and commented  Spring Roo has the requirement to map a web requests to static views.  Rather than configure a ""default handler"" that attempts to map any request not handled by a Controller to a view, they're now defining a ParameterizableViewController bean for each static view [which is a safer and more explicit].  This change results in some extra low-level bean configuration that could be simplified.  Currently, the following must be added to mvc-config.xml:  ```               ...     ```  Proposal: - We can simplify the above config by encapsulating the registration of the SimpleControllerHandlerAdapter and BeanNameUrlHandlerMapping beans in the mvc:annotation-driven element. - We can simplify the registration of ParameterizableViewControllers by introducing a custom mvc namespace tag such as:  ```     ```    ---  **Affects:** 3.0 RC2  **Issue Links:** - [ROO-385](https://jira.spring.io/browse/ROO-385) Use new Spring MVC namespace (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de1d54872565a8e62e90a4993b20251c372c0fe7","closed","type: enhancement,","spring-projects-issues","2009-11-23T16:35:24Z","2012-06-19T03:43:51Z"
"","11070","Document new mvc namespace [SPR-6404]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6404](https://jira.spring.io/browse/SPR-6404?redirect=false)** and commented  The mvc namespace needs to be documented in the mvc section of the reference manual.  Old-school configuration should be replaced by the namespace where possible.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11190 Doc:  incompatible to override strategy of handler mappings (_**""supersedes""**_)  1 votes, 3 watchers","closed","type: documentation,","spring-projects-issues","2009-11-21T03:37:03Z","2019-01-11T15:29:00Z"
"","11063","Create org.springframework.context.support.ConversionServiceFactoryBean [SPR-6397]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6397](https://jira.spring.io/browse/SPR-6397?redirect=false)** and commented  This has been documented in the core.convert section of the reference manual but needs to be implemented for 3.0 final.  Extract out from FormattingConversionServiceFactoryBean.   ---  **Affects:** 3.0 RC2  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-19T15:04:20Z","2012-06-19T03:43:12Z"
"","11043","Data Binding ""autoGrowNestedPath"" feature should support growing nested map paths [SPR-6376]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6376](https://jira.spring.io/browse/SPR-6376?redirect=false)** and commented  Autogrow of nested paths currently works for null values in nested paths as well as Collection index out of bounds in nested paths.  However, no support is provided for autogrowing map values when indexing into a map.  This should be added in both DataBinder and SpEL.   ---  **Affects:** 3.0 RC2  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-17T07:37:07Z","2012-06-19T03:25:14Z"
"","11042","Register sensible default HTTP Message Converters based on what is available in the classpath [SPR-6375]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6375](https://jira.spring.io/browse/SPR-6375?redirect=false)** and commented  The new mvc namespace gives us a nice opportunity to add additional sensible defaults. Proposal: - Register support for JAXB if Java 6+ - Register support for JiBX if in classpath - Register support for JSON if Jackson in classpath    ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/81d7f5bc5aaf44e11b126ae116b74dbeac57e16b","closed","type: enhancement,","spring-projects-issues","2009-11-17T07:31:50Z","2012-06-19T03:44:16Z"
"","11040","Add a EntityConverter for mapping between entity identifiers and entity references [SPR-6374]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6374](https://jira.spring.io/browse/SPR-6374?redirect=false)** and commented  Needed by Roo. Proposal: - When binding a String entity id to a entity reference field, look for a static method on entityType named find\(\ id).  If found, invoke that method to load the entity reference - When printing a entity reference as a field, look for a method named getId() to retrieve fetch the id value, then convert the value to String.    ---  **Affects:** 3.0 RC2","closed","type: enhancement,","spring-projects-issues","2009-11-17T07:28:59Z","2012-06-19T03:42:53Z"
"","11031","spring-jdbc.xsd script element claims resource patterns can be used for any SQL resource location but this is only supported for initialize-database tag [SPR-6365]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6365](https://jira.spring.io/browse/SPR-6365?redirect=false)** and commented  It appears the initialize-database tag has implemented support for SQL resource patterns but embedded-database has not.   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/17887d24a1ad2db722b737b579ec131e57751695, https://github.com/spring-projects/spring-framework/commit/7519162e658acb98e79ca22465dfad1d2891c84b","closed","type: bug,","spring-projects-issues","2009-11-16T10:49:45Z","2012-06-19T03:43:11Z"
"","10997","Introduce portable NumberFormat annotation [SPR-6331]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6331](https://jira.spring.io/browse/SPR-6331?redirect=false)** and commented  Proposal:  `@NumberFormat` -  * Declares that a field should be formatted as a number.  ``` /*  * Copyright 2002-2009 the original author or authors.  *  * Licensed under the Apache License, Version 2.0 (the ""License"");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an ""AS IS"" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.springframework.format.annotation;  import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  /**  * Declares that a field should be formatted as a number.  * Supports formatting by style or custom pattern string.  * Can be applied to any JDK java.lang.Number type.  *   * For style-based formatting, set the {@link #style()} attribute to be the desired {@link Style}.    * For custom formatting, set the {@link #pattern()} attribute to be the number pattern, such as #,###.##.  *   * Each attribute is mutually exclusive, so only set one attribute per annotation instance (the one most convenient one for your formatting needs).  * When the pattern attribute is specified, it takes precedence over the style attribute.  * When no annotation attributes are specified, the default format applied is style-based with a style of {@link Style#NUMBER}.  *   * @author Keith Donald  * @since 3.0  * @see java.text.NumberFormat  */ @Target( { ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER }) @Retention(RetentionPolicy.RUNTIME) public @interface NumberFormat {  	/** 	 * The style pattern to use to format the field. 	 * Defaults to {@link Style#NUMBER} for general-purpose number formatter. 	 * Set this attribute when you wish to format your field in accordance with a common style other than the default style. 	 */ 	Style style() default Style.NUMBER;  	/** 	 * The custom pattern to use to format the field. 	 * Defaults to empty String, indicating no custom pattern String has been specified. 	 * Set this attribute when you wish to format your field in accordance with a custom number pattern not represented by a style. 	 */ 	String pattern() default """";  	/** 	 * Common number format styles. 	 * @author Keith Donald 	 * @since 3.0 	 */ 	public enum Style {  		/** 		 * The general-purpose number format for the current locale. 		 */ 		NUMBER, 		 		/** 		 * The currency format for the current locale. 		 */ 		CURRENCY,  		/** 		 * The percent format for the current locale. 		 */ 		PERCENT  	} }  ```  Example Usage  ``` private static class TestBean { 		 	private Integer numberDefault; 		 	@NumberFormat 	private Double numberDefaultAnnotated;  	@NumberFormat(style=Style.CURRENCY) 	private BigDecimal currency;  	@NumberFormat(style=Style.PERCENT) 	private BigDecimal percent;  	@NumberFormat(pattern=""#,##.00"") 	private BigDecimal pattern;  } ```    ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-11-11T13:41:56Z","2012-06-19T03:44:12Z"
"","10980","Review Converter resolution algorithm [SPR-6314]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6314](https://jira.spring.io/browse/SPR-6314?redirect=false)** and commented  The Converter resolution algorithm for Spring 3's new Type Conversion System used by Spring EL, Spring Beans, and Spring MVC needs to be reviewed carefully, since its such a core part of the Framework going forward and it has gotten more complex since the additional support for annotation-driven conversion (see #10979).  **CURRENT ALGORITHM**  - A ConversionService is asked to convert field of type S to field of type T - ConversionService looks up all registered converters converting from S. - Of that set, conversion service gets a set of ""Matchable"" converters that can go from S to T. - It goes through each matchable converter in order until it finds a match, and that's the selected converter that will be used  **EXAMPLE**  - Consider converting from java.lang.String to java.util.Date - You could have a single default converter registered for the String->Date type pair and another one for that pair **when the target Date is annotated with `@DateTimeFormat`** - In that case, that would be two matchable converters for S->T that get put in a stack.  The last one added is first out, and we go through the stack until we find the first match.  The main things to consider about the algorithm: - We consider the source->target type pair the ""most significant"" in terms of Converter resolution.  This is in contrast to indexing first on something like an annotation type, then determining if an annotation-driven converter matches the S->T request.  This allows the core Converter resolution algorithm to be unaware of annotation matching concepts, but it prevents annotation-driven formatting from being associated with abstract types. - Is the class/interface hierarchy search a potential performance concern?  Are there optimizations we could make there?  ---  **Affects:** 3.0 RC1  **Issue Links:** - #11415 Optimize GenericConversionService.findConverterForClassPair - #10963 Inadequate implementation of GenericConversionService.findConverterByClassPair(Class, Class) - #10881 Review collection/map converter optimizations that don't create new collection instances","closed","in: core,","spring-projects-issues","2009-11-09T00:55:53Z","2019-01-11T14:30:37Z"
"","10979","Introduce portable @DateTimeFormat annotation [SPR-6313]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6313](https://jira.spring.io/browse/SPR-6313?redirect=false)** and commented  Proposal:  `@DateTimeFormat` - Declares that a field should be formatted as a date time.  ``` /*  * Copyright 2002-2009 the original author or authors.  *  * Licensed under the Apache License, Version 2.0 (the ""License"");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an ""AS IS"" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.springframework.format.annotation;  import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  /**  * Declares that a field should be formatted as a date time.  * Supports formatting by style pattern, ISO date time pattern, or custom format pattern string.  * Can be applied to java.util.Date, java.util.Calendar, java.long.Long, or Joda Time fields.  *   * For style-based formatting, set the {@link #style()} attribute to be the style pattern code.    * The first character of the code is the date style, and the second character is the time style.  * Specify a character of 'S' for short style, 'M' for medium, 'L' for long, and 'F' for full.  * A date or time may be omitted by specifying the style character '-'.  *   * For ISO-based formatting, set the {@link #iso()} attribute to be the desired {@link ISO} format, such as {@link ISO#DATE}.      * For custom formatting, set the {@link #pattern()} attribute to be the DateTime pattern, such as yyyy/mm/dd h:mm:ss a.  *   * Each attribute is mutually exclusive, so only set one attribute per annotation instance (the one most convenient one for your formatting needs).  * When the pattern attribute is specified, it takes precedence over both the style and ISO attribute.  * When the iso attribute is specified, if takes precedence over the style attribute.  * When no annotation attributes are specified, the default format applied is style-based with a style code of 'SS' (short date, short time).  *   * @author Keith Donald  * @since 3.0  * @see org.joda.time.format.DateTimeFormat  */ @Target( { ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER }) @Retention(RetentionPolicy.RUNTIME) public @interface DateTimeFormat {  	/** 	 * The style pattern to use to format the field. 	 * Defaults to 'SS' for short date time. 	 * Set this attribute when you wish to format your field in accordance with a common style other than the default style. 	 */ 	String style() default ""SS"";  	/** 	 * The ISO pattern to use to format the field. 	 * The possible ISO patterns are defined in the {@link ISO} enum. 	 * Defaults to ISO.NONE, indicating this attribute should be ignored. 	 * Set this attribute when you wish to format your field in accordance with an ISO date time format. 	 */ 	ISO iso() default ISO.NONE;  	/** 	 * The custom pattern to use to format the field. 	 * Defaults to empty String, indicating no custom pattern String has been specified. 	 * Set this attribute when you wish to format your field in accordance with a custom date time pattern not represented by a style or ISO format. 	 */ 	String pattern() default """";  	/** 	 * Common ISO date time format patterns. 	 * @author Keith Donald 	 * @since 3.0 	 */ 	public enum ISO { 		 		/**  		 * The most common ISO Date Format yyyy-MM-dd e.g. 2000-10-31. 		 */ 		DATE,  		/**  		 * The most common ISO Time Format hh:mm:ss.SSSZ e.g. 01:30:00.000-05:00. 		 */ 		TIME,  		/**  		 * The most common ISO DateTime Format yyyy-MM-dd'T'hh:mm:ss.SSSZ e.g. 2000-10-31 01:30:00.000-05:00. 		 * The default if no annotation value is specified. 		 */ 		DATE_TIME, 		 		/** 		 * Indicates that no ISO-based format pattern should be applied. 		 */ 		NONE 		 	} } ```  Example Usage  ```  private static class TestBean {  	@DateTimeFormat(style=""M-"") 	private LocalDate localDateAnnotated;  	@DateTimeFormat(style=""-M"") 	private LocalTime localTimeAnnotated;  	@DateTimeFormat(style=""FF"") 	private LocalDateTime localDateTimeAnnotated;  	@DateTimeFormat(style=""MS"") 	private DateTime dateTimeAnnotated;  	@DateTimeFormat 	private DateTime dateTimeAnnotatedDefault;  	@DateTimeFormat(pattern=""M/d/yy h:mm a"") 	private DateTime dateTimeAnnotatedPattern;  	@DateTimeFormat(style=""S-"") 	private Date dateAnnotated;  	@DateTimeFormat(style=""S-"") 	private Calendar calendarAnnotated;  	@DateTimeFormat(style=""S-"") 	private Long millisAnnotated;  	@DateTimeFormat(iso=ISO.DATE) 	private LocalDate isoDate;  	@DateTimeFormat(iso=ISO.TIME) 	private LocalTime isoTime;  	@DateTimeFormat(iso=ISO.DATE_TIME) 	private DateTime isoDateTime; } ```    ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-11-09T00:41:15Z","2012-06-19T03:42:45Z"
"","10972","Add mvc namespace for simplifying setup of Spring MVC [SPR-6306]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6306](https://jira.spring.io/browse/SPR-6306?redirect=false)** and commented  Spring MVC setup could be simplified considerably by adding a custom XML namespace. A simple tag to configure  with reasonable default settings would be a great start.  Example benefits:  **AFTER MVC NAMESPACE**  ```     	 	   ```  **BEFORE MVC NAMESPACE**  ```     	 	 	 	 		 	 	 	  	  	 		 		 			 				 				 			 		 	  	 	 	 	 	 	 	 	   ```  ---  **Affects:** 3.0 RC1  **Issue Links:** - #6422 Add schema for web configuration (handler mappings) (_**""duplicates""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-05T07:53:34Z","2019-01-11T14:32:10Z"
"","10939","Consider introducing Printer/Parser specializations of Formatter [SPR-6272]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6272](https://jira.spring.io/browse/SPR-6272?redirect=false)** and commented  Formatter is a convenient interface to implement for parsing and printing objects.  However, there could be cases where you want to register specific Printer or Parser functions for certain types for more flexibility.  For example, consider Joda Time DateTimeFormatter.  Such a Formatter can parse/format a Joda DateTime object, which is nice and useful.  However, the Joda format library can actually print **any** ReadableInstant (which includes DateTime) and ReadablePartial, while only being able to parse DateTime objects.  In this case, it would make logical sense to have separate ReadableInstantPrinter, ReadablePartialPrinter, and DateTimeParser classes.  For the current DateTimeFormatter, ReadablePartial implementations such as LocalDate must first be coersed to DateTime before they can be printed.  Having a separate Printer interface that accepted a ReadablePartial would not require such a coersion step.   ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-10-24T16:22:39Z","2012-06-19T03:43:51Z"
"","10938","Register converters for util.Date/util.Calendar as well as Joda DateTime types in DefaultConversionService [SPR-6271]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6271](https://jira.spring.io/browse/SPR-6271?redirect=false)** and commented  Default Joda time converters should only be registered if Joda-time is on the classpath.   ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-10-24T16:12:10Z","2012-06-19T03:44:14Z"
"","11363","2D arrays do not work in remoting in some cases [SPR-6697]","**[Keith Amling](https://jira.spring.io/secure/ViewProfile.jspa?name=amling)** opened **[SPR-6697](https://jira.spring.io/browse/SPR-6697?redirect=false)** and commented  ConfigurableObjectInputStream.resolveClass mishandles e.g.  double[][] (""[[D"" as a class ""name"") if a classloader is set.  On one path, if a classloader is not set, it calls to super whichs ends up calling Class.forName(String, boolean, ClassLoader) which will work if the class name is ""[[D"".  On the other path, if a classloader is set, it calls ClassUtils.forName(String, ClassLoader).  In the case of 1D primitive arrays this works due to a lookup map for 1D primitive array class ""names"" but higher dimension arrays aren't in that lookup map and it calls ClassLoader.loadClass(String) which doesn't expect (or handle) ""[[D"".  I think the most obvious fix is to make ClassUtils.forName fall back to Class.forName rather than ClassLoader.loadClass (and maybe even remove the bogus lookup map).   ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2010-01-14T07:38:23Z","2019-01-12T16:38:23Z"
"","11233","Annotation configuration based TestContext [SPR-6567]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-6567](https://jira.spring.io/browse/SPR-6567?redirect=false)** and commented  Why don't you add AnnotationContextLoader that supports annotation configuration based TestContext.  for example. If there is an annotation configuration like this  `@Configuration` public class SpringAnnotationConfigTestAppConfig {      @Bean     public String name(){         return ""keesun"";     }  }  and, at the same package, I can make test like this.  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration`(loader = AnnotationContextLoader.class, locations = {"".""}) public class SpringAnnotationConfigTest {      @Autowired ApplicationContext ac;     @Autowired String name;          @Test     public void di(){         assertNotNull(ac);         assertThat(name, is(""keesun""));     }  }  then, conventionally SpringJUnit4ClassRunner finds SpringAnnotationConfigTest + ""AppConfig.java"" for an annotation configuration.  Of course, It makes sence that we sould use 'locations' attribute of `@ContextConfigruation` like these.  `@ContextConfiguration`(loader = AnnotationContextLoader.class, locations = {""/sandbox/springtest/sample/SpringAnnotationConfigTestAppConfig.java""}) `@ContextConfiguration`(loader = AnnotationContextLoader.class, locations = {""/sandbox/springtest/sample/""}) `@ContextConfiguration`(loader = AnnotationContextLoader.class, locations = {""/sandbox/springtest/sample""}) `@ContextConfiguration`(loader = AnnotationContextLoader.class, locations = {""./SpringAnnotationConfigTestAppConfig.java""}) `@ContextConfiguration`(loader = AnnotationContextLoader.class, locations = {""./""}) `@ContextConfiguration`(loader = AnnotationContextLoader.class, locations = {"".""})  with '.Java' locations can be used to AnnotationConfigurationApplicationContext.regist(), and without '.java' locations will be used to AnnotationConfigurationApplicationContext.scan().  What do you think about this?  ---  **Affects:** 3.0 RC3  **Attachments:** - [AnnotationContextLoader.java](https://jira.spring.io/secure/attachment/16009/AnnotationContextLoader.java) (_5.89 kB_) - [AnnotationContextLoaderTest.java](https://jira.spring.io/secure/attachment/16010/AnnotationContextLoaderTest.java) (_1.95 kB_) - [SpringAnnotationConfigTest.java](https://jira.spring.io/secure/attachment/16011/SpringAnnotationConfigTest.java) (_1.61 kB_) - [SpringAnnotationConfigTestAppConfig.java](https://jira.spring.io/secure/attachment/16012/SpringAnnotationConfigTestAppConfig.java) (_476 bytes_)  **Issue Links:** - #10852 Provide TestContext support for `@Configuration` classes (_**""duplicates""**_)  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-15T15:12:31Z","2019-01-13T07:56:24Z"
"","11399","Spring 3.0 ORM with JPA 2.0 TypedQuery ClassCastException [SPR-6733]","**[Ke CAI](https://jira.spring.io/secure/ViewProfile.jspa?name=caike)** opened **[SPR-6733](https://jira.spring.io/browse/SPR-6733?redirect=false)** and commented  see: http://stackoverflow.com/questions/2101500/spring-3-0-orm-with-jpa-2-0-classcastexception/2102328#2102328  I'm trying to use JPA 2.0 in Spring 3.0 ORM. The JPA vendor is Hibernate 3.5.0-Beta-3.  It works well with JPQL, but when I tried to use CriteriaQuery, an exception happens:  java.lang.ClassCastException: $Proxy50 cannot be cast to javax.persistence.TypedQuery at $Proxy38.createQuery(Unknown Source) at com.absorbx.retailx.dao.impl.ShopDaoImpl.findByCrieria(ShopDaoImpl.java:30) at com.absorbx.retailx.dao.SimpleDaoTest.testFindByCriteria(SimpleDaoTest.java:39) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)  The DAO code:  `@Repository` public class ShopDaoImpl implements ShopDao { `@PersistenceContext` transient EntityManager entityManager;      @Override     public Shop findByCrieria() {         CriteriaBuilder cb = entityManager.getCriteriaBuilder();         CriteriaQuery c = cb.createQuery(Shop.class);         Root shop = c.from(Shop.class);         c.select(shop).where(cb.equal(shop.get(""name""), ""petstore""));         TypedQuery q = entityManager.createQuery(c);         return q.getSingleResult();     }  }  It seems to be a bug in Spring:  org/springframework/orm/jpa/SharedEntityManagerCreator.java:  if (result instanceof Query) { Query query = (Query) result; ... result = Proxy.newProxyInstance(Query.class.getClassLoader(), new Class[] {Query.class}, new DeferredQueryInvocationHandler(query, target)); ... }  Good catch. Spring is checking to see if the query is an instance of Query, and generates the proxy of that type. Unfortunately, TypedQuery is a subtype of Query, and the generated proxy will still only implement Query. TypedQuery was introduced in JavaEE 6, so it's understandable why Spring doesn't handle it, although Spring 3 is supposed to handle JavaEE 6 properly. Definitely a bug.  ---  **Affects:** 3.0 GA  **Reference URL:** http://stackoverflow.com/questions/2101500/spring-3-0-orm-with-jpa-2-0-classcastexception/2102328#2102328  **Issue Links:** - #11371 Spring 3.0 not compatible with Hibernate 3.5 beta3 - #11906 Spring ORM with JPA 2.0 and Eclipselink throws ClassCastException.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bcfef8a4e17121110535916d914589d010da03b2, https://github.com/spring-projects/spring-framework/commit/0aee6e9f5bd996282c3dddc2ba4f4afdd8e7ccdc  2 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2010-01-20T08:34:16Z","2019-01-11T15:45:15Z"
"","11751","AnnotationDrivenBeanDefinitionParser should allow injection of custom HttpMessageConverter's [SPR-7091]","**[Kasra Rasaee](https://jira.spring.io/secure/ViewProfile.jspa?name=krasaee)** opened **[SPR-7091](https://jira.spring.io/browse/SPR-7091?redirect=false)** and commented  1. There should be a way to inject custom http message converters into AnnotationDrivenBeanDefinitionParser. Currently its hardcoded and set to a private method  private ManagedList\ getMessageConverters(Object source) { ... }  2. AnnotationMethodHandlerAdapter has hardcoded the HttpMessageConverters as well, when replacing the bean with something like     \    \    \    \    \    \    \  The AnnotationMethodHandlerAdapter bean is never replaced within the Spring Context.  Please let me know if there is a different solution?  ---  **Affects:** 3.0.1, 3.0.2  **Issue Links:** - #11851  should supports the attributes of setting customized HttpMessageConverter bean list - #12161 Make it easier to add new Message Converters to AnnotationMethodHandlerAdapter  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-13T02:20:46Z","2019-01-11T13:24:59Z"
"","11730","MappingJacksonJsonView.renderedAttributes to be made visible to subclasses  [SPR-7070]","**[Karthik Gurumurthy](https://jira.spring.io/secure/ViewProfile.jspa?name=spring_user)** opened **[SPR-7070](https://jira.spring.io/browse/SPR-7070?redirect=false)** and commented  I need to override MappingjacksonJsonView.filterModel in my subclass to include BindResult. I plan to register a custom serializer for BindResult and avoid the ""circular"" reference issue if possible. But I still want to respect the 'renderedAttributes' setting on MappingjacksonJsonView.  But there is no getRenderedAttributes / may be field needs to be marked protected.    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/28da6e0d98d08ea126341750808f6963257c116d","closed","type: enhancement,","spring-projects-issues","2010-04-06T05:35:38Z","2012-06-19T03:43:43Z"
"","11044","does not register javax.validation.Valdiator by default with the application context ? [SPR-6377]","**[Karthik Gurumurthy](https://jira.spring.io/secure/ViewProfile.jspa?name=spring_user)** opened **[SPR-6377](https://jira.spring.io/browse/SPR-6377?redirect=false)** and commented  javax.validation.Validator doesn't get injected with   `@Controller` class MyController{  `@Autowired` private javax.validation.Validator validator; }  > stack trace >>> > Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.validation.Validator com.etrade.af.account.controller.AccountController.validator; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [javax.validation.Validator] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {`@org`.springframework.beans.factory.annotation.Autowired(required=true)}  > It works if I explicitly declare LocalValidatorFactoryBean in my application context though. >  >  >  > \ >  > \ >  > I guess the mvc namespacehandler doesn't register this class with the bean registry by default?    ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4efa91d2f077a8d33ba2bf60aa40dd9225247c9a","closed","type: enhancement,","spring-projects-issues","2009-11-17T10:11:20Z","2012-06-19T03:43:53Z"
"","11035","Support for 'groups' in addition to @Valid for @MVC Controllers [SPR-6369]","**[Karthik Gurumurthy](https://jira.spring.io/secure/ViewProfile.jspa?name=spring_user)** opened **[SPR-6369](https://jira.spring.io/browse/SPR-6369?redirect=false)** and commented  I want to be able to specify the JSR303 validation group when specifying `@Valid` in `@Controller-s`. I don't want the validation to be run against the default group every time.  I guess currently I can inject a javax.validation.Validator reference in the `@Controller` and handle this programmatically. Would be nice if this can be driven through an annotation as well.  But `@Valid` doesn't support a ""group"" attribute though. What do you guys think?  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11039 Support for validation groups in `@Valid` used by spring MVC (_**""duplicates""**_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-16T23:03:58Z","2019-01-13T07:57:18Z"
"","11677","JaxWsPortClientInterceptor doesn't allow inheritors to throw exceptions in afterPropertiesSet() [SPR-7012]","**[Karl Palsson](https://jira.spring.io/secure/ViewProfile.jspa?name=kpalsson)** opened **[SPR-7012](https://jira.spring.io/browse/SPR-7012?redirect=false)** and commented  JaxWsPortClientInterceptor, and in turn JaxWsPortProxyFactoryBean, both implement InitializingBean, which as ""afterPropertiesSet() throws Exception"" allowing implementors to throw an exception if initialization fails or if required parameters are not provided.  However, because neither of those class list the ""throws Exception"" part in their implementations, no children of those classes are allowed to throw them either :(  So my extension of JaxWsPortProxyFactoryBean isn't allowed to throw exceptions.  It would be nice if I could, but clearly not essential, I'll just wrap everything into a runtime exception.   ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-03-19T04:11:19Z","2010-03-22T03:17:03Z"
"","11676","NPE when attempting to expose JaxWs Port Proxy via mbean exporter [SPR-7011]","**[Karl Palsson](https://jira.spring.io/secure/ViewProfile.jspa?name=kpalsson)** opened **[SPR-7011](https://jira.spring.io/browse/SPR-7011?redirect=false)** and commented  Not critically important, but if you try and use the MBean exporter (org.springframework.jmx.export.MBeanExporter) to export a web services client (JaxWsPortProxyFactoryBean) then you get an NPE  MBeanExporter.adaptMBeanIfPossible() gets a null back from AopUtils.getTargetClass(), (probably right?) then JmxUtils.getMXBeanInterface() tries to find the superclass of a null class.  Probably the getMXBeanInterface() should be made null safe?    ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/296aa96d715ccc56ab12cbc5af27004e127489a1","closed","in: core,","spring-projects-issues","2010-03-19T02:08:12Z","2012-06-19T03:43:15Z"
"","11636","JaxWsPortClientInterceptor gives errors with wsdl service names, not actual endpoints [SPR-6971]","**[Karl Palsson](https://jira.spring.io/secure/ViewProfile.jspa?name=kpalsson)** opened **[SPR-6971](https://jira.spring.io/browse/SPR-6971?redirect=false)** and commented  the doInvoke() method on JaxWsPortClientInterceptor throws the following exception when it can't connect to the remote service...  org.springframework.remoting.RemoteAccessException: Could not access remote service at [{http://blah.namespace.company/services/more/namespace/cruft/}MyServiceSOAP]; nested exception is com.sun.xml.ws.client.ClientTransportException: HTTP transport error: java.net.ConnectException: Connection refused: connect  This is not overly helpful with working out why you get a http connect failure.  Moreover, it's a fixed string.  I know very well what the namespace is, I wrote the wsdl.  And even if I hadn't, I know from the stack trace what service I'm calling, I don't need this in the error.  It would be much nicer if it did this instead...  org.springframework.remoting.RemoteAccessException: Could not access remote service at http://localhost:9010/webapp/services/MyService; nested exception is com.sun.xml.ws.client.ClientTransportException: HTTP transport error: java.net.ConnectException: Connection refused: connect  Where it clearly shows _what_ it couldn't connect to.  Simply change the error building to use this.getEndpointAddress() instead of this.portQName and we'll all be much better informed, and therefore happier.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eee72c52da7d4712c11ea1342650470453d8dc16","closed","type: enhancement,","spring-projects-issues","2010-03-11T04:33:54Z","2012-06-19T03:43:34Z"
"","11442","scheduling Thread names are very very long compared to older releases. [SPR-6776]","**[Karl Palsson](https://jira.spring.io/secure/ViewProfile.jspa?name=kpalsson)** opened **[SPR-6776](https://jira.spring.io/browse/SPR-6776?redirect=false)** and commented  We normally use [%c:%t] to get a nice log of our log name and the thread name, which is very handy for multithreaded apps.  In Spring 2.5.6, probably in #9894, some changes were made to the thread names in the scheduler pool.  New Thread name: ""org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9"" Old Thread name: ""DefaultQuartzScheduler_Worker-9""  Examples of how long a reasonable log line can get, using a simple log4j pattern: %d %p [%c:%t] - %n  2010-01-27 17:56:42,490 INFO [org.quartz.core.QuartzScheduler:Quartz Scheduler [org.springframework.scheduling.quartz.SchedulerFactoryBean#0]] -  2010-01-27 17:56:42,568 INFO [is.ogv.mnphurricane.handler.NpProcessMaster:org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9] -   I fully appreciate the issues in #9894, but perhaps we could take out the package name?  ---  **Affects:** 2.5.6, 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-01-27T21:13:22Z","2019-01-11T16:00:43Z"
"","11258","context:component-scan broken for Eclipse/Equinox after upgrade to Spring 3.0 [SPR-6592]","**[Kai Hoerder](https://jira.spring.io/secure/ViewProfile.jspa?name=khoerder)** opened **[SPR-6592](https://jira.spring.io/browse/SPR-6592?redirect=false)** and commented  After upgrading from Spring 2.5.6 to Spring 3.0.0.RELEASE, context:component-scan did not work anymore (see stack trace below).  Inserting the line ""rootDirResource = resolveRootDirResource(rootDirResource);"" into PathMatchingResourcePatternResolver.findPathMatchingResources, line 343, directly after ""for (Resource rootDirResource : rootDirResources) {"" fixed it.  Deployment-Scenario: The application resides in a jar inside an Eclipse RCP. The exception is thrown while instantiating a new ClassPathXmlApplicationContext.  Stack trace:  21:36:21,762  WARN org.springframework.core.io.support.PathMatchingResourcePatternResolver - Cannot search for matching files underneath URL [bundleresource://7.fwk1301078346/khoerder/traders/] because it does not correspond to a directory in the file system java.io.FileNotFoundException: URL [bundleresource://7.fwk1301078346/khoerder/traders/] cannot be resolved to absolute file path because it does not reside in the file system: bundleresource://7.fwk1301078346/khoerder/traders/ at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:204) at org.springframework.core.io.AbstractFileResolvingResource.getFile(AbstractFileResolvingResource.java:51) at org.springframework.core.io.UrlResource.getFile(UrlResource.java:168) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingFileResources(PathMatchingResourcePatternResolver.java:529) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:350) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:269) at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:1156) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:204) ...   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/998aa149810da4bd0fdf5ab7b9029970ca175684  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2009-12-20T08:51:34Z","2012-06-19T03:43:24Z"
"","11674","Spring ignores @Transaction due to double proxying [SPR-7009]","**[Jürgen Strickstrock](https://jira.spring.io/secure/ViewProfile.jspa?name=strickstrock)** opened **[SPR-7009](https://jira.spring.io/browse/SPR-7009?redirect=false)*** and commented  When using - PersistenceExceptionTranslatorPostProcessor - BeanNameAutoProxy for transaction proxy creation - AnnotationTransactionAttributeSource   spring creates doubled JDK proxies (proxy encapsulated in proxy), which results in TransactionInterceptor being unable to read `@Transactional` annotation as target is proxy in line 92.  This is probably due to a bug in AbstractAutoProxyCreator.wrapIfNecessary.   ---  **Affects:** 3.0.1  **Attachments:** - [txbug.zip](https://jira.spring.io/secure/attachment/16319/txbug.zip) (_6.83 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c13e5f9f5b764e80e52d4e4166652c64ca4d34e6, https://github.com/spring-projects/spring-framework/commit/706a09c49e3006b945da1b2c75a5483454066cab","closed","in: core,","spring-projects-issues","2010-03-19T01:13:47Z","2012-06-19T03:42:56Z"
"","11752","Split ...util.Assert into AssertState and AssertArg [SPR-7092]","**[Jörg Gottschling](https://jira.spring.io/secure/ViewProfile.jspa?name=jgottschling)** opened **[SPR-7092](https://jira.spring.io/browse/SPR-7092?redirect=false)** and commented  I often find myself using Assert.notNull(...) or Assert.hasText(...) when I should use Assert.state(...) because they are much more convenient. But they throw the wrong Exception in those cases. So I like to have a class AssertState which has all the methods from Assert except Assert.state(...) ;-) but throws an IllegalStateException. I think for the long run Assert should be copied to AssertArg without the state-Methods.  So in the End we can use two classes AssertArg or AssertArgument and AssertState with nice convenient methods throwing the right Exceptions. :-)   --- No further details from [SPR-7092](https://jira.spring.io/browse/SPR-7092?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-04-13T18:51:23Z","2018-12-28T10:05:24Z"
"","11418","RestTemplate throws IllegalArgumentException when HTTP status is not in the HttpStatus enum  [SPR-6752]","**[Justin Mills](https://jira.spring.io/secure/ViewProfile.jspa?name=jmills)** opened **[SPR-6752](https://jira.spring.io/browse/SPR-6752?redirect=false)** and commented  Using RestTemplate to connect to a server that occasionally throws HTTP Status of 420, I am getting IllegalArgumentExceptions when accessing the HttpStatus object in my implementation of the ResponseErrorHandler interface.  When I removed that, and started pulling the status from the Headers directly, RestTemplate started throwing errors due to the logger.warn call in RestTemplate.handleResponseError().  I've gotten around this by not using the HttpStatus enum (getting status from the HttpHeaders directly) and by turning up the log level for RestTemplate to ERROR.  Shouldn't this support any HTTP status value?  ---  **Affects:** 3.0 GA  **Issue Links:** - #13707 Implementation of HttpStatus as an enumeration precludes other status codes (_**""is duplicated by""**_) - #13949 In order to handle non standard HTTP Status codes returned by services in RestTemplate, I would like to add support for handling non standard status codes and passing on responses for these responses to callers (_**""is duplicated by""**_) - #14042 Unknown status codes (i.e. not in HttpStatus enum) prevent HttpClientErrorException and HttpServerErrorExceptions from being raised - #20529 RestTemplate doesn't consistently tolerate unknown HTTP status codes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/68b4c7df6efedb03849cc15525eadb871f520382  **Backported to:** [3.0.1](https://github.com/spring-projects/spring-framework/milestone/68?closed=1)","closed","type: bug,","spring-projects-issues","2010-01-22T03:04:38Z","2019-01-11T15:43:43Z"
"","11185","Fail to generate WDSL with wsgen when using SpringBeanAutowiringSupport (NPE) [SPR-6519]","**[Julien HENRY](https://jira.spring.io/secure/ViewProfile.jspa?name=henryju)** opened **[SPR-6519](https://jira.spring.io/browse/SPR-6519?redirect=false)** and commented  Hi,  I have a web service class that extends SpringBeanAutowiringSupport. Using spring 2.5.6 I can generate the WSDL using jaxws Maven plugin (that use internally wsgen).  Now upgrading to Spring 3.0 RC3 (but I have also the same issue with RC2) I can't generate it anymore.  I get the following exception:  ``` Problem encountered during annotation processing; see stacktrace below for more information. java.lang.NullPointerException         at com.sun.tools.ws.processor.modeler.annotation.WebServiceVisitor.isLegalType(WebServiceVisitor.java:781)         at com.sun.tools.ws.processor.modeler.annotation.WebServiceVisitor.isLegalParameter(WebServiceVisitor.java:681)         at com.sun.tools.ws.processor.modeler.annotation.WebServiceVisitor.isLegalMethod(WebServiceVisitor.java:648)         at com.sun.tools.ws.processor.modeler.annotation.WebServiceVisitor.methodsAreLegal(WebServiceVisitor.java:599)         at com.sun.tools.ws.processor.modeler.annotation.WebServiceVisitor.methodsAreLegal(WebServiceVisitor.java:604)         at com.sun.tools.ws.processor.modeler.annotation.WebServiceVisitor.isLegalImplementation(WebServiceVisitor.java: ... ```  The NPE is caused by a jaxws bug (https://jax-ws.dev.java.net/issues/show_bug.cgi?id=461) but I think it hides another issue as it was working with Spring 2.5.6.   ---  **Affects:** 3.0 RC3","closed","status: declined,","spring-projects-issues","2009-12-04T03:20:07Z","2019-01-12T16:38:41Z"
"","11472","@Value doesn't allow a default value [SPR-6806]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-6806](https://jira.spring.io/browse/SPR-6806?redirect=false)** and commented  I'm using nightly build #571.  When trying to define a default value I get the following stacktrace in my testcase which I'll upload immediately:  06.02.2010 10:58:20 org.springframework.context.support.AbstractApplicationConte xt prepareRefresh INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationCont ext@17fa65e: startup date [Sat Feb 06 10:58:20 CET 2010]; root of context hierar chy 06.02.2010 10:58:20 org.springframework.beans.factory.xml.XmlBeanDefinitionReade r loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [testcase/spring.xml ] 06.02.2010 10:58:21 org.springframework.context.weaving.DefaultContextLoadTimeWe aver setBeanClassLoader INFO: Found Spring's JVM agent for instrumentation 06.02.2010 10:58:21 org.springframework.aop.aspectj.AspectJWeaverMessageHandler handleMessage INFO: [AspectJ] AspectJ Weaver Version 1.6.8 built on Friday Jan 8, 2010 at 21:5 3:37 GMT 06.02.2010 10:58:21 org.springframework.aop.aspectj.AspectJWeaverMessageHandler handleMessage INFO: [AspectJ] register classloader sun.misc.Launcher$AppClassLoader@fabe9 06.02.2010 10:58:21 org.springframework.aop.aspectj.AspectJWeaverMessageHandler handleMessage INFO: [AspectJ] using configuration /C:/Users/Public/Documents/temp/testcase-spr ing/src/META-INF/aop.xml 06.02.2010 10:58:21 org.springframework.aop.aspectj.AspectJWeaverMessageHandler handleMessage INFO: [AspectJ] no aspects registered. Disabling weaver for class loader sun.mis c.Launcher$AppClassLoader@fabe9 06.02.2010 10:58:21 org.springframework.beans.factory.support.DefaultListableBea nFactory preInstantiateSingletons INFO: Pre-instantiating singletons in org.springframework.beans.factory.support. DefaultListableBeanFactory@55d93d: defining beans [springConfig,springProperties ,org.springframework.context.annotation.internalConfigurationAnnotationProcessor ,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org .springframework.context.annotation.internalRequiredAnnotationProcessor,org.spri ngframework.context.annotation.internalCommonAnnotationProcessor,org.springframe work.context.weaving.AspectJWeavingEnabler#0,loadTimeWeaver,org.springframework. aop.config.internalAutoProxyCreator,springProps]; root of factory hierarchy 06.02.2010 10:58:21 org.springframework.beans.factory.support.DefaultSingletonBe anRegistry destroySingletons INFO: Destroying singletons in org.springframework.beans.factory.support.Default ListableBeanFactory@55d93d: defining beans [springConfig,springProperties,org.sp ringframework.context.annotation.internalConfigurationAnnotationProcessor,org.sp ringframework.context.annotation.internalAutowiredAnnotationProcessor,org.spring framework.context.annotation.internalRequiredAnnotationProcessor,org.springframe work.context.annotation.internalCommonAnnotationProcessor,org.springframework.co ntext.weaving.AspectJWeavingEnabler#0,loadTimeWeaver,org.springframework.aop.con fig.internalAutoProxyCreator,springProps]; root of factory hierarchy 06.02.2010 10:58:21 org.springframework.context.weaving.DefaultContextLoadTimeWe aver destroy INFO: Removing all registered transformers for class loader: sun.misc.Launcher$A ppClassLoader Exception in thread ""main"" org.springframework.beans.factory.BeanCreationExcepti on: Error creating bean with name 'springConfig': Injection of autowired depende ncies failed; nested exception is org.springframework.beans.factory.BeanCreation Exception: Could not autowire field: private int testcase.SpringConfig.integerPr op; nested exception is org.springframework.beans.factory.BeanExpressionExceptio n: Expression parsing failed; nested exception is org.springframework.expression .spel.SpelParseException: EL1041E:(pos 23): After parsing a valid expression, th ere is still more data in the expression: 'colon(:)' at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanP ostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java :283) at org.springframework.beans.factory.support.AbstractAutowireCapableBean Factory.populateBean(AbstractAutowireCapableBeanFactory.java:1055) at org.springframework.beans.factory.support.AbstractAutowireCapableBean Factory.doCreateBean(AbstractAutowireCapableBeanFactory.java:511) at org.springframework.beans.factory.support.AbstractAutowireCapableBean Factory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getOb ject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistr y.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBe an(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean (AbstractBeanFactory.java:189) at org.springframework.beans.factory.support.DefaultListableBeanFactory. preInstantiateSingletons(DefaultListableBeanFactory.java:562) at org.springframework.context.support.AbstractApplicationContext.finish BeanFactoryInitialization(AbstractApplicationContext.java:868) at org.springframework.context.support.AbstractApplicationContext.refres h(AbstractApplicationContext.java:420) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) at testcase.Main.main(Main.java:14) Caused by: org.springframework.beans.factory.BeanCreationException: Could not au towire field: private int testcase.SpringConfig.integerProp; nested exception is org.springframework.beans.factory.BeanExpressionException: Expression parsing f ailed; nested exception is org.springframework.expression.spel.SpelParseExceptio n: EL1041E:(pos 23): After parsing a valid expression, there is still more data in the expression: 'colon(:)' at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanP ostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.j ava:504) at org.springframework.beans.factory.annotation.InjectionMetadata.inject (InjectionMetadata.java:84) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanP ostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java :280) ... 13 more Caused by: org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is org.springframework.expression.spel.SpelPar seException: EL1041E:(pos 23): After parsing a valid expression, there is still more data in the expression: 'colon(:)' at org.springframework.context.expression.StandardBeanExpressionResolver .evaluate(StandardBeanExpressionResolver.java:140) at org.springframework.beans.factory.support.AbstractBeanFactory.evaluat eBeanDefinitionString(AbstractBeanFactory.java:1245) at org.springframework.beans.factory.support.DefaultListableBeanFactory. doResolveDependency(DefaultListableBeanFactory.java:696) at org.springframework.beans.factory.support.DefaultListableBeanFactory. resolveDependency(DefaultListableBeanFactory.java:685) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanP ostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.j ava:475) ... 15 more Caused by: org.springframework.expression.spel.SpelParseException: EL1041E:(pos 23): After parsing a valid expression, there is still more data in the expressio n: 'colon(:)' at org.springframework.expression.spel.standard.InternalSpelExpressionPa rser.doParseExpression(InternalSpelExpressionParser.java:116) at org.springframework.expression.spel.standard.SpelExpressionParser.doP arseExpression(SpelExpressionParser.java:56) at org.springframework.expression.spel.standard.SpelExpressionParser.doP arseExpression(SpelExpressionParser.java:1) at org.springframework.expression.common.TemplateAwareExpressionParser.p arseExpressions(TemplateAwareExpressionParser.java:128) at org.springframework.expression.common.TemplateAwareExpressionParser.p arseTemplate(TemplateAwareExpressionParser.java:74) at org.springframework.expression.common.TemplateAwareExpressionParser.p arseExpression(TemplateAwareExpressionParser.java:64) at org.springframework.context.expression.StandardBeanExpressionResolver .evaluate(StandardBeanExpressionResolver.java:119) ... 19 more   ---  **Affects:** 3.0 GA  **Attachments:** - [testcase.zip](https://jira.spring.io/secure/attachment/16146/testcase.zip) (_3.54 MB_)","closed","in: core,","spring-projects-issues","2010-02-05T20:00:18Z","2019-01-12T05:32:36Z"
"","11377","persistence_2_0.xsd not supported [SPR-6711]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-6711](https://jira.spring.io/browse/SPR-6711?redirect=false)** and commented  I tried to change META-INF/persistence.xml to use persistence_2_0.xsd and version=2.0"", but I got the following stacktrace:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'artikelverwaltungDaoImpl': Injection of persistence dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [de/hska/util/SpringConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public javax.persistence.EntityManagerFactory de.hska.util.SpringConfig.entityManagerFactory()] threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'null': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Invalid XML in persistence unit from URL [file:/C:/Users/Public/Documents/eclipse-workspace-swe1/hska/build/classes/META-INF/persistence.xml] at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:316) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1055) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:511) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:561) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:842) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:416) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:93) at de.hska.test.util.DbUnit.reload(DbUnit.java:79) at de.hska.test.BestellverwaltungTest.reloadDB(BestellverwaltungTest.java:83) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:613) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [de/hska/util/SpringConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public javax.persistence.EntityManagerFactory de.hska.util.SpringConfig.entityManagerFactory()] threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'null': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Invalid XML in persistence unit from URL [file:/C:/Users/Public/Documents/eclipse-workspace-swe1/hska/build/classes/META-INF/persistence.xml] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:551) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:964) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:868) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:479) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:504) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:470) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:595) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:568) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:147) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:313) ... 32 more Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public javax.persistence.EntityManagerFactory de.hska.util.SpringConfig.entityManagerFactory()] threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'null': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Invalid XML in persistence unit from URL [file:/C:/Users/Public/Documents/eclipse-workspace-swe1/hska/build/classes/META-INF/persistence.xml] at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:158) at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:540) ... 47 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'null': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Invalid XML in persistence unit from URL [file:/C:/Users/Public/Documents/eclipse-workspace-swe1/hska/build/classes/META-INF/persistence.xml] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1401) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:386) at de.hska.util.SpringConfig.entityManagerFactory(SpringConfig.java:148) at de.hska.util.SpringConfig$$EnhancerByCGLIB$$a0148856.CGLIB$entityManagerFactory$6(\) at de.hska.util.SpringConfig$$EnhancerByCGLIB$$a0148856$$FastClassByCGLIB$$ba979e9e.invoke(\) at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:215) at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:170) at de.hska.util.SpringConfig$$EnhancerByCGLIB$$a0148856.entityManagerFactory(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:613) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:146) ... 48 more Caused by: java.lang.IllegalArgumentException: Invalid XML in persistence unit from URL [file:/C:/Users/Public/Documents/eclipse-workspace-swe1/hska/build/classes/META-INF/persistence.xml] at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.readPersistenceUnitInfos(PersistenceUnitReader.java:154) at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.readPersistenceUnitInfos(DefaultPersistenceUnitManager.java:310) at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.preparePersistenceUnitInfos(DefaultPersistenceUnitManager.java:278) at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.afterPropertiesSet(DefaultPersistenceUnitManager.java:263) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:192) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1460) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1398) ... 60 more Caused by: org.xml.sax.SAXParseException: cvc-complex-type.3.1: Value '2.0' of attribute 'version' of element 'persistence' is not valid with respect to the corresponding attribute use. Attribute 'version' has a fixed value of '1.0'. at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:198) at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:134) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:387) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:321) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:421) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3185) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processOneAttribute(XMLSchemaValidator.java:2805) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processAttributes(XMLSchemaValidator.java:2717) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:2069) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:709) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:376) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl$NSContentDriver.scanRootElementHook(XMLNSDocumentScannerImpl.java:602) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:3080) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:899) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:625) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:116) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:488) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:812) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:741) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:123) at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:239) at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:288) at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:121) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.validateResource(PersistenceUnitReader.java:190) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.readPersistenceUnitInfos(PersistenceUnitReader.java:141) ... 67 more   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a6769d60c08f0dbc3379d287371a54f61826abae, https://github.com/spring-projects/spring-framework/commit/7a792f6c232cf3b6b06f714fb0be5eb3dc189e73","closed","type: bug,","spring-projects-issues","2010-01-16T16:47:40Z","2012-06-19T03:43:14Z"
"","11371","Spring 3.0 not compatible with Hibernate 3.5 beta3 [SPR-6705]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-6705](https://jira.spring.io/browse/SPR-6705?redirect=false)** and commented  After upgrading from Hibernate 3.5 beta-2 to 3.5 beta-3 I get the stacktrace below. It looks like the class org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo doesn't implement the method getValidationMode() which is inherited from the JPA 2.0 interface javax.persistence.spi.PersistenceUnitInfo.  Here is the stacktrace: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'artikelverwaltungDaoImpl': Injection of persistence dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [de/hska/util/SpringConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public javax.persistence.EntityManagerFactory de.hska.util.SpringConfig.entityManagerFactory()] threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'null': Invocation of init method failed; nested exception is java.lang.AbstractMethodError: org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo.getValidationMode()Ljavax/persistence/ValidationMode; at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:316) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1055) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:511) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:557) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:842) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:416) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:93) at de.hska.test.util.DbUnit.reload(DbUnit.java:79) at de.hska.test.BestellverwaltungTest.reloadDB(BestellverwaltungTest.java:83) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:613) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [de/hska/util/SpringConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public javax.persistence.EntityManagerFactory de.hska.util.SpringConfig.entityManagerFactory()] threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'null': Invocation of init method failed; nested exception is java.lang.AbstractMethodError: org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo.getValidationMode()Ljavax/persistence/ValidationMode; at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:551) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:964) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:868) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:479) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:504) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:470) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:595) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:568) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:147) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:313) ... 32 more Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public javax.persistence.EntityManagerFactory de.hska.util.SpringConfig.entityManagerFactory()] threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'null': Invocation of init method failed; nested exception is java.lang.AbstractMethodError: org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo.getValidationMode()Ljavax/persistence/ValidationMode; at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:158) at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:540) ... 47 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'null': Invocation of init method failed; nested exception is java.lang.AbstractMethodError: org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo.getValidationMode()Ljavax/persistence/ValidationMode; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1401) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:386) at de.hska.util.SpringConfig.entityManagerFactory(SpringConfig.java:148) at de.hska.util.SpringConfig$$EnhancerByCGLIB$$69b2e672.CGLIB$entityManagerFactory$6(\) at de.hska.util.SpringConfig$$EnhancerByCGLIB$$69b2e672$$FastClassByCGLIB$$7772df4a.invoke(\) at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:215) at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:170) at de.hska.util.SpringConfig$$EnhancerByCGLIB$$69b2e672.entityManagerFactory(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:613) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:146) ... 48 more Caused by: java.lang.AbstractMethodError: org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo.getValidationMode()Ljavax/persistence/ValidationMode; at org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:487) at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:165) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:225) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1460) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1398) ... 60 more  ---  **Affects:** 3.0 GA  **Issue Links:** - #11074 Add full support for JPA 2.0 PersistenceUnitInfo - #11399 Spring 3.0 ORM with JPA 2.0 TypedQuery ClassCastException","closed","type: enhancement,","spring-projects-issues","2010-01-14T21:41:39Z","2019-01-11T15:42:50Z"
"","11223","SpringValidatorAdapter.validateValue() is wrong [SPR-6557]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-6557](https://jira.spring.io/browse/SPR-6557?redirect=false)** and commented  In org.springframework.validation.beanvalidation.SpringValidatorAdapter the methode validateValue() is wrong. Without the fix ""bean validation"" is useable only in part.  Current implementation: public \ Set validateValue(Class\ beanType, String propertyName, Object value, Class... groups) { return this.targetValidator.validateValue(beanType, propertyName, groups); }  However, the argument ""value"" is lost inside the method body, and should be: return this.targetValidator.validateValue(beanType, propertyName, value, groups);   ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b497f6ccad3eebcc6d475071bb7dd2741557d5e0","closed","type: bug,","spring-projects-issues","2009-12-12T19:29:15Z","2012-06-19T03:43:15Z"
"","11210","Provide StandardMultipartResolver based on Servlet 3.0 Part API [SPR-6544]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-6544](https://jira.spring.io/browse/SPR-6544?redirect=false)** and commented  http://java.sun.com/javaee/6/docs/api/javax/servlet/http/Part.html  ---  **Issue Links:** - #10258 Support Servlet 3.0 (JSR-315)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-10T08:37:24Z","2019-01-11T15:22:04Z"
"","11209","Support for JSF 2 view and flow scopes [SPR-6543]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-6543](https://jira.spring.io/browse/SPR-6543?redirect=false)** and commented  Support for JSF 2.0's view scope, as exposed through UIViewRoot.getViewMap(). Possibly also for ""facesRequest"" scope: FacesContext.getAttributes(). Also research options for making good use of the JSF 2.0 flash scope.  ---  **Issue Links:** - #12758 Specific support for JSF 2.2 / 2.3 - #11082 Provide conversation management support  51 votes, 44 watchers","closed","status: bulk-closed,","spring-projects-issues","2009-12-10T08:26:51Z","2019-01-12T03:50:43Z"
"","11754","constructor-arg ref expressions not intuitive [SPR-7094]","**[Joseph Ottinger](https://jira.spring.io/secure/ViewProfile.jspa?name=jottinger)** opened **[SPR-7094](https://jira.spring.io/browse/SPR-7094?redirect=false)** and commented  Given a bean A with property B, and bean E with property F as a constructor argument, the following configuration fails:                                         The constructor reference being used is not a.b, but ""hello, world"" - it looks like the EL is evaluating the expression rather than using the reference.   ---  **Affects:** 3.0.1  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-13T21:29:19Z","2015-09-22T17:34:33Z"
"","11235","AbstractJasperReportsView and initApplicationContext() problem [SPR-6569]","**[Josef Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=lisak)** opened **[SPR-6569](https://jira.spring.io/browse/SPR-6569?redirect=false)** and commented  The problem is, that when JasperReportsMultiFormatView is configured in application context and initialized on spring start-up, the AbstractJasperReportsView.initApplicationContext() is automaticaly called and it checks whether for instance the report has all parameters set. But if I want to add parameters after the initialization (in handlers of controller) there is no way of setting JasperReportsMultiFormatView in application context (spring configuration) because when I need to put a reference of it to ModelAndView and then add parameters to it like mav.addObject(par, par1) it needs to be instantiated first and initApplicationContext() is called (but the parameters are not disponsible yet).  I really don't know how to deal with this situation. I'm using ResourceBundleViewResolver and the JasperReportsMultiFormatView simply must be set in spring configuration. No way of setting it in properties because it's sometimes to complicated.   ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2009-12-16T03:47:20Z","2012-06-19T09:36:13Z"
"","11607","java.lang.NoSuchMethodError when calling a class that extends org.springframework.web.util.CookieGenerator from Spring 2 but that it is been used in Spring 3. [SPR-6942]","**[jose antonio perez garcia](https://jira.spring.io/secure/ViewProfile.jspa?name=jperezgarcia)** opened **[SPR-6942](https://jira.spring.io/browse/SPR-6942?redirect=false)** and commented  public class TestCookieGenerator extends CookieGenerator {      private static final int COOKIE_MAX_AGE = 365 * 24 * 60 * 60;          public TestCookieGenerator() {         setCookieName(COOKIE_NAME);         setCookieMaxAge(COOKIE_MAX_AGE);     }  }  TestCookieGenerator is been compiled using spring 2.5.6 which setCookieMaxAge(...) use an int in Spring 2.5.6 but this has change to be an Integer in Spring 3.  This doesn't seems to be a problem of autoboxing in Java. The problem comes up when a project that uses spring 3,it uses the library where the TestCookieGenerator has been compiled using spring 2.5.6.  Because spring uses reflection to instantiate beans and reflection doesn't manage autoboxing(It is done at compilation time), that produce the next exception ""java.lang.NoSuchMethodError: org.springframework.web.util.CookieGenerator.setCookieMaxAge(I)V"".   ---  **Affects:** 3.0 GA  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-03-03T22:03:48Z","2019-01-12T05:32:23Z"
"","10912","ability to use propertyplaceholderconfigurer values in  statements [SPR-6244]","**[Jorg Heymans](https://jira.spring.io/secure/ViewProfile.jspa?name=heymjo)** opened **[SPR-6244](https://jira.spring.io/browse/SPR-6244?redirect=false)** and commented  Hi,  Below code does not work because the import statement is evaluated before any PPHC instances:  ```                   hibernate          ```  What is the recommended way of solving this for my usecase if system properties are a no-go ? Selective inclusion of configuration files depending on a value from a property file seems quite common. I now there are ways around it with context.registerBeanDefinition but that seems ugly :-|   ---  **Affects:** 2.5.6  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-16T00:36:01Z","2012-06-14T06:44:47Z"
"","11876","Provide compatibility to JSR-168 portlets with Spring 3 [SPR-7217]","**[Jonathan Whitall](https://jira.spring.io/secure/ViewProfile.jspa?name=fiddlerpianist)** opened **[SPR-7217](https://jira.spring.io/browse/SPR-7217?redirect=false)** and commented  It appears that Spring Portlet MVC 3.0 was never intended to work with a JSR-168 portlet container. We have a use case to provide Spring 3 core JARs for applications but also be compatible with JSR-168. So, in order to do that, I created a forward port of Spring MVC Portlet 2.5.6.SEC01 to work with Spring 3.0.2.RELEASE dependencies.  I don't expect this would be high on the priority list of an official release, but I'm provided an Eclipse / Maven-enabled project of the port in the case that someone else wants to do this. All test cases should pass.   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?p=300577  **Attachments:** - [spring-portlet-mvc-jsr168-frontport.zip](https://jira.spring.io/secure/attachment/16568/spring-portlet-mvc-jsr168-frontport.zip) (_275.69 kB_)","closed","type: enhancement,","spring-projects-issues","2010-05-19T02:15:48Z","2012-10-31T11:32:28Z"
"","11865","Missing and/or misspelled words in 3.0 framework reference [SPR-7206]","**[Jonathan Spooner](https://jira.spring.io/secure/ViewProfile.jspa?name=spoonerj30)** opened **[SPR-7206](https://jira.spring.io/browse/SPR-7206?redirect=false)** and commented  The following lines are found in: **3.5.5.2 Using a custom scope**  > The central method to register a new Scope with the Spring container. > **Possible solution:** The +following method is the+ central method to register a new Scope with the Spring container.    --- No further details from [SPR-7206](https://jira.spring.io/browse/SPR-7206?redirect=false)","closed","type: task,","spring-projects-issues","2010-05-15T18:31:22Z","2012-06-19T03:43:58Z"
"","11864","Missing and/or misspelled words in 3.0 framework reference [SPR-7205]","**[Jonathan Spooner](https://jira.spring.io/secure/ViewProfile.jspa?name=spoonerj30)** opened **[SPR-7205](https://jira.spring.io/browse/SPR-7205?redirect=false)** and commented  The following lines are found in: **3.4.1.3 Dependency resolution process**  > 1. The ApplicationContext is created -an- initialized... >    **Possible solution:** 1. The ApplicationContext is created +and+ initialized...  > 3. Each property or constructor argument an actual definition ... >    **Possible solution:** 3. Each property or constructor argument +is+ an actual definition ...  ---  The following lines are found in: **3.4.2.6 XML shortcut with the p-namespace**  > As previously mentioned, the p-namespace not have a schema definition, > **Possible solution:** As previously mentioned, the p-namespace +does+ not have a schema definition,  ---  The following lines are found in: **3.4.5 Autowiring collaborators**  > For example, if you need to add a dependency to a class, that dependency can be satisfied automatically your needing to modify the configuration. > **Possible solution:** For example, if you need to add a dependency to a class, that dependency can be satisfied automatically +without+ your needing to modify the configuration.  ---  **Affects:** 3.0 GA","closed","type: task,","spring-projects-issues","2010-05-14T13:57:30Z","2019-01-13T21:45:59Z"
"","11462","Provide precise control over the attributes used in a redirect scenario [SPR-6796]","**[Jon Harper](https://jira.spring.io/secure/ViewProfile.jspa?name=puk_999)** opened **[SPR-6796](https://jira.spring.io/browse/SPR-6796?redirect=false)** and commented  There needs to be a way to issue a redirect using the String type and to specify that there should be no exposing of the model to the view.  One use case: HandlerInterceptors are commonly used to add data to the model. If the controller supports POST request and does a redirect (which is the most common case) then the data added by the handler interceptor gets appended to the redirect url. This is undesirable. See http://forum.springsource.org/showthread.php?t=84140.  Another use case: The controller uses a session attribute. The GET inserts into the model (session). The POST accepts a SessionStatus and calls status.setComplete() and then does a redirect using ""redirect:view"". The model data is still appended to the end of the redirected URL. The programmer now has to accept the ModelMap and call clear() on it. This should really not be required. See http://forum.springsource.org/showthread.php?p=275392.  Therefore there needs to be a very simple way (i.e. view String prefix ) to do a redirect without exposing the model to the view. I see this as the default use case and the case of exposing the model as a less common use case.  Jon  ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=84140  **Issue Links:** - #5995 Allow specifying which request attributes are included in RedirectView (_**""duplicates""**_) - #13278 When a controller method redirect to any url, the framework automatically appends all the model attributes in url query string even if those attributes are stored in session. (_**""is duplicated by""**_) - #10625 When doing a redirect anything that is not org.springframework.beans.BeanUtils.isSimpleValueType silently gets left off of the redirect query string  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-03T22:40:51Z","2019-01-11T15:46:22Z"
"","11261","Reference Documentation unclear regarding SessionStatus.setComplete() and redirecting to view. [SPR-6595]","**[Jon Harper](https://jira.spring.io/secure/ViewProfile.jspa?name=puk_999)** opened **[SPR-6595](https://jira.spring.io/browse/SPR-6595?redirect=false)** and commented  The reference documentation says (PDF, page 453 (429 in footer!)): ??org.springframework.web.bind.support.SessionStatus status handle for marking form processing as complete, which triggers the cleanup of session attributes that have been indicated by the `@SessionAttributes` annotation at the handler type??  Additionally, on page 456 (432 in footer) the EditPetForm controller is presented. The processSubmit() calls SessionStatus.setComplete() and then does a redirect.  Developers are implying from this that the model data is cleared before the redirect occurs. This is not the case. If the model data is eligible for exposing then the redirect url will have the model data appended to it. It so happens that the model data of EditPetForm's controller is not eligible for exposing because it's not String or primitive data.  To clear the data, the processSubmit() needs to accept a ModelMap object and call clear() on that before the redirect.  The documentation needs to be clearer on this issue. This should also be in the MVC step-by-step document which I understand is currently being composed.   ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?p=274959#post274959  4 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2009-12-21T04:48:53Z","2019-01-07T14:06:33Z"
"","11722","Add Group Class support to JSR-303 Validation using @Valid [SPR-7062]","**[Jon Daly](https://jira.spring.io/secure/ViewProfile.jspa?name=jondaly@firstdata.com)** opened **[SPR-7062](https://jira.spring.io/browse/SPR-7062?redirect=false)** and commented  Would like a replacement for `@Valid` that could take group classes for JSR-303 validation. Right now only the default group class of JSR-303 Constraints is run for the `@Valid`.  Please refer to this forum thread for more detail: http://forum.springsource.org/showthread.php?p=292566  ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=292566  **Issue Links:** - [SWF-1453](https://jira.spring.io/browse/SWF-1453) Support JSR303 Validation Groups for Webflow View States (_**""is depended on by""**_) - #11039 Support for validation groups in `@Valid` used by spring MVC (_**""duplicates""**_)  18 votes, 14 watchers","closed","has: votes-jira,","spring-projects-issues","2010-04-01T08:35:05Z","2019-01-13T07:54:29Z"
"","11833","Radiobutton/Checkboxes tag doesn't utilize ConversionService for label rendering [SPR-7174]","**[Johnny Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=johnny2002)** opened **[SPR-7174](https://jira.spring.io/browse/SPR-7174?redirect=false)** and commented  In version 3.0.2, the AbstractMultiCheckedElementTag.java line 291: tagWriter.appendValue(label.toString());  This line cannot take the advantage of spring conversion service. We should change to the following: PropertyEditor editor = (value != null ? this.getBindStatus().findEditor(value.getClass()) : null); String displayString = getDisplayString(label, editor); tagWriter.appendValue(displayString);   ---  **Affects:** 3.0.2  **Attachments:** - [AbstractMultiCheckedElementTag.java](https://jira.spring.io/secure/attachment/16541/AbstractMultiCheckedElementTag.java) (_9.67 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/48869a86ccadbfd680e91cb4ee7d383221595afd, https://github.com/spring-projects/spring-framework/commit/8ccd74b6c8c2883f2887de2d3b605e8e509ab938","closed","type: enhancement,","spring-projects-issues","2010-05-05T19:14:28Z","2012-06-19T03:43:27Z"
"","11612","NullPointerException from DefaultListableBeanFactory caused by BeanConfigurerSupport [SPR-6947]","**[John Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=johnzhang)** opened **[SPR-6947](https://jira.spring.io/browse/SPR-6947?redirect=false)** and commented  In the org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean method, there is a block of code:      	BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance);     	if (bwi == null) {     		// Skip the bean if no wiring info given.     		return;     	}          	try {     		if (bwi.indicatesAutowiring() ||     				(bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) {     			// Perform autowiring (also applying standard factory / post-processor callbacks).     			this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck());     			Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName());     			checkExposedObject(result, beanInstance);     		}  when the beanName in bwi is null, this call returns true: bwi.indicatesAutowiring()  and then it will execute: Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName());  since the bwi.getBeanName() returns null, it will then cause a NullPointerException:  java.lang.NullPointerException at java.util.concurrent.ConcurrentHashMap.containsKey(ConcurrentHashMap.java:782) at org.springframework.beans.factory.support.DefaultListableBeanFactory.containsBeanDefinition(DefaultListableBeanFactory.java:264) at org.springframework.aop.framework.autoproxy.AutoProxyUtils.shouldProxyTargetClass(AutoProxyUtils.java:55) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.shouldProxyTargetClass(AbstractAutoProxyCreator.java:493) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:454) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:362) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:322) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:404) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1407) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:386) at org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(BeanConfigurerSupport.java:141) at org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect.configureBean(AnnotationBeanConfigurerAspect.aj:59) at org.springframework.beans.factory.aspectj.AbstractDependencyInjectionAspect.ajc$afterReturning$org_springframework_beans_factory_aspectj_AbstractDependencyInjectionAspect$2$1ea6722c(AbstractDependencyInjectionAspect.aj:89)  In my particular case, the beanWiringInfoResolver is AnnotationBeanWiringInfoResolver, which has this method:      protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation) {     	if (!Autowire.NO.equals(annotation.autowire())) {     		return new BeanWiringInfo(annotation.autowire().value(), annotation.dependencyCheck());     	}     	else {     		if (!"""".equals(annotation.value())) {     			// explicitly specified bean name     			return new BeanWiringInfo(annotation.value(), false);     		}     		else {     			// default bean name     			return new BeanWiringInfo(getDefaultBeanName(beanInstance), true);     		}     	}     }  The Autowire mode is set to BY_NAME, so the above block will return a BeanWiringInfo without beanName.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b07b1469658e4a28b3b1b3460e86e62a54e8c86f","closed","in: core,","spring-projects-issues","2010-03-04T06:48:43Z","2012-06-19T03:44:15Z"
"","11019","TestContext framework should support one AspectJ instance per ApplicationContext [SPR-6353]","**[John Wu](https://jira.spring.io/secure/ViewProfile.jspa?name=phantom_john)** opened **[SPR-6353](https://jira.spring.io/browse/SPR-6353?redirect=false)** and commented  ## The Symptom  - Each test passes when running individually; - A few `@Transactional` tests may fail when running in a test suite. The failure may occur on any `@Transactional` test class, depending on the nondeterministic runtime tests sequence. In fact, it's quite difficult to reproduce before knowing the root cause.  ---  ## Steps to Reproduce  - Using Spring 2.5.6 or 3.0.0.RC1, JUnit 4; - Create a `SimpleDbOpService` (may or may not annotated with `@Transactional`), add a method to insert a record into DB based on the input parameters; - Create a SimpleDbOpATest:  ```java @ContextConfiguration({""base.xml"", ""A.xml""}) ```  - Create a SimpleDbOpBTest:  ```java @ContextConfiguration({""base.xml"", ""B.xml""}) ```  - Create a SimpleDbOpCTest:  ```java @ContextConfiguration({""base.xml"", ""A.xml""}) ```  - Each test is annotated with `@Transactional`, calling the `SimpleDbOpService` and verifying the DB operation results at the end of test method; - `` in `base.xml`, also add ""transactionManager"" definition in - Create a test suite class as the following:  ```java      import org.junit.runner.RunWith;     import org.junit.runners.Suite;          @RunWith(Suite.class)     @Suite.SuiteClasses({       SimpleDbOpATest.class,       SimpleDbOpBTest.class,       SimpleDbOpCTest.class     })     public class Debug {          } ```  - The tests in `SimpleDbOpCTest` will fail.  ----  ## Root Cause  In the Test Framework, it creates one instance of `ApplicationContext` for each ""Set of context locations"" and caches (and switches) the ApplicationContext instances by ""context locations"". Among all those `ApplicationContext` instances, the instance of `AnnotationTransactionAspect` is shared. That is, during the test suite running, there will be only one instance of `AnnotationTransactionAspect`, no matter how many `ApplicationContext` instances created.  A reference to `BeanFactory` (in spring 3.0.0.RC) or `transactionManager` (in spring 2.5.6) will be injected into `AnnotationTransactionAspect` (derived from `TransactionAspectSupport`) while the `ApplicationContext` being loaded.  In the example above, test A and C have the exactly same context locations, and they will share the same application context instance when running in a test suite. So, when running tests A, B, and C in a suite and in that order, the application context instance switches from A to B to A. However, the `transactionManager` instance (retrieved from an instance of `AnnotationTransactionAspect`) will be A, B, and B (**should be A though**), because there is only one instance of `AnnotationTransactionAspect` per class loader. In turn, that causes the operations in the `C.testXxx()` be split in to two `transactionManager` instances, one from `AnnotationTransactionAspect` and the other from `ApplicationContext`. Therefore, the DB result verification fails.  ## Proposed Solution  To create one Aspect instance per `ApplicationContext`, not per class loader. Not sure if that's achievable though.  ## Further Resources  - [Spring Test Context Caching + AspectJ @Transactional + Ehcache pain](http://www.javacodegeeks.com/2014/04/spring-test-context-caching-aspectj-transactional-ehcache-pain.html) blog by Java Code Geeks  ## Related Issues  - #11897 - #17123 - #10789 - #12619  ---  **Affects:** 2.5.6, 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=79949  5 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2009-11-13T07:16:57Z","2022-03-20T13:30:16Z"
"","10915","Multipart Content-Type charset is ignored in CommonsFileUploadSupport. [SPR-6247]","**[John Roche](https://jira.spring.io/secure/ViewProfile.jspa?name=johnro76)** opened **[SPR-6247](https://jira.spring.io/browse/SPR-6247?redirect=false)** and commented  value = fileItem.getString in parseFileItems in CommonsFileUploadSupport does not pass the correct encoding  value = fileItem.getString(encoding); and value = fileItem.getString();  This uses the encoding of the request (or the default) and does not read the charset from the Content-Type line in the multipart part.  This means you cannot send a multipart POST with different encodings for different parts/parameters.  Patch attached.   ---  **Affects:** 2.0.9, 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1  **Attachments:** - [SPR-6247.patch](https://jira.spring.io/secure/attachment/15820/SPR-6247.patch) (_2.76 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0893c425e2e19a37872e8ccf9c1c6e0fec0f9a5","closed","type: bug,","spring-projects-issues","2009-10-16T03:45:50Z","2012-06-19T03:43:51Z"
"","10965","Support for @ModelAttribute interdependency [SPR-6299]","**[John Glynn](https://jira.spring.io/secure/ViewProfile.jspa?name=jglynn)** opened **[SPR-6299](https://jira.spring.io/browse/SPR-6299?redirect=false)** and commented  A common requirement is that a `@ModelAttribute` annotated method be dependent upon another.  ie.  ```java @ModelAttribute(""foo"") public Object getFoo() {     ... }  @ModelAttribute(""bar"") public Object getBar(@ModelAttribute(""foo"") Object foo) {   if( some condition of foo ){     do stuff   } } ```  ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=263603#post263603  **Issue Links:** - #14555 `@ModelAttribute` usage, can prevent `@ModelAttribute` initialization of dependent. (_**""is duplicated by""**_) - #15939 `@ModelAttribute` parameter dependency issue. (_**""is duplicated by""**_) - #15541 `@ModelAttribute` allowed on attribute in `@ModelAttribute` annoted method (_**""is duplicated by""**_) - #10365 Allow an `@ModelAttribute` method to be invoked after the `@RequestMapping` method - #18269 Portlet MVC `@ModelAttribute` interdependency is still not supported  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/56a82c1cbe8276408f9fff06cfb1ac9da7961a80  27 votes, 32 watchers","closed","has: votes-jira,","spring-projects-issues","2009-11-04T01:12:45Z","2019-01-13T07:57:31Z"
"","11298","Incorrect method signature in the first code snippet in section 3.11.1 of the spring documentation [SPR-6632]","**[John Emmanuel](https://jira.spring.io/secure/ViewProfile.jspa?name=johnemmanuel)** opened **[SPR-6632](https://jira.spring.io/browse/SPR-6632?redirect=false)** and commented  The first code snippet in section 3.11.1 of the spring documentation is as follows:  `@Configuration` public class AppConfig { `@Bean` public void MyService myService() { return new MyServiceImpl(); } }  The method signature of the myService is incorrect. It should be  public MyService myService()...  Note: I did not check the forums to see if this issue has already been resolved. If already resolved I am sorry for creating this issue.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11303 Error in JavaConfig sample code (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2010-01-01T18:29:49Z","2019-01-12T16:49:50Z"
"","10930","map property value allows only 16 elements in certain cases [SPR-6262]","**[John Cutterman](https://jira.spring.io/secure/ViewProfile.jspa?name=johnc)** opened **[SPR-6262](https://jira.spring.io/browse/SPR-6262?redirect=false)** and commented  In a spring-managed bean I have field of type Map, where Status is an enum and Action decends object. Neither classes have any annotations. The app context file has: \ \ \ \ \  \ \ \ ... 20 entries \ the resulting bean's property map has only first 16 entries. Btw, the default size for HashMap class in sun jdk1.5 is 16. From what I understand you then create an ArrayList for the property with this size, populate the array with values from the context file, observing the size limit and then convert it back to map.   ---  **Affects:** 2.5.3","closed","in: core,","spring-projects-issues","2009-10-22T03:41:30Z","2019-01-11T15:12:02Z"
"","11056","AbstractJasperReportsView doc is out of date [SPR-6390]","**[Johannes Scharf](https://jira.spring.io/secure/ViewProfile.jspa?name=scharfj)** opened **[SPR-6390](https://jira.spring.io/browse/SPR-6390?redirect=false)** and commented  We use DynamicJasper to render reports with dynamic columns. For that reason I had to write a subclass of AbstractJasperReportsView and overwrite the fillReport method. Inside fillReport I call getReportData to obtain a JRDataSource.  The javadoc of getReportData says: The default implementation checks for a model object under the specified ""reportDataKey"" first, then falls back to looking for a value of type JRDataSource, java.util.Collection, object array (in that order).  But the method NEVER looks for the JRDataSource under the ""reportDataKey"". Instead this lookup is done in the ""fillReport"" method, which's javadoc seems also to be out of date.  This is very annoying, although not critical. I had to crawl into the code to figure out why getReportData always returned null.   ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/856fefeaad8be5c456c1c517252c86408e5f9bf2","closed","type: bug,","spring-projects-issues","2009-11-18T23:38:47Z","2012-06-19T03:43:16Z"
"","11540","UriTemplate and restTemplate don't url encode the at-sign (@) [SPR-6874]","**[Johan Bucht](https://jira.spring.io/secure/ViewProfile.jspa?name=bucht)** opened **[SPR-6874](https://jira.spring.io/browse/SPR-6874?redirect=false)** and commented  Trying to pass in a request parameter containing an email-address doesn't work correctly as the at-sign isn't correctly encoded to %40.  Example:  ``` Map params = new HashMap(); params.put(""email"", ""a@b.c""); 		 UriTemplate template = new UriTemplate(""/app/search?email={email}""); URI url = template.expand(params); System.out.println(url.toString()); ```  Results in ""/app/search?email=a@b.c"" instead of the expected ""/app/search?email=a%40b.c""  This means that everything before the '@' is interpreted as username/password and everything after as the host to connect to.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11520 UriTemplate.expand() fails when value contains $  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d207c2294dd51c7d54234718f77a8226a624acad","closed","type: bug,","spring-projects-issues","2010-02-19T00:37:23Z","2019-01-11T17:00:25Z"
"","11300","Make CompletionService(s) work with TaskSchedulers [SPR-6634]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-6634](https://jira.spring.io/browse/SPR-6634?redirect=false)** and commented  This could be solved by using a simple decorator like so:  ``` public class CompletionServiceTaskSchedulerDecorator implements CompletionService, TaskScheduler {      private CompletionService completionService;      private Executor executor;     private TaskScheduler taskScheduler;      @PostConstruct     public void initializeCompletionService() {         completionService = new ExecutorCompletionService(executor);     }      @Required     public  void setTaskScheduler(T taskScheduler) {         this.executor = taskScheduler;         this.taskScheduler = taskScheduler;     }      public Future submit(Callable task) {         return completionService.submit(task);     }      public Future submit(Runnable task, T result) {         return completionService.submit(task, result);     }      public Future take() throws InterruptedException {         return completionService.take();     }      public Future poll() {         return completionService.poll();     }      public Future poll(long timeout, TimeUnit unit) throws InterruptedException {         return completionService.poll(timeout, unit);     }      public ScheduledFuture schedule(Runnable runnable, Trigger trigger) {         return taskScheduler.schedule(delegate(runnable), trigger);     }      public ScheduledFuture schedule(Runnable runnable, Date date) {         return taskScheduler.schedule(delegate(runnable), date);     }      public ScheduledFuture scheduleAtFixedRate(Runnable runnable, Date date, long l) {         return taskScheduler.scheduleAtFixedRate(delegate(runnable), date, l);     }      public ScheduledFuture scheduleAtFixedRate(Runnable runnable, long l) {         return taskScheduler.scheduleAtFixedRate(delegate(runnable), l);     }      public ScheduledFuture scheduleWithFixedDelay(Runnable runnable, Date date, long l) {         return taskScheduler.scheduleWithFixedDelay(delegate(runnable), date, l);     }      public ScheduledFuture scheduleWithFixedDelay(Runnable runnable, long l) {         return taskScheduler.scheduleWithFixedDelay(delegate(runnable), l);     }      protected Runnable delegate(final Runnable runnable) {          return new Runnable() {              @SuppressWarnings({""unchecked""})             public void run() {                 completionService.submit(runnable, null);             }          };      }  } ```  The dual use of the class as TaskScheduler and CompletionService is due to the chicken/egg problem of the latter requiring an Executor instance during construction. This could probably solved in a more obvious way but the one presented here works. One could use it in an application context like this:  ```xml    	     	         	         		         	 	 	  ```    ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-01-03T23:28:40Z","2015-09-22T17:34:32Z"
"","11299","Override SimpleTriggerContext's toString() method with sensible defaults [SPR-6633]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-6633](https://jira.spring.io/browse/SPR-6633?redirect=false)** and commented   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-01-03T23:11:31Z","2018-12-28T11:59:35Z"
"","11164","Make @Resource work for FactoryBean products [SPR-6498]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-6498](https://jira.spring.io/browse/SPR-6498?redirect=false)** and commented  My standard pattern for accessing annotated beans is using `@Resource` like this: define a static constant using a convention and use this name when declaring the resource and when referring to this resource. This pattern does not work with the product of FactoryBean instances, presumably because FactoryBeans are treated different that regular beans. An illustration:  ```java @Component public class Foo {      private String bar;      @Resource(name = BarFactory.BAR_RESOURCE)     public void setBar(String bar) {         this.bar = bar;     }      }  @Resource(name = BarFactory.BAR_RESOURCE) public class BarFactory implements FactoryBean {      public static final String BAR_RESOURCE = ""bar"";      public Object getObject() throws Exception {         return ""Hello Foo"";     }      public Class getObjectType() {         return String.class;     }      public boolean isSingleton() {         return true;     }  } ```  This will result in a 'org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'bar' is defined'. Is this by design or can we make `@Resource` work with FactoryBean products?   ---  **Affects:** 3.0 RC2","closed","type: enhancement,","spring-projects-issues","2009-12-02T06:09:29Z","2009-12-04T03:41:08Z"
"","11106","Merge JdbcTemplate and SimpleJdbcTemplate, deprecate SimpleJdbcTemplate [SPR-6440]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-6440](https://jira.spring.io/browse/SPR-6440?redirect=false)** and commented  Now that RowMapper offers parameterized types can we please abandon SimpleJdbcTemplate? It still lacks some functionality (e.g. fetch size) over JdbcTemplate so sometimes both are used.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11587 Deprecate SimpleJdbcTemplate in favor of JdbcTemplate (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-11-24T20:08:41Z","2019-01-11T15:32:07Z"
"","10992","Iterable support for large concurrent datasets [SPR-6326]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-6326](https://jira.spring.io/browse/SPR-6326?redirect=false)** and commented  I am using an abstraction to support the iteration over large data sets using Spring DA. It consists out of:  * A row mapper which wraps results in an immutable value object which denotes a value as value, error or last. This row mapper puts results into a blocking queue. * A blocking iterable which consumes from a blocking queue, either yields a value on it's iterators next(), returns false for hasNext() or throws an error if a throwable is wrapped. * A ParameterizedRowMapper compatible interface for the generation of values / row.  This could make a useful addition to the already existing query options for SimpleJdbcTemplate if there is no use case for Spring Batch and a decoupling of row production and consumption is desired and/or the handling of large result sets via a lazy iterator is convenient.  Support for multiple consumers could easily be added.  There are no dependencies (except a very replaceable on for Google Collections) other than SE 5+. If there is any interest in this I can either elaborate of prepare a patch.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-10T05:15:18Z","2012-06-19T09:36:16Z"
"","10880","StoredProcedure#execute and JdbcOperations#call return type generic parameter too restrictive [SPR-6212]","**[Joe Kearney](https://jira.spring.io/secure/ViewProfile.jspa?name=joekearney)** opened **[SPR-6212](https://jira.spring.io/browse/SPR-6212?redirect=false)** and commented  The current signature is  ``` public Map execute(Map inParams) ```  This prevents subclasses from narrowing the Map value type to be more specific. The suggested correction is:  ``` public Map execute(Map inParams) ```  For existing methods, the values will still be retrieved as `Object` s but the method can now be overridden to return, for example, `Map`. This change would mean that clients of the API can no longer insert anything into the Map, but do we expect that to happen anyway? I doubt it, but I suppose it's possible.  This would extend through to `JdbcOperations#call` as well, maybe some other places.   ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-10-09T04:28:39Z","2012-06-19T02:28:16Z"
"","10901","AbstractAutoProxyCreator.predictBeanType is unable to deal with introductions [SPR-6233]","**[Joe blog](https://jira.spring.io/secure/ViewProfile.jspa?name=symfrog)** opened **[SPR-6233](https://jira.spring.io/browse/SPR-6233?redirect=false)** and commented  I am using a DefaultAdvisorAutoProxyCreator to automatically introduce an interface on select beans using a DefaultIntroductionAdvisor. This works fine and correctly introduces the interface (IntroducedInterface.class) and creates the proxy.  The problem is that when DefaultListableBeanFactory.getBeanNamesForType(IntroducedInterface.class) is called an empty string[] is returned. I remotely debugged tomcat and it looks like there may be a bug in AbstractAutowireCapableBeanFactory.predictBeanType(). The method getBeanNamesForType() delegates to this method to seemingly attempt to predict what class a specific bean would be after all post processors have been applied.  Here is the code snippet from AbstractAutowireCapableBeanFactory.predictBeanType:  ``` protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class[] typesToMatch) { 		Class beanClass = null; 		if (mbd.getFactoryMethodName() != null) { 			beanClass = getTypeForFactoryMethod(beanName, mbd, typesToMatch); 		} 		else { 			beanClass = resolveBeanClass(mbd, beanName, typesToMatch);  		// Apply SmartInstantiationAwareBeanPostProcessors to predict the 		// eventual type after a before-instantiation shortcut. 		if (beanClass != null && !mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) { 			for (Iterator it = getBeanPostProcessors().iterator(); it.hasNext(); ) { 				BeanPostProcessor bp = (BeanPostProcessor) it.next(); 				if (bp instanceof SmartInstantiationAwareBeanPostProcessor) { 					SmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp; 					Class processedType = ibp.predictBeanType(beanClass, beanName); 					if (processedType != null) { 						return processedType; 					} 				} 			} 		} 		return beanClass; 	} ```  And here is the snippet from AbstractAutoProxyCreator:  ``` public Class predictBeanType(Class beanClass, String beanName) { 		Object cacheKey = getCacheKey(beanClass, beanName); 		return (Class) this.proxyTypes.get(cacheKey); 	} ```  The only place a key is ever added to proxyTypes is in AbstractAutoProxyCreator.postProcessBeforeInstantiation:  ``` public Object postProcessBeforeInstantiation(Class beanClass, String beanName) throws BeansException { 		Object cacheKey = getCacheKey(beanClass, beanName);  		if (!this.targetSourcedBeans.contains(cacheKey)) { 			if (this.advisedBeans.contains(cacheKey) || this.nonAdvisedBeans.contains(cacheKey)) { 				return null; 			} 			if (isInfrastructureClass(beanClass, beanName) || shouldSkip(beanClass, beanName)) { 				this.nonAdvisedBeans.add(cacheKey); 				return null; 			} 		}  		// Create proxy here if we have a custom TargetSource. 		// Suppresses unnecessary default instantiation of the target bean: 		// The TargetSource will handle target instances in a custom fashion. 		TargetSource targetSource = getCustomTargetSource(beanClass, beanName); 		if (targetSource != null) { 			this.targetSourcedBeans.add(beanName); 			Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource); 			Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource); 			[B]this.proxyTypes.put(cacheKey, proxy.getClass());[/B] 			return proxy; 		}  		return null; 	} ```  This means that beans would never have its final class predicted correctly unless it is already instantiated! This means that only beans instantiated prior to a bean that calls getBeanNamesForType() would be returned correctly. Does this make this whole process useless?  Also if you look at AbstractAutowireCapableBeanFactory.predictBeanType if any of the SmartInstantiationAwareBeanPostProcessors returns a non null value all other post processors that may have affected the class type (introduced interfaces, replaced with instance of different class etc.) would not have had a chance (the method does not consider order), again leading to incorrect results.  This seems to be a bug.  This also prevents MBeanExporter from being able to export beans based on interfaces that were introduced on beans.  I am using spring 2.5.6.   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-10-13T16:22:08Z","2019-01-12T16:38:57Z"
"","11289","WebUtils tries to set internal attributes [SPR-6623]","**[Joakim Recht](https://jira.spring.io/secure/ViewProfile.jspa?name=recht)** opened **[SPR-6623](https://jira.spring.io/browse/SPR-6623?redirect=false)** and commented  Some application servers (in this case Trifork T4) does not allow calls to HttpServletRequest.setAttribute with internal attribute names (such as javax.servlet.forward.query_string), as it is supposed to be read-only. The spec isn't completely clear on how the standard attributes should be handled, but the javadoc does say that javax.* and others are reserved.  The problem occurs when using Tiles 2:  Caused by: java.lang.IllegalArgumentException: javax.servlet.forward.query_string is a readonly attribute at com.trifork.eas.web.container.t.setAttribute(\:121) at org.springframework.web.util.WebUtils.exposeRequestAttributeIfNotPresent(WebUtils.java:438) at org.springframework.web.util.WebUtils.exposeForwardRequestAttributes(WebUtils.java:400) at org.springframework.web.servlet.view.tiles2.TilesView.renderMergedOutputModel(TilesView.java:96) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1060) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:798) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647)  In this case, a workaround could also be to check in exposeRequestAttributeIfNotPresent if the value to be set is also null, in which case the setAttribute call would not be necessary in any case.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/8c2d45bdcf698ae9072f4213fe72d0bf8ad6bb8f","closed","type: bug,","spring-projects-issues","2009-12-28T23:08:35Z","2012-06-19T03:42:59Z"
"","11579","WebApplicationObject.initServletContext() invoked twice [SPR-6914]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-6914](https://jira.spring.io/browse/SPR-6914?redirect=false)** and commented  WebApplicationObject.initServletContext() is invoked twice during a typical initialization cycle, once from setServletContext(), and another from initApplicationContext(). This could cause problems if a subclass's overriding method does something that has side-effects.   ---  **Affects:** 2.5.6, 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57993d871ea137247004c68780f52dbe6dae7df2","closed","type: bug,","spring-projects-issues","2010-02-27T05:10:12Z","2012-06-19T03:43:37Z"
"","11256","SpEL #map.$[...] expression returns wrong result [SPR-6590]","**[Jevgeni](https://jira.spring.io/secure/ViewProfile.jspa?name=boban2003@hot.ee)** opened **[SPR-6590](https://jira.spring.io/browse/SPR-6590?redirect=false)** and commented  The version: _spring-framework-3.0.0.RELEASE_  The code:  ``` import org.springframework.expression.EvaluationContext; import org.springframework.expression.ExpressionParser; import org.springframework.expression.spel.standard.SpelExpressionParser; import org.springframework.expression.spel.support.StandardEvaluationContext;  import java.util.HashMap; import java.util.Map;  public class SpelMain {    public static void main(String[] args) {     Map stringIntegerMap = new HashMap();     stringIntegerMap.put(""one"", 1);     stringIntegerMap.put(""two"", 2);     stringIntegerMap.put(""three"", 3);     stringIntegerMap.put(""tooMany"", 30);      EvaluationContext evaluationContext = new StandardEvaluationContext();     evaluationContext.setVariable(""map"", stringIntegerMap);      ExpressionParser expressionParser = new SpelExpressionParser();     Map resultStringIntegerMap = expressionParser.parseExpression(""#map.$[value","closed","in: core,","spring-projects-issues","2009-12-19T05:02:38Z","2019-01-11T15:24:54Z"
"","11808","Portlet AnnotationMethodHandlerAdapter sets a render request parameter with a framework package name [SPR-7149]","**[Jethro Bakker](https://jira.spring.io/secure/ViewProfile.jspa?name=jethrobakker)** opened **[SPR-7149](https://jira.spring.io/browse/SPR-7149?redirect=false)** and commented  The AnnotationMethodHandlerAdapter contains a private static variable: IMPLICIT_MODEL_ATTRIBUTE with the value: org.springframework.web.portlet.mvc.ImplicitModel. However this value is not configurable. So information of the frameworks we are using is leaking via the URL of our application.  I created an aspect which wraps the RenderRequest and ActionResponse with a proxy to overcome this problem, but I think this parameter should be made configurable.  ---  **Affects:** 2.5.6  **Issue Links:** - #10794 Clarify the meaning of SessionStatus.setComplete() in a Portlet environment  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f4453a99c904f820c72478b902a62d3a670bbee","closed","type: enhancement,","spring-projects-issues","2010-04-28T20:17:54Z","2019-01-11T13:09:49Z"
"","11262","Parameterized ApplicationListener does not work with AOP proxies [SPR-6596]","**[Jerry Carter](https://jira.spring.io/secure/ViewProfile.jspa?name=jerry@jerrycarter.org)** opened **[SPR-6596](https://jira.spring.io/browse/SPR-6596?redirect=false)** and commented  The documentation for 3.0 does not illustrate a parameterized 'ApplicationListener'.  Assuming that the 2.5.x method applies, we find that events are not filtered prior to invoking the ApplicationListener and that, as a result, parameterized listeners cannot be used in 3.0.0.  The ApplicationListener bean is registered in the applicationContext.xml as per usual:        The code established the appropriate callback:      public class SessionEventListener implements ApplicationListener {         public void onApplicationEvent(AbstractAuthenticationEvent authEvent) {             ...         }     }  But the events are not properly converted.  java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:308) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:333) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:220) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:301) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:303) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: java.lang.ClassCastException: org.springframework.context.event.ContextRefreshedEvent cannot be cast to org.springframework.security.event.authentication.AbstractAuthenticationEvent at org.example.SessionEventListener.onApplicationEvent(SessionEventListener.java:29) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:107) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy32.onApplicationEvent(Unknown Source) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:294) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:858) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:419) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) ... 24 more  ---  **Affects:** 3.0 GA  **Issue Links:** - #11337 ClassCastException on EventListener invocation when proxies come into play (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2009-12-21T06:20:27Z","2019-01-11T15:24:27Z"
"","11640","JPA 2.0 support not enabled for OpenJPA (and others?) [SPR-6975]","**[Jerry Carter](https://jira.spring.io/secure/ViewProfile.jspa?name=jcarter)** opened **[SPR-6975](https://jira.spring.io/browse/SPR-6975?redirect=false)** and commented  The SpringPersistenceUnitInfo property 'persistenceXMLSchemaVersion' defaults to 1.0 and is never changed.  This is a MAJOR headache for ORMs which use the version information to adjust their behavior.  The bug appears to be in org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.  The version attribute is not used when the document is read to set the value in the SpringPersistenceUnitInfo instances.   ---  **Affects:** 3.0.1  **Attachments:** - [PersistenceUnitReader.java](https://jira.spring.io/secure/attachment/16279/PersistenceUnitReader.java) (_12.25 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7da13e7ad1867b8ccf7947671cfb3e090654aa85","closed","in: core,","spring-projects-issues","2010-03-11T12:31:39Z","2012-06-19T03:42:48Z"
"","11006","Add coverage of JSON support to reference guide [SPR-6340]","**[Jeremy Grelle](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremyg484)** opened **[SPR-6340](https://jira.spring.io/browse/SPR-6340?redirect=false)** and commented  There is currently no coverage of the JSON support in the reference guide.  Some basic details should be provided to cover: - MappingJacksonJsonView for rendering JSON representation of model - How to configure the MappingJacksonJsonView with the ContentNegotiatingViewResolver - MappingJacksonHttpMessageConverter    ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e8845c7ead81a0ff7ac0e1fce583fc188025fbbd","closed","type: documentation,","spring-projects-issues","2009-11-12T12:03:19Z","2012-06-19T03:43:06Z"
"","11329","@Scheduled tasks scheduled multiple times when a child application context is refreshed [SPR-6663]","**[Jennifer Hickey](https://jira.spring.io/secure/ViewProfile.jspa?name=jencompgeek)** opened **[SPR-6663](https://jira.spring.io/browse/SPR-6663?redirect=false)** and commented  Just switched to the new `@Scheduled`, configured only with the default .  I noticed that my `@Scheduled` task was being executed more frequently than expected. I have Spring/Struts integration that creates a child web app context on init of ActionServlet.  Looks like when the child app context is created, an event is published to the parent root WAC.  This event causes the ScheduledAnnotationBeanPostProcessor in the root WAC to execute ScheduledTaskRegistrar.afterPropertiesSet again, which schedules all tasks again.  So I end up with the same task scheduled to execute at a fixed rate twice.  Stack trace on init of the Struts ActionServlet: ScheduledTaskRegistrar.afterPropertiesSet() line: 107	 ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ContextRefreshedEvent) line: 135	 ScheduledAnnotationBeanPostProcessor.onApplicationEvent(ApplicationEvent) line: 1	 SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent) line: 97	 XmlWebApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 294	 XmlWebApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 296	 XmlWebApplicationContext(AbstractApplicationContext).finishRefresh() line: 858	 XmlWebApplicationContext(AbstractApplicationContext).refresh() line: 419	 ContextLoaderPlugIn.createWebApplicationContext(WebApplicationContext) line: 356	 ContextLoaderPlugIn.initWebApplicationContext() line: 297	 ContextLoaderPlugIn.init(ActionServlet, ModuleConfig) line: 227	 ActionServlet.initModulePlugIns(ModuleConfig) line: 871	 ActionServlet.init() line: 359	 ActionServlet(GenericServlet).init(ServletConfig) line: 212  ---  **Affects:** 3.0 GA  **Issue Links:** - #11322 ScheduledAnnotationBeanPostProcessor registers schedules twice in web application (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2010-01-08T09:51:54Z","2019-01-12T16:49:48Z"
"","11206","FactoryBeans returning a @ManagedResource annotated subclass are not auto detected by MBeanExporter [SPR-6540]","**[Jeffrey Sinclair](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffrey.sinclair)** opened **[SPR-6540](https://jira.spring.io/browse/SPR-6540?redirect=false)** and commented  Take the following application context:  ```                             ```  with CustomerFactory being defined as:  ``` public class CustomerFactory implements FactoryBean {      private String name;      @Override     public Customer getObject() throws Exception {         return new DefaultCustomer(this.name);     }      @Override     public Class","closed","in: core,","spring-projects-issues","2009-12-09T23:45:31Z","2019-01-12T16:38:37Z"
"","11129","Named constructor args cannot be overridden by child bean definitions [SPR-6463]","**[Jeffrey Sinclair](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffrey.sinclair)** opened **[SPR-6463](https://jira.spring.io/browse/SPR-6463?redirect=false)** and commented  When I try to override a constructor arg by name in a child bean definition an exception arises which does not arise when I override the constructor arg by index.  I could be mistaken but I see this as a bug because if I can inherit by name and override by index, then I should also be able to override by name.  Specifically I've created an abstract bean definition as follows:  ```           ```  I've then tried to create a concrete bean definition by overriding the named constructor arg:  ```                 ```  This throws the following exception:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException:  Error creating bean with name 'concretePerson' defined in class path resource [test/spring/applicationContext.xml]:  2 constructor arguments specified but no matching constructor found in bean 'concretePerson'  (hint:specify index/type/name arguments for simple parameters to avoid type ambiguities)         at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:171)         ...         at test.spring.Main.main(Main.java:9)    ```  ---  **Affects:** 3.0 RC2  **Issue Links:** - #10181 Bean Configuration Overriding - #12101 Document constructor-arg 'name' attribute  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/666700f7f3816c39d5929e5c503393af9eaf1121","closed","in: core,","spring-projects-issues","2009-11-27T06:33:01Z","2019-01-11T15:38:25Z"
"","11745","AnnotationMethodHandlerExceptionResolver incorrectly resolving exceptions [SPR-7085]","**[Jeff T](https://jira.spring.io/secure/ViewProfile.jspa?name=jeff_t)** opened **[SPR-7085](https://jira.spring.io/browse/SPR-7085?redirect=false)** and commented  I have a controller class with the following exception handler methods:  Code:  `@ExceptionHandler`({PropertyAccessException.class}) `@ResponseStatus`(HttpStatus.BAD_REQUEST) public ModelAndView handlePropertyAccessException(PropertyAccessException ex) { // create modelAndView and process ex return modelAndView; }  `@ExceptionHandler`({Exception.class}) `@ResponseStatus`(HttpStatus.INTERNAL_SERVER_ERROR) public ModelAndView handleException(Exception ex) { // create modelAndView and process ex return modelAndView; }  When a ConversionNotSupportedException (subclass of PropertyAccessException) is thrown, the handleException() method is called instead of the expected handlePropertyAccessException() method.  Digging into the AnnotationMethodHandlerExceptionResolver class I find the following private Comparator. This comparator returns 0 when o1 is Exception, o2 is PropertyAccessException, and handlerExceptionType is ConversionNotSupportedException. This is incorrect and the cause of the problem.  Code:  /** Comparator capable of sorting exceptions based on their depth from the thrown exception type. */ private static class DepthComparator implements Comparator","closed","type: bug,","spring-projects-issues","2010-04-09T08:25:00Z","2012-06-19T03:43:58Z"
"","11702","form:select 3.0.1 regression bug when binding to a map [SPR-7040]","**[Jeff Johnston](https://jira.spring.io/secure/ViewProfile.jspa?name=jeff.johnston.mn)** opened **[SPR-7040](https://jira.spring.io/browse/SPR-7040?redirect=false)** and commented  I found a bug that surfaced in Spring 3.0.1. The problem is with binding a value to a map with the form select tag.  In my JSP I have the following select tag. This will bind to a Map field in my command object.    If I do a view source I can clearly see the problem.  In Spring 3.0 I have this:  \\Cherry\\Walnut\\  In Spring 3.0.1 I have this:  \\Cherry\\Walnut\\  Notice how the name is ""questionsARTISAN_ARMOIRE_WOOD"" instead of ""questions[ARTISAN_ARMOIRE_WOOD]"". The brackets got dropped in 3.0.1.  ---  **Affects:** 3.0.1  **Issue Links:** - #11537 Spring MVC regression: binding to indexed properties is broken (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2010-03-26T04:27:59Z","2019-01-12T16:49:39Z"
"","11783","Migrate Grails BeanBuilder into Spring Core [SPR-7123]","**[Jeff Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=jbrown)** opened **[SPR-7123](https://jira.spring.io/browse/SPR-7123?redirect=false)** and commented  The Spring Bean Builder has been extracted from Grails and is being prepared for inclusion in Spring.  Much of the development work on the builder itself is done.  Work needs to be done to integrate the code into the core spring build.   ---  1 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-22T07:07:52Z","2013-10-31T12:28:04Z"
"","11582","autowire byType uses parameter name info if compile with debug info [SPR-6917]","**[Jeanne Boyarsky](https://jira.spring.io/secure/ViewProfile.jspa?name=boyarsky)** opened **[SPR-6917](https://jira.spring.io/browse/SPR-6917?redirect=false)** and commented  The following throws the expected exception (two beans defined of type Parent) if you compile without debug info enabled.  If you compile with debug info enabled, it picks up on mother from the parameter in the method signature.  This looks like a side effect of something as the documentation doesn't suggest parameter names are used for anything.  It's a little scary that the program would behave differently in a pre-production environment (with debug info) than production (without). public void setMother(example.Parent mother);  This is discussed in a bit more detail (and confirmed reproducible) in the Spring Forum Reference.  ---  code  \ \ \ \ \ \ \  package example;  public class Child {      private example.Parent mother;          public example.Parent getMother() {     	return mother;     }          public void setMother(example.Parent mother) {     	this.mother = mother;     }  }  package example;  public class Parent {      private String name;          public String getName() {     	return name;     }          public void setName(String name) {     	this.name = name;     }  }  ---  **Affects:** 3.0 GA, 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=85265","closed","in: core,","spring-projects-issues","2010-02-28T10:21:25Z","2019-01-13T21:46:50Z"
"","11615","Conversion creates collection with invalid elements for @Controller bind target [SPR-6950]","**[Jean-Pierre Bergamin](https://jira.spring.io/secure/ViewProfile.jspa?name=ractive)** opened **[SPR-6950](https://jira.spring.io/browse/SPR-6950?redirect=false)** and commented  See the referenced forum post for complete code coverage and log output.  In short. Having two entities and a controller:  ```java @Entity public class Child {   // ... }  @Entity public class Parent {   @ManyToMany(cascade = CascadeType.ALL)   public Set children = new HashSet();   // ... }  @RequestMapping(method = RequestMethod.PUT) public String update(@Valid Parent parent, BindingResult result, ModelMap modelMap) {   for(Child child : parent.getChildren()) { // ! this throws        } } ```  The Parent class has no static method findParent(Long id) that the IdToEntityConverter could use to convert a string to a Child entity. So the conversion service tries its best to convert the info in the http request back into the HashSet ""children"", but inserts wrong elements into this collection. The result of the children collection is:  ``` children = {   new HashSet {     ""selectedId"",     ""otherSelectedId""   } } ```  So instead of putting a Child entitiy with a given id into the set, the conversion service put another hashset with a string element into it. This leads to very, very confusing (hibernate) exceptions when trying to persist the resulting entity again (https://forum.hibernate.org/viewtopic.php?f=1&t=1003029).   ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?p=287402  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d50881d82b8f2ed8e0947cdffe0e4f74fd3a53dd, https://github.com/spring-projects/spring-framework/commit/cbed1c1b4b5fd74c9cd201890f619a7079804d3f","closed","in: core,","spring-projects-issues","2010-03-04T18:33:45Z","2012-06-19T03:43:40Z"
"","11805","AppEngine : bug with SimpleClientHttpResponse.getHeaders [SPR-7146]","**[Jean-Francois L.](https://jira.spring.io/secure/ViewProfile.jspa?name=arutha)** opened **[SPR-7146](https://jira.spring.io/browse/SPR-7146?redirect=false)** and commented  Hi,  I'm trying to use `@ResponseBody` with Spring 3.0.2 on AppEngine I got a RestClientException(""Cannot extract response: no Content-Type found"") : from HttpMessageConverterExtractor (line 66) :  ``` MediaType contentType = response.getHeaders().getContentType(); if (contentType == null) {      throw new RestClientException(""Cannot extract response: no Content-Type found""); } ```  The problem comes from response.getHeaders() : the field 0 is ignored, but with AppEngine, field 0 IS Content-Type AppEngine uses com.google.apphosting.utils.security.urlfetch.URLFetchServiceStreamHandler$Connection as HttpURLConnection  ``` // Header field 0 is the status line, so we start at 1 int i = 1; while (true) {      String name = this.connection.getHeaderFieldKey(i);      if (!StringUtils.hasLength(name)) {               break;      }      this.headers.add(name, this.connection.getHeaderField(i));      i++; } ```  Sorry for my poor english...  Thank you for your help   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f8a05da1c94219f278c960aa86c53bc7e7ebbd94","closed","type: bug,","spring-projects-issues","2010-04-28T06:37:51Z","2012-06-19T03:43:09Z"
"","10944","RmiServiceExporter fails to export a UnicastRemoteObject [SPR-6277]","**[Jean Hominal](https://jira.spring.io/secure/ViewProfile.jspa?name=jhominal)** opened **[SPR-6277](https://jira.spring.io/browse/SPR-6277?redirect=false)** and commented  When setting a org.springframework.remoting.rmi.RmiServiceExporter with a bean that extends java.rmi.server.UnicastRemoteObject, the invocation fails (with an exception saying that the object is already exported via RMI).  The problem comes from the UnicastRemoteObject constructor that automatically exports the bean, by default on port 0 (and the nature of UnicastRemoteObject forbids an instance to be exported more than once).  There are two possible workarounds for that in the forum reference, but they both boil down to a simple thing: calling the UnicastRemoteObject.unexportObject(Remote, boolean) on the bean before attempting to export it with the parameters from Spring.  For a true fix, I would put the additional lines in the RmiServiceExporter.prepare() method.  I don't believe it would be useful to add a configuration parameter for that.  Here is a basic testcase that should trigger the bug on Spring 2.5.6:  The java class:  package testcase;  import java.rmi.RemoteException; import java.rmi.server.UnicastRemoteObject;  public class BasicUnicastRemoteObject extends UnicastRemoteObject { protected BasicUnicastRemoteObject() throws RemoteException { super(); } }  Beans configuration:  \ \ \ \ \ \   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=266531#post266531","closed","status: declined,","spring-projects-issues","2009-10-26T23:36:08Z","2019-01-12T16:38:54Z"
"","11055","Add logging before rollback transaction [SPR-6389]","**[java2enterprise](https://jira.spring.io/secure/ViewProfile.jspa?name=java2enterprise)** opened **[SPR-6389](https://jira.spring.io/browse/SPR-6389?redirect=false)** and commented  In TransactionAspectSupport#completeTransactionAfterThrowing(TransactionInfo, Throwable) method,  if a transaction rollback successfully we won't see any log,  sometimes it's default to track the issue because it's too silent, add some log before rollback should be helpful.   ---  **Affects:** 2.5.6  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-18T21:04:21Z","2016-12-07T10:59:59Z"
"","11595","Correct Spring Download page after adding dependencies release (followup from SPR-6575) [SPR-6930]","**[Jason Lindquist](https://jira.spring.io/secure/ViewProfile.jspa?name=jason.lindquist)** opened **[SPR-6930](https://jira.spring.io/browse/SPR-6930?redirect=false)** and commented  Following #11241 a new zip file is available for download from the Spring download page: spring-framework-3.0.1.RELEASE-A-dependencies.zip  This zip file contains only dependencies whereas previous (pre-3.0) releases had a -with-dependencies zip that included dependecies and the Spring Framework jars.  The Spring download page (http://www.springsource.org/download) still states:  > For all Spring Framework releases, the basic release contains only the binaries while the -with-dependencies release contains everything the basic release contains plus all third-party dependencies, buildable source trees, and sample applications.  Please bring these two into alignment by either creating a -with-dependencies zip or by altering the text on the download page.  ---  **Affects:** 3.0.1","closed","status: invalid,","spring-projects-issues","2010-03-03T04:43:21Z","2019-01-12T05:32:24Z"
"","11361","IBM WebSphere transactions not rolling back [SPR-6695]","**[Jason Lindquist](https://jira.spring.io/secure/ViewProfile.jspa?name=jason.lindquist)** opened **[SPR-6695](https://jira.spring.io/browse/SPR-6695?redirect=false)** and commented  When using `org.springframework.transaction.jta.WebSphereUowTransactionManager` to manage transactions under WebSphere 6.1 with Spring 3.0, the transaction is not rolled back. The transaction is rolled back when using Spring 2.5.4.  The test case is an application that inserts into a database and then throws a runtime exception within the same method marked with `@Transactional`. Both Spring 2.5.4 and Spring 3.0 were tested. In both cases the logs report:  > TRACE Applying rules to determine whether transaction should rollback on java.lang.RuntimeException: Oops! - RuleBasedTransactionAttribute [RuleBasedTransactionAttribute.java:130] > TRACE Winning rollback rule is: RollbackRuleAttribute with pattern [java.lang.RuntimeException] - RuleBasedTransactionAttribute [RuleBasedTransactionAttribute.java:147]  In 2.5.4, the insert succeeds then is rolled back; in 3.0 the insert succeeds and is not rolled back.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41ecbc6814fa930a6ea68f336b5a12bc662578bb","closed","type: bug,","spring-projects-issues","2010-01-14T02:52:55Z","2012-06-19T03:44:11Z"
"","11438","JavaDoc example usage is incorrect for CronSequenceGenerator [SPR-6772]","**[Jason Dilley](https://jira.spring.io/secure/ViewProfile.jspa?name=jdilley)** opened **[SPR-6772](https://jira.spring.io/browse/SPR-6772?redirect=false)** and commented  The example verbiage below was taken from the Javadoc on CronSequenceGenerator, and it incorrectly instructs how a Cron Interval expression should be corrected.  \""0 0 8-10/30 * * *"" = 8:00, 8:30, 9:00, 9:30 and 10 o'clock every day.\  By putting the /30 in the Hours field, at runtime it adds 30 hours to 8 instead of 30 minutes.  The correct expression for this type of Interval should be:  \""0 0/30 8-10 * * *"" = 8:00, 8:30, 9:00, 9:30 and 10 o'clock every day.\ While this is only an issue with documentation, by following the documentation, I wasted a couple of hours trying to find out what I was doing wrong.  Stepping through the API showed me that the doc was incorrect.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c44f9252d9fe3fe99265f5e0db788e293550d42","closed","in: core,","spring-projects-issues","2010-01-26T04:27:33Z","2012-06-19T03:42:55Z"
"","11023","tag still allows  sub-elements [SPR-6357]","**[Jaro Kuruc](https://jira.spring.io/secure/ViewProfile.jspa?name=koxo)** opened **[SPR-6357](https://jira.spring.io/browse/SPR-6357?redirect=false)** and commented  I've noticed that \ tag still allows \ sub-elements. I believe the scripts are now specified within \ tag.   ---  **Affects:** 3.0 RC2","closed","type: enhancement,","spring-projects-issues","2009-11-14T22:28:41Z","2012-06-19T02:28:18Z"
"","11014","ResourceDatabasePopulator is too verbose when reporting ignored failures [SPR-6348]","**[Jaro Kuruc](https://jira.spring.io/secure/ViewProfile.jspa?name=koxo)** opened **[SPR-6348](https://jira.spring.io/browse/SPR-6348?redirect=false)** and commented  At the moment, ResourceDatabasePopulator would log full stacktrace for each failure in WARN level, which is way too verbose, especially when in ignore failures mode. I suggest to change this to DEBUG level.   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/efb2647978aafb85cf496dfeef7e5320d9bb6492","closed","type: enhancement,","spring-projects-issues","2009-11-13T03:45:27Z","2012-06-19T03:42:59Z"
"","11012","NoSuchMethodException in DerbyEmbeddedDatabaseConfigurer [SPR-6346]","**[Jaro Kuruc](https://jira.spring.io/secure/ViewProfile.jspa?name=koxo)** opened **[SPR-6346](https://jira.spring.io/browse/SPR-6346?redirect=false)** and commented  I am getting java.lang.NoSuchMethodException: org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer.getNoopOutputStream() when booting embedded Derby instance. It is most likely caused by package-private visibility of DerbyEmbeddedDatabaseConfigurer.getNoopOutputStream() method.   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2cb6e211611e665e6c48243364a1ba19fe411d06, https://github.com/spring-projects/spring-framework/commit/35472300aeed02b4ef744587fe61adc4d41ac92a","closed","type: bug,","spring-projects-issues","2009-11-13T03:16:38Z","2012-06-19T03:42:57Z"
"","11011","ResourceDatabasePopulator does not handle comments properly when ignoring failures [SPR-6345]","**[Jaro Kuruc](https://jira.spring.io/secure/ViewProfile.jspa?name=koxo)** opened **[SPR-6345](https://jira.spring.io/browse/SPR-6345?redirect=false)** and commented  Hi  I have a schema sql script which starts with a comment, followed by DROP and CREATE statements. I have configured DatabasePopulator to ignore DROP failures when initializing datasource.  In case of failure, ResourceDatabasePopulator tests on line 154 if statement starts with 'drop' substring and then based on ignoreFailedDrops setting ignores or rethrows the original SQLException. Because of the comment in my script, first statement starts with '-- ' substring, which then causes that the drop failure is not ignored as intended. The DatabasePopulator implementation should be fixed to handle comments better.  Thanks.   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/534f8a4705c232dbb9e64ce038b8e95d474ca2bf","closed","type: bug,","spring-projects-issues","2009-11-13T02:43:37Z","2012-06-19T03:43:53Z"
"","10905","Two or more PlatformTransactionManager cannot live together in one application [SPR-6237]","**[Jara Cesnek](https://jira.spring.io/secure/ViewProfile.jspa?name=cesnek)** opened **[SPR-6237](https://jira.spring.io/browse/SPR-6237?redirect=false)** and commented  Two or more PlatformTransactionManager cannot live together in one application, because of static reference to single TransactionSynchronizationManager.  We need in one thread access two database in the same time. For example one HibernateTransactionManager a second DataSourceTransactionManager.  All seems to working, but in the transaction end 1) HibernateTransactionManager invoke TransactionSynchronizationManager.clearSynchronization() 2) DataSourceTransactionManager throw exception java.lang.IllegalStateException: Cannot deactivate transaction synchronization - not active    ---  **Affects:** 2.5.6  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-13T22:42:17Z","2019-01-11T15:07:20Z"
"","11327","Using @Transactional in AspectJ mode with multiple application contexts [SPR-6661]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-6661](https://jira.spring.io/browse/SPR-6661?redirect=false)** and commented  Using Multiple Transaction Managers with `@Transactional` works like a charme if you only have one BeanFactory. doc reference is here: http://static.springsource.org/spring/docs/3.0.x/reference/html/transaction.html#tx-multiple-tx-mgrs-with-attransactional  but i have a projects which depends on another spring project which is integrated by starting a second  beanFactory. Each BeanFactory has its own TransactionManager (and its own SessionFactory and DataSource). Even if i annotate all `@Transactional` Annotations with a qualifier like described in the docs, it does not work.  This is because TransactionAspectSupport.determineTransactionManager(TransactionAttribute txAttr) relies on a beanFactory reference for resolving a matching transactionManager. But transactionAspectSupport is a singleton aspect. So we have two beanFactories but only one instance of TransactionAspectSupport. So when i load my second beanFactory TransactionAspectSupport.setBeanFactory is called again and the initial beanFactory reference is lost.  this could be prevented if TransactionAspectSupport has a set of beanFactories and iterating over them when searching for a matching qualifier.  BTW, i think there is an documentation bug:  it says: "" only looks for `@Transactional` on beans in the same application context it is defined in."" This is not true for mode=""aspectj"", isn't it?    ---  **Affects:** 3.0 GA  5 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2010-01-08T02:16:16Z","2016-06-02T08:46:54Z"
"","11265","Document XsltView in the reference documentation [SPR-6599]","**[Janet Moyer](https://jira.spring.io/secure/ViewProfile.jspa?name=easternwahoo)** opened **[SPR-6599](https://jira.spring.io/browse/SPR-6599?redirect=false)** and commented  AbstractXsltView has been deprecated since Spring 2.5 and is replaced by XsltView, but the reference documentation in 2.5 and 3.0 still explains how to use the deprecated class, not XsltView. There are several forum conversations asking for help in using XsltView. I would offer to document this myself, but I'm not sure how to correctly use it either :-)   ---  **Affects:** 2.5.6, 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b47504dd4abdb0d00c4596cc86107f46fcf3b82  2 votes, 1 watchers","closed","type: task,","spring-projects-issues","2009-12-22T01:15:49Z","2015-06-30T15:26:30Z"
"","11806","@Async and @Transactional annotations do not work on the same method [SPR-7147]","**[Jamie Goodfellow](https://jira.spring.io/secure/ViewProfile.jspa?name=jgoodfel)** opened **[SPR-7147](https://jira.spring.io/browse/SPR-7147?redirect=false)** and commented  The AsyncAnnotationBeanPostProcessor class is configured to put the AsyncAnnotationAdvisor last in the advisor chain.  In general this may be acceptable, but in the case of using both `@Transactional` and `@Async` on a method, this order does not work.  The transaction is started on the caller thread and does not apply to the async execution thread.  As a simple example of where this applies, consider the following interface method:  `@Async` `@Transactional`(readOnly=false, propagation=Propagation.REQUIRES_NEW) void createAuditEvent(CreateAuditEventData data);  Creation of the audit event should not block normal program flow execution, hence `@Async`.  And the method is a single DB Transaction, hence `@Transactional`.  A quick fix for this issue is to force the async advisor into position 0 in the advisor chain, or at least a position before the transaction advisor.  A more robust fix would be to allow order to be specified, similar to how order can be placed on the .  The fix would be .   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/68055ba4c9b2db737f9f4ec013d78ec0891b4dda","closed","in: core,","spring-projects-issues","2010-04-28T14:19:11Z","2017-04-02T04:43:20Z"
"","11584","WebContentInterceptor restricting HTTP request methods by default [SPR-6919]","**[Jamie Goodfellow](https://jira.spring.io/secure/ViewProfile.jspa?name=jgoodfel)** opened **[SPR-6919](https://jira.spring.io/browse/SPR-6919?redirect=false)** and commented  The WebContentInterceptor (org.springframework.web.servlet.mvc.WebContentInterceptor) uses the default super-constructor of WebContentGenerator, which configures the interceptor to only support GET, POST, and HEAD requests.  This becomes a problem when attempting to use RESTful URLs.  This interceptor should not be concerned with the request type, and should by default be configured to let all request types through.  Workaround is to explicitly set the supportedMethods to null (which the WebContentGenerator translates to 'any').  Sample workaround configuration in my  list: \ \ \\\ \   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb1c039a6ec597edff94fe501eecac08ce3cbab6","closed","type: enhancement,","spring-projects-issues","2010-03-01T06:04:35Z","2012-06-19T03:43:04Z"
"","11600","@ResponseBody with method that return void throws ""Could not resolve view exception"". [SPR-6935]","**[James King](https://jira.spring.io/secure/ViewProfile.jspa?name=james.king.zj)** opened **[SPR-6935](https://jira.spring.io/browse/SPR-6935?redirect=false)** and commented  `@RequestMapping`(""/hello.html"") `@ResponseBody` public void helloworld(){ System.out.println(""Hello World!"") }  The code above will throw ServletException, Could not resolve view with name hello.  I think a method with ResponseBody annotation should be different with a method without ResponseBody annotation. The above method should do nothing after return.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eddc5b8898851956e61b1ffaf0c6701f1b00c95c","closed","type: enhancement,","spring-projects-issues","2010-03-03T12:56:14Z","2012-06-19T03:43:03Z"
"","11691","Readonly transaction still allows for a write to happen [SPR-7029]","**[James Cook](https://jira.spring.io/secure/ViewProfile.jspa?name=jcook1000)** opened **[SPR-7029](https://jira.spring.io/browse/SPR-7029?redirect=false)** and commented  `@Transactional`(readOnly = true) public MyEntity findEntitys() { entityManager.persist(new MyEntity()); return entityManager.createNamedQuery(""myEntity.findAll"").getResultList(); }  By doing this a new record is recorded in the DB. No TX is present upon entering the code. Persistence is JPA - Hibernate: Hibernate 3.3.0.SP1 Hibernate Annotations 3.4.0.GA Hibernate Commons Annotations 3.1.0.GA Hibernate EntityManager 3.4.0.GA   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab139dffd0d8c07e84df7ccb092773eba1ca4285","closed","status: invalid,","spring-projects-issues","2010-03-24T04:45:25Z","2019-01-12T05:32:18Z"
"","11648","AOP Annotation fails [SPR-6983]","**[James Cook](https://jira.spring.io/secure/ViewProfile.jspa?name=jcook1000)** opened **[SPR-6983](https://jira.spring.io/browse/SPR-6983?redirect=false)** and commented  `@Before`(""com.xyz.lib.Pointcuts.anyPublicMethod() && `@annotation`(auditable)"")  Breaks with the following error  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.config.internalTransactionAdvisor': Cannot resolve reference to bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0' while setting bean property 'transactionAttributeSource'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: error Type referred to is not an annotation type:  However:  `@Before`(""com.xyz.lib.Pointcuts.anyPublicMethod() and `@annotation`(auditable)"")  Works.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=85616","closed","in: core,","spring-projects-issues","2010-03-15T04:24:49Z","2019-01-12T16:38:08Z"
"","11577","Long values are incorrectly stored on Oracle when using SimpleJdbcInsert, instead of SimpleJdbcTemplate [SPR-6912]","**[Jacques-Henri Berthemet](https://jira.spring.io/secure/ViewProfile.jspa?name=jhberthemet)** opened **[SPR-6912](https://jira.spring.io/browse/SPR-6912?redirect=false)** and commented  If connected database is Oracle it is not possible to accurately store long values larger than 9999999999999998 or lesser than -9999999999999998 using SimpleJdbcInsert. Inserting wider values would end in a loss of precision (9999999999999999 will be inserted as 10000000000000000).  Here a table creation script : create table Test  ( CustomerId         VARCHAR2(16) not null, Id                 NUMERIC(19), constraint PK_Test primary key (Id) );  Here is a sample Java code to reproduce the issue : DriverManagerDataSource dataSource = new DriverManagerDataSource(); dataSource.setDriverClassName(""oracle.jdbc.driver.OracleDriver""); dataSource.setUrl(""jdbc:oracle:thin:sa/sa@oracleHost:1521:XE""); dataSource.setUsername(""sa""); dataSource.setPassword(""sa"");          SimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert(dataSource);         Map parameters = new HashMap();              parameters.put(""customerid"", ""1"");         parameters.put(""id"", -9999999999999999L);              simpleJdbcInsert.setTableName(""Test"");         simpleJdbcInsert.execute(parameters);  Here is the result in DB : SQL> select * from Test;  CUSTOMERID                                       ID  ---------------- ----------------------------------  1                                -10000000000000000  Now a sample code that works with the same DriverManagerDataSource :      SimpleJdbcTemplate simpleJdbcTemplate = new SimpleJdbcTemplate(dataSource);     List data = new ArrayList();     data.add(new Object[]{""3"",-9999999999999999L});     simpleJdbcTemplate.batchUpdate(""insert into Test (customerid, id) values (?,?)"", data);  SQL> select * from test;  CUSTOMERID                                       ID  ---------------- ----------------------------------  1                                -10000000000000000 3                                 -9999999999999999  FYI There no such issue with MS-SQL Server 2000.   ---  **Affects:** 3.0 GA, 3.0.1","closed","in: core,","spring-projects-issues","2010-02-25T21:01:16Z","2012-06-19T03:43:50Z"
"","11596","Change the @Autowired annotation on setDataSource() in AbstractTransactionalTestNGSpringContextTests to @Required [SPR-6931]","**[Jacob Fahrenkrug](https://jira.spring.io/secure/ViewProfile.jspa?name=jacob.fahrenkrug)** opened **[SPR-6931](https://jira.spring.io/browse/SPR-6931?redirect=false)** and commented  If you run a transactional TestNG test within an application context where you have more then one datasource configured the autowiring doesn't work. But as the designer of the test you know which datasource you want to take so the autowiring prevents the developer from configuring more than one datasource within the application context of the test.   ---  **Affects:** 3.0.1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-03T05:00:23Z","2012-05-11T09:50:53Z"
"","11749","Custom Scope not visible to child context [SPR-7089]","**[Jack Punt](https://jira.spring.io/secure/ViewProfile.jspa?name=jpunt)** opened **[SPR-7089](https://jira.spring.io/browse/SPR-7089?redirect=false)** and commented  A Custom Scope (FlexClientScope, in case cited) must be registered with the root applicationContext.  In order to add Beans (a `@RemotingDestination`) a sub-context is created as the target for: setParent(rootAppCtx); register(clazz); refresh(); getBean(beanName); In the case cited, an AnnotationConfigApplicationContext.  When refresh(), the clazz with `@Service` `@RemotingDestination` `@Scope`(value=""flexclient"", proxyMode = ScopedProxyMode.TARGET_CLASS) proceeds to AbstractBeanFactory.java line 320: which attempts to find the requested scope, but looks only in the current/child ApplicationContext, failing to find the Scope in the parent.  The proposed fix is to add a method (near line 779, after getRegisteredScope()) something like:      protected Scope getScopeUseParent(String scopeName) {         BeanFactory beanFactory = this;         Scope scope = this.scopes.get(scopeName);         while ((scope == null)                && (beanFactory instanceof HierarchicalBeanFactory)                && ((beanFactory = ((HierarchicalBeanFactory)beanFactory).getParentBeanFactory()) != null)                 && (beanFactory instanceof AbstractBeanFactory)) {             scope = ((AbstractBeanFactory)beanFactory).scopes.get(scopeName);         }         return scope;                   // which may be null...     }  And use     Scope scope = getScopeUsingParents(scopeName); instead of: Scope scope = this.scopes.get(scopeName); In the appropriate places in AbstractBeanFactory.java  [Documentation may need to be upgraded to warn non-AbstractBeanFactory implementations that they should also search the parents to find registered Scopes.]  Note: for my project this is a ""Major"" ""Blocker"" Priority and requires a source-level patch and class replacement. but having upgraded the AbstractBeanFactory.class, i'm back in business until next release. I respect the fact that it is apparently not a common requirement, (it has gone this long without complaint) but would appreciate a supported solution when possible.  Environmental Impact: The suggested fix is ""benign"" (has little effect on existing/working apps), as all of them apparently register and access custom Scopes in the same appCtx. That is: the new while loop only runs before or in place of existing code that throws an Exception. So at worst: existing code that relied on not finding a Scope might fail to get an Exception.    ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showpost.php?p=294224&postcount=13","closed","type: enhancement,","spring-projects-issues","2010-04-12T05:47:00Z","2015-09-22T17:34:32Z"
"","11288","@Value annotation not always evaluated [SPR-6622]","**[J.Walgemoed](https://jira.spring.io/secure/ViewProfile.jspa?name=j.walgemoed)** opened **[SPR-6622](https://jira.spring.io/browse/SPR-6622?redirect=false)** and commented  I've been experimenting with the `@Value` annotation and decided to try and use it along with the expression language to inject request parameters in my JSF controllers.  After deploying the application, I visit my testpage with the parameter set in the querystring, and Spring injects the parameter. If I change the parameter it changes in my controller and if I remove it, Spring injects a null value. This is what I expected. Creating new sessions doesn't change this behaviour.  If however, I visit my testpage with no parameter set at all, Spring does not inject the value (not even a null value) and ignores the `@Value` annotation completely for as long as the application remains running. Even if I include the parameter in the querystring it still doesn't get injected.  Is this correct behaviour? It almost seems like an optimisation mechanism that checks if the value referenced by the expression language resolves to null. If the value is null at the time it is first injected, the setter method is never called.  If however it does resolve to a value on the very first request, it gets evaluated every single request after that, which is exactly what I was after in the first place.  The documentation isn't clear on what behaviour is to be expected, but this seems to be a bug.   ---  **Affects:** 3.0 GA","closed","in: core,","spring-projects-issues","2009-12-28T20:56:05Z","2019-01-12T16:38:31Z"
"","11853","Null check missing from AbstractJdbcCall line 206 [SPR-7193]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-7193](https://jira.spring.io/browse/SPR-7193?redirect=false)** and commented  If 'parameter' is null (which can happen when a user is creating a SqlParameterValue by hand) this will cause a NPE.  ``` public void addDeclaredParameter(SqlParameter parameter) {      if (!StringUtils.hasText(parameter.getName())) {           throw new InvalidDataAccessApiUsageException(                         ""You must specify a parameter name when declaring parameters for \"""" + getProcedureName() + ""\"""");      }      this.declaredParameters.add(parameter);      if (logger.isDebugEnabled()) {           logger.debug(""Added declared parameter for ["" + getProcedureName() + ""]: "" + parameter.getName());      } } ```  As a side note I found the way SqlParameterValue can be a SqlParameter without a key a bit confusing... but that is not the scope of this bug.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15df7b11d0e55e464d45ef3dfdaac8231c2b723f","closed","type: bug,","spring-projects-issues","2010-05-11T19:57:36Z","2012-06-19T03:43:37Z"
"","11026","Change JdbcTemplate methods to support varargs [SPR-6360]","**[Ivan Gammel](https://jira.spring.io/secure/ViewProfile.jspa?name=ivan.gammel)** opened **[SPR-6360](https://jira.spring.io/browse/SPR-6360?redirect=false)** and commented  JdbcTemplate API looks inconsistent in 3.0.0.RC1: Some methods support varargs and some are not. It would be great to make parameters the last argument and replace ""Object[]"" with ""Object...""  Example before: {{/* const \*/ NAME_FINDER_TYPES = new int[] {...} /* const */ USER_MAPPER = new RowMapper\() { ... } queryForObject(""SELECT id,username,... FROM users WHERE username=?"", new Object[]{ name }, NAME_FINDER_TYPES, USER_MAPPER);}}  Example after: `queryForObject(""SELECT id,username,... FROM users WHERE username=?"", USER_MAPPER, NAME_FINDER_TYPES, name);`  Possible option for methods with ""types"" argument is to create struct Parameter {String name,int type}, add convenience factory method param(name,type) and use as following with varargs: `queryForObject(""SELECT ..."", MAPPER, param(alice,ALICE_TYPE), param(bob, BOB_TYPE)...);`   --- No further details from [SPR-6360](https://jira.spring.io/browse/SPR-6360?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-11-15T21:22:48Z","2012-06-19T09:36:18Z"
"","11502","HibernateJpaVendorAdapter sets hibernate.hbm2ddl.auto to ""update"" [SPR-6836]","**[Ivan Balashov](https://jira.spring.io/secure/ViewProfile.jspa?name=vanyatka)** opened **[SPR-6836](https://jira.spring.io/browse/SPR-6836?redirect=false)** and commented  When HibernateJpaVendorAdapter is configured with generateDdl=""true"" the value of hibernate.hbm2ddl.auto is set to ""update"", overriding actual value specified in persistence.xml.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2010-02-14T03:01:50Z","2012-06-18T12:44:56Z"
"","11791","in property placeholders, default values are parsed even if not needed [SPR-7131]","**[Ittay Dror](https://jira.spring.io/secure/ViewProfile.jspa?name=ittayd)** opened **[SPR-7131](https://jira.spring.io/browse/SPR-7131?redirect=false)** and commented  in a context.xml file I have a property placeholder in the form: ${prop1:${prop2}} where prop1 is defined, but prop2 is not. i get an exception. i think the evaluation of prop2 should be lazy as it only needs to be defined if prop1 is not (xor). I don't want to turn on ignoring undefined properties, since it will mean the case of both prop1 and prop2 being undefined will be acceptable   ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-04-24T23:06:23Z","2015-09-22T17:34:34Z"
"","11343","ConstructorArgumentValues#ValueHolder.copy does not do a full deep copy [SPR-6677]","**[Ittay Dror](https://jira.spring.io/secure/ViewProfile.jspa?name=ittayd)** opened **[SPR-6677](https://jira.spring.io/browse/SPR-6677?redirect=false)** and commented  AbstractBeanDefinition's clone (cloneBeanDefinition) tries to do a deep clone. However, in ConstructorArgumentValues (and maybe other places), when the argument values are copied, the code for ValueHolder.copy is: public ValueHolder copy() { ValueHolder copy = new ValueHolder(this.value, this.type, this.name); copy.setSource(this.source); return copy; }  But when this.value is not an immutable value, but a TypedStringValue, then the reference is used as is. Which means if it is changed in the original bean definition it will also change in the clone.  Suggestions: 1. when cloning value types, see if they implement a certain interface (Cloneable may not be good since by default Object.clone performs shallow cloning). If so, call the interface method. If not, only allow primitive types and error/warn otherwise. 2. classes that represent values, like TypedStringValue should be immutable. so no setValue method. this probably is harder to implement but may result in safer cloning semantics.    ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-01-12T19:41:51Z","2015-09-22T17:34:36Z"
"","11319","Inconsistent detection of bean properties outside of the core BeanFactory [SPR-6653]","**[Ittay Dror](https://jira.spring.io/secure/ViewProfile.jspa?name=ittayd)** opened **[SPR-6653](https://jira.spring.io/browse/SPR-6653?redirect=false)** and commented  Normally, Spring handles bean properties in the right way, by using Introspector and bean info. This allows for properties that do not follow the set/get accessor idiom and in particular is suited for Scala (where the compiler generated a BeanInfo class if the class is annotated with `@BeanInfo`).  However, I've encountered one place (at least) where this is not the case: ./projects/org.springframework.context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java:516 if (this.member instanceof Method && resourceName.startsWith(""set"") && resourceName.length() > 3) { resourceName = Introspector.decapitalize(resourceName.substring(3)); }  there are other lines in this class with the same check.  other places: projects/org.springframework.aop/src/main/java/org/springframework/aop/support/Pointcuts.java:118: return method.getName().startsWith(""get"") &&    ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-01-06T22:43:06Z","2015-09-22T17:34:37Z"
"","11645","PropertyOrFieldReference.nullSafe does not have a public getNullSafe() method [SPR-6980]","**[Itai Frenkel](https://jira.spring.io/secure/ViewProfile.jspa?name=itaifrenkel)** opened **[SPR-6980](https://jira.spring.io/browse/SPR-6980?redirect=false)** and commented  org.springframework.expression.spel.ast.PropertyOrFieldReference has the following property: private final boolean nullSafe;  I would like to ask for a public getter method to be added to this class: public boolean getNullSafe() { return this.nullSafe; }  In order to convert AST expression trees to other expression languages one needs to distinct between the . operator and the ?. operator. Without this public getter, the distinction is not possible.    ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cb7e4dcb3918e333a85e2abc0a615e6532c403e","closed","type: task,","spring-projects-issues","2010-03-14T01:47:33Z","2012-06-19T03:43:31Z"
"","11362","It is necessary to add support UUID type in Spring MVC (WebDataBinder) [SPR-6696]","**[Ilya Skorik](https://jira.spring.io/secure/ViewProfile.jspa?name=ilyaskorik)** opened **[SPR-6696](https://jira.spring.io/browse/SPR-6696?redirect=false)** and commented  In my project everywhere it is used java.lang.UUID, at the moment I have some difficulties by operation with this data type and Spring MVC. In detail about a problem I have written in a forum.   ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=83021  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8bf2e2459e16b94c1161d9f5673ecd518f4724f3","closed","type: enhancement,","spring-projects-issues","2010-01-14T03:33:18Z","2012-06-19T03:43:08Z"
"","11455","Use of non-existing JmsTemplate constructor in documentation's sample code [SPR-6789]","**[Igor Kolomiets](https://jira.spring.io/secure/ViewProfile.jspa?name=ikolomiets)** opened **[SPR-6789](https://jira.spring.io/browse/SPR-6789?redirect=false)** and commented  Section ""21.3 Sending a Message"" of ""Spring Reference Documentation"" has this sample code:  public class JmsQueueSender {      private JmsTemplate jmsTemplate;     private Queue queue;          public void setConnectionFactory(ConnectionFactory cf) {         this.jmsTemplate = new JmsTemplate(cf, false);     }  ...  it says: ""... JmsTemplate is constructed by passing a reference to a ConnectionFactory and a boolean specifying the messaging domain.""  But there's no two-args constructor in JmsTemplate class anymore. Documentation should be updated to reflect that.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a44ec9f4f70704f0dfb06410dbd2cd9506eaf772","closed","type: enhancement,","spring-projects-issues","2010-02-02T07:48:23Z","2012-06-19T03:43:40Z"
"","11731","3.0.2.RELEASE tag has invalid Eclipse .classpath for integration-tests and orm [SPR-7071]","**[Ian Brandt](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrandt)** opened **[SPR-7071](https://jira.spring.io/browse/SPR-7071?redirect=false)** and commented  ``` Description	Resource	Path	Location	Type Project 'org.springframework.integration-tests' is missing required library: 'spring-3.0.2/ivy-cache/repository/com.sun.enterprise/com.springsource.com.sun.enterprise.loader/1.0.0/com.springsource.com.sun.enterprise.loader-1.0.0.jar'	org.springframework.integration-tests		Build path	Build Path Problem Project 'org.springframework.integration-tests' is missing required library: 'spring-3.0.2/ivy-cache/repository/org.apache.commons/com.springsource.org.apache.commons.pool/1.4.0/com.springsource.org.apache.commons.pool-1.4.0.jar'	org.springframework.integration-tests		Build path	Build Path Problem Project 'org.springframework.orm' is missing required library: 'spring-3.0.2/ivy-cache/repository/org.aspectj/com.springsource.org.aspectj.weaver/1.6.5.RELEASE/com.springsource.org.aspectj.weaver-1.6.5.RELEASE.jar'	org.springframework.orm		Build path	Build Path Problem ```  Patches forthcoming...   ---  **Affects:** 3.0.2  **Attachments:** - [integration-tests.patch](https://jira.spring.io/secure/attachment/16381/integration-tests.patch) (_4.01 kB_) - [orm.patch](https://jira.spring.io/secure/attachment/16382/orm.patch) (_2.17 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/688dd1a018d4e53edac7368c610c2a020967c77f","closed","type: task,","spring-projects-issues","2010-04-06T10:13:56Z","2012-06-19T03:43:13Z"
"","11278","Map SQL Error code 50200 in H2 to CannotAcquireLockException [SPR-6612]","**[Hideyuki Suzumi](https://jira.spring.io/secure/ViewProfile.jspa?name=slopetown)** opened **[SPR-6612](https://jira.spring.io/browse/SPR-6612?redirect=false)** and commented  Currently, sql-error-codes.xml has no mapping for sql error code 50200 for H2.  See http://h2database.com/javadoc/org/h2/constant/ErrorCode.html   ---  **Affects:** 2.5.6, 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/819f4be08eb58378554ff6a50ff26aa091e4b64a","closed","type: enhancement,","spring-projects-issues","2009-12-23T22:04:51Z","2012-06-19T03:43:56Z"
"","11421","Use ""cyclic"" instead of ""recursive"" in BeanDefinitionStoreException ""Detected recursive loading of class path resource""  [SPR-6755]","**[Henno Vermeulen](https://jira.spring.io/secure/ViewProfile.jspa?name=slowstrider)** opened **[SPR-6755](https://jira.spring.io/browse/SPR-6755?redirect=false)** and commented  Spring correctly detects cycles in \ statements in XML configuration files. However it responds with the message:  ""Detected RECURSIVE loading of class path resource...""  This is a confusing message because it is perfectly fine to have a hierarchical structure of imports (which can be recursively loaded).  (At least it confused me for almost an hour... Finally it turned out to be an Eclipse bug: it did not copy my correct changes in the .xml files in the source directory to the target directory so it used older .xml files which did contain a cycle of \ statements...)   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0f75210408abdbee5c7931fd576567e266711725","closed","type: enhancement,","spring-projects-issues","2010-01-22T03:35:02Z","2012-06-19T03:43:39Z"
"","11694","NPE in RuntimeTestWalker [SPR-7032]","**[Harald Radi](https://jira.spring.io/secure/ViewProfile.jspa?name=harald)** opened **[SPR-7032](https://jira.spring.io/browse/SPR-7032?redirect=false)** and commented  java.lang.NullPointerException at org.springframework.aop.aspectj.RuntimeTestWalker$InstanceOfResidueTestVisitor.instanceOfMatches(RuntimeTestWalker.java:172) [org.springframework.aop.jar:3.0.1.RELEASE] at org.springframework.aop.aspectj.RuntimeTestWalker$ThisInstanceOfResidueTestVisitor.thisInstanceOfMatches(RuntimeTestWalker.java:221) [org.springframework.aop.jar:3.0.1.RELEASE] at org.springframework.aop.aspectj.RuntimeTestWalker.testThisInstanceOfResidue(RuntimeTestWalker.java:90) [org.springframework.aop.jar:3.0.1.RELEASE] at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:307) [org.springframework.aop.jar:3.0.1.RELEASE] at org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher.matches(MethodMatchers.java:236) [org.springframework.aop.jar:3.0.1.RELEASE] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:160) [org.springframework.aop.jar:3.0.1.RELEASE] at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) [org.springframework.aop.jar:3.0.1.RELEASE] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) [org.springframework.aop.jar:3.0.1.RELEASE] at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) [org.springframework.aop.jar:3.0.1.RELEASE] at $Proxy131.createPlan(Unknown Source) [na:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [na:1.6.0_18] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [na:1.6.0_18] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [na:1.6.0_18] at java.lang.reflect.Method.invoke(Method.java:597) [na:1.6.0_18] at cc.catalysts.cp.server.impl.ApiManager.invoke(ApiManager.java:150) [cp-kernel.jar:1.3.10.03.24.17.45.10-dev] at cc.catalysts.cp.remoting.impl.ApiAdapter.invoke(ApiAdapter.java:47) [cp-kernel.jar:1.3.10.03.24.17.45.10-dev] at cc.catalysts.cp.remoting.red5.Red5ApiAdapter.invoke(Red5ApiAdapter.java:85) [cp-plugin-red5.jar:1.3.10.03.24.17.48.01-dev] ... 46 common frames omitted   ---  **Affects:** 3.0.1  **Attachments:** - [spring.png](https://jira.spring.io/secure/attachment/16335/spring.png) (_215.43 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/10c358718e13c4ee3cd5731a0e83a411c53aeba5","closed","in: core,","spring-projects-issues","2010-03-24T08:39:35Z","2012-06-19T03:44:02Z"
"","11836","DataBinder doesn't catch conversion problems in indexed properties [SPR-7177]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-7177](https://jira.spring.io/browse/SPR-7177?redirect=false)** and commented  The DataBinder encounters doesn't catch conversion problems in indexed properties of the command object. Instead you get a stack trace in the browser with a org.springframework.core.convert.ConversionFailedException  EXAMPLE:  The class that acts as command object:  ---  package org.example.web;  import java.util.List;  public class CommandObject { private List\ numbers; public void setNumbers(List\ numbers) { this.numbers=numbers; } public List\ getNumbers() { return numbers; } }  The Controller class:  ---  package org.example.web;  import java.util.Arrays;  import org.springframework.stereotype.Controller; import org.springframework.validation.BindingResult; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  `@Controller` `@RequestMapping`(""/index"") public class AController { `@RequestMapping`(method=RequestMethod.GET) public `@ModelAttribute` CommandObject initForm() { CommandObject commandObject=new CommandObject(); // fill the form with example values 1 and 2: commandObject.setNumbers(Arrays.asList(1,2)); return commandObject; } `@RequestMapping`(method=RequestMethod.POST) public void processForm(`@ModelAttribute` CommandObject commandObject, BindingResult bindingResult) { }  }  index.jsp  ---  \      \ \ \ \Continent example\ \ \ \ \ \ \	 \ \ \ \ \\\ \ \ \ When run the application, and you change 1 to blabla, you see a stack trace in the browser, instead of an error message. P.S. Indexed properties defined as a Map instead of a List have the same problems.  ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ad2022058d4a2e3d29ea793ede2cb8c09f9102e  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2010-05-07T01:47:46Z","2019-01-13T07:54:03Z"
"","11618","when combining  and DataBinder.initdirectfieldaccess, conversion problems cause ConversionFailedException instead of being handled by the DataBinder [SPR-6953]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6953](https://jira.spring.io/browse/SPR-6953?redirect=false)** and commented  When you have the element  in the bean definition file and you use DataBinder.initDirectFieldAccess, conversion problems are not handled by the DataBinder, but lead to a ConversionFaileException.  When you remove the element , the DataBinder handles conversion problems OK.  Example command object:  ---  package org.example.web;  public class CommandObject { private int value; public int getValue() { return value; } }  Example controller  ---  package org.example.web;  import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.validation.BindingResult; import org.springframework.validation.DataBinder; import org.springframework.web.bind.annotation.InitBinder; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  `@Controller` public class ExampleController { `@RequestMapping`(value=""/example.htm"",method=RequestMethod.GET) public String example(Model model) { model.addAttribute(new CommandObject()); return ""/WEB-INF/JSP/example.jsp""; } `@RequestMapping`(value=""/example.htm"",method=RequestMethod.POST) public String example(`@ModelAttribute` CommandObject commandObject, BindingResult bindingResult) {         return ""/WEB-INF/JSP/example.jsp""; } `@InitBinder` public void initBinder(DataBinder dataBinder) { dataBinder.initDirectFieldAccess(); } }  /WEB-INF/JSP/example.jsp  ---  \     \ \ \ \Example\ \ \ \ \ \\ \\ \\\ \ \ \  Steps to see the problem  ---  Type blabla in the textbox and submit, You get a HTTP 500 The stack trace shows a ConversionFailedException  ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/53b6e1c1b0a9dc60dae2f495751e71cfff401b7e","closed","type: bug,","spring-projects-issues","2010-03-05T16:36:32Z","2019-01-13T07:55:02Z"
"","11552","When submitting indexed properties, the databinder now uses the getter to fill in the indexed properties. It would be better to use the setter. [SPR-6886]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6886](https://jira.spring.io/browse/SPR-6886?redirect=false)** and commented  When submitting indexed properties, the databinder now uses the getter to fill in the indexed properties. It would be better to use the setter. 1. It would allow the getter to return the collection (that contains the indexed properties) as an unmodifiable collection    If you try this now, you get a java.lang.UnsupportedOperationException 2. If you have validations in the setter, the databinder now doesn't use them  Example command object:  ---  package org.example.entities;  import java.util.Collections; import java.util.LinkedHashMap; import java.util.Map;  public class Continent { // key = name of country // Integer= number of inhabitants private Map countries = new LinkedHashMap();  public Continent() { countries.put(""Belgium"", null); countries.put(""Switzerland"", null); }  public void setCountries(Map countries) { System.out.println(""SUBMIT uses setter""); // DataBinding does not use setter when submitting, // and in that way does'nt go in the validation of the setter for (int numberOfInhabitants:countries.values()) { if (numberOfInhabitants< 0) { throw new IllegalArgumentException(""Number of inhabitants can't be negative""); }      }            this.countries = countries;  }  public Map getCountries() { System.out.println(""SUBMIT uses getter""); return countries; //return Collections.unmodifiableMap(countries); // causes java.lang.UnsupportedOperationException } }  Example controller:  ---  package org.example.web;  import org.example.entities.Continent; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.validation.BindingResult; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  `@Controller` public class ContinentController { `@RequestMapping`(value = ""/continent.htm"", method = RequestMethod.GET) public String continentForm(Model model) { Continent continent = new Continent(); model.addAttribute(continent); return ""continent.jsp""; }  `@RequestMapping`(value = ""/continent.htm"", method = RequestMethod.POST) public String continentForm(`@ModelAttribute` Continent continent, BindingResult bindingResult) { System.out.println(continent.getCountries()); return ""continent.jsp""; } }  Example JSP:  ---  \      \ \ \ \Continent example\ \ \ \ \ \ \ \${entry.key}\	 \ \ \ \ \\\ \ \ \  ---  **Affects:** 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-02-21T18:28:15Z","2019-01-13T07:55:15Z"
"","11544","An optional @RequestParam parameter of an @InitBinder method is filled with garbarge instead of null, if the corresponding parameter is missing on the URL [SPR-6878]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6878](https://jira.spring.io/browse/SPR-6878?redirect=false)** and commented  A controller method can contain a method with `@InitBinder` This method can contain a parameter with `@RequestParam` `@RequestParam` can contain required=false, to indicate that corresponding URL parameter CAN be present, but MUST NOT be present If the corresponding URL parameter IS NOT present, the java parameter on which you apply `@RequestParam` SHOULD BE filled with null NOW it is filled with garbage (a series of characters, most of them tabs and newlines)  Command class:  ---  package org.example.entities;  public class Person { private String firstName; private String lastName;  public void setFirstName(String firstName) { this.firstName = firstName; }  public String getFirstName() { return firstName; }  public void setLastName(String lastName) { this.lastName = lastName; }  public String getLastName() { return lastName; } }  Controller class:  ---  package org.example.web;  import org.example.entities.Person; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.InitBinder; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam;  `@Controller` public class PersonController { `@RequestMapping`(value = ""/person.htm"", method = RequestMethod.GET) public String edit(`@RequestParam`(required = false) String wizzardStep, Model model) { model.addAttribute(new Person()); return ""person.jsp""; }  `@RequestMapping`(value = ""/person.htm"", method = RequestMethod.POST) public String edit(`@ModelAttribute` Person person) { return ""person.jsp""; }  `@InitBinder`(""person"") public void initBinder( `@RequestParam`(value = ""wizzardStep"", required = false) String wizzardStep) { System.out.print(""wizzardStep==null:""); System.out.println(wizzardStep == null); if (wizzardStep != null) { for (char kar : wizzardStep.toCharArray()) { System.out.println(Character.isWhitespace(kar)); } } }  person.jsp  ---  \      \ \ \ \Continent example\ \ \ \ \ \ \ \ \ \ \ \\\ \ \ \  When you submit the form, the output on the console (from the initBinder method):  ---  wizzardStep==null:false true true true true true true true false false false true true true true true true }  If you describe the `@RequestParam` java parameter as Integer, instead of String, the problem gets more serious (HTTP 400 error), because the garbage cannot be converted to Integer.  P.S.  ---  `@RequestParam` is very useful in an `@InitBinder` method, when you have multiple forms in wizzard style and there is a URL parameter which indicates the current step in the wizzard.  ---  **Affects:** 3.0.1  **Issue Links:** - #11457 `@RequestParam`, `@CookieValue` and `@RequestHeader` default-value and required are not in sync","closed","type: bug,","spring-projects-issues","2010-02-19T17:17:25Z","2019-01-13T07:55:18Z"
"","11537","Spring MVC regression: binding to indexed properties is broken [SPR-6871]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6871](https://jira.spring.io/browse/SPR-6871?redirect=false)** and commented  When you submit a form, with databinding on a command object with indexed properties, the indexed properties of the command object are not filled in. I think this bug is related to the correction that happened in #11506. The characters [ and ] are not only removed from the id attrbute of the HTML elements, but also (unnessesary) from the name attribute of the HTML elements.  You can see it happening via next example. When you type 10 and 20 in the input fields, the output to the console is: {Belgium=null, Switzerland=null} while the output should have been {Belgium=10, Switzerland=20}  The class that acts as command object:  ---  package org.example.entities;  import java.util.LinkedHashMap; import java.util.Map;  public class Continent { // key = name of country // Integer= number of inhabitants private Map countries = new LinkedHashMap();  public Continent() { countries.put(""Belgium"", null); countries.put(""Switzerland"", null); }  public void setCountries(Map countries) { this.countries = countries; }  public Map getCountries() { return countries; } }  The Controller class:  ---  package org.example.web;  import org.example.entities.Continent; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.validation.BindingResult; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  `@Controller` public class ContinentController { `@RequestMapping`(value = ""/continent.htm"", method = RequestMethod.GET) public String continentForm(Model model) { Continent continent = new Continent(); model.addAttribute(continent); return ""continent.jsp""; }  `@RequestMapping`(value = ""/continent.htm"", method = RequestMethod.POST) public String continentForm(`@ModelAttribute` Continent continent, BindingResult bindingResult) { System.out.println(continent.getCountries()); // Here you can see the bug return ""continent.jsp""; } }  continent.jsp  ---  \      \ \ \ \Continent example\ \ \ \ \ \ \ \${entry.key}\	 \ \ \ \ \\\ \ \ \  ---  **Affects:** 3.0.1  **Issue Links:** - #11586 Indexed properties not set correctly in form tags (_**""is duplicated by""**_) - #11702 form:select 3.0.1 regression bug when binding to a map (_**""is duplicated by""**_) - #11506 form:checkbox tag creates invalid HTML id when bound to indexed property - #10055 org.springframework.web.servlet.tags.form.TagIdGenerator doesn't remove characters [] and double-quotes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/67b342d923c900323df169c32e27d9aa80fb8108  3 votes, 8 watchers","closed","type: bug,","spring-projects-issues","2010-02-18T20:38:30Z","2019-01-13T07:55:21Z"
"","11528","form:error tag generates HTML id which contains [ and ], when bound to indexed property [SPR-6862]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6862](https://jira.spring.io/browse/SPR-6862?redirect=false)** and commented  When the tag form:errors is bound to an indexed property, it creates an HTML id which contains the characters [ and ] These characters are not allowed in an id.  A span generated by form:errors in the example, when you type blabla in the textbox: \Failed to convert property ...\  This is a similar problem as the one in #11506  The class that acts as command object:  ---  package org.example.entities;  import java.util.LinkedHashMap; import java.util.Map;  public class Continent { // key = name of country // Integer= number of inhabitants private Map countries = new LinkedHashMap();   public Continent() { countries.put(""Belgium"", null); countries.put(""Switzerland"", null); } public void setCountries(Map countries) { this.countries = countries; } public Map getCountries() { return countries; } }  The Controller class:  ---  package org.example.web;  import org.example.entities.Continent; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.validation.BindingResult; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  `@Controller` public class ContinentController { `@RequestMapping`(value = ""/continent.htm"", method = RequestMethod.GET) public String continentForm(Model model) { Continent continent=new Continent(); model.addAttribute(continent); return ""continent.jsp""; } `@RequestMapping`(value = ""/continent.htm"", method = RequestMethod.POST) public String personForm(`@ModelAttribute` Continent continent, BindingResult bindingResult) { return ""continent.jsp""; } }  continent.jsp  ---","closed","type: enhancement,","spring-projects-issues","2010-02-17T20:10:40Z","2019-01-13T07:55:24Z"
"","11506","form:checkbox tag creates invalid HTML id when bound to indexed property [SPR-6840]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6840](https://jira.spring.io/browse/SPR-6840?redirect=false)** and commented  When the tag form:checkbox is bound to an indexed property, it creates an HTML id which contains the characters [ and ] - These characters are not allowed in an id. - The form:label tag that is bound tot the same indexed property doesn't contain [ and ] in the for attribute   and therefore is not correctly coupled to the corresponding checkbox.  A checkbox generated in the example: \  The corresponding label: \Belgium\  The class that acts as command object:  ---  package org.example.entities;  import java.util.Collections; import java.util.LinkedHashMap; import java.util.Map;  public class Continent { // key = name of country // Boolean= bordered by the sea private Map countries = new LinkedHashMap();  public void setCountries(Map countries) { this.countries = countries; }  public void addCountry(String name, boolean borderedByTheSea) { countries.put(name, borderedByTheSea); }  public Map getCountries() { return Collections.unmodifiableMap(countries); }  }  The Controller class:  ---  package org.example.web;  import org.example.entities.Continent; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  `@Controller` public class ContinentController { `@RequestMapping`(value = ""/continent.htm"", method = RequestMethod.GET) public String continentForm(Model model) { Continent continent=new Continent(); continent.addCountry(""Belgium"", true); continent.addCountry(""Switzerland"", false); model.addAttribute(continent); return ""continent.jsp""; }  `@RequestMapping`(value = ""/person.htm"", method = RequestMethod.POST) public void personForm(`@ModelAttribute` Continent continent) { } }  continent.jsp  ---  \      \ \ \ \Person example\ \ \ \ \ \ \ \ \${entry.key}\		 \ \ \\\ \ \ \  ---  **Affects:** 3.0 GA  **Issue Links:** - #11537 Spring MVC regression: binding to indexed properties is broken - #10055 org.springframework.web.servlet.tags.form.TagIdGenerator doesn't remove characters [] and double-quotes","closed","type: bug,","spring-projects-issues","2010-02-14T22:13:03Z","2019-01-13T07:55:31Z"
"","11439","presence of  causes uncorrect exeption Cannot map handler ...to URL ... There is already handler ...mapped [SPR-6773]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6773](https://jira.spring.io/browse/SPR-6773?redirect=false)** and commented  Given following  web.xml  ---  \  \ \ \index.jsp\ \ \ \springControllers\ \org.springframework.web.servlet.DispatcherServlet\ \1\ \ \ \springControllers\ \*.htm\ \ \  springControllers-servlet.xml  ---  \  \  \  \  ArticleController.java  ---  package org.example.web;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  `@Controller` public class ArticleController { `@RequestMapping`(value = ""add"", method = RequestMethod.GET) public void add() { } }  ClientController.java  ---  package org.example.web;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  `@Controller` public class ClientController { `@RequestMapping`(value = ""add"", method = RequestMethod.GET) public void add() { } }  you get following exception:  ---  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': Initialization of bean failed; nested exception is java.lang.IllegalStateException: Cannot map handler [clientController] to URL path [add]: There is already handler [org.example.web.ClientController@cb07ef] mapped.  when you remove the line  from springControllers-servlet.xml, the application starts without exception and the method add from ArticleController is mapped to /article/add and the method add from ClientController is mapped to /client/add  The problem occurs when multiple methods from different controller classes have the same value parameter in their `@RequestMapping` (in my example the value parameter in `@RequestMapping` is twice set to ""add"").  ---  **Affects:** 3.0 GA  0 votes, 6 watchers","closed","status: declined,","spring-projects-issues","2010-01-26T18:22:22Z","2019-01-13T07:55:46Z"
"","11401","Duplicate key violation is not translated to DuplicateKeyException when using Hibernate in DAO layer [SPR-6735]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6735](https://jira.spring.io/browse/SPR-6735?redirect=false)** and commented  When you use JDBC in the DAO layer a duplicate key violation that occurs when you insert a record or update a record is translated to a DuplicateKeyException, which is fine !  When you use Hibernate in the DAO layer, a duplicate key violation is translated to the more general DataIntegrityViolationException,    ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-01-20T18:47:05Z","2015-09-22T18:20:30Z"
"","11218","DataBinder.setRequiredFields is broken [SPR-6552]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6552](https://jira.spring.io/browse/SPR-6552?redirect=false)** and commented  The validation with DataBinder.setRequiredFiels doesn't work anymore. Next example validated with Spring 2.5.6, not with 3.0 RC3  web.xml  ---  \ \ \ \dispatcher\ \org.springframework.web.servlet.DispatcherServlet\ \2\ \ \ \dispatcher\ \*.htm\ \ \  dispatcher-servlet.xml  ---  \  \  \  SearchController.java  ---  package org.example.web;  import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.validation.BindingResult; import org.springframework.validation.DataBinder; import org.springframework.web.bind.annotation.InitBinder; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  `@Controller` public class SearchController { private final static String VIEW= ""/WEB-INF/search.jsp"";      @RequestMapping(value = ""/search"", method = RequestMethod.GET)     public String searchForm(Model model) {         model.addAttribute(new SearchForm());         return VIEW;     }          @RequestMapping(value = ""/search"", method=RequestMethod.POST)     public String searchForm(@ModelAttribute SearchForm searcForm, BindingResult bindingResult, Model model) {         model.addAttribute(""hasErrors"", bindingResult.hasErrors());         return VIEW;     }          private final String[] requiredFields = {""word""};     @InitBinder(""searchForm"")     public void initBinderVanTotPostcode(DataBinder dataBinder) {         dataBinder.setRequiredFields(requiredFields);     }  }  SearchForm.java  ---  package org.example.web;  public class SearchForm {      private String word;          public String getWord() {         return word;     }          public void setWord(String word) {         this.word = word;     }  }  search.jsp  ---     \ \ \ \Search\ \ \ \ \ \Word:\ \ \ \ \ \${hasErrors}\ \ \ \  ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/86475593bbb7e660e0e34f8fd119a95c4581a35b, https://github.com/spring-projects/spring-framework/commit/26b3443299b1fad469c6ce42c6894918cf3b6a4e","closed","in: core,","spring-projects-issues","2009-12-12T06:05:08Z","2019-01-13T07:56:30Z"
"","11141","Combining ControllerClassNameHandlerMapping and @RequestMapping with relative value on Controller method  doesn't work anymore [SPR-6475]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6475](https://jira.spring.io/browse/SPR-6475?redirect=false)** and commented  The controller beans xml file contains:  ---   \  The Controller class:  ---  package org.example.web; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping;  `@Controller` public class ArticlesController { `@RequestMapping`(""all"") // all == a relative URL public String findAll() {	 return ""/WEB-INF/JSP/allArticles.jsp""; } }  Spring 2.5  ---  A GET request with the URL /articles/all was processed by the function findAll  Spring 3.0 RC2  ---  A GET request with the URL /articles/all produces HTTP 404 error.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11045 RC2: Issue with RequestMethod.GET differs from M2 (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2009-11-30T06:20:55Z","2019-01-13T07:56:51Z"
"","10985","Presence of DefaultConversionService Bean prevents using key=value shortcut to inject a property of type Properties [SPR-6319]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-6319](https://jira.spring.io/browse/SPR-6319?redirect=false)** and commented  When you declare a bean of type org.springframework.core.convert.support.DefaultConversionService, you cannot use the shortcut key=value anymore to inject a property of type Properties. You get an exception: properties should be in the format name=value Injection via \ still works though.  example class:  ---  import java.util.Properties;  public class Example { public void setExample(Properties properties) { } }  bean configuration file: (in conf directory)  ---  \  \ \ \ \ key1=value1; \ \ \ \ \ \ \value1\ \ \ \ \ \  Startup class:  ---  import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext;  public class Main { public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(""conf/spring.xml""); context.getBean(""exampleWorking"", Example.class); context.getBean(""exampleNotWorking"", Example.class); } }  P.S. When you comment the bean definition of the bean with the id conversionService, the exception disappears.  ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-11-09T06:13:18Z","2019-01-13T21:48:40Z"
"","10953","Autowired can not work with @Transactional [SPR-6286]","**[hallenzzz](https://jira.spring.io/secure/ViewProfile.jspa?name=hallenzzz)** opened **[SPR-6286](https://jira.spring.io/browse/SPR-6286?redirect=false)** and commented  Autowired is a great function, but seems can not work with `@Transactional`, for example, a class like  `@Service` `@Transactional` public class TheService() { ... }  When we use `@Autowired` and packagesToScan, any RuntimeException can't cause rollback, transction doesn't work. Then we declare this bean in applicationContext.xml, it is OK.  I found there is a similar issue: http://jira.springframework.org/browse/SPR-5082  ---  **Affects:** 3.0 RC1  **Issue Links:** - #9755 `@Transactional` annotation doesn't work for scanned component, again","closed","status: duplicate,","spring-projects-issues","2009-10-30T05:20:42Z","2019-01-13T07:57:34Z"
"","11735","maxConcurrentConsumers property of DefaultMessageListenerContainer cannot be decreased in runtime [SPR-7075]","**[Halil Karaköse](https://jira.spring.io/secure/ViewProfile.jspa?name=hkarakose)** opened **[SPR-7075](https://jira.spring.io/browse/SPR-7075?redirect=false)** and commented  I am trying to decrease maxConcurrentConsumers propetry using jboss jmx-console in runtime. The value of the property really decreases in jmx-console, but the number of consumers doesn't decrease and spring still uses the excessive consumer(s).  How to regenerate: 1. Change the log configuration as follows in JBoss, so that we can see thread names:    Code:     \    \    \    	  \    \    \    		\    \    \ 2. Set concurrentConsumers to 1, maximumConsumers to 2.  3. Send 2 messages to jms queue. At the moment the number of the consumers should be 2.  4. Push some more messages into JMS for 60 seconds.  5. From the log messages it is obvious that, there are 2 consumer threads used by DMLC.    ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=86106  **Attachments:** - [ModifiedDefaultMessageListenerContainer.zip](https://jira.spring.io/secure/attachment/16388/ModifiedDefaultMessageListenerContainer.zip) (_10.12 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5057c4a69cc9b69523916255b0a7aed4627d623c  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2010-04-07T00:51:59Z","2019-01-11T13:25:22Z"
"","11267","does not allow you to specify statement delimiters. [SPR-6601]","**[Haikal Saadh](https://jira.spring.io/secure/ViewProfile.jspa?name=tunaranch)** opened **[SPR-6601](https://jira.spring.io/browse/SPR-6601?redirect=false)** and commented  The problem described in #9152 also applies to .  I.e., there is no way to feed it a script with statements that span multiple lines.  ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2009-12-22T14:12:52Z","2019-01-11T16:12:44Z"
"","10878","WorkManagerTaskExecutor implements also Executor interface [SPR-6210]","**[Hafid Haddouti](https://jira.spring.io/secure/ViewProfile.jspa?name=haf)** opened **[SPR-6210](https://jira.spring.io/browse/SPR-6210?redirect=false)** and commented  Please let the WorkManagerTaskExecutor implements also the Executor interface[1] like ThreadPoolTaskExecutor and not only the TaskExecutor.  [1] http://java.sun.com/javase/6/docs/api/java/util/concurrent/Executor.html   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-10-08T21:25:52Z","2012-06-19T03:44:01Z"
"","10910","CLONE -NPE in GenericTypeResolver when using Spring 2.5 on IBM JDK 1.6 [SPR-6242]","**[Gyanendra Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=gyan_kush)** opened **[SPR-6242](https://jira.spring.io/browse/SPR-6242?redirect=false)** and commented  (spring2.5 && ibm jdk5) ||( spring2.0.8 && ibm jdk6) is fine.  spring2.5 && ibm jdk6 will produce a NPE  2008-05-08 15:27:54,739 [ContainerBackgroundProcessor[StandardEngine[Catalina]]] [org.springframework.web.context.ContextLoader] [ERROR]   - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0': Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(AccessController.java:224) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:516) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:363) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3843) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4350) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:829) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:718) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:490) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1215) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:293) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1337) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590) at java.lang.Thread.run(Thread.java:735) Caused by: java.lang.NullPointerException at org.springframework.core.GenericTypeResolver.getTypeVariableMap(GenericTypeResolver.java:144) at org.springframework.core.GenericTypeResolver.resolveReturnType(GenericTypeResolver.java:93) at org.springframework.beans.GenericTypeAwarePropertyDescriptor.getPropertyType(GenericTypeAwarePropertyDescriptor.java:58) at java.beans.PropertyDescriptor.setWriteMethod(Unknown Source) at java.beans.PropertyDescriptor.\(Unknown Source) at org.springframework.beans.GenericTypeAwarePropertyDescriptor.\(GenericTypeAwarePropertyDescriptor.java:47) at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:250) at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:144) at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:252) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:380) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1287) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1248) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1008) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 29 more   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2009-10-15T05:26:05Z","2019-01-12T05:32:59Z"
"","11360","Stored Functions ignore map values for IN/OUT parameters [SPR-6694]","**[Gunther Schmidl](https://jira.spring.io/secure/ViewProfile.jspa?name=gschmidl)** opened **[SPR-6694](https://jira.spring.io/browse/SPR-6694?redirect=false)** and commented  I have a Stored Function with IN/OUT parameters along the lines of  FUNCTION search_container( p_station     IN OUT VARCHAR2, p_check_id   IN OUT NUMBER ) RETURN SYS_REFCURSOR;  I created a Spring StoredProcedure, calling setFunction(true), declaring the IN OUT-Parameters as SqlOutParameters, and creating a Map for the values it is supposed to hold.  I then filled the Map with the IN parameter value for P_STATION, leaving P_CHECK_ID as null, and called execute on the function.  Result: P_STATION's value is never set before passing it to the function. Tracing it from inside the database shows its value is NULL. If not modified within the stored function, it remains NULL, and thus loses its original value.  Changing the parameter type of P_STATION from IN OUT to IN and declaring it as SqlParameter makes everything work as it should, so I'm assuming it's an oversight for this special case.   ---  **Affects:** 2.5.6","closed","status: invalid,","spring-projects-issues","2010-01-14T02:10:56Z","2019-01-12T05:32:42Z"
"","11842","Injecting all beans of given type into a Collection property [SPR-7183]","**[Grzegorz Olędzki](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorz.oledzki)** opened **[SPR-7183](https://jira.spring.io/browse/SPR-7183?redirect=false)** and commented  If you want a bean to operate on collection of multiple beans of given type, there's one solution - declare a `Collection` property and use `@Autowired` annotation above it.  If one wanted to specify the set of injected beans in the XML configuration, one could list them one by one, e.g.:  ```                                                ```  But what if there was a need to inject multiple beans like that?  I believe there could be a mechanism which would make it easier, quite similar to autowiring by type, but specified on XML level:  ```                                       ```    ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-05-09T21:49:47Z","2011-07-07T19:11:24Z"
"","11628","SimpleJdbcCall.returningResultSet() should accept RowMapper instead of ParameterizedRowMapper [SPR-6963]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-6963](https://jira.spring.io/browse/SPR-6963?redirect=false)** and commented  One particular reason is that `org.springframework.jdbc.core.ColumnMapRowMapper` implements `org.springframework.jdbc.core.RowMapper` and cannot be directly passed as a RowMapper to `returningResultSet()` method.  regards Grzegorz Grzybek   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ccb312a9742bdec8a38def1c9bb2fb0e12941da3","closed","type: enhancement,","spring-projects-issues","2010-03-09T19:39:22Z","2012-06-19T03:43:30Z"
"","11504","StaxUtils - add factory method to create StAX XMLEventWriter transfering events to SAX ContentHandler [SPR-6838]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-6838](https://jira.spring.io/browse/SPR-6838?redirect=false)** and commented  I've been looking at stax-utils(.dev.java.net) and Cocoon's support in the area of bridging StAX and SAX technologies - it could especially be useful in using TrAX TransformerHandler to create chained XML trasformers operating on incoming events. With JAXP 1.4 it is possible to transform SAX events but not to StAX events.  I'm sure it won't be a problem to create XMLEventWriter implementation which invokes proper methods on provided SAX ContentHandler - Cocoon has such implementation in `org.apache.cocoon.stax.converter.util.XMLEventToContentHandler` class..  regards Grzegorz Grzybek   ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=84712","closed","in: core,","spring-projects-issues","2010-02-14T19:12:47Z","2019-01-12T05:32:31Z"
"","11391","reference doc, section 8.7 - ProxyFactory (AdvisedSupport) does not contain method addInterceptor [SPR-6725]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-6725](https://jira.spring.io/browse/SPR-6725?redirect=false)** and commented  Also ""You can add interceptors or advisors, and manipulate them for the life of the ProxyFactory"" is wrong. Interceptors are just specialized advices - ProxyFactory allows adding Advisors and Advices (with no particular emphasis on interceptors).   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/975dcd7bbf950db1ab76a50a03d538997ed4c6cb","closed","type: bug,","spring-projects-issues","2010-01-19T20:36:35Z","2012-06-19T03:43:40Z"
"","11389","reference doc, section 8.5.2 - aopProxyFactory is not part of ProxyConfig [SPR-6723]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-6723](https://jira.spring.io/browse/SPR-6723?redirect=false)** and commented  this property is present in `org.springframework.aop.framework.ProxyCreatorSupport`  (sorry for bothering you with my issues regarding documentation :) )  regards Grzegorz Grzybek   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/975dcd7bbf950db1ab76a50a03d538997ed4c6cb","closed","type: bug,","spring-projects-issues","2010-01-19T20:09:22Z","2012-06-19T03:44:02Z"
"","11387","Section 8.2.4.1 Static pointcuts still contains reference to Perl5RegexpMethodPointcut [SPR-6721]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-6721](https://jira.spring.io/browse/SPR-6721?redirect=false)** and commented  There is still an example of `Perl5RegexpMethodPointcut` in  ""Regular expression pointcuts"" subsection.  ---  **Affects:** 3.0 GA  This issue is a sub-task of #9661  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1896efd048bd656228cf8a0508a3fe2f7fc95377","closed","type: documentation,","spring-projects-issues","2010-01-19T18:46:51Z","2019-01-11T15:42:31Z"
"","11381","Wrong information on single quote escaping in chapter 6.5.1 in reference documentation [SPR-6715]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-6715](https://jira.spring.io/browse/SPR-6715?redirect=false)** and commented  There is:  > To put a single quote itself in a string use the backslash character. > and it should be (after {[org.springframework.expression.spel.standard.Tokenizer.lexQuotedStringLiteral()}}): > To put a single quote itself in a string use two single quote characters.    --- No further details from [SPR-6715](https://jira.spring.io/browse/SPR-6715?redirect=false)","closed","type: bug,","spring-projects-issues","2010-01-18T18:58:56Z","2012-06-19T03:44:17Z"
"","11380","Wrong example of SpEL in chapter 6.3 in reference documentation [SPR-6714]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-6714](https://jira.spring.io/browse/SPR-6714?redirect=false)** and commented  There is:  ``` EvaluationContext context = new StandardEvaluationContext(); context.setRootObject(tesla); ```  but `setRootObject` method is undefined for interface `EvaluationContext`. It probably should be:  ``` StandardEvaluationContext context = new StandardEvaluationContext(); context.setRootObject(tesla); ```  ---  **Affects:** 3.0 GA  **Issue Links:** - #11318 Bug in SpEL documentation (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2010-01-18T18:33:14Z","2019-01-12T16:49:46Z"
"","11379","Wrong method signature of GenericConverter interface in chapter 5.5.3 [SPR-6713]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-6713](https://jira.spring.io/browse/SPR-6713?redirect=false)** and commented  The signature of `getConvertibleTypes()` in documentation is:  ``` public Class[][] getConvertibleTypes(); ```  and it should be:  ``` public Set getConvertibleTypes(); ```    ---  **Affects:** 3.0 GA","closed","type: bug,","spring-projects-issues","2010-01-18T16:36:41Z","2012-06-19T03:43:31Z"
"","11834","StringToEnumConverterFactory should be able to also convert enum ordinals, not only values [SPR-7175]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-7175](https://jira.spring.io/browse/SPR-7175?redirect=false)** and commented  StringToEnumConverterFactory converts string to enum by calling Enum#valueOf(Class, String). It would be useful in many situations if it were able to convert enum ordinals. For example, having enum Pets {DOG, CAT}, converter would be able to convert: ""DOG"" -> Pets.DOG ""CAT"" -> Pets.CAT ""0"" -> Pets.DOG ""1"" -> Pets.CAT It's quite easy to implement, because enum value can't start from digit. So if string starts from 0-9, then it's not enum value, and you can convert it as String ordinal.   ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-05-05T19:35:25Z","2012-11-26T17:24:33Z"
"","11782","Hibernate Validator doesn't automatically  validate @Entities [SPR-7122]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-7122](https://jira.spring.io/browse/SPR-7122?redirect=false)** and commented  According to Hibernate Validator documentation, the JPA 2 provider (like Hibernate 3.5) will detect presence of validator implementation on classpath, and automatically validate `@Entities` during persist or merge calls. However, it doesn't work for me in Spring app - the validation is not called, I must call it explicitly (I don't use `@Valid-marked` controller inputs, becuase it doesn't fit well our needs. We call Spring DataBinder explicitly, and we have to call it's validate() method to trigger Hibernate Validator to run). Why validation is not triggered by Hibernate automatically? Is it something specific to Spring environment, perhaps it is disabled intentionally (e.g. to not duplicate validation after validating controller inputs)? Or it's Hibernate bug? (I tested it with Hibernate 3.5.0)   ---  **Affects:** 3.0.2  **Attachments:** - [SPR-7122.zip](https://jira.spring.io/secure/attachment/19429/SPR-7122.zip) (_5.63 kB_)  1 votes, 3 watchers","closed","","spring-projects-issues","2010-04-22T06:44:03Z","2019-01-11T13:36:01Z"
"","11781","Support for custom global Joda DateTimeFormatters [SPR-7121]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-7121](https://jira.spring.io/browse/SPR-7121?redirect=false)** and commented  I'd like to be able to configure the Joda Time parser globally, to parse all the dates in common format. There is no documentation on it. In my case I'd like to have it configured so that it parses all dates and times in valid ISO format (org.joda.time.format.ISODateTimeFormat.dateTimeParser() | dateParser() | dateOptionalTimeParser() | timeParser()). I was able to write my own converter to do it, but if Spring has JodaTime support built-in, than I'd expect to be able to do it without writing any code. In my case, we have RESTful service based on Spring. All dates which are accepted by the service must be in ISO format. Then, it makes sense to set this format once, globally, in spring context config file probably.  ---  **Affects:** 3.0.2  **Issue Links:** - #14585 Document global date time format configuration - #14586 Honor timeZone property in DateTimeFormatterFactory - #12567 FormattingConversionServiceFactoryBean enhancements  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-04-22T06:36:28Z","2019-01-11T13:35:53Z"
"","11154","Log input params for StoredProcedure [SPR-6488]","**[Greg Nieman](https://jira.spring.io/secure/ViewProfile.jspa?name=gnieman)** opened **[SPR-6488](https://jira.spring.io/browse/SPR-6488?redirect=false)** and commented  Filed on behalf of customer: They would like org.springframework.jdbc.object.StoredProcedure to log the input params.   ---  **Affects:** 3.0 RC2  1 votes, 1 watchers","closed","in: data,","spring-projects-issues","2009-12-01T10:26:20Z","2019-01-11T15:36:43Z"
"","11316","xsd validation occurring on hibernate mapping files [SPR-6650]","**[Greg Ferguson](https://jira.spring.io/secure/ViewProfile.jspa?name=gferg)** opened **[SPR-6650](https://jira.spring.io/browse/SPR-6650?redirect=false)** and commented  Upgrading to Spring 3.0 GA we noticed that XSD references in hibernate mapping files were being fetched from the net. This obviously causes problems in an offline mode. The previous version (we were on 2.5) did not exhibit this behavior. We also upgraded to hibernate 3.3 as part of our move to Spring 3.0.  I've read accounts whereby if the hibernate doctype specification in our mapping files matches what is found in the hibernate3.jar, the xsd will be obtained directly from that jar. That seemed to work in the previous version(s; of Spring and hibernate), but not with the latest upgrades. Below is the doctype we are using within our hibernate mapping files:  ```  ```  Here is the exception when in offline mode:  ``` ERROR org.springframework.web.context.ContextLoader - Context initialization failed org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [com/cnpriv/cds/domain/cds.hbm.xml]; nested exception is java.net.UnknownHostException: hibernate.sourceforge.net         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:408)         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149)         at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:124)         at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:93)         at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130)         at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:458)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:388)         at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:261)         at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:192)         at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)         at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3934) ... Caused by: java.net.UnknownHostException: hibernate.sourceforge.net         at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:177)         at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)         at java.net.Socket.connect(Socket.java:519)         at java.net.Socket.connect(Socket.java:469)         at sun.net.NetworkClient.doConnect(NetworkClient.java:163)         at sun.net.www.http.HttpClient.openServer(HttpClient.java:394)         at sun.net.www.http.HttpClient.openServer(HttpClient.java:529)         at sun.net.www.http.HttpClient.(HttpClient.java:233)         at sun.net.www.http.HttpClient.New(HttpClient.java:306)         at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:844)         at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:792)         at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:703)         at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1026)         at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.setupCurrentEntity(XMLEntityManager.java:677)         at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startEntity(XMLEntityManager.java:1315)         at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startDTDEntity(XMLEntityManager.java:1282)         at com.sun.org.apache.xerces.internal.impl.XMLDTDScannerImpl.setInputSource(XMLDTDScannerImpl.java:283)         at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.dispatch(XMLDocumentScannerImpl.java:1192)         at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.next(XMLDocumentScannerImpl.java:1089)         at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:1002)         at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)         at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:510)         at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:807)         at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)         at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:107)         at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:225)         at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:283)         at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75)         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:388) ```  This is similar in nature to the request in #9689. Thanks in advance for any advice.  ---  **Affects:** 3.0 GA","closed","status: declined,","spring-projects-issues","2010-01-06T09:01:46Z","2019-01-12T16:38:28Z"
"","11463","@RequestParam annotations don't set default value when extending controllers from interfaces [SPR-6797]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-6797](https://jira.spring.io/browse/SPR-6797?redirect=false)** and commented  Another comment with this (I'll create another JIRA) but I noticed that I use interfaces, `@RequestParam` annotation don't seem to set a default value.  Example. This doesn't work:  public ModelAndView unsubscribeUser(HttpServletRequest request, `@RequestParam` String id, `@RequestParam`(required = false) String unsubscribe)  but this does:  public ModelAndView unsubscribeUser(HttpServletRequest request, `@RequestParam`(value = ""id"") String id, `@RequestParam`(required = false, value = ""unsubscribe"") String unsubscribe) {  [ Show » ] Grant Gochnauer added a comment - 04/Feb/10 08:45 AM Another comment with this (I'll create another JIRA) but I noticed that I use interfaces, `@RequestParam` annotation don't seem to set a default value. Example. This doesn't work:  ``` public ModelAndView unsubscribeUser(HttpServletRequest request, @RequestParam String id, @RequestParam(required = false) String unsubscribe) ```  but this does:  ``` public ModelAndView unsubscribeUser(HttpServletRequest request, @RequestParam(value = ""id"") String id, @RequestParam(required = false, value = ""unsubscribe"") String unsubscribe) { ```  The stack trace I receive is: 2/2/10 9:40:31:150 EST] 0000a466 ServletWrappe E   SRVE0068E: Uncaught exception thrown in one of the service methods of the servlet: spring. Exception thrown : org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.web.bind.annotation.support.HandlerMethodInvocationException: Failed to invoke handler method [public abstract org.springframework.web.servlet.ModelAndView com.xxxx.cwp.web.feature.caremail.MyController.showMyForm(javax.servlet.http.HttpServletRequest,java.lang.String)]; nested exception is java.lang.IllegalStateException: No parameter name specified for argument of type [java.lang.String], and no parameter name information found in class file either. at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:659) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:552) at javax.servlet.http.HttpServlet.service(HttpServlet.java:743) at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5279a076731cd2b3428a4b3b3a999c13ac1296dd, https://github.com/spring-projects/spring-framework/commit/56e119e822c88efd43fcc9b203f4bd7414803b02","closed","type: enhancement,","spring-projects-issues","2010-02-04T00:48:11Z","2015-09-22T17:34:32Z"
"","11321","When using interfaces on controllers, @SessionAttributes doesn't work [SPR-6655]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-6655](https://jira.spring.io/browse/SPR-6655?redirect=false)** and commented  If I implement an Interface on my Controller, my `@SessionAttributes` annotation has no effect.  Example code  ``` @Controller(""editProfileController"") @SessionAttributes(types = MyModel.class) @Order(10) public class EditProfileControllerImpl implements EditProfileController {  ... ```  ``` public interface EditProfileController {     @RequestMapping(value = ""/secure/editProfile.htm"", method = RequestMethod.POST)     ModelAndView saveEditProfilePage( .... ```  If I change it so the class doesn't implement the interface, everything works fine.    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f166f6799b248fb51f2cf77b522ccd0dcba36db","closed","type: bug,","spring-projects-issues","2010-01-07T05:36:55Z","2012-06-19T03:43:10Z"
"","11248","Custom JSR-303 constraints should be able to use custom naming convention for error messages [SPR-6582]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-6582](https://jira.spring.io/browse/SPR-6582?redirect=false)** and commented  I could be doing something incorrectly but I am following the Spring manual.  When I created a custom annotation:  ``` @Target({ METHOD, FIELD, ANNOTATION_TYPE }) @Retention(RUNTIME) @Constraint(validatedBy = SimpleTextValidator.class) @Documented public @interface SimpleText {      String message()                     default ""{errors.form.simpletext}"";     Class[] groups()                  default {};     Class","closed","type: enhancement,","spring-projects-issues","2009-12-18T07:04:01Z","2015-09-22T17:34:33Z"
"","11247","When using  Spring webflows no longer work [SPR-6581]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-6581](https://jira.spring.io/browse/SPR-6581?redirect=false)** and commented  When I replaced many of my MVC configuration with the new:   The webflows I have configured no longer show up as valid URLs.  ---  **Affects:** 3.0 GA  **Attachments:** - [applicationContext-webflow.xml](https://jira.spring.io/secure/attachment/16026/applicationContext-webflow.xml) (_3.18 kB_)  **Issue Links:** - #11433 mvc:annotation-driven not documented (_**""is duplicated by""**_)  1 votes, 2 watchers","closed","in: web,","spring-projects-issues","2009-12-18T05:29:27Z","2019-01-12T16:49:51Z"
"","11217","Spring webflow 2.0.8 get a stack overflow in 3.0RC3 [SPR-6551]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-6551](https://jira.spring.io/browse/SPR-6551?redirect=false)** and commented  I'm not really sure where to file this one but after upgrading to Spring 3.0 RC3 and using Spring Webflow 2.08 on our project, we're getting stack overflows from webflow:      at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleException(FlowExecutionImpl.java:605)     at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleException(FlowExecutionImpl.java:605)     at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleException(FlowExecutionImpl.java:605)     at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleException(FlowExecutionImpl.java:605)     at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleException(FlowExecutionImpl.java:605)     at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleException(FlowExecutionImpl.java:605)     at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleException(FlowExecutionImpl.java:605)     at org.springframework.webflow.engine.impl.FlowExecutionImpl.resume(FlowExecutionImpl.java:263)     at org.springframework.webflow.executor.FlowExecutorImpl.resumeExecution(FlowExecutorImpl.java:163)     at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:183)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:552)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1087)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:145)     at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)    ---  **Affects:** 3.0 RC3  **Attachments:** - [spring-servlet.xml](https://jira.spring.io/secure/attachment/16002/spring-servlet.xml) (_6.05 kB_)","closed","status: declined,","spring-projects-issues","2009-12-12T02:29:10Z","2019-01-12T16:38:35Z"
"","11215","Looking up beans from results of BeanFactoryUtils by name results in an interesting error [SPR-6549]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-6549](https://jira.spring.io/browse/SPR-6549?redirect=false)** and commented  In Spring 2.5.6, we use the following code snippets to pull custom annotated beans from the bean factory (modified for spring 3):  Map    beans    = BeanFactoryUtils.beansOfTypeIncludingAncestors((ListableBeanFactory) beanFactory, interfaceOfClass);  Then for each result we call: GenericBeanDefinition      bd                    = (GenericBeanDefinition) bf.getBeanDefinition(beanKey);  However, in Spring 3, we now receive the following error :  [12/11/09 10:30:55:738 CST] 00000021 WebApp        E   [Servlet Error]-[No bean named 'contextParameters' is defined]: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'contextParameters' is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:505)   ---  **Affects:** 3.0 RC3","closed","in: core,","spring-projects-issues","2009-12-11T02:34:08Z","2019-01-12T16:38:36Z"
"","11202","JDBC Template backward compatibility issue with 2.5.6 [SPR-6536]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-6536](https://jira.spring.io/browse/SPR-6536?redirect=false)** and commented  I'm not sure if this is a big deal or not since I can easily change the code on our end but it appears that the returning object from jdbc template's queryForList changed in 3.0  See attached screenshot   ---  **Affects:** 3.0 RC3  **Attachments:** - [Capture.PNG](https://jira.spring.io/secure/attachment/15992/Capture.PNG) (_6.03 kB_)","closed","status: declined,","spring-projects-issues","2009-12-09T06:38:02Z","2019-01-12T16:38:39Z"
"","11197","Autowiring MessageSource in a controller where the messageSource is defined in applicationContext results in an error [SPR-6531]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-6531](https://jira.spring.io/browse/SPR-6531?redirect=false)** and commented  For some reason, when my controllers are trying to auto-wire my ""MessageSource"" I'm getting an error about no matching type found.  What's interesting is that I have my message source defined in my applicationContext.xml but when it's autowired in a controller it cannot be found.  When I copy the definition of the message source into my spring-servlet.xml, the controller can find the bean. I found this error while upgrading our 30+ web app enterprise application to Spring 3.0RC3 from 2.5.6  I have my message source defined like: \ \ \ \ \classpath:com/client/resources/accuchek/us/ApplicationResources\ \ \ \ \ \ \   ---  **Affects:** 3.0 RC3","closed","type: enhancement,","spring-projects-issues","2009-12-07T04:27:57Z","2020-05-01T09:43:40Z"
"","11186","Upgrading from Sping 2.5.6 to 3.0RC3 on WAS 6.1 with an ear.context results in a startup exception [SPR-6520]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-6520](https://jira.spring.io/browse/SPR-6520?redirect=false)** and commented  My web.xml has:  \ \parentContextKey\ \ear.context\ \ java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:171) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1008) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:397) at org.springframework.web.context.ContextLoader.loadParentContext(ContextLoader.java:343) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:188) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at com.ibm.ws.wswebcontainer.webapp.WebApp.notifyServletContextCreated(WebApp.java:653) at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinish(WebApp.java:370) at com.ibm.ws.wswebcontainer.webapp.WebApp.initialize(WebApp.java:293) at com.ibm.ws.wswebcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:93) at com.ibm.ws.wswebcontainer.VirtualHost.addWebApplication(VirtualHost.java:162) at com.ibm.ws.wswebcontainer.WebContainer.addWebApp(WebContainer.java:673) at com.ibm.ws.wswebcontainer.WebContainer.addWebApplication(WebContainer.java:626) at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:335) at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:551)   ---  **Affects:** 3.0 RC3","closed","","spring-projects-issues","2009-12-04T06:05:18Z","2019-01-11T15:14:34Z"
"","11449","Change between Spring 3 RC1 and RC2 causing classloader issues with Grails on JBoss [SPR-6783]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-6783](https://jira.spring.io/browse/SPR-6783?redirect=false)** and commented  When Grails applications are deployed onto JBoss (either 4 or 5) they application tries to load Hibernate classes from JBoss regardless of the classloader isolation settings in jboss-web.xml  More details can be found in the relevant Grails issue: http://jira.codehaus.org/browse/GRAILS-5606  I traced back through the changes in the Grails codebase and the bug emerged when we upgraded from Spring 3 RC1 to Spring 3 RC2  I am rather at a loss as to what in Spring could break this. Some JBoss folks I spoke suggested that if the Thread context loader is being manipulated this could happen.   ---  **Affects:** 3.0 RC2, 3.0 RC3, 3.0 GA","closed","","spring-projects-issues","2010-01-31T21:34:03Z","2019-01-11T15:47:10Z"
"","11245","applicationContext.getBeansWithAnnotation(Foo) does not work if you have any factory beans that are not singleton [SPR-6579]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-6579](https://jira.spring.io/browse/SPR-6579?redirect=false)** and commented  The scenario is that when you have a transactional factory bean that is any other scope other than singleton and you call getBeansWithAnnotation(MyAnnotation) you get an IllegalArgumentException from the internals of Spring. The reason for the error is that the getTypeForFactoryBean method is returning null (instead of a Class) if the bean is a not a singleton. This null Class value is then passed to AnnotationUtils.findAnnotationOnBean which has an Assert statement that throws the exception.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bddb38d787452e7d0619237070a72168a5b2e201","closed","in: core,","spring-projects-issues","2009-12-17T22:46:32Z","2012-06-19T03:43:21Z"
"","11096","Add an option to disable the automatic creation of nested path in DataBinder and subclasses [SPR-6430]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-6430](https://jira.spring.io/browse/SPR-6430?redirect=false)** and commented  There is a bug in Grails related to the addition of Spring 3 handling of nested object graphs we have our own subclass of WebDataBinder that already handled nested object graphs but also had more inbuilt knowledge of the domain so for example if an association was nullable it wouldn't automatically create the nested object.  The problem is Grails data binder is still doing the right thing in this regard, but when it passes of control the super impl it doesn't have this additional knowledge so its creating the nested object graphs which breaks Grails' data binding.  We need to add the ability to call setAutoGrowNestedPaths on the underlying BeanWrapper instance   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb97ca32c460ed1763384edba57cf615b3bb193c","closed","type: enhancement,","spring-projects-issues","2009-11-24T00:20:34Z","2012-06-19T03:44:04Z"
"","11094","Placeholders not resolved when using multiple PropertyPlaceHolderConfigurers [SPR-6428]","**[Gisbert van Rossum](https://jira.spring.io/secure/ViewProfile.jspa?name=gizit)** opened **[SPR-6428](https://jira.spring.io/browse/SPR-6428?redirect=false)** and commented  When using 2 PropertyPlaceHolderConfigurers, placeholders declared (and given a value) in the first PPC are not resolved in the second PPC.  \ \ \ \ \ \ \myResourceDir\ \ \ \ \ \ \ \ \ \ \ \ \classpath:${resourceDirPlaceHolder}/props.properties\ \ \ \  this configuration results in:  java.io.FileNotFoundException: class path resource [${resourceDirPlaceHolder}/props.properties] cannot be opened because it does not exist  ---  **Affects:** 2.5.6  **Attachments:** - [multiplePPCs.zip](https://jira.spring.io/secure/attachment/15954/multiplePPCs.zip) (_4.84 kB_)  **Issue Links:** - #10389 only the first PropertyPlaceHolderConfigurer is initialized. Others are not (_**""is duplicated by""**_) - #10389 only the first PropertyPlaceHolderConfigurer is initialized. Others are not  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/09aea36859bb0d806eb4085a2c154cb781bd8345  2 votes, 2 watchers","closed","in: core,","spring-projects-issues","2009-11-23T22:39:28Z","2019-01-12T16:38:48Z"
"","11590","TimerFactoryBean extension in order to handle one Timer per ScheduledTimerTask [SPR-6925]","**[Giosue Messineo](https://jira.spring.io/secure/ViewProfile.jspa?name=giosi)** opened **[SPR-6925](https://jira.spring.io/browse/SPR-6925?redirect=false)** and commented  When using the TimerFactoryBean with several ScheduledTimerTasks their execution is serialized as all Tasks are registered to one Timer.  The TimerFactoryBean can therefore be used only in cases the ScheduledTimerTasks are not long running and a there is no guarantee required to run correctly at the configured interaval since last execution of the task.  To still use the concept of TimerFactoryBean with Java Timers I implemented based on this as work-around a TimerPerTaskFactoryBean. This Factory handles one Timer per ScheduledTimerTask in order to avoid a serialization of the Task execution.  It would be helpful if the existing TimerFactoryBean could be enhanced with a property (e.g. a boolean) which tells the Factory if to use one Timer for all ScheduledTimerTasks or one Timer per ScheduledTimerTask.   ---  **Affects:** 2.0.8","closed","type: enhancement,","spring-projects-issues","2010-03-02T21:16:23Z","2012-06-19T09:36:20Z"
"","11304","Error in JavaConfig sample code - Paragraph 3.11.2.2 Building the container programmatically [SPR-6638]","**[Gildas Cuisinier](https://jira.spring.io/secure/ViewProfile.jspa?name=hikage)** opened **[SPR-6638](https://jira.spring.io/browse/SPR-6638?redirect=false)** and commented  In http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-java-instantiating-container-register :  ``` public static void main(String[] args) {     ApplicationContext ctx = new AnnotationConfigApplicationContext();     ctx.register(AppConfig.class, OtherConfig.class);     ctx.register(AdditionalConfig.class);     ctx.refresh();     MyService myService = ctx.getBean(MyService.class);     myService.doStuff(); } ```  The register method is defined on AnnotationConfigApplicationContext and not ApplicationContext interface.  The code must be :  ``` public static void main(String[] args) {     AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext();     ctx.register(AppConfig.class, OtherConfig.class);     ctx.register(AdditionalConfig.class);     ctx.refresh();     MyService myService = ctx.getBean(MyService.class);     myService.doStuff(); } ```    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f7b0a2c0a218a1278ae1c71d340a99e60d69128e","closed","type: bug,","spring-projects-issues","2010-01-04T21:18:03Z","2012-06-19T03:42:50Z"
"","11303","Error in JavaConfig sample code [SPR-6637]","**[Gildas Cuisinier](https://jira.spring.io/secure/ViewProfile.jspa?name=hikage)** opened **[SPR-6637](https://jira.spring.io/browse/SPR-6637?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-java-basic-concepts  ``` @Configuration public class AppConfig {     @Bean     public void MyService myService() {         return new MyServiceImpl();     } } ```  I think 'void' is not necessary.  ---  **Issue Links:** - #11298 Incorrect method signature in the first code snippet in section 3.11.1 of the spring documentation (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f7b0a2c0a218a1278ae1c71d340a99e60d69128e","closed","type: bug,","spring-projects-issues","2010-01-04T21:10:19Z","2019-01-11T16:14:51Z"
"","11199","Document use of ControllerClassNameHandlerMapping with Spring MVC @Controllers [SPR-6533]","**[Gildas Cuisinier](https://jira.spring.io/secure/ViewProfile.jspa?name=hikage)** opened **[SPR-6533](https://jira.spring.io/browse/SPR-6533?redirect=false)** and commented  Using the convention forcing controllers to implement the Controller interface or extend MultiActionController.  It would be interesting to have a way to use the Convention over Configuration with annotated controllers and thus have more flexibility on the method signatures .   ---  **Affects:** 3.0 RC3  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16347/mylyn-context.zip) (_12.14 kB_) - [web-conventions.patch](https://jira.spring.io/secure/attachment/16346/web-conventions.patch) (_5.80 kB_)","closed","type: documentation,","spring-projects-issues","2009-12-07T18:35:20Z","2012-06-19T03:44:05Z"
"","10918","ExecutorBeanDefinitionParser  must not directly depends on backport concurrent [SPR-6250]","**[Gildas Cuisinier](https://jira.spring.io/secure/ViewProfile.jspa?name=hikage)** opened **[SPR-6250](https://jira.spring.io/browse/SPR-6250?redirect=false)** and commented  If you use the 'executor' element of the task namespace ( or simply do a  new ExecutorBeanDefinitionParser() ), there are an error :  Exception in thread ""main"" java.lang.NoClassDefFoundError: edu/emory/mathcs/backport/java/util/concurrent/ThreadPoolExecutor$AbortPolicy  And, even with JDK 6 or 5. But they possess java.util.currurent directly, it should not be any errors.  ---  **Affects:** 3.0 M4, 3.0 RC1  **Issue Links:** - #10829 Task namespace usage should not require concurrent backport JARs (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2009-10-19T22:16:31Z","2019-01-12T16:50:06Z"
"","11678","Deadlock-Retrying in @Transactional annotation [SPR-7013]","**[Gert-Jan Schouten](https://jira.spring.io/secure/ViewProfile.jspa?name=gertjan_schouten)** opened **[SPR-7013](https://jira.spring.io/browse/SPR-7013?redirect=false)** and commented  If you use locking on databases, you always have to provide for the situation that your transaction rolls back because of being selected as a deadlock victim. The usual behaviour to deal with this situation is to retry some time later (e.g. 1s).  I think this is something that could be handled by a framework like Spring. Therefore, I suggest some additional properties for the `@Transactional` annotation:  -deadlockRetryAttempts: The number of attempts a deadlock is retried, before throwing an Exception -deadlockRetryInterval: The number of milliseconds between retries -deadlockExceptionClass: Since the specific deadlock Exception is dependent upon the JDBC-driver, you can specify the Exception that represents a deadlock, this does not have to be the ""outer"" Exception, but it can be in the cause-hierarchy too.  A complete example of such an annotation would be the following:  `@Transactional`( isolation=Isolation.SERIALIZABLE, propagation=Propagation.REQUIRED, readOnly=false, deadlockRetryAttempts=5, deadlockRetryInterval=1000, deadlockExceptionClass=WhatEverException.class)   ---  **Affects:** 3.0.1","closed","status: bulk-closed,","spring-projects-issues","2010-03-19T05:33:50Z","2019-01-12T03:50:27Z"
"","11388","Bean property for disabling bean / excluding from context [SPR-6722]","**[Gerrit Brehmer](https://jira.spring.io/secure/ViewProfile.jspa?name=gbrehmer)** opened **[SPR-6722](https://jira.spring.io/browse/SPR-6722?redirect=false)** and commented  It would be nice if it were possible to set ""lazy-init"" (and autowire-candidate) with a dynamic property (values getting from PropertyPlaceholderConfigurer) or introduce a new property ""enabled"" like in the jdbc-namespace (jdbc:initialize-database) to allow disabling beans in the xml configuration.  In my case i have a singelton bean, which is pushing data in a extra thread. To disable pushing data I could add a property to the bean class but I think it would be nice to add this feature to all beans without need to change them (like beans from third-party libs).   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-01-19T19:32:44Z","2018-12-27T11:04:56Z"
"","11041","Support for javax.validation annotations on @PathVariable, @RequestHeader, @RequestParam [SPR-6380]","**[Gerrit Brehmer](https://jira.spring.io/secure/ViewProfile.jspa?name=gbrehmer)** opened **[SPR-6380](https://jira.spring.io/browse/SPR-6380?redirect=false)** and commented  I thought this was already done, because support for controller method-parameter validation should be available for all parameters.  I there a reason to exclude annotated (`@RequestParam`, etc.) method parameters? Is it not possible to validate primitive values?  Simple example: For Paging-Support i need two request parameters: ""start"" & ""size"". ""start"" must have a positive value or 0 and ""size"" must have a positive value and also a maximum set.  ---  **Affects:** 3.0 RC2, 4.0.5  **Issue Links:** - #14473 Support JSR 303 `@Valid` on `@PathVariable`  75 votes, 80 watchers","closed","status: superseded,","spring-projects-issues","2009-11-17T20:59:08Z","2022-07-05T09:37:19Z"
"","11475","AbstractRoutingDataSource should only use defaultTargetDataSource on key null and should fail-fast on a non-existing key [SPR-6809]","**[Geoffrey De Smet](https://jira.spring.io/secure/ViewProfile.jspa?name=ge0ffrey)** opened **[SPR-6809](https://jira.spring.io/browse/SPR-6809?redirect=false)** and commented  We got 2 dataSources: * ""productionDB"" (also set as defaultTargetDataSource) * ""testDB""  Here is what we expected to return  if we ask determineTargetDataSource: * ""productionDB"" => the production DB * ""testDB"" => the test DB * null => the production DB * ""testDb"" => Exception, but instead we got the production DB * ""nonsence"" => Exception, but instead we got the production DB  I think this code:  ``` protected DataSource determineTargetDataSource() {      Assert.notNull(this.resolvedDataSources, ""DataSource router not initialized"");      Object lookupKey = determineCurrentLookupKey();      DataSource dataSource = (DataSource) this.resolvedDataSources.get(lookupKey);      if (dataSource == null) {           dataSource = this.resolvedDefaultDataSource;      }      if (dataSource == null) {           throw new IllegalStateException(""Cannot determine target DataSource for lookup key ["" + lookupKey + ""]"");      }      return dataSource; } ```  should change into this code:  ``` protected DataSource determineTargetDataSource() {      Assert.notNull(this.resolvedDataSources, ""DataSource router not initialized"");      Object lookupKey = determineCurrentLookupKey();      DataSource dataSource;      if (lookupKey == null) {          dataSource = this.resolvedDefaultDataSource;      } else {          dataSource = (DataSource) this.resolvedDataSources.get(lookupKey);          if (dataSource == null) {              throw new IllegalStateException(""Cannot determine target DataSource for lookup key ["" + lookupKey + ""]"");          }      }      return dataSource; } ```    ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aafe8ef9be12528eba45603ecdc04e41f8f8ef31","closed","type: enhancement,","spring-projects-issues","2010-02-07T20:00:25Z","2012-06-19T03:43:52Z"
"","11071","XA Transactions fail on MySQL Server after Spring version 2.5.3 [SPR-6405]","**[Gavin Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=doahh)** opened **[SPR-6405](https://jira.spring.io/browse/SPR-6405?redirect=false)** and commented  Additional forum posts:  http://forum.springsource.org/showthread.php?t=80310 http://fogbugz.atomikos.com/default.asp?community.6.1073.1  The issue only starts after upgrading from Spring 2.0.8 to Spring 2.5.6 (but another forum post says the same issue arises after upgrading from Spring 2.5.3) so it seems that this problem was introduced in the Spring 2.5.6 code (??). The issue seems to be caused by changes in Spring that result in the calling of XA transaction commands that the MySQL server does not support. This did not happen before Spring 2.5.6 and I tried ONLY upgrading Spring and not Hibernate or Atomikos. After the problem occurred I then upgraded Hibernate and Atomikos and the problem remained.  I think the forum posts contain all the information that I can provide. If you think I can provide any more information then let me know.  The only solution I could find was to stop using XA transactions and start using non-XA transactions instead.   ---  **Affects:** 2.0.9, 2.5.4, 2.5.5, 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2  **Reference URL:** http://forum.springsource.org/showthread.php?t=80427  **Attachments:** - [applicationContext-prosoc-db-sessionfactory.xml](https://jira.spring.io/secure/attachment/16110/applicationContext-prosoc-db-sessionfactory.xml) (_14.71 kB_) - [applicationContext-prosoc-db-xa-datasource.xml](https://jira.spring.io/secure/attachment/16111/applicationContext-prosoc-db-xa-datasource.xml) (_7.35 kB_)  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2009-11-21T20:29:49Z","2019-01-12T16:38:49Z"
"","11204","Missing transitive Maven dependency when using Velocity [SPR-6538]","**[Gary Thomas](https://jira.spring.io/secure/ViewProfile.jspa?name=bestguy)** opened **[SPR-6538](https://jira.spring.io/browse/SPR-6538?redirect=false)** and commented  Getting class not found exception for VelocityEngineFactoryBean using Spring 3.0 RC2, using Velocity configurer with these dependencies:                       org.springframework             spring-web             ${spring.version}                                    org.springframework             spring-webmvc             ${spring.version}           The above actually depends on:  \ \org.springframework\ \spring-context-support\ \${spring.version}\ \  which is where org.springframework.ui.velocity.VelocityEngineFactoryBean is located.    ---  **Affects:** 3.0 RC2  **Reference URL:** http://forum.springsource.org/showthread.php?p=272590#post272590  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16329/mylyn-context.zip) (_2.92 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec577f8e2402fc37e4eba3ea49158e2c3d21d8d0","closed","type: task,","spring-projects-issues","2009-12-09T12:44:00Z","2012-06-19T03:43:23Z"
"","11725","Need the Ability to Determine if a JMS Listener has Created a Consumer for a Destination [SPR-7065]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-7065](https://jira.spring.io/browse/SPR-7065?redirect=false)** and commented  Spring Integration has an option to use a topic to back a JmsDestinationBackedMessageChannel. The channel starts the listener, which processes the session and consumer establishment on a separate thread; start() returns after waking that thread. There is, therefore, a race condition where the client of the channel can send message(s) before the topic is subscribed to. These message(s) will be lost.  We need the ability in the channel to block sends until the listener has subscribed; one way to achieve this would be an API (or a callback) on the listener to determine if the consumer has been created.  It is not clear how prevalent this issue would be in the ""real"" world, but it causes sporadic failures of unit tests.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/218ee6d24c991f841ee91085c2bb26d6198db8c6","closed","type: enhancement,","spring-projects-issues","2010-04-03T03:16:18Z","2012-06-19T03:43:25Z"
"","11631","spring-test module should depend on 'junit-dep' instead of 'junit' Maven artifact [SPR-6966]","**[Gary Frost](https://jira.spring.io/secure/ViewProfile.jspa?name=garyfrost75)** opened **[SPR-6966](https://jira.spring.io/browse/SPR-6966?redirect=false)** and commented  JUnit dependencies include a bundled version of hamcrest, for projects already bringing in hamcrest (later versions) this causes significant issue.  Please change pom to use junit-dep rather than junit which does not include hamcrest in the jar but includes it as dependency and therefore maven can manage any conflicts to bring in the later project version.  ---  **Issue Links:** - #14573 Spring test module shouldn't pull in hamcrest-all as hard dependency - #14678 Upgrade to JUnit 4.11  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/369d77bdf0992d95480a0250d553fadb4c186c7a","closed","type: task,","spring-projects-issues","2010-03-10T00:59:37Z","2019-01-11T16:30:25Z"
"","11728","A potential unresolved compilation problem [SPR-7068]","**[Gang Shu](https://jira.spring.io/secure/ViewProfile.jspa?name=gxs213)** opened **[SPR-7068](https://jira.spring.io/browse/SPR-7068?redirect=false)** and commented  I have found that a potential bug at the class of ""AspectJAnnotation"" in the file of ""..\spring-framework-2.5.6.SEC01-with-dependencies\spring-framework-2.5.6.SEC01\tiger\src\org\springframework\aop\aspectj\annotation\AbstractAspectJAdvisorFactory.java"".  In the line of 239 and 240, there are two declarations: private final String expression; private final String argNames; I noticed that the variables ""expression"" and ""argNames"" were declared in ""final"" type, but they have not been initialized yet.  In the lines between 295 and 301, two functions are implemented as follows: public String getPointcutExpression() { return this.expression; }      public String getArgNames() {         return this.argNames;     }  They are trying to access the value of variables which have not been initialized.  I have reviewed the corresponding byte code as well. After compiling the buggy source code, the Java compiler have already found the problem and generated an abnormal byte code result. For example, the compiled result for the function of ""getAnnotationType"" is listed as following:  0:    new         (23) 3:    dup 4:    ldc        ""Unresolved compilation problem: \n"" (42) 6:    invokespecial    java.lang.Error.\ (Ljava/lang/String;)V (27) 9:    athrow  Considering the changed function behavior, I think the meaning of the generated byte code is totally different from that of the original source code.    ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ecda2aee4a4fdcf1877c17647a61de713bfd0aaf","closed","in: core,","spring-projects-issues","2010-04-05T08:26:36Z","2019-01-11T13:25:30Z"
"","11369","SpringValidatorAdapter as 'Spring Validator' should allow configurable errorCode for JSR-303 constraint [SPR-6703]","**[Fried Hoeben](https://jira.spring.io/secure/ViewProfile.jspa?name=fhoeben)** opened **[SPR-6703](https://jira.spring.io/browse/SPR-6703?redirect=false)** and commented  At the moment SpringValidatorAdapter always uses the (JSR-303) constraint's annotation name as error code in validate(). I would like to use a different error code (i.e. the message template), since I have constraints that use a single annotation but can have different messages to show to the user (depending on the actual content of the property).  At the moment I see no way to control this, except by post-processing the validation result of the LocalValidatorFactoryBean, which is not really what I want to do.  From my perspective using the annotation's simple name (which is what the code does today) as the errorCode in the FieldError is really just wrong: it loses the information provided in the constraint when it selected a messageTemplate (i.e. JSR-303 gives flexibility to have multiple messages from a single constraint and Spring removes that information). Am I overlooking something?   ---  **Affects:** 3.0 GA  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-01-14T20:52:43Z","2019-01-12T03:50:37Z"
"","11804","NullPointerException in AnnotationMethodHandlerAdapter if HttpHeaders in ResponseEntity are empty [SPR-7145]","**[Florian Rampp](https://jira.spring.io/secure/ViewProfile.jspa?name=jack_kerouac)** opened **[SPR-7145](https://jira.spring.io/browse/SPR-7145?redirect=false)** and commented  A NullPointerException occurs, if a controller method is invoked, that returns a ResponseEntity and the HttpHeaders passed to the constructor of ResponseEntity are empty. A code snippet, that results in the exception:  ```   @RequestMapping(method = RequestMethod.GET) public ResponseEntity unregisterEndpoint() { 	return new ResponseEntity(new HttpHeaders(), HttpStatus.NOT_FOUND); } ```  If I change the constructor to use a string parameter for the HTTP body, the error does not occur.  ``` @RequestMapping(method = RequestMethod.GET) public ResponseEntity unregisterEndpoint() { 	return new ResponseEntity("""", HttpStatus.NOT_FOUND); } ```  So it seems to be connected to the empty HttpHeaders object.  ```   java.lang.NullPointerException 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.writeWithMessageConverters(AnnotationMethodHandlerAdapter.java:927) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.handleHttpEntityResponse(AnnotationMethodHandlerAdapter.java:915) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.getModelAndView(AnnotationMethodHandlerAdapter.java:847) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:423) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:409) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:582) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:643) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at sun.reflect.GeneratedMethodAccessor36.invoke(Unknown Source) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:616) 	at org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:269) 	at java.security.AccessController.doPrivileged(Native Method) 	at javax.security.auth.Subject.doAsPrivileged(Subject.java:537) 	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:301) 	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:162) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:283) 	at org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:56) 	at org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:189) 	at java.security.AccessController.doPrivileged(Native Method) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:185) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) 	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) 	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454) 	at java.lang.Thread.run(Thread.java:636) ```    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a910ce68ff132e425e7f7d5e13254b1d6e0dd810","closed","type: bug,","spring-projects-issues","2010-04-28T01:49:11Z","2012-06-19T03:43:37Z"
"","11626","@ResponseStatus does not work with @ExceptionHandler [SPR-6961]","**[Florent Ramiere](https://jira.spring.io/secure/ViewProfile.jspa?name=framiere)** opened **[SPR-6961](https://jira.spring.io/browse/SPR-6961?redirect=false)** and commented  When this method is executed  ``` @ExceptionHandler(RuntimeException.class) @ResponseStatus(value = HttpStatus.NOT_FOUND) public void toto(OutputStream output) throws IOException {   ... } ```  The specified response status is not sent to the client.  Linked to #11567  ---  **Affects:** 3.0.1  **Issue Links:** - #10676 `@ResponseStatus` on `@ExceptionHandler` method is ignored (_**""duplicates""**_) - #11567 `@ResponseBody` does not work with `@ExceptionHandler`","closed","in: web,","spring-projects-issues","2010-03-09T03:38:19Z","2019-01-13T07:54:59Z"
"","11567","@ResponseBody does not work with @ExceptionHandler [SPR-6902]","**[Florent Ramiere](https://jira.spring.io/secure/ViewProfile.jspa?name=framiere)** opened **[SPR-6902](https://jira.spring.io/browse/SPR-6902?redirect=false)** and commented  When this method is executed  ``` @ExceptionHandler @ResponseBody public String dummyExceptionHandler(Exception e) {     return e.getMessage(); } ```  Spring mvc tries to resolve the view using the method output --> 404. As the method is annotated with `@ResponseBody`, it should directly write the method output to the response.  ---  **Affects:** 3.0.1  **Attachments:** - [spr-6902.zip](https://jira.spring.io/secure/attachment/17505/spr-6902.zip) (_32.61 kB_)  **Issue Links:** - #11850 AnnotationMethodHandlerAdapter and AnnotationMethodHandlerExceptionResolver should supports MappingJacksonHttpMessageConverter by default (_**""is duplicated by""**_) - #12476 Add support for `@Request-`/`@ResponseBody` to `@ExceptionHandler` methods (_**""is duplicated by""**_) - #11626 `@ResponseStatus` does not work with `@ExceptionHandler`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/157623b47fa3bc9fd8d9a3d8803bcf6bf9a50b80, https://github.com/spring-projects/spring-framework/commit/7f8c91a52dcea4810acebb0f9ebe86233a3d2063  0 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-24T02:46:12Z","2019-01-13T07:55:10Z"
"","11468","@Value on should have highest priority when mixed with annotations supporting default values [SPR-6802]","**[Florent Ramiere](https://jira.spring.io/secure/ViewProfile.jspa?name=framiere)** opened **[SPR-6802](https://jira.spring.io/browse/SPR-6802?redirect=false)** and commented  Currently the _org.springframework.web.bind.annotation.support.HandlerMethodInvoker#resolveHandlerArguments_ method applies the default value provided by order of appearance in the method definition. It takes the default value from the following annotations * `@RequestParam`#defaultValue * `@RequestHeader`#defaultValue * `@CookieValue`#defaultValue * ... and **`@Value`#value**  `@Value` is used mostly to specify default values for parameters annotated with `@PathVariable` and `@RequestBody` that do not support default values.  When mixing `@Value` and an annotation that supports default value, specifying `@Value` should either * be forbidden (exception : use defaultValue instead) * or should _not_ rely on order: `@Value` should override the annotation default value  Here is an example of the current _slightly_ misleading the behavior  ``` @RequestMapping(""/defaultValues"") public void defaultValues(@Value(""before"") @RequestParam(required = false) String before, @RequestParam(required = false) @Value(""after"") String after) {   AssertUtil.isTrue(""before"".equals(before));   AssertUtil.isTrue(""after"".equals(after)); } ```    ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-02-04T19:21:47Z","2011-12-16T14:19:50Z"
"","11467","Authorize @ModelAttribute to play along with @RequestParam/@RequestHeader/... [SPR-6801]","**[Florent Ramiere](https://jira.spring.io/secure/ViewProfile.jspa?name=framiere)** opened **[SPR-6801](https://jira.spring.io/browse/SPR-6801?redirect=false)** and commented  Currently the rule for web handler parameter annotations is very restrictive: here is the exception thrown  > **Handler parameter annotations are exclusive choices**  However the _`@ModelAttribute`_ does _not interfer_ with the other annotations, therefore the previous rule should be more lenient.  Here is what I wish I could do :  ``` @RequestMapping(""/"")  public void form(@ModelAttribute @RequestParam(""accountId"") Account account, @ModelAttribute  @RequestParam(value = ""roleId"") Role role) {    // controller code } ```  Here is what I need to write :  ``` @RequestMapping(""/"")  public void form(@RequestParam(""accountId"") Account account,  @RequestParam(value = ""roleId"") Role role, Model model) {   model.addAttribute(""account"", account);   model.addAttribute(""role"", role);    // controller code } ```  (We used to do this kind of code _before_ the new _Formatter/Converter_ mechanisms were introduced)  The _org.springframework.web.bind.annotation.support.HandlerMethodInvoker#resolveHandlerArguments_ method should count the number of model attributes  ``` if (ModelAttribute.class.isInstance(paramAnn)) {   ModelAttribute attr = (ModelAttribute) paramAnn;   attrName = attr.value();   modelAttributeFound++; } ```  and check for the _`@ModelAttribute`_ unicity  ``` if (modelAttributeFound > 1) {   throw new IllegalStateException(""Handler parameter annotations can support only one "" + ModelAttribute.class.getSimpleName() + "" : "" + handlerMethod); } ```  ---  **Affects:** 3.0 GA  **Issue Links:** - #12264 `@PathVariable` and `@ModelAttribute` incompatibility prevent me from having a nice ""update"" handler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b08c7f6e00706c9a625eccc99bef6e221f61e0aa  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-04T18:38:51Z","2019-01-13T07:55:37Z"
"","11465","When  binds a collection, the formatter are not used. [SPR-6799]","**[Florent Ramiere](https://jira.spring.io/secure/ViewProfile.jspa?name=framiere)** opened **[SPR-6799](https://jira.spring.io/browse/SPR-6799?redirect=false)** and commented  When binding a  to an object, the formatter is applied to all options. When binding a  to a collection, the formatter is not applied when rendering the options, the toString is called instead.  Here is an example of this behavior  ``` class Address {     private Integer addressId;     private String city;     private Integer version;          // getter     // setters } ```  ``` class Domain {     private Address address;     private List manyAddresses;          // getter     // setters } ```  ``` class Controller {   @RequestMapping(""/form"")   public void form(@ModelAttribute Domain domain, Model model) {       model.addAttribute(""addresses"", addressService.find()); // returns Paris, New-York, Tokyo    } } ```  ``` class AddressFormatter implements Formatter{    @Autowired   private AddressService addressService;    public Class getTarget() {     return Address.class;   }      public String print(Address address, Locale locale) {     return address == null ? """" : address.getCity();   }    public Address parse(String text, Locale locale) throws ParseException {     if (text == null || text.length() == 0) {       return new Address();     }     Address address = addressService.get(new Integer(text));     return address != null ? address : new Address();   } } ```  view  ```    1st select                2nd select             ```  Outputs * 1st select : success * 2st select : the addresses are not formatted  See the screenshot attached  ---  **Affects:** 3.0 GA  **Attachments:** - [bug-tag-lib-formatter.png](https://jira.spring.io/secure/attachment/16143/bug-tag-lib-formatter.png) (_5.41 kB_)  **Issue Links:** - #11171 form:checkboxes doesn't use spring 3 converters for items comparison  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cdee53812995abd232beb0e66c6efb2a9286a7ea","closed","type: bug,","spring-projects-issues","2010-02-04T13:42:50Z","2019-01-11T15:46:39Z"
"","11457","@RequestParam, @CookieValue and @RequestHeader default-value and required are not in sync [SPR-6791]","**[Florent Ramiere](https://jira.spring.io/secure/ViewProfile.jspa?name=framiere)** opened **[SPR-6791](https://jira.spring.io/browse/SPR-6791?redirect=false)** and commented  When using a custom editor  ``` public class AccountEditor extends PropertyEditorSupport {   @Override   public void setAsText(String text) {     setValue(new Account(""dummy""));   }    @Override   public String getAsText() {     Account account = (Account) getValue();     return (account != null ? account.toString() : """");   } } ```  and registering it  ``` @InitBinder public void initBinder(WebDataBinder binder) {   binder.registerCustomEditor(Account.class, new AccountEditor(accountService)); } ```  When creating the following _updateForm_ action, I want spring to give me an **Account** object created via the **AccountEditor**. In the case where the request param is not present in the http request, the PropertyEditor should use the default value specified in the `@RequestParam` annotation.  As the `@RequestParam` javadoc says  ``` The default value to use as a fallback. Supplying a default value implicitly sets #required to false. ```  And because the defaultValue is by set at **""""** by default I need to set manually **required = false**  ``` @RequestMapping(""/updateForm"") public void updateForm(@RequestParam(value=""accountId"",required=false,defaultValue="""") Account account, Model model) {   assert account != null; } ```  The behavior I get is the following :  * /updateForm?accountId=xxx : passes * /updateForm : assertion exception raised  Therefore, either `@RequestParam` default value should be **null** or the HandlerMethodInvoker class should handle the **""""** default value as follows (in the _resolveRequestParam_ method)  ``` if (paramValue == null) {   if (StringUtils.hasText(defaultValue)) {     paramValue = resolveDefaultValue(defaultValue);   }   else if (required) {     raiseMissingParameterException(paramName, paramType);   }   paramValue = checkValue(paramName, paramValue, paramType); } ```  When requesting a default value at """", it should probably be  ``` if (paramValue == null) { --> if (!required) {     paramValue = resolveDefaultValue(defaultValue);   }   else {     raiseMissingParameterException(paramName, paramType);   }   paramValue = checkValue(paramName, paramValue, paramType); } ```  `@RequestParam`, `@CookieValue` and `@RequestHeader` share the same behavior for default values.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11544 An optional `@RequestParam` parameter of an `@InitBinder` method is filled with garbarge instead of null, if the corresponding parameter is missing on the URL  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97059f4e18da89106ea02d218e3f97a649162ddc  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2010-02-02T12:21:13Z","2019-01-13T07:55:39Z"
"","11451","Improve message error when the MarshallingView modelKey attribute is not valid [SPR-6785]","**[Florent Ramiere](https://jira.spring.io/secure/ViewProfile.jspa?name=framiere)** opened **[SPR-6785](https://jira.spring.io/browse/SPR-6785?redirect=false)** and commented  When a user specifies an invalid key in the modelKey attribute a NPE exception occurs. An appropriate error message would help the developer.  ```xml    	 	  ```  gives  ```   java.lang.NullPointerException         at org.springframework.web.servlet.view.xml.MarshallingView.locateToBeMarshalled(MarshallingView.java:125)         at org.springframework.web.servlet.view.xml.MarshallingView.renderMergedOutputModel(MarshallingView.java:98)         at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250)         at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1060) ```    ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-02-01T00:05:04Z","2012-06-19T03:43:30Z"
"","11598","@Secured/@RequestMapping in Conjuncton with InitializingBean interface fails [SPR-6933]","**[fas](https://jira.spring.io/secure/ViewProfile.jspa?name=smegforbrains)** opened **[SPR-6933](https://jira.spring.io/browse/SPR-6933?redirect=false)** and commented  public class MyController implements InitializingBean {      @Secured(value=""ROLE_ADMIN"")     @RequestMapping(method = RequestMethod.GET, value = ""/{id}/edit"")     public String getView(Model model, @PathVariable(""id"") long id) {         return ""some view"";     }  }  gives ""WARN PageNotFound:962 - No mapping found for HTTP request with URI[...]"" while removing ""implements InitializingBean"" from MyController fixes the issue.   ---  **Affects:** 3.0.1","closed","in: core,","spring-projects-issues","2010-03-03T09:26:43Z","2019-01-12T16:38:11Z"
"","11474","Unnecessary conversion to typed Map resulted in injection error (worked in 2.5.X) [SPR-6808]","**[Eugene Lucash](https://jira.spring.io/secure/ViewProfile.jspa?name=e.lucash)** opened **[SPR-6808](https://jira.spring.io/browse/SPR-6808?redirect=false)** and commented  Something changed in BeanWrapperImpl/TypeConverterDelegate so previosly working (in 2.5.X) code and configuration now failing using 3.0.0.RELEASE, breaking some compatibility.  Issue is really minor, but requires to specially adapt code/configuration to run on 3.0.0  Unnecessary conversion to typed Map resulted in conversion error Here's example to illustrate/reproduce failure.  ```java public class ReadonlyRegistry extends Map {   ...   public void put(String key, Registered r) {      // modifications intentionally disallowed,      // but type converter wants to reconvert all Registered items      throw new UnsupportedOperationException();   }   ... }  public class UsesRegistry {     // Contructor dependency does not specifies typed Map explicitly,     // but specifies class, that extends Map with statically known actual type parameters     public UsesRegistry (ReadonlyRegistry registry){           ....     } } ```  ```xml        ```  Some simple(or naive) fix could be checking that if required and actual type matches and that type has no own type parameters (excluding supertypes with specified actual type parameters), so skip check for typed Map conversion. Or if existing in 3.0.0 behavior is desired, than some note could be added to documentation (on using beans subclassed from typed map with actual type parameters specified)   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6c0d934b92c86cd2b20a85621cee688991dfbbcd","closed","in: core,","spring-projects-issues","2010-02-07T10:10:25Z","2012-06-19T03:44:02Z"
"","11519","In JPA, the inner entitymanager doesn't inherit the value of flushMode from the shared entityManager [SPR-6853]","**[Erik Martino Hansen](https://jira.spring.io/secure/ViewProfile.jspa?name=xylifyx)** opened **[SPR-6853](https://jira.spring.io/browse/SPR-6853?redirect=false)** and commented  It is not quite obvious when a new entitymanager is created and how often you need to call em.setFlushMode(FlushModeType.COMMIT); on the shared entity manager if you want a value other than FlushModeType.AUTO.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2010-02-16T18:49:57Z","2012-06-19T09:36:26Z"
"","10900","Property Placeholder does not work for ""concurrency"" attribute for the jms namespace [SPR-6232]","**[Eric](https://jira.spring.io/secure/ViewProfile.jspa?name=backofthecup)** opened **[SPR-6232](https://jira.spring.io/browse/SPR-6232?redirect=false)** and commented  Unable to use property placeholer for an attribute value in the jms namespace.  Would like to do be able to do this:                     ...               ...                 ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cc0a9bc2b07e95ccf73adebc36caa65d8b3e90d","closed","type: enhancement,","spring-projects-issues","2009-10-13T12:23:36Z","2012-06-19T03:43:52Z"
"","11848","Add @ComponentScan annotation [SPR-7194]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-7194](https://jira.spring.io/browse/SPR-7194?redirect=false)** and commented  It would be useful to have the `@ComponentScan` from JavaConfig in Spring core to enable programmatic component scanning.  The workaround of using AnnotationConfigWebApplicationContext and setting ""init-param"" of ""contextConfigLocation"" is OK, but not a great long-term solution.  The referenced thread talks about porting some of the features of JavaConfig that didn't make it into Spring 3.0.  So hopefully the use-case is well appreciated - I'm just filing this bug for tracking purposes.  ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=80761  **Issue Links:** - #12078 Support Java-Based Application Configuration - #12956 Allow recursive use of `@ComponentScan` - #12794 Introduce ComponentScanSpec for ComponentScanBeanDefinitionParser (context:component-scan) (_**""supersedes""**_)  13 votes, 9 watchers","closed","has: votes-jira,","spring-projects-issues","2010-05-12T07:11:25Z","2019-01-13T07:54:00Z"
"","11823","Need a way to ask PropertyPlaceholderConfigurer to resolve a placeholder string [SPR-7164]","**[Eric Pederson](https://jira.spring.io/secure/ViewProfile.jspa?name=ericacm)** opened **[SPR-7164](https://jira.spring.io/browse/SPR-7164?redirect=false)** and commented  Using `@Bean` style bean definitions with placeholders introduces a lot of noise.   For example, replacing  \ \ \ \ \ \  with a `@Bean` and `@Values` you get  `@Value`(""${dataSource.driverClassName:com.mysql.jdbc.Driver}"") var driverClassName: String = null `@Value`(""${dataSource.url:jdbc:mysql://localhost:3306/auth}"") var url: String = null `@Value`(""${dataSource.username:root}"") var username: String = null `@Value`(""${dataSource.password:root}"") var password: String = null  `@Bean`(destroyMethod = ""close"") def dataSource: DataSource = { var dataSource: BasicDataSource = new BasicDataSource dataSource.setDriverClassName(driverClassName) dataSource.setUrl(url) dataSource.setUsername(username) dataSource.setPassword(password) return dataSource }  Yikes!  The PropertyPlaceholderConfigurer knows - what the merged properties are - what the SystemPropertiesMode is - what the placeholder prefix, suffix and default delimiter are - about handling default values (new in 3.0 thanks!!)  What I want to be able to do is something like (where ppc is a reference to the PropertyPlaceholderConfigurer)  `@Bean`(destroyMethod = ""close"") def dataSource: DataSource = { var dataSource: BasicDataSource = new BasicDataSource dataSource.setDriverClassName(ppc.resolve(""${dataSource.driverClassName:com.mysql.jdbc.Driver}"")) dataSource.setUrl(ppc.resolve(""${dataSource.url:jdbc:mysql://localhost:3306/auth}"")) dataSource.setUsername(ppc.resolve(""${dataSource.username:root}"")) dataSource.setPassword(ppc.resolve(""${dataSource.password:root}"")) return dataSource }  There are workarounds but they involve subclassing 2 or 3 Spring classes to get access to protected or private data, and other unDRY unpleasantness.  See example below.  Thanks,  // Example  `@Configuration` class AppConfig { var log: Logger = Logger.getLogger(this.getClass().getName())  `@Bean` def propertyPlaceholderConfigurer: PropertyPlaceholderConfigurer = { val resources = new ArrayBuffer[Resource] if (AppConfig.environment != ""development"") resources.append(new ClassPathResource(AppConfig.environment + ""-environment.properties"")) if (AppConfig.server != null) resources.append(new ClassPathResource(AppConfig.server + ""-server.properties"")) val propertiesSupport = new PropertiesLoaderSupport { def merge: Properties = super.mergeProperties } propertiesSupport.setIgnoreResourceNotFound(true) propertiesSupport.setLocations(resources.toArray) AppConfig.mergedProperties = propertiesSupport.merge val ppc = AppConfig.propertyPlaceholderConfigurer ppc.setProperties(AppConfig.mergedProperties) ppc.setSystemPropertiesMode(PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE) return ppc }  }  object AppConfig { var propertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer { def resolve(placeholder: String) = super.resolvePlaceholder(placeholder, mergedProperties, PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE) } var mergedProperties: Properties = null var placeholderResolver = new PlaceholderResolver { def resolvePlaceholder(placeholderName: String) = { propertyPlaceholderConfigurer.resolve(placeholderName) } } var placeholderHelper = new PropertyPlaceholderHelper(""${"", ""}"", "":"", false) def resolve(placeholder: String) = placeholderHelper.replacePlaceholders(placeholder, placeholderResolver)  var environmentName: String = null def environment: String = { if (environmentName == null) { val systemEnvironmentName = System.getProperty(""config.environment"") if (systemEnvironmentName != null) { environmentName = systemEnvironmentName } else { environmentName = ""development"" } } return environmentName }  def server: String = System.getProperty(""config.server"") }  `@Configuration` class DataConfig {  `@Bean`(destroyMethod = ""close"") def dataSource: DataSource = { var dataSource: BasicDataSource = null if (AppConfig.environment == ""development"") { dataSource = new BasicDataSource dataSource.setDriverClassName(AppConfig.resolve(""${dataSource.driverClassName:com.mysql.jdbc.Driver}"")) dataSource.setUrl(AppConfig.resolve(""${dataSource.url:jdbc:mysql://localhost:3306/auth}"")) dataSource.setUsername(AppConfig.resolve(""${dataSource.username:root}"")) dataSource.setPassword(AppConfig.resolve(""${dataSource.password:root}"")) } else { // Lookup via JNDI } return dataSource } }  ---  **Affects:** 3.0.2  **Issue Links:** - #8242 org.springframework.beans.factory.config.PropertyPlaceholderConfigurer should add a public method 'parseStringValue' (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2010-05-03T06:42:13Z","2019-01-11T13:08:55Z"
"","11570","org.springframework.context-3.0.1-RELEASE-A has a import error in its manifest [SPR-6905]","**[Eric Berry](https://jira.spring.io/secure/ViewProfile.jspa?name=ericeberry)** opened **[SPR-6905](https://jira.spring.io/browse/SPR-6905?redirect=false)** and commented  org.springframework.context-3.0.1-RELEASE-A has a import error in its manifest entry for org.springframework.orm.jpa.support.  It is importing [3.0.2, 3.0.3) instead of [3.0.1, 3.0.2).  This is causing the PersistenceAnnotationBeanPostProcessor to never get loaded on a context:annotation-config.   ---  **Affects:** 3.0.1  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2010-02-24T18:20:08Z","2019-01-11T16:29:21Z"
"","11557","TransactionalTestExecutionListener ignores @Transactional transaction manager qualifier [SPR-6892]","**[Emerson Farrugia](https://jira.spring.io/secure/ViewProfile.jspa?name=mers)** opened **[SPR-6892](https://jira.spring.io/browse/SPR-6892?redirect=false)** and commented  Although the TransactionInterceptor looks at the `@Transactional` qualifier to specify a transaction manager, the TransactionalTestExecutionListener does not. This prevents multiple integration test cases in one JUnit test class from targeting different data sources using `@Transactional`. See the forum reference for more details.   ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=84634  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb75662a7e8616cebf9cbce6440d846c7e131be6","closed","in: core,","spring-projects-issues","2010-02-22T18:14:35Z","2012-06-19T03:43:55Z"
"","11535","Spring EL implicit attribute documentation [SPR-6869]","**[Emerson Farrugia](https://jira.spring.io/secure/ViewProfile.jspa?name=mers)** opened **[SPR-6869](https://jira.spring.io/browse/SPR-6869?redirect=false)** and commented  I was looking for a list of implicit attributes I could use with the EL, but couldn't find one. The systemProperties example is repeated frequently, and Arjen Poutsma mentioned quite a few in his SpringOne 2gx talk (e.g., contextParameters), but a reference would help.  I also didn't see a way to file this JIRA under documentation, so apologies if it's in the wrong place.  Emerson   --- No further details from [SPR-6869](https://jira.spring.io/browse/SPR-6869?redirect=false)","closed","status: declined,","spring-projects-issues","2010-02-18T20:12:21Z","2015-09-22T18:20:30Z"
"","11761","nullpointer exception when customizing definitionsFactoryClass [SPR-7101]","**[Eldar Djafarov](https://jira.spring.io/secure/ViewProfile.jspa?name=edjafarov)** opened **[SPR-7101](https://jira.spring.io/browse/SPR-7101?redirect=false)** and commented  When I try to config TilesConfigurer to use custom definitionsFactoryClass I got NullPointerException in any DefinitionsFactory class in getDefinition method. After 4 days of debugging I have found the cause. TilesConfigurer uses SpringTilesContainerFactory which extends BasicTilesContainerFactory. The problem is in createDefinitionsFactory method.  SpringTilesContainerFactory: `@Override` protected DefinitionsFactory createDefinitionsFactory(TilesApplicationContext applicationContext, TilesRequestContextFactory contextFactory, LocaleResolver resolver) { if (definitionsFactoryClass != null) { return BeanUtils.instantiate(definitionsFactoryClass); } else { return super.createDefinitionsFactory(applicationContext, contextFactory, resolver); } }  BasicTilesContainerFactory:      /**      * Creates the definitions factory. By default it creates a      * {@link UnresolvingLocaleDefinitionsFactory} with default dependencies.      *      * @param applicationContext The Tiles application context.      * @param contextFactory The Tiles context factory.      * @param resolver The locale resolver.      *      * @return The definitions factory.      * @since 2.1.1      */     protected DefinitionsFactory createDefinitionsFactory(TilesApplicationContext applicationContext,             TilesRequestContextFactory contextFactory,             LocaleResolver resolver) {         UnresolvingLocaleDefinitionsFactory factory = instantiateDefinitionsFactory(                 applicationContext, contextFactory, resolver);         factory.setApplicationContext(applicationContext);         factory.setLocaleResolver(resolver);         factory.setDefinitionDAO(createLocaleDefinitionDao(applicationContext,                 contextFactory, resolver));         if (factory instanceof Refreshable) {             ((Refreshable) factory).refresh();         }         return factory;     }  As you see if custom definitionsFactoryClass is used Springs createDefinitionsFactory just returns BeanUtils.instantiate(definitionsFactoryClass); and setApplicationContext,setLocaleResolver and setDefinitionDAO are not ever called. That causes NullPointerException in  public class UnresolvingLocaleDefinitionsFactory for example:      /** {@inheritDoc} */     public Definition getDefinition(String name,             TilesRequestContext tilesContext) {         Locale locale = null;              if (tilesContext != null) {             locale = localeResolver.resolveLocale(tilesContext); //NullPointerException         }              return definitionDao.getDefinition(name, locale);     }  Here is stacktrace WARNING: Nested in org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException: java.lang.NullPointerException at org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory.getDefinition(UnresolvingLocaleDefinitionsFactory.java:102) at org.springframework.web.servlet.view.tiles2.TilesView.checkResource(TilesView.java:92) at org.springframework.web.servlet.view.UrlBasedViewResolver.loadView(UrlBasedViewResolver.java:421) at org.springframework.web.servlet.view.AbstractCachingViewResolver.createView(AbstractCachingViewResolver.java:158) at org.springframework.web.servlet.view.UrlBasedViewResolver.createView(UrlBasedViewResolver.java:384) at org.springframework.web.servlet.view.AbstractCachingViewResolver.resolveViewName(AbstractCachingViewResolver.java:77) at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1091) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1040) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:798) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:552) at javax.servlet.http.HttpServlet.service(HttpServlet.java:693) at javax.servlet.http.HttpServlet.service(HttpServlet.java:806) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1093) at com.google.appengine.api.blobstore.dev.ServeBlobFilter.doFilter(ServeBlobFilter.java:51) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at com.google.appengine.tools.development.StaticFileFilter.doFilter(StaticFileFilter.java:121) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405) at com.google.apphosting.utils.jetty.DevAppEngineWebAppContext.handle(DevAppEngineWebAppContext.java:70) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139) at com.google.appengine.tools.development.JettyContainerService$ApiProxyHandler.handle(JettyContainerService.java:352) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139) at org.mortbay.jetty.Server.handle(Server.java:313) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:830) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)   ---  **Affects:** 3.0.2","closed","type: bug,","spring-projects-issues","2010-04-15T21:13:17Z","2012-06-19T03:43:11Z"
"","11281","include MergedPersisteUnitManager in Spring-ORM [SPR-6615]","**[Edwin Stang](https://jira.spring.io/secure/ViewProfile.jspa?name=subes)** opened **[SPR-6615](https://jira.spring.io/browse/SPR-6615?redirect=false)** and commented  Hi,  it would be great to have a PersistenceUnitManager that allows multiple jars with the same persistenceUnit specified in persistence.xmls.  The code is taken from this page: http://ancientprogramming.blogspot.com/2007/05/multiple-persistencexml-files-and.html  public class MergedPersistenceUnitManager extends DefaultPersistenceUnitManager {      @Override     protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo newPU) {         super.postProcessPersistenceUnitInfo(newPU);         final URL persistenceUnitRootUrl = newPU.getPersistenceUnitRootUrl();         newPU.addJarFileUrl(persistenceUnitRootUrl);         final String persistenceUnitName = newPU.getPersistenceUnitName();         final MutablePersistenceUnitInfo oldPU = getPersistenceUnitInfo(persistenceUnitName);         if (oldPU != null) {             List urls = oldPU.getJarFileUrls();             for (URL url : urls) {                 newPU.addJarFileUrl(url);             }             List managedClassNames = oldPU.getManagedClassNames();             for (String managedClassName : managedClassNames) {                 newPU.addManagedClassName(managedClassName);             }             List mappingFileNames = oldPU.getMappingFileNames();             for (String mappingFileName : mappingFileNames) {                 newPU.addMappingFileName(mappingFileName);             }             Properties oldProperties = oldPU.getProperties();             Properties newProperties = newPU.getProperties();             newProperties.putAll(oldProperties);             newPU.setProperties(newProperties);         }     }  }  It solves my problem very well, maybe you could add it to Spring-ORM so that other people won't have to search too long for a solution if they try to create a modular spring app.   ---  **Affects:** 3.0 GA  **Reference URL:** http://ancientprogramming.blogspot.com/2007/05/multiple-persistencexml-files-and.html","closed","type: enhancement,","spring-projects-issues","2009-12-26T02:05:53Z","2019-01-11T16:15:45Z"
"","11827","Allow localization of formating errors messages using an AnnotationFormatterFactory and multiple custom annotations applied over the same type [SPR-7168]","**[Eduardo Rodrigues](https://jira.spring.io/secure/ViewProfile.jspa?name=duardor)** opened **[SPR-7168](https://jira.spring.io/browse/SPR-7168?redirect=false)** and commented  Today is possible to define custom error messages for binding errors defining a key in the format ""typeMismatch.typeOfProperty"". Example: for a bean property of type java.util.Date you can define the following message in a message property file:  ```java typeMismatch.java.util.Date={0} must be a valid date! ```  This message will be used by the tag form:error when the bind fails for a property of type java.util.Date.  I'd like to ask for an improvement of this feature. With spring 3 new ConversionService I can use an AnnotationFormatterFactory and create some custom annotations to apply in the same property type. Example: mypackage.DateFormat and mypackage.DateTimeFormat, both annotations to be applied in properties of type java.util.Date This way my java.util.Date properties would be annotated in my bean like the following:  ```java public class MyBean{        @DateFormat    private Date aDateField;     @DateTimeFormat    private Date aDateTimeField;  } ```  So my custom ConversionService using my custom AnnotationFormatterFactory will format/parse the property ""aDateField"" according to one rule based on the presence of `@DateFormat` and will format/parse the property ""aDateTimeField"" based on the presence of `@DateTimeFormat`. This is working wonderfully well right now but I have a problem with the errors messages when the bind fails.  The MessageCodesResolver interface is responsible for ""creating"" the possible codes which will be used to translate the message. The interface is defined as:  ```java |borderStyle=solid} public interface MessageCodesResolver {  	/** 	 * Build message codes for the given error code and object name. 	 * Used for building the codes list of an ObjectError. 	 * @param errorCode the error code used for rejecting the object 	 * @param objectName the name of the object 	 * @return the message codes to use 	 */ 	String[] resolveMessageCodes(String errorCode, String objectName);  	/** 	 * Build message codes for the given error code and field specification. 	 * Used for building the codes list of an FieldError. 	 * @param errorCode the error code used for rejecting the value 	 * @param objectName the name of the object 	 * @param field the field name 	 * @param fieldType the field type (may be null if not determinable) 	 * @return the message codes to use 	 */ 	String[] resolveMessageCodes(String errorCode, String objectName, String field, Class fieldType);  } ```  With this interface is impossible to determine at runtime if the bean property is annotated or not. I think this interface (and the callers of this interface) must be revised. I would like to create a message with the key ""typeMismatch.myAnnotationClass"". Example:  ```java |borderStyle=solid} typeMismatch.mypackage.DateFormat={0} must be a valid date! typeMismatch.mypackage.DateTimeFormat={0} must be a valid date and time! ```  Today this limitation is a pain for using the new ConversionService and multiple annotations used in bean properties of the same type because you can have only one message for the type (in the example, typeMismatch.java.util.Date) or you have to create a message for each property in the format typeMysmatch.beanName.property.  Thank you very much, hope my text is clear enough!   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=88442","closed","type: enhancement,","spring-projects-issues","2010-05-04T04:59:26Z","2018-12-27T11:10:06Z"
"","11541","The static files configured in the web.xml work in Tomcat 6.0.x and not in Jetty 6.1.14, with 404 error. [SPR-6875]","**[Edson Gonçalves](https://jira.spring.io/secure/ViewProfile.jspa?name=edgonn)** opened **[SPR-6875](https://jira.spring.io/browse/SPR-6875?redirect=false)** and commented  The static files configured in the web.xml work in Tomcat 6.0.x and not in Jetty 6.1.14, with 404 error. The configuration in web.xml: \ \default\ \/static/*\ \  The ambient issue: Apache 2 with mod_proxy and jetty 6.1.14.  The same configuration with Apache 2, mod_proxy and Tomcat 6.0.20 work fine.   ---  **Affects:** 3.0 GA","closed","status: invalid,","spring-projects-issues","2010-02-19T04:06:28Z","2019-01-12T05:32:29Z"
"","11384","DataBinder setAutoGrowNestedPaths call should work reliably [SPR-6718]","**[Eddie Mc Greal](https://jira.spring.io/secure/ViewProfile.jspa?name=nedge)** opened **[SPR-6718](https://jira.spring.io/browse/SPR-6718?redirect=false)** and commented  see the forum post   ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?p=279084  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b670b194294db12cde62430af2b352c1b5b44a19","closed","type: enhancement,","spring-projects-issues","2010-01-18T23:30:37Z","2012-06-19T03:43:58Z"
"","11697","The possibility to set up multiple modelView keys in the MarshallingView object [SPR-7035]","**[Ed Pichler](https://jira.spring.io/secure/ViewProfile.jspa?name=duduzerah)** opened **[SPR-7035](https://jira.spring.io/browse/SPR-7035?redirect=false)** and commented  I have the problem I cant configure multiple modelView Keys on the MarshallingView object. I'm using castor and I need, because castor will Marshall any object it received. I'm using Roo too, and ROO automatically create my Controller class with two defined modelKey properties in the ModelResult. One model key to single results and another to collections.  I don't know if it's better change Roo or Spring MVC, so I create two issues. Here is the another: http://jira.springframework.org/browse/ROO-740   ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?p=291005#post291005  **Attachments:** - [patch.patch](https://jira.spring.io/secure/attachment/16352/patch.patch) (_1.87 kB_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-24T23:23:35Z","2018-12-27T11:40:54Z"
"","11772","SelectTag fails when items is an Enumeration [SPR-7112]","**[Ed Belisle](https://jira.spring.io/secure/ViewProfile.jspa?name=ebelisle)** opened **[SPR-7112](https://jira.spring.io/browse/SPR-7112?redirect=false)** and commented  Using an Enumeration class as items in a select tag throws an exception:  ``` org.apache.jasper.JasperException: javax.servlet.ServletException: javax.servlet.jsp.JspException: Type [java.lang.Class] is not valid for option items     org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:522)     org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:398)     org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342)     org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267)     javax.servlet.http.HttpServlet.service(HttpServlet.java:717)     ...      ```  This is caused by a bug at Line 138 in class org.springframework.web.servlet.tags.form.OptionWriter:  Current line with error:  ``` else if (this.optionSource instanceof Class && this.optionSource.getClass().isEnum()) {  ```  Suggested Correction:  ``` else if (this.optionSource instanceof Class && ((Class)this.optionSource).isEnum()) {  ```    ---  **Affects:** 3.0.2","closed","type: bug,","spring-projects-issues","2010-04-19T12:09:52Z","2012-06-19T03:43:55Z"
"","11829","Support @Bean method visibility [SPR-7170]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-7170](https://jira.spring.io/browse/SPR-7170?redirect=false)** and commented  In JavaConfig beans created by protected methods with `@Bean` annotation had visibility inside the `@Configuration` class only but were not exported into the global `ApplicationContext` and therefore cannot be referenced from there or other `@Configuration` annotated classes:  ```java @Configuration public class MyConfiguration {   @Bean   public ABean globallyVisible() { ... }    @Bean   protected ABean visibleOnlyInThisClass() { ... } } ```  This is great to structure large configuration because beans can be hidden. Bring that feature back please.  ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2  **Issue Links:** - #12839 Revised support for bean definition visibility and overriding (_**""is depended on by""**_) - #7548 Allow to restrict the visibility of beans to a file (_**""is duplicated by""**_) - #10325 Consider using javassist for proxy generation - #12637 Support profile exclusivity and/or bean definition finality - #8713 Exporting / Importing beans across ApplicationContexts  27 votes, 22 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-05-04T21:22:03Z","2020-01-31T12:30:59Z"
"","11813","Portlet documentation needs to cover @MVC with Portlet API 2.0 [SPR-7154]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-7154](https://jira.spring.io/browse/SPR-7154?redirect=false)** and commented  The Portlet documentation does not talk about newer features such as annotation driven controllers.   ---  **Affects:** 3.0.2","closed","status: declined,","spring-projects-issues","2010-04-29T21:25:57Z","2015-09-22T18:55:04Z"
"","11608","json Namespace [SPR-6943]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-6943](https://jira.spring.io/browse/SPR-6943?redirect=false)** and commented  as with the oxm namespace it might make sense to create a json namespace to make the configuration of JSON marshalling and unmarshalling easier.   --- No further details from [SPR-6943](https://jira.spring.io/browse/SPR-6943?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-03-04T00:56:55Z","2015-05-19T18:35:21Z"
"","11602","ViewResolver with wildcards [SPR-6937]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-6937](https://jira.spring.io/browse/SPR-6937?redirect=false)** and commented  http://blog.newsplore.com/2010/02/23/spring-mvc-3-0-rest-rebuttal describes this issue: There is a controller that returns domain objects but no view name. Depending on the URL the objects should be rendered in different formats. So URL like /users/rss/* have to be mapped to some view. DefaultRequestToViewNameTranslator translates the URL to a view name - but there is no way to use wildcards in any of the existing ViewResolvers. So I suggest to improve the BeanNameViewResolver for example to support wildcards.   ---  **Affects:** 3.0 GA, 3.0.1","closed","type: enhancement,","spring-projects-issues","2010-03-03T20:23:27Z","2018-12-27T11:41:29Z"
"","11594","oxm Namespace should have an easy way to define more than one contextPath for JAXB2 [SPR-6929]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-6929](https://jira.spring.io/browse/SPR-6929?redirect=false)** and commented  A configuration for the JAXB2 looks like this:      There is no way to define more than one contextPath which is easily possible using the plain Jaxb2Marshaller . I propose to add an embedded oxm:context-path element to do the same using the oxm namespace.   ---  **Affects:** 3.0 GA, 3.0.1","closed","status: invalid,","spring-projects-issues","2010-03-03T03:53:31Z","2019-01-12T05:32:25Z"
"","11593","Support JSR 303 for REST [SPR-6928]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-6928](https://jira.spring.io/browse/SPR-6928?redirect=false)** and commented  JSR 303 validation is not supported for REST methods. It would be nice if you could annotate a controller method with `@Valid`. This would validate the `@RequestBody` parameter and return 400 (bad request). If the resulting model contains invalid objects a 500 (internal server error) should be returned.  see http://blog.newsplore.com/2010/02/23/spring-mvc-3-0-rest-rebuttal ""JSR 303 bean validation not applied in `@Controllers`""   ---  **Affects:** 3.0 GA, 3.0.1  7 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-03T03:24:55Z","2019-01-11T16:32:07Z"
"","11536","Cache by-type lookups in DefaultListableBeanFactory [SPR-6870]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-6870](https://jira.spring.io/browse/SPR-6870?redirect=false)** and commented  The Autowiring algorithms tries to work out the dependencies by building up the Beans. If this fails, a BeanCreationException is thrown, caught and then a different way to handle the dependencies is tried. In some situations this results in slow performance and it is probably also not the nicest programming style.  ---  **Affects:** 2.5.6  **Attachments:** - [perf305MainPatch.html](https://jira.spring.io/secure/attachment/18035/perf305MainPatch.html) (_110.13 kB_) - [perf305stock.html](https://jira.spring.io/secure/attachment/18034/perf305stock.html) (_120.62 kB_) - [perfDiffStockVsPatch1.html](https://jira.spring.io/secure/attachment/18036/perfDiffStockVsPatch1.html) (_154.63 kB_) - [SPR6870.patch](https://jira.spring.io/secure/attachment/18033/SPR6870.patch) (_2.63 kB_)  **Sub-tasks:** - #14083 Backport ""Cache by-type lookups in DefaultListableBeanFactory""  **Issue Links:** - #13934 Major Performance Problem in ApplicationContext Creation and Prototype Bean Lookup by Type (_**""is duplicated by""**_) - #12604 Improve performance of DefaultSingletonBeanRegistry.getSingletonNames(..) for high-concurrent-load applications (_**""is duplicated by""**_) - #12750 Improve performance of bean lookup by type for DefaultListableBeanFactory (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/841d9533dbdcd254d3d528430e6448732732c152, https://github.com/spring-projects/spring-framework/commit/0d18deb6a47be8d80aeee7542b4e6a231e3a97b3, https://github.com/spring-projects/spring-framework/commit/db1cb13448dcdc11c6ebd087d0a436614d541d90, https://github.com/spring-projects/spring-framework/commit/f75c01d191e0b08334d067d7eae58e1faa7afdc9, https://github.com/spring-projects/spring-framework/commit/4c7a1c0a5403b35dd812dae1f2a753538928bb32  45 votes, 45 watchers","closed","has: votes-jira,","spring-projects-issues","2010-02-18T20:35:04Z","2019-01-11T17:00:38Z"
"","11135","Doc: spring-agent.jar has changed name [SPR-6469]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-6469](https://jira.spring.io/browse/SPR-6469?redirect=false)** and commented  spring-agent.jar is now org.springframework.instrument-3.0.0.jar . The documentation needs to be changed accordingly.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7a1c4d23b4bdac16ca3b8c85a2036ba595a989e9","closed","type: documentation,","spring-projects-issues","2009-11-28T23:13:44Z","2012-06-19T03:42:47Z"
"","11134","pom.xml contains wrong artifactId [SPR-6468]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-6468](https://jira.spring.io/browse/SPR-6468?redirect=false)** and commented  For example the pom.xml in directory org.springframework.web.servlet  gives spring-mvc as artifactId while it should be org.springframework.web.servlet . It seems the other pom.xml files in the other projects are also wrong.   ---  **Affects:** 3.0 RC2","closed","status: declined,","spring-projects-issues","2009-11-28T05:17:55Z","2019-01-12T16:38:46Z"
"","11131","JSR-330 support for component detection is inconsistent [SPR-6465]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-6465](https://jira.spring.io/browse/SPR-6465?redirect=false)** and commented  If I annotate a class using `@Named` it is instantiated by context:component-scan . However, `@Named` is just an example for an `@Qualifier` annotated Annotation. The JavaDoc for `@Qualifier` states that the specification only covers using such annotations on fields and methods, classes are optional. So even though this behavior does not contradict the specification it is not required either.  But if `@Named` means that a class is implemented by context:component-scan the same should work for my own `@Qualifier` annotated Annotation as well. That is not the case.  Also a class annotated with `@Singleton` is not instantiated by context:component-scan and probably other Annotations that are marked with `@Scope` work the same way. I think it would be more logical to have these annotations work with context:component-scan than the `@Named` annotation as they clearly belong to implementation classes which `@Named` does not. But again this is not covered by the spec.   ---  **Affects:** 3.0 RC2  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-27T21:42:15Z","2012-06-19T03:43:04Z"
"","10991","XML templating for XML namespaces [SPR-6325]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-6325](https://jira.spring.io/browse/SPR-6325?redirect=false)** and commented  To make the usage of XML namespaces even simpler it would be great if a namespace could be defined as an XML template. I.e. a snippet of XML code is used to define what a specific XML element of the namespace should be expanded into. This will make defining your own XML namespace much simpler.   ---  **Affects:** 1.0 RC1, 1.0 RC2, 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 1.2.9, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.0.9, 2.1 M1, 2.1 M2, 2.1 M3, 2.1 M4, 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-10T05:00:23Z","2013-01-16T05:44:16Z"
"","11679","Lazy SmartLifecycle non autoStarting bean being initialized [SPR-7014]","**[Dushyanth Inguva](https://jira.spring.io/secure/ViewProfile.jspa?name=dushyanth)** opened **[SPR-7014](https://jira.spring.io/browse/SPR-7014?redirect=false)** and commented  I have a bean that implements SmartLifecycle interface. It is not an autoStartup bean (returns false for isAutoStartup()). It is also declared as lazy in the config. Still, it gets initialized.  It shouldn't be initialized because, it is lazy. The fact that it implements SmartLifeCycle shouldn't affect it's lazy behavior in this particular case as it returns false for the isAutoStartUp() method.  Also, if a bean is declared both lazy and implements SmartLifecycle while returning true for isAutoStartup(), the initialization code should throw an error to improve clarity. Currently, the lazy attribute is silently ignored. This can lead to tricky debugging situations for developers.  Here are the bean definition, bean class, and expected/actual outputs.  \  package com.smartcode;  import org.springframework.beans.factory.InitializingBean; import org.springframework.context.SmartLifecycle; import org.springframework.context.Lifecycle;  public class MyLifecyclable implements InitializingBean, SmartLifecycle { private volatile boolean running;      public void afterPropertiesSet() {         System.out.println(""Initialized"");     }          public void start() {         running = true;         System.out.println(""Started"");     }          public void stop() {         running = false;     }          public boolean isRunning() {         return running;     }          public boolean isAutoStartup() {         return false;     }          public void stop(java.lang.Runnable runnable) {             }          public int getPhase() {         return 0;     }  }  Expected Output: None. No output is expected as this bean is lazy and isAutoStartup() == false  Actual Output: ""Initialized""   ---  **Affects:** 3.0.1  **Attachments:** - [LifeCycleBug.zip](https://jira.spring.io/secure/attachment/16320/LifeCycleBug.zip) (_11.41 kB_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-19T15:29:57Z","2015-09-22T17:34:33Z"
"","11868","SpEL: Elvis operator throwing NPE in case of an empty base expression [SPR-7209]","**[drekbour](https://jira.spring.io/secure/ViewProfile.jspa?name=drekbour)** opened **[SPR-7209](https://jira.spring.io/browse/SPR-7209?redirect=false)** and commented  Embedded SpEL expressions throw an NPE if looked-up property-placeholder variable is null.  Using the Elvis operator which is designed to deal with null: `@Value`(""#{${property1}?:'default'}"") private String property2;  This works fine if ${property1} evaluates to a non-null but provides the following if it is null.  Caused by: java.lang.NullPointerException at org.springframework.expression.spel.ast.SpelNodeImpl.\(SpelNodeImpl.java:50) at org.springframework.expression.spel.ast.Elvis.\(Elvis.java:33) at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatExpression(InternalSpelExpressionParser.java:143) at org.springframework.expression.spel.standard.InternalSpelExpressionParser.doParseExpression(InternalSpelExpressionParser.java:114) at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:56) at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:1) at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpressions(TemplateAwareExpressionParser.java:128) at org.springframework.expression.common.TemplateAwareExpressionParser.parseTemplate(TemplateAwareExpressionParser.java:74) at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:64) at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:119)  The same thing happens if you use a .property file with the following property1= property2=#{${property1}?:'default'}  Notes: * This is a general SpEL problem, not anything specific to Elvis operator. * Tested with Spring 3.0.2 * Mentioned on the forums previously: http://forum.springsource.org/showthread.php?t=82892  ---  **Affects:** 3.0.2  **Issue Links:** - #11953 Placeholder property: absent should be treated same as blank/empty  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/101d8381ef398101d5bed2b065dc280e998b3fcf  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-05-16T22:16:53Z","2019-01-11T13:19:08Z"
"","11747","Make formatter value configurable through Spring EL/Property PlaceHolder [SPR-7087]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-7087](https://jira.spring.io/browse/SPR-7087?redirect=false)** and commented  It would be great if we are allowed to configure the formatter (and validator) value through Spring EL or Property PlaceHolder For example:  ``` @DateTimeFormat(pattern=""#{dateTime.pattern}"") private Date registrationDate; ```  and in application.properties loaded by Property PlaceHolder  ``` dateTime.pattern=dd/mm/yyyy ```  ---  **Affects:** 3.0.2  **Attachments:** - [basic.zip](https://jira.spring.io/secure/attachment/16634/basic.zip) (_717.52 kB_)  **Issue Links:** - #19893 Make formatter value configurable through Spring EL/Property PlaceHolder  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a140addfd5d7fb384541f29b6bb92babbf31866","closed","type: enhancement,","spring-projects-issues","2010-04-10T21:09:02Z","2019-01-11T13:25:06Z"
"","11254","Ability to configure (and/or override) controller via 'mvc' namespace [SPR-6588]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-6588](https://jira.spring.io/browse/SPR-6588?redirect=false)** and commented  I think it would be nice if we can configure a controller or at least override an annotated controller using mvc namespace:  ```                                                                 ```  Regards,  Donny   --- No further details from [SPR-6588](https://jira.spring.io/browse/SPR-6588?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-12-19T02:25:23Z","2015-01-08T08:40:17Z"
"","11130","Flash Scope  for Spring MVC (Without Spring Web Flow) [SPR-6464]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-6464](https://jira.spring.io/browse/SPR-6464?redirect=false)** and commented  Geert Pante submitted the codes for this issue at: [MOD-458](https://jira.spring.io/browse/MOD-458).  ---  **Affects:** 3.0 RC2  **Reference URL:** http://forum.springsource.org/showthread.php?t=73939&highlight=flash+scope  **Attachments:** - [FlashScope.java](https://jira.spring.io/secure/attachment/16259/FlashScope.java) (_675 bytes_) - [FlashScopeFilter.java](https://jira.spring.io/secure/attachment/16260/FlashScopeFilter.java) (_1.16 kB_)  **Issue Links:** - #7346 There is no way to display success message(s). (_**""is duplicated by""**_) - #5775 Provide better options to specify attributes on a redirect (_**""supersedes""**_)  31 votes, 29 watchers","closed","has: votes-jira,","spring-projects-issues","2009-11-27T15:03:38Z","2019-01-11T15:37:57Z"
"","11021","mvc namespace doesn't allow developers to configure properties in handler adapter/mapping [SPR-6355]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-6355](https://jira.spring.io/browse/SPR-6355?redirect=false)** and commented  The default setup is suitable for any case but I prefer to turn off the defaultSuffixPattern property. I can't find any way to override the value (I can re-define DefaultAnnotationHandlerMapping but I don't think this is a good way to go because it will also re-map the URL mappings for my actions)  I think it would be nice if we can access the properties via tags like , , and . In this case,  is only available within  and   For example:  ```                                                                                   ```    ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-13T21:33:51Z","2012-06-19T09:36:32Z"
"","10977","spring.url macro from spring.ftl doesn't add prefix to any relativeUrl begins with slash (/) [SPR-6311]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-6311](https://jira.spring.io/browse/SPR-6311?redirect=false)** and commented  spring.url macro doesn't add prefix to the URL string starts with slash  ```xml    ```  I need to prepend spaces like newline to make the macro works:  ```xml      ```    ---  **Affects:** 3.0 RC1","closed","status: bulk-closed,","spring-projects-issues","2009-11-08T04:20:27Z","2019-01-12T03:50:47Z"
"","10956","Enhancement on Spring REST to support multiple submit buttons [SPR-6289]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-6289](https://jira.spring.io/browse/SPR-6289?redirect=false)** and commented  Currenty Spring REST support ""_method"" hidden variable to define what request method will be used on form submission. Some forms has multiple buttons for different uses like cancel, update, create, and so on. Since only one ""_method"" variable is allowed per form, I have to use javascript to modify ""_method"" value (as long as the javascript feature is on).  I think we can improve this by adding more parameters that we can used for button names. For example:  ```html   ```  During the submission, the Spring REST will check which one of these method parameters (_get, _post, _update, _delete, _put) has value and redirect it to the method that handles this.   ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-11-01T13:19:19Z","2019-01-11T12:17:27Z"
"","11708","XML MarshallingView assumes non-null value for object to be marshalled. [SPR-7047]","**[Don Laidlaw](https://jira.spring.io/secure/ViewProfile.jspa?name=dlaidlaw)** opened **[SPR-7047](https://jira.spring.io/browse/SPR-7047?redirect=false)** and commented  The org.springframework.web.servlet.view.xml.MarshallingView method locateToBeMarshalled(Map) assumes that the value of the object to be marshalled is not null. The line 132:  if (this.marshaller.supports(o.getClass())) {  Will throw NPE if/when o is null. This should be guarded with a null check, and return null when o is null. This will cause the calling method rederMergedOutputModel to throw a ServletException, which is the proper action.  As an example, this happens when using REST and the user issues a GET for a non-existent key. When this happens the model contains the object key, but null for the value of the key, which results in the NPE.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9cecaa769e90ccecfbfe6c2dbdbfd2c86edc4baa","closed","type: bug,","spring-projects-issues","2010-03-29T04:10:03Z","2012-06-19T03:42:45Z"
"","10923","[SPel] Dynamic resolution of expressions [SPR-6255]","**[Dmitry Sklyut](https://jira.spring.io/secure/ViewProfile.jspa?name=dsklyut)** opened **[SPR-6255](https://jira.spring.io/browse/SPR-6255?redirect=false)** and commented  It would be a nice addition to have spel expressions in config files resolved dynamically.  For example, in osgi environment with config admin:  Example: \  \   \                      In this case it would help to inject a proxy to the value of #{cotainerManagedConfigBean.someDynamicallyUpdatedConfigProperty} vs. a resolved value.  Similar to scoped-proxy.   ---  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-21T04:48:29Z","2012-06-19T09:36:14Z"
"","11660","Automatic RMI interface detection in RemoteExporter / RmiServiceExporter [SPR-6995]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-6995](https://jira.spring.io/browse/SPR-6995?redirect=false)** and commented  In case ""serviceInterface"" is not defined, RemoteExporter can explore the service implementation and export the 1st interface found or throw an exception, if no interface is defined. I suppose, it would be a nice feature that will decrease the number of parameters for configuration. And it somehow correlates with autoproxying mechanism for transactional beans, that makes similar interface discovery.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2010-03-16T07:48:49Z","2012-06-19T09:36:23Z"
"","10971","JAX-WS support for servlet environment should become a part of SpringWeb [SPR-6305]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-6305](https://jira.spring.io/browse/SPR-6305?redirect=false)** and commented  [Current documentation](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch19s05.html#remoting-web-services-jaxws-export-ri) on JAX-WS endpoint creation for servlet environment using JAX-WS RI actually refers the reader to [JAX-WS Commons Spring](https://jax-ws-commons.dev.java.net/spring/) project. The problems when using this project are: - It is compiled against too old Spring codebase (2.0) (see [issue#48](https://jax-ws-commons.dev.java.net/issues/show_bug.cgi?id=48)) - The implementation `org.jvnet.jax_ws_commons.spring.SpringService` seems to support AOP proxies via ""impl"" attribute (as mentioned [here](http://code-hut.blogspot.com/2008/03/exposing-spring-beans-as-web-services.html)) but this anyway causes problems with latest jaxws-rt v2.1.4:  ``` java.lang.IllegalArgumentException: object is not an instance of declaring class         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:616)         at com.sun.xml.ws.api.server.InstanceResolver$1.invoke(InstanceResolver.java:246)         at com.sun.xml.ws.server.InvokerTube$2.invoke(InvokerTube.java:146)         at com.sun.xml.ws.server.sei.EndpointMethodHandler.invoke(EndpointMethodHandler.java:257)         at com.sun.xml.ws.server.sei.SEIInvokerTube.processRequest(SEIInvokerTube.java:93)         at com.sun.xml.ws.api.pipe.Fiber.__doRun(Fiber.java:598)         at com.sun.xml.ws.api.pipe.Fiber._doRun(Fiber.java:557)         at com.sun.xml.ws.api.pipe.Fiber.doRun(Fiber.java:542)         at com.sun.xml.ws.api.pipe.Fiber.runSync(Fiber.java:439)         at com.sun.xml.ws.server.WSEndpointImpl$2.process(WSEndpointImpl.java:243)         at com.sun.xml.ws.transport.http.HttpAdapter$HttpToolkit.handle(HttpAdapter.java:444)         at com.sun.xml.ws.transport.http.HttpAdapter.handle(HttpAdapter.java:244)         at com.sun.xml.ws.transport.http.servlet.ServletAdapter.handle(ServletAdapter.java:135)         at com.sun.xml.ws.transport.http.servlet.WSServletDelegate.doGet(WSServletDelegate.java:129)         at com.sun.xml.ws.transport.http.servlet.WSServletDelegate.doPost(WSServletDelegate.java:160)         at com.sun.xml.ws.transport.http.servlet.WSSpringServlet.doPost(WSSpringServlet.java:52)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) ```  It makes quite tricky to use `@WebService` together with `@Transactional`. One of the ways out is to use ""aspectj"" mode for transactional beans support (use code instrumenting).  I suppose, it is a good idea for Spring Team to take ownership for this project and provide in documentation the description of how to implement the following common case:  - The service is Web + Spring-driven application (war) - The service functions in transaction-aware environment (``) - The service is to be exposed as JAX-WS endpoint (marked with `@WebService`)  Additional information: - [Exposing Spring Beans as Web Services with JAX-WS RI with Minimal XML](http://code-hut.blogspot.com/2008/03/exposing-spring-beans-as-web-services.html)    ---  **Affects:** 3.0 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?t=39421","closed","type: enhancement,","spring-projects-issues","2009-11-05T03:07:49Z","2018-12-27T11:19:13Z"
"","11744","IllegalArgumentException thrown for simple java.lang.String prototype bean  [SPR-7084]","**[diwakar](https://jira.spring.io/secure/ViewProfile.jspa?name=diwakar)** opened **[SPR-7084](https://jira.spring.io/browse/SPR-7084?redirect=false)** and commented  Code  ---  import org.springframework.context.support.GenericApplicationContext; import org.springframework.beans.factory.xml.XmlBeanDefinitionReader; import org.springframework.core.io.ClassPathResource;  /** */ public class IllegalArgumentProblem {      public static void main(String[] args) {          GenericApplicationContext parent = new GenericApplicationContext();         XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(parent);         reader.loadBeanDefinitions(new ClassPathResource(""app.xml"", IllegalArgumentProblem.class));         parent.refresh();              String bean = (String) parent.getBean(""x"");         String bean2 = (String) parent.getBean(""x""); // second access throws the exception.     }  }  Configuration  ---  \               PARENT value       \  Error  ---  log4j:WARN No appenders could be found for logger (org.springframework.core.CollectionFactory). log4j:WARN Please initialize the log4j system properly. Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'x' defined in class path resource [app.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [java.lang.String]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:254) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:925) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:823) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:283) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:881) at IllegalArgumentProblem.main(IllegalArgumentProblem.java:21) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90) Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [java.lang.String]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:111) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:248) ... 16 more Caused by: java.lang.IllegalArgumentException: argument type mismatch at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:513) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100) ... 18 more  Process finished with exit code 1  ---  **Affects:** 2.5.5, 2.5.6  **Issue Links:** - #10240 not singleton StringBeans (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12ce250c6ce911774a7983905fd6e006b5a1eac1","closed","in: core,","spring-projects-issues","2010-04-09T06:17:47Z","2019-01-13T21:46:26Z"
"","11855","@Value annotation in Validator triggers Exception when resolving. [SPR-7196]","**[Derek Clarkson](https://jira.spring.io/secure/ViewProfile.jspa?name=drekka)** opened **[SPR-7196](https://jira.spring.io/browse/SPR-7196?redirect=false)** and commented  We have written a custom validator and annotation. When we attempt to inject a value provided by a PropertyPlaceholderConfigurer, an exception is triggered. We can successfully inject bean references, which leads us to believe that there is an issue around injecting values. The following are the distilled segments of the code to show the setup and exception.  ``` 	... 	 	 	  	... ```  ``` @Target( { TYPE, ANNOTATION_TYPE }) @Retention(RUNTIME) @Constraint(validatedBy = PasswordMatchValidator.class) @Documented public @interface PasswordMatch { 	String message() default ""{au.edu.open.website.PasswordMatchValidation}""; 	Class[] groups() default {}; 	Class","closed","type: bug,","spring-projects-issues","2010-05-12T12:57:07Z","2012-06-19T03:43:07Z"
"","11795","BeanDefinitionVisitor fails to handle String[] properties. [SPR-7136]","**[Derek Clarkson](https://jira.spring.io/secure/ViewProfile.jspa?name=drekka)** opened **[SPR-7136](https://jira.spring.io/browse/SPR-7136?redirect=false)** and commented  In my applicationContext-webapp.xml I have the following definitions:  ...    ...  The PropertyPlaceholderConfigurer correctly finds and replaces the group-search-base property. But ignores the user-dn-pattern property, triggering an error when the authentication provider attempts to start up.  Tracing the execution showed that user-dn-pattern comes through to the BeanDefinitionVisitor class as a String[]. In the resolveValue method there is no code to support a String[] so it simply hands the array back to the calling method, making no attempt to process it.  This would indicate either an bug in the reading of the user-dn-pattern property or that further handling needs to be added to the resolveValue method in BeanDefinitionVisitor.    ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/17a1362ed898c51af002241b64c799c3b017f85f","closed","in: core,","spring-projects-issues","2010-04-26T15:06:29Z","2012-06-19T03:43:16Z"
"","11151","Provide fine-grained autowiring base on generic type information [SPR-6485]","**[Denis Zhdanov](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.zhdanov)** opened **[SPR-6485](https://jira.spring.io/browse/SPR-6485?redirect=false)** and commented  Spring allows to autowire collections, maps and array based on their generic type. That's cool but may be significantly improved because current implementation doesn't check generic argument type.  Suppose the following simple example:  ``` public class AbstractTestClass { }  @Component public class TestClass1 extends AbstractTestClass { }  @Component public class TestClass2 extends AbstractTestClass { }  @Component public class GenericTest {      private AbstractTestClass[] intArray;     private AbstractTestClass[] stringArray;     private List intList;     private List stringList;     private Map intMap;     private Map stringMap;     private AbstractTestClass intField;     private AbstractTestClass stringField;      public AbstractTestClass[] getIntArray() {         return intArray;     }      @Autowired     public void setIntArray(AbstractTestClass[] intArray) {         this.intArray = intArray;     }      public AbstractTestClass[] getStringArray() {         return stringArray;     }      @Autowired     public void setStringArray(AbstractTestClass[] stringArray) {         this.stringArray = stringArray;     }      public List getIntList() {         return intList;     }      @Autowired     public void setIntList(List intList) {         this.intList = intList;     }      public List getStringList() {         return stringList;     }      @Autowired     public void setStringList(List stringList) {         this.stringList = stringList;     }      public Map getIntMap() {         return intMap;     }      @Autowired     public void setIntMap(Map intMap) {         this.intMap = intMap;     }      public Map getStringMap() {         return stringMap;     }      @Autowired     public void setStringMap(Map stringMap) {         this.stringMap = stringMap;     }      public AbstractTestClass getIntField() {         return intField;     }      @Autowired     public void setIntField(AbstractTestClass intField) {         this.intField = intField;     }      public AbstractTestClass getStringField() {         return stringField;     }      @Autowired     public void setStringField(AbstractTestClass stringField) {         this.stringField = stringField;     } } ```  We would like the framework to detect that target _'GenericTest'_ autowired properties define generic type as an argument and inject only the beans that apply to it (_'TestClass1'_ or _'TestClass2'_ objects respectively).  Attached code solves the problem. It contains two main parts: 1. mini-framework that alloww    * Derive generic type against target generic class/interface;    * Check if particular type may be used as another type; 2. Modified standard Spring _'DefaultListableBeanFactory'_ class that exploits that mini-framework;  Please note that the framework is able to resolve really complex situations and is thorougly covered by unit tests at _junit4_ format.  Attached archive contains test class that illustrates its effect as well.   ---  **Affects:** 3.0 RC3  **Attachments:** - [spring-generic-autowiring.tar.gz](https://jira.spring.io/secure/attachment/15978/spring-generic-autowiring.tar.gz) (_55.18 kB_)  9 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-01T06:08:58Z","2015-09-22T17:34:39Z"
"","10921","Allow to define autowired collections and array elements order [SPR-6253]","**[Denis Zhdanov](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.zhdanov)** opened **[SPR-6253](https://jira.spring.io/browse/SPR-6253?redirect=false)** and commented  Spring defines a contract for autowiring arrays and type collections ([3.4.5 Autowiring collaborators](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch03s04.html#beans-factory-autowire), [3.9.2 @Autowired and @Inject](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch03s09.html#beans-autowired-annotation)).  However, there is a possible use-case that a user wants to define particular order for autowired collection/array. It looks obvious in the case of autowiring typed lists (the client may want to preserve particular order for the list elements) but the same idea may be spread easily to sets/maps/arrays.  I suggest the following rules to be used during examining the order for two elements: * if both classes of compared object are marked by [Ordered](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/core/annotation/Order.html) the one with lower value is considered to be less than another; * if class of one element is marked by [Ordered](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/core/annotation/Order.html) and class of another is not marked by [Ordered](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/core/annotation/Order.html) the former is considered to be less than the later; * if both classes of compared elements are not marked by [Ordered](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/core/annotation/Order.html) but implement [Comparable](http://java.sun.com/javase/6/docs/api/java/lang/Comparable.html) with consisting type parameter they are compared via [Comparable#compareTo(Object)](http://java.sun.com/javase/6/docs/api/java/lang/Comparable.html#compareTo(T));  Please note that the rules above may be applied to all elements of autowired collection/array in order to define particular for them.  **Implementation**  That feature may be optional and defaults to perform ordering. It seems that most natural to allow to define it via additional method of [@Autowired](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html) annotation.  So, it can be implemented easily via minor [AutowiredAnnotationBeanPostProcessor](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.html) modification - the argument to be injected is just sorted if necessary.  Attached archive contains either feature implementation (classes from _'org.springframework.beans.factory.annotation'_ package) or usage example (classes from _'com.spring.example'_ package and its subpackages).  ---  **Affects:** 3.0 RC1  **Attachments:** - [ordered-autowired-collection.tar.gz](https://jira.spring.io/secure/attachment/15824/ordered-autowired-collection.tar.gz) (_9.63 kB_)  **Issue Links:** - #10245 Autowiring should support ordered collection driven by Order annotation or Ordered interface (_**""duplicates""**_)  8 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-20T04:34:51Z","2019-01-11T15:12:44Z"
"","11874","Avoid EntityManager close() exception through isOpen() check [SPR-7215]","**[Denis Davydkov](https://jira.spring.io/secure/ViewProfile.jspa?name=beenokle)** opened **[SPR-7215](https://jira.spring.io/browse/SPR-7215?redirect=false)** and commented  As I expect OpenEntityManagerInViewInterceptor should close session only when it's active.  ``` 2010-05-19 01:39:38,135 [DEBUG]: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Opening JPA EntityManager in OpenEntityManagerInViewInterceptor 2010-05-19 01:39:38,140 [DEBUG]: org.springframework.web.bind.annotation.support.HandlerMethodInvoker - Invoking request handler method: ...... 2010-05-19 01:39:38,145 [DEBUG]: org.springframework.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [org.hibernate.ejb.EntityManagerImpl@aebb54] for JPA transaction 2010-05-19 01:39:38,146 [DEBUG]: org.springframework.orm.jpa.JpaTransactionManager - Creating new transaction with name [null]: PROPAGATION_REQUIRES_NEW,ISOLATION_DEFAULT 2010-05-19 01:39:38,146 [DEBUG]: org.springframework.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC transaction [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@12e908b] Hibernate:      select         nextval ('seq_users') Hibernate:      select         nextval ('seq_security') 2010-05-19 01:39:38,154 [DEBUG]: org.springframework.orm.jpa.JpaTransactionManager - Initiating transaction commit 2010-05-19 01:39:38,154 [DEBUG]: org.springframework.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [org.hibernate.ejb.EntityManagerImpl@aebb54] Hibernate:      insert      into         USERS         (activated, email, firstName, lastName, u_login, u_passw, registeredAt, id)      values         (?, ?, ?, ?, ?, ?, ?, ?) Hibernate:      insert      into         USER_PERMISSIONS         (permission, user_id, id)      values         (?, ?, ?) 2010-05-19 01:39:38,195 [DEBUG]: org.springframework.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction 2010-05-19 01:39:38,273 [DEBUG]: org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter - Written [{""success"":true}] as ""text/javascript;charset=UTF-8"" using [.....JsonHttpMessageConverter@14ad065] 2010-05-19 01:39:38,275 [DEBUG]: org.springframework.web.servlet.DispatcherServlet - Null ModelAndView returned to DispatcherServlet with name 'Spring MVC Dispatcher Servlet': assuming HandlerAdapter completed request handling 2010-05-19 01:39:38,275 [DEBUG]: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor - Closing JPA EntityManager in OpenEntityManagerInViewInterceptor 2010-05-19 01:39:38,276 [DEBUG]: org.springframework.orm.jpa.EntityManagerFactoryUtils - Closing JPA EntityManager 2010-05-19 01:39:38,276 [DEBUG]: org.springframework.orm.jpa.EntityManagerFactoryUtils - Unexpected exception on closing JPA EntityManager org.hibernate.SessionException: Session was already closed 	at org.hibernate.impl.SessionImpl.close(SessionImpl.java:312) 	at org.hibernate.ejb.EntityManagerImpl.close(EntityManagerImpl.java:150) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:365) 	at $Proxy67.close(Unknown Source) 	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:331) 	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:109) 	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:68) 	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1121) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:811) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) 	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:530) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1216) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:343) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:100) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:35) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:188) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:79) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:149) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187) 	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:425) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119) 	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:494) 	at org.eclipse.jetty.server.session.SessionHandler.handle(SessionHandler.java:182) 	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:933) 	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:362) 	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:867) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) 	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:245) 	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113) 	at org.eclipse.jetty.server.Server.handle(Server.java:334) 	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:559) 	at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1007) 	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:747) 	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:209) 	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:406) 	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:462) 	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436) 	at java.lang.Thread.run(Thread.java:619) {/noformat} ```    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e12fbd3e2b9ee031913003a0eb4022cfcb71c247, https://github.com/spring-projects/spring-framework/commit/928f5423af2f64ca9578801adaa8c9612500b952","closed","type: enhancement,","spring-projects-issues","2010-05-18T08:54:25Z","2012-06-19T03:44:10Z"
"","11320","PropertyPlaceholderConfigurer has Inconsistent Behavior between 2.5.6 and 3.0.0 [SPR-6654]","**[David Winterfeldt](https://jira.spring.io/secure/ViewProfile.jspa?name=dwinterfeldt)** opened **[SPR-6654](https://jira.spring.io/browse/SPR-6654?redirect=false)** and commented  When a property file reference for PropertyPlaceholderConfigurer uses a system property that isn't set, no error used to be thrown in Spring 2.5.6.  But now in 3.0.0.RELEASE, this exception is thrown.  Temporary workaround to use SpEL to insert a fake directory if the system property isn't set (\classpath*:/config/#{ systemProperties['cloudtools.application.profile']?: 'xxx' }/**/*.properties\).      ex: classpath*:/config/${cloudtools.application.profile}/**/*.properties  Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'java.lang.String#0' defined in class path resource [org/springbyexample/property/PropertyTest-context.xml]: Could not resolve placeholder 'foo' at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:272) [org.springframework.beans-3.0.0.RELEASE.jar:3.0.0.RELEASE] at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:75) [org.springframework.beans-3.0.0.RELEASE.jar:3.0.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:624) [org.springframework.context-3.0.0.RELEASE.jar:3.0.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:599) [org.springframework.context-3.0.0.RELEASE.jar:3.0.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:398) [org.springframework.context-3.0.0.RELEASE.jar:3.0.0.RELEASE] at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) [org.springframework.test-3.0.0.RELEASE.jar:3.0.0.RELEASE] at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) [org.springframework.test-3.0.0.RELEASE.jar:3.0.0.RELEASE] at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280) [org.springframework.test-3.0.0.RELEASE.jar:3.0.0.RELEASE] at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) [org.springframework.test-3.0.0.RELEASE.jar:3.0.0.RELEASE] ... 28 common frames omitted  ---  **Affects:** 3.0 GA  **Attachments:** - [property-placeholder-configurer-jira.zip](https://jira.spring.io/secure/attachment/16073/property-placeholder-configurer-jira.zip) (_8.40 kB_)  **Issue Links:** - #10987 Regression: ResourceEditor in 3.0 does not ignore unresolvable placeholders, but it did in 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e195c39d3c95c27aaeaff61c20f97648a0b363d1  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-01-07T01:06:57Z","2019-01-11T16:19:23Z"
"","11222","Add mvc:annotation-driven Tiles Configuration [SPR-6556]","**[David Winterfeldt](https://jira.spring.io/secure/ViewProfile.jspa?name=dwinterfeldt)** opened **[SPR-6556](https://jira.spring.io/browse/SPR-6556?redirect=false)** and commented  Have mvc:annotation-driven setup the Tiles with some basic defaults.  This can setup TilesConfigurer and the Tiles view resolvers.  ```xml  ```  OR  ```xml                ```  Standard Config  ---  ```xml     ```  ---  **Affects:** 3.0 RC3  **Issue Links:** - #11753 Allow configuring view resolution through the MVC Java config and the MVC Namespace (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2009-12-12T10:57:15Z","2019-01-13T21:47:54Z"
"","11221","Have mvc:annotation-driven Setup I18N [SPR-6555]","**[David Winterfeldt](https://jira.spring.io/secure/ViewProfile.jspa?name=dwinterfeldt)** opened **[SPR-6555](https://jira.spring.io/browse/SPR-6555?redirect=false)** and commented  Instead of having to configure i18n (ResourceBundleMessageSource, LocaleChangeInterceptor, SessionLocaleResolver), mvc:annotation-driven set this up by default or an attribute/element to activate i18n configuration.  The first one is  simpler, but doesn't easily allow for configuring ResourceBundleMessageSource or LocaleChangeInterceptor.  ```xml  ```  OR  ```xml                 ```  Beans to add to default MVC configuration  ---  ```xml                ```  ---  No further details from [SPR-6555](https://jira.spring.io/browse/SPR-6555?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-12-12T10:42:34Z","2019-01-13T21:47:56Z"
"","11175","LocalSessionFactoryBean schema update doesn't work with Hibernate v3.2 [SPR-6509]","**[David Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=dward_alfresco)** opened **[SPR-6509](https://jira.spring.io/browse/SPR-6509?redirect=false)** and commented  We are testing Alfresco against the CI-477 build and have found that org.springframework.orm.hibernate3.LocalSessionFactoryBean which now claims to require ""Hibernate 3.2 or later"" still doesn't work against 3.2 for schema updates. We get the following trace.  Caused by: java.lang.NoClassDefFoundError: org/hibernate/jdbc/Work at org.springframework.orm.hibernate3.LocalSessionFactoryBean.updateDatabaseSchema(LocalSessionFactoryBean.java:1004) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterSessionFactoryCreation(LocalSessionFactoryBean.java:886) at org.springframework.orm.hibernate3.AbstractSessionFactoryBean.afterPropertiesSet(AbstractSessionFactoryBean.java:213) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1460) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1398) ... 25 more   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d413c7e36c3f93dd8835846ed6258125776aa89","closed","in: core,","spring-projects-issues","2009-12-03T04:01:33Z","2012-06-19T03:43:02Z"
"","11078","CXF integration broken in Spring 3 RC2 [SPR-6412]","**[David Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=dward_alfresco)** opened **[SPR-6412](https://jira.spring.io/browse/SPR-6412?redirect=false)** and commented  At Alfresco we found that the integration with Apache CXF 2.2.2 that worked with previous snapshots of Spring 3 does not work with RC2.  We are using a set up more or less as documented here  http://cwiki.apache.org/CXF20DOC/writing-a-service-with-spring.html  It appears to be due to the processing of the `@PostConstruct` annotation on org.apache.cxf.binding.AbstractBindingFactory or org.apache.cxf.binding.soap.SoapBindingFactory. SoapBindingFactory is declared as follows in cxf-extension-soap.xml. As you can see, it has a lazy-init.                                             http://schemas.xmlsoap.org/soap/                 http://schemas.xmlsoap.org/wsdl/soap/                 http://schemas.xmlsoap.org/wsdl/soap12/                 http://www.w3.org/2003/05/soap/bindings/HTTP/                 http://schemas.xmlsoap.org/wsdl/soap/http                                      I found that in order to get it to work I had to manually add in CommonAnnotationBeanPostProcessor and override the SoapBindingFactory to not use lazy-init, as follows:                                                                           http://schemas.xmlsoap.org/soap/                 http://schemas.xmlsoap.org/wsdl/soap/                 http://schemas.xmlsoap.org/wsdl/soap12/                 http://www.w3.org/2003/05/soap/bindings/HTTP/                 http://schemas.xmlsoap.org/wsdl/soap/http                                      ---  **Issue Links:** - #11125 Hibernate support does not support Hibernate 3.2 (only 3.3) (_**""depends on""**_) - #11076 Behavior of Bean loading changed in RC2 (Incompatible to Apache CXF) (_**""is duplicated by""**_)  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2009-11-23T05:09:03Z","2019-01-11T15:35:34Z"
"","11077","Regression: Cannot import XML bean documents using classpath*: pseudo URLs [SPR-6411]","**[David Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=dward_alfresco)** opened **[SPR-6411](https://jira.spring.io/browse/SPR-6411?redirect=false)** and commented  At alfresco, we have a large number of spring bean files containing wildcard imports such as this  \             \  Unfortunately, this no longer works with Spring 3.0 RC2.  I have tracked down the problem to  org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(Element)  and have successfully fixed the issue in my own subclass with the following change              // Discover whether the location is an absolute or relative URI             boolean absoluteLocation = false;                  try             {                 absoluteLocation = location.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) // ADDED THIS LINE                         || ResourceUtils.toURI(location).isAbsolute();             }             catch (Exception ex)             {                 // cannot convert to an URI, considering the location relative             }  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11032 Cannot import bean definitions using classpath*: resource location (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2009-11-23T02:51:56Z","2019-01-11T15:35:28Z"
"","11777","Add ability for CNVR to search view names that use file extensions [SPR-7117]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-7117](https://jira.spring.io/browse/SPR-7117?redirect=false)** and commented  A common pattern for supporting multiple document types with a single controller is to append the file extension to the bean name and use BeanNameViewResolver.  For example if an application requires both Excel and PDF renderings of the logical view name ""view"", the corresponding bean names would be ""view.xls"" and ""view.pdf"".  CNVR currently does not support this pattern since it only tries to resolve ""view""  The proposed enhancement uses the mediaTypes map (or JAF in some cases) to obtain the file extension.  The request can use path extension, accept header, or request parameter containing the extension.  The mediaTypes map is reversed searched to obtain the file extension corresponding to each requested media type (Accept header can specify multiple types).  A second pass is made through the view resolvers appending ""."" + file extension to the view name  A patch is attached    ---  **Attachments:** - [ContentNegotiatingViewResolver.diff](https://jira.spring.io/secure/attachment/16489/ContentNegotiatingViewResolver.diff) (_1.40 kB_) - [ContentNegotiatingViewResolver.diff](https://jira.spring.io/secure/attachment/16470/ContentNegotiatingViewResolver.diff) (_1.29 kB_) - [ContentNegotiatingViewResolverTests.diff](https://jira.spring.io/secure/attachment/16471/ContentNegotiatingViewResolverTests.diff) (_5.12 kB_)","closed","type: enhancement,","spring-projects-issues","2010-04-21T21:04:03Z","2012-06-19T03:44:18Z"
"","11741","Add ignoreJafMediaTypes to ContentNegotiatingViewResolver [SPR-7081]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-7081](https://jira.spring.io/browse/SPR-7081?redirect=false)** and commented  The configuration below is intended to render an Excel document for a .xls extension when the view name is ""accounts/list"" in a Web application. No extension, or .html should resolve to the TilesView. This works, however any non-html extension, e.g., /accounts.foo also renders an Excel document . This happens because the JAF file types map returns a media type of ""application/octet-stream"" for arbitrary file extensions. Thus the defaultContentType is suppressed.  \ \  \ \ \			 \ \   \ \ \ \ \ \  \ \ \ The proposed solution is to add an ignoreJafFileTypes property. If set to true, will produce the desired effect: .xls renders the Excel document, any other type reverts to the default HTML. The proposed patch and unit tests are attached.   ---  **Attachments:** - [ContentNegotiatingViewResolver.java](https://jira.spring.io/secure/attachment/16396/ContentNegotiatingViewResolver.java) (_19.37 kB_) - [ContentNegotiatingViewResolverTests.java](https://jira.spring.io/secure/attachment/16397/ContentNegotiatingViewResolverTests.java) (_16.99 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e6b0a1d4d7d5eea5136f236502ef84614c730333","closed","type: enhancement,","spring-projects-issues","2010-04-08T01:34:32Z","2012-06-19T03:44:06Z"
"","11516","TypeUtils.isAssignable() Returns Incorrect Value with Lower Bounds [SPR-6850]","**[David Sledge](https://jira.spring.io/secure/ViewProfile.jspa?name=sledged)** opened **[SPR-6850](https://jira.spring.io/browse/SPR-6850?redirect=false)** and commented  If I add the following member to `TypeUtilsTests`  ``` public static List< ? super Object > storableObjectList; ```  and then append the following lines to `TypeUtilsTests.withParamerterizedTypes()`,  ``` Type storableObjectListType = getClass()     .getField(""storableObjectList"").getGenericType(); assertFalse(isAssignable(storableObjectListType, objectsType)); ```  the test fails.  A variable of type `List< ? >` is not assignable to a variable of type `List< ? super Object >` (not without explicit casting anyway).  I've put together a potential fix, with a side-effect of handling `null`s as valid input.   ---  **Affects:** 3.0 GA  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16338/mylyn-context.zip) (_17.19 kB_) - [TypeUtils.java](https://jira.spring.io/secure/attachment/16202/TypeUtils.java) (_6.18 kB_) - [TypeUtilsWildcardFix.patch](https://jira.spring.io/secure/attachment/16336/TypeUtilsWildcardFix.patch) (_12.22 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbda55f141fa46e801f82504ab133cfe91923cc7, https://github.com/spring-projects/spring-framework/commit/66d2c6698b4642260cd3177407d036be4b0fc84a","closed","in: core,","spring-projects-issues","2010-02-16T07:27:11Z","2012-06-19T03:43:24Z"
"","10990","Remove need for MethodReplacer interface for arbitray method injection [SPR-6324]","**[David Sledge](https://jira.spring.io/secure/ViewProfile.jspa?name=sledged)** opened **[SPR-6324](https://jira.spring.io/browse/SPR-6324?redirect=false)** and commented  Spring's arbitrary method replacement currently requires the bean containing the replacing method to implement the `org.springframework.beans.factory.support.MethodReplacer` interface, which couples the code to the framework.  I'd like to explicitly specify the method that is replacing the existing one instead of Spring always using `MethodReplacer#reimplement(Object, Method, Object[])`.  Given the [example](http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#beans-factory-arbitrary-method-replacement) in Spring's documentation, the `ReplacementComputeValue` class could be replaced with:  ``` /** meant to be used to override the existing computeValue(String)     implementation in MyValueCalculator   */ public class ValueCalculator {      public String calculateValue(String input) {         // calculate an output value based on the         // input value and return the result         ...         String result = ...;         ...          return result;     } } ```  And the bean definition rewritten as:  ```","closed","type: enhancement,","spring-projects-issues","2009-11-10T04:50:49Z","2018-12-28T10:13:54Z"
"","10932","Support for Nested  Tag in  Tag [SPR-6264]","**[David Sledge](https://jira.spring.io/secure/ViewProfile.jspa?name=sledged)** opened **[SPR-6264](https://jira.spring.io/browse/SPR-6264?redirect=false)** and commented  I recently had a desire in one of my projects to get a `java.io.Writer` object for writing a file across an FTP connection.  I ended up with the following bean definitions:  ```xml     ...                                            ...   ```  Worked like a charm.  However, I realized the only reason I assigned IDs to the `url`, and `urlConnection` beans is so that I could reference them using the `factory-bean` attribute.  (Likewise, the only reason the `writer` bean had an ID, is so that it could be referenced by a `` tag.)  All three top-level beans are only referenced in one place each; never anywhere else.  A small part of me likes the idea of nesting beans that are only ever referenced in one place, so as not to pollute my bean definitions with top-level beans.  A nested `` tag (which would be mutually exclusive with the `factory-bean` attribute) would do the trick nicely.  With it I could rewrite the above as:  ```xml     ...                                                                                        ...   ```  The attributes and content of the `` tag would be the same as the `` tag, except it wouldn't allow the `scope`, `id`, or `name` attributes.   ---  **Affects:** 2.5.6, 3.0 RC1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-22T07:50:00Z","2018-12-28T10:17:26Z"
"","10931","Remove 'configLocation' Requirement from SqlMapClientFactoryBean (iBATIS) [SPR-6263]","**[David Sledge](https://jira.spring.io/secure/ViewProfile.jspa?name=sledged)** opened **[SPR-6263](https://jira.spring.io/browse/SPR-6263?redirect=false)** and commented  `org.springframework.orm.ibatis.SqlMapClientFactoryBean` sports a number of properties that allows configuration elements to be moved from the `sqlMapConfig.xml` file into bean definitions—including the all-important sql map locations.  Because of this `SqlMapClientFactoryBean` should not require any `configLocation` entries in the circumstances where all the configuration is supplied in the bean definitions.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-10-22T06:27:54Z","2015-09-22T17:34:36Z"
"","11635","AbstractHttpMessageConverter canWrite logic the wrong way round?? [SPR-6970]","**[David Melia](https://jira.spring.io/secure/ViewProfile.jspa?name=mzz6wh)** opened **[SPR-6970](https://jira.spring.io/browse/SPR-6970?redirect=false)** and commented  Hi,  the method protected boolean canWrite(MediaType mediaType) in org.springframework.http.converter.AbstractHttpMessageConverter is incorrect.  ``` /**  * Returns true if the given media type includes any of the  * {@linkplain #setSupportedMediaTypes(List) supported media types}.  * @param mediaType the media type  * @return true if the supported media types include the media type, or if the media type is {@code null}  */ protected boolean canWrite(MediaType mediaType) {      if (mediaType == null) {           return true;      }      for (MediaType supportedMediaType : getSupportedMediaTypes()) {           if (mediaType.includes(supportedMediaType)) {                return true;           }      }      return false; } ```  I think the line if (mediaType.includes(supportedMediaType) should be if (supportedMediaType.includes(mediaType)  The reason I think this is: 1) the javadoc states ""`@return` true if the supported media types include the media type ..."" 2) I am using the MarshallingHttpMessageConverter which supports application/**+xml by default.  In my HTTP GET I am passing in accept=""application/whatever+xml"".  so in the above canWrite tries to check if ""application/whatever+xml"" includes ""application/**+xml"" which doesn't really make much sense (and also returns false obviously).  Check out my main test below which always returns false  ``` public static void main(String[] args) {      MediaType soapMediaType = new MediaType(""application"",""soap+xml"");      MarshallingHttpMessageConverter msgConverter = new MarshallingHttpMessageConverter() {                     @Override           public boolean supports(Class clazz) {                return true;                                   }			                      };		                                                                                                                                  System.out.println(msgConverter.canWrite(Object.class, soapMediaType)); // prints out false but I think should be true.	 } ```  Thanks  ---  **Affects:** 3.0.1  **Issue Links:** - #10882 Using `@ResponseBody` throws HttpMediaTypeNotAcceptableException when it supports writing an acceptable MediaType - #11352 `@ResponseBody` throws HttpMediaTypeNotAcceptableException if client accepts ""*/*""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/85b8befbd1e4b7b4a975c92c592577fe58ffdd8f","closed","type: bug,","spring-projects-issues","2010-03-11T00:58:24Z","2019-01-13T07:54:55Z"
"","10951","scope of javax.servlet in portlet pom is compile instead of provided [SPR-6284]","**[David Marteinson](https://jira.spring.io/secure/ViewProfile.jspa?name=dmarteinson)** opened **[SPR-6284](https://jira.spring.io/browse/SPR-6284?redirect=false)** and commented  The dependency for servlet-api is declared in the org.springframework.web.portlet pom.xml as:             javax.servlet       servlet-api       2.5       compile       I think the scope should be 'provided'?   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6494041849c58a99eba644649b5abf5fa4c7c5e0","closed","type: bug,","spring-projects-issues","2009-10-30T04:17:55Z","2012-06-19T03:43:07Z"
"","11517","autodetect of jmx mbeans either doesn't work, or not like the doc describes [SPR-6851]","**[David M. Karr](https://jira.spring.io/secure/ViewProfile.jspa?name=dkarr)** opened **[SPR-6851](https://jira.spring.io/browse/SPR-6851?redirect=false)** and commented  I've been experimenting with trying to enable autodetection of JMX mbeans in my Spring context.  Although I've had no trouble explicitly listing my mbeans in the ""beans"" property in the context, that's not quite optimal.  I'm seeing more issues than the subject line describes, but I think they are issues with interpreting how this thing is supposed to work.  It could be that all of the issues I'm seeing are just documentation problems, but I can't tell for certain.  I'm using the `@Managed`... annotations in the bean class to specify the JMX attributes.  I'd prefer to have them there than in the context.  The only one that's somewhat questionable is the mbean name.  I think I would want to set the ""name="" part, but not the part before it (I'm not certain what the JMX-specific terms are for those pieces).  For instance, in my class I currently have:  objectName = ""springjmxbug:name=logBean""  it seems reasonable to set ""logBean"" in the class, but I think ""springjmxbug"" would be better set in the context.  Despite the other questions about how this is supposed to work, in my testing, I've been unable to find an arrangement where autodetection will work, but it's entirely possible I'm misinterpreting how it's supposed to work.  For instance, here's a short excerpt from my context:  ---                                                                                                                                  ---  Here's my ""Log4JManager"" class:  ---  `@ManagedResource`(objectName = ""springjmxbug:name=logBean"", description = ""Bean for controlling Log4J levels in DynamicContent"") public class Log4JManager { `@ManagedOperation`(description = ""Set a Log4J logging level for a specific category (package)"") `@ManagedOperationParameters`({ `@ManagedOperationParameter`(name = ""packageName"", description = ""Log4J category name""), `@ManagedOperationParameter`(name = ""level"", description = ""Log4J level"") }) public void setLogLevel(String packageName, String level) { LogManager.getLogger(packageName).setLevel(Level.toLevel(level)); }      @ManagedOperation(description = ""Get a Log4J logging level for a specific category (package)"")     @ManagedOperationParameters({         @ManagedOperationParameter(name = ""packageName"", description = ""Log4J category name"")     })     public String getLogLevel(String packageName) {         return LogManager.getLogger(packageName).getLevel().toString();     }  }  ---  If I comment out the ""beans"" property, I get this very confusing error message:  ""Unable to register MBean [springjmxbug.Log4JManager@1ad637e] with key 'logManager'; nested exception is javax.management.MalformedObjectNameException: Key properties cannot be empty""  Looking at the section in the doc that covers this, there is the following example:  ---  \ \ \ \  ---  There are a couple of confusing elements here.  First, ""autodetect"" is set to true, but right there is the definition of the bean.  If this is what is intended, then the meaning of ""autodetect"" is very different from what it means in the rest of Spring.  Second, the definition of this bean using class ""org.springframework.jmx.export.TestDynamicMBean"" is odd, as there's no such class.  I'm attaching a Maven project that I've been using to demonstrate these issues.  ---  **Affects:** 2.5.6  **Attachments:** - [springjmxbug.zip](https://jira.spring.io/secure/attachment/16203/springjmxbug.zip) (_12.64 kB_)","closed","in: core,","spring-projects-issues","2010-02-16T08:31:01Z","2019-01-13T07:55:26Z"
"","11305","ResourceBundleMessageSource swallows IllegalArgumentException [SPR-6639]","**[David Linsin](https://jira.spring.io/secure/ViewProfile.jspa?name=dlinsin)** opened **[SPR-6639](https://jira.spring.io/browse/SPR-6639?redirect=false)** and commented  ResourceBundleMessageSource swallows an IllegalArgumentException in case the set properties file contains e.g. an Unicode character with a broken \uXXXX representation of the character. Java's ResouceBundle implementation throws a MissingResource, with its cause set to IllegalArgumentException. The same would be helpful in case of Spring's NoSuchMessageException.  I implemented a test case demonstrating the problem at http://github.com/dlinsin/area51/tree/master/ResourceBundleMessageSourceBug/   ---  **Affects:** 3.0 GA  **Attachments:** - [ResourceBundleMessageSourceBug.zip](https://jira.spring.io/secure/attachment/16065/ResourceBundleMessageSourceBug.zip) (_9.80 kB_)  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-04T22:23:45Z","2018-12-28T10:15:21Z"
"","11706","ContextLoader requires servlet-api 2.5 [SPR-7044]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-7044](https://jira.spring.io/browse/SPR-7044?redirect=false)** and commented  java.lang.NoSuchMethodError: javax.servlet.ServletContext.getContextPath()Ljava/lang/String; at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:265) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:196) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548)  getContextPath() is a servlet-spec 2.5 method http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getContextPath%28%29. I suggest methods are inspected with reflection to verify presence of appropiate method.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa719ad4c58d3c172d137746675c4d6249e96e86","closed","type: bug,","spring-projects-issues","2010-03-28T23:37:14Z","2012-06-19T03:42:42Z"
"","11424","Make the maven repo browsable [SPR-6758]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-6758](https://jira.spring.io/browse/SPR-6758?redirect=false)** and commented  See https://jira.springsource.org/browse/SPR-6408 . As the maven repo is hosted at the exotic s3 service, it's not browsable - now as the s3 browse service has ciest to exist. Therefore it's not possible to know what the snapshots are named w/o having the current source, inspecting the commits and the version in the pom's, which is rather user-unfriendly. Maybe you could even move this to http://oss.sonatype.org/ which would even provide an index which can be used in eclipse etc. Also, the blog at http://blog.springsource.com/2009/12/02/obtaining-spring-3-artifacts-with-maven/ is flat out wrong, as it references a version which doesn't exist.   ---  2 votes, 4 watchers","closed","","spring-projects-issues","2010-01-23T05:11:57Z","2019-01-11T15:43:47Z"
"","11020","ApplicationContext very slow to shutdown with bean of type org.springframework.scheduling.quartz.SchedulerFactoryBean  [SPR-6354]","**[David Gageot](https://jira.spring.io/secure/ViewProfile.jspa?name=dgageot)** opened **[SPR-6354](https://jira.spring.io/browse/SPR-6354?redirect=false)** and commented  The following code takes less than a second to run with version 3.0RC1. With 3.0RC2, it takes more than 30s.  The problem seems to come from the combination of SchedulerFactoryBean and lazy=true. With lazy=false, everything is ok.  ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(""applicationContext.xml"");		 Object bean = context.getBean(""quartzScheduler""); context.destroy();  \ Here is the output log: Nov 13, 2009 11:05:17 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@5265a77f: startup date [Fri Nov 13 23:05:17 CET 2009]; root of context hierarchy Nov 13, 2009 11:05:17 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [applicationContext.xml] Nov 13, 2009 11:05:18 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@8888e6c: defining beans [quartzScheduler]; root of factory hierarchy Nov 13, 2009 11:05:18 PM org.quartz.core.SchedulerSignalerImpl \ INFO: Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl Nov 13, 2009 11:05:18 PM org.quartz.core.QuartzScheduler \ INFO: Quartz Scheduler v.1.6.2 created. Nov 13, 2009 11:05:18 PM org.quartz.simpl.RAMJobStore initialize INFO: RAMJobStore initialized. Nov 13, 2009 11:05:18 PM org.quartz.impl.StdSchedulerFactory instantiate INFO: Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance. Nov 13, 2009 11:05:18 PM org.quartz.impl.StdSchedulerFactory instantiate INFO: Quartz scheduler version: 1.6.2 Nov 13, 2009 11:05:18 PM org.quartz.core.QuartzScheduler setJobFactory INFO: JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@49938039 Nov 13, 2009 11:05:18 PM org.springframework.context.support.AbstractApplicationContext doClose INFO: Closing org.springframework.context.support.ClassPathXmlApplicationContext@5265a77f: startup date [Fri Nov 13 23:05:17 CET 2009]; root of context hierarchy Nov 13, 2009 11:05:48 PM org.springframework.context.support.DefaultLifecycleProcessor$ShutdownGroup shutdown WARNING: failed to shutdown beans with order 2147483647 within timeout of 30000 Nov 13, 2009 11:05:48 PM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@8888e6c: defining beans [quartzScheduler]; root of factory hierarchy Nov 13, 2009 11:05:48 PM org.springframework.scheduling.quartz.SchedulerFactoryBean destroy INFO: Shutting down Quartz Scheduler Nov 13, 2009 11:05:48 PM org.quartz.core.QuartzScheduler shutdown INFO: Scheduler quartzScheduler_$\_NON_CLUSTERED shutting down. Nov 13, 2009 11:05:48 PM org.quartz.core.QuartzScheduler standby INFO: Scheduler quartzScheduler_$\_NON_CLUSTERED paused. Nov 13, 2009 11:05:48 PM org.quartz.core.QuartzScheduler shutdown INFO: Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #21440 Inconsistent handling of dependent lifecycle beans in DefaultLifecycleProcessor - #11238 Application context does not properly handle non-running SmartLifecyle beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c6f361341101bda493262b97bd36bd6a3968fcb6","closed","in: core,","spring-projects-issues","2009-11-13T08:06:39Z","2019-01-11T14:34:57Z"
"","11840","Add an addtional rollbackFor option on the @Transactional annotation to default to all checked excpetions. [SPR-7181]","**[David Cole](https://jira.spring.io/secure/ViewProfile.jspa?name=mojava)** opened **[SPR-7181](https://jira.spring.io/browse/SPR-7181?redirect=false)** and commented  When defining the `@Transactional` annotation, we typically want the transaction to rollback for all checked exceptions that are defined in the throws clause of a method. In order to achieve that, we have to explicitly add each exception to the rollbackFor property on the `@Transactional` declaration.  For example:  `@Transactional`(readOnly = false, propagation = Propagation.REQUIRES_NEW, rollbackFor = {MyException.class, HisException.class}) public void updateFoo(Foo foo) throws MyException, HisException{ // do something }  Now if we want to add an additional exception to the throws clause and also have it included in the rollBackFor, we have to add the exception in both places:  For example:  `@Transactional`(readOnly = false, propagation = Propagation.REQUIRES_NEW, rollbackFor = {MyException.class, HisException.class, HerException.class}) public void updateFoo(Foo foo) throws MyException, HisException, HerException{ // do something }  I think it would be a great addition to have the ability to set rollbackFor=checked or something similar, so that if we change the throws clause of the method, the rollbackFor would automatically pick up the changes.  For example:  `@Transactional`(readOnly = false, propagation = Propagation.REQUIRES_NEW, rollbackFor = checked) public void updateFoo(Foo foo) throws MyException, HisException, HerException{ // do something }   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-05-07T08:26:02Z","2017-11-08T01:21:25Z"
"","11839","@Transactional inheritance [SPR-7180]","**[David Cole](https://jira.spring.io/secure/ViewProfile.jspa?name=mojava)** opened **[SPR-7180](https://jira.spring.io/browse/SPR-7180?redirect=false)** and commented  For large projects, with a lot of transactional aware objects, it seems useful to define the `@Transactional` semantics at the class level, and override the settings at the method level as necessary. Consider the following example:  ``` @Transactional(propagation = Propagation.REQUIRED, rollbackFor = MyException.class, timeout = 600) public class DefaultFooService implements FooService {    public Foo getFoo(String fooName) {     // do something   }    // these settings have precedence for this method @Transactional(propagation = Propagation.REQUIRES_NEW) public void updateFoo(Foo foo) {     // do something   } } ```  At the class level, we have defined what we hoped would be the defaults for all methods within the class. For the method updateFoo(), we need to change the propagation level to REQUIRES_NEW, but want to re-use the defaults that have already been specified at the class level. So we added the `@Transactional` meta-data on the method. Once we have added just the propagation level to the method, we lose rollbackFor and timeout properties set at the class level - there is no form of inheritance.  As a result, you must include all additional properties again on the method, the properties defined at the class level are completely ignored. The result of this is that we have to redundantly copy the properties onto the `@Transactional` declaration for every method from the class in order to retain them, which is unfortunate.  What we were hoping for, was to be able to simply change the rollbackFor by appending an additional Exception at the class level and have all methods, only those with the `@Transactional` annotation that did not explicitly set the rollbackFor property, benefit from the change via inheritance. Instead, we would have to go back and systematically add the change to every method explicitly, instead of simply appending it to the rollbackFor property of the `@Transactional` annotation at the class level.  I can see that maybe this could introduce some problems with backwards compatibility. So, maybe Spring could introduce an additional property on the `@Transactional` annotation like: 'inherit=true', which would then signal that any unset properties should be inherited from the next higher level. So, if the method set the inherit=true property, then it should inherit any unset properties from the class. If the class has not set a property, then it would inherit from the TransactionManager defaults as expected.    ---  **Affects:** 3.0 GA  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-05-07T06:45:52Z","2020-01-06T13:09:39Z"
"","11701","ManagedAttribute description has no effect [SPR-7039]","**[David Cole](https://jira.spring.io/secure/ViewProfile.jspa?name=mojava)** opened **[SPR-7039](https://jira.spring.io/browse/SPR-7039?redirect=false)** and commented  currencyTimeLimit=-1 below has no effect since it doesn't override the default currencyTimeLimit=0 provided by ManagedResource. AFAIK from the spec I should be able to override currencyTimeLimit for each managed attribute?  `@ManagedResource`(objectName=""Scheduler"", description=""The scheduler is responsible for running jobs"") public class SchedulerImpl extends java.lang.Thread implements ApplicationListener, ApplicationContextAware, InitializingBean, BeanNameAware, Scheduler {      @ManagedAttribute(description=""Number of works in the queue waiting to be executed"", currencyTimeLimit=-1)     public String getNow() {     	return new Date().toString();     }  }   --- No further details from [SPR-7039](https://jira.spring.io/browse/SPR-7039?redirect=false)","closed","","spring-projects-issues","2010-03-26T03:45:15Z","2019-01-11T13:23:26Z"
"","11005","Upload all 3.0 XSD files to http://www.springframework.org/schema [SPR-6339]","**[David Cole](https://jira.spring.io/secure/ViewProfile.jspa?name=mojava)** opened **[SPR-6339](https://jira.spring.io/browse/SPR-6339?redirect=false)** and commented  The http://www.springframework.org/schema currently only has the 2.5 xsd's uploaded and needs the 3.0 xsd's uploaded.  Throughout the http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ 3.0.x docs, the 3.0 xsd's are being referenced but do not avialable.   ---  **Affects:** 3.0 RC1","closed","type: task,","spring-projects-issues","2009-11-12T06:29:12Z","2019-01-11T14:37:43Z"
"","11003","spring-jms-3.0.xsd schema not available [SPR-6337]","**[David Cole](https://jira.spring.io/secure/ViewProfile.jspa?name=mojava)** opened **[SPR-6337](https://jira.spring.io/browse/SPR-6337?redirect=false)** and commented  The spring-jms-3.0.xsd referened in the spring docs at:  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch21s06.html  is not available at the expected location:  http://www.springframework.org/schema/jms/spring-jms-3.0.xsd   ---  **Affects:** 3.0 RC1","closed","type: task,","spring-projects-issues","2009-11-12T01:52:13Z","2012-06-19T03:43:27Z"
"","11785","Spring JMS namespace - support destination-ref as well as destination in  tag [SPR-7125]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-7125](https://jira.spring.io/browse/SPR-7125?redirect=false)** and commented  The  destination attribute results in the String being looked up by the ""destination-resolver"" declared in the  tag.  By default, the DestinationResolver implementation is a DynamicDestinationResolver which does a good job of creating a javax.jms.Destination based on the String value passed in as the ""destination"".  However, most of the time, I don't want to hardcode the destination name in the place where I'm creating the jms:listener. I want to have the destination name string stored off in another configuration file.  To acheive this, I can use an org.springframework.jms.support.destination.BeanFactoryDestinationResolver, but this requires a javax.jms.Destination as an input rather than a String. I want to just be able to configure a String rather than a Destination; you often need access to a JMS Session in order to create a Destination object, which is something I want done at runtime when the bean configurations are being loaded.  To solve the problem, I have implemented my own DestinationResolver which just: * Interprets the ""destination"" as a bean identifier rather than a hardcoded name. * Looks up the bean identifier and insists that it's a String. * Uses a DynamicDestinationResolver (which I've subclassed) to lookup the Destination.  I'd have thought that this would be a common use case. It would be great to have a ""destination-ref"" attribute on jms:listener (that **must** point to a String bean) that would essentially do what my custom DestinationResolver does.   ---  **Affects:** 2.5.6, 3.0.2","closed","status: invalid,","spring-projects-issues","2010-04-22T21:31:59Z","2019-01-12T05:32:08Z"
"","11852","Support implicit autowiring for components with single non-default constructor [SPR-7192]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7192](https://jira.spring.io/browse/SPR-7192?redirect=false)** and commented  Example from Chris's DIStyles presentation:  AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(TellerUI.class, InMemoryAccountRepository.class, TransferServiceImpl.class, FlatFeePolicy.class); TransferService transferService = context.getBean(TransferService.class);  This works fine now if all the types have explicitly `@Autowired` constructors, it would be great if those components could just be autowirable (implicitly).  All we would need would be to optimistically register a bean definition for any class where we don't find explicit `@Autowired` instructions.  ---  **Issue Links:** - #16883 Make `@Autowired` optional on a single constructor of a class decorated with `@Component` (_**""duplicates""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-05-11T19:32:53Z","2019-01-13T07:53:56Z"
"","11766","AbstractApplicationContext.close() could be more forgiving of exceptions [SPR-7106]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7106](https://jira.spring.io/browse/SPR-7106?redirect=false)** and commented  AbstractApplicationContext.close() could be more forgiving of exceptions.  Since it is often called in a finally block, technically it should be used like this:  ``` try {   context.refresh() } finally {   try {     context.close();   } catch (Exception e) {     // swallow or log it   } } ```  If you don't catch and log/swallow you never get to see the exceptions thrown by context.refresh() (which are more interesting since they happen first).  This never used to happen in my code until Spring 3.0, at which point LifecycleProcessor will sometimes throw an exception (e.g. especially if context.refresh() has failed).  There is a catch and log in there, but it only applies to quite a small block, so I assume that was adequate until the lifecycle procressor came along.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-04-16T05:18:02Z","2012-06-19T03:44:00Z"
"","11757","Allow context to be passed into Groovy script on the stack [SPR-7097]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7097](https://jira.spring.io/browse/SPR-7097?redirect=false)** and commented  The GroovyCustomizer is a nice feature in the lang:groovy support, but it only supports a singleton customizer.  It would be nice for other potential users of Groovy and Spring (e.g. Spring Integration or anyone who wants to use Groovy for expression evaluation) to be able to pass in some context on the stack, so thread safety is not compromised.   --- No further details from [SPR-7097](https://jira.spring.io/browse/SPR-7097?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2010-04-15T00:35:02Z","2019-01-12T03:50:22Z"
"","11739","ConversionService cannot override existing Resource editors [SPR-7079]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7079](https://jira.spring.io/browse/SPR-7079?redirect=false)** and commented  ConversionService cannot override existing property editors.  If the intention is (as I believe) that ConversionService is the preferred mechanism for registering type conversion implementations, then it should be able to override existing (and default) property editors.  It doesn't work right now in bean definitions because TypeConverterDelegate only uses the conversion service if a property editor is not found:  ``` private  T convertIfNecessary(String propertyName, Object oldValue, Object newValue, 			Class requiredType, TypeDescriptor typeDescriptor) throws IllegalArgumentException { ... 	if (editor == null && conversionService != null && convertedValue != null) {       ...   } ... } ```  ---  **Affects:** 3.0 GA  **Issue Links:** - #11809 GenericConversionService can't find converters for interface-based arrays. (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15321197878f7b863976393a1b2cf89ba0469083","closed","type: enhancement,","spring-projects-issues","2010-04-07T20:28:58Z","2019-01-11T13:25:20Z"
"","11690","Allow @Bean methods to override definitions in XML [SPR-7028]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7028](https://jira.spring.io/browse/SPR-7028?redirect=false)** and commented  There are two ways I might want to do this, and both fail.  1. Use `@ImportResource` in an `@Configuration` to load an XML file, then override a bean using `@Bean` 2. Write an XML file that imports another file and then defines a bean that is `@Configuration`, and the latter provides a bean with the same name  Neither works.  Case 1 fails because `ConfigurationClassBeanDefinitionReader` always loads XML imports **after** the `@Bean` definitions.  This seems like the wrong order, so it would be good to understand why it is implemented that way (I imported before I defined the `@Bean`, so I expect the latter to win).  This code in `ConfigurationClassBeanDefinitionReader` prevents the override in case 2:  ``` if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) { 	// no -> then it's an external override, probably XML 	// overriding is legal, return immediately 	return; } ```  ---  **Affects:** 3.0.1  **Issue Links:** - #12839 Revised support for bean definition visibility and overriding (_**""is depended on by""**_) - #15434 Reconsider whether to generally allow bean overriding by name - #10181 Bean Configuration Overriding - #12637 Support profile exclusivity and/or bean definition finality - #12000 Allow bean definitions from `@Configuration` classes to override those defined in XML  8 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-24T02:58:10Z","2019-01-13T07:54:41Z"
"","11620","TaskExecutor created with task:executor not shutdown when context closes [SPR-6955]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6955](https://jira.spring.io/browse/SPR-6955?redirect=false)** and commented  TaskExecutorFactoryBean does not implement DisposableBean, so there is no callback for the shutdown to happen.  It is easy to verify that the executor is not shut down (you expect to see a log message from it and don't).  I have no idea why, but the problem seems to be particularly acute in a webapp because for some reason there it prevents the lifecycle processor from completing the shutdown (before timing out).  ---  **Affects:** 3.0 GA  **Issue Links:** - #11566 Tomcat does not shutdown correctly when using task:scheduled-taks (_**""is duplicated by""**_) - #11566 Tomcat does not shutdown correctly when using task:scheduled-taks  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d7df01d73bd2ef4d440c230c0e3d444e0abc185","closed","in: core,","spring-projects-issues","2010-03-07T19:37:31Z","2019-01-12T16:49:44Z"
"","11606","More expected exception tweaks for SpEL expression method invocations [SPR-6941]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6941](https://jira.spring.io/browse/SPR-6941?redirect=false)** and commented  #11276 added a new exception handling pathway to MethodReference.  There are two outstanding issues:  1 The new handling pathway is only taken if the cachedExecutor is not null (no presumably only on the first execution)  2 It only handles RuntimeException in a special way and not checked Exceptions (which might still be legal and expected)  1 looks like a bug? 2 is more tricky, but I believe still against the spirit of #11276 and the comments added in the code to explain the new handling pathway.  I think that if the method declares that it throws the exception that is being handled it should be rethrown without wrapping.  ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b0655b459d269b636bfed628cadc68c00eeafcf, https://github.com/spring-projects/spring-framework/commit/2dd11343032abb93cc742d38d7784ddfca38608d","closed","type: enhancement,","spring-projects-issues","2010-03-03T21:25:58Z","2019-01-11T16:31:11Z"
"","11592","Make toString() in JDK proxies friendly for lazy initialization [SPR-6927]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6927](https://jira.spring.io/browse/SPR-6927?redirect=false)** and commented  Make toString() in JDK proxies friendly for lazy initialization.  There are special cases for equals and hashCode already.  This is a bit different - ideally you want toString() to delegate to the target eventually if it has an implementation, but return something that doesn't involve hydrating the target if it isn't already available.  See [INT-998](https://jira.spring.io/browse/INT-998) for a possible side effect of the current implementation.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-03T03:14:49Z","2015-09-22T17:34:34Z"
"","11473","ConversionService fails with CustomEditorConfigurer [SPR-6807]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6807](https://jira.spring.io/browse/SPR-6807?redirect=false)** and commented  ConversionService fails with CustomEditorConfigurer.  While it is not recommended to mix the two in the same context it is unavoidable if users want to use Spring Batch and a ConversionService (because Batch is 2.5.6 compatible and installs its own converter).  So if you install a CustomEditorConfigurer like this  ```                                                     ```  and then a ConversionService using the factory bean, you get an exception on startup saying that the ConversionService cannot convert the map in the CustomEditorConfigurer:  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'customEditorConfigurer' defined in file [....xml]: Initialization of bean failed; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value {org.springframework.batch.item.file.transform.Range[]=class org.springframework.batch.item.file.transform.RangeArrayPropertyEditor} from type 'java.util.LinkedHashMap' to type 'java.util.Map'; nested exception is java.lang.IllegalArgumentException: Left-hand side type must not be null 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1008) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:604) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:398) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) 	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280) 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) 	... 24 more Caused by: org.springframework.core.convert.ConversionFailedException: Unable to convert value {org.springframework.batch.item.file.transform.Range[]=class org.springframework.batch.item.file.transform.RangeArrayPropertyEditor} from type 'java.util.LinkedHashMap' to type 'java.util.Map'; nested exception is java.lang.IllegalArgumentException: Left-hand side type must not be null 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:40) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:135) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:199) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:154) 	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:452) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1351) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1310) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1067) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:511) 	... 36 more Caused by: java.lang.IllegalArgumentException: Left-hand side type must not be null 	at org.springframework.util.Assert.notNull(Assert.java:112) 	at org.springframework.util.ClassUtils.isAssignable(ClassUtils.java:806) 	at org.springframework.core.convert.TypeDescriptor.isTypeAssignableTo(TypeDescriptor.java:459) 	at org.springframework.core.convert.TypeDescriptor.isAssignableTo(TypeDescriptor.java:373) 	at org.springframework.core.convert.support.MapToMapConverter.convert(MapToMapConverter.java:81) 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:37) 	... 44 more ```  ---  **Affects:** 3.0 GA  **Issue Links:** - #11342 MapToMapConverter cannot handle unbounded wildcard Value type","closed","type: bug,","spring-projects-issues","2010-02-06T03:52:13Z","2019-01-11T16:47:30Z"
"","11344","Wrong version in POMs (should be 3.0.1 now) [SPR-6678]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6678](https://jira.spring.io/browse/SPR-6678?redirect=false)** and commented   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b077d5ba975debea0f75b76441c562b0b54e4294","closed","type: bug,","spring-projects-issues","2010-01-12T20:33:14Z","2012-06-19T03:44:05Z"
"","11338","Purge of Derby embedded database doesn't work [SPR-6672]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6672](https://jira.spring.io/browse/SPR-6672?redirect=false)** and commented  Purge of Derby embedded database doesn't work: if you create a Derby embedded database twice in the same VM (even if the first one is cleanly shutdown) there is an error:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'derbyDataSource': Invocation of init method failed; nested exception is org.springframework.dao.DataAccessResourceFailureException: Failed to populate database; nested exception is java.sql.SQLException: Failed to create database 'memory:testdb', see the next exception for details. 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1401) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:512) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:544) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:842) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:416) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83) 	at org.springframework.jdbc.config.JdbcNamespaceIntegrationTest.testCreateEmbeddedDatabaseAgain(JdbcNamespaceIntegrationTest.java:29) ... ```  There is clearly a bug here in Derby, but we should be able to work around it somehow because it is really irritating and makes Derby basically useless as a test platform.  It might mean that ConnectionProperties has to be extended to accept more generic name-value style attributes, so that they can be passed into the driver as Properties,   ---  **Affects:** 3.0 GA","closed","status: invalid,","spring-projects-issues","2010-01-11T08:24:11Z","2019-01-12T05:32:45Z"
"","11334","Small Connection leak in DataSourceInitializer [SPR-6668]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6668](https://jira.spring.io/browse/SPR-6668?redirect=false)** and commented  There's a connection leak in DataSourceInitializer - most people will use this only in integration tests, so the leak isn't that sever, but it's easy to fix.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4d8651aa94cf8611b4096ae37bfa7b5953d0e84","closed","type: bug,","spring-projects-issues","2010-01-11T03:26:59Z","2012-06-19T03:43:23Z"
"","11313","Make TestContext more accessible for testing custom TestExecutionListeners [SPR-6647]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6647](https://jira.spring.io/browse/SPR-6647?redirect=false)** and commented  Make TestContext more accessible for testing custom TestExecutionListeners.  It's nice to be able to write custom listeners, but they are a bitch to unit test because the TestContext has no interface, no public constructor, and no extendable methods.  ---  **Affects:** 3.0 GA  **Issue Links:** - #12348 Convert TestContext to interface and introduce default implementation (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2010-01-06T01:54:16Z","2019-01-11T16:14:31Z"
"","11296","Make interface signature check optional in PersistenceExceptionTranslationInterceptor so it can translate all exceptions [SPR-6630]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6630](https://jira.spring.io/browse/SPR-6630?redirect=false)** and commented  PersistenceExceptionTranslationInterceptor does this:  ``` public Object invoke(MethodInvocation mi) throws Throwable {      try {           return mi.proceed();      }      catch (RuntimeException ex) {           // Let it throw raw if the type of the exception is on the throws clause of the method.           if (ReflectionUtils.declaresException(mi.getMethod(), ex.getClass())) {                throw ex;           }           else {                throw DataAccessUtils.translateIfNecessary(ex, this.persistenceExceptionTranslator);           }      } } ```  Could we make the declaresException() test optional (default true)?  The reason I ask is that we have some framework interfaces in Batch in particular that declare that they throw Exception, but the concrete implementation does not (or need not), and it is impossible to use the existing interceptor with such classes because of their interface.   ---  **Affects:** 3.0 GA  **Issue Links:** - [BATCH-1464](https://jira.spring.io/browse/BATCH-1464) Allow for use of PersistenceExceptionTranslator on JpaItemWriter (_**""is depended on by""**_) - [BATCH-1472](https://jira.spring.io/browse/BATCH-1472) Allow for use of PersistenceExceptionTranslator on JpaItemWriter (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e032889ef77e2aafce32e9236440cafa5717aec  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-30T19:17:57Z","2012-06-19T03:44:04Z"
"","11293","Allow handler method parameter of Errors type for registering global errors [SPR-6627]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6627](https://jira.spring.io/browse/SPR-6627?redirect=false)** and commented  Allow handler method parameter of Errors type for registering global errors.  It made sense with the old Controller hierarchy - when you overrode a method that had the Errors as an argument there was always a form or command object.  But in the `@MVC` world I find I have to resort to tricks like adding a fake `@ModelAttribute` just so I can register a global error, e.g.  ``` @RequestMapping(value = ""..."") public String handle(@ModelAttribute(""date"") Date date, Errors errors) {  	try { 		... 	} 	catch (Exception e) { 		errors.reject(""blah.blah"", ""There was a problem...""); 	}  ```  There has to be a better way.  I know that Keith was lining up some MessageContext abstraction to handle messages more generically than bind errors, but that never made it into 3.0.  Maybe we need to integrate that or have another think?   ---  **Affects:** 3.0 GA","closed","status: bulk-closed,","spring-projects-issues","2009-12-30T02:37:59Z","2019-01-12T03:50:41Z"
"","11287","Add id attribute to  [SPR-6621]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6621](https://jira.spring.io/browse/SPR-6621?redirect=false)** and commented  It's quite useful with the old-style bean definition approach to be able to use \ in a child application context.  You can't do that with the  namespace shortcut because the bean is anonymous.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2009-12-28T02:21:50Z","2018-12-28T10:39:51Z"
"","11276","SpEL expression evaluation should rethrow (not wrap) RuntimeExceptions [SPR-6610]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6610](https://jira.spring.io/browse/SPR-6610?redirect=false)** and commented  SpEL expression evaluation should rethrow (not wrap) RuntimeExceptions.  SpEL gets used to invoke methods a lot now (maybe that wasn't the primary use case that we had in mind to start with) and it can be really difficult for the user to find out what actually went wrong because it gets wrapped in a large stack of SpEL exceptions.  [INT-941](https://jira.spring.io/browse/INT-941) is an example of where this surfaced recently.  I guess (like an AOP interceptor) you could argue that sometimes even checked Exceptions should be rethrown.  Hard to see how to determine that at runtime.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/644f3065b6af1d0847044dd7f99e63fe8e730f76","closed","type: enhancement,","spring-projects-issues","2009-12-23T09:05:56Z","2012-06-19T03:43:03Z"
"","11271","Make Spring OXM documentation easier to find in Spring WS to Core user guide [SPR-6605]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6605](https://jira.spring.io/browse/SPR-6605?redirect=false)** and commented   ---  **Affects:** 3.0 GA","closed","","spring-projects-issues","2009-12-22T22:17:21Z","2019-01-11T16:12:28Z"
"","11259","Introduce a TestExecutionListener for DbUnit [SPR-6593]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6593](https://jira.spring.io/browse/SPR-6593?redirect=false)** and commented  #### Primary Goal  Add a `TestExecutionListener` for DbUnit.  #### Related Resources  - Phil Webb's [spring-test-dbunit](https://github.com/springtestdbunit/spring-test-dbunit) project on GitHub - Proposal to include DbUnit support in [Spring Data JDBC](https://jira.springsource.org/browse/DATAJDBC-28) instead of in Spring Core - JBoss [Arquillian Persistence Extension](https://docs.jboss.org/author/display/ARQ/Persistence)  ---  **Issue Links:** - #12387 Provide `@Rule` alternative to SpringJUnit4ClassRunner (_**""Cloned to""**_) - [BATCH-1158](https://jira.spring.io/browse/BATCH-1158) Enabling unit testing of batch jobs with DbUnit/Unitils (_**""is duplicated by""**_) - #12208 Transactional unit test support without overhead of container - [DATAJDBC-28](https://jira.spring.io/browse/DATAJDBC-28) Introduce a TestExecutionListener for DbUnit - #9043 Introduce before/after test execution callbacks in the TestContext framework - #7783 Introduce explicit Hibernate and/or DbUnit support in the TestContext Framework (_**""supersedes""**_)  5 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-20T23:38:57Z","2019-01-13T07:56:18Z"
"","11191","SpEL context is wrong in method parameter resolution [SPR-6525]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6525](https://jira.spring.io/browse/SPR-6525?redirect=false)** and commented  SpEL context is wrong in method parameter resolution.  Instead of using the current context for the stack (which refers to the method target), parameters should have a current context equal to the context root.  This test would fail in EvaluationTests():  ``` @Test public void testNestedMethod() {      evaluate(""placeOfBirth.doubleIt(inventions.length)"", 18, Integer.class); } ```  ---  **Affects:** 3.0 RC3  **Attachments:** - [SPR-6526.patch](https://jira.spring.io/secure/attachment/15983/SPR-6526.patch) (_1.51 kB_)  **Issue Links:** - #10255 Spel parser is not able to resolve bean id variable when it is passed as parameter to a static method. (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/33a7bbb4850e69a3b9ac812411bb12d81346f37a","closed","type: bug,","spring-projects-issues","2009-12-06T02:01:30Z","2019-01-11T15:15:16Z"
"","11118","Declarative Lifecycle [SPR-6452]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6452](https://jira.spring.io/browse/SPR-6452?redirect=false)** and commented  Declarative Lifecycle: the phased startup/shutdown from #10179 only works with marker interfaces.  Third-party components need XML features in the beans namespace.  Annotations are an obvious other choice.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #8508 Lifecycle methods based on annotations","closed","type: enhancement,","spring-projects-issues","2009-11-25T17:35:37Z","2019-01-11T15:39:25Z"
"","11110","TaskExecutor not initialized in task namespace [SPR-6444]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6444](https://jira.spring.io/browse/SPR-6444?redirect=false)** and commented  TaskExecutor not initialized in task namespace.  Adding this to the ExecutorBeanDefinitionPasrserTests:  ``` FutureTask task = new FutureTask(new Callable() {      public String call() throws Exception {           return ""foo"";      } }); ((ThreadPoolTaskExecutor)executor).execute(task); assertEquals(""foo"", task.get()); ```  results in  ``` java.lang.IllegalStateException: ThreadPoolTaskExecutor not initialized 	at org.springframework.util.Assert.state(Assert.java:384) 	at org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getThreadPoolExecutor(ThreadPoolTaskExecutor.java:217) 	at org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.execute(ThreadPoolTaskExecutor.java:239) 	at org.springframework.scheduling.config.ExecutorBeanDefinitionParserTests.defaultExecutor(ExecutorBeanDefinitionParserTests.java:61) ... ```    ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e10161182b7c555a495e1ae11b7945f80b4a0d53","closed","type: bug,","spring-projects-issues","2009-11-24T23:13:19Z","2012-06-19T03:43:37Z"
"","11107","TransactionAwareDataSourceProxy should mask out calls to setAutoCommit() [SPR-6441]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6441](https://jira.spring.io/browse/SPR-6441?redirect=false)** and commented  TransactionAwareDataSourceProxy should mask out calls to setAutoCommit().  It masks commit and rollback already, but legacy code can still manipulate other settings that we want Spring the transaction manager to handle.   ---  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-24T20:09:53Z","2015-09-25T16:31:30Z"
"","11104","Make private method in TransactionAwareConnectionFactoryProxy to match TransactionAwareDataSource [SPR-6438]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6438](https://jira.spring.io/browse/SPR-6438?redirect=false)** and commented  Make private method in TransactionAwareConnectionFactoryProxy to match TransactionAwareDataSource.  The latter has a protected method getTransactionAwareConnectionProxy() but the former's equivalent is private.  It's actually a pretty important extension point, and I want to use it.  Actually I want to override getCloseSuppressingSessionProxy(), so that would be more useful if it were protected.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fce03610524127e162fa1844339e13971708cb50","closed","type: enhancement,","spring-projects-issues","2009-11-24T07:50:46Z","2012-06-19T03:43:09Z"
"","11064","Document attributes in @Scheduled and friends [SPR-6398]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6398](https://jira.spring.io/browse/SPR-6398?redirect=false)** and commented  Document attributes in `@Scheduled` and friends: e.g. what's the unit for the fixedDelay / fixedRate()?   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/af674bfac47f839161e9155200fa5ce553fa8d45","closed","type: task,","spring-projects-issues","2009-11-19T22:19:52Z","2012-06-19T03:43:51Z"
"","11054","cannot be used as an inner bean [SPR-6388]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6388](https://jira.spring.io/browse/SPR-6388?redirect=false)** and commented   cannot be used as an inner bean because its parser treats the id attribute as mandatory.  If this can be fixed it would be useful.   ---  **Affects:** 3.0 RC2","closed","type: bug,","spring-projects-issues","2009-11-18T20:02:59Z","2012-06-19T03:43:06Z"
"","11033","Allow classpath: patterns to skip directories that do not contain the desired resource [SPR-6367]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6367](https://jira.spring.io/browse/SPR-6367?redirect=false)** and commented  Allow classpath: patterns to skip directories that do not contain the desired resource in a pattern.  The behaviour of a pattern in resource name is different than the behaviour of a concrete resource name, even if there is only one resource to match.  This is certainly confusing and probably avoidable.  Example:  ```  ```  will aways work, but  ```  ```  will fail if the classpath is configured in a particular way, even if there is only one file that matches (foo.xml).  The problem is that the classpath can contain the package ""test"" in more than one location (e.g. target/classes and target/test-classes) and without a pattern the search continues through all of them, but with a pattern it stops when the first one is reached, even if no resource is found.  A less surprising outcome would be if the **first** resource that matches on the classpath was returned, instead of no resource at all.  (There is a workaround which is to use classpath*: as a resource prefix - works in 2.5.6, and may work in 3.0 if #11032 is fixed.)  ---  **Affects:** 2.5.6","closed","status: bulk-closed,","spring-projects-issues","2009-11-16T19:30:40Z","2019-01-12T03:50:46Z"
"","11032","Cannot import bean definitions using classpath*: resource location [SPR-6366]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6366](https://jira.spring.io/browse/SPR-6366?redirect=false)** and commented  Cannot import bean definitions using classpath*: resource location. Somewhere between RC1 and RC2 the behaviour of \ changed so that it is now treated as a relative resource, where clearly it is not.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #10432 XML bean definition ""import"" directive doesn't work with custom resource loader (_**""duplicates""**_) - #11046 Import of XML resources with 'classpath*:' URLs doesn't work (_**""is duplicated by""**_) - #11077 Regression: Cannot import XML bean documents using classpath*: pseudo URLs (_**""is duplicated by""**_) - #11017 classpath*: is no longer finding resources with  (_**""is duplicated by""**_) - #11076 Behavior of Bean loading changed in RC2 (Incompatible to Apache CXF)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ac0e2ba02eb16fad4dc97236cbef2a1c8c6804c, https://github.com/spring-projects/spring-framework/commit/66939ded0ffe646f417abe08a8a4e70167d6410e","closed","in: core,","spring-projects-issues","2009-11-16T18:54:14Z","2019-01-11T14:33:40Z"
"","11013","Change example of SPeL API usage in reference guide to be more ""mainstream"" [SPR-6347]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6347](https://jira.spring.io/browse/SPR-6347?redirect=false)** and commented  Change example of SPeL API usage in reference guide to be more ""mainstream"".  It shows the ""old"" style (inefficient) usage of a context with its own root (should be a dynamic root and a cached or missing context).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e9683aa7cd8c1883696ed70168ee29144701c7f","closed","type: task,","spring-projects-issues","2009-11-13T03:33:50Z","2018-12-09T22:37:56Z"
"","11007","Documentation for SmartLifecycle and LifecycleProcessor [SPR-6341]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6341](https://jira.spring.io/browse/SPR-6341?redirect=false)** and commented  Documentation is missing (beans.xml?) for SmartLifecycle and LifecycleProcessor (#10179 and friends).  ---  **Affects:** 3.0 RC2  **Issue Links:** - #10179 Phased Lifecycle Stop (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f6a2e58d9559a993d3ba65cd0661af134cd0c0b3","closed","in: core,","spring-projects-issues","2009-11-12T17:41:17Z","2019-01-11T14:36:27Z"
"","10988","Documentation for @ManagedMetric in reference guide [SPR-6322]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6322](https://jira.spring.io/browse/SPR-6322?redirect=false)** and commented  Documentation for `@ManagedMetric` in reference guide is missing, and it may be important for some people to know what it is and what the scope of the meta data is.   ---  **Affects:** 3.0 RC1  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2009-11-10T02:20:35Z","2015-09-22T18:20:32Z"
"","10987","Regression: ResourceEditor in 3.0 does not ignore unresolvable placeholders, but it did in 2.5.6 [SPR-6321]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6321](https://jira.spring.io/browse/SPR-6321?redirect=false)** and commented  Regression: ResourceEditor in 3.0 does not ignore unresolvable placeholders, but it did in 2.5.6.  At least it would make sense to make the old behaviour an option if not the default.  The problem is possibly more ubiquitous, since all clients of org.springframework.util.SystemPropertyUtils.resolvePlaceholders(String) may be affected, but I'm not sure which of those is going to change its behaviour in 3.0.  ---  **Affects:** 3.0 RC1  **Issue Links:** - #11320 PropertyPlaceholderConfigurer has Inconsistent Behavior between 2.5.6 and 3.0.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38f138385350ef3bd64ffcf5ace561131766eb0f, https://github.com/spring-projects/spring-framework/commit/568e6a3b3889a75a8c2d03795f39b88b77975d4c  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2009-11-10T02:03:51Z","2019-01-13T21:48:38Z"
"","10940","CronSequenceGenerator wrong trigger time on rollover when lower order bits specified [SPR-6273]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6273](https://jira.spring.io/browse/SPR-6273?redirect=false)** and commented  CronSequenceGenerator fails for expressions like ""10 * 5 * * \*"" when it rolls forward to the 5th hour, the seconds are reset to 0 (which doesn't match the pattern).  The problem is in the reset of lower order bits on rollover of higher order (so ""* * 5 * * *"" and ""0 0 5 * * *"" work fine).  The majority use case probably doesn't include such patterns, but we can fix it for RC2.   ---  **Affects:** 3.0 RC1  **Attachments:** - [cron-trigger.patch](https://jira.spring.io/secure/attachment/15838/cron-trigger.patch) (_8.25 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c9eed1c22ded2b42467ef253f9c8f0502e31d62","closed","in: core,","spring-projects-issues","2009-10-25T20:20:08Z","2012-06-19T03:43:37Z"
"","11432","Typo in documentation: 25.4.3 The 'scheduled-tasks' element [SPR-6766]","**[Dave McLain](https://jira.spring.io/secure/ViewProfile.jspa?name=dmclain)** opened **[SPR-6766](https://jira.spring.io/browse/SPR-6766?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-scheduled-tasks  The xml examples are not well formed. The problem is the closing tags:      should be:      and       should be:         ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d13f0c8052d2a34178a32fa8a8d04ae57ce02d83","closed","type: bug,","spring-projects-issues","2010-01-25T09:50:37Z","2012-06-19T03:44:18Z"
"","11121","AnnotationConfigApplicationContext does not detect BeanFactoryPostProcessor [SPR-6455]","**[Dave King](https://jira.spring.io/secure/ViewProfile.jspa?name=djking)** opened **[SPR-6455](https://jira.spring.io/browse/SPR-6455?redirect=false)** and commented  The documentation in several places says:  ""Application contexts can auto-detect BeanFactoryPostProcessor beans in their bean definitions and apply them before any other beans get created. ""  Thus `@Bean` BeanFactoryPostProcessor getSomeName(){ return new BeanFactoryPostProcessorImpl();} in a `@Configuration` class should cause the  BeanFactoryPostProcessor run in the AnnotationConfigApplicationContext. Doesn't work. The callback method is never called. The bean is created, but only after other beans have been created.  This breaks the documented contract for an ApplicationContext.  ---  **Affects:** 3.0 RC2  **Reference URL:** http://forum.springsource.org/showthread.php?t=81044  **Issue Links:** - #11277 `@Value` does not work with AnnotationConfigApplicationContext - #11311 PropertyPlaceholder does not work for `@ImportResource` in JavaConfig  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b2b5c4c233bba63fa5da2b11146ffaf66f9de80, https://github.com/spring-projects/spring-framework/commit/8ab9da446129218607d4e3a6f4fd466a407c2896  3 votes, 5 watchers","closed","in: core,","spring-projects-issues","2009-11-26T03:14:22Z","2019-01-13T07:56:57Z"
"","11024","MappingJacksonJsonView would benefit from being able to write a single object rather than always writing a Map [SPR-6358]","**[Dave Finch](https://jira.spring.io/secure/ViewProfile.jspa?name=dave_n_finch)** opened **[SPR-6358](https://jira.spring.io/browse/SPR-6358?redirect=false)** and commented  When using the MappingJacksonJsonView the JSON output is always the filtered contents of the model even if only one item is supplied to the renderedAttributes property.  personally I would find it useful to able to specify that if only a single item from the model is required then the JSON output is not a Map but just the value from the model under the specified key.  I have no idea how many people would benefit from this but it seems like quite a good idea to me, I would be happy to provide an implementation if you would like.  Thanks for you excellent work, Dave   ---  **Affects:** 3.0 M2  **Attachments:** - [MappingJacksonJsonView.java.patch](https://jira.spring.io/secure/attachment/16054/MappingJacksonJsonView.java.patch) (_1.59 kB_)  7 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-15T06:52:52Z","2019-01-11T14:35:27Z"
"","11520","UriTemplate.expand() fails when value contains $ [SPR-6854]","**[Daniel Wiell](https://jira.spring.io/secure/ViewProfile.jspa?name=cdanielw)** opened **[SPR-6854](https://jira.spring.io/browse/SPR-6854?redirect=false)** and commented  The following test fails with an java.lang.IllegalArgumentException: Illegal group reference  ``` @Test public void expandWithDollar() {     UriTemplate template = new UriTemplate(""/{a}"");     URI uri = template.expand(""$replacement"");     assertEquals(""/$replacement"", uri.toString()); } ```  There is a simple workaround: Wrap the values with Matcher.quoteReplacement()  ``` @Test public void expandWithDollarWorkaround() {     UriTemplate template = new UriTemplate(""/{a}"");     URI uri = template.expand(Matcher.quoteReplacement(""$replacement""));     assertEquals(""/$replacement"", uri.toString()); } ```  A possible fix for this issue  ``` public URI expand(Object... uriVariableValues) {     ...     matcher.appendReplacement(buffer, Matcher.quoteReplacement(uriVariable));     ... } ```  ---  **Affects:** 3.0 GA  **Issue Links:** - #11540 UriTemplate and restTemplate don't url encode the at-sign (@)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/54acebd086306e7f7b875f09082c2b703857880b","closed","type: bug,","spring-projects-issues","2010-02-17T00:42:50Z","2019-01-11T17:01:55Z"
"","11201","Update spring-mvc-3.0.xsd on springframework.org [SPR-6535]","**[Daniel Weiler](https://jira.spring.io/secure/ViewProfile.jspa?name=danielweiler)** opened **[SPR-6535](https://jira.spring.io/browse/SPR-6535?redirect=false)** and commented  Hello,  I have successfully implemented your new  tag. Great work.  Using  works also great but validation of the xml scheme fails because the http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd file is not the current one from RC3 and misses the  tag.  Thanks for updating.  Greets, daniel   ---  **Affects:** 3.0 RC3","closed","type: task,","spring-projects-issues","2009-12-08T01:53:12Z","2012-06-19T03:42:43Z"
"","11591","NPE if BeanPostProcessor returns null [SPR-6926]","**[Daniel Walcher](https://jira.spring.io/secure/ViewProfile.jspa?name=daniel.walcher)** opened **[SPR-6926](https://jira.spring.io/browse/SPR-6926?redirect=false)** and commented  We have a BeanPostProcessor that converts configuration beans into their actual value, sometimes the value is a 'null'. This causes a NPE as other internal spring BeanPostProcessor's do not correctly handle a null value.  Is this a bug or are we doing something wrong?  For example the org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor#postProcessBeforeInitialization does not validate the bean, attempting to call 'bean.getClass()' which causes a NPE.  Should it not prevent running other post processors if the bean has been nulled? i.e.:  ``` 	public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) 			throws BeansException {  		Object result = existingBean; 		for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) { 			if (result == null) return; 			result = beanProcessor.postProcessBeforeInitialization(result, beanName); 		} 		return result; 	} ```  Also can someone confirm that the org.springframework.core.Ordered interface works for BeanPostProcessor. We have been unable to use this to create a work around, investigation has indicated that the logic seems to be missing to enforce ordering.   ---  **Affects:** 3.0 GA, 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6118d67321b07bf09799559ad4e9e26e1600e5b1, https://github.com/spring-projects/spring-framework/commit/89755542da0fa70284ecf167eef82bcd191b40b9","closed","in: core,","spring-projects-issues","2010-03-03T02:51:37Z","2012-06-19T03:43:02Z"
"","11348","PropertyPlaceholderConfigurer setLocation does not work with wildcards [SPR-6682]","**[Daniel Schaarschmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=daniels)** opened **[SPR-6682](https://jira.spring.io/browse/SPR-6682?redirect=false)** and commented  I have the following Bean-Definition in my XML-Configuration:  ```xml           ${my.             **/oops.properties       ```  Having the **-Wildcards inside the locations-property works fine, but when I use the same value inside the location-property I get the following error: Could not load properties; nested exception is java.io.FileNotFoundException: **\oops.properties (Die Syntax für den Dateinamen, Verzeichnisnamen oder die Datenträgerbezeichnung ist falsch)  Should not both properties handle wildcards correctly?   ---  **Affects:** 3.0 GA","closed","in: core,","spring-projects-issues","2010-01-13T02:11:43Z","2019-01-12T16:38:26Z"
"","11308","Request to add recommendation / guideline for choosing the value of SmartLifecycle's phase [SPR-6642]","**[Daniel Mikusa](https://jira.spring.io/secure/ViewProfile.jspa?name=dmikusa)** opened **[SPR-6642](https://jira.spring.io/browse/SPR-6642?redirect=false)** and commented  Submitted for customer --> Liu, Yinwei David (Morgan Stanley)  ---  Since Spring 3 introduces SmartLifecycle to auto-start components when ApplicationContext refresh and/or shutdown in a particular order. I think SmartLifecycle will gradually be used by those spring-powered framework to auto-start their components, and Spring already uses it in its core framework, e.g. SchedulerFactoryBean, SimpleMessageListenerContainer and JmsMessageEndpointManager. And also, I notice that all components choose Integer.MAX_VALUE (lowest priority) as their phase.  I think the question is how can people choose a correct phase when they develop their own component. Can Spring provide a recommendation in its documentation?  Let me give one use case: I have one application which has three SmartLifecycle components, HttpClient, DataSyncService, TCPServer. The start order of my application would be: 1. Start HttpClient 2. Start DataSyncService to sync data from an exteranl HTTP service via HttpClient, and then update its DB. 3. Start TCPServer to accept requests    The issue is that both HttpClient and TCPServer are provided by 3rd party so they do not know which phase is the correct one, so they may have a same phase. The worse thing would be that TCPServer have a higher order than HttpClient/DataSyncService, that means TCPServer will get started before DataSyncService refreshes its data, and it can return some out-of-date data to the client while Spring is starting DataSyncService.  In order to avoid this issue, I think Spring framework is the right place to give some recommendations about the right phase for different compoents. It does not enforce people to use it, but it does give the idea about what kind of number people may choose for different components. For example, in our code, we give some recommand phases below so that people can choose a right phase for their own compoennt:  |Component|SmartLifecycle.getPhase()| |ServerTransports|3,000,000| |CacheManager|1,750,000| |Datasources|1,500,000| |Pool|1,250,000| |ClientTransports|1,000,000|  Is it possible that Spring can give the similiar recommandation in its doc so that all developers can get a general idea about which phase can be use?  ---  **Affects:** 3.0 GA","open","type: documentation,","spring-projects-issues","2010-01-05T00:30:43Z","2019-01-13T21:47:40Z"
"","10959","Documentation Inconsistency - Required version of Tiles [SPR-6293]","**[Daniel Mikusa](https://jira.spring.io/secure/ViewProfile.jspa?name=dmikusa)** opened **[SPR-6293](https://jira.spring.io/browse/SPR-6293?redirect=false)** and commented  The Spring Documentation lists the required version of Tiles as 2.0.4 or greater.  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch16s03.html  The JavaDoc for TilesConfigurer in spring 3.0, lists the required version of Tiles as 2.1.2 or greater.  http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/servlet/view/tiles2/TilesConfigurer.html  I'm assuming the documentation for TilesConfigurer is correct as when I try to build an application with Spring 3.0 and Tiles 2.0.7, I get the following exception and the referenced missing class is not part of Tiles 2.0.7.  java.lang.ClassNotFoundException: org.apache.tiles.startup.TilesInitializer org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1360) org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1206) java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320) java.lang.Class.getDeclaredConstructors0(Native Method) java.lang.Class.privateGetDeclaredConstructors(Class.java:2389) java.lang.Class.getDeclaredConstructors(Class.java:1836) org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:224) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:903) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:876) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:479) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:289) org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:286) org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:188) org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:543) org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:730) org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:387) org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:447) org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:342) org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:308) org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) javax.servlet.GenericServlet.init(GenericServlet.java:212) org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) java.lang.Thread.run(Thread.java:619)   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/edf331b5a6d9a0b0d892f9538505c65e824e5dbb","closed","type: bug,","spring-projects-issues","2009-11-02T08:12:59Z","2012-06-19T03:43:42Z"
"","11746","DataBinder binding PropertyValues with isOptional and requiredFields [SPR-7086]","**[Daniel IfCore](https://jira.spring.io/secure/ViewProfile.jspa?name=ifcore-daniel)** opened **[SPR-7086](https://jira.spring.io/browse/SPR-7086?redirect=false)** and commented  I found this problem: Collecting several PropertyValue objects in a PropertyValues object and having done setOptional(false) on several of the PropertyValue objects before, the dataBinder.bind(propertyValues) did not automatically set the required Fields from the optional field values of each of ther PropertyValue objects.  I worked around this by collecting the required Fields ( !isOptional() ) and doing a dataBinder.setRequiredFields(requiredFields).   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-04-10T20:39:02Z","2015-09-22T17:34:39Z"
"","11586","Indexed properties not set correctly in form tags [SPR-6921]","**[Daniel IfCore](https://jira.spring.io/secure/ViewProfile.jspa?name=ifcore-daniel)** opened **[SPR-6921](https://jira.spring.io/browse/SPR-6921?redirect=false)** and commented  Since 3.0.1 the input form tag generates a different html code for indexed properties:  Example:    searchValues is a Map object in the model.  In 3.0.0 the resulting html was: \  3.0.1 now generates: \  This results in unset properties in the model property searchValues. When I modify the parameter name in the request manually to the old form, the values are set correctly.  ---  **Affects:** 3.0.1  **Issue Links:** - #11537 Spring MVC regression: binding to indexed properties is broken (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2010-03-01T23:46:13Z","2019-01-12T16:49:45Z"
"","11331","As a user I don't want to see a ""Please select"" option in the select list once I've selected an item and saved the form. [SPR-6665]","**[Daniel IfCore](https://jira.spring.io/secure/ViewProfile.jspa?name=ifcore-daniel)** opened **[SPR-6665](https://jira.spring.io/browse/SPR-6665?redirect=false)** and commented  The above user story could be achieved by adding an ""onlyIfSelectedByTheModel"" attribute in the form:option Tag.  Example:                               The ""--Please Select"" option is only added to the list of the options if it is the value of the country property in the model (country=""-""). Once the user has saved an option from the country list he shall not be presented with the ""please select"" option any more.  The name of the attribute could be have a different name.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-01-08T23:35:38Z","2018-12-28T10:07:46Z"
"","11171","form:checkboxes doesn't use spring 3 converters for items comparison [SPR-6505]","**[Daniel IfCore](https://jira.spring.io/secure/ViewProfile.jspa?name=ifcore-daniel)** opened **[SPR-6505](https://jira.spring.io/browse/SPR-6505?redirect=false)** and commented  It seems that form:checkboxes only uses converters for the path-elements of the model but not for the items-elements. Having the same list of beans in the items property and the path property does not generate any selected checkboxes.  ---  **Affects:** 3.0 RC3  **Attachments:** - [converter-demo.jar](https://jira.spring.io/secure/attachment/15991/converter-demo.jar) (_10.12 kB_)  **Issue Links:** - #11465 When  binds a collection, the formatter are not used.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3b4c7aaadd18017e7c56aa7821c23ed6d9059eb","closed","type: bug,","spring-projects-issues","2009-12-03T00:42:11Z","2019-01-11T15:17:06Z"
"","11170","Add Formatter support to generic collections [SPR-6504]","**[Daniel IfCore](https://jira.spring.io/secure/ViewProfile.jspa?name=ifcore-daniel)** opened **[SPR-6504](https://jira.spring.io/browse/SPR-6504?redirect=false)** and commented  I would like to have a Collection annotated with a formatter where the formatter will be applied to the elements of the collection.  Example:      @NumberFormat(pattern = ""#,###.000"")     private Collection values;  ---  **Affects:** 3.0 RC3  **Issue Links:** - #11167 Path-binding does not work when conversionService is used and the last path element is of array type - #12007 BeanWrapper Binding with ConversionService: Annotation-driven type conversion rules not applied to List elements  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e161c93f8dd9fdf7d7685e3ae7a31de03331ae86","closed","type: enhancement,","spring-projects-issues","2009-12-03T00:16:32Z","2019-01-11T15:17:29Z"
"","11444","ShallowEtagHeaderFilter unnecessarily copies response bytes [SPR-6778]","**[Dan Everton](https://jira.spring.io/secure/ViewProfile.jspa?name=daneverton)** opened **[SPR-6778](https://jira.spring.io/browse/SPR-6778?redirect=false)** and commented  The ShallowEtagHeaderFilter buffers the entire generated response in to a byte array in memory which is a bit of a waste if the etag can be calculated as bytes are written to the ServletOutputStream.  So, for example, if you used the DigestOutputStream to wrap the ServletOutputStream, the digest is updated on the fly and no copying is required.   ---  **Affects:** 3.0 GA  **Attachments:** - [DigestServletOutputStream.java](https://jira.spring.io/secure/attachment/16120/DigestServletOutputStream.java) (_1.25 kB_) - [spr-6778.patch](https://jira.spring.io/secure/attachment/16121/spr-6778.patch) (_8.26 kB_)","closed","status: invalid,","spring-projects-issues","2010-01-28T15:06:40Z","2019-01-12T05:32:38Z"
"","11684","Support initial delay attribute for @Scheduled and  [SPR-7022]","**[Dan Checkoway](https://jira.spring.io/secure/ViewProfile.jspa?name=dcheckoway)** opened **[SPR-7022](https://jira.spring.io/browse/SPR-7022?redirect=false)** and commented  `@Scheduled` is the coolest thing ever...but it could really use an ""initialDelay"" parameter.  Otherwise there's no way (that I'm aware of) to configure a `@Scheduled` method to run after a specified delay.  Without it, I'm forced to use the likes of TaskScheduler.scheduleAtFixedRate(Runnable, Date, long) and pass it a startDate...and then I'm forced to wrap a Runnable around my method, etc.  That's so old school! :-)  Anyway, please consider my humble request for an optional ""initialDelay"" such as: `@Scheduled`(fixedRate=60000,initialDelay=20000) and `@Scheduled`(fixedDelay=30000,initialDelay=30000)  ---  **Attachments:** - [scheduled-initial-delay-patch.diff](https://jira.spring.io/secure/attachment/16331/scheduled-initial-delay-patch.diff) (_12.61 kB_)  **Issue Links:** - #12374 Deadlock between DefaultListableBeanFactory and DefaultSingletonBeanRegistry, perhaps due to lazily-instantiated aspect  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5330c52ebfca1ab2fffca4bcc844d2d9f56a296b, https://github.com/spring-projects/spring-framework/commit/53673d6c598a587ab1e511bbce14ba8b686f8951  25 votes, 24 watchers","closed","has: votes-jira,","spring-projects-issues","2010-03-22T21:02:18Z","2019-01-11T13:24:24Z"
"","11188","location of CosMailSenderImpl [SPR-6522]","**[D.T.Rajendra Prasad](https://jira.spring.io/secure/ViewProfile.jspa?name=dtrprasad)** opened **[SPR-6522](https://jira.spring.io/browse/SPR-6522?redirect=false)** and commented  Which jar is to beused to work with 2.0 's org.springframework.mail.cos.CosMailSenderImpl to work in 2.5.2 version   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2009-12-04T21:03:18Z","2009-12-05T04:03:46Z"
"","11228","StringUtils#parseLocaleString(String) does not work for empty locale [SPR-6562]","**[Cédrik LIME](https://jira.spring.io/secure/ViewProfile.jspa?name=cedrik_lime)** opened **[SPR-6562](https://jira.spring.io/browse/SPR-6562?redirect=false)** and commented  `StringUtils#parseLocaleString(String)` is supposed to be the exact inverse operation to `Locale.toString()`. This is not the case for `new Locale("""", """", """")`, which String representation is `""""`, but which comes back as `null` from `StringUtils.parseLocaleString("""")`. The `parseLocaleString()` method should be:  ``` public static Locale parseLocaleString(String localeString) { 	if (localeString == null) { 		return null; 	} 	String[] parts = tokenizeToStringArray(localeString, ""_ "", false, false); 	String language = (parts.length > 0 ? parts[0] : """"); 	String country = (parts.length > 1 ? parts[1] : """"); 	String variant = """"; 	if (parts.length >= 2) { 		// There is definitely a variant, and it is everything after the country 		// code sans the separator between the country code and the variant. 		int endIndexOfCountryCode = localeString.indexOf(country) + country.length(); 		// Strip off any leading '_' and whitespace, what's left is the variant. 		variant = trimLeadingWhitespace(localeString.substring(endIndexOfCountryCode)); 		if (variant.startsWith(""_"")) { 			variant = trimLeadingCharacter(variant, '_'); 		} 	} 	return new Locale(language, country, variant); } ```  ---  **Affects:** 2.5.6  **Issue Links:** - #12754 LocaleEditor does not work with some locale strings - #21192 Revise StringUtils.parseLocale(String) for proper handling of corner cases - #12254 StringUtils#parseLocaleString(String) with Variant when no Country (_**""is superseded by""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-13T21:50:05Z","2019-01-11T15:19:47Z"
"","11351","RequestMapping inheritance not working [SPR-6685]","**[Cyril Delmas](https://jira.spring.io/secure/ViewProfile.jspa?name=patriarch24)** opened **[SPR-6685](https://jira.spring.io/browse/SPR-6685?redirect=false)** and commented  This is my Controller :  ``` @Controller @RequestMapping(value = ""/blog"") public class BlogController {  	private List entries = new ArrayList();  	@RequestMapping(method = RequestMethod.GET) 	@ModelAttribute(""entries"") 	public Collection get() { 		return entries; 	}  	@RequestMapping(value = ""/new"", method = RequestMethod.GET) 	@ModelAttribute(""blogEntry"") 	public BlogEntry getNewBlogEntry() { 		return new BlogEntry(); 	}  	@RequestMapping(method = RequestMethod.POST) 	public String add(@Valid BlogEntry blogEntry, BindingResult result) { 		if (result.hasErrors()) { 			return ""blog/new""; 		}  		entries.add(blogEntry); 		return ""redirect:/blog""; 	} } ```  The problem is : the url "".../blog"" retrieves the blog entries, but the "".../blog/new"" do not display the form because ""No mapping found for HTTP request with URI [/.../blog/new] in DispatcherServlet with name 'blog'"". But, looking at the logs :  ``` [main] INFO  DefaultAnnotationHandlerMapping  - Mapped URL path [/blog/new] onto handler [fr.cgin.test.spring3.spring3mvc.web.BlogController@1a99836] [main] INFO  DefaultAnnotationHandlerMapping  - Mapped URL path [/blog/new.*] onto handler [fr.cgin.test.spring3.spring3mvc.web.BlogController@1a99836 ] [main] INFO  DefaultAnnotationHandlerMapping  - Mapped URL path [/blog/new/] onto handler [fr.cgin.test.spring3.spring3mvc.web.BlogController@1a99836]  [main] INFO  DefaultAnnotationHandlerMapping  - Mapped URL path [/blog] onto handler [fr.cgin.test.spring3.spring3mvc.web.BlogController@1a99836] [main] INFO  DefaultAnnotationHandlerMapping  - Mapped URL path [/blog.*] onto handler [fr.cgin.test.spring3.spring3mvc.web.BlogController@1a99836] [main] INFO  DefaultAnnotationHandlerMapping  - Mapped URL path [/blog/] onto handler [fr.cgin.test.spring3.spring3mvc.web.BlogController@1a99836] ```  For more about this issue, see the associated thread.    ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=82643","closed","in: web,","spring-projects-issues","2010-01-13T03:32:14Z","2019-01-11T16:16:12Z"
"","11818","Correct typos: ch 19 [SPR-7159]","**[Cristian George Rapauzu](https://jira.spring.io/secure/ViewProfile.jspa?name=cg_rapauzu)** opened **[SPR-7159](https://jira.spring.io/browse/SPR-7159?redirect=false)** and commented  Document URL: http://static.springsource.org/spring/docs/current/spring-framework-reference/html/ Spring 3.0 - Chapter 19. Remoting and web services using Spring  Location: 19.1 Introduction Problem: Confusing text: ""four remoting technologies:"" is followed by six same-level bullets Text: Currently, Spring supports four remoting technologies: ... Suggestion: Restructure list: 1. RMI 2. HTTP-based    2.1. HTTP Invoker    2.2. Hessian    2.3. Burlap 3. Web Services    3.1. JAX-RPC    3.2. JAX-WS 4. JMS  Location: 19.3.1 Wiring up the DispatcherServlet for Hessian and co. Problem: Missing word ""is"": ""this an excerpt from"" instead of ""this is an excerpt from"" Text: this an excerpt from 'web.xml' Suggestion: Consistency - use filename as title for all code samples (web.xml , WEB-INF/applicationContext.xml, remoting-servlet.xml)  Location: 19.3.5 Applying HTTP basic authentication to a service exposed through Hessian or Burlap Problem: Missing word ""is"": ""This an example"" instead of ""This is an example"" Text: This an example where we explicitly mention the BeanNameUrlHandlerMapping and ...  Location: 19.4 Exposing services using HTTP invokers Problem: Inconsistent case usage for HTTP: ""Spring Http invokers"" instead of ""Spring HTTP invokers"" Text: Spring Http invokers use the standard Java serialization mechanism to expose services through HTTP ...  Location: 19.4.1 Exposing the service object Problem: Typo - extra char ""s"": ""for a service objects"" instead of ""for a service object"" Text: Setting up the HTTP invoker infrastructure for a service objects much resembles the way you would do using Hessian or Burlap.  Location: 19.4.1 Exposing the service object Problem: Typo - missing char ""I"": ""f you are running"" instead of ""If you are running"" Text: f you are running outside of a servlet container and are using ...  Location: 19.4.1 Exposing the service object Problem: Inconsistent text style usage for class names (SimpleHttpServerFactoryBean, SimpleHttpInvokerServiceExporter): normal text instead of fixed-width text Text: You can configure the SimpleHttpServerFactoryBean together with a SimpleHttpInvokerServiceExporter as is shown in this example  Location: 19.5.2 Accessing web services using JAX-RPC Problem: Typo - missing char ""t"": ""this a startup time"" instead of ""this at startup time"" Text: Spring needs this a startup time to create the JAX-RPC Service.  Location: 19.5.8 Accessing web services using JAX-WS Problem: Typo - missing char ""t"": ""this a startup time"" instead of ""this at startup time"" Text: Spring needs this a startup time to create the JAX-WS Service.  Location: 19.5.9 Exposing web services using XFire Problem: Missing word ""is"": ""context that shipping"" instead of ""context that is shipping"" Text: Exposing XFire is done using a XFire context that shipping with XFire itself in combination with a RemoteExporter-style bean you have to add to your WebApplicationContext.  Location: 19.8 Considerations when choosing a technology Problem: Typo - missing char ""r"": ""consider you needs"" instead of ""consider your needs"" Text: You should carefully consider you needs, the services your exposing and the objects you'll be sending over the wire when choosing a technology.  Location: 19.8 Considerations when choosing a technology Problem: Typo: ""the services your exposing"" instead of ""the services you are exposing"" Text: You should carefully consider you needs, the services your exposing and the objects you'll be sending over the wire when choosing a technology.  Location: 19.8 Considerations when choosing a technology Problem: Typo - missing char ""s"": ""it support"" instead of ""it supports"" Text: RMI is a fairly heavy-weight protocol in that it support full-object serialization which is important when using a complex data model that needs serialization over the wire.  Location: 19.9.1 RestTemplate Problem: Typo - missing char ""."" to break in two phrases: ""RestClientException will be thrown, this behavior can be changed"" instead of ""RestClientException will be thrown. This behavior can be changed"" Text: In case of an exception processing the HTTP request, an exception of the type RestClientException will be thrown, this behavior can be changed by plugging in another ResponseErrorHandler  implementation into the RestTemplate.  Location: 19.9.1.1 Dealing with request and response headers Problem: Typo (probably) - text mentions ""execute method"", but code mentions ""exchange"" method Text: Besides the methods described above, the RestTemplate  also has the exchange method, which can be used for arbitrary HTTP method execution based on the HttpEntity  class. Perhaps most importantly, the execute method can be used to add request headers and read response headers. For example: ... HttpEntity\ response = template.exchange(...)   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a45d33a158a18e43287a3b6941018f05c1908c46","closed","type: documentation,","spring-projects-issues","2010-05-02T10:21:38Z","2012-06-19T03:42:58Z"
"","11817","Correct typos: ch 5, ch 15 [SPR-7158]","**[Cristian George Rapauzu](https://jira.spring.io/secure/ViewProfile.jspa?name=cg_rapauzu)** opened **[SPR-7158](https://jira.spring.io/browse/SPR-7158?redirect=false)** and commented  Document URL: http://static.springsource.org/spring/docs/current/spring-framework-reference/html/ Spring 3.0 - Chapter 5. Validation, Data Binding, and Type Conversion  Location: 5.2 Validation using Spring's Validator interface Problem: Typo - extra char ""s"": ""Spring's features a Validator"" instead of ""Spring features a Validator"" Text: Spring's features a Validator interface that you can use to validate objects.  Location: 5.7.1 Overview of the JSR-303 Bean Validation API Problem: Typo - extra word ""can"": ""you can can take advantage"" instead of ""you can take advantage"" Text: There are a number of built-in constraints you can can take advantage of.  Location: 5.7.2.3 Additional Configuration Options Problem: Typo - missing word ""for"": ""more information"" instead of ""for more information"" Text: See the JavaDocs of LocalValidatorFactoryBean more information on these options. Suggestion: For consistency make LocalValidatorFactoryBean a hyperlink to the JavaDocs  Location: 5.7.4.3 Configuring a JSR-303 Validator for use by Spring MVC Problem: Typo - missing  char ""r"": ""ConstaintViolations"" instead of ""ConstraintViolations"" Text: Any ConstaintViolations will automatically be exposed as errors in the BindingResult renderable by standard Spring MVC form tags. Suggestion: For consistency use the same fixed-sized font for class/method/annotation names  Spring 3.0 - Chapter 15. Web MVC Framework  Location: 15.7.2 Defining themes - code example Problem: usage of double-quotes inside a double-quoted string (note colour coding discrepancy) Text:  \ \ \ \ Suggestion:  \ \ \ \ Location: 15.8.3 Handling a file upload in a form Problem: Typo: extra char ""s"": ""`@Controllers`"" instead of ""`@Controller`"" Text: This controller is very similar to a normal annotated `@Controllers`, except that we use MultipartHttpServletRequest or MultipartFile in the method parameters   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f9a27a1d87aed2a165df0fb6f51d803a6cf9570, https://github.com/spring-projects/spring-framework/commit/9919cc976b599fda1b7ac35bed7a229065f55687","closed","type: documentation,","spring-projects-issues","2010-05-02T10:15:56Z","2012-06-19T03:43:55Z"
"","11750","Ch 3 IoC Container: Correct typos [SPR-7090]","**[Cristian George Rapauzu](https://jira.spring.io/secure/ViewProfile.jspa?name=cg_rapauzu)** opened **[SPR-7090](https://jira.spring.io/browse/SPR-7090?redirect=false)** and commented  Document URL: http://static.springsource.org/spring/docs/current/spring-framework-reference/html/ Spring 3.0 - Chapter 3 IoC Container  Location: 3.2.2 Instantiating a container Problem: Typo - extra character: dangling "")"" after daos.xml Text: The following example shows the data access objects daos.xml) file:  Location: 3.4.1.2 Setter-based dependency injection Problem: The phrases appear twice, once before, then again after the code-styled example. Text: The ApplicationContext supports constructor- and setter-based DI for the beans it manages. It also supports setter-based DI after some dependencies are already injected through the constructor approach.  Location: 3.4.1.3 Dependency resolution process Problem: Typo - missing letter ""d"": ""an initialized"" instead of ""and initialized"" Text: The ApplicationContext is created an initialized with configuration metadata that describes all the beans  Location: 3.4.2.6 XML shortcut with the p-namespace Problem: Typo - missing word ""do"": ""not have"" instead of ""do not have"" Text: As previously mentioned, the p-namespace not have a schema definition, so you can set the name of the attribute to the property name.  Location: 3.4.5 Autowiring collaborators Problem: Typo - missing word ""without"": ""can be satisfied automatically"" instead of ""can be satisfied automatically without"" Text: For example, if you need to add a dependency to a class, that dependency can be satisfied automatically your needing to modify the configuration.  Location: 3.5 Bean scopes : Table 3.4 Bean scopes Problem: Consistency / Typo - Missing word ""(Default)"": for singleton scope (to be consistent with all other tables) Text: singleton | Scopes a single bean definition to a single object instance per Spring IoC container.  Location: 3.6.1 Lifecycle callbacks Problem: Typo - missing letter ""r"": ""interfaces though the use"" instead of ""interfaces through the use"" Text: You can also achieve the same integration with the container without coupling your classes to Spring interfaces though the use of init-method and destroy method object definition metadata.  Location: 3.6.1.3 Default initialization and destroy methods Problem: Typo - extra character ""s"": ""the beans class"" instead of ""the bean class"" Text: When a bean is created and assembled, if the beans class has such a method, it is invoked at the appropriate time.  Location: 3.9 Annotation-based container configuration Problem: Typo - extra character ""s"": ""the developers moves"" instead of ""the developer moves"" Text: Instead of using XML to describe a bean wiring, the developers moves the configuration into the component class itself by using annotations on relevant class, method or field declaration.  Location: 3.13 Additional Capabilities of the ApplicationContext Problem: wrong term for interface relationship: ""which implements the BeanFactory interface"" instead of ""which extends the BeanFactory interface"" Text: The org.springframework.context  package adds the ApplicationContext interface, which implements the BeanFactory interface, in addition to extending other interfaces to provide additional functionality in a more application framework-oriented style.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aa216672ae3bf21acbdaf43484a230688f6dae06","closed","type: documentation,","spring-projects-issues","2010-04-12T11:45:14Z","2012-06-19T03:43:46Z"
"","11117","MVC namespace should support a default handler [SPR-6451]","**[Craig Walls](https://jira.spring.io/secure/ViewProfile.jspa?name=habuma)** opened **[SPR-6451](https://jira.spring.io/browse/SPR-6451?redirect=false)** and commented  I just noticed the interceptors improvement from #11018 and read Stefan Schmidt's comment regarding default handlers. I agree that this would be a good thing (in fact, I sorta needed this last night).  Even though #11018 is marked as resolved, I didn't see that the default handler suggestion was implemented in the latest code in Subversion. So, I'm restating Stefan's request.  ---  **Affects:** 3.0 RC2","closed","type: enhancement,","spring-projects-issues","2009-11-25T03:48:08Z","2019-01-11T15:39:17Z"
"","11291","TransactionSynchronizationUtils.unwrapResourceIfNecessary() overwrites InfrastructureProxy.getWrappedObject() results [SPR-6625]","**[Craig Muchinsky](https://jira.spring.io/secure/ViewProfile.jspa?name=cmuchinsky)** opened **[SPR-6625](https://jira.spring.io/browse/SPR-6625?redirect=false)** and commented  The call to ScopedProxyUnwrapper.unwrapIfNecessary() within TransactionSynchronizationUtils.unwrapResourceIfNecessary() takes 'resource' as the input, rather than 'resourceRef', which causes the InfrastructureProxy's changes to be lost.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11058 Transaction management fails when using AspectJ and load-time weaving  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ca6003533558b27f47af3c1d06f95a3978c5bf4","closed","type: bug,","spring-projects-issues","2009-12-29T04:00:45Z","2019-01-11T16:15:37Z"
"","11529","possible problem with thread-bound scopes on WebSphere 6.1 [SPR-6863]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6863](https://jira.spring.io/browse/SPR-6863?redirect=false)** and commented  Some users started reporting problems with scoped beans in WebSphere 6.1 More threads: http://forum.springsource.org/showthread.php?t=80056 http://forum.springsource.org/showthread.php?t=70146   ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=84884","closed","in: core,","spring-projects-issues","2010-02-17T20:43:29Z","2019-01-11T17:01:06Z"
"","11510","improve annotation based invocations [SPR-6844]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6844](https://jira.spring.io/browse/SPR-6844?redirect=false)** and commented  The code path for annotation-based servlet and portlet controllers has some ""hot spots"" that could be improved.  ---  **Affects:** 3.0 GA  **Attachments:** - [patch.diff](https://jira.spring.io/secure/attachment/16200/patch.diff) (_6.54 kB_)  **Issue Links:** - #12359 improve the process of finding actual methods for servlet and portlet handlers (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2010-02-15T03:34:03Z","2019-01-11T16:46:40Z"
"","11461","provide AspectJ style configuration for exception translation [SPR-6795]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6795](https://jira.spring.io/browse/SPR-6795?redirect=false)** and commented  It would be nice to have an AspectJ option for other AOP features in Spring such as exception translation.  ---  **Affects:** 3.0 GA  **Issue Links:** - #14768 Add AspectJ support to persistence exception translation (_**""duplicates""**_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-03T19:31:54Z","2019-01-11T15:46:19Z"
"","11441","significant memory consumption in 3.0 vs 2.x [SPR-6775]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6775](https://jira.spring.io/browse/SPR-6775?redirect=false)** and commented  Quoting from the forums:  > I'm trying to migrate my application from 2.5.6 to 3.0.0. Surprisingly I can see a significant higher memory consumption in 3.0.0. The DefaultListableBeanFactory uses 8.5 mb in spring 2.5.6 and about 90 mb in spring 3.0.0. As far as I can see, a large part of the memory consumption is due to the usage of CachingMetadataReaderFactory.    ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=83785  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ee2b1cde82ff9539c7059796033b4f889cc78719, https://github.com/spring-projects/spring-framework/commit/b32c4cfb8a8e4f7c06af9567d096b1f174168408, https://github.com/spring-projects/spring-framework/commit/39f81760f8c5634e4b7e0660e68583b354762ceb","closed","in: core,","spring-projects-issues","2010-01-27T21:08:28Z","2012-06-19T03:43:21Z"
"","11125","Hibernate support does not support Hibernate 3.2 (only 3.3) [SPR-6459]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6459](https://jira.spring.io/browse/SPR-6459?redirect=false)** and commented  Unfortunately, when I tried to take a new snapshot of Spring v3, I found that it introduced new dependencies on Hibernate v3.3, that would force us to move from our patched version of Hibernate v3.2. The offending class was org.springframework.orm.hibernate3.LocalSessionFactoryBean and its dependency on org.hibernate.cache.RegionFactory which doesn't exist and v3.2 and causes an introspection error.  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11078 CXF integration broken in Spring 3 RC2 (_**""is depended on by""**_) - #11053 Add support for the HIbernate RegionFactory cache API to LocalSessionFactoryBean","closed","type: enhancement,","spring-projects-issues","2009-11-27T01:45:25Z","2019-01-11T15:39:35Z"
"","11115","verify war structure [SPR-6449]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6449](https://jira.spring.io/browse/SPR-6449?redirect=false)** and commented  The war structure needs to be verified, especially with regards to its JPA functionality which depends on various files on the classpath (such as META-INF/orm.xml).  ---  **Affects:** 3.0 RC2  This issue is a sub-task of #11113  **Referenced from:** commits https://github.com/spring-projects/spring-petclinic/commit/d109fdd2f5d6d8746e1a39a896e22ebad06eac85, https://github.com/spring-projects/spring-petclinic/commit/6116d12475ff697f495d0dea3b502620d5ed97ec","closed","type: task,","spring-projects-issues","2009-11-25T02:46:07Z","2019-01-11T15:32:32Z"
"","11114","move petclinic to the maven build [SPR-6448]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6448](https://jira.spring.io/browse/SPR-6448?redirect=false)** and commented  Currently Petclinic uses spring build as its building system. This should be changed to Maven to make it easier for users.  ---  **Affects:** 3.0 RC2  This issue is a sub-task of #11113  **Referenced from:** commits https://github.com/spring-projects/spring-petclinic/commit/5db88f472c254ccfc8ec34fb2b1144ecbc984480, https://github.com/spring-projects/spring-petclinic/commit/a36bc3c2925bb355f7496b2dc87048200a5fad1a, https://github.com/spring-projects/spring-petclinic/commit/521d01db950e357cf81ef78c50daf290e92b309c","closed","type: task,","spring-projects-issues","2009-11-25T02:44:45Z","2019-01-11T15:32:27Z"
"","11113","move petclinic into the samples repo [SPR-6447]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6447](https://jira.spring.io/browse/SPR-6447?redirect=false)** and commented  Since 3.0.0 RC2 petclinic is not longer part of the distribution but rather a stand-alone project. This task aims to complete this transition.  ---  **Affects:** 3.0 RC2  **Sub-tasks:** - #11114 move petclinic to the maven build - #11115 verify war structure","closed","type: task,","spring-projects-issues","2009-11-25T02:43:36Z","2019-01-11T15:32:24Z"
"","11067","Spring manifest forbids CGLib 2.2.0 from being used [SPR-6401]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6401](https://jira.spring.io/browse/SPR-6401?redirect=false)** and commented  The problem i see is, that spring aop uses cglib in a range of [2.1.3 to 2.2.0) (exclusive). This conflicts with the hibernate 3.3.2.GA which required cglib to be 2.2.0. either one of the libraries must be adjusted.   ---  **Affects:** 3.0 RC2  **Reference URL:** http://forum.springsource.org/showthread.php?p=270435#post270435  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/502c0e905576b2adaffaf850ebcb65c8e1a0787e","closed","in: core,","spring-projects-issues","2009-11-20T06:05:44Z","2012-06-19T03:43:33Z"
"","11060","GlassFish LTW [SPR-6394]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6394](https://jira.spring.io/browse/SPR-6394?redirect=false)** and commented  ---  **Affects:** 3.0 RC2  This issue is a sub-task of #10999  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/be60908d6db536af5dbbf1af7733940343067cf7, https://github.com/spring-projects/spring-framework/commit/6653f25e81c22e98dc6ce765e20ea7aa07f345b3","closed","in: core,","spring-projects-issues","2009-11-19T06:16:58Z","2019-01-11T14:38:34Z"
"","11059","OC4J LTW [SPR-6393]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6393](https://jira.spring.io/browse/SPR-6393?redirect=false)** and commented  ---  **Affects:** 3.0 RC2  This issue is a sub-task of #10999  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4375b9c89abe802ed36a1a38885fc0def6b557e1, https://github.com/spring-projects/spring-framework/commit/ab5e4a4ff39161bff450cdc38d870a9381389fbe, https://github.com/spring-projects/spring-framework/commit/38d6b55363bbbfd35e981af0d55ed913a37a9404","closed","in: core,","spring-projects-issues","2009-11-19T06:16:27Z","2019-01-11T14:38:45Z"
"","10999","improve existing LTW to not depend on proprietary/mock jars [SPR-6333]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6333](https://jira.spring.io/browse/SPR-6333?redirect=false)** and commented  ---  **Sub-tasks:** - #11059 OC4J LTW - #11060 GlassFish LTW  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab5e4a4ff39161bff450cdc38d870a9381389fbe, https://github.com/spring-projects/spring-framework/commit/be60908d6db536af5dbbf1af7733940343067cf7, https://github.com/spring-projects/spring-framework/commit/6653f25e81c22e98dc6ce765e20ea7aa07f345b3, https://github.com/spring-projects/spring-framework/commit/4375b9c89abe802ed36a1a38885fc0def6b557e1, https://github.com/spring-projects/spring-framework/commit/38d6b55363bbbfd35e981af0d55ed913a37a9404","closed","type: enhancement,","spring-projects-issues","2009-11-11T21:04:27Z","2019-01-11T14:37:06Z"
"","10998","location parsing might incorrectly rely on the URL API [SPR-6332]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6332](https://jira.spring.io/browse/SPR-6332?redirect=false)** and commented  It's worth double checking whether the way resource locations are parsed throughout Spring rely on the URL API or not since the former can create false positives. Using the URI API is a better solution as it doesn't perform validation.  ---  **Issue Links:** - #10432 XML bean definition ""import"" directive doesn't work with custom resource loader","closed","type: enhancement,","spring-projects-issues","2009-11-11T20:59:32Z","2019-01-11T14:36:49Z"
"","10983","petclinic fails to compile [SPR-6317]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6317](https://jira.spring.io/browse/SPR-6317?redirect=false)** and commented  In RC1, petclinic fails to compile   ---  **Affects:** 3.0 RC1","closed","type: task,","spring-projects-issues","2009-11-09T03:07:49Z","2009-12-10T07:07:03Z"
"","11234","Rollback of transaction participating in nested transaction should not enforce rollback of global transaction [SPR-6568]","**[Clemens Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=clemens%20schneider)** opened **[SPR-6568](https://jira.spring.io/browse/SPR-6568?redirect=false)** and commented  In my scenario, I have a global transaction (PROPAGATION_REQUIRED) in which I start a nested transaction (PROPAGATION_NESTED) in which I start another transaction (PROPAGATION_REQUIRED). A RuntimeException is thrown inside the most inner transaction and is caught inside the most outer transaction. Now I would expect that only the most inner and the nested transaction get rolled back to its savepoints but instead the whole transaction gets marked as rollbackOnly which gets me an UnexpectedRollbackException. A fix would be to set the globalRollbackOnParticipationFailure flag of the platform transaction manager to false, but in general, this behaviour is desired in our application. Wouldn't it be possible somehow to check in the inner transaction if there is another nested transaction active and if this is the case, to not mark the transaction as rollbackOnly?  Simply put: PROPAGATION_REQUIRED { try { PROPAGATION_NESTED { PROPAGATION_REQUIRED { throws RuntimeException(); // causes whole transaction to rollback } } } catch (RuntimeException) { // handle here without re-throwing } }  ---  **Affects:** 2.5.5  **Issue Links:** - #16214 TransactionSynchronizationManager - throw an Exception or log a warning if a Synchronization wants to add a Synchronization and afterCompletion is already called - #19774 Support for read-only transactions with Oracle 12c JDBC driver - #17201 Log warning for Isolation.READ_UNCOMMITTED with Propagation.NOT_SUPPORTED  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0f51ff5ebc33201218be6616e7eb3600f24f1960  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-16T00:22:21Z","2019-01-11T15:19:58Z"
"","11560","HibernateJpaDialect does not allow ConnectionManager to eagerly release Connection for long-running Session [SPR-6895]","**[Christopher G. Stach II](https://jira.spring.io/secure/ViewProfile.jspa?name=cstach)** opened **[SPR-6895](https://jira.spring.io/browse/SPR-6895?redirect=false)** and commented  When JpaTransactionManager gets a handle for the Hibernate session's connection in doBegin with      ConnectionHandle conHandle = getJpaDialect().getJdbcConnection(em, definition.isReadOnly());  it never actually lets go. JpaTransactionManager eventually calls      getJpaDialect().releaseJdbcConnection(txObject.getConnectionHolder().getConnectionHandle(),     					txObject.getEntityManagerHolder().getEntityManager());  in doCleanupAfterCompletion, but HibernateJpaDialect has no implementation for releaseJdbcConnection.  Because this borrowed connection handle is never released, o.h.jdbc.ConnectionManager never returns the connection to the pool.  This setup eventually turns into a connection leak with Spring Web Flow when Hibernate fetches more connections to instantiate lazy collections and such, but the connection handles in the pool never get closed. Even if your database times out the connections and your pool eventually figures that out, the handles are still out of the pool until then.  After turning on debug logging for o.h.jdbc.ConnectionManager, things look like this:  $ grep jdbc.ConnectionManager debug.log | cut -c22- | sort | uniq -c 1 c.ConnectionManager.getConnection(ConnectionManager.java:167) 1 c.ConnectionManager.openConnection(ConnectionManager.java:446) 160 DEBUG jdbc.ConnectionManager aggressively releasing JDBC connection 157 DEBUG jdbc.ConnectionManager opening JDBC connection 156 DEBUG jdbc.ConnectionManager releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)] 1 DEBUG jdbc.ConnectionManager skipping aggresive-release due to borrowed connection  156 + 1 skipped release (and the two lines from the stack trace when the connection times out in the connection pool) = 157 opens.  $ grep jdbc.ConnectionManager debug.log | cut -c22- | sort | uniq -c 3 c.ConnectionManager.getConnection(ConnectionManager.java:167) 3 c.ConnectionManager.openConnection(ConnectionManager.java:446) 256 DEBUG jdbc.ConnectionManager aggressively releasing JDBC connection 251 DEBUG jdbc.ConnectionManager opening JDBC connection 248 DEBUG jdbc.ConnectionManager releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)] 3 DEBUG jdbc.ConnectionManager skipping aggresive-release due to borrowed connection  Again, 248 + 3 = 251.  Now, I don't see a need to have this JDBC connection even associated with the transaction as I do everything through JPA. I may be wrong about that, but it seems to only be used in this one spot. I went ahead and subclassed HibernateJpaDialect and made getJdbcConnection return null, just like DefaultJpaDialect. Things seem to be working, also (two separate runs):  $ grep jdbc.ConnectionManager debug.log | cut -c22- | sort | uniq -c 99 DEBUG jdbc.ConnectionManager aggressively releasing JDBC connection 95 DEBUG jdbc.ConnectionManager opening JDBC connection 95 DEBUG jdbc.ConnectionManager releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  $ grep jdbc.ConnectionManager debug.log | cut -c22- | sort | uniq -c 165 DEBUG jdbc.ConnectionManager aggressively releasing JDBC connection 161 DEBUG jdbc.ConnectionManager opening JDBC connection 161 DEBUG jdbc.ConnectionManager releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]  The numbers match up and I am no longer getting timed out connections in the pool, which means I also shouldn't be running out of connections.  This should probably either be fixed, or this whole JDBC connection transaction association should be optional.  This was also described at http://ksevindik.blogspot.com/2008_11_01_archive.html.  ---  **Affects:** 3.0 GA, 3.0.1  **Issue Links:** - #15028 PooledConnection has already been closed exception with Hibernate 4.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef227c5d0171834e9166ed0b48ed342a4fd2dff6","closed","type: enhancement,","spring-projects-issues","2010-02-22T23:28:44Z","2019-01-11T17:04:00Z"
"","11875","@Scheduled processed twice when accidentally using @Configurable on a managed bean [SPR-7216]","**[Christopher G. Stach II](https://jira.spring.io/secure/ViewProfile.jspa?name=cgs)** opened **[SPR-7216](https://jira.spring.io/browse/SPR-7216?redirect=false)** and commented  Here is a stack trace of a `@Scheduled` annotation being added to cronTasks:  Thread [main] (Suspended (breakpoint at line 117 in ScheduledAnnotationBeanPostProcessor$1))	 ScheduledAnnotationBeanPostProcessor$1.doWith(Method) line: 117	 ReflectionUtils.doWithMethods(Class, MethodCallback, MethodFilter) line: 455	 ReflectionUtils.doWithMethods(Class, MethodCallback) line: 431	 ScheduledAnnotationBeanPostProcessor.postProcessAfterInitialization(Object, String) line: 90	 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyBeanPostProcessorsAfterInitialization(Object, String) line: 407	 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).initializeBean(String, Object, RootBeanDefinition) line: 1418	 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).initializeBean(Object, String) line: 386	 BeanConfigurerSupport.configureBean(Object) line: 141	 AnnotationBeanConfigurerAspect.configureBean(Object) line: 59	 AnnotationBeanConfigurerAspect(AbstractDependencyInjectionAspect).ajc$afterReturning$org_springframework_beans_factory_aspectj_AbstractDependencyInjectionAspect$2$1ea6722c(Object) line: 89	 \(XxxJob).\() line: 69	 NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	 NativeConstructorAccessorImpl.newInstance(Object[]) line: 39	 DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 27	 Constructor\.newInstance(Object...) line: 513	 BeanUtils.instantiateClass(Constructor\, Object...) line: 126	 CglibSubclassingInstantiationStrategy(SimpleInstantiationStrategy).instantiate(RootBeanDefinition, String, BeanFactory) line: 72	 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).instantiateBean(String, RootBeanDefinition) line: 948	 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBeanInstance(String, RootBeanDefinition, Object[]) line: 901	 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 485	 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 456	 AbstractBeanFactory$1.getObject() line: 291	 DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 222	 DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class\, Object[], boolean) line: 288	 DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 190	 DefaultListableBeanFactory.preInstantiateSingletons() line: 563	 XmlWebApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 872	 XmlWebApplicationContext(AbstractApplicationContext).refresh() line: 423	 ContextLoaderListener(ContextLoader).createWebApplicationContext(ServletContext, ApplicationContext) line: 276	 ContextLoaderListener(ContextLoader).initWebApplicationContext(ServletContext) line: 197	 ContextLoaderListener.contextInitialized(ServletContextEvent) line: 47	 StandardContext.listenerStart() line: 3972	 StandardContext.start() line: 4467	 StandardHost(ContainerBase).start() line: 1045	 StandardHost.start() line: 785	 StandardEngine(ContainerBase).start() line: 1045	 StandardEngine.start() line: 443	 StandardService.start() line: 519	 StandardServer.start() line: 710	 Catalina.start() line: 581	 NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	 NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	 DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	 Method.invoke(Object, Object...) line: 597	 Bootstrap.start() line: 289	 Bootstrap.main(String[]) line: 414  Shortly thereafter, the same annotation on the same bean instance is processed a second time from doCreateBean, the same method. Here is the diff of the first and second stack traces:  --- stack1      2010-05-19 01:56:49.000000000 -0500 +++ stack2      2010-05-19 01:56:46.000000000 -0500 @@ -5,20 +5,7 @@ ScheduledAnnotationBeanPostProcessor.postProcessAfterInitialization(Object, String) line: 90 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyBeanPostProcessorsAfterInitialization(Object, String) line: 407 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).initializeBean(String, Object, RootBeanDefinition) line: 1418  ---      DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).initializeBean(Object, String) line: 386  -         BeanConfigurerSupport.configureBean(Object) line: 141  -         AnnotationBeanConfigurerAspect.configureBean(Object) line: 59  -         AnnotationBeanConfigurerAspect(AbstractDependencyInjectionAspect).ajc$afterReturning$org_springframework_beans_factory_aspectj_AbstractDependencyInjectionAspect$2$1ea6722c(Object) line: 89  -         (ClientSavingsPlanJob).() line: 69  -         NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]  -         NativeConstructorAccessorImpl.newInstance(Object[]) line: 39  -         DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 27  -         Constructor.newInstance(Object...) line: 513  -         BeanUtils.instantiateClass(Constructor, Object...) line: 126  -         CglibSubclassingInstantiationStrategy(SimpleInstantiationStrategy).instantiate(RootBeanDefinition, String, BeanFactory) line: 72  -         DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).instantiateBean(String, RootBeanDefinition) line: 948  -         DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBeanInstance(String, RootBeanDefinition, Object[]) line: 901  -         DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 485  +         DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519       DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 456       AbstractBeanFactory$1.getObject() line: 291       DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 222  This only seems to affect two beans that I use with Spring Batch, although that may not actually matter. Both job beans are annotated at the class level with `@Service` and `@Configurable`(dependencyCheck = true), both extend the same abstract subclass with `@Autowired` annotations on fields, and both `@Scheduled` annotations are on methods with `@Transactional`.  ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/53ed9b282b447cff9c2bd2ac34cc96b125bf29d9","closed","in: core,","spring-projects-issues","2010-05-18T18:10:10Z","2019-01-13T07:53:52Z"
"","10964","AbstractExcelView doesn't work with POI 3.5 [SPR-6298]","**[Christopher de Bruin](https://jira.spring.io/secure/ViewProfile.jspa?name=cbrui)** opened **[SPR-6298](https://jira.spring.io/browse/SPR-6298?redirect=false)** and commented  The AbstractExcelView doesn't work with the current version of POI (3.5), i.e. it calls serCellValue() on HSSFCell, which doesn't exist any longer. Would be nice to have an up-to-date AbstractExcelView.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b321376703ce0621fab9f61beff842cf2b411160","closed","type: enhancement,","spring-projects-issues","2009-11-04T01:09:59Z","2012-06-19T03:43:42Z"
"","11194","PathVariables of type double [SPR-6528]","**[Christopher Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=lyonanderson)** opened **[SPR-6528](https://jira.spring.io/browse/SPR-6528?redirect=false)** and commented  Take the following REST endpoint:  ```   @RequestMapping(""/lat/{latitude}/long/{longitude}"") public void testLatLong(@PathVariable Double latitude, @PathVariable Double longitude) { 	System.out.println(""Latitude = "" + latitude); 	System.out.println(""Longitude = "" + longitude); } ```  If you hit this with the URL  ``` /lat/123/long/456  ```  However, if the URL contains doubles with a decimal place e.g.:  ``` /lat/2.3/long/445 ```  The endpoint is not longer hit, i.e. we get a 404.  Interestingly, if we change the type of the PathVariables to String:  ```   @RequestMapping(""/lat/{latitude}/long/{longitude}"") public void testLatLong(@PathVariable String latitude, @PathVariable String longitude) { 	System.out.println(""Latitude = "" + latitude); 	System.out.println(""Longitude = "" + longitude); } ```  It will not work when latitude or longitude contains a fullstop. However, a comma will work instead of a fullstop in this case.  ---  **Affects:** 3.0 M4  **Issue Links:** - #11184 Url suffix after dot is omitted  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8678652f3e5e9f53cc63486544bcb54cb13bf672","closed","type: bug,","spring-projects-issues","2009-12-06T21:58:37Z","2019-01-11T15:14:45Z"
"","11814","Two threads have the xame XaResource (activemq) when sending a message with JmsTemplate in beforeCompletion [SPR-7155]","**[Christophe Rodriguez](https://jira.spring.io/secure/ViewProfile.jspa?name=rodriguezc)** opened **[SPR-7155](https://jira.spring.io/browse/SPR-7155?redirect=false)** and commented  You must first import the attached maven project.  1.Put a breakpoint at line 334 in class ""org.apache.activemq.TransactionContext"" - ""throw new...""  Line 334: // Are we already associated? if (associatedXid != null) { throw new XAException(XAException.XAER_PROTO); }  2.Launch the Main.java class in debug mode.  3.When you are debugging at the line 334 you can evaluate the value of associatedXid: This value is constantly changed by another thread!  4. Put a breakpoint at the beginning of the method org.apache.activemq.TransactionContext.setXid(Xid xid)  5. Now you can find what thread has the same TransactionContext/XaResource.    I don't know if it is a bug of activemq or a bug in spring in class ConnectionFactoryUtils.    The bug is not reproductible with a jencks connection pool and ""ActiveMQResourceAdapter"".    See Main2.java.    ---  **Affects:** 3.0.2  **Attachments:** - [TestActivemq.zip](https://jira.spring.io/secure/attachment/16496/TestActivemq.zip) (_25.91 kB_)","closed","status: declined,","spring-projects-issues","2010-04-29T22:28:40Z","2019-01-12T16:37:59Z"
"","11656","Memory leak using TransactionDelegate and transaction.commit() [SPR-6991]","**[Christophe Rodriguez](https://jira.spring.io/secure/ViewProfile.jspa?name=rodriguezc)** opened **[SPR-6991](https://jira.spring.io/browse/SPR-6991?redirect=false)** and commented  When calling transaction.commit/rollback instead of transactionManager.commit/rollback in the class TransactionDelegate.endTransaction the TransactionManager doesn't unassociate the transaction.  The list of associatedTransactions in org.apache.geronimo.transaction.manager.TransactionManagerImpl keeps de reference of the transaction indefinitely.  Beans:  org.apache.activemq.ra.ActiveMQResourceAdapter org.jencks.factory.TransactionManagerFactoryBean   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4e7752c9baeadbbd8631a2706b438b82e5de7cd3","closed","type: bug,","spring-projects-issues","2010-03-15T23:08:24Z","2012-06-19T03:43:41Z"
"","11561","Issue with Circular Reference when using a FactoryBean [SPR-6896]","**[Christian Marquez Grabia](https://jira.spring.io/secure/ViewProfile.jspa?name=chalmagr)** opened **[SPR-6896](https://jira.spring.io/browse/SPR-6896?redirect=false)** and commented  There is a very specific issue when resolving circular reference in which the order of the beans is crucial, however while debugging this, there may be a possible way to avoid this, which is 'postponing' the call to 'FactoryBean.getObject()' when the factory has not being 'initialized' yet, but post-injecting the values once the factory gets initialized (afterPropertiesSet).  Basically, this issue happens in the next scenario:  == Java Classes ==  public class TestClassImpl implements TestClass {      private String string;     private TestClass testClass;          // setters & getters  }  == Spring Context == \ \ \ \           	     	       \  The issue comes up when the factory gets 'pre-instantiated' to avoid circular references, and the target bean attempts to use it. Since it is a factory bean it will call the 'getObject' method, but since it is not initialized yet, the proxy was not created, and this causes the following exception (Spring 2.5.5):  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'factory' defined in class path resource [fail-application-context.xml]: Cannot resolve reference to bean 'bean' while setting bean property 'target'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean' defined in class path resource [fail-application-context.xml]: Cannot resolve reference to bean 'factory' while setting bean property 'testClass'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'factory': org.springframework.beans.factory.FactoryBeanNotInitializedException: Cannot determine target class for proxy at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1245) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:423) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) at org.springframework.test.CircularReferenceTest.testFailAppCtx(CircularReferenceTest.java:15) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:168) at junit.framework.TestCase.runBare(TestCase.java:134) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:91) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean' defined in class path resource [fail-application-context.xml]: Cannot resolve reference to bean 'factory' while setting bean property 'testClass'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'factory': org.springframework.beans.factory.FactoryBeanNotInitializedException: Cannot determine target class for proxy at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1245) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) ... 37 more Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'factory': org.springframework.beans.factory.FactoryBeanNotInitializedException: Cannot determine target class for proxy at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:124) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:98) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1285) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:217) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) ... 50 more  I'll be attaching a Maven project with the test scenarios.   ---  **Affects:** 2.5.5, 2.5.6  **Attachments:** - [SpringBugTest.zip](https://jira.spring.io/secure/attachment/16223/SpringBugTest.zip) (_6.75 kB_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2010-02-23T02:18:46Z","2019-01-12T05:32:28Z"
"","11322","ScheduledAnnotationBeanPostProcessor registers schedules twice in web application [SPR-6656]","**[Christian Ihle](https://jira.spring.io/secure/ViewProfile.jspa?name=blurpy)** opened **[SPR-6656](https://jira.spring.io/browse/SPR-6656?redirect=false)** and commented  ScheduledAnnotationBeanPostProcessor.onApplicationEvent is first run when the Root WebApplicationContext initializes. Then run again when the FrameworkServlet initializes. Each time onApplicationEvent runs a new schedule is registered.  I have modified the task-basic sample from https://src.springframework.org/svn/spring-samples/task-basic/trunk/ to run as a web application for verification. Will attach the source and war file.  This is the console output of task-basic in jetty. It's the same in tomcat. Notice the ""processing next 10..."" text that shows up twice every 30 seconds. When the application runs from a main class outside a web server the ""processing next 10..."" text only shows up once every 30 seconds.  ``` 2010-01-08 10:38:22.612::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog 2010-01-08 10:38:22.738::INFO:  jetty-6.1.17 2010-01-08 10:38:23.212:/task-basic:INFO:  Initializing Spring root WebApplicationContext INFO : org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization started INFO : org.springframework.web.context.support.XmlWebApplicationContext - Refreshing Root WebApplicationContext: startup date [Fri Jan 08 10:38:23 CET 2010]; root of context hierarchy INFO : org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [org/springframework/samples/task/basic/annotation/config.xml] INFO : org.springframework.beans.factory.support.DefaultListableBeanFactory - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@144b9ff: defining beans [scheduledProcessor,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.scheduling.annotation.internalAsyncAnnotationProcessor,org.springframework.scheduling.annotation.internalScheduledAnnotationProcessor]; root of factory hierarchy INFO : org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 13801 ms processing next 10 at Fri Jan 08 10:38:37 CET 2010 INFO : org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'SpringServlet': initialization started INFO : org.springframework.web.context.support.XmlWebApplicationContext - Refreshing WebApplicationContext for namespace 'SpringServlet-servlet': startup date [Fri Jan 08 10:38:37 CET 2010]; parent: Root WebApplicationContext INFO : org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from ServletContext resource [/servlet-context.xml] 2010-01-08 10:38:37.139:/task-basic:INFO:  Initializing Spring FrameworkServlet 'SpringServlet' INFO : org.springframework.beans.factory.support.DefaultListableBeanFactory - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@fffa61: defining beans []; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@144b9ff INFO : org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'SpringServlet': initialization completed in 4407 ms processing next 10 at Fri Jan 08 10:38:41 CET 2010 2010-01-08 10:38:41.557::INFO:  Opened C:\Users\Christian\Programmer\jetty-6.1.17\logs\2010_01_08.request.log 2010-01-08 10:38:41.641::INFO:  Started SelectChannelConnector@0.0.0.0:8080 processing next 10 at Fri Jan 08 10:39:07 CET 2010 processing next 10 at Fri Jan 08 10:39:11 CET 2010 processing next 10 at Fri Jan 08 10:39:37 CET 2010 processing next 10 at Fri Jan 08 10:39:41 CET 2010 ```  ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=80225  **Attachments:** - [org.springframework.samples.task.basic-1.0.0-SNAPSHOT.war](https://jira.spring.io/secure/attachment/16075/org.springframework.samples.task.basic-1.0.0-SNAPSHOT.war) (_3.11 MB_) - [task-basic.zip](https://jira.spring.io/secure/attachment/16074/task-basic.zip) (_11.41 kB_)  **Issue Links:** - #11329 `@Scheduled` tasks scheduled multiple times when a child application context is refreshed (_**""is duplicated by""**_) - #11525 Scheduled tasks seem to run twice (_**""is duplicated by""**_) - #16655 JmsListener/ScheduledAnnotationBeanPostProcessor should use SmartInitializingSingleton instead of ContextRefreshedEvent  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ca54fb4158da6337060cac9faba6911f192aa1e","closed","in: core,","spring-projects-issues","2010-01-07T19:55:06Z","2019-01-13T07:56:10Z"
"","11642","GenericTypeResolver does not properly handle array parameter types [SPR-6977]","**[Christian Dupuis](https://jira.spring.io/secure/ViewProfile.jspa?name=cdupuis)** opened **[SPR-6977](https://jira.spring.io/browse/SPR-6977?redirect=false)** and commented  The following short test problem fails with Spring 3.0.1:  ``` import static org.junit.Assert.assertTrue;  import org.junit.Test; import org.springframework.beans.factory.FactoryBean; import org.springframework.core.GenericTypeResolver; import org.springframework.core.io.Resource; import org.springframework.jdbc.config.SortedResourcesFactoryBean;  public class GenericTypeResolverTest {  	@Test 	public void testArrayResolution() { 		Class clazz = GenericTypeResolver.resolveTypeArgument(SortedResourcesFactoryBean.class, FactoryBean.class); 		assertTrue(clazz.isArray()); 		assertTrue(clazz.getComponentType().equals(Resource.class)); 	}  }  ```    ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c4f19ec94d8832136772e567285da6ffe233176, https://github.com/spring-projects/spring-framework/commit/145dcfd0c25b521e0e48a5bd2bc9cad698745143","closed","type: enhancement,","spring-projects-issues","2010-03-12T00:05:08Z","2012-06-19T03:43:59Z"
"","11295","Have ConversionFailedException store/expose the failed value [SPR-6629]","**[Chris Hubick](https://jira.spring.io/secure/ViewProfile.jspa?name=hubick)** opened **[SPR-6629](https://jira.spring.io/browse/SPR-6629?redirect=false)** and commented  The org.springframework.core.convert.ConversionFailedException constructor currently accepts an ""Object value - the value we tried to convert"" argument, which it uses while constructing the exception detail message, but it doesn't store this value, nor provide a getValue() accessor method.  For client code dealing with the conversion of more complex custom classes, the ability to catch a ConversionFailedException and gain a reference to the failed value would enable that code to use it to provide much better logging/error/debugging context information than a simple toString() of the failed value will currently provide.  Thanks for you consideration.   ---  **Affects:** 3.0 GA  **Attachments:** - [spring_conversion_failed_value.patch](https://jira.spring.io/secure/attachment/16057/spring_conversion_failed_value.patch) (_831 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a90266f8e62c1072011b8beb595d17f0d704aee","closed","type: enhancement,","spring-projects-issues","2009-12-30T07:57:02Z","2012-06-19T03:44:10Z"
"","11867","support JSR-330 @Named as a meta-annotation [SPR-7208]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7208](https://jira.spring.io/browse/SPR-7208?redirect=false)** and commented  Like `@Component`, JSR-330's `@Named` marks classes as candidates for Spring's component-scanning functionality.  `@Component` can also be used as a meta-annotation, whereas `@Named` currently cannot.  The JSR-330 spec is silent on such matters, but we may as well support this in an effort to close gaps between Spring annotations and JSR-330 annotations wherever possible.  Example:  ``` @Named @Retention(RetentionPolicy.RUNTIME) public @interface MyService {    ... } ```  ``` package com.acme; @MyService public class FooService { ... } ```  ```         ```  ``` ApplicationContext ctx = new ClassPathXmlApplicationContext(""beans.xml""); FooService fooService = ctx.getBean(FooService.class); fooService.doStuff(); ... ```    --- No further details from [SPR-7208](https://jira.spring.io/browse/SPR-7208?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2010-05-15T22:35:08Z","2019-01-12T03:50:14Z"
"","11780","Filter out non-autowire candidates for calls to getBean(Class)  [SPR-7120]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7120](https://jira.spring.io/browse/SPR-7120?redirect=false)** and commented  Consider a scoped proxy bean of type `Foo` with bean name `foo`.  If a user attempts to fetch this bean by type from the container using `getBean(Foo.class)`, a `NoSuchBeanDefinitionException` will be thrown stating that there is an ambiguity because two beans of type `Foo` exist: `[foo, scopedTarget.foo]`.  As it is almost certainly the user's intent to retrieve the proxy and not the target, we should filter out the scoped target before evaluating whether there is an ambiguity.  A nice way of implementing this is to simply check whether each bean definition of the matching type is an autowire candidate.  If not, filter it from the list.  In this way, the list in the example above will be narrowed to exactly one bean, and that bean will be returned from the call to `getBean(Foo.class)`.   ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16475/mylyn-context.zip) (_1.56 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f06a92b6b5fbd2f92444d10a25332f306dfb499","closed","type: enhancement,","spring-projects-issues","2010-04-22T01:48:25Z","2012-06-19T03:44:02Z"
"","11736","Document need for -Dcom.sun.management.* -D flags when using Spring JMX [SPR-7076]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7076](https://jira.spring.io/browse/SPR-7076?redirect=false)** and commented  As a courtesy to the user, and with #10352 in mind, add a simple note to the JMX section of the reference documentation that details the need to specify `-Dcom.sun.management.jmxremote` for local access to the mbean server or the other possible -D flag variants that allow for connecting to the mbean server remotely.  This can be little more than a link to Sun's own documentation, but the fact that these flags are necessary and that we don't mention them could lead users to think they've done something wrong with Spring configuration when in fact they have not.  ---  **Issue Links:** - #10352 Instantiation of Spring context interferes with default JMX behavior under Java 6 (_**""supersedes""**_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2010-04-07T06:01:13Z","2019-01-11T13:25:16Z"
"","11675","Provide smart HandlerAdapter in support of Spring Security's forthcoming @RequestSecurity annotation [SPR-7010]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7010](https://jira.spring.io/browse/SPR-7010?redirect=false)** and commented   --- No further details from [SPR-7010](https://jira.spring.io/browse/SPR-7010?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-03-19T01:39:31Z","2015-09-22T18:20:32Z"
"","11587","Deprecate SimpleJdbcTemplate in favor of JdbcTemplate [SPR-6922]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6922](https://jira.spring.io/browse/SPR-6922?redirect=false)** and commented  also add `public int[] batchUpdate(String sql, List batchArgs)` as well as any other methods that exist only on SimpleJdbcTemplate at that time.  ---  **Issue Links:** - #11106 Merge JdbcTemplate and SimpleJdbcTemplate, deprecate SimpleJdbcTemplate (_**""is duplicated by""**_) - #13873 Deprecate SimpleJdbcTestUtils in favor of JdbcTestUtils - #16514 Delete deprecated SimpleJdbc* classes - #13630 Provide JdbcTemplate in abstract transactional base classes in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5f738f2b4978985287e42c7ca19b2284f7c1ba4","closed","type: enhancement,","spring-projects-issues","2010-03-02T04:16:01Z","2019-01-11T16:29:09Z"
"","11554","ClassPathResource-related FileNotFoundExceptions do not contain fully-qualified resource paths when using class literal convenience constructor [SPR-6888]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6888](https://jira.spring.io/browse/SPR-6888?redirect=false)** and commented  ``` ClassPathResource resource = new ClassPathResource(""notexist"", ClassInSomePackage.class); resource.getInputStream(); ```  The FNFE that results from getInputStream() above will contain only 'notexist' in the path, where the fully-qualified path would be expected.  ---  **Affects:** 3.0.1  **Issue Links:** - #14049 Fix regression in ClassPathResource descriptions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e19f2959e5f5627ea6deae1d1769f9469c6dcaf","closed","type: bug,","spring-projects-issues","2010-02-22T09:41:57Z","2019-01-11T17:00:06Z"
"","11445","imported @Configuration classes do not get enhanced and fail to satisfy scoping requirements [SPR-6779]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6779](https://jira.spring.io/browse/SPR-6779?redirect=false)** and commented  Consider the following scenario  ``` @Configuration @Import(ConfigY.class) class ConfigX {     @Autowired ConfigY configY;      @Bean Foo foo() {         return new Foo(configY.someBean());     }      @Bean Bar bar() {         return new Bar(configY.someBean());     } }  @Configuration class ConfigY {     @Bean SomeBean someBean() { return new SomeBean(); } } ```  Assuming the container is bootstrapped against `ConfigX` alone, where `ConfigX` imports `ConfigY`, The `@Autowired` `ConfigY` instance will not be enhanced by `ConfigurationEnhancer`, and will fail to meet scoping requirements when its `@Bean` methods are called.  In the example above, beans `foo` and `bar` will each receive a different instance of `someBean`.  This is incorrect behavior, as `someBean` should be singleton-scoped.  The non-enhanced `ConfigY` instance is simply returning a new `SomeBean` instance instead of checking against the container for a cached instance, which is what the enhanced class would do.  See unit test that captures and corners this issue at  https://src.springframework.org/svn/spring-framework/trunk/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ImportedConfigurationClassEnhancementTests.java    ---  **Affects:** 3.0 GA  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16127/mylyn-context.zip) (_21.41 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbd797e50b2f1c5b0dfef944ee218d826f1a0694, https://github.com/spring-projects/spring-framework/commit/110b032ad9dddcb643a36b28dba94e4ed548b556, https://github.com/spring-projects/spring-framework/commit/5fdee478417057a14a0d72c7d4a7f2cb889df02e","closed","in: core,","spring-projects-issues","2010-01-29T05:44:09Z","2012-06-19T03:43:17Z"
"","10994","Rename @ImportXml -> @ImportResource and allow for usage of non-XML BeanDefinitionReader types [SPR-6328]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6328](https://jira.spring.io/browse/SPR-6328?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ee553f7804c9cc2ac89b963bcff58974503c20fe","closed","type: enhancement,","spring-projects-issues","2009-11-10T10:34:13Z","2012-06-19T03:43:42Z"
"","10993","Preserve 'reader' attribute in @ImportResource hierarchies [SPR-6327]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6327](https://jira.spring.io/browse/SPR-6327?redirect=false)** and commented  #### Status Quo  Currently, either of the following work fine:  ```java @Configuration @ImportResource(     locations = ""com/foo/config.xml"",     reader = XmlBeanDefinitionReader.class) public class ConfigA { }  @Configuration @ImportResource(     locations = ""com/foo/config.properties"",     reader = PropertiesBeanDefinitionReader.class) public class ConfigB { } ```  However, the following will **not** work:  ```java @Configuration @ImportResource(     locations = ""com/foo/config.properties"",     reader = PropertiesBeanDefinitionReader.class) public class ConfigB extends ConfigA { } ```  #### Analysis  **Problem**: the XML file specified in `ConfigA` will be read by the `PropertiesBeanDefinitionReader` declared in `ConfigB`, which naturally fails.  **Cause**: when parsing annotations from the `@Configuration` class hierarchy, the last `reader` attribute _wins_, effectively overriding any other `reader` attributes from classes up the hierarchy.  **Solution**: crawl the class/annotation hierarchy manually and build up a context containing every resource and its associated `BeanDefinitionReader` type, analogous to the support for `loader` in `@ContextConfiguration` in the Spring TestContext Framework (TCF).  This is similar in concept to the way that TCF operates.  In this way, this improvement will make sense to implement alongside #10976, which deals with support for relative paths and import-by-convention semantics -- features that are also supported by TCF.  ---  **Issue Links:** - #12838 Improve support for `@Configuration` class hierarchies - #10976 Support relative and by-convention use of `@ImportResource`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ae11387b4aa628c0834198c45cf733b6cd23f71d","closed","type: enhancement,","spring-projects-issues","2009-11-10T10:30:52Z","2019-01-13T07:57:24Z"
"","10976","Support relative and by-convention use of @ImportResource [SPR-6310]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6310](https://jira.spring.io/browse/SPR-6310?redirect=false)** and commented  Much like Spring's TestContext framework and its `@ContextConfiguration` annotation, processing `@Configuration` classes should support relative paths and loading resources by convention when using `@ImportXml`:  1. Relative paths:  ```java package com.biz.app; @Configuration @ImportResource(""Foo.xml"") public class AppConfig { ... } ```  It is assumed that Foo.xml resides in `com.biz.app`, the same package in which `AppConfig` is declared. 1. Import by convention:  ```java package com.biz.app; @Configuration @ImportResource public class AppConfig { ... } ```  It is assumed that `classpath:/com/biz/app/AppConfig-context.xml` exists.  See `testImportXmlWithRelativePath()` and `testImportXmlByConvention()`, which are both currently `@Ignore`'d in `org.springframework.context.annotation.configuration.ImportXmlTests`.  See also TODO in `ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsFromXml()`  ---  **Issue Links:** - #10826 Support `@ImportResource` within `@Configuration` classes (_**""depends on""**_) - #13003 Relative imports in `@Configuration` classes - #10993 Preserve 'reader' attribute in `@ImportResource` hierarchies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ae11387b4aa628c0834198c45cf733b6cd23f71d  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-11-06T13:40:09Z","2019-01-13T07:57:27Z"
"","10919","Spring support for @javax.inject.Named should support resolving values from  [SPR-6251]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6251](https://jira.spring.io/browse/SPR-6251?redirect=false)** and commented  Currently, `@Named` is not a 1:1 replacement for `@Value` (nor can it be with regard to full SpEL usage, etc).  However, it would be nice, in simple cases, to be able to drop in `@Named` as a portable replacement for `@Value`.  For example:  `foo.properties`:  ``` prop.name=somevalue ```  `app-config.xml`:  ```  ```  ``` public class Foo {     public Foo(@Value(""${prop.name}"") String prop) { ... } } ```  The above works just fine, and `""somevalue""` gets injected as expected.  However, the following does not work:  ``` public class Foo {     public Foo(@Named(""${prop.name}"") String prop) { ... } } ```  Perhaps Spring's support for `@Named` can include searching through the properties contributed by property-placeholder (including system properties, etc, such that `@Named(""prop.name"")` 'just works'.  It would end up looking like the following:  ``` public class Foo {     public Foo(@Named(""prop.name"") String prop) { ... } } ```  This would provide a reasonable, portable alternative to `@Value`.  Again, users won't have the full power of `#{..`} SpEL expressions, but that's the tradeoff being made for portability in the first place.   --- No further details from [SPR-6251](https://jira.spring.io/browse/SPR-6251?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-10-20T02:05:20Z","2012-06-19T09:36:17Z"
"","11580","Migrate from Spring 2.5.6 to Spring 3.0.1 of Spring Porlet MVC lead to javax.servlet.ServletException: File ""/WEB-INF/servlet/view"" not found  [SPR-6915]","**[Cheng Khoon Lim](https://jira.spring.io/secure/ViewProfile.jspa?name=chengkhoon)** opened **[SPR-6915](https://jira.spring.io/browse/SPR-6915?redirect=false)** and commented  I am experiencing Spring Portlet MVC issue where my hello-world portlet works in Spring 2.5.6 and not in Spring 3.0.1. I'm getting - File ""/WEB-INF/servlet/view"" not found.  Here is the stack trace: ..... DEBUG - DispatcherPortlet          - Testing handler adapter [org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter@1a9fe0] DEBUG - HandlerMethodInvoker       - Invoking request handler method: protected org.springframework.web.portlet.ModelAndView au.com.optus.mcas.portal.helloworld.HelloSpringThreeController.doView(javax.portlet.PortletRequest,javax.portlet.PortletResponse) throws javax.portlet.PortletException,java.io.IOException INFO  - HelloSpringThreeController - Hello in view. DEBUG - DefaultListableBeanFactory - Invoking afterPropertiesSet() on bean with name 'hello' DEBUG - DispatcherPortlet          - Setting portlet response content type to view-determined type [text/html;charset=ISO-8859-1] DEBUG - JstlView                   - Including resource [/WEB-INF/jsp/hello.jsp] in InternalResourceView 'hello' ERROR - DispatcherPortlet          - Could not complete request javax.portlet.PortletException: javax.servlet.ServletException: File ""/WEB-INF/servlet/view"" not found at com.vignette.portal.portlet.jsrcontainer.internal.standardcontainer.invocation.apiimpl.PortletRequestDispatcherImpl.include(PortletRequestDispatcherImpl.java:328) at org.springframework.web.portlet.DispatcherPortlet.doRender(DispatcherPortlet.java:1137) at org.springframework.web.portlet.DispatcherPortlet.render(DispatcherPortlet.java:1092) at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:761) at org.springframework.web.portlet.FrameworkPortlet.processRequest(FrameworkPortlet.java:522) at org.springframework.web.portlet.FrameworkPortlet.doDispatch(FrameworkPortlet.java:470) at javax.portlet.GenericPortlet.render(GenericPortlet.java:233) at com.vignette.portal.portlet.jsrcontainer.internal.standardcontainer.management.FilterChainImpl.doFilter(FilterChainImpl.java:290) at com.vignette.portal.portlet.jsrcontainer.internal.standardcontainer.management.FilterManagerImpl.processFilter(FilterManagerImpl.java:78) at com.vignette.portal.portlet.jsrcontainer.internal.standardcontainer.invocation.RenderCommand.execute(RenderCommand.java:62) at com.vignette.portal.portlet.jsrcontainer.PortletCommandServlet.service(PortletCommandServlet.java:170) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646) at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:551) at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:488) at com.vignette.portal.portlet.jsrcontainer.internal.standardcontainer.invocation.PortletRequestBroker.sendRequestCommand(PortletRequestBroker.java:142) at com.vignette.portal.portlet.jsrcontainer.internal.standardcontainer.invocation.PortletRequestBroker.executeRenderRequest(PortletRequestBroker.java:368) at com.vignette.portal.portlet.jsrcontainer.internal.standardcontainer.PortletContainerImpl.executeRenderRequest(PortletContainerImpl.java:79) at com.vignette.portal.portlet.management.internal.implementation.provider.jsr.JsrPortletSpiImpl.doRender(JsrPortletSpiImpl.java:326) at com.vignette.portal.portlet.management.internal.implementation.invocation.PortletRenderBroker.doRender(PortletRenderBroker.java:142) at com.vignette.portal.portlet.management.internal.implementation.standard.StandardPortlet.doRender(StandardPortlet.java:708) at com.vignette.portal.portlet.invocation.internal.StandardPortletInvocationAgent.renderPortlet(StandardPortletInvocationAgent.java:173) at com.vignette.portal.portlet.invocation.internal.InSerialPortletRequestBroker.render(InSerialPortletRequestBroker.java:45) at com.vignette.portal.website.admin.components.c_portlet_management_common.internal.PortletInvocationViewRequestHandlerImpl.handlePortletInvocationRequestImpl(PortletInvocationViewRequestHandlerImpl.java:240) at com.vignette.portal.website.admin.components.c_portlet_management_common.internal.PortletInvocationViewRequestHandlerImpl.handlePortletInvocationRequest(PortletInvocationViewRequestHandlerImpl.java:128) at com.vignette.portal.portlet.website.internal.admin.PortletInvocationServlet.service(PortletInvocationServlet.java:128) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.vignette.portal.website.admin.internal.control.ConsoleAuthorizationFilter.httpDoFilter(ConsoleAuthorizationFilter.java:133) at com.vignette.portal.website.admin.internal.control.AbstractHttpFilter.doFilter(AbstractHttpFilter.java:61) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.vignette.portal.website.admin.internal.control.AdminContextFilter.httpDoFilter(AdminContextFilter.java:65) at com.vignette.portal.website.admin.internal.control.AbstractHttpFilter.doFilter(AbstractHttpFilter.java:61) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.vignette.portal.website.admin.internal.control.FailoverManagementFilter.httpDoFilter(FailoverManagementFilter.java:62) at com.vignette.portal.website.admin.internal.control.AbstractHttpFilter.doFilter(AbstractHttpFilter.java:61) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.vignette.portal.website.enduser.filters.AuthenticationFilter.doFilter(AuthenticationFilter.java:42) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.vignette.portal.website.admin.internal.control.InitFrameworkFilter.httpDoFilter(InitFrameworkFilter.java:35) at com.vignette.portal.website.admin.internal.control.AbstractHttpFilter.doFilter(AbstractHttpFilter.java:61) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.vignette.portal.website.internal.StartupProtectionFilter.doFilterSingleInvocation(StartupProtectionFilter.java:100) at com.vignette.portal.website.internal.SingleInvocationFilter.doFilter(SingleInvocationFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.vignette.portal.website.internal.EnvironmentalWrapperFilter.doFilterSingleInvocation(EnvironmentalWrapperFilter.java:45) at com.vignette.portal.website.internal.SingleInvocationFilter.doFilter(SingleInvocationFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454) at java.lang.Thread.run(Thread.java:595) Caused by: javax.servlet.ServletException: File ""/WEB-INF/servlet/view"" not found at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:319) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646) at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:551) at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:488) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:229) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) at org.springframework.web.servlet.ViewRendererServlet.renderView(ViewRendererServlet.java:114) at org.springframework.web.servlet.ViewRendererServlet.processRequest(ViewRendererServlet.java:86) at org.springframework.web.servlet.ViewRendererServlet.doGet(ViewRendererServlet.java:66) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646) at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:551) at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:488) at com.vignette.portal.portlet.jsrcontainer.internal.standardcontainer.invocation.apiimpl.PortletRequestDispatcherImpl.include(PortletRequestDispatcherImpl.java:324) ... 67 more   ---  **Affects:** 3.0.1","closed","in: web,","spring-projects-issues","2010-02-27T08:40:38Z","2019-01-11T16:29:14Z"
"","11158","Update JRuby support to JRuby 1.4 [SPR-6492]","**[Charles Oliver Nutter](https://jira.spring.io/secure/ViewProfile.jspa?name=headius)** opened **[SPR-6492](https://jira.spring.io/browse/SPR-6492?redirect=false)** and commented  Currently Spring 3.0 is going to ship with JRuby 1.2. However that release of JRuby is almost a year old, and there have been thousands of commits and over a thousand bugs fixed since then, along with numerous performance and memory improvements. JRuby 1.4 should be compatible with JRuby 1.2, so it would be a good idea to update Spring as soon as possible.   ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/085aecd51f663d7f5d968656876c70b5c5fd7192, https://github.com/spring-projects/spring-framework/commit/74022861c5a93f5049e8ada44f6a3280d2ae0479, https://github.com/spring-projects/spring-framework/commit/95ddeff17dae1cc255b0554834e46268777a1e8d  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-01T18:46:19Z","2012-06-19T03:44:16Z"
"","11863","AbstractApplicationEventMulticaster returns multiple instances of same listener for getApplicationListeners() [SPR-7204]","**[Casey Hadden](https://jira.spring.io/secure/ViewProfile.jspa?name=casey.hadden)** opened **[SPR-7204](https://jira.spring.io/browse/SPR-7204?redirect=false)** and commented  AbstractApplicationEventMulticaster has two getApplicationListeners methods. The no parameter method will return duplicate listeners in its list while the one subsetting by event type does not.  It appears that when the default ListenerRetriever class is iterating over the listenerBeanNames the add call should be protected by a !allListeners.contains(listener) check like the event subset method is.  Attached is a zip file which shows the two listeners printed from the no parameter method while only one is printed from the event type method.   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2  **Attachments:** - [AbstractApplicationEventMulticaster.zip](https://jira.spring.io/secure/attachment/16556/AbstractApplicationEventMulticaster.zip) (_1.41 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/738d84f75c21873bcf6e80bcb64cd92f5da28d8e","closed","in: core,","spring-projects-issues","2010-05-14T06:14:55Z","2012-06-19T03:44:14Z"
"","10877","OracleLobHandler: Temporary LOBs don't get freed and eat TEMP tablespace [SPR-6209]","**[Carsten Jahn](https://jira.spring.io/secure/ViewProfile.jspa?name=carsten-jahn)** opened **[SPR-6209](https://jira.spring.io/browse/SPR-6209?redirect=false)** and commented  We were facing an issue which the temp tablespace being used more and more while CLOBs were fetched in the application.  There are two kinds of LOBs: ""ordinary"" LOBs and temporary LOBs. Temporary LOBs are constructed on the fly, e.g. while processing a select that appends to LOBs to each other (e.g. molformula || molformula) or functions that create LOBs (e.g. molfile(ctab) returns a temporary CLOB). Temporary CLOBs need to be stored somewhere until they are not needed any more, and they are stored in the TEMP tablespace.  From the Oracle documentation on ""Working With Temporary LOBs"": http://download.oracle.com/docs/cd/B28359_01/java.111/b31224/oralob.htm#i1060097   ""When fetching data from a ReultSet with columns that are temporary LOBs, use getClob or getBlob instead of getString or getBytes. Also invoke freeTemporary to free the temporary LOBs.""  This practice is not implemented in OracleLobHandler. It has methods like  public String getClobAsString(ResultSet rs, int columnIndex) throws SQLException { logger.debug(""Returning Oracle CLOB as string""); Clob clob = rs.getClob(columnIndex); return (clob != null ? clob.getSubString(1, (int) clob.length()) : null); }  that should better be implemented that way:  public String getClobAsString(ResultSet rs, int columnIndex) throws SQLException { logger.debug(""Returning Oracle CLOB as string""); oracle.sql.CLOB clob = (oracle.sql.CLOB) rs.getClob(columnIndex); String returnString = (clob != null ? clob.getSubString(1, (int) clob.length()) : null); if( clob.isTemporary() ) { clob.freeTemporary(); } return returnString; }  I think that all getClob* / getBlob* methods are affected, although I just tested the change that I pasted above. It works for me, the TEMP tablespace does not get used much and I can fetch large amounts of records with temporary CLOBs - that was not possible before, I just got ""ORA-01652: unable to extend temp segment by 128 in tablespace TEMP"" after some time.  To reproduce, I think you need a sufficiently small TEMP tablespace, and a SELECT statement that returns large temporary CLOBs, e.g. by appending columns with ||  and returning the append result.  Without this fix, TEMP tablespace is freed only after Oracle session termination.  ---  **Affects:** 2.5.6, 3.0 RC1  **Issue Links:** - #10666 Memory Leak in Oracle LOB Reading??  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5a158fb76f8d0cbf79b358de5a82bf3b60248a42","closed","type: bug,","spring-projects-issues","2009-10-08T19:29:36Z","2019-01-11T14:43:13Z"
"","11183","JSR-303 example in the current documentation [SPR-6517]","**[Carlos Vara](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos.vara)** opened **[SPR-6517](https://jira.spring.io/browse/SPR-6517?redirect=false)** and commented  In section 5.7.1 of the current documentation (Overview of the JSR-303 Bean Validation API), the example annotates a string field with `@Max`(64). As far as I know, that annotation is intended for numerals and not strings.  Tested it and fails to validate with Hibernate Validator (at least if the expected effect is that the string size is less than 64).   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12892eef98912a4cdc93052e07a98cbebf97324b","closed","type: bug,","spring-projects-issues","2009-12-04T00:21:18Z","2012-06-19T03:44:02Z"
"","11824","FreeMarkerConfigurationFactory should use configured object wrapper to wrap variables, not SimpleHash [SPR-7165]","**[Carey Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=carey)** opened **[SPR-7165](https://jira.spring.io/browse/SPR-7165?redirect=false)** and commented  In `FreeMarkerConfigurationFactory.createConfiguration()`, the shared variables are passed to `Configuration.setAllSharedVariables()` by wrapping them in a new `SimpleHash`. This means that the variables themselves, and any values returned from methods on them, will be wrapped by the `DefaultObjectWrapper`, rather than whichever one was configured.  Like `FreeMarkerView`, `FreeMarkerConfigurationFactory` should pass the object wrapper from the new `Configuration` to the `SimpleHash` constructor, so that it is used to wrap the variable values.  This is affecting me because I'm trying to use a custom wrapper that doesn't change the order of keys in a map returned from an object in the shared variables.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/026523d24b962d6cf27808390605c0f08fdccbdf","closed","type: bug,","spring-projects-issues","2010-05-03T11:57:23Z","2012-06-19T03:43:59Z"
"","11499","@RequestBody Does not support inheritance [SPR-6833]","**[Bruce Lowe](https://jira.spring.io/secure/ViewProfile.jspa?name=brucelowe)** opened **[SPR-6833](https://jira.spring.io/browse/SPR-6833?redirect=false)** and commented  I have a controller with a methods defined as such  `@RequestMapping`(value = ""/services/{serviceName}/scenes/"", method = RequestMethod.POST) public void addScene(`@PathVariable`(""serviceName"") String serviceName, `@RequestBody` SceneTO receivedSceneTO, HttpServletRequest request, HttpServletResponse response) { ... }  It is designed to be able to POST ""SceneTO""s to.   I have made a smart custom message converters so people can submit VideoScenes, AudioScenes, TextScenes etc.  The convertor will create the appropriate SceneTO inheriting object.  However, i get this exception:  java.lang.IllegalArgumentException: argument type mismatch at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doInvokeMethod(HandlerMethodInvoker.java:710) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:167) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:414) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:402) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:563) at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1093) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:71) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505) at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:842) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:648) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)  If I change my convertor to ONLY create SceneTO objects (instead of an inheriting one), it works fine. The method clearly does not support inheritance  We can currently work around the problem by doing this  `@RequestMapping`(value = ""/services/{serviceName}/scenes/video"", method = RequestMethod.POST) public void addScene(`@PathVariable`(""serviceName"") String serviceName, `@RequestBody` VideoTO receivedSceneTO, HttpServletRequest request, HttpServletResponse response) and `@RequestMapping`(value = ""/services/{serviceName}/scenes/audio"", method = RequestMethod.POST) public void addScene(`@PathVariable`(""serviceName"") String serviceName, `@RequestBody` AudioTO receivedSceneTO, HttpServletRequest request, HttpServletResponse response)  But it does seem less clean and results in much duplicated code.  Allowing inheritance would seem much more elegant.  (I imagine some other people may want interfaces as well)   --- No further details from [SPR-6833](https://jira.spring.io/browse/SPR-6833?redirect=false)","closed","status: invalid,","spring-projects-issues","2010-02-12T03:15:51Z","2019-01-12T05:32:32Z"
"","10896","DelegatingFilterProxy should reload delegate on ContextRefreshedEvent [SPR-6228]","**[Brice Fines](https://jira.spring.io/secure/ViewProfile.jspa?name=jarodcanal)** opened **[SPR-6228](https://jira.spring.io/browse/SPR-6228?redirect=false)** and commented  I have a web J2EE application working with Spring Security (2.0.4) and everything runs fine (using Spring 2.5.6-SEC01 for the rest). Concurrent session control is activated and working. (please find enclosed my Spring Security configuration) have basically secured the web part of my app (pattern=""/**""), and the webservice (pattern=""/services/**""), but concurrent session control is present only for the web part, not for webservice. As stated before, everything works fine (acces is denied if user is not authenticated, concurrent session control works,...). My Spring Security configuration is loading through Spring application context with the following line in my applicationContext.xml: \  The problems appear once I reload my Spring application context calling the following code: WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(servletContext); ((AbstractApplicationContext) context).close(); ((AbstractApplicationContext) context).refresh();  My application context reloads fine (checked), but I cannot access my web application directly, I got access denied (by concurrent session control) everytime I try. The weird thing is that if I try to access a URL that has no concurrent session control (one of pattern=""/services/**"", e.g. my WSDL), then the next access to a secured URL (pattern=""/**"") is allowed, and I can use and navigate through my web app (and check that the reloaded context is working great). But if I try to connect directly to the web part (from the same browser instance, or a different browser instance after logout), my access is denied again. For example: _ application context is reloaded  _ trying to connect to http://localhost/myapp/ 00000027 LoggerListene W org.springframework.security.event.authentication.LoggerListener onApplicationEvent Authenticationevent AuthenticationFailureConcurrentLoginEvent: xxxxxxx; details: org.springframework.security.ui.WebAuthenticationDetails@957e: RemoteIpAddress: 127.0.0.1; SessionId: iatLVzWqI-R5VlynkIgjr9g; exception: Maximum sessions of 1 for this principal exceeded  _ trying to connect to http://localhost/myapp/ 00000027 LoggerListene W org.springframework.security.event.authentication.LoggerListener onApplicationEvent Authenticationevent AuthenticationFailureConcurrentLoginEvent: xxxxxxx; details: org.springframework.security.ui.WebAuthenticationDetails@957e: RemoteIpAddress: 127.0.0.1; SessionId: iatLVzWqI-R5VlynkIgjr9g; exception: Maximum sessions of 1 for this principal exceeded  _ trying to connect to http://localhost/myapp/ 00000027 LoggerListene W org.springframework.security.event.authentication.LoggerListener onApplicationEvent Authenticationevent AuthenticationFailureConcurrentLoginEvent: xxxxxxx; details: org.springframework.security.ui.WebAuthenticationDetails@957e: RemoteIpAddress: 127.0.0.1; SessionId: iatLVzWqI-R5VlynkIgjr9g; exception: Maximum sessions of 1 for this principal exceeded  _ trying to connect to http://localhost/myapp/services/WSmyapp?wsdl acces granted to WSDL (unsecured URL)  _ trying to connect to http://localhost/myapp/ 0000002f LoggerListene W org.springframework.security.event.authentication.LoggerListener onApplicationEvent Authenticationevent AuthenticationSuccessEvent: xxxxxxx; details: org.springframework.security.ui.WebAuthenticationDetails@0: RemoteIpAddress: 127.0.0.1; SessionId: q-UkiUE23CZ2_GE02w92tGu  I also tried to wait for the session timeout to occur (timeout was set to 2 minutes) after reloading my application context, but it did not work (I tried during the following 10 minutes, access is always denied by concurrent control session).  I also tried to logout (from my web app using a my logout button, the one that usually works to finish properly and works OK with concurrent session control if I do not reload my application context) after reloading my application context, access is always denied by concurrent control session.  I completely removed the concurrent control session and tested my app. In that case, once the application context is reloaded, I have no problem with Spring Security (i.e. I can access my web app and security is working). That is why I think there could be a problem with concurrent session control and application context reloading.   ---  **Affects:** 3.0 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?t=78744  **Attachments:** - [spring-security.xml](https://jira.spring.io/secure/attachment/15788/spring-security.xml) (_6.91 kB_)  6 votes, 8 watchers","closed","status: bulk-closed,","spring-projects-issues","2009-10-08T23:44:18Z","2019-01-12T03:50:49Z"
"","11638","SimpleUrlHandlerMapping wildcards cannot handle escaped newline characters [SPR-6973]","**[Brandon Yarbrough](https://jira.spring.io/secure/ViewProfile.jspa?name=brandony)** opened **[SPR-6973](https://jira.spring.io/browse/SPR-6973?redirect=false)** and commented  If I configure a SimpleUrlHandlerMapping in the following manner:  \ \ \ \UserContentController\ \ \ \  The following URL will NOT be routed to UserContentController:  http://hostname/foo%0a%0dbar/UserContent.do  The URL gets decoded into a Java string, which now has a newline in it, and that multi-line string does not match the non-multi-line regex generated by the ant pattern.  I believe that this is a regression from Spring 2.5.6.    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5a8aa5323255471668418e491ca692eb2feb5952","closed","status: declined,","spring-projects-issues","2010-03-11T09:42:35Z","2019-01-12T16:38:09Z"
"","11815","Integrate Jackson @JsonView [SPR-7156]","**[Brandon Whiteman](https://jira.spring.io/secure/ViewProfile.jspa?name=bwhiteman)** opened **[SPR-7156](https://jira.spring.io/browse/SPR-7156?redirect=false)** and commented  Jackson's JSONView annotation allows the developer to control which aspects of a method are serialiazed. With the current implementation, the Jackson view writer must be used but then the content type is not available. It would be better if as part of the RequestBody annotation, a JSONView could be specified.  ---  **Affects:** 3.1.2  **Issue Links:** - [DATAREST-221](https://jira.spring.io/browse/DATAREST-221) Support use case-driven inlining of managed resources - #15486 Provide better intercepting model for controllers returning `@ResponseBody` - #10833 MappingJacksonJsonView.setRenderedAttributes - #16407 Support Jackson2 based XML serialization/deserialization - [XD-999](https://jira.spring.io/browse/XD-999) Return the step execution information in the current job execution controller - #17828 JsonView support for JMS - #17106 Jackson `@JsonView` deserialization support for request bodies - #17859 Allow `@JsonView` to be used on meta-annotations on Rest methods - #16857 Create builder for Jackson ObjectMapper - #21742 Support both filters and views in AbstractJackson2HttpMessageConverter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/51fc3b4aaf01a3d8f8f0f9ec98f5e5c1215cc096, https://github.com/spring-projects/spring-framework/commit/be0b69cbf1377e3fa8d8abc94f24274f4d0945b2  25 votes, 24 watchers","closed","has: votes-jira,","spring-projects-issues","2010-04-30T02:41:21Z","2019-01-13T07:54:09Z"
"","11546","Petclinic startup error when using OpenJPA and Tomcat 6-  w/solution [SPR-6880]","**[Brad Armstrong](https://jira.spring.io/secure/ViewProfile.jspa?name=hashbrown)** opened **[SPR-6880](https://jira.spring.io/browse/SPR-6880?redirect=false)** and commented  When starting up the Petclinic example on Tomcat 6.x using the OpenJPA provider this error is encountered.  ERROR [org.springframework.web.context.ContextLoader] - \ org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor#0' defined in ServletContext resource [/WEB-INF/spring/applicationContext-jpa.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in ServletContext resource [/WEB-INF/spring/applicationContext-jpa.xml]: Invocation of init method failed; nested exception is java.lang.NoClassDefFoundError: javax/transaction/Synchronization at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:671) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:401) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:261)  The issue is with the pom.xml configuration. By default the javax.transaction dependency is configured to only be available in the test scope. But when using OpenJPA, this is actually needed at runtime.  So the dependency should be configured as:  \ \javax.transaction\ \com.springsource.javax.transaction\ \1.1.0\ \  ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=85042  **Issue Links:** - #10890 Update PetClinic tutorial, readme files, and DB scripts for Spring 3.0","closed","status: declined,","spring-projects-issues","2010-02-20T06:37:42Z","2019-01-12T16:38:12Z"
"","11831","Unable to refresh Tiles definitions at runtime [SPR-7172]","**[Bjorn Harvold](https://jira.spring.io/secure/ViewProfile.jspa?name=bjornharvold)** opened **[SPR-7172](https://jira.spring.io/browse/SPR-7172?redirect=false)** and commented  Using Apache Tiles v2.2.1.  The old way of doing things which was already deprecated was: DefinitionsFactoryUtil.reloadDefinitionsFactory(session.getServletContext());  That doesn't work any longer. The suggested way is to refresh the tiles dao being utilized, likely going through the definitionsFactory. Currently, however, there is no way of getting down there to call a refresh.  Suggested fix: Make it a configuration option to reload tiles if definition files have changed and set the scan time; much like ReloadableResourceBundleMessageSource.  Thanks bjorn   ---  **Affects:** 3.0.2","closed","status: bulk-closed,","spring-projects-issues","2010-05-05T06:02:58Z","2019-01-12T03:50:17Z"
"","11425","Jetty 7 doesn't like ShallowEtagHeaderFilter [SPR-6759]","**[Bjorn Harvold](https://jira.spring.io/secure/ViewProfile.jspa?name=bjornharvold)** opened **[SPR-6759](https://jira.spring.io/browse/SPR-6759?redirect=false)** and commented  When I use the etag filter with jetty 7 I get the following exception for all my static content:  WARN::/js/global.js java.lang.IllegalStateException: NO CONTENT at org.eclipse.jetty.http.HttpGenerator.addContent(HttpGenerator.java:154) at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:153) at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:97) at org.springframework.util.FileCopyUtils.copy(FileCopyUtils.java:144) at org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:76) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a4a09a09d286f0815dcb68808343b410cc09e18","closed","type: bug,","spring-projects-issues","2010-01-24T02:51:50Z","2012-06-19T03:43:36Z"
"","11407","RequestMapping with 3 PathVariable doesn't work [SPR-6741]","**[Bjorn Harvold](https://jira.spring.io/secure/ViewProfile.jspa?name=bjornharvold)** opened **[SPR-6741](https://jira.spring.io/browse/SPR-6741?redirect=false)** and commented  This RequestMapping doesn't work:  ```java @RequestMapping(value = ""/administration/user/{id}/account/{accountId}/transfer/{accounttransferId}"", method = RequestMethod.GET) ```  This RequestMapping works:  ```java @RequestMapping(value = ""/administration/account/{accountId}/transfer/{accounttransferId}"", method = RequestMethod.GET) ```  During startup, in both cases, Spring says that the above urls have been matched to a Class. There is only one method in the class to make sure nothing is being overridden. It seems this happens the moment I have more than 2 PathVariables defined.  ---  **Affects:** 4.0.1  **Issue Links:** - #12552 Calling a `@RequestMapping` annotated method with a URI template with three variables does not work (_**""is duplicated by""**_) - #16175 Cannot handle more than two `@PathVariable` with the route ends with "".png"" (_**""is duplicated by""**_) - #12245 Determination of the best pattern match to map a handler to an URL (_**""is duplicated by""**_) - #13325 AntPathMatcher.AntPatternComparator algorithm wrong for hierarchical matches - #16239 RequestMapping path priority problem  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d746e3fbfaee246055f1629d53513879e41540c0, https://github.com/spring-projects/spring-framework/commit/ce0473f92672771a198bd9ccf64ce8fc900f19cc, https://github.com/spring-projects/spring-framework/commit/f829cd1b35c160708b205302cd99df58059492c4  3 votes, 6 watchers","closed","in: core,","spring-projects-issues","2010-01-21T04:32:58Z","2019-01-13T07:55:51Z"
"","11376","Annotation-driven formatting does not work when BindTag's path contains a reference to an array/list element  [SPR-6710]","**[Bjarte Andre Eide](https://jira.spring.io/secure/ViewProfile.jspa?name=baeide)** opened **[SPR-6710](https://jira.spring.io/browse/SPR-6710?redirect=false)** and commented  In the following jsp-example, Spring does not discover the formatting annotations attached to the discount-property.  ```     ${status.displayValue}  ```  The problem can be traced back to the two following lines in org.springframework.beans.BeanWrapperImpl  ``` 358 String canonicalName = PropertyAccessorUtils.getPropertyName(propertyName); 359 PropertyDescriptor pd = getPropertyDescriptorInternal(canonicalName); ```  If line 358 is replaced with 'canonicalName = propertyName', everything works fine. However I do not know if this will break other code if line 358 is removed/replaced.  The following stacktrace shows the entry for how the jsp is accessing the BeanWrapperImpl:  ``` org.springframework.beans.BeanWrapperImpl.getPropertyTypeDescriptor(BeanWrapperImpl.java:358) org.springframework.validation.AbstractPropertyBindingResult.findEditor(AbstractPropertyBindingResult.java:154) org.springframework.web.servlet.support.BindStatus.(BindStatus.java:125) org.springframework.web.servlet.tags.BindTag.doStartTagInternal(BindTag.java:119) org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:78) ```  Attached zip-file contains some tests that fails when one of the path-element is a list/array   ---  **Affects:** 3.0 GA  **Attachments:** - [test-bind.zip](https://jira.spring.io/secure/attachment/16093/test-bind.zip) (_22.96 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/081d81e5b09ba3d1497aa38223ec0acf64f2194c, https://github.com/spring-projects/spring-framework/commit/5abd3b99b995383794884f4bbe186737fd9438d3","closed","in: core,","spring-projects-issues","2010-01-16T05:24:22Z","2012-06-19T03:43:00Z"
"","11167","Path-binding does not work when conversionService is used and the last path element is of array type [SPR-6501]","**[Bjarte Andre Eide](https://jira.spring.io/secure/ViewProfile.jspa?name=baeide)** opened **[SPR-6501](https://jira.spring.io/browse/SPR-6501?redirect=false)** and commented  When trying to bind an html input field to to a bean, and when the last path element is an array (i.e. myBean.selected[0]), I get the following stack trace:  ```   java.lang.IllegalArgumentException: The sourceType to convert to is required 	at org.springframework.util.Assert.notNull(Assert.java:112) 	at org.springframework.core.convert.support.GenericConversionService.assertNotNull(GenericConversionService.java:235) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:118) 	at org.springframework.validation.AbstractPropertyBindingResult.formatFieldValue(AbstractPropertyBindingResult.java:120) 	at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:227) 	at org.springframework.web.servlet.support.BindStatus.(BindStatus.java:120) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:175) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getPropertyPath(AbstractDataBoundFormElementTag.java:195) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getName(AbstractDataBoundFormElementTag.java:161) 	at org.springframework.web.servlet.tags.form.AbstractSingleCheckedElementTag.writeTagContent(AbstractSingleCheckedElementTag.java:84) 	at org.springframework.web.servlet.tags.form.CheckboxTag.writeTagContent(CheckboxTag.java:52) 	at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:91) 	at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:78)  ```  If conversionService is removed, and using properyEditors, the binding works fine.  ---  **Affects:** 3.0 RC3  **Issue Links:** - #11170 Add Formatter support to generic collections","closed","type: bug,","spring-projects-issues","2009-12-02T19:33:12Z","2019-01-11T15:17:18Z"
"","10917","Add a callback interface to AnnotationMethodHandlerAdapter for when HandlerAdapterResolvers are created [SPR-6249]","**[Bjarte Andre Eide](https://jira.spring.io/secure/ViewProfile.jspa?name=baeide)** opened **[SPR-6249](https://jira.spring.io/browse/SPR-6249?redirect=false)** and commented  The motivation for this feature request is to add a way to programmatically customize the sequence for when `@ModelAttributes` are invoked. Today, as far as I know, the only way to re-arrange the default invocation sequence of model attributes is to create a custom MethodHandlerAdapter class.  * New interface:  ``` public interface HandlerMethodResolverCreatedCallback {     public void handlerMethodResolverCreated(org.springframework.web.bind.annotation.support.HandlerMethodResolver resolver); } ```  * New injectable property ""handlerMethodResolverCreatedCallback"" on org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter  * Change the method ""private HandlerMethodResolver getMethodResolver(Object handler)"" in the class AnnotationMethodHandlerAdapter to invoke the callback method when a new methodMethodResolver is added to the methodResolverCache, if the handlerMethodResolverCreatedCallback property is set.  ``` ... this.methodResolverCache.put(handlerClass, resolver); if (handlerMethodResolverCreatedCallback != null) {    handlerMethodResolverCreatedCallback.handlerMethodResolverCreated(resolver); } ... ```  If the property ""handlerMethodResolverCreatedCallback"" is not set, AnnotationMethodHandlerAdapter.class will behave exactly as it does today.  Example of use-cases that can be solved by introducing this interface: 1. Re-arrange the invocation sequence of model-attributes to invoke the super.class ModelAttributes before this.class ModelAttributes. 2. Prevent overridden ModelAttributes from being invoked and populated into the model. 3. Make ModelAttributes depending on other modelAttributes to be invoked after the depending model-attributes have been resolved.  ``` public class CustomCallback implements HandlerMethodResolverCreatedCallback {     public void handlerMethodResolverCreated(HandlerMethodResolver resolver) {         Set methods = resolver.getModelAttributeMethods();         List list = new ArrayList(resolver.getModelAttributeMethods());          Collections.sort(list, new Comparator() {             public int compare(Method o1, Method o2) {                 Class c1 = o1.getDeclaringClass();                 Class c2 = o2.getDeclaringClass();                 if (c1.equals(c2)) return 0;                 if (c1.isAssignableFrom(c2)) return -1;                 if (c2.isAssignableFrom(c1)) return 1;                 return 0;             }         });          methods.clear();         methods.addAll(list);     } } ```    ---  **Affects:** 3.0 RC2","closed","type: enhancement,","spring-projects-issues","2009-10-17T20:58:15Z","2018-12-28T10:43:36Z"
"","11533","initializing an bean with init-method is forcing to have init-method in the child bean extending it. [SPR-6867]","**[Bhasker Reddy Kottapally](https://jira.spring.io/secure/ViewProfile.jspa?name=bhasker)** opened **[SPR-6867](https://jira.spring.io/browse/SPR-6867?redirect=false)** and commented  I was trying an example and noticed a problem while using init-method. initializing a bean with init-method is forcing to have init-method in the child bean extending (using parent attribute) it.  I have 2 beans ""Parent"" and ""Child"". init-method is used with parent and not with child bean. I get an exception (expecting init-method with child bean as well) while the parent is loaded in the context (using ClassPathXmlApplicationContext).  This seems to be the route cause:  Caused by: org.springframework.beans.factory.support.BeanDefinitionValidationException: Couldn't find an init method named 'xxxxxxxx' on bean with name 'xxxxxxx'   ---  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2010-02-18T16:58:09Z","2019-01-12T16:38:14Z"
"","11160","Regression about the suppport of the tag  [SPR-6494]","**[Bertrand Fovez](https://jira.spring.io/secure/ViewProfile.jspa?name=bfovez)** opened **[SPR-6494](https://jira.spring.io/browse/SPR-6494?redirect=false)** and commented  The tag \ acts differently in version 3.0.0 and 2.5.6. For example, consider these two xml configuration files, located in a package ""context"".  File: dependent-context.xml  ---  \ \ \ \  File: super-context.xml  ---  \ \ \ \  We load the latter, using the following: new ClassPathXmlApplicationContext(""context/super-context.xml"");  Here is the log using Spring 2.5.6.SEC01:  ---  11:47:58,903 INFO  [ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@19efb05: display name [org.springframework.context.support.ClassPathXmlApplicationContext@19efb05]; startup date [Wed Dec 02 11:47:58 CET 2009]; root of context hierarchy 11:47:58,949 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/super-context.xml] 11:47:59,027 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/dependent-context.xml] 11:47:59,059 INFO  [ClassPathXmlApplicationContext] Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@19efb05]: org.springframework.beans.factory.support.DefaultListableBeanFactory@47393f 11:47:59,059 INFO  [DefaultListableBeanFactory] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@47393f: defining beans [myBean]; root of factory hierarchy  Note that the dependent-context.xml file is loaded as ""class path resource [context/dependent-context.xml]""  Here is the log using Spring 3.0.0.RC3:  ---  12:06:57,312 INFO  [ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@8814e9: startup date [Wed Dec 02 12:06:57 CET 2009]; root of context hierarchy 12:06:57,608 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/super-context.xml] 12:06:57,686 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from URL [file:/C:/Workspace/__Test/target/classes/context/dependent-context.xml] 12:06:57,795 INFO  [DefaultListableBeanFactory] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1a9334: defining beans [myBean]; root of factory hierarchy  Note that the dependent-context.xml file is new loaded as ""URL [file:/C:/Workspace/__Test/target/classes/context/dependent-context.xml]""  If the two file are located in different folders on the file system, as it is often the case, the loading fails.  This difference generates several major regressions in our existing projects.  ---  **Affects:** 3.0 RC3  **Issue Links:** - #11159 Regression about the suppport of the tag  (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2009-12-01T21:18:35Z","2019-01-13T21:48:06Z"
"","11159","Regression about the suppport of the tag  [SPR-6493]","**[Bertrand Fovez](https://jira.spring.io/secure/ViewProfile.jspa?name=bfovez)** opened **[SPR-6493](https://jira.spring.io/browse/SPR-6493?redirect=false)** and commented  The tag \ acts differently in version 3.0.0 and 2.5.6. For example, consider these two xml configuration files, located in a package ""context"".  File: dependent-context.xml  ---  \ \ \ \  File: super-context.xml  ---  \ \ \ \  We load the latter, using the following: new ClassPathXmlApplicationContext(""context/super-context.xml"");  Here is the log using Spring 2.5.6.SEC01:  ---  11:47:58,903 INFO  [ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@19efb05: display name [org.springframework.context.support.ClassPathXmlApplicationContext@19efb05]; startup date [Wed Dec 02 11:47:58 CET 2009]; root of context hierarchy 11:47:58,949 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/super-context.xml] 11:47:59,027 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/dependent-context.xml] 11:47:59,059 INFO  [ClassPathXmlApplicationContext] Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@19efb05]: org.springframework.beans.factory.support.DefaultListableBeanFactory@47393f 11:47:59,059 INFO  [DefaultListableBeanFactory] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@47393f: defining beans [myBean]; root of factory hierarchy  Note that the dependent-context.xml file is loaded as ""class path resource [context/dependent-context.xml]""  Here is the log using Spring 3.0.0.RC3:  ---  12:06:57,312 INFO  [ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@8814e9: startup date [Wed Dec 02 12:06:57 CET 2009]; root of context hierarchy 12:06:57,608 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [context/super-context.xml] 12:06:57,686 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from URL [file:/C:/Workspace/__Test/target/classes/context/dependent-context.xml] 12:06:57,795 INFO  [DefaultListableBeanFactory] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1a9334: defining beans [myBean]; root of factory hierarchy  Note that the dependent-context.xml file is new loaded as ""URL [file:/C:/Workspace/__Test/target/classes/context/dependent-context.xml]""  If the two file are located in different folders on the file system, as it is often the case, the loading fails.  This difference generates several major regressions in our existing projects.  ---  **Affects:** 3.0 RC3  **Issue Links:** - #11160 Regression about the suppport of the tag  (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09a55c8edec4af7abc59b2193e2eb2109ccd84c3","closed","in: core,","spring-projects-issues","2009-12-01T21:10:31Z","2019-01-13T21:48:08Z"
"","10986","Ability to access JSTL exposed pageContext variables [SPR-6320]","**[Bert Volders](https://jira.spring.io/secure/ViewProfile.jspa?name=bvolders)** opened **[SPR-6320](https://jira.spring.io/browse/SPR-6320?redirect=false)** and commented  I was amazed to discover that i wasn't able to access a PageContext scope variable exposed by jstl's c:forEach tag. What i was trying to do is the following  ```xml                                         ```  This code looks very appealing and I was under the impression that a spring product would support this functionality. The truth is far beautiful after reading the documentation and examples.  ```xml                                      ```  Of course it could be that there is another way to achieve the same goal more elegantly as above but I haven't found it. My point is that the first approach is far more readable, elegant and intuitive.  After some debugging it seems that the JspAwareRequestContext, which contains the pageContext, doesn't has a functionality to get attributes from that context. Atm I have overridden getModelObject to achieve the first example but I'm convinced the method-name should be changed for clarification.  ``` ...     @Override     protected Object getModelObject(String modelName) {         Object o =  super.getModelObject(modelName);         if (o == null) { o = pageContext.getAttribute(modelName);}         return o;     } ```    ---  **Affects:** 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-11-09T21:04:35Z","2018-12-27T11:43:14Z"
"","11196","MimeMailHelper mail address header fields are not encoded [SPR-6530]","**[Benjamin Peter](https://jira.spring.io/secure/ViewProfile.jspa?name=bpeter)** opened **[SPR-6530](https://jira.spring.io/browse/SPR-6530?redirect=false)** and commented  It seems like the MimeMailHelper does not encode mail address header fields.  In my expectation adresses like ---""Hans Müller"" --- should be encoded to something like ---=?ISO-8859-1?Q?""Hans=FXM=FXller?= --- if the MimeMailHelper is used to ensure a valid email.  I might also be wrong but please correct me.  As I see it according to RFC 2045 the name part of the address is ""phrase"" and in RFC 2047 can also be an encoded-word. ""phrase = 1*( encoded-word / word )"".  I added a small example program to demonstrate the behaviour. Subject and Text are encoded but From: and To: are not.    ---  **Affects:** 3.0 M3  **Attachments:** - [MailEncoding.java](https://jira.spring.io/secure/attachment/15987/MailEncoding.java) (_1.04 kB_) - [MailEncoding.txt](https://jira.spring.io/secure/attachment/15988/MailEncoding.txt) (_340 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fd3a39dc9875e21ecee6d015cbd26855967f441d","closed","type: enhancement,","spring-projects-issues","2009-12-07T03:08:10Z","2012-06-19T03:44:02Z"
"","11572","JibxMarshaller - provide access to jibx's writeDocType [SPR-6907]","**[Ben Davies](https://jira.spring.io/secure/ViewProfile.jspa?name=bendavies)** opened **[SPR-6907](https://jira.spring.io/browse/SPR-6907?redirect=false)** and commented  The current jibx oxm marshaller hides everything away from the user, making it impossible to utilise all of jibx's feature.  I need to be able to add a doctype to my marshalled document, but this is not possible with spring's current implementation.  The change would involved replacing all instances of  ```java marshallingContext.marshalDocument(...)  ```  with something like:  ```java marshallingContext.startDocument(...)k marshallingContext.getXmlWriter().writeDocType(...); //(if Doctype specified) marshallingContext.marshalRoot(objectToBeMarshalled); marshallingContext.endDocument(); ```  Cheers, Ben   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d1c3fa9acf2e89fe550d0d06ac5cdfa3dbbdf97, https://github.com/spring-projects/spring-framework/commit/894875ce8d47d6cd3e0f64f5c20e831a8f960ee9","closed","type: enhancement,","spring-projects-issues","2010-02-24T23:05:20Z","2012-06-19T03:43:07Z"
"","11178","Spring Framework 3.0.0 binding should include Joda as a dependency in the POM [SPR-6512]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-6512](https://jira.spring.io/browse/SPR-6512?redirect=false)** and commented  Spring Framework 3 binding infrastructure (specifically the org.springframework.format.datetime.joda package) has runtime dependencies on the Joda library for advanced date handling. It may therefore be useful if the following dependency was therefore added to the relevant POM:  \ \org.joda\ \com.springsource.org.joda.time\ \1.6.0\ \ A benefit of this is you specify the Joda version you've designed and tested the org.springframework.format.datetime.joda against, which will help ensure end user projects (which would rarely use Joda themselves and have a specific version preference) can receive the correct dependency in a transitive manner.   ---  **Affects:** 3.0 RC3","closed","type: enhancement,","spring-projects-issues","2009-12-03T15:39:44Z","2012-06-19T03:43:18Z"
"","11177","java.util.Calendar not fully supported by Spring MVC 3.0.0.RC3 [SPR-6511]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-6511](https://jira.spring.io/browse/SPR-6511?redirect=false)** and commented  java.util.Calendar is often preferred for managing points in time than java.util.Date. For example, most of the constructors of java.util.Date as well as many of its methods are declared as deprecated with a reference to use java.util.Calendar instead. Due to this, Spring Roo users are routinely requesting java.util.Calendar support. There are some issues with adding such support due to an ""auto-grow nested property path"" failure.  It does appear there is some support in Spring MVC for Calendar conversion based on the following debug messages being rendered when Joda 1.6.0 is on the classpath:  Looking for Converter to convert from [TypeDescriptor @javax.validation.constraints.NotNull @javax.validation.constraints.Past @javax.persistence.Temporal @org.springframework.format.annotation.DateTimeFormat java.util.Calendar] to [TypeDescriptor org.joda.time.ReadableInstant] Converter Lookup [MATCHED] java.util.Calendar -> org.joda.time.ReadableInstant : org.springframework.format.datetime.joda.JodaTimeConverters$CalendarToReadableInstantConverter@168f248  Attempting to then use a JSP tag in the form  will render successfully but then result in the following exception on form submission:  org.springframework.beans.NullValueInNestedPathException: Invalid property 'registered' of bean class [com.springsource.vote.domain.Vote]: Could not instantiate property type [java.util.Calendar] to auto-grow nested property path: java.lang.IllegalAccessException: Class org.springframework.beans.BeanWrapperImpl can not access a member of class java.util.Calendar with modifiers ""protected"" at org.springframework.beans.BeanWrapperImpl.newValue(BeanWrapperImpl.java:582) at org.springframework.beans.BeanWrapperImpl.createDefaultPropertyValue(BeanWrapperImpl.java:554) at org.springframework.beans.BeanWrapperImpl.setDefaultValue(BeanWrapperImpl.java:548) at org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:512) at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:486) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:645) at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:96) at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:224) at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:120) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:175) at org.springframework.web.servlet.tags.form.ErrorsTag.shouldRender(ErrorsTag.java:139) at org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(AbstractHtmlElementBodyTag.java:47) at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:91) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:78) at org.apache.jsp.WEB_002dINF.views.vote.update_jspx._jspService(update_jspx.java:215) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:393) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:654) at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:557) at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:481) at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:968) at org.apache.jasper.runtime.PageContextImpl.doInclude(PageContextImpl.java:638) at org.apache.jasper.runtime.PageContextImpl.include(PageContextImpl.java:632) at org.apache.tiles.jsp.context.JspTilesRequestContext.include(JspTilesRequestContext.java:103) at org.apache.tiles.jsp.context.JspTilesRequestContext.dispatch(JspTilesRequestContext.java:96) at org.apache.tiles.renderer.impl.UntypedAttributeRenderer.write(UntypedAttributeRenderer.java:61) at org.apache.tiles.renderer.impl.AbstractBaseAttributeRenderer.render(AbstractBaseAttributeRenderer.java:103) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:669) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:337) at org.apache.tiles.jsp.taglib.InsertAttributeTag.render(InsertAttributeTag.java:234) at org.apache.tiles.jsp.taglib.InsertAttributeTag.render(InsertAttributeTag.java:211) at org.apache.tiles.jsp.taglib.RenderTag.doEndTag(RenderTag.java:220) at org.apache.jsp.WEB_002dINF.layouts.default_jspx._jspx_meth_tiles_005finsertAttribute_005f1(default_jspx.java:443) at org.apache.jsp.WEB_002dINF.layouts.default_jspx._jspService(default_jspx.java:127) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:393) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:654) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:445) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:379) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:292) at org.apache.tiles.servlet.context.ServletTilesRequestContext.forward(ServletTilesRequestContext.java:241) at org.apache.tiles.servlet.context.ServletTilesRequestContext.dispatch(ServletTilesRequestContext.java:222) at org.apache.tiles.renderer.impl.TemplateAttributeRenderer.write(TemplateAttributeRenderer.java:44) at org.apache.tiles.renderer.impl.AbstractBaseAttributeRenderer.render(AbstractBaseAttributeRenderer.java:103) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:669) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:689) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:643) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:626) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:322) at org.springframework.web.servlet.view.tiles2.TilesView.renderMergedOutputModel(TilesView.java:100) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1060) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:798) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:647) at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:574) at javax.servlet.http.HttpServlet.service(HttpServlet.java:713) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:654) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:445) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:379) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:292) at org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195) at org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159) at org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141) at org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90) at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:68) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:57) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:113) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:344) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:110) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:98) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:95) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:110) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:55) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:36) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356) at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:177) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:188) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:106) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:150) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:619)   ---  **Affects:** 3.0 RC3","closed","in: web,","spring-projects-issues","2009-12-03T15:32:45Z","2019-01-11T15:15:59Z"
"","11176","JodaTime failing to parse date format with timezone name [SPR-6510]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-6510](https://jira.spring.io/browse/SPR-6510?redirect=false)** and commented  If a web application is deployed and Spring MVC's locale handling support is used (eg LocaleChangeInterceptor and CookieLocaleResolver), there are data binding failures in certain specific scenarios.  I have not exhaustively tested all derivatives of this problem, but it can be reproduced by enabling the aforementioned locale handling support classes and creating a form backing object that contains a field annotated with `@DateTimeFormat`(style=""LL""). The corresponding JSP can be a standard input element, as per . It is recommended to output the Locale.getDefault() and LocaleContextHolder.getLocale() from the form handling method responsible for GET operations. If these values differ (eg the system locale is ""en_AU"" whereas the browser locale is simply ""en"") the binding will fail.  This failure is interesting because during the GET use case the JSP will always render without a problem. However, clicking ""submit"" will result in an error:  Failed to convert property value of type java.lang.String[] to required type java.util.Date for property registered; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value [Ljava.lang.String;`@1c8f3cd` from type [[Ljava.lang.String;] to type [java.util.Date]; reason = Unable to convert value December 3, 2009 2:21:43 PM EST from type [java.lang.String] to type [java.util.Date]; reason = Unable to convert value December 3, 2009 2:21:43 PM EST from type [java.lang.String] to type [java.util.Date]; reason = Invalid format: ""December 3, 2009 2:21:43 PM EST"" is malformed at ""EST""; nested exception is java.lang.IllegalArgumentException: Invalid format: ""December 3, 2009 2:21:43 PM EST"" is malformed at ""EST""; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value December 3, 2009 2:21:43 PM EST from type [java.lang.String] to type [java.util.Date]; reason = Invalid format: ""December 3, 2009 2:21:43 PM EST"" is malformed at ""EST""; nested exception is java.lang.IllegalArgumentException: Invalid format: ""December 3, 2009 2:21:43 PM EST"" is malformed at ""EST""; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value December 3, 2009 2:21:43 PM EST from type [java.lang.String] to type [java.util.Date]; reason = Unable to convert value December 3, 2009 2:21:43 PM EST from type [java.lang.String] to type [java.util.Date]; reason = Invalid format: ""December 3, 2009 2:21:43 PM EST"" is malformed at ""EST""; nested exception is java.lang.IllegalArgumentException: Invalid format: ""December 3, 2009 2:21:43 PM EST"" is malformed at ""EST""; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value December 3, 2009 2:21:43 PM EST from type [java.lang.String] to type [java.util.Date]; reason = Invalid format: ""December 3, 2009 2:21:43 PM EST"" is malformed at ""EST""; nested exception is java.lang.IllegalArgumentException: Invalid format: ""December 3, 2009 2:21:43 PM EST"" is malformed at ""EST""  If the system locale is always ""en_AU"", the GET use case will show a different date depending on the browser's requested locale:  Locale ""en"" -> December 3, 2009 2:21:43 PM EST Locale ""en_AU"" -> 3 December 2009 2:21:43 PM  If the browser locale is ""en_AU"" the date will be rendered as shown on the second line above and a POST will succeed. If the browser locale is simply ""en"" the POST will fail with the aforementioned error message.  If the browser locale is ""en"", and the user changes ""December 3, 2009 2:21:43 PM EST"" into ""3 December 2009 2:21:43 PM"" before submission, the POST will still fail.  It would seem this is a major bug given the GET rendered a representation of the date in a form that Spring MVC refuses to accept in a subsequent POST from the same browser, no matter what effort is made to format the date in a manner the server may wish to receive it in.  It is possible to work around this issue by disabling Spring's locale infrastructure and therefore all input will be considered as in system default locale format. It is also possible to work around this issue by using the embedded Eclipse browser, as it does not present browser language headers by default and therefore such users will default to the system default locale.   ---  **Affects:** 3.0 RC3  **Attachments:** - [petclinic_2009-12-10_17_32_09.zip](https://jira.spring.io/secure/attachment/15995/petclinic_2009-12-10_17_32_09.zip) (_125.44 kB_)","closed","status: declined,","spring-projects-issues","2009-12-03T13:35:57Z","2019-01-12T16:38:43Z"
"","10942","Spring Aspects to provide DataAccessException translation for direct EntityManager usage [SPR-6275]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-6275](https://jira.spring.io/browse/SPR-6275?redirect=false)** and commented  Spring Roo presently provides the ability to install an exception translation aspect into user projects. This aspect ensures that direct usage of EntityManager will catch any resultant exceptions and convert them into Spring Framework's DataAccessException hierarchy. This makes it consistent with traditional `@Repository` usage or Spring's various data access abstraction templates.  It is desirable that the exception translation aspect be brought into Spring Aspects. It might be appropriate, though, to make it possible to require opt-in to use this feature perhaps by the invoking control flow having a particular annotation (ie it is probably undesirable that all usage of EntityManager receive this exception translation).  Please refer to the following FishEye location for the present exception translation aspect:  https://fisheye.springsource.org/browse/spring-roo/trunk/addon-jpa/src/main/resources/org/springframework/roo/addon/jpa/Jpa_Exception_Translator-template.txt#r305  Please refer to the following Jira issue for background to this feature:  http://jira.springframework.org/browse/ROO-182 http://jira.springframework.org/browse/ROO-255  Once this feature has been moved to Spring Framework I will modify Spring Roo accordingly. This is being tracked by:  https://jira.springsource.org/browse/ROO-315  ---  **Issue Links:** - [ROO-315](https://jira.spring.io/browse/ROO-315) Use Spring Framework-provided EntityManager exception translation services (_**""is depended on by""**_) - #10949 Enhance JPA Exception Translation to use PersistenceExceptionTranslator injected instance (_**""supersedes""**_)","closed","type: enhancement,","spring-projects-issues","2009-10-26T00:16:27Z","2019-01-11T15:11:28Z"
"","10941","Spring Aspects to provide basic static mock test functionality [SPR-6274]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-6274](https://jira.spring.io/browse/SPR-6274?redirect=false)** and commented  Spring Roo presently supports creation of mocks for static methods. As per email discussion between Juergen, Ramnivas and Ben, it would be useful if these classes were ported to Spring Aspects.  Please see the following location in Spring Roo code for the templates to use:  https://fisheye.springsource.org/browse/spring-roo/trunk/addon-test/src/main/resources/org/springframework/roo/addon/test/AbstractMethodMockingControl.aj-template https://fisheye.springsource.org/browse/spring-roo/trunk/addon-test/src/main/resources/org/springframework/roo/addon/test/JUnitStaticEntityMockingControl.aj-template https://fisheye.springsource.org/browse/spring-roo/trunk/addon-test/src/main/resources/org/springframework/roo/addon/test/MockStaticEntityMethods.java-template  Please see the following Jira issues for background on this feature and key considerations:  https://jira.springsource.org/browse/ROO-92 https://jira.springsource.org/browse/ROO-202 https://jira.springsource.org/browse/ROO-272  Once this functionality has been added to Spring Framework, I will modify the Roo usage accordingly (as is being tracked in [ROO-314](https://jira.spring.io/browse/ROO-314)).   ---  **Issue Links:** - [ROO-314](https://jira.spring.io/browse/ROO-314) Use Spring Framework-provided static mock integration test services (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2009-10-26T00:06:42Z","2012-06-19T03:43:49Z"
"","11328","Jasper reports sample [SPR-6662]","**[Bala](https://jira.spring.io/secure/ViewProfile.jspa?name=trbala)** opened **[SPR-6662](https://jira.spring.io/browse/SPR-6662?redirect=false)** and commented  Can you please create a sample application that integrates Jasper Reports(or Crystal reports). The only example available via svn is atleast a couple of yeasrs old and doesnt work well. A working example would be of great help as enterprise products needs reports feature which is sorely missing support in spring.   ---  **Affects:** 3.0 GA  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2010-01-08T06:23:29Z","2018-12-26T17:26:54Z"
"","11732","Javadoc: UrlPathHelper.getOriginatingQueryString javadoc is a copy-pastie of UrlPathHelper.getOriginatingRequestUri [SPR-7072]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axelfont)** opened **[SPR-7072](https://jira.spring.io/browse/SPR-7072?redirect=false)** and commented  This is a clear copy-paste oversight. The javadoc of the method should be fixed to reflect the actual functionality.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d34d8764b03c35f613ee788013c16d174ea3c125","closed","type: bug,","spring-projects-issues","2010-04-06T19:29:41Z","2012-06-19T03:43:27Z"
"","11683","Document the new task schema [SPR-7021]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axelfont)** opened **[SPR-7021](https://jira.spring.io/browse/SPR-7021?redirect=false)** and commented  Currently, appendix C of the reference documentation doesn't mention the new task schema. It should be documented there.  Thanks for the great work, Axel  ---  **Issue Links:** - #11682 Document the new mvc schema","closed","status: declined,","spring-projects-issues","2010-03-22T03:43:33Z","2019-01-11T13:24:29Z"
"","11682","Document the new mvc schema [SPR-7020]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axelfont)** opened **[SPR-7020](https://jira.spring.io/browse/SPR-7020?redirect=false)** and commented  Currently, the reference documentation doesn't mention the new mvc schema. It should be documented along with the other schemas in appendix C.  Thanks for the great work, Axel  ---  **Issue Links:** - #11683 Document the new task schema","closed","status: declined,","spring-projects-issues","2010-03-22T03:40:03Z","2019-01-11T13:24:48Z"
"","11566","Tomcat does not shutdown correctly when using task:scheduled-taks [SPR-6901]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axelfont)** opened **[SPR-6901](https://jira.spring.io/browse/SPR-6901?redirect=false)** and commented  Using the regular task:scheduler element in conjunction with the task:scheduled-tasks element, results, at least with Tomcat, in a server that is unable to shut down.  The server hangs after having logged the following statement: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@d81cda: defining beans []; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@1d49247  Manually defining a task scheduler and setting the threads to run as daemon provides a workaround:           	                    	       However this is only a workaround, and the default behavior should work out of the box. As you can see from the forum post reference, I am not the only one facing this issue.  ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=83687  **Issue Links:** - #11620 TaskExecutor created with task:executor not shutdown when context closes (_**""duplicates""**_) - #11620 TaskExecutor created with task:executor not shutdown when context closes - #11890 Tomcat does not shutdown correctly when using `@Scheduled`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d7df01d73bd2ef4d440c230c0e3d444e0abc185, https://github.com/spring-projects/spring-framework/commit/bca067abb2e9cb44031899134b44df09055c7e9b","closed","type: bug,","spring-projects-issues","2010-02-24T01:01:22Z","2019-01-13T07:55:12Z"
"","11075","Regression: HibernateTransactionManager.doBegin fails with java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder [SPR-6409]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axelfont)** opened **[SPR-6409](https://jira.spring.io/browse/SPR-6409?redirect=false)** and commented  Note: This works perfectly in 2.5.6 with the same Hibernate version.  In HibernateTransactionManager.doBegin() line 555 (hibTx = session.beginTransaction();) results in a call to TransactionSynchronizationManager.bindResource with the following arguments: key = the datasource value = connection holder  So far so good.  Execution of HibernateTransactionManager.doBegin() then resumes until line 571 (TransactionSynchronizationManager.bindResource(getDataSource(), conHolder);) which then bombs out on line 179 with java.lang.IllegalStateException: Already value !  This is a serious regression that should definitely be fixed before 3.0 goes final.  Keep up the good work, Axel (going back to 2.5.6 until this is resolved)   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5165465821677c9e69cc31328a828c8331496984","closed","type: bug,","spring-projects-issues","2009-11-22T22:50:28Z","2012-06-19T03:43:01Z"
"","11184","Url suffix after dot is omitted [SPR-6518]","**[Ave Kar](https://jira.spring.io/secure/ViewProfile.jspa?name=avekar)** opened **[SPR-6518](https://jira.spring.io/browse/SPR-6518?redirect=false)** and commented  Using `@Pathvariable` to pass in filenames omits the extension.  i.e.: If passing in /admin/documents/foo.txt  `@RequestMapping`(""/admin/documents/{fileName}"") public void foo(`@PathVariable` String fileName) { // fileName will come in as 'foo' instead of 'foo.txt' }  ---  **Affects:** 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3  **Reference URL:** http://forum.springsource.org/showthread.php?t=77491  **Issue Links:** - #11149 Regression when using `@RequestMapping`, `@PathVariable`, and GenericConversionService - #11194 PathVariables of type double","closed","status: invalid,","spring-projects-issues","2009-12-04T01:52:04Z","2019-01-13T07:56:37Z"
"","11294","Dynamic List Binding Support [SPR-6628]","**[Ashish Ashok Kalekar](https://jira.spring.io/secure/ViewProfile.jspa?name=ashishkalekar)** opened **[SPR-6628](https://jira.spring.io/browse/SPR-6628?redirect=false)** and commented  Out of the box support for Dynamic Binding of ordered collections would be of great help. Here is a typical scenario (using example).  1. A Web Form is simulating a User. User can have name and List of phoneNumbers. 2. phoneNumbers can be added dynamically using Javascript at client side. 3. Dynamic addition of phoneNumber into phoneNumbers is not a problem - Thanks to LazyList / AutoPopulatingList. 4. Dynamic Deletion is kind of an issue. Let's say the web form was rendered with phoneNumbers as {1,3,5,7,9}. Using Javascript the user removes {1,3} without submitting the form. Now when the form is submitted user.phoneNumbers should automatically have {5,7,9}.  There are number of articles I have read that explains this problem, but have not yet come across any elegant solution that handles dynalic deletions.   ---  **Affects:** 3.0 GA  **Attachments:** - [alpha.war](https://jira.spring.io/secure/attachment/16063/alpha.war) (_6.93 MB_) - [alpha-src.zip](https://jira.spring.io/secure/attachment/16062/alpha-src.zip) (_7.02 MB_)  6 votes, 9 watchers","closed","status: bulk-closed,","spring-projects-issues","2009-12-30T07:16:46Z","2019-01-12T03:50:40Z"
"","11340","Problem with AOP Proxy in the case the bean definition class is taken from different classloader - does not implement the interfaces from other than ""default"" class loader [SPR-6674]","**[Artur Linhart](https://jira.spring.io/secure/ViewProfile.jspa?name=goodwin)** opened **[SPR-6674](https://jira.spring.io/browse/SPR-6674?redirect=false)** and commented  In the case the definition of the beans through explicite usage of bean definition through the BeanDefinition or, for, example, through the reader org.springframework.beans.factory.xml.XmlBeanDefinitionReader and a different classloader for the bean definition or reader is specified, than the default spring classloader, then if the class is instantiated, everything works well, up to the specification of the interfaces in the returned AOP proxy - all interfaces from the ""different"" classloader are ignored and only the interfaces known to the ""default"" classloader are used in the created proxy object - in AbstractAutoProxyCreator, method protected Object createProxy(Class beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) are retrieved the interfaces through the call of Class[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.proxyClassLoader); - but here should be rather the class loader of the bean class coming from the bean definition, not from the proxy classloader. Or, alternatively, there could be some practicallz usable setting in the bean definition which would say if the same class loader has to be used like the bean definition class loader. Unfortunatelly I do not see any reasonable way how to set the proxy class loader programatically if running from the second classloader.   If the configurability of the classloader usage would be possible to implement, then if there is no clear technical reason which I do not see now, I would also prefer and find much more useful to set as the proxy class loader as default the same class loader, which has been used for the loading of the bean class itself rather than the default class loader of the spring framework.        My motivation was here to use Spring, used by the portal web application also for the instantiation of the beans in the portlet application, but then I cannot access the instantiated object through the interfaces, ""known"" to the portlet classloader, if the proxy resolves only such interfaces, which ""knows"" the portal classloader.    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2010-01-11T22:22:44Z","2012-06-18T12:44:27Z"
"","11685","Proper handling of parameterized types in RestTemplate [SPR-7023]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-7023](https://jira.spring.io/browse/SPR-7023?redirect=false)** and commented  Currently, the RestTemplate has no way to handle generic types. In other words, the following does not work:  ``` List myDomainList = restTemplate.getForObject(uri, List.class); ```  This should be fixed.  ---  **Affects:** 3.1.1  **Issue Links:** - #13482 RestTemplate Converting Generic Types (_**""is duplicated by""**_) - #13028 HttpMessageConverter doesn't support typed collections - #19423 Add PATCH HTTP operation to RestTemplate - #11667 RestTemplate fails to convert properly for Generic Type Container with MappingJacksonHttpMessageConverter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed3823b045fd19cdb801609eb034c93dd4d75c3f  14 votes, 16 watchers","closed","has: votes-jira,","spring-projects-issues","2010-03-22T23:12:01Z","2019-01-11T13:24:40Z"
"","11680","Support for HttpEntity in @MVC [SPR-7018]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-7018](https://jira.spring.io/browse/SPR-7018?redirect=false)** and commented  ---  **Issue Links:** - #11634 Introduce HttpEntity (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b07d02f1bf08a8e50deb3274007b4094171ed609","closed","type: enhancement,","spring-projects-issues","2010-03-21T22:17:28Z","2019-01-11T12:58:50Z"
"","11634","Introduce HttpEntity [SPR-6969]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6969](https://jira.spring.io/browse/SPR-6969?redirect=false)** and commented  Currently, it's not possible to explicitly set the Content-Type header (or any other header for that matter) for outgoing requests in the RestTemplate. It would be nice to introduce a wrapping `HttpEntity` type, which allows you to do this, like so:  ``` HttpEntity entity = new HttpEntity(helloWorld, MediaType.TEXT_PLAIN); URI location = template.postForLocation(""http://example.com/"", entity); ```  Additionally, it would be useful to be able to retrieve response headers as part of a GET operation. The HttpEntity can help here as well:  ``` HttpEntity entity = template.getForEntity(""http://example.com"", String.class); String body = entity.getBody(); MediaType contentType = entity.getHeaders().getContentType(); ```  ---  **Issue Links:** - #10535 RestTemplate - access to Request Headers (_**""is depended on by""**_) - #11680 Support for HttpEntity in `@MVC` (_**""is depended on by""**_) - #19423 Add PATCH HTTP operation to RestTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63076d0865809b42b497f762896346895194d345","closed","type: enhancement,","spring-projects-issues","2010-03-10T22:45:33Z","2019-01-13T07:54:57Z"
"","11611","RestTemplate should not encode fragments (#'s) [SPR-6946]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6946](https://jira.spring.io/browse/SPR-6946?redirect=false)** and commented  RestTemplate currently (and wrongly) treats #'s as fragment indicators. Instead, we should consider the # as part of the path or (query).  See RFC 1630:  A reference to a particular part of a document may, including the fragment identifier, look like      http://www.myu.edu/org/admin/people#andy  in which case the string ""#andy"" is not sent to the server, but is retained by the client and used when the whole object had been retrieved.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c91ff130d5a772927473d2620d4ea1a7f9ca4978","closed","type: enhancement,","spring-projects-issues","2010-03-04T05:11:18Z","2012-06-19T03:43:45Z"
"","11603","HttpMessageConverter for Jettison  [SPR-6938]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6938](https://jira.spring.io/browse/SPR-6938?redirect=false)** and commented  It would be nice to have a HttpMessageConverter that supports Jettison. See http://jettison.codehaus.org/   ---  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-03T20:30:35Z","2015-09-22T18:20:32Z"
"","11571","Combination of ControllerClassNameHandlerMapping and @RequestMappings with file extensions results in exception [SPR-6906]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6906](https://jira.spring.io/browse/SPR-6906?redirect=false)** and commented  When using the ControllerClassNameHandlerMapping in combination with the following controller:  ``` @Controller public class FooController { 	 	@RequestMapping(value = ""{id}"", method = RequestMethod.GET) 	public String handleView(Model model, @PathVariable(""id"") String id) { 	}  	@RequestMapping(value = ""{id}.pdf"", method = RequestMethod.GET) 	public String handlePdfView(Model model, @PathVariable(""id"") String id) { 	} } ```  Doing a request for /foo/bar works: the id variable is assigned the value bar. Doing a request for /foo/bar.pdf does not work, and results in an IllegalStateException.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/21fd1508949b9c3d046ee4b5290313c09666aa3f, https://github.com/spring-projects/spring-framework/commit/a0c41a0e038b020e1d16aee0ca90cc5aeb2bfb1a  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2010-02-24T18:45:13Z","2012-06-19T03:42:59Z"
"","11486","Return correct status code when checking @RequestMapping#headers [SPR-6820]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6820](https://jira.spring.io/browse/SPR-6820?redirect=false)** and commented  We should make sure that content-type and accept-headers not matching return a correct status code, instead of throwing a ServletRequestBindingException which we currently do.   --- No further details from [SPR-6820](https://jira.spring.io/browse/SPR-6820?redirect=false)","closed","status: invalid,","spring-projects-issues","2010-02-10T02:15:59Z","2019-01-12T05:32:35Z"
"","11368","Explicitly set response Content-Type in @ResponseBody [SPR-6702]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6702](https://jira.spring.io/browse/SPR-6702?redirect=false)** and commented  It would be useful to override the default content-type written by the HttpMessageConverters in the `@ResponseBody` annotation. Something like:  ``` @ResponseBody(""foo/bar"") public String myHandlerMethod() {   return ""myFooBar""; } ```  ---  **Issue Links:** - #11225 `@ResponseBody` overwrites ContentType - #12012 Add equivalent of JAX-RS `@Produces` to Spring MVC (_**""is superseded by""**_)  10 votes, 15 watchers","closed","has: votes-jira,","spring-projects-issues","2010-01-14T20:34:16Z","2019-01-13T07:55:57Z"
"","11038","Do not require bound classes or context for Jaxb2Marshaller  [SPR-6372]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6372](https://jira.spring.io/browse/SPR-6372?redirect=false)** and commented  We should consider removing the requirement for classesToBeBound or contextPath for the Jaxb2Marshaller and make them optional.   ---  **Affects:** 3.0 RC2","closed","type: enhancement,","spring-projects-issues","2009-11-17T02:53:54Z","2012-06-19T03:44:08Z"
"","11037","Jaxb2Marshaller should use AnnotationUtils [SPR-6371]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6371](https://jira.spring.io/browse/SPR-6371?redirect=false)** and commented  Jaxb2Marshaller.supports should use AnnotationUtils, rather than Class.getAnnotation().   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/211e36c249c90031baebefd8c0655bfc7a7a2a71","closed","type: enhancement,","spring-projects-issues","2009-11-17T02:47:56Z","2012-06-19T03:43:20Z"
"","10996","Spring does not call destroy() of FactoryBean which causes resource leaking [SPR-6330]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6330](https://jira.spring.io/browse/SPR-6330?redirect=false)** and commented  There seems to be a problem where Spring does not call destroy() method of FactoryBean, which implements DisposableBean interface, when it throws Exception in afterPropertiesSet(). Instead, Spring was trying to call the destroy() method of the actual bean created by FactoryBean, but there is no object has been created at that moment, so we leak some resources there.   ---  **Affects:** 3.0 RC1  **Attachments:** - [spring3_issue.zip](https://jira.spring.io/secure/attachment/15909/spring3_issue.zip) (_3.98 kB_)","closed","in: core,","spring-projects-issues","2009-11-11T05:23:24Z","2019-01-12T16:38:50Z"
"","10957","UrlPathHelper is too aggressive decoding URLs  [SPR-6291]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6291](https://jira.spring.io/browse/SPR-6291?redirect=false)** and commented  The UrlPathHelper, used by various other MVC components such as DispatcherServlet, is too aggressive when it decoding request URLs.  For instance, it decodes http://example.com/foo+bar as http://example.com/foo bar, while this is not correct according to RFC 2396.  ---  **Issue Links:** - #10187 RestTemplate should encode the url variables  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c5c1d70aa325f0245705a8546e8a8c1ca6d66706, https://github.com/spring-projects/spring-framework/commit/077055c8f2121c9d9f649b417a20991b32321e89  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2009-11-02T02:01:47Z","2019-01-11T14:25:22Z"
"","10904","Reintroduce Struts support [SPR-6236]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-6236](https://jira.spring.io/browse/SPR-6236?redirect=false)** and commented  Many people depend on the struts support that was in Spring 2.5. We should reintroduce it, though in deprecated form.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b42cf25599fe9a497ce8da47e1cd06475f2a80e5, https://github.com/spring-projects/spring-framework/commit/7461d7058298c7e707c670b6e43f716a3bfb8f84, https://github.com/spring-projects/spring-framework/commit/7fa910509672270f952a250c4ed64b7db69ccdac","closed","type: enhancement,","spring-projects-issues","2009-10-13T21:10:38Z","2012-06-19T03:43:45Z"
"","11699","RestTemplate - putForObject() method [SPR-7037]","**[ArielS](https://jira.spring.io/secure/ViewProfile.jspa?name=arielkung)** opened **[SPR-7037](https://jira.spring.io/browse/SPR-7037?redirect=false)** and commented  Hi, I have the same problem that you resolved in the following issue for the put method:  http://jira.springframework.org/browse/SPR-5836  Right now i'm subclassing RestTemplate but i have to add AcceptHeaderRequestCallback and PostPutCallback inner classes because they are private members of the parent class.  ---  **Issue Links:** - #15256 Please add a putForEntity and a putForLocation method to RestTemplate (_**""duplicates""**_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-03-25T01:56:09Z","2019-01-11T13:23:23Z"
"","11213","Property injection fails for arrays of enums if there is more than 1 value [SPR-6547]","**[Antony Lees](https://jira.spring.io/secure/ViewProfile.jspa?name=antonylees)** opened **[SPR-6547](https://jira.spring.io/browse/SPR-6547?redirect=false)** and commented  Given an array of enums, if the array is injected using a comma-separated list of string values, the injection will fail if there are more than one value eg  \  However, it will work if there is only 1 value eg  \  To test this I tried a list of enums, an array of enums and an array of strings.  The strings and the list work, but the enum array does not and fails with this exception:  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'enumBugTest' defined in class path resource [EnumTestApplicationContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'java.lang.String' to required type 'uk.org.sith.jeraz.Test[]' for property 'enumTypes'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [uk.org.sith.jeraz.Test] for property 'enumTypes[0]': no matching editors or conversion strategy found at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:289) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:286) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:188) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:558) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:852) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:422) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:93) at uk.org.sith.jeraz.EnumTestMain.main(EnumTestMain.java:10) Caused by: org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'java.lang.String' to required type 'uk.org.sith.jeraz.Test[]' for property 'enumTypes'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [uk.org.sith.jeraz.Test] for property 'enumTypes[0]': no matching editors or conversion strategy found at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:452) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1351) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1310) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1067) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:511) ... 11 more Caused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [uk.org.sith.jeraz.Test] for property 'enumTypes[0]': no matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:259) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:121) at org.springframework.beans.TypeConverterDelegate.convertToTypedArray(TypeConverterDelegate.java:478) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:197) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:135) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:442) ... 15 more  My test code is below:  package uk.org.sith.jeraz;  import org.springframework.context.support.ClassPathXmlApplicationContext;  public class EnumTestMain {  public static void main(String[] args) {      EnumTestMain main = new EnumTestMain();     new ClassPathXmlApplicationContext(main.getPaths());  }  public String[] getPaths() { return new String[] {""EnumTestApplicationContext.xml""}; }  }  package uk.org.sith.jeraz;  import java.util.List;  public class EnumBugTest {  private Test[] enumTypes;  private String[] stringTypes;  private List\ enumList;  public void setEnumTypes(Test[] enumTypes) { this.enumTypes = enumTypes; }  public void setStringTypes(String[] stringTypes) { this.stringTypes = stringTypes; }  public void setEnumList(List\ enumList) { this.enumList = enumList; }  }  \  \                                                               TEST1                 TEST2                             \  ---  **Affects:** 3.0 RC3  **Issue Links:** - #18986 Convert comma-separated string into list of classes analogous to existing support for class array  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f9b4443194d3aa3948d76956897c0a1d918d546","closed","in: core,","spring-projects-issues","2009-12-10T20:45:25Z","2019-01-11T15:22:33Z"
"","11482","Make ContextNamespaceHandler extendable [SPR-6816]","**[Anthony Ogier](https://jira.spring.io/secure/ViewProfile.jspa?name=netangel)** opened **[SPR-6816](https://jira.spring.io/browse/SPR-6816?redirect=false)** and commented  Recently, I had to extend ContextNamespaceHandler in order to support my own annotation, and I was forced to copy / paste the registerJava5DependentParser method because it is private.  I think this could just be declared as protected in order to extend ContextNamespaceHandler, re-implement init() method with the possibility to call registerJava5DependentParser to register our own parsers (or re-define the existing ones).   ---  **Affects:** 2.5.6  **Attachments:** - [ContextNamespaceHandler.java.patch](https://jira.spring.io/secure/attachment/16157/ContextNamespaceHandler.java.patch) (_486 bytes_)","closed","in: core,","spring-projects-issues","2010-02-08T20:47:54Z","2012-06-19T09:36:11Z"
"","11481","Make ClassPathScanningCandidateComponentProvider extendable [SPR-6815]","**[Anthony Ogier](https://jira.spring.io/secure/ViewProfile.jspa?name=netangel)** opened **[SPR-6815](https://jira.spring.io/browse/SPR-6815?redirect=false)** and commented  Recently, I had to extend ClassPathScanningCandidateComponentProvider in order to support my own annotation, and I was forced to copy / paste the entire class and could not just extend ClassPathScanningCandidateComponentProvider.  I think some field should be protected and not private, specially includeFilters and excludeFilters in order to just extend registerDefaultFilters() and add our own default filters...   ---  **Affects:** 2.5.6  **Attachments:** - [ClassPathScanningCandidateComponentProvider.java.patch](https://jira.spring.io/secure/attachment/16156/ClassPathScanningCandidateComponentProvider.java.patch) (_1.13 kB_)","closed","in: core,","spring-projects-issues","2010-02-08T20:40:18Z","2012-06-19T09:36:25Z"
"","11480","Make ClassPathBeanDefinitionScanner extendable [SPR-6814]","**[Anthony Ogier](https://jira.spring.io/secure/ViewProfile.jspa?name=netangel)** opened **[SPR-6814](https://jira.spring.io/browse/SPR-6814?redirect=false)** and commented  Recently, I had to extend ClassPathBeanDefinitionScanner in order to support my own annotation, and I was forced to copy / paste the entire class and could not just extend ClassPathBeanDefinitionScanner.  I think some field should be protected and not private, and / or the internal methods should use getters & setters to those fields (at least the final getRegistry() method which makes all the class very difficult to extend).   ---  **Affects:** 2.5.6  **Attachments:** - [ClassPathBeanDefinitionScanner.java.patch](https://jira.spring.io/secure/attachment/16155/ClassPathBeanDefinitionScanner.java.patch) (_745 bytes_)","closed","in: core,","spring-projects-issues","2010-02-08T20:26:58Z","2012-06-19T09:36:21Z"
"","11479","Ability to annotate a same class with multiple @Component [SPR-6813]","**[Anthony Ogier](https://jira.spring.io/secure/ViewProfile.jspa?name=netangel)** opened **[SPR-6813](https://jira.spring.io/browse/SPR-6813?redirect=false)** and commented  I would want to use annotations in spring in the same flexible way as the spring xml language.  I'm using spring with struts and I needed a way to make one class (an Action class actually) bound with 2 different paths.  Here would be the usage : `@Components`({ `@Component`(""/carlist""), `@Component`(""/carsearch"") }) public class CarSearchAction extends ActionSupport { ...    ---  **Affects:** 2.5.6  **Attachments:** - [ClassPathBeanDefinitionScanner.java.patch](https://jira.spring.io/secure/attachment/16154/ClassPathBeanDefinitionScanner.java.patch) (_3.34 kB_)","closed","type: enhancement,","spring-projects-issues","2010-02-08T19:03:11Z","2012-06-19T09:36:33Z"
"","11837","HiddenHttpMethodFilter not working in WebSphere 7 [SPR-7178]","**[Angel D. Segarra](https://jira.spring.io/secure/ViewProfile.jspa?name=asegarra)** opened **[SPR-7178](https://jira.spring.io/browse/SPR-7178?redirect=false)** and commented  HiddenHttpMethodFilter is not working in WebSphere 7. I get the following exception  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver handleHttpRequestMethodNotSupported Request method 'POST' not supported  the form is setup as in petclinic example. The markup generated for the page is  \ \  The handler method is annotated with `@RequestMapping`(method = RequestMethod.PUT).  Thanks, Angel   ---  **Affects:** 3.0.2  **Attachments:** - [stacktrace.txt](https://jira.spring.io/secure/attachment/16577/stacktrace.txt) (_8.37 kB_)","closed","status: invalid,","spring-projects-issues","2010-05-07T02:55:12Z","2019-01-12T05:32:07Z"
"","11727","petcare sample not writing form actions correctly on WebSphere 7 [SPR-7067]","**[Angel D. Segarra](https://jira.spring.io/secure/ViewProfile.jspa?name=asegarra)** opened **[SPR-7067](https://jira.spring.io/browse/SPR-7067?redirect=false)** and commented  I am trying to set up a Spring MVC 3 app using tiles and tuckey's urlrewritefilter as done in the petcare sample app. I noticed that my form action attributes are being written like action=""/myap/app/new"" which tuckey filter would rewrite as /myapp/app/app/new, JBoss on the other hand writes the action attribute correctly ""/myapp/new"".  ---  **Affects:** 3.0.1, 3.0.2  **Issue Links:** - #11713 MVC 3 not forwarding ""/"" path in WebSphere 7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/385298b808e13a2d1b32a94f3660374a4f3dc9c9","closed","type: bug,","spring-projects-issues","2010-04-05T03:51:16Z","2019-01-11T13:25:34Z"
"","11713","MVC 3 not forwarding ""/"" path in WebSphere 7 [SPR-7052]","**[Angel D. Segarra](https://jira.spring.io/secure/ViewProfile.jspa?name=asegarra)** opened **[SPR-7052](https://jira.spring.io/browse/SPR-7052?redirect=false)** and commented  I am trying to set up a Spring MVC 3 app using tiles and tuckey's urlrewritefilter as done in the petcare sample app.  I have my mvc servlet mapped to /app/* and the following rules in my urlrewrite.xml  ```xml    	 		/resources/** 		/resources/$1 	 	 		/** 		/app/$1 	 	 		/app/** 		/$1 		  ```  I have the following in my servlet context to map '/' to my default view.    Now everything works perfect in JBoss 4.2.3, if I visit my app at http://localhost:8080/myapp/ I get my 'home' view.  But if I run it in IBM WAS 7 (my production server) I get: Code:  org.springframework.web.servlet.DispatcherServlet noHandlerFound No mapping found for HTTP request with URI [/myapp/app/] in DispatcherServlet with name 'dispatcher'  I can only get it to work if I change my forward request to: Code:    I did another test and it if I change the path to    then it works.  Seems to me spring is not making the correct maping on Websphere when using ""/"".  Regards, Angel  ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=86972  **Issue Links:** - #11724 `@RequestMapping` ""/"" Paths - #11727 petcare sample not writing form actions correctly on WebSphere 7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/20f4e9023be5fb19465f2a35d786e40e57d48841","closed","type: bug,","spring-projects-issues","2010-03-29T07:39:19Z","2019-01-13T07:54:35Z"
"","11507","Improve singleton transaction aspect to support multiple PlatformTransactionManagers [SPR-6841]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-6841](https://jira.spring.io/browse/SPR-6841?redirect=false)** and commented  Late last year a user reported a problem on dm Server that we tracked down to a limitation in Spring's transaction aspect. The root of it was that the aspect is a singleton, and only copes with a single PlatformTransactionManager. In an OSGi environment, it's quite likely that there will be a single copy of the aspects bundle that's being shared by multiple applications, each of which would like to have its own PlatformTransactionManager.  Adrian and I spent a bit of time seeing if we could improve the situation such that the aspect could cope with multiple PlatformTransactionManagers. We believe we've been successful in doing so, but may well have overlooked some edge cases and subtleties. I'll attach a patch of the changes. It relies upon spring build 2.3.8 (so that we could configure the weaver appropriately). This means that, if Spring's not already on 2.3.8 or later, the svn:externals will need to be updated to:  spring-build -r694 https://src.springsource.org/svn/spring-build/tags/project-build-2.3.8  Hopefully the changes in the patch are reasonably self-explantory. The basic approach was to introduce PlatformTransactionManagerAware and to make any transactional beans implement the interface so that the PTM to be used (based on the application context's configuration) could be injected rather than pulling it from the singleton transaction aspect.   ---  **Affects:** 3.0 GA  **Attachments:** - [multiple-ptms.patch](https://jira.spring.io/secure/attachment/16198/multiple-ptms.patch) (_34.75 kB_)","closed","status: bulk-closed,","spring-projects-issues","2010-02-14T23:08:26Z","2019-01-12T03:50:30Z"
"","11162","org.springframework.oxm project doesn't compile in Eclipse [SPR-6496]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-6496](https://jira.spring.io/browse/SPR-6496?redirect=false)** and commented  I've imported trunk into Eclipse and I can't get the org.springframework.oxm project to compile, more specifically, its test code. The problem seems to centre around the fact that the import of org.springframework.samples cannot be resolved. I had a quick look in the IDEA .iml file and in the ivy.xml file for the project but couldn't figure out where this package was supposed to come from.   ---  **Affects:** 3.0 GA","closed","status: invalid,","spring-projects-issues","2009-12-01T21:59:43Z","2019-01-12T05:32:51Z"
"","11161","Eclipse projects don't compile due to change in Groovy dependency from 1.6.3 to 1.6.5 [SPR-6495]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-6495](https://jira.spring.io/browse/SPR-6495?redirect=false)** and commented  The org.springframework.context and org.springframework.integration-tests projects don't compile when imported into Eclipse. I'll attach a patch which fixes their .classpath settings.   ---  **Affects:** 3.0 RC3  **Attachments:** - [eclipse-classpaths.patch](https://jira.spring.io/secure/attachment/15980/eclipse-classpaths.patch) (_4.66 kB_)","closed","type: bug,","spring-projects-issues","2009-12-01T21:56:07Z","2012-06-19T03:43:09Z"
"","11022","NPE in AbstractApplicationContext finishRefresh when initialized via Spring DM [SPR-6356]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-6356](https://jira.spring.io/browse/SPR-6356?redirect=false)** and commented  I've just tried upgrading dm Server to run with Spring 3.0.0.RC2 and have encountered the following NPE whenever Spring DM tries to create an application context for a Bundle:  ``` java.lang.NullPointerException at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:861) at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358) at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320) at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136) at com.springsource.kernel.agent.dm.ContextPropagatingTaskExecutor$2.run(ContextPropagatingTaskExecutor.java:106) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:637) ```  ---  **Affects:** 3.0 RC2  **Issue Links:** - #11025 lifecycleProcessor Is NULL (_**""is duplicated by""**_) - [OSGI-783](https://jira.spring.io/browse/OSGI-783) Nullpointer on AbstractApplicationContext.finishRefresh  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da2ddca34cc7b488f4c3f2dc50c0bf398a50a4fe  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2009-11-14T01:51:39Z","2019-01-11T14:35:04Z"
"","11692","RequestMapping PUT method does not have any populate any parameters [SPR-7030]","**[Andy Tran](https://jira.spring.io/secure/ViewProfile.jspa?name=naret)** opened **[SPR-7030](https://jira.spring.io/browse/SPR-7030?redirect=false)** and commented  I'm designing a RESTful webservice after successfully adding POST (create) requests I moved over to work on PUT (edit) requests.  Upon testing the PUT methods I noticed there was a stack trace and a generic ""put method not supported"" warning along with the stack trace although when debugging the request mapped method is clearly invoked via debugger.  I inspected further and noticed my ""command"" object and request parameters were not being bound whereas switching the method on the client and server to POST did have the appropriate bound parameters.   ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=84379  **Attachments:** - [TestResource.java](https://jira.spring.io/secure/attachment/16340/TestResource.java) (_1.81 kB_)","closed","status: declined,","spring-projects-issues","2010-03-24T07:29:30Z","2019-01-12T16:38:04Z"
"","11643","Dispatcher fails to invoke handler method when request method conflicts with request path [SPR-6978]","**[Andy Kriger](https://jira.spring.io/secure/ViewProfile.jspa?name=kokaku)** opened **[SPR-6978](https://jira.spring.io/browse/SPR-6978?redirect=false)** and commented  Here is a situation that causes a HandlerMethodInvocationException java.lang.IllegalStateException: Could not find `@PathVariable` [type] in `@RequestMapping`  GET /foo/100 - loadEntity is called POST /foo/100 - publish is called GET /module/100 - loadModule is called POST /module/100 - the exception is caused  Changing the path in either loadModule or publish (ex: loadModule as /q/module/{id}) fixes the problem  It looks like RequestMapping.method is not being prioritized over RequestMapping.value  ``` @Controller public class MyController {      @RequestMapping(value = ""/{type}/{id}"", method = RequestMethod.GET)     public final Object loadEntity(@PathVariable final String type, @PathVariable final long id) { return type + ""::"" + id; }      @RequestMapping(value = ""/module/{id}"", method = RequestMethod.GET) public final Object loadModule(@PathVariable final long id) {         return """"+id;     }      @RequestMapping(value = ""/{type}/{id}"", method = RequestMethod.POST) public final Object publish(@PathVariable final String type,@PathVariable final long id) { return type + ""::"" + id; } } ```    ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c0744ee54447655a11bfa69583474d12a34cc61","closed","type: bug,","spring-projects-issues","2010-03-12T13:03:03Z","2012-06-19T03:43:14Z"
"","11832","SpEL: bean references in expressions [SPR-7173]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-7173](https://jira.spring.io/browse/SPR-7173?redirect=false)** and commented  It would be nice if beans could be referenced in expressions.  There is a BeanFactoryAccessor but that will only work if the context object is a bean factory.  Under this jira I'm proposing we add support for `@beanname` where the beanname is resolved through a bean resolver registered with the evaluation context.  ---  **Affects:** 3.0.2  **Issue Links:** - [SEC-1723](https://jira.spring.io/browse/SEC-1723) Support use of bean names in expressions via `@beanName` notation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f53621a86fd813f46c14a4394d4dabfe176149dc","closed","type: enhancement,","spring-projects-issues","2010-05-05T08:29:54Z","2019-01-13T07:54:05Z"
"","11760","SpEL: extend set of characters allowed for an identifier [SPR-7100]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-7100](https://jira.spring.io/browse/SPR-7100?redirect=false)** and commented  Currently the set of characters allowed for an identifier is (if i recall correctly) based on the Spring .net format.  This is an alphanumeric followed any number of alphanumerics or underscores.  This is quite restrictive.  Mark Fisher is considering using underscore to prefix identifiers used under SI to indicate those that are 'system managed' properties.  So the minimum requirement here is to allow the first char to be an underscore.  However, we should probably think about what it might mean to follow the java.lang.Character defined: isJavaIdentifierStart/isJavaIdentifierPart.  If it doesn't interfere too much with lexing/parsing, we should look to support that format.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f53621a86fd813f46c14a4394d4dabfe176149dc, https://github.com/spring-projects/spring-framework/commit/bf1a95c771302d6db322717a2c27deadc0b46916","closed","type: enhancement,","spring-projects-issues","2010-04-15T05:21:18Z","2012-06-19T03:43:41Z"
"","11649","Auto-growing of collections should be implemented for collection writing as well as reading [SPR-6984]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-6984](https://jira.spring.io/browse/SPR-6984?redirect=false)** and commented  The ability to auto-grow collections (when a reference is made to an index beyond the current end of the collection) is currently only supported for read, it should also be supported for write.  For example, this code:  ``` expression = parser.parseExpression(""address.crossStreets[0]""); expression.getValue(context); ```  automatically ensures crossStreets is grown to include a first entry and returns it (if the parser has been configured to auto-grow collections).  This fails:  ``` expression = parser.parseExpression(""address.crossStreets[0]""); expression.setValue(context,""Foo""); ```  with an error indicating the collection is null.   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d932c043da97fb47f79ec4536e1841a7f7fc5b44","closed","type: enhancement,","spring-projects-issues","2010-03-15T05:51:17Z","2012-06-19T03:44:17Z"
"","11498","[spel] always call the ConversionService even when getValue() returns value of the expected type, to allow for formatting [SPR-6832]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-6832](https://jira.spring.io/browse/SPR-6832?redirect=false)** and commented  Spin off from #11411.  SpEL continues to avoid any calls to the conversion service if the result of the expression appears (from a simple isAssignableFrom check) to match what the user asked for. This means no extra metadata that might have been on an accessed property will be used to trigger a format - because the conversion service won't get called. We may want to change this so that the conversion is always called, or at least always called when there is a non-simple source type descriptors, to give it a chance to perform a format.  This Jira is to cover thinking about what to do here.  We want it to perform optimally so perhaps need a way to very quickly recognize a non 'simple' source descriptor, as that is what will drive formatting when we call the conversion service.  ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-02-12T02:40:45Z","2019-01-11T16:47:04Z"
"","11497","[spel] overhaul ReflectivePropertyAccessor [SPR-6831]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-6831](https://jira.spring.io/browse/SPR-6831?redirect=false)** and commented  Spin off from #11411.  As described there:  Although Keiths test now passes, more work is needed in ReflectivePropertyAccessor for a few reasons, but I wouldn't do that so close to a release:  - too much duplication in there and its messy - the typeDescriptorCache looks unnecessary - BeanTypeDescriptors are built separately for property reads and property writes. I did not want to switch to letting the PropertyDescriptor discover setters/getters (with limited time until release) and I didn't want to introduce the new cost of reflectively hunting for the opposing accessor when it may not be used (so hunting for the setter when a field is being read, just so the BeanTypeDescriptor would be fully populated). This means that metadata attached to the 'other accessor' may not make it through to the conversion. So if you annotate the setter, it wont (I dont think) affect the conversion service call for a property read. And if you annotate the getter, it wont affect the conversion service call for a property write. More thought and testing required here. Keith can probably knock up a test that shows this limitation - I'll need to discuss it with him how much of a likely real world issue it is.  This Jira is to cover the work to address that.  ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-02-12T02:38:31Z","2019-01-11T16:47:00Z"
"","10898","[spel] performance for property access is less than ideal [SPR-6230]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-6230](https://jira.spring.io/browse/SPR-6230?redirect=false)** and commented  Two issues here.  1) The SpEL API can lead users to start paying a high price for features they aren't using (if they started creating multiple StandardEvaluationContext objects just to switch the root object) 2) the reflective property resolver is doing more cache lookups than it needs to    ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9057fd1daae0d01e1e5072e09ae15e1d93630ab","closed","type: enhancement,","spring-projects-issues","2009-10-13T04:20:57Z","2012-06-19T03:43:24Z"
"","11128","MockServletContext.getRealPath() throws NPE, if the resource loader returns null on getResource() [SPR-6462]","**[André Wolf](https://jira.spring.io/secure/ViewProfile.jspa?name=smaugg)** opened **[SPR-6462](https://jira.spring.io/browse/SPR-6462?redirect=false)** and commented  The method ServletContext.getRealPath() allows the Servlet container to return null if it is unable to translate the given virtual path to a real path. WebLogic for example does not unpack WAR or EAR files per default and serves resources directly from the archive. In this scenario a call to getRealPath() returns null.  MockServletContext does not support this scenario. It always assumes that its ResourceLoader always returns valid resources. If the ResourceLoader returns null on getResource(), MockServletContext.getRealPath() throws a NullPointerException.  Code to reproduce this defect:      @Test     public void getParameters_weblogic() {         MockServletContext context = new MockServletContext(new ResourceLoader() {             public Resource getResource(String location) {                 return null;             }             public ClassLoader getClassLoader() {                 return getClass().getClassLoader();             }         });                  Assert.assertNull(context.getRealPath(""/index.html""));     }  This will produce the following error:      java.lang.NullPointerException             at org.springframework.mock.web.MockServletContext.getRealPath(MockServletContext.java:286)             at de.tts.bd.service.TemplateParametersTest.getParameters_weblogic(TemplateParametersTest.java:59)             ...  Unfortunately I have not found a way to use MockServletContext to test against this scenario. I have to resort to EasyMock to create a mock of ServletContext.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=21108","closed","status: declined,","spring-projects-issues","2009-11-27T06:16:28Z","2019-01-12T16:38:47Z"
"","11693","MappingJacksonJsonView should add headers for no-caching [SPR-7031]","**[André Pinheiro](https://jira.spring.io/secure/ViewProfile.jspa?name=aempinheiro)** opened **[SPR-7031](https://jira.spring.io/browse/SPR-7031?redirect=false)** and commented  This problem tends to be more serious on IE8, since the AJAX requests with the same URL are cached.  The MappingJacksonJsonView could have a boolean ""no-cache"" which if set to false does not add the headers to the response. I think when using AJAX the expected behaviour is not a cached response.  I will upload the created class since I don't know how to submit patches (btw can anyone point me to an how-to?).   ---  **Affects:** 3.0.1  **Attachments:** - [SRCMappingJacksonJsonView.java](https://jira.spring.io/secure/attachment/16334/SRCMappingJacksonJsonView.java) (_931 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f2062fb3a619e9d216723269c7a5ad5032e8237","closed","type: enhancement,","spring-projects-issues","2010-03-24T07:41:45Z","2012-06-19T03:43:22Z"
"","11564","Business exceptions wrapped in HessianClientInterceptor with Hessian 4.0 [SPR-6899]","**[André Pinheiro](https://jira.spring.io/secure/ViewProfile.jspa?name=aempinheiro)** opened **[SPR-6899](https://jira.spring.io/browse/SPR-6899?redirect=false)** and commented  The problem resides in the class HessianClientInterceptor, which HessianProxyFactoryBean extends. Everytime I throw a business exception (which is meaningfull to my system) I get in my client side a RemoteAccessException (totally meaningless...). In order to know if it was some bug or if it was part of the business logic, I have to ""unpack"" this exception... I am sure you will agree this is not pretty nor is it right.  The expected behaviour of such proxy is that the exceptions declared in my service interface (normally business exceptions or of value to my business) are in fact caught directly in my client, not that they are wrapped around by some other meaningless exception.  To solve this problem we had to create a class which extended HessianProxyFactoryBean and use it to create the bean. It would be nice if the invoke method instead of wrapping the exceptions would just throw them as it is expected... I think.    ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=85159  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cfbc5224e3c89aaed4243ac249618def82e6e3cc","closed","type: bug,","spring-projects-issues","2010-02-23T22:48:43Z","2012-06-19T03:43:11Z"
"","11857","Spring cannot load xml files from jars when wildcards used [SPR-7198]","**[Andruschuk Borislav](https://jira.spring.io/secure/ViewProfile.jspa?name=borislav.andruschuk)** opened **[SPR-7198](https://jira.spring.io/browse/SPR-7198?redirect=false)** and commented  I use Tomcat 6.0.18 as servlet container and Spring application context cannot be loaded from jar files in unpacked WAR, i.e. when I specified context config locations in web.xml as following Spring-xml files wont be loaded: \ \ApplicationServlet\ \ org.springframework.web.servlet.DispatcherServlet \ \ \contextConfigLocation\ \ WEB-INF/lib/**.jar!/**/ac-**.xml classpath*:**/ac-*.xml \ \ \0\ \  Spring load xml files which is only in WEB-INF/classes but miss files from WEB-INF/lib. I've investigated that problem is in org.springframework.web.context.support.ServletContextResourcePatternResolver. I've fix this problem in my own subclass of ResourcePatternResolver and checked this fix redefining standard resolver whith my own via overriden getResourcePatternResolver method in my own implementation of XmlWebApplicationContext. Please see attached file.   ---  **Affects:** 2.5.5  **Attachments:** - [ServletContextResourcePatternResolverImpl.java](https://jira.spring.io/secure/attachment/16550/ServletContextResourcePatternResolverImpl.java) (_4.83 kB_) - [web.xml-part](https://jira.spring.io/secure/attachment/16551/web.xml-part) (_363 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8ed98255f350c5217f897c930e4d5600a8ab17f","closed","type: enhancement,","spring-projects-issues","2010-05-12T22:56:24Z","2012-06-19T03:43:37Z"
"","11545","Provide ability to inherit @DirtiesContext specification in subclasses [SPR-6879]","**[Andruschuk Borislav](https://jira.spring.io/secure/ViewProfile.jspa?name=borislav.andruschuk)** opened **[SPR-6879](https://jira.spring.io/browse/SPR-6879?redirect=false)** and commented  I create one main test class which was a parent class for whole tests in y project but I noticed that there is no ability to set `@DirtiesContext` annotation to this parent class to close Spring context after each subclass execution (`@DirtiesContext` annotation missed `@Inherited` specification). Thus I need specify `@DirtiesContext` for each subclass.  Of course I can create my own TestExecutionListener and mark application context dirty in afterTestClass method but It would be great if `@DirtiesContext` specification can be inherited in subclasses.   ---  **Affects:** 3.0 GA","closed","type: bug,","spring-projects-issues","2010-02-20T01:18:24Z","2012-06-19T03:43:04Z"
"","11807","Caching of MessageProducers in CachingConnectionFactory not working with MQ [SPR-7148]","**[Andrew Woodford](https://jira.spring.io/secure/ViewProfile.jspa?name=woodforda)** opened **[SPR-7148](https://jira.spring.io/browse/SPR-7148?redirect=false)** and commented  The CachingConnectionFactory uses a HashMap to cache message producers.  The key to the map is the Destination.  Unfortunately when using MQ, the producers are cached but never retrieved, a new MesssageProducer is created and cached for each call.  This eventually results in MQ raising an exception when trying to create the MessageProducer (a session limit is hit after just 253 publishes).  The cache should use an explicit key (as the consumer cache does) or even Destination#toString().   ---  **Affects:** 3.0.1  **Attachments:** - [spring303NPEonDestinationCacheKey.png](https://jira.spring.io/secure/attachment/16879/spring303NPEonDestinationCacheKey.png) (_150.31 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f25a04c69c509b3623ffee750b2ffce066295bd2, https://github.com/spring-projects/spring-framework/commit/365737b5154acc1471a4d0d98c78f88ff0acfdd1","closed","type: bug,","spring-projects-issues","2010-04-28T18:13:49Z","2012-06-19T03:43:46Z"
"","11153","Typo ""@PathVariabe"" in MVC section of reference guide  [SPR-6487]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-6487](https://jira.spring.io/browse/SPR-6487?redirect=false)** and commented  Section 15.3.2.3 (""Supported handler method arguments and return types"") describes the ""`@PathVariabe`"" annotation, instead of ""`@PathVariable`"".   ---  **Affects:** 3.0 RC3","closed","type: bug,","spring-projects-issues","2009-12-01T08:43:55Z","2012-06-19T03:42:48Z"
"","10907","org.springframework.expression.ParseException loses position & Throwable information [SPR-6239]","**[Andrew Liles](https://jira.spring.io/secure/ViewProfile.jspa?name=andrew_liles)** opened **[SPR-6239](https://jira.spring.io/browse/SPR-6239?redirect=false)** and commented  The [ParseException class](https://src.springframework.org/svn/spring-framework/tags/spring-framework-3.0.0.RC1/org.springframework.expression/src/main/java/org/springframework/expression/ParseException.java) (has 3 constructors.  The second takes 'position' and 'cause' but does not pass them to the superclass.  The third constructor takes 'position' but does not pass them to the superclass.  The subclass SpelParseException is the main class that will emit parse exceptions and it calls one of the above-mentioned faulty constructors.  It is a trivial fix, the first case of  > `super(message);` > should be > `super(position, message, cause);`  and the second should be  > `super(position, message);`    ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a7f0d50643dd9ac19037227c9881317a0bcf782c","closed","in: core,","spring-projects-issues","2009-10-15T01:24:59Z","2012-06-19T03:42:52Z"
"","11174","Support DateTimeFormat annotation without Joda [SPR-6508]","**[Andrew Goudzwaard](https://jira.spring.io/secure/ViewProfile.jspa?name=zwerd328)** opened **[SPR-6508](https://jira.spring.io/browse/SPR-6508?redirect=false)** and commented  The recent blog post at http://blog.springsource.com/2009/11/17/spring-3-type-conversion-and-validation/ states the following about :  > ""The preceding minimal configuration causes Spring to automatically install default type converters that localize Number and Date fields, including full support for the popular Joda-time library if it is present on your classpath.""  It seems to me that date formatting should be automatic when using , regardless of whether or not Joda-time is on the classpath. However, FormattingConversionServiceFactoryBean does not seem to be doing this and I am not seeing automatic date formatting when I do not have Joda-time.  FormattingConversionServiceFactoryBean should automatically install the basic DateFormatter when Joda is not present. Additionally, `@DateTimeFormat` (or an equivalent) should be configured with DateFormatter.   ---  **Affects:** 3.0 RC3  **Reference URL:** http://blog.springsource.com/2009/11/17/spring-3-type-conversion-and-validation/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1d005e12afc014dd461a1cea19e118118b3a7045, https://github.com/spring-projects/spring-framework/commit/a26059f94a60257c2e0506ab70ef2a1364bd1d73  6 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-03T03:25:05Z","2019-01-11T15:17:16Z"
"","11099","BeanPropertyRowMapper should provide static newInstance methods [SPR-6433]","**[Andrew Goudzwaard](https://jira.spring.io/secure/ViewProfile.jspa?name=zwerd328)** opened **[SPR-6433](https://jira.spring.io/browse/SPR-6433?redirect=false)** and commented  In order to replace ParameterizedBeanPropertyRowMapper, the static newInstance() shortcut methods in that class should be copied to BeanPropertyRowMapper.   ---  **Affects:** 3.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a2f9ccde4369f7f9896705a119d2f8dfe8bb5e1","closed","type: enhancement,","spring-projects-issues","2009-11-24T02:25:30Z","2012-06-19T03:43:59Z"
"","10924","JdbcTemplate.queryForList returns Max Interger if number is too large [SPR-6256]","**[Andrew Gaun](https://jira.spring.io/secure/ViewProfile.jspa?name=andrewgaun)** opened **[SPR-6256](https://jira.spring.io/browse/SPR-6256?redirect=false)** and commented  I have a table that has a field ID which is an int(11). When using queryForList I realized that the mapping of ID was to an Integer Object. This seemed alarming because Integer is not large enough to fit an int(11). I decided to test what would happen if I select a row with an ID > Integer.MAX_VALUE (2^31 -1) and instead of getting an error or the mapping returning a Long Object (which would itself be an odd behavior if the result would switch between the two), I was still given a Integer Object. The value inside the Integer was 2147483647... which is Integer.MAX_VALUE. queryForList should prob map larger integer field to Long automatically or at the every least throw an error if it creates an Integer that is larger than MAX_VALUE   --- No further details from [SPR-6256](https://jira.spring.io/browse/SPR-6256?redirect=false)","closed","status: invalid,","spring-projects-issues","2009-10-21T06:53:32Z","2019-01-12T05:32:58Z"
"","11460","ResourceScriptSource uses platform default charset (getScriptAsString) [SPR-6794]","**[Andrew Fink](https://jira.spring.io/secure/ViewProfile.jspa?name=andreyrybin)** opened **[SPR-6794](https://jira.spring.io/browse/SPR-6794?redirect=false)** and commented  ResourceScriptSource uses platform default charset (see getScriptAsString). It is bad practice because script isn't java source file, which will be compiled to Unicode. Usually developer use Windows for development and linux&Co for production. So default charset is very different!  ResourceScriptSource should have some property for this or use UTF-8 - the best charset for resources.    ---  **Affects:** 3.0 GA","closed","in: core,","spring-projects-issues","2010-02-03T18:44:32Z","2012-06-19T03:42:59Z"
"","11255","onApplicationEvent called twice for ApplicationListener implemented in lang:bsh/lang:inline-script [SPR-6589]","**[Andrew Fink](https://jira.spring.io/secure/ViewProfile.jspa?name=andreyrybin)** opened **[SPR-6589](https://jira.spring.io/browse/SPR-6589?redirect=false)** and commented  1) somespring.xml:   \   2) MyServletContextListener.contextInitialized (called after org.springframework.web.context.ContextLoaderListener)    ...    final WebApplicationContext ctx = ContextLoader.getCurrentWebApplicationContext();         ctx.publishEvent(new WebAppEvent(this,  // called only once, i have checked it            event.getServletContext().getContextPath(),            event.getServletContext(),  ctx));  where public static class WebAppEvent extends ApplicationEvent { getters/setter }  3) log file contains 2 (two) records    19:34:10,281 INFO  [main           ] SpringAppEvent        ::====================================    19:34:10,281 INFO  [main           ] SpringAppEvent        ::net.sf.apr.web.ShutdownListener$WebAppEvent[src=net.sf.apr.web.ShutdownListener@b52a28, contextPath=/nsa, servletContext=org.apache.catalina.core.ApplicationContextFacade@1978933, spring=nsa:Apr Core WebApps: startup date [Sat Dec 19 19:34:04 YEKT 2009]; root of context hierarchy]    19:34:10,281 INFO  [main           ] SpringAppEvent        ::====================================    19:34:10,281 INFO  [main           ] SpringAppEvent        ::====================================    19:34:10,281 INFO  [main           ] SpringAppEvent        ::net.sf.apr.web.ShutdownListener$WebAppEvent[src=net.sf.apr.web.ShutdownListener@b52a28, contextPath=/nsa, servletContext=org.apache.catalina.core.ApplicationContextFacade@1978933, spring=nsa:Apr Core WebApps: startup date [Sat Dec 19 19:34:04 YEKT 2009]; root of context hierarchy]    19:34:10,281 INFO  [main           ] SpringAppEvent        ::====================================  4) if I set scope to scope=""prototype"":      then all works as expected: beanshell's onApplicationEvent called only once (only one my record in log) BUT spring emits warning:  19:13:50,390 WARN  [main           ] nContextAwareProcessor::Inner bean 'scriptedObject.testSpringAppEventsListener' implements ApplicationListener interface but is not reachable for event multicasting by its containing ApplicationContext because it does not have singleton scope. Only top-level listener beans are allowed to be of non-singleton scope.    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8af7f279428e6b07d7251e67b5c68e92e4500481","closed","in: core,","spring-projects-issues","2009-12-19T02:37:46Z","2012-06-19T03:43:11Z"
"","10883","REST feature: select on view based solely on content negotiation, not on resolving a view name [SPR-6215]","**[Andrew Ebaugh](https://jira.spring.io/secure/ViewProfile.jspa?name=ande)** opened **[SPR-6215](https://jira.spring.io/browse/SPR-6215?redirect=false)** and commented  We are successfully using the `@RequestMapping` and related annotations in a new REST service. We want to be able to return a XML or JSON response, based on what the client indicates in their Accept header.  However, in current web work, the view is based on resolving a view name. This doesn't have much meaning in the REST use case; we will return an object from a `@Controller`, and we want to be able to select a MarshallingView that supports an acceptable representation. Using ContentNegotiatingViewResolver, the `@Controller` returns a view name, which then has to be resolved, and will dictate what MarshallingView is selected. In other words, the `@Controller` has to decide on a xmlMarshallingView vs. a jsonMarshallingView, which defeats the purpose of the content negotiation.  I've adapted the ContentNegotiatingViewResolver to be able to take a list of views directly. When deciding on a MarshallingView to return, it goes through the list of registered views, and performs the negotiation on View.getContentType(...) vs. the media types in the HttpServletRequest. I'm implemented it as a RequestToViewNameTranslator, which returns a view bean name, and is used in conjunction with the BeanNameViewResolver to pull the right MarshallingView.  I will attach the code, and a configuration example. Using this with XStream annotations has worked pretty well for us.    ---  **Affects:** 3.0 RC1  **Attachments:** - [ContentNegotiatingViewSelector.java](https://jira.spring.io/secure/attachment/15791/ContentNegotiatingViewSelector.java) (_12.84 kB_) - [sample-servlet.xml](https://jira.spring.io/secure/attachment/15792/sample-servlet.xml) (_2.95 kB_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-09T11:48:01Z","2012-11-02T05:43:46Z"
"","10882","Using @ResponseBody throws HttpMediaTypeNotAcceptableException when it supports writing an acceptable MediaType [SPR-6214]","**[Andrew Ebaugh](https://jira.spring.io/secure/ViewProfile.jspa?name=ande)** opened **[SPR-6214](https://jira.spring.io/browse/SPR-6214?redirect=false)** and commented  AnnotationMethodHandlerAdapter will throw a HttpMediaTypeNotAcceptableException in cases where the registered message converts should be able to support an acceptable representation.  It looks like the problem is in the following method: AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.handleResponseBody(...) The inner-most part of the loop is only successful on this condition: if (supportedMediaType.includes(acceptedMediaType)) {  If the acceptedMediaType is a wildcard, the condition fails. It seems it should rather be the revers: if (acceptedMediaType.includes(supportedMediaType)) {  Then the fact that acceptedMediaType is a wildcard will make it potentially match what is supported.  The impact is that most client use a wildcard when Accept header is not explicitly set, and this results in a failure.  Will attach test.  ---  **Affects:** 3.0 RC1  **Attachments:** - [ResponseBodyExceptionTest.java](https://jira.spring.io/secure/attachment/15790/ResponseBodyExceptionTest.java) (_4.34 kB_)  **Issue Links:** - #11352 `@ResponseBody` throws HttpMediaTypeNotAcceptableException if client accepts ""*/*"" - #11635 AbstractHttpMessageConverter canWrite logic the wrong way round??  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/53100357000e46c388919baf6e1e2c0e9954454f","closed","type: bug,","spring-projects-issues","2009-10-09T11:31:18Z","2019-01-13T07:57:58Z"
"","11534","The MANIFESTs are importing packages from Spring distribution using [3.0.0, 3.0.1) version range [SPR-6868]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-6868](https://jira.spring.io/browse/SPR-6868?redirect=false)** and commented  Snippet from org.springframework.core MANIFEST: Import-Package: ... org.springframework.asm;version=""[3.0.0, 3.0.1)""  Haven't checked all the bundles, but at least core and context have this issue.   ---  **Affects:** 3.0.1  2 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-02-18T18:14:05Z","2012-06-19T03:43:53Z"
"","11450","MBeanExporter attempts to instantiate a bean marked as abstract [SPR-6784]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-6784](https://jira.spring.io/browse/SPR-6784?redirect=false)** and commented  Config:  \  \  \  \ \ \ \ \  \ \ \ \ \ \  Code: `@ManagedResource` (description = ""The cache which is created on demand."") public class Cache implements SelfNaming {  private int capacity; private String name;  public Cache(String name, int capacity) { this.name = name; this.capacity = capacity; }  `@ManagedAttribute` (description = ""The capacity of the cache."") public int getCapacity() { return capacity; }  `@Override` public ObjectName getObjectName() throws MalformedObjectNameException { return new ObjectName(""ms.management:type=Cache,name=""+name); }  }  Stack Trace: Caused by: org.springframework.beans.factory.BeanIsAbstractException: Error creating bean with name 'parentCache': Bean definition is abstract at org.springframework.beans.factory.support.AbstractBeanFactory.checkMergedBeanDefinition(AbstractBeanFactory.:1155) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.:274) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.:189) at org.springframework.jmx.export.MBeanExporter.autodetect(MBeanExporter.:880) at org.springframework.jmx.export.MBeanExporter.autodetectBeans(MBeanExporter.:842) at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.:521) at org.springframework.jmx.export.MBeanExporter.afterPropertiesSet(MBeanExporter.:413) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.:1460) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.:1398) ... 13 more  Scenario tested with Spring 2.5.6 and in there abstract beans are skipped.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e3cdabfaac6e1b2fca9b3da1715ebe3142492196, https://github.com/spring-projects/spring-framework/commit/103c1aa82f0c779ec29ca173a24f65863a806b96","closed","in: core,","spring-projects-issues","2010-01-31T21:52:01Z","2012-06-19T03:42:47Z"
"","11290","AbstractApplicationEventMulticaster.removeApplicationListener does not consider retrieverCache [SPR-6624]","**[Andreas Thaler](https://jira.spring.io/secure/ViewProfile.jspa?name=a-thaler)** opened **[SPR-6624](https://jira.spring.io/browse/SPR-6624?redirect=false)** and commented  At integration tests I want to register and unregister an ApplicationListener dynamically at runtime. Therefore I have used the add/removeApplicationListener method of AbstractApplicationEventMulticaster.  Since 3.0 GA there is a new retrieverCache which caches retrievers per event type and with that the listeners. Unfortunately the removal of a listener does not clean the corresponding cache entry, so that the old listener still get called once the cache entry was created. Furthermore a new listener will not be added to the cache.   ---  **Affects:** 3.0 GA  **Attachments:** - [ReplaceApplicationListenerTest.java](https://jira.spring.io/secure/attachment/16050/ReplaceApplicationListenerTest.java) (_1.87 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5d4ffc166cf1bf2f1b9ce97d09761b02878d119","closed","in: core,","spring-projects-issues","2009-12-29T03:03:40Z","2012-06-19T03:42:59Z"
"","11559","exotic MIME-Type leads to 500 Internal Server Error [SPR-6894]","**[Andreas Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=andreas_schneider)** opened **[SPR-6894](https://jira.spring.io/browse/SPR-6894?redirect=false)** and commented  Hello,  for an academic investigation I compare Java Frameworks for RESTful Web Services, e.g. Spring MVC.  The configuration file contains: \ \ \ \ \ \  To test content negotiation I do every method with an exotic MIME-Type (audio/x-liveaudio). So I filled the header Accept with that type. For the methods GET, HEAD and DELETE I receive 500 Internal Server Error. But I expected 406 Not Acceptable for GET/HEAD and 200 OK for DELETE.  With best regards Andreas Schneider  ---  **Affects:** 3.0 GA  **Issue Links:** - #11133 Allow ContentNegotiatingViewResolver to be strict ant return a 406 if no view found (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2010-02-22T23:20:23Z","2019-01-11T17:03:53Z"
"","11353","Reference docs, some sample strings unclosed [SPR-6687]","**[Andreas Köhler](https://jira.spring.io/secure/ViewProfile.jspa?name=andi5)** opened **[SPR-6687](https://jira.spring.io/browse/SPR-6687?redirect=false)** and commented  See http://static.springsource.org/spring/docs/3.0.x/reference/html/resources.html  Resource template = ctx.getResource(""some/resource/path/myTemplate.txt); and a few others.  There are "" signs missing. Probably trivial to fix :-)   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f7952fccc8257319bca85907d4cc54aabcfa4e39","closed","in: core,","spring-projects-issues","2010-01-13T08:00:12Z","2012-06-19T03:43:17Z"
"","11145","TaskExecutor with Session Scoped Bean [SPR-6479]","**[Andreas Höhmann](https://jira.spring.io/secure/ViewProfile.jspa?name=ahoehma)** opened **[SPR-6479](https://jira.spring.io/browse/SPR-6479?redirect=false)** and commented  Hello,  Wir haben in unserem Projekt den Effekt, dass im TaskExecutor ausgeführte Runnables die auf Session-Scoped Beans zugreifen ""merkwürdige"" Effekte im Jetty Umfeld geschehen. Alles in einem Satz erklärt ;)  Die Effekte sind kritisch da unterschiedliche User-Sessions vermischt werden. Wir vermuten dass es durch die wiederverwendeten Request-Objekte von jetty dazu kommt. Spring holt sich die Session Informationen aus den ThreadLocal Session-Request-Attributen. In unserem Workaround kopieren wir den Request nochmal in den ThreadLocal bevor das Runnable gestartet wird.  Ist jetzt die Frage ob es einen ""allg."" Weg gibt?  Grüße aus Leipzig Andreas   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=271352#post271352","closed","in: core,","spring-projects-issues","2009-11-30T20:38:03Z","2019-01-12T16:38:44Z"
"","11066","CGLIB version should be aligned in Manifest to allow usage of 2.2.0 in OSGI [SPR-6400]","**[Andreas Hartmann-Schneevoigt](https://jira.spring.io/secure/ViewProfile.jspa?name=ahs)** opened **[SPR-6400](https://jira.spring.io/browse/SPR-6400?redirect=false)** and commented  Manifest Entry in Spring AOP Module looks like version=""[2.1.3, 2.2.0)"". So 2.2.0 is exlcusive defined :-( and prevents it from usage. The Problem is, that Hibernate 3.3.2.GA depends exclusively on CGLIB 2.2.0.   ---  **Affects:** 3.0 RC2  **Reference URL:** http://forum.springsource.org/showthread.php?p=270435#post270435  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/602118f1a34ed2d94372c4050347bc14407744e5","closed","in: core,","spring-projects-issues","2009-11-20T02:40:57Z","2012-06-19T03:42:44Z"
"","11601","Typo in section 10.8 .../docs/3.0.x/... [SPR-6936]","**[Andi Rustandi Djunaedi](https://jira.spring.io/secure/ViewProfile.jspa?name=andird)** opened **[SPR-6936](https://jira.spring.io/browse/SPR-6936?redirect=false)** and commented  Typo in section 10.8 in http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html  ""...These adapters iare discussed in the following sections."" ^^^^   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3e98b26b772eff6d71f5211907f8c71ab2486326","closed","type: task,","spring-projects-issues","2010-03-03T20:02:55Z","2012-06-19T03:42:45Z"
"","11458","Support setting and getting static fields in ReflectionTestUtils [SPR-6792]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-6792](https://jira.spring.io/browse/SPR-6792?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/063ef240c185fe6ba2ed39ef2fc6767c7a8dd900  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-02-03T02:55:56Z","2015-05-26T01:15:21Z"
"","11180","Backward compatibility issue in class org.springframework.beans.factory.config.PropertyPlaceholderConfigurer [SPR-6514]","**[Aleš Najmann](https://jira.spring.io/secure/ViewProfile.jspa?name=littleli)** opened **[SPR-6514](https://jira.spring.io/browse/SPR-6514?redirect=false)** and commented  There was class org.springframework.beans.factory.config.PropertyPlaceholderConfigurer in Spring 3.0 M4 with method  ```java        /**         * Parse the given String value recursively, to be able to resolve         * nested placeholders (when resolved property values in turn contain         * placeholders again).         * @param strVal the String value to parse         * @param props the Properties to resolve placeholders against         * @param visitedPlaceholders the placeholders that have already been visited         * during the current resolution attempt (used to detect circular references         * between placeholders). Only non-null if we're parsing a nested placeholder.         * @throws BeanDefinitionStoreException if invalid values are encountered         * @see #resolvePlaceholder(String, java.util.Properties, int)         */        protected String parseStringValue(String strVal, Properties props, Set visitedPlaceholders)            throws BeanDefinitionStoreException {...} ```  class is still there, but was refactored quite a lot since M4 and above method with other methods were removed. But in more specific environments, like in Gigaspace in our case, there is problem with instanciation of the container because it relies on the method.  With no known workaround for it it's show stopper for deployment project on Gigaspace platform. It hits all releases since M4. (...And I welcome any ideas.)  ---  **Affects:** 3.0 RC1, 3.0 RC2, 3.0 RC3  **Issue Links:** - #10981 parseStringValue gone from PropertyPlaceholderConfigurer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad29a2376dcd677131e7188fdbde9c8da9ae1133","closed","in: core,","spring-projects-issues","2009-12-03T22:03:26Z","2019-01-11T15:16:19Z"
"","11148","@RequestMapping handled incorrectly when value contains ""."" (dot) character [SPR-6482]","**[Aleš Najmann](https://jira.spring.io/secure/ViewProfile.jspa?name=littleli)** opened **[SPR-6482](https://jira.spring.io/browse/SPR-6482?redirect=false)** and commented  At the moment in my code exist method with such signature:  ```java @RequestMapping(value = ""/projects/{filter}/{order}-{direction}"", method = RequestMethod.GET) public String filteredProjectListing(@PathVariable(""filter"") String filter, @PathVariable(""order"") String order,             @PathVariable(""direction"") String direction, ModelMap model) {  ... } ```  order is String variable containing ognl-like expresssion ie. ""raging.result"" (which I later use for BeanComparator) but this mapping is in version RC3 is not found, which is different behaviour from RC2 where there is no such problem.  Log message with example of given fault result is:  ``` 2009-12-01 16:38:02,459 WARN [org.springframework.web.servlet.PageNotFound] -  ```  There is no problem with handling path which doesn't contain more '.' (dot) characters, so this can probably help you with analysis of the problem.  ---  **Affects:** 3.0 RC3  **Attachments:** - [UriTemplateServletAnnotationControllerTests.java.diff](https://jira.spring.io/secure/attachment/15985/UriTemplateServletAnnotationControllerTests.java.diff) (_1.41 kB_)  **Issue Links:** - #11226 Requests URIs containing . cannot be mapped correctly using `@RequestMapping` in RC3  (_**""is duplicated by""**_) - #11165 `@MVC` URI Template Variable Regression - Matching values containing . (dot) (_**""is duplicated by""**_) - #10947 PathVariable resolution does not work properly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/976f920db2773864e657ff5e5f6c0cf71f27665a  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2009-12-01T02:15:27Z","2019-01-13T07:56:48Z"
"","11273","Migrate logger from commons-logging to slf4j (remove commons-logging dependency)  [SPR-6607]","**[Alexandre Navarro](https://jira.spring.io/secure/ViewProfile.jspa?name=schumnana)** opened **[SPR-6607](https://jira.spring.io/browse/SPR-6607?redirect=false)** and commented  Migrate logger from commons-logging to slf4j  (remove commons-logging dependency) because commons-logging has classloading problems  ---  **Affects:** 3.0 GA  **Issue Links:** - #19081 Revisit Commons Logging vs java.util.logging vs SLF4J vs Log4j 2  6 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-23T02:30:27Z","2019-01-11T16:12:38Z"
"","11269","Possibility to have a applicationContext in a yaml file instead of xml file. [SPR-6603]","**[Alexandre Navarro](https://jira.spring.io/secure/ViewProfile.jspa?name=schumnana)** opened **[SPR-6603](https://jira.spring.io/browse/SPR-6603?redirect=false)** and commented  Possibility to have a applicationContext in a yaml file instead of xml file. Even though I'm not allergic with xml, it can be cool to describe your application context in yaml file instead of xml file because yaml is more human readeable and concise than xml. Maven 3.0 introduces the same feature (named polyglot) for configuration to add the possibility to have a pom file in yaml, groovy or xml.   --- No further details from [SPR-6603](https://jira.spring.io/browse/SPR-6603?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-12-22T19:56:16Z","2018-04-03T13:31:51Z"
"","11220","Lack of Reference Documentation to create a  Desktop Application with Spring annotation like @Component (or @Named) and @Inject [SPR-6554]","**[Alexandre Navarro](https://jira.spring.io/secure/ViewProfile.jspa?name=schumnana)** opened **[SPR-6554](https://jira.spring.io/browse/SPR-6554?redirect=false)** and commented  I think there is a lack of Reference Documentation to create a Desktop Application with Spring annotation like `@Component` (or `@Named`) and `@Inject`.  In my point of view, Spring is used a lot on server side but it is not very used on client side even though the framework has a lot of pros on a Desktop application. For instance, on client side, Spring is useful : - to use Spring proxy client like RMI, WS, EJB ... - to inject and mock your Business components - to test your GUI - to separate your Business components from your controller  During a long time, I tried to use elegantly IoC (Spring) on Desktop application without using an evil ServiceLocator singleton (containing a static applicationContext).  I tried to use for instance `@Configurable` and it is very elegant but there are poor performance and high memory usage problems (see http://jira.springframework.org/browse/SPR-6252). Sot the solution is not usable for production.  I made an Swing GUI sample with the association of Swing Java Builder and Spring using `@Component` (or `@Named`) and `@Inject` (the sample is on http://code.google.com/p/javabuilders/issues/detail?id=83). The result is very elegant and the association of 2 frameworks is excellent. It is not the case generally with Swing and Spring because to inject a bean A into class B in Spring, the class B must be instantiated by Spring which is generally not possible (or easily possible) in Swing (the natural Swing Java Builder behavior resolves this point).  If you are interested, I can made a sample (with Spring and Swing Java Builder) like a petclinic client (with webservice proxy for instance) and do some documentation which will be accessible on Reference Documentation.  Contact me if you are interested.   ---  **Affects:** 3.0 RC3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-12-12T10:04:08Z","2018-12-26T16:39:37Z"
"","11219","AnnotationConfigApplicationContext does not propose an argument on the constructor to enable lazy init [SPR-6553]","**[Alexandre Navarro](https://jira.spring.io/secure/ViewProfile.jspa?name=schumnana)** opened **[SPR-6553](https://jira.spring.io/browse/SPR-6553?redirect=false)** and commented  AnnotationConfigApplicationContext does not propose an argument on the constructor to enable lazy init   ---  **Affects:** 3.0 RC3","closed","type: enhancement,","spring-projects-issues","2009-12-12T09:15:22Z","2018-12-27T11:06:23Z"
"","10920","Improve performance and memory usage when using @Configurable with a agent [SPR-6252]","**[Alexandre Navarro](https://jira.spring.io/secure/ViewProfile.jspa?name=schumnana)** opened **[SPR-6252](https://jira.spring.io/browse/SPR-6252?redirect=false)** and commented  Hi,  I will expose my problem.  I'm writing Swing applications and I like using Spring in my client (not very common in a Swing application) because it is useful when you call some Remote Services (RMI, WS) by using the different Spring Proxy Clients or if you want to seperate your Business logic and GUI logic and so easy to test your gui.  The problem using Spring in Swing application is when you're making a Swing application, you need to inject in your Controller/View (JPanel for instance) some beans Spring. But your JPanel is not instanciated by Spring (and you can't it). To resolve this problem, I found 2 solutions - create a kind of ServiceLocator (where the applicationContext is instanciated). When you want to inject a bean Spring, you must ServiceLocator.getInstance().getYourSpringBean(). It is very old-fashioned and has all problems related to static singleton (not easy too test, problem in Netbeans RCP like Tomcat for static stuffs ...). - use `@Configurable` on your panel (not instanciated by Spring) to inject with `@Autowired` in some spring bean. It very clean and elegant on my point of view.  I made a small application with `@Configurable` and it works but it reveals some performance and memory usage problems. When you use a GUI with a ServiceLocator, the startup of this application is something like 2 s (1s for Swing and 2s for spring context in lazy mode) and the memory usage is 10 mo. When you use the same GUI with `@Configurable` (with the spring agent) the startup of the application is something like 10 s and the memory usage is 50-60 mo.  I attached a very small application example to show the problem. With this sample, when you use a GUI with a ServiceLocator, the startup of this application is something like 900 ms (250 ms for Swing and 650 ms for spring context in lazy mode) and the memory usage is 1.2 mo. When you use the same GUI with `@Configurable` (with the spring agent) the startup of the application is something like 3.6 s (1350 ms for Swing and 2280 ms for spring context in lazy mode) and the memory usage is 8 mo.  So the performance and memory usage is degraded by 5.  I tested with Spring 2.5.6 and with 3.0RC1 and the behaviour is the same.  Can you explain this behaviour? Is it normal? Maybe I have misconfigured my applicationContext. Can I specify the package where `@Configurable` classes are located to improve performance?  Honnestly, with these problems, `@Configurable` is just unuseable for production GUI application but only for unit tests.  Alexandre    ---  **Affects:** 2.5.6, 3.0 RC1  **Attachments:** - [spring-configurable.zip](https://jira.spring.io/secure/attachment/15823/spring-configurable.zip) (_9.55 kB_)  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-20T02:15:54Z","2019-01-13T07:57:53Z"
"","11147","Spring fails to load ressources via Java Network Launching Protocol (WebStart) since Java6 [SPR-6481]","**[Alexander Schäl](https://jira.spring.io/secure/ViewProfile.jspa?name=el_schalo)** opened **[SPR-6481](https://jira.spring.io/browse/SPR-6481?redirect=false)** and commented  When started via Java6 WebStart, the Spring PathMatchingResourcePatternResolver tries to handle the URLConnection (wich is in a WebStart context actually an JNLPCachedJarURLConnection) just like a normal file URL. The PathMatchingResourcePatternResolver checks the resources only for a JarURLConnection, any other is handled as a path on the local file system.  So the resource request for ""http://service.ACME.com:42/webstart/ressources.jar"" (which would be propperly handled by the com.sun.jnlp.JNLPClassLoader) is crippled to ""http:\service.ACME.com:42\webstart\ressources.jar"", which of course can't be handled by any class loader and logically ends up in an FileNotFoundException due to the destroyed URL syntax.  A solution COULD be to extend the URLConnection type checking at the method doFindPathMatchingJarResources of org.springframework.core.io.support.PathMatchingResourcePatternResolver from JarURLConnection to an JNLPCachedJarURLConnection in order to treat this connection not as a ""file:""  Java WebStart 5 used to cache all resources (especially the JAR files listed as resources in the JNLP file) on the local file system and the PathMatchingResourcePatternResolver could access these JAR files using a local path like ""file://path/on/local/system"". Java WebStart 6 has got another (obfuscated) cache structure - there are no longer any plain JAR files. That's why the JNLPClassLoader returns JNLPCachedJarURLConnection for any JAR resource instead of JarURLConnection like WebStart 5 did.  ---  **Affects:** 2.5.4  **Issue Links:** - #11146 Spring fails to load ressources via Java Network Launching Protocol (WebStart) since Java6 (_**""duplicates""**_)  2 votes, 2 watchers","closed","in: core,","spring-projects-issues","2009-11-30T23:27:10Z","2019-01-12T16:49:56Z"
"","11146","Spring fails to load ressources via Java Network Launching Protocol (WebStart) since Java6 [SPR-6480]","**[Alexander Schäl](https://jira.spring.io/secure/ViewProfile.jspa?name=el_schalo)** opened **[SPR-6480](https://jira.spring.io/browse/SPR-6480?redirect=false)** and commented  When started via Java6 WebStart, the Spring PathMatchingResourcePatternResolver tries to handle the URLConnection (wich is in a WebStart context actually an JNLPCachedJarURLConnection) just like a normal file URL. The PathMatchingResourcePatternResolver checks the resources only for a JarURLConnection, any other is handled as a path on the local file system.  So the resource request for ""http://service.ACME.com:42/webstart/ressources.jar"" (which would be propperly handled by the com.sun.jnlp.JNLPClassLoader) is crippled to ""http:\service.ACME.com:42\webstart\ressources.jar"", which of course can't be handled by any class loader and logically ends up in an FileNotFoundException due to the destroyed URL syntax.  A solution COULD be to extend the URLConnection type checking at the method doFindPathMatchingJarResources of org.springframework.core.io.support.PathMatchingResourcePatternResolver from JarURLConnection to an JNLPCachedJarURLConnection in order to treat this connection not as a ""file:""  Java WebStart 5 used to cache all resources (especially the JAR files listed as resources in the JNLP file) on the local file system and the PathMatchingResourcePatternResolver could access these JAR files using a local path like ""file://path/on/local/system"". Java WebStart 6 has got another (obfuscated) cache structure - there are no longer any plain JAR files. That's why the JNLPClassLoader returns JNLPCachedJarURLConnection for any JAR resource instead of JarURLConnection like WebStart 5 did.  ---  **Affects:** 2.5.6  **Issue Links:** - #11147 Spring fails to load ressources via Java Network Launching Protocol (WebStart) since Java6 (_**""is duplicated by""**_)  4 votes, 4 watchers","closed","in: core,","spring-projects-issues","2009-11-30T23:24:10Z","2019-01-11T15:37:03Z"
"","11858","AbstractJdbcInsert failes with SqlLobValue type parameters [SPR-7199]","**[Alexander Nesterov](https://jira.spring.io/secure/ViewProfile.jspa?name=shurik)** opened **[SPR-7199](https://jira.spring.io/browse/SPR-7199?redirect=false)** and commented  SimpleJdbcInsertOperations.executeAndReturnKey() call fails if there is any SqlLobValue parameter passed as a value to SQL request.  Seems that the problem is in AbstractJdbcInsert.setParameterValues() method, which incorrectly parses parameter types, setting them all to TYPE_UNKNOWN even if types are properly specified.  To corrent the problem the following code in setParameterValues() should be modifed:  if (columnTypes == null || colIndex < columnTypes.length) { StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value); }  ->  if (columnTypes == null || colIndex > columnTypes.length) { StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value); }   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d22a6f9da984202335d12fb150934dffce80c1e6","closed","in: core,","spring-projects-issues","2010-05-12T23:58:35Z","2012-06-19T03:44:01Z"
"","11511","ResourceBundleMessageSource doesn't allow to update messages because it caches the key [SPR-6845]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-6845](https://jira.spring.io/browse/SPR-6845?redirect=false)** and commented  We are trying to migrate some of our classes to the use of spring, we are now facing i18n messages.  Since i18n is a very key part of our architecture we need to modify messages at runtime without class reloading but since ResourceBundleMessageSource always caches the result we are unable to update a message.  So we have created a subclass that allows us to overcome this problem but still uses a cache for performance. The trick is to cache the MessageFormat result instead of the key, this way, even if something less is cached, the possibility to update the value for a key remains open (while still caching the corresponding MessageFormat).  We find this approach general enough to be used inside spring so we propose our code for evaluation:  public class OurMessageSource extends ResourceBundleMessageSource {          private final Map cachedBundleMessageFormats = new HashMap();              /**          * Return a MessageFormat for the given bundle and code,          * fetching already generated MessageFormats from the cache.          * @param bundle the ResourceBundle to work on          * @param code the message code to retrieve          * @param locale the Locale to use to build the MessageFormat          * @return the resulting MessageFormat, or null if no message          * defined for the given code          * @throws MissingResourceException if thrown by the ResourceBundle          */  `@Override` protected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale) throws MissingResourceException {                  synchronized (this.cachedBundleMessageFormats) {                         String msg = getStringOrNull(bundle, code);                         if (msg != null) {         Map msgMap = (Map) this.cachedBundleMessageFormats.get(bundle);         Map localeMap = null;         if (msgMap != null) {           localeMap = (Map) msgMap.get(msg);           if (localeMap != null) {             MessageFormat result = (MessageFormat) localeMap.get(locale);             if (result != null) {               return result;             }           }         }                                 if (msgMap == null) {                                         msgMap = new HashMap();                                         this.cachedBundleMessageFormats.put(bundle, msgMap);                                 }                                 if (localeMap == null) {                                         localeMap = new HashMap();                                         msgMap.put(msg, localeMap);                                 }                                 MessageFormat result = createMessageFormat(msg, locale);                                 localeMap.put(locale, result);                                 return result;                         }                              return null;                 }         }              private String getStringOrNull(ResourceBundle bundle, String key) {                 try {                         return bundle.getString(key);                 }                 catch (MissingResourceException ex) {                         // Assume key not found                         // -> do NOT throw the exception to allow for checking parent message source.                         return null;                 }         }  }   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-02-15T03:44:51Z","2018-12-26T12:34:33Z"
"","11266","java.lang.Object should count as a simple property, at least from the autowiring perspective [SPR-6600]","**[Alex Wei](https://jira.spring.io/secure/ViewProfile.jspa?name=ozgwei)** opened **[SPR-6600](https://jira.spring.io/browse/SPR-6600?redirect=false)** and commented  Spring would try to autowire a property if the property type is java.lang.Object, and throw the UnsatisfiedDependencyException because every single bean is a candidate for autowiring. java.lang.Object probably should be treated as a simple property type like String, URI, URL and enum etc, so that Spring won't try to autowire a property of type java.lang.Object.   ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/572abbcff9b7da07c08a7491c804a9654a1cb854","closed","type: enhancement,","spring-projects-issues","2009-12-22T10:37:47Z","2012-06-19T03:42:47Z"
"","11190","Doc:  incompatible to override strategy of handler mappings [SPR-6524]","**[Alex Rau](https://jira.spring.io/secure/ViewProfile.jspa?name=rauar)** opened **[SPR-6524](https://jira.spring.io/browse/SPR-6524?redirect=false)** and commented  the  feature breaks or at least does not conform to the implemented strategy in MVC that there is an implicit DefaultAnnotationHandlerMapping (D1) which can be replaced with custom parameterized versions (D2) of handler mappings.  As soon as someone wants to use the above short-cut """" there will be a DefaultAnnotationHandlerMapping (D3) which a) cannot be replaced with a custom version (D2) anymore and b) replaces the implicit one (D1). Even worse - developers declaring (D3) assuming they would override the implicit one (D1) will end up with two instances of DefaultAnnotationHandlerMapping (D2 and D3) resulting in duplicate registration of annotated controllers (component scan) and custom parameterization which will be without any effect as D2 seems to win over D3.  I think at least a dedicated property for the above declaration should be defined which allows passing in a custom DefaultAnnotationHandlerMapping along with the declaration (+ some clarifying documentation about this wouldn't be too bad).  Steps to reproduce:  1) declare in a web application context (e.g. using Spring's DispatcherServlet):              \               2) declare a java controller using `@Controller`  3) start container with logging enabled and check logs for duplicate registration of the controller  ---  **Affects:** 3.0 RC2, 3.0 RC3  **Reference URL:** http://forum.springsource.org/showthread.php?p=272494  **Issue Links:** - #11070 Document new mvc namespace (_**""is superseded by""**_)","closed","in: web,","spring-projects-issues","2009-12-05T07:51:02Z","2019-01-11T15:15:11Z"
"","10906","Verify transaction status in HibernateTransactionManager.doCommit [SPR-6238]","**[Alex Peters](https://jira.spring.io/secure/ViewProfile.jspa?name=alpe)** opened **[SPR-6238](https://jira.spring.io/browse/SPR-6238?redirect=false)** and commented  Would be great to have a transaction status check in the doCommit method:  ... txObject.getSessionHolder().getTransaction().commit(); ... + if (txObject.getSessionHolder().getTransaction().wasRolledBack()) {  + throw new TransactionSystemException(  +         ""The Transaction was rolled back within hibernate transaction postprocessing!"");  + }   ..  We have some hibernate post events to create audit versions of our entities. On any failure the transaction can be marked as rolled back but there is no way to throw an exception or notify the business code. JDBCTransaction.notifyLocalSynchsBeforeTransactionCompletion is catching them all.    ---  **Affects:** 2.5.6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-14T03:11:48Z","2012-06-19T09:36:30Z"
"","11483","Portlet MVC   -  doesn't inject conversion service and validator in WebDataBinder [SPR-6817]","**[Alex Landini](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.landini)** opened **[SPR-6817](https://jira.spring.io/browse/SPR-6817?redirect=false)** and commented  I have a Spring MVC portlet with one spring configuration file:  \  \                                                                                                            	     		     			messages     			com.cedac.liferay.calcoli.portlets.ammortamenti.messages     		     											     	  \  and a global spring mvc configuration file:  \  \                	                      \  both of them are correctly loaded but when I debug the above method in the controller, conversion service and validator are null.  `@InitBinder` public void initBinder(WebDataBinder binder) {      }  I have to autowire the beans and set them into the binder:          @Autowired     private AmmortamentiService ammortamentiService;               @Autowired     private Validator validator;          @InitBinder         public void initBinder(WebDataBinder binder) {		     	     	         //Conversion Service         binder.setConversionService(conversionService);                          //Validator         binder.setValidator(ammortamentoValidator);                                 }  ---  **Affects:** 3.0 GA  **Issue Links:** - #16325 Update documentation with example of single ApplicationContext per webapp  15 votes, 12 watchers","closed","has: votes-jira,","spring-projects-issues","2010-02-08T21:42:27Z","2019-01-11T16:47:23Z"
"","11870","Extend HttpMessage interface to expose requestURL [SPR-7211]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-7211](https://jira.spring.io/browse/SPR-7211?redirect=false)** and commented  In many cases it is advantageous to know where the Http Request was made (debugging, tracking, etc). When using RestTemplate and coding against an HttpMessage interface, and its sub-interfaces, it would be nice to know what the request URL was.  Uses would include: * Debugging * Monitoring * Caching    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ae56f3a36122e28c3214c4662bbbe71f69362752","closed","type: enhancement,","spring-projects-issues","2010-05-17T11:48:38Z","2012-06-19T03:42:53Z"
"","11527","enable overwriting of createHttpInputMessage and createHttpOutputMessage in AnnotationMethodHandlerAdapter [SPR-6861]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-6861](https://jira.spring.io/browse/SPR-6861?redirect=false)** and commented  It would be beneficial to have an ability to provide a custom implementation of a HttpInputMessage and HttpOutputMessage to AnnotationMethodHandlerAdapter (Similar to #8978).  Currently it is being hard-coded to be instantiated as ServletServerHttpRequest and ServletServerHttpResponse, which does not allow one to implement a custom handling of translating the request payload and headers. (A particular case is to implement format representation handling override via reading the _format_ query parameter instead of relying on the _Accept_ header) A proposed improvement would be to move the creation of a messages into an overwritable method which would create an appropriate implementation. This would allow one to extend AnnotationMethodHandlerAdapter and supply its own implementation of the messages.  Attached are the diff patches for your consideration.  ---  **Affects:** 3.0.1  **Attachments:** - [AnnotationMethodHandlerAdapter.diff](https://jira.spring.io/secure/attachment/16208/AnnotationMethodHandlerAdapter.diff) (_1.27 kB_) - [HandlerMethodInvoker.diff](https://jira.spring.io/secure/attachment/16209/HandlerMethodInvoker.diff) (_419 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63dc53a5ea1ab1e38c19f6f10316401c8bcfc333","closed","type: task,","spring-projects-issues","2010-02-17T10:19:10Z","2019-01-11T17:01:02Z"
"","11514","HttpMessageConverter read and write methods have restrictive type annotations [SPR-6848]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-6848](https://jira.spring.io/browse/SPR-6848?redirect=false)** and commented  When trying to implement a HttpMessageConverter for Google Protocol Buffers I've run into a limitation by the write and read method signatures that require an exact type T. With Protocol Buffers, as with many other types of marshaling systems, there is a base class, Message in this case, that all exact classes extend or implement. canRead and canWrite methods do declare the relaxed and appropriate signature of","closed","type: enhancement,","spring-projects-issues","2010-02-15T16:17:56Z","2019-01-11T16:46:36Z"
"","10929","Spring MVC REST: Provide interface definition model for generating HTTP client interface proxies wrapping RestTemplates [SPR-6261]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-6261](https://jira.spring.io/browse/SPR-6261?redirect=false)** and commented  Provide interface definition model for generating HTTP client interface proxies wrapping RestTemplates.  Code implementation to follow.  ---  **Affects:** 3.0 RC1  **Issue Links:** - #16747 Introduce proxy-based REST client similar to HttpInvokerProxyFactoryBean (_**""is duplicated by""**_) - #10477 Spring REST `@MVC`: Add support for google Protocol Buffers resource representation format (_**""supersedes""**_)  3 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-22T03:33:08Z","2019-01-13T07:57:43Z"
"","10928","Spring MVC REST: Provide RestTemplate support for receiving & sending Google Protocol Buffers Messages [SPR-6260]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-6260](https://jira.spring.io/browse/SPR-6260?redirect=false)** and commented  Provide RestTemplate support for receiving & sending Google Protocol Buffers Messages.  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10477 Spring REST `@MVC`: Add support for google Protocol Buffers resource representation format (_**""supersedes""**_)","closed","type: enhancement,","spring-projects-issues","2009-10-22T03:30:40Z","2019-01-13T07:57:45Z"
"","10927","Spring MVC REST: Support for binding Google Protocol Buffers messages [SPR-6259]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-6259](https://jira.spring.io/browse/SPR-6259?redirect=false)** and commented  Provide facility to support binding for Google Protocol Buffers messages to MVC Controller method arguments.  Code implementation to follow.  ---  **Affects:** 3.0 RC1  **Attachments:** - [ContentType.java](https://jira.spring.io/secure/attachment/15852/ContentType.java) (_1.07 kB_) - [ExtensionRegistryInitializer.java](https://jira.spring.io/secure/attachment/15850/ExtensionRegistryInitializer.java) (_375 bytes_) - [ProtobufAnnotationMethodHandlerAdapter.java](https://jira.spring.io/secure/attachment/15865/ProtobufAnnotationMethodHandlerAdapter.java) (_2.13 kB_) - [ProtobufServletRequestDataBinder.java](https://jira.spring.io/secure/attachment/15853/ProtobufServletRequestDataBinder.java) (_3.39 kB_) - [Utils.java](https://jira.spring.io/secure/attachment/15851/Utils.java) (_5.69 kB_)  **Issue Links:** - #10477 Spring REST `@MVC`: Add support for google Protocol Buffers resource representation format (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b56703eadc93d7be6b4330bf2d94b4da5362e007  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-22T03:28:09Z","2019-01-13T07:57:46Z"
"","10926","Spring MVC REST: Support for Google Protocol Buffers View [SPR-6258]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-6258](https://jira.spring.io/browse/SPR-6258?redirect=false)** and commented  Provide support facility to be able to render Google Protocol Buffers Messages within Spring MVC using custom ProtobufView implementation.  Code implementation to follow.  ---  **Affects:** 3.0 RC1  **Attachments:** - [AbstractStatusWithHeadersResponse.java](https://jira.spring.io/secure/attachment/15859/AbstractStatusWithHeadersResponse.java) (_915 bytes_) - [AcceptedResponse.java](https://jira.spring.io/secure/attachment/15860/AcceptedResponse.java) (_353 bytes_) - [ContentType.java](https://jira.spring.io/secure/attachment/15855/ContentType.java) (_1.07 kB_) - [CreatedResponse.java](https://jira.spring.io/secure/attachment/15861/CreatedResponse.java) (_590 bytes_) - [MessageAdapter.java](https://jira.spring.io/secure/attachment/15864/MessageAdapter.java) (_148 bytes_) - [NoContentResponse.java](https://jira.spring.io/secure/attachment/15862/NoContentResponse.java) (_426 bytes_) - [NotFoundResponse.java](https://jira.spring.io/secure/attachment/15863/NotFoundResponse.java) (_465 bytes_) - [ProtobufHandlerExceptionResolver.java](https://jira.spring.io/secure/attachment/15858/ProtobufHandlerExceptionResolver.java) (_2.58 kB_) - [ProtobufView.java](https://jira.spring.io/secure/attachment/15857/ProtobufView.java) (_11.46 kB_) - [ProtobufViewResolver.java](https://jira.spring.io/secure/attachment/15856/ProtobufViewResolver.java) (_944 bytes_) - [Utils.java](https://jira.spring.io/secure/attachment/15854/Utils.java) (_5.69 kB_)  **Issue Links:** - #10477 Spring REST `@MVC`: Add support for google Protocol Buffers resource representation format (_**""is superseded by""**_)  7 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-22T03:26:40Z","2019-01-13T07:57:48Z"
"","11490","Create and upload Maven Javadoc Bundles for Spring 3.0 [SPR-6824]","**[Aleksander Adamowski](https://jira.spring.io/secure/ViewProfile.jspa?name=olo)** opened **[SPR-6824](https://jira.spring.io/browse/SPR-6824?redirect=false)** and commented  This is a follow-up to #7392, in which Ben has stated:  ""We're going to skip the Javadoc bundles for now as they appear to be the least useful and the hardest to create.""  Well, the continuing lack of JavaDOC bundles in 3.0 artifacts is somewhat unfortunate:  http://repo2.maven.org/maven2/org/springframework/spring-core/3.0.0.RELEASE/ http://repo2.maven.org/maven2/org/springframework/spring-test/3.0.0.RELEASE/  The source budles aren't sufficient, e.g. they don't allow for displaying JavaDOCs in web browser launcher from the IDE - see the arguments in [SWF-831](https://jira.spring.io/browse/SWF-831).  Inline citations from [SWF-831](https://jira.spring.io/browse/SWF-831):  ""...some people are more comfortable with reading javadocs in a web browser because it allows for: * tabbed browsing in multiple tabs * navigation by editing the URL in location bar * easy text resizing with a keyboard shortcut...""  ""...I was interested in this to get them automatically downloaded and added to the projects with maven. Then you get javadocs integrated into your IDE.""  In our organization, we have simply added the following fragments to our company wide POM which is a parent for all projects:  \ \2.6.1\ ... \ ... \ \ \ \ \org.apache.maven.plugins\ \maven-javadoc-plugin\ \${javadoc.plugin.version}\ \ \ \attach-javadocs\ \ \jar\ \ \ \ \ ... \ \ \ \ \ \org.apache.maven.plugins\ \maven-javadoc-plugin\ \ \ \attach-javadocs\ \ \install\ \ \jar\ \ \ \ \ \ \ ... \ \ \ \org.apache.maven.plugins\ \maven-javadoc-plugin\ \${javadoc.plugin.version}\ \ \128m\ \512\ \ \ ... \ ... \ This way we get automatic javadoc bundle creation and deployment for all our Maven 2 artifacts.  ---  2 votes, 1 watchers","closed","type: task,","spring-projects-issues","2010-02-10T21:41:27Z","2019-01-11T16:47:13Z"
"","11843","DataSourceUtils.prepareConnectionForTransaction can throw SQLException when calls con.setTransactionIsolation(definition.getIsolationLevel()) [SPR-7184]","**[Alberto Mozzone](https://jira.spring.io/secure/ViewProfile.jspa?name=albert2springjira)** opened **[SPR-7184](https://jira.spring.io/browse/SPR-7184?redirect=false)** and commented  The call to the method can throw an SQLException if the JDBC driver doesn't support the change of transaction isolation after the connection is in use. This is the case with Postgresql. The problem is that the method is called even if the transaction isolation of the connection is the same of the configured transaction isolation (in the transaction definition). In this case, the JDBC driver (Postgresql) bombs. I suggest to call the setter only when the configured transaction isolation is different than the connection one. Example:  ``` ... // Apply specific isolation level, if any. Integer previousIsolationLevel = null; if (definition != null && definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) { 	if (logger.isDebugEnabled()) { 		logger.debug(""Changing isolation level of JDBC Connection ["" + con + ""] to "" + 			definition.getIsolationLevel()); 	} 	previousIsolationLevel = new Integer(con.getTransactionIsolation());   	con.setTransactionIsolation(definition.getIsolationLevel()); } ... ```    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/853eab8b4c90c090fdfe76363519dc5db38c2c46","closed","type: enhancement,","spring-projects-issues","2010-05-09T23:30:28Z","2012-06-19T03:43:50Z"
"","11433","mvc:annotation-driven not documented [SPR-6767]","**[Alberto A. Flores](https://jira.spring.io/secure/ViewProfile.jspa?name=albertoaflores)** opened **[SPR-6767](https://jira.spring.io/browse/SPR-6767?redirect=false)** and commented  Unless I completely missed it, the  definition is not documented in the manual. Furthermore, the schema is not even described in the documentation. It appears that some forum answers claim that using  will also do classpath scanning which appears to be contradictory to the post from Keith. Thoughts?  ---  **Affects:** 3.0 GA  **Issue Links:** - #11247 When using  Spring webflows no longer work (_**""duplicates""**_)  1 votes, 2 watchers","closed","type: documentation,","spring-projects-issues","2010-01-25T16:20:25Z","2019-01-11T15:43:34Z"
"","10922","SpEL support for XOR operator [SPR-6254]","**[Alberto A. Flores](https://jira.spring.io/secure/ViewProfile.jspa?name=albertoaflores)** opened **[SPR-6254](https://jira.spring.io/browse/SPR-6254?redirect=false)** and commented  SpEL does not support the XOR operator, only AND, OR, and NOT.   ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-10-21T03:17:35Z","2018-12-26T17:27:35Z"
"","11841","Dozer integration with Spring Conversion API [SPR-7182]","**[adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=gonzalad)** opened **[SPR-7182](https://jira.spring.io/browse/SPR-7182?redirect=false)** and commented  Integrate Dozer with Spring 3 Type Conversion API.  The forum link provide a sample of such an integration.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=298778  7 votes, 7 watchers","closed","in: core,","spring-projects-issues","2010-05-09T19:59:39Z","2016-09-20T20:48:34Z"
"","11830","Support for JEE Message Driven Bean [SPR-7171]","**[adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=gonzalad)** opened **[SPR-7171](https://jira.spring.io/browse/SPR-7171?redirect=false)** and commented  Provide a convenient class to delegate EJB Mdb calls to a Spring MessageListener.  The only thing the developer should do then is add and configure this bean in ejb-jar.xml, and delegation to spring MessageListener is ready !   ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=298368#post298368  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-05-05T04:30:43Z","2018-12-24T17:23:34Z"
"","11623","Migrate XML from Spring-WS to Spring Core [SPR-6958]","**[adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=gonzalad)** opened **[SPR-6958](https://jira.spring.io/browse/SPR-6958?redirect=false)** and commented  The XML abstraction in Spring Web Services, is quite useful in non-web service scenarios too (XML, XPATH handling).  Could it be moved from SWS to SPR ?  Also since #9933, some code from Spring XML (StaxSource, StaxResult) has been duplicated to Spring Core.  Having only one implementation would simplify XML usage in Spring.  ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=82695","closed","type: enhancement,","spring-projects-issues","2010-03-08T00:38:55Z","2019-01-11T16:30:35Z"
"","11402","define a bean alias with annotations (similar to @Component but just defining an alias) [SPR-6736]","**[adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=gonzalad)** opened **[SPR-6736](https://jira.spring.io/browse/SPR-6736?redirect=false)** and commented  I'm using Struts 1 with the Spring DelegatingTilesRequestProcessor plugin. I define my actions as spring beans and would like to use `@Component` annotation and no XML configuration.  My problem is that an action path must correspond to the same Spring bean id.  And I can have the same spring bean used for multiple actions.  i.e /charge/view and /charge/save should map to the same bean.  I cannot do it with `@Component` annotation alone, and would need a `@Alias` or `@Role` annotation.  For instance something like :  ``` @Component(""/charge/view"") @Roles({`@Role`(""/charge/remove""),     @Role(""/charge/edit""),     @Role(""/charge/save"")}) public class EditChargeClienteleAction extends MappingDispatchAction { ```    ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=83133  16 votes, 12 watchers","open","has: votes-jira,","spring-projects-issues","2010-01-20T21:40:46Z","2022-05-12T08:02:52Z"
"","11669","CronTrigger is not triggered at correct time [SPR-7004]","**[adi ofry](https://jira.spring.io/secure/ViewProfile.jspa?name=aofry)** opened **[SPR-7004](https://jira.spring.io/browse/SPR-7004?redirect=false)** and commented  When running CronTrigger on short interval I get the task triggered sooner then requested and also get duplicates.  public void initScheduler() { System.out.println(""Got initScheduler""); taskExecutor = new ThreadPoolTaskScheduler(); taskExecutor.initialize();      taskExecutor.schedule(new Runnable() {               @Override          public void run() {                                                                                                                                                                       System.out.println(new Date());				          }     },new CronTrigger(""0/5 * * * * ?""));  }  The output is: Got initScheduler Thu Mar 18 17:08:19 IST 2010 Thu Mar 18 17:08:24 IST 2010 Thu Mar 18 17:08:24 IST 2010 Thu Mar 18 17:08:25 IST 2010 Thu Mar 18 17:08:29 IST 2010 Thu Mar 18 17:08:30 IST 2010  ---  **Affects:** 3.0.1  **Attachments:** - [spr-7004.zip](https://jira.spring.io/secure/attachment/16565/spr-7004.zip) (_7.98 kB_)  **Issue Links:** - #11646 Spring TaskScheduler not accurate (_**""is duplicated by""**_) - #11525 Scheduled tasks seem to run twice  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dea5918d66aa25ea9ad9f44598cea3f765e21f75","closed","in: core,","spring-projects-issues","2010-03-18T03:24:23Z","2019-01-11T12:59:02Z"
"","11422","Failure to run application with TomcatInstrumentableClassLoader specified in context.xml [SPR-6756]","**[Adam Dyga](https://jira.spring.io/secure/ViewProfile.jspa?name=adeon)** opened **[SPR-6756](https://jira.spring.io/browse/SPR-6756?redirect=false)** and commented  I went thought all steps described in chapter 7.8 of Spring reference documentation, section ""Load-time weaving with AspectJ in the Spring Framework/Environment-specific configuration/Tomcat"" :  1. Copied org.springframework.instrument.tomcat-3.0.0.RELEASE.jar (although it's called spring-instrument-tomcat.jar in the doc) to Tomcat 6 lib directory.  2. Configured web application's META-INF/context.xml to use the TomcatInstrumentableClassLoader :  \ \ \ 3. Enabled LTW in spring configuration:    Unfortunately starting the application fails with exception:  -------------- stacktrace ---------------------  2010-01-22 18:08:11 org.aspectj.weaver.tools.Jdk14Trace error SEVERE: com/sun/xml/bind/v2/model/impl/TypeInfoSetImpl/class java.lang.NullPointerException at org.aspectj.weaver.ResolvedMemberImpl.parameterize(ResolvedMemberImpl.java:797) at org.aspectj.weaver.ResolvedMemberImpl.parameterize(ResolvedMemberImpl.java:786) at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:701) at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:652) at org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:567) at org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:271) at org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator(ResolvedType.java:265) at org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:420) at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:178) at org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:69) at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:298) at org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:106) at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146) at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:52) at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146) at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:52) at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146) at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:52) at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146) at org.aspectj.weaver.patterns.OrPointcut.matchInternal(OrPointcut.java:51) at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146) at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:70) at org.aspectj.weaver.Advice.match(Advice.java:106) at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:140) at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2980) at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2489) at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:486) at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:98) at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1733) at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1694) at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1464) at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1273) at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:394) at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:281) at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:95) at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52) at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformer.transform(AspectJWeavingEnabler.java:97) at org.springframework.instrument.classloading.WeavingTransformer.transformIfNecessary(WeavingTransformer.java:95) at org.springframework.instrument.classloading.WeavingTransformer.transformIfNecessary(WeavingTransformer.java:78) at org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader.findResourceInternal(TomcatInstrumentableClassLoader.java:116) ...  -------------- stacktrace ---------------------  Please note that if LTW agent is configured the generic way (ie. by providing -javaagent:/path/to/spring-agent.jar as JVM param in Tomcat startup script), everything works fine. Please also note that the \ configuration in context.xml doesn't have the useSystemClassLoaderAsParent=""false"" attribute, because it was removed in recent versions of Tomcat (may be worth mentioning in the reference documentation).    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc37c509726ab8ee5cfb4a33cd280bc3d25072d4","closed","in: core,","spring-projects-issues","2010-01-22T03:37:34Z","2019-01-11T15:43:58Z"
"","11419","Documentation issue: spring-tomcat-weaver.jar and spring-instrument-tomcat.jar mentioned in reference documentation but don't exist [SPR-6753]","**[Adam Dyga](https://jira.spring.io/secure/ViewProfile.jspa?name=adeon)** opened **[SPR-6753](https://jira.spring.io/browse/SPR-6753?redirect=false)** and commented  Chapter 13.5 of spring reference document refers to spring-tomcat-weaver.jar but this library cannot be found anywhere in the distribution. Similar issue applies to chapter 7.8 where spring-instrument-tomcat.jar is mentioned, but actually it's name is different in binary distribution (org.springframework.instrument.tomcat-3.0.0.RELEASE.jar).   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c791b529b5043a5d74a35473fd2e8a363e100bc","closed","in: core,","spring-projects-issues","2010-01-22T03:20:27Z","2012-06-19T03:44:18Z"
"","11224","Spring RC3 Maven repo is unaccessible [SPR-6558]","**[Adam Brod](https://jira.spring.io/secure/ViewProfile.jspa?name=adambrod)** opened **[SPR-6558](https://jira.spring.io/browse/SPR-6558?redirect=false)** and commented  Not sure if this is the correct way to log this issue, but http://maven.springframework.org/milestone is inaccessible.  Going to http://maven.springframework.org shows a mangled directory listing.  See screenshot.   ---  **Affects:** 3.0 RC3  **Attachments:** - [Maven repo is messed up.jpg](https://jira.spring.io/secure/attachment/15997/Maven+repo+is+messed+up.jpg) (_691.81 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c8d65f078b23ed45e45f1fd22da063b9f9053bac","closed","in: core,","spring-projects-issues","2009-12-13T00:26:55Z","2019-01-12T05:32:48Z"
"","11187","AbstractPlatformTransactionManager breaks in 3.0.0.RC3 [SPR-6521]","**[Abhishek Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=gupabhi)** opened **[SPR-6521](https://jira.spring.io/browse/SPR-6521?redirect=false)** and commented  **Problem:** We have implemented a TransactionManager that extends the AbstractPlatformTransactionManager. We noticed that there's a break when we moved to 3.0.0.RC3.  **Details:** In the getTransaction(...) method, when doBegin(...) is called, the TransactionStatus is now instantiated using a private method instantiateTransactionStatus(). This breaks our transactionManager that extends newTransactionStatus(). This is infact the case for all the instances where doBegin() is called throughout the code. _Note: The split between creation of the TransactionStatus and preparingSynchronization whereever doBegin() is being called is correct in that the TransactionStatus needs to be created before a call to doBegin() - this was an OOM issue that Juergen had fixed in 3.0.rc1_  **Proposed Solution:** newTransactionStatus(...) should keep doing what it did earlier i.e. simply be responsible for creating the new TransactionStatus. The prepareSynchronization(...) method should be called outside of it.    ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93abbd0ef76a4e7c35ed5fd4a6307ef1da34b1d5","closed","type: bug,","spring-projects-issues","2009-12-04T06:19:34Z","2012-06-19T03:44:07Z"
"","11565","Couldn't initialize OracleLobHandler because Oracle driver classes are not available. Note that OracleLobHandler requires Oracle JDBC driver 9i or higher!; nested exception is java.lang.ClassNotFoundException: oracle.sql.BLOB [SPR-6900]","**[Abhishek Dhote](https://jira.spring.io/secure/ViewProfile.jspa?name=abhishekdhote)** opened **[SPR-6900](https://jira.spring.io/browse/SPR-6900?redirect=false)** and commented  I am using BLOB in my Spring OSGi application, I am getting java.lang.ClassNotFoundException: oracle.sql.BLOB in case of Oracle. I tried all the version of Oracle JDBC driver versions! This is exactly what I am getting:  2010-02-24 16:59:39,312 ERROR com.hp.exstream.cc.server.actions.ActionExecutionServiceImpl:action-execution-thread-1 - Action execution failed: Data access problem. org.springframework.dao.DataAccessResourceFailureException: Could not create Oracle LOB; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: Couldn't initialize OracleLobHandler because Oracle driver classes are not available. Note that OracleLobHandler requires Oracle JDBC driver 9i or higher!; nested exception is java.lang.ClassNotFoundException: oracle.sql.BLOB at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.createLob(OracleLobHandler.java:368) [na:na] at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.setBlobAsBytes(OracleLobHandler.java:220) [na:na] at com.hp.exstream.cc.dao.util.BlobActionType.nullSafeSetInternal(BlobActionType.java:96) [na:na] at org.springframework.orm.hibernate3.support.AbstractLobType.nullSafeSet(AbstractLobType.java:180) [na:na] at org.hibernate.type.CustomType.nullSafeSet(CustomType.java:169) [na:na] at org.hibernate.persister.entity.AbstractEntityPersister.dehydrate(AbstractEntityPersister.java:2025) [na:na] at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2271) [na:na] at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2688) [na:na] at org.hibernate.action.EntityInsertAction.execute(EntityInsertAction.java:79) [na:na] at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:279) [na:na] at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:263) [na:na] at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:167) [na:na] at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:321) [na:na] at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:50) [na:na] at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1027) [na:na] at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:365) [na:na] at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:137) [na:na] at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:655) [org.springframework.orm-2.5.6.jar:2.5.6] at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:732) [org.springframework.transaction-2.5.6.jar:2.5.6] at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:701) [org.springframework.transaction-2.5.6.jar:2.5.6] at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140) [org.springframework.transaction-2.5.6.jar:2.5.6] at sun.reflect.GeneratedMethodAccessor38.invoke(Unknown Source) [na:na] at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) [na:na] at java.lang.reflect.Method.invoke(Unknown Source) [na:1.5.0_11] at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) [na:na] at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.doInvoke(ServiceInvoker.java:58) [na:na] at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.invoke(ServiceInvoker.java:62) [na:na] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131) [na:na] at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119) [na:na] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invokeUnprivileged(ServiceTCCLInterceptor.java:56) [na:na] at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invoke(ServiceTCCLInterceptor.java:39) [na:na] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.osgi.service.importer.support.LocalBundleContextAdvice.invoke(LocalBundleContextAdvice.java:59) [na:na] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131) [na:na] at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119) [na:na] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.aop.framework.Cglib2AopProxy$FixedChainStaticTargetInterceptor.intercept(Cglib2AopProxy.java:582) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.transaction.support.TransactionTemplate$$EnhancerByCGLIB$$2e8c72f0.execute(\) [na:na] at com.hp.exstream.cc.server.actions.chain.ActionHandlerTransactionProxy.handleAction(ActionHandlerTransactionProxy.java:49) [cc-server-1.0.0.24.jar:1.0.0.24] at com.hp.exstream.cc.server.actions.chain.ActionHandlerTransactionProxy$$FastClassByCGLIB$$b074e067.invoke(\) [na:na] at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) [com.springsource.net.sf.cglib-2.1.3.jar:na] at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:700) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:77) [na:na] at com.hp.exstream.cc.server.aspects.UserRightsChecker.handleCreateEntityAction(UserRightsChecker.java:656) [cc-server-1.0.0.24.jar:1.0.0.24] at com.hp.exstream.cc.server.aspects.UserRightsChecker.handleScheduleAction(UserRightsChecker.java:383) [cc-server-1.0.0.24.jar:1.0.0.24] at com.hp.exstream.cc.server.aspects.UserRightsChecker.checkActionHandling(UserRightsChecker.java:126) [cc-server-1.0.0.24.jar:1.0.0.24] at sun.reflect.GeneratedMethodAccessor37.invoke(Unknown Source) [na:na] at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) [na:na] at java.lang.reflect.Method.invoke(Unknown Source) [na:1.5.0_11] at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:627) [na:na] at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:616) [na:na] at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:64) [na:na] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:160) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:77) [na:na] at com.hp.exstream.cc.server.aspects.LicenseChecker.checkActionHandling(LicenseChecker.java:204) [cc-server-1.0.0.24.jar:1.0.0.24] at sun.reflect.GeneratedMethodAccessor36.invoke(Unknown Source) [na:na] at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) [na:na] at java.lang.reflect.Method.invoke(Unknown Source) [na:1.5.0_11] at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:627) [na:na] at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:616) [na:na] at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:64) [na:na] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:160) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) [org.springframework.aop-2.5.6.jar:2.5.6] at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:635) [org.springframework.aop-2.5.6.jar:2.5.6] at com.hp.exstream.cc.server.actions.chain.ActionHandlerTransactionProxy$$EnhancerByCGLIB$$88dc6775.handleAction(\) [na:na] at com.hp.exstream.cc.server.actions.chain.AbstractActionHandler.handleAction(AbstractActionHandler.java:21) [cc-server-1.0.0.24.jar:1.0.0.24] at com.hp.exstream.cc.server.actions.chain.ActionHandlerLockProxy.handleAction(ActionHandlerLockProxy.java:26) [cc-server-1.0.0.24.jar:1.0.0.24] at com.hp.exstream.cc.server.actions.chain.ActionHandlerJamonProxy.handleAction(ActionHandlerJamonProxy.java:41) [cc-server-1.0.0.24.jar:1.0.0.24] at com.hp.exstream.cc.server.actions.ActionExecutionServiceImpl.executeAction(ActionExecutionServiceImpl.java:68) [cc-server-1.0.0.24.jar:1.0.0.24] at com.hp.exstream.cc.server.actions.ThreadPoolActionExecutionServiceImpl$1.call(ThreadPoolActionExecutionServiceImpl.java:71) [cc-server-1.0.0.24.jar:1.0.0.24] at com.hp.exstream.cc.server.actions.ThreadPoolActionExecutionServiceImpl$1.call(ThreadPoolActionExecutionServiceImpl.java:70) [cc-server-1.0.0.24.jar:1.0.0.24] at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source) [na:1.5.0_11] at java.util.concurrent.FutureTask.run(Unknown Source) [na:1.5.0_11] at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source) [na:1.5.0_11] at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [na:1.5.0_11] at java.lang.Thread.run(Unknown Source) [na:1.5.0_11] Caused by: org.springframework.dao.InvalidDataAccessApiUsageException: Couldn't initialize OracleLobHandler because Oracle driver classes are not available. Note that OracleLobHandler requires Oracle JDBC driver 9i or higher!; nested exception is java.lang.ClassNotFoundException: oracle.sql.BLOB at org.springframework.jdbc.support.lob.OracleLobHandler.initOracleDriverClasses(OracleLobHandler.java:164) [na:na] at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.createLob(OracleLobHandler.java:339) [na:na] ... 80 common frames omitted Caused by: java.lang.ClassNotFoundException: oracle.sql.BLOB at org.apache.felix.framework.searchpolicy.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:627) [na:na] at org.apache.felix.framework.searchpolicy.ModuleImpl.access$100(ModuleImpl.java:61) [na:na] at org.apache.felix.framework.searchpolicy.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1469) [na:na] at java.lang.ClassLoader.loadClass(Unknown Source) [na:1.5.0_11] at org.springframework.jdbc.support.lob.OracleLobHandler.initOracleDriverClasses(OracleLobHandler.java:150) [na:na] ... 81 common frames omitted    ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2010-02-23T22:59:19Z","2019-01-12T05:32:26Z"
"","11718","Constructor injection is not working properly for collections unless the type of collection is specified [SPR-7058]","**[Abdurehim Ablimit](https://jira.spring.io/secure/ViewProfile.jspa?name=carawan)** opened **[SPR-7058](https://jira.spring.io/browse/SPR-7058?redirect=false)** and commented  **I have a very simple test class and it has two constructors as shown below. I also have bean definition as below.**  public class TestSpringBean { private boolean bool; private Map prop;      public TestSpringBean(boolean b,Map prop) {            //doing the constructor job     }          public TestSpringBean(Map prop) {     	this(true,prop);     }  }  \ \ \ \\\yup an entry\\\just some string\\ \\\yup an entry2\\\just some string2\\ \\\yup an entry3\\\just some string3\\ \\\yup an entry4\\\just some string4\\ \ \ \  **Unless I specify the constructor-arg type (java.util.Map in this case), Spring throws exception as shown below. The same is true for java.util.Properties class. Fortunately, this is not showstopper, users can still continue.**  **One workaround for this issue is to make the Map first parameter, but this not better than specifying the constructor-arg type in app context.**  **I did some investigation and found this issue comes from protected Map convertToTypedMap(Map original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) in TypeConvertorDelegate class. I don't understand why this class tries to convert a map to boolean.**  java.lang.InstantiationException: boolean at java.lang.Class.newInstance0(Class.java:340) at java.lang.Class.newInstance(Class.java:308) at org.springframework.beans.TypeConverterDelegate.convertToTypedMap(TypeConverterDelegate.java:634) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:236) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:104) at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:419) at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:657) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:191) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:984) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:888) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:479) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:562) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:871) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:423)   ---  **Affects:** 3.0.1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16368/mylyn-context.zip) (_4.55 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/580dc8e72ae823ab4cf988de94fd8ae922bd2fc4","closed","in: core,","spring-projects-issues","2010-03-31T13:16:30Z","2012-06-19T03:43:31Z"
"","11717","CLONE -Constructor injection is not working properly for collections unless the type of collection is specified [SPR-7057]","**[Abdurehim Ablimit](https://jira.spring.io/secure/ViewProfile.jspa?name=carawan)** opened **[SPR-7057](https://jira.spring.io/browse/SPR-7057?redirect=false)** and commented  **I have a very simple test class and it has two constructors as shown below. I also have bean definition as below.**  public class TestSpringBean { private boolean bool; private Map prop;      public TestSpringBean(boolean b,Map prop) {            //doing the constructor job     }          public TestSpringBean(Map prop) {     	this(true,prop);     }  }  \ \ \ \\\yup an entry\\\just some string\\ \\\yup an entry2\\\just some string2\\ \\\yup an entry3\\\just some string3\\ \\\yup an entry4\\\just some string4\\ \ \ \  **Unless I specify the constructor-arg type (java.util.Map in this case), Spring throws exception as shown below. The same is true for java.util.Properties class. Fortunately, this is not showstopper, users can still continue.**  **One workaround for this issue is to make the Map first parameter, but this not better than specifying the constructor-arg type in app context.**  **I did some investigation and found this issue comes from protected Map convertToTypedMap(Map original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) in TypeConvertorDelegate class. I don't understand why this class tries to convert a map to boolean.**  java.lang.InstantiationException: boolean at java.lang.Class.newInstance0(Class.java:340) at java.lang.Class.newInstance(Class.java:308) at org.springframework.beans.TypeConverterDelegate.convertToTypedMap(TypeConverterDelegate.java:634) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:236) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:104) at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:419) at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:657) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:191) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:984) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:888) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:479) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:562) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:871) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:423)   ---  **Affects:** 3.0.1","closed","in: core,","spring-projects-issues","2010-03-31T13:14:28Z","2019-01-12T05:32:16Z"
"","11637","Constructor injection is not working properly for collections unless the type of collection is specified [SPR-6972]","**[Abdurehim Ablimit](https://jira.spring.io/secure/ViewProfile.jspa?name=carawan)** opened **[SPR-6972](https://jira.spring.io/browse/SPR-6972?redirect=false)** and commented  **I have a very simple test class and it has two constructors as shown below. I also have bean definition as below.**  public class TestSpringBean { private boolean bool; private Map prop;      public TestSpringBean(boolean b,Map prop) {            //doing the constructor job     }          public TestSpringBean(Map prop) {     	this(true,prop);     }  }  \ \ \ \\\yup an entry\\\just some string\\ \\\yup an entry2\\\just some string2\\ \\\yup an entry3\\\just some string3\\ \\\yup an entry4\\\just some string4\\ \ \ \  **Unless I specify the constructor-arg type (java.util.Map in this case), Spring throws exception as shown below. The same is true for java.util.Properties class. Fortunately, this is not showstopper, users can still continue.**  **One workaround for this issue is to make the Map first parameter, but this not better than specifying the constructor-arg type in app context.**  **I did some investigation and found this issue comes from protected Map convertToTypedMap(Map original, String propertyName, Class requiredType, TypeDescriptor typeDescriptor) in TypeConvertorDelegate class. I don't understand why this class tries to convert a map to boolean.**  java.lang.InstantiationException: boolean at java.lang.Class.newInstance0(Class.java:340) at java.lang.Class.newInstance(Class.java:308) at org.springframework.beans.TypeConverterDelegate.convertToTypedMap(TypeConverterDelegate.java:634) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:236) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:104) at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:419) at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:657) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:191) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:984) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:888) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:479) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:450) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:287) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:189) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:562) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:871) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:423)   ---  **Affects:** 3.0.1  **Attachments:** - [repro.patch](https://jira.spring.io/secure/attachment/16330/repro.patch) (_2.36 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c13e5f9f5b764e80e52d4e4166652c64ca4d34e6, https://github.com/spring-projects/spring-framework/commit/77bb68b9675f1acb62053b52f0886ded3d0201ea, https://github.com/spring-projects/spring-framework/commit/c38c09bc351e222a9674d48c0bf74ba0a5bc63ad","closed","in: core,","spring-projects-issues","2010-03-11T06:14:43Z","2019-01-11T16:35:01Z"
"","11803","MappingJacksonJsonView ConcurrentModificationException [SPR-7144]","**[Aaron Douglas](https://jira.spring.io/secure/ViewProfile.jspa?name=astralbodies)** opened **[SPR-7144](https://jira.spring.io/browse/SPR-7144?redirect=false)** and commented  I have an annotation-based controller that is used with AJAX calls to add & remove objects from a session-based variable/collection.  The results from both of those methods is being rendered by the MappingJacksonJsonView.  My problem is that the session model attribute is by default being rendered along with the method's returned model attributes and causing a problem if another call to add an item to that collection is in progress while Jackson is marshalling.  This is throwing a ConcurrentModificationException.  I can't set renderedAttributes for the entire view instance, and there are other methods in my controller that will need to render that collection.  I do not have any way of excluding a model attribute from the JSON rendering for those one or two methods in the controller.  Could there be an annotation for the method to exclude model attributes from being rendered or specifically filter to a list of attributes?   ---  **Affects:** 3.0.1, 3.0.2, 3.0.3","closed","status: declined,","spring-projects-issues","2010-04-28T01:25:04Z","2019-01-12T16:38:00Z"
"","11767","RestTemplate/UriTemplate/UriUtils improperly encoding UTF-8 [SPR-7107]","**[Aaron Douglas](https://jira.spring.io/secure/ViewProfile.jspa?name=astralbodies)** opened **[SPR-7107](https://jira.spring.io/browse/SPR-7107?redirect=false)** and commented  I am attempting to use RestTemplate to download JSON search results from GeoNames.org.  Passing in a UTF-8 query parameter results in that parameter being encoded incorrectly.  The URL I'm hitting (after being replaced with values) is:  ``` http://ws.geonames.org/searchJSON?q=Tōkyō&style=FULL&maxRows=300&featureCode=PPL&featureCode=PPLA&featureCode=PPLC&featureCode=PPLA2&featureCode=PPLA3&featureCode=PPLA4&featureCode=PPLG&featureCode=PPLF&featureCode=PPLR&featureCode=PPLX&featureCode=PPLS&featureCode=ADM1&featureCode=ADM2&featureCode=ADM3&featureCode=ADM4&featureCode=ADMD&featureCode=PCLI&featureCode=PCL&featureCode=PCLD&featureCode=PCLF&featureCode=PCLIX&featureCode=PCLS&featureCode=PRSH&featureCode=TERR&featureCode=MILB&featureCode=CONT&featureCode=RESV&featureCode=RESW ```  Which is being encoded to:  ``` http://ws.geonames.org/searchJSON?q=T%4Dky%4D&style=FULL&maxRows=300&featureCode=PPL&featureCode=PPLA&featureCode=PPLC&featureCode=PPLA2&featureCode=PPLA3&featureCode=PPLA4&featureCode=PPLG&featureCode=PPLF&featureCode=PPLR&featureCode=PPLX&featureCode=PPLS&featureCode=ADM1&featureCode=ADM2&featureCode=ADM3&featureCode=ADM4&featureCode=ADMD&featureCode=PCLI&featureCode=PCL&featureCode=PCLD&featureCode=PCLF&featureCode=PCLIX&featureCode=PCLS&featureCode=PRSH&featureCode=TERR&featureCode=MILB&featureCode=CONT&featureCode=RESV&featureCode=RESW ```  The place name Tōkyō should be encoded to T%C5%8Dky%C5%8D, not T%4Dky%4D.  This is preventing any international characters from being sent through RestTemplate.   ---  **Affects:** 3.0.1","closed","type: bug,","spring-projects-issues","2010-04-16T08:24:50Z","2012-06-19T03:42:43Z"
"","11825","allow setter injectors used in constructing the context to be played back and reinject [SPR-7166]","**[aappddeevv](https://jira.spring.io/secure/ViewProfile.jspa?name=aappddeevv)** opened **[SPR-7166](https://jira.spring.io/browse/SPR-7166?redirect=false)** and commented  To allow for dynamic injection without proxying, keep a list of setter injections used in constructing the context and allow that to be played back with a new value. The idea is to reset objects that are updated. While this can be achieved through proxying and a small amount of coding support with target sources, this could be easier implemented without the need for proxying if this container ""capability"" was available.   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?p=298106#post298106","closed","type: enhancement,","spring-projects-issues","2010-05-04T00:31:00Z","2018-12-28T10:54:35Z"