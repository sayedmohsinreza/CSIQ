"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","7698","InputTag must not have Asserts in optional attributes [SPR-3012]","**[Łukasz Bałamut](https://jira.spring.io/secure/ViewProfile.jspa?name=luki)** opened **[SPR-3012](https://jira.spring.io/browse/SPR-3012?redirect=false)** and commented  maxlength, alt, onSelect, size are tag optional attributes and they have Assert.hasText() invocations in setters methods. It is totally different to readonly property and all optional properties of AbstractHtmlInputElementTag and AbstractHtmlElementTag etc. This kind of unnecessairly functionality makes this tag very difficult to use in wraper tag file when eg. maxlenght is optional.  I think it is not good idea to put this Asserts in optional arrributes!   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2007-01-04T01:18:27Z","2012-06-19T03:50:24Z"
"","7284","response.setLocale() should be called before Controller.handleRequest() [SPR-2595]","**[Łukasz Bałamut](https://jira.spring.io/secure/ViewProfile.jspa?name=luki)** opened **[SPR-2595](https://jira.spring.io/browse/SPR-2595?redirect=false)** and commented  Locale resolved by any locale resolver are applied to response just before view is rendered. I think that this locale schould be applied to response before Controller.handleRequest(). Let's consider case when you have i18n data in hibernate managed database, when we are preparing data for view in controler we should use proper locale (eg. the same that jstl uses in view). When think more abstract - locale data in not only view part, it can affect model and controller also.   --- No further details from [SPR-2595](https://jira.spring.io/browse/SPR-2595?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-09-17T21:56:47Z","2006-10-26T09:36:48Z"
"","7088","getServletName call in logging statements potentially throwing exception [SPR-2399]","**[Øyvind Roth](https://jira.spring.io/secure/ViewProfile.jspa?name=oor)** opened **[SPR-2399](https://jira.spring.io/browse/SPR-2399?redirect=false)** and commented  A logging statement should ideally not throw an exception. E.g.: springframework v.1.2.8 Source file: org.springframework.web.servlet line 638: logger.debug(""DispatcherServlet with name '"" + getServletName() + ""' received request for ["" + 					request.getRequestURI() + ""]"");  During the development phase my config instance variable was null. That made getServletName() to throw NPE. The stack trace was an ugly log4j one which mislead me to look for bad logging configuration (which is fairly common).  Solution: Rewrite the logging statement along the line (config != null) ? getServletName() : ""whatever""  Probably applies generally.   ---  **Affects:** 1.2.8, 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-08-09T19:57:22Z","2012-06-19T03:50:17Z"
"","7078","merging property of list type looses original element type (changes to BeanDefinitionHolder or RuntimeBeanReference) [SPR-2389]","**[Zoran Regvart](https://jira.spring.io/secure/ViewProfile.jspa?name=zregvart)** opened **[SPR-2389](https://jira.spring.io/browse/SPR-2389?redirect=false)** and commented  I've attached a test case for this.   ---  **Affects:** 2.0 RC2  **Attachments:** - [testcase.zip](https://jira.spring.io/secure/attachment/11872/testcase.zip) (_1.15 kB_)","closed","in: core,","spring-projects-issues","2006-08-07T06:45:17Z","2012-06-19T03:50:42Z"
"","6914","typo in test:org.sprinframework.web.servlet.view.testviews_fr.properties: jsp/debug/deboug.jsp should be jsp/debug/debug.jsp [SPR-2224]","**[Zachary Lendon](https://jira.spring.io/secure/ViewProfile.jspa?name=zlendon)** opened **[SPR-2224](https://jira.spring.io/browse/SPR-2224?redirect=false)** and commented  Simply a typo; the test cases don't specificallly test this value so it never failed.  The issue's been around a while and is a trivial one.   ---  **Affects:** 2.0 M5","closed","status: declined,","spring-projects-issues","2006-06-30T05:22:57Z","2019-01-12T16:29:08Z"
"","7020","IllegalAccessException thrown in ejb lifecycle [SPR-2331]","**[Yudong Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=yudongw)** opened **[SPR-2331](https://jira.spring.io/browse/SPR-2331?redirect=false)** and commented  We are using OC4J 10.1.3. I have a MDB extending from AbstractJmsMessageDrivenBean. At runtime once a while an exception is thrown. After examing the stacktrace I have the following conclusion and workaround.  Cause: The OC4J mdb lifecycle 'manager' tries to call ejbRemove() by reflection. ejbRemove is a public method implemenetd in AbstractEnterpriseBean. AbstractEnterpriseBean is hower a friendly class. Calling the method directly is not a problem, calling it by reflection is not allowed according to Sun's implementation.  Workaround: I have my MDB extend the ejbRemove() an call super.ejbRemove().  Proposed solution: If one can not change Sun's implementation, change AbstractEnterpriseBean to a public class.  -------------------------------- stacktrace ----------------------------------- 06/07/13 15:34:24 javax.ejb.EJBException: Class com.evermind.server.ejb.interceptor.joinpoint.EJBJoi nPointImpl can not access a member of class org.springframework.ejb.support.AbstractEnterpriseBean w ith modifiers ""public""; nested exception is: java.lang.IllegalAccessException: Class com.evermind.se rver.ejb.interceptor.joinpoint.EJBJoinPointImpl can not access a member of class org.springframework .ejb.support.AbstractEnterpriseBean with modifiers ""public"" 06/07/13 15:34:24 java.lang.IllegalAccessException: Class com.evermind.server.ejb.interceptor.joinpo int.EJBJoinPointImpl can not access a member of class org.springframework.ejb.support.AbstractEnterp riseBean with modifiers ""public"" 06/07/13 15:34:24       at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:65) 06/07/13 15:34:24       at java.lang.reflect.Method.invoke(Method.java:578) 06/07/13 15:34:24       at com.evermind.server.ejb.interceptor.joinpoint.EJBJoinPointImpl.invoke(EJB JoinPointImpl.java:35) 06/07/13 15:34:24       at com.evermind.server.ejb.interceptor.InvocationContextImpl.proceed(Invocat ionContextImpl.java:69) 06/07/13 15:34:24       at com.evermind.server.ejb.interceptor.system.DMSInterceptor.invoke(DMSInter ceptor.java:52) 06/07/13 15:34:24       at com.evermind.server.ejb.interceptor.InvocationContextImpl.proceed(Invocat ionContextImpl.java:69) 06/07/13 15:34:24       at com.evermind.server.ejb.interceptor.system.SetContextActionInterceptor.in voke(SetContextActionInterceptor.java:34) 06/07/13 15:34:24       at com.evermind.server.ejb.interceptor.InvocationContextImpl.proceed(Invocat ionContextImpl.java:69) 06/07/13 15:34:24       at com.evermind.server.ejb.LifecycleManager$LifecycleCallback.invokeLifecycl eMethod(LifecycleManager.java:619) 06/07/13 15:34:24       at com.evermind.server.ejb.LifecycleManager$LifecycleCallback.invokeLifecycl eMethod(LifecycleManager.java:606) 06/07/13 15:34:24       at com.evermind.server.ejb.LifecycleManager.preDestroy(LifecycleManager.java :109) 06/07/13 15:34:24       at com.evermind.server.ejb.MessageDrivenBeanPool.destroyContextImpl(MessageD rivenBeanPool.java:51) 06/07/13 15:34:24       at com.evermind.server.ejb.BeanPool.destroyContext(BeanPool.java:449) 06/07/13 15:34:24       at com.evermind.server.ejb.BeanPool.expirePool(BeanPool.java:372) 06/07/13 15:34:24       at com.evermind.server.ejb.EJBTask.run(EJBTask.java:33) 06/07/13 15:34:24       at com.evermind.util.Task.schedule(Task.java:51) 06/07/13 15:34:24       at com.evermind.util.TaskManager.run(TaskManager.java:221) 06/07/13 15:34:24       at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor .java:814) 06/07/13 15:34:24       at java.lang.Thread.run(Thread.java:595)   ---  **Affects:** 1.2.7, 2.0 M3  3 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2006-07-20T17:52:00Z","2012-06-19T03:50:08Z"
"","7212","EntityManager is always closed in JpaTransactionManager.doCleanupAfterCompletion(Object transaction) [SPR-2523]","**[Yau ML](https://jira.spring.io/secure/ViewProfile.jspa?name=yaumunlam)** opened **[SPR-2523](https://jira.spring.io/browse/SPR-2523?redirect=false)** and commented  See http://forum.springframework.org/showthread.php?t=28254 - basically the persistenceRootUrl is not recognized by Hibernate nor Toplink.   ---  **Affects:** 2.0 RC3","closed","status: declined,","spring-projects-issues","2006-09-01T01:26:54Z","2019-01-12T16:28:52Z"
"","7399","AspectJExpressionPointcut can only be used with JDK1.5 [SPR-2711]","**[YangJie](https://jira.spring.io/secure/ViewProfile.jspa?name=yjcoffee)** opened **[SPR-2711](https://jira.spring.io/browse/SPR-2711?redirect=false)** and commented  Class org.springframework.aop.aspectj.AspectJExpressionPointcut can only be used with JDK 1.5, of which API it used in method hashCode: public int hashCode() { final int PRIME = 31; int result = 1; result = PRIME * result + ((this.pointcutDeclarationScope == null) ? 0 : this.pointcutDeclarationScope.hashCode()); result = PRIME * result + Arrays.hashCode(this.pointcutParameterNames);    // error in JDK 1.4 result = PRIME * result + Arrays.hashCode(this.pointcutParameterTypes);       // error in JDK 1.4 result = PRIME * result + ((this.getExpression() == null) ? 0 : this.getExpression().hashCode()); return result; }  The call to Arrays.hashCode(Object) may incur error while uses JDK 1.4 since it has not provided this method. We try to use AspectJ pointcut expression language with JDK 1.4 and find this problem.   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-10-13T14:04:11Z","2012-06-19T03:50:28Z"
"","7706","ServletContextResourcePatternResolver not behaving consistently depending on resource provided [SPR-3020]","**[Yan Pujante](https://jira.spring.io/secure/ViewProfile.jspa?name=frenchyan)** opened **[SPR-3020](https://jira.spring.io/browse/SPR-3020?redirect=false)** and commented  I have the following resource loader ServletContextResourcePatternResolver  if I do:  loader.getResources(""/WEB-INF/components/*.spring"")  then it works (I am getting a non empty array)  If I do:  loader.getResources(""/WEB-INF/components/"")[0].getURL() I get the following URL  jndi://localhost/pprofile/WEB-INF/components/  and if I do loader.getResources(""jndi://localhost/pprofile/WEB-INF/components/*.spring"")  then I get an empty array although it is totally equivalent (same path) to the first call   ---  **Affects:** 2.0.1","closed","status: declined,","spring-projects-issues","2007-01-08T04:04:05Z","2019-01-12T16:40:26Z"
"","7661","BeanDefinitionDecorator not being called when nested [SPR-2975]","**[Yan Pujante](https://jira.spring.io/secure/ViewProfile.jspa?name=frenchyan)** opened **[SPR-2975](https://jira.spring.io/browse/SPR-2975?redirect=false)** and commented  I created a BeanDefinitionDecorator which is associated to the 'config' element. I have the following example:  \ \ \ \ \ \ \ \ \ \ \ \ \ \ In the first example, my decorator gets invoked. In the second case it does not get invoked!  ---  **Affects:** 2.0.1  **Attachments:** - [lispring.xsd](https://jira.spring.io/secure/attachment/12290/lispring.xsd) (_2.31 kB_) - [test.spring](https://jira.spring.io/secure/attachment/12291/test.spring) (_1.03 kB_)  **Issue Links:** - #7641 p namespace doesn't work for inner beans (_**""is depended on by""**_)","closed","in: core,","spring-projects-issues","2006-12-22T01:51:11Z","2019-01-11T21:27:20Z"
"","7775","A documentation bug for groovy inline-script bean. [SPR-3089]","**[Woonsan Ko](https://jira.spring.io/secure/ViewProfile.jspa?name=woon_san)** opened **[SPR-3089](https://jira.spring.io/browse/SPR-3089?redirect=false)** and commented  In the groovy inline script bean example, the 'lang:inline-script' element is not properly ordered.  The 'spring-lang-2.0.xsd' forced us to put less than one 'lang:inline-script' element and more than zero 'lang:property' elements, as ordered.  The reference document shows misuse of this. See the patch attached.   ---  **Affects:** 2.0.2  **Attachments:** - [inline-script-ex-diff.txt](https://jira.spring.io/secure/attachment/12371/inline-script-ex-diff.txt) (_415 bytes_)","closed","type: bug,","spring-projects-issues","2007-01-29T15:10:55Z","2012-06-19T03:50:36Z"
"","6908","PropertyPlaceholderConfigurer doesn't work with default-lazy-init=""true"" [SPR-2218]","**[Wolfgang Gruber](https://jira.spring.io/secure/ViewProfile.jspa?name=arcolf)** opened **[SPR-2218](https://jira.spring.io/browse/SPR-2218?redirect=false)** and commented  It seems that Spring 2.0 RC1 breaks the compatibility with Spring 1.2.x in this case. I am using the following Spring configuration file:  springApplicationContext.xml  \ \ \  \ \ \  \ \ \ \  spring.properties: name=Hugo  com.example.Person: package com.example;  public class Person { private String name = null;  public String getName() { return this.name; }  public void setName(String name) { this.name = name; } }  Main class: package com.example;  import org.springframework.context.support.ClassPathXmlApplicationContext;  public class Launcher { public static void main(String[] args) { ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(""/springApplicationContext.xml""); Person p = (Person)context.getBean(""person""); System.out.println(p.getName()); } }  With Spring 2.0 RC1 it prints ""${name}"", with Spring 1.2x ""Hugo"" as defined in spring.properties .  ---  **Affects:** 2.0 RC1  **Issue Links:** - #5716 Improve BeanFactoryPostProcessor and BeanPostProcessor documentation (_**""depends on""**_)","closed","in: core,","spring-projects-issues","2006-06-29T00:39:47Z","2019-01-11T19:09:17Z"
"","7278","Spring does not use EHCache 1.2 safely [SPR-2589]","**[William McKibben](https://jira.spring.io/secure/ViewProfile.jspa?name=wmckibben)** opened **[SPR-2589](https://jira.spring.io/browse/SPR-2589?redirect=false)** and commented  When using the bundled ecache1.2.0.jar the application fails. I had to create an ecache.xml file but I still had problems. I upgraded to 1.2.3 of ecache which did not make the problem go away, but at least it is no longer a fatal error.  I suspect the issue has something to do with Hibernate and Spring both using the ecache.  WARN: Creating a new instance of CacheManager using the diskStorePath ""[path removed]"" which is already used by an existing CacheManager. The source of the configuration was classpath. The diskStore path for this CacheManager will be set to [path removed]\ehcache_auto_created_1158327198515. To avoid this warning consider using the CacheManager factory methods to create a singleton CacheManager or specifying a separate ehcache configuration (ehcache.xml) for each CacheManager instance.   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-09-15T00:48:27Z","2012-06-19T03:51:08Z"
"","7345","Spring Beans XML Schema namespace import [SPR-2656]","**[Wilfred Springer](https://jira.spring.io/secure/ViewProfile.jspa?name=springerw)** opened **[SPR-2656](https://jira.spring.io/browse/SPR-2656?redirect=false)** and commented     The namespace import doesn't seem to be required.   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-28T23:45:37Z","2012-06-19T09:37:40Z"
"","7285","SAX parser exception from Hibernate EntityManager after upgrading to Spring 2.0 RC4 [SPR-2596]","**[Wesslan](https://jira.spring.io/secure/ViewProfile.jspa?name=wesslan)** opened **[SPR-2596](https://jira.spring.io/browse/SPR-2596?redirect=false)** and commented  See http://forum.springframework.org/showthread.php?p=77598 for a discussion.  I just upgraded from 2.0-RC3 to 2.0-RC4 and I get the following exception when my applicationContext.xml is being loaded:  ------ Start stacktrace ------ Warning: Caught exception attempting to use SAX to load a SAX XMLReader Warning: Exception was: java.lang.ClassCastException: org.apache.xerces.parsers.SAXParser Warning: I will print the stack trace then carry on using the default SAX parser Warning: Caught exception attempting to use SAX to load a SAX XMLReader Warning: Exception was: java.lang.ClassCastException: org.apache.xerces.parsers.SAXParser Warning: I will print the stack trace then carry on using the default SAX parser org.springframework.web.context.ContextLoader[ERROR] 2006-09-18 13:07:59,078 initWebApplicationContext (ContextLoader.java:205) *  Context initialization failed  ** org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor': Cannot create inner bean '(inner bean)' while setting bean property 'transactionInterceptor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)': Cannot resolve reference to bean 'transactionManager' while setting bean property 'transactionManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionManager' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot resolve reference to bean 'entityManagerFactory' while setting bean property 'entityManagerFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.MappingException: Could not parse mapping document in input stream Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)': Cannot resolve reference to bean 'transactionManager' while setting bean property 'transactionManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionManager' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot resolve reference to bean 'entityManagerFactory' while setting bean property 'entityManagerFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.MappingException: Could not parse mapping document in input stream Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionManager' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot resolve reference to bean 'entityManagerFactory' while setting bean property 'entityManagerFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.MappingException: Could not parse mapping document in input stream Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.MappingException: Could not parse mapping document in input stream Caused by: org.hibernate.MappingException: Could not parse mapping document in input stream at org.hibernate.ejb.Ejb3Configuration.addXMLEntities(Ejb3Configuration.java:456) at org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:348) at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:126) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:197) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:237) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:957) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:924) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:198) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:116) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:304) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:447) at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1133) at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:420) at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:461) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:38) at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:156) at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:120) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:38) at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:156) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:38) at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:119) at org.mortbay.jetty.Server.doStart(Server.java:210) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:38) at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:134) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:327) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:272) at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:177) at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:183) at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:412) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:534) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:488) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:458) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:306) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:273) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:140) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:322) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:115) at org.apache.maven.cli.MavenCli.main(MavenCli.java:256) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315) at org.codehaus.classworlds.Launcher.launch(Launcher.java:255) at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430) at org.codehaus.classworlds.Launcher.main(Launcher.java:375) Caused by: org.dom4j.DocumentException: SAX2 driver class org.apache.xerces.parsers.SAXParser does not implement XMLReader Nested exception: SAX2 driver class org.apache.xerces.parsers.SAXParser does not implement XMLReader at org.dom4j.io.SAXReader.read(SAXReader.java:484) at org.dom4j.io.SAXReader.read(SAXReader.java:343) at org.hibernate.ejb.Ejb3Configuration.addXMLEntities(Ejb3Configuration.java:421) ... 76 more  Embedded error: Error creating bean with name 'org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor': Cannot create inner bean '(inner bean)' while setting bean property 'transactionInterceptor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)': Cannot resolve reference to bean 'transactionManager' while setting bean property 'transactionManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionManager' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot resolve reference to bean 'entityManagerFactory' while setting bean property 'entityManagerFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.MappingException: Could not parse mapping document in input stream SAX2 driver class org.apache.xerces.parsers.SAXParser does not implement XMLReader Nested exception: SAX2 driver class org.apache.xerces.parsers.SAXParser does not implement XMLReader ------ End stacktrace ------  I tested to upgrade Hibernate EM from 3.2 CR1 to 3.2 CR2 but with no result. I also tested to use both Xerces and the default JDK 1.5 XML parser.   ---  **Affects:** 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-09-17T22:09:26Z","2012-06-19T03:50:11Z"
"","7282","You can't use CGLIB-proxying for some classes and JDK dynamic proxies for others [SPR-2593]","**[Wesslan](https://jira.spring.io/secure/ViewProfile.jspa?name=wesslan)** opened **[SPR-2593](https://jira.spring.io/browse/SPR-2593?redirect=false)** and commented  See http://forum.springframework.org/showthread.php?p=77419 for discussion. I use Webwork(2.2.4) as my web framework and I like to proxy its actions using Spring AOP. WW doesn't like its actions to be proxied with JDK dynamic proxies so I have to use CGLIB for this. I use `@Transactional-annotations` with JPA-implementation for my persistence and it uses some final classes, methods and fields so CGLIB-proxying is not an option for this.  So, I have to use CGLIB-proxying for some classes and JDK dynamic proxies for others.  I tried that with  \              \but it seems that using proxy-target-class=""true"" anywhere causes CGLIB to be used for all classes. I found the following JIRA where Rob Harrop says ""You cannot enable/disable target class proxying in invidual blocks. If one block uses it so do all the others."": http://opensource.atlassian.com/projects/spring/browse/SPR-1980   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-09-17T17:37:42Z","2019-01-12T16:28:49Z"
"","7360","Proper Localisation of the Countries Samples [SPR-2671]","**[Werner Keil](https://jira.spring.io/secure/ViewProfile.jspa?name=gefleet)** opened **[SPR-2671](https://jira.spring.io/browse/SPR-2671?redirect=false)** and commented  There are a few issues and rather ""rude"" (automated ?;-) translations into at least German of the Countries sample application. I noticed it first in 2.0 when I tried that one, but am sure, it has been around ever since this sample has been created.  The text ""in Gedächtnis"" should clearly be ""im Speicher"", as nobody ever uses this term unless speaking about a person's memory.  I know, Juergen, you may both be too busy with more pressing tasks than this, so it seems to have been translated by other English native speakers only? As I have localised other Open Source projects and the Multi-Locale features in this one are vital to a project I lead this of course caught my attention.  It is not a real bug, but improving the overall quality of Spring and its samples should also involve such improvements...   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-10-04T03:00:54Z","2012-06-19T03:51:00Z"
"","7309","Spring incorrectly rewraps a dynamic mbean as a ModelMBean [SPR-2620]","**[Wendell Beckwith](https://jira.spring.io/secure/ViewProfile.jspa?name=binyan)** opened **[SPR-2620](https://jira.spring.io/browse/SPR-2620?redirect=false)** and commented  We have a situation of needing to dynamically create  mbeans for log files.  I have created a class that takes a a property an instance of the MBeanExportOperations interface (i.e. a MBeanExporter bean), so that I can reuse its functionality.  Plus when the web app is shut down it will automatically remove the mbeans.  The implementation of the MBeanExportOperations interface      public void registerManagedResource(Object managedResource, ObjectName objectName) throws MBeanExportException {     	Object mbean = createAndConfigureMBean(managedResource, managedResource.getClass().getName());     	try {     		doRegister(mbean, objectName);     	}     	catch (JMException ex) {     		throw new UnableToRegisterMBeanException(     				""Unable to register MBean ["" + managedResource + ""] with object name ["" + objectName + ""]"", ex);     	}     }  does not use the following check that is used in the registerBeanInstance(Object bean, String beanKey).  This is a blocking issue for use and our mbeans are completely usesless.      if (JmxUtils.isMBean(bean.getClass())) {          if (logger.isDebugEnabled()) {               logger.debug(""Located MBean under key ["" + beanKey + ""]: registering with JMX server"");          }          return registerMBean(bean, beanKey);     }    ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-09-21T03:53:13Z","2012-06-19T03:50:07Z"
"","6910","JdkDynamicAopProxy.equals() should be delegated to the target if equals() is defined on a proxied interface [SPR-2220]","**[Wen Zhu](https://jira.spring.io/secure/ViewProfile.jspa?name=bfmj4fj)** opened **[SPR-2220](https://jira.spring.io/browse/SPR-2220?redirect=false)** and commented  JdkDynamicAopProxy.equals(Object other) returns false if the object being compared to is not a Proxy. However, if the both objects implement an interface that defines an equals() method, JdkDynamicAopProxy should delegate the call to the business object since it should be assumed, in such cases, equality can only be interpreted by the domain objects themselves.  For example, if Account is defined as  public interface Account{ // other business methods... boolean equals(Object other); }  public class LocalAccountRecords implements Account{ //..... }  Then, JdkDynamicAopProxy.equals() should invoke the equals() call on the Account interface so long as the object being compared to is an implementation of Account, instead of insisting on it being a JdkDynamicAopProxy too.   ---  **Affects:** 1.2.8  **Attachments:** - [JdkDynamicAopProxy.java](https://jira.spring.io/secure/attachment/11760/JdkDynamicAopProxy.java) (_8.48 kB_)","closed","in: core,","spring-projects-issues","2006-06-29T07:05:28Z","2012-06-19T03:52:38Z"
"","7184","Support Hibernate StatelessSession [SPR-2495]","**[WDA](https://jira.spring.io/secure/ViewProfile.jspa?name=firegambler_2000)** opened **[SPR-2495](https://jira.spring.io/browse/SPR-2495?redirect=false)** and commented  Hello,  since Hibernate 3.1 has a 'StatelessSession' class to use for batch jobs (bulk inserts / updates), it wourld be nice, if  a helper class like 'HibernateDaoSupport' could support that new feature.  best regards, Wolf-Dieter Angerer  ---  **Affects:** 1.2.8, 2.0 RC3  **Attachments:** - [StatelessSessionFactoryBean.java](https://jira.spring.io/secure/attachment/20890/StatelessSessionFactoryBean.java) (_6.41 kB_)  **Issue Links:** - #7587 Add a HibernateDaoSupport / HibernateTemplate exclusively for handling Hibernate Stateless Sessions  19 votes, 20 watchers","open","has: votes-jira,","spring-projects-issues","2006-08-27T23:01:38Z","2019-01-11T19:35:18Z"
"","7472","Lazy load fails in Hibernate OpenSessionInViewFilter after transaction rollback [SPR-2785]","**[wangzheng](https://jira.spring.io/secure/ViewProfile.jspa?name=feiing)** opened **[SPR-2785](https://jira.spring.io/browse/SPR-2785?redirect=false)** and commented  Hi  Hoeller,      I use Hibernate OpenSessionInViewFilter and HibernateTransactionManager in my app, but I found if the transaction rollbacked,  HibernateTransactionManager  will clean Hibernate session.  ---      protected void doRollback(DefaultTransactionStatus status) {     	finally {     		if (!txObject.isNewSessionHolder()) {     			// Clear all pending inserts/updates/deletes in the Session.     			// Necessary for pre-bound Sessions, to avoid inconsistent state.     			txObject.getSessionHolder().getSession().clear();     		}     	}     }  ---  it seems a good idea, but in my app, the ExceptionHandler will go back to previous page and display  the exception message and business data,  since  HibernateTransactionManager  has cleaned Hibernate session,  hibernate lazy load failed,  can you give me some advice?  ---  **Affects:** 1.2.8","closed","status: declined,","spring-projects-issues","2006-11-01T00:45:59Z","2019-01-13T22:45:24Z"
"","7541","spring should not throw IllegalStateException if begin a transaction fail [SPR-2854]","**[wang sheng](https://jira.spring.io/secure/ViewProfile.jspa?name=wang%20sheng)** opened **[SPR-2854](https://jira.spring.io/browse/SPR-2854?redirect=false)** and commented  when use HibernateTransactionManager manage hibernate transaction if begin a transaction fail it would not throw a IllegalStateException  org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is org.hibernate.TransactionException: JDBC begin failed: Caused by: org.hibernate.TransactionException: JDBC begin failed: at org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:68) at org.hibernate.impl.SessionImpl.beginTransaction(SessionImpl.java:1290) at org.springframework.orm.hibernate3.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:494) at org.springframework.transaction.support.AbstractPlatformTransactionManager.handleExistingTransaction(AbstractPlatformTransactionManager.java:354) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:296) at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:257) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:102) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:209) at $Proxy325.synchronizationTsDBPublish(Unknown Source) at com.gemship.vop.service.impl.VoyagePlanServiceImpl.updateVoyagePlan(VoyagePlanServiceImpl.java:195) at com.gemship.vop.service.impl.VoyagePlanServiceImpl.saveOrUpdateVoyagePlan(VoyagePlanServiceImpl.java:316) at com.gemship.vop.service.impl.VoyagePlanServiceImpl.saveOrUpdateVoyagePlans2(VoyagePlanServiceImpl.java:349) at com.gemship.vop.service.impl.VoyagePlanServiceImpl.doPublish(VoyagePlanServiceImpl.java:911) at com.gemship.vop.service.impl.VoyagePlanServiceImpl.doPublish(VoyagePlanServiceImpl.java:877) at sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:318) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:203) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:162) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:107) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:209) at $Proxy329.doPublish(Unknown Source) at sun.reflect.GeneratedMethodAccessor288.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:318) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:203) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:162) at org.springframework.remoting.support.RemoteInvocationTraceInterceptor.invoke(RemoteInvocationTraceInterceptor.java:70) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:209) at $Proxy582.doPublish(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.springframework.remoting.support.RemoteInvocation.invoke(RemoteInvocation.java:181) at org.springframework.remoting.support.DefaultRemoteInvocationExecutor.invoke(DefaultRemoteInvocationExecutor.java:38) at org.springframework.remoting.support.RemoteInvocationBasedExporter.invoke(RemoteInvocationBasedExporter.java:76) at org.springframework.remoting.support.RemoteInvocationBasedExporter.invokeAndCreateResult(RemoteInvocationBasedExporter.java:112) at org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.handleRequest(HttpInvokerServiceExporter.java:117) at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:47) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:806) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:736) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:360) at javax.servlet.http.HttpServlet.service(HttpServlet.java:763) at javax.servlet.http.HttpServlet.service(HttpServlet.java:856) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:966) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:907) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:145) at com.gfa4j.web.SessionFilter.doFilter(Unknown Source) at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:190) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:130) at com.ibm.ws.webcontainer.filter.WebAppFilterChain._doFilter(WebAppFilterChain.java:87) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:696) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:641) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:475) at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:463) at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:92) at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:744) at com.ibm.ws.wswebcontainer.WebContainer.handleRequest(WebContainer.java:1425) at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:92) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:465) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewInformation(HttpInboundLink.java:394) at com.ibm.ws.http.channel.inbound.impl.HttpICLReadCallback.complete(HttpICLReadCallback.java:102) at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:152) at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:213) at com.ibm.io.async.AbstractAsyncFuture.fireCompletionActions(AbstractAsyncFuture.java:195) at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:136) at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:193) at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:725) at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:847) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1498) Caused by: java.sql.SQLException: Io exception: There is no process to read data written to a pipe. at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:134) at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:179) at oracle.jdbc.dbaccess.DBError.throwSqlException(DBError.java:334) at oracle.jdbc.ttc7.TTC7Protocol.handleIOException(TTC7Protocol.java:3678) at oracle.jdbc.ttc7.TTC7Protocol.setAutoCommit(TTC7Protocol.java:562) at oracle.jdbc.driver.OracleConnection.setAutoCommit(OracleConnection.java:1288) at com.mchange.v2.c3p0.impl.NewProxyConnection.setAutoCommit(NewProxyConnection.java:755) at org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:63) ... 76 more [11/21/06 14:39:15:782 GMT+08:00] 00000038 SystemOut     O 14:39:15,769  WARN RemoteInvocationTraceInterceptor:80 - Processing of HttpInvokerServiceExporter remote call resulted in fatal exception: com.gemship.vop.service.VoyagePlanService.doPublish java.lang.IllegalStateException: Cannot deactivate transaction synchronization - not active at java.lang.Throwable.\(Throwable.java:57) at java.lang.Throwable.\(Throwable.java:68) at org.springframework.transaction.support.TransactionSynchronizationManager.clearSynchronization(TransactionSynchronizationManager.java:268) at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:788) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:663) at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:608) at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:328) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:111) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:209) at $Proxy329.doPublish(Unknown Source) at sun.reflect.GeneratedMethodAccessor288.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:318) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:203) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:162) at org.springframework.remoting.support.RemoteInvocationTraceInterceptor.invoke(RemoteInvocationTraceInterceptor.java:70) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:209) at $Proxy582.doPublish(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.springframework.remoting.support.RemoteInvocation.invoke(RemoteInvocation.java:181) at org.springframework.remoting.support.DefaultRemoteInvocationExecutor.invoke(DefaultRemoteInvocationExecutor.java:38) at org.springframework.remoting.support.RemoteInvocationBasedExporter.invoke(RemoteInvocationBasedExporter.java:76) at org.springframework.remoting.support.RemoteInvocationBasedExporter.invokeAndCreateResult(RemoteInvocationBasedExporter.java:112) at org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.handleRequest(HttpInvokerServiceExporter.java:117) at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:47) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:806) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:736) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:360) at javax.servlet.http.HttpServlet.service(HttpServlet.java:763) at javax.servlet.http.HttpServlet.service(HttpServlet.java:856) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:966) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:907) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:145) at com.gfa4j.web.SessionFilter.doFilter(Unknown Source) at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:190) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:130) at com.ibm.ws.webcontainer.filter.WebAppFilterChain._doFilter(WebAppFilterChain.java:87) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:696) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:641) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:475) at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:463) at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:92) at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:744) at com.ibm.ws.wswebcontainer.WebContainer.handleRequest(WebContainer.java:1425) at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:92) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:465) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewInformation(HttpInboundLink.java:394) at com.ibm.ws.http.channel.inbound.impl.HttpICLReadCallback.complete(HttpICLReadCallback.java:102) at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:152) at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:213) at com.ibm.io.async.AbstractAsyncFuture.fireCompletionActions(AbstractAsyncFuture.java:195) at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:136) at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:193) at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:725) at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:847) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1498)  ---  **Affects:** 2.0 final  **Issue Links:** - #7003 Transaction synchronization error with PROPAGATION_REQUIRES_NEW and error obtaining new connection (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2006-11-20T18:14:43Z","2019-01-12T16:51:54Z"
"","7437","OpenSessionInView + Weblogic JTA/Hibernate [SPR-2749]","**[Vitaliy Geraymovych](https://jira.spring.io/secure/ViewProfile.jspa?name=vitaliy)** opened **[SPR-2749](https://jira.spring.io/browse/SPR-2749?redirect=false)** and commented  It seems that OpenSessionInView doesn't work with Weblogic 8.1 JTA/Hibernate. Here is the execution flow:  DEBUG    10/24/06-16:24:03 BaseEvent                 [Finished spring execution.] DEBUG    10/24/06-16:24:03 JtaTransactionManager     [Triggering beforeCommit synchronization] DEBUG    10/24/06-16:24:03 JtaTransactionManager     [Triggering beforeCompletion synchronization] DEBUG    10/24/06-16:24:03 SessionImpl               [setting flush mode to: NEVER] DEBUG    10/24/06-16:24:03 JtaTransactionManager     [Initiating transaction commit] DEBUG    10/24/06-16:24:03 SessionImpl               [before transaction completion] DEBUG    10/24/06-16:24:03 SessionImpl               [after transaction completion] DEBUG    10/24/06-16:24:03 JtaTransactionManager     [Triggering afterCompletion synchronization] DEBUG    10/24/06-16:24:03 SessionImpl               [after transaction completion] DEBUG    10/24/06-16:24:03 TransactionSynchronizationManager [Clearing transaction synchronization] WARN     10/24/06-16:24:03 JDBCExceptionReporter     [SQL Error: 0, SQLState: null] ERROR    10/24/06-16:24:03 JDBCExceptionReporter     [The transaction is no longer active - status: 'Committed'. No further JDBC access is allowed within this transaction.] ERROR    10/24/06-16:24:03 BaseAction            [Unexpected Exception] org.hibernate.exception.GenericJDBCException: could not initialize a collection: [blah#1] at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:103) at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:91) at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43) at org.hibernate.loader.Loader.loadCollection(Loader.java:1926) at org.hibernate.loader.collection.CollectionLoader.initialize(CollectionLoader.java:36) at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:520) at org.hibernate.event.def.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:60) .... Caused by: java.sql.SQLException: The transaction is no longer active - status: 'Committed'. No further JDBC access is allowed within this transaction. at weblogic.jdbc.wrapper.JTSConnection.checkIfRolledBack(JTSConnection.java:219) at weblogic.jdbc.wrapper.JTSConnection.checkConnection(JTSConnection.java:228) at weblogic.jdbc.wrapper.Connection.prepareStatement(Connection.java:356) .... at org.hibernate.loader.Loader.loadCollection(Loader.java:1919) ... 36 more DEBUG    10/24/06-16:24:04 TransactionSynchronizationManager [Removed value [org.springframework.orm.hibernate3.SessionHolder@14de991] for key [org.hibernate.impl.SessionFactoryImpl@1720f5] from thread [ExecuteThread: '24' for queue: 'weblogic.kernel.Default']] DEBUG    10/24/06-16:24:04 OpenSessionInViewFilter   [Closing single Hibernate Session in OpenSessionInViewFilter] DEBUG    10/24/06-16:24:04 SessionFactoryUtils       [Closing Hibernate Session] DEBUG    10/24/06-16:24:04 SessionImpl               [closing session] DEBUG    10/24/06-16:24:04 SessionImpl               [after transaction completion]  Hibernate session and transaction manager configuration: \ \\\ \ \classpath:hibernate.cfg.xml\ \ \ \ \ \ \ \org.hibernate.hql.classic.ClassicQueryTranslatorFactory\ \org.hibernate.cache.TreeCacheProvider\ \true\ \false\ \ \ \ \ \		 \           	  Using HibernateTransactionManager solves the problem with OpenSessionInView but cannot be used as the final solution because of other dependencies on JTA.  Spring documentation states full compatibilty between JTA transaction management and OpenSessionInView.  I am looking for the clarification. Either I am missing something in my application context or Weblogic is not a supported platform for OpenSessionInView with JTA.  I will gladly provide more information if necessary.  Thanks, Vitaliy   ---  **Affects:** 1.2.8","closed","in: data,","spring-projects-issues","2006-10-24T08:22:59Z","2019-01-11T21:01:37Z"
"","7640","Doc: Advice to beans with @Aspect-marked classes don't work [SPR-2954]","**[visionset](https://jira.spring.io/secure/ViewProfile.jspa?name=visionset)** opened **[SPR-2954](https://jira.spring.io/browse/SPR-2954?redirect=false)** and commented  Simplest Advice does not execute.  \  \                                      \  package timeout.helloworld; import org.aspectj.lang.annotation.AfterReturning; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.DeclareParents;  `@Aspect` public class HelloAspect {      @DeclareParents(value=""timeout.helloworld.worlds.*+"",     	defaultImpl=timeout.helloworld.DefaultWorld.class)     public static World mixin;          /*      * Execute the following Advice before any method in the .worlds package or      * subpackage      */     //@AfterReturning(""timeout.helloworld.AnotherAspect.myPointcut()"")     @AfterReturning(""execution (* *(..))"")     public void myAdvice() {     	System.out.println(""Here is my advice"");     	     }	          public void testAdvice() {	     	System.out.println(""HelloAspect.testAdvice()"");     }  }  package timeout.helloworld; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut;  `@Aspect` public class AnotherAspect {      public void doAccessCheck() {}          @Pointcut(""execution(* *(..))"")     public void myPointcut() {}          public void testAdvice() {	     	System.out.println(""AnotherAspect.testAdvice()"");     }  }  package timeout.helloworld; public interface World {      String doSomut();  }  package timeout.helloworld.worlds; public class MyWorld {      public String doSomut() {     	return ""My World Doing something!!!!!!!!!"";     }  }  package timeout.helloworld; public class DefaultWorld implements World {      public String doSomut() {	     	return ""DefaultWorld does something!"";	     }  }  package timeout.helloworld; import org.aspectj.lang.annotation.Aspect; import org.springframework.beans.factory.BeanFactory; import org.springframework.context.support.FileSystemXmlApplicationContext;  `@Aspect` public class HelloRunner {      public static void main(String[] args) {     	     	BeanFactory factory = new FileSystemXmlApplicationContext(     		""build/WEB-INF/classes/applicationContext/test-aspects.xml"");     	     	World world = (World) factory.getBean(""myWorld"");     	     	System.out.println(world.doSomut());          	AnotherAspect obj2 = (AnotherAspect) factory.getBean(""anotherAspect"");		     	obj2.testAdvice();     	HelloAspect obj3 = (HelloAspect) factory.getBean(""helloAspect"");		     	obj3.testAdvice();	     	HelloRunner obj4 = (HelloRunner) factory.getBean(""helloRunner"");		     	obj4.testAdvice();     	     	new HelloRunner().testAdvice();     }          public void testAdvice() {     	     	System.out.println(""HelloRunner.testAdvice()"");     }  }  \ 17-Dec-2006 14:13:29 org.springframework.core.CollectionFactory \ INFO: JDK 1.4+ collections available 17-Dec-2006 14:13:29 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from file [D:\workspace\Timeout\build\WEB-INF\classes\applicationContext\test-aspects.xml] 17-Dec-2006 14:13:29 org.springframework.context.support.AbstractRefreshableApplicationContext refreshBeanFactory INFO: Bean factory for application context [org.springframework.context.support.FileSystemXmlApplicationContext;hashCode=25253977]: org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [org.springframework.aop.config.internalAutoProxyCreator,anotherAspect,helloAspect,myWorld,helloRunner,defaultWorld]; root of BeanFactory hierarchy 17-Dec-2006 14:13:29 org.springframework.context.support.AbstractApplicationContext refresh INFO: 6 beans defined in application context [org.springframework.context.support.FileSystemXmlApplicationContext;hashCode=25253977] 17-Dec-2006 14:13:29 org.springframework.aop.framework.DefaultAopProxyFactory \ INFO: CGLIB2 available: proxyTargetClass feature enabled 17-Dec-2006 14:13:29 org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker postProcessAfterInitialization INFO: Bean 'org.springframework.aop.config.internalAutoProxyCreator' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 17-Dec-2006 14:13:29 org.springframework.context.support.AbstractApplicationContext initMessageSource INFO: Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@1bcdbf6] 17-Dec-2006 14:13:29 org.springframework.context.support.AbstractApplicationContext initApplicationEventMulticaster INFO: Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@16f25a7] 17-Dec-2006 14:13:29 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in factory [org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [org.springframework.aop.config.internalAutoProxyCreator,anotherAspect,helloAspect,myWorld,helloRunner,defaultWorld]; root of BeanFactory hierarchy]  DefaultWorld does something! AnotherAspect.testAdvice() HelloAspect.testAdvice() HelloRunner.testAdvice() HelloRunner.testAdvice() \  Expected multiple output of: ""Here is my Advice""    ---  **Affects:** 2.0 final  **Attachments:** - [advice-to-atAspectBean-test.patch](https://jira.spring.io/secure/attachment/12280/advice-to-atAspectBean-test.patch) (_4.05 kB_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-12-17T00:18:12Z","2012-06-19T03:50:24Z"
"","7225","A set of paging components base on SpringMVC [SPR-2536]","**[vincent lee](https://jira.spring.io/secure/ViewProfile.jspa?name=daquan198163)** opened **[SPR-2536](https://jira.spring.io/browse/SPR-2536?redirect=false)*** and commented  Encapsulate the workflow of show data list by page,to ease the development of cases of that kind.   ---  **Affects:** 1.2.6  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11933/patch.txt) (_24.81 kB_) - [patch.txt](https://jira.spring.io/secure/attachment/11932/patch.txt) (_25.16 kB_)","closed","type: enhancement,","spring-projects-issues","2006-09-05T02:09:04Z","2012-06-19T09:37:22Z"
"","7864","CODE CONTRIBUTION: JPA support for JSF - OpenEntityManagerViewPhaseListener   [SPR-3179]","**[Vincent Giguère](https://jira.spring.io/secure/ViewProfile.jspa?name=vgiguere)** opened **[SPR-3179](https://jira.spring.io/browse/SPR-3179?redirect=false)** and commented  I could not find the JSF equivalent of the org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter support class in Spring.  Existing classes out there provided hibernate-specific PhaseListeners, but none worked using the JPA api.  I have merged code posted by Rick Hightower at http://www.thearcmind.com/confluence/display/SpribernateSF/Configuring+Hibernate,+Spring,+Portlets,+and+OpenInSessionPhaseListener+with+IBM+WebSphere+Portal+Server and code from org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter and created a OpenEntityManagerInViewPhaseListener.  Also, in order to hook it from the servletContext, I have create the OpenEntityManagerInViewPhaseListenerDelegator (which reproduces the same pattern as the org.springframework.web.filter.DelegatingFilterProxy class)  I hope this can help.  Regards,  Vincent Giguère  ---------OpenEntityManagerInViewPhaseListener.java----  package com.covansys.infra.jpa.support;  import javax.faces.context.FacesContext; import javax.faces.event.PhaseEvent; import javax.faces.event.PhaseId; import javax.faces.event.PhaseListener; import javax.persistence.EntityManager; import javax.persistence.EntityManagerFactory; import javax.persistence.PersistenceException;  import org.apache.log4j.Logger; import org.springframework.dao.DataAccessResourceFailureException; import org.springframework.orm.jpa.EntityManagerHolder; import org.springframework.transaction.support.TransactionSynchronizationManager; import org.springframework.web.context.WebApplicationContext; import org.springframework.web.jsf.FacesContextUtils;  /** * The OpenSessionInViewPhaseListener ensures that a JPA Entity Manager is active and bound in the TransactionSynchronizationManager  * at the begining of the JSF lifecycle.  *   * Code from Rick Hightower were used on the Arcmind website at:  * http://www.thearcmind.com/confluence/display/SpribernateSF/Configuring+Hibernate,+Spring,+Portlets,+and+OpenInSessionPhaseListener+with+IBM+WebSphere+Portal+Server  * And ported to JPA using opensource code from the spring in  * org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter  *   * `@author` Vincent Giguère  - mailto:vincent.giguere@gmail.com  * `@since` February 16th 2007   */   public class OpenEntityManagerInViewPhaseListener implements PhaseListener {    private static final long serialVersionUID = 3742147752036645123L;   private final static Logger logger = Logger.getLogger(OpenEntityManagerInViewPhaseListener.class);   private String entityManagerFactoryBeanName;   private static ThreadLocal\ THREADLOCAL = new ThreadLocal\();    private class SynchronizedData {				   private boolean existingTrx = false;   private EntityManagerFactory entityManagerFactory;   private EntityManager entityManager = null;   private int beforeTimes;   private int afterTimes;   }    public void beforePhase(PhaseEvent pe) {         if (pe.getPhaseId() == PhaseId.RESTORE_VIEW)         {        	SynchronizedData synched = getThreadData();        	if (synched.beforeTimes==0) {				        		setupJPAEntityManager(synched);        	}        }         else if (pe.getPhaseId() == PhaseId.RENDER_RESPONSE)        {               	if (THREADLOCAL.get()==null){        		setupJPAEntityManager(getThreadData());					        	}			        }    }    private void setupJPAEntityManager(SynchronizedData aThreadData) {         aThreadData.entityManagerFactory = retrieveEntityManagerFactory();         aThreadData.existingTrx = false;        aThreadData.beforeTimes ++;                      if (TransactionSynchronizationManager.hasResource(aThreadData.entityManagerFactory)) {        	logger.debug(""OpenSessionInViewPhaseListener detected an existing JPA EntityManagerFactory."");        	aThreadData.existingTrx = true;        }        else {        	logger.debug(""OpenSessionInViewPhaseListener is binding a new JPA EntityManagerFactory and creating an new EntityManager"");        	try {        		aThreadData.entityManager = aThreadData.entityManagerFactory.createEntityManager();        		TransactionSynchronizationManager.bindResource(aThreadData.entityManagerFactory, new EntityManagerHolder(aThreadData.entityManager));        	}        	catch (PersistenceException ex) {        		throw new DataAccessResourceFailureException(""Could not open JPA EntityManager"", ex);        	}        }    }    private SynchronizedData getThreadData() {   SynchronizedData td = (SynchronizedData) THREADLOCAL.get();   if (td == null) {   td = new SynchronizedData();   THREADLOCAL.set(td);   } else {   td.beforeTimes++;   }   return td;   }    public void afterPhase(PhaseEvent pe) {		   SynchronizedData data = THREADLOCAL.get();	   if (data.existingTrx) {   logger.debug(""OpenSessionInViewPhaseListener is unbinding JPA EntityManagerFactory and closing EntityManager."");   data.afterTimes++;   TransactionSynchronizationManager.unbindResource(data.entityManagerFactory);				   data.entityManager.close();   THREADLOCAL.set(null);   }					   }    public PhaseId getPhaseId() {   return PhaseId.ANY_PHASE;   }    /**    * Look up the EntityManagerFactory that this filter should use.   * The default implementation looks for a bean with the specified name   * in Spring's root application context.   * `@return` the EntityManagerFactory to use   * `@see` #getEntityManagerFactoryBeanName     */     protected EntityManagerFactory retrieveEntityManagerFactory() {				     WebApplicationContext wac =	FacesContextUtils.getRequiredWebApplicationContext(FacesContext.getCurrentInstance());     return (EntityManagerFactory)     wac.getBean(getEntityManagerFactoryBeanName(), EntityManagerFactory.class);     }    public String getEntityManagerFactoryBeanName() {   return entityManagerFactoryBeanName;   }    public void setEntityManagerFactoryBeanName(String entityManagerFactoryBeanName) {   this.entityManagerFactoryBeanName = entityManagerFactoryBeanName;   }   }  ---  ---------OpenEntityManagerInViewPhaseListenerDelegator.java---- package com.covansys.infra.jpa.support;  import javax.faces.context.FacesContext; import javax.faces.event.PhaseEvent; import javax.faces.event.PhaseId; import javax.faces.event.PhaseListener;  import org.apache.log4j.Logger; import org.springframework.web.context.WebApplicationContext; import org.springframework.web.jsf.FacesContextUtils;  /** * This class is a PhaseListener that serves as a delegates to a * spring configured bean (also a PhaseListener) that will setup an * entity manager when JSF is going through its phases. *  * It is configured through the web.xml file, which must define a context-param name (key:openEntityManagerInViewPhaseListenerBeanName) * containing the name of the spring configured PhaseListener bean to which to delegate. *  * It is meant to reproduce the same pattern as the org.springframework.web.filter.DelegatingFilterProxy / org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter * in non-JSF spring based JPA / WEB applications. *  *  * `@author` Vincent Giguère mailto:vincent.giguere@gmail.com *  * --- CONFIGURATION EXAMPLE ---- *  * web.xml *   \ * \openEntityManagerInViewPhaseListenerBeanName\ * \openEntityManagerInViewPhaseListener\ *   \ * * applicationContext.xml *   \ *  \ *  \	 * * faces-config.xml *   \ *      com.covansys.infra.jpa.support.OpenEntityManagerInViewPhaseListenerDelegator  *   \ *  */  public class OpenEntityManagerInViewPhaseListenerDelegator implements PhaseListener {      private static final long serialVersionUID = 6174762137905374162L;     private final static Logger logger = Logger.getLogger(OpenEntityManagerInViewPhaseListenerDelegator.class);          //This is the key used in web.xml to identify the name of the spring bean to which to delegate.     public static final String DELEGATE_BEAN_NAME_KEY = ""openEntityManagerInViewPhaseListenerBeanName"";     private String delegatingBeanName = null;          /**     * Delegates the afterPhase to the delegate bean     */     public void afterPhase(PhaseEvent phaseEvent) {     	PhaseListener delegate = getDelegatingBean();     	if(delegate != null)     		delegate.afterPhase(phaseEvent);     	else     		logger.error(""OpenEntityManagerInViewPhaseListenerDelegator is registered in faces-config, but its delegate is either not presend or misconfigured."");     }          public PhaseId getPhaseId() {     	return PhaseId.ANY_PHASE;     }          /**     * Delegates the beforePhase to the delegate bean     */     public void beforePhase(PhaseEvent phaseEvent) {          	PhaseListener delegate = getDelegatingBean();     	if(delegate != null)     		delegate.beforePhase(phaseEvent);     	else     		logger.error(""A OpenEntityManagerInViewPhaseListenerDelegator is registered in faces-config, but its delegate is either not presend or misconfigured."");     }               /**      * This method looks up Spring containers trying to find the bean that matches the delegating bean name      * @return A PhaseListener found under the specific name. Null if not found or not a PhaseListener      */     private PhaseListener getDelegatingBean() {     	String beanName = getDelegatingBeanName();     	if (beanName == null) {     		logger.error(""OpenEntityManagerInViewPhaseListenerDelegator could not find OpenEntityManagerInViewPhaseListener bean. Read the javadoc on OpenEntityManagerInViewPhaseListenerDelegator and Review your web.xml, faces-config.xml and applicationContext.xml files."");     		return null;     	}     	     	Object delegateBean = getWebApplicationContext().getBean(beanName);     	if (!(delegateBean instanceof PhaseListener)) {     		logger.error(""OpenEntityManagerInViewPhaseListenerDelegator found a bean named [""+beanName+ ""] but it is not a javax.faces.event.PhaseListener. Review your configuration"");     		return null;     	}     	return (PhaseListener) delegateBean;     }          /**      * This method looks up the servlet context parameters to retrieve the name of the delegate bean in Spring.      * @return A String refering the the delegate bean name in Spring      */     private String getDelegatingBeanName() {     	if (this.delegatingBeanName == null) {     		WebApplicationContext ctx = getWebApplicationContext();     		this.delegatingBeanName = ctx.getServletContext().getInitParameter(OpenEntityManagerInViewPhaseListenerDelegator.DELEGATE_BEAN_NAME_KEY);     	}     	return this.delegatingBeanName;          }          private WebApplicationContext getWebApplicationContext() {     	return FacesContextUtils.getRequiredWebApplicationContext(FacesContext.getCurrentInstance());     }  }  ---  ---  **Affects:** 2.0.2  **Attachments:** - [OpenEntityManagerInViewPhaseListener.java](https://jira.spring.io/secure/attachment/12414/OpenEntityManagerInViewPhaseListener.java) (_5.70 kB_) - [OpenEntityManagerInViewPhaseListener.java](https://jira.spring.io/secure/attachment/12413/OpenEntityManagerInViewPhaseListener.java) (_4.91 kB_) - [OpenEntityManagerInViewPhaseListener.java](https://jira.spring.io/secure/attachment/12402/OpenEntityManagerInViewPhaseListener.java) (_4.87 kB_) - [OpenEntityManagerInViewPhaseListenerDelegator.java](https://jira.spring.io/secure/attachment/12403/OpenEntityManagerInViewPhaseListenerDelegator.java) (_4.73 kB_)  9 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-16T08:52:23Z","2019-01-13T08:09:06Z"
"","7394","oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType'. Unable to Start OC4J Server [SPR-2706]","**[Vigil Bose](https://jira.spring.io/secure/ViewProfile.jspa?name=vbose)** opened **[SPR-2706](https://jira.spring.io/browse/SPR-2706?redirect=false)** and commented  We are currently working on an enterprise project for one of our biggest clients. We are using Spring 2.0 and Spring Web Flow 1.0 Rc4. While deploying the application to Oracle 9ias 10.1.2.0.2 in our development environment, we encountered the following error. We experienced the same error in Spring 2.0 RC2 and it was fixed in Spring 2.0 RC3 by Rick Evans. The ticket No is SPR - 2290. Kindly fix the bug. I will attach the XMLParser Oracle uses so you guys can test it. This is a critical error and we are unable to move forward.  EXCEPTION FROM THE LOG FILE:  ---  06/10/11 17:58:18 Started 06/10/11 17:58:21 drlm: jsp: init 06/10/11 17:58:21 drlm: context: init 06/10/11 17:58:21 drlm: Loading Spring root WebApplicationContext 06/10/11 17:58:52 drlm: Error initializing servlet org.springframework.beans.factory.BeanDefinitionStoreException: Line 8 in XML document from ServletContext resource [/WEB-INF/drlm-servlet.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' at oracle.xml.parser.v2.XMLError.flushErrorHandler(XMLError.java:444) at oracle.xml.parser.v2.XMLError.flushErrors1(XMLError.java:303) at oracle.xml.parser.v2.NonValidatingParser.parseDocument(NonValidatingParser.java:290) at oracle.xml.parser.v2.XMLParser.parse(XMLParser.java:196) at oracle.xml.jaxp.JXDocumentBuilder.parse(JXDocumentBuilder.java:151) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:83) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.evermind.server.http.HttpApplication.loadServlet(HttpApplication.java:2354) at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4795) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: Error preloading servlet javax.servlet.ServletException: Error initializing servlet at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4846) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: drlm: init 06/10/11 17:58:52 drlm: Loading WebApplicationContext for Spring FrameworkServlet 'drlm' 06/10/11 17:58:52 drlm: Error initializing servlet org.springframework.beans.factory.BeanDefinitionStoreException: Line 8 in XML document from ServletContext resource [/WEB-INF/drlm-servlet.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' at oracle.xml.parser.v2.XMLError.flushErrorHandler(XMLError.java:444) at oracle.xml.parser.v2.XMLError.flushErrors1(XMLError.java:303) at oracle.xml.parser.v2.NonValidatingParser.parseDocument(NonValidatingParser.java:290) at oracle.xml.parser.v2.XMLParser.parse(XMLParser.java:196) at oracle.xml.jaxp.JXDocumentBuilder.parse(JXDocumentBuilder.java:151) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:83) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.evermind.server.http.HttpApplication.loadServlet(HttpApplication.java:2354) at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4795) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: Error preloading servlet javax.servlet.ServletException: Error initializing servlet at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4846) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: dwr-invoker: init 06/10/11 17:58:53 drlm: Started  drlm-servlet.xml file:  ---  \  \  \    - Message source for this context, loaded from localized ""messages_xx"" files.   - Could also reside in the root application context, as it is generic,   - but is currently just used within DRLM's web tier.     -->       	              uk.ltd.getahead.dwr.DWRServlet   dwr-invoker    true                            		   		           flowController   				  drlmMainMenuController                                                     	              	   	                                            	   	   	              	  \  ---  **Affects:** 2.0 final  **Attachments:** - [xmlparserv2.jar](https://jira.spring.io/secure/attachment/12019/xmlparserv2.jar) (_872.27 kB_)  **Issue Links:** - #7316 http://www.springframework.org/schema/jee doesn't validate in XMLSpy (_**""is depended on by""**_)","closed","in: core,","spring-projects-issues","2006-10-11T09:11:38Z","2019-01-13T22:45:42Z"
"","6979","oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' in spring-util.xsd. We are unable to start OC4j Server. [SPR-2290]","**[Vigil Bose](https://jira.spring.io/secure/ViewProfile.jspa?name=vbose)** opened **[SPR-2290](https://jira.spring.io/browse/SPR-2290?redirect=false)** and commented  We are getting the below exception when we tried to run the application using spring rc-2. Since we got the same exception ""Spring Form Tag generates a null 'id' when not specified and duplicates the 'name' attribute regardless""  Key:	#6862    Type:	 Bug    Component/s:	SpringWEB    Affects Version/s:	2.0 RC1    Fix Version/s:	2.0 RC2  http://opensource.atlassian.com/projects/spring/browse/SPR-2171  I tried with RC2 release and now I am getting the below exception. Can you please have a look at it.  org.springframework.beans.factory.access.BootstrapException: Unable to initialize group definition. Group resource name [classpath:beanRefContext.xml], factory key [servicelayer-context]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'servicelayer-context' defined in class path resource [beanRefContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlApplicationContext]: Constructor threw exception; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Line 16 in XML document from class path resource [alert-common-context.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'servicelayer-context' defined in class path resource [beanRefContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlApplicationContext]: Constructor threw exception; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Line 16 in XML document from class path resource [alert-common-context.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlApplicationContext]: Constructor threw exception; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Line 16 in XML document from class path resource [alert-common-context.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Line 16 in XML document from class path resource [alert-common-context.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' at oracle.xml.parser.v2.XMLError.flushErrorHandler(XMLError.java:444) at oracle.xml.parser.v2.XMLError.flushErrors1(XMLError.java:303) at oracle.xml.parser.v2.NonValidatingParser.parseDocument(NonValidatingParser.java:290) at oracle.xml.parser.v2.XMLParser.parse(XMLParser.java:196) at oracle.xml.jaxp.JXDocumentBuilder.parse(JXDocumentBuilder.java:151) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:66) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:385) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:340) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:315) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:168) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:113) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:79) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:89) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:283) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:274) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:82) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:78) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:156) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:548) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:352) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:237) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:153) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:254) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:337) at org.springframework.context.access.ContextSingletonBeanFactoryLocator.initializeDefinition(ContextSingletonBeanFactoryLocator.java:136) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:380) at org.springframework.web.context.ContextLoader.loadParentContext(ContextLoader.java:319) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:180) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:83) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.http.HttpApplication.loadServlet(HttpApplication.java:2354) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.http.HttpApplication.findServlet(HttpApplication.java:4795) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.Application.getHttpApplication(Application.java:890) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind[Oracle Application Server Containers for J2EE 10g (10.1.2.0.2)].server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534)  -------------------------------------------------alert-common-context.xml definition ----------------------------  \ \  \                                                                        alert.properties                     jndi.properties                                             	                                                                                               	                                                                                                                                                                                                                                                                                                                                                      		                                                                            AT_FFRM_ADMIN           AT_FFRM_UPDATE           AT_FFRM_READ        \        NOTE: Line 16 in XML document from class path resource [alert-common-context.xml] is where we source spring-util.xsd in alert-common-context.xml file.  ---  **Affects:** 2.0 RC2  **Attachments:** - [xmlparserv2.jar](https://jira.spring.io/secure/attachment/11804/xmlparserv2.jar) (_1.16 MB_)  **Issue Links:** - #8664 CLONE -oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType'. Unable to Start OC4J Server - #11790 oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' is back","closed","in: core,","spring-projects-issues","2006-07-12T08:37:09Z","2019-01-11T19:10:15Z"
"","7054","ErrorsTag JDK1.4 failure [SPR-2365]","**[Victor Kolosov](https://jira.spring.io/secure/ViewProfile.jspa?name=vkolosov)** opened **[SPR-2365](https://jira.spring.io/browse/SPR-2365?redirect=false)** and commented  I'm not sure, but I was about 99% sure that your intentions were to support JDK1.4.  ErrorsTag.java fails on line 97  The signature of addAll(Collection c, Object...a) exists only in JDK1.5  You JDK1.5 specific call: Collections.addAll(errorMessages, getBindStatus().getErrorMessages()); in JDK1.4 it should look like this: errorMessages.addAll(Arrays.asList(getBindStatus().getErrorMessages()));   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-07-28T03:47:01Z","2012-06-19T03:51:05Z"
"","7599","Unable to stop MDP listener permanently [SPR-2913]","**[Venkatav R Kanugula](https://jira.spring.io/secure/ViewProfile.jspa?name=vkanugula)** opened **[SPR-2913](https://jira.spring.io/browse/SPR-2913?redirect=false)** and commented  Hello,  I did plenty of reasearch on this. I posted it in Spring forum. I didn't get  any answer. I am wondering it could be a bug.  Thanks for your support.  Here is the problem.  Unable to stop MDP listener permanently  ---  Hello,  Environment:  ---  Tomcat 5.5.9 Spring 2.0 JMS Provider: WebSphere MQ 5.3 Sun Solaris/Windows 2000  My application reads the Messages successfully, but I am not able to stop the listener permanently. When I do listener.stop() or listener.destroy() or listener.shutdown(), listener stops!, but it is refreshing the Bean Factory immediately and reloading listener again.  Why is it refreshing entire application Context again?  Should I stop the Connection? The Connection Management is done by resourceRef in web.xml which eventually goes to TomCat/context.xml. The Connection is maintained by Tomcat. I have access to Connection Factory only from listener but no Connection.  Here is my configuration. 1) applicationContext.xml  \ \ \ \ \ \","closed","in: messaging,","spring-projects-issues","2006-12-05T02:00:22Z","2019-01-13T22:45:04Z"
"","7010","Reading Properties file with placeholders [SPR-2321]","**[Veit Guna](https://jira.spring.io/secure/ViewProfile.jspa?name=vguna)** opened **[SPR-2321](https://jira.spring.io/browse/SPR-2321?redirect=false)** and commented  It would be nice if there would exist a Properties reader, that supports placeholders like the PropertyPlaceholderConfigurer. The ""problem"" with it is, that it will propagate the properties to the bean context file automatically. I need some kind of PropertiesFactoryBean that supports placeholders only - without propagation. I'm thinking about writing my own Properties reader (reduced PropertyPlaceholderConfigurer), but perhaps some people are interested in it, too and there should be a ""general spring"" solution...   ---  **Affects:** 1.2.6  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-18T22:35:40Z","2012-06-19T09:37:41Z"
"","7348","form:options tag does not support i18n [SPR-2659]","**[Vaibhav S. Puranik](https://jira.spring.io/secure/ViewProfile.jspa?name=pvaibhav)** opened **[SPR-2659](https://jira.spring.io/browse/SPR-2659?redirect=false)** and commented  Currently form:options tag does not support internationalization. There is no way to resolve lables using key. We can support internationalization by many ways. I am describing some ways people have mentioned on forums: (http://forum.springframework.org/showthread.php?t=28342)          ---  **Affects:** 2.0 RC3  **Issue Links:** - #6935 Allow body content of  to specify label (_**""depends on""**_) - #8047 Provide comprehensive I18N support for the Spring form tag library. (_**""is depended on by""**_)  28 votes, 20 watchers","closed","status: bulk-closed,","spring-projects-issues","2006-09-29T05:32:47Z","2019-01-12T03:51:13Z"
"","7006","default-autowire-candidate attribute [SPR-2317]","**[Vadim Berezniker](https://jira.spring.io/secure/ViewProfile.jspa?name=kryptolus)** opened **[SPR-2317](https://jira.spring.io/browse/SPR-2317?redirect=false)** and commented  It seems that being able to set ""autowire-candidate"" to default to ""false"" might be a useful option. I want only certain beans to be injected into other beans via autowiring. Rather than marking the other beans with ""autowire-candidate=false"", I would rather mark certain beans as ""autowire-candidate=true"".   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-07-18T04:24:57Z","2012-06-19T03:50:09Z"
"","7051","xml application context parsing ignores beans namespace [SPR-2362]","**[Uri Boness](https://jira.spring.io/secure/ViewProfile.jspa?name=uboness)** opened **[SPR-2362](https://jira.spring.io/browse/SPR-2362?redirect=false)** and commented  The BeanDefinitionParserDelegate uses element.getTagName().equals(ELEMENT_NAME) to parser the xml element while ignoring the spring beans namspace. This causes errors when a prefix is used for the namepsace in the xml:  \                                                                              currently the only way to overcome the error is to do:    \  \     ---  **Affects:** 2.0 M5, 2.0 RC1, 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-27T11:21:16Z","2012-06-19T03:51:07Z"
"","6936","Errors.reject(...) should probably take the Errors.getNestedPath() in consideration [SPR-2247]","**[Uri Boness](https://jira.spring.io/secure/ViewProfile.jspa?name=uboness)** opened **[SPR-2247](https://jira.spring.io/browse/SPR-2247?redirect=false)** and commented  Currently when registering a global error using the Error.reject(..) method, it just registers the error as global. As I see it, when the errors instance holds a nested path, that path is the context in which the error instance works in, which means that registering a global error should actually register a field error where the field is the nested path.   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-07-06T08:33:42Z","2012-06-19T03:52:45Z"
"","7304","Missing throws clause in UrlBasedRemoteAccessor.afterPropertiesSet blocks sandbox from building [SPR-2615]","**[Ulrik Sandberg](https://jira.spring.io/secure/ViewProfile.jspa?name=ulsa)** opened **[SPR-2615](https://jira.spring.io/browse/SPR-2615?redirect=false)** and commented  When trying to build sandbox from CVS as of Sep 20, it fails with:      [javac] C:\src\spring\sandbox\src\org\springframework\jms\remoting\JmsInvokerClientInterceptor.java:71: afterPropertiesSet() in org.springframework.jms.remoting.JmsInvokerClientInterceptor cannot override afterPropertiesSet() in org.springframework.remoting.support.UrlBasedRemoteAccessor; overridden method does not throw javax.jms.JMSException     [javac]     public void afterPropertiesSet() throws JMSException {     [javac]                     ^     [javac] C:\src\spring\sandbox\src\org\springframework\jms\remoting\JmsInvokerProxyFactoryBean.java:39: afterPropertiesSet() in org.springframework.jms.remoting.JmsInvokerProxyFactoryBean cannot override afterPropertiesSet() in org.springframework.remoting.support.UrlBasedRemoteAccessor; overridden method does not throw javax.jms.JMSException     [javac]     public void afterPropertiesSet() throws JMSException {     [javac]                     ^  The reason is that afterPropertiesSet in UrlBasedRemoteAccessor relaxes the throws clause to no exceptions thrown. Since subclasses need to throw checked exceptions in afterPropertiesSet (a reasonable demand, I believe), they won't compile.  The following change to UrlBasedRemoteAccessor fixed the compile issue:  <       public void afterPropertiesSet() { —  > public void afterPropertiesSet() throws Exception {    ---  **Affects:** 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-09-20T08:29:20Z","2012-06-19T03:50:24Z"
"","7538","IllegalStateException thrown by jboss 4.0.5 if PROPAGATION_REQUIRES_NEW is used in combination with HibernateTemplate [SPR-2851]","**[Ulrich Winter](https://jira.spring.io/secure/ViewProfile.jspa?name=uwinter)** opened **[SPR-2851](https://jira.spring.io/browse/SPR-2851?redirect=false)** and commented  Two spring-beans using HibernateTemplate. The first uses PROPAGATION_REQUIRED, the second PROPAGATION_REQUIRES_NEW as transaction attribute.  This works fine with jboss 4.0.2 but in jboss 4.0.5 the following exception is thrown: IllegalStateException: Trying to change transaction in enlist!  This may be related to #6084 but the workaround suggested there does not work in my case. Even with transactionSynchronization=SYNCHRONIZATION_NEVER and hibernate.connection.release_mode=after_statement the exception occurs.  What makes me wonder is, that the same setup using JdbcTemplate works fine in both jboss 4.0.2 and 4.0.5. I also did the transaction suspension / resume using JTA and javax.transaction.TransactionManager and that worked fine too with hibernate API and jboss 4.0.5 .  So it seems that HibernateTemplate is part of the problem.  Remarks: I checked that with spring 1.2.5, 1.2.8 and 2.0.final - all behaved the same. Currently my workaround is to use HibernateTransactionManager instead of JTATransactionManager  and that works even for JdbcTemplate based DAOs.  ---  **Affects:** 1.2.5, 1.2.8, 2.0 final  **Attachments:** - [IllegalStateException.txt](https://jira.spring.io/secure/attachment/12230/IllegalStateException.txt) (_2.89 kB_) - [my-webapp.zip](https://jira.spring.io/secure/attachment/12231/my-webapp.zip) (_20.60 kB_)  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-11-20T03:00:29Z","2019-01-11T21:36:42Z"
"","7331","queryForList() does not see column names when using MySQL Connector/J 5.0.2 [SPR-2642]","**[Trenton Lipscomb](https://jira.spring.io/secure/ViewProfile.jspa?name=trenton)** opened **[SPR-2642](https://jira.spring.io/browse/SPR-2642?redirect=false)** and commented  When running this query:  select name, count(*) as quantity, sum(price) * 100 as total_in_pennies from orders group by name  queryForMap returns the empty string instead of ""total_in_pennies"" for the column. All other columns behave correctly. Here's some test data:  create table orders ( id int not null auto_increment, name varchar(255) not null, price double not null, primary key (id)     )  insert orders (name, price) values (""foo"", 19.95); insert orders (name, price) values (""foo"", 29.95); insert orders (name, price) values (""foo"", 29.95); insert orders (name, price) values (""foo"", 19.95); insert orders (name, price) values (""bar"", 10); insert orders (name, price) values (""bar"", 20);  I'll attach code which reproduces the problem.   ---  **Affects:** 1.2.8, 2.0 RC4  **Attachments:** - [DbTest.java](https://jira.spring.io/secure/attachment/11993/DbTest.java) (_3.35 kB_) - [DbTest.java](https://jira.spring.io/secure/attachment/11990/DbTest.java) (_3.14 kB_)","closed","in: core,","spring-projects-issues","2006-09-26T12:51:17Z","2019-01-11T21:11:29Z"
"","7215","Support whitespace in FieldRetrievingFactoryBean and PropertyPathFactoryBean [SPR-2526]","**[Travis McLeskey](https://jira.spring.io/secure/ViewProfile.jspa?name=motravo)** opened **[SPR-2526](https://jira.spring.io/browse/SPR-2526?redirect=false)** and commented  #5594 added trimming of any whitespace surrounding the values of FieldRetrievingFactoryBean.targetField and FieldRetrievingFactoryBean.staticField. It would be nice to also have:  - the same treatment for PropertyPathFactoryBean - whitespace removal from the bean's id (since I think that is now the typical way to configure the bean) - whitespace removal from anywhere in the String (not just the beginning or the end)  Then, you'll be able to break a long  or  tag across multiple lines. For example:    becomes    which is a big improvement if your editor window isn't very wide.  ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-01T17:00:10Z","2019-01-11T19:16:46Z"
"","7174","AnnotationBeanConfigurerAspect should correctly handle inheritance [SPR-2485]","**[Travis McLeskey](https://jira.spring.io/secure/ViewProfile.jspa?name=motravo)** opened **[SPR-2485](https://jira.spring.io/browse/SPR-2485?redirect=false)** and commented  When more than one class in an inheritance chain has the `@Configurable` annotation, the AnnotationBeanConfigurerAspect aspect will configure the bean as many times as there are classes in the chain with that annotation.  Say you have:  ---  `@Configurable` class SuperBean { private String superProp; public void setSuperProp( String p ) { superProp = p; } }  class SubBean extends SuperBean { private String subProp; public void setSubProp( String p ) { subProp = p; } SubBean() { } }  ---  Assume that you've woven in the AnnotationBeanConfigurerAspect, and you've created an application context that declares a bean named ""SubBean"".  Now, when you call ""new SubBean()"", it implicitly calls super(), which calls its super(), and so on. The pointcut defined in AnnotationBeanConfigurerAspect matches each invocation for which the super class is `@Configurable`, so configureBean gets called each time.  If `@Configurable` inheritance is not intended to be supported, then it the `@Inherited` meta-annotation should be removed from it. However, by not supporting multiple `@Configurable` classes in an inheritance chain, the implementation of #7173 ('support ""before"" advice in AnnotationBeanConfigurerAspect') will not be as useful, since a superclass constructor using ""before"" advice would not have access to injected property values.  I'm not sure what the proper structure is for AbstractBeanConfigurerAspect and AnnotationBeanConfigurerAspect, but I think a solution to this problem will require the Class object containing the advised method (as opposed to the runtime class of the advised object, which is always SubBean in the above example) to be passed to configureBean. That Class object can be accessed in the advice block using thisJoinPoint.getSignature().getDeclaringType().  Then, if AnnotationBeanWiringInfoResolver.resolveWiringInfo takes a Class object as an argument, it can use that as the bean name it returns. Actually, resolveWiringInfo should also look up the `@Configurable` annotation on that Class object, so that the user can specify a different bean name for each class in the inheritance chain.  In the spring config file, the user would just define a separate bean for each class in the inheritance chain.  Caveats: - supporting autowiring would require additional work, since a call to configureBean would need to only partially configure the bean object - other implementors of the BeanWiringInfoResolver interface would need to be modified to take a Class method argument to resolveWiringInfo.  ---  **Affects:** 2.0 RC3  **Attachments:** - [SPR-2485.patch](https://jira.spring.io/secure/attachment/12406/SPR-2485.patch) (_7.17 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-26T14:19:46Z","2019-01-13T08:54:00Z"
"","7173","Support ""before"" advice in AnnotationBeanConfigurerAspect [SPR-2484]","**[Travis McLeskey](https://jira.spring.io/secure/ViewProfile.jspa?name=motravo)** opened **[SPR-2484](https://jira.spring.io/browse/SPR-2484?redirect=false)** and commented  AnnotationBeanConfigurerAspect extends AbstractBeanConfigurerAspect, which declares ""after"" advice. However, it would be useful to be able to perform object injections before a constructor runs, so that the constructor code can use the injected values.   ---  **Affects:** 2.0 RC3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-26T13:28:20Z","2019-01-11T19:33:40Z"
"","7171","aspectjtools.jar is missing from spring-framework-2.0-rc3-with-dependencies.zip [SPR-2482]","**[Travis McLeskey](https://jira.spring.io/secure/ViewProfile.jspa?name=motravo)** opened **[SPR-2482](https://jira.spring.io/browse/SPR-2482?redirect=false)** and commented  In the Spring 2.0 RC3 distribution that includes dependencies, lib/readme.txt says that aspectjtools.jar should exist in the lib directory, but the file is missing. When building with ant, no error is reported, but the ""buildaspects"" target doesn't execute because ""aspectj.available"" is false.   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-25T14:44:50Z","2012-06-19T03:50:45Z"
"","7867","Tooling API: Provide pluggable bean name generator for nameless top-level beans [SPR-3182]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-3182](https://jira.spring.io/browse/SPR-3182?redirect=false)** and commented  The approach of generating a bean name for nameless top-level beans implemented in BeanDefinitionReaderUtils is too simplistic. If an XML config is parsed in isolation and the BeanDefinitions are reused in a different context with other (isolatedly parsed) XML configs then this approach fails. For details please refer to http://springide.org/project/ticket/470  For Spring IDE we need a way to provide our own bean name generator implementation (e.g. which uses the bean's file resource in addition to the counter).  So how about adding a new method ""BeanNameGenerator getBeanNameGenerator()"" to the ReaderContext? The corresponding implementation of the BeanNameGenerator interface will be set via XmlBeanDefinitionReader.  Cheers, Torsten   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-17T11:27:32Z","2012-06-19T03:50:45Z"
"","7684","Tooling API: Problem reporting facility not used consistently - llegalArgumentExceptions are thrown instead [SPR-2998]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-2998](https://jira.spring.io/browse/SPR-2998?redirect=false)** and commented  Instead leveraging the nice ProblemReport API during XML parsing at various places an IllegalArgumentException (directly or indirectly via Assert) is thrown instead. This is e.g. the case with AbstractBeanDefinitionParser, NamespaceHandlerSupport and UtilNamespaceHandler.  Please refer to the attached patch for the fixes.   ---  **Affects:** 2.0.1  **Attachments:** - [Spring20_LeverageProblemReportAPI.patch](https://jira.spring.io/secure/attachment/12310/Spring20_LeverageProblemReportAPI.patch) (_5.07 kB_)","closed","in: core,","spring-projects-issues","2006-12-30T06:39:02Z","2012-06-19T03:51:04Z"
"","7683","Tooling API: Add new event to ReaderEventListener interface for registering the BeanDefinition default values [SPR-2997]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-2997](https://jira.spring.io/browse/SPR-2997?redirect=false)** and commented  There's currently no support for getting access to the BeanDefinition default values which are provides as attributes of the beans root tag.  Attached you can find a patch which introduces a new reader event for registering these default values (including the source location of the beans root tag).   ---  **Affects:** 2.0.1  **Attachments:** - [Spring20_DefaultValues_with_SourceLocation_and_ReaderEvent.patch](https://jira.spring.io/secure/attachment/12309/Spring20_DefaultValues_with_SourceLocation_and_ReaderEvent.patch) (_6.32 kB_)","closed","type: enhancement,","spring-projects-issues","2006-12-30T06:30:18Z","2012-06-19T03:51:04Z"
"","7682","Tooling API: BeanDefinitionStoreException should provide a source location [SPR-2996]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-2996](https://jira.spring.io/browse/SPR-2996?redirect=false)** and commented  BeanDefinitionStoreException isn't leveraging BeanMetadataElement.getSource(). For Spring IDE we need the source location for this exception. This gives us a chance to hint the user for stuff like ""Unnamed bean definition specifies neither 'class' nor 'parent' nor 'factory-bean' -  can't generate bean name"" with the corresponding source location.  For details please refer to the attached patch.   ---  **Affects:** 2.0.1  **Attachments:** - [Spring20_BeanDefinitionStoreException_with_SourceLocation.patch](https://jira.spring.io/secure/attachment/12308/Spring20_BeanDefinitionStoreException_with_SourceLocation.patch) (_15.64 kB_)","closed","type: enhancement,","spring-projects-issues","2006-12-30T06:05:54Z","2012-06-19T03:50:57Z"
"","7756","tag calls an Object's getAsText() method even when specifying an ""itemValue"" in the tag [SPR-3070]","**[Tor Tuga](https://jira.spring.io/secure/ViewProfile.jspa?name=tortuga)** opened **[SPR-3070](https://jira.spring.io/browse/SPR-3070?redirect=false)** and commented  When using a \ tag like this:       Where 'states' is a List of State objects. The customPropertyEditor (CPE) for the State object is called for the property 'id', which is improper since the CPE is for State objects only. Of course, if I do the following, everything works fine since the State object is used:       It seems that the CPE should never be called if an 'itemValue' is specified, and instead the CPE for whatever type of Object the 'itemValue' is should be used instead. For instance, if 'id' is a custom Object called MyId, then the CPE for Objects of type MyId should be used.  This problem also occurs for all Form tags inside the 'value' property, including cases like this where the Country CPE is erroneously called:    whereas removing the '.id' works since the Country CPE is called:    Thanks!   ---  **Affects:** 2.0.2","closed","in: web,","spring-projects-issues","2007-01-23T11:53:18Z","2019-01-11T16:42:29Z"
"","7601","getAsText method for a CustomPropertyEditor not called with  tag [SPR-2915]","**[Tor Tuga](https://jira.spring.io/secure/ViewProfile.jspa?name=tortuga)** opened **[SPR-2915](https://jira.spring.io/browse/SPR-2915?redirect=false)** and commented  I am using the (relatively) new \ tags, but having the problem that my getAsText() method is not called on my CustomPropertyEditor. However, the setAsText() method gets called fine! I also know the value persists properly because if I change back from a \ tag to the  tags, it works again (I should clarify that the  tag was not using the getAsText() method either, I was performing comparision by retrieving the id and comparing it directly). This is a snippet from my jsp:        paymentMethodTypes is a list of all possible PaymentMethodTypes. The list populates fine, but the matching value is never 'selected' from the list, so it is as if no selection is made.   ---  **Affects:** 2.0.1  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2006-12-05T05:17:45Z","2012-06-19T03:50:15Z"
"","7570","Data Binding to Class Extending Abstract Class Uses Volatile Abstract Methods Instead of Overridden Final Method [SPR-2882]","**[Tor Tuga](https://jira.spring.io/secure/ViewProfile.jspa?name=tortuga)** opened **[SPR-2882](https://jira.spring.io/browse/SPR-2882?redirect=false)** and commented  When binding to a class, for example RealBaseEntity which extends the abstract class BaseEntity, Spring uses the volatile method from the abstract class to determine the setting type, resulting in the ClassCastException:  Failed to convert property value of type [java.lang.String] to required type [java.io.Serializable] for property realBaseEntity.id; nested exception is java.lang.ClassCastException: java.lang.String  When I do either a 'getDeclaredMethods()' or 'getMethods()' through reflection on RealBaseEntity, I get the following:  public final java.lang.Short com.test.RealBaseEntity.getId() public final void com.test.RealBaseEntity.setId(java.lang.Short) public volatile java.io.Serializable com.test.RealBaseEntity.getId() public volatile void com.test.RealBaseEntity.setId(java.io.Serializable)  Clearly, Spring must be using the volatile method and not the final method which overrides the abstract class. The abstraction is necessary because there are certain basic functions which need to apply to all child classes. I have attached both 'RealBaseEntity' and 'BaseEntity' as examples.  This issue is similar to SPR-2563  ---  **Affects:** 2.0 final, 2.0.1  **Attachments:** - [BaseEntity.java](https://jira.spring.io/secure/attachment/12242/BaseEntity.java) (_297 bytes_) - [DumpMethods.zip](https://jira.spring.io/secure/attachment/12245/DumpMethods.zip) (_2.86 kB_) - [RealBaseEntity.java](https://jira.spring.io/secure/attachment/12244/RealBaseEntity.java) (_400 bytes_) - [RealBaseEntity.java](https://jira.spring.io/secure/attachment/12243/RealBaseEntity.java) (_430 bytes_)  **Issue Links:** - #7415 Dealing with covariant properties in CachedIntrospectionResults (_**""depends on""**_) - #7252 Data Binding To Class Extending Generic Class Results in TypeMismatch Error","closed","type: enhancement,","spring-projects-issues","2006-11-27T10:37:23Z","2019-01-11T21:33:23Z"
"","7553","tag returns password to web browser if form returned with errors [SPR-2866]","**[Tor Tuga](https://jira.spring.io/secure/ViewProfile.jspa?name=tortuga)** opened **[SPR-2866](https://jira.spring.io/browse/SPR-2866?redirect=false)** and commented  When using the  tag, if the page is returned for correction of input, the submitted password is also returned which is a security vulnerability since it is then embedded in the HTML. This tag should never render any value at all!   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-22T10:37:38Z","2012-06-19T03:50:22Z"
"","7252","Data Binding To Class Extending Generic Class Results in TypeMismatch Error [SPR-2563]","**[Tor Tuga](https://jira.spring.io/secure/ViewProfile.jspa?name=tortuga)** opened **[SPR-2563](https://jira.spring.io/browse/SPR-2563?redirect=false)** and commented  If I try to bind inside a .jsp page to a form object which accesses an object whose class extends a generic class, I get a typeMismatch error. If I replace my generic placeholder 'PK' in the generic class with my expected data type of 'Short', the typeMismatch error goes away. Obviously, this defeats the benefits of using generics.  I have attached two files, one called 'State.java' which inherits the generic class, and 'BaseNamedEntity.java' which is the generic class.  I consider this a bug instead of an improvement because it seems the generics shouldn't cause a problem.  Please let me know if there is any additional information I can provide.  ---  **Affects:** 2.0 RC3  **Attachments:** - [BaseNamedEntity.java](https://jira.spring.io/secure/attachment/11947/BaseNamedEntity.java) (_785 bytes_) - [State.java](https://jira.spring.io/secure/attachment/11946/State.java) (_195 bytes_)  **Issue Links:** - #7570 Data Binding to Class Extending Abstract Class Uses Volatile Abstract Methods Instead of Overridden Final Method","closed","type: enhancement,","spring-projects-issues","2006-09-08T08:37:36Z","2019-01-11T19:20:17Z"
"","7070","Typo, Concept Clarification, and Example Corrections [SPR-2381]","**[Tor Tuga](https://jira.spring.io/secure/ViewProfile.jspa?name=tortuga)** opened **[SPR-2381](https://jira.spring.io/browse/SPR-2381?redirect=false)** and commented  Page 17 Text: ""When using XM-based configuration"" should read: ""When using XML-based configuration""  Page 20 Text: ""of the bean itsel being in control"" should read: ""of the bean itself being in control""  Page 22 The following text is worded confusingly: ""This does mean that a Spring container which has loaded correctly, can later generate an exception when you request a bean, if there is a problem creating that bean or one of its dependencies."" Perhaps instead: ""This means that a Spring container which has loaded correctly can later generate an exception when you request a bean if there is a problem creating that bean or one of its dependencies.  Page 23 Text:  \  \\\ should read:  \ \  Page 24: The following code snippet should use the new style to promote good style: \\\ \\\ \\1\\ change to: \ \ \  Page 25: The following code snippet should use the new style to promote good style: \\7500000\\ \\42\\ change to: \ \  Page 26: Text: ""actually instantiated... if the 'client' bean"" should read: ""actually instantiated. If the 'client' bean""  Page 34: Unless I misunderstood something, the example below seems incorrect since the \ tag with ref="""" value should on its  own create a dependency. A different example that doesn't inherently create this dependency with an XML tag might be better  (or perhaps even a compare/contrast example): \ \ \        Page 35: Text: ""element; to wit..."" should read: ""element; to wit:""  Page 39: The following text is confusing: ""This also means that you can define more than one bean definition for a single class, and then Spring will create exactly  two instances of that particular class, each with their own particular configuration.""  Page 47: ""destroy()"" is listed in the following text as a method name that is not Spring-specific, but the DisposableBean interface  referred to uses ""destroy()"", so perhaps a different method name could be chosen: ""typically finds oneself writing methods with names such as init(), initialize(), dispose(), destroy(), etc.""  Page 51: Is 'scope' inherited by the child, or is it always taken from the child definition? Since 'singleton' is always taken from the  child I assume 'scope' is as well. The text between the two code snippets needs to be clarified on this matter.  Page 51: Text: ""and it is also defined as abstract."" should read (for clarity): ""and it is also implicitly abstract.""  Page 53: Text: ""post-processors explcitly have to be"" should read: ""post-processors explicitly have to be""  Page 58: Text: ""providing access to messages in, i18n-style"" should read: ""providing access to messages in i18n-style""  Page 58-60 (Section 3.8.1): There is no example on retrieving a message using an injected MethodSource. Instead, all examples use the 'ClassPathXmlApplicationContext' to create a MessageSource for use in the method.  Page 63: Text: ""delimiters (comma, semi-colon and space) and use"" should read: ""delimiters (comma, semi-colon and whitespace) and use""   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-08-03T06:19:27Z","2012-06-19T03:51:17Z"
"","7556","Can't use util:list for circular dependencies. [SPR-2869]","**[Tomasz Blachowicz](https://jira.spring.io/secure/ViewProfile.jspa?name=tblachowicz)** opened **[SPR-2869](https://jira.spring.io/browse/SPR-2869?redirect=false)** and commented  I need to have a simple circular dependency. Instance of bean of class A has a list of instances of bean of class A. It's easily doable while using simple spring configuration syntax, but when I try to incorporate  thing I get FactoryBeanNotInitializedException.  Detailed explanation of issue with sample code you can find at support forum: http://forum.springframework.org/showthread.php?t=31766   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-11-23T03:39:33Z","2012-06-19T03:50:44Z"
"","7433","Inner bean with unspecified scope, defined within abstract parent outer bean, does not inherit prototype scope from concrete child outer bean. [SPR-2745]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-2745](https://jira.spring.io/browse/SPR-2745?redirect=false)** and commented  With Spring 2.0 final, this xml snippet fails when trying to get ""child"":                                                      The problem is that the anonymous inner bean should inherit the prototpe scope of the concrete ""child"" bean, but seems to inherit the singleton scope of the abstract ""parent"" bean.  Error message:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'child' defined in class path resource [bug/bug.xml]: Cannot create inner bean 'bug.Inner#198891' while setting bean property 'inner'; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Inner bean definition 'bug.Inner#198891' for bean property 'inner' has scope 'singleton' but containing bean definition 'child' does not. Mark the inner bean definition with scope 'prototype' instead. at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:205) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:111) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:955) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:729) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:416) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:642) at bug.Bug.main(Bug.java:12) at java.lang.reflect.Method.invoke(Native Method) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)  This problem does not occur when the correct scope is explicitly stated on the anonymous inner bean:                                                      It also does not occur when there is no abstract parent bean:                                              ---  **Affects:** 2.0 final  **Attachments:** - [bug.xml](https://jira.spring.io/secure/attachment/12060/bug.xml) (_2.27 kB_) - [bug.zip](https://jira.spring.io/secure/attachment/12061/bug.zip) (_1.78 kB_)","closed","in: core,","spring-projects-issues","2006-10-23T20:13:33Z","2012-06-19T03:50:15Z"
"","7432","Behavior when using non-singleton outer bean with ""unspecified scope"" inner bean in Spring 2.0 is not backwards compatible. [SPR-2744]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-2744](https://jira.spring.io/browse/SPR-2744?redirect=false)** and commented  When using the 1.2 version of the dtd with Spring 2.0 RC3 onwards, this bean definition no longer works correctly, though it worked fine with previous versions.  \                                            The problem is that ""inner"" should inherit the prototype scope from ""outer"", but it doesn't.  Error message:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'outer' defined in class path resource [bug/bug.xml]: Cannot create inner bean 'bug.Inner#66a22b' while setting bean property 'inner'; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Inner bean definition 'bug.Inner#66a22b' for bean property 'inner' has scope 'singleton' but containing bean definition 'outer' does not. Mark the inner bean definition with scope 'prototype' instead. at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:205) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:111) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:955) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:729) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:416) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:642) at bug.Bug.main(Bug.java:12)  When the dtd is switched to the 2.0 version, and the scope attribute is used, the problem is resolved:  \                                            This means lots of valid old configuration files with fail on Spring 2.0 final. I converted all of our configuration files to use the new schema syntax.   ---  **Affects:** 2.0 RC3, 2.0 RC4, 2.0 final  **Attachments:** - [bug.xml](https://jira.spring.io/secure/attachment/12058/bug.xml) (_2.02 kB_) - [bug.zip](https://jira.spring.io/secure/attachment/12059/bug.zip) (_1.72 kB_)","closed","in: core,","spring-projects-issues","2006-10-23T19:52:01Z","2012-06-19T03:50:41Z"
"","6984","allow InterfaceBasedMBeanInfoAssembler to expose first implemented managed interface as class descriptor [SPR-2295]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-2295](https://jira.spring.io/browse/SPR-2295?redirect=false)** and commented  I'm using InterfaceBasedMBeanInfoAssembler with WebLogic Server (8.1sp5), so I'm using exposeClassDescriptor=true. I make sure all of the objects I want to manage using JMX are implementing one of a limited set of ""managed"" interfaces, so I only need to put those interfaces on the system classpath.  This works fine when the managed object is a proxy, because I can configure ProxyFactoryBean such, that the first proxyInterface is the ""managed"" one, and that is then exposed as the class descriptor by InterfaceBasedMBeanInfoAssembler. But when the managed object is just a regular object implementing a ""managed"" interface, InterfaceBasedMBeanInfoAssembler always exposes the real class name. This means I either need to put all those classes on the system classpath, or unnecessarily use a proxy for all those beans...  So I would like to configure InterfaceBasedMBeanInfoAssembler such, that it exposes as the class descriptor the first interface from the list of managedInterfaces (or interfaceMappings for the bean key) that's implemented by the managed object. I tried extending InterfaceBasedMBeanInfoAssembler, but I can't acces the managedInterfaces or interfaceMappings attributes from subclasses. Moreover, the bean key is not available in the getClassForDescriptor() method that I'd need to override.  Currently, I've copy-pasted InterfaceBasedMBeanInfoAssembler, and added this code:  private boolean exposeFirstManagedInterface = false;  /** * Sets whether to expose the first interface in the interfaceMappings or managedInterfaces * implemented by the target, instead of the actual target class. Default is false.   */   public void setExposeFirstManagedInterface(boolean exposeFirstManagedInterface) {   this.exposeFirstManagedInterface = exposeFirstManagedInterface;   }  protected Class getClassForDescriptor(Object managedBean /* , String beanKey \*/ ) { Class firstManagedInterface = null; if (exposeFirstManagedInterface) { firstManagedInterface = getFirstManagedInterface(managedBean /* , beanKey */ ); } return firstManagedInterface != null ? firstManagedInterface : super.getClassForDescriptor(managedBean); }  private Class getFirstManagedInterface(Object managedBean /* , String beanKey */ ) { Class[] ifaces = null;      // can't do this currently, because beanKey isn't known     // if (this.interfaceMappings != null) {     //    ifaces = (Class[]) this.interfaceMappings.get(beanKey);     // }          if (ifaces == null) {         ifaces = this.managedInterfaces;     }          if (ifaces == null) {         return null;     }          for (int i = 0; i < ifaces.length; i++) {         if (ifaces[i].isInstance(managedBean)) {             return ifaces[i];         }     }          return null;  }  I also considered always comparing super.getClassForDescriptor(managedBean) to managedBean.getClass(), and only expose the first managed interface implemented when they're equal, but I don't think it's useful.  Is it possible to add this functionality to the standard InterfaceBasedMBeanInfoAssembler (I think it could be useful to other people as well)? Otherwise, can you adapt the standard classes such, that I can implement this in a subclass? Concretely: add a protected getClassForDescriptor(Object managedBean, String beanKey) to AbstractReflectiveMBeanInfoAssembler, by default delegating to the current variant, and add protected getters for managedInterfaces and interfaceMappings to InterfaceBasedMBeanInfoAssembler.   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-07-13T00:02:10Z","2012-06-19T09:37:45Z"
"","7846","SPR-2965 breaks ContextSingletonBeanFactoryLocator [SPR-3160]","**[Tom Mack](https://jira.spring.io/secure/ViewProfile.jspa?name=tommack)** opened **[SPR-3160](https://jira.spring.io/browse/SPR-3160?redirect=false)** and commented  I use the ContextSingletonBeanFactoryLocator with a beanRefContext.xml file that declares several different configuration ""flavors"" (this file is shared by all my apps, but it defines one ClassPathXmlApplicationContext for the web server, another for the stand alone servers, etc.). Since #7651 in 2.0.2, when I call BeanFactoryRef.release() for one flavor (say, a stand alone server), all of the other configuration ""flavors"" mentioned in the beanRefContext.xml are initialized (which for me causes classpath issues because they aren't meant to be initialized).  Here's a chunk of the stack trace (top and bottom trimmed):      at java.lang.reflect.Constructor.newInstance(Unknown Source)     at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:84)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:71)     at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:150)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:745)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:683)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:388)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:250)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:247)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:161)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:236)     at org.springframework.context.support.AbstractApplicationContext.getLifecycleBeans(AbstractApplicationContext.java:816)     at org.springframework.context.support.AbstractApplicationContext.stop(AbstractApplicationContext.java:791)     at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:609)     at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:578)     at org.springframework.context.access.ContextSingletonBeanFactoryLocator.destroyDefinition(ContextSingletonBeanFactoryLocator.java:149)     at org.springframework.beans.factory.access.SingletonBeanFactoryLocator$1.release(SingletonBeanFactoryLocator.java:437)     at com.cannontech.spring.YukonSpringHook.shutdownContext(YukonSpringHook.java:93)     at com.cannontech.common.login.ClientSession.doRemoteLogin(ClientSession.java:302)  If this isn't clear, I can attach the beanRefContext.xml that I'm using, but it is pretty much straight out of the JavaDocs for SingletonBeanFactoryLocator.  ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-02-13T12:56:16Z","2019-01-11T17:34:39Z"
"","7815","HttpInvokerClientInterceptor broke backwards compatibility for programmatic initialization [SPR-3129]","**[Tom Mack](https://jira.spring.io/secure/ViewProfile.jspa?name=tommack)** opened **[SPR-3129](https://jira.spring.io/browse/SPR-3129?redirect=false)** and commented  HttpInvokerClientInterceptor changed slightly which broke my 2.0.1 compatible code. This change wasn't mentioned in the Change Log.  It might not be a good practice, but I was using a HttpInvokerClientInterceptor outside of a bean factory. It used to create a default SimpleHttpInvokerRequestExecutor on initialization, as of 2.0.2 this only happens when afterPropertiesSet() is called.   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-02-06T10:43:23Z","2012-06-19T03:50:59Z"
"","7116","ExpressionEvaluationUtils doesn't correctly determine if JSP 2.0 evaluation is possible [SPR-2427]","**[Tom Mack](https://jira.spring.io/secure/ViewProfile.jspa?name=tommack)** opened **[SPR-2427](https://jira.spring.io/browse/SPR-2427?redirect=false)** and commented  ExpressionEvaluationUtils looks for javax.servlet.jsp.el.ExpressionEvaluator on the classpath instead of actually checking the capabilities of the container. When using MyFaces with Tomcat 4, the jsp-2.0.jar is required to be on the classpath even though JSP 2.0 is not actually supported. This causes a  java.lang.NoSuchMethodError: javax.servlet.jsp.PageContext.getExpressionEvaluator()Ljavax/servlet/jsp/el/ExpressionEvaluator;  when the evaluate method is called. At the very least there should be a way to manually configure this class to behave correctly. But, I would think it would be just as easy to check if the getExpressionEvaluator() method existed on the context.   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-14T09:20:38Z","2019-01-11T19:33:09Z"
"","7613","JmsInvokerClientInterceptor does not start it's connection [SPR-2927]","**[tom knych](https://jira.spring.io/secure/ViewProfile.jspa?name=thomaswk)** opened **[SPR-2927](https://jira.spring.io/browse/SPR-2927?redirect=false)** and commented  The JmsInvokerClientInterceptor  does not call connection.start() before creating its MessageRequestor. This causes the eventual QueueReceiver.receive() call to block indefinately because EMS does not start sending messages until start is called.  A simple patch is here: --- /xenv/spring-framework/X/2.0/src/org/springframework/jms/remoting/JmsInvokerClientInterceptor.java  2006-09-21 22:49:14.000000000 -0400 +++ src/java/org/springframework/jms/remoting/JmsInvokerClientInterceptor.java  2006-12-07 17:34:39.452809000 -0500 @@ -176,10 +176,12 @@ QueueSession session = null; QueueRequestor requestor = null; try { session = con.createQueueSession(false, Session.AUTO_ACKNOWLEDGE); Queue queueToUse = resolveQueue(session); Message requestMessage = createRequestMessage(session, invocation); requestor = new QueueRequestor(session, queueToUse); +             con.start();             Message responseMessage = requestor.request(requestMessage);             return extractInvocationResult(responseMessage);     }    ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-12-07T08:39:39Z","2012-06-19T03:51:16Z"
"","7005","The JDBCTempalte is logging at a WARN level for DB2 for SQLCode 100 (no rows returned) -- can this be moved to info? [SPR-2316]","**[Tom Greco](https://jira.spring.io/secure/ViewProfile.jspa?name=tgrecojr)** opened **[SPR-2316](https://jira.spring.io/browse/SPR-2316?redirect=false)** and commented  The JdbcTemplate is logging warn messages for SQLCode 100 (No rows returned).  The logging level for this SQL Code seems to be high at warn since this is may be a desired result.  Can this be lowered to info?  2006-07-18 10:24:51,685 [WebSphere t=009bbb00] WARN org.springframework.jdbc.core.JdbcTemplate - SQLWarning ignored: SQL state '02000', error code '100', message [[IBM/DB2][T2zos/1]T2zosPreparedStatement.readExecuteInternal:nativeExecute:4706:DB2 engine SQL warning, SQLCODE = 100, SQLSTATE = 02000, warning tokens = ] 2006-07-18 10:24:51,815 [WebSphere t=009bbb00] WARN org.springframework.jdbc.core.JdbcTemplate - SQLWarning ignored: SQL state '02000', error code '100', message [[IBM/DB2][T2zos/1]T2zosPreparedStatement.readExecuteInternal:nativeExecute:4706:DB2 engine SQL warning, SQLCODE = 100, SQLSTATE = 02000, warning tokens = ] 2006-07-18 10:24:53,162 [WebSphere t=009bbb00] WARN org.springframework.jdbc.core.JdbcTemplate - SQLWarning ignored: SQL state '02000', error code '100', message [[IBM/DB2][T2zos/1]T2zosPreparedStatement.readExecuteInternal:nativeExecute:4706:DB2 engine SQL warning, SQLCODE = 100, SQLSTATE = 02000, warning tokens = ]   ---  **Affects:** 1.2.7, 1.2.8, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-07-18T04:09:53Z","2012-06-19T03:51:16Z"
"","7540","Add dir=${basedir} argument to  task in maintests target in Ant script [SPR-2853]","**[Tim Mulligan](https://jira.spring.io/secure/ViewProfile.jspa?name=timothy.mulligan)** opened **[SPR-2853](https://jira.spring.io/browse/SPR-2853?redirect=false)** and commented  Just wanted to let you know that two unit test cases fail when the Ant build (Spring 2.0 final w/ dependencies) is not launched from within spring's basedir.  I recently assimilated Spring 2.0 final into our build environment and needed to add the ""dir=${basedir}"" argument to the \ task (in maintests target) because we launch all of our builds from a common buildroot directory.  It shouldn't  hurt anything to add this argument to the ant script, and will help others who need to integrate spring 2.0 builds into their existing build environment.  These are the two unit tests that failed without the dir=${basedir} arg on \ task: 1. spring/test/org/springframework/util/Log4jConfigurerTests.java    failing testcase: testInitLoggingWithRelativeFilePathAndRefreshInterval 2. spring/test/org/springframework/web/util/Log4jWebConfigurerTests.java    failing testcase: testInitLoggingWithRelativeFilePathAndRefreshInterval  Here is an example of the error: [junit] Testcase: testInitLoggingWithRelativeFilePathAndRefreshInterval took 0,007 sec [junit]     Caused an ERROR [junit] Log4J config file [test/org/springframework/util/testlog4j.properties] not found [junit] java.io.FileNotFoundException: Log4J config file [test/org/springframework/util/testlog4j.properties] not found [junit]     at org.springframework.util.Log4jConfigurer.initLogging(Log4jConfigurer.java:97) [junit]     at org.springframework.util.Log4jConfigurerTests.doTestInitLogging(Log4jConfigurerTests.java:67) [junit]     at org.springframework.util.Log4jConfigurerTests.testInitLoggingWithRelativeFilePathAndRefreshInterval(Log4jConfigurerTests.java:50)  Thank you, Tim Mulligan   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-11-20T05:56:14Z","2012-06-19T03:50:40Z"
"","7329","Form tags should support expression language in all attributes [SPR-2640]","**[Tim Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=tmoore)** opened **[SPR-2640](https://jira.spring.io/browse/SPR-2640?redirect=false)** and commented  I'm using a JSP 1.2 container with JSTL 1.0. Only a few attributes of the form tags support JSTL expressions in this environment. It would be very useful if all of the attributes were evaluated as expressions, to avoid having to bridge betwen EL and RT expressions.   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-26T07:44:42Z","2007-04-01T22:56:42Z"
"","7324","WebUtils.exposeForwardRequestAttributes fails to work in Servlet 2.3 containers [SPR-2635]","**[Tim Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=tmoore)** opened **[SPR-2635](https://jira.spring.io/browse/SPR-2635?redirect=false)** and commented  The Javadocs for this method say: Does not override values if already present, to not conflict with Servlet 2.4+ containers.  The checks appear to be wrong:      if (request.getAttribute(FORWARD_REQUEST_URI_ATTRIBUTE) != null) {          request.setAttribute(FORWARD_REQUEST_URI_ATTRIBUTE, request.getRequestURI());     }     if (request.getAttribute(FORWARD_CONTEXT_PATH_ATTRIBUTE) != null) {          request.setAttribute(FORWARD_CONTEXT_PATH_ATTRIBUTE, request.getContextPath());     }  etc.  Shouldn't that be == null? The attributes do not appear to be set correctly on Servlet 2.3 containers as a result of this.   ---  **Affects:** 2.0 RC2, 2.0 RC3, 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-09-25T12:02:07Z","2012-06-19T03:50:38Z"
"","7303","removeAttributes() method in ErrorsTag throws NullPointerException [SPR-2614]","**[Tim Lenz](https://jira.spring.io/secure/ViewProfile.jspa?name=seabamirum)** opened **[SPR-2614](https://jira.spring.io/browse/SPR-2614?redirect=false)** and commented  The fix to #7126 has introduced a NullPointerException in the removeAttributes() method:  this.pageContext.setAttribute(MESSAGES_ATTRIBUTE, this.oldMessages);  this.oldMessages is null and you can't put a null value into a Hashtable.  Stack trace: java.lang.NullPointerException at java.lang.Throwable.\(Throwable.java) at java.util.Hashtable.put(Hashtable.java) at org.apache.jasper.runtime.PageContextImpl.setAttribute(PageContextImpl.java:260) at org.springframework.web.servlet.tags.form.ErrorsTag.removeAttributes(ErrorsTag.java) at org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.doFinally(AbstractHtmlElementBodyTag.java:84) at org.springframework.web.servlet.tags.form.ErrorsTag.doFinally(ErrorsTag.java:113)  ---  **Affects:** 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-09-20T02:12:25Z","2019-01-11T21:14:02Z"
"","7302","CLONE -form:errors tag clobbers 'messages' attribute [SPR-2613]","**[Tim Lenz](https://jira.spring.io/secure/ViewProfile.jspa?name=seabamirum)** opened **[SPR-2613](https://jira.spring.io/browse/SPR-2613?redirect=false)*** and commented  After upgrading to Spring 2.0 RC3, we noticed that any our i18n code failed to resolve keys; this was tracked down to revisions in the form:errors tag that clobber the 'messages' attribute (i.e. removing it instead of resetting it).  Scenario:  Consider the following JSP:  \	${messages['common.aa.siteId']} \ 							\														 								\\ 								\\\ 							\ 							\ 							\${messages['common.aa.createPortfolio.forgotInformationContactSchool']}\ 							\  ...where we expose a custom map 'messages' (I believe this is the same name that JSF/Facelets uses as well) to resolve keys (using a ReloadableResourceBundleMessageSource behind the scenes).   The second use of 'messages' does not output anything; removing the form:errors tag resolves the issue (until the next field, and so on...).  It looks like RC3's ErrorsTag.java added exposeAttributes and removeAttributes, which clobber the 'messages' attribute.  Options:  1) Change the 'messages' attribute name (it is new in RC3); perhaps 'formMessages'? 2) Store / restore the 'messages' attribute in removeAttributes; do note that this prevents use of the oringinal 'messages' object inside a form:error tag 3) Don't expose the messages as an attribute inside form:error    ---  **Affects:** 2.0 RC3","closed","in: web,","spring-projects-issues","2006-09-20T01:59:29Z","2019-01-12T16:51:58Z"
"","7655","PropertyPlaceholderConfigurator does not provide abiltiy to set values as null [SPR-2969]","**[Tim Dudgeon](https://jira.spring.io/secure/ViewProfile.jspa?name=tdudgeon)** opened **[SPR-2969](https://jira.spring.io/browse/SPR-2969?redirect=false)** and commented  When using placeholder substituion with a PropertyPlaceholderConfigurator is it sometimes possible to need values to be set to null. This is not currently possible, as the Properties object does not allow null values. If the values are omitted from the Properties then the substituton is not done, and the configuration is incomplete. Empty string can be set, but this results in setting the value to the empty string, which is not the same as null.  If the PropertyPlaceholderConfigurator took a Map rather than Properties keys with null values could be specified.  see also http://forum.springframework.org/showthread.php?t=31532   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-20T04:20:16Z","2012-06-19T03:51:04Z"
"","7865","PropertyPlaceholderConfigurer does not work with namespace declarations. [SPR-3180]","**[Tim Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=gchen77)** opened **[SPR-3180](https://jira.spring.io/browse/SPR-3180?redirect=false)** and commented  I have a PropertyPlaceholderConfigurer that is prefixed with #{ I can use it for any spring definition except those that are using namespaces. For example: Code:                                            It wont process the value and I get exceptions that the value must be an integer. How can I use PropertyPlaceholderConfigurer with namespaces?  The forum link is http://forum.springframework.org/showthread.php?p=101823#post101823  ---  **Affects:** 2.0.2  **Issue Links:** - #9523 PropertyPlaceholderConfigurer doesn't work on beans defined in own schema e.g. tx:* (_**""is duplicated by""**_)  3 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-16T10:52:39Z","2019-01-11T17:37:03Z"
"","7811","DefaultMessageListenerContainer does not enlist sessions [SPR-3125]","**[Tim Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=gchen77)** opened **[SPR-3125](https://jira.spring.io/browse/SPR-3125?redirect=false)** and commented  Referring to http://static.springframework.org/spring/docs/2.0.x/reference/jms.html#jms-tx-participation run mvn -Dtest=JmsSpringTest on the attached sample application The XASession is not properly enlisted in a transaction.   ---  **Affects:** 2.0.2  **Attachments:** - [jms.tar.bz2](https://jira.spring.io/secure/attachment/12378/jms.tar.bz2) (_3.43 kB_)","closed","status: declined,","spring-projects-issues","2007-02-06T05:52:32Z","2019-01-12T16:40:23Z"
"","7608","HibernateAccessor.flushIfNecessary(): do not flush new Session in case of FlushMode.AUTO/COMMIT [SPR-2922]","**[Thomas Whitmore](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasw)** opened **[SPR-2922](https://jira.spring.io/browse/SPR-2922?redirect=false)*** and commented  Hi Costin, Juergen !  FLUSH_COMMIT mode doesn't work at all like supposed to. - it behaves like a 'FLUSH_EAGER'.  FLUSH_NEVER sets the Session that way also;  prevents your explicit Tx.Commit() from flushing anything;  thus typically nothing saved. - as a matter of practice,  'explicit' state changes, executed by code, should **never**   not be blocked by implicit settings!  or very clear diagnosis/ warning should be produced   until such  EXPLICIT ACTION  'silent cancellation' behaviour is formally allowed by   the developer. - this area is (very) costly to debug. - I really couldn't expect many developers to go thru the debugging & customization process,   to ever get this to work succesfully...  this has come up on the forums (I've posted there also).  we note that in other threads where there was a good answer, Costin pops up quite quickly with a response... and he's thoroughly absent from this one.  conclusion:   HibernateAccessor. flushIfNecessary() is broken or significantly flawed in design.  but Spring is great, otherwise :-)  Cheers, T   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-12-06T13:35:09Z","2019-01-13T22:44:59Z"
"","7413","ProxyFactoryBean 'frozen' property documentation is confusing [SPR-2725]","**[Thomas Timbul](https://jira.spring.io/secure/ViewProfile.jspa?name=ttimbul)** opened **[SPR-2725](https://jira.spring.io/browse/SPR-2725?redirect=false)** and commented  current documentation on AOP - chapter 7.5.2. JavaBean properties says:  frozen: controls whether or not advice changes should be disallowed once the proxy factory has been configured. The default is false (i.e. no changes to the proxy configuration are allowed after the proxy has been configured).  That in itself is a contradiction. the first sentence says 'if true its frozen' (which is the default). The part in brackets says the opposite.  Looking at the source code comments:  void org.springframework.aop.framework.ProxyFactoryBean.setFrozen(boolean frozen) Set whether this config should be frozen.  When a config is frozen, no advice changes can be made. This is useful for optimization, and useful when we don't want callers to be able to manipulate configuration after casting to Advised.  Obviously by the intuition of naming and by what's in the code, the idea is that once you freeze it you can't change it. So please change the bracketed part in the docs to read '(i.e. changes to the proxy configuration ARE allowed after the proxy has been configured)'  Maybe get rid of the 'no' and emphasize the 'are'...   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-17T22:38:09Z","2012-06-19T03:51:06Z"
"","7511","AbstractDependencyInjectionSpringContextTests and  combined with setDirty() calls causes subsequent tests to fail [SPR-2824]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2824](https://jira.spring.io/browse/SPR-2824?redirect=false)** and commented  Using the AbstractDependencyInjectionSpringContextTests and  to run some tests.  Each test case works fine individually regardles of the use of setDirty().  A soon as setDirty() is called, subsequent tests fail due to the destroy method of BeanConfigurerSupport wiping out the AnnotationBeanWiringInfoResolver that was set by the AnnotationBeanConfigurerAspect.  Looks like it is never re-set for the re-loading of the context, so there is no advice given to the classes being tested.  Not sure i this side-effect is a bug or a feature, but it is annoying.  Only way around it seems to be to replace  with an explicit declaration including the ""beanWiringInfoResolver"" like:  \ \ \ \ \ Maybe the solution is to have AnnotationBeanConfigurerAspect override destroy() and leave the beanWiringInfoResolver in place.  Not sure yet if that would cause other side-effects.   ---  **Affects:** 2.0 final  **Attachments:** - [spr-2824.patch](https://jira.spring.io/secure/attachment/13161/spr-2824.patch) (_5.15 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-11-10T01:24:27Z","2012-06-19T03:50:14Z"
"","7281","New 2.0 DTD not available at specified location [SPR-2592]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2592](https://jira.spring.io/browse/SPR-2592?redirect=false)** and commented  The new DTD is specified with the url ""http://www.springframework.org/dtd/spring-beans-2.0.dtd"" but it's not available at that location.  There is a ""spring-beans_2_0.dtd"" but it's from mid August.  That one should be removed to avoid confusion.  This will cause issues like the following when developers try to reference the new dtd from their IDEs.  Error while fetching http://www.springframework.org/dtd/spring-beans-2.0.dtd I/O Error occurred:  java.io.FileNotFoundException: http://www.springframework.org/dtd/spring-beans-2.0.dtd at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1147) at com.intellij.util.net.HttpConfigurable.prepareURL(HttpConfigurable.java:122) at com.intellij.codeInsight.daemon.impl.quickfix.FetchExtResourceAction$1$1.run(FetchExtResourceAction.java:14) at com.intellij.openapi.progress.impl.ProgressManagerImpl.runProcess(ProgressManagerImpl.java:76) at com.intellij.codeInsight.daemon.impl.quickfix.FetchExtResourceAction$1.run(FetchExtResourceAction.java) at java.lang.Thread.run(Thread.java:613)   ---  **Affects:** 2.0 RC4","closed","in: core,","spring-projects-issues","2006-09-17T01:36:33Z","2012-06-19T03:51:05Z"
"","7266","Add support for JDBC 4.0 which is part of Java 6.0 [SPR-2577]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2577](https://jira.spring.io/browse/SPR-2577?redirect=false)** and commented  We need to add support for JDBC 4.0 changes to the DataSource interface.  This is necessary to be able to comiple with Java 6.   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-12T02:52:30Z","2012-06-19T03:51:07Z"
"","7138","- should always write the value attribute for the option tag - even when value and label are equal. [SPR-2449]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2449](https://jira.spring.io/browse/SPR-2449?redirect=false)** and commented  This would ease cross-browser javascript since an \ without a value attribute is handled differently by IE and Firefox.  Firefox sets value and text properties in the DOM while IE sets label and text.  Makes it harder to use generic javascript functions targeting the value property.  Suggested remedy:  Remove the test in org.springframework.web.servlet.tags.form.OptionWriter.java (line 169) if (!valueDisplayString.equals(labelDisplayString)) { tagWriter.writeAttribute(""value"", valueDisplayString); }   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-20T02:41:57Z","2012-06-19T03:50:06Z"
"","7505","Minor typo: spring-with-dependecies [should be ""dependencies""] [SPR-2818]","**[Thomas Pluempe](https://jira.spring.io/secure/ViewProfile.jspa?name=thomanski)** opened **[SPR-2818](https://jira.spring.io/browse/SPR-2818?redirect=false)** and commented  In http://static.springframework.org/spring/docs/2.0.x/reference/new-in-2.html 2.8. Updated sample applications it states: ""... can be found in the 'samples'  directory of the full Spring distribution ('spring-with-dependecies.[zip|tar.gz]').""  It should be spring-with-dependencies, i.e. the last ""n"" is missing.   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-09T04:47:35Z","2012-06-19T03:50:30Z"
"","7817","Quartz: BeanCreationException for MethodInvokingJobDetailFactoryBean or other Quartz beans [SPR-3131]","**[Thomas Kuehne](https://jira.spring.io/secure/ViewProfile.jspa?name=todo)** opened **[SPR-3131](https://jira.spring.io/browse/SPR-3131?redirect=false)** and commented  With following bean definition           	     	     	       I get BeanCreationException with following stack trace:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'queueRunnerDetail' defined in class path resource [conf/scheduler-config.xml]: Invocation of init method failed; nested exception is java.lang.NoSuchMethodError: org.apache.commons.collections.SetUtils.orderedSet(Ljava/util/Set;)Ljava/util/Set; Caused by: java.lang.NoSuchMethodError: org.apache.commons.collections.SetUtils.orderedSet(Ljava/util/Set;)Ljava/util/Set; at org.quartz.JobDetail.\(JobDetail.java:85) at org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean.afterPropertiesSet(MethodInvokingJobDetailFactoryBean.java:149) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1062) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1029) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:420) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287) at org.springframework.context.support.AbstractApplicationContex  I can solve the error with Quartz Version 1.5.2 ....   ---  **Affects:** 2.0 final, 2.0.2","closed","in: core,","spring-projects-issues","2007-02-07T09:00:50Z","2019-01-11T17:32:12Z"
"","7136","abstract is mandatory even for beans without class - doc says the opposite [SPR-2447]","**[Thomas Kotzian](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasko321)** opened **[SPR-2447](https://jira.spring.io/browse/SPR-2447?redirect=false)** and commented  documentation for 2.0-rc3 says the following (3.6): --- begin --- Note that in the example above, we have explicitly marked the parent bean definition as abstract by using the abstract attribute. In the case that the parent definition does not specify a class: \ \ \ \  \ \  \ \ The parent bean cannot get instantiated on its own since it is incomplete, and it is also implicitly abstract. When a definition is defined to be abstract like this (explicitly or implicitly), it is usable only as a pure template bean definition that will serve as parent definition for child definitions. Trying to use such an abstract parent bean on its own (by referring to it as a ref property of another bean, or doing an explicit getBean() call with the parent bean id), will result in an error. Similarly, the container's internal preInstantiateSingletons() method will completely ignore bean definitions which are defined as abstract. --- end ---  should be something like this:  --- begin --- Explicitly marking the parent bean definition as abstract is required.  When a definition is defined to be abstract like this, it is usable only as a pure template bean definition that will serve as parent definition for child definitions. Trying to use such an abstract parent bean on its own (by referring to it as a ref property of another bean, or doing an explicit getBean() call with the parent bean id), will result in an error. Similarly, the container's internal preInstantiateSingletons() method will completely ignore bean definitions which are defined as abstract. --- end ---   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-18T05:33:09Z","2012-06-19T03:50:13Z"
"","7798","CGLIB Proxies for transaction handling are initialized twice in JSF environment  - document the semantics of CGLIB proxies [SPR-3111]","**[Thomas Hoppe](https://jira.spring.io/secure/ViewProfile.jspa?name=thoppe)** opened **[SPR-3111](https://jira.spring.io/browse/SPR-3111?redirect=false)** and commented  When resolving backing beans in the described JSF environment the constructor of a request scoped bean is invoked twice! This is a severe issue when only one invokation is expected. When switching to the Java Proxy scheme, the constructor are only invoked once.   ---  **Affects:** 2.0.2","closed","type: documentation,","spring-projects-issues","2007-02-05T07:14:31Z","2012-06-19T03:51:18Z"
"","7723","NullPointerException thrown with RequestContextListener in Websphere WAS  6 (6.0.2.15 ) [SPR-3037]","**[Thomas Hoppe](https://jira.spring.io/secure/ViewProfile.jspa?name=thoppe)** opened **[SPR-3037](https://jira.spring.io/browse/SPR-3037?redirect=false)** and commented  Using the following settings in web.xml to have the Spring context being created:           	     		org.springframework.web.context.ContextLoaderListener     	               	     		org.springframework.web.context.request.RequestContextListener     	       Results in the following error message on console for EVERY request:  [14.01.07 12:36:44:686 CET] 000000af WebApp        E   SRVE0026E: [Servlet-Fehler]-[Faces Servlet]: java.lang.NullPointerException at org.springframework.web.context.request.RequestContextListener.requestDestroyed(RequestContextListener.java:73) at com.ibm.ws.webcontainer.webapp.WebApp.notifyServletRequestDestroyed(WebApp.java(Compiled Code)) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:980) at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3071) at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:236) at com.ibm.ws.webcontainer.VirtualHost.handleRequest(VirtualHost.java:210) at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:1958) at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:89) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:472) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewInformation(HttpInboundLink.java:411) at com.ibm.ws.http.channel.inbound.impl.HttpICLReadCallback.complete(HttpICLReadCallback.java:101) at com.ibm.ws.tcp.channel.impl.WorkQueueManager.requestComplete(WorkQueueManager.java:566) at com.ibm.ws.tcp.channel.impl.WorkQueueManager.attemptIO(WorkQueueManager.java(Compiled Code)) at com.ibm.ws.tcp.channel.impl.WorkQueueManager.workerRun(WorkQueueManager.java:952) at com.ibm.ws.tcp.channel.impl.WorkQueueManager$Worker.run(WorkQueueManager.java:1039) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java(Compiled Code))  Interestingly, Spring seems to work just fine (Scoped beans etc.)   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-01-13T21:47:46Z","2012-06-19T03:51:04Z"
"","7151","Add durability support to MethodInvokingJobDetailFactoryBean [SPR-2462]","**[Thomas Champagne](https://jira.spring.io/secure/ViewProfile.jspa?name=lafeuil)** opened **[SPR-2462](https://jira.spring.io/browse/SPR-2462?redirect=false)** and commented  Can you add a setDurability(boolean durability) method to MethodInvokingJobDetailFactoryBean? Internally you would simply call jobDetail.setDurability(durability). This should be super-easy to implement.  Thanks, Thomas   ---  **Affects:** 1.2.8, 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-22T22:59:01Z","2012-06-19T03:50:10Z"
"","7411","NULL application context on view resolver when working with tiles [SPR-2723]","**[Thom Hehl](https://jira.spring.io/secure/ViewProfile.jspa?name=thehl)** opened **[SPR-2723](https://jira.spring.io/browse/SPR-2723?redirect=false)** and commented  I am attempting to build a custom view resolver. I have a wizard controller with a number of view names that will all resolve to the same tile. My view resolver matches these names up to a list and then creates a tile view with the proper name. This worked fine when I was doing simple JSP views.  Here is my code:  package com.acs.gs.eJuror.workflow;  import java.util.HashMap; import java.util.Locale;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.springframework.context.ApplicationContext; import org.springframework.web.servlet.View; import org.springframework.web.servlet.view.AbstractCachingViewResolver; import org.springframework.web.servlet.view.tiles.TilesJstlView;  import com.acs.gs.juror.bo.Court; import com.acs.gs.juror.qanda.Question;  /** * `@author` thehl  * Complicated view resolver that performs special handling for questions asked using the Questionnaire  * class. Retrieves the same list of questions used to generate the questionnaire forms and then, when  * a view comes in that matches those questions, resolves that view to a JstlTileView called question.  * All other views are passed down the chain for later resolution.   */   public class QuestionnaireViewResolver extends AbstractCachingViewResolver {    private static Log MyLog = LogFactory.getLog(QuestionnaireViewResolver.class.getName());    private Court CourtRules;   private HashMap Questions;   private String QuestionTileName;   private TilesJstlView TileView;    /**    * Use the specified court rules    * `@param` rules the Court object containing the questionnaires used for governing this view resolver     */     public QuestionnaireViewResolver(Court rules){     super();     if(rules==null){     throw new IllegalArgumentException(""Court rules cannot be null"");     }      CourtRules=rules;     Questions=new HashMap(75);      //add the questions from Bio Information     for (Question qst:CourtRules.getBiographicInformation().getQuestions()){     Questions.put(qst.getKey(), qst);     }      //add the questions from Juror Information     for (Question qst:CourtRules.getJurorInformation().getQuestions()){     Questions.put(qst.getKey(), qst);     }      //isntantiate this for later     TileView=new TilesJstlView();     ApplicationContext appCon=getApplicationContext();     if(appCon==null){     throw new NullPointerException(""Unable to retrieve application context"");     }     TileView.setApplicationContext(appCon);     }    /* (non-Javadoc)    * `@see` org.springframework.web.servlet.view.AbstractCachingViewResolver#loadView(java.lang.String, java.util.Locale)     */     `@Override`     protected View loadView(String viewName, Locale loc) throws Exception {     View ret=null;     Question qst=Questions.get(viewName);     //see if the view name is in the collection     if (qst!=null){     //resolve the question views to the tile named question.view     TileView.setUrl(QuestionTileName);     ret=TileView;     }      return ret;     }    /**    * `@return` the questionTileName     */     public String getQuestionTileName() {     return QuestionTileName;     }    /**    * `@param` questionTileName the questionTileName to set     */     public void setQuestionTileName(String questionTileName) {     QuestionTileName = questionTileName;     }     }  I get the following error when I retrieve the app context in the constructor:  46717 ERROR org.springframework.web.servlet.DispatcherServlet | Context initiali zation failed org.springframework.beans.factory.BeanCreationException: Error creating bean wit h name 'questionnaireResolver' defined in ServletContext resource [/WEB-INF/ejur or-servlet.xml]: Instantiation of bean failed; nested exception is org.springfra mework.beans.BeanInstantiationException: Could not instantiate bean class [com.a cs.gs.eJuror.workflow.QuestionnaireViewResolver]: Constructor threw exception; n ested exception is java.lang.IllegalStateException: ApplicationObjectSupport ins tance [com.acs.gs.eJuror.workflow.QuestionnaireViewResolver@12e7cb6] does not ru n in an ApplicationContext Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [com.acs.gs.eJuror.workflow.QuestionnaireViewResolver]: Constructor threw exception; nested exception is java.lang.IllegalStateException: ApplicationObje ctSupport instance [com.acs.gs.eJuror.workflow.QuestionnaireViewResolver@12e7cb6 ] does not run in an ApplicationContext  When I don't do this, it blows up when it tries to render the page. I chased through the source and decided the application context was null and that caused the problem, so I inserted those lines to test that problem and these are my results.  I realize I'm frankensteining a solution here and may simply not have done it right, but it looks like a broken to me for now.  Thanks!   ---  **Affects:** 2.0 final  **Attachments:** - [web.xml](https://jira.spring.io/secure/attachment/12036/web.xml) (_3.73 kB_)","closed","status: declined,","spring-projects-issues","2006-10-17T08:35:53Z","2019-01-12T16:40:39Z"
"","7728","Use Hibernate SessionFactory in JasperReport views in order to use hql query language in reports [SPR-3042]","**[Thierry Templier](https://jira.spring.io/secure/ViewProfile.jspa?name=templth)** opened **[SPR-3042](https://jira.spring.io/browse/SPR-3042?redirect=false)** and commented  The aim of this issue is to allow developer to use the query language hql in jasper reports, like in the following code:  \ (...) 	\\\ (...) \  To do this, the Hibernate SessionFactory must be injected in the different JasperReports view of Spring and used in their fillReport method, like in the following code:  // Use the Hibernate Session. if (logger.isDebugEnabled()) { logger.debug(""Filling report with Hibernate SessionFactory ["" + this.sessionFactory + ""].""); }  Session session = this.sessionFactory.openSession(); model.put(JRHibernateQueryExecuterFactory.PARAMETER_HIBERNATE_SESSION, session);  try { return JasperFillManager.fillReport(getReport(), model); } finally { try { session.close(); } catch (HibernateException ex) { logger.warn(""Could not close Hibernate Session"", ex); } }   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-16T05:32:55Z","2019-01-11T16:36:31Z"
"","7072","RegexpMethodPointcutAdvisor should trim patterns [SPR-2383]","**[Thierry Monney](https://jira.spring.io/secure/ViewProfile.jspa?name=titi-r5)** opened **[SPR-2383](https://jira.spring.io/browse/SPR-2383?redirect=false)** and commented  When configuration is done like the following:  \ \ \ \ ch.ofcom.elicensing.kos.api.service.ILicenceService.* \ \ \ ... \  The pattern never matches because of the leading and trailing white space/newlines. Since the pointcut is supposed to match only method names, this is irrelevant and should be trimmed, possibly in the setPatterns() method.  To remove the white space in the config file is not really an option since many XML formatters (e.g. in Eclipse) introduce them automatically. One wanting whitespace for some reason should use CDATA sections.   ---  **Affects:** 1.0 RC1, 1.0 RC2, 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-03T19:49:31Z","2012-06-19T03:50:26Z"
"","7531","Getting a stackoverflow when using bind no a multiactioncontroller  [SPR-2844]","**[Terry Jeske](https://jira.spring.io/secure/ViewProfile.jspa?name=buzzterrier)** opened **[SPR-2844](https://jira.spring.io/browse/SPR-2844?redirect=false)** and commented  I am binding a bean in a multiactioncontroller and get a stackoverflow.  \ public ModelAndView getMyVisitors(HttpServletRequest request, HttpServletResponse response) throws Exception {     MyBean myBean = new MyBean(); bind(request, myBean); ... \ Let me know if there is any more info I can provide.   ---  **Affects:** 2.0 final","closed","","spring-projects-issues","2006-11-15T09:21:42Z","2019-01-11T21:30:48Z"
"","7593","Should aliases to prototypes which implement BeanNameAware get the alias name or the original bean name [SPR-2906]","**[Terrence Mower](https://jira.spring.io/secure/ViewProfile.jspa?name=tkmower)** opened **[SPR-2906](https://jira.spring.io/browse/SPR-2906?redirect=false)** and commented  After upgrading from 1.2.6 to 2.0.1, it seems that prototype (non-singleton) beans which implement BeanNameAware get the original bean name, even if the bean name passed to getBean() is an alias. For example, given the following bean definitions  \ \ \ \the following test snippet would pass under 1.2.6 but fail under 2.0.1  MyBeanNameAware bean = (MyBeanNameAware) applicationContext.getBean(""aliasToMyBean""); assertEquals(""aliasToMyBean"", bean.getBeanName());  I've checked the docs and the change log but didn't see anything that would make me expect this change in behavior. Have I been using an ""undocumented feature"" all this time?   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-03T15:37:50Z","2012-06-19T09:37:27Z"
"","7190","add the possibility to specify the order when using  [SPR-2501]","**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[SPR-2501](https://jira.spring.io/browse/SPR-2501?redirect=false)** and commented   now does not allow to specify an order for the transaction interceptor ; it has the default lowest order making it impossible to run before other aspects. It would be useful to allow specifing order at  level or maybe at the annotaion (`@Transactional`) level.  ---  **Affects:** 2.0 final  **Issue Links:** - #7747 Document the 'order' attribute of the  element. (_**""is depended on by""**_)  6 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-28T18:05:00Z","2019-01-11T19:18:36Z"
"","6947","Use of InheritableThreadLocal creates leak for newly created background threads [SPR-2258]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-2258](https://jira.spring.io/browse/SPR-2258?redirect=false)** and commented  [Quoting part of a reply to a post by Peter Veentjer on the Concurrency-Interest mailing list:]  There seems to be almost a guarantee for Policy/Strategy support in most of the Spring framework: pure interface, partial base implementations providing useful defaults, and a default instance in the places that need it all this - in contrast with overriding methods. This is good, for many reasons.  Now, a good idea would be to extend this flexibility to thread context creation in the framework in general: Global/ThreadLocal/InheritableThreadLocal, and the new ActuallyWorksWithGCThreadLocal mentioned by Doug some days ago. This is not because I want the new deterministic threadlocal garbage collection option, but because InheritableThreadLocal is hardcoded in 2 places in Spring: the locale holder, and the new scoping support.  I find this to cause uncollectable reference leaks, in most applications of fair complexity, on all relevant platforms (ibm, bea, sun).  The reason (as stated in the thread mentioned above) is simple: there are two groups of components: those that create InheritableThreadLocals, and those that create threads. The mix of these two usually results in references dangling off live threads long after the relevant ClassLoader would have been released. A minimal example would be:  ---  public class ImageController implements Controller {      public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {              BufferedImage image = new BufferedImage(20, 20, BufferedImage.TYPE_INT_RGB);         Graphics2D g = image.createGraphics();         response.setContentType(""image/png"");         OutputStream out = response.getOutputStream();         ImageIO.write(image, ""png"", out);         out.close(); out.flush(); g.dispose();              return null;     }  }  ---  There isn't much to see in the code, but this controller will activate the Java 2D subsystem, which happens to include starting the sun.java2d.Disposer thread, which will only exit at JVM shutdown (this can be verified with a JVMTI agent). See what I mean by saying that InheritableThreadLocal creators can't fathom all thread creation sites above their stack? I'll bet good money I can find 3 other leaks possibilities of this type caused by Spring in the Sun JVM alone (although I also found these two spring ITLs in a different place).  Now, next for a related story - in the Acegi Security subframework (is there such a thing?): http://opensource.atlassian.com/projects/spring/browse/SEC-152  In the beginning, Acegi used a regular ThreadLocal for auth context. Then developers using JFC or RMI requested transparent propagation to child threads, resulting in a patch to use InheritableThreadLocal. Some IBM 1.3 users reported bugs in their JVM implementation, causing the migration back to a regular ThreadLocal. This could, of course, not please everybody, so a more configurable solution was devised: let the framework user choose an implementation of a Strategy interface for 'thread bound context' creation: http://www.acegisecurity.org/multiproject/acegi-security/apidocs/org/acegisecurity/context/SecurityContextHolderStrategy.html  Now this is a good solution, but not perfect: the modus of configuration is not very flexible, and it's Acegi-specific. I propose an extension to spring itself, exposing a strategy/polity extension point for child frameworks like Acegi, infrastructure like the Spring MVC locale support, the new Scoped AOP, and (most important of all) RMI/Swing/etc developers seeking a problem-specific solution.  I think the place for such support would be somewhere on the ApplicationContext itself, making (for instance) configuration in web.xml possible.  ---  **Affects:** 1.2.8, 2.0 RC2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-07-07T03:22:21Z","2019-01-13T22:47:17Z"
"","7234","Incorrect property name for LocalEntityManagerFactoryBean [SPR-2545]","**[Tan Quach](https://jira.spring.io/secure/ViewProfile.jspa?name=tquach)** opened **[SPR-2545](https://jira.spring.io/browse/SPR-2545?redirect=false)** and commented  The example under section 12.7.1 indicate a property for the entityManagerFactory bean that is invalid:  12.7.1.1. LocalEntityManagerFactoryBean  \  ...  \  \  \  ...  \  ---------------------------------- quote The property name should be ""persistenceUnitName"", should it not?   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-09-06T08:04:31Z","2012-06-19T03:50:31Z"
"","7034","Headers in MockHttpServletRequest aren't case-insensitive [SPR-2345]","**[Tamas Szabo](https://jira.spring.io/secure/ViewProfile.jspa?name=szabtam)** opened **[SPR-2345](https://jira.spring.io/browse/SPR-2345?redirect=false)** and commented  According to the Servlet API the HTTP Headers should be case-insensitive, but MockHttpServletRequest headers are not.  Failing test:  MockHttpServletRequest request = new MockHttpServletRequest(); request.addHeader(""Header"", ""value1""); assertEquals(""value1"", request.getHeader(""header""));    --- No further details from [SPR-2345](https://jira.spring.io/browse/SPR-2345?redirect=false)","closed","type: bug,","spring-projects-issues","2006-07-25T03:05:21Z","2012-06-19T03:50:40Z"
"","7033","MockHttpServletRequest.getHeader(String) must just return the first header if there are more than one, but it returns all of them [SPR-2344]","**[Tamas Szabo](https://jira.spring.io/secure/ViewProfile.jspa?name=szabtam)** opened **[SPR-2344](https://jira.spring.io/browse/SPR-2344?redirect=false)** and commented  According to the the Servlet API the getHeader() should return just the first header value if there are more headers with the same name. MockHttpServletRequest returns a comma-separated String if we added a header more than once.  Test code:  request.addHeader(""Header"", ""value1""); request.addHeader(""Header"", ""value2""); assertEquals(""value1"", request.getHeader(""Header""));  // getHeader() returns ""value1,value2""    --- No further details from [SPR-2344](https://jira.spring.io/browse/SPR-2344?redirect=false)","closed","type: bug,","spring-projects-issues","2006-07-25T03:01:46Z","2012-06-19T03:50:31Z"
"","7596","Hibernate 3.2.1; HibernateException No local DataSource found for configuration when schemaUpdate is true [SPR-2909]","**[Tag McGillicutty](https://jira.spring.io/secure/ViewProfile.jspa?name=mrpantsuit)** opened **[SPR-2909](https://jira.spring.io/browse/SPR-2909?redirect=false)** and commented  org.springframework.orm.hibernate3.LocalSessionFactoryBean#schemaUpdate doesn't seem to work with Hibernate 3.2.1.  Exception is listed at the bottom.  Forum topic detailing the problem is here: http://forum.springframework.org/showthread.php?t=31961&highlight=local+datasource+found.\  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionManager' defined in class path resource [deletetest/applicationContext.xml]: Cannot resolve reference to bean 'sessionFactory' while setting bean property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [deletetest/applicationContext.xml]: Initialization of bean failed; nested exception is org.springframework.orm.hibernate3.HibernateSystemException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean; nested exception is org.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [deletetest/applicationContext.xml]: Initialization of bean failed; nested exception is org.springframework.orm.hibernate3.HibernateSystemException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean; nested exception is org.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean org.springframework.orm.hibernate3.HibernateSystemException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean; nested exception is org.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean org.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean at org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider.configure(LocalDataSourceConnectionProvider.java:49) at org.hibernate.connection.ConnectionProviderFactory.newConnectionProvider(ConnectionProviderFactory.java:124) at org.hibernate.connection.ConnectionProviderFactory.newConnectionProvider(ConnectionProviderFactory.java:56) at org.hibernate.cfg.SettingsFactory.createConnectionProvider(SettingsFactory.java:397) at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:62) at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2002) at org.hibernate.cfg.Configuration.generateSchemaUpdateScript(Configuration.java:947) at org.springframework.orm.hibernate3.LocalSessionFactoryBean$3.doInHibernate(LocalSessionFactoryBean.java:930) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:366) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:334) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.updateDatabaseSchema(LocalSessionFactoryBean.java:924) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:781) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1091) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:396) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:186) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1046) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:857) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:378) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:283) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:313) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:87) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:72) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:63) at deletetest.DeleteTest.setUp(DeleteTest.java:27) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.junit.internal.runners.BeforeAndAfterRunner.invokeMethod(BeforeAndAfterRunner.java:74) at org.junit.internal.runners.BeforeAndAfterRunner.runBefores(BeforeAndAfterRunner.java:50) at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:33) at org.junit.internal.runners.TestMethodRunner.runMethod(TestMethodRunner.java:75) at org.junit.internal.runners.TestMethodRunner.run(TestMethodRunner.java:45) at org.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod(TestClassMethodsRunner.java:71) at org.junit.internal.runners.TestClassMethodsRunner.run(TestClassMethodsRunner.java:35) at org.junit.internal.runners.TestClassRunner$1.runUnprotected(TestClassRunner.java:42) at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34) at org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  ---  **Affects:** 2.0.1  **Issue Links:** - #7614 Problems with spring 2.0.2 and hibernate using schemaupdate=true (_**""is duplicated by""**_)  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2006-12-04T06:28:20Z","2019-01-11T22:01:00Z"
"","6962","HibernateTemplate requires overloaded Delete(String entityName, Object entity) and Delete(String entityName, Object entity, LockMode lockMode); [SPR-2273]","**[tadgh O'Mara](https://jira.spring.io/secure/ViewProfile.jspa?name=tadgh2006)** opened **[SPR-2273](https://jira.spring.io/browse/SPR-2273?redirect=false)** and commented  package org.springframework.orm.hibernate3.HibernateTemplate;  HibernateOperations.java requires the following additions:-  /** * Delete the given persistent instance. * `@param` entityName the name of a persistent entity * `@param` entity the persistent instance to delete * `@throws` org.springframework.dao.DataAccessException in case of Hibernate errors * `@see` org.hibernate.Session#delete(Object)   */   void delete(String entityName, Object entity) throws DataAccessException;  /** * Delete the given persistent instance. *   \Obtains the specified lock mode if the instance exists, implicitly * checking whether the corresponding database entry still exists * (throwing an OptimisticLockingFailureException if not found). * `@param` entityName the name of a persistent entity * `@param` entity the persistent instance to delete * `@param` lockMode the lock mode to obtain * `@throws` org.springframework.orm.ObjectOptimisticLockingFailureException if not found * `@throws` org.springframework.dao.DataAccessException in case of Hibernate errors * `@see` org.hibernate.Session#delete(Object)   */   void delete(String entityName, Object entity, LockMode lockMode) throws DataAccessException;  HibernateTemplate.java requires the following changes and additions:- public void delete(Object entity) throws DataAccessException { delete(null, entity, null); }      public void delete(final Object entity, final LockMode lockMode) throws DataAccessException {     delete(null, entity, lockMode);     }  public void delete(final String entityName, Object entity) throws DataAccessException { delete(entityName, entity, null); }  public void delete(final String entityName, final Object entity, final LockMode lockMode) throws DataAccessException { execute(new HibernateCallback() { public Object doInHibernate(Session session) throws HibernateException { checkWriteOperationAllowed(session); if (entityName != null) { if (lockMode != null) { session.lock(entityName, entity, lockMode); } session.delete(entityName, entity); } else {     if (lockMode != null) { session.lock(entity, lockMode); } session.delete(entity); } return null; } }, true); }    ---  **Affects:** 2.0 RC1  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-10T22:17:42Z","2012-06-19T03:52:36Z"
"","7224","Wrong assignment in DataBinder [SPR-2535]","**[Sören Chittka](https://jira.spring.io/secure/ViewProfile.jspa?name=esc)** opened **[SPR-2535](https://jira.spring.io/browse/SPR-2535?redirect=false)** and commented  In one of our projects we used the DataBinder-Infrastructure for convenience. We were not able to use Springs WebMVC on this project and we had to map a lot of GUI-Objects to the underlying domain-model. Since both models are JavaBeans-style the DataBinder saved us a lot of work. Following is a sample usage:  public class BauweiseDatabinder extends DataBinder {      public BauweiseDatabinder(Bauweise bauweise) {         super(bauweise, ""Bauweise"");         this.registerCustomEditor(Integer.class, new IntegerPropertyEditor());         this.registerCustomEditor(Integer.TYPE, new IntegerPropertyEditor());                 this.registerCustomEditor(String.class, new StringPropertyEditor());             }     public void bind(final BauweiseInfo bwInfo) {         this.bind(new MutablePropertyValues() {{             addPropertyValue(""fertighaus"",Boolean.valueOf(bwInfo.getFertighaus()));             addPropertyValue(""dachung"",Dachung.valueOf(bwInfo.getDachungDyn()));             addPropertyValue(""aussenwaende"",Aussenwaende.valueOf(bwInfo.getAussenwaendeDyn()));                                        }});     }  }  (Sorry for the german domain-object-names, but it does not change the problem). To map the objects, we just created a new instance of BauweiseDatabinder and called its bind(BauweiseInfo)-operation. All this worked very well with Spring 1.2.5. With 1.2.7 suddenly properties that were not filled via the GUI are assigned to multiple properties in the model. This happens with all kinds of property-editors, not just our own.  Please let me know, if I you need any additional information, so I can try to provide it.  Thanks in advance...   ---  **Affects:** 1.2.7","closed","","spring-projects-issues","2006-09-05T01:38:49Z","2019-01-11T19:22:02Z"
"","7627","Support secure JMS queue access on WebLogic [SPR-2941]","**[sven Gaubert](https://jira.spring.io/secure/ViewProfile.jspa?name=sven.gau)** opened **[SPR-2941](https://jira.spring.io/browse/SPR-2941?redirect=false)** and commented  When a JMS queue is secured in Weblogic 8.1 / 9.1 / 9.2, the Spring JMS framework cannot send a JMS message, even if all security's information are defined in the JNDI Context.  Spring proposes an adapter (org.springframework.jms.connection.UserCredentials ConnectionFactoryAdapter) to fix this issue, but it doesn't work with Weblogic. This issue has also been described by another user on this topic: http://forum.springframework.org/showthread.php?p=90141#post90141  The workaround is to reinitialize the JNDI context before calling the JMSTemplate.send method.  ---  **Affects:** 1.2.7, 1.2.8  **Attachments:** - [client.log](https://jira.spring.io/secure/attachment/12274/client.log) (_6.10 kB_) - [SpringContextWithUserCredAdapter.xml](https://jira.spring.io/secure/attachment/12275/SpringContextWithUserCredAdapter.xml) (_1.95 kB_)  **Issue Links:** - #9397 DefaultMessageListenerContainer failover to work with Weblogic JMS and security credentials","closed","in: messaging,","spring-projects-issues","2006-12-12T01:20:52Z","2019-01-11T21:22:29Z"
"","7755","Toplink: unable to use spring context to inject both [jndi] datasource and table qualifier using LocalSessionFactoryBean [SPR-3069]","**[Sue Pharoah](https://jira.spring.io/secure/ViewProfile.jspa?name=spharoah)** opened **[SPR-3069](https://jira.spring.io/browse/SPR-3069?redirect=false)** and commented  I can set up the spring context to create a toplink session using LocalSessionFactoryBean. If I use the databaseLogin, I can set the table qualifer. However the datasource does not seem to get set. If i omit the databaseLogin, the datasource does seem to get injected correctly, but of course I then can't set the table qualifier.  scenario 1) Using property database login where datasource is not injected properly.                                         MYSCHEMA         true                                               	AdministratorServerSession.xml     	AdministratorTransactions                               	  	                             	     	     		             	     	         	       In this case the jndi datasource is created by spring but not used in the toplink login.  scenario 2)  datasource is used correctly by removing databaselogin but I now have no means of setting tthe able qualifier                               	          	AdministratorServerSession.xml     	AdministratorTransactions     	     	     		     	                                  	     	         	       [ We need to be able to set both the table qualifier and the datasource on startup ]   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-01-23T05:11:00Z","2012-06-19T03:50:31Z"
"","7771","JavaMailSenderImpl does not check if host property has been set [SPR-3085]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-3085](https://jira.spring.io/browse/SPR-3085?redirect=false)** and commented  Instead it tries to connect without a host value and throws a generic Connection reset by peer exception. A more specific exception would make debugging swifter.   ---  **Affects:** 2.0.2","closed","status: declined,","spring-projects-issues","2007-01-28T09:27:13Z","2019-01-12T16:40:25Z"
"","7652","Let TimerManagerFactoryBean implement Lifecycle [SPR-2966]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2966](https://jira.spring.io/browse/SPR-2966?redirect=false)** and commented  Stop timer job when stop() is called, reschedule when start() is called.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-19T20:57:52Z","2012-06-19T03:50:19Z"
"","7651","Call stop() on ApplicationContext before destroying singletons [SPR-2965]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2965](https://jira.spring.io/browse/SPR-2965?redirect=false)** and commented  We have more than 20 DefaultMessageListenerContainers registered. It takes more than 6 minutes to undeploy the application. All this time is spent destroying singletons.  If we call the stop() method on the ApplicationContext before undeploying the application shutdown happens instantly.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-19T20:55:55Z","2012-06-19T03:51:16Z"
"","7626","BadSqlGrammarException incorrectly thrown for problem with RowMapper implementation on HSQLBB 1.8.0.7 [SPR-2940]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2940](https://jira.spring.io/browse/SPR-2940?redirect=false)** and commented  I got the exception below. It turned out the cause of the exception sat in my RowMapper implementation where I did rs.getInt("""").  Because the exception pointed at the SQL statement as the source of the exception it took me quite a long time to find the bug.  Exception thrown:  ---  org.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [SELECT ...]; nested exception is java.sql.SQLException: Column not found: Caused by: java.sql.SQLException: Column not found: at org.hsqldb.jdbc.Util.sqlException(Unknown Source) at org.hsqldb.jdbc.Util.sqlException(Unknown Source) at org.hsqldb.jdbc.jdbcResultSet.findColumn(Unknown Source) at org.hsqldb.jdbc.jdbcResultSet.getInt(Unknown Source) at xxx.GlobalTemplateCategotyQueriesIntegrationTests$GlobalTemplateCategoryRowMapper.mapRow(GlobalTemplateCategotyQueriesIntegrationTests.java:64) at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:96) at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:390) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:338) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:400) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:408) at xxx.GlobalTemplateCategotyQueriesIntegrationTests.testGetRootCategories(GlobalTemplateCategotyQueriesIntegrationTests.java:14) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-11T19:43:41Z","2019-01-13T22:44:54Z"
"","7617","HandlerAdapter limitation: supports() can't look at HttpServletRequest to decide if it can handle the handler [SPR-2931]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2931](https://jira.spring.io/browse/SPR-2931?redirect=false)** and commented  The supports() is too limited since it limits the otherwise extensive execution options of the handle() method.  For example, I could decide based on the URI of the HTTP request if I can handle a given handler. If I can't maybe another HandlerAdapter may be able to handle the handler.  Say for example my URI is /handler/myMethod. If supports() would have access to HttpServletRequest it could found out if the handler has a public myMethod() method. If it hasn't then maybe another HandlerAdapter further in the chain may be able to do something useful with the handler, for example SimpleControllerHandlerAdapter.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-08T10:13:47Z","2007-02-03T03:02:24Z"
"","7612","Allow to set custom transaction name on DefaultMessageListenerContainer [SPR-2926]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2926](https://jira.spring.io/browse/SPR-2926?redirect=false)** and commented  In DefaultMessageListenerContainer the transactionDefinition field is private and sub classes cannot change the transaction name to a custom value.  We like to give our transaction names customs value. Especially for queue listeners this is interesting to monitor transactions.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-07T02:46:04Z","2012-06-19T03:50:32Z"
"","7610","Wrong exception thrown when conversion of map values fails triggered by generics [SPR-2924]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2924](https://jira.spring.io/browse/SPR-2924?redirect=false)** and commented  We're upgrading from Spring 1.2.7 to Spring 2.01.  We have a class with a constructor argument of type Map.  Our developers inject objects of type LocalContractWapper which is not type-compatible with EJBContractWrapper.  In Spring 1.2.7 this worked since the objects were not converted using PropertyEditors.  In Spring 2.0.1 this fails since Spring detects the target map has generics and attemps to convert LocalContractWrapper to EJBContractWrapper. Ofcourse we don't have a PropertyEditor registered for this so the conversion fails.  However, the exception that is thrown says:  ""Failed to convert value of type [java.util.LinkedHashMap] to required type [java.util.Map]""  This not only doesn't make sense, it's also doesn't reveal the through cause of the exception.  Exception thrown:  ---  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'contractHandlerFactory' defined in class path resource [spring/sis/cni/cni-abstraction-dev.xml]: Cannot resolve reference to bean 'genericContractHandler' while setting bean property 'contractHandler'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'genericContractHandler' defined in class path resource [spring/sis/cni/cni-abstraction-dev.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [java.util.Map]: Could not convert constructor argument value [{0001.01=xxx.LocalContractWrapper@12344b, 0002.01=xxx.LocalContractWrapper@1273445, 0003.01=xxx.LocalContractWrapper@d8c8a9, 0004.01=xxx.LocalContractWrapper@5de953, 0005.01=xxx.LocalContractWrapper@1816407, 0006.01=xxx.LocalContractWrapper@1ce3058, 0007.01=xxx.LocalContractWrapper@1c7fe07, 0008.01=xxx.LocalContractWrapper@f69f4e, 0009.01=xxx.LocalContractWrapper@154d2ff}] to required type [java.util.Map]: Failed to convert value of type [java.util.LinkedHashMap] to required type [java.util.Map]; nested exception is java.lang.IllegalArgumentException: No matching editors or conversion strategy found Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'genericContractHandler' defined in class path resource [spring/sis/cni/cni-abstraction-dev.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [java.util.Map]: Could not convert constructor argument value [{0001.01=xxx.LocalContractWrapper@12344b, 0002.01=.LocalContractWrapper@1273445, 0003.01=xxx.LocalContractWrapper@d8c8a9, 0004.01=xxx.LocalContractWrapper@5de953, 0005.01=xxx.LocalContractWrapper@1816407, 0006.01=xxx.LocalContractWrapper@1ce3058, 0007.01=xxx.LocalContractWrapper@1c7fe07, 0008.01=xxx.LocalContractWrapper@f69f4e, 0009.01=xxx.LocalContractWrapper@154d2ff}] to required type [java.util.Map]: Failed to convert value of type [java.util.LinkedHashMap] to required type [java.util.Map]; nested exception is java.lang.IllegalArgumentException: No matching editors or conversion strategy found at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:372) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:126) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:684) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:622) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:381) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:140) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:248) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:950) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:740) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:417) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:140) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:273) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:346) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:181) at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:151) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:105) at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:82) at junit.framework.TestCase.runBare(TestCase.java:128) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-06T23:30:42Z","2019-01-13T22:44:57Z"
"","7554","SimpleAsyncTaskExecutor created by DefaultMessageListenerConsumer has concurrencyLimit=1 [SPR-2867]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2867](https://jira.spring.io/browse/SPR-2867?redirect=false)** and commented  This is especially troublesome when maxMessagesPerTask is set to 1. It causes AsyncMessageListenerInvoker to consume one message and then halt forever.   ---  **Affects:** 2.0 final","closed","in: messaging,","spring-projects-issues","2006-11-22T18:16:29Z","2019-01-11T21:35:44Z"
"","7543","Not possible to configure TimerManagerFactoryBean for fixed-delay execution with period=0 [SPR-2856]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2856](https://jira.spring.io/browse/SPR-2856?redirect=false)** and commented  It's not possible to configure TimerManagerFactoryBean (through ScheduledTimerListener) for fixed-delay execution with period=0. We use this scenario to immediately reschedule a job once it's finished.  We have to use fixed-delay and not fixed-rate since we only want one job to run at any given time (see http://e-docs.bea.com/wls/docs92/javadocs/commonj/timers/TimerManager.html for details). However, configuring a ScheduledTimerListener with fixedRate=false and period=0 puts us in neither fixed-rate nor fixed-delay but run-once.  The solution to get fixed-delay is to increase the value for period, for example to 1. I think the configuration would make more sense if there would be FixedRateScheduledTimerListener, FixedDelayScheduledTimerListener and RunOnceScheduledTimerListener configuration classes.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-21T00:54:16Z","2012-06-19T03:51:16Z"
"","7530","WebLogicLocalTimerManagerFactoryBean: looks up a local WL TimerManager which is not possible through JNDI [SPR-2843]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2843](https://jira.spring.io/browse/SPR-2843?redirect=false)** and commented  In WebLogic 9 you can't get a local CommonJ TimerManager through JNDI. Instread you have to obtain one through the WL API. This FactoryBean hides these details. See attachments.   ---  **Affects:** 2.0 final  **Attachments:** - [weblogic-local-timer-manager-context.xml](https://jira.spring.io/secure/attachment/12220/weblogic-local-timer-manager-context.xml) (_661 bytes_) - [WebLogicLocalTimerManagerFactoryBean.java](https://jira.spring.io/secure/attachment/12219/WebLogicLocalTimerManagerFactoryBean.java) (_992 bytes_)","closed","type: enhancement,","spring-projects-issues","2006-11-15T01:33:30Z","2007-01-03T21:05:31Z"
"","7529","TimerManagerFactoryBean: stop TimerListeners when singletons are destroyed [SPR-2842]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2842](https://jira.spring.io/browse/SPR-2842?redirect=false)** and commented  I've modified TimerManagerFactoryBean (attached) to hold on to Timer objects and call the cancel() methods when the AppCtx is closed. Works beautifully on WL 9.1.   ---  **Affects:** 2.0 final  **Attachments:** - [TimerManagerFactoryBean.java](https://jira.spring.io/secure/attachment/12218/TimerManagerFactoryBean.java) (_5.41 kB_)","closed","type: enhancement,","spring-projects-issues","2006-11-15T01:11:44Z","2012-06-19T03:50:44Z"
"","7527","Improvement exception message when bean definition has no class defined [SPR-2840]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2840](https://jira.spring.io/browse/SPR-2840?redirect=false)** and commented  Based on this message ""Bean definition does not carry a resolved bean class"" I couldn't figure out until after some time that I forgot to specify a class for the bean definition.  Instantiation of bean failed; nested exception is java.lang.IllegalStateException: Bean definition does not carry a resolved bean class at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:207) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:111) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:268) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:132) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:950) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:740) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:417) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:140) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:346) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-11-14T22:22:05Z","2012-06-19T03:51:04Z"
"","7513","jee:* tags don't provide option for single point of authority for JNDI environment properties [SPR-2826]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2826](https://jira.spring.io/browse/SPR-2826?redirect=false)** and commented  With JndiObjectFactoryBean you can inject a JndiTemplate object. This allows you to specify your JNDI environment settings in one location so that you can also easily change it in one location.  The same convenience apparently is not available in the  tag and other associated tags. You can specify the child  tag but this can only hold a literal value. So the only option to control the JNDI environment settings seems to be through a placeholder.  A more convenient approach would be to add a jndi-template attribute so that you could this:  \ \ key=value \ \    A more convenient alternative:   key=value     However, it should be possible and easy to switch between settings for a remote JNDI connection and a local JNDI connection. So this is yet another alternative. First for a remote JNDI connection:   key=value     Then, to switch to a local JNDI connection:      This approach allows you to separate the  tag into a file where different versions cater for local and remote JNDI connections.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-11T05:13:44Z","2012-06-19T03:51:14Z"
"","7510","Add support to Spring Remote Access for WebLogic IIOP for distributed transactions [SPR-2823]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2823](https://jira.spring.io/browse/SPR-2823?redirect=false)** and commented  Allow regular beans to be exported/access within WebLogic over IIOP to support distributed transactions. Currently this can only be achieved with EJB session beans.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-09T23:51:00Z","2006-11-10T05:07:11Z"
"","7509","Add comment to javadoc WebLogicMBeanServerFactoryBean that this class is not be used with WebLogic 9 [SPR-2822]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2822](https://jira.spring.io/browse/SPR-2822?redirect=false)** and commented  See Rob's comment on the forum:  http://forum.springframework.org/showthread.php?t=19857&highlight=weblogic+JMX#8   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-11-09T23:10:07Z","2012-06-19T03:51:05Z"
"","7501","Add dynamic shrinking/growing of consumers to DefaultMessageListenerContainer [SPR-2814]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2814](https://jira.spring.io/browse/SPR-2814?redirect=false)** and commented  I've modified DefaultMessageListenerCreator (attached) to support dynamic shrinking and growing of consumers. Simply change the value of the concurrentConsumer property (for example via JMX) and call the start() method for the changes to take affect.  Note: shrink/grow only works if the maxMessagePerTask property is set to a positive value, preferably 1.   ---  **Affects:** 2.0 final  **Attachments:** - [DefaultMessageListenerContainer.java](https://jira.spring.io/secure/attachment/12194/DefaultMessageListenerContainer.java) (_34.19 kB_)","closed","type: enhancement,","spring-projects-issues","2006-11-09T01:00:54Z","2012-06-19T03:50:26Z"
"","7497","Add deep merge and deep copy of bean definitions [SPR-2810]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2810](https://jira.spring.io/browse/SPR-2810?redirect=false)** and commented  Currently there is no deep merge and deep copy of bean definitions.  We are eargerly merging bean definitions in a BeanFactoryPostProcessor and we need to do a deep merge of bean definitions. Specifically, we need to get the merged property values and constructor argument values of inner child bean definitions:  \ \ \ \ \  After calling getMergedBeanDefinition() on AbstractBeanDefinition for bean definition A the inner bean definition will not have been merged (of type ChildBeanDefinition). This means that the values of the parent bean definition will not have been merged with the child.  I understand there is no need at this time for a deep merge within the framework but it would allow us to implement our planned extensions to Spring.  A second feature we're missing is a deep copy of bean definition. We wrote our own copier (see attachement) but I think this should be provided by the framework. Again, Spring doesn't need this feature but we need it in the extension we write for Spring so I would like to see this functionality added.   ---  **Affects:** 1.2.8, 2.0 final  **Attachments:** - [BeanDefinitionCopier.java](https://jira.spring.io/secure/attachment/12193/BeanDefinitionCopier.java) (_5.71 kB_)","closed","type: enhancement,","spring-projects-issues","2006-11-08T19:48:19Z","2008-10-22T01:44:19Z"
"","7496","Document how to configure transaction names for WeblogicJtaTransactionManager [SPR-2809]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2809](https://jira.spring.io/browse/SPR-2809?redirect=false)** and commented  I can't find any information on how to configure transaction names for WeblogicJtaTransactionManager. The names come from the TransactionDefinition, but how does it get there. Apparently not via TransactionAttributeEditor.   ---  **Affects:** 2.0 final","closed","type: documentation,","spring-projects-issues","2006-11-08T19:36:10Z","2012-06-19T03:51:15Z"
"","7492","In AbstractBeanDefinition(AbstractBeanDefinition) constructor property values get copied by value but constructor arguments get copied by reference [SPR-2805]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2805](https://jira.spring.io/browse/SPR-2805?redirect=false)** and commented  In the AbstractBeanDefinition(AbstractBeanDefinition) constructor property values are copied by value but constructor argument values are copied by reference.  When copying a BeanDefinition with this constructor and replacing the copy's values with BeanDefinitionVisitor the constructor values of the original BeanDefinition are also changed. This may have the unintended side effect that the constructor argument values of a parent BeanDefinition are changed when visiting one of its child BeanDefinitions.  This is the workaround we used:      private void copyConstructorArgumentValuesByValue(ConstructorArgumentValues from, ConstructorArgumentValues to) {     	to.clear();     	Map indexedArgumentValues = from.getIndexedArgumentValues();     	for (Iterator iter = indexedArgumentValues.keySet().iterator(); iter.hasNext();) {     		Integer key = (Integer) iter.next();     		ValueHolder valueHolder = (ValueHolder) indexedArgumentValues.get(key);     		to.addIndexedArgumentValue(key.intValue(), valueHolder.getValue(), valueHolder.getType());     	}     	List genericArgumentValues = from.getGenericArgumentValues();     	for (Iterator iter = genericArgumentValues.iterator(); iter.hasNext();) {     		ValueHolder valueHolder = (ValueHolder) iter.next();     		to.addGenericArgumentValue(valueHolder.getValue(), valueHolder.getType());     	}     }    ---  **Affects:** 1.2.8, 2.0 final","closed","in: core,","spring-projects-issues","2006-11-07T00:14:22Z","2012-06-19T03:50:12Z"
"","7478","Generic constructor arguments are added twice when eagerly merging bean definitions [SPR-2791]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2791](https://jira.spring.io/browse/SPR-2791?redirect=false)** and commented  When eagerly merging bean definitions, for example in a BeanFactoryPostProcessor, generic constructor arguments are added twice at bean creation time.   ---  **Affects:** 1.2.8, 2.0 final","closed","in: core,","spring-projects-issues","2006-11-01T23:41:36Z","2012-06-19T03:51:17Z"
"","7451","Factor out BeanDefinition iteration code out of PropertyPlaceholderConfigurer [SPR-2774]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2774](https://jira.spring.io/browse/SPR-2774?redirect=false)** and commented  It should be possible to reuse the BeanDefinition iteration code in the processProperties() method of PropertyPlaceholderConfigurer but with a custom implementation of BeanDefinitionVisitor.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-30T02:02:43Z","2007-02-03T03:10:52Z"
"","7071","Allow CookieLocaleResolver and SessionLocaleResolver to set a default locale instead of request locale [SPR-2382]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2382](https://jira.spring.io/browse/SPR-2382?redirect=false)** and commented  See forum thread: http://forum.springframework.org/showthread.php?t=27682  How can I tell Spring to use a specific (default) Locale during start-up of the app other than the OS' locale?  I want the app to use en_US when it is started but when the user selects another Locale from a dropdown list this Locale shall be set for all further pages until another language/locale will be chosen.   ---  **Affects:** 1.2.8, 2.0 RC2  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-03T10:07:28Z","2012-06-19T03:50:42Z"
"","7045","Improve detection of AutoProxyCreator beans in AOP namespace handlers [SPR-2356]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2356](https://jira.spring.io/browse/SPR-2356?redirect=false)** and commented  Currenlty the AOP namespace handlers check if a bean definition named org.springframework.aop.config.internalAutoProxyCreator is present and base their decision on the outcome of this check to register a new AutoProxyCreator or not.  If users have already configured an AutoProxyCreator ""manually"" there will be 2 registered which is not what we want. The check could be more fool-proof by checking for the presence of a bean definition where the class is type-compatible with AbstractAutoProxyCreator.  One option is to upgrade the class of the bean definition added by the user to the required AutoProxyCreator type.  Another option is to throw an exception and ask the user to remove his or his bean definition.   ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-26T20:33:02Z","2012-06-19T03:50:51Z"
"","7023","FactoryBeans and their dependencies do not get auto-proxied [SPR-2334]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2334](https://jira.spring.io/browse/SPR-2334?redirect=false)** and commented  FBs themselves are not proxied (which is probably not such a big issue) but objects FBs depend on (collaborating objects) are not auto-proxied either. Example:  \ \ \  The \myReference\ bean is not auto-proxied because the \myObject\ FB is created by getType(). I've used LazyInitTargetSourceCreator as a work around.  > Do you mean that FBs themselves are not autoproxied or the result of > the call to FB.getObject()? >  >  >> AnnotationAwareAspectJAutoProxyCreator does a getType() of all bean >> definitions in the BeanFactory which instantiates FactoryBeans. As a >> side-effect of this FactoryBeans and any beans FactoryBeans have a >> dependency on will not be auto-proxied. >>  >> It took me about 3 hours to figure out why some bean did not get >> auto-proxied so even if we can't fix this I think it should be >> documented.    ---  **Affects:** 2.0 RC2  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2006-07-23T11:20:45Z","2012-06-19T03:50:27Z"
"","6930","Errors.rejectValue should accept empty field name to indicate the current object itself [SPR-2240]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2240](https://jira.spring.io/browse/SPR-2240?redirect=false)** and commented  A use case for this is having a nested Validator register an error if the object to validate is null, rather than doing this is in a higher-level Validator. Registering a global error through ""Errors.reject"" is not ideal for this, since we want the error to be registered for exactly the nested field that contains the null reference.  Presently throws a NullValueInNestedPathException if the current object is null, due to treating the empty field name as actual field.   ---  **Affects:** 1.2.8, 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-07-05T19:42:20Z","2012-06-19T03:52:41Z"
"","7577","documentation example has misnamed constructor [SPR-2889]","**[Steve Miner](https://jira.spring.io/secure/ViewProfile.jspa?name=miner)** opened **[SPR-2889](https://jira.spring.io/browse/SPR-2889?redirect=false)** and commented  spring-framework-2.0/docs/reference/html_single/index.html  Section 5.2. Validation using Spring's Validator interface  The example, public class CustomerValidator, has a constructor named UserValidator, where it should be CustomerValidator.   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-28T06:30:44Z","2006-11-28T07:54:28Z"
"","7518","doc misspelling 'independant' [SPR-2831]","**[Steve Miner](https://jira.spring.io/secure/ViewProfile.jspa?name=miner)** opened **[SPR-2831](https://jira.spring.io/browse/SPR-2831?redirect=false)** and commented  In the documentation file spring-framework-2.0/docs/reference/html_single/index.html, section 5.2 says:  ""While it is certainly possible to implement a single Validator class to validate each of the nested objects in a rich object, it may be better to encapsulate the validation logic for each nested class of object in its own Validator implementation. A simple example of a 'rich' object would be a Customer that is composed of two String properties (a first and second name) and a complex Address object. Address objects may be used independant of Customer objects, and so a distinct AddressValidator has been implemented.""  That 'independant' on the last line should be 'independently'.   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-13T02:00:09Z","2012-06-19T03:50:28Z"
"","7678","FieldRetrievingFactoryBean throws java.lang.NoSuchFieldException [SPR-2992]","**[Steve Gioberti](https://jira.spring.io/secure/ViewProfile.jspa?name=gioberti)** opened **[SPR-2992](https://jira.spring.io/browse/SPR-2992?redirect=false)** and commented  When using the FieldRetrievingFactoryBean in an XML-based configuration in the name-based ""convenience"" format to retrieve a static constant thus:  \  A second access of the same constant using a second inclusion of '' results in a org.springframework.beans.factory.BeanCreationException. The eventual cause is ""Caused by: java.lang.NoSuchFieldException: A#1"".  I have tested this with Spring 2.0.1 and 2.0, which both give the above BeanCreationException error. Back-testing this with Spring 2.0-m1 and 1.2.3 give no BeanCreationException exception.  If I make the FieldRetrievingFactoryBean a ""prototype"" (i.e. singleton=""false""), then this removes the exception.  Is this a fault introduced between 2.0-m1 and 2.0, or was this use-case never formally supported? Any help greatfully received.  Sample files  ---  These are the files I have used to re-create the problem:  MBean.java  ---  package foo.bar;  public class MyBean {  private int propA;  private int propB;  public int getPropA() { return propA; }  public void setPropA(int propA) { this.propA = propA; }  public int getPropB() { return propB; }  public void setPropB(int propB) { this.propB = propB; }  }  MyConstants.java  ---  package foo.bar;  public interface MyConstants { final static int A = 0; final static int B = 1; }  Junit: TestFieldRetrievingBeanFactoryBean  ---  package foo.bar;  import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlAp plicationContext; import junit.framework.TestCase;  public class TestFieldRetrievingBeanFactoryBean extends TestCase {  public void testIt() { ApplicationContext context = new ClassPathXmlApplicationContext(""spring-config.xml""); MyBean b = (MyBean)context.getBean(""myBean""); System.out.println(b.getPropA()); }  }  spring-config.xml  ---  \ \ \ \ \ \ \ \ \ \ \ \ \  ---  **Affects:** 2.0 final, 2.0.1","closed","in: core,","spring-projects-issues","2006-12-29T01:45:27Z","2019-01-13T22:44:43Z"
"","7316","http://www.springframework.org/schema/jee doesn't validate in XMLSpy [SPR-2627]","**[Steve Cresswell](https://jira.spring.io/secure/ViewProfile.jspa?name=cressie176)** opened **[SPR-2627](https://jira.spring.io/browse/SPR-2627?redirect=false)** and commented  Using XMLSpy:  When you attempt to validate a context definition that uses elements from the jee namespace, validation fails because the following two imports in the jee schema don't include schemaLocation...             How to reproduce:  Opening the following in XMLSpy will highlight the problem  \  \ \  Possible Fix:  Change the imports in jee as follows      ---  **Affects:** 2.0 RC3  **Issue Links:** - #7394 oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType'. Unable to Start OC4J Server (_**""depends on""**_)","closed","status: declined,","spring-projects-issues","2006-09-21T20:12:52Z","2019-01-12T16:28:43Z"
"","7300","Class.forName() produces different results to ClassLoader.loadClass() in certain circumstances [SPR-2611]","**[Steve Barham](https://jira.spring.io/secure/ViewProfile.jspa?name=steve.barham)** opened **[SPR-2611](https://jira.spring.io/browse/SPR-2611?redirect=false)** and commented  I've been converting an application to use Spring, and have had a smooth time of it so far. I have hit somewhat of a stumbling block, however, when it comes to converting a plugin system which was implemented for the application.  Background: previously, a new classloader would be created when a plugin was initialised or updated. This classloader would be used to load a declared class of a certain interface, instantiate it and call a plug() method. Conversely, when the plugin was unplugged, an unplug() method would be called, and the classloader released so that it could be GCed. So far, so straightforward.  My aim in converting the plugin system was to use nested ApplicationContexts, so that plugins could have access to beans declared in the main system without having to specify any number of cumbersome activation interfaces, and generally to benefit from using Spring. This seemed to be a straightforward change, until I tested the plugin reloading functionality. This monitors the JAR from which the plugin is deployed, and when the filesize or timestamp changes triggers a reload by:  - unplugging the plugin - closing its application context - making its classloader available for GC by releasing all application   references - creating a new classloader - creating a new thread, with the context classloader being the new plugin   classloader - creating a new application context  The problem is that the old class definition for the plugin was being used, rather than the new class definition. I have confirmed through profiling that no standard references to the plugin classloader exist after the plugin has been unplugged; a weak reference is held to it by the CachedIntrospectionResults class.  I have traced the 'problem' down to a single line of code in Spring, in ClassUtils, line 160, where the following code is executed:  return Class.forName(name, false, classLoader);  Where name is the class of my plugin, and classLoader is confirmed to be the new plugin classloader which points to the updated plugin classes.  When this is executed for the reloaded plugin application context, the result is a class whose classloader is not the new plugin classloader passed in the third parameter to Class.forName() - it is the old, supposedly collectable instance of the plugin classloader. By constrast, if this line is replaced with:  return classLoader.loadClass(name);  the correct behaviour is exhibited, i.e. the new plugin classloader which is passed to ClassUtils.forName() is used to load the class.  I have tried to find a full description of the varying semantics of Class.forName vs. classLoader.loadClass(), but have yet to find anything of sufficient detail for me to follow this problem further. I can only confirm that the old classloader is used by Class.forName despite it being available for collection, as it is only referenced weakly by CachedIntrospectionResults.  I can simulate the correct behaviour by invoking System.gc() some large number of times when a plugin is unplugged, which seems to finalise the old classloader and make Class.forName use the new one. This is obviously not a desirable solution! :)  ---  **Affects:** 2.0 RC3  **Attachments:** - [springtest.zip](https://jira.spring.io/secure/attachment/11970/springtest.zip) (_4.52 kB_)  **Issue Links:** - #21984 ClassUtils.forName fails to load class from ContextTypeMatchClassLoader - #18631 ClassUtils.forName() performance","closed","type: enhancement,","spring-projects-issues","2006-09-19T19:37:15Z","2019-01-11T21:14:10Z"
"","7494","Generics metadata for nested collections [SPR-2807]","**[Stephen Todd](https://jira.spring.io/secure/ViewProfile.jspa?name=blurryrunner)** opened **[SPR-2807](https://jira.spring.io/browse/SPR-2807?redirect=false)** and commented  Spring doesn't respect generics metadata for nested collection classes. For example, when a Map is within a Map, the key for the inner map is not respected and is set to a value of type string (instead of looking up the type from the method and using a property editor).  Here is a concrete example. We are creating a message passing class that receives a message with an optional payload and delivers it to a series of subscribers. It is kind of like the ApplicationEventMulticaster (we will probably later make it implement that) but it only sends the message to those who sign up for the certain type. For example, a class could sign up for save events of a certain type of persistent class. Instead of everyone hearing about it, only those who are interested get it. We want to set it all up in context files (because that is the best place for it since it wont couple things as tightly). The property that the listeners are set up with is below:      public void setReceivers(Map receivers) {     	this.receivers = receivers;     }  The Map listed is organized by Notification class > Payload class > receivers. So we tried to set it up with a bean like follows:  ---           	     		     			     				     					     						     							     						     					     				     			     		     	       ---  This didn't, however, yield the expected results. We instead got the structure Map","closed","in: core,","spring-projects-issues","2006-11-07T08:29:35Z","2019-01-13T22:45:20Z"
"","7463","Add isFormChangeRequest(HttpServletRequest request, Object command) [SPR-2776]","**[Stephen M. Wick](https://jira.spring.io/secure/ViewProfile.jspa?name=stevewickii)** opened **[SPR-2776](https://jira.spring.io/browse/SPR-2776?redirect=false)** and commented  Please add a version of isFormChangeRequest to SimpleFormController, which provides access to the command Object and HttpServletRequest.  Use Case:  I put a property in my Command Object, and when it is set, that property indicates whether or not the submission is a change request.  The solution could look like this:  protected ModelAndView processFormSubmission( HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {      if (errors.hasErrors()) {     	if (logger.isDebugEnabled()) {     		logger.debug(""Data binding errors: "" + errors.getErrorCount());     	}     	return showForm(request, response, errors);     }     else if (isFormChangeRequest(request, command)) {		//","closed","type: enhancement,","spring-projects-issues","2006-10-30T04:33:15Z","2012-06-19T03:50:46Z"
"","7289","Custom scopes reference docs don't mention registerDestructionCallback [SPR-2600]","**[Stephen Denne](https://jira.spring.io/secure/ViewProfile.jspa?name=spdenne)** opened **[SPR-2600](https://jira.spring.io/browse/SPR-2600?redirect=false)** and commented  The reference manual does not give any guidance on implementing registerDestructionCallback for custom scopes (presumably added for #6773): http://static.springframework.org/spring/docs/2.0-rc4/reference/beans.html#beans-factory-scopes-custom  ---  **Affects:** 2.0 RC4  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-09-18T10:14:15Z","2019-01-11T21:10:23Z"
"","7807","Please, put the jira issue that are fixed in the cvs commit logs and changelog [SPR-3120]","**[Stephane Bailliez](https://jira.spring.io/secure/ViewProfile.jspa?name=sbailliez)** opened **[SPR-3120](https://jira.spring.io/browse/SPR-3120?redirect=false)** and commented  Please could you add as a guideline to always put the jira issue that is fixed in the commit logs when there is one ?  Going through the commits to see what has been fixed related to a particular issue is a major pain as you're left in the dark and have to read between the lines and browse everything.  Same for the changelog, it would be helpful to put the jira issue that are fixed in the changelog in front of the description as you cannot exactly figure out if a particular issue was fixed.  Many thanks !   --- No further details from [SPR-3120](https://jira.spring.io/browse/SPR-3120?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-02-06T00:32:27Z","2012-06-18T12:45:21Z"
"","7794","CharacterEncodingFilter's ""encoding"" property should be mandatory [SPR-3107]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-3107](https://jira.spring.io/browse/SPR-3107?redirect=false)** and commented  Currently if forgot to set ""encoding"" init parameter in CharacterEncodingFilter, I get NPE in doFilter:  ---  java.lang.NullPointerException: charsetName at java.lang.String.\(String.java:403) at java.lang.String.\(String.java:433) at org.apache.catalina.connector.Request.setCharacterEncoding(Request.java:1469) at org.apache.catalina.connector.RequestFacade.setCharacterEncoding(RequestFacade.java:306) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:76) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:77)  ---  ---  **Affects:** 1.2.8, 2.0.2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-02-03T03:45:06Z","2019-01-13T22:44:23Z"
"","7459","BeanFactory.getBean(""&name"") should return FactoryBean for any bean [SPR-2771]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-2771](https://jira.spring.io/browse/SPR-2771?redirect=false)** and commented  If some bean (""bebe"") is defined using FactoryBean, then beanFactory.getBean(""&bebe"") returns FactoryBean that can be used to get bean instance. Invoking getBean(""&bebe"") for regular bean causes BeanIsNotAFactoryException.  I think that getFactory(""&bebe"") should return FactoryBean for _any_ bean exising in bean factory, so that  beanFactory.getBean(""&bebe"")  should be semantically equivalent to  if (!beanFactory.containsBean(""bebe"")) throw ...; return new BeanFactory { ... getObject() { return beanFactory.getBean(""bebe""); } }   ---  **Affects:** 2.0 final  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-10-28T11:31:01Z","2012-06-19T09:37:22Z"
"","7355","AopUtils.isHashCodeMethod: use == instead of equals [SPR-2666]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-2666](https://jira.spring.io/browse/SPR-2666?redirect=false)** and commented  All method names are interned strings. So in AopUtils.isHashCodeMethod(), .isEqualsMethod() and .isToStringMethod() we can compare method name using == operator instead of equals, like:      public static boolean isHashCodeMethod(Method method) {     	return (method != null && method.getName() == ""hashCode"" &&     			method.getParameterTypes().length == 0);     }  I cannot give link to specification of this fact, but I've found this inside code of java.lang.reflect.Method of Sun JDK 1.5:      // This is guaranteed to be interned by the VM in the 1.4     // reflection implementation     private String		name;  I have written stupid performance test inside JdkDynamicProxyTests:      public void testTimings() {         AdvisedSupport advisedSupport = new AdvisedSupport();         advisedSupport.setInterfaces(new Class[] { Foo.class });         advisedSupport.addAdvice(new MethodInterceptor() {             public Object invoke(MethodInvocation methodInvocation) throws Throwable {                 return null;             }         });         Foo v = (Foo) new JdkDynamicAopProxy(advisedSupport).getProxy();         StopWatch stopWatch = new StopWatch();         stopWatch.start(""getName"");         for (int i = 0; i < 5000000; ++i) {             v.getBarThis();         }         stopWatch.stop();         System.out.println(stopWatch.prettyPrint());     }  On my old PowerBook on JDK1.5 it takes about 14.4 seconds when AopUtils.isXxxMethod uses ""equals"" and about 13.3 seconds when it uses == operator.  So, I think, AopUtils should be switched to using == operator.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-03T14:16:24Z","2006-10-03T19:26:34Z"
"","7328","AbstractSingleSpringContextTest.loadContextLocations() should declare Exception [SPR-2639]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-2639](https://jira.spring.io/browse/SPR-2639?redirect=false)** and commented  AbstractSingleSpringContextTest.loadContextLocations() shoud declare that it throws Exception, so I if I override it, I should not care about exceptions.  I need to override this method to perform some additional context initialization.  This is special case of general rule: all test initialization stuff should be allowed to throw java.lang.Exception.   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-26T05:40:42Z","2012-06-19T03:50:36Z"
"","7093","Autoproxy with several data source not in distributed transactions [SPR-2404]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-2404](https://jira.spring.io/browse/SPR-2404?redirect=false)** and commented  Got the situation. I have several data sources (app using 4 databases, big legacy system). Work with all data sources should be done in transactions. But there is no need in distributed transactions.  So I have to create 4 tx managers (DataSourceTransactionManager), and manually set up proxies for each DAOs. Seems like Spring cannot automate this work for me.  The perfect world is: I use annotations to declate what DAOs should be transactional, and some magic autoproxy creator makes proxies for DAOs attaching different tx managers depending on what data source DAO uses.  How to achieve this.  First, we should have two interfaces:  TxManagerFactory { TransactionManager getTxManager(DataSource) }  DataSourceExtractor { DataSource extractDS(Object daoBean); } or maybe DataSourceExtractor { BeanDefinition extractDS(BeanDefinition daoBean); }  Easy way:  Create interceptor by copying TransactionInterceptor that takes txManagerFactory and DataSourceExtractor, and instead of accessing transactionManager field, calls txManagerFactory.getDataSource(dsExtractor.extractDS(invocation.getThis())).  Hard way:  Can't explain how it should work. But when proxy created, interceptor is configured to use concrete txManager.  I'm going to make easy variant for myself.  My experience shows that it's very common situation—app working with several data sources not in distributed transactions, so this feature request is created.   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-10T11:42:49Z","2012-06-19T09:37:34Z"
"","7084","Pull getScope/setScope to BeanDefinition [SPR-2395]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-2395](https://jira.spring.io/browse/SPR-2395?redirect=false)** and commented  Please, pull setSingleton() and setScope() methods to BeanDefinition interface, so BeanFactoryPostProcessor could change bean scope.  I use BFPP that forces all beans of some type to be prototype. Currently my BFPP casts BeanDefinition to AbstractBeanDefinition, and all works fine.   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-08-08T22:12:06Z","2012-06-19T03:50:30Z"
"","6975","Bad diagnostics if cannot set some properties (and wrapped in a standard JDK exception) [SPR-2286]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-2286](https://jira.spring.io/browse/SPR-2286?redirect=false)** and commented  Context cannot be initialized.  Have stack trace in logs:  ---  java.lang.ExceptionInInitializerError at ru.yandex.market_bo.Main.main(Main.java:41) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'marketBackOffice' defined in URL [jar:file:/opt/home/nga/devel/market-svn/mbo/app/trunk/target/market-back-office.jar!/conf/applicationContext-mbo-servant.xml]: Error setting property values; nested exception is PropertyAccessExceptionsException (1 errors) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:821) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:237) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:153) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:254) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:337) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:68) at ru.yandex.market_bo.utils.spring.EvilGlueCode.\(EvilGlueCode.java:21) ... 1 more Caused by: PropertyAccessExceptionsException (1 errors) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:85) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:816) ... 13 more  ---  This stack trace is created with e.printStackTrace().  So I can't find, why Spring cannot set property values, and even don't know what properties cannot be set.  ---  **Affects:** 1.2.8, 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-12T02:41:18Z","2019-01-13T22:47:08Z"
"","6958","MethodInvocation.getArguments() should not return null [SPR-2269]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-2269](https://jira.spring.io/browse/SPR-2269?redirect=false)** and commented  MethodInvocation.getArguments() returns null array of arguments if using JDK Dynamic Proxy and calling no-arg method. This is because JDK InvocationHandler.invoke() recieves null array of arguments when method in case of no-arg method.  This behaviour causes the need of trivial checks  ---  Object[] args = methodInvocation.getArguments(); if (args == null) { args = new Object[0]; }  ---  in many interceptors that work with method arguments. This is not programmer-friendly.  So to work around JDK Dynamic Proxy behavior, this  ---  if (args == null) { args = EMPTY_OBJECT_ARRAY; }  ---  shoud be added in the beginning of JdkDynamicAopProxy.invoke().  Maybe other proxy implementations should be adjusted too, I haven't checked them.  ---  **Affects:** 2.0 M4  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-09T21:28:46Z","2019-01-13T22:47:12Z"
"","6944","Impossible to run tests in transaction if autowire is disabled [SPR-2255]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-2255](https://jira.spring.io/browse/SPR-2255?redirect=false)** and commented  Speaking about AbstractDependencyInjectionSpringContextTests and AbstractTransactionalSpringContextTests.  AbstractDependencyInjectionSpringContextTests.setUp() does things  1. Wires properties of this 2. Calls virtual onSetUp()  AbstractTransactionalSpringContextTests.onSetUp() looks at transactionManager property. If transactionManager is null, then test is executed not in transaction.  So. If autowire is disabled, it is not possible to set transactionManager before execution of AbstractTransactionalSpringContextTests.onSetUp() (without hacking, like overriding getContext()), so impossible to run tests in transaction.  ---  Proper solution (I think) is to extract following lines of AbstractDependencyInjectionSpringContextTests:setUp  ---  if (isPopulateProtectedVariables()) { if (this.managedVariableNames == null) { initManagedVariableNames(); } populateProtectedVariables(); } else if (getAutowireMode() != AUTOWIRE_NO) { this.applicationContext.getBeanFactory().autowireBeanProperties( this, getAutowireMode(), isDependencyCheck()); }  ---  into virtual method wireProperties(), so anyone could override it and populate transactionManager property before AbstractTransactionalSpringContextTests.onSetUp().  Version is latest CVS.  This issue relates to #6128.  ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-06T23:29:04Z","2019-01-13T22:47:20Z"
"","6907","Wrong translation of ORA-01918: user name does not exist [SPR-2217]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-2217](https://jira.spring.io/browse/SPR-2217?redirect=false)** and commented  Execution of  ---  DROP USER somenonexistent  ---  in JdbcTemplate causes  org.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [DROP USER test CASCADE]; nested exception is java.sql.SQLException: ORA-01918: user 'TEST' does not exist  errorCode: 1918 sqlState: 42000  Some other exception should be thrown, I don't know what. Grammar is OK ;-)  ---  **Affects:** 2.0 RC1","closed","status: declined,","spring-projects-issues","2006-06-28T23:50:33Z","2019-01-13T22:47:25Z"
"","7239","BeanWrapperImpl problems with indexed property descriptors [SPR-2550]","**[Stefan Schubert](https://jira.spring.io/secure/ViewProfile.jspa?name=pvblivs)** opened **[SPR-2550](https://jira.spring.io/browse/SPR-2550?redirect=false)** and commented  For the property org.jfree.chart.JFreeChart.Legend I get an NotReadablePropertyException (BeanwrapperImpl:509) though the method getLegend is existing. Same with some other setter methods in classes of the jfreechart framework.  In my debugger I found out that the pd variables actual type is IndexedPropertyDescriptor. BeanWrapperImpl:508 now asks for pd.getReadMethod which is null. The watch expression ((java.beans.IndexedPropertyDescriptor) pd).getIndexedReadMethod() though results in the correct getter method and not in null.  I can provide a complete working configuration reproducing the error and a screenshot of my Eclipse debug interface providing all the relevant information.   ---  **Affects:** 2.0 RC3  **Attachments:** - [SPR-2550a.jpg](https://jira.spring.io/secure/attachment/11942/SPR-2550a.jpg) (_319.01 kB_) - [webstatistics-charts.xml](https://jira.spring.io/secure/attachment/11943/webstatistics-charts.xml) (_4.63 kB_)","closed","in: core,","spring-projects-issues","2006-09-07T00:38:55Z","2019-01-12T16:28:50Z"
"","7395","factory definition breaks aop:scoped-proxy feature [SPR-2707]","**[Stefan Podkowinski](https://jira.spring.io/secure/ViewProfile.jspa?name=spod)** opened **[SPR-2707](https://jira.spring.io/browse/SPR-2707?redirect=false)** and commented  I'm trying to use a request scoped, proxied bean as a factory instance to create other beans. Unfortunally this won't work in my case.  Steps to reproduce:  1) define a bean using the ""request"" scope and enable aop:scoped-proxy    -> an instance of the bean will be created for each request correctly     \        \  2) now define a factory that makes use of instances of the bean defined above    -> appearently the bean referred by the factory-bean attribute will only be created once. Is the proxy still involved?     \    ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-10-12T01:14:58Z","2019-01-12T16:40:45Z"
"","7042","FieldRetrievingFactoryBean in spring 2.0 can not be called more then one time for the same static field [SPR-2353]","**[stefan langthaler](https://jira.spring.io/secure/ViewProfile.jspa?name=vai_stefan)** opened **[SPR-2353](https://jira.spring.io/browse/SPR-2353?redirect=false)** and commented  is this intended or is it a bug in spring 2.0 (i think this worked in spring 1.2.x):  want to read out the same static field several times with the FieldRetrievingFactoryBean as anonymous inner bean:  \ \\\ \ \ \\\ \  leads to  org.springframework.beans.factory.BeanDefinitionSt oreException: Error registering bean with name 'test.A.CONSTANT1' defined in null: Cannot register bean definition [Root bean: class [org.springframework.beans.factory.config.FieldRetr ievingFactoryBean]; ... for bean 'test.A.CONSTANT1': there's already [Root bean: class [org.springframework.beans.factory.config.FieldRetr ievingFactoryBean]; ...bound  if i reference the static field definition the second time, it is working (beanDefinitionOverriding is not allowed in my beanFactory):  \ \\\ \  reason: if i look into the application context, a bean with the fully qualified name of the static field is stored. when the FieldRetrievingFactoryBean is called a second time for the same field, the above exception is thrown since we already have a bean with this name in the application context (and i did not allow beanDefinitonOverriding).  did not test it with all version, but this worked at least till spring version 1.2.7   ---  **Affects:** 2.0 M5, 2.0 RC1, 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-26T16:20:51Z","2012-06-19T03:50:46Z"
"","7053","Wrong behaviour for Set property when property Class is not given to DataBinder.registerCustomEditor [SPR-2364]","**[Stefan Lang](https://jira.spring.io/secure/ViewProfile.jspa?name=sl)** opened **[SPR-2364](https://jira.spring.io/browse/SPR-2364?redirect=false)** and commented  Note that this faulty behaviour was NOT in Spring 1.2.8 (I don't know about other versions).  I'm using a subclass of CancellableFormController and override its initBinder method:      protected void initBinder(final HttpServletRequest request, final ServletRequestDataBinder binder) {     	binder.registerCustomEditor(     			null,  ""myProperty"", new MyPropertyEditor());         }  The type of the ""myProperty"" property of my POJO is java.util.Set\. The MyPropertyEditor.setAsText() method converts a String to a Set\ and saves this Set via setValue().  An example case: My controller receives a submit request with the ""myProperty"" parameter having a value of ""key"". MyPropertyEditor.setAsText() is programmed to convert the ""key"" string to a set of .  In this single request I can trace THREE instead of ONE call to setAsText():      setAsText(""key"")     setAsText(""a"")     setAsText(""b"")  I have the feeling that Spring is trying to do too much behind my back. A stacktrace from the third call to setAsText():  2006-07-28 13:23:43,558 ERROR [STDERR] - 	at java.lang.Thread.dumpStack(Thread.java:1158) 2006-07-28 13:23:43,558 ERROR [STDERR] - 	at at.repromedia.mailadmin.web.property.RolePropertyEditor.setAsText(RolePropertyEditor.java:25) 2006-07-28 13:23:43,558 ERROR [STDERR] - 	at org.springframework.beans.PropertyTypeConverter.convertValue(PropertyTypeConverter.java:250) 2006-07-28 13:23:43,558 ERROR [STDERR] - 	at org.springframework.beans.PropertyTypeConverter.convertIfNecessary(PropertyTypeConverter.java:174) 2006-07-28 13:23:43,558 ERROR [STDERR] - 	at org.springframework.beans.PropertyTypeConverter.convertIfNecessary(PropertyTypeConverter.java:108) 2006-07-28 13:23:43,558 ERROR [STDERR] - 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:723) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:575) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(AbstractPropertyAccessor.java:49) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:68) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:478) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.validation.DataBinder.doBind(DataBinder.java:393) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:146) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:108) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.web.servlet.mvc.BaseCommandController.bindAndValidate(BaseCommandController.java:368) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.web.servlet.mvc.AbstractFormController.handleRequestInternal(AbstractFormController.java:248) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:45) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:798) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:728) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:360) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 2006-07-28 13:23:43,559 ERROR [STDERR] - 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:810) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:264) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.intercept.web.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:107) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.intercept.web.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:72) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.ui.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:110) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.ui.switchuser.SwitchUserProcessingFilter.doFilter(SwitchUserProcessingFilter.java:335) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.providers.anonymous.AnonymousProcessingFilter.doFilter(AnonymousProcessingFilter.java:125) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.ui.rememberme.RememberMeProcessingFilter.doFilter(RememberMeProcessingFilter.java:142) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.ui.basicauth.BasicProcessingFilter.doFilter(BasicProcessingFilter.java:181) 2006-07-28 13:23:43,560 ERROR [STDERR] - 	at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.acegisecurity.ui.AbstractProcessingFilter.doFilter(AbstractProcessingFilter.java:217) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.acegisecurity.context.HttpSessionContextIntegrationFilter.doFilter(HttpSessionContextIntegrationFilter.java:191) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.acegisecurity.util.FilterChainProxy.doFilter(FilterChainProxy.java:148) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.acegisecurity.util.FilterToBeanProxy.doFilter(FilterToBeanProxy.java:90) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) 2006-07-28 13:23:43,561 ERROR [STDERR] - 	at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:175) 2006-07-28 13:23:43,562 ERROR [STDERR] - 	at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:74) 2006-07-28 13:23:43,562 ERROR [STDERR] - 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) 2006-07-28 13:23:43,562 ERROR [STDERR] - 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) 2006-07-28 13:23:43,562 ERROR [STDERR] - 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) 2006-07-28 13:23:43,562 ERROR [STDERR] - 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) 2006-07-28 13:23:43,562 ERROR [STDERR] - 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) 2006-07-28 13:23:43,562 ERROR [STDERR] - 	at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) 2006-07-28 13:23:43,562 ERROR [STDERR] - 	at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) 2006-07-28 13:23:43,562 ERROR [STDERR] - 	at org.apache.tomcat.util.net.MasterSlaveWorkerThread.run(MasterSlaveWorkerThread.java:112) 2006-07-28 13:23:43,562 ERROR [STDERR] - 	at java.lang.Thread.run(Thread.java:595)  Now when I change the initBinder() method to specify to property class:      protected void initBinder(final HttpServletRequest request, final ServletRequestDataBinder binder) {     	binder.registerCustomEditor(     			Set.class,  ""myProperty"", new MyPropertyEditor());         }  it works as expected, i.e. only one call to MyPropertyEditor.setAsText().   ---  **Affects:** 2.0 RC2  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2006-07-27T22:45:50Z","2019-01-12T16:28:58Z"
"","7090","NPE in SpringVersion.getVersion() results in NPE on some classloaders [SPR-2401]","**[Stefan Kleineikenscheidt](https://jira.spring.io/secure/ViewProfile.jspa?name=skleinei)** opened **[SPR-2401](https://jira.spring.io/browse/SPR-2401?redirect=false)** and commented  Some class loaders return null when you call myClass.getPackage().  In this case SpringVersion.getVersion() will throw a NPE.  Why would getVersion not just return a hard-coded String?   ---  **Affects:** 1.2.8, 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-10T08:35:07Z","2012-06-19T03:51:08Z"
"","7319","orm.jpa.persistenceunit.PersistenceUnitReader requires persistence_1_0.xsd [SPR-2630]","**[Stefan Arentz](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.arentz)** opened **[SPR-2630](https://jira.spring.io/browse/SPR-2630?redirect=false)** and commented  I'm trying to use OpenJPA together with Spring but I cannot get past the following error:  Caused by: java.lang.IllegalArgumentException: Invalid XML in persistence unit from class path resource [com/sateh/wicket/quickstart/repositories/MessageRepository-persistence.xml] Caused by: org.xml.sax.SAXParseException: cvc-elt.1: Cannot find the declaration of element 'persistence'.  This happens because OpenJPA doesn't have persistence_1_0.xml in the distribution jars. I'm not sure if this is a Spring or OpenJPA problem but I think it would be good if Spring would still parse and use the XML even if no xsd is available. The PersistenceUnitReader says in validateResource() around line 162:  logger.debug(""No schema location found - falling back to the XML parser"");  But there is no fallback. It still tries to use the validating parser.  S.   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-22T22:51:34Z","2012-06-19T03:50:03Z"
"","7153","PersistenceAnnotationBeanPostProcessor incorrectly caches bean definitions [SPR-2464]","**[Stefan Arentz](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.arentz)** opened **[SPR-2464](https://jira.spring.io/browse/SPR-2464?redirect=false)** and commented  http://forum.springframework.org/showthread.php?p=74123  The problem is that the PersistenceAnnotationBeanPostProcessor does a lookup of all EntityManagerFactory classes in the application context when it encounters a `@PersistenceContext` annotation and then at that point caches the list and uses that from then on even though more EntityManagerFactories could be defined later on in the application context.   ---  **Affects:** 2.0 RC3  2 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2006-08-23T00:52:44Z","2012-06-19T03:50:06Z"
"","7793","setIgnoreInvalidFields doesn't seem to be working [SPR-3106]","**[Sreekant T](https://jira.spring.io/secure/ViewProfile.jspa?name=sre786)** opened **[SPR-3106](https://jira.spring.io/browse/SPR-3106?redirect=false)** and commented  I have asked about this on the web forum. The javadoc for setIgnoreInvalidFields says that this should handle the uninitialized nested objects. Not sure if I am doing something wrong... We use velocity and I Keep getting this exception for all nested uninitialized fields even when I set ignoreInvalidFields to true on my dataBinder (in initBinder of my controller). [CODE] org.springframework.web.util.NestedServletException: Method invocation failed during rendering of Velocity view with name 'collectMembers': Invocation of method 'getBindStatus' in  class org.springframework.web.servlet.support.RequestContext threw exception class org.springframework.beans.NullValueInNestedPathException : Invalid property 'members[0].name' of bean class [com.ctx.model.NestedCommand]: Value of nested property 'members[0].name' is null; reference [springMacroRequestContext], method 'getBindStatus'; nested exception is org.springframework.beans.NullValueInNestedPathException: Invalid property 'members[0].name' of bean class [com.ctx.model.NestedCommand]: Value of nested property 'members[0].name' is null org.springframework.web.servlet.view.velocity.VelocityView.mergeTemplate(VelocityView.java:558) org.springframework.web.servlet.view.velocity.VelocityView.doRender(VelocityView.java:500) org.springframework.web.servlet.view.velocity.VelocityView.renderMergedTemplateModel(VelocityView.java:320) org.springframework.web.servlet.view.AbstractTemplateView.renderMergedOutputModel(AbstractTemplateView.java:178) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:248) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1055) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:819) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:728) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) .... root cause org.springframework.beans.NullValueInNestedPathException: Invalid property 'members[0].name' of bean class [com.ctx.model.NestedCommand]: Value of nested property 'members[0].name' is null org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:418)	org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:393) org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:394) org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:499)	org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:59) org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:333) org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:117) org.springframework.web.servlet.support.RequestContext.getBindStatus(RequestContext.java:687) sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) java.lang.reflect.Method.invoke(Method.java:585) org.apache.velocity.util.introspection.UberspectImpl$VelMethodImpl.invoke(UberspectImpl.java:267) org.apache.velocity.runtime.parser.node.ASTMethod.execute(ASTMethod.java:197) org.apache.velocity.runtime.parser.node.ASTReference.execute(ASTReference.java:175) org.apache.velocity.runtime.parser.node.ASTReference.value(ASTReference.java:327) org.apache.velocity.runtime.parser.node.ASTExpression.value(ASTExpression.java:51) org.apache.velocity.runtime.parser.node.ASTSetDirective.render(ASTSetDirective.java:95) org.apache.velocity.runtime.parser.node.ASTBlock.render(ASTBlock.java:55) org.apache.velocity.runtime.parser.node.SimpleNode.render(SimpleNode.java:230) org.apache.velocity.runtime.parser.node.ASTIfStatement.render(ASTIfStatement.java:89) org.apache.velocity.runtime.parser.node.SimpleNode.render(SimpleNode.java:230) org.apache.velocity.runtime.directive.VelocimacroProxy.render(VelocimacroProxy.java:172) org.apache.velocity.runtime.parser.node.ASTDirective.render(ASTDirective.java:114) org.apache.velocity.runtime.parser.node.SimpleNode.render(SimpleNode.java:230) org.apache.velocity.runtime.directive.VelocimacroProxy.render(VelocimacroProxy.java:172) org.apache.velocity.runtime.parser.node.ASTDirective.render(ASTDirective.java:114) org.apache.velocity.runtime.parser.node.SimpleNode.render(SimpleNode.java:230) org.apache.velocity.Template.merge(Template.java:256) org.springframework.web.servlet.view.velocity.VelocityView.mergeTemplate(VelocityView.java:555) org.springframework.web.servlet.view.velocity.VelocityView.doRender(VelocityView.java:500)	org.springframework.web.servlet.view.velocity.VelocityView.renderMergedTemplateModel(VelocityView.java:320) org.springframework.web.servlet.view.AbstractTemplateView.renderMergedOutputModel(AbstractTemplateView.java:178) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:248) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1055) ..... [/CODE]  I have a nested command object... for this case its pretty simple [CODE] public class NestedCommand {  private List\ _members = null;  public NestedCommand(){ [B]    //If I don't do this it fails on command.members[0] _members = ListUtils.lazyList(new ArrayList\(), FactoryUtils.instantiateFactory(Member.class));[/B] } public List\ getMembers() { return _members; } public void setMembers(List\ members) { _members = members; } } [/CODE] Nested Objects: [CODE] public class Member implements Serializable { protected Name _name; protected String _email;      public Member() {  [B]     If uncomment this it works fine... // _name = new Name(null,"""",null,null,false);[/B] } public Member(Name name, String email) { _name = name; _email = email; } public Name getName() { return _name; } public void setName(Name name) { _name = name; } public String getEmail() { return _email; } public void setEmail(String email) { _email = email; } }  ---  public class Name implements Serializable, Cloneable { private String _title; private String _firstName; private String _middleName; private String _lastName;      /**      * @throws NullPointerException if first or last is null.      */     public Name(String title, String first, String middle, String last) {         this(title, first, middle, last, true);     }          /**      * Contructor that allowes any part of the name to be null if the verify param is false.      */     public Name(String title, String first, String middle, String last, boolean verify) {         _title = title;         _firstName = first;         _middleName = middle;         _lastName = last;              if (verify) { verify(); }     }  public String getTitle() { return _title; }  public void setTitle(String title) { _title = title; }  public String getFirstName() { return _firstName; }  public void setFirstName(String firstName) { _firstName = firstName; }  public String getMiddleName() { return _middleName; }  public void setMiddleName(String middleName) { _middleName = middleName; }  public String getLastName() { return _lastName; }  public void setLastName(String lastName) { _lastName = lastName; } } [/CODE]  And my controller is subclass of SimpleFormController [CODE] public class MemberCreateController  extends SimpleFormController {  public ModelAndView onSubmit(Object command) throws ServletException { return new ModelAndView(getSuccessView(), ""command"", command); }  public void initBinder(HttpServletRequest request, ServletRequestDataBinder dataBinder){ [B]dataBinder.setIgnoreInvalidFields(true);[/B] }  protected Object formBackingObject(HttpServletRequest request) throws ServletException { return new NestedCommand(); } } [/CODE]  My velocity template has these line... [CODE]  \ #set( $TabIndex = 11 ) \#springFormInput(""command.members[0].name.firstName"" ""maxlength=128 tabindex=${TabIndex}"")\ #set( $TabIndex = $TabIndex + 1 ) \#springFormInput(""command.members[0].name.lastName"" ""maxlength=128 tabindex=${TabIndex}"")\ #set( $TabIndex = $TabIndex + 1 ) \#springFormInput(""command.members[0].email"" ""maxlength=128 tabindex=${TabIndex}"")\ \ [/CODE]  Am I doing something wrong or did I miss anything. The Java doc says setIgnoreInvalidFields should be able to handle the nested null values. Is this a Velocity related issue or does this happen with JSP too?? Is data binding logic spring  same for all view technologies (Velocity/JSP/...)?  Thanks, Sre  ---  **Affects:** 2.0.1","closed","status: declined,","spring-projects-issues","2007-02-02T10:43:59Z","2019-01-13T22:44:24Z"
"","7614","Problems with spring 2.0.2 and hibernate using schemaupdate=true [SPR-2928]","**[Simon Rydberg](https://jira.spring.io/secure/ViewProfile.jspa?name=simpor)** opened **[SPR-2928](https://jira.spring.io/browse/SPR-2928?redirect=false)** and commented  loading the following application-context, causes the error message at the end.                                                WEB-INF/jdbc.properties                                                                            ${jdbc.driverClassName}                               ${jdbc.url}                               ${jdbc.username}                               ${jdbc.password}                                                            library.hbm.xml                                                ${hibernate.dialect}                                                   true 1, false 0, yes 'Y', no 'N'                 false                 false                                                                                                                                               true                                                                                                                                                                                                                            PROPAGATION_REQUIRED,readOnly                 PROPAGATION_REQUIRED,readOnly                 PROPAGATION_REQUIRED,readOnly                 PROPAGATION_REQUIRED                 PROPAGATION_REQUIRED                             Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in file [/home/simonrydberg/projects/trains/web/WEB-INF/applicationContext-hibernate.xml]: Invocation of init method failed; nested exception is org.springframework.orm.hibernate3.HibernateSystemException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean; nested exception is org.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean Caused by: org.springframework.orm.hibernate3.HibernateSystemException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean; nested exception is org.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean Caused by: org.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean at org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider.configure(LocalDataSourceConnectionProvider.java:49) at org.hibernate.connection.ConnectionProviderFactory.newConnectionProvider(ConnectionProviderFactory.java:124) at org.hibernate.connection.ConnectionProviderFactory.newConnectionProvider(ConnectionProviderFactory.java:56) at org.hibernate.cfg.SettingsFactory.createConnectionProvider(SettingsFactory.java:397) at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:62) at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2002) at org.hibernate.cfg.Configuration.generateSchemaUpdateScript(Configuration.java:947) at org.springframework.orm.hibernate3.LocalSessionFactoryBean$3.doInHibernate(LocalSessionFactoryBean.java:934) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:362) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:328) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.updateDatabaseSchema(LocalSessionFactoryBean.java:928) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterSessionFactoryCreation(LocalSessionFactoryBean.java:826) at org.springframework.orm.hibernate3.AbstractSessionFactoryBean.afterPropertiesSet(AbstractSessionFactoryBean.java:133) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1057) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1024) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:421) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:270) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:346) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:89) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:74) at se.transrail.trains.domain.railway.RailwayImport2.createDatabaseFromFile(RailwayImport2.java:44) at se.transrail.trains.domain.railway.RailwayImport2.main(RailwayImport2.java:36) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)  I have tried to create a own LocalSessionFactoryBean:  public class MyLSFB extends LocalSessionFactoryBean { protected void postProcessConfiguration(Configuration config) throws HibernateException { DriverManagerDataSource dataSource = new DriverManagerDataSource(); dataSource.setDriverClassName(""org.gjt.mm.mysql.Driver""); dataSource.setUrl(""jdbc.url=jdbc:mysql://localhost:3306/database_name?autoReconnect=true""); dataSource.setUsername(""root""); dataSource.setPassword(""""); this.setDataSource(dataSource); }  and loading it instead of the default LocalSessionFactoryBean. Debugging it, it does come in to the method and creates and sets the datasource, but I still get the error-message...  ---  **Affects:** 2.0.2  **Issue Links:** - #7596 Hibernate 3.2.1; HibernateException No local DataSource found for configuration when schemaUpdate is true (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2006-12-07T23:55:35Z","2019-01-12T16:51:52Z"
"","7611","Can't use the schemaupdate=true functionality in Spring 2.0.1 [SPR-2925]","**[Simon Rydberg](https://jira.spring.io/secure/ViewProfile.jspa?name=simpor)** opened **[SPR-2925](https://jira.spring.io/browse/SPR-2925?redirect=false)** and commented  Using this Sessionfactory:  \ \ \ \ \library.hbm.xml\ \ \ \ \${hibernate.dialect}\ \ \ \true 1, false 0, yes 'Y', no 'N'\ \false\ \false\ \ \ \ \ \ \ \ \ \ \ \true\ \ \ and setting the property schemaUpdate=true, causes the error message below. This worked perfectly in Spring 1.2.8 but after the upgrade I can't set the property to true. It's no problem when schemaUpdate=false. Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in file [/home/simonrydberg/projects/trains/web/WEB-INF/applicationContext-hibernate.xml]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: SessionFactory not initialized yet Caused by: java.lang.IllegalStateException: SessionFactory not initialized yet at org.springframework.orm.hibernate3.AbstractSessionFactoryBean.getSessionFactory(AbstractSessionFactoryBean.java:175) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.updateDatabaseSchema(LocalSessionFactoryBean.java:918) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:762) at org.springframework.orm.hibernate3.AbstractSessionFactoryBean.afterPropertiesSet(AbstractSessionFactoryBean.java:131) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1062) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1029) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:420) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:89) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:74) at se.transrail.trains.domain.railway.RailwayImport2.createDatabaseFromFile(RailwayImport2.java:44) at se.transrail.trains.domain.railway.RailwayImport2.main(RailwayImport2.java:36) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)  ---  **Affects:** 2.0.1  **Issue Links:** - #7358 LocalSessionFactoryBean initialization fails with  ""java.lang.IllegalStateException: SessionFactory not initialized yet "" when schemaUpdate is set to true (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2006-12-07T00:31:00Z","2019-01-11T21:23:15Z"
"","7547","Adding a new LobHandlerDelegatorFactoryBean [SPR-2860]","**[Shishir K Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=shishirksingh)** opened **[SPR-2860](https://jira.spring.io/browse/SPR-2860?redirect=false)** and commented  Not sure if it's someting that is useful. However, as I use propertyplaceholders in xml and for hibernate, the lobhandlers could change based on the dialect that is used for hibernate, I had to create the LobHandlerDelegatorFactoryBean in order to be able to dynamically determine which lobhandler to instantiate without having to dfine both the standardLobHandler/OracleLobHandler and having to comment/uncomment them as needed. I have atatched a crude implementaion. Maybe it can be rfined and added to spring's jdbc support for lobs.   ---  **Affects:** 2.0 final  **Attachments:** - [LobHandlerDelegatorFactoryBean.java](https://jira.spring.io/secure/attachment/12234/LobHandlerDelegatorFactoryBean.java) (_5.01 kB_) - [LobHandlerDelegatorFactoryBean.java](https://jira.spring.io/secure/attachment/12233/LobHandlerDelegatorFactoryBean.java) (_4.92 kB_)","closed","type: enhancement,","spring-projects-issues","2006-11-21T08:32:09Z","2012-06-19T09:37:34Z"
"","7546","Implement compression for BlobByteArrayType [SPR-2859]","**[Shishir K Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=shishirksingh)** opened **[SPR-2859](https://jira.spring.io/browse/SPR-2859?redirect=false)** and commented  When storing blobs as bytes, we may want to keep it in a compressed format. I am attaching a crude implementation of the same that does nothing but compresses /uncompresses the bytes and can be used as another Hibernate type.  I am sure this can be refined and can be a valuable part of spring's Hibernate support   ---  **Affects:** 2.0 final  **Attachments:** - [CompressBlobByteArrayType.java](https://jira.spring.io/secure/attachment/12232/CompressBlobByteArrayType.java) (_4.49 kB_)","closed","type: enhancement,","spring-projects-issues","2006-11-21T08:11:16Z","2012-06-19T09:37:24Z"
"","7545","Behavior of ServletRequestUtils.getRequiredStringParameter for empty strings [SPR-2858]","**[Shishir K Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=shishirksingh)** opened **[SPR-2858](https://jira.spring.io/browse/SPR-2858?redirect=false)** and commented  There should be a method ServletRequestUtils.getRequiredStringParameter(ServletRequest request, String name, boolean checkForEmptyString)  that will throw exception (same as what happened in RequestUtils) if checkForEmptyString = true.  ServletRequestUtils.getRequiredStringParameter(ServletRequest request, String name) can then call this with appropriate default  for ""checkForEmptyString"" in order to either behave same as in RequestUtils or retain the current behavior (i.e don't throw exception for empty strings).  Shishir   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-21T06:25:47Z","2012-06-19T09:37:38Z"
"","7219","ManagedEntityManagerFactoryInvocationHandler should be able to return the target EntityManagerFactory [SPR-2530]","**[Shay Banon](https://jira.spring.io/secure/ViewProfile.jspa?name=kimchy)** opened **[SPR-2530](https://jira.spring.io/browse/SPR-2530?redirect=false)** and commented  Using Spring, JPA EntityManagerFactory might be proxied using ManagedEntityManagerFactoryInvocationHandler. The problem is that there is no way to access the actual EntityManagerFactory. I suggest adding an interface that will be used when creating the proxy with a single EntityManagerFactory getTarget() method. The invocation handler would identify this method, and return the target entity manager factory.  I know that the proxy creation creates the proxy with all the implemented interfaces, but there are problems when there is no interface to work with. Hibernate is ok in this case, but toplink essentials does not have a dedicated interface, just base classes.  I have no problems with submitting a patch (though the fix is simple), just suggest a name for the interface that returns the target entity manager factory and a location.   ---  **Affects:** 2.0 M5, 2.0 RC1","closed","in: data,","spring-projects-issues","2006-09-03T01:46:52Z","2019-01-11T19:21:54Z"
"","7013","Can one use Spring Framework with JSP 1.2 [SPR-2324]","**[Serg Grish](https://jira.spring.io/secure/ViewProfile.jspa?name=sgrish)** opened **[SPR-2324](https://jira.spring.io/browse/SPR-2324?redirect=false)** and commented  Is it possible to develop and deploy Spring application on the app server which supports only up to JSP 1.2 If yes, which version of the Spring Framework should be used for this. I realize that usually there's no ""yes"" or ""no"" answer, but I would appreciate any helpful info.   --- No further details from [SPR-2324](https://jira.spring.io/browse/SPR-2324?redirect=false)","closed","status: declined,","spring-projects-issues","2006-07-19T06:52:40Z","2012-06-19T09:37:24Z"
"","6916","Openning an inner transaction within the same bean is not being intercepted by the Spring proxy [SPR-2226]","**[Sephi Lipkin](https://jira.spring.io/secure/ViewProfile.jspa?name=tici)** opened **[SPR-2226](https://jira.spring.io/browse/SPR-2226?redirect=false)** and commented  We're using Spring to manage the transactions via the Websphere JTA transaction manager. We use Hibernate 3.1.2 to access the database. We have a Spring bean with a method, let's say a(), that needs to call another method b() in the same bean. We attach a transaction to a(), but we want b() to start an inner transaction and we therefore attach a transaction to b() in the ApplicationContext.xml. Once, we get into the bean, Spring doesn't seem to proxy the methods anymore and doesn't start a new transaction when a() calls b(). Is that the intended behavior? Do we need to add any extra declarations?   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-06-30T17:51:47Z","2019-01-11T19:08:54Z"
"","7690","PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE not set when default handler used in AbstractUrlHandlerMapping [SPR-3004]","**[Seong-Jin Cho](https://jira.spring.io/secure/ViewProfile.jspa?name=plusaqua)** opened **[SPR-3004](https://jira.spring.io/browse/SPR-3004?redirect=false)** and commented  When default handler is used in AbstractUrlHandlerMapping, PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE is not set.  This can be verified by following steps:  1. Create the following handler mapping.     \    \    \    \    /* = mycontroller    \    \    \    \ 2. MyController.java:  public class MyController extends AbstractController {      protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)             throws Exception {         if (request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE) == null) {             System.err.println(""PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE not set!!!"");         }         return null;     }  }   ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2007-01-02T02:50:10Z","2012-06-19T03:50:15Z"
"","7685","AntPathMatcher.extractPathWithinPattern doc mismatch for patterns like ""/docs/cvs/*.html"" [SPR-2999]","**[Seong-Jin Cho](https://jira.spring.io/secure/ViewProfile.jspa?name=plusaqua)** opened **[SPR-2999](https://jira.spring.io/browse/SPR-2999?redirect=false)** and commented  According to the javadoc of AntPathMatcher.extractPathWithinPattern, the method should return ""commit"" when called with parameters pattern=""/docs/cvs/*.html"" and path=""/docs/cvs/commit.html"", but it returns ""commit.html"" instead. This can be verified using the following code:  import org.springframework.util.AntPathMatcher; public class Test { public static void main(String[] args) { AntPathMatcher m = new AntPathMatcher(); System.out.println(m.extractPathWithinPattern(""/docs/cvs/*.html"", ""/docs/cvs/commit.html"")); } }   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-31T05:27:14Z","2012-06-19T03:51:00Z"
"","7196","Spring + JTA + Hibernate + Oracle Native connection (raw connection) + Websphere [SPR-2507]","**[Senthilkumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sendtopms)** opened **[SPR-2507](https://jira.spring.io/browse/SPR-2507?redirect=false)** and commented  We are using Spring provided declartive TX (with JTA) we have 2 different schema. TX starts at (Appservice) Call trace is 1. Appservice (POJO Spring managed bean)    ---> Core Service - 1 (POJO Spring managed bean) --> DAO - 1 (POJO Spring managed bean with hibernate SessionFactory 1 )    ---> Core Service - 2 (POJO Spring managed bean) --> DAO - 2 (POJO Spring managed bean with SessionFactory 2 )  DAO -1 has Store Proc which uses native connection got from WebsphereNativeJdbcExtractor. When DAO -2 fails to update/insert the table we are trying to rollback DAO -1's work done using Stored Proc. But it is failing.  I noticed that ""com.ibm.ws.rsadapter.jdbc.WSJdbcUtil"" getNativeConnection returns unmanaged connection (It is not under Transaction) so work done using StoredProc is not getting rolled back.  But if connection retrieved from Hiberante Session is used directly, then it is rolling back. In our case we need native connection for STRUCTS and Array creation.  I tested this using Test java program in Websphere with native connection got from WSJdbcUtil under UserTransaction. It is not rolling back.  My question is ""How to get the Oracle Native Connection using Spring so that it will be enlisted in TX?    ---  **Affects:** 1.2.8","closed","status: declined,","spring-projects-issues","2006-08-30T00:39:55Z","2019-01-12T16:28:54Z"
"","7032","non final class JtaTransactionManager constructor should not access overirde-able method [SPR-2343]","**[Senthilkumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sendtopms)** opened **[SPR-2343](https://jira.spring.io/browse/SPR-2343?redirect=false)** and commented  non final class JtaTransactionManager constructor should not access overirde-able method. Constructor of JtaTransactionManager is accessing 1. setNestedTransactionAllowed 2. afterPropertiesSet  method access specifier should be either static or private or public+final. Otherwise it will end up in class-initialization (super-sub class) issue.   ---  **Affects:** 1.2.8","closed","type: enhancement,","spring-projects-issues","2006-07-25T02:07:57Z","2012-06-19T03:50:33Z"
"","7004","SqlParameter should support scale for double values [SPR-2315]","**[Sebastian Radics](https://jira.spring.io/secure/ViewProfile.jspa?name=radicss)** opened **[SPR-2315](https://jira.spring.io/browse/SPR-2315?redirect=false)** and commented  A double-object insert with SqlUpdate cannot be done with a loose of precision.  20.25 is stored as 20.00. See simple-Test-Method:  public void testSimpleDoubleInsert() throws Exception{ JdbcTemplate v_jdbcTemplate = new JdbcTemplate(getDataSource()); //direct double write - works fine v_jdbcTemplate.execute(""create table cmdb2adm.test(id integer not null, wert decimal(15, 2) not null)""); v_jdbcTemplate.execute(""insert into cmdb2adm.test(id,wert) values(1,20.25)""); final int[] v_resultCount = {0}; v_jdbcTemplate.query(""select id,wert from cmdb2adm.test"",new RowCallbackHandler(){ public void processRow(ResultSet a_rs) throws SQLException { assertEquals(20.25,a_rs.getDouble(""wert""),0.001); v_resultCount[0]++; } }); assertEquals(1,v_resultCount[0]);      //insert with prepared statement and direct double write- works fine     v_resultCount[0]=0;     v_jdbcTemplate.execute(""delete from cmdb2adm.test"");     Connection v_conn = getDataSource().getConnection();     PreparedStatement v_stmt = v_conn.prepareStatement(""insert into cmdb2adm.test(id,wert) values(?,?)"");     v_stmt.setInt(1,1);     v_stmt.setDouble(2,20.25);     v_stmt.execute();     v_stmt.close();     v_conn.close();     v_jdbcTemplate.query(""select id,wert from cmdb2adm.test"",new RowCallbackHandler(){          public void processRow(ResultSet a_rs) throws SQLException {               assertEquals(20.25,a_rs.getDouble(""wert""),0.001);               v_resultCount[0]++;          }     });     assertEquals(1,v_resultCount[0]);     //insert with prepared statement and double-Object write- works fine  -->Use of special setObject-Method     v_resultCount[0]=0;     v_jdbcTemplate.execute(""delete from cmdb2adm.test"");     v_conn = getDataSource().getConnection();     v_stmt = v_conn.prepareStatement(""insert into cmdb2adm.test(id,wert) values(?,?)"");     v_stmt.setInt(1,1);     v_stmt.setObject(2,new Double(20.25),Types.DOUBLE,2);     v_stmt.execute();     v_stmt.close();     v_conn.close();     v_jdbcTemplate.query(""select id,wert from cmdb2adm.test"",new RowCallbackHandler(){          public void processRow(ResultSet a_rs) throws SQLException {               assertEquals(20.25,a_rs.getDouble(""wert""),0.001);               v_resultCount[0]++;          }     });     assertEquals(1,v_resultCount[0]);     //insert with sql-Update doesn't work - Problem ist SqlParameter - no Support for Double-Decimal-Range     v_resultCount[0]=0;     v_jdbcTemplate.execute(""delete from cmdb2adm.test"");     SqlUpdate v_update = new SqlUpdate(getDataSource(),""insert into cmdb2adm.test(id,wert) values(?,?)"");     v_update.declareParameter(new SqlParameter(""id"",Types.INTEGER));     v_update.declareParameter(new SqlParameter(""wert"",Types.DOUBLE));     Object[] v_values = new Object[]{Integer.valueOf(1),""20.25""};     v_update.update(v_values);     v_jdbcTemplate.query(""select id,wert from cmdb2adm.test"",new RowCallbackHandler(){          public void processRow(ResultSet a_rs) throws SQLException {  //Bug assertEquals(20.25,a_rs.getDouble(""wert""),0.001);    v_resultCount[0]++; } }); assertEquals(1,v_resultCount[0]); }  ---  **Affects:** 1.2.8  **Attachments:** - [SqlParameter.java](https://jira.spring.io/secure/attachment/11815/SqlParameter.java) (_4.85 kB_) - [StatementCreatorUtils.java](https://jira.spring.io/secure/attachment/11816/StatementCreatorUtils.java) (_8.57 kB_)  **Issue Links:** - #8397 SqlOutParameter should support scale","closed","type: enhancement,","spring-projects-issues","2006-07-17T20:22:03Z","2019-01-11T18:33:10Z"
"","7206","Stack Trace / Error Missing when attempting to proxy a ""final"" DAO class [SPR-2517]","**[Sean Crotty](https://jira.spring.io/secure/ViewProfile.jspa?name=scrotty)** opened **[SPR-2517](https://jira.spring.io/browse/SPR-2517?redirect=false)** and commented  I accidentally attempted to use Spring to proxy a DAO class  - but the class was declared ""final"". The error message was not clear at all. Costin Leau clued me into the actual issue in: http://forum.springframework.org/showthread.php?p=75341#post75341.  Here is the error message that came back: Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personDao' defined in class path resource [springHibernate.spring]: Initialization of bean failed; nested exception is null Caused by:  Here is the spring config file:  \  \                                                                                                                   org.hibernate.dialect.HSQLDialect                 update                 thread                 org.hibernate.transaction.JDBCTransactionFactory                                                                              com.pd.springHibernate.Person                                                                                              \  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7260 Use of AspectException with broken getMessage in case of nested exception (_**""depends on""**_)  1 votes, 0 watchers","closed","type: bug,","spring-projects-issues","2006-08-31T03:32:04Z","2019-01-11T19:16:53Z"
"","7439","SPR_2109 reoccurs in Resin 3.0.18 [SPR-2751]","**[scott.tian](https://jira.spring.io/secure/ViewProfile.jspa?name=mtiger2k)** opened **[SPR-2751](https://jira.spring.io/browse/SPR-2751?redirect=false)** and commented  SPR_2109 reoccurs in Resin 3.0.18. I built the spring.jar today, then test again, this problem still occurs.  ---  **Issue Links:** - #6801 XML Schema-based configuration can not use in web server resin3 (_**""depends on""**_)","closed","in: core,","spring-projects-issues","2006-10-24T20:29:38Z","2019-01-11T21:01:26Z"
"","7096","StatementCreatorUtils handling of null values incompatible with Informix [SPR-2407]","**[Scott Schenkein](https://jira.spring.io/secure/ViewProfile.jspa?name=schenksj)** opened **[SPR-2407](https://jira.spring.io/browse/SPR-2407?redirect=false)** and commented  Under 1.2.7, attempts to insert NULL's in JdbcTemplate.update using a prepared statement fail on Informix.  They succeed under the 1.1 tree.  The difference is  Old (StatementCreatorUtils, 94)  ---      if (sqlType == SqlTypeValue.TYPE_UNKNOWN) {             // possible alternative: ps.setNull(paramIndex, Types.NULL);             ps.setObject(paramIndex, null);     }  New  ---      if (sqlType == SqlTypeValue.TYPE_UNKNOWN) {             ps.setNull(paramIndex, Types.NULL);     }  When the updated null handler runs on Informix, the update/insert fails, and you get this stack trace:  java.sql.SQLException: Unknown object type at com.informix.util.IfxErrMsg.getSQLException(IfxErrMsg.java:373) at com.informix.jdbc.IfxValue.a(IfxValue.java:405) at com.informix.jdbc.IfxValue.a(IfxValue.java:642) at com.informix.jdbc.IfxValue.c(IfxValue.java:617) at com.informix.jdbc.IfxValue.a(IfxValue.java:593) at com.informix.jdbc.IfxValue.a(IfxValue.java:394) at com.informix.jdbc.IfxPreparedStatement.setNull(IfxPreparedStatement.java:636) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:96) at org.springframework.jdbc.core.JdbcTemplate$ArgPreparedStatementSetter.setValues(JdbcTemplate.java:1181) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:696) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:476) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:692) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:754) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:762)  ---  **Affects:** 1.2.7, 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-11T02:20:06Z","2019-01-13T22:46:43Z"
"","7592","Using same bean name in 'id' and 'name' attributes in xml config causes exception [SPR-2905]","**[Scott Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=scottr)** opened **[SPR-2905](https://jira.spring.io/browse/SPR-2905?redirect=false)** and commented  If you define a bean with the same 'id' and 'name' attributes in the xml config, an exception will be thrown upon parsing the bean definition file.  eg. \ \  causes:  org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Bean name 'foo' is already used in this file. at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:59) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:64) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:55) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.checkNameUniqueness(BeanDefinitionParserDelegate.java:452) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(BeanDefinitionParserDelegate.java:418) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(BeanDefinitionParserDelegate.java:390) etc  The problem seems to be caused by org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.checkNameUniqueness(String, List, Element).  The bean name is added to the list of used names, then the aliases are checked. Because the aliases contain the same bean name, it causes the exception.  This behaviour does not occur in version 1.2.8. This may not technically be a bug (I guess id and name should not be the same), but it does cause a problem with backwards compatability.   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-03T12:05:04Z","2012-06-19T03:50:58Z"
"","7470","Invocation of Hibernate's SessionImplementor.afterTransactionCompletion from SpringSessionSynchronization never fires interceptor [SPR-2783]","**[Scott Rankin](https://jira.spring.io/secure/ViewProfile.jspa?name=srankin)** opened **[SPR-2783](https://jira.spring.io/browse/SPR-2783?redirect=false)** and commented  With Hibernate 3.1.3 and Spring 2.0 final, my Hibernate Interceptor's afterTransactionCompletion callback never fires.  Looking at the SpringSessionSynchronization class, it always passes NULL to the SessionImplementor.afterTransactionCompletion's Transaction parameter, and if you look in the Hibernate source code, it never calls the interceptor's afterTransactionCompletion if the transaction is null.  Is this behavior by design?   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-31T08:14:58Z","2007-07-20T20:32:05Z"
"","7141","NPE when debug logging turned on in AbstractAutowireCapableFactoryBean [SPR-2452]","**[Scott Rankin](https://jira.spring.io/secure/ViewProfile.jspa?name=srankin)** opened **[SPR-2452](https://jira.spring.io/browse/SPR-2452?redirect=false)** and commented  I was testing the fix to #6967 and it worked great until I turned on debug logging using log4j.   What seems to be happening is that when debug logging is turned on, the debug statement on line 383 of AbstractAutowireCapableFactoryBean calls toString() on some objects and that eventually makes its way to a NPE.  The stack trace is included below.  If you take the test case from #6967 and run it with a log4j config file that sets debug logging on for Spring, you'll get the error.  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testBean' defined in class path resource [spring-beans.xml]: Cannot resolve reference to bean 'sessionFactory' while setting bean property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [spring-beans.xml]: Cannot resolve reference to bean 'dataSource' while setting bean property 'dataSource'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor' defined in class path resource [spring-beans.xml]: Instantiation of bean failed; nested exception is java.lang.NullPointerException Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [spring-beans.xml]: Cannot resolve reference to bean 'dataSource' while setting bean property 'dataSource'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor' defined in class path resource [spring-beans.xml]: Instantiation of bean failed; nested exception is java.lang.NullPointerException Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor' defined in class path resource [spring-beans.xml]: Instantiation of bean failed; nested exception is java.lang.NullPointerException Caused by: java.lang.NullPointerException at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.getTransactionAttributeSource(TransactionAttributeSourceAdvisor.java:102) at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.hashCode(TransactionAttributeSourceAdvisor.java:121) at java.lang.Object.toString(Object.java:209) at java.lang.String.valueOf(String.java:2615) at java.lang.StringBuffer.append(StringBuffer.java:220) at org.springframework.aop.support.AbstractPointcutAdvisor.toString(AbstractPointcutAdvisor.java:71) at java.lang.String.valueOf(String.java:2615) at java.lang.StringBuffer.append(StringBuffer.java:220) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:383) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:102) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:68) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:54) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:247) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:301) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:933) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:303) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at TestSpringBug.main(TestSpringBug.java:29)  ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-21T03:13:03Z","2019-01-11T19:34:32Z"
"","6967","Change to AbstractAdvisorAutoProxyCreator causing NPE during context startup [SPR-2278]","**[Scott Rankin](https://jira.spring.io/secure/ViewProfile.jspa?name=srankin)** opened **[SPR-2278](https://jira.spring.io/browse/SPR-2278?redirect=false)** and commented  In RC1, when the DefaultAdvisorAutoProxyCreator is initialized, it finds and initializes all candidate advisors (code is in AbstractAdvisorAutoProxyCreator.setBeanFactory()). This code has the effect of initializing my Hibernate SessionFactoryBean before any other beans come along and need it.  In RC2, the code to pre-load candidate advisors has been removed. What this seems to produce is a circular dependency. When my application beans try to request the Hibernate SessionFactoryBean, it goes through a lot of dependencies, including the AutoProxyCreator, which depends on the TransactionSourceAdvisor, which depends on the TransactionInterceptor, which depends on the SessionFactoryBean. And so I get a NPE trying to instantiate the autoproxy creator.  This only seems to happen if the first bean in the XML file references the session factory.  If I move the bean that references the session factory to below it, the problem goes away.  ---  **Affects:** 2.0 RC2  **Attachments:** - [spring-beans.xml](https://jira.spring.io/secure/attachment/11799/spring-beans.xml) (_2.49 kB_) - [TestSpringBug.java](https://jira.spring.io/secure/attachment/11800/TestSpringBug.java) (_822 bytes_)  **Issue Links:** - #6972 NPE in AbstractAutoProxyCreator when using RC2 (_**""is duplicated by""**_)  2 votes, 2 watchers","closed","in: core,","spring-projects-issues","2006-07-11T05:46:43Z","2019-01-11T19:09:43Z"
"","7537","Upgrade to Quartz 1.6.1 (for trigger persistence with SimpleTriggerBean and CronTriggerBean) [SPR-2850]","**[Scott Haug](https://jira.spring.io/secure/ViewProfile.jspa?name=shaug)** opened **[SPR-2850](https://jira.spring.io/browse/SPR-2850?redirect=false)** and commented  Similar to #7571, a change in the Quartz 1.6 API has made some of the nice Spring-related features incompatible with that release. Namely, the changes related to the following issue have made SimpleTriggerBean and CronTriggerBean useless with Quartz 1.6  http://jira.opensymphony.com/browse/QUARTZ-417  This change resulted in org.quartz.impl.jdbcjobstore.JobStoreSupport#storeTrigger using '==' rather than instanceof to determine if the trigger is a SimpleTrigger or CronTrigger. Ostensibly, this is  to allow custom triggers to extend either of these classes, but it prevents Spring from providing extended configuration functionality through subclassing. Personally, I think a better solution on Quartz's part would have been to introduce a marker interface like CustomTrigger, but I'm not sure how receptive the Quartz team will be to change this yet again to accomodate Spring code.  My workaround has been to turn SimpleTriggerBean and CronTriggerBean into FactoryBeans. This is much clunkier, as it requires a lot more copying of data, but it gets the job done and is backwards-compatible.  ---  **Affects:** 2.0 final  **Issue Links:** - #7705  Quartz 1.6/CronTriggerBean persistence problem (_**""is duplicated by""**_) - #7564 Spring Quartz support, persistent jobs.  (_**""is duplicated by""**_)  19 votes, 22 watchers","closed","has: votes-jira,","spring-projects-issues","2006-11-18T10:59:34Z","2019-01-11T21:36:45Z"
"","7312","FlushMode.NEVER deprecated in Hibernate 3.2 in favor of FlushMode.MANUAL [SPR-2623]","**[Scott Haug](https://jira.spring.io/secure/ViewProfile.jspa?name=shaug)** opened **[SPR-2623](https://jira.spring.io/browse/SPR-2623?redirect=false)** and commented  Hibernate 3.2 (as of CR3) has deprecated FlushMode.NEVER in favor of FlushMode.MANUAL. It seems it is purely a renaming (i.e., they have the same level of 0), but both still exist and they're distinct objects. Thus, using FlushMode.MANUAL in favor of FlushMode.NEVER will cause unexpected behavior in many hibernate-related Spring classes, which still are only checking for FlushMode.NEVER. The classes where this could be a problem include:  org.springframework.orm.hibernate3 - HibernateAccessor - HibernateTemplate - HibernateTransactionManager - SessionFactoryUtils - SpringSessionSynchronization   org.springframework.orm.hibernate3.support - OpenSessionInViewFilter  For example, our app, which makes heavy use of both Spring and Hibernate, recently started using Spring 2.0 cr4 and Hibernate 3.2 cr4. When I replaced all occurrences of FlushMode.NEVER with FlushMode.MANUAL in our project, we ended up not having any actions to commit when the transaction closed, but there were still unflushed actions when the session closed. We were using a subclass of OpenSessionInView, which was allowed for configuring a different FlushMode, so this may be the source of the issue. At any rate, switching all instances of FlushMode.MANUAL back to NEVER fixed the problem.  It seems the Spring support classes should check for both.   ---  **Affects:** 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-09-21T10:37:39Z","2012-06-19T03:51:21Z"
"","7795","How user friendly the Spring Framework [SPR-3108]","**[Saroj K Patro](https://jira.spring.io/secure/ViewProfile.jspa?name=sk_patro5121)** opened **[SPR-3108](https://jira.spring.io/browse/SPR-3108?redirect=false)** and commented   ---  **Affects:** 2.0.2","closed","status: declined,","spring-projects-issues","2007-02-04T16:21:27Z","2007-02-04T19:39:23Z"
"","7743","provide an SLP (Service Locator Protocol) Schema and handler [SPR-3057]","**[Sami Dalouche](https://jira.spring.io/secure/ViewProfile.jspa?name=samokk)** opened **[SPR-3057](https://jira.spring.io/browse/SPR-3057?redirect=false)** and commented  Service Location Protocol is an IETF standard protocol that is used to discover/advertise services on the network. You can use SLP for anything from locating a suitable printer on your floor to discovering what LDAP directories are available in your organization. This package provides slpd, the OpenSLP daemon, which provides an SLPv2 (RFC 2608) compliant Service Agent and Directory Agent.  So, what about providing some XML Schema + handler that would allow to import/publish settings from/to SLP to design zero-configuration applications ?  Regards, Sami Dalouche   --- No further details from [SPR-3057](https://jira.spring.io/browse/SPR-3057?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-01-19T20:05:33Z","2012-06-19T09:37:44Z"
"","7720","Circular Reference while using both @Configurable and @Entity beans depending on Hibernate SessionFactory or Hibernate EntityManagerFactory [SPR-3034]","**[Sami Dalouche](https://jira.spring.io/secure/ViewProfile.jspa?name=samokk)** opened **[SPR-3034](https://jira.spring.io/browse/SPR-3034?redirect=false)** and commented  Let's say we have an Account POJO, and we use Hibernate Entity Manager (JPA).  `@Entity` `@Configurable` public class Account {  `@Required` setWhateverDao(IWhateverDao dao){....} }  and class WhateverDaoImpl extends JpaDaoSupport implements IWhateverDao {..... }.  And of course, we have all the AspectJ-Spring integration configured correctly.  What's going to happen, during the context initialization, is that the EntityManagerFactory is going to be initialized. During the init, it will instantiate the Account class for its internal needs. During this initialization, the AnnotationBeanConfigurerAspect.aj aspect will wire the Account class dependencies, namely the WhateverDao, which in turn requires the EntityManagerFactory, which leads to a cyclic dependency.  A sample work-around has been provided on this thread : http://forum.springframework.org/showthread.php?t=21146  I am not sure of what the best approach to solve the problem is, but a working solution that doesn't require the user to re-implement the aspect  would be appreciated.  Regards, Sami Dalouche  ---  **Affects:** 2.0.2  **Attachments:** - [AnnotationBeanConfigurerAspectCircularDependencies.patch](https://jira.spring.io/secure/attachment/12485/AnnotationBeanConfigurerAspectCircularDependencies.patch) (_18.00 kB_)  **Issue Links:** - #9897 Circular reference when using `@Configurable` and `@PersistenceContext`  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2007-01-13T02:25:56Z","2019-01-13T08:09:26Z"
"","7267","Spring does not inherit @Transactional correctly when  [SPR-2578]","**[Sami Dalouche](https://jira.spring.io/secure/ViewProfile.jspa?name=samokk)** opened **[SPR-2578](https://jira.spring.io/browse/SPR-2578?redirect=false)** and commented  According to the documentation (http://static.springframework.org/spring/docs/2.0.x/reference/transaction.html#transaction-declarative-annotations), Annotating interface ""IFoo"" using `@Transactional` is supposed to affect the implementations of implementations of ""IFoo"".  This is the case when using Interface-based proxying, but does not work when using CGLIB proxies.  This issue is easy to reproduce.. Just take any IFoo, set it `@Transactional`, create a class that implements IFoo, and use the following in the spring appContext.xml :  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7211 Semantics affected - , proxy-target-class and `@Transactional` on interface (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2006-09-12T05:15:14Z","2019-01-13T08:53:39Z"
"","6906","Classes named with numbers on the end are ignored by pointcut advisor [SPR-2216]","**[Sam Brodkin](https://jira.spring.io/secure/ViewProfile.jspa?name=brodkin)** opened **[SPR-2216](https://jira.spring.io/browse/SPR-2216?redirect=false)** and commented  Classes named with numbers on the end (Like ArticleCreateController1) aren't candidates for pointcuts.  This is probably because you skip classes with numbers on the end to avoid infinite loops with inner classes (i.e ClassName$1.class).  To reproduce, simply use this RegexpMethodPointcutAdvisor and call a Controller with a number at the end of the name.  it won't be a candidate for interception:  \ \ \ \ \org.springframework.web.servlet.mvc.Controller.handleRequest\ \ \ \   ---  **Affects:** 2.0 M3","closed","","spring-projects-issues","2006-06-28T23:45:30Z","2019-01-11T19:09:21Z"
"","7823","Incorrect code example in section 9.5.4 of the reference documentation [SPR-3137]","**[Saladin Sharif](https://jira.spring.io/secure/ViewProfile.jspa?name=al_zawia)** opened **[SPR-3137](https://jira.spring.io/browse/SPR-3137?redirect=false)** and commented  There is an incorrect xml code example in section ""9.5.4. Configuring different transactional semantics for different beans"" of the Spring reference documentation.  This xml code example does not work if one tries to follow it, and causes an error.  More information about this documentation bug can be found in the following posting on the Spring Fourm  http://forum.springframework.org/showthread.php?t=34631    --- No further details from [SPR-3137](https://jira.spring.io/browse/SPR-3137?redirect=false)","closed","type: bug,","spring-projects-issues","2007-02-08T16:28:04Z","2012-06-19T03:51:17Z"
"","7352","MethodMapTransactionAttributeSource continually re-inits method map [SPR-2663]","**[Ryan Stewart](https://jira.spring.io/secure/ViewProfile.jspa?name=zzantozz)** opened **[SPR-2663](https://jira.spring.io/browse/SPR-2663?redirect=false)** and commented  This is code from the MethodMapTransactionAttributeSource:      public TransactionAttribute getTransactionAttribute(Method method, Class targetClass) {     	if (this.methodMap != null) {     		initMethodMap();     	}     	return (TransactionAttribute) this.transactionAttributeMap.get(method);     }  This method is called by the TransactionInterceptor (actually by TransactionAspectSupport) every time it intercepts a method call, which means that the transactionAttributeMap gets repopulated on every intercepted call.  Previous versions did not have this initMethodMap call at all. If it is decided that this needs to stay, I see two simple solutions: 1) set methodMap to null at the end of the initMethodMap method, or 2) add a check in the getTransactionAttribute method to see if the transactionAttributeMap is empty before populating it again.  The first method seems it would be most efficient.   ---  **Affects:** 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-10-02T03:04:01Z","2012-06-19T03:50:23Z"
"","7670","Two Typos in Appendix B [SPR-2984]","**[Ryan Berdeen](https://jira.spring.io/secure/ViewProfile.jspa?name=rberdeen)** opened **[SPR-2984](https://jira.spring.io/browse/SPR-2984?redirect=false)** and commented  Section B.7.2, in the first programlisting (line 475 in xml-custom.xml), uses cache-name as the attribute name, while later it is defined as jcache-name (note the leading ""j"").  Section B.8 (line 593), XXML has an extra ""X"".   ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-12-26T18:36:11Z","2012-06-19T03:50:38Z"
"","7350","spring reference manual typo? [SPR-2661]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-2661](https://jira.spring.io/browse/SPR-2661?redirect=false)** and commented  I'm not sure if this is a typo in the reference manual or just confusion on my part.  (I'm just getting started with Spring's transactions.)  On page 161 in the gray box with the sample configuration, it has    And then down below it has  \ \ \ \ \ \ \ \  It seems to me that the classes of the first two beans with the comment ""these two beans will have ..."" should be x.y.service.DefaultFooService and x.y.service.extras.SimpleBarService.  Also, back on page 159, the gray box sample uses fooServiceMethods but the explanatory text uses fooServiceOperation.   ---  **Affects:** 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-09-30T14:18:13Z","2012-06-19T03:51:00Z"
"","7342","SqlMapClientTemplate's delete() doesn't match iBATIS 2.2.0 API [SPR-2653]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-2653](https://jira.spring.io/browse/SPR-2653?redirect=false)** and commented  org.springframework.orm.ibatis.SqlMapClientTemplate's delete() methods don't exactly match the ones that iBATIS supplies; iBATIS has a ""int delete(String statementname)"" while Spring's both require a second parameterObject argument.  I'm using a delete query that doesn't need a parameter.   ---  **Affects:** 1.2.8, 2.0 RC4  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-09-28T11:59:37Z","2012-06-19T03:50:07Z"
"","7230","ControllerClassNameHandlerMapping api docs incorrect [SPR-2541]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-2541](https://jira.spring.io/browse/SPR-2541?redirect=false)** and commented  The api docs give these mappings:      *  WelcomeController -> /welcome     * HomeController -> /home  The reference manual gives these mappings:  * WelcomeController maps to the '/welcome*' request URL * HomeController maps to the '/home*' request URL  Testing shows the reference manual is correct.  Also, the reference manual has a typo; it says  * AdminController maps to the '/welcome/*' request URL    ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-05T10:42:29Z","2012-06-19T03:50:21Z"
"","7323","OptionTag in new taglib won't work in conjunction with extended SelectTag [SPR-2634]","**[Roy Wells](https://jira.spring.io/secure/ViewProfile.jspa?name=rwells)** opened **[SPR-2634](https://jira.spring.io/browse/SPR-2634?redirect=false)** and commented  I've been extending the spring form taglibs to add some extra functionality specific to my project.  I've run into a problem with the OptionTag, when I've extended the Select tag.  The problem stems from the following block of code in TagUtils.      /**      * Determine whether the supplied {@link Tag} has any ancestor tag      * of the supplied type.      * @return true if the supplied {@link Tag} has any ancestor tag      * of the supplied type      */     public static boolean hasAncestorOfType(Tag tag, Class parentTagClass) {     	Assert.notNull(tag, ""Tag cannot be null"");     	Assert.notNull(parentTagClass, ""Parent tag class cannot be null"");     	if (!Tag.class.isAssignableFrom(parentTagClass)) {     		throw new IllegalArgumentException(     				""Class '"" + parentTagClass.getName() + ""' is not a valid Tag type"");     	}     	Tag ancestor = tag.getParent();     	while (ancestor != null) {     		if (parentTagClass.equals(ancestor.getClass())) {     			return true;     		}     		ancestor = ancestor.getParent();     	}     	return false;     }  Notice where we compare parentTagClass to ancestor.getClass with a .equals().  This means OptionTag will only work with the original implementation of SelectTag.  However if we replace the .equals with .isAssignableFrom we should be able to use OptionTag in conjuction with an Extended SelectTag.    --- No further details from [SPR-2634](https://jira.spring.io/browse/SPR-2634?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-09-25T03:21:48Z","2019-01-11T21:12:19Z"
"","7262","SelectTag renders invalid value for attribute ""Multiple"" [SPR-2573]","**[Roy Wells](https://jira.spring.io/secure/ViewProfile.jspa?name=rwells)** opened **[SPR-2573](https://jira.spring.io/browse/SPR-2573?redirect=false)** and commented  A SelectTag that has the ""Multiple"" attribute set to true renders it as  \  the only valid value for the multiple attribute according to 4.01 spec is ""multiple"".  so it should render as  \  and if multiple is false simply  \   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-09-11T06:19:14Z","2012-06-19T03:50:05Z"
"","7243","LabelTag used in conjunction with multiple RadioButtons will generate illegal id values. [SPR-2554]","**[Roy Wells](https://jira.spring.io/secure/ViewProfile.jspa?name=rwells)** opened **[SPR-2554](https://jira.spring.io/browse/SPR-2554?redirect=false)** and commented  If you have a radio button group bound to a form property like the following.    \ Choose One \","closed","type: bug,","spring-projects-issues","2006-09-07T05:11:36Z","2012-06-19T03:50:19Z"
"","7242","LabelTag in new Form Tag library renders attributes that do not meet HTML 4.01 Specification [SPR-2553]","**[Roy Wells](https://jira.spring.io/secure/ViewProfile.jspa?name=rwells)** opened **[SPR-2553](https://jira.spring.io/browse/SPR-2553?redirect=false)** and commented  The LabelTag puts out a ""name"" attribute.  This is not a valid attribute for the html Label element.   It will cause a validator for the page to report errors.  Relevant portions of the HTML Specification  \ \ ""lang        %LanguageCode; #IMPLIED  -- language code -- > dir         (ltr|rtl)      #IMPLIED  -- direction for weak/neutral text --"" >  >  >> \> ""onclick     %Script;       #IMPLIED  -- a pointer button was clicked -- >> ondblclick  %Script;       #IMPLIED  -- a pointer button was double clicked-- >> onmousedown %Script;       #IMPLIED  -- a pointer button was pressed down -- >> onmouseup   %Script;       #IMPLIED  -- a pointer button was released -- >> onmouseover %Script;       #IMPLIED  -- a pointer was moved onto -- >> onmousemove %Script;       #IMPLIED  -- a pointer was moved within -- >> onmouseout  %Script;       #IMPLIED  -- a pointer was moved away -- >> onkeypress  %Script;       #IMPLIED  -- a key was pressed and released -- >> onkeydown   %Script;       #IMPLIED  -- a key was pressed down -- >> onkeyup     %Script;       #IMPLIED  -- a key was released --"" >>  >>> \ >>> \>> %attrs;                              -- %coreattrs, %i18n, %events -- >>> for         IDREF          #IMPLIED  -- matches field ID value -- >>> accesskey   %Character;    #IMPLIED  -- accessibility key character -- >>> onfocus     %Script;       #IMPLIED  -- the element got the focus -- >>> onblur      %Script;       #IMPLIED  -- the element lost the focus -- >>>  >>>> --- >>>>  >>>> **Affects:** 2.0 RC3 >>>>  >>>> **Issue Links:** >>>> - #7043 It isn't clear how to use form:label (_**""is depended on by""**_)","closed","type: bug,","spring-projects-issues","2006-09-07T04:50:49Z","2019-01-13T22:46:14Z"
"","7178","Spring Form Tags don't work inside JSP 2.0 Tag Files [SPR-2489]","**[Roy Wells](https://jira.spring.io/secure/ViewProfile.jspa?name=rwells)** opened **[SPR-2489](https://jira.spring.io/browse/SPR-2489?redirect=false)** and commented  If you try to use a new spring form tag inside a JSP Tag file you get the following error.  To recreate, just create a tag file, add the spring form tag taglib and place a form:label tag in your tag file.  java.lang.IllegalStateException: Neither Errors instance nor plain target object for bean name 'null' available as request attribute org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:137) org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:157) org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.resolveCssClass(AbstractHtmlElementTag.java:502) org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.writeDefaultAttributes(AbstractHtmlElementTag.java:479) org.springframework.web.servlet.tags.form.LabelTag.writeTagContent(LabelTag.java:77) org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:91) org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:68) org.apache.jsp.tag.web.hello_tag._jspx_meth_form_label_0(hello_tag.java:165) org.apache.jsp.tag.web.hello_tag.doTag(hello_tag.java:128)    ---  **Affects:** 2.0 RC3","closed","in: web,","spring-projects-issues","2006-08-27T08:50:25Z","2019-01-11T19:33:44Z"
"","7649","Make baseCommandController and subclasses Genertic based [SPR-2963]","**[Roy Qu](https://jira.spring.io/secure/ViewProfile.jspa?name=royqh)** opened **[SPR-2963](https://jira.spring.io/browse/SPR-2963?redirect=false)** and commented  Spring MVC baseCommandControllers and its subclasses has a commandClass properties,  to indicate the command class the controller uses. So to use the controller, you must provide a commandClass properties in the bean setup entry  as below: \ \ \ And in the controller class , you must downcast the command object from Object type to its real class type: public class MyController extends SimpleFormController { `@Override` public ModelAndView onSubmit(Object command) { MyCommand cmd=(MyCommand)command; //do sth with the command .......... } ...... }  The issue is , since a command controller and a command class it's highly coupled, why  not  use generics mechanism in the commandController to simplify commandClass setting, and make it more type safe? So we can use a commandController like this: public class MyController extends SimpleFormController \{ `@Override` public ModelAndView onSubmit(MyCommand command) { //do sth with the command .......... } ...... }   --- No further details from [SPR-2963](https://jira.spring.io/browse/SPR-2963?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-12-19T00:13:23Z","2012-06-19T09:37:45Z"
"","6929","Provide source code and maven2 poms at ibiblio [SPR-2239]","**[Routis Haralampos](https://jira.spring.io/secure/ViewProfile.jspa?name=routis)** opened **[SPR-2239](https://jira.spring.io/browse/SPR-2239?redirect=false)** and commented  At ibiblio the last version that provides source code and proper maven2 poms is 1.2.7. Thus the migration of existing projects to newer versions of the spring framework require signigicant work  ---  **Affects:** 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1  **Issue Links:** - #7392 Create and upload Maven Source and Javadoc Bundles for Spring 2.0 (_**""duplicates""**_) - #7393 Create and upload Maven Source and Javadoc Bundles for Spring 1.2.9 (_**""duplicates""**_)  1 votes, 0 watchers","closed","type: task,","spring-projects-issues","2006-07-05T17:57:49Z","2019-01-11T19:08:30Z"
"","7858","Proxying classes that include methods with generic parameters, with the annotation-driven transaction strategy causes a ClassCastException. [SPR-3173]","**[Ronald Tetsuo Miura](https://jira.spring.io/secure/ViewProfile.jspa?name=ronaldtm)** opened **[SPR-3173](https://jira.spring.io/browse/SPR-3173?redirect=false)** and commented  Proxying classes that include methods with generics as parameters with the annotation-driven transaction strategy causes a ClassCastException.  \ public class BaseService\ { public java.util.List\ findByExample(T example, Object... params) { return new java.util.ArrayList\(); } } public class TestService extends BaseService\ { public java.util.List\ findByExample(String example, Object... params) { return new java.util.LinkedList\(); } } public class Main { public static void main(String[] args) { ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(""applicationContext.xml"", Main.class); TestService bean = (TestService) ctx.getBean(""test""); System.out.println(bean.findByExample(""testing"")); } } \ \ \ > \ > \ > \ > \ > \ > \ > \ > \ > \ > \ > \ > \ >  > This code throws the following exception: >  > \ > Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'test' defined in class path resource [applicationContext.xml]: Initialization of bean failed; nested exception is java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl cannot be cast to java.lang.Class > Caused by: java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl cannot be cast to java.lang.Class > at org.springframework.core.BridgeMethodResolver.isResolvedTypeMatch(BridgeMethodResolver.java:180) > at org.springframework.core.BridgeMethodResolver.isBridgeMethodFor(BridgeMethodResolver.java:125) > at org.springframework.core.BridgeMethodResolver.searchCandidates(BridgeMethodResolver.java:101) > at org.springframework.core.BridgeMethodResolver.findBridgedMethod(BridgeMethodResolver.java:86) > at org.springframework.core.annotation.AnnotationUtils.getAnnotations(AnnotationUtils.java:53) > at org.springframework.transaction.annotation.AnnotationTransactionAttributeSource.findAllAttributes(AnnotationTransactionAttributeSource.java:85) > at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.computeTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:145) > at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:101) > at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.matches(TransactionAttributeSourceAdvisor.java:102) > at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:186) > at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:225) > at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:255) > at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:73) > at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:57) > at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:255) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:312) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1033) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:421) > at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) > at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:140) > at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) > at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) > at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:273) > at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:346) > at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:180) > at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:156) > at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:143) > at Main.main(Main.java:5) > \ >  > --- >  > **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-02-15T03:27:22Z","2019-01-13T22:44:12Z"
"","7633","Spring AOP Won't Load @AspectJ Aspects with Load-Time Weaving [SPR-2947]","**[Ron Bodkin](https://jira.spring.io/secure/ViewProfile.jspa?name=rbodkin)** opened **[SPR-2947](https://jira.spring.io/browse/SPR-2947?redirect=false)** and commented  If you turn on AspectJ load-time weaving then Spring AOP no longer will accept `@AspectJ` aspects. The issue is that in AbstractAspectJAdvisorFactory it looks for methods starting with AJC_MAGIC (ajc$) but the AspectJ LTW system creates a method like this ajc$postClinit even if the aspect isn't registered for AspectJ load-time weaving (it completes annotation-defined aspects even if they aren't registered for weaving).  Work-around - exclude the Spring AOP aspect from AspectJ load-time weaving, e.g., \  Note that the AspectJ load-time weaving system just tests for the presence of the org.aspectj.lang.annotation.Aspect annotation on the type. Why can't the advisor factory just do that? Indeed, why not just allow registration of code-style aspects that were compiled with -target 1.5 or later so that they can also be used with Spring AOP? If you don't want to apply all aspects, then don't auto-proxy? It's also interesting to consider the bigger issue of how Spring AOP should integrate with load-time weaving.   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-13T06:05:27Z","2012-06-19T03:51:08Z"
"","7619","Spring Beans Isn't Self Contained for Load-Time Weaving [SPR-2933]","**[Ron Bodkin](https://jira.spring.io/secure/ViewProfile.jspa?name=rbodkin)** opened **[SPR-2933](https://jira.spring.io/browse/SPR-2933?redirect=false)** and commented  The spring-beans.jar includes a META-INF/aop.xml file that references aspects that aren't included in the jar:             This results in errors, e.g., when deploying the webflow phonebook application to a JVM with load-time weaving. Work-around options: remove the aop.xml file or include spring-aspects.jar  Error output:  Dec 9, 2006 4:53:08 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: register definition failed java.lang.RuntimeException: Cannot register non aspect: org$springframework$bean s$factory$aspectj$AnnotationBeanConfigurerAspect , org.springframework.beans.fac tory.aspectj.AnnotationBeanConfigurerAspect at org.aspectj.weaver.bcel.BcelWeaver.addLibraryAspect(BcelWeaver.java:2 05) at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects (ClassLoaderWeavingAdaptor.java:399) at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinit ions(ClassLoaderWeavingAdaptor.java:240) at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize(Clas sLoaderWeavingAdaptor.java:152) at org.aspectj.weaver.loadtime.Aj$ExplicitlyInitializedClassLoaderWeavin gAdaptor.initialize(Aj.java:151) at org.aspectj.weaver.loadtime.Aj$ExplicitlyInitializedClassLoaderWeavin gAdaptor.getWeavingAdaptor(Aj.java:156) at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Aj.java:122)      at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:73)     at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(C  lassPreProcessorAgentAdapter.java:55) at sun.instrument.TransformerManager.transform(TransformerManager.java:1 22) at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java :155) at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:620) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:12 4) at org.apache.catalina.loader.WebappClassLoader.findClassInternal(Webapp ClassLoader.java:1815) at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoa der.java:869) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoa der.java:1322) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoa der.java:1201) at org.apache.commons.logging.impl.LogFactoryImpl$1.run(LogFactoryImpl.j ava:441) at java.security.AccessController.doPrivileged(Native Method) at org.apache.commons.logging.impl.LogFactoryImpl.loadClass(LogFactoryIm pl.java:435) at org.apache.commons.logging.impl.LogFactoryImpl.isLog4JAvailable(LogFa ctoryImpl.java:505) at org.apache.commons.logging.impl.LogFactoryImpl.getLogClassName(LogFac toryImpl.java:327) at org.apache.commons.logging.impl.LogFactoryImpl.getLogConstructor(LogF actoryImpl.java:368) at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactory Impl.java:529) at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactory Impl.java:235) at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:370) at org.apache.catalina.core.ContainerBase.getLogger(ContainerBase.java:3 80) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4 114) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase .java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:73 9) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524)          at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809)              at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698  ) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472 ) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1122) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java :310) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(Lifecycl eSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1021)          at org.apache.catalina.core.StandardHost.start(StandardHost.java:718)         at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013)              at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442  ) at org.apache.catalina.core.StandardService.start(StandardService.java:4 50) at org.apache.catalina.core.StandardServer.start(StandardServer.java:709 ) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl. java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces sorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:432)    ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-09T11:01:35Z","2012-06-19T03:50:18Z"
"","7861","DOS chars in sample app shell scripts [SPR-3176]","**[Romeo Gregorie](https://jira.spring.io/secure/ViewProfile.jspa?name=rgregorie)** opened **[SPR-3176](https://jira.spring.io/browse/SPR-3176?redirect=false)** and commented  I was exploring Spring remoting with the jpetstore sample from 2.0.2 release and wasted half a day trying to figure ""...table not found..."" errors and additionally created hsql database files ending with the \r char.  It turned out the shell script has DOS line ending. Unfortunately, I did not search here first. Issue SRP-305 reported in 2004 !? addresses the same issue.  Could someone please fix this issue, so nobody wastes time on it any more. And while you are at it, why not remove the DOS characters all together, from the code too. I doubt they are needed even on the win platform.  ---  **Affects:** 2.0.2  **Issue Links:** - #5035 shell scripts in samples should not have DOS line delimiters (_**""duplicates""**_)  2 votes, 1 watchers","closed","in: core,","spring-projects-issues","2007-02-15T10:23:07Z","2019-01-11T17:34:32Z"
"","7781","@Aspect with an array-returning FactoryBean triggers an Exception [SPR-3094]","**[Roland Huss](https://jira.spring.io/secure/ViewProfile.jspa?name=roland.huss)** opened **[SPR-3094](https://jira.spring.io/browse/SPR-3094?redirect=false)** and commented  When I use an `@Aspect` in an AspectJ-Spring configuration () together with a FactoryBean which returns an Array in its getObject() method triggers the following Exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'BugTest' defined in class path resource [applicationContext.xml]: Initialization of bean failed; nested exception is org.aspectj.weaver.BCException: Do not call nameToSignature with something that looks like a signature (descriptor): '[Lorg.springframework.core.io.Resource;'  Caused by:  (strange, that there is not stacktrace at all ...)  I attachted a minimal test case which triggers this exception. Main class is BugTest.   ---  **Affects:** 2.0.2  **Attachments:** - [aspectj-factorybean-bug.tgz](https://jira.spring.io/secure/attachment/12375/aspectj-factorybean-bug.tgz) (_909 bytes_)","closed","in: core,","spring-projects-issues","2007-01-30T18:04:11Z","2012-06-19T03:50:26Z"
"","7022","undesirable dependency from spring-core to spring-beans triggered by org.springframework.util.AutoPopulatingList [SPR-2333]","**[Roland Förther](https://jira.spring.io/secure/ViewProfile.jspa?name=rfoerthe)** opened **[SPR-2333](https://jira.spring.io/browse/SPR-2333?redirect=false)** and commented  There is an undesirable  dependency from spring-core to spring-beans triggered by org.springframework.util.AutoPopulatingList. This class uses BeanUtils from package org.springframework.beans. One possible solution to cut this dependency is to move AutoPopulatingList to package org.springframework.beans.   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-07-23T01:57:31Z","2012-06-19T03:50:52Z"
"","7590","Offer basic distribution that includes javadoc [SPR-2903]","**[Rogério Meneguelli Gatto](https://jira.spring.io/secure/ViewProfile.jspa?name=rogeriomgatto)** opened **[SPR-2903](https://jira.spring.io/browse/SPR-2903?redirect=false)** and commented  The standard distribution (spring-framework-2.0.1.zip) does not include API javadocs.  There are no downloads in the documentation page either.  ---  **Affects:** 2.0.1  **Issue Links:** - #8590 Spring ZIP file should include Javadoc for Spring (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2006-12-01T04:05:02Z","2019-01-11T22:00:55Z"
"","7387","LocalSessionFactoryBean when schemaUpdate is true fail to build session factory [SPR-2699]","**[Rodrigo Urubatan Ferreira Jardim](https://jira.spring.io/secure/ViewProfile.jspa?name=urubatan)** opened **[SPR-2699](https://jira.spring.io/browse/SPR-2699?redirect=false)** and commented  when schemaUpdate is set to true, org.springframework.orm.hibernate3.LocalSessionFactoryBean fails to build Session Factory because the method updateDatabaseSchema() is being called from the method buildSessionFactory before the instance variable sessionFactory is set.  the easy way to fix would be to move the lines // Execute schema update if requested. if (this.schemaUpdate) { updateDatabaseSchema(); }  from the build sessionFactory to the afterPropertiesSet method.  ---  **Affects:** 2.0 final  **Issue Links:** - #7358 LocalSessionFactoryBean initialization fails with  ""java.lang.IllegalStateException: SessionFactory not initialized yet "" when schemaUpdate is set to true (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2006-10-09T07:59:56Z","2019-01-12T16:51:55Z"
"","7672","Unexpected AccessControlException throwed while using a XmlBeanFactory inside an Applet [SPR-2986]","**[Rodolfo Rothganger](https://jira.spring.io/secure/ViewProfile.jspa?name=rudolf)** opened **[SPR-2986](https://jira.spring.io/browse/SPR-2986?redirect=false)** and commented  Exception:  java.security.AccessControlException: access denied (java.util.PropertyPermission user.dir read)  Cause:  Currently I developing an applet that  uses XmlBeanFactory for infrastructure beans providing. The reported problem arises when the XmlBeanFactory is configured and a bean is retrieved:      XmlBeanFactory factory  = new XmlBeanFactory(new UrlResource(configurationFileURL relative to classloader))     Object object = beanFactory.getBean(someBeanId, beanClass);  Note: I am using my own utility class to retrieve a URL from a classloader resource.  It turns out that the XmlBeanFactory  will eventually call the resolveEntity method on the ResourceEntityResolver class. This method, in order to configure a systemRootUrl, does the following on line 76:      String systemRootUrl = new File("""").toURL().toString();   That´s a problem since non-signed applet cannot read local file. (new File("""").toURL() is a READ call).  Sugestion:  Replace the following code on ResourceEntityResolver , method resolveEntity:  72 73			try { 74				String decodedSystemId = URLDecoder.decode(systemId); 75				String givenUrl = new URL(decodedSystemId).toString(); 76				String systemRootUrl = new File("""").toURL().toString(); 77				// try relative to resource base if currently in system root 78				if (givenUrl.startsWith(systemRootUrl)) { 79					resourcePath = givenUrl.substring(systemRootUrl.length()); 80				} 81			} 82			catch (MalformedURLException ex) { 83				// no URL -> try relative to resource base 84				resourcePath = systemId; 85			}  with  72 73			try { 74				String decodedSystemId = URLDecoder.decode(systemId); 75				String givenUrl = new URL(decodedSystemId).toString(); 76				String systemRootUrl = new File("""").toURL().toString(); 77				// try relative to resource base if currently in system root 78				if (givenUrl.startsWith(systemRootUrl)) { 79					resourcePath = givenUrl.substring(systemRootUrl.length()); 80				} 81			} 82			catch (MalformedURLException ex) { 83				// no URL -> try relative to resource base 84				resourcePath = systemId; 85			} 86			catch (AccessControlException ex) { 87				//Error while trying to access priviledge resource 88				resourcePath = systemId; 89			}  Original stack trace:  [INFO] CollectionFactory - JDK 1.4+ collections available [INFO] XmlBeanDefinitionReader - Loading XML bean definitions from URL [jar:http://rb000110:8080/gro/applets/app-gro_bayesiannet-applet.jar!/br/com/gro/causal/uc2401_redebayesiana/view/applet/registry-causal-applet.xml] org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from URL [jar:http://rb000110:8080/gro/applets/app-gro_bayesiannet-applet.jar!/br/com/gro/causal/uc2401_redebayesiana/view/applet/registry-causal-applet.xml]; nested exception is java.security.AccessControlException: access denied (java.util.PropertyPermission user.dir read) Caused by: java.security.AccessControlException: access denied (java.util.PropertyPermission user.dir read) at java.security.AccessControlContext.checkPermission(Unknown Source) at java.security.AccessController.checkPermission(Unknown Source) at java.lang.SecurityManager.checkPermission(Unknown Source) at java.lang.SecurityManager.checkPropertyAccess(Unknown Source) at java.lang.System.getProperty(Unknown Source) at java.io.Win32FileSystem.getUserPath(Unknown Source) at java.io.Win32FileSystem.resolve(Unknown Source) at java.io.File.getAbsolutePath(Unknown Source) at java.io.File.toURL(Unknown Source) at org.springframework.beans.factory.xml.ResourceEntityResolver.resolveEntity(ResourceEntityResolver.java:76) at com.sun.org.apache.xerces.internal.util.EntityResolverWrapper.resolveEntity(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.resolveEntity(Unknown Source) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.resolveDocument(Unknown Source) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.findSchemaGrammar(Unknown Source) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl$NSContentDispatcher.scanRootElementHook(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(Unknown Source) at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(Unknown Source) at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(Unknown Source) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanFactory.\(XmlBeanFactory.java:73) at org.springframework.beans.factory.xml.XmlBeanFactory.\(XmlBeanFactory.java:61) at br.com.regerbanc.infra.core.registry.RegistryManager.setupRegistry(RegistryManager.java:142)   ---  **Affects:** 1.2.8, 2.0.1  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","in: core,","spring-projects-issues","2006-12-27T02:17:28Z","2012-06-19T03:50:36Z"
"","7396","Add overridable hook before getContext() in setUp() of AbstractSingleSpringContextTests [SPR-2708]","**[Robert Newson](https://jira.spring.io/secure/ViewProfile.jspa?name=rnewson)** opened **[SPR-2708](https://jira.spring.io/browse/SPR-2708?redirect=false)** and commented  We use AbstractDependencyInjectionSpringContextTests for our integration tests. Several important settings in our context file are retrieved from a properties file which can be overridden with system properties. We use the override facility to modify these properties for our test environment (for example, using /tmp as the output folder instead of the production volume).  We currently tweak the system properties (and various other setup things) in the getConfigLocations() method, as there is nowhere else to do this as the setUp() method in AbstractSingleSpringContextTests is final. We can't use a static initialization block as the specific values vary between different tests.  Could you add a hook, in the style of prepareTestInstance(), that is called immediately **before** the getContext() call in setUp()?   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-12T01:15:49Z","2006-11-12T18:11:32Z"
"","7769","AbstractTransactionalSpringContextTests should always rollback on exceptions, regardless of complete flag [SPR-3083]","**[Robert Macaulay](https://jira.spring.io/secure/ViewProfile.jspa?name=robertm)** opened **[SPR-3083](https://jira.spring.io/browse/SPR-3083?redirect=false)** and commented  If your testcase is a child of AbstractTransactionalSpringContextTests, and you have set the test to complete either via seComplete or setDefaultRollback(false), and your test throws an exception, I think that the testcase should still rollback the transaction.  The current endTransaction code looks just at the value of this.complete, and commits the TX even though the test failed.  Adding this code to AbstractTransactionalSpringContextTests would result in the expected behavior.      protected void runTest() throws Throwable     {     	try{     		super.runTest();     	}catch(Throwable t){     		this.complete = false;     		throw t;     	}     }    ---  **Affects:** 2.0.2  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-26T02:48:38Z","2012-06-18T12:45:12Z"
"","7719","idref could contain a app context scope to prevent from going to parent bean factory [SPR-3033]","**[Robert Macaulay](https://jira.spring.io/secure/ViewProfile.jspa?name=robertm)** opened **[SPR-3033](https://jira.spring.io/browse/SPR-3033?redirect=false)** and commented  In org.springframework.beans.factory.support.AbstractBeanFactory, the method containsBean(String) is called from BeanDefinitionValueResolver.resolveValueIfNecessary, line 116 in 2.0.2.  Was wondering if a scope could be added the the \ to make determination to either call containsBean or containsLocalBean on the beanFactory.  The reason this would be of use would be in BeanNameAutoProxyCreators. We had a case where the beanname idref was a bean defined in the parent application context. Therefore, it was not being proxied by the BeanNameAutoProxyCreator in the child app context, but it wasn't failing since the bean name did in fact exist in the parent.  This would be just an additional security level above idrefs to ensure that there would be no accidental attempts to autoproxy things in the wrong contexts. As far as I could find, there is no mechanism to re-autoproxy in a child context a bean that is included from a parent.  ---  **Affects:** 2.0.2  **Issue Links:** - #12830 Evaluate 'idref' element and 'local' attribute in Spring 3.1","closed","type: enhancement,","spring-projects-issues","2007-01-12T06:22:19Z","2019-01-11T16:37:53Z"
"","7695","fix of SPR-2721 broke nested proxies [SPR-3009]","**[Robert Macaulay](https://jira.spring.io/secure/ViewProfile.jspa?name=robertm)** opened **[SPR-3009](https://jira.spring.io/browse/SPR-3009?redirect=false)** and commented  ---  **Affects:** 2.0.1  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/12317/test.zip) (_1.80 kB_)  **Issue Links:** - #7658 use of multiple BeanNameAutoProxyCreators broke when we upgraded from 1.2.8 to 2.0.1 (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-01-03T02:48:02Z","2019-01-11T16:33:16Z"
"","7001","list of  in beanNames doesnt seem to validate [SPR-2312]","**[Robert Macaulay](https://jira.spring.io/secure/ViewProfile.jspa?name=robertm)** opened **[SPR-2312](https://jira.spring.io/browse/SPR-2312?redirect=false)** and commented  Attempting to switch to idref tag instead of using comman delimited strings in the beanNames property of BeanNameAutoProxyCreator. The docs show this should work.  I dug a big, but couldn't find the code that converts the idref list into the array of strings.  The following works, both my real beans are proxied and work correctly. But I expected the fake bean in the middle to break the container startup, throwing an exception, but it didn't. The below config has the same behaviour as specifying a comma seperated list of beanNames. I'd like it to work so that type or bean name changes will break the startup instead of silently stop being proxied. Are the docs missing a config option to enable the checking? I can't use local since the beans are defined in a different XML file.  The docs lead me to believe that the using the bean instead of local should work, just fail a bit later in startup.  Thanks  \ \ \ \ \ \ \ \ \   ---  **Affects:** 1.2.8  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-07-17T07:36:18Z","2012-06-19T03:52:50Z"
"","6900","Transaction not rolled back/ended if exception thrown in onSetupInTransaction() in AbstractTransactionalSpringContextTests [SPR-2209]","**[Robert Macaulay](https://jira.spring.io/secure/ViewProfile.jspa?name=robertm)** opened **[SPR-2209](https://jira.spring.io/browse/SPR-2209?redirect=false)** and commented  The onSetUp() method in AbstractTransactionalSpringContextTests calls onSetUpInTransaction() after it starts the transaction. If for some reason, the user overridden code throws an exception, there is nothing catching the exception and ending the transaction.  Junit has this structure in its test runner. setUp(); try { runTest(); } finally { tearDown(); }  So if setUp() throws an exception, tearDown is not called, and the spring overridden tearDown that rolls back the transaction is not called.  A fix would be to change AbstractTransactionalSpringContextTests.onSetUp() to call the onSetUpInTransaction() method in a try block catch any Exception call the endTransaction() method rethrow the exception   ---  **Affects:** 1.2.7  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2006-06-28T01:52:53Z","2019-01-11T19:09:25Z"
"","7859","A.2.6. The aop schema example has wrong xsi:schemaLocation value. [SPR-3174]","**[Robert Kylberg](https://jira.spring.io/secure/ViewProfile.jspa?name=rkylberg)** opened **[SPR-3174](https://jira.spring.io/browse/SPR-3174?redirect=false)** and commented  ref: http://www.springframework.org/docs/reference/xsd-config.html#xsd-config-body-schemas-aop  The schema example in the above referenced section of the documentation reads:  \  \  \ \  I believe the xsi:schemaLocation values are wrong.  The correct schema example is:  \  \  \ \   ---  **Affects:** 2.0.2","closed","status: declined,","spring-projects-issues","2007-02-15T07:00:36Z","2019-01-12T16:40:21Z"
"","7409","LazyInitTargetSourceCreator and @AJ aspects lead to double proxying [SPR-2721]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2721](https://jira.spring.io/browse/SPR-2721?redirect=false)** and commented   --- No further details from [SPR-2721](https://jira.spring.io/browse/SPR-2721?redirect=false)","closed","in: core,","spring-projects-issues","2006-10-16T22:24:57Z","2012-06-19T03:50:57Z"
"","7292","ClassCastException in BMR.populateTypeMapFromParameterizedType [SPR-2603]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2603](https://jira.spring.io/browse/SPR-2603?redirect=false)** and commented  See original report: http://opensource.atlassian.com/projects/spring/browse/SPR-2454#action_19696   ---  **Affects:** 2.0 RC4  **Attachments:** - [BMR.populateTypeMapFromParameterizedType.txt](https://jira.spring.io/secure/attachment/11972/BMR.populateTypeMapFromParameterizedType.txt) (_1.83 kB_) - [BridgeMethodResolverClassCastTests.java](https://jira.spring.io/secure/attachment/11969/BridgeMethodResolverClassCastTests.java) (_1.26 kB_) - [testSPR2603.Classes.txt](https://jira.spring.io/secure/attachment/11973/testSPR2603.Classes.txt) (_478 bytes_)","closed","in: core,","spring-projects-issues","2006-09-18T20:18:22Z","2012-06-19T03:50:46Z"
"","6957","Add a  tag [SPR-2268]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2268](https://jira.spring.io/browse/SPR-2268?redirect=false)** and commented  Create a tag that allows custom conditional rendering of error messages.   --- No further details from [SPR-2268](https://jira.spring.io/browse/SPR-2268?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-07-09T20:27:23Z","2012-06-19T03:52:36Z"
"","7325","No transactions created in initDao of JpaDaoSupport [SPR-2636]","**[Rik van der Kleij](https://jira.spring.io/secure/ViewProfile.jspa?name=rik)** opened **[SPR-2636](https://jira.spring.io/browse/SPR-2636?redirect=false)** and commented  In the overridden method initDao of a subclass of JpaDaoSupport objects can not be persisted. In the debuglog I see that entitymanagers are created but no transactions are created. When I move the code that persists objects to a another on itself standing method that is executed when all initializations are passed then transactions are created so it goes right.  It could be that the initDao method is not intended for persisting objects. But why are entiymanagers are created in that case?  Hopefully this is enough information the determine if it is really a bug. Let me know if more informartion is necessary.   ---  **Affects:** 2.0 RC4","closed","status: declined,","spring-projects-issues","2006-09-25T17:51:37Z","2019-01-12T16:28:39Z"
"","7176","Reference to to ""choosing AOP style"" section in section 6.1 needs quotes [SPR-2487]","**[Rick Mann](https://jira.spring.io/secure/ViewProfile.jspa?name=jetforme)** opened **[SPR-2487](https://jira.spring.io/browse/SPR-2487?redirect=false)** and commented  The second paragraph in the ""Spring 2.0 AOP"" box on p. 82 of the spring 2.0 reference PDF. The sentence:      See choosing which AOP declaration style to use for     advice on choosing the appropriate style for your application.  contains a reference to the title of section 6.4, but that title should be in quotes, and probably prefixed by the word ""section"". Took me a while to figure out what the sentence was trying to tell me.   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-26T18:49:43Z","2012-06-19T03:50:41Z"
"","7175","JTA example config defines ""jndi"" namespace when it should be ""jee"" [SPR-2486]","**[Rick Mann](https://jira.spring.io/secure/ViewProfile.jspa?name=jetforme)** opened **[SPR-2486](https://jira.spring.io/browse/SPR-2486?redirect=false)** and commented  p. 150 of the spring-reference 2.0 pdf file. The grey box above the NOTE showing a sample XML config of the transaction manager has a bad xmlns:jndi. It should be      xmlns:jee=""http://www.springframework.org/schema/jee""  (if appendix A.2.3 is to be believed).   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-26T18:22:13Z","2012-06-19T03:50:54Z"
"","7164","database type mismatch in integration test example [SPR-2475]","**[Rick Mann](https://jira.spring.io/secure/ViewProfile.jspa?name=jetforme)** opened **[SPR-2475](https://jira.spring.io/browse/SPR-2475?redirect=false)** and commented  on pp 144-5 of the spring-reference 2.0.pdf manual: I think the text ""For example, the JDBC implementation of the PetClinic tests contains the following method"" intended ""Hibernate"" in place of ""JDBC"".   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-08-24T09:17:37Z","2006-08-24T19:52:52Z"
"","7129","Pleaes adjust JIRA settings to obscure/hide my email address. [SPR-2440]","**[Rick Mann](https://jira.spring.io/secure/ViewProfile.jspa?name=jetforme)** opened **[SPR-2440](https://jira.spring.io/browse/SPR-2440?redirect=false)** and commented  According to the JIRA website, the way to obfuscate email addresses is in global JIRA configuration settings. Please do this. Thank you.   --- No further details from [SPR-2440](https://jira.spring.io/browse/SPR-2440?redirect=false)","closed","","spring-projects-issues","2006-08-17T08:15:36Z","2019-01-11T19:32:16Z"
"","7828","Spring PetClinic documentation is shabby, and needs revisiting [SPR-3142]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3142](https://jira.spring.io/browse/SPR-3142?redirect=false)** and commented  Having been forced to actually read the tutorial for the PetClinic, it's a bit shabby. Someone went crazy with the bold tag and the tutorial is darn hard to read. A few UML diagrams would be much better suited and then a lot of that text can just be deleted.  See also #7827 .  ---  **Affects:** 2.0.2","closed","status: declined,","spring-projects-issues","2007-02-10T22:36:18Z","2019-01-11T17:35:32Z"
"","7758","Document the 'proxy-target-class' attribute of the  element. [SPR-3072]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3072](https://jira.spring.io/browse/SPR-3072?redirect=false)** and commented  ---  **Affects:** 2.0.2  **Issue Links:** - #7757 Scoped beans force all AOP proxies to CGLib proxies. Setting  doesn't  change this behaviour. (_**""depends on""**_)","closed","type: documentation,","spring-projects-issues","2007-01-24T21:23:27Z","2019-01-11T16:41:56Z"
"","7748","Improve doc coverage of LTW with special regard to SpringAOP and AspectJ together in the same application [SPR-3062]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3062](https://jira.spring.io/browse/SPR-3062?redirect=false)** and commented  http://forum.springframework.org/showthread.php?t=21470&p=97427  ---  **Affects:** 2.0 final, 2.0.1, 2.0.2  **Issue Links:** - #8653 Spring-native LTW does not work with TomcatInstrumentableClassLoader (_**""depends on""**_) - #8656 Test spring-agent.jar based Spring native LTW on remaining platforms (_**""depends on""**_) - #8654 Make Spring-native LTW work with Glassfish (_**""depends on""**_) - #8655 Make Spring-native LTW work with Weblogic (_**""depends on""**_)  5 votes, 8 watchers","closed","status: declined,","spring-projects-issues","2007-01-22T19:37:38Z","2019-01-11T16:42:52Z"
"","7747","Document the 'order' attribute of the  element. [SPR-3061]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3061](https://jira.spring.io/browse/SPR-3061?redirect=false)** and commented  Document #7190.  ---  **Affects:** 2.0.2  **Issue Links:** - #7190 add the possibility to specify the order when using  (_**""depends on""**_) - #7850 Doc: Execution order for aspectj aspects and  (_**""is depended on by""**_)","closed","type: documentation,","spring-projects-issues","2007-01-22T08:20:43Z","2019-01-11T16:42:55Z"
"","7744","readme.txt file in PetClinic sample contains stale(?) text. [SPR-3058]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3058](https://jira.spring.io/browse/SPR-3058?redirect=false)** and commented  Is the following text still pertinent seeing as Spring 2.0 final has been out for some months now? (Lines 33-35)  * NOTE: The sample currently only works against TopLink 10.1.3 developer previews. * The reason for this is an incompatibility in TopLink 10.1.3 final's HSQLDB * platform adapter. This will be resolved until Spring 2.0 final.  This entire block either needs to be deleted if the issue has been fixed, or the 'This will be resolved until Spring 2.0 final.' text needs to be changed to something like 'This will be resolved in Spring 2.1.'   ---  **Affects:** 2.0.2","closed","type: documentation,","spring-projects-issues","2007-01-20T00:00:04Z","2012-06-19T03:50:04Z"
"","7730","Create or port an existing Spring sample application that showcases Java5+ development and Spring's Java5+ features. [SPR-3044]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3044](https://jira.spring.io/browse/SPR-3044?redirect=false)** and commented  See this forum thread for details...  http://forum.springframework.org/showthread.php?t=33734   ---  **Attachments:** - [java5-dao.patch.txt](https://jira.spring.io/secure/attachment/12635/java5-dao.patch.txt) (_7.34 kB_) - [petclinic15.zip](https://jira.spring.io/secure/attachment/12344/petclinic15.zip) (_136.96 kB_)  2 votes, 3 watchers","closed","type: documentation,","spring-projects-issues","2007-01-17T06:23:36Z","2019-01-11T16:36:40Z"
"","7646","Document the JDBC KeyHolder functionality. [SPR-2959]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2959](https://jira.spring.io/browse/SPR-2959?redirect=false)** and commented  The KeyHolder abstraction in the JDBC library is not documented at all in the reference documentation.  Do so. An example of the JDBC 3.0 support would be nice too.   ---  **Affects:** 2.0.1","closed","type: documentation,","spring-projects-issues","2006-12-18T00:43:23Z","2012-06-19T03:50:26Z"
"","7453","SQLQuery reference documentation inconsistent with SQLQuery code [SPR-2765]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2765](https://jira.spring.io/browse/SPR-2765?redirect=false)** and commented  Updated JDBC chapter in the reference documentation to reflect the fact that the ResultReader interface was removed for Spring 2.0 (in favour of using the RowMapper interface).  The documentation was not updated at the same time unfortunately :(   ---  **Affects:** 2.0 final","closed","type: documentation,","spring-projects-issues","2006-10-26T19:43:40Z","2012-06-19T03:50:17Z"
"","7402","Document JMS-based remoting [SPR-2714]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2714](https://jira.spring.io/browse/SPR-2714?redirect=false)** and commented  Namely the JmsInvokerProxyFactoryBean and JmsInvokerServiceExporter classes in the remoting.xml file.   ---  **Affects:** 2.0 final","closed","type: documentation,","spring-projects-issues","2006-10-15T20:47:12Z","2012-06-19T03:50:10Z"
"","7283","Document the @Transactional semantics with regard to JDK proxies, class proxies and AspectJ. [SPR-2594]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2594](https://jira.spring.io/browse/SPR-2594?redirect=false)** and commented  This single issue lumps the #7203, #7211, and #7267 related issues together.  ---  **Affects:** 2.0 RC4","closed","type: documentation,","spring-projects-issues","2006-09-17T20:16:21Z","2019-01-11T19:22:17Z"
"","7255","should have MessageSource support [SPR-2566]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2566](https://jira.spring.io/browse/SPR-2566?redirect=false)** and commented  (c.f. comment from Matt Raible on #7043)  It would be cool if this tag supported a ""key"" attribute so you could read directly from your messageSource. For example:    Just a thought.  Matt  ---  **Affects:** 2.0 RC3  **Issue Links:** - #8047 Provide comprehensive I18N support for the Spring form tag library. (_**""is depended on by""**_) - #6768 Add MessageSource support to HTML taglib (_**""is duplicated by""**_)  15 votes, 12 watchers","closed","status: bulk-closed,","spring-projects-issues","2006-09-08T22:28:19Z","2019-01-12T03:51:15Z"
"","7094","PDF formating issue - schema locations do not fit into grey-background frame. [SPR-2405]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2405](https://jira.spring.io/browse/SPR-2405?redirect=false)** and commented   --- No further details from [SPR-2405](https://jira.spring.io/browse/SPR-2405?redirect=false)","closed","status: declined,","spring-projects-issues","2006-08-10T23:34:07Z","2007-08-05T21:05:01Z"
"","6997","Add crib-sheet summarising the Spring  elements [SPR-2308]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2308](https://jira.spring.io/browse/SPR-2308?redirect=false)** and commented  http://forum.springframework.org/showthread.php?t=26889   --- No further details from [SPR-2308](https://jira.spring.io/browse/SPR-2308?redirect=false)","closed","status: declined,","spring-projects-issues","2006-07-16T20:32:18Z","2007-01-13T03:43:21Z"
"","6981","Get better exception messages from Velocity when using Spring macros and exposeMacroHelpers is not set [SPR-2292]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2292](https://jira.spring.io/browse/SPR-2292?redirect=false)** and commented  ---  **Affects:** 2.0 RC2  **Issue Links:** - #6567 Data binding fails for SimpleFormController and velocity (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2006-07-12T19:39:15Z","2019-01-11T19:10:04Z"
"","6920","Document proxy-self-invocation issues and solutions in Spring AOP [SPR-2230]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2230](https://jira.spring.io/browse/SPR-2230?redirect=false)** and commented  (See #6916).  ---  **Affects:** 2.0 final","closed","type: documentation,","spring-projects-issues","2006-07-02T21:48:38Z","2019-01-11T19:08:20Z"
"","6919","Include the showcase applications in the 'spring-with-dependencies' release archive. [SPR-2229]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2229](https://jira.spring.io/browse/SPR-2229?redirect=false)** and commented  The various showcase applications are not being included in the 'spring-with-dependencies' release archive.  This can be effected by changing the build script so that these files are included.   ---  **Affects:** 2.0 RC1","closed","type: task,","spring-projects-issues","2006-07-02T20:43:58Z","2012-06-19T03:52:40Z"
"","6905","Create tests for the various classes in the org.springframework.test.* packages [SPR-2215]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2215](https://jira.spring.io/browse/SPR-2215?redirect=false)** and commented  The various classes in the org.springframework.test.* packages (especially the AbstractDependencyInjectionSpringContextTests and subclasses) have NO tests. This makes writing fixes and improvements harder than it ought to be.  So, write some tests for the test helper classes :)   --- No further details from [SPR-2215](https://jira.spring.io/browse/SPR-2215?redirect=false)","closed","in: core,","spring-projects-issues","2006-06-28T21:37:48Z","2007-08-05T21:05:59Z"
"","6887","Split current IoC chapter into 'core' and 'advanced' chapters [SPR-2197]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2197](https://jira.spring.io/browse/SPR-2197?redirect=false)** and commented  The current Ioc chapter (beans.xml) is just too darn big. It really needs to be split into two distinct chapters:  Core - this chapter describes the Spring IoC container, such as the core interfaces (BF, AC), XML configuration metadata, instantiating a container, beans scopes, the various lifecycle interfaces (xxxAware), some of the more common metadata (lazy-init), etc.  Advanced - (perhaps the title could be changed 'cos nothing here is really advanced, but rather just not meat-and-potatoes stuff) this chapter contains some of the more esoteric or not commonly used stuff (i.e. stuff that you don't absolutely have to know to get 80% of the value out of Spring's IoC container). This would be stuff like method injection, autowiring (!), extension points such as the bean post processors, singleton lookup classes, message sources, application context events, etc.   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-06-26T19:23:29Z","2012-06-19T03:52:36Z"
"","6885","Port the build of the 'dynamic language MVC' showcase application to Maven2. [SPR-2195]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2195](https://jira.spring.io/browse/SPR-2195?redirect=false)** and commented   ---  **Affects:** 2.0 RC1","closed","status: declined,","spring-projects-issues","2006-06-26T01:26:22Z","2007-08-14T09:26:45Z"
"","6884","Port the build of the 'formtags' showcase application to Maven2. [SPR-2194]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2194](https://jira.spring.io/browse/SPR-2194?redirect=false)** and commented   ---  **Affects:** 2.0 RC1","closed","status: declined,","spring-projects-issues","2006-06-26T01:26:10Z","2007-08-14T09:26:33Z"
"","6883","Port the build of the 'convention over configuration' showcase application to Maven2. [SPR-2193]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2193](https://jira.spring.io/browse/SPR-2193?redirect=false)** and commented   ---  **Affects:** 2.0 RC1","closed","status: declined,","spring-projects-issues","2006-06-26T01:25:02Z","2007-08-14T09:26:24Z"
"","6882","Polish the look and feel of the 'dynamic language MVC' showcase application. [SPR-2192]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2192](https://jira.spring.io/browse/SPR-2192?redirect=false)** and commented   ---  **Affects:** 2.0 RC1","closed","type: task,","spring-projects-issues","2006-06-26T01:23:15Z","2012-06-19T03:52:37Z"
"","6881","Polish the look and feel of the 'convention over configuration' showcase application. [SPR-2191]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2191](https://jira.spring.io/browse/SPR-2191?redirect=false)** and commented   ---  **Affects:** 2.0 RC1","closed","status: declined,","spring-projects-issues","2006-06-26T01:22:50Z","2007-06-15T10:38:36Z"
"","6880","Polish the look and feel of the 'formtags' showcase application. [SPR-2190]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2190](https://jira.spring.io/browse/SPR-2190?redirect=false)** and commented   ---  **Affects:** 2.0 RC1","closed","type: task,","spring-projects-issues","2006-06-26T01:21:12Z","2012-06-19T03:52:21Z"
"","7332","ServletRequestUtils.getStringParameter(request, paramName, defaultValue) never returns default value. [SPR-2643]","**[Richard Paul](https://jira.spring.io/secure/ViewProfile.jspa?name=rpaul)** opened **[SPR-2643](https://jira.spring.io/browse/SPR-2643?redirect=false)** and commented  ServletRequestUtils.getStringParameter(request, paramName, defaultValue)  no longer returns the defaultValue when no parameters with the given parameter name exist. It now returns an empty string.   ---  **Affects:** 2.0 RC3, 2.0 RC4  **Attachments:** - [TestGetStringParameterWithDefaultValue.java](https://jira.spring.io/secure/attachment/11991/TestGetStringParameterWithDefaultValue.java) (_459 bytes_)","closed","in: web,","spring-projects-issues","2006-09-26T15:23:30Z","2019-01-11T21:11:24Z"
"","7800","Failed reconnect on OC4J: Object reference no longer valid. [SPR-3113]","**[Richard Borge](https://jira.spring.io/secure/ViewProfile.jspa?name=richared)** opened **[SPR-3113](https://jira.spring.io/browse/SPR-3113?redirect=false)** and commented  I use a SimpleRemoteStatelessSessionProxyFactoryBean to connect to an EJB on an OC4J appserver. While stresstesting some transaction logic, I kept killing the server to see if the transaction was able to complete on reconnect. This worked well most times, however, som times I got the error:  Object reference no longer valid (Disconnected)  Stacktrace: org.springframework.remoting.RemoteAccessException: Cannot access remote service [Service]; nested exception is com.evermind.server.rmi.RMIConnectionException: Object reference no longer valid (Disconnected) at org.springframework.remoting.rmi.RmiClientInterceptorUtils.convertRmiAccessException(RmiClientInterceptorUtils.java:177) at org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.doInvoke(SimpleRemoteSlsbInvokerInterceptor.java:84) at org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor.invoke(AbstractRemoteSlsbInvokerInterceptor.java:119) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:176) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:210) at $Proxy0.countChangesAfter(UnknownSource) at com.company.cache.agent.CacheAgent.getUpdatesSinceLastUpdate(CacheAgent.java:206)  At line 206 in the cacheagent i do a call to the application context to get an instance of the Service.  With this error, Spring was not able to reload. I have set RefreshHomeOnConnectFailure, and as I said it works most of the time (on errors like JVM termination and unknown command). It seems Spring holds on to a connection it thinks is valid somehow. Is there anyway to make a complete refresh of the context, so that it can ""start fresh""? If I restart the client without restarting the server after an error like this, everything works normally, so there must be something on the client.   ---  **Affects:** 1.2.8, 2.0.1  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","in: core,","spring-projects-issues","2007-02-05T18:16:45Z","2012-06-19T03:51:00Z"
"","7548","Allow to restrict the visibility of beans to a file [SPR-2861]","**[Riccardo](https://jira.spring.io/secure/ViewProfile.jspa?name=ferrix)** opened **[SPR-2861](https://jira.spring.io/browse/SPR-2861?redirect=false)** and commented  All the beans defined in any configuration file are visible from the whole project. t would be useful to be able to limit the visibility of a bean to only the file where it is defined. Something like . I have looked in the forum and jira and I couldn't find anything like this.  ---  **Issue Links:** - #11829 Support `@Bean` method visibility (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2006-11-21T08:34:56Z","2019-01-13T08:09:50Z"
"","7692","WebSphere delegating data source - uses isolation level specified in the spring transactional properties to retrieve connections from a WAS data source [SPR-3006]","**[Ricardo Olivieri](https://jira.spring.io/secure/ViewProfile.jspa?name=rolivieri)** opened **[SPR-3006](https://jira.spring.io/browse/SPR-3006?redirect=false)** and commented  WebSphere delegating data source that uses IBM extended API to get a database connection with a specific isolation level from a WebSphere JNDI datasource. The isolation level to use is obtained from the TransactionSynchronizationManager class (the getCurrentTransactionIsolationLevel() static method is invoked).  This class also offers a solution to the WAS stale connection issue -> it tests each connection before returning it to the application (performing this test is optional, i.e., a configurable option).    ---  **Affects:** 2.0.1  **Attachments:** - [WebSphereDataSourceAdapter.java](https://jira.spring.io/secure/attachment/12319/WebSphereDataSourceAdapter.java) (_11.19 kB_) - [WebSphereDataSourceAdapter.java](https://jira.spring.io/secure/attachment/12314/WebSphereDataSourceAdapter.java) (_13.60 kB_)","closed","type: enhancement,","spring-projects-issues","2007-01-02T06:46:07Z","2012-06-19T03:51:18Z"
"","7386","Spring DBC (Design by Contract) [SPR-2698]","**[Ricardo Ferreira](https://jira.spring.io/secure/ViewProfile.jspa?name=jricardoferreira)** opened **[SPR-2698](https://jira.spring.io/browse/SPR-2698?redirect=false)*** and commented  The Spring DBC is a feature to enable programmers use the Design By Contract features founded at the programming language Eiffel. The concept of DBC has been used as a reference about code quality and is one of the most good techniques of software construction of object oriented systems.  This feature is to be implemented using java aspects and have the contracts expressions evaluated using Groovy. At the top of this infrastructure, there is a generic advisor that enable object autoproxing provided by the DefaultAdvisorAutoProxyCreator Spring class. I have created an DBC interceptor that reads some methods annotations and process the contract code.  All the expression code are evaluated using the Groovy shell provided by Spring main dependecies.  At the code below, there is an example of design by contract applied in an regular poji interface:  package com.acme.dbc.test;  import org.springframework.dbc.framework.Ensure; import org.springframework.dbc.framework.Require;  public interface BankingService {      @Ensure(""return.id   !=   0"")     public Account createAccount();          @Require(""arg{3}  >  0   &&   arg{2}.valid   &&   arg{3}  >  0"")                       @Invariant(""logCount != 0"")     public void transfer(Account from, Account to, double ammount);  }  This feature is already implemented and tested, and I would be very glad to have this feature incorporated at the next Spring release, maybe, something like 'spring-dbc.jar'.  I have searched for this feature at the Spring forum, and some developers (including Rod Johnson) have confirmed that would be a nice feature, and off course, is a very good technique that Spring would provide.  Sincerely,  Ricardo Ferreira Sun Certified Enterprise Architect IBM Certified Specialist for RUP   ---  **Affects:** 2.0 final  **Attachments:** - [Spring DBC.zip](https://jira.spring.io/secure/attachment/12214/Spring+DBC.zip) (_3.71 MB_) - [spring-dbc-1.0.zip](https://jira.spring.io/secure/attachment/12217/spring-dbc-1.0.zip) (_3.28 MB_)  14 votes, 11 watchers","closed","status: bulk-closed,","spring-projects-issues","2006-10-09T00:33:47Z","2019-01-12T03:51:12Z"
"","7426","BeanWrapperImpl cannot retrieve an indexed value from a Map of Lists [SPR-2738]","**[Rhett Sutphin](https://jira.spring.io/secure/ViewProfile.jspa?name=rsutphin)** opened **[SPR-2738](https://jira.spring.io/browse/SPR-2738?redirect=false)** and commented  BeanWrapperImpl#getPropertyValue fails when attempting to load a value from a Map of Lists when the keys are anything other than Strings. For example, say your bean has a property ""map"" whose type is Map.  This will successfully load an individual list:  List\ list = beanWrapper.getPropertyValue(""map[3]"")  This, however, will fail to load a single element:  Whatever w = beanWrapper.getPropertyValue(""map[3][1]"")  The immediate cause is that the second call does bean.getMap().get(""3"") -- i.e., the key isn't converted to an Integer.  Since it works in the first case, it seems like it should be workable in the second case.  I've got a self-contained test case which I will attach.   ---  **Affects:** 2.0 final  **Attachments:** - [spr-2738_mapoflists.tar.bz2](https://jira.spring.io/secure/attachment/12053/spr-2738_mapoflists.tar.bz2) (_1.64 kB_) - [test.txt](https://jira.spring.io/secure/attachment/12054/test.txt) (_1.06 kB_)  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2006-10-21T21:11:55Z","2012-06-19T03:50:43Z"
"","7198","BeanWrapperImpl#setProperty(name, value) results in ClassCastException for generic lists-of-lists [SPR-2509]","**[Rhett Sutphin](https://jira.spring.io/secure/ViewProfile.jspa?name=rsutphin)** opened **[SPR-2509](https://jira.spring.io/browse/SPR-2509?redirect=false)** and commented  If you have a bean like this:  public class ExampleBean { private List listOfLists;      // ...          public List getListOfLists() {         return listOfLists;     }          public void setListOfLists(List listOfLists) {         this.listOfLists = listOfLists;     }     // ...  }  Calling setProperty(""listOfLists[0][0]"", ""newValue"") on a BeanWrapperImpl wrapping this bean will result in a ClassCastException when you next call getListOfLists().get(0).get(0) (i.e., when you attempt to retrieve the set value).  The actual value set by BeanWrapperImpl is a single-entry ArrayList containing the desired value (e.g., here it would be [""newValue""]).  My hunch is that this is caused by the attempt in BeanWrapperImpl to coerce the set value to the declared generic type.  Unfortunately, it is making the attempt too early.  I have a self-contained test case which illustrates the problem which I will attach.   ---  **Affects:** 2.0 RC2, 2.0 RC3  **Attachments:** - [spr-2509.tar.bz2](https://jira.spring.io/secure/attachment/11919/spr-2509.tar.bz2) (_2.10 kB_)","closed","in: core,","spring-projects-issues","2006-08-30T07:28:04Z","2012-06-19T03:50:54Z"
"","7831","Performance improvement on AbstractCachingViewResolver  [SPR-3145]","**[Reza Aliakbari](https://jira.spring.io/secure/ViewProfile.jspa?name=aliakbari)** opened **[SPR-3145](https://jira.spring.io/browse/SPR-3145?redirect=false)** and commented  I got Spring 2.0.1 and I found a performance issue on this class that can slightly improve the performance of this object especially when there is a high load on this object. On the method `resolveViewName` the code could be changed as follow  ```java View view = (View) this.viewCache.get(cacheKey); if (view == null) {      synchronized (this.viewCache) {           View view = (View) this.viewCache.get(cacheKey);           if (view == null) {            ......           }          .....     } } ```  I also see the following comment `// No synchronization, as we can live with occasional double caching`. That is correct, but with the upper solution we don't need to be worry of extra object problem and also we have good performance.  Cheers, Reza  ---  **Affects:** 2.0.1  **Issue Links:** - #14698 AbstractCachingViewResolver - caching redirect views leads to memory leak  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06c6cbb6b92655e1b0f5b76380d2e5f1c4b7b493  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-12-26T01:04:04Z","2019-01-11T17:35:25Z"
"","7654","BeanUtils doesn't correctly load annotations onto read methods [SPR-2968]","**[reuben firmin](https://jira.spring.io/secure/ViewProfile.jspa?name=reubenfirmin)** opened **[SPR-2968](https://jira.spring.io/browse/SPR-2968?redirect=false)** and commented  The following test passes. I don't believe it should. In other words, SaleListCriteriaWithLotListMetadata#getCriteria has one annotation, which is of RUNTIME retention. On some machines (i.e. mine), BeanUtils would behave as expected when deployed under resin. On most machines, it did not return annotations. I never tracked down the environment discrepency; however, I did come up with this test. Somehow, the reflection used to obtain the read method on the property descriptor is insufficient.      public void testAnnotationsOnCriteria3()     throws Exception     {         SaleListCriteriaWithLotListMetadata crit = new SaleListCriteriaWithLotListMetadata();         Class clazz = crit.getClass();         final PropertyDescriptor[] propertyDescriptors =            BeanUtils.getPropertyDescriptors(clazz);         for (PropertyDescriptor prop : propertyDescriptors)         {             if (prop.getName().equals(""criteria""))             {                 Method m1 = prop.getReadMethod();                 Method m2 = clazz.getMethod(prop.getReadMethod().getName(), new Class[] {});                 assertEquals(m1.getAnnotations().length, 0);                 assertEquals(m1.getDeclaredAnnotations().length, 0);                 assertEquals(m2.getAnnotations().length, 1);                 assertEquals(m2.getDeclaredAnnotations().length, 1);                             }         }     }        ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-12-20T02:24:05Z","2019-01-13T08:09:35Z"
"","6987","JPA used with annotations does not work together with beans configured with aop introductions [SPR-2298]","**[Reto Urfer](https://jira.spring.io/secure/ViewProfile.jspa?name=urferr)** opened **[SPR-2298](https://jira.spring.io/browse/SPR-2298?redirect=false)** and commented  I tried to migrate parts of a generic dao implementation for hibernate (http://www-128.ibm.com/developerworks/java/library/j-genericdao.html) to JPA using Spring 2.0 and Hibernate Entity Manager. I noticed several problems in this context:  1. If more than one dao bean is configures, the application context can no longer be loaded properly. The Exception ""org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'No EntityManagerFactory name given and factory contains several' is defined"" is thrown.  2. If only one dao bean is configured, the implementsInterface of the IntroductionInterceptor is never called. The invoke method is called even if implementsInterface methos always returns false.  I will attach a Test-Application to reploduce the behaviour.   ---  **Affects:** 2.0 RC2  **Attachments:** - [Test AOP Introduction.zip](https://jira.spring.io/secure/attachment/11805/Test+AOP+Introduction.zip) (_15.28 kB_)  4 votes, 3 watchers","closed","in: core,","spring-projects-issues","2006-07-13T08:31:06Z","2019-01-11T19:10:06Z"
"","6894","Hibernate JPA implementation can not find persistence_1_0.dtd [SPR-2204]","**[Reto Urfer](https://jira.spring.io/secure/ViewProfile.jspa?name=urferr)** opened **[SPR-2204](https://jira.spring.io/browse/SPR-2204?redirect=false)** and commented  With Hibernate EntityManager, the method org.springframework.orm.jpa.PersistenceUnitReader.validateResource (Line 281) raises an FileNotFoundException for the file persistence_1_0.dtd. The reason is, that this file is located in the package org.hibernate.ejb in the library hibernate-entitymanager.jar.  With TopLink their is no problem, because their the file is located in the root of library toplink-essentials.jar   ---  **Affects:** 2.0 RC1","closed","in: core,","spring-projects-issues","2006-06-27T05:28:48Z","2012-06-19T03:52:37Z"
"","6893","Source Code missing for JPA implementation [SPR-2203]","**[Reto Urfer](https://jira.spring.io/secure/ViewProfile.jspa?name=urferr)** opened **[SPR-2203](https://jira.spring.io/browse/SPR-2203?redirect=false)** and commented   ---  **Affects:** 2.0 RC1","closed","in: core,","spring-projects-issues","2006-06-27T05:17:06Z","2019-01-11T19:04:57Z"
"","7656","Classpath Resource Loading : different behavior in standalone or web application [SPR-2970]","**[Remi VANKEISBELCK](https://jira.spring.io/secure/ViewProfile.jspa?name=vankeisb)** opened **[SPR-2970](https://jira.spring.io/browse/SPR-2970?redirect=false)** and commented  http://forum.springframework.org/showthread.php?t=32624  ClassPathApplicationContext.getResources() does not find resources from the classpath (using ""classpath:*"") when those resources are packaged in a jar. It works fine when the resources are exploded in the CLASSPATH, but fails when they're inside a jar which is in the CLASSPATH.  Attached is a small test that shows it. It's a small test class and app context which you can build easily with maven2.  Here under is a copy of README.txt, inside this test.  ---  This small test shows a bug in ClassPathXmlApplicationContext.getResources(). This one does not find classes in the CLASSPATH when they are packaged into jars.  Test procedure :  1/ build everything : mvn install  2/ Run with ""exploded"" CLASSPATH (example below) : export CLASSPATH= java test.res.in.jar.Main  You should see the following output : ********** 1 resource(s) returned for query..  3/ Run with ""jar"" CLASSPATH (example below) : export CLASSPATH= java test.res.in.jar.Main  You should see the following output : ********** 0 resource(s) returned for query..  -> Resource loading fails when the classes are into a jar !  EXPLODED CLASSPATH (replace with your path to m2) :  /home/vankeisb/.m2/repository/commons-logging/commons-logging/1.1/commons-logging-1.1.jar:/home/vankeisb/.m2/repository/org/springframework/spring/1.2.8/spring-1.2.8.jar:./target/classes/  JAR CLASSATH (replace with your path to m2) :  /home/vankeisb/.m2/repository/commons-logging/commons-logging/1.1/commons-logging-1.1.jar:/home/vankeisb/.m2/repository/org/springframework/spring/1.2.8/spring-1.2.8.jar:./target/springtest-1.0-SNAPSHOT.jar  ---  **Affects:** 1.2.8  **Attachments:** - [springtest.zip](https://jira.spring.io/secure/attachment/12286/springtest.zip) (_5.67 kB_)","closed","in: core,","spring-projects-issues","2006-12-20T09:50:07Z","2019-01-13T22:44:47Z"
"","7584","Make @Configurable functionality work when objects get deserialized [SPR-2896]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-2896](https://jira.spring.io/browse/SPR-2896?redirect=false)** and commented  Currently, `@Configurable` annotation works out of box only when objects are created through 'new'. If a `@Configurable` object gets serialized (for clustering or similar purposes) and then deserialized, its injected dependencies are lost. While users can write their own subaspects of AbstractBeanConfigurerAspect, it forces work and understanding of the issues over to user.  See a relevant forum posting: http://forum.springframework.org/showthread.php?t=31874    ---  **Attachments:** - [serializable-configurable-enhancement.patch](https://jira.spring.io/secure/attachment/12251/serializable-configurable-enhancement.patch) (_13.19 kB_)","closed","type: enhancement,","spring-projects-issues","2006-11-29T15:44:26Z","2012-06-19T03:50:40Z"
"","7515","Dependency on a advised bean chokes aspects defined using XML [SPR-2828]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-2828](https://jira.spring.io/browse/SPR-2828?redirect=false)** and commented  An XML-defined aspect that depends on a advised bean doesn't work correctly. An equivalent aspects defined using `@AspectJ` syntax works just fine.  XML-defined aspect - produces a configuration error if the dependent bean is defined before the aspect that needs it (this is bad due to asymmetry with `@AspectJ`) - doesn't advise if the dependent bean is defined after the aspect that needs it (this is worse as it will leave user scratching their head as to what is wrong with their pointcut)  See http://forum.springframework.org/showthread.php?t=31348 for the forum report that prompted this report.  The attached patch includes a JUnit test that illustrates the problem.   ---  **Affects:** 2.0 final  **Attachments:** - [property-dependent-aspect-tests.patch](https://jira.spring.io/secure/attachment/12200/property-dependent-aspect-tests.patch) (_14.48 kB_)","closed","in: core,","spring-projects-issues","2006-11-12T04:50:23Z","2012-06-19T03:50:11Z"
"","7154","org.springframework.transaction.aspectj.AnnotationTransactionAspect matching only on public methods [SPR-2465]","**[Ralf Ebert](https://jira.spring.io/secure/ViewProfile.jspa?name=ralfebert)** opened **[SPR-2465](https://jira.spring.io/browse/SPR-2465?redirect=false)** and commented  The pointcuts of AnnotationTransactionAspect match only the execution of public methods. This makes sense for the Spring AOP, but if you use AspectJ to get annotated transaction (mainly to get clean support for transactions/aspects in general on private/protected methods) this prevents an easy out-of-the-box usage of AnnotationTransactionAspect via AspectJ AOP.   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-23T01:48:30Z","2012-06-19T03:50:50Z"
"","7607","extractJarFileURL throws java.lang.IllegalArgumentException: URI is not hierarchical  [SPR-2921]","**[Raimund Dettmer](https://jira.spring.io/secure/ViewProfile.jspa?name=rdettmer)** opened **[SPR-2921](https://jira.spring.io/browse/SPR-2921?redirect=false)** and commented  The latest comment of #7414 did not make it into Spring 2.0.1  org.springframework.util.ResourceUtils.extractJarFileURL(URL)  Line 230 should be: return new URL(FILE_URL_PREFIX + '/' + jarFile);  ---  **Affects:** 2.0.1  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2006-12-06T08:06:18Z","2019-01-11T22:00:46Z"
"","7027","add facelets View [SPR-2338]","**[Rafal Krupinski](https://jira.spring.io/secure/ViewProfile.jspa?name=r.krupinski)** opened **[SPR-2338](https://jira.spring.io/browse/SPR-2338?redirect=false)** and commented  add org.springframework.web.servlet.View implementation for jsf-Facelets. Optionally View adapting any jsf's view-handler   --- No further details from [SPR-2338](https://jira.spring.io/browse/SPR-2338?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-07-24T03:39:21Z","2012-06-19T09:37:23Z"
"","7408","ControllerBeanNameHandlerMapping [SPR-2720]","**[Rafael Borges](https://jira.spring.io/secure/ViewProfile.jspa?name=borgra)** opened **[SPR-2720](https://jira.spring.io/browse/SPR-2720?redirect=false)** and commented  I've created a ControllerBeanNameHandlerMapping that works like ControllerClassNameHandlerMapping, but uses the bean name for generating path mapping. It was trivial to code, but it may be interesting to incorporate it to Spring (or maybe Spring Modules).   ---  **Attachments:** - [ControllerBeanNameHandlerMapping.java](https://jira.spring.io/secure/attachment/12034/ControllerBeanNameHandlerMapping.java) (_1.31 kB_)","closed","type: enhancement,","spring-projects-issues","2006-10-16T17:57:55Z","2012-06-19T09:37:36Z"
"","7625","XmlValidationModeDetector.detectValidationMode has a encoding issue in IBM JDK 1.4.2 :( [SPR-2939]","**[qxo](https://jira.spring.io/secure/ViewProfile.jspa?name=qxo)** opened **[SPR-2939](https://jira.spring.io/browse/SPR-2939?redirect=false)** and commented   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-12-11T14:13:25Z","2012-06-19T03:50:36Z"
"","7107","ManagedAttribute for boolean ""is..."" type getter is not recognized [SPR-2418]","**[Quintin May](https://jira.spring.io/secure/ViewProfile.jspa?name=qmay)** opened **[SPR-2418](https://jira.spring.io/browse/SPR-2418?redirect=false)** and commented  A boolean property getter using ""is"" naming versus ""get"" naming does not generate a JMX MBean attribute getter.  `@ManagedAttribute`(description=""is getter"") public boolean isFunctioning1()  `@ManagedAttribute`(description=""get getter"") public boolean getFunctioning2()  The attribute for ""getFunctioning2"" is created in the MBean, but the attribute for ""isFunctioning1"" is not.   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-11T23:59:22Z","2019-01-11T19:33:14Z"
"","6963","Multicheckox as it is in struts [SPR-2274]","**[Przemek Kubicki](https://jira.spring.io/secure/ViewProfile.jspa?name=przem)** opened **[SPR-2274](https://jira.spring.io/browse/SPR-2274?redirect=false)** and commented  Struts users got html:multibox that very ease usage of many checkboxes. I was struggling with form:checkbox to act as struts' multibox, but I didn't make it. So it is not as easy as it should/could be, or am I missing sth :). It would be nice if multibox stuff appeard at final 2.0 release.   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-10T23:34:28Z","2012-06-19T09:37:39Z"
"","7082","CancellableFormController binds form data to command object on cancel request after failing validation [SPR-2393]","**[PJ Lopez](https://jira.spring.io/secure/ViewProfile.jspa?name=palopez)** opened **[SPR-2393](https://jira.spring.io/browse/SPR-2393?redirect=false)** and commented  Using a org.springframework.web.servlet.mvc.CancellableFormController user can use the following steps to modify command object:  1. User enters invalid form data (Validation Fails) 2. User enters invalid form data in error page and triggers cancel action ( _cancel button )  After completing these steps the command object will contain the invalid data entered on the second step.  Possible solution:  - Override suppressBinding for CancellableFormController  protected boolean suppressBinding(HttpServletRequest request) {      return super.isCancelRequest(request);  }    --- No further details from [SPR-2393](https://jira.spring.io/browse/SPR-2393?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-08-08T09:30:51Z","2012-06-19T09:37:25Z"
"","7379","Circular references between custom scoped beans should be supported [SPR-2691]","**[Piotr Kolaczkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=pkolaczk)** opened **[SPR-2691](https://jira.spring.io/browse/SPR-2691?redirect=false)** and commented  Hi. I created a custom scope by overriding the get method in such a way:  public Object get(String name, ObjectFactory factory) { if (name was associated with the current thread) return object associated with the current thread; Object result = factory.getObject(); associate result with the current thread; return result; }  I registered scope programatically and it works as expected until I do a circular reference between two beans using this scope:  \ \ \ \ \ \  Spring falls into an endless loop creating bean1, bean2, bean1, bean2, .... If I change any of scopes to ""singleton"", it creates each bean at most 2 times (or once if both scopes are singleton).  I think the problem is that while the factory.getObject() is called, the object is NOT YET registered within the given scope, so the next call to the Scope.get(...) from the referenced bean enters factory.getObject() once again, closing the loop. The next call should have returned the already created bean, but wait.... it cannot be returned because we haven't returned from the factory.getObject() yet... So it is the chicken and egg problem.  I suggest providing 2-step bean instantiation: 1st instantiate the bean using constructor injection, and in 2nd step complete the bean by launching the setter injection. Then it could be possible to associate the object with the scope (e.g. current thread) between those steps.  By the way is there any reasonable work-around other than removing the circular reference?  ---  **Affects:** 2.0 final  **Issue Links:** - #7455 Circular reference of request scoped beans throws OutOfMemoryError or infinite loop. (_**""is depended on by""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-10-06T03:32:56Z","2019-01-11T21:20:41Z"
"","7334","FormTag has XSS exploit [SPR-2645]","**[Pieter Coucke](https://jira.spring.io/secure/ViewProfile.jspa?name=pietercoucke)** opened **[SPR-2645](https://jira.spring.io/browse/SPR-2645?redirect=false)** and commented  During our security audit (with Paros and others), it turned out that when someone requests a page with a form with an url like http://somedomain.com/myform.html?id=123&someparam="">\alert('XSS!')\ , the page is vulnerable to an XSS attack, since there is a javascript popup in the browser.  This could be exploited by a malicious website linking to this page and asking a user to give his credit card (by manipulating the html DOM with a more advanced javascript), fooling the user that he is on a legitimite website.  Solution: The FormTag appends the querystring in FormTag#resolveAction(). The resolveAction() method should at least html escape '', since escaping all characters may give unwanted results.  Our temporary solution is explicitly specifiying an ""action"" attribute in the tag.   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-26T19:25:45Z","2012-06-19T03:51:18Z"
"","6899","BridgeMethodResolver doesn't handle correctly cases with more than one bridge method [SPR-2208]","**[Petri Salmi](https://jira.spring.io/secure/ViewProfile.jspa?name=psalmi)** opened **[SPR-2208](https://jira.spring.io/browse/SPR-2208?redirect=false)** and commented   ---  **Affects:** 2.0 M5, 2.0 RC1  **Attachments:** - [BridgeMethodResolverFix.patch](https://jira.spring.io/secure/attachment/11742/BridgeMethodResolverFix.patch) (_2.05 kB_) - [BridgeMethodResolverTest.java](https://jira.spring.io/secure/attachment/11741/BridgeMethodResolverTest.java) (_2.35 kB_)","closed","in: core,","spring-projects-issues","2006-06-28T01:14:47Z","2012-06-19T03:52:28Z"
"","7557","Race condition in lazy singleton creation, potentially leading to unintended BeanCurrentlyInCreationException [SPR-2870]","**[Peter Veentjer](https://jira.spring.io/secure/ViewProfile.jspa?name=alarmnummer)** opened **[SPR-2870](https://jira.spring.io/browse/SPR-2870?redirect=false)** and commented  I expect there is a race problem in the applicationcontext.  Go to the getBean method in AbstractBeanFactory and continue to this line: Object sharedInstance = getSingleton(beanName);  Multiple threads are able to execute this statement at exactly the same moment (there is no exclusion). This means that they all could get a null value and they are now able to go to the else part of the if statement.  When you go to the beginning of the else part, you will see this:  // Fail if we're already creating this singleton instance: // We're assumably within a circular reference. if (isSingletonCurrentlyInCreation(beanName)) { throw new BeanCurrentlyInCreationException(beanName); }  This method is not going to stop them either. Eventually they all can call the createBean method and this means that multiple instances of the singleton bean could be created.  Solution: Difficult question. The most simplest thing to do would be to add a monitor surrounding this class by making all methods synchronized. But what worries me is that deadlocks are more likely to occur. I will think about this one **makes some oil-like coffee**.   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-11-23T05:59:48Z","2012-06-19T03:51:14Z"
"","6952","TaskExecutor is missing RejectedExecutionException [SPR-2263]","**[Peter Veentjer](https://jira.spring.io/secure/ViewProfile.jspa?name=alarmnummer)** opened **[SPR-2263](https://jira.spring.io/browse/SPR-2263?redirect=false)** and commented  The TaskHandler is missing the RejectedExecutionException. This Exception is thrown if a task can't be accepted for execution (maybe in the future), but it a normal signal you need to deal with in some cases. That is why this exception is a required part of the interface and needs to be documented.  The concrete implementations of the TaskExecutor need to wrap their RejectedExecutionException in the Spring-specific one.  Also the documentation is missing nullpointerexception documentation.   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-09T04:29:00Z","2012-06-19T03:52:27Z"
"","7424","spring:message tag should support resolving of a single EL expression passed into the arguments attribute [SPR-2736]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-2736](https://jira.spring.io/browse/SPR-2736?redirect=false)** and commented  The current behavior of evaluation of the ""arguments"" attribute of the spring:message tag (in both 2.0.x and 1.2.x) is to assume that if the user passes in a string, it is a comma-separated list of values and/or ELs. This will result in, for example, if the user passes:    ... to the equivalent of:  arguments = new Object[]{""foo"",""bar""}  The problem arises when the user intends to pass in a single EL expression that should resolve to an array of objects. For example, if I do something like this:  (in the Controller)  model.put(""myArgumentsArray"", new String[]{""foo"",""bar""});  (in the page)   ... the code in MessageTag.resolveMessage will set arguments to the equivalent of:  arguments = new Object[]{new String[]{""foo"",""bar""}};  This is because the behavior of resolution of the arguments attribute if the attribute is an instanceof String is to iterate through the String by the argument separator, and evaluate each argument separately. IMHO, the behavior if the user passes in a single string that is not separated, it should simply be evaluated inline (assuming it is an EL expression).  So the code modifications to MessageTag would look something like this:  [code] if (this.arguments instanceof String) { String[] stringArray = StringUtils.delimitedListToStringArray((String) this.arguments, this.argumentSeparator); // change if(stringArray.length == 1) { argumentsArray = ExpressionEvaluationUtils.evaluate(""arguments"",stringArray[0],pageContext); } [code]  I believe this is more correct if the user hasn't explicitly supplied multiple values using some kind of separator character.  I filed as a bug as opposed to an enhancement request, because I expected it to work this way, and was surprised when it did not. I'm open to suggestions if you don't think this is a bug, including supplementing/changing the documentation to make this behavior clearer.   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-10-20T02:28:08Z","2012-06-19T03:50:35Z"
"","7376","spring:message tag needs documentation on the ""message"" attribute [SPR-2688]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-2688](https://jira.spring.io/browse/SPR-2688?redirect=false)** and commented  The spring:message tag has a very helpful undocumented attribute ""message"", which lets one suck in (through EL) a MessageSourceResolvable. It's helpful because it easily allows one to loop through the errors object and display the enclosed messages, for e.g. as follows:  [code]    [code]  Assuming this is a supported attirbute, could documentation for it please be added to the spring:message tag?   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-05T23:51:11Z","2012-06-19T03:50:48Z"
"","7336","Minor typo in spring:bind taglib docs [SPR-2647]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-2647](https://jira.spring.io/browse/SPR-2647?redirect=false)** and commented  There is a minor typo in the spring:bind example that has been there since Spring 1.x documentation.  Ref: http://static.springframework.org/spring/docs/2.0.x/taglib/tag/BindTag.html  In the last two spring:bind example usages there is an = missing between ""var"" and ""error"":  [quote]  [quote]  The text [quote] var""error"" [quote]  Should be [quote] var=""error"" [quo   ---  **Affects:** 1.2.8, 2.0 RC4  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-09-28T00:11:39Z","2012-06-19T03:50:35Z"
"","6961","Can we stop moving the very useful class ControllerClassNameHandlerMapping [SPR-2272]","**[Peter Delahunty](https://jira.spring.io/secure/ViewProfile.jspa?name=pdelahun)** opened **[SPR-2272](https://jira.spring.io/browse/SPR-2272?redirect=false)** and commented  Hi  The class ControllerClassNameHandlerMapping has been moved several times in the Spring 2.0 releases.  This class is very useful but its location keeps changing with each release nearly.  First seen in org.springframework.web.servlet.mvc.mapping then org.springframework.web.servlet.mvc and now org.springframework.web.servlet.mvc.support  Surely the real home for this class is to live will all the other HandlerMapping implementations and move it to:  org.springframework.web.servlet.handler  This is best place for it next to SimpleUrlHandlerMapping  Many regards Peter Delahunty    ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-10T20:49:37Z","2006-07-23T00:47:32Z"
"","7025","RmiServiceExporter displays incorrect binding information when using RmiRegistryFactoryBean [SPR-2336]","**[Peter Bridge](https://jira.spring.io/secure/ViewProfile.jspa?name=whitehexagon)** opened **[SPR-2336](https://jira.spring.io/browse/SPR-2336?redirect=false)** and commented  RmiServiceExporter displays incorrect binding information when using RmiRegistryFactoryBean  source file: RmiServiceExporter.java method: afterPropertiesSet()  If a factory has been used to specify the registry, then the local property for port is not needed.  However the logger.info uses the local port number rather than the port defined in the registry variable.  ie. my registry was running on port 4242 but spring was claiming to have bound the service at 1099 (our JBoss RMI port).  Took a while to find this was the problem so watch out :)  Cheers Peter    ---  **Affects:** 1.2.8, 2.0 RC2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2006-07-24T00:42:38Z","2012-06-19T03:50:40Z"
"","7369","Missing hash models in FreeMarkerView (patch included) [SPR-2680]","**[Peter Backlund](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.backlund)** opened **[SPR-2680](https://jira.spring.io/browse/SPR-2680?redirect=false)** and commented  When working with standalone Freemarker, a number of scoped hash models are added to the model:  JspTaglibs Application Session Request RequestParamters  The FreeMarkerView class in Spring 2.0 does not add the Session and RequestParameter hash models.  Also, the object wrapper should be picked up from the configuration, not be hardcoded to ObjectWrapper.DEFAULT_WRAPPER.  The patch included fixes these issues.   ---  **Affects:** 2.0 final  **Attachments:** - [FreeMarkerView-hash-models-added.patch](https://jira.spring.io/secure/attachment/12008/FreeMarkerView-hash-models-added.patch) (_2.61 kB_)","closed","type: enhancement,","spring-projects-issues","2006-10-05T00:39:58Z","2012-06-19T03:50:33Z"
"","7368","Missing hash models in FreeMarkerView (pathc included) [SPR-2679]","**[Peter Backlund](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.backlund)** opened **[SPR-2679](https://jira.spring.io/browse/SPR-2679?redirect=false)** and commented   --- No further details from [SPR-2679](https://jira.spring.io/browse/SPR-2679?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-10-05T00:35:42Z","2006-10-05T01:36:30Z"
"","6898","Add clone method to MockHttpSession [SPR-2245]","**[Pedro Vicente](https://jira.spring.io/secure/ViewProfile.jspa?name=pedrofrv)** opened **[SPR-2245](https://jira.spring.io/browse/SPR-2245?redirect=false)** and commented  I'm using the spring web mock classes to test the servlets in an old project that I'm supporting.  In order test my action I must run the login process first to have a valid session. But the login takes a lot of time to run, especially in the development environment (2 seconds for each test).  It would be useful if the MockHttpSession had a clone method so we can create copies of the original session and reuse that in all the tests instead of executing the login process for each test.  I will try to post a patch to the MockHttpSession class   ---  **Attachments:** - [MockHttpSessionTests.java](https://jira.spring.io/secure/attachment/11789/MockHttpSessionTests.java) (_1.27 kB_) - [patchMockHttpSession.txt](https://jira.spring.io/secure/attachment/11788/patchMockHttpSession.txt) (_1.03 kB_)","closed","type: enhancement,","spring-projects-issues","2006-07-06T07:29:56Z","2012-06-19T09:37:34Z"
"","7623","org.aopalliance.aop.AspectException throws(with message=null) when modifier to interface(in codes) is absent  [SPR-2937]","**[Peck-Kwan Teo](https://jira.spring.io/secure/ViewProfile.jspa?name=kwan)** opened **[SPR-2937](https://jira.spring.io/browse/SPR-2937?redirect=false)** and commented  An interface was written without modifier: ""Interface A"" instead of for example ""Public Interface A"" Got a messagein debug log : Invoking rollback for transaction on .. due to throwable [null] the important message in stack trace was missing = ""java.lang.IllegalAccessException: Class org.springframework.aop.support.AopUtils can not access a member of class  with modifiers ""Public abstract"" Class: org.springframework.transaction.interceptor.TransactionAspectSupport: protected void doCloseTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) { if (txInfo.hasTransaction()) { if (txInfo.transactionAttribute.rollbackOn(ex)) { if (logger.isDebugEnabled()) { logger.debug(""Invoking rollback for transaction on "" + txInfo.joinpointIdentification() + "" due to throwable ["" + ex.toString() + ""]""); } ........   ---  **Affects:** 1.2.8","closed","type: bug,","spring-projects-issues","2006-12-10T22:14:02Z","2012-06-19T03:50:52Z"
"","7429","Access to DispatcherServlet.multipartResolver [SPR-2741]","**[Pavel Vojtěchovský](https://jira.spring.io/secure/ViewProfile.jspa?name=pvojtechovsky)** opened **[SPR-2741](https://jira.spring.io/browse/SPR-2741?redirect=false)** and commented  I migrate from Spring 1.2.8. to 2.0.0. I have overriden DispatcherServlet.doDispatch and this code need access to DispatcherServlet.multipartResolver.  In Spring 1.2.8 there was RequestContextUtils.getMultipartResolver(request), which I used before. But in Spring 2.0.0 there is no way to access MultipartResolver instance...  It can be of course workarounded e.g. by writing code similar to DispatcherServlet.initMultipartResolver and storing such multipartResolver instance into an visible member variable, but it is not nice (and it expects that multipartResover is singleton).  Request: A) make DispatcherServlet.multipartResolver protected B) implement DispatcherServlet.getMultipartResolver() (at least protected) C) provide again a kind of RequestContextUtils.getMultipartResolver(request)  Thanks!   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-22T23:07:37Z","2019-01-13T22:45:33Z"
"","6982","org.hibernate.type.BlobType fails on Oracle 9i [SPR-2293]","**[Pavel Vojtěchovský](https://jira.spring.io/secure/ViewProfile.jspa?name=pvojtechovsky)** opened **[SPR-2293](https://jira.spring.io/browse/SPR-2293?redirect=false)** and commented  org.hibernate.type.BlobType should delegate to appropriate implementation of org.springframework.jdbc.support.lob.LobHandler. In case of Oracle it is org.springframework.jdbc.support.lob.OracleLobHandler.  Problem can be workarounded by usage of user type which is based on org.springframework.orm.hibernate3.support.AbstractLobType.   ---  **Affects:** 1.2.8","closed","status: declined,","spring-projects-issues","2006-07-12T22:32:00Z","2019-01-12T16:29:03Z"
"","7431","BeanFactoryUtils.beansOfTypeIncludingAncestors(ListableBeanFactory, Class) performance is an order of magnitude slower than it was in rc3 [SPR-2743]","**[Paul Tomsic](https://jira.spring.io/secure/ViewProfile.jspa?name=ptomsic)** opened **[SPR-2743](https://jira.spring.io/browse/SPR-2743?redirect=false)** and commented  I'm troubleshooting some performance issues, and i've noticed that a call to BeanFactoryUtils.beansOfTypeIncludingAncestors(ListableBeanFactory,Class) in RC3 had a calling stack that is about 1/2 the size that it is in 2.0 final release.  A call to this method in RC3 is taking 60ms, whereby in 2.0 final, it's taking 2730ms  There seems to be a ton more checking in the 2.0 final, slowing this down to a nearly unusable speed.  Here's the calling stack beneath beansOfTypeIncludingAncestors() in RC3:  -AbstractApplicationContext.getBeansOfType(Class) -DefaultListableBeanFactory.getBeansOfType(Class) -DefaultListableBeanFactory.getBeansOfType(Class, bool, bool) -DefaultListableBeanFactory.getBeanNamesForType(Class, bool, bool) -AbstractBeanFactory.getMergedBeanDefinition(String, bool) -AbstractBeanFactory.getMergedBeanDefinition(String, BeanDefinition) -HashMap.get(Object) -AbstractBeanDefinition.hashCode() -ObjectUtils.nullSafeHashCode(Object) -ConstructorArgumentValues.hashCode() -AbstractMap.hashCode()  Same unit test, here's the calling stack under beansOfTypeIncludingAncestors() in the 2.0 final release:  -AbstractApplicationContext.getBeansOfType(Class) -DefaultListableBeanFactory.getBeansOfType(Class) -DefaultListableBeanFactory.getBeansOfType(Class, bool, bool) -AbstractBeanFactory.getBean(String) -DefaultListableBeanFactory.getBeanNamesForType(Class, bool, bool) -ClassIsAssignableFrom(Class) -AbstractBeanFactory.getMergedBeanDefinition(String, bool) -AbstractBeanFactory.getMergedBeanDefinition(String, BeanDefinition) -HashMap.get(Object) -RootBeanDefinition.equals(Object) -AbstractBeanDefinition.equals(Object) -AttributeAccessorSupport.equals(Object) -AbstractMap.equals(Object) -ObjectUtils.nullSafeEquals(Object, Object) -String.equals(Object) -ConstructorArgumentValues.equals(Object) -AbstractSequentialList.iterator() -HashMap.get(Object) -HashMap$EntryIterator.next() ConstructorArgumentValues$Values$ValueHolder.access$000(ConstructorArgumentValues$ValueHolder, ConstructorArgumentValues$ValueHolder) -ConstructorArgumentValues$ValueHolder.contentEquals(ConstructorArgumentValues$ValueHolder) -ObjectUtils.nullSafeEquals(Object, Object) -String.equals(Object)   ---  **Affects:** 2.0 final  **Attachments:** - [ConstructorArgValuesTest.java](https://jira.spring.io/secure/attachment/12063/ConstructorArgValuesTest.java) (_2.70 kB_) - [SPR-2743.patch](https://jira.spring.io/secure/attachment/12065/SPR-2743.patch) (_1.03 kB_)  2 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-10-23T05:37:15Z","2019-01-11T21:02:15Z"
"","7588","QuartzJobBean DI fails silently for entries without corresponding setter method [SPR-2900]","**[Paul Sundling](https://jira.spring.io/secure/ViewProfile.jspa?name=sundling)** opened **[SPR-2900](https://jira.spring.io/browse/SPR-2900?redirect=false)** and commented  If a QuartzJobBean does not have the necessary accessors to populate the field, as per the bean definition below, the parameters are not populated without warning.  There should be some kind of  warning that there weren't accessors so that the mistake is obvious.  Bean definition                                                                                                    public class IndexerJob extends QuartzJobBean { private Object myParam1 private Object myParam2     ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-30T11:04:29Z","2006-12-21T10:38:51Z"
"","7843","Source code error in the Step-by-step dtd file name. [SPR-3157]","**[Paul H. Roubekas](https://jira.spring.io/secure/ViewProfile.jspa?name=paulhr)** opened **[SPR-3157](https://jira.spring.io/browse/SPR-3157?redirect=false)** and commented  On the page C:\spring-framework-2.0.2-with-dependencies\spring-framework-2.0.2\docs\MVC-step-by-step\Spring-MVC-step-by-step-Part-1.html  There is a source code listing for a file called ""springapp/war/WEB-INF/springapp-servlet.xml"".  The DTD file name is wrong.  IS:  \  Should be:  \ notice the ""_2_0.dtd"" and the end is wrong.  It should be ""-2.0.dtd""   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-02-13T03:41:40Z","2012-06-19T03:50:53Z"
"","7866","Refactor JstlUtils.exposeLocalizationContext [SPR-3181]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3181](https://jira.spring.io/browse/SPR-3181?redirect=false)** and commented  I have a custom instance of LocalizationContext and I'd like to use JstlUtils.exposeLocalizationContext to set it. However, the method accepts only a MessageSource. Let's refactor out this method:  public static void exposeLocalizationContext(HttpServletRequest request, LocalizationContext jstlContext);  Is this request in time for 2.0.3?   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-16T17:58:32Z","2012-06-18T12:45:09Z"
"","7721","Upgrade the Testing Documentation (chapter 8). [SPR-3035]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3035](https://jira.spring.io/browse/SPR-3035?redirect=false)** and commented  Is it really technically necessary to define set methods on Spring tests? I would find it much easier if Spring could just inject the property for me as such via annotation:  public class MyTest extends AbstractSpringContextTests {      @Inject(name=""bean"")     private MyBean bean;          @Inject(autowire=Autowire.BY_TYPE)     private MyOtherBean bean2;  }  I would change the base class to inspect all fields for this annotation and resolve them as such. Is this possible?   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-13T15:25:09Z","2012-06-19T03:50:31Z"
"","7694","Shorthand simple inner bean creation [SPR-3008]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3008](https://jira.spring.io/browse/SPR-3008?redirect=false)** and commented  For the sake of a shorter configuration with simple beans (no constructor-args or properties), add a new attribute on `@property` and `@constructor-arg` to inline the bean creation.  BEFORE: \ \ \ \ \ \ \  AFTER: \ \ \ \ \   ---  **Affects:** 2.0.1  **Attachments:** - [SimplePropertyNamespaceHandler.java](https://jira.spring.io/secure/attachment/15189/SimplePropertyNamespaceHandler.java) (_3.84 kB_)","closed","type: enhancement,","spring-projects-issues","2007-01-02T16:05:37Z","2019-01-11T16:33:25Z"
"","7680","Enhance config finding in AbstractSingleSpringContextTests [SPR-2994]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-2994](https://jira.spring.io/browse/SPR-2994?redirect=false)** and commented  I prefer a Convention-over-Configuration approach where possible. During my development, I come across two repetitive tasks to code within my Spring unit tests:  1) I specify the classpath location to my config file. However, I always place the config in the same classpath location as the test class. 2) I name my config file according to the test class.  Thus I see two improvements, respectively, to AbstractSpringContextTests.getConfigLocation():  1) Allow a plain path (no root slash) to imply the classpath of the currently executing test. Thus, if org.xyz.MyTest.getConfigLocation() returns ""context.xml"", the file will first be found under ""/org/xyz/MyTest/context.xml"" and then, if failure, attempt as a true plain path (like today).  2) Provide a default implementation for getConfigLocation which returns ""MyTest-applicationContext.xml"". I would go even further and provide a protected method for getConfigLocation to retrieve the default name (so development teams can override to choose their own).    ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-29T05:33:01Z","2012-06-19T03:51:02Z"
"","7677","Markup error (11.4.3. SqlUpdate) in Java Code  [SPR-2991]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-2991](https://jira.spring.io/browse/SPR-2991?redirect=false)** and commented  The Java example wrongly includes markup:      /**      * @param id for the Customer to be updated      * @param rating the new value for credit rating      * @return number of rows updated      */     public int run(int id, int rating) {         Object[] params =             new Object[] {                 new Integer(rating),                 new Integer(id)};         return update(params);     }  http://static.springframework.org/spring/docs/2.0.x/reference/jdbc.html#jdbc-SqlUpdate   ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-12-28T03:19:31Z","2012-06-19T03:50:55Z"
"","7628","NamedParameterJdbcTemplate constructor typo [SPR-2942]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-2942](https://jira.spring.io/browse/SPR-2942?redirect=false)** and commented  Second constructor description mentions wrong class: ""Create a new SimpleJdbcTemplate for the given....""   ---  **Affects:** 2.0.1","closed","type: documentation,","spring-projects-issues","2006-12-12T16:17:23Z","2012-06-19T03:50:20Z"
"","7052","Wrong tool name for VelocityEngineFactory.getResourceLoader [SPR-2363]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-2363](https://jira.spring.io/browse/SPR-2363?redirect=false)** and commented  ""Return the Spring ResourceLoader to use for loading FreeMarker template files."" Looks like a copy+paste oversight.   ---  **Affects:** 1.2.8, 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-27T14:18:42Z","2012-06-19T03:50:06Z"
"","7041","Improve autowiring error messages in case of multiple beans found [SPR-2352]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-2352](https://jira.spring.io/browse/SPR-2352?redirect=false)** and commented  This problem may be in the auto-wiring resolver of the beans package, but I discovered it with AbstractTransactionalDataSourceSpringContextTests.  1) My unit test (subclassed from above) specifies the context location in getConfigLocations() 2) The XML defines a DataSource, a DAO object (ibatis), and a TransactionProxyFactoryBean 3) There is a setter in the test to inject the DAO interface, not the implementation.  I found that the auto-wiring fails when my setter accepts the interface, but not with the implementation. I only have one object defined with the interface (the DAO) in the context, but Spring says it failed to resolve dependencies because there are 2 beans of that interface. This is surely not the case. I know I have only one class of mine defined.   ---  **Affects:** 1.2.8, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-07-26T14:53:09Z","2012-06-19T03:50:13Z"
"","6960","ApplicationContext getApplicationContext() lost public access [SPR-2271]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-2271](https://jira.spring.io/browse/SPR-2271?redirect=false)** and commented  All versions of Spring up to 2.0 RC1 have ApplicationContext getApplicationContext() as public scope. Suddenly it has protected scope in RC2. This breaks backwards compatibility -- and my code -- and there is no explanation for this change. Is there a good reason behind this? It is not at all compatible with 1.x code or < 2.0 RC2.   ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-10T15:06:39Z","2012-06-19T03:52:50Z"
"","6903","Widen scope of WebApplicationContext in Autowiring(Tiles)RequestProcessor [SPR-2213]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-2213](https://jira.spring.io/browse/SPR-2213?redirect=false)** and commented  I do not see a reason why this variable has private access. When I subclass the RP, I'd like to retrieve beans from it during the process() phases, and it is unnecessary that I have to look it up -- it already is set. Please set it to protected or expose it in a protected getter.   ---  **Affects:** 1.2.8, 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-06-28T15:22:43Z","2012-06-19T03:52:34Z"
"","6902","Autowire Autowiring(Tiles)RequestProcessor [SPR-2212]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-2212](https://jira.spring.io/browse/SPR-2212?redirect=false)** and commented  I am not using AspectJ, but I would like for the RequestProcessor to autowire itself with any beans it can find. This prevents me from actually referring to bean names to retrieve them out of the application context. It should be no more difficult than adding a line to the init() method:      public void init(ActionServlet actionServlet, ModuleConfig moduleConfig) throws ServletException {     	super.init(actionServlet, moduleConfig);     	if (actionServlet != null) {     		this.webApplicationContext = initWebApplicationContext(actionServlet, moduleConfig);     		this.autowireMode = initAutowireMode(actionServlet, moduleConfig);     		this.dependencyCheck = initDependencyCheck(actionServlet, moduleConfig);                		this.webApplicationContext.getAutowireCapableBeanFactory().autowireBeanProperties(     			this, this.autowireMode, this.dependencyCheck);     	}     }    ---  **Affects:** 2.0 RC1","closed","in: web,","spring-projects-issues","2006-06-28T14:06:13Z","2019-01-11T19:09:05Z"
"","6890","Typo in TypedStringValue [SPR-2200]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-2200](https://jira.spring.io/browse/SPR-2200?redirect=false)** and commented  Both constructors read: ""Create a new TypedStrignValue for the given String value and target type.""  Correct class name.   ---  **Affects:** 1.2.8, 2.0 RC1","closed","in: core,","spring-projects-issues","2006-06-27T02:19:50Z","2012-06-19T03:52:45Z"
"","7330","UnexpectedRollbackException with nested transactions [SPR-2641]","**[Paul Austin](https://jira.spring.io/secure/ViewProfile.jspa?name=p_d_austin)** opened **[SPR-2641](https://jira.spring.io/browse/SPR-2641?redirect=false)** and commented  I have upgarded to spring 2.0rc4 so that I can use nested transactions within my application and use the rollback only flag to ensure all changes are rolled back. I'm using Hibernate 3 with the OpenSessionInView so that all the transactions are using the same underlying data source. On any page that is a read only page I mark it as rollback only to make sure no data is modified by accident.  Another case for this is where you have an edit page and you update the hibernate objects and it fails some validation, you still want to display the page with the errors for the invalid fields but not save these to the database.  I'm using the TransactionTemplate with the HibernateTransactionManager with all the default settings except failEarlyOnGlobalRollback is set to false. There is one transaction created in a servlet filter that wraps the entire request and another that is created in a struts action so that the action code can set the transaction rollback only if required.  This causes the outer transaction to fail as the AbstractPlatformTransactionManager will fail if the outer transaction is not rollback only and the outer transaction is the ""new"" transaction (outer most).  A hack to avoid this is in the outermost transaction callback to do the following, but this really is a hack.      DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status     if (defStatus.isGlobalRollbackOnly()) {       status     }  What would be nicer is if there was a flag, rollbackOnGlobalRollbackOnly that would allow developers to always rollback on the global rollback only, with a warning about different data sources not rolling back properly etc.  Paul  This may be related to the following issue http://opensource.atlassian.com/projects/spring/browse/SPR-2223   ---  **Affects:** 2.0 RC4","closed","status: declined,","spring-projects-issues","2006-09-26T09:32:48Z","2019-01-12T16:28:38Z"
"","6886","referenceData support should be configurable for POST requests [SPR-2196]","**[Patrick W. McMichael](https://jira.spring.io/secure/ViewProfile.jspa?name=patrickmcmichael)** opened **[SPR-2196](https://jira.spring.io/browse/SPR-2196?redirect=false)** and commented  In straight MVC (no WebFlow), there is a referenceData method that gets called when hitting a SimpleFormController in GET mode.  This is very useful for things like pulldown contents on a search form, etc.  However, this method does not get called in POST mode.  When your success page is different than the search page this presents no problem.  However, if you want the search results to show up in a table below the search form, for example, the onSubmit method would need to do some duplicate calls for that pulldown data, as the form only knows which value in the pulldown was submitted.  We could just have referenceData and onSubmit both delegate to the same helper method, and then onSubmit would manually add the pulldown contents to the returned model.  What would be really nice would to be able to control whether or not referenceData was needed in POST mode.   ---  **Affects:** 1.2.7  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-06-26T02:39:24Z","2012-06-19T09:37:33Z"
"","7213","Autowire byType very broken [SPR-2524]","**[Patrick Lightbody](https://jira.spring.io/secure/ViewProfile.jspa?name=plightbo)** opened **[SPR-2524](https://jira.spring.io/browse/SPR-2524?redirect=false)** and commented  Could be tough to make a unit test out of, but the gist of it is that, when using autowire=byType, I've been seeing that Spring will actually get very confused and do one or all of the following:  - Create an instance of a singleton bean many times (for example - we've seen it create the Quartz bean 7 times, resulting in 70 threads spread across 7 thread pools) - Fail to initialize a bean, such as the iBatis integration bean, but then _not_ report the problem in the logs and instead just continue along without wiring up the SqlClientMap  If I set autowire=no and then do it by hand for each bean, the problem goes away. Or, as I did in my case, I just rolled back to 2.0 M2 and everything was fine.  Rolling back to 2.0 M2 fixed the problem just fine, so there is something definitely up with the release.   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-09-01T02:33:28Z","2012-06-19T03:50:55Z"
"","7441","tag cannot be used in jspf (fragment) compilation units, where no  tag exists, even though it would work. [SPR-2753]","**[Patrick Haren](https://jira.spring.io/secure/ViewProfile.jspa?name=harenp)** opened **[SPR-2753](https://jira.spring.io/browse/SPR-2753?redirect=false)** and commented  The  tag checks to see if it is within a form tag, using TagUtils.assertHasAncestorOfType(this, FormTag.class, ""errors"", ""form""); It looks like this is the only  tag that does this check.  This limits where the tag can be used to only a jsp compilation unit that contains the  tag. Thus, it cannot be used in a jspf (fragment) that would be embedded within another jsp that contains the .  A workaround for now is to define a new tag library, with an alternate errors tag based on a class that derives from org.springframework.web.servlet.tags.form.ErrorsTag and overrides the onWriteTagContent() function. The new version simply does nothing (i.e. doesn't do the form check assert).  This workaround was tested and allows us to use the 'improved'  tag within a jspf.  ---  **Affects:** 2.0 final  **Issue Links:** - #7462 form:errors not allowed in a nested JSP outside the scope of form:form (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2006-10-25T02:57:47Z","2019-01-11T21:01:22Z"
"","7851","Freemarker macro helper: duplicate HTML escape [SPR-3165]","**[Patrick Hancke](https://jira.spring.io/secure/ViewProfile.jspa?name=phancke)** opened **[SPR-3165](https://jira.spring.io/browse/SPR-3165?redirect=false)** and commented  The Freemarker macro below displays a text area but performs a HTML escape of the 'stringStatusValue' variable. Nothing wrong with that, except that the 'bind' macro also does a HTML escape in case the ""defaultHtmlEscape"" context-param is set in the 'web.xml'. This is the case in my application, so I end up with a duplicate HTML escape of the textarea content. As a workaround, I've rewritten the 'formTextarea' macro to prevent the HTML escape.    ${stringStatusValue?html}\                  ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2007-02-14T20:26:13Z","2012-06-19T03:51:06Z"
"","7354","Spring's MBeanProxyFactoryBean should support JMX 1.0 [SPR-2665]","**[pas filip](https://jira.spring.io/secure/ViewProfile.jspa?name=pasfilip)** opened **[SPR-2665](https://jira.spring.io/browse/SPR-2665?redirect=false)** and commented  It seems, to me, that the MBeanProxyFactoryBean isn't useable under JMX 1.0. Problem seems to be that the class MBeanClientInterceptor uses MBeanServerConnection which is only available since jmx 1.2. I've been looking for which version of jmx is supported by spring but only found a reference in the readme.txt saying that jmx 1.0/1.2 is supported. In my spring context I'm using a JndiFactoryBean to lookup the MBeanHome. After that I use the factory-method getMbeanServer to retrieve the mbean server from the MBeanHome. Is it because I'm obtaining a remote mbean server like this that I've got the error of NoClassDefFound for MBeanServerConnection? Is this a bug or not? Couldn't it prove to be worthwhile to be able to generate a Proxy for an mbean registered in an MBeanServer obtained through a jndi lookup?  Or is there another mechanism I'm overlooking.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-10-03T02:07:45Z","2006-10-26T09:54:35Z"
"","7686","ThreadPoolTaskExecutor should be more of a mutable object [SPR-3000]","**[Oran Epelbaum](https://jira.spring.io/secure/ViewProfile.jspa?name=oran)** opened **[SPR-3000](https://jira.spring.io/browse/SPR-3000?redirect=false)** and commented  ThreadPoolTaskExecutor is a nice layer over the cumbersome ThreadPoolExecutor, adding an ability to configure via setters rather than the constructor. Unfortunately this object is nevertheless immutable and cannot be modified once it has been created.  I suggest that a ThreadPoolTaskExecutor, even while already running, should support changing all of its parameters: size of the task queue, max and core no. of threads, keepalive time, handlers, and thread factory.  Currently you can set new values to all these parameters, but nothing happens when you do so. If you then call afterPropertiesSet() or initialize() to trigger a change, a completely new internal executor is started, without touching the old internal executor. The old executor just keeps running until it's done, if it's ever done (maybe we were changing parameters because it was stuck in the first place!). This is a nasty situation, mainly because you lose control over the max number of threads consumed by the old and new executors together, and you are potentially stuck with a lot more running threads than what you meant.  One other workaround I had in mind is simply to drain all the tasks of the old executor into the new one and then shut it down, but you can't do any of that with ThreadPoolTaskExecutor, and for good (encapsulation) reasons. Another option was to simply shut down the ThreadPoolTaskExecutor before modifying it, but this means loss of current pending tasks. So currently I can think of no easy workaround for this.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-31T20:37:29Z","2012-06-19T09:37:36Z"
"","7676","wrong-case description of default protocol string [SPR-2990]","**[Oran Epelbaum](https://jira.spring.io/secure/ViewProfile.jspa?name=oran)** opened **[SPR-2990](https://jira.spring.io/browse/SPR-2990?redirect=false)** and commented  The documentation for the setProtocol() method in JavaMailSender says that the default is ""SMTP"", while in fact it is ""smtp"". If you set this attribute explicitly to ""SMTP"", expecting the behavior to match the default behavior, you actually get a NoSuchProviderException.   ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-12-27T23:11:58Z","2012-06-19T03:51:00Z"
"","7364","Service references in JSF session objects not restored when using persistent sessions [SPR-2675]","**[Oran Epelbaum](https://jira.spring.io/secure/ViewProfile.jspa?name=oran)** opened **[SPR-2675](https://jira.spring.io/browse/SPR-2675?redirect=false)** and commented  I am using JSF session-scoped backing beans, initialized by a WebApplicationContext using DelegatingVariableResolver. This all works great until Tomcat is restarted. When Tomcat is restarted, or the app is re-deployed, Tomcat **restores the session from the hard disk**. This is a feature new to Tomcat 5.5, called ""session persistence"". BUT, for some reason the fields of the backing bean that are initialized with Spring are NOT restored, and remain null. As a result, NullPointerExceptions occur in my application after the restore.  As a workaround, we disable this Tomcat feature by adding the following to conf/context.xml: \ \ \  I think this might be related to #6951 and #7214, but I'm not sure they relate to the same Tomcat version.  ---  From my faces.xml: \ \org.springframework.web.jsf.DelegatingVariableResolver\ \org.apache.myfaces.tomahawk.application.jsp.JspTilesViewHandlerImpl\ \  \ \myManagedBean\ \com.my.MyManagedBean\ \session\ \ \myService\ \#{myService}\ \ \  From my web.xml: \  Note: MyServiceImpl is Serializable.  ---  **Affects:** 2.0 final  **Issue Links:** - #6812 Provide ability to make aop:scoped-proxy prototypes and singletons truely serializable - #9854 Problem when working with RichFaces (JSF) integrated into the spring with javax.faces.STATE_SAVING_METHOD=client.  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-10-04T04:53:39Z","2019-01-13T22:45:51Z"
"","7790","Type conversion failure for complex map type [SPR-3103]","**[Olli Jokinen](https://jira.spring.io/secure/ViewProfile.jspa?name=olli)** opened **[SPR-3103](https://jira.spring.io/browse/SPR-3103?redirect=false)** and commented  Here's the code example:  foo.java: public class Foo { public void setBar(Map test) {} }  applicationContext.xml: \ \ \ \\\\1\\\ \ \ \				 \ \ \ \  \  this causes exception: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.util.LinkedHashMap] to required type [java.util.Map] for property 'conversions'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [java.lang.String] to required type [com.futurice.nsas.service.upload.FieldConversion] for property 'conversions[[1]][0]': no matching editors or conversion strategy found Caused by: java.lang.IllegalArgumentException: Cannot convert value of type [java.lang.String] to required type [Bar] for property 'bar[[1]][0]': no matching editors or conversion strategy found  However, public void setFoo(Map","closed","type: bug,","spring-projects-issues","2007-02-02T00:14:45Z","2012-06-19T03:50:46Z"
"","7205","Bug with  and JPA with Spring 2 RC3: internal creation TransactionAttributeSourceAdvisor leads to NPE [SPR-2516]","**[Oliver-Arne Hammerstein](https://jira.spring.io/secure/ViewProfile.jspa?name=hammerstein)** opened **[SPR-2516](https://jira.spring.io/browse/SPR-2516?redirect=false)** and commented  I transferred my working code from Spring 2.0 RC2 to RC3 and yield problems by using  in conjunction with a LocalContainerEntityManagerFactoryBean. This was the error:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor': Instantiation of bean failed; nested exception is java.lang.NullPointerException Caused by: java.lang.NullPointerException at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.getTransactionAttributeSource(TransactionAttributeSourceAdvisor.java:102) at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.hashCode(TransactionAttributeSourceAdvisor.java:121) at java.lang.Object.toString(Object.java:209) at java.lang.String.valueOf(String.java:2577) at java.lang.StringBuffer.append(StringBuffer.java:220) at org.springframework.aop.support.AbstractPointcutAdvisor.toString(AbstractPointcutAdvisor.java:71) at java.lang.String.valueOf(String.java:2577) at java.lang.StringBuffer.append(StringBuffer.java:220) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:383) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:303) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:68) at de.oc.test.AppContextTest.testname(AppContextTest.java:23) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7102 NPE with TransactionAttributeSourceAdvisor.TransactionAttributeSourcePointcut when debug enabled (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2006-08-31T02:27:53Z","2019-01-12T16:52:03Z"
"","7204","generateDdl() on TopLinkJpaVendorAdapter does not create Tables  [SPR-2515]","**[Oliver-Arne Hammerstein](https://jira.spring.io/secure/ViewProfile.jspa?name=hammerstein)** opened **[SPR-2515](https://jira.spring.io/browse/SPR-2515?redirect=false)** and commented  does not create tables with Spring 2.0 RC2  configuration: \  implementation-detail from TopLinkJpaVendorAdapter:  if (isGenerateDdl()) { jpaProperties.setProperty(EntityManagerFactoryProvider.DDL_GENERATION, EntityManagerFactoryProvider.DROP_AND_CREATE); jpaProperties.setProperty(EntityManagerFactoryProvider.DDL_GENERATION_MODE,					                  EntityManagerFactoryProvider.DDL_DATABASE_GENERATION); }    ---  **Affects:** 2.0 RC2","closed","in: data,","spring-projects-issues","2006-08-31T02:22:09Z","2019-01-11T19:17:44Z"
"","7833","form:form tag doesn't encode xml entities in action attribute [SPR-3147]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-3147](https://jira.spring.io/browse/SPR-3147?redirect=false)** and commented  I have a simple  tag in my form (without any attributes defined). Some controller redirects to that form with several GET-parameters. The form:form tag outputs a html form tag with the correct url/querystring supplied. But the & signs in the querystring aren't transformed to &  ---  **Affects:** 2.0.1  **Issue Links:** - #8362 when redirecting using RedirectView, form tag reencodes the query string of the redirected page.  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2007-02-11T20:49:05Z","2019-01-11T17:35:34Z"
"","7715","ClassNotFoundException in CodebaseAwareObjectInputStream.java:99 [SPR-3029]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-3029](https://jira.spring.io/browse/SPR-3029?redirect=false)** and commented  Since updating from 2.0.1 to 2.0.2 (nothing else on the classpath has changed), I sometimes get this exception:  org.springframework.remoting.RemoteAccessException: Cannot deserialize result from HTTP invoker remote service http://localhost:8080/XXX-httpinvoker; nested exception is java.lang.ClassNotFoundException: [Ljava.lang.String; Caused by: java.lang.ClassNotFoundException: [Ljava.lang.String; at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1358) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1204) at org.springframework.remoting.rmi.CodebaseAwareObjectInputStream.resolveClass(CodebaseAwareObjectInputStream.java:99) at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1575) at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1624) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1323) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1945) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1869) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351) at java.util.HashSet.readObject(HashSet.java:291) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1846) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1945) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1869) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351) at org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor.doReadRemoteInvocationResult(AbstractHttpInvokerRequestExecutor.java:291) at org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor.readRemoteInvocationResult(AbstractHttpInvokerRequestExecutor.java:240) at org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor.doExecuteRequest(SimpleHttpInvokerRequestExecutor.java:65) at org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor.executeRequest(AbstractHttpInvokerRequestExecutor.java:134) at org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor.executeRequest(HttpInvokerClientInterceptor.java:162) at org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor.invoke(HttpInvokerClientInterceptor.java:139) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:176) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:210) at $Proxy77.[AREMOTEMETHOD](Unknown Source) at [MyController].formBackingObject([MyController].java:96) at org.springframework.web.servlet.mvc.AbstractFormController.getErrorsForNewForm(AbstractFormController.java:343) at org.springframework.web.servlet.mvc.AbstractFormController.showNewForm(AbstractFormController.java:323) at org.springframework.web.servlet.mvc.AbstractFormController.handleRequestInternal(AbstractFormController.java:263) at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:45) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:820) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:755) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:350) ...   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-01-11T03:34:11Z","2012-06-19T03:50:42Z"
"","7708","Show an example for a custom @Required annotation class [SPR-3022]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-3022](https://jira.spring.io/browse/SPR-3022?redirect=false)** and commented  It took me some time to figure out, that a custom `@Required` annotation needs `@Retention` and `@Target` defined to work. There should be an example in the docs -  package your.company.package.Mandatory;  import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  `@Retention`(RetentionPolicy.RUNTIME) `@Target`(ElementType.METHOD) public `@interface` Mandatory { // nothing }   --- No further details from [SPR-3022](https://jira.spring.io/browse/SPR-3022?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-01-08T19:29:28Z","2012-06-19T03:50:13Z"
"","7507","xml escaping [SPR-2820]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-2820](https://jira.spring.io/browse/SPR-2820?redirect=false)** and commented  In a pure UTF-8 environment, there is no need for encoding non-ascii like german umlaut which is done if defaultHtmlEscape (or htmlEscape for spring tags) is enabled. It would be nice to have defaultXmlEscape (and xmlEscape for spring tags) which only escapes the five basic xml entities (gt, lt, quot, amp and apos) as it is done by org.apache.commons.lang.StringEscapeUtils.escapeXml for example.  ---  **Affects:** 2.0 final  **Issue Links:** - #7891 HTML escaping should be the default for form tags (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2006-11-09T18:38:45Z","2019-01-11T21:31:40Z"
"","7701","Do not log SQL Warnings at warn level by default [SPR-3015]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-3015](https://jira.spring.io/browse/SPR-3015?redirect=false)** and commented  Hello,  as resilt of resolution of #7512 a lot of SQL-warnings may be logged with WARNING level overflooding the logs. By nature, SQL Warning are mostly not true warnings (i.e. somthing that hints erroneous/abnormal conditions), rather hust additional info,  It would be very desirable if it would be possible to configurable logging level for SQL Warinings or  (as configuring of  warning level may be problematic due to limitations of used  commons logging package) , at least, completely disable their logging (but not other warning messages from JDBC template!).  Regards, Oleksandr  ---  **Affects:** 2.0.1, 1.2.9  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-01-04T22:22:05Z","2019-01-11T16:32:31Z"
"","7663","Subclass DataIntegrityViolationException to represent main constraint types and translate SQL exceptons into appropriate subclass [SPR-2977]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2977](https://jira.spring.io/browse/SPR-2977?redirect=false)** and commented  To the moment any SQL constraint violation exception is translated into generic DataIntegrityViolationException. It would be nice to have special subclasses for different constraint types - uniqueness violation, referential integrity violation, check  violation (check constraint imposes restriction on fields of the same record). This conception is mostly rlational, but, first of all, most of databases in use are relational, and, secondly, at least conception of uniqueness and check are applicable to another database types. Referential integrity often may be interpreted in some way for non-relational databases as well.  Unlike inclusion of constraint name, which is almost impossible for techical reasons (different DBMS represent them in different ways), inclusion of constraint type shall be more or less straitforward, as virtually all DBMS report them by different values of sql error code/sql state. These values are more or less standartized, while there are several flavours.  There is a good reason to implement this functionality - constraint violation errors ususally  are not fatal, application may recover (alone or with user interaction) . Direct analyse of SQL error code by application will make application too dependent on specific DB, so this translation will be of great use.  Regards, Oleksandr  ---  **Affects:** 2.0.1  **Issue Links:** - #9798 Add DuplicateKeyException to DAO exception hierachy  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-12-23T06:13:52Z","2019-01-11T21:27:13Z"
"","7636","Improper String treatment by StatementCreatorUtils.setParameterValue [SPR-2950]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2950](https://jira.spring.io/browse/SPR-2950?redirect=false)** and commented  Hello,  Folowing call for getJdbcTemplate().query(sql,new Object[]{""001""},new RowCallbackHandler(){...}); may result in improper data. The same is true for getJdbcTemplate().update(""select mumu from SOME_TABLE where umum=?"",new Object[]{""001""}); but in latter case data in DB may be corrupted so this issue is rather critical.  The problem is caused by following code in StatementCreatorUtils.setParameterValue (that presumable has appeared there as result of SPR--1150 resolution, http://opensource.atlassian.com/projects/spring/browse/SPR-1150), line 186 in 2.0.1.  else if (sqlType == SqlTypeValue.TYPE_UNKNOWN) { //-----------------> Offendig check !!!! if (inValue instanceof StringBuffer || inValue instanceof StringWriter) { ps.setString(paramIndex, inValue.toString()); } else if ((inValue instanceof java.util.Date) && !(inValue instanceof java.sql.Date || inValue instanceof java.sql.Time || inValue instanceof java.sql.Timestamp)) { ps.setTimestamp(paramIndex, new java.sql.Timestamp(((java.util.Date) inValue).getTime())); } else if (inValue instanceof Calendar) { Calendar cal = (Calendar) inValue; ps.setTimestamp(paramIndex, new java.sql.Timestamp(cal.getTime().getTime())); } else { // Fall back to generic setObject call without SQL type specified. ps.setObject(paramIndex, inValue); } }  As it can be seen from this code, StringBuffer gets special treatment and is recognized as string, but String itself  (along with StringBuider)- not! As result databases treat this as parameter as integer if it is string representation of integer, that may render invalid results, especially  if string has leading zeros. Do not know, if this behavior is database dependent, but at least Oracle exhibits it.  In my opinion above-marked check should look as follows      if (inValue instanceof CharcterSequence || inValue instanceof StringWriter) {  Regards, Oleksandr    ---  **Affects:** 1.2.8, 2.0.1  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-12-14T05:23:34Z","2012-06-19T03:50:05Z"
"","7609","Small documentation bugs (Spring Reference [SPR-2923]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2923](https://jira.spring.io/browse/SPR-2923?redirect=false)** and commented  1. Property editor for Pattern is not mentioned in Spring Reference in the ""Built-In property editors"" chapter (5.4.2) 2. Spring Reference from 2.0.1. distribution still has  2.0 on the cover page (PDF-only, BTW, this pdf does not    mention 2.0.1 anywhere)    ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-12-06T20:25:42Z","2012-06-19T03:50:41Z"
"","7535","Bug in NamedParameterUtils - tab characters are not treated as delimiters [SPR-2848]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2848](https://jira.spring.io/browse/SPR-2848?redirect=false)** and commented  As you can see, there are no special treatemnt for ""tab"" characters in code below; private static boolean parameterNameContinues(char[] statement, int pos) { return (statement[pos] != ' ' && statement[pos] != ',' && statement[pos] != ')' && statement[pos] != '""' && statement[pos] != '\'' && statement[pos] != '|' && statement[pos] != ';' && statement[pos] != '\n' && statement[pos] != '\r'); }  Seems to be wrong . As for me, usage of Character.isWhitespace(char ch) is preffred way for such checks.  ---  **Affects:** 2.0 final  **Issue Links:** - #7856 Variable assignement operator := in complex Oracle SQL is treated like a named parameter.","closed","type: bug,","spring-projects-issues","2006-11-18T00:20:02Z","2019-01-11T21:36:52Z"
"","7489","Commit does commit, rollback does not rollback with JDBC template [SPR-2802]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2802](https://jira.spring.io/browse/SPR-2802?redirect=false)** and commented  Hello,  I have fololwing configuration                                        \ \ \ \                                                       and following method in the ConfigPersisterJdbcImpl      public void saveConfig(String user, MonitorConfig config) {         TransactionStatus tx= fTxManager.getTransaction(saveTx);         try {             System.out.println(""Con1: ""+DataSourceUtils.getTargetConnection(DataSourceUtils.getConnection(fDao.getDataSource())));             fDao.getJdbcTemplate().update(""update MONITOR_CFG_HEADER set panelWidth=301"");             System.out.println(""Con2: ""+DataSourceUtils.getTargetConnection(DataSourceUtils.getConnection(fDao.getDataSource())));             fTxManager.commit(tx);             System.out.println(""Con3: ""+DataSourceUtils.getTargetConnection(DataSourceUtils.getConnection(fDao.getDataSource())));             System.out.println(""ConfigPersister.save: done ""+tx.isCompleted()+"" : ""+tx.isRollbackOnly());         } catch (RuntimeException e) {             System.out.println(""Error in ConfigPersister.save: ""+e.getMessage());             fTxManager.rollback(tx);             throw e;         }             }  After execution of this method table MONITOR_CFG_HEADER is still locked, which clearly shows that commit or rollback have not been executed.  If method is replaced with direct operation on JDBC connection as below, commit performs as it should and locks are released. Just for information - another implementation of pooled connction (c3p0) behaves exectly the same.      public void saveConfig(String user, MonitorConfig config) {         TransactionStatus tx= fTxManager.getTransaction(saveTx);         Map updateParams= new HashMap();         updateParams.put(GRID_WIDTH,config.getGridWidth());         updateParams.put(GRID_HEIGHT,config.getGridHeight());         updateParams.put(PANEL_WIDTH,config.getPanelWidth());         updateParams.put(PANEL_HEIGHT,config.getPanelHeight());         updateParams.put(MONITOR_USER,user);         try {             System.out.println(""Con1: ""+DataSourceUtils.getTargetConnection(DataSourceUtils.getConnection(fDao.getDataSource())));             System.out.println(""Con2: ""+DataSourceUtils.getTargetConnection(DataSourceUtils.getConnection(fDao.getDataSource())));             Connection con= DataSourceUtils.getTargetConnection(DataSourceUtils.getConnection(fDao.getDataSource()));             try {                 con.createStatement().executeUpdate(""update MONITOR_CFG_HEADER set panelWidth=301"");                 con.commit();             } catch (SQLException e) {                 e.printStackTrace();             }             System.out.println(""Con3: ""+DataSourceUtils.getTargetConnection(DataSourceUtils.getConnection(fDao.getDataSource())));             fTxManager.commit(tx);             System.out.println(""Con4: ""+DataSourceUtils.getTargetConnection(DataSourceUtils.getConnection(fDao.getDataSource())));             System.out.println(""ConfigPersister.save: done ""+tx.isCompleted()+"" : ""+tx.isRollbackOnly());         } catch (RuntimeException e) {             System.out.println(""Error in ConfigPersister.save: ""+e.getMessage());             fTxManager.rollback(tx);             throw e;         }             }    ---  **Affects:** 2.0 RC3, 2.0 RC4, 2.0 final","closed","in: data,","spring-projects-issues","2006-11-05T09:07:00Z","2019-01-11T21:32:42Z"
"","7406","Broken support declarative transaction support for non-public methods (protected and default-scope) with both AspectJ LTW and Spring AOP [SPR-2718]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2718](https://jira.spring.io/browse/SPR-2718?redirect=false)** and commented  Default-scoped and protected methods annotated as `@Transactional` are properly recognized by aspect but call to  createTransactionIfNecessary(method, txObject.getClass()) from AbstractTransaction aspect returns unusable TranactionInfo object - both transactionAttribute and transactionStatus are null.  I would attach a small test program that illustrates it.  In RC3 it has worked (after small tweaking of pointcut in AnnotationTransactionAspect to allow non-public methods).   ---  **Affects:** 2.0 final  **Attachments:** - [declarativeTransactionTests.zip](https://jira.spring.io/secure/attachment/12032/declarativeTransactionTests.zip) (_4.68 kB_)","closed","in: core,","spring-projects-issues","2006-10-16T07:41:36Z","2012-06-19T03:50:46Z"
"","7401","CLONE -CanNotFindClassException trying to create bean from nested static public class [SPR-2713]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2713](https://jira.spring.io/browse/SPR-2713?redirect=false)** and commented  I have tried to create bean from nested static public class BooleanFeature of public class: BooleanFeatureStateImpl.  \ \ \ \ \PLACE\ \FTR_LOCK\ \PLACE\ \ \ \  With following result: junit.framework.AssertionFailedError: Exception in constructor: testOccupyNonExistingAddress (java.lang.ExceptionInInitializerError at de.ntec.lms.TopologyTest.\(TopologyTest.java:18) at de.ntec.lms.impl.topology.PlaceFinderTest.\(PlaceFinderTest.java:42) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:494) at junit.framework.TestSuite.createTest(TestSuite.java:131) at junit.framework.TestSuite.addTestMethod(TestSuite.java:114) at junit.framework.TestSuite.\(TestSuite.java:75) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestLoader.getTest(JUnit3TestLoader.java:102) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestLoader.loadTests(JUnit3TestLoader.java:59) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:445) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature] for bean with name 'de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature' defined in class path resource [context.xml]; nested exception is java.lang.ClassNotFoundException: de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:915) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:165) at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:687) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:397) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:330) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:68) at de.ntec.lms.TestContext.\(TestContext.java:24) ... 15 more Caused by: java.lang.ClassNotFoundException: de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature at java.net.URLClassLoader$1.run(URLClassLoader.java:200) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:188) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.springframework.util.ClassUtils.forName(ClassUtils.java:177) at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:313) at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:912) ... 23 more ) at junit.framework.Assert.fail(Assert.java:47) at junit.framework.TestSuite$1.runTest(TestSuite.java:263) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  If I write (for test purposes ) a simlple wrapper around mentioned class  package de.ntec.lms.feature;  import java.util.Properties;  import de.ntec.common.exception.MissingArgumentException; import de.ntec.common.util.SmartPropertiesReader; import de.ntec.lms.DuplicateFeatureException;  public class BFC { de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature ftr; public BFC(String id) throws DuplicateFeatureException { ftr= new de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature(id); } public void setConfiguration(Properties cfg) { if (cfg==null) throw new MissingArgumentException(""cfg""); ftr.setConfiguration(new SmartPropertiesReader("""",cfg)); } }  and try to create a bean                                                      PLACE                 FTR_LOCK                 PLACE                             it runs just  fine.  Regards, Oleksandr Alesinskyy    --- No further details from [SPR-2713](https://jira.spring.io/browse/SPR-2713?redirect=false)","closed","in: core,","spring-projects-issues","2006-10-14T21:35:43Z","2019-01-11T19:37:29Z"
"","7400","CanNotFindClassException trying to create bean from nested static public class [SPR-2712]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2712](https://jira.spring.io/browse/SPR-2712?redirect=false)** and commented  I have tried to create bean from nested static public class BooleanFeature of public class: BooleanFeatureStateImpl.  \ \ \ \ \PLACE\ \FTR_LOCK\ \PLACE\ \ \ \  With following result: junit.framework.AssertionFailedError: Exception in constructor: testOccupyNonExistingAddress (java.lang.ExceptionInInitializerError at de.ntec.lms.TopologyTest.\(TopologyTest.java:18) at de.ntec.lms.impl.topology.PlaceFinderTest.\(PlaceFinderTest.java:42) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:494) at junit.framework.TestSuite.createTest(TestSuite.java:131) at junit.framework.TestSuite.addTestMethod(TestSuite.java:114) at junit.framework.TestSuite.\(TestSuite.java:75) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestLoader.getTest(JUnit3TestLoader.java:102) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestLoader.loadTests(JUnit3TestLoader.java:59) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:445) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature] for bean with name 'de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature' defined in class path resource [context.xml]; nested exception is java.lang.ClassNotFoundException: de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:915) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:165) at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:687) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:397) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:330) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:68) at de.ntec.lms.TestContext.\(TestContext.java:24) ... 15 more Caused by: java.lang.ClassNotFoundException: de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature at java.net.URLClassLoader$1.run(URLClassLoader.java:200) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:188) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.springframework.util.ClassUtils.forName(ClassUtils.java:177) at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:313) at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:912) ... 23 more ) at junit.framework.Assert.fail(Assert.java:47) at junit.framework.TestSuite$1.runTest(TestSuite.java:263) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  If I write (for test purposes ) a simlple wrapper around mentioned class  package de.ntec.lms.feature;  import java.util.Properties;  import de.ntec.common.exception.MissingArgumentException; import de.ntec.common.util.SmartPropertiesReader; import de.ntec.lms.DuplicateFeatureException;  public class BFC { de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature ftr; public BFC(String id) throws DuplicateFeatureException { ftr= new de.ntec.lms.impl.feature.BooleanFeatureStateImpl.BooleanFeature(id); } public void setConfiguration(Properties cfg) { if (cfg==null) throw new MissingArgumentException(""cfg""); ftr.setConfiguration(new SmartPropertiesReader("""",cfg)); } }  and try to create a bean                                                      PLACE                 FTR_LOCK                 PLACE                             it runs just  fine.  Regards, Oleksandr Alesinskyy    --- No further details from [SPR-2712](https://jira.spring.io/browse/SPR-2712?redirect=false)","closed","in: core,","spring-projects-issues","2006-10-14T10:38:24Z","2019-01-12T16:40:43Z"
"","7211","Semantics affected - , proxy-target-class and @Transactional on interface [SPR-2522]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2522](https://jira.spring.io/browse/SPR-2522?redirect=false)** and commented  There is a following problem - `@Transactional` applied to interface (or its method) behaves differently depending on value of proxy-target-class attribute of  tag, namely:  1. If  proxy-target-class is false annotation on interface is granted and all behaves as expected  2. if proxy-target-class is true annotation on interface is ignored (unless duplicated in class itself)  As far as I understand it should affect not `@Transactional` only, but the whole Spring AOP, e.g.  tag.  For me it is hard to say if it can be helped, but at least it shall be documented. Chapter 6.6. of Reference Guide (pages 108 and 109 in PDF) lists some issues with this property (for  tag) but not this one, which IMHO is the most important of them.  I have to suggestions  1. Clearly document this behavior in separate subchapter and make direct reference to this piece of documentation from all affected tags.  2. Extend syntax for  and other affected ""global"" tags (if any) to allow filtering of classes affected by this property.  is already able for such filtering. Another (simpler) alternative - provide in documentation an evident sample of  based configuration that is eqvivalent to  tag (as far as I understand it should exist).  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7267 Spring does not inherit `@Transactional` correctly when  (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2006-08-31T18:38:20Z","2019-01-13T08:53:51Z"
"","7210","@Transactional on interface and AspectJ LTW - strange behavior [SPR-2521]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2521](https://jira.spring.io/browse/SPR-2521?redirect=false)** and commented  Reference Guide states in chapter 9.5.6 (page 164 in PDF) ""Note that if annotating interface members (as opposed to methods implementing the interface), the interface itself should also be annotated as `@Transactional`.""  The problem is that annotation does not work regardless of is interface as whole is annotated or not as soon as it not annotated directly in class that implements interface.  I would say that behavior isnormal and documentation buggy as Sun Javadoc for meta-annotation ""Inherited"" clearly states: ""Note also that this meta-annotation only causes annotations to be inherited from superclasses; annotations on implemented interfaces have no effect. ""  But there is one issue - log from Aspectj (   \ ) shows that method inherited from interface is properly weaved (has the same join poins as similar method declared in class), but transaction anyway is not created,  commented xcerpt from log follows, test programm and log are attached:  ##### Method (getTransaction()) declared and annotated in class  INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:32) advised by before advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:60) INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:32) advised by afterThrowing advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:71) INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:32) advised by afterReturning advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:81) INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransaction())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:32) advised by after advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:86)  ##### Method (getTransactionI()) declared and annotated in interface  INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:37) advised by before advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:60) INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:37) advised by afterThrowing advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:71) INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:37) advised by afterReturning advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:81) INFO - [AspectJ] Join point 'method-execution(java.lang.Object de.ntec.feasibility.configurable.TestAspects.getTransactionI())' in Type 'de.ntec.feasibility.configurable.TestAspects' (TestAspects.java:37) advised by after advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:86) ................  ###### From getTransaction method  INFO - ***** newTestAspects returned transaction: org.springframework.transaction.support.DefaultTransactionStatus@1c4ff2c .............  ###### From getTransactionI method  org.springframework.transaction.IllegalTransactionStateException: Transaction propagation 'mandatory' but no existing transaction found at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:306) at de.ntec.feasibility.configurable.TestAspects.doGetTransaction(TestAspects.java:44) at de.ntec.feasibility.configurable.TestAspects.getTransactionI(TestAspects.java:37) at de.ntec.feasibility.configurable.Main.doTest(Main.java:41) at de.ntec.feasibility.configurable.Main.main(Main.java:25) INFO - ***** newTestAspects returned transaction from interface: null  So I'm not sure what is a problem - documentation, aspect implementatiion or AspectJ.  Definitely, there is seemingly easy workaround - to annotate each class that implements interface, but IMHO, transactional behavior is not implementation detail (regardless of opinion of AnnotationTransactionAspect developers) but very importan part of method business contract, so problem seems to be serious.    ---  **Affects:** 2.0 RC3  **Attachments:** - [aop.xml](https://jira.spring.io/secure/attachment/11922/aop.xml) (_322 bytes_) - [context1.xml](https://jira.spring.io/secure/attachment/11921/context1.xml) (_2.08 kB_) - [Main.java](https://jira.spring.io/secure/attachment/11923/Main.java) (_1.82 kB_) - [TestAspects.java](https://jira.spring.io/secure/attachment/11924/TestAspects.java) (_1.77 kB_) - [TestAspectsIntf.java](https://jira.spring.io/secure/attachment/11925/TestAspectsIntf.java) (_286 bytes_)","closed","in: core,","spring-projects-issues","2006-08-31T09:42:05Z","2019-01-11T19:16:40Z"
"","7203","@Transactional - inconsistent  [SPR-2514]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2514](https://jira.spring.io/browse/SPR-2514?redirect=false)** and commented  `@Transactional` behavior differs a lot when it is used with  and with AspectJ  1. In latter case this annotation affects only public methods, even if protected or package-scope method is directly annotated it does not become transactional  2. In former case annotation affects all package-scoped, protected and public methods of the class if applied on class level, and affects any package-scoped, protected or public method to which it is applied.  It would be better if behavior will be as consistent as possible and I see no reasons why it can not be done so - it rather minor change in pointcut definition in the AnnotationTransactionAspect.   ---  **Affects:** 2.0 RC3  **Attachments:** - [AnnotationTransactionAspect.aj](https://jira.spring.io/secure/attachment/11927/AnnotationTransactionAspect.aj) (_2.41 kB_)","closed","type: enhancement,","spring-projects-issues","2006-08-31T02:11:15Z","2012-06-19T03:50:30Z"
"","7202","Documentation inconsistency: no javadoc for AspectJ aspects [SPR-2513]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2513](https://jira.spring.io/browse/SPR-2513?redirect=false)** and commented  Chapter 6.8.2 (page 112 in PDF) of Reference Guide refers to Javadocs for AbstractBeanConfigurerAspect and AbstractTransactionAspect, but these Javadocs are absent from distribution (as well as Javadocs for concrete aspects - AnnotationBeanConfigurerAspect and AnnotationTransactionAspect).   ---  **Affects:** 2.0 RC3","closed","status: declined,","spring-projects-issues","2006-08-31T00:12:00Z","2007-10-09T04:34:52Z"
"","7193","Problems with @Transactional attribute processing if mix of Spring-managed beans and load-time weaved object exists [SPR-2504]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2504](https://jira.spring.io/browse/SPR-2504?redirect=false)*** and commented  I have met subtle, but unpleasant bug (or rather bug family) in the transaction processing under following conditions:  I have a class annotated by `@Configurable` with one of methods annotated by `@Transactional` (import ommited for brevity).  `@Configurable` public class TestAnnotations { PlatformTransactionManager fManager; public void setTransactionManager(PlatformTransactionManager manager) { fManager= manager; } `@Transactional`(propagation = Propagation.REQUIRED) public Object getTransaction() { System.out.println(""Transaction activity ""+ TransactionSynchronizationManager.isActualTransactionActive()); return fManager.getTransaction( new DefaultTransactionAttribute( TransactionDefinition.PROPAGATION_MANDATORY )); }; }  Objects of this class are not Spring beans but are created by ""new"". AspectJ load time weaving is enabled and following aop.xml is present  \ \ \ \ \ \ Context.xml is as follows \     \                                     \  (note that  is commented out, but if comments are removed, result is the same).  Java (1.5.0_08) is started with -javaagent:aspectjweaver.jar (latter resides in current directory). Weaving take place ""INFO - [AspectJ] weaving 'de/ntec/feasibility/configurable/Configurabl'""  Call  TransactionSynchronizationManager.isActualTransactionActive());  returns ""true"", but  fManager.getTransaction(new DefaultTransactionAttribute(TransactionDefinition.PROPAGATION_MANDATORY));  fails with exception org.springframework.transaction.IllegalTransactionStateException: Transaction propagation 'mandatory' but no existing transaction found at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:306) at de.ntec.feasibility.configurable.TestAnnotations.getTransaction(Configurabl.java:29) at de.ntec.feasibility.configurable.Main.main(Main.java:22)  So TransactionSynchronizationManager reports that transaction exists but TransactionManager is unable to found it - clear contradiction.  To finis a picture main method initializes transaction aspect in the following way      AnnotationTransactionAspect.aspectOf().setTransactionManager( (PlatformTransactionManager)(fContext.getBean(""txManager"")));  If I try to create as Sring-managed bean some object of a another class that has ""`@Transactional`"" annotation on one of its methods it fails as well (in different manner depending on presence of , presence of this class in ""include"" clause of aop.xml and even is this bean singleton or not.  I was unable to find combination that works in presence of load-time weaving (even if wweaved classes has only `@Configurable`)   ---  **Affects:** 2.0 RC3  **Attachments:** - [SPR-2504.zip](https://jira.spring.io/secure/attachment/11918/SPR-2504.zip) (_13.58 kB_)","closed","in: core,","spring-projects-issues","2006-08-29T09:18:02Z","2019-01-13T08:53:55Z"
"","7192","Change of logging level to debug causes bean creation failure in presence of  [SPR-2503]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2503](https://jira.spring.io/browse/SPR-2503?redirect=false)** and commented  I have following context.xml  \    >  > \ >  > \ class=""de.ntec.lms.impl.topology.TopologyAddressFactoryBuilder""> > \ > \ > \ factory-bean=""topologyAddressFactoryBuilder"" > factory-method=""create"" > /> >  > \ > \ >      >> \ >> \ >> \ >> \ >  > \ > \ > \ > \ > \ > \de/ntec/lms/impl/topology/Company.hbm.xml\ > \de/ntec/lms/impl/topology/Site.hbm.xml\ > \de/ntec/lms/impl/topology/Location.hbm.xml\ > \de/ntec/lms/impl/topology/Rack.hbm.xml\ > \de/ntec/lms/impl/topology/Cell.hbm.xml\ > \de/ntec/lms/impl/topology/Place.hbm.xml\ > \ > \ > \ > \ > \org.hibernate.dialect.DerbyDialect\ > \ > \ > \ > \ > \ > \ >  > \ > \ class=""de.ntec.lms.impl.topology.PlaceDao"" init-method=""init""> > \ > \ > \ > \ class=""de.ntec.lms.impl.topology.CellDao"" init-method=""init""> > \ > \ > \ > \ > \ class=""de.ntec.lms.impl.topology.RackDao"" init-method=""init""> > \ > \ > \ > \ > \ class=""de.ntec.lms.impl.topology.LocationDao"" init-method=""init""> > \ > \ > \ > \ > \ class=""de.ntec.lms.impl.topology.SiteDao"" init-method=""init""> > \ > \ > \ > \ > \ class=""de.ntec.lms.impl.topology.CompanyDao"" init-method=""init""> > \ > \ > \ > \ > \ class=""de.ntec.lms.impl.topology.TopologyServiceImpl"" init-method=""init""> > \ > \ > \  \  and following log4j configuration  \ \   \ \  \ \ \ \ \ \ \ \ \ \ \ \  I start a bunch of unit tests and with this configuration all runs smoothly. As soon as change level value in ""org.springframework"" logger to ""debug"" run immediately fails with exception (see at the and of the post). Interesting thing is that if context xml does not contain  tag log level does not affect behavior (even in presence of XML configuration for transactional AOP, e.g. \ \ \ \           	     	     	     	     		     			PROPAGATION_REQUIRED     		     	     	  )  junit.framework.AssertionFailedError: Exception in constructor: testDummy (java.lang.ExceptionInInitializerError at de.ntec.lms.TopologyTest.\(TopologyTest.java:18) at de.ntec.lms.impl.topology.PlacePerformanceTest.\(PlacePerformanceTest.java:15) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:494) at junit.framework.TestSuite.createTest(TestSuite.java:131) at junit.framework.TestSuite.addTestMethod(TestSuite.java:114) at junit.framework.TestSuite.\(TestSuite.java:75) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestLoader.getTest(JUnit3TestLoader.java:102) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestLoader.loadTests(JUnit3TestLoader.java:59) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:445) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor': Instantiation of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:432) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:303) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:68) at de.ntec.lms.TestContext.\(TestContext.java:23) ... 15 more Caused by: java.lang.NullPointerException at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.getTransactionAttributeSource(TransactionAttributeSourceAdvisor.java:102) at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.hashCode(TransactionAttributeSourceAdvisor.java:121) at java.lang.Object.toString(Object.java:209) at java.lang.String.valueOf(String.java:2577) at java.lang.StringBuffer.append(StringBuffer.java:220) at org.springframework.aop.support.AbstractPointcutAdvisor.toString(AbstractPointcutAdvisor.java:71) at java.lang.String.valueOf(String.java:2577) at java.lang.StringBuffer.append(StringBuffer.java:220) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:383) ... 25 more ) at junit.framework.Assert.fail(Assert.java:47) at junit.framework.TestSuite$1.runTest(TestSuite.java:263) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7102 NPE with TransactionAttributeSourceAdvisor.TransactionAttributeSourcePointcut when debug enabled (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2006-08-28T23:57:18Z","2019-01-12T16:52:04Z"
"","7191","Documentation bug for  snippet [SPR-2502]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2502](https://jira.spring.io/browse/SPR-2502?redirect=false)** and commented  Code snipppet that illustrates  tag (reference guide, 9.5.4, page 159 in PDF) has a bug -  tag does not include transaction-manager attribute, which assume ""transactionManager"" name for transaction manager bean, but it is named ""txManager"".  BTW, documentation for tx tags is very scattered in incomplete, it is nopt clear from it which attributes which tag can have, e.g. for ""annotation-driven"" tag possibility to specify ""transaction-manager"" attribute is buried inside quite long code snippet on page 162 (PDF), 9.5.4.1 and default value for this attribute is not specified at all.  Definitely, it may be digged out of XML-schema, but it would be much more fair not write ""These tags are comprehensively covered in the chapter entitled Chapter 9, Transaction management."" (as coverage is not by no means comprehensive""), but write something like ""For syntax look into the appropriate xsd (dist\resources\spring-tx.xsd) in Spring distribution"", for tag meaning iexplanation look into Chapter 9.   ---  **Affects:** 2.0 RC3  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2006-08-28T22:50:08Z","2012-06-19T03:50:47Z"
"","7181","AspectJ load-time weaving in a Spring application context [SPR-2492]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2492](https://jira.spring.io/browse/SPR-2492?redirect=false)** and commented  It is not clear from documentation how (iof ever possible) to configure TomcatInstrumentableClassLoader to use AspectJ load-time weaver. Definitely, javaagent option may be provided to JVM, but such approach seems to be not very effective.  Only JPA instrumentation is explained in the documentation and in this case weaver is configured not inside Loader definition, but inside EntityManagerFactory and such configuration approach is JPA-specific.  It would be better if documentation will address this issue directly.    ---  **Affects:** 2.0 RC3, 2.0 RC4, 2.0 final  3 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-27T19:56:31Z","2012-06-19T03:50:15Z"
"","7163","Not logged exception raised during AOP initialization [SPR-2474]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2474](https://jira.spring.io/browse/SPR-2474?redirect=false)** and commented  Exception below is raised but not logged under following conditions:  - context contain aop-related tags (e.g.   or   ) - JVM option -javaagent:aspectjweaver.jar  is ommited  Exception in thread ""main"" java.lang.NoClassDefFoundError: org/aspectj/lang/reflect/AjTypeSystem at org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory.isAspect(AbstractAspectJAdvisorFactory.java:113) at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.isInfrastructureClass(AnnotationAwareAspectJAutoProxyCreator.java:91) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.isInfrastructureClass(AbstractAutoProxyCreator.java:263) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:206) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:516) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:351) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:641) at de.ntec.feasibility.configurable.Main.main(Main.java:11)    ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-24T08:22:05Z","2012-06-19T03:50:07Z"
"","7162","Documentation bug in aop.xml snippet [SPR-2473]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2473](https://jira.spring.io/browse/SPR-2473?redirect=false)** and commented  Second and third code snippet for aop.xml  (6.8.4, pages 113, 14 in the Reference Guide PDF) are buggy  - options are separated by comma, AspectJ requieres whitespaces only. Is:  \ \ \ \ \ \  Shall be  \ \ \ \ \ \ BTW, it seems that output is identical with and without -ShowWeaveInfo   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-24T07:53:26Z","2006-08-24T19:48:18Z"
"","7161","Documentation bug for @Configurable [SPR-2472]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2472](https://jira.spring.io/browse/SPR-2472?redirect=false)** and commented  Import statements in two code snippets for `@configurable` in the Reference Guide (6.8.1 page 124 in PDF) are wrong There are  import org.springframework.beans.factory.annotation;  statements, while shall be  import org.springframework.beans.factory.annotation.Configurable;  or  import org.springframework.beans.factory.annotation.*;   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-24T03:08:39Z","2012-06-19T03:50:24Z"
"","7089","Some bugs and/or improvment requests for Spring 2.0 RC2 Reference Manual [SPR-2400]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-2400](https://jira.spring.io/browse/SPR-2400?redirect=false)** and commented  There are some documentation bugs/typos in Spring Reference Manual that are not addressed in existing JIRA issues (or I have overlooked them). Note: page numbers refer to the PDF form of the manual, number in parenthises are chapter numbers. As soon as will progress with my reading more reports may follow :)  Page 33 (3.3.4.1): ""XML-based cnfiguration"" should read as ""XML-based configuration""  Page 43 (3.4.3.5): As far as I can see the following is mis-formulated  \ \ \ \ \ Injection takes place not to the above bean, but just opposite, above bean is injected (in proxied form) to this bean. It. BTW, documentation does not state directly, is schema-based configuration mandatory in this case (\ element in the injected bean) or it is possible to express the same behavior in an old-style configuration.  Page 54 (3.7.1.1): Formating issue - schema locations do not fit into grey-background frame.  Page 65 (4.3.2) Following paragraph is not very clear, probably needs some explanatory example.  ""This Resource implementation supports resolution as java.io.File if the class path resource resides in the file system, but not for classpath resources which reside in a jar and have not been expanded (by the servlet engine, or whatever the environment is) to the filesystem. It always supports resolution as a java.net.URL.""  Page 69 (4.7.1.1) The following fragment initaially speks about ""number of constructors"", but then describes just one. If they are really many something like ""see JavaDoc for other convinience constuctors"" will be appropriate.  ""The ClassPathXmlApplicationContext exposes a number of constructors to enable convenient instantiation. The basic idea is ...""  Page 71 (5.3)  Footnote 3 seems to be wrong - beans chapter ceased to mention BeanWrapper. Or it refers to Javadoc for java.beans package? Then have to be stated explicitely.  Page 74 (5.3.2) ""most fo the primitive types."" shoud read as ""most of the primitive types.""  Page 76 (5.3.2.1) In a sample instead of if (format != null && format.equals(""upperCase"")) { shall be if (format != null && format.equals(""upperCase"")) {  Page 76 (5.3.2.1)  Meaning of ""example."" in following XML snippet is not clear - is it package name of the ExoticType and ExoticTypeEditor classes? But nippets for these classes do not contain package name.","closed","type: bug,","spring-projects-issues","2006-08-10T08:13:09Z","2019-01-11T19:29:46Z"
"","7871","Flex2 integration with Spring MVC / Web Flow [SPR-3186]","**[Oleg Konovalov](https://jira.spring.io/secure/ViewProfile.jspa?name=olegkon)** opened **[SPR-3186](https://jira.spring.io/browse/SPR-3186?redirect=false)** and commented  Macromedia Flex is emerging Rich Interface Application (RIA) technology and it's been used as an interface to J2EE for a better user experience. Macromedia Flex  should have a transperent integration with Spring framework especially with Hibernate as O/R layer. I am here reffering to the current integration of JSF with Spring framework with Hibernate as O/R  layer with automatic Hibernate session management to handle lazy loading of objects (""OpenSessionInViewFilter"" like or better than this). Some sort of transaperent integration should be made availble with Macromedia Flex User interfaces also as more and more poeple are adopting this technology for a better User experience.  ---  **Issue Links:** - #6564 Macromedia Flex UI technology integration with Spring framework (_**""depends on""**_)  8 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-19T01:29:51Z","2019-01-11T17:36:47Z"
"","7179","AbstractOverridingClassLoader doesn't work correctly. [SPR-2490]","**[OISHI Masakuni](https://jira.spring.io/secure/ViewProfile.jspa?name=yamasa)** opened **[SPR-2490](https://jira.spring.io/browse/SPR-2490?redirect=false)** and commented  There are 3 problems in AbstractOverridingClassLoader class.  - If ""inclusions"" is empty, excludeFromUndelegation() always returns true.   This is not intended operation.  - AbstractOverridingClassLoader should override loadClass(String name, boolean resolve),   instead of loadClass(String name).   Because, if declared as follows,   loader1 = new SimpleThrowawayClassLoader(parent);   loader2 = new URLClassLoader(..., loader1);   loader2.loadClass(""FooClass"") call is processed as follows.   loader2.loadClass(""FooClass"") => loader2.loadClass(""FooClass"", false)   => loader1.loadClass(""FooClass"", false)  - loadClass() and addClassName*() methods should be synchronized.  These problems are solved by the following patch.  Index: AbstractOverridingClassLoader.java  ---  RCS file: /cvsroot/springframework/spring/tiger/src/org/springframework/instrument/classloading/AbstractOverridingClassLoader.java,v retrieving revision 1.6 diff -u -r1.6 AbstractOverridingClassLoader.java --- AbstractOverridingClassLoader.java	20 Aug 2006 20:43:30 -0000	1.6 +++ AbstractOverridingClassLoader.java	28 Aug 2006 02:59:09 -0000 @@ -59,21 +59,21 @@ }  - public void addClassNameToExcludeFromUndelegation(String className) {  + public synchronized void addClassNameToExcludeFromUndelegation(String className) {   this.exclusions.add(className);   }  - public void addClassNameToExplicitlyInclude(String className) {  + public synchronized void addClassNameToExplicitlyInclude(String className) {   this.inclusions.add(className);   }    protected boolean excludeFromUndelegation(String name) {  -         return (this.exclusions.contains(name) || !this.inclusions.contains(name));  +         return (this.exclusions.contains(name) || (!this.inclusions.isEmpty() && !this.inclusions.contains(name)));    }    `@Override`  - public Class loadClass(String name) throws ClassNotFoundException {  + protected synchronized Class loadClass(String name, boolean resolve) throws ClassNotFoundException {   if (!name.startsWith(""java"") && !this.namesSeen.contains(name) && !excludeFromUndelegation(name)) {   this.namesSeen.add(name);   String internalName = StringUtils.replace(name, ""."", ""/"") + "".class"";   @@ -86,7 +86,11 @@   byte[] bytes = FileCopyUtils.copyToByteArray(is);   // Transform if necessary and use the potentially transformed bytes.   byte[] transformed = transformIfNecessary(name, internalName, bytes);  -         return defineClass(name, transformed, 0, transformed.length);  +         Class c = defineClass(name, transformed, 0, transformed.length);  +         if (resolve) {  +         resolveClass(c);  +         }  +              return c;       }       catch (IOException ex) {            throw new ClassNotFoundException(""Cannot load resource for class ["" + name + ""]"", ex);  @@ -94,7 +98,7 @@ } else { // We don't override this class.  ---      return super.loadClass(name);  +              return super.loadClass(name, resolve);       }    }  ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-27T14:06:02Z","2019-01-13T22:46:26Z"
"","7594","Doc: PropertyPlaceholderConfigurer cannot supply system environment properties when using Sun VM 1.4 [SPR-2907]","**[Oded Blayer](https://jira.spring.io/secure/ViewProfile.jspa?name=odedblayer)** opened **[SPR-2907](https://jira.spring.io/browse/SPR-2907?redirect=false)** and commented  Originallly raised in the forum http://forum.springframework.org/showthread.php?p=88676 The problem is in the System.getenv(...) implementation of Sun, which was deprecated from jdk version 1.2 to 1.4.2 and reinstated in jdk 1.5.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-12-04T00:07:20Z","2012-06-19T03:51:05Z"
"","6918","org.springframework.scheduling.quartz.SchedulerFactoryBean nonTransactionalDataSource property not working [SPR-2228]","**[Néstor de Jesus Boscán Bujanda](https://jira.spring.io/secure/ViewProfile.jspa?name=nestorjb)** opened **[SPR-2228](https://jira.spring.io/browse/SPR-2228?redirect=false)** and commented  I'm trying to use a Spring Quartz configuration to use a JobStoreTX job store and a Spring managed dataSource.  Using the ""dataSource"" property the Scheduler job store class is automatically set to JobStoreCMT.  If you use the ""nonTransactionalDataSource"" property you get the following exception:  org.quartz.SchedulerConfigException: DataSource name not set. at org.quartz.impl.jdbcjobstore.JobStoreSupport.initialize(JobStoreSupport.java:470) at org.quartz.impl.jdbcjobstore.JobStoreTX.initialize(JobStoreTX.java:70) at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1010) at org.quartz.impl.StdSchedulerFactory.getScheduler(StdSchedulerFactory.java:1152) at org.springframework.scheduling.quartz.SchedulerFactoryBean.createScheduler(SchedulerFactoryBean.java:604) at org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet(SchedulerFactoryBean.java:509) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1091) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:396) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:277) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:313) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:139) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:252) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:190) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:50)  The only way to configure the scheduler with JobStoreTx is to set it using the quartz properties like this:                                   false            AUTO            org.quartz.impl.jdbcjobstore.JobStoreTX            T_QRTZ_            org.quartz.impl.jdbcjobstore.oracle.OracleDelegate            SELECT * FROM {0}LOCKS UPDLOCK WHERE LOCK_NAME= ?           true           jdbc/WhateverDs           whatever                    But in this case you can't use a spring managed data source.   ---  **Affects:** 1.2.8","closed","type: bug,","spring-projects-issues","2006-07-02T13:55:49Z","2012-06-19T03:52:31Z"
"","7293","BeanPropertySqlParameterSource does not find the correct getter for the property [SPR-2604]","**[Nuno Laranjeiro](https://jira.spring.io/secure/ViewProfile.jspa?name=cnl)** opened **[SPR-2604](https://jira.spring.io/browse/SPR-2604?redirect=false)** and commented  I have a simple javabean with: { private Long aId; public Long getAId() { return aId; }      public void setAId(Long id)     {     	aId = id;     }  }  And in my sql string i have to refer to ':AId' instead of ':aId' as I usally do.      public void insertItem(Item item) throws SQLException     {     	final String sql = ""INSERT INTO ITEM (I_ID, I_TITLE, I_A_ID, I_PUB_DATE, I_PUBLISHER, I_SUBJECT, I_DESC, I_SRP, I_COST, I_AVAIL, I_ISBN, I_PAGE, I_BACKING, I_DIMENSIONS, I_IMAGE)""     	        + ""VALUES (:id, :title, :AId, :pubDate, :publisher, :subject, :desc, :srp, :cost, :avail, :isbn, :page, :backing, :dimensions, :image)"";     	SqlParameterSource paramSource = new BeanPropertySqlParameterSource(     	        item);          	this.namedParameterJdbcTemplate.update(sql, paramSource);     }  If i use aId this is what happens:  11:34:32,218 ERROR [DbPopulator] Exception while handling request: org.springframework.dao.InvalidDataAccessApiUsageException: No value supplied for the SQL parameter 'aId': Invalid property 'aId' of bean class [pt.uc.dei.generic.component.pojo.Item]: Bean property 'aId' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? at org.springframework.jdbc.core.namedparam.NamedParameterUtils.buildValueArray(NamedParameterUtils.java:289) at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:216) at pt.uc.dei.loader.dao.InsertionDao.insertItem(InsertionDao.java:70) at pt.uc.dei.loader.logic.DbPopulator.populateItemTable(DbPopulator.java:261) at pt.uc.dei.loader.logic.DbPopulator.access$400(DbPopulator.java:30) at pt.uc.dei.loader.logic.DbPopulator$1.doInTransaction(DbPopulator.java:87) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128) at pt.uc.dei.loader.logic.DbPopulator.populate(DbPopulator.java:70) at pt.uc.dei.loader.logic.DbPopulator.init(DbPopulator.java:54) at pt.uc.dei.loader.Initializer.init(Initializer.java:39) at pt.uc.dei.loader.Initializer.main(Initializer.java:44)  Using :AId solves the problem.   ---  **Affects:** 2.0 RC3, 2.0 RC4","closed","status: declined,","spring-projects-issues","2006-09-18T21:50:14Z","2019-01-12T16:28:46Z"
"","7749","No convinent way of using charset != ISO-8859-1 in views [SPR-3063]","**[Noa Resare](https://jira.spring.io/secure/ViewProfile.jspa?name=noa)** opened **[SPR-3063](https://jira.spring.io/browse/SPR-3063?redirect=false)** and commented  Since I'm bulding a multilanguage web application I'm interested in using a character encoding other than ISO-8859-1 for my html views. I'm using velocity as view technology as described in the documentation and up until now I've set UTF-8 encoding by setting the contentType property of the VelocityViewResolver bean to ""text/html; charset=UTF-8"". Additionally I need to tell the incoming HttpServletRequest object that it's form input data is also in UTF-8 encoding by calling the request.setCharacterEncoding(""UTF-8"") before reading any request parameters in my controllers. This is far from convinient and something that I'd like to my framework to do for me.  My suggestion is that an clientCharacterEncoding property is added to perhaps UrlBasedViewResolver, and that value, if set, would propagate to any resolved View implementations. If the clientCharacterEncoding is set, an request.setCharacterEncoding() invocation would be added to, perhaps, AbstractView.render()  Another solution, that is less staight forward but definitely an improvement over the situation today is to have code extracting the charset parameter to the contentType string in AbstractView and if it differ from the default, add a request.setCharacterEncoding() invocation.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2007-01-22T21:11:45Z","2012-06-18T12:44:20Z"
"","7519","AbstractSingleSpringContextTests always creates ClassPathXmlApplicationContext instances [SPR-2832]","**[Noa Resare](https://jira.spring.io/secure/ViewProfile.jspa?name=noa)** opened **[SPR-2832](https://jira.spring.io/browse/SPR-2832?redirect=false)** and commented  I have a fairly standard spring driven webapp using hibernate for persistance. For some of the testing I use subclasses of AbstractTransactionalDataSourceSpringContextTests. In my bean definition file I have a Hibernate LocalSessionFactoryBean with a mappingDirectoryLocations with a single string value ""WEB-INF/hbm"". This works as expected when deploying the webapp, since the DispatcherServlet interprets the given resource reference as a ServletContextResource. However when using the hibernate enabled tests the hibernate mappings are not found.  Some investigation pointed me to the AbstractSingleSpringContextTests.loadContextLocations() method where a ClassPathXmlApplicationContext is created. This means that the hibernate mapping files will be looked for in the classpath when no prefix is used in the resource reference String. However I'm not one of those guys that like putting everything and their grandmother in the classpath so I would very much like to have the hibernate mappings in a separate dir. Adding the ""file"" prefix to the mappingDirectoryLoctions property fixes the tests but breaks the webapp.  My current workaround for this is to override loadContextLocations in my own test superclass returing a FileSystemXmlApplicationContext instead, but since the loadCount member is private and the getLoadCount() method is final this beaks some funcctionality.  Since i suspect that my use case is a common one (webapp, hibernate and the testing help classes) I would like to suggest that the ClassPathXmlApplicationContext constructor is changed to a FileSystemXmlApplicationContext. If someone wants to load something from the classpath the 'classpath:' prefix can easily be added, and that will work both in tests and when the webapp is deployed. However, files accessible with the FileSystemResource in testing and ServletContextResource in the webbapp can not be easily made working on both sides as far as I know.  If you feel that changing this default behaviour should not be changed, it would be nice to have some hook to configure what type of ApplicationContext is created by AbstractSingleSpringContextTests. An overridable method that just returns an ApplicationContext from a location string would be enough. (And open up for a vast array of creative hacking with custom ApplicationContext implementations **smile**)   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-13T17:47:26Z","2012-06-19T09:37:37Z"
"","7117","ControllerClassNameHandlerMapping should be able to map the ""/"" URL [SPR-2428]","**[Noa Resare](https://jira.spring.io/secure/ViewProfile.jspa?name=noa)** opened **[SPR-2428](https://jira.spring.io/browse/SPR-2428?redirect=false)** and commented  The ControllerClassNameHandlerMapping is a very useful utility. However, lots of times it is desireable to have spring mvc handling the ""/"" path in the web application. This url can be mapped with the SimpleUrlHandlerMapping using an empty string as the key, however the class name 'Controller' that would result in an mapping to the empty string with the ControllerClassNameHandlerMapping happens to die with a StackOverflowError in javax.servlet.http.HttpServletRequestWrapper.getSession() in tomcat. Come to think about it, perhaps that is reasonable.  Suggested ways to add this functionality, in order of preference:  - add a bean property in the ControllerClassNameHandlerMapping named 'rootHandler' or some such - add a generic handlers map to the class that can be used to override generated values - nail the StackOverflowError and document the fact that using the controller name 'Controller' autogenerates a mapping to the """" url. - elect some controller class name, perhaps ""RootController"" magical and make it map to the """" url.  For the time being subclassing ControllerClassNameHandlerMapping is easy enough, but having the the functionality out of the box would be really nice methinks.   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-14T22:31:40Z","2012-06-19T03:51:03Z"
"","6968","form:select tag should generate hidden input tag for multiple selection menu [SPR-2279]","**[Nils-Åke Klittby](https://jira.spring.io/secure/ViewProfile.jspa?name=nilkli)** opened **[SPR-2279](https://jira.spring.io/browse/SPR-2279?redirect=false)** and commented  When all items in a muliple select menu, generated by form:select, are deselected, the form backing object property is not updated. The form:select tag should generate a hidden input tag when multiple is true in the same way as for checkboxes.   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-11T10:36:37Z","2012-06-19T03:52:37Z"
"","6938","Label tag does not work with radio buttons [SPR-2249]","**[Nils-Åke Klittby](https://jira.spring.io/secure/ViewProfile.jspa?name=nilkli)** opened **[SPR-2249](https://jira.spring.io/browse/SPR-2249?redirect=false)** and commented  The 'for'-attribute of the label tag is wrong when there are several input controls with the same name like a group of radio buttons or checkboxes. The id of the input controls has an index appended to the path but the label tag only uses the path.   --- No further details from [SPR-2249](https://jira.spring.io/browse/SPR-2249?redirect=false)","closed","status: declined,","spring-projects-issues","2006-07-06T10:40:03Z","2019-01-12T16:29:04Z"
"","7245","LocalVariableTableParameterNameDiscover won't work with static methods and methods which have longs or doubles as args [SPR-2556]","**[Niklas Therning](https://jira.spring.io/secure/ViewProfile.jspa?name=niklas@trillian.se)** opened **[SPR-2556](https://jira.spring.io/browse/SPR-2556?redirect=false)** and commented  While working on a new patch for issue #7228 which uses LocalVariableTableParameterNameDiscover (LVTPND) instead of my own ParameterNamesExtractor to add support for constructor injection using parameter names I find some bugs in LVTPND.  First of all LVTPND doesn't work with static methods. The LVTPND version in HEAD always skips the first local variable (which is 'this' for instance methods). This doesn't work for static methods.  Secondly, LVTPND cannot handle long and double parameters correctly. Variables of these types occupy two local variable slots (becuase they need 64 bits). If you have the instance method foo(long x, double d) visitLocalVariable() will be called with the (index, name) values (0, this), (2, x) and (4,d). This means that you cannot rely on the index variable to determine the index of the parameter.  I'll attach a patch which fixes these issues.  ---  **Affects:** 2.0 RC3  **Attachments:** - [LocalVariableTableParameterNameDiscover.java.diff](https://jira.spring.io/secure/attachment/11944/LocalVariableTableParameterNameDiscover.java.diff) (_3.10 kB_) - [LocalVariableTableParameterNameDiscoverTest.java.diff](https://jira.spring.io/secure/attachment/11945/LocalVariableTableParameterNameDiscoverTest.java.diff) (_5.66 kB_)","closed","in: core,","spring-projects-issues","2006-09-07T16:57:50Z","2019-01-11T19:21:08Z"
"","7228","Patch which adds support for using constructor parameter names with constructor injection [SPR-2539]","**[Niklas Therning](https://jira.spring.io/secure/ViewProfile.jspa?name=niklas@trillian.se)** opened **[SPR-2539](https://jira.spring.io/browse/SPR-2539?redirect=false)** and commented  This patch adds support for using parameter names when using constructor injection. With this patch the following will be possible:  \ \ \ \ \ \  provided that ConnectionPoolImpl has the following constructor:  ConnectionPoolImpl(String host, String port, String username, String password)  The patch also work with static and instance factory methods.  The patch uses ASM to read the local variable debugging information from the .class file of the class being created. This leads to some obvious limitations: the class has to be compiled with local variable debug info and the .class file must be readable from the class path. Even with these limitations I think it would be a nice addition to Spring.  Have a look at my blog for a more detailed description of the technique and why I'd like Spring to support this: http://therning.org/niklas/node/164   ---  **Attachments:** - [named-constructor-args.diff](https://jira.spring.io/secure/attachment/11935/named-constructor-args.diff) (_51.71 kB_) - [named-constructor-args2.diff](https://jira.spring.io/secure/attachment/11948/named-constructor-args2.diff) (_24.93 kB_)","closed","type: enhancement,","spring-projects-issues","2006-09-05T06:40:45Z","2019-01-11T19:21:39Z"
"","7783","Introduce explicit Hibernate and/or DbUnit support in the TestContext Framework [SPR-3096]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-3096](https://jira.spring.io/browse/SPR-3096?redirect=false)** and commented  I'm using this abstract base test class to test my Hibernate mappings and DAOs. It uses `AbstractTransactionalDataSourceSpringContextTests` to load the Hibernate `SessionFactory` and adds DbUnit integration to set up the database in an expected state before the test starts.  As I've found it really useful I'd like to contribute it.  ```java public abstract class AbstractHibernateMappingsTests     extends AbstractTransactionalDataSourceSpringContextTests {      private HibernateTemplate hibernateTemplate;      private String schema;      protected final void onSetUpInTransaction() throws Exception {         String resource = getDataSetResource();         if ( resource != null ) {             logger.info( ""Loading DBUnit file "" + resource );             IDatabaseConnection connection = getDatabaseConnection();             InputStream stream = getClass().getResourceAsStream( resource );             IDataSet dataSet = new FlatXmlDataSet( stream );             ReplacementDataSet replacementDataSet = new ReplacementDataSet( dataSet );             replacementDataSet.addReplacementObject( ""[NULL]"", null );             DatabaseOperation.REFRESH.execute( connection, replacementDataSet );         }     }      protected IDatabaseConnection getDatabaseConnection() throws SQLException {         Connection cnx = hibernateTemplate.getSessionFactory().getCurrentSession().connection();         IDatabaseConnection connection = new DatabaseConnection( cnx, schema );         return connection;     }      /**       * @return a resource name for a DBUnit flatDataset file (or null)      */     protected abstract String getDataSetResource();      public void setHibernateTemplate( HibernateTemplate hibernateTemplate ) {         this.hibernateTemplate = hibernateTemplate;     }     public void setSchema( String schema ) {         this.schema = schema;    }      /**      * @return the hibernateTemplate      */     protected HibernateTemplate getHibernateTemplate() {         return hibernateTemplate;     } } ```  ---  **Affects:** 2.0.2  **Issue Links:** - #11259 Introduce a TestExecutionListener for DbUnit (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2007-01-31T00:07:18Z","2019-01-11T16:40:04Z"
"","7643","Support Struts 1.3 CoR Requestprocessor [SPR-2961]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-2961](https://jira.spring.io/browse/SPR-2961?redirect=false)** and commented  This issue was proviously reported as [MOD-33](https://jira.spring.io/browse/MOD-33) but is not related to commons-chain support, but to Struts 1.3 ""Chain Of Resposability"" request processor :  Struts 1.3 uses commons-chain as a backbone for the requestProcessor. This is expected to allow easier plugability of struts extensions. AutoWiring Request processor from Spring-struts is great but requires to configure a Struts 1.2-like requestprocessor.  The attached code is extends Struts  ""CreateAction"" command based on AutoWiringRequestprocessor (delegation to DelegatingActionUtils) and included it in my Struts 1.3 configuration to get same support from Spring.   ---  **Affects:** 2.0.1  **Attachments:** - [AutowireCreateAction.java](https://jira.spring.io/secure/attachment/12284/AutowireCreateAction.java) (_4.75 kB_)","closed","type: enhancement,","spring-projects-issues","2006-12-18T20:25:15Z","2012-06-19T09:37:26Z"
"","7294","add support for field injection [SPR-2605]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-2605](https://jira.spring.io/browse/SPR-2605?redirect=false)** and commented  Containers like plexus use field injection. According to http://forum.springframework.org/showthread.php?t=9692&highlight=field+injection, This is not considered by Spring developers as a good practice.  I myself had a case where it may be better than setter injection :  A newbee developper coded into a Struts action injection of values into it's dependencies using public setters. Dependency may use a facade interface but was not in this case (generated code). This is not Spring responsibility to avoid such errors, but requirement for public setters exposes components internals.  Having protected (or package) field for dependencies keeps code testability (only require the testcase to be in the same package) and avoid exposing unnecessary setters.  Field injection requires Spring to make some ""magic"" Privileged actions, but Hibernate and JPA also do AFAIK.  Could you please reconsider this and expose a definitive argument to exclude field injection from Spring scope ?  ---  **Issue Links:** - #10249 `@Autowired` vs.","closed","type: enhancement,","spring-projects-issues","2006-09-19T02:07:56Z","2019-01-13T08:10:23Z"
"","7060","DelegateActionProxy & DelegateRequestProcessor don't set the actionServlet [SPR-2371]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-2371](https://jira.spring.io/browse/SPR-2371?redirect=false)** and commented  SetServlet(ActionServlet) is used by Struts as an init method for Actions and a way to acces the ActionServlet when required. When a DelegateRequestProcessor is used, this method is not called anymore.   ---  **Attachments:** - [SPR2371.patch](https://jira.spring.io/secure/attachment/11847/SPR2371.patch) (_2.96 kB_)","closed","status: declined,","spring-projects-issues","2006-08-01T05:46:04Z","2019-01-12T16:28:57Z"
"","6889","AbstractTransactionAspect drops exception if afterthrowing fails [SPR-2199]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-2199](https://jira.spring.io/browse/SPR-2199?redirect=false)** and commented  It took me much time to find a stupid bug due to AbstractTransactionAspect  that hides an Exception :  Bug was an incomplete classpath, and exception a NoClassDefFoundError :  AbstractTransactionAspect is used to create a transaction. But due to incomplete classpath the ""createTransactionIfNecessary"" fails with NoClassDefFoundError.  The aspect executes afterthrowing(Throwable t). This methods calls TransactionAspectSupport.currentTransactionInfo() that fails due to no transaction in threadlocal. The error message ""No transaction aspect-managed TransactionStatus in scope"" is logged but has no real value to find the bug.  Simply adding a DEBUG log in afterthrowing can ensure the exception will not be dropped and help users find the initial source of a bug. A better solution should be to make afterthrowing not creating a new Exception (try/catch)  Just for info, my conf was wrong due to missing aopalliance.jar. Wasn't this jar included in spring-aop.jar in a prior version ?   ---  **Affects:** 2.0 RC1","closed","in: core,","spring-projects-issues","2006-06-27T02:02:46Z","2012-06-19T03:52:37Z"
"","7786","Create DataBinderConfigurer interface [SPR-3099]","**[Nick Padgett](https://jira.spring.io/secure/ViewProfile.jspa?name=npadgett)** opened **[SPR-3099](https://jira.spring.io/browse/SPR-3099?redirect=false)** and commented  I'd like to see the creation of a DataBinderConfigurer interface with the method ""void configure(DataBinder binder);""  Additionally, I'd like to inject an instantiation of this class into BaseCommandController where initBinder(HttpServletRequest request, ServletRequestDataBinder binder) detects if an instance of DataBinderConfigurer exists and passes the DataBinder to the configure method.  I follow this pattern with most of my controllers that subclass BaseCommandController or one of its subclasses.  I then have a instance of DataBinderConfigurer that allows me to trim strings, set allowed fileds, set disallowed fields, set required fields, etc. via the normal spring configuration.   --- No further details from [SPR-3099](https://jira.spring.io/browse/SPR-3099?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-01-31T02:58:04Z","2012-06-19T09:37:42Z"
"","7338","Failure using ClassUtils getDefaultClassLoader() [SPR-2649]","**[Neil Hart](https://jira.spring.io/secure/ViewProfile.jspa?name=neilhart)** opened **[SPR-2649](https://jira.spring.io/browse/SPR-2649?redirect=false)** and commented  There is a Sun bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4665132 that causes us to fail when loading our XML config files.  When using this within JWS and with a very limit security policy we get the following stack trace:  java.security.AccessControlException: access denied (java.lang.RuntimePermission getClassLoader) at java.security.AccessControlContext.checkPermission(Unknown Source) at java.security.AccessController.checkPermission(Unknown Source) at java.lang.SecurityManager.checkPermission(Unknown Source) at java.lang.Thread.getContextClassLoader(Unknown Source) at org.springframework.util.ClassUtils.getDefaultClassLoader(ClassUtils.java:101) at org.springframework.core.io.DefaultResourceLoader.\(DefaultResourceLoader.java:53) at org.springframework.context.support.AbstractApplicationContext.\(AbstractApplicationContext.java:178) at org.springframework.context.support.AbstractRefreshableApplicationContext.\(AbstractRefreshableApplicationContext.java:78) at org.springframework.context.support.AbstractXmlApplicationContext.\(AbstractXmlApplicationContext.java:58) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:90) at com.creditex.spring.SpringRegistry$StaticSpringRegistry.add(SpringRegistry.java:127)  Can we/you change the ClassUtils.getDefaultClassLoader() to get the Thread's classLoader in a try/catch block?  Like this:      public static ClassLoader getDefaultClassLoader() {                 ClassLoader cl = null;                 try {     	        cl = Thread.currentThread().getContextClassLoader();                 }     	catch (Throwable ex) {     		if (logger.isDebugEnabled()) {     			logger.debug(""Getting the thread class loader cause a failure: "" + ex);     		}     	}     	if (cl == null) {     		// No thread context class loader -> use class loader of this class.     		cl = ClassUtils.class.getClassLoader();     	}     	return cl;     }  The current workaround I have now is to duplicate the class hierarchy:  AbstractApplicationContext AbstractRefreshableApplicationContext AbstractXmlApplicationContext ClassPathXmlApplicationContext  so that my AbstractApplicationContext passes in the ClassLoader to DefaultResourceLoader  Thanks   ---  **Affects:** 1.2.8, 2.0 RC3, 2.0 RC4  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-09-28T05:18:35Z","2012-06-19T03:50:43Z"
"","7618","Mixed Field and Property support in DataBinder [SPR-2932]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-2932](https://jira.spring.io/browse/SPR-2932?redirect=false)** and commented  The DataBinder class does not currently allow a user to switch between field and property binding arbitrarily.  The class should allow you to switch that configuration element after binding has been accomplished.  It could be useful for the DataBinder to pick up data binding hints from the code like JPA does, to decide whether to use field or property binding in a particular case.  In fact, it might be modified to support JPA's data binding annotations.  That seems like a useful addition when binding on to rich objects where you want to avoid setter side effects in some cases (i.e. bind directly onto the field) while going through the setters in other cases.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-09T00:32:54Z","2012-06-19T09:37:28Z"
"","7393","Create and upload Maven Source and Javadoc Bundles for Spring 1.2.9 [SPR-2705]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-2705](https://jira.spring.io/browse/SPR-2705?redirect=false)** and commented  Create and upload Maven Source and Javadoc Bundles for Spring 1.2.9 per user request  ---  **Affects:** 1.2.9  **Issue Links:** - #6929 Provide source code and maven2 poms at ibiblio (_**""is duplicated by""**_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-10-11T08:52:14Z","2019-01-11T19:37:36Z"
"","7392","Create and upload Maven Source and Javadoc Bundles for Spring 2.0 [SPR-2704]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-2704](https://jira.spring.io/browse/SPR-2704?redirect=false)** and commented  Create and upload Maven Source and Javadoc Bundles for Spring 2.0 per user request  ---  **Affects:** 2.0 final  **Attachments:** - [SPR-2704.patch](https://jira.spring.io/secure/attachment/12228/SPR-2704.patch) (_19.66 kB_)  **Issue Links:** - #6083 add version number to jars and produce separate source jars for modules [build.xml patch] (_**""depends on""**_) - #7725 Maven 2 Support - Source Jars (_**""is duplicated by""**_) - #7883 Create javadoc and source jars for seperate modules (Maven friendliness) (_**""is duplicated by""**_) - #6929 Provide source code and maven2 poms at ibiblio (_**""is duplicated by""**_) - #6083 add version number to jars and produce separate source jars for modules [build.xml patch] (_**""is duplicated by""**_)  28 votes, 23 watchers","closed","has: votes-jira,","spring-projects-issues","2006-10-11T08:51:15Z","2019-01-11T19:37:38Z"
"","7086","Javadocs for AbstractSimpleBeanDefinitionParser and AbstractSingleBeanDefinitionParser need *a lot* of improvement [SPR-2397]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-2397](https://jira.spring.io/browse/SPR-2397?redirect=false)** and commented  There are essentially no javadocs for AbstractSimpleBeanDefinitionParser and AbstractSingleBeanDefinitionParser.  It appears that these are useful convenience classes and I'd like to use them, but have no idea how they work   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-08-09T02:26:23Z","2012-06-19T03:50:39Z"
"","7077","Example code in JPA documentation isn't valid (I think) [SPR-2388]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-2388](https://jira.spring.io/browse/SPR-2388?redirect=false)** and commented  The example code in the JPA section (12.7) appears to have a problem.  In most of the examples there is a block of code that looks like this:  Query query = em.createQuery(""from Product""); List result = query.execute(category);  Based on this documentation (http://java.sun.com/javaee/5/docs/api/javax/persistence/Query.html) I think it actually needs to be:  Query query = em.createQuery(""from Product as p where p.category = :category""); query.setParameter(""category"", category); List result = query.getResultList();   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-08-07T03:08:52Z","2012-06-19T03:51:01Z"
"","7076","'Implementing DAOs based on plain JPA (12.7.3)' is vague [SPR-2387]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-2387](https://jira.spring.io/browse/SPR-2387?redirect=false)** and commented  The documentation for how to inject an EntityManager into a DAO is a little bit vague.  The paragraph that I think needs clarification reads:  The injected EntityManager is Spring-managed (aware of the ongoing transaction). It is important to note that even though the new implementation prefers method level injection (of an EntityManager instead of an EntityManagerFactory), no change is required in the application context XML due to annotation usage.  My first issue is the term method level injection.  I'm not sure that we use that anywhere else so it might be better to change the wording or at least explain what method level injection means.  The other issues is that we need to discuss thread safety and the scope of the EntityManager.  Only one EntityManager is injected but can the DAO be used in separate threads?  Generally is it a proxy to a threadbound implementation somewhere?   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-08-07T02:26:03Z","2012-06-19T03:50:40Z"
"","7058","MessageListenerAdapter Javadocs need to cover method resolution rules [SPR-2369]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-2369](https://jira.spring.io/browse/SPR-2369?redirect=false)** and commented  Currently the Javadocs of MessageListenerAdapter mention that handle methods are resolved via reflection but do not list any rules for having a method considered.  It never mentions what the arguments and return values are allowed to be or any rules on naming.  The Reference Docs look to be pretty complete and some of that may be portable back to the javadocs.   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-31T07:18:22Z","2012-06-19T03:51:17Z"
"","6928","collection documentation doesn't mention override of collection type [SPR-2238]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-2238](https://jira.spring.io/browse/SPR-2238?redirect=false)** and commented  In Section A.2.2 of the documentation (the util schema documentation) the collection types never document that they have an attribute that will allow you to override the actual Java class type of the collection.   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-07-05T06:32:03Z","2012-06-19T03:52:48Z"
"","7197","No extension to allow dynamic commandName/commandClass (and it's final) [SPR-2508]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-2508](https://jira.spring.io/browse/SPR-2508?redirect=false)** and commented  Some of us want to dynamically generate our commands and validators (for data driven forms), in classes derived from SimpleFormController.  This requires being able to dynamically choose - commandName - we can achieve this to some extent by overriding getFormSessionAttributeName(), but can't modify it in other places - commandClass - for creating an instance - validators for validating  I can understand the principle of ""Open for extension, closed for modification"", but I can find no ""extension"" way of doing what I would be able to do rather easily with modification.  To do this, BaseCommandController needs some refactoring, in order to support a different way of tying together commandName, commandClass and validators.   ---  **Affects:** 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-30T03:11:30Z","2007-07-10T21:54:58Z"
"","7100","ViewResolver.resolveViewName() should support same params as ServletDispatcher.resolveViewName() [SPR-2411]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-2411](https://jira.spring.io/browse/SPR-2411?redirect=false)** and commented  Currently, model and request are discarded rather than passed to ViewResolver.resolveViewName().  ViewResolver.resolveViewName should be overloaded with:  resolveViewName(String viewName, Map model, Locale locale, HttpServletRequest request)  with backwards compatibility provided by base versions of classes that implement ViewResolver having default implementation of:  public View resolveViewName(String viewName, Map model, Locale locale, HttpServletRequest request) throws Exception { return resolveViewName( viewName, locale); }   --- No further details from [SPR-2411](https://jira.spring.io/browse/SPR-2411?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-08-11T03:16:51Z","2019-01-11T19:33:17Z"
"","7098","Cannot create useful derived version of DispatcherServlet - too much private [SPR-2409]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-2409](https://jira.spring.io/browse/SPR-2409?redirect=false)** and commented  When creating a specialised DispatcherServlet, various methods are provided as non-final such that they can be overridden, but the attributes that the default implementation refers to are private, rather than protected.  An example is, wanting to override resolveViewName() such that resolution of views can be made based on the request or model (as is supported by that method call, but not by the ViewResolver interface).  What gets in the way is that viewResolvers is private.  This seems to be the case with much of DispatcherServlet's attribute.   ---  **Affects:** 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-11T03:10:19Z","2012-06-19T09:37:28Z"
"","7091","Regression from 1.2.x: PropertyTypeConverter fails on unmodifiable Map [SPR-2402]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-2402](https://jira.spring.io/browse/SPR-2402?redirect=false)** and commented  Code that worked in 1.2.5 fails in 2.0 RC2 with exception below.  Correct behaviour should probably be to catch UnsupportedOperationException (thrown because the Map is instantiated by it's constructor - don't ask me, I'm just testing we can use 2.0), and return original.  i.e.      for (Iterator it = original.entrySet().iterator(); it.hasNext();) {          Map.Entry entry = (Map.Entry) it.next();          Object key = entry.getKey();          Object value = entry.getValue();          String keyedPropertyName = buildKeyedPropertyName(propertyName, key);          Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType);          Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType);          try {               convertedCopy.put(convertedKey, convertedValue);          }          catch ( UnsupportedOperation e ) {               return original;          }          actuallyConverted = actuallyConverted || (key != convertedKey) || (value != convertedValue);     }     return (actuallyConverted ? convertedCopy : original);  java.lang.UnsupportedOperationException: Cannot modify this map at com.lm.web.JSTLConstants.put(JSTLConstants.java:91) at org.springframework.beans.PropertyTypeConverter.convertToTypedMap(PropertyTypeConverter.java:328) at org.springframework.beans.PropertyTypeConverter.convertIfNecessary(PropertyTypeConverter.java:190) at org.springframework.beans.PropertyTypeConverter.convertIfNecessary(PropertyTypeConverter.java:108) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:723) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:575) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(AbstractPropertyAccessor.java:49) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:68) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:816) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:237) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:153) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:254) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:337) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:308) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:252) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:221) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:114) at javax.servlet.GenericServlet.init(GenericServlet.java:211)   ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-08-10T10:51:29Z","2012-06-19T03:50:31Z"
"","7276","Non-anonymous inner beans [SPR-2587]","**[Nathan Sobo](https://jira.spring.io/secure/ViewProfile.jspa?name=nathansobo)** opened **[SPR-2587](https://jira.spring.io/browse/SPR-2587?redirect=false)** and commented  It would be very nice if I could create an inner bean with an id and refer to it elsewhere. I know that I could instead declare it globally, but in some projects there is the sense that a bean declaration belongs somewhere other than the global scope, such as within a data structure, and it would be nice to be able to refer into such data structures.   --- No further details from [SPR-2587](https://jira.spring.io/browse/SPR-2587?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-09-14T15:00:32Z","2012-06-19T09:37:42Z"
"","7741","Add registration support for Java 6 MXBeans [SPR-3055]","**[Nathan Mittler](https://jira.spring.io/secure/ViewProfile.jspa?name=nmittler)** opened **[SPR-3055](https://jira.spring.io/browse/SPR-3055?redirect=false)** and commented  MBeanExporter does not provide a way to register MXBeans with the MBeanServer.  The way it works is that it only looks for an interface with the name *MBean.  If it does not find an interface matching that name, it makes its own MBean wrapper around the object, which has the effect of losing the MXBean functionality.  I have a patch that makes the isMBean() logic pluggable at the MBeanExporter.  The default implementation delegates to JMXUtil.isMBean(), which just looks for *MBean.  A second instance is Java 6 MXBean aware and knows that if it's not a plain old MBean, it might be an MXBean - and then looks for *MXBean as well as the annotation ""MXBean"" to make the determination.  I'm willing to share this patch, but I don't see a way to attach it to the issue.   ---  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/12345/patch.txt) (_8.90 kB_)","closed","type: enhancement,","spring-projects-issues","2007-01-19T05:57:59Z","2012-06-19T03:50:02Z"
"","7674","UrlFilenameViewController incorrectly parses the view name from the path - makes incorrect statement to such in javadoc as well [SPR-2988]","**[Nate McCall](https://jira.spring.io/secure/ViewProfile.jspa?name=zznate)** opened **[SPR-2988](https://jira.spring.io/browse/SPR-2988?redirect=false)** and commented  UrlFilenameViewController now does its own (incorrect?) view name parsing as opposed to delegating to: http://static.springframework.org/spring/docs/api/org/springframework/web/util/WebUtils.html#extractFilenameFromUrlPath(java.lang.String)  as stated in the javadoc. This change differs from the funcitonality in 1.2.8 in the following way:  with bothUrlFilenameViewController versions mapped to the url ""/foo/**"" and a request for ""/foo/bar/filename.jsp"" is received 1.2.8: uses the functionality in WebUtils to return ""filename"" 2.0: uses an internal implementation to return ""bar/filename""  Was there a decision to update UrlFilenameViewController to take this new approach? If so, the documentation must be updated. This is related to issue #7673  ---  **Affects:** 2.0 final  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/12304/patch.txt) (_543 bytes_)  **Issue Links:** - #7476 UrlFilenameViewController backward compatibility broken (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2006-12-27T09:54:36Z","2019-01-12T16:51:50Z"
"","7673","getViewNameForUrlPath in UrlFilenameViewController was removed(renamed?) without any deprecation or other suitable warning [SPR-2987]","**[Nate McCall](https://jira.spring.io/secure/ViewProfile.jspa?name=zznate)** opened **[SPR-2987](https://jira.spring.io/browse/SPR-2987?redirect=false)** and commented  In the 1.2.x documentation, there is no indication of deprecation or warning of future modification. See: http://static.springframework.org/spring/docs/1.2.x/api/org/springframework/web/servlet/mvc/UrlFilenameViewController.html#getViewNameForUrlPath(java.lang.String)  From the source, the functionality appears to have been moved into the following method: http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/web/servlet/mvc/UrlFilenameViewController.html#getViewNameForRequest(javax.servlet.http.HttpServletRequest)  I certainly follow the logic behind the additional level of encapsulation, but I think a fair and more professional approach would be to add back the method in 2.0 marked as deprecated with the suggestion of using getViewNameForRequest instead (in the parent abstract class as well).   ---  **Affects:** 2.0 final, 2.0.1","closed","type: bug,","spring-projects-issues","2006-12-27T03:59:34Z","2019-01-11T21:26:18Z"
"","7791","Junit4 support [SPR-3104]","**[Mujahid Ali](https://jira.spring.io/secure/ViewProfile.jspa?name=mujahid)** opened **[SPR-3104](https://jira.spring.io/browse/SPR-3104?redirect=false)** and commented  Junit4 doesn't require a class to extend TestCase to write unit tests;  there needs to be a  similar class to AbstractDependencyInjectionSpringContextTests which provides support for tests that depend on a Spring context but doesn't extends from Junit's TestCase.  If there is a workaround for this, please either reply here or in the forum under the thread  http://forum.springframework.org/showthread.php?t=34378  Thanks,  -Mujahid  ---  **Issue Links:** - #7229 Junit 4.x version of AbstractTransactionalDataSourceSpringContextTests (_**""is depended on by""**_) - #9965 Add support for parameterized JUnit 4 tests in the Spring TestContext Framework  18 votes, 18 watchers","closed","has: votes-jira,","spring-projects-issues","2007-02-02T01:57:41Z","2019-01-11T17:33:57Z"
"","7167","using JMSTemplate.execute(SessionCallback, true) never stops the connection it has started. [SPR-2478]","**[Morten Wilken](https://jira.spring.io/secure/ViewProfile.jspa?name=wilken)** opened **[SPR-2478](https://jira.spring.io/browse/SPR-2478?redirect=false)** and commented  We see odd behaviour when we manually create a MessageReceiver in a SessionCallback, and start the connection. Using ethereal we can see that Websphere is polling the MQ a lot, every millisecond we se a MQ_REQUEST/REPLY.  My guess, after looking at the source is that you never stop the connection again, just call closeConnection, which delegates the close to the managed connection, that propably just returns the connection to the pool.  The offending code is this:      		public Object doInJms(Session session) throws JMSException {     			log.debug(""leder i messagecache"");     			try {     				InitialContext i = new InitialContext();     				Queue q = (Queue) i.lookup(getQueueName());     				String selector =     					""JMSMessageID='ID:""     						+ transaktion.getFormidlingsmaskineId()     						+ ""'"";     				log.debug(""leder efter "" + selector);     				MessageConsumer mc =     					((QueueSession) session).createReceiver(q,selector);     				log.debug(""selector er "" + mc.getMessageSelector());     				Message m = mc.receiveNoWait();     				if (m == null) {     					transaktion.setHeader(null);     				} else {     					MessageHeader header =     						MessageHeader.newInstance(parseBody(m));     					transaktion.setHeader(header);     				}     			} catch (NamingException e) {     				// TODO Auto-generated catch block     				e.printStackTrace();     			}     			return null;     		}          	},true);  ---  **Affects:** 1.2.6  **Issue Links:** - #7696 DefaultMessageListenerContainer calls Connection.stop() in a Java EE environment (_**""is depended on by""**_)","closed","type: bug,","spring-projects-issues","2006-08-24T20:10:19Z","2019-01-11T19:33:56Z"
"","6951","problem with integrating JSF with Spring [SPR-2262]","**[mohammad](https://jira.spring.io/secure/ViewProfile.jspa?name=mnrz57)** opened **[SPR-2262](https://jira.spring.io/browse/SPR-2262?redirect=false)** and commented  Hi I have a simple project with JSF, but problem is the Spring bean is not recognized by JSF.  here is the faces-config.xml           	org.springframework.web.jsf.DelegatingVariableResolver     	     		en     		en     	                    	displays a grid regarding to user input number     	numControls     	com.hellojsf.bean.NumControls     	request     	     		numService     		#{numService}     	     	  ---  and this is applicationContext.xml ...                   ...  ---  this is JSF backing bean:  public class NumControls { private int numOfControls = 0; private HtmlPanelGrid controlPanel; private HtmlOutputText out; private NumService numService; //","closed","status: declined,","spring-projects-issues","2006-07-08T16:18:55Z","2019-01-13T22:47:15Z"
"","7353","DOC: JNDI required for JTA? [SPR-2664]","**[ML](https://jira.spring.io/secure/ViewProfile.jspa?name=headset)** opened **[SPR-2664](https://jira.spring.io/browse/SPR-2664?redirect=false)** and commented  Section 9.3 in the manual states:  ""If we use JTA, as in the dataAccessContext-jta.xml file from the same sample application, we need to use a container DataSource, obtained via JNDI, and a JtaTransactionManager implementation.""  But http://www.onjava.com/lpt/a/6469 appears to show JTA without JNDI and without an app server:  ""In our scenario, we will process incoming bank orders from a Java Message Service (JMS) queue. The processing of an order involves updating the account database via Java Database Connectivity (JDBC). In order to avoid message loss or duplicates, we will use the Java Transaction API (JTA) and JTA/XA transactions to coordinate the updates: consuming a message and updating the database will happen in one atomic transaction.""  ""If we were using an application server, then we would have to resort to Java Naming and Directory Interface (JNDI) lookups instead.""  unrelated side note: I keep reading how JMS also requires an app server and here it looks like that's not really the case.  Comments, corrections, clarifications on this would be most welcome.   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-10-02T11:22:46Z","2012-06-19T03:50:35Z"
"","7256","DOC: 3.7.1.2. repeated word [SPR-2567]","**[ML](https://jira.spring.io/secure/ViewProfile.jspa?name=headset)** opened **[SPR-2567](https://jira.spring.io/browse/SPR-2567?redirect=false)** and commented  ""implementation that that ships""  should be:  ""implementation that ships""   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-09T05:55:42Z","2012-06-19T03:50:16Z"
"","7254","DOC: 3.3.3.6 subject verb agreement [SPR-2565]","**[ML](https://jira.spring.io/secure/ViewProfile.jspa?name=headset)** opened **[SPR-2565](https://jira.spring.io/browse/SPR-2565?redirect=false)** and commented  ""In general, when typing definitions by hand, you will probably prefer to use the less verbose shortcut form (the Spring team certainly do).""  The parenthetical remark should be something like:  the Spring team certainly does  or  the members of the Spring team certainly do   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-08T15:11:34Z","2012-06-19T03:50:16Z"
"","7251","DOC: 3.3.3.1.1 Error in code comment? [SPR-2562]","**[ML](https://jira.spring.io/secure/ViewProfile.jspa?name=headset)** opened **[SPR-2562](https://jira.spring.io/browse/SPR-2562?redirect=false)** and commented  In the code sample:  \ \ \ \  shouldn't the comment be:  \   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-08T06:02:11Z","2012-06-19T03:50:29Z"
"","7248","DOC: 3.2.3.2.3 ...current what? ancestor of what? [SPR-2559]","**[ML](https://jira.spring.io/secure/ViewProfile.jspa?name=headset)** opened **[SPR-2559](https://jira.spring.io/browse/SPR-2559?redirect=false)** and commented  I'm not quite sure what this sentence is getting at:  ""To use this mechanism, the 'class' attribute must be left empty, and the 'factory-bean' attribute must specify the name of a bean in the current or an ancestor bean factory which contains the factory method.""  Current what?  Current (or ancestory) bean factory?  We haven't yet specified the factory-bean ... how could it be ""current""?  Current something else?  Current context?  Ancestor of what?  :-p   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-08T03:57:30Z","2012-06-19T03:50:37Z"
"","7246","Wording change and subject/verb agreement in section 3.2.1.1 [SPR-2557]","**[ML](https://jira.spring.io/secure/ViewProfile.jspa?name=headset)** opened **[SPR-2557](https://jira.spring.io/browse/SPR-2557?redirect=false)** and commented  Suggested wording change:  ""A Spring IoC container configuration consists of, at its most basic level, definitions of at least one (but typically more) beans that the container must manage.""  becomes:  At its most basic level, a Spring IoC container configuration consists of the definition of at least one bean that the container must manage, but typically there will be more than one bean definition.   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-08T01:44:22Z","2012-06-19T03:50:18Z"
"","7455","Circular reference of request scoped beans throws OutOfMemoryError or infinite loop. [SPR-2767]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2767](https://jira.spring.io/browse/SPR-2767?redirect=false)** and commented  If I have two request scoped beans who reference each other when I attempt to load one of those beans I get an OutOfMemoryException because of an infinite loop.  Example:  \ \ \ \ \ \  Even if circular references of non singleton scoped beans is not supported we should probably not have an infinite loop if it's possible to avoid.  Mike  ---  **Affects:** 2.0 final  **Issue Links:** - #7379 Circular references between custom scoped beans should be supported (_**""depends on""**_)","closed","in: core,","spring-projects-issues","2006-10-27T05:04:28Z","2019-01-11T21:00:41Z"
"","7404","MBeanRegistrationSupport.doRegister does not take into account servers that change ObjectName on register (Websphere) [SPR-2716]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2716](https://jira.spring.io/browse/SPR-2716?redirect=false)** and commented  When you register an Objectname with websphere if it is not a complete object name (specifying the cell, node, etc) then websphere will automatically append that information when it registers the mbean.  This is fine, however, websphere from that point forward does not recognize the partial name so attempts to remove the mbean with the partial name will fail.  To fix this problem MBeanRegistrationSupport.doRegister() needs to use the ObjectName from the ObjectInstance  returned from registerMBean instead of the objectName passed into doRegister().  If you have trouble following what I'm saying I can submit a patch.  Mike   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","in: core,","spring-projects-issues","2006-10-16T07:10:00Z","2012-06-19T03:50:04Z"
"","7310","Unable to load compile time woven @Configurable classes in Websphere 6.1 [SPR-2621]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2621](https://jira.spring.io/browse/SPR-2621?redirect=false)** and commented  I have some `@Configurable` classes that I've woven at compile time.  These classes work just find when I use them in a webapp running in Tomcat.  When I attempt to run them in Websphere 6.1 I get a ClassNotFoundException.  The class not found is the class I've woven with `@Configurable`.  It doesn't provide any caused bys to help identify if it is something else in that class.  I have several `@Configurable` classes all very different and none of them can be loaded in Websphere 6.1.  But all of the other classes I have in the same jar get loaded just fine.  I have aspectjrt, aspectjweaver, and asm all in the lib folder of my war.  Here is the stacktrace, though it probaby won't be much help.  I've `@Configured` a custom HibernateTransactionLookup class allowing me to inject a JTATransactionManager.  java.lang.ClassNotFoundException: org.lds.stack.spring.jpa.hibernate.HibernateConfigurableTransactionLookup at java.lang.Class.forName(Class.java:131) at org.hibernate.util.ReflectHelper.classForName(ReflectHelper.java:102) at org.hibernate.transaction.TransactionManagerLookupFactory.getTransactionManagerLookup(TransactionManagerLookupFactory.java:41) at org.hibernate.transaction.JTATransactionFactory.configure(JTATransactionFactory.java:48) at org.hibernate.transaction.TransactionFactoryFactory.buildTransactionFactory(TransactionFactoryFactory.java:51) at org.hibernate.cfg.SettingsFactory.createTransactionFactory(SettingsFactory.java:389) at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:121) at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:1928) at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1211) at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:631) at org.hibernate.ejb.Ejb3Configuration.createEntityManagerFactory(Ejb3Configuration.java:760) at org.hibernate.ejb.Ejb3Configuration.createContainerEntityManagerFactory(Ejb3Configuration.java:350) at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:119) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:261) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:227) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:957) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:924) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.createAspectJAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:177) at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:137) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:68) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:54) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:247) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:301) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:933) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:198) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:116) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:102) at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:132) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:68) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:54) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:247) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:301) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:933) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:303) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:999) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:961) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:924) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:198) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:111) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:641) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:393) at org.lds.stack.spring.context.WebContextSingletonBeanFactoryLocator.useBeanFactory(WebContextSingletonBeanFactoryLocator.java:38) at org.lds.stack.spring.context.BootstrapContextLoader.createWebApplicationContext(BootstrapContextLoader.java:29) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at com.ibm.ws.wswebcontainer.webapp.WebApp.notifyServletContextCreated(WebApp.java:605) at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinish(WebApp.java:265) at com.ibm.ws.wswebcontainer.webapp.WebApp.initialize(WebApp.java:271) at com.ibm.ws.wswebcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:88) at com.ibm.ws.wswebcontainer.VirtualHost.addWebApplication(VirtualHost.java:157) at com.ibm.ws.wswebcontainer.WebContainer.addWebApp(WebContainer.java:653) at com.ibm.ws.wswebcontainer.WebContainer.addWebApplication(WebContainer.java:606) at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:333) at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:549) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1295) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1129) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:567) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:814) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:948) at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:2114) at com.ibm.wsspi.runtime.component.WsComponentImpl$_AsynchInitializer.run(WsComponentImpl.java:340) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1498)   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-09-21T05:03:45Z","2019-01-11T21:12:54Z"
"","7271","Create standard @Configurable classes for integration lookups [SPR-2582]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2582](https://jira.spring.io/browse/SPR-2582?redirect=false)** and commented  The new `@Configurable` stuff seems like it would work great for solving some integration problems where a Lookup class is provided.  I know for one Hibernate has lookup classes for TransactionManager and CacheProvider.  It would be great to make a transactionManager and cacheProvider Lookup class that came prewoven with `@Configurable`.  These lookup classes would also be useful in Hibernate's JPA integration.  There are probably other itnegrations that would benefit from `@Configurable` lookup classes.  Mike   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-13T05:49:36Z","2012-06-19T09:37:37Z"
"","7244","Using proxyTargetClass on cglib enhanced bean loses interfaces added to that cglib bean [SPR-2555]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2555](https://jira.spring.io/browse/SPR-2555?redirect=false)** and commented  I have a spring bean that I have added interfaces to using a cglib enhanced class.  If I attempt to create an aop proxy using ""proxyTargetClass"" then Cglib2AopProxy.getProxy() correctly uses the super class to create it's proxy.  However, in doing that I lose the interfaces that I applied when I custom enhanced the super class.  To fix this Cglib2AopProxy.getProxy() needs to add all of the interfaces previously applied to the proxied class that it strips away.  That way my proxied class does not lose it's types when Spring advices it.  Mike   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-09-07T06:52:10Z","2019-01-11T19:20:54Z"
"","7227","PersistenceUnitReader.findSchemaResource should do classpath*:**/ search last [SPR-2538]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2538](https://jira.spring.io/browse/SPR-2538?redirect=false)** and commented  Because classpath*:**/ can cause problems in different environments perhaps it would be a good idea to do the global search last after org and com or catch file not found exceptions when searching the root.  See #7226.  ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-09-05T05:36:58Z","2019-01-11T19:21:41Z"
"","7226","classpath*:**/  fails in websphere 6.1 [SPR-2537]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2537](https://jira.spring.io/browse/SPR-2537?redirect=false)** and commented  classpath*:** does not work with websphere 6.1.  It fails with the exception below.  If the url is changed to classpath*:com/** so that it is not searching the default then the pattern will not throw the error.  It seems like I remember seeing this documented somewhere before but I couldn't find a bug report for it.  Mike  java.io.FileNotFoundException: URL [bundleresource://21/] cannot be resolved to absolute file path because it does not reside in the file system: bundleresource://21/ at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java) at org.springframework.core.io.UrlResource.getFile(UrlResource.java:118) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingFileResources(PathMatchingResourcePatternResolver.java:456) at org.springframework.web.context.support.ServletContextResourcePatternResolver.doFindPathMatchingFileResources(ServletContextResourcePatternResolver.java:88) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:334) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:255)   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-09-05T05:34:39Z","2012-06-19T03:50:56Z"
"","7049","aspectj-autoproxy does not detect lazy-init aspects anymore [SPR-2360]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2360](https://jira.spring.io/browse/SPR-2360?redirect=false)** and commented  I'm using rc3 snapshot build 88.  My AspectJ annotated aspects appear to have stopped working.  See the testcase below.  I originally noticed the problem because I had an aspect using `@within`() which stopped intercepting method calls on my beans with the specified annotation decaired.  This exact test works fine in rc1.  --------------TestAspect----------------- `@Aspect` public class TestAspect {      @Around(""execution(public * *(..))"")     public Object testAroundAspect(ProceedingJoinPoint pjp) throws Throwable {     	System.out.println(""We're in aspect"");     	return pjp.proceed();     }  }  -------------------TestClass.java--------------- public class TestClass { public String test() { System.out.println(""Executing test""); return null; } }  -----------------Test Context----------------                     ---  **Affects:** 2.0 RC3  **Attachments:** - [AspectJAutoProxyTest.zip](https://jira.spring.io/secure/attachment/11844/AspectJAutoProxyTest.zip) (_4.26 kB_)","closed","in: core,","spring-projects-issues","2006-07-27T05:03:51Z","2012-06-19T03:51:07Z"
"","7048","Multi level Web App context configuration throws StackOverFlowError in debug mode [SPR-2359]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2359](https://jira.spring.io/browse/SPR-2359?redirect=false)** and commented  I'm trying out 2.0 rc3-SNAPSHOT build 88.  I'm running a webapp using Eclipse WTP.  The application works fine with RC1.  When I upgraded to the SNAPSHOT everything continues to work fine when I launch my server in non degug mode.  But when I launch my server in debug mode I get a StackOverflowError.  I know my problem sounds suspect but I can switch my version of spring from RC1 to RC3-SNAPSHOT and consistently have no error with RC1 and always get the stackoverflow error with the RC3-SNAPSHOT build 88.  Below is the stacktrace, serviceLoader.xml, and a snippet of web.xml.  All other context files are empty.  By setting a break point in the middle of the findPathMatchingResources loop I can see the resource it is trying to resolve is the ""classpath*:/service-context/**/*Context.xml"" of serviceContext.  --------------------------web.xml snippet-------------------- \ \contextConfigLocation\ \ /WEB-INF/view-context/**/\*Context.xml \ \ \ \locatorFactorySelector\ \ classpath*:/org/lds/stack/service/serviceLoader.xml \ \ \ \parentContextKey\ \serviceContext\ \  --------------serviceLoader.xml--------------------------  \  \                                                                   classpath*:/service-context/**/*Context.xml                             \  --------------------------Stacktrace------------------------------- 09:42:46,156 ERROR ContextLoader: Context initialization failed org.springframework.beans.factory.access.BootstrapException: Unable to return specified BeanFactory instance: factory key [serviceContext], from group with resource name [classpath*:/org/lds/stack/service/serviceLoader.xml]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serviceContext' defined in URL [jar:file:/C:/projects/Stack/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/webapps/joe/WEB-INF/lib/stack-code-2.0-SNAPSHOT.jar!/org/lds/stack/service/serviceLoader.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlApplicationContext]: Constructor threw exception; nested exception is java.lang.StackOverflowError Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serviceContext' defined in URL [jar:file:/C:/projects/Stack/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/webapps/joe/WEB-INF/lib/stack-code-2.0-SNAPSHOT.jar!/org/lds/stack/service/serviceLoader.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlApplicationContext]: Constructor threw exception; nested exception is java.lang.StackOverflowError Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlApplicationContext]: Constructor threw exception; nested exception is java.lang.StackOverflowError Caused by: java.lang.StackOverflowError at java.lang.String.indexOf(String.java:1564) at java.lang.String.indexOf(String.java:1546) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.determineRootDir(PathMatchingResourcePatternResolver.java:353) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:321) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:265) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:323) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:265) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:323) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:265) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:323) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:265) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:323) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:265) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:323) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:265)    ---  **Affects:** 2.0 RC3  **Attachments:** - [TestClassPathXmlApplicationContext.zip](https://jira.spring.io/secure/attachment/11843/TestClassPathXmlApplicationContext.zip) (_3.32 kB_)","closed","in: core,","spring-projects-issues","2006-07-27T02:58:18Z","2012-06-19T03:50:20Z"
"","7039","BeanCurrentlyInCreationException for config that workes in rc1 [SPR-2350]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2350](https://jira.spring.io/browse/SPR-2350?redirect=false)** and commented  This is actually a bug in the SNAPSHOT build 85.  I had a configuration that didn't work in RC2 and a bug was filed to fix it. #6967 That bug was fixed so I tried rc3 build 85 to see if my config worked and I am now getting a BeanCurrentlyInCreationException.  Below is my configuration and I've attached the stacktrace.  The only non spring bean is the ServiceProxyAspect which is a simple AspectJ annotated aspect.  \ \\\  \                                              	                                        	     	     	                              	     	     		     			     			     			     		     	     	     		     			     		     	     	                    	                    	       \  ---  **Affects:** 2.0 RC2  **Attachments:** - [exception.txt](https://jira.spring.io/secure/attachment/11841/exception.txt) (_11.86 kB_)","closed","in: core,","spring-projects-issues","2006-07-26T03:07:56Z","2019-01-11T18:35:19Z"
"","7019","JSF EL FactoryBean to inject values obtained from a JSF expression [SPR-2330]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2330](https://jira.spring.io/browse/SPR-2330?redirect=false)** and commented  It would be quite handy for developers moving from JSF managed beans to Spring scoped beans if they had a way to inject values based on a JSF expression.  This feature would become even more valuable when coupled with a NamespaceHandler so that jsf expressions can be injected into a dependent bean using a syntax such as .  If this issue is accepted I would be more than happy to provide a proper patch with the FactoryBean, Namespacehandler, and unit tests.   Below is an example implementation of such a FactoryBean:  package org.lds.stack.spring.jsf;  import javax.faces.context.FacesContext; import javax.faces.el.ValueBinding;  import org.springframework.beans.factory.FactoryBeanNotInitializedException; import org.springframework.beans.factory.config.AbstractFactoryBean;  /** * FactoryBean that returns the result of a JSF EL expression.  * `@author` youngm   */   public class FacesELFactoryBean extends AbstractFactoryBean {   private String expression;    public FacesELFactoryBean() {   setSingleton(false);   }    `@Override`   protected Object createInstance() {   FacesContext facesContext = FacesContext.getCurrentInstance();   if(facesContext == null) {   throw new FactoryBeanNotInitializedException(""FacesContext could not be found.  Ensure the target of this dependency is not a singleton and that you are executing within a FacesServlet."");   }   ValueBinding valueBinding = facesContext.getApplication().createValueBinding(expression);   return valueBinding.getValue(facesContext);   }    public Class getObjectType() {   FacesContext facesContext = FacesContext.getCurrentInstance();   if(facesContext == null) {   //Return null here because the type cannot be determined at this time.   return null;   }   ValueBinding valueBinding = facesContext.getApplication().createValueBinding(expression);   return valueBinding.getType(facesContext);   }    /**    * The expression to evaluate in the FactoryBean.  Must be written like an expresison.   * being surrounded with #{...}   * `@param` expression     */     public void setExpression(String expression) {     this.expression = expression;     }     }    ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-20T02:33:01Z","2009-08-02T23:28:47Z"
"","7018","aop:scoped-proxy perhaps should be changed from decorator to Parser [SPR-2329]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2329](https://jira.spring.io/browse/SPR-2329?redirect=false)** and commented  Unless I am mistaken I believe the core value in aop:scoped-proxy is to help eliminate scope impedance mismatches.  So if I inject a request bean into a session bean the request bean's scope will not be swallowed up by the session bean's scope.  Since the use of scoped-proxy is dependent upon what bean it is being injected into and not the nature of the bean itself I was thinking that perhaps aop:scoped-proxy should be changed to a Parser or perhaps a parser version of scoped-proxy could be added.  That way the bean being injected will only be proxied when it is necessary depending upon the particular case of the bean it is being injected into.  So a request bean injected into a session bean could look more like this:  \ \ \ \ \ \ \ Mike   ---  **Affects:** 2.0 RC2  2 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-20T02:15:08Z","2012-06-19T09:37:31Z"
"","6999","add proxyTargetClass to tx:annotation-driven [SPR-2310]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2310](https://jira.spring.io/browse/SPR-2310?redirect=false)** and commented  It would be nice to add a proxyTargetClass to tx:annotation-driven.  Mike   --- No further details from [SPR-2310](https://jira.spring.io/browse/SPR-2310?redirect=false)","closed","in: data,","spring-projects-issues","2006-07-17T06:39:27Z","2019-01-11T18:33:00Z"
"","6991","Unable to inject null value from FactoryBean [SPR-2302]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2302](https://jira.spring.io/browse/SPR-2302?redirect=false)** and commented  I'm attempting to inject a nullable value from a FactoryBean(see #6810).  Fixing #6810 has gotten me closer to my goal But I've found a place in AbstractAutowireCapableBeanFactory:287 that is throwing an exception when my FactoryBean returns a null result.  Would it be possible to remove this null check as well?  With the removal of this check I think I will finally be able to inject nullable values into my beans.  Mike  ---  **Affects:** 2.0 RC1","closed","in: core,","spring-projects-issues","2006-07-14T05:27:27Z","2019-01-11T18:33:40Z"
"","7275","Cannot configure LocalSessionFactoryBean declarative caching for second-pass associations [SPR-2586]","**[Mike Dillon](https://jira.spring.io/secure/ViewProfile.jspa?name=md5)** opened **[SPR-2586](https://jira.spring.io/browse/SPR-2586?redirect=false)** and commented  When using the LocalSessionFactoryBean, it is not possible to use ""entityCacheStrategies"" for associations that Hibernate builds during its ""second pass compile"". This includes collections attached to subclasses of polymorphic mappings.  The fix is simple. In between the code that processes ""mappingDirectoryLocations"" and ""entityCacheStrategies"" in LocalSessionFactoryBean, a call to Configuration.buildMappings() should be added (around line 763 in SVN). This will cause Hibernate to do second-pass resolution of mapping properties to allow these missing collections to be seen in the subsequent call to Configuration.setCacheConcurrencyStrategy().   ---  **Affects:** 1.2.8, 2.0 RC3  **Attachments:** - [spr-2586.tar.gz](https://jira.spring.io/secure/attachment/13046/spr-2586.tar.gz) (_12.16 kB_)","closed","type: enhancement,","spring-projects-issues","2006-09-14T09:59:10Z","2012-06-19T03:51:01Z"
"","7635","Update PropertyEditorRegistrySupport to register a URIEditor as a default editor [SPR-2949]","**[Michael Pilquist](https://jira.spring.io/secure/ViewProfile.jspa?name=mpilquist)** opened **[SPR-2949](https://jira.spring.io/browse/SPR-2949?redirect=false)** and commented  PropertyEditorRegistrySupport currently supports URLs but not URIs.  This enhancement request is to register a URIEditor as one of the default editors.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-13T09:46:51Z","2012-06-19T03:50:34Z"
"","7177","jar paths in build.bat files for showcases subdirectories don't correctly reference spring root directory [SPR-2488]","**[Michael Leditschke](https://jira.spring.io/secure/ViewProfile.jspa?name=mleditschke)** opened **[SPR-2488](https://jira.spring.io/browse/SPR-2488?redirect=false)** and commented  The build.bat files in the showcases subdirectories do not go far enough back up the tree to correctly pick up the relevant jar files - they need an extra ""../"". Once I added this to each jar file specification, the builds all worked correctly.   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-27T00:07:02Z","2012-06-19T03:50:06Z"
"","7015","Treat start/stop Lifecycle of beans like the init/destroy events [SPR-2326]","**[Michael Kanaley](https://jira.spring.io/secure/ViewProfile.jspa?name=mkanaley)** opened **[SPR-2326](https://jira.spring.io/browse/SPR-2326?redirect=false)** and commented  Spring 2.0 now supports ApplicationContexts implementing the Lifecycle interface. I would like to see the start/stop functionality treated identically to that of init/destroy in the following way:  - sending of an ApplicationEvent after start and before stop   Currently init and destroy of ApplicationContexts send events as well. I would like to see this for start/stop too.    ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-19T09:45:00Z","2019-01-11T18:31:59Z"
"","7014","Treat start/stop Lifecycle of beans like the init/destroy events [SPR-2325]","**[Michael Kanaley](https://jira.spring.io/secure/ViewProfile.jspa?name=mkanaley)** opened **[SPR-2325](https://jira.spring.io/browse/SPR-2325?redirect=false)** and commented  Spring 2.0 now supports beans implementing the Lifecycle interface. I would like to see the start/stop functionality treated identically to that of init/destroy in the following ways:  - declarative specification of start/stop methods.   The bean element in the Spring XML configuration has init-method and destroy-method. I would like to see start-method and stop-method added so that beans are not required to implement any Spring interface to use this feature.  - preserve start/stop order   When initializing, beans are initialized by taking dependencies into consideration. Currently the implementation of start/stop does not take order into consideration so no two Lifecycle beans could rely on any order of being started. The start order should be the same as the init order. The stop order should be the reverse of the init order.  ---  **Affects:** 2.0 RC2  **Issue Links:** - #8508 Lifecycle methods based on annotations","closed","type: enhancement,","spring-projects-issues","2006-07-19T09:41:00Z","2019-01-11T18:32:04Z"
"","7597","NamedParameterUtils prints SQL to System.out [SPR-2910]","**[Michael Baranov](https://jira.spring.io/secure/ViewProfile.jspa?name=teddybear)** opened **[SPR-2910](https://jira.spring.io/browse/SPR-2910?redirect=false)** and commented  NamedParameterUtils prints SQL to System.out, but should use logger to print   ---  **Affects:** 2.0 RC3","closed","","spring-projects-issues","2006-12-04T07:05:40Z","2019-01-11T22:00:52Z"
"","7480","Adding extra path support to PreferencesPlaceholderConfigurer [SPR-2793]","**[Melih Çetin](https://jira.spring.io/secure/ViewProfile.jspa?name=mscetin)** opened **[SPR-2793](https://jira.spring.io/browse/SPR-2793?redirect=false)** and commented  Properties resolved by PreferencesPlaceholderConfigurer currently does not allow any extra path specification. Since you can have only one PreferencesPlaceholderConfigurer configured per configuration file, it is not possible to get properties resolved using different paths for preferences keys even if they come from a common root node.   ---  **Affects:** 2.0 final  **Attachments:** - [changes.zip](https://jira.spring.io/secure/attachment/12080/changes.zip) (_2.98 kB_)","closed","type: enhancement,","spring-projects-issues","2006-11-02T02:01:19Z","2012-06-19T03:50:14Z"
"","7830","Inner FactoryBeans created by a NamespaceHandler do not receive unique ids, messing up the FactoryBean cache [SPR-3144]","**[Maxim Petrashev](https://jira.spring.io/secure/ViewProfile.jspa?name=mpetrashev)** opened **[SPR-3144](https://jira.spring.io/browse/SPR-3144?redirect=false)** and commented  Configuration: \ \      \ \  Exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name '/order.flow' defined in ServletContext resource [/order/context.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.util.LinkedHashMap] to required type [org.springframework.webflow.executor.FlowExecutor] for property 'flowExecutor'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [java.util.LinkedHashMap] to required type [org.springframework.webflow.executor.FlowExecutor] for property 'flowExecutor': no matching editors or conversion strategy found Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessException details (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.util.LinkedHashMap] to required type [org.springframework.webflow.executor.FlowExecutor] for property 'flowExecutor'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [java.util.LinkedHashMap] to required type [org.springframework.webflow.executor.FlowExecutor] for property 'flowExecutor': no matching editors or conversion strategy found Caused by: java.lang.IllegalArgumentException: Cannot convert value of type [java.util.LinkedHashMap] to required type [org.springframework.webflow.executor.FlowExecutor] for property 'flowExecutor': no matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:224) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:139) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:772) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:606) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(AbstractPropertyAccessor.java:49) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:74) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57) at org.springframework.beans.factory.support.AbstractBeanFactory.applyPropertyValues(AbstractBeanFactory.java:840) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1026) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:809) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:250) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:247) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:161) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:273) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:346) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:308) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:252) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:221) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:115) at javax.servlet.GenericServlet.init(GenericServlet.java:211) at org.springframework.webflow.jpa.AbstractModuleTest.createDispatcherServlet(AbstractModuleTest.java:167) at org.springframework.webflow.jpa.AbstractModuleTest.getDispatcherServlet(AbstractModuleTest.java:93) at org.springframework.webflow.jpa.AbstractModuleTest.setUp(AbstractModuleTest.java:67) at junit.framework.TestCase.runBare(TestCase.java:125) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.textui.TestRunner.doRun(TestRunner.java:116) at com.intellij.rt.execution.junit.IdeaTestRunner.doRun(IdeaTestRunner.java:69) at junit.textui.TestRunner.doRun(TestRunner.java:109) at com.intellij.rt.execution.junit.IdeaTestRunner.startRunnerWithArgs(IdeaTestRunner.java:24) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:118) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)   ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-02-04T06:47:02Z","2012-06-19T03:50:58Z"
"","7241","find methods with types in HibernateTemplate [SPR-2552]","**[Maxim Gordienko](https://jira.spring.io/secure/ViewProfile.jspa?name=fuzebest)** opened **[SPR-2552](https://jira.spring.io/browse/SPR-2552?redirect=false)** and commented  It would be nice to have find methods with parameter types specified in HibernateTemplate. At least find(), findByNamedParam(), findByNamedQuery(), findByNamedQueryAndNamedParam().  On certain databases hibernate does not correctly map nulls, explicit type declaration required. Now the only way to do this - use HibernateCallback.   --- No further details from [SPR-2552](https://jira.spring.io/browse/SPR-2552?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-09-07T04:34:50Z","2012-06-19T09:37:30Z"
"","6879","LocalSessionFactoryBean does not support multiple schemas with hsqldb [SPR-2188]","**[Mattias Jiderhamn](https://jira.spring.io/secure/ViewProfile.jspa?name=mate)** opened **[SPR-2188](https://jira.spring.io/browse/SPR-2188?redirect=false)** and commented  If ""schemaUpdate"" is set on org.springframework.orm.hibernate3.LocalSessionFactoryBean, the tables will automatically be created, which is particularily useful for unit tests with in-memory databases using hsqldb. However, if you are using multiple schemas, this will not work. To have the schemas automatically created, one has to put a ""database-object"" instruction into the Hibernate mapping file (see http://forum.hibernate.org/viewtopic.php?p=2305138). To have the schema creation executed, the call in LocalSessionFactoryBean.afterPropertiesSet() must be createDatabaseSchema() rather than createDatabaseSchema().  I would like to see a new property in LocalSessionFactoryBean that allows for schema creation rather than schema update.  The obvious workaround for this is to subclass LocalSessionFactoryBean and fix this yourself...   ---  **Affects:** 1.2.8","closed","type: enhancement,","spring-projects-issues","2006-06-26T00:14:46Z","2012-06-19T09:37:34Z"
"","7065","LobCreator should support updatable resultsets [SPR-2376]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-2376](https://jira.spring.io/browse/SPR-2376?redirect=false)** and commented  LobCreator supports creating and setting lobs on PreparedStatements whereas you're out of luck if you want to work on an updatable resultset.  To enable that, I would suggest the following changes: * add setBlobAsXXX(ResultSet, ...) to LobCreator * straightforward implementation in DefaultLobCreator * OracleLobCreator:   * createLob/getOracleConnection take a Statement instead of PreparedStatement   * setBlobAsXXX(ResultSet) pass in rs.getStatement() to create the lob   * pull out the various LobCallbacks into static inner classes  Greetings! Matthias   ---  **Affects:** 1.2.8  **Attachments:** - [DefaultLobHandler.java](https://jira.spring.io/secure/attachment/11850/DefaultLobHandler.java) (_6.08 kB_) - [LobCreator.java](https://jira.spring.io/secure/attachment/11849/LobCreator.java) (_8.77 kB_) - [OracleLobHandler.java](https://jira.spring.io/secure/attachment/11851/OracleLobHandler.java) (_18.95 kB_)","closed","type: enhancement,","spring-projects-issues","2006-08-01T19:56:33Z","2006-09-13T01:41:09Z"
"","7132","does not have name attribute [SPR-2443]","**[Matthew Tatum](https://jira.spring.io/secure/ViewProfile.jspa?name=matthew%20tatum)** opened **[SPR-2443](https://jira.spring.io/browse/SPR-2443?redirect=false)** and commented  The form:form tag does not support the name attribute, and it would be nice if it did (optionally of course). I know it is not part of the Xhtml 1.0 standard but we have lots of legacy javascript code that won't work without the name attribute.  Just would make my life easier I don't know whether that's enough of a reason to add it in!   ---  **Affects:** 2.0 RC3  3 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-18T01:24:16Z","2012-06-19T03:50:54Z"
"","7799","New OncePerRequestInterceptor (to mirror corresponding Filter) [SPR-3112]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-3112](https://jira.spring.io/browse/SPR-3112?redirect=false)** and commented  It would be nice to have a OncePerRequestInterceptor that mirrored the functionality present in the OncePerRequestFilter.  I've found it much more convenient to work with HandlerInterceptors configured by Spring than it is to work with Filters managed by the servlet container.  However, as I implement Interceptors, I find myself missing the convenience of the built-in OncePerRequestFilter that I used as the base class for most of my filters.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2007-02-05T07:50:20Z","2012-06-18T12:44:22Z"
"","7792","Register vcard, vcalendar and icalendar mime.types [SPR-3105]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-3105](https://jira.spring.io/browse/SPR-3105?redirect=false)** and commented  To make a long story short, I recommend adding these lines to org\springframework\mail\javamail\mime.types at line 42 (in the ""text types"" section)  1. vCard    text/x-vCard				vcf 2. vCalendar    text/x-vCalendar			vcs 3. iCalendar    text/calendar				ics  Here is an explanation of what these types are, and links to their specifications which detail what the mime type and extensions should be for these types  icalendar http://tools.ietf.org/html/rfc2445 text/calendar (section 3.1) ics (section 3.10)  vcalendar http://www.imc.org/pdi/pdiproddev.html text/x-vCalendar (section 3.1.2) vcs (section 4.1)  vcard http://www.imc.org/pdi/pdiproddev.html text/x-vCard (section 3.1.2, 3.2) vcf (section 4.1)  To refresh your memory, there is precedent for having these types registered in Spring (and Spring already supports much more obscure types)  http://opensource.atlassian.com/projects/spring/browse/SPR-637  Note that vcard and vcalendar mime types are not officially recognized by the body that is in charge of all mime type registrations, the IANA (see http://www.iana.org/assignments/media-types/).  However, many of the types already supported by Spring are not officially registered with IANA.  For example, the ""Kodak Photo CD"" image format, image/x-photo-cd, is included in the mime.types file now but not officially recognized by IANA.  Looking at this link http://www.iana.org/assignments/media-types/ it seems there are many more mime types that could be added to the mime.types file in Spring.  It also seems some types that were formally non-standard have been registered with IANA.  Namely image/x-png seems to now be image/png.  If you would like me to enter a separate enhancement to synchronize the mime.types file with the types registered with the IANA, I will do so.  My immediate concern is really just vcalendar files, because my app sends those out in emails (and it seems something a slick Spring app would be likely to want to do).   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2007-02-02T07:14:56Z","2012-06-19T09:37:25Z"
"","7737","Spring MVC should wait on responding to requests if context is reloading [SPR-3051]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-3051](https://jira.spring.io/browse/SPR-3051?redirect=false)** and commented  If the application context behind a DispatcherServlet is being reloaded, the DispatcherServlet should wait to respond to the request rather than blowup.  Here's what happens in my app if you try to access the application while the servlet context is in the middle of reloading:  org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext Caused by: java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:118) at org.springframework.context.support.AbstractApplicationContext.containsBean(AbstractApplicationContext.java:650) at org.springframework.web.servlet.view.BeanNameViewResolver.resolveViewName(BeanNameViewResolver.java:71) at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1100) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1044) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:827) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:736) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:350) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.gzipfilter.CompressionFilter.doFilter(CompressionFilter.java:148) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.ContentTypeFilter.doFilterInternal(ContentTypeFilter.java:125) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:77) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.springx.AvailableResourceFilter.doFilterInternal(AvailableResourceFilter.java:110) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:77) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.RequestLogFilter.doFilter(RequestLogFilter.java:42) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:619)  Forgive me if this is a side-effect of http://opensource.atlassian.com/projects/spring/browse/SPR-94 or is entered somewhere else.  There are hundreds of bugs that match ""servlet context refresh"" in JIRA ;)  I would like to add that the reason I am refreshing my context in the middle of a running application is to allow addition and deletion of databases to my application through the application itself by writing database information to a Spring XML file stored on the file system.   ---  **Affects:** 2.0 final  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-18T07:26:27Z","2015-09-22T17:34:38Z"
"","7736","Translate Hibernate's GenericJDBCException using SQLErrorCodeSQLExceptionTranslator (by default) [SPR-3050]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-3050](https://jira.spring.io/browse/SPR-3050?redirect=false)** and commented  org.hibernate.JDBCExceptions are simply wrapped as HibernateJdbcExceptions (in SessionFactoryUtils.convertHibernateAccessException), a subclass of UncategorizedDataAccessException.  This behavior is IMO incorrect.  Instead, I submit the JDBC Exception should be passed along to the JDBC exception translator to attempt to find the correct Spring exception.  I have an example which demonstrates an underlying problem acquiring locks in MySQL is incorrectly translated to an UncategorizedDataAccessException, despite the fact that the underlying error code is correctly mapped in sql-error-codes.xml.  Here is the stack trace:  DEBUG [http-80-Processor22] (DispatcherServlet:processHandlerException) - Handler execution resulted in exception - forwarding to resolved error view: ModelAndView: reference to view with name 'errorView'; model is {exception=org.springframework.orm.hibernate3.HibernateJdbcException: JDBC exception on Hibernate data access; nested exception is org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update} org.springframework.orm.hibernate3.HibernateJdbcException: JDBC exception on Hibernate data access; nested exception is org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update Caused by: org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:103) at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:91) at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43) at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:202) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:235) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:140) at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:297) at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27) at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:985) at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:333) at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:106) at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:558) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:540) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:510) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:310) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:117) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:209) at $Proxy9.handleRequest(Unknown Source) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:45) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:806) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:736) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:360) at javax.servlet.http.HttpServlet.service(HttpServlet.java:709) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.gzipfilter.CompressionFilter.doFilter(CompressionFilter.java:148) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.ContentTypeFilter.doFilterInternal(ContentTypeFilter.java:125) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:77) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.springx.AvailableResourceFilter.doFilterInternal(AvailableResourceFilter.java:110) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:77) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.RequestLogFilter.doFilter(RequestLogFilter.java:42) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:619) Caused by: java.sql.BatchUpdateException: Lock wait timeout exceeded; try restarting transaction at com.mysql.jdbc.ServerPreparedStatement.executeBatch(ServerPreparedStatement.java:647) at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:294) at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:58) at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:195) ... 53 more  In the attached screenshot, I show all of the information regarding these exceptions as viewed through Eclipse.  The exception thrown by Hibernate is a GenericJDBCException, which contains a nested reference to a java.sql.BatchException.  The BatchException has vendorCode 1205, which in sql-error-codes.xml is correctly mapped as one of the CannotAcquireLockCodes.   ---  **Affects:** 2.0 final  **Attachments:** - [screenshot-1.jpg](https://jira.spring.io/secure/attachment/12343/screenshot-1.jpg) (_259.51 kB_)","closed","type: enhancement,","spring-projects-issues","2007-01-18T04:55:16Z","2012-06-19T03:50:24Z"
"","7467","Add HTTP cache control options to SimpleMappingExceptionResolver [SPR-2780]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2780](https://jira.spring.io/browse/SPR-2780?redirect=false)** and commented  The SimpleMappingExceptionResolver offers no direct way to set HTTP caching behavior for error views.  It would be nice to add a cacheSeconds property similar to the one offered by subclasses of WebContentGenerator (such as AbstractController).  Note this bug is related to bug 2779, which is an enhancement request to decouple HTTP cache controlling code from the WebContentGenerator class.  Here is a link to that report:  http://opensource.atlassian.com/projects/spring/browse/SPR-2779  ---  **Affects:** 2.0 final  **Issue Links:** - #7466 HTTP caching should be decoupled from WebContentGenerator (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2006-10-30T08:25:29Z","2019-01-11T21:06:20Z"
"","7466","HTTP caching should be decoupled from WebContentGenerator [SPR-2779]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2779](https://jira.spring.io/browse/SPR-2779?redirect=false)** and commented  The WebContentGenerator class has several methods that help manage HTTP caching for controllers (cacheForSeconds, preventCaching, etc).  These methods are great for controllers that extend from WebContentGenerator (or one of its subclasses like AbstractController) but are unavailable if you have a controller that doesn't want to or can't extend from WebContentGenerator or one of its subclasses.  It's also unavailable if you are using a HandlerInterceptor to catch exceptions and forward to a special exception view.  I recommend the HTTP caching methods be moved into a new class to which WebContentGenerator delegates.  The new class could be called HttpCacheHelper or something similar.  I ran into this in my application because we have HandlerInterceptors that redirect to JSPs if certain conditions are met.  For example, if a user doesn't have the correct permissions to view a page a HandlerInterceptor sends them to a page that lets the user know they don't have permission to view the page they requested.  This is also a problem with ExceptionResolvers.  They currently do not offer an easy way to work with HTTP caching out-of-the-box.  I will open a separate bug report for that.  ---  **Affects:** 2.0 final  This issue is a sub-task of #16413  **Issue Links:** - #7467 Add HTTP cache control options to SimpleMappingExceptionResolver (_**""is depended on by""**_) - #13194 Provide controller method level alternative to WebContentInterceptor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38f32e38169f7779b9fe20d46b69024039f190ce  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2006-10-30T08:22:38Z","2019-01-11T21:07:29Z"
"","7296","tag library should WARN instead of blowup when command missing [SPR-2607]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2607](https://jira.spring.io/browse/SPR-2607?redirect=false)** and commented  In lots of applications you have a view where you display information about an object in a database.  In our application, we sometimes allow simple manipulations of that object directly on the display page rather than requiring the user to go to a separate form.  I'll attach the screenshot of a screen where a user can view documents.  We allow them to upload a new revision of the document directly on that screen.  The screen that displays the document is rendered using an AbstractController as the base controller.  Uploading a revision is processed by a SimpleFormController which then forwards back to the display screen as its success view.  The  and other tags will work fine if I'm coming from the SimpleFormController, but don't work if I'm coming from a plain old AbstractController.  It would be very helpful if form tags just generated a WARNing if it can't find the command required rather than blowing up.  ERROR [http-80-Processor25] (ErrorsTag:doStartTag) - Neither Errors instance nor plain target object for bean name 'document' available as request attribute java.lang.IllegalStateException: Neither Errors instance nor plain target object for bean name 'document' available as request attribute at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:137) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:165) at org.springframework.web.servlet.tags.form.ErrorsTag.shouldRender(ErrorsTag.java:83) at org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(AbstractHtmlElementBodyTag.java:41) at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:90) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:77) at org.apache.jsp.documents.documentsDisplay_jsp._jspx_meth_form_errors_0(documentsDisplay_jsp.java:1198) at org.apache.jsp.documents.documentsDisplay_jsp._jspService(documentsDisplay_jsp.java:233) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:332) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:314) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:264) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)  ERROR [http-80-Processor25] (ViewExceptionInterceptor:afterCompletion) - Error while rendering view org.apache.jasper.JasperException: Exception in JSP: /documents/documentsDisplay.jsp:71  68: 			 71: 				 72: 			 73: 				\ 74: 					  Stacktrace: at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:504) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:387) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:314) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:264) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:463) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:398) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:301) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:112) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:248) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1055) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:819) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:728) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:350) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.ContentTypeFilter.doFilterInternal(ContentTypeFilter.java:125) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:77) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.springx.AvailableResourceFilter.doFilterInternal(AvailableResourceFilter.java:110) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:77) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.cms.framework.RequestLogFilter.doFilter(RequestLogFilter.java:38) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595)  ---  **Affects:** 2.0 RC4  **Attachments:** - [screenshot.jpg](https://jira.spring.io/secure/attachment/11968/screenshot.jpg) (_224.31 kB_)  **Issue Links:** - #10536 Allow null as modelAttribute on form:form binding - #6368 Option to expose empty value instead of NullValueInNestedPathException  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2006-09-19T04:35:32Z","2019-01-11T21:14:12Z"
"","6946","Reference doc chapter numbers are off [SPR-2257]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2257](https://jira.spring.io/browse/SPR-2257?redirect=false)** and commented  There are 2 chapter 2s ;)  Background information is the first chapter 2: http://static.springframework.org/spring/docs/2.0.x/reference/background.html What's New in Spring 2.0? is the second chapter 2: http://static.springframework.org/spring/docs/2.0.x/reference/new-in-2.html  Also when I click on ""4.16. Setting a bean property or constructor arg from a field value"" I am sent to http://static.springframework.org/spring/docs/2.0.x/reference/beans.html#d0e4212 but that just brings me to the top of the page instead of to that section (it looks like that section might not be written yet)  Also it looks like the numbers are off for the IoC container chapter.  In the TOC ""Glue code and the evil singleton"" is section 4.20 but in the actual document that is section 3.9.  That link doesn't work either.   ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-07-07T02:12:45Z","2012-06-19T03:52:26Z"
"","6939","Need new location for spring-beans.dtd for Spring 2.0 [SPR-2250]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2250](https://jira.spring.io/browse/SPR-2250?redirect=false)** and commented  Reference manual for Spring 2.0 (http://static.springframework.org/spring/docs/2.0.x/reference/springbeansdtd.html) still tells users to point to http://www.springframework.org/dtd/spring-beans.dtd, but that DTD is for Spring 1.x   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-06T12:18:18Z","2006-09-19T16:39:30Z"
"","6937","Documentation for ""message"" attribute of  misssing [SPR-2248]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2248](https://jira.spring.io/browse/SPR-2248?redirect=false)** and commented  It's missing in the JavaDoc documentation here:  http://static.springframework.org/spring/docs/2.0.x/taglib/index.html  which is accessed from the main documentationpage  http://www.springframework.org/documentation  It is correctly listed in the reference guide:  http://static.springframework.org/spring/docs/2.0.x/reference/spring.tld.html#spring.tld.message   ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-07-06T09:12:29Z","2012-06-19T03:52:35Z"
"","6935","Allow body content of  to specify label [SPR-2246]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2246](https://jira.spring.io/browse/SPR-2246?redirect=false)** and commented  Would be nice to do:      Instead of     ---  **Affects:** 2.0 RC1  **Issue Links:** - #7201 form:select does not provide I18N capabilities (_**""is depended on by""**_) - #7348 form:options tag does not support i18n (_**""is depended on by""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-06T07:56:29Z","2019-01-11T19:08:02Z"
"","6934","Improve error message when URL is invalid [SPR-2244]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2244](https://jira.spring.io/browse/SPR-2244?redirect=false)** and commented  Took me a while to figure this one out because I'm tired ;)  WARN [http-80-Processor24] (PageNotFound:noHandlerFound) - No mapping for [/scoreboard/spring/scoresReport&scorescardsScoresReportType=METRIC] in DispatcherServlet with name 'spring'  The problem is scoresReport&scorescardsScoresReportType=METRIC is not a valid URL.  It should have a ? instead of a &.  It would be nice if Spring said something more along the lines of ""Invalid URL: scoresReport&scorescardsScoresReportType=METRIC.  The first parameter in a URL should be denoted with a ? instead of a &""   --- No further details from [SPR-2244](https://jira.spring.io/browse/SPR-2244?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-07-06T02:44:23Z","2012-06-19T09:37:37Z"
"","6923","DispatcherServlet.noHandlerFound logging incorrect [SPR-2233]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2233](https://jira.spring.io/browse/SPR-2233?redirect=false)** and commented  Let me preface this by saying I know my use case is an edge case.  However, the logging produced at WARN level by DispatcherServlet.noHandlerFound is incorrect for this case and is **very** confusing.  Let me just start by saying what the fix is, and then come back to how the problem can be duplicated.  The current code for the method is:      protected void noHandlerFound(HttpServletRequest request, HttpServletResponse response) throws IOException {     	if (pageNotFoundLogger.isWarnEnabled()) {     		pageNotFoundLogger.warn(""No mapping for ["" + request.getRequestURI() +     				""] in DispatcherServlet with name '"" + getServletName() + ""'"");     	}     	response.sendError(HttpServletResponse.SC_NOT_FOUND);     }  In the case of a include done with , request.getRequestURI() returns the wrong path.  UrlPathHelper.getLookupPathForRequest needs to be used to get the correct path.  Here is my log output from a valid request.  In this case, in a JSP called closeDialogRefreshPane.jsp I correctly did a  to one of my controllers called '/dashboardsNav'  DEBUG [http-80-Processor24] (DispatcherServlet:doService) - DispatcherServlet with name 'spring' received request for [/scoreboard/common/closeDialogRefreshPane.jsp] DEBUG [http-80-Processor24] (DispatcherServlet:doService) - Taking snapshot of request attributes before include DEBUG [http-80-Processor24] (DispatcherServlet:doDispatch) - Bound request context to thread: org.apache.catalina.core.ApplicationHttpRequest@1f489d9 DEBUG [http-80-Processor24] (DispatcherServlet:getHandler) - Testing handler map [org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping@16a346a] in DispatcherServlet with name 'spring' DEBUG [http-80-Processor24] (BeanNameUrlHandlerMapping:getHandlerInternal) - Looking up handler for [/dashboardsNav] DEBUG [http-80-Processor24] (DispatcherServlet:getHandlerAdapter) - Testing handler adapter [org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter@1bd871] DEBUG [http-80-Processor24] (DispatcherServlet:getHandlerAdapter) - Testing handler adapter [org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter@1ba0609] DEBUG [http-80-Processor24] (DispatcherServlet:render) - Rendering view [org.springframework.web.servlet.view.InternalResourceView: name 'dashboardsNavView'; URL [/dashboards/dashboardsNav.jsp]] in DispatcherServlet with name 'spring'  Here is my log output from an invalid request.  I accidentally tried to do a  from closeDialogRefreshPane.jsp to the view '/calendarsNavView' instead of to my controller called '/calendarsNav':  DEBUG [http-80-Processor24] (DispatcherServlet:doService) - DispatcherServlet with name 'spring' received request for [/scoreboard/common/closeDialogRefreshPane.jsp] DEBUG [http-80-Processor24] (DispatcherServlet:doService) - Taking snapshot of request attributes before include DEBUG [http-80-Processor24] (DispatcherServlet:doDispatch) - Bound request context to thread: org.apache.catalina.core.ApplicationHttpRequest@1a34544 DEBUG [http-80-Processor24] (DispatcherServlet:getHandler) - Testing handler map [org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping@16a346a] in DispatcherServlet with name 'spring' DEBUG [http-80-Processor24] (BeanNameUrlHandlerMapping:getHandlerInternal) - Looking up handler for [/calendarsNavView] WARN [http-80-Processor24] (PageNotFound:noHandlerFound) - No mapping for [/scoreboard/common/closeDialogRefreshPane.jsp] in DispatcherServlet with name 'spring'  As you can see, the the PageNotFound logger says /common/closeDialogRefreshPane could not be found, when in fact it was already found and dispatched to, at which point an invalid  call is what's actually screwing things up.   ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-07-04T01:08:11Z","2012-06-19T03:52:50Z"
"","6909","Error in HandlerInterceptor JavaDoc [SPR-2219]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2219](https://jira.spring.io/browse/SPR-2219?redirect=false)** and commented  HandlerInterceptor.afterActionCompletion and HandlerInterceptor.afterRenderCompletion have identical documentation.  I assume the two different methods have slightly different purposes ;)  Same thing for preHandleRender and preHandleAction  It would also help if a complete listing of what is executed when was listed.  Right now it's pretty confusing.  For example:  - DispatcherServlet maps request to particular handler - HandlerInterceptor.preHandleAction is invoked - Controller is invoked, assuming preHandleAction returns true - HandlerInterceptor.afterActionCompletion is invoked  etc   ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-06-29T05:53:36Z","2012-06-19T03:52:26Z"
"","6891","Create  tag [SPR-2201]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2201](https://jira.spring.io/browse/SPR-2201?redirect=false)** and commented  I want to display error messages above my form elements in JSP.  I believe the syntax for this, using the new \ tag library is:        This is rather cumbersome.  It would be much nicer to just do      This is especially true because I think users of the new \ tag library probably won't need  at all in most cases.  I'd rather not expose my developers to the  tag for just one small requirement like this, since its use isn't very intuitive, especially for a web developer used to Struts.    ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-06-27T02:52:09Z","2019-01-11T19:05:04Z"
"","7630","AOP Advice not applied in portlet, works in Junit [SPR-2944]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=attack7)** opened **[SPR-2944](https://jira.spring.io/browse/SPR-2944?redirect=false)** and commented  Portlet application to read RSS feeds.  Using AOP to ask OSCache to manage caching of the feeds.  A service (FeedService) has a method getFeed that returns a SyndFeed object.  Want to intercept calls to this method and check the cache for the presence of a valid response before fetching it from the remote service.  This advice is applied properly in a Junit test, but not when deployed to the portlet environment.  Will attach code to demonstrate.   ---  **Affects:** 2.0.1  **Attachments:** - [rssportlet.tgz](https://jira.spring.io/secure/attachment/12277/rssportlet.tgz) (_5.43 MB_)","closed","in: core,","spring-projects-issues","2006-12-13T01:16:28Z","2019-01-11T21:22:23Z"
"","7268","TagUtils.hasAncestorOfType should be using isAssignableFrom to check ancestors [SPR-2579]","**[Matt Wizeman](https://jira.spring.io/secure/ViewProfile.jspa?name=mwizeman)** opened **[SPR-2579](https://jira.spring.io/browse/SPR-2579?redirect=false)** and commented  Some of the Spring form tags are using the method isAssignableFrom in the TagUtils class to determine if they are being used in the proper context. The problem is that this method is checking for exact equality of classes when looking at the ancestors, which prevents the form tags from easily being subclassed. For example, if I subclass org.springframework.web.servlet.tags.form.SelectTag I can no longer use the spring option tag because they only work under the spring option tag.  Please change line 95 from:  if (parentTagClass.equals(ancestor.getClass())) {  to be:  if (parentTagClass.isAssignableFrom(ancestor.getClass())) {   ---  **Affects:** 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-09-12T07:59:24Z","2012-06-19T03:51:19Z"
"","7237","Allow ControllerClassNameHandlerMapping to be case-senstive [SPR-2548]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-2548](https://jira.spring.io/browse/SPR-2548?redirect=false)** and commented  It'd be nice if there was a property on ControllerClassNameHandlerMapping that allows it to be case-sensitive.  For example:                                                                                                 Would translate to:  /users.html -> userController /userForm.html -> userFormController   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-06T11:52:16Z","2012-06-19T09:37:29Z"
"","7236","Error message cryptic when  outside of  [SPR-2547]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-2547](https://jira.spring.io/browse/SPR-2547?redirect=false)** and commented  If I do the following:    \Please fill in user's information below:\    I get:  ERROR - RequestContextAwareTag.doStartTag(75) | Neither Errors instance nor plain target object for bean name 'null' available as request attribute java.lang.IllegalStateException: Neither Errors instance nor plain target object for bean name 'nul ' available as request attribute at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:137) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus( bstractDataBoundFormElementTag.java:157) at org.springframework.web.servlet.tags.form.ErrorsTag.shouldRender(ErrorsTag.java:78) at org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(Abs ractHtmlElementBodyTag.java:39) at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFor Tag.java:91) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwa eTag.java:68)  It'd be nice if there was a better error message for users.   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-09-06T11:07:26Z","2012-06-19T03:50:50Z"
"","6989","Thread safe date format/parse API [SPR-2300]","**[Matt Magoffin](https://jira.spring.io/secure/ViewProfile.jspa?name=msqr)** opened **[SPR-2300](https://jira.spring.io/browse/SPR-2300?redirect=false)** and commented  On many projects I deal with parsing/formatting dates and times, and with Spring have been very often injecting Apache's FastDateFormat to perform thread-safe date formatting as Format bean properties. But for date parsing, with SimpleDateFormat not being thread safe, there isn't a nice JDK API for performing thread-safe parsing.  I thought perhaps Spring could help with a simple date format/parse API, that could use Apache's FastDateFormat or Joda Time as different implementations for providing thread-safe formatting and parsing.   ---  **Attachments:** - [JodaDateFormat.java](https://jira.spring.io/secure/attachment/11807/JodaDateFormat.java) (_3.17 kB_) - [JodaDateFormatTest.java](https://jira.spring.io/secure/attachment/11808/JodaDateFormatTest.java) (_1.91 kB_) - [ThreadSafeDateFormat.java](https://jira.spring.io/secure/attachment/11806/ThreadSafeDateFormat.java) (_1.09 kB_)","closed","type: enhancement,","spring-projects-issues","2006-07-13T13:44:39Z","2012-06-19T03:52:49Z"
"","7261","ApplicationEventMulticaster should efficiently dispatch according to event type and source [SPR-2572]","**[Matt Jensen](https://jira.spring.io/secure/ViewProfile.jspa?name=mattj65816)** opened **[SPR-2572](https://jira.spring.io/browse/SPR-2572?redirect=false)** and commented  I am working on an application which registers a relatively large number of ApplicationListeners and multicasts a large number of events to them via the application context.  The standard SimpleApplicationEventMulticaster is not particularly efficient in this scenario, so I have made an attempt at putting together an improved implementation of the ApplicationEventMulticaster interface.  I would like to submit my work for possible inclusion in Spring or Spring Modules.  Key points are: - New ApplicationListener subclass introduced, SelectiveApplicationListener.  Implementors can use two new methods, eventClasses() and sourceClasses(), to limit the types of events and/or sources for which it is notified. - Subclasses of the event and source classes are handled appropriately...if a listener registers for MyEvent and MySubclassEvent extends MyEvent, then the listener will be notified of MyEvent and MySubclassEvent as one would expect.  Same applies to the source class. - Soft cache of event/listener affinity is maintained internally for performance reasons, as all listeners must be scanned when a new event/source class combination is encountered. - No reflection or ""instanceof""-type logic is needed after the first encounter of any event/source class combination.  I would be happy to make any implementation or style changes necessary to fit the conventions of the Spring project.  I will attach all current code to this JIRA issue.   ---  **Affects:** 2.0 RC3  **Attachments:** - [selectiveApplicationEventMulticaster.zip](https://jira.spring.io/secure/attachment/12370/selectiveApplicationEventMulticaster.zip) (_25.16 kB_) - [selectiveApplicationEventMulticaster.zip](https://jira.spring.io/secure/attachment/12044/selectiveApplicationEventMulticaster.zip) (_24.59 kB_) - [selectiveApplicationEventMulticaster.zip](https://jira.spring.io/secure/attachment/11949/selectiveApplicationEventMulticaster.zip) (_13.46 kB_)","closed","type: enhancement,","spring-projects-issues","2006-09-11T02:08:14Z","2012-06-19T03:50:14Z"
"","7218","CommonsDbcpNativeJdbcExtractor does not work under Tomcat 5.5+ [SPR-2529]","**[Matt Jensen](https://jira.spring.io/secure/ViewProfile.jspa?name=mattj65816)** opened **[SPR-2529](https://jira.spring.io/browse/SPR-2529?redirect=false)** and commented  Due to a change in the connection pool package structure for Tomcat 5.5.x, CommonsDbcpNativeJdbcExtractor does not function properly.  ClassNotFoundExceptions occur because the DBCP classes are located under org.apache.tomcat.dbcp.dbcp as opposed to org.apache.commons.dbcp.  I have prepared a fix for this issue which consists of two items: - New class TomcatDbcpNativeJdbcExtractor which is a copy of CommonsDbcpNativeJdbcExtractor with all imports modified for the new package structure. - New class TomcatNativeJdbcExtractor implements NativeJdbcExtractor by delegating calls through either a TomcatDbcpNativeJdbcExtractor instance or a CommonsDbcpNativeJdbcExtractor instance as appropriate, based upon the results of a call to Class.forName(""org.apache.tomcat.dbcp.dbcp.DelegatingConnection"").  I will submit the two classes once I have had a chance to test them (I am pretty sure that they work now, but I have no way of testing them in a real Tomcat/Oracle environment.)  This will happen in the next couple days.   ---  **Affects:** 1.2.8, 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-02T15:18:37Z","2012-06-19T03:50:05Z"
"","7552","wrong file apparently referenced in Struts integration doc [SPR-2865]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2865](https://jira.spring.io/browse/SPR-2865?redirect=false)** and commented  in webintegration.xml on line 307 (of CVS rev 1.18) reference is made to an action-context.xml file.  No such filename has been mentioned in the example, nor is it mentioned thereafter.  Should this be applicationContext.xml?   ---  **Affects:** 2.0 final, 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-22T05:17:18Z","2012-06-19T03:50:39Z"
"","7551","Occurrences of ""principal"" where ""principle"" is intended [SPR-2864]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2864](https://jira.spring.io/browse/SPR-2864?redirect=false)** and commented  s/principal/principle/ at:  webintegration.xml line 53 jms.xml line 41 beans.xml line 2792   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-22T05:12:10Z","2012-06-19T03:50:52Z"
"","7534","hibernate(3)? OpenSessionInViewFilter session closing improvement [SPR-2847]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2847](https://jira.spring.io/browse/SPR-2847?redirect=false)** and commented  Current Hibernate wisdom says to close and recreate the Session on any HibernateException.  When using Spring + Hibernate it is possible, having delved into Spring's inner workings, to gracefully recover from e.g. StaleObjectStateExceptions (or HibernateOptimisticLockingFailureExceptions, as it were) and install a new Session, binding into the TransactionManager.  The OpenSessionInViewInterceptors are completely compatible with this approach, but the filter implementations fall down.  This is because while the Interceptors implement the session management in separate methods, the Filters accomplish everything in a single method, storing the Session in a local variable.  If the current Session has changed, the following happens:  Session.close() throws an Exception due to its already having been closed. SessionFactoryUtils logs, but does not propagate, the Exception. The active Session is not closed, thus its Connection is never released.  The simple fix is to use:  session = ((SessionHolder) TransactionSynchronizationManager.unbindResource(sessionFactory)).getSession();  instead of  TransactionSynchronizationManager.unbindResource(sessionFactory);  in the finally clause surrounding the doFilter() call.  Since my use case can be considered advanced Hibernate usage, I have classified this issue as an Improvement.  However, since the Interceptors--whether by design or by luck--do not suffer from this shortcoming, I have left the priority at Major.  br, Matt   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-17T07:57:35Z","2012-06-19T03:50:03Z"
"","7523","s/element/method/ in AbstractSimpleBeanDefinitionParser javadoc [SPR-2836]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2836](https://jira.spring.io/browse/SPR-2836?redirect=false)** and commented  at line 73   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-14T06:40:51Z","2012-06-19T03:50:57Z"
"","7468","SPR-2777 incompletely resolved [SPR-2781]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2781](https://jira.spring.io/browse/SPR-2781?redirect=false)** and commented  Only one of the two errors reported in #7464 was fixed.  The outstanding error is on line 487 as of revision 1.15 of aop-api.xml .  ---  **Affects:** 2.0 final, 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-10-30T08:53:25Z","2019-01-11T21:06:16Z"
"","7465","arguably ThrowsAdvice implementation documentation conflicts with implementation [SPR-2778]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2778](https://jira.spring.io/browse/SPR-2778?redirect=false)** and commented  Marking as minor because nothing actually breaks even though the documentation is IMHO inconsistent with the implementation.  The javadoc for ThrowsAdvice says:  \ There aren't any methods on this interface, as methods are invoked by reflection. Implementing classes should implement methods of the form: afterThrowing([Method], [args], [target], Throwable subclass)  The first three arguments are optional, and only useful if we want further information about the joinpoint, as in AspectJ after throwing advice. \  The javadoc for ThrowsAdviceInterceptor says:  \ The signatures on handler methods on the throwsAdvice constructor argument must be of form: void afterThrowing([Method], [args], [target], ThrowableSubclass); \  Finally, aop-api.xml says:  \ The method signatures vary from having one to four arguments, depending on whether the advice method is interested in the method and arguments. \  The wording is consistent among these three sources.  It is my contention that the wording of the sources cited suggests that any combination of the four parameters:  Method, Object[], Object, and (required) Throwable--would be permissible.  A look at ThrowsAdviceInterceptor's implementation, however, shows that only methods with either all four parameters or a single parameter (the exception) are valid.  If it is actually intended that any combination of the four (as long as the Throwable is included and last) be accepted, the implementation could be changed.  Since I realize this is probably not the intent, as the Object type of the target parameter is unquestionably ambiguous, I would suggest these three documentation sources be altered in these ways:  - Every occurrence of the   afterThrowing([Method], [args], [target], Throwable subclass)   pattern should be changed to group Method, args, and target inside a single set of square brackets.  This would clearly mark that the three are an inseparable unit.  Such a pattern is present, again, in ThrowsAdvice.java, ThrowsAdviceInterceptor.java, and aop-api.xml.  - In aop-api.xml, the sentence ""The method signatures vary from having one to four arguments, depending on whether the advice method is interested in the method and arguments."" should be changed to ""The method signatures may have either one or four arguments, depending on whether the advice method is interested in the method and arguments."" or something similar.  While in aop-api.xml, see the last comment on #7464 explaining that only one of two typos reported therein were fixed (the remaining one is at line 488).  br, Matt  ---  **Affects:** 2.0 final, 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-10-30T08:05:01Z","2019-01-11T21:07:31Z"
"","7464","typos in aop-api doc [SPR-2777]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2777](https://jira.spring.io/browse/SPR-2777?redirect=false)** and commented  I'm back!  On lines 471 and 488 of aop-api.xml the comment reads ""do something will all arguments"" when it should, of course, be ""do something with all arguments"".   ---  **Affects:** 2.0 final, 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-10-30T06:08:06Z","2012-06-19T03:51:03Z"
"","7456","typo in StaticMethodMatcher javadoc [SPR-2768]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2768](https://jira.spring.io/browse/SPR-2768?redirect=false)** and commented  in class description, ""convenient abstract superclas"" -> ""convenient abstract superclass""   --- No further details from [SPR-2768](https://jira.spring.io/browse/SPR-2768?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-10-27T05:05:25Z","2012-06-19T03:51:14Z"
"","7454","typos in ProxyFactoryBean javadoc [SPR-2766]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2766](https://jira.spring.io/browse/SPR-2766?redirect=false)** and commented  1. Line 52 ends with ""it;s"" instead of ""it's"". 2. The colon on line 55 should AFAIK, in terms of grammatical correctness, be a semicolon.    ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-27T01:08:03Z","2012-06-19T03:50:47Z"
"","7443","typo in AOP reference doc [SPR-2755]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2755](https://jira.spring.io/browse/SPR-2755?redirect=false)** and commented  -line 1610 of aop.xml shows an  attribute named ""thowing"" instead of ""throwing"".   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-25T06:06:11Z","2012-06-19T03:50:03Z"
"","7644","Spring-provided base classes should not use concrete class as log category [SPR-2957]","**[Mathieu Larchet](https://jira.spring.io/secure/ViewProfile.jspa?name=mlarchet)** opened **[SPR-2957](https://jira.spring.io/browse/SPR-2957?redirect=false)** and commented  Spring creates loggers with getClass() method. In this case, it's the dynamic class which is used. Here is an example :  log4j.rootCategory=ERROR, R # Global logging at ERROR level log4j.logger.fr.myapp=DEBUG # Specific development logger at DEBUG level  In this case, there are Spring loggers logging in DEBUG mode each time I have a class that extends a Spring class. Extending AbstractPdfView shows very verbose ouptuts in logs, because Spring's logger in ApplicationObjectSupport is declared as :  protected final Log logger = LogFactory.getLog(getClass());  It should be better to set the class manually :  protected final Log logger = LogFactory.getLog(ApplicationObjectSupport.class);   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-17T18:07:31Z","2008-12-15T00:59:46Z"
"","7142","Upgrade standard.jar to JSTL 1.1 [SPR-2453]","**[Mathieu Larchet](https://jira.spring.io/secure/ViewProfile.jspa?name=mlarchet)** opened **[SPR-2453](https://jira.spring.io/browse/SPR-2453?redirect=false)** and commented  When upgrading to Spring 2.0-RC-3 there are several problems with the standard.jar shiped with spring-with-dependancies :  - URI have changed from http://java.sun.com/jsp/jstl/xxxx to http://java.sun.com/jstl/xxxx - standard.jar no more includes fn.tld so all developpments using 'functions' taglib won't work any more.  Are these known issues ?   ---  **Affects:** 2.0 RC3","closed","type: task,","spring-projects-issues","2006-08-21T18:03:21Z","2012-06-19T03:50:51Z"
"","7351","ChainedInterceptorSupport doesn't 'wrap' it's iterators [SPR-2662]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-2662](https://jira.spring.io/browse/SPR-2662?redirect=false)** and commented  Imagine you have 3 chained interceptors with ChainedInterceptorSupport  printing out the entities in a preFlush(). When the first chained interceptor uses the iterator, the second and third one fail since hasNext() returns false.  Proposed fix: public void preFlush(Iterator entities) throws CallbackException { List entityList = createList(entities); for (Interceptor interceptor : interceptors) { interceptor.preFlush(entityList.iterator()); } }  ... other methods using an iterator do the same thing  private List createList(Iterator iterator) { List list = new ArrayList(); while (iterator.hasNext()) { list.add(iterator.next()); } return list; }   ---  **Affects:** 1.2.7, 1.2.8, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4","closed","in: core,","spring-projects-issues","2006-09-30T18:53:11Z","2019-01-12T16:28:35Z"
"","7075","PropertyPlaceholderConfigurer does not detect circular dependency in descendant placeholders [SPR-2386]","**[Matej Pivoluska](https://jira.spring.io/secure/ViewProfile.jspa?name=matej)** opened **[SPR-2386](https://jira.spring.io/browse/SPR-2386?redirect=false)** and commented  Think about this property file:  A=${B} B=${C} C=${B}  And use property placeholder A in a bean factory configuration:  ... \ \ \ \${A}\ \ \ \ ...  When Spring postprocesses this bean factory, the program ends with java.lang.StackOverflowError, because function PropertyPlaceholderConfigurer.parseStringValue() cannot detect the circular dependency created in descendant placeholders B, C. It can detect only the circular dependencies only if the toplevel placeholder is present in the circle.  Proposed fix:  original method: Function protected String parseStringValue(String strVal, Properties props, String originalPlaceholder);  Use a Set of parent placeholders instead of only a String originalPlaceholder and do the lookup in this Set if the placeholder is not present in this map already. If yes, there is a circle.  Note: LinkedHashSet can be helpful to report correctly ordered members of circular dependency.   ---  **Affects:** 1.2.8, 2.0 final  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/12212/patch.txt) (_3.18 kB_) - [PropertyPlaceholderConfigurerCrasher.java](https://jira.spring.io/secure/attachment/12211/PropertyPlaceholderConfigurerCrasher.java) (_520 bytes_)  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","in: core,","spring-projects-issues","2006-08-06T08:39:40Z","2012-06-19T03:51:05Z"
"","7804","Add Priority support to MimeMessageHelper [SPR-3117]","**[Matan](https://jira.spring.io/secure/ViewProfile.jspa?name=matan_a)** opened **[SPR-3117](https://jira.spring.io/browse/SPR-3117?redirect=false)** and commented  Would be nice to add priority support to the MimeMessageHelper instead of accessing the MimeMessage directly to do this:  mimeMessageHelper.getMimeMessage().addHeader(""X-Priority"", ""1"");    // set to high priority    ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-05T23:42:41Z","2012-06-19T03:50:26Z"
"","7702","CollectionFactory.createApproximateCollection/createApproximateMap do not replicate sorted collections which use comparators properly [SPR-3016]","**[Matan](https://jira.spring.io/secure/ViewProfile.jspa?name=matan_a)** opened **[SPR-3016](https://jira.spring.io/browse/SPR-3016?redirect=false)** and commented  I don't know if this is a bug or a feature request, but the problem came up when I was using a TreeSet + Comparator property binded to a spring form select list.  I was getting exceptions which don't occur when the Set was just a HashSet.  I narrowed down my problem to the CollectionFactory.createApproximateCollection function.  The collection it returns is the right approximate type, but it does not  consider any Comparator that the Set might use.  > else if (SortedSet.class.isAssignableFrom(collectionClass)) { > return new TreeSet();  What happens is that:  a) The sort gets messed up if the Comparable implementation and the Comparator implementation are different or b) There is an exception if the object does not implement Comparable  The same happens with CollectionFactory.createApproximateMap.   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2007-01-06T07:17:49Z","2012-06-19T03:50:07Z"
"","7870","Logging of SQL is inconsistent in JdbcTemplate [SPR-3185]","**[Martti von Hertzen](https://jira.spring.io/secure/ViewProfile.jspa?name=hertzen)** opened **[SPR-3185](https://jira.spring.io/browse/SPR-3185?redirect=false)** and commented  Hi,  Almost all methods that execute SQL in JdbcTemplate log the executed SQL, this is missing from a few execute methods though, most notably: public Object execute(PreparedStatementCreator psc, PreparedStatementCallback action)  Remedy: Add the following after the two asserts (similar to execute(CallableStatementCreator csc, CallableStatementCallback action)):  if (logger.isDebugEnabled()) { String sql = getSql(psc); logger.debug(""Executing SQL query"" + (sql != null ? "" ["" + sql  + ""]"" : """")); }  There are asserts missing from a few methods also: public Object execute(CallableStatementCreator csc, CallableStatementCallback action) public int update(final PreparedStatementCreator psc, final KeyHolder generatedKeyHolder) protected int update(final PreparedStatementCreator psc, final PreparedStatementSetter pss)  Thank you for a Great product!   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-18T21:08:15Z","2012-06-19T03:50:19Z"
"","7166","SQLErrorCodes for Apache Derby database missing [SPR-2477]","**[Martin Fischer](https://jira.spring.io/secure/ViewProfile.jspa?name=martinfischer)** opened **[SPR-2477](https://jira.spring.io/browse/SPR-2477?redirect=false)** and commented  Apache derby has a growing user community especially where a embedded database is sufficient. Spring does not support the Apache Derby database engine with respect to the mapping of vendor specific sql error codes to the generic spring data access exception hierarchy. To be more concrete: What's missing at the moment is a mapping from the derby sql error codes to the data access exceptions via the configurable SQLErrorCodes class. Please provide a sql-error-codes.xml that contains a mapping for the derby error codes.  Thanks Martin  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7221 Provide DataFieldMaxValueIncrementer for Derby/JavaDB  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-24T17:48:32Z","2019-01-11T19:34:01Z"
"","7707","increase method visibility of applyPropertyValues for recursive autowiring [SPR-3021]","**[Martin Bengl](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.bengl)** opened **[SPR-3021](https://jira.spring.io/browse/SPR-3021?redirect=false)** and commented  Could you please increase the method visiblilty of applyPropertyValues in AbstractAutowireCapableBeanFactory to ""protected"". I wrote a RecursiveWiringListableBeanFactory which extends DefaultListableBeanFactory and supports recursive autowiring for all bean properties.  I overwrote the populateBean method and have to call applyPropertyValues to set the found property values of the beans. Here is the source of my  RecursiveWiringListableBeanFactory: http://jira.dailyspring.net/RecursiveWiringListableBeanFactory.java   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2007-01-08T07:04:52Z","2012-06-19T03:50:48Z"
"","7700","HotSwappableTargetSource like behavior based on some value. [SPR-3014]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-3014](https://jira.spring.io/browse/SPR-3014?redirect=false)** and commented  For one of my projects I needed to be able to have 1 codebase (1 web application) which connected to 40 different database. We needed something to switch the database connection (and in our case Hibernate SessionFactory) at runtime and per user request. For this we created something we called the ContextSwappableTargetSource. It consists of 3 classes 1 ContextHolder which is a ThreadLocal holder for a property (we set it with a filter) and the real ContextSwappableTargetSource class and an Exception class.  I noticed in the Spring forums that more people need something similair that is why I post my bit of code here. If it is interesting enough to use in the Spring codebase feel free. If not well it is documented for future reference :-).   ---  **Affects:** 2.0.1  **Attachments:** - [ContextSwappableTargetSource.jar](https://jira.spring.io/secure/attachment/12322/ContextSwappableTargetSource.jar) (_3.43 kB_) - [ContextSwappableTargetSource.jar](https://jira.spring.io/secure/attachment/12320/ContextSwappableTargetSource.jar) (_2.58 kB_) - [ContextSwappableTargetSource050120071120.jar](https://jira.spring.io/secure/attachment/12321/ContextSwappableTargetSource050120071120.jar) (_3.41 kB_)  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-04T19:30:10Z","2012-06-19T09:37:39Z"
"","7462","form:errors not allowed in a nested JSP outside the scope of form:form [SPR-2775]","**[Mark Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=mlsmithjr)** opened **[SPR-2775](https://jira.spring.io/browse/SPR-2775?redirect=false)** and commented  The assertion in ErrorsTag.java:  onWriteTagContent() is assuming that the form:form tag is in the same document as the one being processed.  This effectively disallows JSP nesting and reuse when it is necessary to have the form:form tag outside the nested page.  I'm not sure if this really IS a bug.  I know it is a safety mechanism but the case can also be made it gets in the way.  ---  **Affects:** 2.0 final  **Issue Links:** - #7441  tag cannot be used in jspf (fragment) compilation units, where no  tag exists, even though it would work. (_**""depends on""**_)","closed","type: bug,","spring-projects-issues","2006-10-30T03:26:24Z","2019-01-11T21:07:19Z"
"","7335","nested spring:bind elements generate duplicate local org.springframework.web.servlet.support.BindStatus status properties which causes compile failure [SPR-2646]","**[Mark Kettner](https://jira.spring.io/secure/ViewProfile.jspa?name=ma_kettner)** opened **[SPR-2646](https://jira.spring.io/browse/SPR-2646?redirect=false)** and commented  We have the following source:           	     	1:           		     			          				     					     				          	2:			     					     				     				     			     		     	  When we deploy this in the tomcat apache-tomcat-5.5.17 the aplpication works, but when we deploy it on websphere 5.1.10 we getting the next error when the page opgavelist.jsp is being called:  Error 500: ServletException in '/pages/opgaveList.jsp': Unable to compile class for JSP An error occurred at line: 58 in the jsp file: /pages/opgaveList.jsp Generated servlet error: C:\java\ibm\WebSphere\AppServer\temp\PP94H199\server1\vvk-product-oo-ear-1.0.1.0\vvk-product-oo-web-1.0.1.0.war\pages\_opgaveList.java:543: status is already defined in _jspService(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) org.springframework.web.servlet.support.BindStatus status = null; ^ 1 error  After an investigation we found that the websphere has a problem when we nest the tag : . In the generated servlet we see that the variable  status = null; has been declared twice.  Websphere 5.1.10 generated java:  { // begin scope of tag variables try { int _jspx_eval_spring_bind_2 = _jspx_th_spring_bind_2 .doStartTag(); if (_jspx_eval_spring_bind_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) { do { 1.                                                        org.springframework.web.servlet.support.BindStatus status = null;                                                       status = (org.springframework.web.servlet.support.BindStatus) pageContext                                                                                 .findAttribute(""status"");                                                       // end                                                       // HTML // begin                                                       // [file=""/pages/opgaveList.jsp"";from=(50,42);to=(52,17)]                                                       out.write(""\r\n\r\n\t\t\t\r\n\t\t\t\t"");                                                       // end                                                       // ##DEBUG## ##TAGLIB## ""/pages/opgaveList.jsp""                                                       // 54,23-""/pages/opgaveList.jsp"" 55,39                                                       // LineMapIndex:45                                                       /* ------ c:forEach ------ */                                                       org.apache.taglibs.standard.tag.el.core.ForEachTag _jspx_th_c_forEach_2 = new org.apache.taglibs.standard.tag.el.core.ForEachTag();                                                       _jspx_th_c_forEach_2.setPageContext(pageContext);                                                       _jspx_th_c_forEach_2                                                                                 .setParent(_jspx_th_spring_bind_2);                                                       _jspx_th_c_forEach_2.setItems(""${fasen}"");                                                       _jspx_th_c_forEach_2.setVar(""fase"");                                                       _jspx_th_c_forEach_2.setVarStatus(""loopStatus"");                                                       try {                                                                    int _jspx_eval_c_forEach_2 = _jspx_th_c_forEach_2                                                                                              .doStartTag();                                                                    if (_jspx_eval_c_forEach_2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {                                                                                 do {                                                                                              // end                                                                                              // HTML // begin                                                                                              // [file=""/pages/opgaveList.jsp"";from=(54,39);to=(57,5)]                                                                                              out.write(""\r\n\r\n\r\n\t\t\t\t\t"");                                                                                              // end                                                                                              // ##DEBUG## ##TAGLIB##                                                                                              // ""/pages/opgaveList.jsp""                                                                                              // 58,5-""/pages/opgaveList.jsp"" 58,67                                                                                              // LineMapIndex:47                                                                                              /* ------ spring:bind ------ */                                                                                              org.springframework.web.servlet.tags.BindTag _jspx_th_spring_bind_3 = new org.springframework.web.servlet.tags.BindTag();                                                                                              _jspx_th_spring_bind_3                                                                                                                                .setPageContext(pageContext);                                                                                              _jspx_th_spring_bind_3                                                                                                                                .setParent(_jspx_th_c_forEach_2);                                                                                              _jspx_th_spring_bind_3                                                                                                                                .setPath(""searchCriteria.fasen[${loopStatus.index}]"");                                                                                              { // begin scope of tag variables                                                                                                               try {                                                                                                                                int _jspx_eval_spring_bind_3 = _jspx_th_spring_bind_3                                                                                                                                                                  .doStartTag();                                                                                                                                if (_jspx_eval_spring_bind_3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {                                                                                                                                                 do {  2.           												org.springframework.web.servlet.support.BindStatus status = null;         												status = (org.springframework.web.servlet.support.BindStatus) pageContext         														.findAttribute(""status"");         												// end         												// HTML // begin         												// [file=""/pages/opgaveList.jsp"";from=(57,67);to=(58,21)]         												out         														.write(""\r\n\t\t\t\t\t\t","closed","status: declined,","spring-projects-issues","2006-09-27T20:59:35Z","2019-01-12T16:28:37Z"
"","7788","Add JMS Namespace Support [SPR-3101]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-3101](https://jira.spring.io/browse/SPR-3101?redirect=false)** and commented   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-31T22:39:12Z","2012-06-19T03:50:14Z"
"","7073","MessageListenerAdapter could use a strategy instead of template method for building the listener argument array. [SPR-2384]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-2384](https://jira.spring.io/browse/SPR-2384?redirect=false)** and commented  MessageListenerAdapter's new (post 2.0-RC2) 'buildListenerArguments' template method adds the ability to convert from a single Object of an incoming Message's payload to an Object array. That provides a nice layer of isolation above the target method on the delegate. To take advantage of this, one needs to create a subclass of MessageListenerAdapter.  However, IF this capability of translating the single Object to an Object array could be reused in other parts of an application (i.e. anytime a coarse-grained message object needs to be translated into domain object arguments prior to a reflection-based call), then it might make sense to create a strategy interface instead. The MessageListenerAdapter could use a default implementation of ArgumentArrayBuilder(?) to perform the same logic as currently implemented in the 'buildListenerArguments' method - which simply returns a single item array containing the extracted Object.   --- No further details from [SPR-2384](https://jira.spring.io/browse/SPR-2384?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-08-04T03:17:17Z","2012-06-19T09:37:22Z"
"","7067","MessageListenerAdapter should invoke closest matching method based on parameter type [SPR-2378]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-2378](https://jira.spring.io/browse/SPR-2378?redirect=false)** and commented  MessageListenerAdapter currently uses the MethodInvoker to find and then invoke a method on the delegate based on the Message payload's type. In the MethodInvoker's prepare() method, when targetClass.getMethod(..) fails to find an exact match for the Message payload, findMatchingMethod() is called. In that method, the 'match' criteria is based on ClassUtils.isAssignableValue(param, arg). If there is not **exactly one** match, the NoSuchMethodException is rethrown.  In some cases, it might be necessary to have distinct handler methods for different object types within a Class hierarchy. With MethodInvoker however, because the numberOfMatchingMethods exceeds 1, the NoSuchMethodException is rethrown. It would be nice to have the ability to find the most specific match (also, providing a message that states that there was ambiguity might be more meaningful than rethrowing the NoSuchMethodException - although that occurs within the MethodInvoker itself).  At first, I thought MethodInvoker's subclass -  ArgumentConvertingMethodInvoker - could solve the problem, because it actually did cause my testcase to pass. However, it simply returns the first match rather than continuing to check for ambiguities. Therefore after changing the order of my handler methods, the test failed again.  Maybe it would make sense to be able to configure this behavior with a boolean flag on the MessageListenerAdapter?  Of course, checking for the ""most specific match"" when multiple arguments are involved is tricky (and a recent addition to MessageListenerAdapter now makes multiple argument method resolution possible), but mapping JMS Messages to single argument methods does not require that. I am attaching a TypeResolvingSingleArgumentMethodInvoker that extends MethodInvoker. In the process of implementing it, I also discovered that ClassUtils.getAllInterfacesForClassAsSet(..) does not return interfaces that are extended by other interfaces (only the interfaces of superclasses). Therefore, I added a method to TypeResolvingSingleArgumentMethodInvoker, called getAllAssignableInterfaces(..), that returns those interfaces as well.  ---  **Affects:** 2.0 RC2  **Attachments:** - [MethodInvokerComparisonTests.java](https://jira.spring.io/secure/attachment/11856/MethodInvokerComparisonTests.java) (_7.96 kB_) - [MethodInvokerComparisonTests.java](https://jira.spring.io/secure/attachment/11855/MethodInvokerComparisonTests.java) (_7.80 kB_) - [TypeResolvingSingleArgumentMethodInvoker.java](https://jira.spring.io/secure/attachment/11857/TypeResolvingSingleArgumentMethodInvoker.java) (_2.60 kB_) - [TypeResolvingSingleArgumentMethodInvoker.java](https://jira.spring.io/secure/attachment/11854/TypeResolvingSingleArgumentMethodInvoker.java) (_2.49 kB_)  **Issue Links:** - #8904 Message Driven POJO and Request class hierarchy treatment","closed","type: enhancement,","spring-projects-issues","2006-08-03T02:07:46Z","2019-01-11T18:37:14Z"
"","7657","Exception when resolving beans with cyclic dependencies and ProxyFactoryBean set with no explicite targetSource [SPR-2971]","**[Mariusz Krzemień](https://jira.spring.io/secure/ViewProfile.jspa?name=mkrzemien)** opened **[SPR-2971](https://jira.spring.io/browse/SPR-2971?redirect=false)** and commented  When beans are configured with cyclic dependencies and there is a ProxyFactoryBean that has no explicite targetSource (target can be configured with targetName or be the last on the advisor chain list) the bean dependencies cannot be resolved and the exception is thrown.  Snippet from logs:  ...nested exception is org.springframework.aop.framework.AopConfigException: Cannot create AopProxy with no advisors and no target source org.springframework.aop.framework.AopConfigException: Cannot create AopProxy with no advisors and no target source   ---  **Affects:** 1.2.8  **Attachments:** - [CyclicInterceptionTest.zip](https://jira.spring.io/secure/attachment/12288/CyclicInterceptionTest.zip) (_2.23 kB_) - [ProxyFactoryBean.java](https://jira.spring.io/secure/attachment/12289/ProxyFactoryBean.java) (_23.09 kB_)","closed","in: core,","spring-projects-issues","2006-12-21T00:24:48Z","2019-01-12T16:40:28Z"
"","7732","form:options -> exception when 'items' attribute is null [SPR-3046]","**[Marcos V. B. Souza](https://jira.spring.io/secure/ViewProfile.jspa?name=marvinsouza)** opened **[SPR-3046](https://jira.spring.io/browse/SPR-3046?redirect=false)** and commented  The 'IllegalArgumentException' occcurs when the items attribute of the form:option tag is  null. I think that instead of throw the exception, could be render a empty select, without options.  Exception: java.lang.IllegalArgumentException: 'items' cannot be null. org.springframework.util.Assert.notNull(Assert.java:113) org.springframework.web.servlet.tags.form.OptionsTag.setItems(OptionsTag.java:67)   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2007-01-17T22:04:43Z","2012-06-19T03:50:38Z"
"","7011","Child collection merging unable to resolve values as bean references [SPR-2322]","**[Marcio Silva](https://jira.spring.io/secure/ViewProfile.jspa?name=marciosilva)** opened **[SPR-2322](https://jira.spring.io/browse/SPR-2322?redirect=false)** and commented  With the following configuration:  \ \ \ \ \ \ \ \ \ \ \ \ \ \  where Foo has a typed collection of objects, an IllegalArgumentException will be thrown from the PropertyTypeConverter due to the fact that the ManagedList merges values into an instance of ArrayList, instead of ManagedList.  This in turn causes the BeanDefinitionValueResolver to not resolve the references in the group property as the value of prop will be an instance of ArrayList instead of ManagedList.  This occurs for all collection types.   ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-07-19T04:37:14Z","2012-06-19T03:50:13Z"
"","7311","XBean NoSuchMethodError: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement [SPR-2622]","**[Marcin Zduniak](https://jira.spring.io/secure/ViewProfile.jspa?name=zduniak)** opened **[SPR-2622](https://jira.spring.io/browse/SPR-2622?redirect=false)** and commented  I upgraded my application from SF 1.2.8 -> 2.0-RC4. I have a configuration XML file for ActiveMQ:           	JMS Broker     	     	       activeMQ.cfg.xml file:  \ \ 	\      	     		     	          	     		     	          	     		     		     	            \                     	     	     	     	     	     	     	     	       \  I get following exception when I'm starting my application:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'activeMQBroker' defined in class path resource [activeMQContext.xml]: Invocation of init method failed; nested exception is java.lang.NoSuchMethodError: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(Lorg/w3c/dom/Element;Z)Lorg/springframework/beans/factory/config/BeanDefinitionHolder; Caused by: java.lang.NoSuchMethodError: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(Lorg/w3c/dom/Element;Z)Lorg/springframework/beans/factory/config/BeanDefinitionHolder; at org.apache.xbean.spring.context.v2.XBeanNamespaceHandler.parseBeanFromExtensionElement(XBeanNamespaceHandler.java:202) at org.apache.xbean.spring.context.v2.XBeanNamespaceHandler.parseBeanFromExtensionElement(XBeanNamespaceHandler.java:250) at org.apache.xbean.spring.context.v2.XBeanNamespaceHandler.parse(XBeanNamespaceHandler.java:150) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1122) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1112) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:146) at org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader.parseBeanDefinitions(XBeanBeanDefinitionDocumentReader.java:39) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:93) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:496) at org.apache.xbean.spring.context.v2.XBeanXmlBeanDefinitionReader.registerBeanDefinitions(XBeanXmlBeanDefinitionReader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:406) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:360) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:335) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.loadBeanDefinitions(ResourceXmlApplicationContext.java:106) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.loadBeanDefinitions(ResourceXmlApplicationContext.java:99) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.\(ResourceXmlApplicationContext.java:65) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.\(ResourceXmlApplicationContext.java:53) at org.apache.activemq.xbean.BrokerFactoryBean.afterPropertiesSet(BrokerFactoryBean.java:76) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:957) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:924) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:301) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3729) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4187) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1122) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:310) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1021) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:709) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:432) 2006-09-21 21:58:00,891 ERROR [org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/CommunicationsSuite]:3733] - Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener  PS. Everything was working just fine with SF 1.2.8.   ---  **Affects:** 2.0 RC4","closed","status: declined,","spring-projects-issues","2006-09-21T07:06:36Z","2019-01-12T16:28:44Z"
"","6948","ActiveMQ 4.0.1 & SF 2.0RC2 throw: java.lang.IllegalArgumentException: ClassLoader must not be null [SPR-2259]","**[Marcin Zduniak](https://jira.spring.io/secure/ViewProfile.jspa?name=zduniak)** opened **[SPR-2259](https://jira.spring.io/browse/SPR-2259?redirect=false)** and commented  I was using ActiveMQ 4.0.1 wirh Spring Framework 1.2.8 - it was working just perfectly. Lastly i upgraded my system to SF 2.0RC2 and experience java.lang.IllegalArgumentException when my application is staring on Tomcat 5.5.17.  Whole stack trace:  2006-07-08 20:08:56,877 ERROR [org.springframework.web.context.ContextLoader:205] - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'activeMQBroker' defined in class path resource [activeMQContext.xml]: Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [activeMQ.cfg.xml]; nested exception is java.lang.IllegalArgumentException: ClassLoader must not be null Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [activeMQ.cfg.xml]; nested exception is java.lang.IllegalArgumentException: ClassLoader must not be null Caused by: java.lang.IllegalArgumentException: ClassLoader must not be null at org.springframework.util.Assert.notNull(Assert.java:113) at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.\(DefaultNamespaceHandlerResolver.java:82) at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.\(DefaultNamespaceHandlerResolver.java:74) at org.apache.xbean.spring.context.v2.XBeanNamespaceHandlerResolver.\(XBeanNamespaceHandlerResolver.java:26) at org.apache.xbean.spring.context.v2.XBeanXmlBeanDefinitionReader.createDefaultNamespaceHandlerResolver(XBeanXmlBeanDefinitionReader.java:81) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.createReaderContext(XmlBeanDefinitionReader.java:496) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:476) at org.apache.xbean.spring.context.v2.XBeanXmlBeanDefinitionReader.registerBeanDefinitions(XBeanXmlBeanDefinitionReader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:386) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:340) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:315) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.loadBeanDefinitions(ResourceXmlApplicationContext.java:106) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.loadBeanDefinitions(ResourceXmlApplicationContext.java:99) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:89) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:283) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.\(ResourceXmlApplicationContext.java:65) at org.apache.xbean.spring.context.ResourceXmlApplicationContext.\(ResourceXmlApplicationContext.java:53) at org.apache.activemq.xbean.BrokerFactoryBean.afterPropertiesSet(BrokerFactoryBean.java:76) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:908) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:875) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:396) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:237) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:153) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:248) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:337) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3729) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4187) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1122) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:310) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1021) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:709) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:432)  activeMQBroker:           	JMS Broker     	     	       activeMQ.cfg.xml:  \ \ \ 	\           	          	     		     	          	     		     	          	     		     		     	            \                     	     	     	     	     	     	     	     	       \   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-08T05:17:35Z","2012-06-19T03:52:33Z"
"","7653","NullPointerException in PathMatchingResourcePatternResolver on Resin [SPR-2967]","**[Marcin Owsiany](https://jira.spring.io/secure/ViewProfile.jspa?name=porridge)** opened **[SPR-2967](https://jira.spring.io/browse/SPR-2967?redirect=false)** and commented  Application deployment fails with the following stack trace:  ERROR [resin-36] (ContextLoader.java:205) - Context initialization failed java.lang.NullPointerException at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(PathMatchingResourcePatternResolver.java:390) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:318) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:242) at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:770) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:141) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:292) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at com.caucho.server.webapp.Application.start(Application.java:1647) at com.caucho.server.deploy.DeployController.startImpl(DeployController.java:621) at com.caucho.server.deploy.DeployController.restartImpl(DeployController.java:584) at com.caucho.server.deploy.StartAutoRedeployAutoStrategy.alarm(StartAutoRedeployAutoStrategy.java:176) at com.caucho.server.deploy.DeployController.handleAlarm(DeployController.java:742) at com.caucho.util.Alarm.handleAlarm(Alarm.java:339) at com.caucho.util.Alarm.run(Alarm.java:309) at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:516) at com.caucho.util.ThreadPool.run(ThreadPool.java:442) at java.lang.Thread.run(Thread.java:595)  The code looks like (exception on marked line):      protected Set doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) throws IOException {     	URLConnection con = rootDirResource.getURL().openConnection();     	JarFile jarFile = null;     	String jarFileUrl = null;     	String rootEntryPath = null;          	if (con instanceof JarURLConnection) {     		// Should usually be the case for traditional JAR files.     		JarURLConnection jarCon = (JarURLConnection) con;     		jarFile = jarCon.getJarFile();     		jarFileUrl = jarCon.getJarFileURL().toExternalForm();  > rootEntryPath = jarCon.getJarEntry().getName();      }     else {          // No JarURLConnection -> need to resort to URL file parsing.  JavaDoc for JarURLConnection.getJarEntry() says:  Returns: the JAR entry object for this connection, or null if the JAR URL for this connection points to a JAR file.  Connecting with a debugger reveals that the classpath component that is being inspected when exception is thrown indeed is a jar file, namely /lib/activation.jar!/  Changing the marked line to the folowing code (a kludge, I know) fixes the problem:      if (jarCon.getJarEntry() == null)             rootEntryPath = jarFileUrl + ""!"";     else             rootEntryPath = jarCon.getJarEntry().getName();  regards,  Marcin   ---  **Affects:** 1.2.8, 2.0.1  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","in: core,","spring-projects-issues","2006-12-19T22:51:13Z","2012-06-19T03:50:52Z"
"","7288","Do NOT migrate Spring to purely Maven build. It will be a travesty! [SPR-2599]","**[Marc Palmer](https://jira.spring.io/secure/ViewProfile.jspa?name=wangjammer5)** opened **[SPR-2599](https://jira.spring.io/browse/SPR-2599?redirect=false)** and commented  Ben states in this issue:  http://opensource.atlassian.com/projects/spring/browse/SPR-1484#action_19501  That Spring will be migrating to a purely Maven 2 based build. This could well be a total disaster for Spring. There are many projects that have suffered at the hands of Maven which is revered by some and hated by just as many.  Abandoning pure ANT builds will be a major mistake.  Please feel free to leave comments about your Maven disasters... mine was an inability to build Groovy from source at a critical time in our project because the repository was not available. Stop the Maven Madness!   ---  **Affects:** 2.0 RC4  22 votes, 7 watchers","closed","has: votes-jira,","spring-projects-issues","2006-09-18T03:32:32Z","2019-01-11T19:22:24Z"
"","7209","doc type at A.2.2.5.  in 2.x docs [SPR-2520]","**[Marc Logemann](https://jira.spring.io/secure/ViewProfile.jspa?name=logemann)** opened **[SPR-2520](https://jira.spring.io/browse/SPR-2520?redirect=false)** and commented  Small type at section: A.2.2.5.   the closing \ is not a map but a \, should be \  Most likely this is also in former docs because its the old way of doing things...    ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-31T09:00:31Z","2006-09-01T10:02:46Z"
"","7021","better logging on AnnotationTransactionAttributeSource [SPR-2332]","**[Marc Logemann](https://jira.spring.io/secure/ViewProfile.jspa?name=logemann)** opened **[SPR-2332](https://jira.spring.io/browse/SPR-2332?redirect=false)** and commented  i am using `@Transactional` annotations whereever i can but i found out that the logging is not that detailed than with a classic transactionAttributeSource list.  Lets take a debug of an annotated transaction:  [DEBUG 19:39:47] AbstractPlatformTransactionManager.getTransaction( 279) | Creating new transaction with name [de.netversys.service.ConfigurationManager.getConfi guration]  In contrast to that, with the ""old"" declarative approach, i am getting more infos like these:  [DEBUG 19:39:43] MethodMapTransactionAttributeSource.addTransaction alMethod(157) | Adding transactional method [public abstract boolean de.netversys.service.remote.ClientManagerRemote.is ERPClientActive(java.lang.String) throws java.lang.Exception] with attribute [PROPAGATION_REQUIRED,ISOLATION_DEFAULT]  The point is, right now i cant see what kind of transaction Spring uses. I have ""orm"" and ""transaction"" logging level at DEBUG. I just wanna make sure that te transaction has the same propagation level than defined in the annotated code.   ---  **Affects:** 1.2.8, 2.0.1  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-07-20T18:25:32Z","2012-06-19T03:50:18Z"
"","7422","AbstractJasperReportsSingleFormatView, model parameters override ""createExporter()"" [SPR-2734]","**[Marc Baiges](https://jira.spring.io/secure/ViewProfile.jspa?name=inudor)** opened **[SPR-2734](https://jira.spring.io/browse/SPR-2734?redirect=false)** and commented  I'm facing a problem when using JasperReports in a project with Spring. I'd like to use an implementation of the abstract AbstractJasperReportsSingleFormatView, defining my own createExporter() method with my desired parameters. The code in AbstractJasperReportsSingleFormatView is...      	// Prepare report for rendering.     	JRExporter exporter = createExporter();          	// Set exporter parameters - overriding with values from the Model.     	Map mergedExporterParameters = mergeExporterParameters(model);     	if (mergedExporterParameters != null) {     		exporter.setParameters(mergedExporterParameters);     	}  and mergeExporterParameters(model) does...      protected Map mergeExporterParameters(Map model) {     	Map mergedParameters = new HashMap();	     	...	     	return mergedParameters;     }  so it seems mergedExporterParameters will never be null... isn't it? Then, even I'm not exporting parameters in my model, the ones I define will be overriden. shouldn't it be more logical something like:      if ((mergedExporterParameters != null)&&(mergedExporterParameters.size()>0)) {          exporter.setParameters(mergedExporterParameters);     }    ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-19T20:49:00Z","2012-06-19T03:50:26Z"
"","7666","destroy-method order incorrect when dependencies are present between parent and child application contexts [SPR-2980]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-2980](https://jira.spring.io/browse/SPR-2980?redirect=false)** and commented  We're having trouble with the following:  We have a Struts servlet bean defined in action-servlet.xml (let's call it bean A). This bean has a destroy-method. Bean A has dependency on bean B set via setter injection, which is defined elsewhere in the parent application context (applicationContext.xml). Bean B also has a destroy method.  Normally, when all beans are defined in the same application context, if bean A has a dependency on bean B, B is initialized before bean A, and on shutdown, bean A is destroyed first, and only then bean B is destroyed.  The issue here is that when bean A is in a child servlet application context, the destroy sequence is incorrect (bean B is destroyed before servlet bean A). This is a problem for us, since bean A uses bean B when shutting down.  Any ideas?   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-24T05:22:29Z","2019-01-11T21:26:09Z"
"","7471","Support MultipartFile-array property [SPR-2784]","**[Maarten Winkels](https://jira.spring.io/secure/ViewProfile.jspa?name=mwinkels)** opened **[SPR-2784](https://jira.spring.io/browse/SPR-2784?redirect=false)** and commented  When posting multiple non-file form fields with the same name, the CommonsMultipartResolver(as CommonsFileUploadSupport ) recognizes this as an array property. When posting multiple file form fields with the same name, the property value is overwritten. If the same logic would be applied, a bean could be populated with a MulitpartFile[] property.  exmaple:  public class Bean { private String aString; private String[] aStringArray; private MultipartFile aFile; private MulitpartFile[] aFileArray; }  \ \ \ \ \ \ \ \ if this forms is processed with the CommonsMultipartResolver, the String and String[] properties will be populated correctly (containing the two values in he array), the MultipartFile property will be filled correctly, but the MultipartFile[] property will contain only the last file.  ---  **Affects:** 2.0 final  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/12079/patch.txt) (_5.51 kB_)  **Issue Links:** - #21181 Multipart Upload with Commons Fileupload on lazy mode downloads data on cleanup - #12137 Regression in comma-delimited String to Collection binding  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/255d1ad434d734329a9893e04bcdaf6a8d2a5538, https://github.com/spring-projects/spring-framework/commit/66a799552f9eae321226598714dead2d4d74f15a, https://github.com/spring-projects/spring-framework/commit/b2b1ff60dd3f448457b7bc95ee4edb1e968f3e99, https://github.com/spring-projects/spring-framework/commit/9b3fbc2333e419a41847669f09f0fb90d2f32f16  7 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2006-10-31T19:26:22Z","2019-01-11T21:06:23Z"
"","7106","combine functionality of SimpleJdbcTemplate and NamedParameterJdbcTemplate [SPR-2417]","**[Maarten Bosteels](https://jira.spring.io/secure/ViewProfile.jspa?name=maarten)** opened **[SPR-2417](https://jira.spring.io/browse/SPR-2417?redirect=false)** and commented  It would be cool if the functionality of SimpleJdbcTemplate and NamedParameterJdbcTemplate could be combined in one class.   ---  **Affects:** 2.0 RC1, 2.0 RC2, 2.0 RC3  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-11T21:58:24Z","2012-06-19T03:50:48Z"
"","7217","Method order in the class is important when populating the bean [SPR-2528]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-2528](https://jira.spring.io/browse/SPR-2528?redirect=false)** and commented  When the setter method is overriden, application context picks the first ocurrence of it. So the behaviour of the application depends on the order of the methods in the class. For example:  public class TestBean { private static final Log LOG = LogFactory.getLog(TestBean.class);      	boolean map1;     	boolean map2;     	     	public void setData1(List list)     	{     		LOG.debug(""Setting list data1"");     		map1 = false;     	}     	public void setData1(Map map)     	{     		LOG.debug(""Setting map data1"");     		map1 = true;     	}          	     	public void setData2(Map map)     	{     		LOG.debug(""Setting map data2"");     		map2 = true;     	}     	public void setData2(List list)     	{     		LOG.debug(""Setting list data2"");     		map2 = false;     	}  }  ---  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  ---  public void testSpring() { LOG.debug(""Java version: ""+System.getProperty(""java.version"")); ApplicationContext context = new ClassPathXmlApplicationContext(""applicationContext.xml""); TestBean bean = (TestBean) context.getBean(""testBean"", TestBean.class); assertEquals(""Both should be maps or lists"", bean.map1, bean.map2); }  ---  **Affects:** 1.2.8, 2.0 M4","closed","in: core,","spring-projects-issues","2006-09-02T03:07:15Z","2019-01-13T22:46:19Z"
"","7757","Scoped beans force all AOP proxies to CGLib proxies. Setting  doesn't  change this behaviour. [SPR-3071]","**[Luciano Montebove](https://jira.spring.io/secure/ViewProfile.jspa?name=montebove)** opened **[SPR-3071](https://jira.spring.io/browse/SPR-3071?redirect=false)** and commented  When in an applicationContext configuration file is added a scoped bean as for example : \  \ All AOP proxies even not involved with this bean will be CGLib proxies. Trying to force JDK proxies with  doesn't produce any effect.  ---  **Affects:** 2.0.2  **Issue Links:** - #7758 Document the 'proxy-target-class' attribute of the  element. (_**""is depended on by""**_)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2007-01-23T22:46:48Z","2019-01-11T16:42:25Z"
"","6911","DB2 Universial Driver and unnamed savepoints [SPR-2221]","**[Louis C. Hilden](https://jira.spring.io/secure/ViewProfile.jspa?name=hildenl)** opened **[SPR-2221](https://jira.spring.io/browse/SPR-2221?redirect=false)** and commented  Spring seems to assume (rightly so or not) that Connection.setSavepoint() will always return a savepoint with a unique name for each call.    When I use nested transactions using the DB2 Universal Driver, I get the following execeptions in the tracelog:  com.ibm.db2.jcc.b.SqlException: This is an un-named savepoint. at com.ibm.db2.jcc.b.dd.getSavepointName(dd.java:45) at com.ibm.db2.jcc.b.o.a(o.java:1896) at com.ibm.db2.jcc.b.o.setSavepoint(o.java:1866) at org.apache.commons.dbcp.DelegatingConnection.setSavepoint(DelegatingConnection.java:338) at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.setSavepoint(PoolingDataSource.java:340) at org.springframework.jdbc.datasource.JdbcTransactionObjectSupport.createSavepoint(JdbcTransactionObjectSupport.java:131) at org.springframework.transaction.support.AbstractTransactionStatus.createAndHoldSavepoint(AbstractTransactionStatus.java:132) at org.springframework.transaction.support.AbstractPlatformTransactionManager.handleExistingTransaction(AbstractPlatformTransactionManager.java:375) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:296) at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:234) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:93) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:647) at cv.vendorlink.service.ActivityItemProcessor$$EnhancerByCGLIB$$2179b703.processFilledOrder(\) at cv.vendorlink.service.LoadFileProcessorImpl.processLoadVault(LoadFileProcessorImpl.java:140) at cv.vendorlink.service.LoadFileProcessorImpl.processFile(LoadFileProcessorImpl.java:106) at cv.vendorlink.service.LoadFileProcessorImpl$$FastClassByCGLIB$$7ef95e46.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:709) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:148) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:100) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:647) at cv.vendorlink.service.LoadFileProcessorImpl$$EnhancerByCGLIB$$b3a8bf83.processFile(\) at cv.vendorlink.service.LoadServiceImpl.runService(LoadServiceImpl.java:113) at cv.vendorlink.service.AbstractService.run(AbstractService.java:80) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.util.MethodInvoker.invoke(MethodInvoker.java:276) at org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean$MethodInvokingJob.executeInternal(MethodInvokingJobDetailFactoryBean.java: 177) at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:90) at org.quartz.core.JobRunShell.run(JobRunShell.java:203) at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:520) [ibm][db2][jcc] END TRACE_DIAGNOSTICS [ibm][db2][jcc] [t4][time:1151618230305][thread:Vendorlink_Worker-2][tracepoint:5][Request.flush] [ibm][db2][jcc][t4]        SEND BUFFER: EXCSQLIMM              (ASCII)           (EBCDIC) [ibm][db2][jcc][t4]        0 1 2 3 4 5 6 7   8 9 A B C D E F   0123456789ABCDEF  0123456789ABCDEF [ibm][db2][jcc][t4] 0000   0058D05100010052  200A00442113C3E5  .X.Q...R ..D!...  ..}...........CV [ibm][db2][jcc][t4] 0010   C9C1E3E2C4C24040  4040404040404040  ......@@@@@@@@@@  IATSDB [ibm][db2][jcc][t4] 0020   D5E4D3D3C9C44040  4040404040404040  ......@@@@@@@@@@  NULLID [ibm][db2][jcc][t4] 0030   4040E2E8E2E2C8F2  F0F0404040404040  @@........@@@@@@    SYSSH200 [ibm][db2][jcc][t4] 0040   404040405359534C  564C303100410005  @@@`@SYSLVL01`.A..      ...","closed","in: core,","spring-projects-issues","2006-06-29T10:32:15Z","2012-06-19T03:52:42Z"
"","7587","Add a HibernateDaoSupport / HibernateTemplate exclusively for handling Hibernate Stateless Sessions [SPR-2899]","**[Los Morales](https://jira.spring.io/secure/ViewProfile.jspa?name=moraleslos)** opened **[SPR-2899](https://jira.spring.io/browse/SPR-2899?redirect=false)** and commented  Something similar to the HibernateDaoSupport / HibernateTemplate to handle Hibernate's stateless session APIs.  ---  **Affects:** 2.0.1  **Issue Links:** - #7184 Support Hibernate StatelessSession - #10870 Add callback for Hibernate StatelessSession to HibernateTemplate  5 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2006-11-30T00:57:53Z","2019-01-11T21:39:39Z"
"","7810","Add ability to add pre and post HTML tags to form:errors tag, which should only appear when tag is triggered. [SPR-3124]","**[Leo Hart](https://jira.spring.io/secure/ViewProfile.jspa?name=leojhartiv)** opened **[SPR-3124](https://jira.spring.io/browse/SPR-3124?redirect=false)** and commented  This references a topic discussed on the Spring Web Flow forums:  http://forum.springframework.org/showthread.php?t=34440  Basically I was looking for a way of delimiting multiple form:errors tags in a row.  The current delimiter attribute is only applied to multiple errors for a single field.  In this situation, I have multiple fields erroring and would like to have a delimiter between each.  This is useful when you want all error messages displayed in one location vs before/after each field.  One suggestion was allowing something like this:  \ \\\ \\\ \\\     \  Where the \ tags would only be appended when the form:errors where triggered and rendered.  Another option might be to make \ and \ inner elements in order to give the user more control over where they might appear.  Thanks, Leo   ---  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-04T05:59:39Z","2012-06-19T09:37:36Z"
"","7874","Refactor Acegi's FilterToBeanProxy class into the Spring Web module [SPR-3189]","**[Lee Jonas](https://jira.spring.io/secure/ViewProfile.jspa?name=leejonas)** opened **[SPR-3189](https://jira.spring.io/browse/SPR-3189?redirect=false)** and commented  Acegi provides a mechanism for hooking into JEE HTTP Filtering and configuring a chain of HTTP Filters via Spring.  This is put to use within Acegi for hooking security aspects into a web application.  It strikes me that this is a generally useful mechanism that goes beyond just security aspects.  It would be good to refactor this into the spring-web module, so it is available for applications that do not use Acegi as a general way of configuring HTTP Filters.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-20T21:08:26Z","2019-01-11T17:36:44Z"
"","7144","Provide a constrained locale resolver [SPR-2455]","**[Laurent Pireyn](https://jira.spring.io/secure/ViewProfile.jspa?name=lpireyn)** opened **[SPR-2455](https://jira.spring.io/browse/SPR-2455?redirect=false)** and commented  Most web applications support only a limited set of locales. The existing locale resolvers are useful but it could be even more useful to have the resolved locale constrained to one of the supported locales. A constrained locale resolver could do that while delegating the actual locale resolution to another (injected) locale resolver.   ---  **Affects:** 1.2.8  **Attachments:** - [ConstrainedLocaleResolver.java](https://jira.spring.io/secure/attachment/11892/ConstrainedLocaleResolver.java) (_3.81 kB_)","closed","type: enhancement,","spring-projects-issues","2006-08-21T20:39:24Z","2012-06-19T09:37:37Z"
"","6931","hidden input tag should not be printed if tag is disabled in CheckboxTag.java [SPR-2241]","**[Lars Duvaas](https://jira.spring.io/secure/ViewProfile.jspa?name=larsd)** opened **[SPR-2241](https://jira.spring.io/browse/SPR-2241?redirect=false)** and commented  The CheckboxTag should not print the input hidden field when the tag is disabled.  example:   If you have a tag like this, where myproperty is true and disabled is set to true myProperty will be set to false after submit.   ---  **Affects:** 2.0 M4","closed","type: bug,","spring-projects-issues","2006-07-05T20:45:40Z","2012-06-19T03:52:45Z"
"","6970","@Transactional annotation hodes @ManagedResource [SPR-2281]","**[Larry Singer](https://jira.spring.io/secure/ViewProfile.jspa?name=pbpanther)** opened **[SPR-2281](https://jira.spring.io/browse/SPR-2281?redirect=false)** and commented  I have a class that has both the annotations `@Transactional` and `@ManagedResource`. The resource is not being registered to JMX. If I comment out the `@Transactional` annotations then the class is registered to JMX.  My guess is that the class is wrapped by the transactional aspects, and then that wrapped class is passed to the MBeanExporter. The MBeanExporter can no longer see the `@ManagedResource` annotations.  This is easy to work around, but I have no idea where to start looking for a fix for it. It may require support from CGLib to propogate the annotations from the underlying class to the wrapped class.  ---  **Affects:** 1.2.6  **Issue Links:** - #18760 `@ManagedResource` not discovered if at least one method is `@Transactional`, and no exception thrown - #9732 Doc/warning: JMX autodetection ignoring JDK-proxied `@Transactional` beans","closed","in: core,","spring-projects-issues","2006-07-11T13:24:53Z","2019-01-13T08:54:34Z"
"","7333","Add PropertyEditor for java.util.regex.Pattern [SPR-2644]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-2644](https://jira.spring.io/browse/SPR-2644?redirect=false)** and commented  Please add a PropertyEditor for java.util.regex.Pattern.  Here's the editor I've been using.  import java.beans.PropertyEditorSupport; import java.util.regex.Pattern;  public class PatternEditor extends PropertyEditorSupport { public void setAsText(String text) { setValue(text != null ? Pattern.compile(text) : null); }      public String getAsText() {             Pattern value = (Pattern) getValue();             return (value != null ? value.pattern() : """");     }  }   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-26T16:00:39Z","2012-06-19T03:50:04Z"
"","7265","ResourceArrayPropertyEditor doesn't keep the order of elements in Java 1.3 (loading order problem with PropertyPlaceholderConfigurer) [SPR-2576]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-2576](https://jira.spring.io/browse/SPR-2576?redirect=false)** and commented  I'm using this type of way to override default properties in PropertyPlaceholderConfigurer.           	     		     			WEB-INF/someapp.properties     			file:///usr/applications/someapp/properties/someapp.properties							     		     	     	       I noticed that the given property files don't get read in the given order when running Spring on Java 1.3. The problem is in org.springframework.core.io.support.ResourceArrayPropertyEditor which uses a java.util.Set to keep the merged Resource objects. This problem doesn't occur on Java 1.4 or when Commons Collections 3.x is available (uses CollectionFactory.createLinkedSetIfPossible). On Java 1.3 java.util.HashSet gets used and that doesn't keep the order of added elements.   ---  **Affects:** 1.2.8, 2.0 RC3","closed","in: core,","spring-projects-issues","2006-09-12T02:12:04Z","2019-01-11T19:22:42Z"
"","7187","""java.lang.ClassCastException: bsh.Primitive"" when bsh script returns null (or is a void function); bsh.Primitive.NULL / VOID handling is missing [SPR-2498]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-2498](https://jira.spring.io/browse/SPR-2498?redirect=false)** and commented  I have a bsh script containing a single method ""String getSomething(String param)"". This implements the java interface: public interface SomeInterface { public String getSomething(String param); } Whenever the script returns null, the execution returns this exception: java.lang.ClassCastException: bsh.Primitive at $Proxy52.getSomething(Unknown Source)(Compiled Code) at java.lang.reflect.Method.invoke(Native Method) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java(Com piled Code)) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMe thodInvocation.java(Inlined Compiled Code))  Special handling for bsh.Primitive.NULL and bsh.Primitive.VOID return objects should be added to BshObjectInvocationHandler (in org/springframework/scripting/bsh/BshScriptUtils.java).   ---  **Affects:** 2.0 RC3  **Attachments:** - [bsh_primitive.patch](https://jira.spring.io/secure/attachment/11914/bsh_primitive.patch) (_967 bytes_)","closed","in: core,","spring-projects-issues","2006-08-28T09:28:56Z","2012-06-19T03:50:30Z"
"","6896","Compiler creates invalid byte code for IBM Java 1.3 for class AbstractUrlHandlerMapping (java.lang.NoSuchFieldError PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE) [SPR-2206]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-2206](https://jira.spring.io/browse/SPR-2206?redirect=false)** and commented  The java compiler creates invalid bytecode for IBM Java 1.3 compiler. This bug prevents using Spring MVC 2.0 in WAS 5.0 appserver. The problem is in the class AbstractUrlHandlerMapping.  There is an easy workaround  in org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java:      protected void exposePathWithinMapping(String pathWithinMapping, HttpServletRequest request) {  -         request.setAttribute(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping);  +                 request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping);       }  (diff format)  The problem gets fixed when PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE is referenced directly from the interface that defines it (HandlerMapping).  StackTrace:  java.lang.NoSuchFieldError: org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: field PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE not found]: java.lang.NoSuchFieldError: org.springframework.web.servlet.handler.AbstractUrlHandlerMapping: field PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE not found at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.exposePathWithinMapping(AbstractUrlHandlerMapping.java:209) at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.lookupHandler(AbstractUrlHandlerMapping.java:170) at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.getHandlerInternal(AbstractUrlHandlerMapping.java:136) at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:93) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:934) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:777) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:727) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:360) at javax.servlet.http.HttpServlet.service(HttpServlet.java:760)   ---  **Affects:** 2.0 M5, 2.0 RC1  **Attachments:** - [AbstractUrlHandlerMapping.patch](https://jira.spring.io/secure/attachment/11740/AbstractUrlHandlerMapping.patch) (_843 bytes_)  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2006-06-27T20:19:54Z","2012-06-19T03:52:41Z"
"","7689","Strange view lookup problem using Spring with Tomcat on JDK 1.6 [SPR-3003]","**[korey shronts](https://jira.spring.io/secure/ViewProfile.jspa?name=kshronts)** opened **[SPR-3003](https://jira.spring.io/browse/SPR-3003?redirect=false)** and commented  I've run into a problem running on the new JSE 1.6 release. Server is Tomcat 5.5.17. I configured Tomcat with the new JVM and restarted. Now, whenever I access a URL for my app I get a 404 error. There appears to be some problem related to the cacheing of my view beans and the view name returned although I'm not sure. Here is the relevant debug log messages (running JSE 1.6):  DEBUG 2006-12-11 16:37:40,499 [http-80-Processor25] (AbstractUrlViewController.java:88) - Returning view name 'main' for lookup path: /main.html DEBUG 2006-12-11 16:37:40,515 [http-80-Processor25] (AbstractAutowireCapableBeanFactory.java:999) - Invoking setBeanName on BeanNameAware bean 'main' DEBUG 2006-12-11 16:37:40,515 [http-80-Processor25] (AbstractAutowireCapableBeanFactory.java:293) - Invoking BeanPostProcessors before initialization of bean 'main' DEBUG 2006-12-11 16:37:40,515 [http-80-Processor25] (ApplicationContextAwareProcessor.java:84) - Invoking setApplicationContext on ApplicationContextAware bean 'main' DEBUG 2006-12-11 16:37:40,515 [http-80-Processor25] (ServletContextAwareProcessor.java:84) - Invoking setServletContext on ServletContextAware bean 'main' DEBUG 2006-12-11 16:37:40,515 [http-80-Processor25] (AbstractAutowireCapableBeanFactory.java:1055) - Invoking afterPropertiesSet() on bean with name 'main' DEBUG 2006-12-11 16:37:40,515 [http-80-Processor25] (AbstractAutowireCapableBeanFactory.java:307) - Invoking BeanPostProcessors after initialization of bean 'main' DEBUG 2006-12-11 16:37:40,515 [http-80-Processor25] (AbstractCachingViewResolver.java:82) - Cached view [main] DEBUG 2006-12-11 16:37:40,515 [http-80-Processor25] (DispatcherServlet.java:1103) - Rendering view [org.springframework.web.servlet.view.JstlView: name 'main'; URL [main]] in DispatcherServlet with name 'DispatcherServlet' DEBUG 2006-12-11 16:37:40,531 [http-80-Processor25] (AbstractView.java:233) - Rendering view with name 'main' with model null and static attributes {} DEBUG 2006-12-11 16:37:40,562 [http-80-Processor25] (InternalResourceView.java:114) - Forwarded to resource [main] in InternalResourceView 'main' DEBUG 2006-12-11 16:37:40,562 [http-80-Processor25] (DispatcherServlet.java:880) - Cleared thread-bound request context: org.acegisecurity.wrapper.SavedRequestAwareWrapper `@1ef0b44` DEBUG 2006-12-11 16:37:40,578 [http-80-Processor25] (FrameworkServlet.java:416) - Successfully completed request  And here is the debug log from the same app running on JVM 1.5.0_07:  DEBUG 2006-12-11 16:54:37,792 [http-80-Processor25] (AbstractUrlViewController.java:88) - Returning view name 'main' for lookup path: /main.html DEBUG 2006-12-11 16:54:37,792 [http-80-Processor25] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'main' DEBUG 2006-12-11 16:54:37,792 [http-80-Processor25] (AbstractCachingViewResolver.java:82) - Cached view [main] DEBUG 2006-12-11 16:54:37,792 [http-80-Processor25] (DispatcherServlet.java:1103) - Rendering view [org.springframework.web.servlet.view.tiles.TilesJs tlView: name 'main'; URL [.main]] in DispatcherServlet with name 'DispatcherServlet' DEBUG 2006-12-11 16:54:37,792 [http-80-Processor25] (AbstractView.java:233) - Rendering view with name 'main' with model null and static attributes {} DEBUG 2006-12-11 16:54:38,042 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'httpSessionContextIntegrationFilterWithASCTrue' DEBUG 2006-12-11 16:54:38,042 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'logoutFilter' DEBUG 2006-12-11 16:54:38,042 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'authenticationProcessingFilter' DEBUG 2006-12-11 16:54:38,042 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'contextHolderAwareRequestFilter' DEBUG 2006-12-11 16:54:38,042 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'exceptionTranslationFilter' DEBUG 2006-12-11 16:54:38,042 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'filterInvocationInterceptor' DEBUG 2006-12-11 16:54:38,058 [http-80-Processor24] (AbstractApplicationContext.java:239) - Publishing event in context [Root WebApplicationContext]: org.acegisecurity.event.authorization.AuthorizedEv ent[source=FilterInvocation: URL: /css/styles.css] DEBUG 2006-12-11 16:54:38,136 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'httpSessionContextIntegrationFilterWithASCTrue' DEBUG 2006-12-11 16:54:38,136 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'logoutFilter' DEBUG 2006-12-11 16:54:38,136 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'authenticationProcessingFilter' DEBUG 2006-12-11 16:54:38,136 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'contextHolderAwareRequestFilter' DEBUG 2006-12-11 16:54:38,136 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'exceptionTranslationFilter' DEBUG 2006-12-11 16:54:38,136 [http-80-Processor24] (AbstractBeanFactory.java:197) - Returning cached instance of singleton bean 'filterInvocationInterceptor' DEBUG 2006-12-11 16:54:38,136 [http-80-Processor24] (AbstractApplicationContext.java:239) - Publishing event in context [Root WebApplicationContext]: org.acegisecurity.event.authorization.AuthorizedEv ent[source=FilterInvocation: URL: /js/jscalendar-1.0/calendar-win2k-cold-1.css] DEBUG 2006-12-11 16:54:38,152 [http-80-Processor25] (InternalResourceView.java:114) - Forwarded to resource [.main] in InternalResourceView 'main' DEBUG 2006-12-11 16:54:38,152 [http-80-Processor25] (DispatcherServlet.java:880) - Cleared thread-bound request context: org.acegisecurity.wrapper.SavedRequestAwareWrapper `@d767dc` DEBUG 2006-12-11 16:54:38,152 [http-80-Processor25] (FrameworkServlet.java:416) - Successfully completed request  Notice the working version returns the ""main"" bean from cache, while the broken version seems to be creating a new bean of the wrong type - JstlView. It should be TilesJstlView .  Also notice that the view name returned is different ("".main"" and ""main"") - this is why I'm getting the 404's. I don't have any idea why the JVM change would cause this, just thought I'd throw this out to any gurus out there.  Here's the definition for the ""main"" bean from my views.xml file:  \ \\.main\\ \   ---  **Affects:** 2.0.1","closed","","spring-projects-issues","2007-01-02T01:38:29Z","2019-01-11T16:33:06Z"
"","7145","Unable to set boolean parameter for Jasperreports in views.properties [SPR-2456]","**[Kjetil Ødegaard](https://jira.spring.io/secure/ViewProfile.jspa?name=kjetilod)** opened **[SPR-2456](https://jira.spring.io/browse/SPR-2456?redirect=false)** and commented  I've just experienced the same problem as Matt Raible in #5901: I get a ClassCastException (String) for this view properties configuration:  reportView.exporterParameters[net.sf.jasperreports.engine.export.JRHtmlExporterParameter.IS_USING_IMAGES_TO_ALIGN]=false  #5901 is supposed to be fixed. Is this a regression in 2.0-RC2?  Using Jasperrepors 1.2.5.  ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-08-22T00:46:47Z","2019-01-11T19:34:37Z"
"","7440","JMS Queue Configuration with BEA Weblogic [SPR-2752]","**[Kevin Ryan](https://jira.spring.io/secure/ViewProfile.jspa?name=springahead)** opened **[SPR-2752](https://jira.spring.io/browse/SPR-2752?redirect=false)** and commented  The following error message is generated when using BEA Weblogic and a Queue. Setup of JMS message listener invoker failed - trying to recover  weblogic.jms.common.InvalidDestinationException: Destination must be a topic, MyJMSQueue Note! The supspicous code was introduced sometime after Version 2.0 RC2.  The problem is in the following code: class: org.springframework.jms.listener.AbstractMessageListenerContainer      public void setDestination(Destination destination) {     	Assert.notNull(destination, ""destination must not be null"");     	this.destination = destination;     	setPubSubDomain(destination instanceof Topic);     }  BEA Weblogic produces a weblogic.jms.common.DestinationImpl which is a destination implementing both javax.jms.Topic and javax.jms.Queue. See the following article - http://mule.mulesource.org/jira/browse/MULE-508  The workaround is to change the sequence of properties in the bean definition as follows: \ \ \ \ \ \ \ Of critical importance is that pubSubDomain MUST FOLLOW destination.   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-25T00:10:46Z","2012-06-19T03:50:54Z"
"","7444","Why not a setQueryTimeout(int seconds) method on RdmsOperation ? [SPR-2756]","**[Kenny West](https://jira.spring.io/secure/ViewProfile.jspa?name=deepthreat)** opened **[SPR-2756](https://jira.spring.io/browse/SPR-2756?redirect=false)** and commented  Hi all,  I was wondering what the thought process was behind the decision to force the use of a transaction for a query timeout. It could have been implemented as a pass through to the JdbcTemplate the same way as the setMaxRows() method is. Then, the JdbcTemplate applyStatementSettings() method could have been implemented as follows:  protected void applyStatementSettings(Statement stmt) throws SQLException { if (getFetchSize() > 0) { stmt.setFetchSize(getFetchSize()); } if (getMaxRows() > 0) { stmt.setMaxRows(getMaxRows()); } if (getQueryTimeout() > 0) { stmt.setQueryTimeout(getQueryTimeout()); } else { DataSourceUtils.applyTransactionTimeout(stmt, getDataSource()); } }  The reason I am asking is because I am running into the unchained transaction error in jConnect (Sybase) when calling stored procedures through the Transaction Proxy. It would be nice if I didn't need a transaction for selects that need a timeout - like this:  private class FinderQuery extends MappingSqlQuery {  protected FinderQuery(DataSource dataSource, String sql, int rows, int timeout) { super(dataSource, sql); setMaxRows(rows); setQueryTimeout(timeout); compile(); }  protected Object mapRow(ResultSet resultSet, int rownum) throws SQLException { MyObject myObject = new MyObject(); myObject.setId(resultSet.getString(""TABLE_ID"")); myObject.setDescription(resultSet.getString(""TABLE _DESC"")); ... return myObject; } }  Interested in any thoughts.  Thanks,  KW   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-25T10:45:15Z","2012-06-19T03:50:38Z"
"","7816","Add getWebApplicationContext(request) to DispatcherServlet [SPR-3130]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3130](https://jira.spring.io/browse/SPR-3130?redirect=false)** and commented  I have a subclass of DispatcherServlet which needs to provide a number of seperate WebApplicationContexts, with only one of those contexts being used for each incoming request, depending on the value of a session attribute.  This is for reasons of integration into a legacy webapp framework.  I'd like to over-ride getWebApplicationContext() to return the correct context for the current request, but unfortunately that method doesn't have a handle on the request object.  Currently I override doDispatch(), which does something like:      protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {         request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getMyCustomContext(request);         super.doDispatch(request, response);     }  This over-writes WEB_APPLICATION_CONTEXT_ATTRIBUTE in the request with the context that I want for thsi request.  This isn't very nice, I'd rather that doService() passed the current request to the getWebApplicationContext() method.  I propose that a new protected method is added to DispatcherServlet:      protected WebApplicationContext getWebApplicationContext(HttpServletRequest request) {         return getWebApplicationContext();     }  doService() would then invoke that method, instead of invoking getWebApplicationContext() directly.  Subclasses could then over-ride this method to return the appropriate appcontext for the current request, with the default behaviour remaining the same.  I'm not 100% convinced that this is the correct approach, but since doService() has access to the request object, it seems a shame not to pass that information along, in the interests of extensibility.   --- No further details from [SPR-3130](https://jira.spring.io/browse/SPR-3130?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-02-07T00:39:16Z","2007-06-26T23:55:52Z"
"","7809","ThreadPoolTaskExecutor could expose raw Executor [SPR-3123]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3123](https://jira.spring.io/browse/SPR-3123?redirect=false)** and commented  ThreadPoolTaskExecutor is a very handy way of creating and configuring a java5 ThreadPoolExecutor.  However, it does not allow client code to get its hands on the underlying ThreadPoolExecutor object, which is sometimes necessary - the Executor and TaskExecutor interfaces aren't always rich enough.  Can we have a getThreadPoolExecutor() method on ThreadPoolTaskExecutor ?   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-06T05:15:21Z","2012-06-19T03:50:09Z"
"","7802","Factory bean for java.util.concurrent.ThreadFactory [SPR-3115]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3115](https://jira.spring.io/browse/SPR-3115?redirect=false)** and commented  Some of the java.util.concurrent beans in Spring, such as ThreadPoolTaskExecutor and ScheduledExecutorFactoryBean, can take a ThreadFactory property.  By default, they use Executors.defaultThreadFactory(), which gives threads generic, anonymous-sounding names which aren't helpful in stack dumps.  Spring provides no nice way of creating and configuring a ThreadFactory, so I suggest a new FactoryBean which does this.  It would be configurable with properties such as thread name prefix, thread group, priority, etc.    ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2007-02-05T21:26:34Z","2012-06-19T03:50:17Z"
"","7785","Provide a Java5-friendly ObjectFactory interface [SPR-3098]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3098](https://jira.spring.io/browse/SPR-3098?redirect=false)** and commented  I'd like to see generic-friendly equivalents to ObjectFactory and ObjectFactoryCreatingFactoryBean, with a type-safe getObject() method, i.e.  public interface ObjectFactory\ { T getObject() throws BeansException; }  These could co-exist with the existing code, in the same way that other java5-only code in Spring now does.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-31T00:43:35Z","2007-12-06T21:44:28Z"
"","7784","Make ObjectFactoryCreatingFactoryBean extendable [SPR-3097]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3097](https://jira.spring.io/browse/SPR-3097?redirect=false)** and commented  ObjectFactoryCreatingFactoryBean is currently rather awkward to subclass, since none of its fields have protected or public accessors.  It needs protected getTargetBeanName() and getBeanFactory() methods.   ---  **Affects:** 2.0.2  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-01-31T00:35:14Z","2012-06-19T03:50:20Z"
"","7768","Reduce verbosity of DefaultListableBeanFactory startup logging [SPR-3082]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3082](https://jira.spring.io/browse/SPR-3082?redirect=false)** and commented  During the startup and shutdown phases of its lifecycle, DefaultListableBeanFactory can be extremely verbose when logging.  Take the case where you have a deep structure of parent-child contexts; for example, a servlet context which has a root webapp context for its parent, which in turn has an EAR context for its parent.  When each servlet context is initialised, it logs the names of the beans for itself, plus its parents beans.  This can get pretty verbose, making it difficult to pick out useful information, rendering the logging less useful.  The cause is pretty simple - DefaultListableBeanFactory's toString() method calls its parent context's toString() method, which does the same, etc etc.  I suggest that the logging of DefaultListableBeanFactory lists only its own bean names during init and disposal.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-26T00:02:34Z","2012-06-19T03:50:16Z"
"","7767","Make BeanDefinition cloneable [SPR-3081]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3081](https://jira.spring.io/browse/SPR-3081?redirect=false)** and commented  The two concrete implementations of BeanDefinition (ChildBeanDefinition and RootBeanDefinition) have copy-constructors which create deep copies of other BeanDefinitions.  However, I have a situation where I want to create copies of arbitrary BeanDefinitions, and it's unappealing to have a series of instanceof checks to find out which copy constructor to invoke (not to mention not being future-proof).  It would be much nicer if BeanDefinition was Cloneable, with a public clone() method.  This would simply invoke the appropriate copy constructor in the concrete implementation, e.g. in RootBeanDefinition:  public Object clone() { return new RootBeanDefinition(this); }   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-25T21:05:03Z","2012-06-19T03:51:07Z"
"","7751","[Quartz] Allow triggers to self-register [SPR-3065]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3065](https://jira.spring.io/browse/SPR-3065?redirect=false)** and commented  Currently, in order to wire up the Quartz scheduler with the triggers, you need to inject the triggers into the SchedulerFactoryBean, e.g. from the ref manual:  \ \ \ \ \ \ \ \  However, in some cases the SchedulerFactoryBean may not have knowledge of the triggers.  It would be good if this could be turned upside down so that you could inject the Scheduler into the Triggers instead, and the trigger would then register itself with the scheduler, e.g.  \ \ \ \ \ \   ---  **Affects:** 2.0.2  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-23T00:15:02Z","2015-09-22T17:34:34Z"
"","7648","Add setObjectName(ObjectName) to MBeanProxyFactoryBean  [SPR-2962]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-2962](https://jira.spring.io/browse/SPR-2962?redirect=false)** and commented  Currently, MBeanProxyFactoryBean.setObjectName() takes a String, which it then converts into a JMX ObjectName.  How about overloading it with a method that takes the ObjectName directly, for cases where you already have it?  i.e.  public void setObjectName(String objectName) { this.objectName = ObjectNameManager.getInstance(objectName); }  public void setObjectName(ObjectName objectName) { this.objectName = objectName; }   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-18T21:26:10Z","2012-06-19T03:50:21Z"
"","7631","Support default-scope attribute in beans/> tag [SPR-2945]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-2945](https://jira.spring.io/browse/SPR-2945?redirect=false)** and commented  Could the root ""beans"" element of the schema support a ""default-scope"" attribute, conceptually similar to ""default-lazy-init"" and other such attributes?  I've just written a beans file which contains nothing but prototype-scope beans, which is error-prone when they all need to be prototypes.  A default value would help here.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-13T04:06:35Z","2007-12-06T22:11:04Z"
"","7520","LocalTaskExecutorThreadPool for Quartz not compatible with Quartz 1.6 [SPR-2833]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-2833](https://jira.spring.io/browse/SPR-2833?redirect=false)** and commented  In version 1.6.0 of Quartz, a new blockForAvailableThreads() method was added to the org.quartz.spi.ThreadPool interface.  This causes org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool to throw an AbstractMethodError at runtime.  If this method were added to LocalTaskExecutorThreadPool, it shouldn't break backwards compatibility with Quartz 1.5   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-13T21:09:22Z","2012-06-19T03:51:17Z"
"","7469","Add property editor support for JodaTime [SPR-2782]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-2782](https://jira.spring.io/browse/SPR-2782?redirect=false)** and commented  JodaTime (http://joda-time.sourceforge.net/) is a very nice API for date and time.  Could Spring come with property editors to convert to and from Joda types such as Duration, Period, DateTime, Instant, etc?   ---  2 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2006-10-31T00:30:31Z","2007-12-06T22:15:55Z"
"","7438","Reduce configuration necessary for ContextLoader to use ContextSingletonBeanFactoryLocator [SPR-2750]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-2750](https://jira.spring.io/browse/SPR-2750?redirect=false)** and commented  Currently, your web.xml has to contain to two different context parameters in order for the webapp's ApplicationContext to use a parent context from ContextSingletonBeanFactoryLocator.  Those are ""locatorFactorySelector"" and ""parentContextKey"".  If locatorFactorySelector is not specified, then nothing will happen.  However, it's that parameter which is usually left at the default value (classpath*:beanRefContext.xml), with the parentContextKey parameter being the interesting one.  It seems to me that in the interests of reduced configuration, not to mention convention-over-configuration, that ContextLoader shouldn't need you to specify locatorFactorySelector.  Instead it should look for the parentContextKey parameter to decide to look for a parent context.    ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-24T18:26:56Z","2012-06-19T03:51:14Z"
"","7434","Allow factory-method to return null [SPR-2746]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-2746](https://jira.spring.io/browse/SPR-2746?redirect=false)** and commented  Digging through the forums, I found this thread:  http://forum.springframework.org/showthread.php?t=21005  I'd like to resurrect this as a JIRA issue.  I agree with the OP, in that it should be acceptable for the return value of the method specified by factory-method to be null, and injected into the target bean as such.  As he says, if you can use \, then you should be able to have a null returned from factory-method.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-24T00:13:14Z","2012-06-19T03:50:55Z"
"","7390","ScheduledExecutorFactoryBean should not require injected tasks [SPR-2702]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-2702](https://jira.spring.io/browse/SPR-2702?redirect=false)** and commented  ScheduledExecutorFactoryBean.afterPropertiesSet() will throw an exception if no tasks have been injected into the bean.  However, I wish to use the ScheduledExecutor in a more dynamic fashion, by injecting the ScheduledExecutor itself into my own beans, and scheduling tasks at runtime.  I have no tasks that are statically configured.  The javadoc claims that ""This class is the direct analogue of the TimerFactoryBean"", but that's not really the case, since TimerFactoryBean doesn't insist on being injecting with a list of tasks.  Slightly annoyed at myself for not catching this one in RCs....   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-10T23:38:41Z","2012-06-19T03:50:58Z"
"","6980","@Required doesn't work with XyzAware interfaces [SPR-2291]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-2291](https://jira.spring.io/browse/SPR-2291?redirect=false)** and commented  If one of my beans implements an interface such as BeanFactoryAware, and then annotates setBeanFactory() with `@Required`, then RequiredAnnotationBeanPostProcessor will complain that the beanFactory property hasn't been set, even though the container has injected the beanFactory automatically.  From the bean's perspective, the beanFactory property is no different to any other property, and should be treated similarly by the container.  The same applies to the other *Aware interfaces (ApplicationContextAware, BeanNameAware, etc)   ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-12T08:50:27Z","2012-06-19T03:52:33Z"
"","6966","TransactionProxyFactoryBean not backwards compatible [SPR-2277]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-2277](https://jira.spring.io/browse/SPR-2277?redirect=false)** and commented  I wasn't planning on filing this issue, since I was taking it as an inevitable part of the Spring 1->2 transition, but since the RC2 release announcement stresses people mentioning backwards compatiblity issues, I thought I'd mention it.  Anyway, under Spring 1, we had some code which manually manipulated a TransactionProxyFactoryBean in java, not using a beanfactory.  We used the setProxyInterfaces(String[]) method.  In Spring 2, this has become setProxyInterfaces(Class[]).  This is unquestionably better, but the fact is it's not backward compatible.  I'm not sure if your commitment to backwards compatibility extends to this sort of usage.   ---  **Affects:** 2.0 RC1, 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-11T03:49:12Z","2012-06-19T03:52:42Z"
"","7135","HibernateOperations (HibernateTemplate) to support FilterParameterSetter [SPR-2446]","**[Kenneth Xu](https://jira.spring.io/secure/ViewProfile.jspa?name=kennethxu)** opened **[SPR-2446](https://jira.spring.io/browse/SPR-2446?redirect=false)** and commented  I know you can enable a filter and set it's parameter value in HibernateTemplate (#6044). But many times, you don't want to code that use the HibernateTemplate to be aware of what filter parameter value to set. For example, many beans are defined in application context. The are injected with one same HibernateTemplate to access data. But the value of the filter must change overtime, and you don't want to repeat the same value setting code in all the beans. The problem can be result if the HibernateTemplate supprts FilterParameterSetter.  ---  **Affects:** 1.2.8, 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-18T03:47:42Z","2019-01-11T19:32:31Z"
"","7125","WebRequestInterceptors should run for Portlet action phase as well [SPR-2436]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-2436](https://jira.spring.io/browse/SPR-2436?redirect=false)** and commented  It looks like org.springframework.web.portlet.handler.WebRequestHandlerInterceptorAdapter.class does not override preHandleAction That appears to be the problem so for portlet action methods  interceptors preHandle s are not fired.  How then would you apply an interceptor to action phase. That seems like a bug.   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-16T06:21:39Z","2012-06-19T03:50:48Z"
"","7258","Serializable Bind exception bean wrapper is transient, therefore installed property editors are lost upon deserialization. [SPR-2569]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-2569](https://jira.spring.io/browse/SPR-2569?redirect=false)** and commented  This particularly complicates life for Web Flow users who like the convenience of putting BindException in flow scope with ""alwaysRedirectOnPause"" turned on... (validation errors are preserved beyond one request but property editors are lost).  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7363 Implementations of AbstractPropertyBindingResult do not preserve the custom property editors (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2006-09-09T09:12:14Z","2019-01-11T19:20:20Z"
"","7257","Add annotation documentation to all elements and attributes in the new core 2.0 custom schemas (XSDs) [SPR-2568]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-2568](https://jira.spring.io/browse/SPR-2568?redirect=false)** and commented  In-line documentation of schema tags really improves user experience with the modern XML tooling out there.   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-09T08:41:07Z","2012-06-19T03:50:40Z"
"","7844","Broken link on reference documentation [SPR-3158]","**[Kees van Dieren](https://jira.spring.io/secure/ViewProfile.jspa?name=keesvandieren)** opened **[SPR-3158](https://jira.spring.io/browse/SPR-3158?redirect=false)** and commented  There is a broken link in the reference documentation: On http://www.springframework.org/docs/reference/scheduling.html  There is a link to: http://java.sun.com/docs/books/tutorial/essential/threads/timer.html  This page does not exists any more.   --- No further details from [SPR-3158](https://jira.spring.io/browse/SPR-3158?redirect=false)","closed","type: bug,","spring-projects-issues","2007-02-13T04:46:03Z","2012-06-19T03:50:15Z"
"","7819","Spring FAQ [SPR-3133]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3133](https://jira.spring.io/browse/SPR-3133?redirect=false)** and commented  The issue of a Spring FAQ has been brought up several times.  Recently though we are seeing the same questions being brought up again and again on the forums.  The changes to the reference manual (e.g. 6.6.1. Understanding AOP proxies) have helped, but there are still some questions which are asked atleast on a weekly basis.  These repeating issues do get added to JIRA for improvement, but I still feel an FAQ would be VERY useful.  One trend that I am conscious of is there being too many different sources of information.  I would hope this might help with that.   --- No further details from [SPR-3133](https://jira.spring.io/browse/SPR-3133?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-02-07T22:55:03Z","2012-06-19T09:37:39Z"
"","7780","JdbcTemplate thread-safety clarification [SPR-3122]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3122](https://jira.spring.io/browse/SPR-3122?redirect=false)** and commented  The issue of JdbcTemplate thread-safety has been raised on a great number of occasions.  I'm not sure if the documentation doesn't cover this, or doesn't make it clear enough.  It would be great if you could clarify if JdbcTemplate is thread-safe and general reuse patterns of it e.g. should you define one and then inject it, should you have one per dao.   ---  **Affects:** 2.0 final, 2.0.1, 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-06T04:22:47Z","2012-06-19T03:50:27Z"
"","7776","9.6.1 TransactionTemplate example [SPR-3090]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3090](https://jira.spring.io/browse/SPR-3090?redirect=false)** and commented  An issue was raised on the forum about the TransactionTemplate example.  Although the documentation does make sense, it could be clearer by providing a complete example.  It's not clear in the example if the TransactionTemplate is created or injected, nor where the variable tt comes from.  It would be great if we could clear up any confusion. http://forum.springframework.org/showthread.php?p=98694   --- No further details from [SPR-3090](https://jira.spring.io/browse/SPR-3090?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-01-29T18:45:40Z","2012-06-19T03:50:30Z"
"","7765","Chapter 12 Typos [SPR-3079]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3079](https://jira.spring.io/browse/SPR-3079?redirect=false)** and commented  12.2.6. Programmatic transaction demarcation      public void increasePriceOfAllProductsInCategory(final String category) {         List productsToChange = this.productDAO.loadProductsByCategory(category);         // ...     }  should be      public void increasePriceOfAllProductsInCategory(final String category) {         List productsToChange = this.productDao.loadProductsByCategory(category);         // ...     }  12.2.7. Declarative transaction demarcation      public void increasePriceOfAllProductsInCategory(final String category) {         List productsToChange = this.productDAO.loadProductsByCategory(category);         // ...     }  should be      public void increasePriceOfAllProductsInCategory(final String category) {         List productsToChange = this.productDao.loadProductsByCategory(category);         // ...     }    ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-25T07:26:28Z","2012-06-19T03:51:15Z"
"","7764","Chapter 8 Typos [SPR-3078]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3078](https://jira.spring.io/browse/SPR-3078?redirect=false)** and commented  [b]8.3.2. Dependency Injection of test fixtures[/b]                           should be                           [b]8.3.5. Example[/b]  public class HibernateClinicTests extends AbstractClinicTests {  protected String[] getConfigLocations() { return new String[] { '/org/springframework/samples/petclinic/hibernate/applicationContext-hibernate.xml' }; } }  should be  public class HibernateClinicTests extends AbstractClinicTests {  protected String[] getConfigLocations() { return new String[] { ""/org/springframework/samples/petclinic/hibernate/applicationContext-hibernate.xml"" }; } }   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-25T06:49:42Z","2012-06-19T03:51:01Z"
"","7763","Spring MVC Interceptor Clarifications [SPR-3077]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3077](https://jira.spring.io/browse/SPR-3077?redirect=false)** and commented  There have been lots of threads lately about SpringMVC and aspects not working.  This is typically an issue of internal calls and the nature of dynamic proxies.  People still seem to be confused and keep asking the same question.  It would be nice if this could be clarified in the SpringMVC documentation.  A backpointer to the ""Understanding AOP proxies"" chapter might be useful.   --- No further details from [SPR-3077](https://jira.spring.io/browse/SPR-3077?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-01-25T06:17:27Z","2012-06-19T03:50:55Z"
"","7762","P Namespace documentation [SPR-3076]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3076](https://jira.spring.io/browse/SPR-3076?redirect=false)** and commented  A question was raised on the forum about the location of the documentation for the p namespace.  As this was covered in Rod's infoQ article, it would be nice to see some solid documentation for it. http://forum.springframework.org/showthread.php?t=34056   ---  **Affects:** 2.0 final, 2.0.1, 2.0.2","closed","type: documentation,","spring-projects-issues","2007-01-25T05:44:29Z","2012-06-19T03:50:15Z"
"","7746","Chapter 11 Code Typos [SPR-3060]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3060](https://jira.spring.io/browse/SPR-3060?redirect=false)** and commented  11.2.3. SimpleJdbcTemplate actor.setId(rs.getLong(Long.valueOf(rs.getLong(""id"")))); should be actor.setId(rs.getLong(""id""));  11.4.4. StoredProcedure (fifth example) declaraParameter(new SqlParameter(CUTOFF_DATE_PARAM, Types.DATE); should be declareParameter(new SqlParameter(CUTOFF_DATE_PARAM, Types.DATE);    --- No further details from [SPR-3060](https://jira.spring.io/browse/SPR-3060?redirect=false)","closed","type: bug,","spring-projects-issues","2007-01-22T06:15:14Z","2012-06-19T03:50:33Z"
"","7733","Comparison of BeanFactory and ApplicationContext features [SPR-3047]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3047](https://jira.spring.io/browse/SPR-3047?redirect=false)** and commented  There have been quite a few questions on the forums recently that ended up being the use of BeanFactory instead of ApplicationContext.  Obviously the features offered by BeanFactory and ApplicationContext differ.  The problem seems to be, people aren't quite sure what the differences are.  thereThe documentation does plainly talk about some things, and hints at others.  AOP was a particular area that I think isn't highlighted enough.  It would be great if the documentation could contain some information on this to highlight the differences.  A possibility is a feature matrix comparing BeanFactory and ApplicationContext.  I honestly think this would clear up lots of confusion!   ---  **Affects:** 2.0.2","closed","type: documentation,","spring-projects-issues","2007-01-17T22:42:40Z","2012-06-19T03:50:53Z"
"","7639","Chapter 12.2 Hibernate Code Typo [SPR-2953]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-2953](https://jira.spring.io/browse/SPR-2953?redirect=false)** and commented  There is a typo in the code for section 12.2.4. Implementing Spring-based DAOs without callbacks.  The code calls session.find which does not exist.  The code should look like this.  [code] public class ProductDaoImpl extends HibernateDaoSupport implements ProductDao { public Collection loadProductsByCategory(String category) throws DataAccessException, MyException {          try {             Query queryObject = session.createQuery(""from test.Product product where product.category=?"");             queryObject.setString(0, category)             List result = queryObject.list();             if (result == null) {                 throw new MyException(""invalid search result"");             }             return result;         }          catch (HibernateException ex) {             throw convertHibernateAccessException(ex);         }     }  } [/code]   ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-12-15T00:37:20Z","2012-06-19T03:50:32Z"
"","7632","Doc: BeanPostProcessor and lazy-init [SPR-2946]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-2946](https://jira.spring.io/browse/SPR-2946?redirect=false)** and commented  I'm not sure if this is a documentation issue or code.  Basically how is a BeanPostProcessor supposed to act if its been marked as lazy-init=""true""?  At the moment with an ApplicationContext, the lazy-init is ignore, with BeanFactory respected.  The documentation does hint at this but its not very clear.  Quote from the documentation.  It is important to know that a BeanFactory treats bean post-processors slightly differently than an ApplicationContext. An ApplicationContext will automatically detect any beans which are defined in the configuration metadata which is supplied to it that implement the BeanPostProcessor interface, and register them as post-processors, to be then called appropriately by the container on bean creation. Nothing else needs to be done other than deploying the post-processors in a similar fashion to any other bean. On the other hand, when using a BeanFactory implementation, bean post-processors explicitly have to be registered, with code like this:  Note: You typically don't want to have BeanPostProcessors marked as being lazily-initialized. If they are marked as such, then the Spring container will never instantiate them, and thus they won't get a chance to apply their custom logic. If you are using the 'default-lazy-init' attribute on the declaration of your \ element, be sure to mark your various BeanPostProcessor bean definitions with 'lazy-init=""false""'.  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-extension-bpp    ---  **Affects:** 2.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30751c9b0ae49a980ef548b1a8ab83d11f5c7fd1","closed","type: task,","spring-projects-issues","2006-12-13T04:21:32Z","2012-06-19T03:50:50Z"
"","7624","Chapter 5 Typos [SPR-2938]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-2938](https://jira.spring.io/browse/SPR-2938?redirect=false)** and commented  There is no name property on the Employee, there is only a salary.  The name property is actually on the company.  // ok, let's create the director and tie it to the company: BeanWrapper jim = BeanWrapperImpl(new Employee()); jim.setPropertyValue(""name"", ""Jim Stravinsky""); company.setPropertyValue(""managingDirector"", jim.getWrappedInstance());  // retrieving the salary of the managingDirector through the company Float salary = (Float) company.getPropertyValue(""managingDirector.salary"");   ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-12-11T07:08:08Z","2012-06-19T03:51:07Z"
"","7622","3.8.2. Events BlackListNotifier typo [SPR-2936]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-2936](https://jira.spring.io/browse/SPR-2936?redirect=false)** and commented  BlackListNotifier implement ApplicationListener should read BlackListNotifier implements ApplicationListener   --- No further details from [SPR-2936](https://jira.spring.io/browse/SPR-2936?redirect=false)","closed","type: bug,","spring-projects-issues","2006-12-10T07:13:37Z","2012-06-19T03:50:55Z"
"","7621","Arbitrary method replacement typo [SPR-2935]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-2935](https://jira.spring.io/browse/SPR-2935?redirect=false)** and commented  ReplacementComputeValue code is missing a bracket, it doesn't close the reimplement method.  Do issues like this need to be defected?   --- No further details from [SPR-2935](https://jira.spring.io/browse/SPR-2935?redirect=false)","closed","type: bug,","spring-projects-issues","2006-12-10T06:31:37Z","2012-06-19T03:50:42Z"
"","7620","Setter Injection Code Example Typo [SPR-2934]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-2934](https://jira.spring.io/browse/SPR-2934?redirect=false)** and commented  The method reads setMoveFinder it should be setMovieFinder.   ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-12-10T05:50:54Z","2012-06-19T03:50:31Z"
"","7581","Petclinic Toplink username hardcoded [SPR-2893]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-2893](https://jira.spring.io/browse/SPR-2893?redirect=false)** and commented  A problem recently came up on the forum, a user changed the username property in the jdbc.properties file.  This change however did not actually make any difference.  If the username was changed to an invalid value it still worked.  It looks like the username property in the toplink-mappings.xml potentially shouldn't be there sa.  http://forum.springframework.org/showthread.php?t=31606    ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-11-29T04:00:08Z","2012-06-19T03:51:07Z"
"","7569","HibernateTemplate bulkUpdate confusion/improvement? [SPR-2881]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-2881](https://jira.spring.io/browse/SPR-2881?redirect=false)** and commented  There is some confusion over the bulkUpdate method on HibernateTemplate.  Should it work with Jdbc style or named parameters.  The javadoc isn't very clear on this point, it would be nice to clarify this.  Looking at the code, it appears to only work with Jdbc style parameters.  If this is the case, it would be nice if it support named parameters, much like the difference between find and findByNamedQueryAndNamedParam.  The issue can be seen here. http://forum.springframework.org/showthread.php?t=31907  The example usages here. http://www.hibernate.org/hib_docs/v3/reference/en/html_single/#batch-direct  Code here.  public int bulkUpdateByNamedQueryAndNamedParam(String queryName, String paramName, Object value) throws DataAccessException { return bulkUpdateByNamedQueryAndNamedParam(queryName, new String[]{paramName}, new Object[]{value}); }  public int bulkUpdateByNamedQueryAndNamedParam(final String queryName, final String[] paramNames, final Object[] values) throws DataAccessException {      if (paramNames != null && values != null && paramNames.length != values.length) {     	throw new IllegalArgumentException(""Length of paramNames array must match length of values array"");     }          Integer updateCount = (Integer) execute(new HibernateCallback() {     	public Object doInHibernate(Session session) throws HibernateException {     		Query queryObject = session.getNamedQuery(queryName);     		prepareQuery(queryObject);     		if (values != null) {     			for (int i = 0; i < values.length; i++) {     				applyNamedParameterToQuery(queryObject, paramNames[i], values[i]);     			}     		}     		return new Integer(queryObject.executeUpdate());     	}     }, true);     return updateCount.intValue();  }   ---  **Affects:** 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-27T07:56:45Z","2006-12-21T08:39:02Z"
"","7458","Lookup Method Injection example doesn't work [SPR-2770]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-2770](https://jira.spring.io/browse/SPR-2770?redirect=false)** and commented  The example code in the Lookup method injection section (3.3.8.1) doesn't compile.  There are duplicate local variables, the abstract method returns the wrong type, its got the wrong method name and the class isn't abstract.  I think the code should look something like below.  public abstract class CommandManager { public Object process ( Object commandState ) { // grab a new instance of the appropriate Command interface Command command = createCommand (); // set the state on the (hopefully brand new) Command instance command.setState ( commandState ); return command.execute (); }      // mmm, but where is the implementation of this method?     protected abstract Command createCommand ();  }  public interface Command { public void setState ( Object commandState ); public boolean execute (); }  public class AsyncCommand implements Command { private Object commandState;      public AsyncCommand ()     {     	System.out.println ( ""Created AsyncCommand"" );     }          public void setState ( Object commandState )     {     	this.commandState = commandState;     }          public boolean execute ()     {     	System.out.println ( commandState );     	return true;     }  }   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-27T23:41:27Z","2012-06-19T03:50:16Z"
"","7835","SpringJtaSynchronizationAdapter setRollbackOnly hides causing exception within Weblogic 8.1 [SPR-3149]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-3149](https://jira.spring.io/browse/SPR-3149?redirect=false)** and commented  In previous releases,  Spring was swallowing Hibernate exceptions within the TransactionSynchronization beforeCompletion method.  For more detail see the following link:  http://opensource.atlassian.com/projects/spring/browse/SPR-2270  As the JIRA issue states, the issue was addressed by letting the runtime exception through, but still calling setRollbackOnly.  The issue is that with this fix within Weblogic 8.1, even though Spring lets the exception propogate up, Weblogic will always output a vague AppSetRollbackOnlyException cause whenever setRollbackOnly is invoked.  Hence, the underlying exception is still hidden from the developer.  We applied the Spring 2.X fix to our version of Spring 1.2.5.  public void beforeCompletion() { try { boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly(); this.springSessionSynchronization.beforeCommit(readOnly); } catch (RuntimeException ex) { setRollbackOnlyIfPossible(); throw ex; } catch (Error err) { setRollbackOnlyIfPossible(); throw err; } finally { // Unbind the SessionHolder from the thread early, to avoid issues // with strict JTA implementations that issue warnings when doing JDBC // operations after transaction completion (e.g. Connection.getWarnings). this.beforeCompletionCalled = true; this.springSessionSynchronization.beforeCompletion(); } }  Notice the code above calls setRollbackOnly and rethrows the exception.  With this in place, however, we get the following vague exception from Weblogic:   \ \ \","closed","type: enhancement,","spring-projects-issues","2007-02-11T23:53:03Z","2012-06-19T03:50:21Z"
"","6959","SessionFactoryUtils JtaSessionSynchronization.beforeCompletion swallowing exception [SPR-2270]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-2270](https://jira.spring.io/browse/SPR-2270?redirect=false)** and commented  We are using Spring 1.2.5 with Weblogic 8.1.4 along with Hibernate 3.1.3 and container managed transactions. When an exception is thrown within the JtaSessionSynchronization.beforeCompletion method, the exception is swallowed by a catch clause. The catch clause simply logs and calls transactionManager.setRollBackOnly. The problem is that in certain cases we would like this exception to be propogated back to the client caller.  We were wondering why it is necessary to catch all Throwables and call setRollbackOnly? In this case the exception will be a RuntimeException which if uncaught will cause the container to roll back anyway.  In our own environment we have changed the method from:  public void beforeCompletion() { try { boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly(); this.springSessionSynchronization.beforeCommit(readOnly); } catch (Throwable ex) { logger.error(""beforeCommit callback threw exception"", ex); try { this.jtaTransactionManager.setRollbackOnly(); } catch (SystemException ex2) { logger.error(""Could not set JTA transaction rollback-only"", ex2); } } // Unbind the SessionHolder from the thread early, to avoid issues // with strict JTA implementations that issue warnings when doing JDBC // operations after transaction completion (e.g. Connection.getWarnings). this.beforeCompletionCalled = true; this.springSessionSynchronization.beforeCompletion(); }  to:  public void beforeCompletion() { try { boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly(); this.springSessionSynchronization.beforeCommit(readOnly); } finally { //Unbind the SessionHolder from the thread early, to avoid issues // with strict JTA implementations that issue warnings when doing JDBC // operations after transaction completion (e.g. Connection.getWarnings). this.beforeCompletionCalled = true; this.springSessionSynchronization.beforeCompletion(); }  }  For discussion see: http://forum.springframework.org/showthread.php?t=26565  Thanks.  -karl    ---  **Affects:** 1.2.8  1 votes, 0 watchers","closed","type: bug,","spring-projects-issues","2006-07-09T23:36:01Z","2012-06-19T03:52:47Z"
"","7124","Make all handlerMethodMap's in MultiActionController accessible from subclasses [SPR-2435]","**[Kaleb Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=kwalton)** opened **[SPR-2435](https://jira.spring.io/browse/SPR-2435?redirect=false)** and commented  I have cases where I need to access the map of handler methods to tell whether a method is in there or not. It would be great if they were protected rather than private or at least provide getter methods to them.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-16T03:30:16Z","2012-06-19T09:37:26Z"
"","6976","Convention over configuration by bean name and class package [SPR-2287]","**[Kaleb Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=kwalton)** opened **[SPR-2287](https://jira.spring.io/browse/SPR-2287?redirect=false)** and commented  Prior to realizing the latest version of Spring comes with a ""convention over configuration"" approach based on URL mapping and class name I created a similar approach that I believe is beneficial for large and complex websites and also allows multiple URLs to be bound to a single controller.  I created a HandlerMapping object called BeanAndPackageNameHandlerMapping object that maps URLs based on bean name and what package the Controller is in.  Example:  a.b.x.y.UserController (extends MultiAction) maps to -> /x/y/user/*  I truncate the a.b package by injecting a package prefix string (""a.b"") into the BeanAndPackageNameHandlerMapping object so it only uses the class package path after a.b, which is x.y.UserController.  Thought I'd suggest it as it has proven very beneficial in reducing the amount of configurations for me. I use that paradigm all the way to the JSPs I include in my Tiles views :)  Thanks!   --- No further details from [SPR-2287](https://jira.spring.io/browse/SPR-2287?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-07-12T04:25:14Z","2012-06-19T09:37:37Z"
"","6973","Alternative binding form tag [SPR-2284]","**[Kaleb Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=kwalton)** opened **[SPR-2284](https://jira.spring.io/browse/SPR-2284?redirect=false)** and commented  The  tag works well for simple forms, however, I have a form that is quite large and spans multiple included JSPs. Putting the  tag on the top level with included JSPs within the tag does not work as the binding context does not extend down to the included jsps.  A simple  tag would solve this so I could bind to the command object from within each included jsp.  This is a severe problem for us in particular as we do included snipets of code in our complex forms quite often (we have many query forms that use bits and pieces of other query forms, etc.).   ---  **Affects:** 2.0 M5, 2.0 RC1, 2.0 RC2  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-12T00:10:27Z","2012-06-19T03:52:37Z"
"","7770","spring.ftl: Should formCheckboxes insert a hidden parameter with name beginning with a ""_"" which form:checkbox insert? [SPR-3084]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-3084](https://jira.spring.io/browse/SPR-3084?redirect=false)** and commented  Ref the documentation on http://www.springframework.org/docs/reference/mvc.html  which says:  What you might not expect to see is the additional hidden field after each checkbox. When a checkbox in an HTML page is not checked, its value will not be sent to the server as part of the HTTP request parameters once the form is submitted, so we need a workaround for this quirk in HTML in order for Spring form data binding to work. The checkbox tag follows the existing Spring convention of including a hidden parameter prefixed by an underscore (""_"") for each checkbox. By doing this, you are effectively telling Spring that ""the checkbox was visible in the form and I want my object to which the form data will be bound to reflect the state of the checkbox no matter what""    ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-27T05:59:41Z","2012-06-19T03:50:28Z"
"","7754","BeanConfigurerSupport.java: There is a "")"" missing at the end of the javadoc for the method configureBean [SPR-3068]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-3068](https://jira.spring.io/browse/SPR-3068?redirect=false)** and commented   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-01-23T04:22:49Z","2012-06-19T03:50:17Z"
"","7542","spring.ftl: nice if spring.message had support for an array of arguments [SPR-2855]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-2855](https://jira.spring.io/browse/SPR-2855?redirect=false)** and commented  I.e. had support for getMessage(String code, Object[] args, Locale locale)  this macro could like like the following:  ${springMacroRequestContext.getMessage(code, args, text)}   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-20T22:49:16Z","2020-02-07T20:04:29Z"
"","7259","Error in build.bat of ""showcases"" examples [SPR-2570]","**[Kai Grabfelder](https://jira.spring.io/secure/ViewProfile.jspa?name=kaig)** opened **[SPR-2570](https://jira.spring.io/browse/SPR-2570?redirect=false)** and commented  All build.bat files in the ""examples/showcases"" folder are missing a ../ for the inclusion of the ant libraries.    ---  **Affects:** 2.0 RC3","closed","status: duplicate,","spring-projects-issues","2006-09-09T23:19:40Z","2019-01-12T16:52:00Z"
"","6995","ResourceBundleViewResolver.setDefaultParentView() javadoc wrong [SPR-2306]","**[Kai Grabfelder](https://jira.spring.io/secure/ViewProfile.jspa?name=kaig)** opened **[SPR-2306](https://jira.spring.io/browse/SPR-2306?redirect=false)** and commented  the javadoc for this method needs to be updated for 2.0:  ""yyy1.parent=xxx"", ""yyy2.parent=xxx"" needs to be changed to ""yyy1.(parent)=xxx"", ""yyy2.(parent)=xxx""  cheers  Kai   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-16T03:09:58Z","2012-06-19T03:52:28Z"
"","7717","PortletMultipartResolver's Javadoc mentions id=""multipartResolver"" instead of id=""portletMultipartResolver"" [SPR-3031]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3031](https://jira.spring.io/browse/SPR-3031?redirect=false)** and commented  Quote from PortletMultipartResolver's Javadoc: ""To define an implementation, create a bean with the id ""multipartResolver"" in a DispatcherPortlet's application context.""  DispatcherPortlet contains following constant declaration: public static final String MULTIPART_RESOLVER_BEAN_NAME = ""portletMultipartResolver"";  Unfortunately, reference does  not mention the actual need for a bean name at all (though shows the correct one in a sample).  All other (let's call them) infrastructure beans I came across don't require a specific name but are searched for by type, so that it was quite unexpected for the multipart resolver.   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-01-12T03:02:18Z","2012-06-19T03:50:40Z"
"","7555","Collection merging for indexed constructor arguments [SPR-2868]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-2868](https://jira.spring.io/browse/SPR-2868?redirect=false)** and commented  I have a parent bean declaration with the only dependency on a map. And I have a child bean declaration for which the map should be merged. This works when injecting the map via a property.  But as I prefer constructor injection I tried it via a constructor argument. Obviously I have to specify the index of the constructor argument, as otherwise they would be interpreted as two constructor arguments for the child bean. So a correct matching of the two constructor argument declarations must actually happen. But in contrary to injecting via a property the map injected into the child bean via a constructor argument is not merged with the parent bean declaration, but only contains the map entries declared on the child bean.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-23T02:10:42Z","2012-06-19T03:50:56Z"
"","7445","Request/Session scoped beans are not available in render phase in Spring Portlet MVC [SPR-2758]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-2758](https://jira.spring.io/browse/SPR-2758?redirect=false)** and commented  (I already mentioned it in the forum, but got no feedback (http://forum.springframework.org/showthread.php?t=30498).)  The DispatcherPortlet allows to use session-scoped beans by injecting a PortletRequestAttributes object into the RequestContextHolder. Unfortunately, this is only done for the action phase, but not for the render phase. So a session scoped bean is not available during the render phase. Now I really wonder why this is the case - or if it is just a bug.  We worked around it by writing a RequestContextInterceptor (reduced to the necessary):  public class RequestContextInterceptor implements HandlerInterceptor {  public boolean preHandleRender(RenderRequest request_, RenderResponse response_, Object handler_) throws Exception { // Expose current RequestAttributes to current thread. PortletRequestAttributes requestAttributes = new PortletRequestAttributes(request_); RequestContextHolder.setRequestAttributes(requestAttributes); return true; }  public void afterRenderCompletion(RenderRequest request_, RenderResponse response_, Object handler_, Exception ex_) throws Exception { PortletRequestAttributes requestAttributes = (PortletRequestAttributes)RequestContextHolder.currentRequestAttributes(); // Reset thread-bound RequestAttributes. requestAttributes.requestCompleted(); RequestContextHolder.setRequestAttributes(null); }  }  The content of the both methods is more or less copied from DispatcherPortlet.doActionService(..). I only wonder why the same is not done for DispatcherPortlet.doRenderService(..).  Jörg   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-25T23:44:21Z","2012-06-19T03:50:58Z"
"","7315","Reference mentions spring-beans_2_0.dtd instead of spring-beans-2.0.dtd [SPR-2626]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-2626](https://jira.spring.io/browse/SPR-2626?redirect=false)** and commented  Many examples in the whole document and in ""Appendix C"" it's called spring-beans_2_0.dtd instead of spring-beans-2.0.dtd   ---  **Affects:** 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-09-21T18:51:15Z","2012-06-19T03:51:22Z"
"","7314","Finally add bookmarks to the main entries in the PDF reference [SPR-2625]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-2625](https://jira.spring.io/browse/SPR-2625?redirect=false)** and commented  All the reference PDFs miss bookmarks for the main entries, i.e. the items seen first in the outline of the PDF. You can't simply click on ""Chapter 2"" and jump to it, you have to select the first subitem. It gets a bit difficult when selecting ""Appendix C"" in 2.0 reference - there is no subitem, you have to select the last one in the former main item. The only main entry working is ""Table Of Contents"".  It's always so annoying ...   ---  **Affects:** 1.2.8, 2.0 RC4","closed","type: documentation,","spring-projects-issues","2006-09-21T18:47:38Z","2012-06-19T03:50:13Z"
"","7313","Reference mentions @singleton for compatibility reasons though it has been removed in 2.0 RC 4 [SPR-2624]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-2624](https://jira.spring.io/browse/SPR-2624?redirect=false)** and commented  The changelog for Spring 2.0 RC 4 mentions that `@singleton` is no longer supported on the bean definition. The `@scope` has to be used instead. But in the reference there is still following paragraph:  Note For backwards compatibility reasons, it is still possible to specify singleton=""false"" and singleton=""true"" as attributes of an XML-based bean definition. However, note that specifying both the singleton and scope attribute on a bean definition leads to unexpected behavior. You should only specify one of the two attributes, with the use of scope being the recommended choice.   ---  **Affects:** 2.0 RC4","closed","type: documentation,","spring-projects-issues","2006-09-21T18:29:58Z","2012-06-19T03:50:08Z"
"","7425","Missing docs/reference/readme.txt [SPR-2737]","**[Julio Aguilar](https://jira.spring.io/secure/ViewProfile.jspa?name=madth3)** opened **[SPR-2737](https://jira.spring.io/browse/SPR-2737?redirect=false)** and commented  spring-2.0-with-dependencies package. Invoking target doc.html without the proper libs installed results in a message referencing the file docs/reference/readme.txt but this file is not included in the package.   ---  **Affects:** 2.0 final  **Attachments:** - [readme.txt](https://jira.spring.io/secure/attachment/12043/readme.txt) (_971 bytes_)","closed","type: bug,","spring-projects-issues","2006-10-20T07:05:15Z","2012-06-19T03:50:32Z"
"","7066","MBeanExporter.autodetect can detect only one of several equal beans (beans whose equals method returns true at the time of autodetection) [SPR-2377]","**[Juho Yli-Krekola](https://jira.spring.io/secure/ViewProfile.jspa?name=jylikrek)** opened **[SPR-2377](https://jira.spring.io/browse/SPR-2377?redirect=false)** and commented  MBeanExporter.autodetect method uses Map.containsValue to check whether the bean has already been registered for JMX exposure. If there are several beans whose internal state happens to be the same (and their equals method returns true) at the time of autodetection then only one of them gets registered.  Why this happens: Map.containsValue uses equals method to check whether the value is already in the map. Many classes (e.g. collections) implement equals method so that it does not compare the objects' identity, but state. Therefore two different objects' can be sometimes 'equal' and sometimes not. MBeanExporter.autodetect may therefore erroneously think that the object is already in the beans map when there is some another object that happens to be equal.  For example: - Bean b1 is a Map that currently maps String ""foo"" to String ""bar"". - Bean b2 is another Map that currently also maps String ""foo"" to String ""bar"". - Both b1 and b2 are beans in my BeanFactory. - MBeanExporter.autodetect registers only one of the beans in JMX server. - They should both be registered because they are different objects and their internal mapping vary independently of each others.  Suggestion for fixing this: Replace this.beans.containsValue(beanInstance) with a loop that goes through all the values in beans map and compares the values with ==. This shouldn't be much slower that current implementation as the implementation for Map.containsValue probably also uses a loop.   ---  **Affects:** 1.2.8, 2.0 RC4  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","in: core,","spring-projects-issues","2006-08-02T22:48:18Z","2012-06-19T03:50:11Z"
"","7359","JTA transaction rollback on Oracle Application Server depends on depricated datasource property xa-location [SPR-2670]","**[Juhan Aasaru](https://jira.spring.io/secure/ViewProfile.jspa?name=juhan)** opened **[SPR-2670](https://jira.spring.io/browse/SPR-2670?redirect=false)** and commented  If xa-location parameter (together with ejb-location) is missing from data sources definition, changes made in service layer are committed in case of error.  If xa-location and ejb-location are set, everything works fine and transaction is fully rolled back in case of exception.  The strange thing is that expected behavior is accomplished through setting property (xa-location) that is deprecated according to: http://download-west.oracle.com/docs/cd/B12166_01/web/B10326_01/datasrcs.htm#1024623  There is also a post in forum about this: http://forum.springframework.org/showthread.php?t=29606   ---  **Affects:** 1.2.6","closed","status: declined,","spring-projects-issues","2006-10-04T01:50:50Z","2019-01-12T16:28:33Z"
"","7801","JBI component support [SPR-3114]","**[Juergen Mayrbaeurl](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.mayrbaeurl)** opened **[SPR-3114](https://jira.spring.io/browse/SPR-3114?redirect=false)** and commented  Please add support for building JBI components. A good starting point is the ComponentSupport class from ServiceMix   ---  **Affects:** 2.0.2  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-05T18:48:06Z","2012-06-19T09:37:40Z"
"","7752","JCA 1.5 WorkManager support with SchedulingTaskExecutor [SPR-3066]","**[Juergen Mayrbaeurl](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.mayrbaeurl)** opened **[SPR-3066](https://jira.spring.io/browse/SPR-3066?redirect=false)** and commented  Please provide an implementation of the SchedulingTaskExecutor interface, that can use the J2EE 1.4 WorkManager API  ---  **Affects:** 2.0.1  **Attachments:** - [j2eeWorkManagerScheduling.zip](https://jira.spring.io/secure/attachment/12358/j2eeWorkManagerScheduling.zip) (_2.84 kB_)  **Issue Links:** - #5840 Support for JCA 1.5 message endpoint management","closed","type: enhancement,","spring-projects-issues","2007-01-23T01:41:54Z","2019-01-11T16:42:58Z"
"","7571","TransactionSynchronizationUtils.triggerBeforeCompletion() is swallowing IllegalStateException [SPR-2883]","**[Josh Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=joshmoore)** opened **[SPR-2883](https://jira.spring.io/browse/SPR-2883?redirect=false)** and commented  If the synchronization throws an exception on beforeCompletion() then things get quirky. Specifically, SpringSessionSynchronization.beforeCompletion() has this block: if (this.newSession) { // Default behavior: unbind and close the thread-bound Hibernate Session. TransactionSynchronizationManager.unbindResource(this.sessionFactory); // THROWS HERE this.holderActive = false; if (this.hibernateTransactionCompletion) { // Close the Hibernate Session here in case of a Hibernate TransactionManagerLookup: // Hibernate will automatically defer the actual closing until JTA transaction completion. // Else, the Session will be closed in the afterCompletion method, to provide the // correct transaction status for releasing the Session's cache locks. SessionFactoryUtils.closeSessionOrRegisterDeferredClose(this.sessionHolder.getSession(), this.sessionFactory); } }  My code is causing an IllegalStateException on unbindResource() (working to find out what's causing that), which gets logged in TransactionSynchronizationUtils (below) but doesn't throw:        public static void triggerBeforeCompletion() {     	for (Iterator it = TransactionSynchronizationManager.getSynchronizations().iterator(); it.hasNext();) {     		TransactionSynchronization synchronization = (TransactionSynchronization) it.next();     		try {     			synchronization.beforeCompletion();     		}     		catch (Throwable tsex) {     			logger.error(""TransactionSynchronization.beforeCompletion threw exception"", tsex);     		}     	}     }  Since the registering of close in SpringSessionSynchronization isn't getting called, the transaction isn't getting committed, which means...  I'm getting return values (entity with id = k) but there's no entity with primary key k in the db. Weirdness.  Thanks, guys. Josh.   ---  **Affects:** 2.0 final","closed","status: declined,","spring-projects-issues","2006-11-27T20:24:56Z","2019-01-12T16:40:33Z"
"","6994","FilterDefinitions should be added to Hibernate LocalSessionFactoryBean before *.hbm.xml and *.cfg.xml [SPR-2305]","**[Josh Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=joshmoore)** opened **[SPR-2305](https://jira.spring.io/browse/SPR-2305?redirect=false)** and commented  FilterDefinitions defined by FilterDefinitionFactoryBeans should be added to the Hibernate configuration before other configuration files (*.hbm.xml and *.cfg.xml) are added to prevent null pointer exceptions in org.hibernate.cfg.HbmBinder.parseFilter (line 2895)  Such null pointer exceptions occur only when the filters defined in the \ mappings rely on the \ for the condition, i.e. if the filter-def has a condition defined and the filter elements in the class mappings do not, then a null pointer exception will occur.  This is apparently a known problem from the Hibernate team. From HbmBinder.parseFilter line 2888 (3.2.cr2):      //TODO: bad implementation, cos it depends upon ordering of mapping doc     //      fixing this requires that Collection/PersistentClass gain access     //      to the Mappings reference from Configuration (or the filterDefinitions     //      map directly) sometime during Configuration.buildSessionFactory     //      (after all the types/filter-defs are known and before building     //      persisters).  Not reporting to Hibernate team -- this implies there is some partial ordering of additions to the Hibernate configuration, and Spring will apparently be responsible for knowing what that ordering is.   ---  **Affects:** 1.2.8, 2.0 RC2, 2.0 RC3, 2.0 RC4  **Attachments:** - [localsessionfactorybean.patch](https://jira.spring.io/secure/attachment/11810/localsessionfactorybean.patch) (_526 bytes_) - [LocalSessionFactoryBean.patch2](https://jira.spring.io/secure/attachment/11995/LocalSessionFactoryBean.patch2) (_1.54 kB_)  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-07-15T23:13:42Z","2012-06-19T03:52:24Z"
"","7868","Provide access to 'theme' support within Velocity Macro templates [SPR-3183]","**[Joseph Hobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=jhobbs721)** opened **[SPR-3183](https://jira.spring.io/browse/SPR-3183?redirect=false)** and commented  When using Velocity Macro, there are no macros present that permit easy access to 'theme support' provided by Spring.  After some digging, I found that appropriate macros aren't defined within the spring.vm file within Spring.  It would be nice if the following were added, as it provides direct access to theme support when using Velocity (just like JSP using","closed","type: enhancement,","spring-projects-issues","2007-02-18T13:41:46Z","2012-06-19T03:50:18Z"
"","7195","Allow setting of properties without a javabean setter [SPR-2506]","**[josef betancourt](https://jira.spring.io/secure/ViewProfile.jspa?name=j.betancourt)** opened **[SPR-2506](https://jira.spring.io/browse/SPR-2506?redirect=false)** and commented  Some complex properties do not follow the get/set JavaBean spec.  Thus, to wire these in with Spring is problematic.  Whether Spring should support non-javabean accessors is of course a question.   Anyway, there could be a way to explicitly specify these properties, for example:    ---  **Affects:** 2.0 RC3  **Issue Links:** - #4961 Please improve BeanFactory support for containers & collections (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2006-08-29T21:23:54Z","2019-01-11T19:17:57Z"
"","7194","Allow XML config shortcuts for plurality [SPR-2505]","**[josef betancourt](https://jira.spring.io/secure/ViewProfile.jspa?name=j.betancourt)** opened **[SPR-2505](https://jira.spring.io/browse/SPR-2505?redirect=false)** and commented  Since 80% of the time assignments are simple, it should be possible to reduce XML clutter still further by just allowing these in one line.  example: \ \ \  Can be written as: \  Similarly, setting values on properties can also be shortened: \ \ \  Can be written as: \  Of course, there is most likely a better syntax for these plural assignments.    ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-29T21:07:33Z","2012-06-13T08:42:14Z"
"","7291","optiontag broken on WLS 8.1 [SPR-2602]","**[Jorg Heymans](https://jira.spring.io/secure/ViewProfile.jspa?name=heymjo)** opened **[SPR-2602](https://jira.spring.io/browse/SPR-2602?redirect=false)** and commented  This is the error i get after upgrading to rc4  2006-09-18 10:46:24,340 DEBUG [org.springframework.web.servlet.DispatcherServlet] - Could not complete request javax.servlet.ServletException: Since tag class org.springframework.web.servlet.tags.form.OptionTag does not implement BodyTag, it cannot return BodyTag.EVAL_BODY_BUFFERED at weblogic.servlet.jsp.PageContextImpl.handlePageExc eption(PageContextImpl.java:323) at jsp_servlet._web_45_inf._jsp._template.__main._jsp Service(main.jsp:48)  This url http://www.mail-archive.com/dev@myfaces.apache.org/msg16746.html seems to indicate that WLS 8.1 has problems with tags that do not implement the BodyTag interface directly.   ---  **Affects:** 2.0 RC4","closed","in: core,","spring-projects-issues","2006-09-18T18:04:38Z","2012-06-19T03:51:20Z"
"","7201","form:select does not provide I18N capabilities [SPR-2512]","**[Jorg Heymans](https://jira.spring.io/secure/ViewProfile.jspa?name=heymjo)** opened **[SPR-2512](https://jira.spring.io/browse/SPR-2512?redirect=false)** and commented  Rationale:  1) form:option does not allow bodycontent, so this is impossible:            fmt:message key=""${o.label}"" />          2) the itemLabel merely resolves a property on an item in items, so that any I18N strings would need to be inserted from the controller already. This sort of works but needs a lot of extra attention from the controller, merely for the sake of i18n which is not desired.  Ideally form:select has an additional attribute, something like ""itemLabelsAreKeys=true"" that resolves the key before outputting.  ---  **Affects:** 2.0 RC2  **Issue Links:** - #6935 Allow body content of  to specify label (_**""depends on""**_) - #8047 Provide comprehensive I18N support for the Spring form tag library. (_**""is depended on by""**_)  8 votes, 8 watchers","closed","status: bulk-closed,","spring-projects-issues","2006-08-30T23:26:12Z","2019-01-12T03:51:17Z"
"","7130","Simple RegexpMethodPointcutAdvisor configuration failing in 2.0-rc3 [SPR-2441]","**[Jorg Heymans](https://jira.spring.io/secure/ViewProfile.jspa?name=heymjo)** opened **[SPR-2441](https://jira.spring.io/browse/SPR-2441?redirect=false)** and commented  I raised the issue here (http://forum.springframework.org/showthread.php?t=28170), but nobody seems to have picked it up.  This configuration worked fine in 2.0-RC2 (and 1.2.x for that matter)  \ \ \ \ \     \ \.*save.*\ \.*do.*\ \.*delete.*\ \ \ \  When upgrading to 2.0-RC3 i get following exception:  2006-08-17 09:12:47,129 ERROR [org.springframework.web.context.ContextLoader] - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'advisor' defined in class path resource [service.xml]: Instantiation of bean failed; nested exception is java.lang.IllegalArgumentException: 'patterns' cannot be null or empty. Caused by: java.lang.IllegalArgumentException: 'patterns' cannot be null or empty. at org.springframework.util.Assert.notEmpty(Assert.java:214) at org.springframework.aop.support.AbstractRegexpMethodPointcut.setPatterns(AbstractRegexpMethodPointcut.java:82) at org.springframework.aop.support.RegexpMethodPointcutAdvisor.getPointcut(RegexpMethodPointcutAdvisor.java:150) at org.springframework.aop.support.AbstractPointcutAdvisor.toString(AbstractPointcutAdvisor.java:71) at java.lang.String.valueOf(String.java:2131) at java.lang.StringBuffer.append(StringBuffer.java:370) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:383)  If you need more information or if there is anything i can do to help debugging this let me know.  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7172 IllegalArgumentException from RegexpMethodPointcutAdvisor initialization when using DEBUG log level (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2006-08-17T18:03:25Z","2019-01-11T19:32:12Z"
"","7742","Section 17.5.3. Register JAX-RPC Bean Mappings of the Spring documentation is out of date [SPR-3056]","**[Jonathan Whitall](https://jira.spring.io/secure/ViewProfile.jspa?name=fiddlerpianist)** opened **[SPR-3056](https://jira.spring.io/browse/SPR-3056?redirect=false)** and commented  There is no mention of the JaxRpcServicePostProcessor interface here, and I'm guessing that this part of the documentation hasn't been updated since 1.1.4 (when they came out). Sure, the example is in JPetStore, but many new folks don't get further than the reference manual.  AxisBeanMappingServicePostProcessor would also be useful to mention here, as many folks are still using Axis.   ---  **Affects:** 2.0.2  1 votes, 0 watchers","closed","status: declined,","spring-projects-issues","2007-01-19T08:45:22Z","2009-11-19T02:14:32Z"
"","7696","DefaultMessageListenerContainer calls Connection.stop() in a Java EE environment [SPR-3010]","**[Jonathan Whitall](https://jira.spring.io/secure/ViewProfile.jspa?name=fiddlerpianist)** opened **[SPR-3010](https://jira.spring.io/browse/SPR-3010?redirect=false)** and commented  Line 547 of DefaultMessageListenerContainer calls JmsUtils.closeConnection(conToClose, true). This in turn calls stop() on the Connection object, which is forbidden by the J2EE 1.4 specification. The Websphere container complains with a javax.jms.IllegalStateException when this happens, and my debug logs fill up. I do not have shared connections enabled because my JMS connection factory  I hate to be picky about this, but I know that Juergen has said repeatedly that DefaultMessageListenerContainer can be fully J2EE-compliant. This is the only place I've noticed where this is a problem.  ---  **Affects:** 2.0 final  **Issue Links:** - #7167 using JMSTemplate.execute(SessionCallback, true) never stops the connection it has started. (_**""depends on""**_)","closed","type: bug,","spring-projects-issues","2007-01-03T07:58:51Z","2019-01-11T16:32:23Z"
"","7457","NestedRuntimeException getRootCause() method needs a @since 2.0 JavaDoc tag [SPR-2769]","**[Jonathan Whitall](https://jira.spring.io/secure/ViewProfile.jspa?name=fiddlerpianist)** opened **[SPR-2769](https://jira.spring.io/browse/SPR-2769?redirect=false)** and commented  This tripped me up when I was creating a library to support both Spring 1.x and Spring 2.0 which was using getRootCause(). It is not an obvious 2.0 addition, and a simple `@since` tag may help someone else avoid the problem.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-27T08:36:55Z","2012-06-19T03:50:33Z"
"","7848","Document the use of ParameterMappingInterceptor for typical Portlet MVC setup [SPR-3162]","**[Jonathan van Alteren](https://jira.spring.io/secure/ViewProfile.jspa?name=jpvanalteren)** opened **[SPR-3162](https://jira.spring.io/browse/SPR-3162?redirect=false)** and commented  I'm evaluating Portlet MVC for use in WebSphere Portal 5.1 JSR-168 portlets.  I have created a simple form controller that processes a very simple command class. I have configured it to use a validator and I have set the 'formView' and 'successView' properties. Furthermore, I have configured an internal resource view resolver in a separate applicationContext.xml file.  I am able to navigate the portlet to get to the form, so I guess the formView works for that part. If I enter faulty data in my form I can see in the logs that validation errors occur. However, I am returned to the 'home' view (which is where I started from) instead of going back the formView. I need to be able to show the errors to the user and allow him to resubmit the form (as you would expect).  Am I doing something wrong here? I looked at the code in SimpleFormController (in the ...web.portlet.mvc package) and unlike the non-portlet variety, it does not call showForm(..) (see below).  I can't find anything about this in the docs. Please help!  ----------- excerpt from org.springframework.web.portlet.mvc.SimpleFormController.java: ... protected void processFormSubmission( ActionRequest request, ActionResponse response, Object command, BindException errors) throws Exception {      if (errors.hasErrors()) {          if (logger.isDebugEnabled()) {               logger.debug(""Data binding errors: "" + errors.getErrorCount());          }          if (isRedirectAction()) {               setFormSubmit(response);          }          passRenderParameters(request, response);     }     else if (isFormChangeRequest(request)) {  ... ---    ---  **Affects:** 2.0.2  **Attachments:** - [applicationContext.xml](https://jira.spring.io/secure/attachment/12389/applicationContext.xml) (_902 bytes_) - [selfcare-portlet.xml](https://jira.spring.io/secure/attachment/12390/selfcare-portlet.xml) (_1.95 kB_)  1 votes, 4 watchers","closed","status: invalid,","spring-projects-issues","2007-02-14T00:22:47Z","2019-01-12T05:34:13Z"
"","7461","BeanFactory does not support property setters depending on either Generics or inheritance AND JDK 1.5 typesafe enums [SPR-2773]","**[Jonathan Felch](https://jira.spring.io/secure/ViewProfile.jspa?name=jonfelch)** opened **[SPR-2773](https://jira.spring.io/browse/SPR-2773?redirect=false)** and commented  BeanFactory has property setting issues with two kinds of hierarchy, sometimes failing immediately (always unit JUnit) and more typically after the second bean  is loaded that follows one of the two following patterns.  public interface MyDataType { public SomeClass getSomeObject(); public getSomeString(); }  public enum IssuingField implements MyDataType { Government , PublicCompanyParent, PrivateCompanyParent, DomesticSubsidiaryOfPublicCompany, ForeignSubsidiaryOfPublicCompany; ... }  public enum SecurityField implement MyDataType { BankLoan, Ticker, TickerAndSecondTicker, Coupon, Maturity, Callable, Puttable, CallDate, PutDate, CallString, PutStrike....; ... }  public enum PricingField implements MyDataType { Price, YieldToMaturity, Spread, DividendYield, YieldToNext, YieldToWorst; ... }  public class TokenField\ { private T theField; public T getTokenField() { return theField; } public void setTokenField(T theValue) { thieField = theValue; } ... }  public class SecurityFieldToken extends TokenField\ { ... }  \ 	\\TickerAndSecondTicker\\  				 \	   org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [com.syntax.data.enums.DataValueType] for property 'fieldType'; nested exception is java.lang.IllegalArgumentException: No matching editors or conversion strategy found Caused by: java.lang.IllegalArgumentException: No matching editors or conversion strategy found  Similar failure occurs when Generics are not explicitly used by type narrowing is used in hierarchy (e.g.  MyBaseClass { private SomeInterfaceTypeNotAnEnum  theInstance;      public SomeInterfaceTypeNotAnEnum  getInstance() {         return theInstance;     }               public void setInstance(SomeInterfaceTypeNotAnEnum anInstance) {       theInstance = anInstance;     }  }  class MyDerivedClass extends MyBaseClass { public void setInstance(SomeConcretEnumImplementingInterface theInstance ... ) }  and so one....    ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-29T15:00:33Z","2007-04-03T08:35:39Z"
"","7146","Consider making DefaultRequestToViewNameTranslator work for successView of SimpleFormController [SPR-2457]","**[Jon Chase](https://jira.spring.io/secure/ViewProfile.jspa?name=jonchase)** opened **[SPR-2457](https://jira.spring.io/browse/SPR-2457?redirect=false)** and commented  While DefaultRequestToViewNameTranslator will resolve a default view name for the ""formView"" of SimpleFormController, it will not automatically resolve a default view name for the ""successView"".  Perhaps appending ""success"" to the formView name would be nice?  i.e.  http://localhost/app/myform.html formView = myform successView = myformSuccess  Not sure if this is possible given the current method of resolving the view name (only having access to the HttpServletRequest), but thought I'd throw the suggestion out there anyway.   ---  **Affects:** 2.0 RC3  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-22T00:53:28Z","2012-06-19T09:37:43Z"
"","7522","Function sequence error in call to AS400 stored procedure using toolbox drivers [SPR-2835]","**[Jon Brisbin](https://jira.spring.io/secure/ViewProfile.jspa?name=jbrisbin)** opened **[SPR-2835](https://jira.spring.io/browse/SPR-2835?redirect=false)** and commented  Whenever I use the Spring classes for JDBC access to an AS400 stored procedure, the call to getString() generates a ""Function sequence error"".  I have a CallableStatementCreator that does a prepareCall() and sets the parameters, including an output parameter. I also have a CallableStatementCallback that handles getting the value of the output parameter, but no matter what I've tried, I keep getting a ""Function sequence error"" when I do a getString() on the callable statement, after the execute.  This problem does not exist when called through normal JDBC, only when using Spring callbacks and JdbcTemplate to call the output parameters from an AS400 stored procedure call.  Java test class to duplicate the problem:  import java.io.PrintWriter; import java.sql.CallableStatement; import java.sql.Connection; import java.sql.DriverManager; import java.sql.ParameterMetaData; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Types;  import javax.sql.DataSource;  import org.dom4j.Document; import org.dom4j.DocumentFactory; import org.dom4j.Element; import org.springframework.dao.DataAccessException; import org.springframework.jdbc.core.CallableStatementCal lback; import org.springframework.jdbc.core.CallableStatementCre ator; import org.springframework.jdbc.core.JdbcTemplate;  public class Main {  /** * `@param` args   */   public static void main( String[] arg )   {   try {   Class.forName( ""com.ibm.as400.access.AS400JDBCDriver"" );   final Connection conn = DriverManager.getConnection( ""jdbc:as400://HOSTNAME"", ""USER"", ""PASSWORD"" );   JdbcTemplate jdbcTmpl = new JdbcTemplate( new DataSource()   {  public Connection getConnection() throws SQLException { return conn; }  public Connection getConnection( String username, String password ) throws SQLException { return conn; }  public int getLoginTimeout() throws SQLException { return 0; }  public PrintWriter getLogWriter() throws SQLException { return new PrintWriter( System.out ); }  public void setLoginTimeout( int seconds ) throws SQLException {}  public void setLogWriter( PrintWriter out ) throws SQLException {}  } );  CallableStatementCreator csc = new CallableStatementCreator() {  public CallableStatement createCallableStatement( Connection conn ) throws SQLException { CallableStatement cs = conn.prepareCall( ""call weblib.sptest(?,?)"", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY ); cs.setString( 1, ""TEST"" ); cs.registerOutParameter( 2, Types.VARCHAR ); return cs; }  }; CallableStatementCallback csCallback = new CallableStatementCallback() {  public Object doInCallableStatement( CallableStatement cs ) throws SQLException, DataAccessException { Document d = DocumentFactory.getInstance().createDocument(); Element root = d.addElement( ""root"" ); ParameterMetaData pm = cs.getParameterMetaData(); for ( int j = 1; j","closed","in: data,","spring-projects-issues","2006-11-14T02:14:15Z","2019-01-11T21:31:05Z"
"","7671","Scheduling support and Quartz stateful jobs [SPR-2985]","**[Jon Are Storløkken](https://jira.spring.io/secure/ViewProfile.jspa?name=superpuma)** opened **[SPR-2985](https://jira.spring.io/browse/SPR-2985?redirect=false)** and commented  While Spring integration with Quartz is very useful, it could still be expanded to include more features.  One of most useful (and easiest to implement) would be a Stateful QuartzJobBean exactly like the QuartzJobBean. This would be enough to to support Stateful Jobs, which is in my experience, what you actually want most of the time when using Quartz (although sometimes you don't care because your jobs aren't likely to collide anyhow.)  Since StatefulJob is just a marker interface, it will be possible to add such a StatefulQuartzJobBean with minimal effort.  This would also be useful ""pedagogically"", since SPring users starting to use QUARTZ would then see this important distinction immediately, and make a decision as to what they require.    ---  **Affects:** 1.2.8, 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-26T20:05:03Z","2006-12-29T22:35:12Z"
"","7603","VelocityConfigurer and resourceLoaderPath, should be multivalue [SPR-2917]","**[Jon Are Storløkken](https://jira.spring.io/secure/ViewProfile.jspa?name=superpuma)** opened **[SPR-2917](https://jira.spring.io/browse/SPR-2917?redirect=false)** and commented  As far as I can tell, the VelocityConfigurer does not accept mulitple comma-separated values for this field. This is  a bug (unless there is some smart reason), because the VelocityEngine (which eventually gets the value) accepts multiple values (several folders).  I read the source code hastily and it seems to suppose one value. I also couldn't get it to work with 2 values.  From the Velocity docs: \.resource.loader.path = . Multi-valued key. Will accept CSV for value. Root(s) from which the loader loads templates. Templates may live in subdirectories of this root. ex. homesite/index.vm This configuration key applies currently to the FileResourceLoader and JarResourceLoader.  The VelociryConfigurer is configuring a FileResourceLoader internally, so it should conform to this.   ---  **Affects:** 1.2.8","closed","type: enhancement,","spring-projects-issues","2006-12-05T22:18:11Z","2012-06-19T03:50:07Z"
"","7564","Spring Quartz support, persistent jobs.  [SPR-2877]","**[Jon Are Storløkken](https://jira.spring.io/secure/ViewProfile.jspa?name=superpuma)** opened **[SPR-2877](https://jira.spring.io/browse/SPR-2877?redirect=false)** and commented  This is mainly a documentation issue. (Although it would be possible to improve on the design as well)  The problem is the org.springframework.scheduling.quartz.JobDetailBean. It should be clearly stated that this bean cannot be used with a persistent job store. This is such an important issue when using Quartz, that it should be mentioned explicitly. Among other things, a persistent job store is required when running Quartz in a cluster. This is a very common requirement in enterprise applications, and JobDetailBean is therefore not very useful for most applications.  My problem actually stems from using code copied from the book ProSpring (p 513) by Rob Harrop, where he shows an example of using JobDetailBean with a persistent job store. Clearly, this config has never been tested. This is a widely read book (by an Interface21 guy AFAIK), and this config will be widely read and copied.  In my opinion the code could be improved: The problem stems from JobDetail bean being ApplicationContextAware, which it needn't be. (It puts the applicationContext in the jobDataMap) SchedulerFactory puts the applicationContext in the schedulerContext anyway, why can not the Job get the applicationContext from there?  See this thread for some further info: http://forum.springframework.org/showthread.php?t=31820  ---  **Affects:** 1.2.8, 2.0.1  **Issue Links:** - #7537 Upgrade to Quartz 1.6.1 (for trigger persistence with SimpleTriggerBean and CronTriggerBean) (_**""duplicates""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-11-26T23:24:40Z","2019-01-11T21:34:26Z"
"","7679","concurrentConsumers should always be 1 for publisher/subscriber scenario in SimpleMessageListenerContainer [SPR-2993]","**[John Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=johnzhang)** opened **[SPR-2993](https://jira.spring.io/browse/SPR-2993?redirect=false)** and commented  in org.springframework.jms.listener.SimpleMessageListenerContainer, we have:      protected void registerListener() throws JMSException {     	this.sessions = new HashSet(this.concurrentConsumers);     	this.consumers = new HashSet(this.concurrentConsumers);     	for (int i = 0; i < this.concurrentConsumers; i++) {     		Session session = createSession(getSharedConnection());     		MessageConsumer consumer = createListenerConsumer(session);     		this.sessions.add(session);     		this.consumers.add(consumer);     	}     }  basically it creates concurrentConsumers numbers of sessions and consumers on the same connection.  It is fine for queue, but not for topic.  If the  concurrentConsumers is greater than 1, the user probably just mean to improve scalabilty, but actually it will create topic subscriber more than once.  So in case of pub/sub scenario, the concurrentConsumers must be 1 to ensure the topic is only subscribed once.  I am not sure if my understanding to concurrentConsumers is correct.  In case of a queue consumer, is the jms connection clever enough to pick the currently available message consumer to consume the message?  Another minor issue is: after resolving the destination, we already know if it is a queue or topic.  The calls to method isPubSubDomain() should not be used.  Actually we don't need and shouldn't count on this property at all.  Besides the above, could you please address the concern I raised in the forum?  http://forum.springframework.org/showthread.php?t=33037  Thanks a lot!   ---  **Affects:** 2.0.1","closed","status: declined,","spring-projects-issues","2006-12-29T03:41:10Z","2019-01-12T16:40:27Z"
"","7449","UI related classes inside spring hibernate jar file causes deployment failure [SPR-2762]","**[John Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=johnzhang)** opened **[SPR-2762](https://jira.spring.io/browse/SPR-2762?redirect=false)** and commented  This is just a packaging issue.  I have an ear file to deploy on weblogic.  The database access layer that uses hibernate is deployed at ear level (under APP-INF\lib, weblogic style).  There is a war file inside the ear that uses OpenSessionInViewFilter.  All hibernate support classes from Spring are by default stored in spring hibernate jar.  Then it comes to a problem: where should I put the spring hibernate jar file?  If putting it under ear level, the servlet filter can not deploy. Weblogic throws a NullPointerException without any meaningful message.  It really costed me a lot of time to find out the cause.  If putting it under war file's web-inf\lib, then the database access layer at ear level can not find the hibernate support classes like HibernateTemplate.  Data access layer is shared by multiple war files, so by no means we should put it inside the war file.  So finally I have to split the spring hibernate jar file into 2 parts. One contains the core, while the other has only servlet filters.  It works fine.  Even though I haven't tested it with spring 2.0, the issue should be there also.  ---  **Affects:** 1.2.8, 2.0 final  **Issue Links:** - #8063 OpenSessionInViewFilter cannot depend on classes in spring-web.jar, or should be in spring-web.jar","closed","in: core,","spring-projects-issues","2006-10-26T04:53:59Z","2019-01-11T21:00:33Z"
"","7357","commandName property should default to commandName set in controller [SPR-2668]","**[John Vance](https://jira.spring.io/secure/ViewProfile.jspa?name=jvance)** opened **[SPR-2668](https://jira.spring.io/browse/SPR-2668?redirect=false)** and commented  Currently the form tag's default default value for commandName is ""command"".  Should you choose a different command name in the controller via setCommandName(), you have to hard-code that command name in your JSP, like so:    Instead, the form tag should know without being told which object in the model is the command or formbackingobject, and default to that.  One potential mechanism might be to place the commandName into the model or request, and have the form tag use that string as the key for retrieving the form backing object from the model.  I'm not sure where that would best go - perhaps SimpleFormController.showForm()?  Benefit:  99% of all form tags would no longer need to have the commandName specified.  This would reduce errors, decouple the form from any particular controller (other controllers could invoke the JSP even if they use different commandNames), and follow ""convention over configuration""   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-03T20:22:11Z","2012-06-19T09:37:38Z"
"","7208","Alias tag behavior in XML definition files inconsistent with AUTOWIRE_BY_TYPE [SPR-2519]","**[John Purcell](https://jira.spring.io/secure/ViewProfile.jspa?name=reibai)** opened **[SPR-2519](https://jira.spring.io/browse/SPR-2519?redirect=false)** and commented  I've been using integration test cases derived from AbstractTransactionalDataLoadingSpringContextTests and noticed the following behavior.  Say I've got two XML definition files:  Foo.xml:  \  \                                    DUMMY VALUE          jdbc:hsqldb:mem:test          sa                 \  which I then want to override in my test with  Bar.xml:  \  \                                                           org.hsqldb.jdbcDriver            jdbc:hsqldb:mem:test            sa                     \  You would figure that UserManagerDataSource wouldn't be defined since I'm aliasing it in a later file. However, when I run my test I get:  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'UserManagerIntTests': Unsatisfied dependency expressed through bean property 'dataSource': There are 2 beans of type [interface javax.sql.DataSource] for autowire by type. There should have been exactly 1 to be able to autowire property 'dataSource' of bean 'UserManagerIntTests'. Consider using autowire by name instead. at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:698) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:604) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:256) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.injectDependencies(AbstractDependencyInjectionSpringContextTests.java:223) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:195) at junit.framework.TestCase.runBare(TestCase.java:125) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  Meaning that it's still defining the bean ""UserManagerDataSource"" as not being a complete alias. Is this the expected behavior? (and if so, can we get it put into the documentation?)    ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-31T08:54:54Z","2012-06-19T03:51:04Z"
"","7128","Spring JPA support on Java 1.4 [SPR-2439]","**[John Purcell](https://jira.spring.io/secure/ViewProfile.jspa?name=reibai)** opened **[SPR-2439](https://jira.spring.io/browse/SPR-2439?redirect=false)** and commented  It seems that parts of the JPA support in Spring 2.0 is Java 5 only. The JPA spec, contrary to the fact that most of the examples are using Java 5, is meant to support 1.4 as well. Yet classes like org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean use Generics and org.springframework.instrument.classloading.AbstractOverridingClassLoader use Annotations as well. Could we perhaps stick to the 1.4.x standard so that those of us who can't quite upgrade to 5.0 yet still use this stuff?   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-17T07:05:01Z","2006-08-17T09:08:26Z"
"","7123","Documentation of BeanWrapperImpl error [SPR-2434]","**[Johan Haleby](https://jira.spring.io/secure/ViewProfile.jspa?name=gohan)** opened **[SPR-2434](https://jira.spring.io/browse/SPR-2434?redirect=false)** and commented  The documentations says (on page 77) that BeanWrapperImpl registers a StringArrayPropertyEditor by default. This is however not the case. According to the change log, this has been removed since Spring 2.0 m-4. Also the java doc for class org.springframework.beans.PropertyEditorRegistrySupport refers to org.springframework.beans.propertyeditors.StringArrayPropertyEditor even though it's never actually registered.   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-15T22:19:44Z","2012-06-19T03:50:29Z"
"","7856","Variable assignement operator := in complex Oracle SQL is treated like a named parameter. [SPR-3171]","**[Joerg Schmuecker](https://jira.spring.io/secure/ViewProfile.jspa?name=jeorgschmuecker)** opened **[SPR-3171](https://jira.spring.io/browse/SPR-3171?redirect=false)** and commented  The problem is that in the Java code := is not treated different from :paramName. The fix is very simple: Just check if the next character isnot '='.  if (statement[i] == '""' || statement[i] == '\'') { withinQuotes = true; currentQuote = (char) statement[i]; } else { if ( ( statement[i] == ':' && statement[i+1] != '=' ) || statement[i] == '&') { // fixed line int j = i + 1;  This if statement is duplicated in 2 places within the code. Both have to be patched.  ---  **Affects:** 2.0 M4  **Issue Links:** - #7535 Bug in NamedParameterUtils - tab characters are not treated as delimiters","closed","type: bug,","spring-projects-issues","2007-02-15T02:16:34Z","2019-01-11T17:34:28Z"
"","7634","DriverManagerDataSource should use JDBC Driver API directly, to avoid DriverManager synchronization [SPR-2948]","**[Joe Weinstein](https://jira.spring.io/secure/ViewProfile.jspa?name=joe_weinstein)** opened **[SPR-2948](https://jira.spring.io/browse/SPR-2948?redirect=false)** and commented  Hi all.  In debugging a JDBC-related issue with hibernate and WebLogic I found a file:  org.springframework.jdbc.datasource.DriverManagerDataSource.  There is a part of this file that hurts JDBC concurrency in multithreaded applications like WebLogic, and I have a solution. I would like to suggest a better alternative that would probably be named DriverDataSource. The problem is that **all** java.sql.DriverManager calls are class-synchronized. This include getConnection() and some very simple methods like DriverManager.println() which every driver may be calling continually at runtime (whether or not there is a DriverManager log stream). The constructor for SQLException calls this method. This means that one slow call to DriverManager.getConnection() can temporarily block all other JDBC in the whole JVM. In some cases we have even seen deadlocks where one thread that holds the DriverManager lock calls another thread that wants to do JDBC. The solution is to remove all calls to DriverManager.getConnection() and replace them with a simple call to Driver.connect(). In fact, this is what the DriverManager itself does, except that for every getConnection() call, the DriverManager goes through it's list of every registered driver in the JVM, trying each one with your URL and properties until it finds one that doesn't throw an exception and returns a connection. I decompiled and altered the DriverManagerDataSource to do that, for a customer to try, and I have attached it below as a suggestion for your consideration. HTH, Joe Weinstein at BEA Systems  PS: If you prefer, I can download the source and do a little better implementation, actually changing the class name and it's use...  package org.springframework.jdbc.datasource;  import java.sql.*; import java.util.Properties; import org.apache.commons.logging.Log; import org.springframework.jdbc.CannotGetJdbcConnectionException; import org.springframework.util.ClassUtils; import org.springframework.util.StringUtils;  // Referenced classes of package org.springframework.jdbc.datasource: //            AbstractDataSource  public class DriverManagerDataSource extends AbstractDataSource {      public DriverManagerDataSource()     {     }          public DriverManagerDataSource(String driverClassName, String url, String username, String  password) throws CannotGetJdbcConnectionException { setDriverClassName(driverClassName); setUrl(url); setUsername(username); setPassword(password); }      public DriverManagerDataSource(String url, String username, String password)         throws CannotGetJdbcConnectionException     {         setUrl(url);         setUsername(username);         setPassword(password);     }          public DriverManagerDataSource(String url)         throws CannotGetJdbcConnectionException     {         setUrl(url);     }          public void setDriverClassName(String driverClassName)         throws CannotGetJdbcConnectionException     {         if(!StringUtils.hasText(driverClassName))             throw new IllegalArgumentException(""driverClassName must not be empty"");         this.driverClassName = driverClassName;         try         {             d = (Driver)ClassUtils.forName(this.driverClassName).newInstance();         }         catch(ClassNotFoundException ex)         {             throw new CannotGetJdbcConnectionException(""Could not load JDBC driver class ["" + t  his.driverClassName + ""]"", ex); } catch(Exception ex2) { throw new CannotGetJdbcConnectionException(""Could not load JDBC driver class ["" + t his.driverClassName + ""]"", new SQLException(ex2.getMessage()) ); } if(logger.isInfoEnabled()) logger.info(""Loaded JDBC driver: "" + this.driverClassName); }      public String getDriverClassName()     {         return driverClassName;     }          public void setUrl(String url)     {         if(!StringUtils.hasText(url))         {             throw new IllegalArgumentException(""url must not be empty"");         } else         {             this.url = url;             return;         }     }          public String getUrl()     {         return url;     }          public void setUsername(String username)     {         this.username = username;     }          public String getUsername()     {         return username;     }          public void setPassword(String password)     {         this.password = password;     }          public String getPassword()     {         return password;     }          public void setConnectionProperties(Properties connectionProperties)     {         this.connectionProperties = connectionProperties;     }          public Properties getConnectionProperties()     {         return connectionProperties;     }          public Connection getConnection()         throws SQLException     {         return getConnectionFromDriverManager();         return connectionProperties;     }          public Connection getConnection()         throws SQLException     {         return getConnectionFromDriverManager();     }          public Connection getConnection(String username, String password)         throws SQLException     {         return getConnectionFromDriverManager(username, password);     }          protected Connection getConnectionFromDriverManager()         throws SQLException     {         return getConnectionFromDriverManager(getUsername(), getPassword());     }          protected Connection getConnectionFromDriverManager(String username, String password)         throws SQLException     {         Properties props = new Properties(getConnectionProperties());         if(username != null)             props.setProperty(""user"", username);         if(password != null)             props.setProperty(""password"", password);         return getConnectionFromDriverManager(getUrl(), props);     }          protected Connection getConnectionFromDriverManager(String url, Properties props)         throws SQLException     {         if(logger.isDebugEnabled())             logger.debug(""Creating new JDBC Connection to ["" + url + ""]"");              if (d == null)           throw new SQLException(""Have not successfully loaded ""                               + driverClassName + "" as a java.sql.Driver"");              if (!d.acceptsURL(url))           throw new SQLException(""Failed to make a JDBC connection with ""                               + driverClassName + "" which does not accept URL "" + url);              Connection c = d.connect(url, props);              if (c == null)           throw new SQLException(""Failed to make a JDBC connection with ""                               + driverClassName + "" and URL "" + url + "" and properties "" + prop  s);          return c;          }          private String driverClassName;     private String url;     private String username;     private String password;     private Properties connectionProperties;     private Driver d;  }    --- No further details from [SPR-2948](https://jira.spring.io/browse/SPR-2948?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-12-13T07:22:17Z","2012-06-19T03:51:00Z"
"","7104","Circular reference w/proxy backwards compatibility issue [SPR-2415]","**[Joe Mays](https://jira.spring.io/secure/ViewProfile.jspa?name=jmays)** opened **[SPR-2415](https://jira.spring.io/browse/SPR-2415?redirect=false)** and commented  I've attached an Eclipse project containing a bean configuration + JUnit test that demonstrates a backwards compatibility issue with 2.0-rc3 and 1.2.8.  If you run the test w/ the 1.2.8 JARs, everything works fine.  If you try it with the 2.0-rc3 JARs, you get the stack trace below.  org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'manager': Bean with name 'manager' has been injected into other beans [subscriber] in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example. at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:418) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:303) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:130) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:238) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:110) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:194) at junit.framework.TestCase.runBare(TestCase.java:125) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)    ---  **Affects:** 2.0 RC3  **Attachments:** - [bean-creation-2.0-rc3.zip](https://jira.spring.io/secure/attachment/11882/bean-creation-2.0-rc3.zip) (_6.48 kB_)  1 votes, 6 watchers","closed","in: core,","spring-projects-issues","2006-08-11T07:56:55Z","2019-01-11T19:33:23Z"
"","7103","NPE when creating a TransactionAttributeSourceAdvisor bean w/debug enabled [SPR-2414]","**[Joe Mays](https://jira.spring.io/secure/ViewProfile.jspa?name=jmays)** opened **[SPR-2414](https://jira.spring.io/browse/SPR-2414?redirect=false)** and commented  If I enable debugging and start my app, I get the following NPE...  It looks like hashCode() in TransactionAttributeSourceAdvisor.TransactionAttributeSourcePointcut assumes that transactionInterceptor is always non-null...  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor' defined in class path resource [businessContext.xml]: Instantiation of bean failed; nested exception is java.lang.NullPointerException Caused by: java.lang.NullPointerException at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.getTransactionAttributeSource(TransactionAttributeSourceAdvisor.java:102) at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.hashCode(TransactionAttributeSourceAdvisor.java:121) at java.lang.Object.toString(Object.java:209) at java.lang.String.valueOf(String.java:2577) at java.lang.StringBuffer.append(StringBuffer.java:220) at org.springframework.aop.support.AbstractPointcutAdvisor.toString(AbstractPointcutAdvisor.java:71) at java.lang.String.valueOf(String.java:2577) at java.lang.StringBuffer.append(StringBuffer.java:220) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:383) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:102) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:68) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:54) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:247) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:301) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:933) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:645) at org.springframework.context.support.AbstractApplicationContext.initMessageSource(AbstractApplicationContext.java:455) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:336) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:494) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:82) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:78) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:156) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:578) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:371) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:303) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.context.access.ContextSingletonBeanFactoryLocator.initializeDefinition(ContextSingletonBeanFactoryLocator.java:136) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:380) at org.springframework.web.context.ContextLoader.loadParentContext(ContextLoader.java:319) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:180) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3669)  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7102 NPE with TransactionAttributeSourceAdvisor.TransactionAttributeSourcePointcut when debug enabled (_**""duplicates""**_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-08-11T06:18:35Z","2019-01-12T16:52:06Z"
"","7579","Keep controller on the stack while rendering the view [SPR-2891]","**[Joe Dane](https://jira.spring.io/secure/ViewProfile.jspa?name=jdane)** opened **[SPR-2891](https://jira.spring.io/browse/SPR-2891?redirect=false)** and commented  the architecture favored by Spring's web MVC classes forces the controller off the stack before rendering the view.  it is thus impossible to specify in the controller any post--view code to run after the view has been rendered.  users of spring MVC are therefore forced to write post view code in servlet filters, handler interceptors, and other out of the way places.  probably the most well-known  example of this is what the Hibernate people call ""Open Session In View"".  you've got a hibernate session (encapsulating a database connection) which you probably open and initialize in the controller, but which you need to remain open in the view.  after the view is rendered, the session/connection must be closed.  the accepted solution seems to be to use a servlet filter to ensure that connections are closed.  this is probably acceptable for hibernate, which includes support code to associate a session with the current thread.   but non-hibernate code is forced to implement said magical support code itself, and I question whether it's really a good idea even for hibernate.   Java already contains a fundamental construct for running local cleanup code: try/finally.  the source of the problem seems to be  the signature in AbstractController:  ModelAndView handleRequestInternal( ... ) { .. }  which forces the controller's handle method to return before the view is rendered.  better would be something like this:  void handleRequestInternal( ..., ViewFoo vf) { Connection con = ...; try { // blah blah blah // ... // now dispatch to the view vf.render(""viewName"", model); } finally { con.close(); //etc. } }  I don't know what ""ViewFoo"" should in fact be.  maybe it's a ""view resolver"".  in any case, the code which currently deals with the returned ModelAndView (in DispatcherServlet's doDispatch() and render() methods) would be refactored into ViewFoo.  I'm aware that this is a pretty radical change.  and this is not to say that filters, interceptors, and the like do not have a place.  but the developer should have a choice here, and in some cases the controller is the right place for post-view ""cleanup"" code.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-28T10:00:50Z","2012-06-19T09:37:44Z"
"","7753","lookup method injection: let Spring implement the desired interface and replace its methods [SPR-3067]","**[Jo Vandermeeren](https://jira.spring.io/secure/ViewProfile.jspa?name=jo.vandermeeren)** opened **[SPR-3067](https://jira.spring.io/browse/SPR-3067?redirect=false)** and commented  When using lookup method injection to create e.g. a Spring-managed factory implementation, it would be a nice feature to allow Spring to automatically implement an interface and replace the defined methods. This would make it easier to define a Spring implementation of that factory in XML, instead of creating a dummy implementation of that interface, in order to be able to replace its methods..   ---  **Affects:** 2.0.2  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-23T02:03:58Z","2015-09-22T17:34:31Z"
"","7365","BeanDefinitionBuilder javadoc still references BeanDefinitionRegistryBuilder [SPR-2676]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-2676](https://jira.spring.io/browse/SPR-2676?redirect=false)** and commented  Looks like BeanDefinitionRegistryBuilder have been removed in 2.0 release?   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-04T11:54:55Z","2012-06-19T03:50:05Z"
"","7349","Make itemLabel/itemValue meaningful in map-based option rendering? [SPR-2660]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-2660](https://jira.spring.io/browse/SPR-2660?redirect=false)** and commented  Currently if items evaluates to a Map, OptionWriter always uses the key for the option value and the value for the option label. However if the value from the Map is a bean and only a property on that bean is meant for the label, the options have to be manually rendered with a forEach loop and option tags.  On the other hand, itemValue and itemLabel attributes are simply ignored in this case, so it would be more convenient and perhaps more consistent if OptionWriter could use itemValue for the property name to retrieve the option value from the map key object, and itemLabel to retrieve the option label from the map value object.  ---  **Affects:** 2.0 RC4  **Issue Links:** - #7905 [form:options] itemLabel and itemValue attributes ignored when rendering Map (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2006-09-30T02:42:48Z","2019-01-11T21:17:04Z"
"","7343","Broken link in Reference [SPR-2654]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-2654](https://jira.spring.io/browse/SPR-2654?redirect=false)** and commented  In the Reference Manual PDF file, The link to the taglib documentation in 14.2.3 is broken.   ---  **Affects:** 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-09-28T13:11:51Z","2012-06-19T03:50:49Z"
"","7298","Attribute 'singleton' gone in RC4? [SPR-2609]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-2609](https://jira.spring.io/browse/SPR-2609?redirect=false)** and commented  Has attribute 'singleton' been dropped altogether in RC4?  Reference 2.2.3 still says ""no existing configuration will break""...   ---  **Affects:** 2.0 RC4","closed","in: core,","spring-projects-issues","2006-09-19T11:44:33Z","2019-01-12T16:28:45Z"
"","7238","Add explicit logging when creating ""empty"" transactions for PROPAGATION_SUPPORTS [SPR-2549]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-2549](https://jira.spring.io/browse/SPR-2549?redirect=false)** and commented  Where this came from:  http://forum.springframework.org/showthread.php?t=28844  It would probably be less confusing if AbstractTransactionPlatformManager.getTransaction() logged explicitly that no actual DB transaction is created when in the last else block.  In fact, just print out that line of comment would do. :)   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-06T13:24:11Z","2012-06-19T09:37:43Z"
"","7158","prototype scope bean doesn't take util:constant for property value [SPR-2469]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-2469](https://jira.spring.io/browse/SPR-2469?redirect=false)** and commented  I have: \ \  \ \ which causes an exception: org.springframework.beans.factory.BeanDefinitionStoreException: Inner bean definition '(inner bean)' for bean property 'resultListSessionKey' has scope 'singleton' but co ntaining bean definition 'fooController' does not. Mark the inner bean definition with scope 'prototype' instead.  On the other hand, if I replace scope=""prototype"" with singleton=""false"", it works fine.   ---  **Affects:** 2.0 RC3  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-08-23T14:06:22Z","2012-06-19T03:50:14Z"
"","7407","Spring 2.0 BeanDefinitionStoreException when constructing xmlbeanfactory with inputstreamresource [SPR-2719]","**[Jimmy Lu](https://jira.spring.io/secure/ViewProfile.jspa?name=jlu)** opened **[SPR-2719](https://jira.spring.io/browse/SPR-2719?redirect=false)** and commented  When constructing a new XmlBeanFactory through an inputstreamresource using the 2.0 Spring release, an exception is thrown stating resource is open, although the file is only loaded once through this constructor.  Worked fine with release 1.2.7.  STEPS TO REPRODUCE:  1. construct a xmlbeanfactory instance as follows:     beanFactory = new XmlBeanFactory (    new InputStreamResource(    TestLoader.class.getResourceAsStream(    File.separator+""SpringBeans.xml"")));  WHAT HAPPENED:  2. Following output / error displayed:  [main] INFO org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from resource loaded through InputStream Exception in thread ""main"" org.springframework.beans.factory.BeanDefinitionStoreException: Passed-in Resource [resource loaded through InputStream] contains an open stream: cannot determine validation mode automatically. Either pass in a Resource that is able to create fresh streams, or explicitly specify the validationMode on your XmlBeanDefinitionReader instance. at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.detectValidationMode(XmlBeanDefinitionReader.java:449) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.getValidationModeForResource(XmlBeanDefinitionReader.java:438) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:404) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanFactory.\(XmlBeanFactory.java:73) at org.springframework.beans.factory.xml.XmlBeanFactory.\(XmlBeanFactory.java:61)  NOTE: updated the spring.jar distribution file from 1.2.7 to the 2.0 distribution file.   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-10-16T16:28:43Z","2019-01-12T16:40:40Z"
"","7321","spring-beans.dtd on springframework.org is invalid [SPR-2632]","**[Jeroen Ruijgers](https://jira.spring.io/secure/ViewProfile.jspa?name=salandur)** opened **[SPR-2632](https://jira.spring.io/browse/SPR-2632?redirect=false)** and commented  it contains a xml-declaration at the first line. so its no longer a valid dtd! it has changed on 17-september-2006   --- No further details from [SPR-2632](https://jira.spring.io/browse/SPR-2632?redirect=false)","closed","in: core,","spring-projects-issues","2006-09-24T23:31:23Z","2019-01-13T22:45:59Z"
"","7050","Make LocalSessionFactoryBean implement ResourceLoaderAware [SPR-2361]","**[Jeremiah Marcum](https://jira.spring.io/secure/ViewProfile.jspa?name=jmarcum3)** opened **[SPR-2361](https://jira.spring.io/browse/SPR-2361?redirect=false)** and commented  In the case where a custom implementation of ApplicationContext  overrides the getResource method or a custom ResourceLoader has been written and is being used to load spring resources, it should also use this custom resource loading to load the hibernate mapping files.  As it is right now all mapping resources are loaded as ClassPathResources and is not extendable/overridable.  If LocalSessionFactoryBean was made to implement ResourceLoaderAware and supplied a protected getResourceLoader() method that returned the injected ResourceLoader then it could use that ResourceLoader by default to load any mapping resources.  Also the getResourceLoader method could then be overridden if necessary to provide any other custom resource loading necessary.   ---  **Affects:** 1.2.6, 1.2.8, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-07-27T08:50:31Z","2012-06-19T09:37:40Z"
"","6950","SchedulerFactoryBean will not use TaskExecutor if other properties not set [SPR-2261]","**[Jeff Melby](https://jira.spring.io/secure/ViewProfile.jspa?name=jmelby)** opened **[SPR-2261](https://jira.spring.io/browse/SPR-2261?redirect=false)** and commented  An injected TaskExecutor will be ignored if other properties are not set due to the following condition in line 586:  if (this.configLocation != null || this.quartzProperties != null || this.dataSource != null || this.schedulerName != null)  If none of these properties are set, the TaskExecutor ends up being ignored... this condition needs to include: || this.taskExecutor != null   ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-08T13:25:27Z","2012-06-19T03:52:46Z"
"","7699","PropertyPlaceholderConfigurer subclass for encrypted property processing outputs the decrypted value to the log when debugging is enabled. [SPR-3013]","**[jeff marino](https://jira.spring.io/secure/ViewProfile.jspa?name=quijibo)** opened **[SPR-3013](https://jira.spring.io/browse/SPR-3013?redirect=false)** and commented  PropertyPlaceholderConfigurer subclass for encrypted property processing outputs the decrypted value to the log when debugging is enabled.  Your java docs actually state this encrypted property processing as an example of why to use this class.  Wonder how many people are doing something like this and inadvertantly dumping the decrypted data to the logger??  I subclassed the PropertyPlaceholderConfigurer so we could encrypt our database passwords in a .properties file and have this post processor decrypt them but when I've found that that decrypted value will actually be output to the logfile and there doesn't seem to be any way of overriding this behavior aside from overriding the parseStringValue method and copy / pasting the implementation (minus the logger output).  Would be cool if subclasses could disable this somehow or return some other type as the value holder that contained both the encrypted value (for logging) and the decrypted value (for substitution).   ---  **Attachments:** - [PropertyPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/12332/PropertyPlaceholderConfigurer.java) (_16.21 kB_)","closed","in: core,","spring-projects-issues","2007-01-04T06:06:11Z","2012-06-19T03:50:13Z"
"","7580","PropertyAccessExceptionsException shadowing the real exceptions [SPR-2892]","**[Jean-Baptiste Quenot](https://jira.spring.io/secure/ViewProfile.jspa?name=jbq)** opened **[SPR-2892](https://jira.spring.io/browse/SPR-2892?redirect=false)** and commented  Spring is currently shadowing exceptions when a referenced bean does not exist:  ```     [junit] Caused by: PropertyAccessExceptionsException (1 errors)     [junit]     at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:781)     [junit]     at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:753)     [junit]     at +org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1057)     [junit]     ... 19 more ```  With the attached patch against version 1.2.8, Spring propagate the first PropertyAccessException that is encountered.   ---  **Affects:** 1.2.8  **Attachments:** - [20061120-spring-BeanWrapperImpl-PropertyAccessException](https://jira.spring.io/secure/attachment/12248/20061120-spring-BeanWrapperImpl-PropertyAccessException) (_1020 bytes_)","closed","type: bug,","spring-projects-issues","2006-11-29T01:15:31Z","2012-06-19T03:50:24Z"
"","7508","Problem with a Long data type for iBATIS statement parameter [SPR-2821]","**[Javier Toyos Lanza](https://jira.spring.io/secure/ViewProfile.jspa?name=javier.toyos)** opened **[SPR-2821](https://jira.spring.io/browse/SPR-2821?redirect=false)** and commented  I have a problem with a java app. with spring + ibatis + oscache + database. In fact, I have a problem with a Long data type where the values are -1 and 0.  I try to do :  classApp.java {      public static void main(String[] args) {     ...          Horario horario = horarioDAO.buscarHorario(new Long(""-1""));     ...          Horario horario = horarioDAO.buscarHorario(new Long(""0""));     ...     }  }  /------/  Interface HorarioDAO.java { ... public Horario buscarHorario(Long identificador) throws DAOException; ... }  /-------/  HorarioDAOImpl extends SqlMapClientDaoSupport implements HorarioDAO { .... Horario buscarHorario(Long identificador) throws DAOException { ...		 SqlMapClientTemplate sqlMapClientTemplate = getSqlMapClientTemplate(); Horario horario = (Horario) sqlMapClientTemplate.queryForObject(""Horario.buscarHorario"", identificador); return horario; } .... }  And Horario.xml  \ \ \ \  \ 	SELECT  		h.idhorario, h.nombre 	FROM  		horario h 	WHERE 		h.idhorario = #value# \	 \  Finally the log:  {conn-100000} Connection       Connection.debug (lu00EDnea:27  )   {conn-100000} Preparing Statement:    SELECT     h.idhorario, h.nombre   FROM     horario h   WHERE    h.idhorario = ?   Connection.debug (lu00EDnea:27  )   {pstm-100001} Executing Statement:    SELECT     h.idhorario, h.nombre   FROM     horario h   WHERE    h.idhorario = ?   PreparedStatement.debug (lu00EDnea:27  )   {pstm-100001} Parameters: [-1] PreparedStatement.debug (lu00EDnea:27  )   {pstm-100001} Types: [java.lang.Long] PreparedStatement.debug (lu00EDnea:27  )   {rset-100002} ResultSet        ResultSet.debug (lu00EDnea:27  )   {conn-100003} Connection       Connection.debug (lu00EDnea:27  )  If I modified only one of values ( -1 by -2 for example ) works correctly. Also, if I modified the Long data type by String, for example View the log:  {conn-100000} Connection       Connection.debug (lu00EDnea:27  )   {conn-100000} Preparing Statement:    SELECT     h.idhorario, h.nombre   FROM     horario h   WHERE    h.idhorario = ?   Connection.debug (lu00EDnea:27  )   {pstm-100001} Executing Statement:    SELECT     h.idhorario, h.nombre   FROM     horario h   WHERE    h.idhorario = ?   PreparedStatement.debug (lu00EDnea:27  )   {pstm-100001} Parameters: [-2] PreparedStatement.debug (lu00EDnea:27  )   {pstm-100001} Types: [java.lang.Long] PreparedStatement.debug (lu00EDnea:27  )   {rset-100002} ResultSet        ResultSet.debug (lu00EDnea:27  )   {conn-100003} Connection       Connection.debug (lu00EDnea:27  )   {conn-100003} Preparing Statement:    SELECT     h.idhorario, h.nombre   FROM     horario h   WHERE    h.idhorario = ?   Connection.debug (lu00EDnea:27  )   {pstm-100004} Executing Statement:    SELECT     h.idhorario, h.nombre   FROM     horario h   WHERE    h.idhorario = ?   PreparedStatement.debug (lu00EDnea:27  )   {pstm-100004} Parameters: [0]  PreparedStatement.debug (lu00EDnea:27  )   {pstm-100004} Types: [java.lang.Long] PreparedStatement.debug (lu00EDnea:27  )   {rset-100005} ResultSet        ResultSet.debug (lu00EDnea:27  )   {rset-100005} Header: [IDHORARIO, NOMBRE] ResultSet.debug (lu00EDnea:27  )   {rset-100005} Result: [0, Ma\u005cu005cu00f1ana y Tarde] ResultSet.debug (lu00EDnea:27  )  I think that it's a problem with the spring-framework because if I configure this environment without spring ( app class + ibatis + oscache + database ) it works correctly  Thanks a lot  Javier Toyos Lanza   ---  **Affects:** 2.0 final  **Attachments:** - [src.zip](https://jira.spring.io/secure/attachment/12226/src.zip) (_13.46 kB_)","closed","","spring-projects-issues","2006-11-09T19:39:33Z","2019-01-11T21:31:38Z"
"","7575","Support easier merge/concatenation of lists [SPR-2887]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-2887](https://jira.spring.io/browse/SPR-2887?redirect=false)** and commented  This is in regards to forum thread: http://forum.springframework.org/showthread.php?t=31932  Basically, I was looking for a way to factor out some common values of two lists.  I was able to solve it ultimately by declaring the common list as a org.springframework.beans.factory.config.ListFactoryBean, and then having the shared lists declare the common list as a parent with the ""sourceList"" property of the child set to merge.  This works but isn't very friendly for an operation that doesn't seem like it should be infrequent.  One proposed solution in the forum thread was to add support for ""abstract"" and ""parent"" attributes to .  That would allow my current solution to at least be a bit terser.  Unfortunately, I don't think this really covers the general case very well, since what if someone wanted to merge in more than just one list?  The bean inheritence model doesn't support multiple parents, so you would be back to square one...  org.springframework.beans.factory.config.PropertiesFactoryBean handles this pretty nicely with its support for the ""propertiesArray"" property.  I suppose whatever the solution ultimately is should also be applied to Maps and Sets if applicable.  ---  **Affects:** 2.0.1  **Attachments:** - [AListAggregationFactoryBean.java](https://jira.spring.io/secure/attachment/15701/AListAggregationFactoryBean.java) (_1.02 kB_) - [ClassListAggregationFactoryBean.java](https://jira.spring.io/secure/attachment/15702/ClassListAggregationFactoryBean.java) (_584 bytes_) - [patch.txt](https://jira.spring.io/secure/attachment/14048/patch.txt) (_5.93 kB_)  **Issue Links:** - #11189 Introduce 'merge' attribute for util namespace collection elements (_**""duplicates""**_)  16 votes, 18 watchers","closed","has: votes-jira,","spring-projects-issues","2006-11-28T01:10:26Z","2019-01-11T21:33:30Z"
"","7544","Doc: PROPOGATION_SUPPORTS inherits completed Transaction in TransactionSyncronization.afterCompletion() [SPR-2857]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-2857](https://jira.spring.io/browse/SPR-2857?redirect=false)** and commented  Got a fun one.  Using a org.springframework.orm.hibernate3.HibernateTransactionManager, I start a transaction using default TransactionTemplate.  In that transaction, I register a TransactionSyncronization, implementing afterCompletion() such that if the transaction committed I start a new transaction using a new TransactionTemplate instance, again with the default values.  The work in that second transaction (executed within afterCompletion()) does not appear to be committed.  My guess is that the TransactionTemplate default value of PROPOGATION_SUPPORTS is causing my second transaction to be associated with the first which has already committed.  When I explictly set the Propogation Behavior on my second TransactionTemplate to be PROPOGATION_REQUIRES_NEW, sure enough the results are correctly committed.  To be honest I'm not exactly sure what the behavior should really be in this wacky case, but it probably at least warrants a javadoc comment (if it isn't already there and I missed it...)   ---  **Affects:** 1.2.8, 2.0 RC3, 2.0 RC4, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-11-21T04:38:52Z","2012-06-19T03:50:44Z"
"","7435","Allow Alias Chaining [SPR-2747]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-2747](https://jira.spring.io/browse/SPR-2747?redirect=false)** and commented  If bean A has alias B, and alias B has alias C, currently C does not resolve to A as one might expect.  That is to say, aliases do not appear to be transitive.  One way to add this feature is to have AbstractBeanFactory.transformedBeanName() keep trying to recursively resolve an alias.  Something like:      protected String transformedBeanName(String name) {     	String beanName = BeanFactoryUtils.transformedBeanName(name);     	// Handle aliasing.     	synchronized (this.aliasMap) {     		String canonicalName = (String) this.aliasMap.get(beanName);     		return (canonicalName != null ? transformedBeanName(canonicalName) : beanName);     	}     }  Alternatively, the tree could be flattened when building the alias map itself (which would be more efficient presumably).  The case where I ran into this issue was:  applicationContext-dao.xml:           	     		     	       applicationContext-dao-uncached.xml: \  When I tried to have ""adManager"" injected by name, it was not found.  The workaround is to have the alias reference adManagerHibernate directly instead, but I was hoping not to expose the underlying persistence mechanism.    ---  **Affects:** 1.2.8, 2.0 RC3  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-10-24T01:32:43Z","2012-06-19T03:50:30Z"
"","7378","AbstractSingleSpringContextTests.contextKey()/loadContext() are now final [SPR-2690]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-2690](https://jira.spring.io/browse/SPR-2690?redirect=false)** and commented  We overload the contextKey() and loadContext() in AbstractSingleSpringContextTests in order to load our contexts via ContextSingletonBeanFactoryLocator.  Unfortunately, between rc3 and 2.0-final these methods were marked as final.    Overloading contextKey() is actually still recommended in the javadoc for AbstractSingleSpringContextTests despite now being final.   As an aside, it would actually be handy to build support for a parent context into AbstractSingleSpringContextTests/AbstractSpringContextTests, much like is supported from the web ContextLoaderListener.  Excerpt from AbstractSingleSpringContextTests javadoc:  ---  *   \If you don't want this behavior, you can override the \contextKey()\ * method, most likely to return the test class. In conjunction with this you would * probably override the \getContext\ method, which by default loads * the locations specified in the \getConfigLocations()\ method.  Here is an example of how we we are overloading it:  ---      protected Object contextKey() {         return ""com.mycompany.domain"";     }          /**      * Get the application context.  Adds the applicationContext-test.xml      * to the normal domain parent context.        */     protected ConfigurableApplicationContext loadContext(Object key) {         ContextSingletonBeanFactoryLocator factoryLocator =              (ContextSingletonBeanFactoryLocator)ContextSingletonBeanFactoryLocator.getInstance();         BeanFactoryReference beanFactoryReference = factoryLocator.useBeanFactory((String)key);              ConfigurableApplicationContext parent =              (ConfigurableApplicationContext)beanFactoryReference.getFactory();              return new ClassPathXmlApplicationContext(                 new String[] { ""applicationContext-test.xml"" }, parent);     }          /**      * This method is unused because we are overloading       * contextKey()/loadContext().      */     protected String[] getConfigLocations() {         return null;     }  ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-06T01:05:07Z","2019-01-13T22:45:48Z"
"","7232","Local alias definitions for bean in parent factory [SPR-2543]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-2543](https://jira.spring.io/browse/SPR-2543?redirect=false)** and commented  If I give an alias in my context to a bean in a parent context, then users of my context cannot find the bean because it only searches for the unaliased name in my context, not my parents.  I believe the fix might be as simple as changing AbstractBeanFactory.containsBean(String name) to pass the unaliased bean name (transformedBeanName(name)) to parentBeanFactory.containsBean(name).  (But of course I am not familiar with the subtilties here...)   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-05T21:29:52Z","2012-06-19T03:50:18Z"
"","7169","Support Query.setParameterList() in HibernateTemplate.find()/findByNamedQuery()/findByNamedQueryAndNamedParam() [SPR-2480]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-2480](https://jira.spring.io/browse/SPR-2480?redirect=false)** and commented  HibernateTemplate.findByNamedParam() uses applyNamedParameterToQuery() which for Collections/Arrays calls setParameterList().  For consistency and convenience find(), findByNamedQuery(), and findByNamedQueryAndNamedParam() should implement similar behavior.   ---  **Affects:** 2.0 RC3, 2.0 RC4  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-24T23:25:12Z","2019-01-11T19:33:32Z"
"","7563","Support logging exceptions at warn level in SimpleMappingExceptionResolver [SPR-2876]","**[Jason Yip](https://jira.spring.io/secure/ViewProfile.jspa?name=jchyip)** opened **[SPR-2876](https://jira.spring.io/browse/SPR-2876?redirect=false)** and commented  Our error view does not display the underlying errors in order to avoid leaking them to the user but since DispatcherServlet logs the exceptions a debug level, we need to have a lot of unnecessary logging in order to figure out what is failing.  I think it's more appropriate to log at a higher level, suggested warn, instead of debug for these handler exceptions.   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-11-26T15:09:55Z","2012-06-19T03:50:22Z"
"","7371","ErrorsTag fails parent check when used in a JSP 2.0 tag file [SPR-2683]","**[Jared Stehler](https://jira.spring.io/secure/ViewProfile.jspa?name=jstehler)** opened **[SPR-2683](https://jira.spring.io/browse/SPR-2683?redirect=false)** and commented  Spring 2.0 introduced a check to ensure ErrorsTag is wrapped properly inside of a FormTag (call to TagUtils.assertHasAncestorOfType()) ... the problem is that I am using JSP 2.0 tag files, and have one such tag which contains the ErrorsTag.  After stepping through the debugger in tomcat, it appears that parent tag is not being set on tags inside of the tag file (null), so the assertion is failing for ErrorsTag.  If this is preferred behavior, is there a workaround you can suggest?  Here is my formField.tag file:         \ 	\ 		\ 	\ 	\ 		\ \ 	\ \  - and in my jsps:                                                              You can see I am saving quite a bit in my jsp files (I have quite a few form fields), and would prefer to keep the errors tag in this common tag.   ---  **Affects:** 2.0 final","closed","status: declined,","spring-projects-issues","2006-10-05T09:19:10Z","2019-01-12T16:28:32Z"
"","7370","ErrorsTag should be able to support other wrapper tags than Span [SPR-2682]","**[Jared Stehler](https://jira.spring.io/secure/ViewProfile.jspa?name=jstehler)** opened **[SPR-2682](https://jira.spring.io/browse/SPR-2682?redirect=false)** and commented  You should be able to specify that ErrorsTag can use something other than \ to wrap its errors in (e.g. \).   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-05T07:42:32Z","2019-01-11T21:14:59Z"
"","7200","DocBug BaseCommandController.createCommand() ""commands need to have public no-arg constructors"" differs from BeanUtils Documentation [SPR-2511]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-2511](https://jira.spring.io/browse/SPR-2511?redirect=false)** and commented  Documentation for BaseCommandController  states:  ""This implementation uses BeanUtils.instantiateClass, so commands need to have public no-arg constructors.""  But it works with private Constructors, too, as documented in BeanUtils.instantiateClass: ""Note that this method tries to set the constructor accessible if given a non-accessible (i.e. non-public) constructor.""  Proposal: ""This implementation uses BeanUtils.instantiateClass, so commands must not have public no-arg constructors.""   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-30T19:44:41Z","2012-06-19T03:50:09Z"
"","7760","addition of cssStyle functionality [SPR-3074]","**[Jamie Maguire](https://jira.spring.io/secure/ViewProfile.jspa?name=j4mie)** opened **[SPR-3074](https://jira.spring.io/browse/SPR-3074?redirect=false)** and commented  The  tags currently have no cssStyle functionality. The  parent tag has it, but my requirement is that I need to be able to give  tags different styles.  html \ tags currently enable you to do this.   ---  **Affects:** 2.0.1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-25T01:03:25Z","2012-06-19T09:37:34Z"
"","7057","Problem getting  beans recognized as ""local"" [SPR-2368]","**[Jamie Bisotti](https://jira.spring.io/secure/ViewProfile.jspa?name=jbisotti)** opened **[SPR-2368](https://jira.spring.io/browse/SPR-2368?redirect=false)** and commented  Given the following Map definition:       ...   I want to add it to another Map I'm injecting as a property; in the same context file:                                                                                                                                                    However, someMap is not recognized as being ""local"".   ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-31T02:54:16Z","2012-06-19T03:50:16Z"
"","7339","Spring 2.0 RC4 JMS logging issue/request for class SingleConnectionFactory [SPR-2650]","**[James Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=james1969)** opened **[SPR-2650](https://jira.spring.io/browse/SPR-2650?redirect=false)** and commented  Hello,  I know this may seem trivial, but going from RC3 to RC4, there has been a change in log messages being printed out. Specifically org.springframework.jms.connection.SingleConnectio nFactory.createConnection() has the following code:  public Connection createConnection() throws JMSException { synchronized (this.connectionMonitor) { if (this.connection == null) { initConnection(); } if (logger.isInfoEnabled()) { logger.info(""Established shared JMS Connection: "" + this.target); } return this.connection; } }  This logger.info() statement is being printed out to the logfiles less than once a second. Can this log statement be changed to a DEBUG level instead of an INFO level? Having a log message print out at this kind of frequency renders the log file as useless. I think DEBUG would be more appropriate.  I checked in RC3 and the debug statement in the same createConnection() method was at DEBUG level.  Thanks, Jim   ---  **Affects:** 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-09-28T07:17:59Z","2012-06-19T03:50:56Z"
"","7418","JMSException conversion in JmsUtils.convertJmsAccessException() [SPR-2730]","**[James Ryan](https://jira.spring.io/secure/ViewProfile.jspa?name=j.p.ryan@accenture.com)** opened **[SPR-2730](https://jira.spring.io/browse/SPR-2730?redirect=false)** and commented  When using the JmsTemplate to send a JMS Message and a javax.jms.JMSException is thrown by the container Spring attempts to convert the javax.jms.JMSException to its own org.springframework.jms.JmsException.  However in the conversion the class name that is generated is org.springframework.jms.JMSException (note JMS is uppercase).  This is due to the java.beans.Introspector decapitalize method that gets called.  Naturally this causes a ClassNotFound exception.  While this is handled in the code...  // logger.debug(""Couldn't resolve JmsException class ["" + longName + ""]"", ex2); //  I think this is not what is expected.  Full stack trace included for reference.  18 Oct 2006 14:01:15,739 [[ACTIVE] ExecuteThread: '1' for queue: 'weblogic.kernel.Default (self-tuning)'] DEBUG org.springframework.jms.support.JmsUtils  - Couldn't resolve JmsException class [org.springframework.jms.JMSException]  java.lang.ClassNotFoundException: org.springframework.jms.JMSException              at weblogic.utils.classloaders.GenericClassLoader.findLocalClass(GenericClassLoader.java:222)                  at weblogic.utils.classloaders.GenericClassLoader.findClass(GenericClassLoader.java:195)                  at java.lang.ClassLoader.loadClass(ClassLoader.java:306)                  at java.lang.ClassLoader.loadClass(ClassLoader.java:251)                  at weblogic.utils.classloaders.GenericClassLoader.loadClass(GenericClassLoader.java:130)                  at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)                  at java.lang.Class.forName0(Native Method)                  at java.lang.Class.forName(Class.java:164)                  at org.springframework.jms.support.JmsUtils.convertJmsAccessException(JmsUtils.java:169)                  at org.springframework.jms.support.JmsAccessor.convertJmsAccessException(JmsAccessor.java:147)                  at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:435)                  at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:486)                  at ie.revenue.jms.SpringJmsMessageSender.sendMessage(SpringJmsMessageSender.java:84)                  at ie.revenue.jms.SpringJmsMessageSender.sendMessage(SpringJmsMessageSender.java:61)                  at ie.revenue.aep.messaging.ca.PostSadReceiver.process(PostSadReceiver.java:169)                  at ie.revenue.jms.AbstractTextMessageDrivenBean.onMessage(AbstractTextMessageDrivenBean.java:73)                  at weblogic.ejb.container.internal.MDListener.execute(MDListener.java:426)                  at weblogic.ejb.container.internal.MDListener.transactionalOnMessage(MDListener.java:332)                  at weblogic.ejb.container.internal.MDListener.onMessage(MDListener.java:288)                  at weblogic.jms.client.JMSSession.onMessage(JMSSession.java:3824)                  at weblogic.jms.client.JMSSession.execute(JMSSession.java:3738)                  at weblogic.jms.client.JMSSession$UseForRunnable.run(JMSSession.java:4228)                  at weblogic.work.ServerWorkManagerImpl$WorkAdapterImpl.run(ServerWorkManagerImpl.java:518)                  at weblogic.work.ExecuteThread.execute(ExecuteThread.java:207)                  at weblogic.work.ExecuteThread.run(ExecuteThread.java:179)    ---  **Affects:** 1.2.6, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-10-18T10:13:02Z","2012-06-19T03:50:26Z"
"","7750","AspectJ parameter name discovery working in 2.0.1 but not in 2.0.2 [SPR-3064]","**[James Burton](https://jira.spring.io/secure/ViewProfile.jspa?name=jimsey)** opened **[SPR-3064](https://jira.spring.io/browse/SPR-3064?redirect=false)** and commented  I am using annotated interceptors and have code working perfectly in spring 2.0.1. I upgraded to spring 2.0.2 and one of my interceptors now fails to load in Tomcat 5.5.17 and Java 1.5.2_07  This is the stack trace...  [CODE] 2007-01-17 12:25:52,653 : ERROR : main : context.ContextLoader : Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: error Type referred to is not an annotation type: transaction Caused by: java.lang.IllegalArgumentException: error Type referred to is not an annotation type: transaction at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:315) at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:159) at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:149) at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:134) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:166) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:226) at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:256) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:85) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:69) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:265) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:316) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1094) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:429) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:250) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:247) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:161) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:341) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:250) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:247) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:161) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:273) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:346) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3729) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4187) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1122) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:310) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1021) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:709) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:432) [/CODE]  This is the bean definition...  [CODE]  \             	     	       [/CODE]  This is the transaction interceptor, which causes the stack trace above on starting up tomcat. The 'transaction' mentioned in the stack trace is the transaction parameter on the around advice method...  [CODE] package net.company.aop;  import net.company.annotations.Transaction;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.springframework.core.Ordered; import org.springframework.transaction.PlatformTransactionManager; import org.springframework.transaction.TransactionStatus; import org.springframework.transaction.support.DefaultTransactionDefinition;  `@Aspect` public class TransactionInterceptor implements Ordered {      private final Log log = LogFactory.getLog(getClass());          private PlatformTransactionManager transactionManager;          private int order;          // -------------------------------------------------------     // allows us to control the ordering of advice     public int getOrder() {     return this.order;     }          public void setOrder(int order) {     this.order = order;     }          public void setTransactionManager(PlatformTransactionManager transactionManager) {         this.transactionManager = transactionManager;     }          // -------------------------------------------------------     @Around(value = ""execution(* net.company.workflow..*.*(..)) && @annotation(transaction)"")     public Object around(ProceedingJoinPoint pjp, Transaction transaction) throws Throwable {          Object result;     TransactionStatus status = transactionManager.getTransaction(new DefaultTransactionDefinition());     log.info(""BEGIN TRANSACTION"");          try {         result = pjp.proceed();     } catch (Exception e) {         log.info(""ROLLBACK TRANSACTION"");         transactionManager.rollback(status);         throw e;     }          log.info(""COMMIT TRANSACTION"");     transactionManager.commit(status);     return result;          }  } [/CODE]  Here is the annotation class...  [CODE] package net.company.annotations;  import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  `@Retention`(RetentionPolicy.RUNTIME) `@Target`(ElementType.METHOD) public `@interface` Transaction { } [/CODE]  I do not know why the stack trace complains about the dataSource bean, but here is the definition...  [CODE] \ \ \ \           	       [/CODE]  Please note that it all works fine in 2.0.1 and only causes the error when the transaction interceptor is present in 2.0.2. I have other interceptors including another around advice based on a different annotation which all work fine in 2.0.2. Only my interceptor above fails in 2.0.2. I have tried changing the name of my transaction annotation and parameter with no luck.  What is happening here? Is this a bug..?   ---  **Affects:** 2.0.2  **Attachments:** - [commons-soni.zip](https://jira.spring.io/secure/attachment/12486/commons-soni.zip) (_17.16 kB_)","closed","in: core,","spring-projects-issues","2007-01-22T21:36:29Z","2019-01-11T16:42:44Z"
"","7280","Classpath uses incorrect path for ehcache and jasperreports [SPR-2591]","**[James Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=jmadams)** opened **[SPR-2591](https://jira.spring.io/browse/SPR-2591?redirect=false)** and commented  The .classpath file in the 2.0-rc4 version uses incorrect library paths for the ehcache and jasperreports jar files.   ---  **Affects:** 2.0 RC4  **Attachments:** - [spring-2-0-rc4-classpath-patch.txt](https://jira.spring.io/secure/attachment/11964/spring-2-0-rc4-classpath-patch.txt) (_1.79 kB_)","closed","type: bug,","spring-projects-issues","2006-09-17T00:53:05Z","2012-06-19T03:51:03Z"
"","7000","DriverManagerDataSource does not get the url properly [SPR-2311]","**[Jaime Vallori](https://jira.spring.io/secure/ViewProfile.jspa?name=jvallori)** opened **[SPR-2311](https://jira.spring.io/browse/SPR-2311?redirect=false)** and commented  If you setup the url connection like:           	     		     			jdbc:mysql://localhost:3306/test?autoReconnect=true     		     	     	     		com.mysql.jdbc.Driver     	     	     		test     	     	     		test     	       When trying to use this datasource you get the following exception:  java.sql.SQLException: No suitable driver at java.sql.DriverManager.getConnection(Unknown Source) at java.sql.DriverManager.getConnection(Unknown Source) at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnectionFromDriverManager(DriverManagerDataSource.java:291) at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnectionFromDriverManager(DriverManagerDataSource.java:277) at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnectionFromDriverManager(DriverManagerDataSource.java:259) .....  This is caused because inside the DriverManagerDataSource.getConnectionFromDriverManager() method spring is calling to:  return DriverManager.getConnection(url, props);  BUT the url contains the spaces and backspaces of the xml file (notice that the url value is indented). So the call should be:  return DriverManager.getConnection(url.trim(), props);  Or even better to ""trim"" the url when getting it.  A workaround for this is obvious: just type the url without indentation. That is: \jdbc:mysql://localhost:3306/test?autoReconnect=true\ instead of \ jdbc:mysql://localhost:3306/test?autoReconnect=true \   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-17T06:52:28Z","2012-06-19T03:52:48Z"
"","7524","FileEditor not backward compatible with 1.2.x version vis-a-vis relative paths [SPR-2837]","**[Jacques Morel](https://jira.spring.io/secure/ViewProfile.jspa?name=jacmorel)** opened **[SPR-2837](https://jira.spring.io/browse/SPR-2837?redirect=false)** and commented  The FileEditor in 1.2.6 used to allow relative path to be entered. They would be relative to the vm start directory (while not ideal and not consistent with the great new relative resource loading mechanism The bug stems from the fact that there is an explicit absolute check that I fail to understand given the backward compatibility comments in the method. Why not do the following and be fully backward compatible.      public void setAsText(String text) throws IllegalArgumentException {     	// Check whether we got an absolute file path without ""file:"" prefix.     	// For backwards compatibility, we'll consider those as straight file path.     	if (StringUtils.hasText(text) && !ResourceUtils.isUrl(text)) {     	   File file = new File(text);                    setValue(file);                    return;     	}             ...            }  One problem with the resource loader is that it does not support files that do not exist. As File is a file abstraction that supports both existent and inexistent files, third-parties that uses rich typing system for their configuration setter (like ActiveMQ) may use a File property to denote a directory/file that would be created if not existent. I could not find how the new FileEditor would support that.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-14T18:46:39Z","2019-01-11T21:31:00Z"
"","7017","Exception when using several advice on Pointcut [SPR-2328]","**[J-C Walmetz](https://jira.spring.io/secure/ViewProfile.jspa?name=jc7442)** opened **[SPR-2328](https://jira.spring.io/browse/SPR-2328?redirect=false)** and commented  When I had several advice on the same Pointcut, spring thorws an exception. See http://forum.springframework.org/showthread.php?p=69766#post69766    ---  **Affects:** 2.0 RC2  **Attachments:** - [AspectJPointcutAdvisor.java](https://jira.spring.io/secure/attachment/11831/AspectJPointcutAdvisor.java) (_3.88 kB_) - [bug.zip](https://jira.spring.io/secure/attachment/11830/bug.zip) (_9.45 kB_) - [ThrowsAdviceInterceptor.java](https://jira.spring.io/secure/attachment/11832/ThrowsAdviceInterceptor.java) (_6.05 kB_)","closed","in: core,","spring-projects-issues","2006-07-20T01:55:25Z","2019-01-12T16:29:02Z"
"","7727","BridgeMethodResolver#populateTypeMapFromParameterizedType does not handle nested generics [SPR-3041]","**[Ismael Juma](https://jira.spring.io/secure/ViewProfile.jspa?name=ijuma)** opened **[SPR-3041](https://jira.spring.io/browse/SPR-3041?redirect=false)** and commented  BridgeMethodResolver#populateTypeMapFromParameterizedType does not handle a case like BusinessDao extends GenericDao","closed","in: core,","spring-projects-issues","2007-01-16T04:31:33Z","2012-06-19T03:50:09Z"
"","7647","Petclinic example needs to be updated to JPA annotations [SPR-2960]","**[Ingo M.](https://jira.spring.io/secure/ViewProfile.jspa?name=ingom)** opened **[SPR-2960](https://jira.spring.io/browse/SPR-2960?redirect=false)** and commented  As regards JPA,  the Petclinic example is outdated in the sense that it only makes use of xml-based JPA mapping files (orm.xml), but does not demonstrate the use of JPA annotations on Entity classes.    What's more, if Toplink rather than Hibernate is chosen as JPA persistence provider and the created WAR file for the Petclinic web application is deployed to Tomcat 5.5.20,   the configuration of Tomcat can be tricky and pose a major challenge and frustrating experience to new users of Spring.   In particular,  a stumbling block for new users is how to correctly configure the  org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader,  which is required when using Toplink with Tomcat.  Postings on forums show that new users often encounter a lot of problems  (some recent examples below) and fail to get things working:  Toplink ignores JPA annotations / porting Petclinic http://forum.springframework.org/showthread.php?t=32671  How to set up petclinic JPA implementation? http://forum.springframework.org/showthread.php?t=32519&highlight=context.xml  TomcatInstrumentableClassLoader and Tomcat's System Classloader http://forum.springframework.org/showthread.php?t=28028&highlight=context.xml  What is needed:  - An updated version of the petclinic that makes use of JPA annotations rather than xml-based mapping (orm.xml)  - A fully working demo configuration that shows how to configure the web application when deploying to Tomcat and using Toplink as JPA provider (with JPA annotations, not just xml-based mapping files).  In particular, the demo configuration should include a correct context.xml file in META-INF of the web-app's WAR-archive to configure the TomcatInstrumentableClassLoader.  This issue should be assigned to Costin Leau, as per discussion with him. http://forum.springframework.org/showthread.php?t=32671   ---  **Affects:** 2.0 final  **Attachments:** - [PetclinicEntitiesWithAnnotations.zip](https://jira.spring.io/secure/attachment/12285/PetclinicEntitiesWithAnnotations.zip) (_6.70 kB_)  4 votes, 5 watchers","closed","in: core,","spring-projects-issues","2006-12-18T20:25:03Z","2012-06-19T09:37:37Z"
"","7772","Add ""com.sun."" prefixes to DEFAULT_EXCLUDED_PACKAGES in ShadowingClassLoader [SPR-3086]","**[Ilya Agoshkov](https://jira.spring.io/secure/ViewProfile.jspa?name=agoshkoviv)** opened **[SPR-3086](https://jira.spring.io/browse/SPR-3086?redirect=false)** and commented  JAXP fails in our custom AbstractJpaTests subclasses. Rewriting DEFAULT_EXCLUDED_PACKAGES declaration as follows:      /** Packages that are excluded by default */     public static final String[] DEFAULT_EXCLUDED_PACKAGES = new String[] {     	""java."", ""javax."", ""sun."", ""com.sun."", ""org.w3c."", ""org.xml."", ""org.dom4j."", ""org.aspectj."",     	""org.apache.xerces."", ""org.apache.commons.logging.""};  fixes the problem (we just added ""com.sun."").   ---  **Affects:** 2.0.2  **Attachments:** - [ShadowingClassLoader.java](https://jira.spring.io/secure/attachment/12367/ShadowingClassLoader.java) (_5.82 kB_)","closed","type: enhancement,","spring-projects-issues","2007-01-28T22:50:21Z","2012-06-19T03:50:28Z"
"","7306","Uncategorized data access exception thrown for deadlock [SPR-2617]","**[Ilanchezhian](https://jira.spring.io/secure/ViewProfile.jspa?name=ilang98)** opened **[SPR-2617](https://jira.spring.io/browse/SPR-2617?redirect=false)** and commented  During update by using JdbcTemplate.update(String sql, Object[] args), I encounter exception due to deadlock. This is thrown as an SQLException. Exception log is  exception: PreparedStatementCallback; uncategorized SQLException for SQL [UPDATE EMP_INFO SET ORG_NAME=?, EMP_MAME=?, WHERE EMP_ID=?]; SQL state [40001]; error code [1205]; Transaction (Process ID 58) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.; nested exception is java.sql.SQLException: Transaction (Process ID 58) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.  In the above scenario, I encounter couple of issues:  + From application program code there is no way I can capture this exception (SQLException), and provide the information message. To do this I am forced to capture root exception (Exception) and provide necessary information message. + Currently JdbcTemplate.update() method throws only 'DataAccessException' but when we look at source code we can see it internally executes PreparedStatementCallback.doInPreparedStatement() method, this method  throws SQLException. But as root JdbcTemplate.update() throws only 'DataAccessException' so in this case I am not able to catch any SQLException. Please let me know is this a practice that I should not catch any SQLException in my application code?  ---  **Affects:** 2.0.6  **Issue Links:** - #6388 SQL Server Error Code 1205 = DeadlockLoser (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2006-09-20T19:56:47Z","2019-01-11T21:13:14Z"
"","7450","IllegalStateException: Unable to locate bridged method in certain class hieararchies [SPR-2763]","**[Igor Vaynberg](https://jira.spring.io/secure/ViewProfile.jspa?name=ivaynberg)** opened **[SPR-2763](https://jira.spring.io/browse/SPR-2763?redirect=false)** and commented  getting IllegalStateException because spring fails to properly identify a bridged method. need to check for type signature where the generic type has been replaced with Object since that is the signature the compiler generates for bridged methods  here is the stack trace, i am also attaching a test case  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springtest.support.UserDaoImpl' defined in class path resource [springtest/ctx.xml]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Unable to locate bridged method for bridge method 'public volatile void springtest.support.UserDaoImpl.save(springtest.support.User)' Caused by: java.lang.IllegalStateException: Unable to locate bridged method for bridge method 'public volatile void springtest.support.UserDaoImpl.save(springtest.support.User)' at org.springframework.core.BridgeMethodResolver.findBridgedMethod(BridgeMethodResolver.java:91) at org.springframework.core.annotation.AnnotationUtils.getAnnotations(AnnotationUtils.java:41) ...   ---  **Affects:** 2.0 final  **Attachments:** - [springtest.zip](https://jira.spring.io/secure/attachment/12068/springtest.zip) (_4.26 kB_)","closed","in: core,","spring-projects-issues","2006-10-26T06:46:01Z","2012-06-19T03:50:48Z"
"","7484","ExpressionEvaluationUtils falls back to Jakarta JSTL if JSP 2.0 ExpressionEvaluator API present but not implemented -- needs further improvement [SPR-2797]","**[Igor Tsenter](https://jira.spring.io/secure/ViewProfile.jspa?name=itsenter)** opened **[SPR-2797](https://jira.spring.io/browse/SPR-2797?redirect=false)** and commented  This was reported in Spirn 2.0 changelog:  ""ExpressionEvaluationUtils falls back to Jakarta JSTL if JSP 2.0 ExpressionEvaluator API present but not implemented."" However, issue still appears when application runs under WebSphere 6.1 (IBM JVM). The decision to use fallback is based on NoSuchMethodError exception (see ExpressionEvaluationUtils):      catch (NoSuchMethodError err) {          logger.debug(""JSP 2.0 ExpressionEvaluator API present but not implemented - using fallback"");          setFallbackNecessary();          return this.fallback.evaluate(attrName, attrValue, resultClass, pageContext);     }  However, when running under IBM JVM on WebSphere 6.1, it throws AbstractMethodError. The following code fixes the problem:      catch (NoSuchMethodError err) {          logger.debug(""JSP 2.0 ExpressionEvaluator API present but not implemented - using fallback"");          setFallbackNecessary();          return this.fallback.evaluate(attrName, attrValue, resultClass, pageContext);     }     catch (java.lang.AbstractMethodError err) {          logger.debug(""JSP 2.0 (AbstractMethodError) ExpressionEvaluator API present but not implemented - using fallback"");          setFallbackNecessary();          return this.fallback.evaluate(attrName, attrValue, resultClass, pageContext);     }  Any other preciser detection that fallback is required will solve the problem as well. Thanks.   ---  **Affects:** 2.0 final, 2.0.1, 1.2.9","closed","in: core,","spring-projects-issues","2006-11-03T00:54:46Z","2012-06-19T03:50:26Z"
"","7818","Trigger is not stored in DB  [SPR-3132]","**[Igor Mackarov](https://jira.spring.io/secure/ViewProfile.jspa?name=igoreck)** opened **[SPR-3132](https://jira.spring.io/browse/SPR-3132?redirect=false)** and commented  Hi,  I've instantiated a persistent scheduler out of bean on org.springframework.scheduling.quartz.SchedulerFactoryBean, it fine schedules and stores  jobs implementing StatefulJob,  in Oracle DB if they are fired by a Simple trigger or any custom trigger trivially implementing Simple trigger.  But when are try to schedule THE SAME job with a more complicated trigger (having rather complex getFireTimeAfter method and overriding a few more methods, such as triggered and computeFirstFireTime) it fails to run, in some testcases I was getting an exception saying that one cannot store my trigger : NON-SERIALIZABLE, or involving NULL, but in most cases my trigger is silentlyignored: it isn't store in DB nor fired.  Please help, this is a work stopper.  Hoping to hear from youo soon,  Igoreck   --- No further details from [SPR-3132](https://jira.spring.io/browse/SPR-3132?redirect=false)","closed","in: core,","spring-projects-issues","2007-02-07T10:25:48Z","2019-01-11T17:32:08Z"
"","7759","Patch: PersistenceUnitPostProcessor that adds specific packages to a persistence unit [SPR-3073]","**[Ignacio Coloma](https://jira.spring.io/secure/ViewProfile.jspa?name=icoloma)** opened **[SPR-3073](https://jira.spring.io/browse/SPR-3073?redirect=false)** and commented  It's a common environment to have some persistent classes in a different classpath unit (jar or decompressed folder), for example when reusing libraries. By default the JPA engine searches for persistent classes only in the same classpath unit that the persistence.xml file, which causes that the ClassLoader does see the class, but the JPA processor does not. This can be overriden specifying the jar files to add in the persistence.xml file, but they must be environment-specific (absolute locations, ear-included jars, etc) which is not flexible.  This postProcessor admits a list of packages to add to the persistence unit, and searches the classpath looking for any Class annotated as `@Entity`. I am afraid the patch is not complete, though: I make use of the stripes class finder because I lack the knowledge of how to do this with spring (didn't find anything suitable in the ClassUtils classes, be it spring or commons).  Enclosed are the class, the test and a persistent entity for the test.   ---  **Attachments:** - [DummyPersistent.java](https://jira.spring.io/secure/attachment/12362/DummyPersistent.java) (_138 bytes_) - [JpaClassesPostProcessor.java](https://jira.spring.io/secure/attachment/12360/JpaClassesPostProcessor.java) (_2.17 kB_) - [JpaClassesPostProcessorTest.java](https://jira.spring.io/secure/attachment/12361/JpaClassesPostProcessorTest.java) (_1.07 kB_)","closed","type: enhancement,","spring-projects-issues","2007-01-24T21:41:53Z","2012-06-19T09:37:30Z"
"","7688","forms:errors doesn't make use of nestedPath [SPR-3002]","**[Ian Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=ian)** opened **[SPR-3002](https://jira.spring.io/browse/SPR-3002?redirect=false)** and commented  The form:errors doesn't take nestedPath into account.  This was annoying for me since I was making use of nestedPath on a few objects that had identical fields. This resulted in non-validating xhtml.  In ErrorsTag.java, I replaced:  protected String autogenerateId() throws JspException { return getPath() + "".errors""; }  with:  protected String autogenerateId() throws JspException { String path = getNestedPath() == null ? getPath() : getNestedPath() + getPath(); return path + "".errors""; }  This seemed to produce a more sane result, however, I'm not familiar enough to know if this is correct.   ---  **Affects:** 2.0.1, 2.0.2, 2.0.3, 2.1 M4","closed","type: bug,","spring-projects-issues","2007-01-01T09:29:54Z","2012-06-19T03:50:16Z"
"","7675","form:errors generates non-validating xhtml [SPR-2989]","**[Ian Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=ian)** opened **[SPR-2989](https://jira.spring.io/browse/SPR-2989?redirect=false)** and commented  CVS still had this issue as of this post.  form:errors generates a span tag with a name attribute. name is not a validate attribute for span.  example:    resulted in:  \Email address required\   ---  **Affects:** 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 2.0.3, 2.1 M4","closed","type: bug,","spring-projects-issues","2006-12-27T10:56:49Z","2012-06-19T03:51:19Z"
"","7092","Documentation, Section 25.3.1, mistype [SPR-2403]","**[Ian Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=ian)** opened **[SPR-2403](https://jira.spring.io/browse/SPR-2403?redirect=false)** and commented  public class SimpleMovieLister {      // the SimpleMovieLister has a dependency on the MovieFinder     private MovieFinder movieFinder;          // a setter method so that the Spring container can 'inject' a MovieFinder     @Required     public void setMoveFinder(MovieFinder movieFinder) {         this.movieFinder = movieFinder;     }          // business logic that actually 'uses' the injected MovieFinder is omitted...  }  Should be setMovieFinder   --- No further details from [SPR-2403](https://jira.spring.io/browse/SPR-2403?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-08-10T11:14:54Z","2012-06-19T03:50:50Z"
"","7043","It isn't clear how to use form:label [SPR-2354]","**[Ian Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=ian)** opened **[SPR-2354](https://jira.spring.io/browse/SPR-2354?redirect=false)** and commented  The  usage isn't exactly clear. It would be nice if the samples/showcases/formtags example used it.  Note: this is wrapped by   \ \\Number:\\ \ \ \ \ \  this results in:  \ \ \Number:\ \   \ \ \ \ First of all, in xhtml, the name attribute for label is illegal. Second, the id attribute is non-sensical and not helpful (I believe). Third, the for attribute on the label should take the nestedPath into consideration and should match the value that input resolved its id to.  ---  **Affects:** 2.1 M4  **Issue Links:** - #7242 LabelTag in new Form Tag library renders attributes that do not meet HTML 4.01 Specification (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2006-07-26T16:48:40Z","2019-01-11T18:35:27Z"
"","6940","generates invalid xhtml [SPR-2251]","**[Ian Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=ian)** opened **[SPR-2251](https://jira.spring.io/browse/SPR-2251?redirect=false)** and commented    Produces:  \ ""name"" is not a valid attribute of \ in XHTML 1.0 Strict   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-06T17:08:51Z","2012-06-19T03:52:44Z"
"","7512","JdbcTemplate only logs first warning and ignores the rest [SPR-2825]","**[Ian Orford](https://jira.spring.io/secure/ViewProfile.jspa?name=orfordi)** opened **[SPR-2825](https://jira.spring.io/browse/SPR-2825?redirect=false)** and commented  In class JdbcTemplate, the method throwExceptionOnWarningIfNotIgnoringWarnigns logs a warn if isIgnoreWarnings() is true. The problem is that it only logs the first warning. If there are a list of warnings, only the first is logged.  java.sql.SQLWarning provides a linked list of warnings.  I think the method should be changed to:  private void throwExceptionOnWarningIfNotIgnoringWarnings(SQLWarning warning) throws SQLWarningException { if (warning != null) { if (isIgnoreWarnings()) { if (logger.isWarnEnabled()) { while (warning != null) { logger.warn(""SQLWarning ignored: SQL state '"" + warning.getSQLState() + ""', error code '"" + warning.getErrorCode() + ""', message ["" + warning.getMessage() + ""]""); warning = warning.getNextWarning(); } } } else { throw new SQLWarningException(""Warning not ignored"", warning); } } }   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-11-10T02:16:44Z","2012-06-19T03:51:02Z"
"","7055","I believe that Notifications sent by NotificationPublisher are not being interpreted correctly by the JMX server. [SPR-2366]","**[Ian Butcher](https://jira.spring.io/secure/ViewProfile.jspa?name=ibutcher)** opened **[SPR-2366](https://jira.spring.io/browse/SPR-2366?redirect=false)** and commented  I am trying to do a very simple prototype application using Spring 2.0 with it's JMX support. The issue I am having is I am getting the following warning from jconsole when I register for notifications for my sample MBean:  WARNING: Failed to deserialize a notification: java.lang.ClassNotFoundException: com.real.common.bandwidth.ByteGenerator (no security manager: RMI class loader disabled)  On the face of it it's pretty simple - the client, in this case jconsole, needs to have access to the ByteGenerator bytecode.  I am no JMX expert but looking at the Javadoc for Notification it says:  Quote: The Notification class represents a notification emitted by an MBean. It contains a reference to the source MBean: if the notification has been forwarded through the MBean server, and the original source of the notification was a reference to the emitting MBean object, then the MBean server replaces it by the MBean's ObjectName. If the listener has registered directly with the MBean, this is either the object name or a direct reference to the MBean.  It is strongly recommended that notification senders use the object name rather than a reference to the MBean object as the source.  This seems to suggest that Spring should be replacing my actual object with the name that it was registered with in it's MBean server. Am I missing something with my code/config below which is preventing this from happening?  Thanks for any help in advance,  Ian.  Code and XML follows  ---  The code for the bean is simple enough too (I had to make a couple of fields transient to prevent NotSerializableExceptions):  import org.springframework.jmx.export.notification.Notifi cationPublisherAware; import org.springframework.jmx.export.notification.Notifi cationPublisher; import org.springframework.jmx.export.annotation.ManagedA ttribute; import org.springframework.jmx.export.annotation.ManagedR esource;  import javax.management.Notification; import java.io.Serializable; import java.util.Random;  /** * Super simple class which just generates some number of characters which when * encoded with UTF-8 will be a single byte each. *  * `@author` ibutcher   */   `@ManagedResource`(objectName=""bean:name=ByteGenerat or"")   public class ByteGenerator implements NotificationPublisherAware, Serializable {  private transient NotificationPublisher publisher;  private transient static final Random random = new Random(System.currentTimeMillis()); private static final int ONE_KAY = 1024; private static final int NUMBER_OF_CHARACTERS_IN_ALPHABET = 26; private static final int CAPITAL_A = 65; private static int numberOfExecutions;  public void setNotificationPublisher(NotificationPublisher notificationPublisher) { this.publisher = notificationPublisher; }  `@ManagedAttribute` (description=""How many times?"") public int getNumberOfExecutions(){ return numberOfExecutions; }  String getBytes(int numberOfBytes) { StringBuffer buffer = new StringBuffer(numberOfBytes * ONE_KAY);  for (int i = 0; i < (numberOfBytes * ONE_KAY); ++i) { buffer.append((char) (CAPITAL_A + random.nextInt(NUMBER_OF_CHARACTERS_IN_ALPHABET))) ; }  numberOfExecutions++;  publisher.sendNotification(new Notification(""ByteGenerator.execute"", this, getNumberOfExecutions()));  return buffer.toString(); } }  As you can see I'm using the fancy new Java 5 annotations to instrument the bean. By context file is here:  \ \ \ \ \ \ \ \  \  \  \ \ \  \  \ \ \  \ \ \ \ \ \ \ \ \ \ \  ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-28T10:52:16Z","2019-01-13T08:54:19Z"
"","7660","Enable setting of default transaction timeout for tx:annotation-driven [SPR-2974]","**[Hideyuki Suzumi](https://jira.spring.io/secure/ViewProfile.jspa?name=slopetown)** opened **[SPR-2974](https://jira.spring.io/browse/SPR-2974?redirect=false)** and commented  I am using , DataSourceTransactionManager and iBATIS. But, 1.DataSourceTransactionManager  has no default timeout property. 2. has no default timeout attribute.  Therefore I cannot specify default transaction timeout declaratively. (I like the easiness of tx:annotation-driven, and I do not want to give this up. )   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-22T01:27:33Z","2012-06-19T03:50:48Z"
"","7731","PetClinic - JPA, EntityManagerClinic.storeOwner need to use persist() rather than merge(), web.xml need to configure OpenEntityManagerInViewFilter for lazy load,  [SPR-3045]","**[Henry Lai](https://jira.spring.io/secure/ViewProfile.jspa?name=hlai)** opened **[SPR-3045](https://jira.spring.io/browse/SPR-3045?redirect=false)** and commented  inside the org.springframework.samples.petclinic.webAddOwnerForm.onSubmit method the owner.getId() is always null!      protected ModelAndView onSubmit(Object command) throws ServletException {     	Owner owner = (Owner) command;     	// delegate the insert to the Business layer     	getClinic().storeOwner(owner);     	return new ModelAndView(getSuccessView(), ""ownerId"", owner.getId());     }  in org.springframework.samples.petclinic.jpa.EntityManagerClinic      public void storeOwner(Owner owner) throws DataAccessException {     	em.merge(owner);     }  when the owner object is unmanaged, invoking entityManager.merge( owner) return a different manage instance of owner, the id is assigned to the manage instance not the unmanage instance.  changed to      public void storeOwner(Owner owner) throws DataAccessException {         if ( owner.getId() == null ){              em.persist(owner);         } else {              em.merge(owner);         }  ---  ClinicController      public ModelAndView ownerHandler(HttpServletRequest request, HttpServletResponse response) {     	Owner owner = this.clinic.loadOwner(ServletRequestUtils.getIntParameter(request, ""ownerId"", 0));     	if (owner == null) {     		return new ModelAndView(""findOwnersRedirect"");     	}     	return new ModelAndView().addObject(owner);     }  the clinic.loadOwner method only loads the owner, does not load the owner.pets and pet.visits therefore when the view owner.jsp reference owner.pets, and pet.visits, they are not shown, even though they exist in the DB, but did not get lazy load exception.  after configuring the OpenEntityManagerInViewFilter in web.xml the problem was resolved. This should be documented in the petclinic jpa docs.  ---  AddPetForm      protected Object formBackingObject(HttpServletRequest request) throws ServletException {     	Owner owner = getClinic().loadOwner(ServletRequestUtils.getRequiredIntParameter(request, ""ownerId""));     	Pet pet = new Pet();     	owner.addPet(pet);     	return pet;     }  the formBackingObject method adds a new pet to the owner object, which cause the pet object to be inserted to the DB, the next time the persistence context is flush, at this point most of the fields in the pet object is null, the flush result in null contraint exception. The flush was occur inside referenceData method, in getClinic().getPetTypes() resulting in null contraint exception.  changed the code as follows      protected Object formBackingObject(HttpServletRequest request) throws ServletException {     	Owner owner = getClinic().loadOwner(ServletRequestUtils.getRequiredIntParameter(request, ""ownerId""));     	Pet pet = new Pet();     	pet.setOwner( owner );     	return pet;     }  ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2007-01-17T13:33:34Z","2019-01-13T22:44:34Z"
"","7109","Hessian support broken with Resin 3.0.21 [SPR-2420]","**[Henric Larsson](https://jira.spring.io/secure/ViewProfile.jspa?name=matherbiatch)** opened **[SPR-2420](https://jira.spring.io/browse/SPR-2420?redirect=false)** and commented  The signature of:  com.caucho.hessian.server.HessianSkeleton.invoke() has changed between resin 3.0.19 to 3.0.21.  The following exception is thrown when using HessianServiceExporter:  21:30:13,024 ERROR [resin-tcp-connection-*:8080-21] org.springframework.web.servlet.DispatcherServlet - Could not complete request org.springframework.web.util.NestedServletException: Hessian skeleton invocation failed; nested exception is java.lang.NoSuchMethodError: com.caucho.hessian.server.HessianSkeleton.invoke(Lcom/caucho/hessian/io/HessianInput;Lcom/caucho/hessian/io/HessianOutput;)V java.lang.NoSuchMethodError: com.caucho.hessian.server.HessianSkeleton.invoke(Lcom/caucho/hessian/io/HessianInput;Lcom/caucho/hessian/io/HessianOutput;)V at org.springframework.remoting.caucho.HessianServiceExporter.handleRequest(HessianServiceExporter.java:91) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:44) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:723) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:663) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:394) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:358) at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:106) at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:173) at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:229) at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:274) at com.caucho.server.port.TcpConnection.run(TcpConnection.java:511) at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:516) at com.caucho.util.ThreadPool.run(ThreadPool.java:442) at java.lang.Thread.run(Thread.java:595)   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-13T07:38:38Z","2012-06-19T03:50:38Z"
"","7691","Bad link on springframework site [SPR-3005]","**[hector rovira](https://jira.spring.io/secure/ViewProfile.jspa?name=hrovira)** opened **[SPR-3005](https://jira.spring.io/browse/SPR-3005?redirect=false)** and commented  On the sub projects page:  http://www.springframework.org/sub-projects  the link to Spring BeanDoc is pointing at Spring OSGI   --- No further details from [SPR-3005](https://jira.spring.io/browse/SPR-3005?redirect=false)","closed","type: bug,","spring-projects-issues","2007-01-02T04:42:37Z","2007-02-24T12:20:46Z"
"","7452","configuring a SimpleUrlHandlerMapping through a schema [SPR-2764]","**[Harold Neiper](https://jira.spring.io/secure/ViewProfile.jspa?name=hneiper)** opened **[SPR-2764](https://jira.spring.io/browse/SPR-2764?redirect=false)** and commented  I was wondering if there was already schema support for SimpleUrlHandlerMapping so started searching before I did it myself.  Anyhow came across the fisheye site at this url: http://fisheye1.cenqua.com/browse/springframework/spring/src/org/springframework/web/servlet/config  And what I found interested me in that the ""extensible xml authoring"" was already there for this handler mapping type.  (Thinking to myself - sweet!) However, I am unable to find these files and schemas in the final release of 2.0.  Am I missing something or were they just not released or wont be released?  Thanks, Harold Neiper  ---  **Affects:** 2.0 final  **Issue Links:** - #6422 Add schema for web configuration (handler mappings) (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2006-10-26T07:09:59Z","2019-01-11T21:00:29Z"
"","7388","[url] handler mapping interceptor not being applied after moving to spring 2.0 [SPR-2700]","**[Harold Neiper](https://jira.spring.io/secure/ViewProfile.jspa?name=hneiper)** opened **[SPR-2700](https://jira.spring.io/browse/SPR-2700?redirect=false)** and commented  Switching from 1.2.7 to 2.0Final.  I have a url handler mapping that extends AbstractUrlHandlerMapping. And in my bean configuration I have an interceptor mapped to the ""interceptors"" property of that bean.  The interceptor extends HandlerInterceptorAdapter and implements the preHandle method returning either true or throws ModelAndViewDefiningException with a new **error** view specified if the users session or token is null.  Anyhow when using the 2.0 release the interceptor never seems to get applied.  I have stepped thru with debugging and threw in some outputs to the console to see if the preHandle was getting invoked but it was not.  The url handler mapping bean:  ---                                                                                                                                       The interceptor:  ---  public class SecurityInterceptor extends HandlerInterceptorAdapter {      private static final String AUTHORIZED_TOKEN_KEY = ""authorizedUserToken"";          public SecurityInterceptor() {}          public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)         throws Exception {         Authentication token = this.getAuthenticatedUser(request);              if ((token == null || !token.isAuthenticated())                  || (token != null && !(token.getSubject() instanceof Subject))) {             ModelAndView modelAndView = new ModelAndView(""SecurityNotLoggedInError"");             throw new ModelAndViewDefiningException(modelAndView);         } else {             return true;         }     }          public Authentication getAuthenticatedUser(HttpServletRequest request) {         HttpSession session = request.getSession(false);         if (session == null) {return null;}         return (Authentication)session.getAttribute(AUTHORIZED_TOKEN_KEY);     }         }  The url handler mapping:  ---  final public class SecurityUrlHandlerMapping extends AbstractUrlHandlerMapping {      private final Map urlMap = new HashMap();          /**      * Set a Map with URL paths as keys and handler beans as values.      * Convenient for population with bean references.      * Supports direct URL matches and Ant-style pattern matches.      * For syntax details, see the PathMatcher class.      * @param urlMap - map with URLs as keys and beans as values      * @see org.springframework.util.PathMatcher      */     public final void setUrlMap(Map urlMap) {         this.urlMap.putAll(urlMap);     }          /**      * Map URL paths to handler bean names.      * This the typical way of configuring this HandlerMapping.      * Supports direct URL matches and Ant-style pattern matches.      * For syntax details, see the PathMatcher class.      * @param mappings - properties with URLs as keys and bean names as values      * @see org.springframework.util.PathMatcher      */     public final void setMappings(Properties mappings) {         this.urlMap.putAll(mappings);     }          public void initApplicationContext() throws BeansException {         if (this.urlMap.isEmpty()) {             logger.info(""Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping"");         } else {             Iterator itr = this.urlMap.keySet().iterator();             while (itr.hasNext()) {                 String url = (String) itr.next();                 Object handler = this.urlMap.get(url);                 // prepend with slash if it's not present                 if (!url.startsWith(""/"")) {                     url = ""/"" + url;                 }                 registerHandler(url, handler);             }         }     }          /**      * Return the object this url is referring to allow access       * to a bean keyed by the url.      * @param beanName - the bean you are looking to return      * @return a Object to be cast to a bean of known type.      */     public Object getObjectMappedForBean(String beanName) {         Iterator iter = this.urlMap.keySet().iterator();         while (iter.hasNext()) {             String url = (String) iter.next();             if (url.equals(beanName)) {                 return this.urlMap.get(url);             }         }         return null;     }     }  And finally the testcase:  ---  public class DispatcherServletTestCase extends TestCase {      private DispatcherServlet rioDispatcherServlet;     private MockServletConfig servletConfig;           protected void setUp() throws Exception {         servletConfig = new MockServletConfig(new MockServletContext(), ""rio"");         rioDispatcherServlet = new DispatcherServlet();         rioDispatcherServlet.setContextClass(TestWebApplicationContext.class);         rioDispatcherServlet.init(servletConfig);     }          private ServletContext getServletContext() {         return servletConfig.getServletContext();     }              public void testNonAuthenticatedUserHasCorrectForwardedUrlAfterInterception() throws Exception {         MockHttpServletRequest request = new MockHttpServletRequest(getServletContext(), ""GET"", ""/getManifest.do"");         MockHttpServletResponse response = new MockHttpServletResponse();         HttpSession session = request.getSession();         rioDispatcherServlet.service(request, response);         assertTrue(""Not forwarded"", response.getForwardedUrl() != null);         assertEquals("""", ""/WEB-INF/jsp/SecurityNotLoggedInError.jsp"", response.getForwardedUrl());     }      }  ---  **Affects:** 2.0 final","closed","status: declined,","spring-projects-issues","2006-10-09T08:29:30Z","2019-01-13T22:45:44Z"
"","6949","Spring 2.0RC2 not backward compatible ? [SPR-2260]","**[Hanson Char](https://jira.spring.io/secure/ViewProfile.jspa?name=hanson.char)** opened **[SPR-2260](https://jira.spring.io/browse/SPR-2260?redirect=false)** and commented  Once I replace the 2.0 RC1 spring.jar with the one from 2.0 RC2, I got a NullPointerException.  (See stacktrace below)  Is this a compatibility bug ? It works fine with 2.0M4 and 2.0RC1 but not 2.0RC2.  Hanson  Caused by: org.springframework.beans.BeanInstantiationExcepti on: Could not instantiate bean class [org.springframework.context.support.ClassPathXmlAp plicationContext]: Constructor threw exception; nested exception is org.springframework.beans.factory.BeanCreationExce ption: Error creating bean with name 'afterInvocationDelayQueue' defined in class path resource [spring/tkzJmx.xml]: Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.BeanUtils.instantiateCla ss(BeanUtils.java:97) at org.springframework.beans.factory.support.SimpleIn stantiationStrategy.instantiate(SimpleInstantiatio nStrategy.java:78) at org.springframework.beans.factory.support.Construc torResolver.autowireConstructor(ConstructorResolve r.java:156) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.autowireConstructor(Abs tractAutowireCapableBeanFactory.java:548) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanFactory.java:352) ... 19 more Caused by: org.springframework.beans.factory.BeanCreationExce ption: Error creating bean with name 'afterInvocationDelayQueue' defined in class path resource [spring/tkzJmx.xml]: Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanFactory.java:402) at org.springframework.beans.factory.support.Abstract BeanFactory$1.getObject(AbstractBeanFactory.java:2 40) at org.springframework.beans.factory.support.DefaultS ingletonBeanRegistry.getSingleton(DefaultSingleton BeanRegistry.java:132) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:237) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:153) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.preInstantiateSingletons(Defaul tListableBeanFactory.java:254) at org.springframework.context.support.AbstractApplic ationContext.refresh(AbstractApplicationContext.ja va:337) at org.springframework.context.support.ClassPathXmlAp plicationContext.\(ClassPathXmlApplicationCon text.java:92) at org.springframework.context.support.ClassPathXmlAp plicationContext.\(ClassPathXmlApplicationCon text.java:77) at java.lang.reflect.Constructor.newInstance(Construc tor.java:494) at org.springframework.beans.BeanUtils.instantiateCla ss(BeanUtils.java:82) ... 23 more Caused by: java.lang.NullPointerException at org.springframework.core.annotation.AnnotationUtil s.getAnnotations(AnnotationUtils.java:41) at org.springframework.transaction.annotation.Annotat ionTransactionAttributeSource.findAllAttributes(An notationTransactionAttributeSource.java:60) at org.springframework.transaction.interceptor.Abstra ctFallbackTransactionAttributeSource.computeTransa ctionAttribute(AbstractFallbackTransactionAttribut eSource.java:138) at org.springframework.transaction.interceptor.Abstra ctFallbackTransactionAttributeSource.getTransactio nAttribute(AbstractFallbackTransactionAttributeSou rce.java:98) at org.springframework.transaction.interceptor.Transa ctionAttributeSourceAdvisor$TransactionAttributeSo urcePointcut.matches(TransactionAttributeSourceAdv isor.java:93) at org.springframework.aop.support.AopUtils.canApply( AopUtils.java:184) at org.springframework.aop.support.AopUtils.canApply( AopUtils.java:207) at org.springframework.aop.support.AopUtils.findAdvis orsThatCanApply(AopUtils.java:226) at org.springframework.aop.framework.autoproxy.Abstra ctAdvisorAutoProxyCreator.findEligibleAdvisors(Abs tractAdvisorAutoProxyCreator.java:67) at org.springframework.aop.framework.autoproxy.Abstra ctAdvisorAutoProxyCreator.getAdvicesAndAdvisorsFor Bean(AbstractAdvisorAutoProxyCreator.java:53) at org.springframework.aop.framework.autoproxy.Abstra ctAutoProxyCreator.postProcessAfterInitialization( AbstractAutoProxyCreator.java:244) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.applyBeanPostProcessors AfterInitialization(AbstractAutowireCapableBeanFac tory.java:282) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.initializeBean(Abstract AutowireCapableBeanFactory.java:884) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanFactory.java:396) ... 36 more   ---  **Affects:** 2.0 RC2  **Attachments:** - [tkzJmx.xml](https://jira.spring.io/secure/attachment/11791/tkzJmx.xml) (_2.28 kB_)","closed","in: core,","spring-projects-issues","2006-07-08T11:02:44Z","2012-06-19T03:52:29Z"
"","7063","Incorrect tool annotation in spring-util.xsd [SPR-2374]","**[Hans Gilde](https://jira.spring.io/secure/ViewProfile.jspa?name=hgilde)** opened **[SPR-2374](https://jira.spring.io/browse/SPR-2374?redirect=false)** and commented  The definition of the ""set"" tag in org/springframework/beans/factory/xml/spring-util.xsd has the following snippet:        which should probably be         ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-08-01T10:16:26Z","2012-06-19T03:50:16Z"
"","7016","AbstractTemplateView and getContentType() method [SPR-2327]","**[Hamster](https://jira.spring.io/secure/ViewProfile.jspa?name=hamster)** opened **[SPR-2327](https://jira.spring.io/browse/SPR-2327?redirect=false)** and commented  I've been trying to use spring with jboss portal. I've configured velocityResolver and velocityConfigurer, I've configured ViewRendererServlet and found that in AbstractTemplateView there is code:      private static boolean responseGetContentTypeAvailable;          static {     	// Determine whether the Servlet 2.4 ServletResponse.getContentType method     	// is available.     	try {     		ServletResponse.class.getMethod(""getContentType"", new Class[] {});     		responseGetContentTypeAvailable = true;     	}     	catch (NoSuchMethodException ex) {     		responseGetContentTypeAvailable = false;     	}     }  http://springframework.cvs.sourceforge.net/springframework/spring/src/org/springframework/web/servlet/view/AbstractTemplateView.java?revision=1.13&view=markup  However in JBoss Portal there is: public String getContentType() { throw new UnsupportedOperationException(""Not specified by spec""); }  http://fisheye.labs.jboss.com/viewrep/JBoss/jboss-portal/portlet/src/main/org/jboss/portal/portlet/impl/jsr168/DispatchedHttpServletResponse.java?r=1.1  Shouldn't spring code tries to call getContentType when found and handle other exceptions?  I know that I can reimplement my templte view however it would be still good if we could use as much as possible out of the box.   ---  **Affects:** 2.0 RC2, 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-07-19T10:19:49Z","2012-06-19T03:51:20Z"
"","7046","Website documentation look & feel - possible issue [SPR-2357]","**[Gwyn Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=gwynevans)** opened **[SPR-2357](https://jira.spring.io/browse/SPR-2357?redirect=false)** and commented  Hi, When I compare the results of my bookmarked doc url (http://www.springframework.org/docs/reference/index.html) with the current URL on the web-site (http://static.springframework.org/spring/docs/1.2.x/reference/index.html), the new 'official' one seems very plain - is this intended or is the latter missing some CSS definitions or similar?  /Gwyn    --- No further details from [SPR-2357](https://jira.spring.io/browse/SPR-2357?redirect=false)","closed","status: declined,","spring-projects-issues","2006-07-26T21:23:42Z","2019-01-12T16:29:00Z"
"","6917","Exception when configuring advice using XSD tx:advice [SPR-2227]","**[Gunnar Wagenknecht](https://jira.spring.io/secure/ViewProfile.jspa?name=gunnar@wagenknecht.org)** opened **[SPR-2227](https://jira.spring.io/browse/SPR-2227?redirect=false)** and commented  The following exception is thrown when configuring an advice using the following snippet. Note that the snippet was taken nearly unmodified from the documentation.                	     		     		     		     		     	       org.springframework.core.ConstantException: Field 'PROPAGATION_' not found in class [org.springframework.transaction.TransactionDefinition] at org.springframework.core.Constants.asObject(Constants.java:142) at org.springframework.core.Constants.asNumber(Constants.java:113) at org.springframework.transaction.support.DefaultTransactionDefinition.setPropagationBehaviorName(DefaultTransactionDefinition.java:120) at org.springframework.transaction.config.TxAdviceBeanDefinitionParser.parseAttributes(TxAdviceBeanDefinitionParser.java:96) at org.springframework.transaction.config.TxAdviceBeanDefinitionParser.doParse(TxAdviceBeanDefinitionParser.java:77) at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:35) at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:45) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:78) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1084) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:93) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:486) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:386) ... 42 more    ---  **Affects:** 2.0 RC1","closed","in: core,","spring-projects-issues","2006-07-02T02:45:39Z","2019-01-12T16:29:07Z"
"","7662","Multiple singleton bean dependending on proxied prototype bean not supported [SPR-2976]","**[Guillaume Duchesneau](https://jira.spring.io/secure/ViewProfile.jspa?name=gduchesneau)** opened **[SPR-2976](https://jira.spring.io/browse/SPR-2976?redirect=false)** and commented  Multiple singleton beans depending on a proxied (AOP) prototype bean definition is not supported.  When trying to do that, the bean factory throws an exception.  Here is how to reproduce:  application context file:                     	                    	                              	          	       Java code behind this application context:  // Service interface is used to define ""ServicePointcut"" public interface Service { void doSomething(); }  // ""Service"" bean: public class ServiceBean implements Service { public void doSomething() { System.out.println(""Doing something..."");		 } }  // ""ServiceDependent1"" bean: public class ServiceDependent1 { private Service service;      public ServiceDependent1(Service pService)     {     	service = pService;     }  }  // ""ServiceDependent2"" bean: public class ServiceDependent2 { private Service service;      public ServiceDependent2(Service pService)     {     	service = pService;     }  }  // ""ServiceInterceptor"" bean: import org.aopalliance.intercept.MethodInterceptor; import org.aopalliance.intercept.MethodInvocation;  public class ServiceInterceptor implements MethodInterceptor { public Object invoke(MethodInvocation pArg0) throws Throwable { System.out.println(""Intercepting...""); return pArg0.proceed(); } }  Here is the full stack trace of the exception.  Maybe I am mistaken and this is not a bug, but something I am sure of is that the error message is incorrect when it says ""Bean with name 'Service' has been injected into other beans [ServiceDependent1] in its raw version as part of a circular reference"" because bean [ServiceDependent1] does not receive a raw version of bean [Service] - it received a proxied one and I am  pretty sure as well that there is no circular reference there....  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ServiceDependent2' defined in class path resource [spring/config.xml]: Cannot resolve reference to bean 'Service' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'Service': Bean with name 'Service' has been injected into other beans [ServiceDependent1] in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example. Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'Service': Bean with name 'Service' has been injected into other beans [ServiceDependent1] in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example. at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:424) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:248) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:329) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:97) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:684) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:622) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:381) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:140) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:273) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:346) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.xyz.Main.main(Main.java:13)   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-23T04:39:09Z","2012-06-19T03:50:03Z"
"","7373","DataFieldMaxValueIncrementer using HsqlDb sequence [SPR-2685]","**[Guillaume Bilodeau](https://jira.spring.io/secure/ViewProfile.jspa?name=spiff)** opened **[SPR-2685](https://jira.spring.io/browse/SPR-2685?redirect=false)** and commented  HsqlDb 1.8 now supports sequences, though using a slightly different syntax than Oracle.  Here's an implementation of the DataFieldMaxValueIncrementer interface that leverages this new feature - I thought it could be useful to include in the platform to complement the existing set of incrementers.   ---  **Attachments:** - [HsqlSequenceMaxValueIncrementer.java](https://jira.spring.io/secure/attachment/12437/HsqlSequenceMaxValueIncrementer.java) (_1.08 kB_) - [HsqlSequenceMaxValueIncrementer.java](https://jira.spring.io/secure/attachment/12012/HsqlSequenceMaxValueIncrementer.java) (_978 bytes_)","closed","type: enhancement,","spring-projects-issues","2006-10-05T17:32:11Z","2012-06-19T03:50:25Z"
"","7273","Strange behaviour in Spring AOP when calling proceed() a second time in a loop in an around advice (different to AspectJ beaviour) [SPR-2584]","**[Guido Schmutz](https://jira.spring.io/secure/ViewProfile.jspa?name=gschmutz)** opened **[SPR-2584](https://jira.spring.io/browse/SPR-2584?redirect=false)** and commented  Description of the scenario:  I've created a test case to investigate a strange behaviour I had with an exception handler around advice, which is in front of the Spring TransactionInterceptor. The idea is to implement a retry functionality, which reruns the same service method again, if a retryable exception has been raised by the service. In that scenario, I wanted the exception handler aspect to be the first in the interceptor chain, so the transaction gets rolled back by the retryable exception and a new one is started when retrying the service.  Test aspect:  so I have tried to implement the scenario in a small test case, this is the aspect, the first advice is the retry handler and the second one simulates the transaction management.  ---  `@Aspect` public class RetryAspect {      @Pointcut(""execution(public * Main.*(..))"")     public void execOfPublicMethod() {     }          /**      * Retry Advice      */     @Around(""execOfPublicMethod()"")     public Object retry(ProceedingJoinPoint jp) throws Throwable {     	boolean retry = true;     	Object o = null;          	while (retry) {     		try {     			retry = false;     			o = jp.proceed();     		} catch (RetryableException re) {     			retry = true;     		}     	}          	return o;     }          /**      * Just simulating TransactionInterceptor, could be anything else      */     @Around(""execOfPublicMethod()"")     public Object transaction(ProceedingJoinPoint jp) throws Throwable {     	Object o = null;          	System.out.println(""starting transaction ....."");          	try {     		o = jp.proceed();     	} catch (RetryableException e) {     		System.out.println(""rolback transaction .... "");     		throw e;     	}          	System.out.println(""committing transaction ....."");     	return o;     }  }  ---  When I use this with SpringAOP and the service method throws an RetryableException once and the second time it finishes successfully, then I get this on the console:  ---  starting transaction ..... I'm in the service now .... .... about to throw a RetryableException ... rolback transaction .... I'm in the service now ....  ---  If I switch to AspectJ and weave the aspect at at compile-time, then I get the expected behavior:  ---  starting transaction ..... I'm in the service now .... .... about to throw a RetryableException ... rolback transaction .... starting transaction ..... I'm in the service now .... committing transaction .....  ---  Tested with Spring RC3 and a 1 week-old RC4.  There is also an active thread on the AOP Spring Forum: http://forum.springframework.org/showthread.php?t=29120  ---  **Affects:** 2.0 RC3  **Attachments:** - [aop-springaop-and-retry.zip](https://jira.spring.io/secure/attachment/11954/aop-springaop-and-retry.zip) (_10.42 kB_)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2006-09-13T20:07:41Z","2019-01-13T08:53:37Z"
"","7697","ReflectiveMethodInvocation would benefit from a .equals() implementation [SPR-3011]","**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[SPR-3011](https://jira.spring.io/browse/SPR-3011?redirect=false)** and commented  I am trying to create advice in which I would compare a MethodInvocation to previous MethodInvocations to see if I have previously invoked the same method with the same arguments.  Since there is no .equals() implementation for ReflectiveMethodInvocation, I must verify that externally.  However, it seems logical that two invocations on the same object with the same arguments should be equal.  So, I suggest that ReflectiveMethodInvocation add:  /** * Returns \true\ iff the invokers are the same object, the * methods satisfy \.equals()\ and the argument arrays are * equal. *  * `@see` java.util.Arrays#equals(Object[], Object[]) * `@see` java.lang.Object#equals(java.lang.Object) * `@author` Gregory Kick   */   public boolean equals(Object obj) {   if (obj instanceof MethodInvocation ) {   MethodInvocation invocation = (MethodInvocation ) obj;   if ((invocation.getThis() == target) && invocation.getMethod().equals(method)   && Arrays.equals(invocation.getArguments(), arguments)) {   return true;   }   }   return false;   }  (this would have been a patch, but no cvs at the moment)   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-03T14:53:21Z","2008-01-07T03:47:51Z"
"","7495","EhcacheFactoryBean breaks for caches that do not extend net.sf.ehcache.Cache [SPR-2808]","**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[SPR-2808](https://jira.spring.io/browse/SPR-2808?redirect=false)** and commented  Since the cache field of the EhcacheFactoryBean is of type Cache instead of the interface Ehcache, when a cache has been registered in the CacheManager that does not extend Cache the factory will fail.  Specifically, the portion of afterPropertiesSet():  if (this.cacheManager.cacheExists(this.cacheName)) { if (logger.isDebugEnabled()) { logger.debug(""Using existing EHCache cache region '"" + this.cacheName + ""'""); } this.cache = this.cacheManager.getCache(this.cacheName); }  will throw a ClassCastException because it uses getCache() instead of getEhcache().  An excerpt from one such exception:  java.lang.ClassCastException: net.sf.ehcache.constructs.blocking.SelfPopulatingCache cannot be cast to net.sf.ehcache.Cache  The solution would be to refactor the EhcacheFactoryBean class to use the Ehcache interface instead.  This may require some refactoring in classes that cast the result of getBean() to Cache (to be more explicitly type safe), but it shouldn't break because the implementations wouldn't change.   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-11-08T04:11:59Z","2012-06-19T03:50:22Z"
"","7493","Modify EhcacheFactoryBean to better suit decorated caches [SPR-2806]","**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[SPR-2806](https://jira.spring.io/browse/SPR-2806?redirect=false)** and commented  Currently, EhCacheFactoryBean is setup to generate the default Cache implementation.  An easy way to support decorated caches ( http://ehcache.sourceforge.net/documentation/cache_decorators.html ) would be to extend the EhCacheFactoryBean to apply the decoration.  While it is currently possible (via getObject(), casting and overriding some methods), this process would be made easier by: -exposing the cache field or getter/setter as protected -exposing the cacheManager filed or getter/setter as protected -refactoring the cache field to be of type Ehcache (the parent interface) instead of Cache  These changes would allow a factory subclass to apply the decorator via something like the following for an UpdatingSelfPopulatingCache:      /**      * @see org.springframework.cache.ehcache.EhCacheFactoryBean#afterPropertiesSet()      */     public void afterPropertiesSet() throws CacheException, IOException     {         super.afterPropertiesSet();         assert (this.updatingCacheEntryFactory != null) : ""updatingCacheEntryFactory was not set"";         decoratedCache = new UpdatingSelfPopulatingCache(getCache(),                 this.updatingCacheEntryFactory);         getCacheManager().replaceCacheWithDecoratedCache(cache, decoratedCache);         setCache(decoratedCache());     }    ---  **Affects:** 2.0 final, 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-07T07:49:14Z","2019-01-11T21:32:47Z"
"","7410","PROPAGATION_NOT_SUPPORTED updates enlisted into PROPAGATION_REQUIRES_NEW transaction [SPR-2722]","**[Greg Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=gtaylor)** opened **[SPR-2722](https://jira.spring.io/browse/SPR-2722?redirect=false)** and commented  We are integrating Spring into an existing system.  Since some of the code in the legacy system does manual programmatic transaction management, we need to suspend the Spring transaction in order to call it.  However, we also need to be able to invoke transactional Spring services from within this legacy context, so in certain edge cases we will have transactional stuff invoked from code where no Spring transaction is active, yet database updates will be necessary.  To do this, we first suspend the Spring transaction using PROPAGATION_NOT_SUPPORTED.  Then, we get a connection from the pool, do some straight JDBC and then programmatically commit/rollback and release the connection.  This all works fine, however, if this code also needs to invoke a Spring-enabled transactional service, the JDBC work done within the context of the PROPAGATION_NOT_SUPPORTED 'transaction' gets enlisted and committed by the transactional service.  This happens if either PROPAGATION_REQUIRES_NEW or PROPAGATION_REQUIRED is used.  I have a junit test case which illustrates this nicely and I will attach it to this issue.   ---  **Affects:** 1.2.6, 1.2.7, 2.0 final  **Attachments:** - [TxPropagationTest.zip](https://jira.spring.io/secure/attachment/12035/TxPropagationTest.zip) (_8.14 kB_)  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-10-17T02:22:52Z","2012-06-19T03:50:48Z"
"","7427","Allow org.springframework.util.StopWatch to accept nested start/stop calls. [SPR-2739]","**[Greg Matthews](https://jira.spring.io/secure/ViewProfile.jspa?name=gmatthews)** opened **[SPR-2739](https://jira.spring.io/browse/SPR-2739?redirect=false)** and commented  Allow org.springframework.util.StopWatch to accept nested start/stop calls, and that doing a prettyPrint of a StopWatch shows the results in a nested fashion.  e.g.  Task 1 Task 1.1 Task 1.2 Task 1.2.1 Task 2 Task 3  It's already easy enough to create a HandlerInterceptor to provide a ThreadLocal StopWatch per request, but this is of limited use if you then sprinkle various start/stop calls through application code.  If you're going to use StopWatch, its probably reasonable to expect you might want to profile a system function and capture metrics through a vertical code slice, where there are bound to be nested calls to start/stop.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-22T11:37:08Z","2012-06-19T09:37:22Z"
"","7286","Spring 2.0 RC4 does not use the proper constructor for EHCache 1.2 [SPR-2597]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-2597](https://jira.spring.io/browse/SPR-2597?redirect=false)** and commented  Per Costin's comment: ""the EhCacheFactoryBean has to be updated to support the latest releases of EhCache""  http://forum.springframework.org/showthread.php?p=77572#post77572  The existing EhCacheFactoryBean does work with 1.2.3 but it does not work with 1.1 which I originally had. Something between RC3 and RC4 broke the ability to use ehcache 1.1 and now Spring requires 1.2+.    ---  **Affects:** 2.0 RC4  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2006-09-17T23:47:06Z","2012-06-19T03:51:01Z"
"","7008","(Reloadable)ResourceBundleMessageSource should trim whitespaces from bundle basename [SPR-2319]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-2319](https://jira.spring.io/browse/SPR-2319?redirect=false)** and commented  http://forum.springframework.org/showthread.php?t=27066  I have been using the ""ReloadableResourceBundleMessageSource"" to load my message sources but it seems recently this has stopped working..  What I had before was:  Code: (NOT WORKING) \ \ \ \com/vodori/dolce/web/resources/applicationResources\ \ \ \ \ \  but that was not finding any of my messages and so just to see what would happen, I switched it to the normal ""ResourceBundleMessageSource"" and it's working just fine.. So this snip of code does work:  Code: (WORKING)                                             com/vodori/dolce/web/resources/applicationResources                                        ---  **Affects:** 2.0 RC2  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/12405/patch.txt) (_1.35 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-18T07:54:47Z","2019-01-11T18:32:06Z"
"","6985","Cannot use hibernate to save/update session scoped beans [SPR-2296]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-2296](https://jira.spring.io/browse/SPR-2296?redirect=false)** and commented  http://forum.springframework.org/showthread.php?t=26820  Well I found my problem... What I was doing was creating a session scoped bean for an ""Order"" which was serving as a reference which had the user's current cart.. This allowed me to easily do real-time cart displays on any page by using the container to inject the order object into any of my controllers. Anytime I tried to save the order, from the session scoped bean, then the error occurred.  What I have is: Code:  \  \  It makes sense to me that when I try to save the order in hibernate it is getting a proxied Order object since in essence, that bean, which is session scoped is a proxy. However, it seems odd to me from an architecture standpoint that I cannot create session scoped beans off of model objects, use them in my controllers or business logic as needed and make calls to save them via Hibernate.  I have not tried Hibernate 3.2CR2 yet. Perhaps this will fix the issue but I am a little wary about moving to a development version of Hibernate at this point.  It seems that I cannot use any session scoped beans if I plan to ever do any save or updates on them in Hibernate which really brings the utility of session scoped beans down a lot for me.    ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-13T02:06:21Z","2012-06-19T03:52:22Z"
"","6978","The  tag does not bind to command objects set in a webflow FormAction [SPR-2289]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-2289](https://jira.spring.io/browse/SPR-2289?redirect=false)** and commented  See Forum for description http://forum.springframework.org/showthread.php?t=26834   ---  **Affects:** 2.0 RC2  **Attachments:** - [app.zip](https://jira.spring.io/secure/attachment/11818/app.zip) (_66.57 kB_) - [sopraffina.com-web.war.zip](https://jira.spring.io/secure/attachment/11817/sopraffina.com-web.war.zip) (_8.40 MB_)","closed","type: bug,","spring-projects-issues","2006-07-12T07:24:11Z","2019-01-13T22:47:05Z"
"","7367","AbstractTransactionalSpringContextTests.onTearDownAfterTransaction() is not called if  endTransaction() is called in the test method [SPR-2678]","**[Gordon Cosgrave](https://jira.spring.io/secure/ViewProfile.jspa?name=mrgcos)** opened **[SPR-2678](https://jira.spring.io/browse/SPR-2678?redirect=false)** and commented  In 2.0M3 and previous releases, onTearDownInTransaction() and onTearDownAfterTransaction() were being invoked regardless of whether endTransaction() was eagerly called from a test method. Since 2.0RC3 neither method is being invoked which is causing failures in my tests as my custom testDown method is not being called. Shouldn't onTearDownAfterTransaction() always be invoked by AbstractTransactionalSpringContextTests regardless of the transaction status?   ---  **Affects:** 2.0 RC3, 2.0 RC4, 2.0 final","closed","in: core,","spring-projects-issues","2006-10-04T20:17:55Z","2012-06-19T03:50:49Z"
"","7358","LocalSessionFactoryBean initialization fails with  ""java.lang.IllegalStateException: SessionFactory not initialized yet "" when schemaUpdate is set to true [SPR-2669]","**[Gordon Cosgrave](https://jira.spring.io/secure/ViewProfile.jspa?name=mrgcos)** opened **[SPR-2669](https://jira.spring.io/browse/SPR-2669?redirect=false)** and commented  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionManager' defined in class path resource [testApplicationContext.xml]: Cannot resolve reference to bean 'sessionFactory' while setting bean property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [testApplicationContext.xml]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: SessionFactory not initialized yet Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [testApplicationContext.xml]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: SessionFactory not initialized yet Caused by: java.lang.IllegalStateException: SessionFactory not initialized yet at org.springframework.orm.hibernate3.AbstractSessionFactoryBean.getSessionFactory(AbstractSessionFactoryBean.java:175) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.updateDatabaseSchema(LocalSessionFactoryBean.java:918) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:762) at org.springframework.orm.hibernate3.AbstractSessionFactoryBean.afterPropertiesSet(AbstractSessionFactoryBean.java:131) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1062) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1029) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:420) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:955) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:729) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:416) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:290) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at SchemaUpdater.main(SchemaUpdater.java:13)  ---  **Affects:** 2.0 final  **Issue Links:** - #7387 LocalSessionFactoryBean when schemaUpdate is true fail to build session factory (_**""is duplicated by""**_) - #7611 Can't use the schemaupdate=true functionality in Spring 2.0.1 (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2006-10-04T00:23:41Z","2019-01-11T21:17:14Z"
"","7573","Poor performance creating prototype beans [SPR-2885]","**[Gonne Martens](https://jira.spring.io/secure/ViewProfile.jspa?name=gonne)** opened **[SPR-2885](https://jira.spring.io/browse/SPR-2885?redirect=false)** and commented  I have also noticed a high performance degradation from Spring 1.2.8 to Spring 2.0.1 with heavy use of prototype beans. I have attached a very simple test application which creates 100,000 prototype beans without multithreading and generated the following results:  Spring 1.2.8       2437ms Spring 2.0 RC1 2813ms Spring 2.0 RC2 3015ms Spring 2.0 RC3 4515ms Spring 2.0 RC4 4532ms Spring 2.0          4594ms Spring 2.0.1       4788ms  Profiling shows that about 30% of each bean creation is spent in the constructor of org.springframework.beans.SimpleTypeConverter called by the constructor of org.springframework.beans.factory.support.BeanDefinitionValueResolver during ...applyPropertyValues(). I think the main reason for the performance loss is the registration of custom editors in the constructor of BeanDefinitionValueResolver added in revision 1.12:      public BeanDefinitionValueResolver(AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition)          {             this.beanName = beanName;     	this.beanDefinition = beanDefinition;     	this.beanFactory = beanFactory;     	beanFactory.registerCustomEditors(this.typeConverter);     }  Please look at the screenshot of my profiling session. We can not upgrade our production system from Spring 1.2.8 to Spring 2.0.1, because the load of our system would increase to high. I am willing to help, but I need comments from the architects.  This is a duplicate of #7460 with a changed issue type and a higher priority, because of missing feedback so far.  ---  **Affects:** 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1  **Attachments:** - [screenshot profiling session.jpg](https://jira.spring.io/secure/attachment/12246/screenshot+profiling+session.jpg) (_293.05 kB_) - [Spring2TestBean.java](https://jira.spring.io/secure/attachment/12247/Spring2TestBean.java) (_672 bytes_)  **Issue Links:** - #7460 Poor performance creating non-singleton beans with many threads (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2006-11-27T20:58:39Z","2019-01-12T16:51:53Z"
"","7550","Poor performance creating non-singleton beans with many threads CLONE to SPR-2772 [SPR-2863]","**[Gonne Martens](https://jira.spring.io/secure/ViewProfile.jspa?name=gonne)** opened **[SPR-2863](https://jira.spring.io/browse/SPR-2863?redirect=false)** and commented  When many threads attempt to create non-singleton beans simultaneously Spring's performance is extremely poor. Spring 2.0 also seems to be worse than Spring 1.2.8 in this regard. I suspect its due to all the synchronized blocks in the BeanFactory.  I have a heavily threaded server application, which at a certain point creates a bunch of nested non-singleton beans via a Spring lookup-method. While running load tests I noticed this step was a bottleneck in our application. I wrote a small test application which created a number of threads which all tried to create a number of non-singleton beans. The results are below:  ``` Spring 2.0 ========== singleton=""false"" ----------------- 08188ms 1 Thread, 10000 bean creations per thread (10000 total) 15656ms 10 Threads, 1000 bean creations per thread (10000 total) 24703ms 100 Threads, 100 bean creations per thread (10000 total) 27235ms 1000 Threads, 10 bean creations per thread (10000 total)  singleton=""true"" ---------------- 01110ms 1 Thread, 10000 bean creations per thread (10000 total) 01266ms 10 Threads, 1000 bean creations per thread (10000 total) 01281ms 100 Threads, 100 bean creations per thread (10000 total) 01515ms 1000 Threads, 10 bean creations per thread (10000 total)   Spring 1.2.8 ============ singleton=""false"" ----------------- 04797ms 1 Thread, 10000 bean creations per thread (10000 total) 05719ms 10 Threads, 1000 bean creations per thread (10000 total) 13000ms 100 Threads, 100 bean creations per thread (10000 total) 17922ms 1000 Threads, 10 bean creations per thread (10000 total) ```  You can see that for the same number of bean creations, the time taken increases rapidly as you increase the number of threads. Obviously there is some overhead in managing the many threads, but not enough to account for what is seen here. Its apparent that Spring 2.0 is also 60-70% slower than 1.2.8 for this task, even with a single thread.   ---  **Affects:** 1.2.8, 2.0 final","closed","in: core,","spring-projects-issues","2006-11-22T02:42:36Z","2019-01-11T21:35:37Z"
"","6998","Add (Request)ParameterHandlerMapping class to Spring MVC [SPR-2309]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2309](https://jira.spring.io/browse/SPR-2309?redirect=false)** and commented  I have found the RequestParameterHandlerMapping class, defined on p. 92-93 of APress' Expert Spring MVC and Web Flow book, to be very useful for my work.  I'm inclined to recommend adding a class like this one to the Spring 2.0 Core.  (Spring already has a very similar ParameterHandlerMapping[1] in 2.0, but that is only for portlets, not Spring MVC.)  Here is my use case for it:  I have a report generation system that uses a ""report"" parameter to determine which report to generate: https://www.mycompany.com/ReportGen/login?report=ReportA https://www.mycompany.com/ReportGen/login?report=ReportB https://www.mycompany.com/ReportGen/login?report=ReportC ...  Previously, I mapped the ""login"" URL via SimpleURLHandlerMapping to a (SimpleFormController subclass) loginController, which internally did hardcoded validation to make sure that the report parameter was valid (e.g., raise an exception if report=doesntexist, but for valid report param values redirect after login to a report-specific controller to collect the report's filtering criteria.)  This however, required me to keep modifying my loginController class everytime a report was added or removed.  But by using RequestParameterHandlerMapping I can now map the parameters ReportA, ReportB, ReportC, etc., individually to loginController in my web config file.  With this design, report=doesntexist will never activate loginController to begin with so I can just return an error page in that case.  It seems like a cleaner design.  Thanks, Glen  [1] http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/web/portlet/handler/ParameterHandlerMapping.html   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-07-17T05:23:22Z","2012-06-19T03:52:43Z"
"","7526","UJACView: Generating PDF output, using UJAC [SPR-2839]","**[Gianni Antini](https://jira.spring.io/secure/ViewProfile.jspa?name=gabby)** opened **[SPR-2839](https://jira.spring.io/browse/SPR-2839?redirect=false)** and commented  UJAC is a useful framework, built on iText, for generating PDF using xml template file and a EL-style language for scripting. I've realized this view class that allow UJAC-Spring integration.   ---  **Attachments:** - [UJACView.java](https://jira.spring.io/secure/attachment/12215/UJACView.java) (_2.50 kB_)","closed","type: enhancement,","spring-projects-issues","2006-11-14T19:48:32Z","2012-06-19T09:37:33Z"
"","7274","Problem loading application.xml when running with securitymanager [SPR-2585]","**[Gernot Pfingstl](https://jira.spring.io/secure/ViewProfile.jspa?name=gernot)** opened **[SPR-2585](https://jira.spring.io/browse/SPR-2585?redirect=false)** and commented  We are using spring (2.0 RC2 and RC3) and struts 1.2.9 with org.springframework.web.struts.DelegatingRequestProcessor and org.springframework.web.struts.ContextLoaderPlugIn \ \ \ and tomcat 5.5.17 If we run tomcat with security manager, we get some security exceptions from spring while it is loading its applicationContext.xml: (a) spring tries to read system property ""user.dir"", which is typically ""CATALINA_BASE/bin"" (b) spring tries to read this directory There is no reason (in a web application) to read ""user.dir"", if some web application wants to read this property or this directory, this is an issue and may be a security hole. There's no need for spring to read this directory (if spring is used in a web application)!  The error occurs in (RC3): org.springframework.beans.factory.xml.ResourceEntityResolver.resolveEntity(ResourceEntityResolver.java:76): String systemRootUrl = new File("""").toURL().toString();  The stack trace: java.security.AccessControlException: access denied (java.util.PropertyPermission user.dir read) at java.security.AccessControlContext.checkPermission(AccessControlContext.java:264) at java.security.AccessController.checkPermission(AccessController.java:427) at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1285) at java.lang.System.getProperty(System.java:627) at java.io.Win32FileSystem.getUserPath(Win32FileSystem.java:295) at java.io.Win32FileSystem.resolve(Win32FileSystem.java:311) at java.io.File.getAbsolutePath(File.java:473) at java.io.File.toURL(File.java:594) at org.springframework.beans.factory.xml.ResourceEntityResolver.resolveEntity(ResourceEntityResolver.java:76) at com.sun.org.apache.xerces.internal.util.EntityResolverWrapper.resolveEntity(EntityResolverWrapper.java:148) at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.resolveEntity(XMLEntityManager.java:701) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.resolveDocument(XMLSchemaLoader.java:599) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.findSchemaGrammar(XMLSchemaValidator.java:2454) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1807) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:705) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:330) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl$NSContentDispatcher.scanRootElementHook(XMLNSDocumentScannerImpl.java:779) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(XMLDocumentFragmentScannerImpl.java:1794) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:368) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:834) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:148) at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:250) at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:292) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:360) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:335) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.struts.ContextLoaderPlugIn.createWebApplicationContext(ContextLoaderPlugIn.java:355) at org.springframework.web.struts.ContextLoaderPlugIn.initWebApplicationContext(ContextLoaderPlugIn.java:296) at org.springframework.web.struts.ContextLoaderPlugIn.init(ContextLoaderPlugIn.java:225) at org.apache.struts.action.ActionServlet.initModulePlugIns(ActionServlet.java:869) at org.apache.struts.action.ActionServlet.init(ActionServlet.java:336) at javax.servlet.GenericServlet.init(GenericServlet.java:211) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:243) at java.security.AccessController.doPrivileged(Native Method)   ---  **Affects:** 2.0 RC2, 2.0 RC3","closed","in: core,","spring-projects-issues","2006-09-14T07:25:21Z","2012-06-19T03:50:11Z"
"","7189","Allow  to set property value to id of bean [SPR-2500]","**[George Licquorice](https://jira.spring.io/secure/ViewProfile.jspa?name=glicquor)** opened **[SPR-2500](https://jira.spring.io/browse/SPR-2500?redirect=false)** and commented  It is often useful to set a property of a bean to the ID of the bean.  For example, the bean might have an ID property and when it is used with Spring, it would make sense for this to be set to the bean ID.  This can currently be done by using \ in the following way;  \ ... (set common properties) \ \ \\\ ... \ \ \\\ ... \  This is quite ugly however since each bean definition requires the id to be explicitly set.  I could make my bean class implement BeanNameAware and set the id based on this.  While this avoids having to set the property in the config, it ties my bean class to Spring.  An alternative option would be to make \ work without any attributes.  In this situation it would refer to the id of the current bean.  If this bean is the parent of another bean, it could resolve to the id of whatever the outermost bean is.  The definitions above would become something like this;  \ \\\ ... \ \ ... \ \ ... \ This is much cleaner and the bean class doesn't need any knowledge of Spring.  ---  **Affects:** 2.0 RC2  **Issue Links:** - #12830 Evaluate 'idref' element and 'local' attribute in Spring 3.1","closed","type: enhancement,","spring-projects-issues","2006-08-28T13:39:35Z","2019-01-11T19:18:31Z"
"","7862","Type Collector Factory [SPR-3177]","**[Geoffrey Wiseman](https://jira.spring.io/secure/ViewProfile.jspa?name=diathesis)** opened **[SPR-3177](https://jira.spring.io/browse/SPR-3177?redirect=false)** and commented  I've often wanted to be able to collect all the types within the application context and inject them into something else.  This is often useful for things like listeners.  We've implemented something like this, but it might be useful for others:  import java.util.Collection; import java.util.HashSet; import java.util.Map; import java.util.Set;  import org.springframework.beans.BeansException; import org.springframework.beans.factory.FactoryBean; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware;  /** * A factory that collects all beans of a type and returns them in a collection. *  * `@author` Geoffrey Wiseman   */   public class SpringTypeCollectorFactory\ implements FactoryBean,   ApplicationContextAware   {   private ApplicationContext context;  private Class\ type;  private String prefix;  /** * Creates a factory that will return all beans of a certain type (including subclasses). *  * `@param` type the type to find and return   */   public SpringTypeCollectorFactory( Class\ type )   {   this.type = type;   }  /** * Creates a factory that will return all beans of a certain type (including subclasses) * whose bean name starts with the specified prefix. *  * `@param` type the type to find and return * `@param` prefix the prefix with which all bean names must start   */   public SpringTypeCollectorFactory( Class\ type, String prefix )   {   this.type = type;   this.prefix = prefix;   }  public Collection\ getObject() throws Exception { Map beans = context.getBeansOfType( type ); if( prefix == null ) { return beans.values(); } else { Set\ matches = new HashSet\(); for( Map.Entry entry : beans.entrySet() ) { if( entry.getKey().startsWith( prefix ) ) matches.add( entry.getValue() ); } return matches; } }  public Class getObjectType() { return Collection.class; }  public boolean isSingleton() { return true; }  public void setApplicationContext( ApplicationContext applicationContext ) throws BeansException { this.context = applicationContext; }  }   --- No further details from [SPR-3177](https://jira.spring.io/browse/SPR-3177?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-02-15T23:56:56Z","2012-06-19T09:37:23Z"
"","7420","Java coding conventions - don't use tab (\t) characters (open vote basket) [SPR-2732]","**[Geoffrey De Smet](https://jira.spring.io/secure/ViewProfile.jspa?name=ge0ffrey)** opened **[SPR-2732](https://jira.spring.io/browse/SPR-2732?redirect=false)** and commented  Please don't resolve or close this issue. Ignore it as long as it doesn't have a high number of votes - enough to start poundering about.  Spring currently uses a dialect of the java coding conventions, with a few minimal changes and one big change (the use of tab (t) chars). It's a pity Spring doesn't use the industry standard: the ""java conding conventions"", which are well though-out and highly documented at: http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html Especially the tab character gives problems in Notepad and Xref HTML's, for example: http://stage.inspiring.nl/springbuild/xref/org/springframework/beans/factory/BeanFactoryUtils.html Eclipse, Idea, NetBeans all work equally easy with or without tab characters.  At spring-richclient we had a (too) long discussion about which code conventions we should use, because we didn't know that Spring had already some conventions. The polls ended us with ""java conventions with 120 chars per line"", but then the spring conventions where added on springframework.org and we learned about them, so a small majority decided we should just follow Spring - and that it is Spring which should change if any changes are actually needed. It is a very good thing that Spring indeed has at least a convention - for consistency.  So if anybody that thinks that Spring would be better by using the ""java conventions"" (with 120 chars per line?), just vote here. Please don't start proposing other coding conventions here or other dialects on the ""java conventions"". Those are probably pointless discussions. Just vote if you agree, don't vote if you don't: it's a vote basket.   ---  **Affects:** 2.0 final  16 votes, 7 watchers","closed","has: votes-jira,","spring-projects-issues","2006-10-18T20:30:59Z","2014-05-14T09:28:34Z"
"","7374","Maven2: complete spring POM should depend on modules, instead of having a monolith jar [SPR-2686]","**[Geoffrey De Smet](https://jira.spring.io/secure/ViewProfile.jspa?name=ge0ffrey)** opened **[SPR-2686](https://jira.spring.io/browse/SPR-2686?redirect=false)** and commented  Problem in current situation: MyVeryCoolApp depends the complete spring and acegi, so it's dependency tree is: - org.springframework:spring:2.0 - org.acegisecurity:acegi:1.0.2   - org.springframework:spring-core:1.2.8 (transitive, non-optional dependency of acegi)   [a standard ""mvn site"" gives this wonderfull report btw]  So MyVeryCoolApp ends up having all spring core classes twice in it's classpath of a different version. That's bad, because it's hard to predict which one will be used.  Solution (as far as I can tell, Carlos Sanchez might have a better solution): - Make the complete spring pom non-optionally depend on all spring modules. - Verify that non of the modules has a non-optional dependency on something that should be optional for the complete spring. Exclude those required dependencies.    ---  **Affects:** 2.0 final","closed","status: declined,","spring-projects-issues","2006-10-05T19:14:30Z","2019-01-12T16:40:49Z"
"","7366","Spring-remoting POM should mark spring-web as optional [SPR-2677]","**[Geoffrey De Smet](https://jira.spring.io/secure/ViewProfile.jspa?name=ge0ffrey)** opened **[SPR-2677](https://jira.spring.io/browse/SPR-2677?redirect=false)** and commented  http://repo1.maven.org/maven2/org/springframework/spring-remoting/2.0/spring-remoting-2.0.pom doesn't mark spring-web as optional.  So I had to do this simple work-around:               org.springframework         spring-remoting         2.0                                       org.springframework                 spring-web                             Please fix for 2.0.1 :) (Impossible to fix for 2.0, since repo's are unalterable)   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-04T19:16:44Z","2012-06-19T03:50:22Z"
"","7490","Doc: Section 9, JTA and deployment inside/outside of container [SPR-2803]","**[Geir Hedemark](https://jira.spring.io/secure/ViewProfile.jspa?name=geir)** opened **[SPR-2803](https://jira.spring.io/browse/SPR-2803?redirect=false)** and commented  Section 9.2, sidebar ""Is an application server needed for transaction management?"" hints at the different deployment strategies possible with JTA.  This is an underdocumented field, and there is very little information available on the net.  I think the addition of a section describing how to deploy transactions in  - in junit/eclipse (tied to the integration testing section, and what this can and cannot help you test) - a standalone application with one data source - a standalone application with several data sources (and the limitations that will cause) - a web application with connection pools managed by a servlet container (tomcat?) - a standalone application with connection pools created locally, a JTA library (jotm) used locally, datasources wrapped in a XA-compliant wrapper - a web application with connection pools managed by a servlet container, a JTA library (jotm) instantiated in the servlet container, data sources wrapped by the servlet container. - a full-blown JTA solution, JNDI-based, with real XA-compliant drivers.   (I guess other deployment scenarios as well, but I really can't see those since they are not needed in my enviroment.)  I think this may be a good idea since there is a lot of confusion out there when it comes to JTA, XA, JNDI, what these technologies really do and how and when to tie them together with Spring.  I will be happy to help if that is needed, but I am not really much good at this.   ---  **Affects:** 2.0 final  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2006-11-05T19:23:37Z","2015-09-22T18:20:32Z"
"","7216","Section 11.2.3 in 2.0 Manual: Code does not compile [SPR-2527]","**[Geir Hedemark](https://jira.spring.io/secure/ViewProfile.jspa?name=geir)** opened **[SPR-2527](https://jira.spring.io/browse/SPR-2527?redirect=false)** and commented  The code examples in section 11.2.3 reads  RowMapper mapper = new RowMapper() ...  and  ParameterizedRowMapper mapper = new ParameterizedRowMapper() ...  Both RowMapper and ParameterizedRowMapper are interfaces. The above code won't compile without a concrete implementation of these interfaces. I guess such an implementation exists somewhere. I think the docs should mention how to get hold of this implementation.    ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-09-01T22:21:22Z","2012-06-19T03:50:32Z"
"","7869","Support child-parent-overrides in Hierarchical application context [SPR-3184]","**[Geert Jan Sterenborg](https://jira.spring.io/secure/ViewProfile.jspa?name=sterenb2)** opened **[SPR-3184](https://jira.spring.io/browse/SPR-3184?redirect=false)** and commented  Hi,  Currently we have a config-module for every specific implementation of our product. These config-modules contain our Spring configuration-files. So we have a lot of duplicate bean-configs.  We initialize the configuration files like so:  ---start of boot-strap.xml [CODE]\ \ \ \services/config-file.xml\ \ \ \[/CODE] ---end of boot-strap.xml  I'm trying to split these modules into a kernel-config-module (i.e. generic-config-modules) and several specific-config modules making use of the parent-child relationship.  The problem I'm running into is the following:  Generic config-file: [CODE] \ \ \  \ \ \  \[/CODE]  Bean A - uses bean C in generic config-file Bean B - uses bean A in generic config-file  Specific config-file:  [CODE]\ \ \[/CODE]  \  Bean A - overrides bean A in generic config-file so that it uses bean D (config: \....) Bean D - Some bean  And the boot-strap-files:  ---start of boot-strap-kernel.xml [CODE] \ \ \ \services/config-file-kernel.xml\ \ \ \[/CODE] ---end of boot-strap-kernel.xml  ---start of boot-strap-specific.xml [CODE]   \ \ \ \services/config-file.xml\ \ \ \\ \[/CODE] ---end of boot-strap-kernel.xml  The problem is that generic-bean B still uses the generic-bean A.  In order to use generic-bean B without having to include it in all specific-config-modules I could add a generic-config-file, include it in core-services and move bean B to this file:  ---start of boot-strap-specific.xml [CODE]   \ \ \ \services/config-file-kernel-shared.xml\ \services/config-file.xml\ \ \ \\ \[/CODE] ---end of boot-strap-kernel.xml  But what if I want to override bean B?  The alternative is to move bean B to the specific config-file. If there were other beans depending on B they would have to be moved (in this case duplicated) too.  Some forum-questions and issues regarding this matter all boil down to the fact that parent-contexts know nothing of their children.  I'm not entirely sure but I guess the goal is that bean-extension should compare to java class-extension. However since I'm going through the child-context to access bean B that is configured in the parent-context it wouldn't be completely illogic to be able to override the parent-definition.  It would be nice to have an extension that would allow to do something like this:  [CODE] \ \ \ \[/CODE]  The override tag should completely override bean A (in child-context as well as parent-context.)  I've posted this as a question on the forum (http://forum.springframework.org/showthread.php?t=34950), but perhaps it could be useful to others if it were included in the core.   --- No further details from [SPR-3184](https://jira.spring.io/browse/SPR-3184?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-02-18T17:45:59Z","2012-06-19T09:37:34Z"
"","7287","Dealing with Single PersistenceUnit in Multiple persistence.xml files [SPR-2598]","**[Gary Ip](https://jira.spring.io/secure/ViewProfile.jspa?name=gaplo)** opened **[SPR-2598](https://jira.spring.io/browse/SPR-2598?redirect=false)** and commented  Features request for dealing with Dealing with Single PersistenceUnit in Multiple persistence.xml files as stated in Spring forum. http://forum.springframework.org/showthread.php?t=29230  suggestion: 1. allow the method preparePersistenceUnitInfos () in org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager to handle duplicated by adding ManagedClasses to the original one. 2. or make this method to be easily overrided by opening the ""readPersistenceUnitInfos()"", etc.    ---  **Affects:** 2.0 RC4  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2006-09-18T02:42:09Z","2019-01-11T19:22:26Z"
"","7845","Typo in documentation [SPR-3159]","**[Ganesh Krishnan](https://jira.spring.io/secure/ViewProfile.jspa?name=xsspider)** opened **[SPR-3159](https://jira.spring.io/browse/SPR-3159?redirect=false)** and commented  Typo in page http://www.springframework.org/docs/reference/introduction.html At the bottom in ""Remoting usage scenario"" the image has the word ""Transparent"" mis-spelled as ""Transrparent"" (extra ""r"") Plus the phrase ""Remoting usage scenario"" ? or  should it be ""Remote usage scenario"" ?   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-13T05:56:04Z","2012-06-19T03:51:07Z"
"","7037","im unable to export the messages through UI [SPR-2348]","**[ganapaneni](https://jira.spring.io/secure/ViewProfile.jspa?name=ganapaneni)** opened **[SPR-2348](https://jira.spring.io/browse/SPR-2348?redirect=false)** and commented  while running batches throug UI i am getting the following error how can i solve this error any one can help me in this issue  [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R java.io.IOException: CreateProcess: ../../DEPLOYMENTEXP/environment/product/j2se/batch/bci/ESMCOMMON/doESMCommonExecute.ksh ESMMSGBACK EXPORT_MESSAGE_01 error=2 [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at java.lang.Win32Process.create(Native Method) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at java.lang.Win32Process.\(Win32Process.java:97) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at java.lang.Runtime.execInternal(Native Method) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at java.lang.Runtime.exec(Runtime.java:601) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at java.lang.Runtime.exec(Runtime.java:460) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at java.lang.Runtime.exec(Runtime.java:396) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at java.lang.Runtime.exec(Runtime.java:358) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.admin.action.ExecuteBatchJob.execute(ExecuteBatchJob.java:261) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.admin.action.ExecuteBatchJob.execute(ExecuteBatchJob.java:115) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.statemachine.ActionExecute.action_execute(ActionExecute.java:68) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.statemachine.ActionExecute$ActionExecuteTraceDecorator.action_execute(ActionExecute.java:98) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.statemachine.EndActionExec.endActionExec(EndActionExec.java:49) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.statemachine.ExecuteActions.executeActions(ExecuteActions.java:62) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.statemachine.EndNode.endNode(EndNode.java:48) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.statemachine.EndNode$EndNodeTraceDecorator.endNode(EndNode.java:63) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.statemachine.ProgressAutomaticNodes.progressAutomaticNodes(ProgressAutomaticNodes.java:140) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.command.EngineCommand.execute(EngineCommand.java:41) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.command.ProgressCommand.execute(ProgressCommand.java:104) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.Engine.progress(Engine.java:429) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.EngineTraceDecorator.progress(EngineTraceDecorator.java:514) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.engine.DashboardDecorator.progress(DashboardDecorator.java:503) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.adapter.ScriptXmlAdapter.execute(ScriptXmlAdapter.java:200) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.service.OrchestrationXmlImpl.executeScript(OrchestrationXmlImpl.java:304) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.ejb.EJSRemoteStatefulOrchestrationXmlService_89069f4d.executeScript(EJSRemoteStatefulOrchestrationXmlService_89069f4d.java:53) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.ejb._OrchestrationXmlService_Stub.executeScript(_OrchestrationXmlService_Stub.java:363) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.service.RemoteOrchestrationXmlImpl.executeScript(RemoteOrchestrationXmlImpl.java:134) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.web.ScriptHelper.deliverPage(ScriptHelper.java:250) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.orch.struts.actions.OrchestrationAction.execute(OrchestrationAction.java:405) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.action.CustomRequestProcessor.processActionPerform(CustomRequestProcessor.java:200) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.action.CustomRequestProcessor.process(CustomRequestProcessor.java:505) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.action.CustomActionServlet.process(CustomActionServlet.java:195) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:525) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:760) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.action.CustomActionServlet.postFilter(CustomActionServlet.java:236) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filter.Filtering.filter(Filtering.java:93) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.action.CustomActionServlet.service(CustomActionServlet.java:226) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.StrictServletInstance.doService(StrictServletInstance.java:110) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.StrictLifecycleServlet._service(StrictLifecycleServlet.java:174) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.ServicingServletState.service(StrictLifecycleServlet.java:333) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.StrictLifecycleServlet.service(StrictLifecycleServlet.java:116) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.ServletInstance.service(ServletInstance.java:283) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.ValidServletReferenceState.dispatch(ValidServletReferenceState.java:42) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.ServletInstanceReference.dispatch(ServletInstanceReference.java:40) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.handleWebAppDispatch(WebAppRequestDispatcher.java:978) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:564) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:200) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at org.apache.struts.action.RequestProcessor.doForward(RequestProcessor.java:1069) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at org.apache.struts.tiles.TilesRequestProcessor.doForward(TilesRequestProcessor.java:274) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.action.CustomRequestProcessor.doForward(CustomRequestProcessor.java:397) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at org.apache.struts.action.RequestProcessor.processForwardConfig(RequestProcessor.java:455) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at org.apache.struts.tiles.TilesRequestProcessor.processForwardConfig(TilesRequestProcessor.java:320) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.livinglogic.struts.workflow.TilesWorkflowRequestProcessor.processForwardConfig(TilesWorkflowRequestProcessor.java:73) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.action.CustomRequestProcessor.process(CustomRequestProcessor.java:508) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.action.CustomActionServlet.process(CustomActionServlet.java:195) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:525) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:760) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.action.CustomActionServlet.postFilter(CustomActionServlet.java:236) [7/26/06 19:42:22:218 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filter.ServletChainLink.doFilter(ServletChainLink.java:23) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filter.Filtering.filter(Filtering.java:89) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.action.CustomActionServlet.service(CustomActionServlet.java:226) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.StrictServletInstance.doService(StrictServletInstance.java:110) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.StrictLifecycleServlet._service(StrictLifecycleServlet.java:174) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.IdleServletState.service(StrictLifecycleServlet.java:313) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.StrictLifecycleServlet.service(StrictLifecycleServlet.java:116) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.ServletInstance.service(ServletInstance.java:283) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.ValidServletReferenceState.dispatch(ValidServletReferenceState.java:42) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.servlet.ServletInstanceReference.dispatch(ServletInstanceReference.java:40) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:76) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.navigation.filter.ScriptIdFilter.doFilter(ScriptIdFilter.java:35) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.ApplicationFilter.doFilterBody(ApplicationFilter.java:115) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.ApplicationFilter.doFilter(ApplicationFilter.java:82) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.AbstractFilter.doFilterBody(AbstractFilter.java:59) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.AbstractFilter.doFilter(AbstractFilter.java:42) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.AbstractFilter.doFilterBody(AbstractFilter.java:59) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.AbstractFilter.doFilter(AbstractFilter.java:42) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.AbstractThreadContextFilter.doFilterBody(AbstractThreadContextFilter.java:62) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.AbstractThreadContextFilter.doFilter(AbstractThreadContextFilter.java:45) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.RoundTripTraceFilter.doFilter(RoundTripTraceFilter.java:51) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.security.ui.websphere.LTPASyncFilter.doFilter(LTPASyncFilter.java:96) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.security.ui.CachedPrincipalFilter.doFilter(CachedPrincipalFilter.java:68) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.AbstractThreadContextFilter.doFilterBody(AbstractThreadContextFilter.java:62) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.AbstractThreadContextFilter.doFilter(AbstractThreadContextFilter.java:45) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.s1.arch.ui.filters.DetectSessionTimeoutFilter.doFilter(DetectSessionTimeoutFilter.java:104) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.handleWebAppDispatch(WebAppRequestDispatcher.java:974) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:564) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:200) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.srt.WebAppInvoker.doForward(WebAppInvoker.java:119) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.srt.WebAppInvoker.handleInvocationHook(WebAppInvoker.java:276) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.cache.invocation.CachedInvocation.handleInvocation(CachedInvocation.java:71) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.cache.invocation.CacheableInvocationContext.invoke(CacheableInvocationContext.java:116) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.srp.ServletRequestProcessor.dispatchByURI(ServletRequestProcessor.java:186) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.oselistener.OSEListenerDispatcher.service(OSEListener.java:334) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.webcontainer.http.HttpConnection.handleRequest(HttpConnection.java:56) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.http.HttpConnection.readAndHandleRequest(HttpConnection.java:618) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.http.HttpConnection.run(HttpConnection.java:443) [7/26/06 19:42:22:233 IST] 6ad9f3c6 SystemErr     R 	at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java(Compiled Code)) s through UI i am getting the following error how can i solve this error   --- No further details from [SPR-2348](https://jira.spring.io/browse/SPR-2348?redirect=false)","closed","","spring-projects-issues","2006-07-26T01:14:37Z","2019-01-11T18:35:50Z"
"","7598","Petclinic Sample with MySQL [SPR-2912]","**[Gabriel Cooper](https://jira.spring.io/secure/ViewProfile.jspa?name=inanutshellus)** opened **[SPR-2912](https://jira.spring.io/browse/SPR-2912?redirect=false)** and commented  The Petclinic sample app does not work with MySQL, though it claims to. Most of the problems stem from missing or HSQLDB-specific Ant directives.   ---  **Affects:** 2.0.1  **Attachments:** - [dropTables.txt](https://jira.spring.io/secure/attachment/12260/dropTables.txt) (_147 bytes_) - [mysql-conversion.txt](https://jira.spring.io/secure/attachment/12261/mysql-conversion.txt) (_4.76 kB_) - [petclinic.patch](https://jira.spring.io/secure/attachment/12259/petclinic.patch) (_15.34 kB_)  1 votes, 2 watchers","closed","type: task,","spring-projects-issues","2006-12-04T07:10:07Z","2012-06-19T03:51:21Z"
"","7095","JDOException not translated (InvalidDataAccessResourceUsageException instead of  DataIntegrityViolationException) [SPR-2406]","**[Frank Titius](https://jira.spring.io/secure/ViewProfile.jspa?name=frank)** opened **[SPR-2406](https://jira.spring.io/browse/SPR-2406?redirect=false)** and commented  If you try to persist a new object (insert) with duplicate key you get:  org.springframework.dao.InvalidDataAccessResourceUsageException: Could not invoke JDO makePersistent(Object) method; nested exception is javax.jdo.JDODataStoreException: Insert request failed: INSERT INTO `ACCOUNT` (`CITY`,`STATUS`,`PHONE`,`COUNTRY`,`EMAIL`,`LANGUAGE_PREFERENCE`,`LAST_NAME`,`ZIP`,`ADDRESS2`,`USERID`,`ADDRESS1`,`FIRST_NAME`,`PASSWORD`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) NestedThrowables: java.sql.SQLException: Duplicate entry 'a' for key 2 Caused by: javax.jdo.JDODataStoreException: Insert request failed: INSERT INTO `ACCOUNT` (`CITY`,`STATUS`,`PHONE`,`COUNTRY`,`EMAIL`,`LANGUAGE_PREFERENCE`,`LAST_NAME`,`ZIP`,`ADDRESS2`,`USERID`,`ADDRESS1`,`FIRST_NAME`,`PASSWORD`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) at org.jpox.store.rdbms.request.InsertRequest.execute(InsertRequest.java:412) at org.jpox.store.rdbms.table.ClassTable.insert(ClassTable.java:2379) at org.jpox.store.StoreManager.insert(StoreManager.java:775) at org.jpox.state.StateManagerImpl.internalMakePersistent(StateManagerImpl.java:3512) at org.jpox.state.StateManagerImpl.makePersistent(StateManagerImpl.java:3485) at org.jpox.AbstractPersistenceManager.internalMakePersistent (AbstractPersistenceManager.java:1146) at org.jpox.AbstractPersistenceManager.makePersistent(AbstractPersistenceManager.java:1201) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.orm.jdo.JdoTemplate$9.doInJdo(JdoTemplate.java:406) at org.springframework.orm.jdo.JdoTemplate.execute(JdoTemplate.java:259) at org.springframework.orm.jdo.JdoTemplate.makePersistent(JdoTemplate.java:403) at improvit.web.skill.dao.jdo.JdoAccountDao.storeAccount(JdoAccountDao.java:48) at improvit.web.skill.dao.jdo.JdoAccountDao.insertAccount(JdoAccountDao.java:52) at improvit.web.skill.domain.logic.WebSkillImpl.insertAccount(WebSkillImpl.java:111) at improvit.web.skill.test.dao.AbstractAccountDaoTests.testDuplicateAccount(AbstractAccountDaoTests.java:123) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at improvit.web.skill.test.dao.ConditionalTestCase.runBare(ConditionalTestCase.java:69) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) NestedThrowablesStackTrace: java.sql.SQLException: Duplicate entry 'a' for key 2 at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:2928) at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1571) at com.mysql.jdbc.ServerPreparedStatement.serverExecute(ServerPreparedStatement.java:1124) at com.mysql.jdbc.ServerPreparedStatement.executeInternal(ServerPreparedStatement.java:676) at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:773) at org.jpox.store.rdbms.ParamLoggingPreparedStatement.execute(ParamLoggingPreparedStatement.java:213) at org.jpox.store.rdbms.request.Request.executeUpdate(Request.java:88) at org.jpox.store.rdbms.request.InsertRequest.execute(InsertRequest.java:283) at org.jpox.store.rdbms.table.ClassTable.insert(ClassTable.java:2379) at org.jpox.store.StoreManager.insert(StoreManager.java:775) at org.jpox.state.StateManagerImpl.internalMakePersistent(StateManagerImpl.java:3512) at org.jpox.state.StateManagerImpl.makePersistent(StateManagerImpl.java:3485) at org.jpox.AbstractPersistenceManager.internalMakePersistent(AbstractPersistenceManager.java:1146) at org.jpox.AbstractPersistenceManager.makePersistent(AbstractPersistenceManager.java:1201) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.orm.jdo.JdoTemplate$9.doInJdo(JdoTemplate.java:406) at org.springframework.orm.jdo.JdoTemplate.execute(JdoTemplate.java:259) at org.springframework.orm.jdo.JdoTemplate.makePersistent(JdoTemplate.java:403) .... (rest omitted)  A ""duplicate key"" error should be translated to a DataIntegrityViolationException. Possible cause: First JPOX wraps a JDODataStoreException around the SQLException. Than reflection wrapped an InvocationTargetException and in JdoTemplate.makePersistent(..) the InvocationTargetException is caught which will prevent the translation in JdoTemplate.execute(..).  Possible solution for ALL ""catch (InvocationTargetException ex) "" in JdoTemplate: - before: catch (InvocationTargetException ex) { throw new InvalidDataAccessResourceUsageException( ""Could not invoke JDO makePersistentAll(Collection) method"", ex.getTargetException()); }  - after: catch (InvocationTargetException ex) { if (ex.getTargetException() instanceof JDOException) throw (JDOException) ex.getTargetException(); else throw new InvalidDataAccessResourceUsageException( ""Could not invoke JDO makePersistentAll(Collection) method"", ex.getTargetException()); }   ---  **Affects:** 1.2.8, 2.0 RC2, 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-11T01:56:02Z","2012-06-19T03:51:20Z"
"","7504","Using redirect/forward prefix in prefix attribute rather than in view name [SPR-2817]","**[Filippo Fratoni](https://jira.spring.io/secure/ViewProfile.jspa?name=filippo_fratoni)** opened **[SPR-2817](https://jira.spring.io/browse/SPR-2817?redirect=false)** and commented  I'm using spring webflow to manage conversation in my webapplication. I'm using Magnolia as cms and I need to forward to Magnolia Template Management view resolution. Using UrlBasedViewResolver I saw two great problems: 1) Prefix ""forward"" should be present in ALL my view names    2)View Class is Required  I've modified this behaviour in a cleanest fashion: 1) forward: and redirect: should be specified in the view resolver prefix attribute    2)initApplicationContext can be in this case omitted it is useless  This approach has indeed a negative side: -you can't resolve jsp and forward to controllers with the same view resolver  A new view resolver together with  UrlBasedViewResolver  can satisfy the two opposite needs As attach you will find my trivial solution Best Regards Filippo    ---  **Affects:** 2.0 final  **Attachments:** - [MyViewResolver.txt](https://jira.spring.io/secure/attachment/12197/MyViewResolver.txt) (_790 bytes_)","closed","type: enhancement,","spring-projects-issues","2006-11-09T04:28:19Z","2012-06-19T09:37:35Z"
"","7718","PluggableSchemaResolver: Support for wildcards in systemIds [SPR-3032]","**[Felix Gnass](https://jira.spring.io/secure/ViewProfile.jspa?name=fgnass)** opened **[SPR-3032](https://jira.spring.io/browse/SPR-3032?redirect=false)** and commented  It would be really cool if was possible to use wildcards in META-INF/spring.schemas to support versioned XSDs like:  http\://www.foobar.org/schema/foo-1.\*.xsd=org/foobar/path/to/foo-1.xsd http\://www.foobar.org/schema/foo-2.*.xsd=org/foobar/path/to/foo-2.xsd  Rationale: We sync our schema systemIds to our project release numbers. Sometimes the schemas are affected, sometimes not. And even if the XSDs are updated the changes are backwards compatible. If the user updates the project (let's say from 2.3 to 2.4) it should still be possible to use the 2.3 systemIds. Currently we have to a line to each spring.schemas file for each minor version change, even if the schemas have not been modified. So the option to use Ant-style or regular expressions would be really helpful.   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-12T03:50:03Z","2012-06-19T09:37:33Z"
"","7525","Allow Command objects with behavior in SpringMVC [SPR-2838]","**[Farhan Kazmi](https://jira.spring.io/secure/ViewProfile.jspa?name=farhank)** opened **[SPR-2838](https://jira.spring.io/browse/SPR-2838?redirect=false)** and commented  I would like to have behavior in my Command objects.  I like this because it leads to compact and simple code.  I often have Command classes like this:  `@Configurable`( ... ) public class LoginCommand  {      private String loginName;     private String password;     private Authentication authentication;          private AuthenticationManager authenticationManager;          public void execute() {     	SecurityContextHolder.getContext().setAuthentication(     		authenticationManager.authenticate(     			new UsernamePasswordAuthenticationToken(loginName, password)));     }     public String getLoginName() {     	return loginName;     }          public void setLoginName(String loginName) {     	this.loginName = loginName;     }          public String getPassword() {     	return password;     }          public void setPassword(String password) {     	this.password = password;     }  ..... }  The way I am doing this is by creating a new extended version of the SimpleFormController which I call CommandFormController.  The contract of this new controller is exactly the same as SimpleFormController except that it calls the execute() method on the command object, if  that command is indeed a command (has an execute() method).  The CommandFormController looks like this:  public class CommandFormController extends SimpleFormController { `@Override` protected void doSubmitAction(Object command_) throws Exception {      	if (isCommand(command_)     		((Command) command_).execute();     }          @Override     protected void onBindAndValidate(HttpServletRequest request_, Object command_, BindException errors_) throws Exception      {     	if (isValidatable(command_))     		((Validatable) command_).validate(errors_);     		     }  ... }  Yes, I am trying to use WebWork type of command pattern.  I have looked at the ThrowawayController but have never been able to make sense of it.  The fact that it lives in its own class heirarchy and has its own handler is very strange.  I really find that having ""empty"" objects causes bloat and smells in my code.  With SpringMVC currently, I would have to define a command class that just contained the data from the login form, but did not actually have any behavior.  It would be great if we can include this in Spring itself so that I don't have to maintain this code myself.  Also I have an configuration XSD I would like to submit for configuring controller that use commands with behavior.  An alternate implementation could just detect any sort of execute() method (i.e with or without HttpServletRequest as argument)  and invoke that.  That way Command objects would not need to implement aby interface at all.    --- No further details from [SPR-2838](https://jira.spring.io/browse/SPR-2838?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-11-14T18:49:53Z","2012-06-19T09:37:41Z"
"","7839","Misleading javadoc for ResultSetExtractor [SPR-3153]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-3153](https://jira.spring.io/browse/SPR-3153?redirect=false)** and commented  The main javadoc comment for ResultSetExtractor says that:  ""This interface is mainly used within the JDBC framework. A RowCallbackHandler is usually a simpler choice for ResultSet processing, in particular a RowMapperResultSetExtractor in combination with a RowMapper.""  Reading this one might be lead to thing that a RowMapperResultSetExtractor is a RowCallbackHandler, which is not the case.  I think the javadoc didn't keep the pace with the refactoring of the related classes.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-12T17:52:52Z","2012-06-19T03:50:35Z"
"","7777","References to non-existent class in javadoc [SPR-3091]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-3091](https://jira.spring.io/browse/SPR-3091?redirect=false)** and commented  In many of the classes in package org.springframework.core.style the javadocs reference the non-existent class ToStringBuilder. I believe these references should be updated to ToStringCreator.  Ciao, Fabio.   ---  **Affects:** 1.2.8, 2.0.2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2007-01-29T20:16:23Z","2012-06-19T03:50:27Z"
"","7499","Typo in example code #2 [SPR-2812]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-2812](https://jira.spring.io/browse/SPR-2812?redirect=false)** and commented  At page 93 of the pdf reference manual, version 2.0, there seem to be slight typo. In the grey box appears the following constructor declaration:  public UserValidator(Validator addressValidator)  I believe it should have been:  public CustomerValidator(Validator addressValidator)  Ciao, Fabio.   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-08T22:21:42Z","2012-06-19T03:50:50Z"
"","7498","Typo in example code [SPR-2811]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-2811](https://jira.spring.io/browse/SPR-2811?redirect=false)** and commented  At page 53 of the pdf reference manual, version 2.0, there seem to be slight typo. In the grey box appears the following method declaration:  protected abstract CommandHelper createHelper();  I believe it should have been:  protected abstract Command createCommand();  Ciao, Fabio.   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-08T22:17:56Z","2012-06-19T03:51:17Z"
"","7479","Obsolete Javadoc for RowCallbackHandler [SPR-2792]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-2792](https://jira.spring.io/browse/SPR-2792?redirect=false)** and commented  The Javadoc for the interface RowCallbackHandler erroneously mentions the subinterface ResultReader, which doesn't exists any more as of version 2.0.   ---  **Affects:** 2.0 final","closed","","spring-projects-issues","2006-11-02T00:09:38Z","2019-01-11T21:05:07Z"
"","7477","Wrong  Javadoc description for UrlFilenameViewController.extractViewNameFromUrlPath [SPR-2790]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-2790](https://jira.spring.io/browse/SPR-2790?redirect=false)** and commented  The Javadoc for  Javadoc UrlFilenameViewController.extractViewNameFromUrlPath erroneously states that this method delegates to WebUtils.extractViewNameFromUrlPath.  This was true up to 1.2.8, but it is not in 2.0. See #7476 for a related issue.  ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-01T21:23:29Z","2019-01-11T21:05:09Z"
"","7476","UrlFilenameViewController backward compatibility broken [SPR-2789]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-2789](https://jira.spring.io/browse/SPR-2789?redirect=false)** and commented  In version 1.2.8 UrlFilenameViewController maps the url ""/products/view.html"" to ""view"" while version 2.0 maps the same url to ""products/view"".  ---  **Affects:** 2.0 final  **Issue Links:** - #6061 UrlFilenameViewController does not allow for nested view files (_**""depends on""**_) - #7674 UrlFilenameViewController incorrectly parses the view name from the path - makes incorrect statement to such in javadoc as well (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2006-11-01T21:19:29Z","2019-01-11T21:06:28Z"
"","7430","Missing else in JDBCTemplate.processResultSet  [SPR-2742]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-2742](https://jira.spring.io/browse/SPR-2742?redirect=false)** and commented  In JDBCTemplate.processResultSet tests the sequence of tests:  if (param.getRowMapper() != null) { ...\... } if (param.getRowCallbackHandler() != null) { ...\... } else if (param.getResultSetExtractor() != null) { ...\... }  should be rewritten as:  if (param.getRowMapper() != null) { ...\... } else if (param.getRowCallbackHandler() != null) { ...\... } else if (param.getResultSetExtractor() != null) { ...\... }  to avoid one or two unnecessary method calls when getRowMapper does not return null and to reflect the assumption that at most one of those methods can return true. Alternatively, if this former assumption is not given (I doubt it), the last else should be removed leading to:  if (param.getRowMapper() != null) { ...\... } if (param.getRowCallbackHandler() != null) { ...\... } if (param.getResultSetExtractor() != null) { ...\... }   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-22T23:36:57Z","2012-06-19T03:50:29Z"
"","7773","Method Injection for bean collection [SPR-3087]","**[Eugene Prokopiev](https://jira.spring.io/secure/ViewProfile.jspa?name=enp)** opened **[SPR-3087](https://jira.spring.io/browse/SPR-3087?redirect=false)** and commented  Suppose, I have this context:  \ 	\ 		\ 			\ 			... 		\ 	\ \  Is it possible to get new adapter instances on every this call:  for(IModemAdapter adapter : adapters) { adapter.configure(); }  I read ""Method Injection"" chapter in Spring documentation, but I can't understand how to get new instances even with devman.modem.ModemManager implements BeanFactoryAware  What about make it possible in the future?   --- No further details from [SPR-3087](https://jira.spring.io/browse/SPR-3087?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-01-28T22:59:00Z","2012-06-19T09:37:37Z"
"","7320","Beans autoproxing is incompatible with JMX exposing [SPR-2631]","**[Eugene Prokopiev](https://jira.spring.io/secure/ViewProfile.jspa?name=enp)** opened **[SPR-2631](https://jira.spring.io/browse/SPR-2631?redirect=false)** and commented  If 1.2 or 2.0 autoproxing used for any bean all its interfaces are extended with additional properties/methods which visible on reflection. So, InterfaceBasedMBeanInfoAssembler and SimpleReflectiveMBeanInfoAssembler can't be used for exposing this bean via JMX.  For detail see http://forum.springframework.org/showthread.php?p=78341#post78341   ---  **Affects:** 2.0 RC4  **Attachments:** - [src.zip](https://jira.spring.io/secure/attachment/11985/src.zip) (_2.75 kB_)","closed","in: core,","spring-projects-issues","2006-09-22T23:30:46Z","2019-01-12T16:28:42Z"
"","7299","No exception on sending message inside Message-Driven POJO with ActiveMQ/Jencks/JTA [SPR-2610]","**[Eugene Prokopiev](https://jira.spring.io/secure/ViewProfile.jspa?name=enp)** opened **[SPR-2610](https://jira.spring.io/browse/SPR-2610?redirect=false)** and commented  With this simple message listener I can't get exception on unsuccessful sending message:  public class MessageListener implements SessionAwareMessageListener {      private Log log = LogFactory.getLog(getClass());          public void onMessage(Message message, Session session) throws JMSException {     	try {     		log.debug(""Received message : ""+message);			     		MessageProducer producer = session.createProducer(session.createQueue(""error""));     		producer.send(message);     		log.debug(""Transmitted message : ""+message);			     	} catch (Exception e) {     		log.debug(""EXCEPTION!!! : ""+e);     	}     }  }  So, transaction can't be rolled back due to absent exception.  The reason is absent exception in code using raw JMS/JTA API:  public class Producer {      public static void main(String[] args) throws Exception {                 // start transaction manager         TMService jotm = new Jotm(true, false);         UserTransaction transaction = jotm.getUserTransaction();         TransactionManager transactionManager = jotm.getTransactionManager();                 // start connection         ActiveMQXAConnectionFactory connectionFactory =             new ActiveMQXAConnectionFactory(""tcp://localhost:5000"");         XAConnection connection = connectionFactory.createXAConnection();         XASession session = connection.createXASession();         Destination destination = session.createQueue(""error"");         MessageProducer producer = session.createProducer(destination);              // send message         TextMessage message = session.createTextMessage(""Test Message String"");         transaction.begin();              transactionManager.getTransaction().enlistResource(session.getXAResource());         System.out.println(transactionManager.getTransaction());         try {             producer.send(message);         } catch (Exception e) {             System.out.println(""EXCEPTION!!! : ""+e);         }         transaction.commit();         System.out.println(""sent message : ""+message.getJMSMessageID());              // close connection         session.close();         connection.close();     }  }  In code using raw JMS API without XA I can see this exception:  public class Producer {      public static void main(String[] args) throws Exception {                 ActiveMQConnection connection = ActiveMQConnection.makeConnection(""tcp://localhost:5000"");         connection.start();         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);         Destination destination = session.createQueue(""error"");         MessageProducer producer = session.createProducer(destination);             TextMessage message = session.createTextMessage(""Test Message String"");         try {             producer.send(message);         } catch (Exception e) {             System.out.println(""EXCEPTION!!! : ""+e);         }         session.close();         connection.close();  }  I can see exception with ActiveMQ/Jencks/XA only in case of using ExceptionListener implemented for Connection. Is this behavior same for other JMS implementations? Is it possible to wrap this behavior in Message-Driven POJO to let raising exception or rollback transaction in any other way?   ---  **Affects:** 2.0 RC4  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-09-19T16:29:10Z","2012-06-18T12:44:31Z"
"","7290","Caching Message-Driven POJO with ActiveMQ/Jencks/JTA [SPR-2601]","**[Eugene Prokopiev](https://jira.spring.io/secure/ViewProfile.jspa?name=enp)** opened **[SPR-2601](https://jira.spring.io/browse/SPR-2601?redirect=false)** and commented  #7150 must be reopened. All works with default DefaultMessageListenerContainer.cacheLevel=CACHE_SESSION but thre are some errors with other cacheLevel values. In the same configuration described in #7150 I got:  with CACHE_CONNECTION on starting context:  ERROR DefaultMessageListenerContainer - Setup of JMS message listener invoker failed - trying to recover javax.jms.JMSException: Already closed at org.jencks.pool.PooledSpringXAConnection.getConnection(PooledSpringXAConnection.java:284) at org.jencks.pool.PooledSpringXAConnection.start(PooledSpringXAConnection.java:95) at org.springframework.jms.connection.ConnectionFactoryUtils.doGetTransactionalSession(ConnectionFactoryUtils.java:195) at org.springframework.jms.listener.DefaultMessageListenerContainer.doReceiveAndExecute(DefaultMessageListenerContainer.java:483) at org.springframework.jms.listener.DefaultMessageListenerContainer.receiveAndExecute(DefaultMessageListenerContainer.java:441) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:859) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:818) at org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable.run(SimpleAsyncTaskExecutor.java:203) at java.lang.Thread.run(Thread.java:595) INFO  DefaultMessageListenerContainer - Successfully refreshed JMS Connection  with CACHE_SESSION and CACHE_CONSUMER on receiving message:  ERROR DefaultMessageListenerContainer - Setup of JMS message listener invoker failed - trying to recover javax.jms.JMSException: Session's XAResource has not been enlisted in a distributed transaction. at org.apache.activemq.ActiveMQXASession.doStartTransaction(ActiveMQXASession.java:109) at org.apache.activemq.ActiveMQMessageConsumer.ackLater(ActiveMQMessageConsumer.java:658) at org.apache.activemq.ActiveMQMessageConsumer.beforeMessageIsConsumed(ActiveMQMessageConsumer.java:610) at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:469) at org.springframework.jms.listener.DefaultMessageListenerContainer.receiveMessage(DefaultMessageListenerContainer.java:560) at org.springframework.jms.listener.DefaultMessageListenerContainer.doReceiveAndExecute(DefaultMessageListenerContainer.java:505) at org.springframework.jms.listener.DefaultMessageListenerContainer.receiveAndExecute(DefaultMessageListenerContainer.java:441) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:859) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:818) at org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable.run(SimpleAsyncTaskExecutor.java:203) at java.lang.Thread.run(Thread.java:595) INFO  DefaultMessageListenerContainer - Successfully refreshed JMS Connection  ---  **Affects:** 2.0 RC4","closed","status: declined,","spring-projects-issues","2006-09-18T17:19:19Z","2019-01-12T16:28:48Z"
"","7150","Message-Driven POJO with ActiveMQ and JTA in multithreaded environment [SPR-2461]","**[Eugene Prokopiev](https://jira.spring.io/secure/ViewProfile.jspa?name=enp)** opened **[SPR-2461](https://jira.spring.io/browse/SPR-2461?redirect=false)** and commented  It's impossible to use Message-Driven POJO with ActiveMQ and JTA in multithreaded environment now. The reason is enlisting XASession error in separate thread which can be done only in transaction. The workaround is using JmsTemplate.receive() in TransactionTemplate.doInTransactionWithoutResult. Working example JmsTemplate.receive() in TransactionTemplate and non working with DefaultMessageListenerContainer will be attached.  Is it possible to modify DefaultMessageListenerContainer to always create Session in TransactionTemplate?   ---  **Affects:** 2.0 RC3  **Attachments:** - [context-non-working.xml](https://jira.spring.io/secure/attachment/11898/context-non-working.xml) (_1.73 kB_) - [context-working.xml](https://jira.spring.io/secure/attachment/11900/context-working.xml) (_1.79 kB_) - [MessageListener.java](https://jira.spring.io/secure/attachment/11897/MessageListener.java) (_321 bytes_) - [MessageReceiver.java](https://jira.spring.io/secure/attachment/11899/MessageReceiver.java) (_1.28 kB_)  1 votes, 1 watchers","closed","in: messaging,","spring-projects-issues","2006-08-22T19:14:49Z","2019-01-11T19:34:16Z"
"","7838","NoClassDefFoundError when running RegexpMethodPointcutAdvisor on Java 6 [SPR-3152]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-3152](https://jira.spring.io/browse/SPR-3152?redirect=false)** and commented  I am getting the following error when running on Java 6. The same test is working just fine on 1.4 and 1.5.  java.lang.NoClassDefFoundError: org/apache/oro/text/regex/MalformedPatternException at org.springframework.aop.support.RegexpMethodPointcutAdvisor.createPointcut(RegexpMethodPointcutAdvisor.java:167) at org.springframework.aop.support.RegexpMethodPointcutAdvisor.getPointcut(RegexpMethodPointcutAdvisor.java:149) at org.springframework.aop.framework.AdvisorChainFactoryUtils.calculateInterceptorsAndDynamicInterceptionAdvice(AdvisorChainFactoryUtils.java:76) at org.springframework.aop.framework.HashMapCachingAdvisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(HashMapCachingAdvisorChainFactory.java:47) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:156)   ---  **Affects:** 1.2.8, 2.0.1  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","in: core,","spring-projects-issues","2007-02-12T13:22:43Z","2012-06-19T03:50:50Z"
"","7423","Serialization incompatibility between Spring 1.2 and 2.0 [SPR-2735]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-2735](https://jira.spring.io/browse/SPR-2735?redirect=false)** and commented  When using remoting, especially rmi or ejb remoting, all classes will be serialized before sent over the wire. Unfortunately that does not work if client and server are using different versions of Spring jars and if there are some Spring classes involved.  The problem is that Spring does not specify serialVersionUID for serializable classes. That is most critical for ApplicationEvent class and all the exceptions. So, I'd suggest to use serialVersionUID's from Spring 1.2.8 to all serializable classes and from now on always explicitly specify that value.   ---  **Affects:** 2.0 final  **Attachments:** - [serialVersionUIDs128.txt](https://jira.spring.io/secure/attachment/12041/serialVersionUIDs128.txt) (_27.22 kB_) - [serialVersionUIDs20.txt](https://jira.spring.io/secure/attachment/12042/serialVersionUIDs20.txt) (_31.31 kB_)","closed","in: core,","spring-projects-issues","2006-10-20T00:42:04Z","2012-06-19T03:50:44Z"
"","7270","Provide out of the box implementation of the thread scope [SPR-2581]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-2581](https://jira.spring.io/browse/SPR-2581?redirect=false)** and commented  Thread-bound scope can help to address concurrency issues (e.g. batching up requests per thread). So, it would be really handy if Spring provided such scope out of the box for Spring 2.0. E.g. something like this:  ``` public class ThreadScope implements Scope {    private final ThreadLocal threadScope = new ThreadLocal() {       protected Object initialValue() {         return new HashMap();       }     };      public Object get(String name, ObjectFactory objectFactory) {     Map scope = (Map) threadScope.get();     Object object = scope.get(name);     if(object==null) {       object = objectFactory.getObject();       scope.put(name, object);     }     return object;   }    public Object remove(String name) {     Map scope = (Map) threadScope.get();     return scope.remove(name);   }    public void registerDestructionCallback(String name, Runnable callback) {   }    } ```    ---  **Affects:** 2.0 final  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad2cc34b79ce0422a4d893c4687519436b46864b  16 votes, 22 watchers","closed","has: votes-jira,","spring-projects-issues","2006-09-13T03:35:28Z","2012-06-19T03:50:53Z"
"","7533","InvalidDataAccessApiUsageException when using a sql query that contains sql variable setting [SPR-2846]","**[Eugene Choi](https://jira.spring.io/secure/ViewProfile.jspa?name=echoi1975)** opened **[SPR-2846](https://jira.spring.io/browse/SPR-2846?redirect=false)** and commented  Getting a org.springframework.dao.InvalidDataAccessApiUsageException for the query  SQL ' select `@user_id` := ? user_id,  `@session_id` := ? session_id,  `@asset_id` := ? asset_id' requires 4 bind variables, but 3 variables were declared for this object.  here is the error msg in my log i get from spring when using spring 2.0 ( i did not get this error with spring 1.2.5 and 1.2.8)  2006-11-17 11:46:43,658 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[localhost].[/jmw]] Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'setTriggerVariablesQuery' defined in ServletContext resource [/WEB-INF/spring/maintBeans.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [com.milliman.ts.maint.br.query.SetTriggerVariablesQuery]: Constructor threw exception; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: SQL ' select `@user_id` := ? user_id,  `@session_id` := ? session_id,  `@asset_id` := ? asset_id' requires 4 bind variables, but 3 variables were declared for this object    ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-17T05:54:06Z","2012-06-19T03:50:19Z"
"","7113","Include a multi-page HTML version of the documentation with the distribution [SPR-2424]","**[Esko Luontola](https://jira.spring.io/secure/ViewProfile.jspa?name=orfjackal)** opened **[SPR-2424](https://jira.spring.io/browse/SPR-2424?redirect=false)** and commented  At the moment the only HTML version of the documentation that comes with Spring is in \docs\reference\html_single as a single file. Would it be possible to include also a multi-page version of the document as shown in http://static.springframework.org/spring/docs/2.0.x/reference/index.html?  I use Palm TX for reading the documentation when going to/from work, and the multi-page HTML version is the best one for that purpose. Now I need to download the HTML pages from http://static.springframework.org/spring/docs/2.0.x/reference/ with wget, but it would be nicer to get them from the spring-framework-2.x-with-dependencies.zip package (perhaps as \docs\reference\html_multi).   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-13T23:54:38Z","2007-02-27T00:16:12Z"
"","7112","Typos in documentation [SPR-2423]","**[Esko Luontola](https://jira.spring.io/secure/ViewProfile.jspa?name=orfjackal)** opened **[SPR-2423](https://jira.spring.io/browse/SPR-2423?redirect=false)** and commented  In the documentation there are multiple usages of the idiom ""to wit"", which according to answers.com means ""That is to say; namely."" I haven't heard that phrase to be used much, so it might be best to avoid using it in technical documentation, and replace it with something else. The same could be said about other abbreviations:  Quoted from http://java.sun.com/j2se/javadoc/writingdoccomments/#styleguide Avoid Latin -- use ""also known as"" instead of ""aka"", use ""that is"" or ""to be specific"" instead of ""i.e."", use ""for example"" instead of ""e.g."", and use ""in other words"" or ""namely"" instead of ""viz.""  Here are some typos I've found thisfar:  > 3.3.5. Using depends-on  ""you can supply a delimited list of beans names as the value of the \  attribute""  beans names --> bean names  \ attribute --> 'depends-on' attribute  > 3.4.4. Custom scopes  ""with two methods to get and remove an object from/to an underlying storage mechanism respectively""  I think the correct way is to say that you ""get something from somewhere"" and ""remove something from somewhere"". So this sentence should be fixed with:  from/to --> from  > 3.5.2.1.  BeanFactoryAware  There is a code sample:  \  Isn't the 'singleton' attribute deprecated? The code examples should then use the new syntax (except when explaining the 'singleton' attribute for backwards compatibility):  singleton=""false"" --> scope=""singleton""  Also the following chapters use the 'singleton' attribute in their code examples: ""3.3.4.1. Lookup method injection"", ""6.8.1. Using AspectJ to dependency inject domain objects with Spring"", ""7.9.2. Using metadata-driven auto-proxying"", ""7.10.2. Pooling target sources"", ""15.4.1.2. DelegatingActionProxy"", ""A.2.2.2. "" and ""A.2.2.2.1. Using  to set a bean property or constructor-argument""  > 3.7.2. Customizing configuration metadata with BeanFactoryPostProcessors  ""This semantics of this interface""  This semantics --> The semantics  > 3.7.2. Customizing configuration metadata with BeanFactoryPostProcessors > 3.7.2.1. Example: the PropertyPlaceholderConfigurer  Here is twise mentioned ""PropertyPlaceHolderConfigurer"" (notice the capical H in Holder) instead of ""PropertyPlaceholderConfigurer"".  PropertyPlaceHolderConfigurer --> PropertyPlaceholderConfigurer  > 3.7.2. Customizing configuration metadata with BeanFactoryPostProcessors  ""This explicit registration step is not convenient""  Because the ""this"" should refer to the above code sample, the paragraph starting with this sentence should be _right after_ the code sample. The paragraph starting with ""An ApplicationContext will detect"" should come after it, so that it would be more logical.  > 3.7.2.2. Example: the PropertyOverrideConfigurer  ""which contains a bean in it called dataSource""  Some simplication:  a bean in it called --> a bean called  > 3.8. The ApplicationContext  ""The following sections described functionality""  The following sections have not yet come, so it's not possible to speak about them in the past tense:  described --> describe  > 3.8.1. Internationalization using MessageSources  Two sentences starting with ""String getMessage (String code""  Remove the space before the '(' to improve the code style:  getMessage (String --> getMessage(String  > 3.8.1. Internationalization using MessageSources  ""# in 'exceptions.properties'""  This line of code sample should be colored green, like in the above code sample.  > 3.8.2. Events  In the code sample:      public void setApplicationContext(ApplicationContext ctx) {         this.ctx = ctx;     }  The class has no field called 'ctx'. To the code should be added:  private ApplicationContext ctx;  > 3.8.3. Convenient access to low-level resources  ""JavaBean PropertyEditor that is automatically registerd by the context""  registerd --> registered  > 3.9. Glue code and the evil singleton  ""to demand load multiple hierarchical (i.e. one is a parent of another) Spring IoC container instances""  to demand load --> to demand the loading of  > 4.3.1. UrlResource  ""However, if it doesn't recognize the prefiix,""  prefiix --> prefix  > 4.3.2. ClassPathResource  ""the special prefix classpath:on the string path""  Missing one space:  classpath:on --> classpath: on  > 4.6. Setting Resources as properties  ""some sort of dynamic process it probably makes sense""  Let's make this long sentence more readable by adding a comma:  dynamic process it probably --> dynamic process, it probably  > 4.6. Setting Resources as properties  ""where the specific one needed that depends on the role of the user""  specific one needed that depends --> specific resource needed depends  > 5.2.2.1. Registering additional custom PropertyEditors  ""The standard property editors that the BeanWrapper registers are listed in a subsequent chapter.""  a subsequent chapter --> the previous section  > 5.2.3. Other features worth mentioning  ""Besides the features you've seen in the previous sections there a couple of features that might be interesting to you, though not worth an entire section.""  previous sections there a couple of features that might be interesting to you, --> previous sections, there are a couple of features that might be of interest to you,  > 5.3. Validation using Spring's Validator interface  (The language of these sections needs some tidying...)  Spring's features a Validator interface you can use to validate objects. --> Spring features a Validator interface which you can use to validate objects.  The Validator interface, is pretty straightforward and works using with a so-called Errors object. In other words, while validating, validators will report validation failures to the Errors object. --> The Validator interface works using an Errors object so that while validating, validators will report validation failures to the Errors object.  As said already, the Validator interface is pretty straightforward, just as implementing one yourself. --> (the beginning is redundant repetition and the end is undecipherable; remove this sentence completely)  Using the org.springframework.validation.Validator  interface we're going to provide validation behavior for the Person  class. This is the Validator interface: --> We're going to provide validation behavior for the Person class by using the org.springframework.validation.Validator interface:  ""validate(Object, org.springframework.validation.Errors)"" A list bullet (\ element) is missing from this line.  in case of validation errors, put registers those --> in case of validation errors, registers those  the given Errors object --> the given \Errors\ object  > 5.4. The Errors interface  The methods it offers are pretty straightforward, and more information can be found in the Javadoc. --> More information about the methods it offers can be found from the Javadoc.  > 5.5. Resolving codes to error messages  (Ugh, I had some problems understanding this section, so some simplification and refactoring would be good in addition to the following fixes...)  If, using a MessageSource, we're going to output the error messages we will do so --> If we're going to output the error messages by using a MessageSource, we will do so  one of the other reject method --> one of the other reject methods  the Errors interface --> the \Errors\ interface  register the code, you've passed in, --> register the code you've passed in,  By default, the  is used, --> By default, the **classname missing** is used,  not only register a message --> not only registers a message   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-13T23:44:05Z","2012-06-19T03:50:15Z"
"","6992","Typos in documentation [SPR-2303]","**[Esko Luontola](https://jira.spring.io/secure/ViewProfile.jspa?name=orfjackal)** opened **[SPR-2303](https://jira.spring.io/browse/SPR-2303?redirect=false)** and commented  Here are some typos and unclear sentences which I've this far found from http://static.springframework.org/spring/docs/2.0.x/reference/beans.html  > 3.2.3. The beans  ""other beans a bean needs to do its work, i.e. collaborators (also called dependencies).""  I had some trouble understanding this sentence. It could be reformatted for example to ""other beans which are needed for the bean to do its work...""  > 3.2.3.1. Naming beans  ""When using XM-based configuration metadata""  is missing one L from XML. It should be:  ""When using XML-based configuration metadata""  > 3.3.1.3. Some examples (last sentence)  ""An instance (non-static) factory method would be used in an essentially identical fashion (aside from the use of the factory-bean attribute instead of the class attribute), so will not be detailed here.""  The part ""so will not be detailed here"" sounds a bit weird, maybe because the subject of the sentence is unclear. This could be reformatted for example to ""so details will not be discussed here"".  > 3.3.3. Bean properties and constructor arguments detailed  ""Springs XML-based configuration metadata""  should be  ""Spring's XML-based configuration metadata""   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-14T07:26:37Z","2012-06-19T03:52:40Z"
"","7356","readme.txt in distribution is out-of-sync with distribution structure [SPR-2667]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-2667](https://jira.spring.io/browse/SPR-2667?redirect=false)** and commented  The readme.txt included in spring-framework-2.0.zip explains things like:  Release contents: * ""src"" contains the Java source files for the framework * ""test"" contains the Java source files for Spring's test suite * ""dist"" contains various Spring distribution jar files * ""lib"" contains all third-party libraries needed for running the samples and/or building the framework * ""docs"" contains general documentation and API javadocs * ""samples"" contains demo applications and skeletons  But this is no longer consistent with the actual contents of the distribution archive.   ---  **Affects:** 2.0 final","closed","type: task,","spring-projects-issues","2006-10-03T20:08:33Z","2006-11-03T05:32:23Z"
"","6926","JPA support with EJB 2.1 CMT [SPR-2236]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-2236](https://jira.spring.io/browse/SPR-2236?redirect=false)** and commented  It is currently not possible to have a local JPA EntityManager, like the one created by LocalEntityManagerFactoryBean, participate in JTA transactions managed by the container, e.g. EJB 2.1 CMT, even when using JtaTransactionManager. The Spring Hibernate integration does support this, using the JtaTransactionManager. As an aside, note that the Spring JDO support also does not support this.  ---  **Attachments:** - [jpa_cmt_discussion.txt](https://jira.spring.io/secure/attachment/11782/jpa_cmt_discussion.txt) (_9.61 kB_)  **Issue Links:** - #8610 Shared EntityManager within the same JTA transaction across Spring transaction boundaries","closed","type: enhancement,","spring-projects-issues","2006-07-04T05:18:25Z","2019-01-11T19:08:25Z"
"","6904","Typo in reference doc (14.4.2. SimpleUrlHandlerMapping) [SPR-2214]","**[Erik van Oosten](https://jira.spring.io/secure/ViewProfile.jspa?name=erikvanoosten)** opened **[SPR-2214](https://jira.spring.io/browse/SPR-2214?redirect=false)** and commented  In section 14.4.2. SimpleUrlHandlerMapping change:  \  to:  \  in order to be consistent with the text below it. Quote: ""This handler mapping routes requests for help.html  in any directory to the helpController, which is a UrlFilenameViewController.""   ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-06-28T18:34:05Z","2012-06-19T03:52:37Z"
"","7137","Provide a better error message for scope wiring problems [SPR-2448]","**[Erik Pilz](https://jira.spring.io/secure/ViewProfile.jspa?name=epilz)** opened **[SPR-2448](https://jira.spring.io/browse/SPR-2448?redirect=false)** and commented  The error messages that are logged because of scope wiring problems could be improved. Here's a short example illustrating the typical problem I keep seeing:                                The developer in this case has written an application-scoped bean, FileCabinet, and needs a handle to the current user to set audit properties on a file that is being updated. The error that is printed when the application server starts is as follows:  ---- Begin log excerpt --- 2006-08-18 17:08:07,295 ERROR [springframework.web.context.ContextLoader] Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'fileCabinet' defined in ServletContext resource [/WEB-INF/classes/applicationContext.xml]: Cannot resolve reference to bean 'remoteUser' while setting bean property 'remoteUser'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'remoteUser': Scope 'session' is not active; nested exception is java.lang.IllegalStateException: No thread-bound request: use RequestContextFilter Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'remoteUser': Scope 'session' is not active; nested exception is java.lang.IllegalStateException: No thread-bound request: use RequestContextFilter Caused by: java.lang.IllegalStateException: No thread-bound request: use RequestContextFilter at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:62) at org.springframework.web.context.request.SessionScope.get(SessionScope.java:80) at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:62) at org.springframework.web.context.request.SessionScope.get(SessionScope.java:80) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:276) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411)  ---- End log excerpt ----  Usually I find a very confused developer scratching her head and looking at a web.xml file at this point. Two simple options to better handle this are: 1) modify the current error message to include other potential causes other than just a problem with the filter/listener in the web.xml file; or, 2) throw an exception when the reference is being resolved.   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-18T11:34:14Z","2012-06-19T03:50:09Z"
"","7317","ClassCastException within Commons EL when called from spring:message tag [SPR-2628]","**[Erick Dovale](https://jira.spring.io/secure/ViewProfile.jspa?name=edovale)** opened **[SPR-2628](https://jira.spring.io/browse/SPR-2628?redirect=false)** and commented  Hello there, I am having a problem that's becoming really annoying. We recently upgrade to spring-1.2.4 from 1.1.5.  In a JSP we have something like this:  [code]   \ \ \ \ [/code]  When the condition in the c:if tag renders true for value then I get the following exception:  [code] 11:53:40.402 ERROR [http-9000-Processor25] RequestContextAwareTag.doStartTag(75) | org.apache.taglibs.standard.lang.jstl.ImplicitObjects java.lang.ClassCastException: org.apache.taglibs.standard.lang.jstl.ImplicitObjects at org.apache.commons.el.ImplicitObjects.getImplicitObjects(ImplicitObjects.java:123) at org.apache.commons.el.VariableResolverImpl.resolveVariable(VariableResolverImpl.java:125) at org.apache.jasper.runtime.PageContextImpl.resolveVariable(PageContextImpl.java:856) at org.apache.commons.el.NamedValue.evaluate(NamedValue.java:124) at org.apache.commons.el.ComplexValue.evaluate(ComplexValue.java:140) at org.apache.commons.el.ExpressionEvaluatorImpl.evaluate(ExpressionEvaluatorImpl.java:263) at org.apache.commons.el.ExpressionEvaluatorImpl.evaluate(ExpressionEvaluatorImpl.java:190) at org.springframework.web.util.ExpressionEvaluationUtils$Jsp20ExpressionEvaluationHelper.evaluate(ExpressionEvaluationUtils.java:188) at org.springframework.web.util.ExpressionEvaluationUtils.evaluateString(ExpressionEvaluationUtils.java:124) at org.springframework.web.servlet.tags.MessageTag.doStartTagInternal(MessageTag.java:128) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:68) at org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp._jspx_meth_spring_message_0(org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp:1705) at org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp._jspx_meth_c_if_3(org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp:1676) at org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp._jspService(org.apache.jsp.WEB_002dINF.pages.document.documentCreateForm_jsp:420) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97) [/code]  The problem seems to be when resolving implicit objects in the page like the param object.  If I use fmt:message tag it works well. I was also able to work around this problem by setting the values I need into variables using c:set and then using those variables in the spring:message tag like this:  [code]  \ \ \ \ \ [/code]  Has anyone experienced this before??? Is this a bug in spring:message tag? I tried searching in jira but found nothing.  Thanks in advance.   ---  **Affects:** 1.2.4","closed","type: bug,","spring-projects-issues","2006-09-22T00:27:25Z","2019-01-11T21:12:27Z"
"","7380","RedirectView with more flexible URL-building [SPR-2692]","**[Eric Rath](https://jira.spring.io/secure/ViewProfile.jspa?name=ericrath)** opened **[SPR-2692](https://jira.spring.io/browse/SPR-2692?redirect=false)** and commented  org.springframework.web.servlet.view.RedirectView appends all model key/value pairs to the URL as querystring parameters.  Create a new View implementation that behaves the same way as RedirectView but accepts a url with named parameter placeholders:  view.setUrl(""/path/{myParam1}/morepath/{myParam2}"");  and then when rendering, instead of appending model values as querystring parameters, replaces those parameter placeholders with values found in the model.  An exception is thrown if no value for a given parameter is found in the model.  This acheives two things:  1. Allows you to redirect to ""REST""-ful URLs where parameters/identifiers are embedded in the URL instead of appended as querystring parameters.  Of course, you can still facilitate that behavior by specifiying the querystring parameters in the url pattern. 2. Allows you to control which of the model's values are included in the URL (i.e. values in the model not found as placeholders in the url pattern are ignored).  PS.  I haven't contributed to Spring before; I have an implementation for this is people are interested.  Where should I share it?  ---  **Affects:** 1.2.8  **Attachments:** - [AlternateRedirectView.java](https://jira.spring.io/secure/attachment/12015/AlternateRedirectView.java) (_2.71 kB_)  **Issue Links:** - #9424 Add additional redirect prefixes to allow for more control over redirect behavior - #5995 Allow specifying which request attributes are included in RedirectView  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57c757afc50000d933193cba1aeeff9127483d5a, https://github.com/spring-projects/spring-framework/commit/761a8362363fd99e80b149674180f79096bfe4ca  5 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2006-10-06T09:40:33Z","2019-01-11T21:20:29Z"
"","7156","EhCacheManagerFactoryBean#afterPropertiesSet() could use getInputStream() rather than getUrl() [SPR-2467]","**[Eric Olson](https://jira.spring.io/secure/ViewProfile.jspa?name=olsoner)** opened **[SPR-2467](https://jira.spring.io/browse/SPR-2467?redirect=false)** and commented  EhCacheManagerFactoryBean currently creates the CacheManager using a URL.  The CacheManager calls ConfigurationFactory#parseConfiguration(URL), which gets an InputStream from the URL and calls ConfigurationFactory#parseConfiguration(InputStream).  I ran into a bug with ehcache where ConfigurationFactory#parseConfiguration(InputStream) is throwing a java.util.zip.ZipException(""invalid block type"").  While it is a bug with ehcache, I did find that changing EhCacheManagerFactoryBean to use getInputStream() rather than getUrl() fixed the problem, so I thought I would suggest making the change (see attached source).   ---  **Affects:** 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3  **Attachments:** - [EhCacheManagerFactoryBean.java](https://jira.spring.io/secure/attachment/11911/EhCacheManagerFactoryBean.java) (_3.09 kB_)","closed","type: enhancement,","spring-projects-issues","2006-08-23T07:05:48Z","2012-06-19T03:50:08Z"
"","6915","Is SmartMimeMessage visibility correct? [SPR-2225]","**[Eric Olson](https://jira.spring.io/secure/ViewProfile.jspa?name=olsoner)** opened **[SPR-2225](https://jira.spring.io/browse/SPR-2225?redirect=false)** and commented  Should SmartMimeMessage be declared a public class (currently has default visibility)?  If not, make it a private class within JavaMailSenderImpl.  Thanks!   ---  **Affects:** 1.2.8","closed","type: enhancement,","spring-projects-issues","2006-06-30T05:34:37Z","2006-07-03T02:26:32Z"
"","7877","First insert is not rolled back when there is an exception [SPR-3192]","**[Eric Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=eric4brs)** opened **[SPR-3192](https://jira.spring.io/browse/SPR-3192?redirect=false)** and commented  When I run a test that calls a service method that inserts 3 rows and then throws an exception, one row is still inserted unexpectedly. I was expecting the exception to cause all three inserts to roll back.  \ \\\ \ \ \PROPAGATION_REQUIRED\ \PROPAGATION_REQUIRED\ \PROPAGATION_REQUIRED\ \ \ \  When I modify my applicationContext-service.xml file so that the service method is not matched, then all three rows are inserted as expected  \ \\\ \ \ \PROPAGATION_REQUIRED\ \PROPAGATION_REQUIRED\ \PROPAGATION_REQUIRED\ \ \ \   ---  **Affects:** 2.0.2  **Attachments:** - [coachHelperNo.log](https://jira.spring.io/secure/attachment/12421/coachHelperNo.log) (_462.80 kB_) - [coachHelperWith.log](https://jira.spring.io/secure/attachment/12422/coachHelperWith.log) (_449.24 kB_)","closed","in: data,","spring-projects-issues","2007-02-22T03:40:10Z","2019-01-11T17:36:36Z"
"","7705","Quartz 1.6/CronTriggerBean persistence problem [SPR-3019]","**[Eric Fletcher](https://jira.spring.io/secure/ViewProfile.jspa?name=irwinm)** opened **[SPR-3019](https://jira.spring.io/browse/SPR-3019?redirect=false)** and commented  The issue appears to be a compatibility issue between Quartz1.6 JDBCJobStore and Spring scheduling.  When using a CronTriggerBean to persist a cron trigger a DataTruncationExceptions is being thrown when attempting to insert the trigger.  The stack trace indicates that Quartz is trying to insert a new BlobTrigger instead of a CronTrigger.  The issue appears to be a change in how the org.quartz.impl.jdbcjobstore.StdJDBCDelegate checks to see what type of trigger is to be inserted.  The code for the check in the older(1.5.2) version is shown below:  [code] 1166            if (trigger instanceof SimpleTrigger) { 1167                ps.setString(10, TTYPE_SIMPLE); 1168            } else if (trigger instanceof CronTrigger) { 1169                ps.setString(10, TTYPE_CRON); 1170            } else { // (trigger instanceof BlobTrigger) 1171                ps.setString(10, TTYPE_BLOB); [/code]  In the older implementations of Quartz's org.quartz.impl.jdbcjobstore.StdJDBCDelegate, it was using an instanceof check to determine the trigger type.  That was fine, since CronTriggerBean subclasses CronTrigger.  In Quartz version 1.6, the  trigger type check is now relying on the getClass method, shown below:  [code] if (trigger.getClass() == SimpleTrigger.class) { ps.setString(10, TTYPE_SIMPLE); } else if (trigger.getClass() == CronTrigger.class) { ps.setString(10, TTYPE_CRON); } else { ps.setString(10, TTYPE_BLOB); } [/code]  In this case, the CronTriggerBean (or a SimpleTriggerBean) check is always going to return false, and Quartz is going to try to insert a BlobTrigger all the time, causing the data truncation exception.  There are a couple workarounds: -Use the Trigger directly as a Bean instead of using CronTriggerBean -Manually enter the trigger record to the database -swap in the Quartz 1.5.2 jars for the 1.6 jars, start the app and insert the trigger, then go back to 1.6(if desired).  I stumbled across the last one and it is what I have tested so far.  The other workarounds should work, but I haven't tested them.  This post also describes the issue: http://forum.springframework.org/showthread.php?t=33301  ---  **Affects:** 2.0 final  **Issue Links:** - #7537 Upgrade to Quartz 1.6.1 (for trigger persistence with SimpleTriggerBean and CronTriggerBean) (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2007-01-08T02:34:04Z","2019-01-12T16:51:49Z"
"","7147","MockMultipartFile and MockMultipartHttpServletRequest [SPR-2458]","**[Eric Crampton](https://jira.spring.io/secure/ViewProfile.jspa?name=ericcrampton)** opened **[SPR-2458](https://jira.spring.io/browse/SPR-2458?redirect=false)** and commented  To test my application controllers which use mulitpart files, I wrote two new classes which are nice counterparts to some of the other classes in 'mock', like MockHttpSession and MockHttpServlet(Request|Response). I'll attach the two .java files in a moment. They build fine in 2.0-rc3.   ---  **Affects:** 2.0 RC3  **Attachments:** - [MockMultipartFile.java](https://jira.spring.io/secure/attachment/11893/MockMultipartFile.java) (_2.64 kB_) - [MockMultipartHttpServletRequest.java](https://jira.spring.io/secure/attachment/11894/MockMultipartHttpServletRequest.java) (_1.23 kB_)","closed","type: enhancement,","spring-projects-issues","2006-08-22T02:18:01Z","2012-06-19T03:50:45Z"
"","7560","Use TRACE logging instead of DEBUG for the absolute nitty-gritties [SPR-2873]","**[Endre Stølsvik](https://jira.spring.io/secure/ViewProfile.jspa?name=stolsvik)** opened **[SPR-2873](https://jira.spring.io/browse/SPR-2873?redirect=false)** and commented  Given a developer situation: Much of the information in the spring-log is very un-interesting as long as it works. Some of these lines are however of much bigger importance than others.  TRACE and DEBUG are the two developer-centric logging levels of log4j and commons logging (the rest are ""prod settings""). Since log4j-1.2.12, TRACE have existed. Clogging have always had trace, but before release 1.1 mapped Log.trace to log4j's DEBUG, but 1.1 (released May 9. 2006) now maps to log4j's TRACE.  I think that Spring's logging would benefit a lot by using TRACE level extensively, in that developers could turn spring's logging down to DEBUG, but still see ""major developer events"" like instantiation of beans, and interceptions that 'hit' and such.  Candidates for TRACE level include: * ""CachedIntrospectionResults  - Found bean property"" * ""CollectionFactory  - Creating [java.util.LinkedHashMap]"" * BeanPostProcessings that doesn't result in anything - and also the default or custom init methods would benefit from just one line, tops. * ""AopUtils  - Candidate advisor"" that results in ""rejected for class"" * interceptors that _doesn't_ hit * .. Probably lots of others that doesn't bring the developer in the standard ""good flow mode"" any interesting information.  Please note that I do NOT view these lines as worthless. It is however in _normal_ developer circumstances not valuable information, and it would ease development if it was possible to turn these ultra-verbose loglines off. When things just aren't working out, and your nice interceptor doesn't hit (or whatever), you'd turn on TRACE to really get down to the hard core. You'd find the problem, fix it, and set it to DEBUG again.  In addition, the lines that were left on the DEBUG level should obviously be as informative as possible, and thus maybe somewhat more verbose than now, trying to ""aggregate"" some pieces of information that now are output over several DEBUG lines..  I do realize that I could achive a lot of this with a rather extensive log configuration, that also had to include raw text filters, but I do believe that this affects more developers than me!   ---  **Affects:** 2.0 final  3 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-11-24T00:55:55Z","2012-06-19T03:50:32Z"
"","7488","""adder"" injection in addition to ""setter"" (invoke addXX() instead of setXX()) [SPR-2801]","**[Endre Stølsvik](https://jira.spring.io/secure/ViewProfile.jspa?name=stolsvik)** opened **[SPR-2801](https://jira.spring.io/browse/SPR-2801?redirect=false)** and commented  This request is similar to bug ##5727, ""support ""add""-style List injection"", but suggests a more radical solution: Actual support for it in the spring beans xml-files: add-methods should be IoC-able in the same way as set-methods (and preferrably a mechanism to invoke any other method too, with any parameters).  As posted in: http://forum.springframework.org/showthread.php?t=31058  quoting: "" Several types of ""legacy beans"" have ""adder"" methods for some properties instead of ""setter"" methods. This doesn't disqualify them from being handled as beans, I feel, but I can't figure out how I may invoke such a method in the same way as a property-setter? I have to be able to invoke such a method several times, obviously.. ""  "" I'd like to do this in spring's xml config, preferrably w/o a lot of hacks: I've come to understand that the org.springframework.beans.factory.config.MethodInvokingFactoryBean is the most cited approach to this problem, which I find on the edge of ridiculous. I have this problem now with ActiveMQ, and I've had this problem with Jetty. Both have ""addSomething"": addConnector and addListener. ""  "" Jetty have its own style of ""IoC"" when it comes to configuration: in this file one may ""code in XML"" using \ and \ (in addition to \). I know this isn't as clean as Spring, but at least one may get things done both with legacy and proper ""IoC style"" beans then.. ""  Add elements to the bean element, something along the lines of:  \ \ [ You know the deal ] \ \ [ You know the deal ] \ \ [ Same semantics as  ] \  [ multiple invocations to the same name must be allowed ] \ \ [ Same semantics as  ] \  [ multiple invocations to the same name must be allowed ] \ \  There are hacks to overcome this, read the referred thread (using org.springframework.beans.factory.config.MethodInvokingFactoryBean w/o really using it!), but this is obviously a thing that comes up from time to time in the forums, and it would be great if such style of configuration was supported natively. (btw: At least jetty could possibly use spring instead of its own config parsing then!).  ---  **Affects:** 2.0 final  **Issue Links:** - #4961 Please improve BeanFactory support for containers & collections (_**""duplicates""**_)  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-11-04T02:03:35Z","2019-01-11T21:10:05Z"
"","7221","Provide DataFieldMaxValueIncrementer for Derby/JavaDB [SPR-2532]","**[Endre Stølsvik](https://jira.spring.io/secure/ViewProfile.jspa?name=stolsvik)** opened **[SPR-2532](https://jira.spring.io/browse/SPR-2532?redirect=false)** and commented  Provide DataFieldMaxValueIncrementer implementation for Apache Derby / Sun JavaDB, as enjoyed by DB2, HSQLDB, MySQL, Oracle and Postgres! This goes along with bug ##7166 ""SQLErrorCodes for Apache Derby database missing"".  Apache Derby will get more and more attention, I assume, given that Sun has selected that for its brand ""Java DB"": http://developers.sun.com/prodtech/javadb/  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7166 SQLErrorCodes for Apache Derby database missing","closed","type: enhancement,","spring-projects-issues","2006-09-04T00:53:40Z","2019-01-11T19:21:52Z"
"","7576","Potential deadlock in lazy-init FactoryBean instantiation [SPR-2888]","**[Ed Staub](https://jira.spring.io/secure/ViewProfile.jspa?name=estaub)** opened **[SPR-2888](https://jira.spring.io/browse/SPR-2888?redirect=false)** and commented  [While I have marked this Major, we have no urgent need for a fix - it just seemed important to the community.]  On thread 1:  DefaultSingletonBeanRegistry.getSingleton() gets SingletonCache lock, then indirectly calls AbstractBeanFactory.getObjectForBeanInstance(), which tries for FactoryBeanInstanceCache lock.  On thread 2, exactly the opposite:  AbstractBeanFactory.getObjectForBeanInstance() gets FactoryBeanInstanceCache lock, then indirectly calls DefaultSingletonBeanRegistry.getSingleton(), which tries for SingletonCache lock - DEADLOCK!  Detailed stack traces:  Thread ""Thread-2""`@3`,686 in group ""main"" status: MONITOR  -         getObjectForBeanInstance():958, org.springframework.beans.factory.support.AbstractBeanFactory   -         resolveInnerBeanDefinition():202, org.springframework.beans.factory.support.BeanDefinitionValueResolver   -         resolveValueIfNecessary():111, org.springframework.beans.factory.support.BeanDefinitionValueResolver   -         applyPropertyValues():955, org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory   -         populateBean():729, org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory   -         createBean():416, org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory   -         getObject():245, org.springframework.beans.factory.support.AbstractBeanFactory$1   -         getSingleton():141, org.springframework.beans.factory.support.DefaultSingletonBeanRegistry   -         getBean():242, org.springframework.beans.factory.support.AbstractBeanFactory   -         getBean():156, org.springframework.beans.factory.support.AbstractBeanFactory   -         getBean():642, org.springframework.context.support.AbstractApplicationContext   -         handleLookup():110, com.granite.mock.spring.MockContextFactory   Thread ""main""`@1` in group ""main"" status: MONITOR  -         getSingleton():115, org.springframework.beans.factory.support.DefaultSingletonBeanRegistry   -         getBean():187, org.springframework.beans.factory.support.AbstractBeanFactory   -         getBean():156, org.springframework.beans.factory.support.AbstractBeanFactory   -         createNewInstance():99, com.granite.mock.spring.EjbHomeFactoryBean   -         getObject():80, com.granite.mock.spring.EjbHomeFactoryBean   -         getObjectFromFactoryBean():994, org.springframework.beans.factory.support.AbstractBeanFactory   -         getObjectForBeanInstance():960, org.springframework.beans.factory.support.AbstractBeanFactory   -         getBean():256, org.springframework.beans.factory.support.AbstractBeanFactory   -         getBean():156, org.springframework.beans.factory.support.AbstractBeanFactory   -         getBean():642, org.springframework.context.support.AbstractApplicationContext   -         handleLookup():110, com.granite.mock.spring.MockContextFactory     ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-11-28T02:33:18Z","2012-06-19T03:50:42Z"
"","7665","this Pointcut not implemented correctly [SPR-2979]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-2979](https://jira.spring.io/browse/SPR-2979?redirect=false)** and commented  The Spring documentation says:  this - limits matching to join points (the execution of methods when using Spring AOP) where the bean reference (Spring AOP proxy) is an instance of the given type  However, instead of the Spring AOP proxy the target seems to be used. Using this and target for parameter binding works as expected (i.e. target gives the target and this the Spring AOP proxy) but the selection by type does not work.  Here is the code from the attached example. It uses a class that inherits from ImplBase and implements AnInterface. The proxy will only implement AnInterface. However, this(impl.ImplBase) matches the Proxy but you cannot assign it to ImplBase parameter in the doesNotWork()-method.      // Does not work because Spring AOP Proxy does not implement ImplBase     // just impl.AnInterface, you can try it by uncommenting the line below     //@Before(""within(impl.*) && this(para)"")     public void doesNotWork(ImplBase para) {         System.out.println(para.getClass());     }          // we get the proxy     @Before(""within(impl.*) && this(para)"")     public void getTheProxy(AnInterface para) {         System.out.println(para.getClass());     }               // But why does this work?     @Before(""this(impl.ImplBase)"")     public void shouldNotWork() {         System.out.println(""Should not work"");     }    ---  **Affects:** 2.0.1  **Attachments:** - [SpringAOPThisBug.zip](https://jira.spring.io/secure/attachment/12300/SpringAOPThisBug.zip) (_5.50 kB_)","closed","in: core,","spring-projects-issues","2006-12-23T22:59:15Z","2012-06-19T03:51:04Z"
"","6901","Spring cannot instantiate class modified by Aspect @DeclareParent [SPR-2211]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-2211](https://jira.spring.io/browse/SPR-2211?redirect=false)** and commented  Spring cannot instantiate a class in the DI container if the class was modified by AspectJ with `@DeclareParent` if the interface of the introduction declare a method that throws an exception. I attached a simple sample. I am not sure whether this is a bug in Spring or AspectJ. The Sample also includes the class files as AspectJ has compiled them.   ---  **Affects:** 2.0 RC1  **Attachments:** - [SpringDeclareParentsBug.zip](https://jira.spring.io/secure/attachment/11743/SpringDeclareParentsBug.zip) (_8.51 kB_)","closed","in: core,","spring-projects-issues","2006-06-28T03:57:39Z","2012-06-19T03:52:31Z"
"","6895","@DeclarePrecedence() Annotation [SPR-2205]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-2205](https://jira.spring.io/browse/SPR-2205?redirect=false)** and commented  Spring AOP should honor the `@DeclarePrecedence`() Annotation to offer bigger compatibilty with AspectJ.   ---  **Affects:** 2.0 RC1  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-06-27T06:07:42Z","2012-06-19T09:37:45Z"
"","6888","@AfterThrowing: No access to the exception  [SPR-2198]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-2198](https://jira.spring.io/browse/SPR-2198?redirect=false)** and commented  This code:  `@Aspect` public class ExceptionHandler {      private static int handled;          @AfterThrowing(pointcut=""execution(* service.*.*(..))"" , throwing=""ex"")     public void handleTransactionRolledbackLocalException(             TransactionRolledBackLocalException ex) {         System.out.println(""Exception "" + ex);     }  }  does not work with Spring AOP in Spring 2.0 RC 1. It works with AspectJ 5 and also this is documented in the Spring documentation. If you leave out the throwing it also works. There is also no Unit Test in RC 1 for this type of Advice. There is just a unit test without throwing. This is my Spring configuration:  \                            \  This is the stack trace:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myService' defined in class path resource [beans.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: Pointcut is not well-formed: expecting 'identifier' at character position 0  ^  Caused by: java.lang.IllegalArgumentException: Pointcut is not well-formed: expecting 'identifier' at character position 0  ^      at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:328)     at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:170)     at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:105)     at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:174)     at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:207)     at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:226)     at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:80)     at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:66)     at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:244)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:286)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:878)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:393)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:257)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:254)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:332)     at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:92)     at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:77)     at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:130)     at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:224)     at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:110)     at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:192)     at junit.framework.TestCase.runBare(TestCase.java:125)     at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69)     at junit.framework.TestResult$1.protect(TestResult.java:106)     at junit.framework.TestResult.runProtected(TestResult.java:124)     at junit.framework.TestResult.run(TestResult.java:109)     at junit.framework.TestCase.run(TestCase.java:118)     at junit.framework.TestSuite.runTest(TestSuite.java:208)     at junit.framework.TestSuite.run(TestSuite.java:203)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)    ---  **Affects:** 2.0 RC1","closed","in: core,","spring-projects-issues","2006-06-26T22:05:38Z","2012-06-19T03:52:29Z"
"","7849","AbstractDependencyInjectionSpringContextTests: private method 'injectDependencies' cannot be overriden [SPR-3163]","**[Duncan Doyle](https://jira.spring.io/secure/ViewProfile.jspa?name=mccloud)** opened **[SPR-3163](https://jira.spring.io/browse/SPR-3163?redirect=false)** and commented  The 'AbstractDependencyInjectionSpringContextTests' class has a private method called 'injectDependencies()'. The JavaDoc of this method claims that: [quote] *  \You can certainly override this method if you want to totally control * how dependencies are injected into 'this' instance.   [/quote]  However, a private method cannot be overridden. This feature is needed, for example, to manually inject a TransactionManager in an 'AbstractTransactionalSpringContextTests' class when the autowiring is set to NO ('onSetupBeforeTransaction()' of that class cannot be used for that purpose because it needs a TransactionManager to be executed). So, either the JavaDoc needs to be rewritten (for example, state that one has to override the 'prepareTestInstance()' method instead of the 'injectDependencies()' method) or the 'injectDependencies()' method needs to be declared 'protected'.  Kind regards,  Duncan   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-14T03:50:23Z","2012-06-19T03:50:13Z"
"","7415","Dealing with covariant properties in CachedIntrospectionResults [SPR-2727]","**[Dr. Christoph G. Jung](https://jira.spring.io/secure/ViewProfile.jspa?name=drcgjung)** opened **[SPR-2727](https://jira.spring.io/browse/SPR-2727?redirect=false)** and commented  I just stumbled over an issue when dealing with a reasonable Java5 feature, that is covariant method overrides.  Suppose you define a general access interface  public interface Foo { public Number getVersion(); }  and implement it in a bean like this (to my knowledge a really nice by-product of the lang spec extension that came with the introduction of Generics)  public class Bar implements Foo { private double version;  public Double getVersion() { return this.version; }  public void setVersion(Double theDouble) { this.version=theDouble; } }  the JavaBeans Introspector will upon reflecting Bar.class return a PropertyDescriptor for property ""version"" that has type ""java.lang.Number"", a read method java.lang.Number Bar.getVersion() and no write method! This leads to surprising NotWritablePropertyExceptions when trying to configure the Bar bean with Spring.  The attached patch would lead to a CachedIntrospectionResults version that still is conformant to JavaBeans, but can deal with those covariant properties with a (AFAICS) minimal processing overhead (one additional ""canonical"" getter lookup per asymetric propertydescriptor, another one for identifying the corresponding setter).  This would be really convenient and helpful (and I suppose there will be more such cases when dealing with generics in properties which can't be easily worked around by adding another getter/setter).  ---  **Affects:** 2.0 final  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/12037/patch.txt) (_2.51 kB_)  **Issue Links:** - #7570 Data Binding to Class Extending Abstract Class Uses Volatile Abstract Methods Instead of Overridden Final Method (_**""is depended on by""**_) - #9928 The parameter type of the setter should not need to match the return type of the getter (_**""is duplicated by""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-10-17T23:36:48Z","2019-01-11T21:03:06Z"
"","7081","Need disable attribute in form:select, form:options, and form:option [SPR-2392]","**[Douglas Surber](https://jira.spring.io/secure/ViewProfile.jspa?name=dsurber)** opened **[SPR-2392](https://jira.spring.io/browse/SPR-2392?redirect=false)** and commented  It would be very helpful to be able to disable options in the select list created by the form:select tag. For instance, my app has some moderately long option lists that can logically be separated in to sublists. A typical way to do that is to insert disabled options that label the sublists into the select list. Another use is to clearly indicate that an option exists but is not available in the particular context. If the user is asked to select from a list of user entered values some of which are not always valid, it is good to display the invalid values disabled so the user can see that they have already been entered. If they are not included in the list the user might attempt to enter them again.  The form:option tag is easy. Just expose the html disable attribute.  form:select and form:options are more difficult. My preference would be to add a disableIf attribute that takes an expression value. So    This presumes that the variable item is bound to each item in the list in turn. One could add a var attribute to name the bound variable I suppose. Seems excessive to me, but might be worthwhile for completeness.    ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-07T13:14:12Z","2012-06-19T03:50:26Z"
"","7080","form:option value="""" for Integer property causes bind error [SPR-2391]","**[Douglas Surber](https://jira.spring.io/secure/ViewProfile.jspa?name=dsurber)** opened **[SPR-2391](https://jira.spring.io/browse/SPR-2391?redirect=false)** and commented  I am using a form:select tag to select an Integer value. One of the possible options is label=""--"" value="""". This means none selected. In the domain model and the database this is represented as a null value. The ServletRequestDataBinder.bind is barfing resulting in a validation error. It is failing when the CustomNumberEditor tries to convert the empty string to an Integer, throwing NumberFormatException. CustomNumberEditor is able to convert """" to null, but it seems the one registered as the default is configured not to.  I can solve this by adding a CustomNumberEditor configured to support empty strings, but I'll have to register it for all the integer properties that I use. It seems like a bad thing to have to register a custom editor for the common case of coverting """" to (Integer) null in an options list.  I'm not sure what the correct fix would be. Having the default CustomNumberEditor handle empty strings. Having form:select register a CustomNumberEditor that handles empty strings for Integer properties (if it knows enough to do so), or something else. This is going to be a common case and having to register a property editor to make it work is a pain.  A little more detail to help you track down what is happening. PropertyTypeConverter.convertIfNecessary(String,Object, ...) is calling this.propertyEditor.Registry.getDefaultEditor which is returning a CustomNumberEditor. The CustomNumberEditor has been configured with empty = false. When it is asked to convert """" it calls Integer.decode which throws NumberFormatException. If the default CustomNumberEditor had been configured with empty = true, no problem. I have no idea whether that simple change would be a valid fix. It could cause other problems.    ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-07T12:59:46Z","2012-06-19T03:50:38Z"
"","6956","form:select selects everything [SPR-2267]","**[Douglas Surber](https://jira.spring.io/secure/ViewProfile.jspa?name=dsurber)** opened **[SPR-2267](https://jira.spring.io/browse/SPR-2267?redirect=false)** and commented  A form:select tag creates a select box where all items are selected, not just the correct one. This may appear as if just the last item is selected depending on the browser. Firefox 1.5 shows only the last item selected, but looking at the HTML source shows that every items includes selected=""selected"".  Problem is caused by a bug in SelectedValueComparator.exhaustiveCompare(Object., Object, PropertyEditor).      private static boolean exhaustiveCompare(Object value, Object candidate, PropertyEditor propertyEditor) {     	if (value instanceof LabeledEnum) {     		String enumCodeAtString = ObjectUtils.getDisplayString(((LabeledEnum) value).getCode());     		if (enumCodeAtString.equals(ObjectUtils.getDisplayString(candidate))) {     			return true;     		}     	}     	else if (ObjectUtils.getDisplayString(value).equals(ObjectUtils.getDisplayString(candidate))) {     		return true;     	}     	else if (propertyEditor != null && candidate instanceof String) {          		// try PE-based comparison (PE should *not* be allowed to escape creating thread)     		Object originalValue = propertyEditor.getValue();     		try {     			String candidateAsString = (String) candidate;     			propertyEditor.setAsText(candidateAsString);","closed","in: core,","spring-projects-issues","2006-07-09T12:38:21Z","2012-06-19T03:52:38Z"
"","6925","form:select not working when in tag file [SPR-2235]","**[Douglas Surber](https://jira.spring.io/secure/ViewProfile.jspa?name=dsurber)** opened **[SPR-2235](https://jira.spring.io/browse/SPR-2235?redirect=false)** and commented  The following works when placed directly in my jsp file.                                  but does not work when the exact same text is put in a .tag file and called from the jsp.                                  Note that the tag file is not even using the parameters. It fails in the same way when using the parameters instead of constant values. Without the call to escr:selectNumber the form renders correctly including rendering other escr namespace  tags. From the stack trace I am certain it is failing in the form:select tag.  Stack dump is  2006-07-04 08:24:16,750 ERROR [org.springframework.web.servlet.tags.form.SelectTag] - Neither Errors instance nor plain target object for bean name 'null' available as request attribute java.lang.IllegalStateException: Neither Errors instance nor plain target object for bean name 'null' available as request attribute at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:134) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:148) at org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.resolveCssClass(AbstractHtmlElementTag.java:502) at org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.writeDefaultAttributes(AbstractHtmlElementTag.java:479) at org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag.writeDefaultAttributes(AbstractHtmlInputElementTag.java:166) at org.springframework.web.servlet.tags.form.SelectTag.writeTagContent(SelectTag.java:179) at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:81) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:68) at org.apache.jsp.tag.web.registry.selectNumber_tag._jspx_meth_form_select_0(selectNumber_tag.java:129) at org.apache.jsp.tag.web.registry.selectNumber_tag.doTag(selectNumber_tag.java:99) at org.apache.jsp.WEB_002dINF.jsp.members.registrars.dogEdit_jsp._jspx_meth_escr_selectNumber_0(dogEdit_jsp.java:2201) at org.apache.jsp.WEB_002dINF.jsp.members.registrars.dogEdit_jsp._jspx_meth_form_form_0(dogEdit_jsp.java:909) at org.apache.jsp.WEB_002dINF.jsp.members.registrars.dogEdit_jsp._jspService(dogEdit_jsp.java:178) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:332) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:314) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:264) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:463) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:398) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:301) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:115) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:252) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1053) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:818) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:727) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:350) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:524) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:541) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.valves.RequestDumperValve.invoke(RequestDumperValve.java:150) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595)  By the way, the new form tags are outstanding. A big step forward for Spring and JSPs. Many thanks, Rob.    ---  **Affects:** 2.0 M5  **Attachments:** - [spring-form-tld-patch.txt](https://jira.spring.io/secure/attachment/11786/spring-form-tld-patch.txt) (_1.03 kB_) - [WrapperTag.java](https://jira.spring.io/secure/attachment/11787/WrapperTag.java) (_3.32 kB_)  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2006-07-04T04:51:03Z","2012-06-19T03:52:38Z"
"","7803","CLONE -RowMapper - mapRow method, rowNum does not need to be in the method signature [SPR-3116]","**[Dominik Kita](https://jira.spring.io/secure/ViewProfile.jspa?name=dominiknew)** opened **[SPR-3116](https://jira.spring.io/browse/SPR-3116?redirect=false)** and commented  While using mapRow method, I completelly was not using rowNum, framework automatically was scanning through rows. So why not to  overide this method with signature without rowNum, Object mapRow(ResultSet).   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-05T21:39:08Z","2007-02-05T21:41:40Z"
"","7796","RowMapper - mapRow method, rowNum does not need to be in the method signature [SPR-3109]","**[Dominik Kita](https://jira.spring.io/secure/ViewProfile.jspa?name=dominiknew)** opened **[SPR-3109](https://jira.spring.io/browse/SPR-3109?redirect=false)** and commented  While using mapRow method, I completelly was not using rowNum, framework automatically was scanning through rows. So why not to  overide this method with signature without rowNum, Object mapRow(ResultSet).   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-04T21:54:17Z","2007-02-05T23:50:28Z"
"","7157","Double escaping in form:input and form:textarea tags [SPR-2468]","**[Dolan Halbrook](https://jira.spring.io/secure/ViewProfile.jspa?name=dhalbrook)** opened **[SPR-2468](https://jira.spring.io/browse/SPR-2468?redirect=false)** and commented  I seem to be getting a double escaping issue where my form tags are escaping the ampersand from escaped entities like so:  \  so that what appears as the value of the form field is:  ""The Park"" - Martin Luther King Jr. Civic Center Park  instead of:  ""The Park"" - Martin Luther King Jr. Civic Center Park  I don't have ""defaultHtmlEscape"" set in web.xml -- I simply set ""htmlEscape"" to true in the tags. If I do set ""defaultHtmlEscape"" I get the same problem. If no escaping is turned on, the double quotes are directly written to the page and the tag breaks:    Has anyone else encountered this? So far I love the form tags, but this is a show stopper for me.  I have a thread open in the forums:  http://forum.springframework.org/showthread.php?t=28343  but nobody seems to be responding.   ---  **Affects:** 2.0 RC3  2 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2006-08-23T07:22:30Z","2012-06-19T03:50:21Z"
"","7002","Need the application context  tag to have a ""package"" property that would store the default package name for all the bean classes. The  tags class property can override this entry. [SPR-2313]","**[Doel Bose](https://jira.spring.io/secure/ViewProfile.jspa?name=doelbose)** opened **[SPR-2313](https://jira.spring.io/browse/SPR-2313?redirect=false)** and commented  Need the application context \ tag to have a ""package"" property that would store the default package name for all the bean classes. The \ tags class property can override this entry. This way any refactoring in package name would not affect multiple locations in the spring's application context   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-07-17T07:52:38Z","2012-06-19T09:37:38Z"
"","7428","Doc: aop proxy interceptor doesn't wrap bean's init-method [SPR-2740]","**[Dmitry V. Zemnitskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=zdv)** opened **[SPR-2740](https://jira.spring.io/browse/SPR-2740?redirect=false)** and commented  In our application we use well adopted architecture with business manager implementing business interface. Transaction proxy interceptor is wrapped around manager implementation to add declarative support of hibernate transactions.  In the same business manager which is application level singleton we wished to use init-method to check database and populate it with default bootstrap data (default system account, lookup data, etc).  What we noticed, is the transacton interceptor didn't wrap init-method even if it is included in proxy interface.  We solved this problem by creating another application level bean with init method which calls manager's method when initialized.  I think it is relatively common usecase and spring aop should either intercept init-methods as well, or if it's impossible for some architectural reason, just state this explicitly in spring documentation (lifecycle section or aop section).  Thanks, Dima   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-10-22T21:46:49Z","2012-06-19T03:50:13Z"
"","7664","Not able to use  in Jboss AS due to SAXParseException [SPR-2978]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-2978](https://jira.spring.io/browse/SPR-2978?redirect=false)** and commented  When deploying  Web-application (war) with bean definitions using ""jee"" namespace under Jboss, the following exception occures:  Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Line 10 in XML document from URL [jar:file:/usr/local/jboss/server/default/./tmp/deploy/tmp33025hotel24-frontend-dmitry-exp.war/WEB-INF/lib/hotel24-currency-convertor-0.0.1.jar!/com/hotel24/currency/Beans.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'jee:jndi-lookup'. at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:417)  The mentioned /com/hotel24/currency/Beans.xml is below: === cut ===  \  \                                                                                                                                                                                                                                  \ === cut ===  I tried to locale the file org/springframework/ejb/config/spring-jee-2.0.xsd from spring-context-2.0.1-sources.jar in any binary library, but I failed. Maybe that is a reason?  Please, give a hint, how this problem can be temporary solved. Thanks in advance.   ---  **Affects:** 2.0.1  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-12-23T11:19:23Z","2019-01-11T21:26:25Z"
"","7421","Improvement for handling checkboxes in web forms (patch included) [SPR-2733]","**[Dmitri Toubelis](https://jira.spring.io/secure/ViewProfile.jspa?name=dtoubelis)** opened **[SPR-2733](https://jira.spring.io/browse/SPR-2733?redirect=false)** and commented  The current implementation of dealing with checkboxes in web forms works well for simple backed objects like Type Boolean or String. In my case backend object is List of beans. And beans in that list needs to be updated rather then re-created. I also wrote a property editor for this object but it is only called if checkbox is checked, otherwise, the the backing object reset to null (I'm using this techchnic with hidden input fields). This is an example:    \      The problem lays with WebDataBinder.checkFieldMarkers(...) method - it re-sets fields that are not present in a form by making call to WebDataBinder.getEmptyValue(...) and the latter just sets missing value to null for anything but boolean.  I would suggest a better approach and this is a patch for WebDataBinder.java:  --- WebDataBinder_orig.java     2006-05-15 10:42:14.000000000 -0400 +++ WebDataBinder.java  2006-10-19 14:46:50.000000000 -0400 @@ -165,9 +165,8 @@ PropertyValue pv = pvArray[i]; if (pv.getName().startsWith(fieldMarkerPrefix)) { String field = pv.getName().substring(fieldMarkerPrefix.length());  ---      if (getPropertyAccessor().isWritableProperty(field) && !mpvs.contains(field)) {  -         Class fieldType = getPropertyAccessor().getPropertyType(field);  -         mpvs.addPropertyValue(field, getEmptyValue(field, fieldType));  +         if (!mpvs.contains(field)) {  +                                 mpvs.addPropertyValue(field, pv.getValue());                       }               }       }  In contrast to original one, this approach does not create empty object but rather lets property edirors deal with it. And I think this is right thing to do - binded should not be dealing with data type conversions at all. Certainly, with this approach the hidden input field should contain ""off"" value of the field as versus of ""just any"" value from before.  I realise that this fix might interfere with backward compatibility and the new tag library, but I'm pretty sure it cures more problems than it creats new ones at the end of the day :-) So, I hope you consider it for the nearest upcoming release of your outstanding framework ;-)  ---  **Affects:** 2.0 final  **Attachments:** - [WebDataBinder.patch](https://jira.spring.io/secure/attachment/12040/WebDataBinder.patch) (_653 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/61b54282110bf37827c4b1bb74d677c44dfe9455  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-10-19T06:40:33Z","2019-01-13T22:45:35Z"
"","7629","Unable to set Integer parameter for Jasperreports in views.properties [SPR-2943]","**[Dirk Schirmer](https://jira.spring.io/secure/ViewProfile.jspa?name=dsc)** opened **[SPR-2943](https://jira.spring.io/browse/SPR-2943?redirect=false)** and commented  I've just experienced the same problem as Matt Raible in #5901: I get a ClassCastException (String) for this view properties configuration:  simpleReport.exporterParameters[net.sf.jasperreports.engine.export.JRPdfExporterParameter.PERMISSIONS]=2052  Using Jasperrepors 1.2.7.  ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-12-12T21:42:18Z","2019-01-11T21:22:25Z"
"","6933","AbstractXsltView throws an IllegalArgumentException on Oracle IAS 10.1.2 [SPR-2243]","**[Dirk Grossmann](https://jira.spring.io/secure/ViewProfile.jspa?name=dirk_grossmann)** opened **[SPR-2243](https://jira.spring.io/browse/SPR-2243?redirect=false)** and commented  When using a subclass of AbstractXsltView, I get the exception:  java.lang.IllegalArgumentException at oracle.xml.jaxp.JXTransformer.setOutputProperty(JXTransformer.java:668) at org.springframework.web.servlet.view.xslt.AbstractXsltView.doTransform(AbstractXsltView.java:479) at org.springframework.web.servlet.view.xslt.AbstractXsltView.doTransform(AbstractXsltView.java:417) ...  The corresponding code line states      // Xalan-specific, but won't do any harm in other XSLT engines.     trans.setOutputProperty(""{http://xml.apache.org/xslt}indent-amount"", ""2"");  Unfortunately, it does harm. Could you please surround this with a try/catch block.   ---  **Affects:** 1.2.8","closed","type: bug,","spring-projects-issues","2006-07-06T02:00:11Z","2012-06-19T03:52:49Z"
"","7068","WebDataBinder w/FieldMarkerPrefix (used for checkboxes) doesn't work with IgnoreUnknownFields = false [SPR-2379]","**[Dimitry Voytenko](https://jira.spring.io/secure/ViewProfile.jspa?name=dvoytenko)** opened **[SPR-2379](https://jira.spring.io/browse/SPR-2379?redirect=false)** and commented  WebDataBinder w/FieldMarkerPrefix ('_') works very well for handling checkboxes, but the ""hidden"" checkbox parameters (e.g. ""_subscribeToNewsletter"") are not removed from the list of parameters after being processed. If the ""ignoreUnknownFields"" property is set to false on the binder this causes an error: Invalid property '_subscribeToNewsletter of bean class [...]: Nested property in path '_subscribeToNewsletter' does not exist; nested exception is org.springframework.beans.NotReadablePropertyException: ....  Would this be possible to remove ""_"" parameters before binding them after processing the checkboxes in case of ignoreUnknownFields=false?  Or have another property to customize this behavior?   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-03T04:07:48Z","2012-06-19T03:51:18Z"
"","7029","submitting a form fails when jcifs ntlm http authentication filter is used but works in m4 release [SPR-2340]","**[Dig Digger](https://jira.spring.io/secure/ViewProfile.jspa?name=diggerdig)** opened **[SPR-2340](https://jira.spring.io/browse/SPR-2340?redirect=false)** and commented  When using jcifs NTLM authentication it appears that the user credentials are lost when a form POST is submitted.  This problem only occured when moving from Spring 2.0 m4 to RC2.  A form submit error occurs early in the submit cycle. I have a an interceptor attached to SimpleUrlHandlerMapping but the request doesn't get as far as this interceptor. The actual error I get is a 404 - it fails to find my root tile. When I strip out the jcifs filter and/or roll back to the m4 release everything works fine.   ---  **Affects:** 2.0 RC2","closed","in: web,","spring-projects-issues","2006-07-24T19:51:11Z","2019-01-11T18:35:36Z"
"","7079","org.sprfr in HttpInvokerServiceExporter sample in  [SPR-2390]","**[Dick Lieber](https://jira.spring.io/secure/ViewProfile.jspa?name=dicklieber)** opened **[SPR-2390](https://jira.spring.io/browse/SPR-2390?redirect=false)** and commented  Code samples in chapter 17 are using org.sprfr.remoting.httpinvoker.HttpInvokerServiceExporter instead of org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-08-07T10:35:46Z","2012-06-19T03:51:05Z"
"","6892","a custom EntityInterceptor to decorate (apply decorator pattern) to Hibernate persisted objects [SPR-2202]","**[dharshana vanderbona](https://jira.spring.io/secure/ViewProfile.jspa?name=dharshanav)** opened **[SPR-2202](https://jira.spring.io/browse/SPR-2202?redirect=false)** and commented  I used the following class to decorate the domain objects persisted through hibernate... This class will return a instance of a dirived object which decorates the parent object. decoration map is configured through the entityMap parameter.  /* * CustomEntityInterceptor.java *  * Created on 26 June 2006, 08:09 *  *   */  package my.intercept;  import java.io.Serializable; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.util.HashMap; import java.util.Map; import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.hibernate.EmptyInterceptor; import org.hibernate.EntityMode; import org.hibernate.Transaction; import org.springframework.beans.BeansException; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware;  /** * Custom entity interceptor to wrap the generic objects  * with module specific custom objects  * `@author` DV   */   public class CustomEntityInterceptor   extends EmptyInterceptor implements ApplicationContextAware{    private Map  entityMap   = new HashMap();   private ApplicationContext  applicationContext  = null;   private Log log = LogFactory.getLog(CustomEntityInterceptor.class);    /**    * Creates a new instance of CustomEntityInterceptor     */     public CustomEntityInterceptor() {     }    public void afterTransactionBegin(Transaction tx) {   }    public String getEntityName(Object object) {   Class c = object.getClass().getSuperclass();   log.debug(""*********** Request entity name for ********* "" + object.getClass());   if(getEntityMap().containsKey(c.getCanonicalName())){   log.debug(""*********** Entity name found ********* "" + c.getCanonicalName());   return c.getCanonicalName();   }   log.debug(""*********** Entity name NOT found ********* "" + c.getCanonicalName());   return null;   }    public Map getEntityMap() {   return entityMap;   }    public void setEntityMap(Map entityMap) {   log.debug(""*********** Entity map ********* "" + entityMap);   this.entityMap = entityMap;   }    public Object instantiate(String entityName, EntityMode entityMode, Serializable id) {   if(getEntityMap().get(entityName)!= null){   String replaceEntityName    = getEntityMap().get(entityName);   Object replaceEntity    = applicationContext.getBean(replaceEntityName);             try {                       Class[] types   = new Class[] {Long.class};                Class[] types2  = new Class[] {long.class};                Object[] args   = new Object[]{id};                Method m        = null;                try {                    m = replaceEntity.getClass().getMethod(""setId"",types);                } catch (SecurityException ex) {                    log.debug(replaceEntityName,ex);                } catch (NoSuchMethodException ex) {                    try {                        m   = replaceEntity.getClass().getMethod(""setId"",types2);                    } catch (SecurityException ex2) {                        log.debug(replaceEntityName,ex2);                    } catch (NoSuchMethodException ex2) {                        log.debug(replaceEntityName,ex2);                    }                }                m.invoke(replaceEntity,args);                log.debug(""Successfully replaced entity from "" +                        entityName + "" to "" + replaceEntity.getClass());                return replaceEntity;            } catch (IllegalArgumentException ex) {                log.debug(replaceEntityName,ex);            } catch (InvocationTargetException ex) {                log.debug(replaceEntityName,ex);            } catch (IllegalAccessException ex) {                log.debug(replaceEntityName,ex);            }               }        return null;    }    public void setApplicationContext(ApplicationContext applicationContext)   throws BeansException {   this.applicationContext = applicationContext;   }  }   --- No further details from [SPR-2202](https://jira.spring.io/browse/SPR-2202?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-06-27T04:54:12Z","2012-06-19T09:37:45Z"
"","7591","MethodInvocationProceedingJoinPoint.proceed() can be called multiple times but proceed(Object[] args) cannot be called multiple times. [SPR-2904]","**[Derek Guist](https://jira.spring.io/secure/ViewProfile.jspa?name=dguist)** opened **[SPR-2904](https://jira.spring.io/browse/SPR-2904?redirect=false)** and commented  I've implemented some around advice to retry a transaction, very similar to the ConcurrentOperationExecutor example in the Spring AOP documentation.  Executing proceed() multiple times on the ProceedingJoinPoint (which is an instance of org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint) works just fine - the interceptors further down the chain (TransactionInterceptor in this case) get executed every time proceed is called.  However, calling proceed(Object[] args) multiple times does not work - the interceptors further down the chain are executed only the first time proceed(Object[] args) is called, but not on subsequent calls.  Looking at the source code for MethodInvocationProceedingJoinPoint, this seems to be because ReflectiveMethodInvocation.invocableClone() is called in the plain proceed() method, thus ensuring that the currentInterceptorIndex is preserved on each retry.  This cloning is not done in proceed(Object[] args), thus the currentInterceptorIndex is not preserved for the retry and subsequent interceptors are not invoked.  I didn't see anything indicating that proceed(Object[] args) was not intended to be called multiple times - is this a bug?  Can proceed(Object[] args) just call invocableClone() also?   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-01T10:51:14Z","2012-06-19T03:51:18Z"
"","7837","Allow ErrorsTag to optionally use div element instead of span [SPR-3151]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-3151](https://jira.spring.io/browse/SPR-3151?redirect=false)** and commented  ErrorsTag outputs errors within a \ element. It would be useful if it could be configured to output error messages within a \ element too.  Perhaps by adding an enclosingTag property, although a choice between span and div would be enough for my current needs.  This would be useful as I need to style block and inline error messages differently yet need to use the same css class name for both (to fit with JSR-168). If the ErrorsTag allowed one to set the enclosing tag, this could be achieved simply as follows:  \ div.portlet-msg-alert { border: 1px dashed red; color: red; clear: left; } span.portlet-msg-alert { color: red } \  ...  \ ...  \ \ \ \\ \ \                  --- No further details from [SPR-3151](https://jira.spring.io/browse/SPR-3151?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-02-12T01:06:17Z","2012-06-19T03:50:27Z"
"","7589","Spring form InputTag to support autocomplete=""off"" attribute [SPR-2901]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-2901](https://jira.spring.io/browse/SPR-2901?redirect=false)** and commented  Although the autocomplete=""off"" attribute is not part of the current XHTML spec, it is supported by popular browsers such as Firefox and MSIE. It is useful in situations where one wants input displayed echoed to user at time of entry (so password element is inappropriate) but one doesn't want the input redisplayed later by the browser in autocomplete suggestion lists (potentially to other users). Credit card number entry being a concrete example.  Would be useful if the Spring form InputTag allowed for including this attribute.  Perhaps via a boolean autocompleteDisabled property.  Given that output including this attribute would no longer be xhtml compliant, one would only expect it to be output if set.    ---  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-11-30T21:11:21Z","2012-06-19T03:50:45Z"
"","7586","InternalResourceView to expose a boolean forceInclude property. [SPR-2898]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-2898](https://jira.spring.io/browse/SPR-2898?redirect=false)** and commented  Would be handy if org.springframework.web.servlet.view.InternalResourceView exposed a boolean ""forceInclude"" property (default false) to force use of RequestDispatcher.include() instead of RequestDispatcher.forward().  then // If already included or response already committed, perform include, else forward. if (useInclude(request, response)) {  would become      // If forceInclude is true, already included or response already committed, perform include, else forward.     if (forceInclude || useInclude(request, response)) {    ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-29T22:22:53Z","2012-06-19T03:51:21Z"
"","7447","AbstractXsltView always uses response.getOutputStream() rather than response.getWriter()  [SPR-2760]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-2760](https://jira.spring.io/browse/SPR-2760?redirect=false)** and commented  Servlet 2.4 spec says this:  To send binary data in a MIME body response, use the  . To send character data, use the PrintWriter object returned by getWriter() . To mix binary and text data, for example, to create a multipart response, use a ServletOutputStream and manage the character sections manually.  AbstractXsltView:  Always writes its output to the ServletOutputStream returned by getOutputStream().  353 	protected void doTransform( 354 			Map model, Source source, HttpServletRequest request, HttpServletResponse response) 355 			throws Exception { 356 357 		doTransform(source, getParameters(request), 358 				new StreamResult(new BufferedOutputStream(response.getOutputStream())), 359 				response.getCharacterEncoding()); 360 	}  Matters to me as I have a Filter that applies a further XSLT transformation to output written to the PrintWriter returned by getWriter().  For reference, it is an elaboration of the example here: http://java.sun.com/products/servlet/Filters.html  AbstractXsltStream is inconsistent with the Servlet 2.4 spec. Maybe this isn't a bug, depends what you wanted to do. However, thought I'd seek an opinion before rewritting the Filter.   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-10-26T02:35:22Z","2012-06-19T03:50:05Z"
"","6945","JavaDoc still refers to removed method createDomNode in AbstractXsltView [SPR-2256]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-2256](https://jira.spring.io/browse/SPR-2256?redirect=false)** and commented  The outdated JavaDoc is pasted below. The createDomNode method appears to have been removed a while back.  On a related matter, I'm updating in existing project to use 2.0. The createDomNode method may have been deprecated but I think its removal puts into question the backwards compatibility to 1.x. This (now incorrect) JavaDoc would appear to agree with me. Since the createDomNode method has been removed it is not possible to use 2.0 as a drop in replacement for 1.x in every case. This is not a big problem but would be useful if all minor caveats such as this were listed and linked to from claims of backwards compatibility.      /**      * Return the XML Source to transform. Subclasses must implement      * either this method or createDomNode, which is      * retained only for backward compatibility.      * @param model the model Map      * @param root name for root element. This can be supplied as a bean property      * to concrete subclasses within the view definition file, but will be overridden      * in the case of a single object in the model map to be the key for that object.      * If no root property is specified and multiple model objects exist, a default      * root tag name will be supplied.      * @param request HTTP request. Subclasses won't normally use this, as      * request processing should have been complete. However, we might to      * create a RequestContext to expose as part of the model.      * @param response HTTP response. Subclasses won't normally use this,      * however there may sometimes be a need to set cookies.      * @return the XSLT Source to transform      * @throws Exception we let this method throw any exception; the      * AbstractXlstView superclass will catch exceptions      */     protected Source createXsltSource(     		Map model, String root, HttpServletRequest request, HttpServletResponse response)     		throws Exception {          	return null;     }    ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-07T00:11:44Z","2012-06-19T03:52:29Z"
"","7645","Incorrect dependency resolution when bean post processors are involved. [SPR-2958]","**[Deniz Oguz](https://jira.spring.io/secure/ViewProfile.jspa?name=denizoguz)** opened **[SPR-2958](https://jira.spring.io/browse/SPR-2958?redirect=false)** and commented  Spring could not resolve dependencies appropriately when bean post processors are involved. Steps to generate error: Define a simple bean, called:simpleBean Define 2 Bean Post Processors: PostProcessor1 and PostProcessor2. Generate a dependency from PostProcessor1 to simpleBean.  PostProcessor2 is a standalone bean with NO dependency. Expected condition is: simpleBean is available for post processing by PostProcessor2 bu not available for post processing by PostProcessor1. Actual behavior : simpleBean is not available for processing by both bean processors.   ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-12-17T18:53:15Z","2019-01-12T16:40:31Z"
"","7235","AbstractTransactionalDataSourceSpringContextTests.executeSqlScript can't handle comments [SPR-2546]","**[Denis McCarthy](https://jira.spring.io/secure/ViewProfile.jspa?name=dmccarthy)** opened **[SPR-2546](https://jira.spring.io/browse/SPR-2546?redirect=false)** and commented  It's often nice to have comments in sql dml files. I've slightly refactored AbstractTransactionDataSourceSpringContextTests.executeSqlScript so that it ignores space-only lines and lines beginning with //, -- or #. It also ignores mutli line javadoc like comments. There are the most common SQL comments allowed by databases in my experience.   ---  **Affects:** 2.0 RC3  **Attachments:** - [AbstractTransactionalDataSourceSpringContextTests.java.patch](https://jira.spring.io/secure/attachment/11939/AbstractTransactionalDataSourceSpringContextTests.java.patch) (_3.07 kB_) - [AbstractTransactionalDataSourceSpringContextTestsTests.java](https://jira.spring.io/secure/attachment/11941/AbstractTransactionalDataSourceSpringContextTestsTests.java) (_2.79 kB_) - [DummyAbstractTransactionalDataSourceSpringContextTests.java](https://jira.spring.io/secure/attachment/11940/DummyAbstractTransactionalDataSourceSpringContextTests.java) (_267 bytes_)","closed","type: enhancement,","spring-projects-issues","2006-09-06T08:17:25Z","2012-06-19T09:37:28Z"
"","7326","JBoss swallows cause runtimeexceptions in ejbCreate [SPR-2637]","**[Dejan Predovic](https://jira.spring.io/secure/ViewProfile.jspa?name=dpredovic)** opened **[SPR-2637](https://jira.spring.io/browse/SPR-2637?redirect=false)** and commented  We have a problem with ejbCreate time runtimeexceptions being swallowed by JBoss that logs only simple ""could not instantiate bean"" without showing the cause exception. This makes it very hard to troubleshoot AbstractStatelessSessionBean instances that do not load for some reason.  My quick fix for AbstractStatelessSessionBean is:  public void ejbCreate() throws CreateException { try { loadBeanFactory(); onEjbCreate(); } catch(RuntimeException e) { logger.error(""Error in ejbCreate() "", e); throw e; } }  I imagine one could leave it like that (the worst that can happen is that non-JBoss AS will log the exception twice) or one could log the exception only when ""additionalEjbCreateLogging"" flag is on.  I'm aware it's a JBoss problem, but I can't expect JBoss people to patch old versions we have to use for compatibility reasons (frankly, I don't expect them to patch this at all, but that's another story).   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-25T21:23:42Z","2012-06-19T09:37:36Z"
"","7834","Refactor jasperreports integration so that it is usable outside of web framework [SPR-3148]","**[Davide Baroncelli](https://jira.spring.io/secure/ViewProfile.jspa?name=baroncelli)** opened **[SPR-3148](https://jira.spring.io/browse/SPR-3148?redirect=false)** and commented  We are currently working to a standalone ""batch"" application which has to generate, print, ship via mail and save a number of reports via jasperreports. I am currently structuring it via Spring, and I hoped I could use some of the features for jasperreports integration. Unfortunately the integration seems web-based only, and using it outside of a web-based context requires performing a number of hacks (starting from a mock httpservletresponse) which feel awkward.  I think that the generic loading and processing functionality should be factored into non-web utility classes and made available for other uses (such as the batch pipeline we are creating).   ---  **Affects:** 2.0.2  **Attachments:** - [jasperreports.zip](https://jira.spring.io/secure/attachment/12705/jasperreports.zip) (_15.46 kB_)  3 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-11T23:07:11Z","2012-06-19T09:37:24Z"
"","7384","Different behaviour with multiline properties when using short or long form [SPR-2696]","**[Davide Baroncelli](https://jira.spring.io/secure/ViewProfile.jspa?name=baroncelli)** opened **[SPR-2696](https://jira.spring.io/browse/SPR-2696?redirect=false)** and commented  Not sure this is a Spring bug or some bizarre effect of the XML parsing, but we noticed that multiline properties don't really work well with the short form in the application context XML definition. For example, the following transaction attribute source does not work at all (without Spring telling us anything about it! we just deployed a version of our app where transactions did not really work...). This is especially dangerous since tools such as the ""IdeaSpring"" plugin suggest the shortest form as an automatic fix, and as such passing to the short version is extremely easy. BTW, don't know if this may be relevant (I hope not), but the encoding of our xml config is ISO-8859-1.          ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-10-08T19:15:50Z","2019-01-11T21:20:47Z"
"","7207","Spring should not complain if the user defines a bean with an alias already used in a previous definition of the same bean [SPR-2518]","**[Davide Baroncelli](https://jira.spring.io/secure/ViewProfile.jspa?name=baroncelli)** opened **[SPR-2518](https://jira.spring.io/browse/SPR-2518?redirect=false)** and commented  In our common configuration file we define a number of ""common"" beans, which may (or may not) be overridden by more specific application contexts: in one of those cases we have a bean defined as follows:  ...  which is later overridden by another definition of the same bean. Spring throws the following exception:  org.springframework.beans.factory.BeanDefinitionStoreException: Cannot register alias 'orderService' for bean name 'sfr.orderService': it's already registered for bean name 'sfr.orderService' at org.springframework.beans.factory.support.AbstractBeanFactory.registerAlias(AbstractBeanFactory.java:550) at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.registerBeanDefinition(BeanDefinitionReaderUtils.java:168) ...  I believe that in this case Spring should not complain, since the second definition is overriding the first one.   ---  **Affects:** 1.2.8, 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-31T03:42:22Z","2012-06-19T03:50:40Z"
"","7604","Avoid frequent bean introspection calls in case of Spring residing in the system class loader [SPR-2918]","**[david wilson](https://jira.spring.io/secure/ViewProfile.jspa?name=telebanking)** opened **[SPR-2918](https://jira.spring.io/browse/SPR-2918?redirect=false)** and commented  We seem to be having an issue with the CachedIntrospectionResults class. We run a large and very high traffic site that uses the Spring portlet MVC classes. At peak load times we have around 600 threads in any JVM waiting for the Java JDK class Introspector to return BeanInfo data. It would appear that the cached introspection results are being garbage collected and thus having to be be refreshed.  There was a design decision taken at the beginning of the project to have common jars such as the Spring bean classes at a shared library level using a classloader higher in the classloader hierarchy than the classloader used by each web application which are loading the MVC classes and the command classes used by the controllers. This appears to be causing the cache entries to be marked as not 'cache-safe'. As these are then stored in the cache as WeakReferences and the map is the only reference to the objects they seem to be being garbage collected.  I realize why WeakReferences were used but could the cache entries be normal references to prevent them being garbage collected and have the weak reference within the  CachedIntrospectionResults instance. This could be checked to see if the reference is still valid and removed from the cache if it isn't.  I have had to patch the class and always store a normal reference in the cache for now as it is really causing us performance issues. If you have already addressed this issue then please accept my apologies.  We do intend to fefactor our code and deployment stratagies so that the spring jars are at the same level in the classloader hierarchy at some time in the future which would to some extent alleviate this issue but would welcome any suggestion in the meantime.  Thanks David Wilson   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2006-12-06T01:24:34Z","2013-12-26T08:05:14Z"
"","7383","Distribution Javadocs are missing 2 test packages [SPR-2695]","**[david varnes](https://jira.spring.io/secure/ViewProfile.jspa?name=dvarnes)** opened **[SPR-2695](https://jira.spring.io/browse/SPR-2695?redirect=false)** and commented  The packages:  org.springframework.test.annotation org.springframework.test.jpa  are missing from the both distribution zip and the published site.   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-08T10:18:32Z","2012-06-19T03:51:20Z"
"","7761","DefaultMessageListenerContainer won't stop on JBoss 4.0.5 [SPR-3075]","**[David Svanberg](https://jira.spring.io/secure/ViewProfile.jspa?name=davsva)** opened **[SPR-3075](https://jira.spring.io/browse/SPR-3075?redirect=false)** and commented  Unable to stop the reader threads with the stop(), destroy(), and shutdown() methods of the DefaultMessageListenerContainer class. My MDP continues to retrieve messages.  See the following thread for more details: http://forum.springframework.org/showthread.php?p=96635   ---  **Affects:** 2.0.2  **Attachments:** - [spr3075_lnp.zip](https://jira.spring.io/secure/attachment/12365/spr3075_lnp.zip) (_6.48 MB_) - [springjms.log](https://jira.spring.io/secure/attachment/12364/springjms.log) (_6.46 kB_)","closed","in: messaging,","spring-projects-issues","2007-01-25T02:31:03Z","2019-01-11T16:41:53Z"
"","7539","Add parent beanfactory to XML configuration file [SPR-2852]","**[David Smiley](https://jira.spring.io/secure/ViewProfile.jspa?name=dsmiley)** opened **[SPR-2852](https://jira.spring.io/browse/SPR-2852?redirect=false)** and commented  Please add support for the Spring XML configuration files to specify a parent BeanFactory.  The right place for this would be an attribute of the \ tag named something like ""parent-beanfactory"", and it would take a path relative to the current config file.  I have to say, I'm surprised this isn't already supported by Spring.  Instead, I have to specify this in my code right now.  It would be nice if that configuration could be left in the configuration file, not in my code.  By the way... this enhancement would also make the Java code easier because I would be able to use ClassPathXmlApplicationContext instead of being forced to use GenericApplicationContext just because I want a parent-child relationship.   --- No further details from [SPR-2852](https://jira.spring.io/browse/SPR-2852?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-11-20T04:52:44Z","2006-11-21T02:51:09Z"
"","7448","Allow MethodName and MethodExclusion assemblers to use regexps for the method name specifications [SPR-2761]","**[David M. Karr](https://jira.spring.io/secure/ViewProfile.jspa?name=dkarr)** opened **[SPR-2761](https://jira.spring.io/browse/SPR-2761?redirect=false)** and commented  At the same time that I discovered bug #7442, I realized that it could be useful if both MethodExclusionMBeanInfoAssembler.java and MethodNameBasedMBeanInfoAssembler.java could understand method name specs as regular expressions. I also thought treating them as regexps shouldn't be the default.  In my workspace, I added a property named ""useMethodRegexps"" and implemented a check for it. I did this in both classes. I will attach the two classes, as modified in my workspace. Note that the package name is different.  Note in my implementation of  ""isNotIgnored(Method,String)"", I just use ""String.matches(String)"" instead of a more performant, but more complicated, implementation using cached Pattern objects. I did it this way because it's likely this code would only be executed at application startup.  ---  **Attachments:** - [MethodExclusionMBeanInfoAssembler.java](https://jira.spring.io/secure/attachment/12066/MethodExclusionMBeanInfoAssembler.java) (_5.83 kB_) - [MethodNameBasedMBeanInfoAssembler.java](https://jira.spring.io/secure/attachment/12067/MethodNameBasedMBeanInfoAssembler.java) (_5.63 kB_)","closed","type: enhancement,","spring-projects-issues","2006-10-26T03:18:00Z","2019-01-11T21:00:34Z"
"","7442","The MethodExclusionMBeanInfoAssembler.isNotIgnored(Method,String) method returns the wrong value if ignoredMethods is null. [SPR-2754]","**[David M. Karr](https://jira.spring.io/secure/ViewProfile.jspa?name=dkarr)** opened **[SPR-2754](https://jira.spring.io/browse/SPR-2754?redirect=false)** and commented  I first set up my mbean exporter with the default assembler and a set of beans to explore.  That seemed to work fine, showing all the public properties and methods of the beans.  I then added a MethodExclusionMBeanInfoAssembler as the assembler, and I set a ""ignoredMethodMappings"" value that just referenced one bean name, and 2 methods of that bean.  I did NOT set the ""ignoredMethods"" property at all.  When I connected again through my jmx browser, all the beans were still available, but I could not see any methods or properties on any of them.  I then inspected the source code for MethodExclusionMBeanInfoAssembler in version 1.2.8.  The method ""isNotIgnored(Method,String)"", which appears to be the method where the ""ignoredMethods"" and ""ignoredMethodMappings"" data is referenced, consists of the following:  ---      protected boolean isNotIgnored(Method method, String beanKey) {     	if (this.ignoredMethodsMappings != null) {     		Set methodNames = (Set) this.ignoredMethodsMappings.get(beanKey);     		if (methodNames != null) {     			return ! methodNames.contains(method.getName());     		}     	}     	return (this.ignoredMethods != null && ! this.ignoredMethods.contains(method.getName())); // wrong     }  ---  I did not step through this code in the debugger, but I can see that if I call this with a method and bean that is not mentioned in my ""ignoredMethodMappings"" list, then the return value will be ""false"". This is because of the last return statement. If ""ignoredMethods"" is null, the value will be false.  The following is an attempted informal patch to this problem:  ---      protected boolean isNotIgnored(Method method, String beanKey) {        boolean result = true;     	if (this.ignoredMethodsMappings != null) {     		Set methodNames = (Set) this.ignoredMethodsMappings.get(beanKey);     		if (methodNames != null) {     			result   = ! methodNames.contains(method.getName());     		}     	}     	if (this.ignoredMethods != null)           result  = ! this.ignoredMethods.contains(method.getName()));       return (result);     }  ---  ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","in: core,","spring-projects-issues","2006-10-25T03:56:50Z","2019-01-13T22:45:30Z"
"","7389","Improve HibernateTemplate for avoiding LazyInitializationException on non web application [SPR-2701]","**[David Leal Valmaña](https://jira.spring.io/secure/ViewProfile.jspa?name=dleal)** opened **[SPR-2701](https://jira.spring.io/browse/SPR-2701?redirect=false)** and commented  Dear Sr,  On my proyect I face all the time with the problem about LazyInitializationException, when inverse=""true"" on collection, when navegating from the inverse side. I don't have a web tier, so I can't use:  http://www.springframework.org/docs/api/org/springframework/orm/hibernate/support/OpenSessionInViewInterceptor.html  as you always recomend as solution for that (Open Session in View pattern). A similar problem occurs under testing, as it is documented on the article:  http://today.java.net/pub/a/today/2005/10/11/testing-hibernate-mapping.html?page=1  My suggestion is why not to implement a solution also valid for non web application. I am ussing some time the same solution about binding the resource (bindingResource) and relaseSession methods from: TransactionSynchronizationManager, some times to get the desired effect I have to assume on my business tier that I am using Hibernate because that, otherwise I have to create a lot of superfluous method on data tier that doesn't really apply for other Object-Relational Mapping.  Now I am solving the problem, invoking a query that returns the inverse relationship, the a I get a persistence collection, but I more queries than necessary and queries a need only because I can't navigate throw two consecutive associations for example.  Thanks in advance,  David   ---  **Affects:** 1.2.8","closed","type: enhancement,","spring-projects-issues","2006-10-09T09:19:11Z","2012-06-19T09:37:35Z"
"","7026","Place holder subsitution fails for hibernateProperties [SPR-2337]","**[David Leal Valmaña](https://jira.spring.io/secure/ViewProfile.jspa?name=dleal)** opened **[SPR-2337](https://jira.spring.io/browse/SPR-2337?redirect=false)** and commented  Dear Sr,  I have detected that with the same configuration that works under Spring 1.2.6/1.2.8 it fails for Spring 2.0cr2, the problem comes with the placeholders for hibernateProperties creating an instance for: org.springframework.orm.hibernate3.LocalSessionFactoryBean  NOTE: I know there is a similar bug reported but for Milestone 2. Probably it was partially resolved.  I am using this configuraiton:  ---  \ \ Configurer that replaces ${...} placeholders with values from properties files \ \ \ \classpath:applicationContext.properties\ \classpath:templateReportNames.properties\ \ \ \           	 Definition of the Hibernate Session Factory, you can add more properties in     		order to get fine tuning of the Hibernate Session. Here we provide the list of hibernate     		mapping files.      	     		     	     	     	     		mapping     	     	     	     		     			${hibernate.show_sql}     			${hibernate.max_fetch_depth}     			false     			false     			${hibernate.dialect}     			false     			false     			true     			true     		     	       ---  and the exception is:  ---  [2006-49-24 05:49,  3406]ERROR[org.hibernate.util.JDBCExceptionReporter] -  [2006-49-24 05:49,  3406]WARN [org.hibernate.cfg.SettingsFactory] - \ org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class '${db.driverClassName}' at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:766) at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:540) at org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider.getConnection(LocalDataSourceConnectionProvider.java:81) at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:76) at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:1933) at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1216) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.newSessionFactory(LocalSessionFactoryBean.java:871) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:797) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:908) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:875) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:396) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:237) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:153) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:225) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:114) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:801) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:237) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:153) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:225) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:114) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:801) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:237) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:153) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:225) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:114) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:801) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:592) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:392) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:132) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:237) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:153) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:612) at com.schinvest.lra.business.batch.BatchCaller.raiseContext(BatchCaller.java:930) at com.schinvest.lra.business.batch.BatchCaller.loadCommonConfig(BatchCaller.java:361) at com.schinvest.lra.business.batch.BatchCaller.analyzeInputArgs(BatchCaller.java:322) at com.schinvest.lra.business.batch.BatchCaller.main(BatchCaller.java:243) Caused by: java.lang.ClassNotFoundException: ${db/driverClassName} at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:141) at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:760) ... 46 more  ---  my applicationContext.properties files is:  ---  #Mon Jul 24 17:03:32 CEST 2006 db.password=dev00 objectPropertiesQuery=SELECT CHILD.ID, CHILD.OBJECT_IDENTITY, CHILD.ACL_CLASS, PARENT.OBJECT_IDENTITY as PARENT_OBJECT_IDENTITY FROM lra_acl_object_identity as CHILD LEFT OUTER JOIN lra_acl_object_identity as PARENT ON CHILD.parent_object\=PARENT.id WHERE CHILD.object_identity \= ? usersByUsernameQuery=SELECT username,password,enabled FROM lra_users WHERE username \= ? db.username=dev authoritiesByUsernameQuery=SELECT username,authority FROM lra_authorities WHERE username \= ? hibernate.cache.use_second_level_cache=true hibernate.show_sql=false hibernate.transaction.flush_before_completion=true lookupPermissionIdQuery=SELECT id FROM lra_acl_permission WHERE lra_acl_object_identity \= ? AND recipient \= ? hibernate.generate_statistics=false aclsByObjectIdentityQuery=SELECT RECIPIENT, MASK FROM lra_acl_permission WHERE acl_object_identity \= ? hibernate.cache.use_query_cache=true hibernate.max_fetch_depth=3 db.driverClassName=org.gjt.mm.mysql.Driver aclObjectIdentityInsertStatement=INSERT INTO lra_acl_object_identity (object_identity, parent_object, acl_class) VALUES (?, ?, ?) db.url=jdbc:mysql://localhost/lra hibernate.use_sql_comments=false aclPermissionInsertStatement=INSERT INTO lra_acl_permission (acl_object_identity, recipient, mask) VALUES (?, ?, ?) aclObjectIdentityDeleteStatement=DELETE FROM lra_acl_object_identity WHERE id \= ? hibernate.cache.use_structured_entries=true hibernate.mappingDirectoryLocations=mapping aclPermissionUpdateStatement=UPDATE lra_acl_permission SET mask \= ? WHERE id \= ? hibernate.dialect=org.hibernate.dialect.MySQLDialect aclPermissionDeleteStatement=DELETE FROM lra_acl_permission WHERE acl_object_identity \= ? AND recipient \= ?  ---  I don't get this exception under Spring 1.2.8 and 1.2.6  Thanks,  David  ---  **Affects:** 2.0 RC2  **Attachments:** - [spr2337-tests.zip](https://jira.spring.io/secure/attachment/12334/spr2337-tests.zip) (_3.97 kB_)","closed","in: core,","spring-projects-issues","2006-07-24T02:56:36Z","2019-01-13T22:46:58Z"
"","6922","Properties Editor for ResourceBundle [SPR-2232]","**[David Leal Valmaña](https://jira.spring.io/secure/ViewProfile.jspa?name=dleal)** opened **[SPR-2232](https://jira.spring.io/browse/SPR-2232?redirect=false)** and commented  Just to suggest adding a Properties Editor for ResourceBundles.   ---  **Affects:** 2.0 RC1  **Attachments:** - [ResourceBundleEditor.java](https://jira.spring.io/secure/attachment/11780/ResourceBundleEditor.java) (_2.76 kB_) - [TestResourceBundleEditor.java](https://jira.spring.io/secure/attachment/11781/TestResourceBundleEditor.java) (_3.33 kB_)","closed","type: enhancement,","spring-projects-issues","2006-07-03T22:37:16Z","2012-06-19T03:52:50Z"
"","7711","http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/web/util/Log4jConfigListener.html not found [SPR-3025]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3025](https://jira.spring.io/browse/SPR-3025?redirect=false)** and commented  Missing JavaDoc @ springsite:  http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/web/util/Log4jConfigListener.html  does not exist   ---  **Affects:** 2.0.1, 2.0.2","closed","","spring-projects-issues","2007-01-10T01:21:47Z","2019-01-11T16:39:01Z"
"","7709","java.lang.NoClassDefFoundError: org/springframework/beans/factory/support/ConfigurableBeanFactoryUtils [SPR-3023]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3023](https://jira.spring.io/browse/SPR-3023?redirect=false)** and commented  I'm extending AbstractDependencyInjectionSpringContextTests for easier Junit's, but the class  java.lang.NoClassDefFoundError: org/springframework/beans/factory/support/ConfigurableBeanFactoryUtils  cannot seem to be found anywhere. has this class been refactored into org.springframework.context ???   ---  **Affects:** 2.0.1, 2.0.2","closed","","spring-projects-issues","2007-01-09T05:30:51Z","2019-01-11T16:38:45Z"
"","7385","LocalSessionFactoryBean.buildSessionFactory call to updateDatabaseSchema always fails in Spring 2.0 final [SPR-2697]","**[David Hewitt](https://jira.spring.io/secure/ViewProfile.jspa?name=dhewitt)** opened **[SPR-2697](https://jira.spring.io/browse/SPR-2697?redirect=false)** and commented  Just upgraded from 2.0-RC2 to 2.0-Final. The refactoring of LocalSessionFactoryBean to introduce an Abstract baseclass seems to have broken the call to updateDatabaseSchema on initialisation. This means that setting schemaUpdate to true always causes a failure on startup.  Previously the SessionFactory was created entirely within the afterPropertiesSet method, at the end of which updateDatabaseSchema was called.  However, now the behaviour is as follows:  AbstractSessionFactoryBean: public void afterPropertiesSet() throws Exception { SessionFactory rawSf = buildSessionFactory(); this.sessionFactory = wrapSessionFactoryIfNecessary(rawSf); }  LocalSessionFactoryBean: protected SessionFactory buildSessionFactory() throws Exception { SessionFactory sf = null;                  ...          	// Execute schema update if requested.     	if (this.schemaUpdate) {     		updateDatabaseSchema();     	}          	return sf;     }  LocalSessionFactoryBean: public void updateDatabaseSchema() throws DataAccessException { logger.info(""Updating database schema for Hibernate SessionFactory""); HibernateTemplate hibernateTemplate = new HibernateTemplate(getSessionFactory()); ... }  AbstractSessionFactoryBean: protected final SessionFactory getSessionFactory() { if (this.sessionFactory == null) { throw new IllegalStateException(""SessionFactory not initialized yet""); } return this.sessionFactory; }  At which point an ""java.lang.IllegalStateException: SessionFactory not initialized yet"" is thrown every time. This is because the call to getSessionFactory() happens as part of updatedDatabaseSchema(), which is called from buildSessionFactory() - which has not yet returned, and therefore the sessionFactory has not been assigned yet. Possibly the sessionFactory ""sf"" in the buildSessionFactory method should be passed as an argument to updateDatabaseSchema.    ---  **Affects:** 2.0 final","closed","status: duplicate,","spring-projects-issues","2006-10-08T22:28:18Z","2019-01-12T16:51:56Z"
"","7149","Helper Class for Automatic Ordering of Hibernate Mapping Files [SPR-2460]","**[David Hewitt](https://jira.spring.io/secure/ViewProfile.jspa?name=dhewitt)** opened **[SPR-2460](https://jira.spring.io/browse/SPR-2460?redirect=false)** and commented  Attached to this report is a simple helper class that, given a list of mapping file resources, automatically sorts them into the order required by hibernate for it's class/subclass hierarchy.  This lets you define your SessionFactory with the following:  \ ... \ \ \ \ \ \   ---  **Attachments:** - [HibernateMappingLocator.java](https://jira.spring.io/secure/attachment/11895/HibernateMappingLocator.java) (_8.27 kB_)","closed","type: enhancement,","spring-projects-issues","2006-08-22T03:23:41Z","2012-06-19T09:37:32Z"
"","7097","Automatic provision of hot-reloadable beans using GroovyScriptFactory [SPR-2408]","**[David Hewitt](https://jira.spring.io/secure/ViewProfile.jspa?name=dhewitt)** opened **[SPR-2408](https://jira.spring.io/browse/SPR-2408?redirect=false)** and commented  Since java source is (supposedly) 100% groovy compatible, it is possible to use java source files as groovy scripts. I propose a BeanPostProcessor that automatically converts a given BeanDefinition into a GroovyScriptFactory by looking up the source for the configured bean class in a predefined set of locations. At development time, this gives the potential for real hot-reloading of (spring-managed) java code, even if that code has been proxied.  Basic implementation is attached to this report, along with an example config.  Some caveats: * I suspect this won't work unless your bean implements at least one interface, but I've not tried it with CGLib * You cannot supply your bean with constructor arguments * You probably won't be able to remote debug the code    ---  **Affects:** 2.0 RC3  **Attachments:** - [AutoScriptBeanPostProcessor.java](https://jira.spring.io/secure/attachment/11881/AutoScriptBeanPostProcessor.java) (_7.97 kB_)","closed","type: enhancement,","spring-projects-issues","2006-08-11T02:52:52Z","2012-06-19T09:37:29Z"
"","7115","Portlet: AbstractCommandController should allow command-in-session to be optional [SPR-2426]","**[David Hay](https://jira.spring.io/secure/ViewProfile.jspa?name=dhay)** opened **[SPR-2426](https://jira.spring.io/browse/SPR-2426?redirect=false)** and commented  When processing an action request in a portlet, the AbstractCommandController and AbstractFormController classes insist on storing the command object in the portlet session.  I'd like to make this operation optional.  In my case, I only do minimal processing during the action phase and I pass all the parameters to the render phase, where I want to create a new command object each time, rather than pull one out of the session...which might be stale (i.e. if the user hit the browser's back button and then refresh)   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-08-14T07:09:20Z","2012-06-19T09:37:25Z"
"","7485","Documentation ""bug"" in section 12.2.2. [SPR-2798]","**[David Ha](https://jira.spring.io/secure/ViewProfile.jspa?name=deridex)** opened **[SPR-2798](https://jira.spring.io/browse/SPR-2798?redirect=false)** and commented  In section 12.2.2, the XML application context specifies an HSQLDB connection string to the database but the Hibernate session factory has a MySQLDialect.  It's a minor inconsistency.   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-03T09:01:34Z","2012-06-19T03:50:19Z"
"","7030","Ability to apply aspects to exported objects [SPR-2341]","**[David Geary](https://jira.spring.io/secure/ViewProfile.jspa?name=david_geary)** opened **[SPR-2341](https://jira.spring.io/browse/SPR-2341?redirect=false)** and commented  Enchance RemoteExporter to allow aspects / interceptors to be applied.  This would allow configuration such as  \ \ \ \ \ \ \  \ 		\ 		\ \ \ 	\ 	\ \ This would allow all beans remotely exported (http / rmi) etc to have aspects applied, for example for setting up logging or security contexts. These aspects only apply to the start of the remote call and not if one service bean calls another, so its more concise to do it like this than set up proxies for each bean that are only used when they are passed to the exporter.   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-24T22:04:46Z","2012-06-19T09:37:36Z"
"","7549","Throwing a RuntimeException before any database work is done causes TransactionSystemException on JBoss [SPR-2862]","**[David D. Kilzer](https://jira.spring.io/secure/ViewProfile.jspa?name=ddkilzer)** opened **[SPR-2862](https://jira.spring.io/browse/SPR-2862?redirect=false)** and commented  Throwing a RuntimeException in a method in a proxied object before any database activity occurs causes a TransactionSystemException to be thrown when Spring attempts to roll back a transaction that hasn't started yet.  Stack trace:  org.springframework.transaction.TransactionSystemException: Could not roll back Hibernate transaction; nested exception is org.hibernate.TransactionException: JDBC rollback failed org.hibernate.TransactionException: JDBC rollback failed at org.hibernate.transaction.JDBCTransaction.rollback(JDBCTransaction.java:150) at org.springframework.orm.hibernate3.HibernateTransactionManager.doRollback(HibernateTransactionManager.java:603) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:583) at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:560) at org.springframework.transaction.interceptor.TransactionAspectSupport.doCloseTransactionAfterThrowing(TransactionAspectSupport.java:285) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:100) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176) [...] Caused by: java.sql.SQLException: rollback() should not be called while in auto-commit mode. at net.sourceforge.jtds.jdbc.ConnectionJDBC2.rollback(ConnectionJDBC2.java:1989) at org.jboss.resource.adapter.jdbc.BaseWrapperManagedConnection.jdbcRollback(BaseWrapperManagedConnection.java:535) at org.jboss.resource.adapter.jdbc.WrappedConnection.rollback(WrappedConnection.java:460) at org.hibernate.transaction.JDBCTransaction.rollbackAndResetAutoCommit(JDBCTransaction.java:163) at org.hibernate.transaction.JDBCTransaction.rollback(JDBCTransaction.java:142) ... 54 more  In trying to reproduce this locally, it seems that the JBoss resource adapter may be the source of the problem because I can't get the problem to reproduce wihtout running it under JBoss.  This code, if created within a proxied object, should have reproduced the error:      @Transactional     public void myTransactionalProxiedMethod() {     	throw new RuntimeException(""No database access has occurred yet."");     }    ---  **Affects:** 1.2.8","closed","status: declined,","spring-projects-issues","2006-11-21T10:53:27Z","2019-01-12T16:40:34Z"
"","7852","TransactionAwareConnectionFactoryProxy does not need to commit - it should wait for the outer transaction [SPR-3166]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3166](https://jira.spring.io/browse/SPR-3166?redirect=false)** and commented  TransactionAwareConnectionFactoryProxy does not need to commit - it should wait for the outer transaction.  In fact all that is needed is to add ""commit"" to the list of methods that are skipped by the interceptor, i.e. (in invoke):      else if (method.getName().equals(""commit"")) {          // Handle commit method: not to be committed within a transaction.          return null;     }  The session will be committed by the TransactionSynchronization that is registered by the jms ConnectionFactoryUtils.  I will attach a test case.   ---  **Affects:** 2.0.2  **Attachments:** - [SPR-3166.zip](https://jira.spring.io/secure/attachment/12387/SPR-3166.zip) (_11.88 kB_)","closed","type: enhancement,","spring-projects-issues","2007-02-14T20:58:50Z","2012-06-19T03:50:23Z"
"","7842","Docos (or maybe assertion in code) to help with using DefaultMessageListenerContainer with non-XA transaction manager [SPR-3156]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3156](https://jira.spring.io/browse/SPR-3156?redirect=false)** and commented  Docos (or maybe assertion in code) to help with using DefaultMessageListenerContainer with non-XA transaction manager.  It is actually quite plausible (and common) to use a DefaultMessageListenerContainer with a DataSourceTransactionManager (not full XA).  Then database work done in the listener can rollback, but will guarantee a message rollback **only** if transactedSession=true.  If the flag is true the worst that can happen is a duplicate message if the database commits, and the commit of the JMS session fails (power failure etc.).  But the default is false, so you can get duplicate messages whatever happens with the datasource.  It would help if the docos mentioned this scenario, or provided some protection (e.g. if the transaction manager is not JtaTranasactionManager, then make sure transactedSession=true).   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-13T00:32:15Z","2019-01-11T17:35:02Z"
"","7841","Docos for MessageListenerContainer instances are confusing concerning rollback behaviour. [SPR-3155]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3155](https://jira.spring.io/browse/SPR-3155?redirect=false)** and commented  Docos for MessageListenerContainer instances are confusing concerning rollback behaviour.  I thought when I first read about it that I would have to mess around with the exception handler to get a rollback.  But actually it is handled by the container.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-13T00:24:51Z","2012-06-19T03:51:01Z"
"","7840","AbstractMessageListenerContainer listener should not be mandatory if autoStartup=false [SPR-3154]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3154](https://jira.spring.io/browse/SPR-3154?redirect=false)** and commented  An AbstractMessageListenerContainer cannot be created without a listener, even if autoStartup=false.  It would make more sense ifI can't **start** a container without a listener, but I should be able to create one, and set the listener later, before I start.  ---  **Affects:** 2.0.2  **Issue Links:** - #7994 AbstractJmsListeningContainer should not create a shared JMS connection if autoStartup is false  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-13T00:22:03Z","2019-01-11T17:35:09Z"
"","7714","Global Errors are clumsy to bind and display in JSP [SPR-3028]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3028](https://jira.spring.io/browse/SPR-3028?redirect=false)** and commented  With Spring 2.0 the addition of form:errors makes rendering field specific errors really nice.  But to display global errors (registered with BindException.reject(String,String)) is clumsy by comparison (and no docos in reference guide to help).  E.g. we do this:     \\\ \ \  Where this would be a convenient shorthand:    (See also #5629.)  ---  **Affects:** 2.0.2  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-10T22:36:45Z","2019-01-11T16:38:56Z"
"","7703","LookupOverride only works for methods with no arguments [SPR-3017]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3017](https://jira.spring.io/browse/SPR-3017?redirect=false)** and commented  Actually it used to work before 2.0, but now there is an explicit check in LookupOverride.matches.  I can see why it is there sort of, but if there are no overloaded methods and only one matches and it happens to have some arguments, why shouldn't it match?   ---  **Affects:** 2.0.1  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-06T23:50:02Z","2019-01-11T16:32:25Z"
"","7650","Change a lookup-method with a placeholder configurer [SPR-2964]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-2964](https://jira.spring.io/browse/SPR-2964?redirect=false)** and commented  Currently you can't change a lookup-method with a placeholder (e.g. PropertyPlaceholderConfigurer).  Example (fails):                                                      		newsFeed     	       The reason it doesn't work (I think) is that the BeandDefinitionVisitor that hits the bean definition to do property replacements simply doesn't visit the methodOverrides.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-12-19T02:04:02Z","2012-06-20T01:09:03Z"
"","7566","Scripts do not expose non-interface methods on refreshable proxy (for invocation via reflection) [SPR-2902]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-2902](https://jira.spring.io/browse/SPR-2902?redirect=false)** and commented  It's a bit like #7572.  MethodInvoker **could** look at its targetObject and treat it differently if it is a Proxy (or an Advised), but it doesn't.  The result is that it can't find the method you ask it to invoke, even if it exists in the target object.  A fix would be to inspect the targetObject in MethodInvoker.findMatchingMethod(), and if it is Advised then use ((Advised)targetObject).getTargetSource().getTarget() instead of targetObject.  Anything wrong with that?  ---  **Affects:** 2.0.1  **Attachments:** - [SPR-2902.zip](https://jira.spring.io/secure/attachment/12252/SPR-2902.zip) (_5.08 kB_)","closed","type: enhancement,","spring-projects-issues","2006-11-30T23:16:41Z","2019-01-11T22:00:57Z"
"","7572","ModelMap.addObject does not deal well with Proxy  [SPR-2884]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-2884](https://jira.spring.io/browse/SPR-2884?redirect=false)** and commented  If you call ModelMap.addObject with a Proxy (JDK) the map key is "".ProxyXXX"", rather than the class of the advised object.  SImple fix would be to cast to Advised and pull out the targetSource.targetClass, then use that instead of the actual class of the argument.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-27T20:26:51Z","2012-06-19T03:50:30Z"
"","7568","JRuby script objects do not have any visible methods [SPR-2880]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-2880](https://jira.spring.io/browse/SPR-2880?redirect=false)** and commented  Any object passed into JRuby script objects seems to be unaware of its methods (it's like an Object).  See http://forum.springframework.org/showthread.php?t=28798 and the test case included.   ---  **Affects:** 2.0.1  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/12241/test.zip) (_4.04 kB_)","closed","in: core,","spring-projects-issues","2006-11-27T04:48:37Z","2012-06-19T03:50:46Z"
"","7559","Provide a bean reference instead of just a class name for aop:declare-parents default-impl= [SPR-2872]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-2872](https://jira.spring.io/browse/SPR-2872?redirect=false)** and commented  I seems limiting (maybe there's a reason and I haven't figured it out) that I can only declare an introduction implementation as a class to be instantiated, not an actual bean instance.  E.g. instead of:    we might see     ---  **Affects:** 2.0.1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-11-23T23:45:56Z","2012-06-19T03:51:02Z"
"","7558","Use @Aspect bean to define an aop:aspect element [SPR-2871]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-2871](https://jira.spring.io/browse/SPR-2871?redirect=false)** and commented  It seems that the use of `@Aspect` is limited to aop:aspectj-autoproxy, but it is also a nice way to inline the aspect definition for a regular aop:aspect.  If I already defined a pointcut and some advice in an `@Aspect`, then I shouldn't have to define them again in aop:aspect.  E.g.           	                      should be enough to get the example to work from core-spring-course aop-samples.  Instead I have to specify a pointcut and the advice explicitly:           	     		     		     	                      but I already did that in the SimpleProfiler `@Aspect`.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-23T23:37:33Z","2012-06-19T09:37:28Z"
"","7528","Documentation for @Configurable is confusing [SPR-2841]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-2841](https://jira.spring.io/browse/SPR-2841?redirect=false)** and commented   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-14T22:28:52Z","2012-06-19T03:50:33Z"
"","7521","AutoProxyFactoryBean must have depends-on to force interceptors to initialise fully [SPR-2834]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-2834](https://jira.spring.io/browse/SPR-2834?redirect=false)** and commented  An AutoProxyFactoryBean seems to require an ugly depends-on= to force its interceptors to be fully instantiated when it is initalised.  This is a) surprising, b) irritating, especially if there are many interceptors because then they all have to be chained together with depends-on=.  In this example:           	     	     	     		     			nullChecker     		     	                    	     		     	     	                 The context fails to initialise with a NullPointerException because the nullChecker.advice property is null at the time when the FactoryBean needs it.   ---  **Affects:** 1.2.8, 2.0 final  **Attachments:** - [testcase.zip](https://jira.spring.io/secure/attachment/12229/testcase.zip) (_2.06 kB_)  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","in: core,","spring-projects-issues","2006-11-13T22:47:20Z","2012-06-19T03:50:58Z"
"","7516","Allow ApplicationContext implementations to load config from Resource locations. [SPR-2829]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-2829](https://jira.spring.io/browse/SPR-2829?redirect=false)** and commented  It would be nice, especially in unit tests, to be able to load an application context from a list of Resources instead of a list of String locations.  With XmlBeanFactory I can do this:  beanFactory = new XmlBeanFactory(new ClasspathResource(""test.xml"", getClass()));  But with application contexts I have to mess around doing this  appContext = new FileSystemXmlApplicationContext(new ClasspathResource(""test.xml"",getClass()).getFile().getAbsolutePath());  This is inconvenient because now I have to catch a declared exception.  It is even worse in a unit test extending Abstract**Spring**Tests because there I am supposed to override String[] getConfigLocations(), so I have to do the getFile().getAbsolutePath() thing for all the resources I want to load.  Lastly, it just seems inconsistent that bean factories have the Resource-based initialisation methods, and application contexts do not.   ---  **Affects:** 2.0.1, 1.2.9","closed","type: enhancement,","spring-projects-issues","2006-11-12T18:19:46Z","2012-06-19T08:41:46Z"
"","7491","Target Chains: factory bean for a proxy that builds up a composite service from a list of targets [SPR-2804]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-2804](https://jira.spring.io/browse/SPR-2804?redirect=false)** and commented  Here are some docos I wrote for an implementation that I was considering for springmodules.  It seems more like a core feature, when I think about it, so I thought I'd see what people think here...  1.2. Target Chains  Use the factory bean to create a composite service that delegates to a chain of existing services, all with the same interface. The chain is terminated according to some simple rules depending on the return type of the method being called. Thus:      *      If the method returns Void, then all targets are executed.     *      If the method returns Boolean (or boolean), then execution stops with the first target that returns true.     *      If the method returns Object, then execution stops with the first target that returns not null.  Once the chain has finished executing the composite method returns the object returned by the last executed target. A Target Chain can itself take part in a chain as a target, and the behaviour remains the same.  If any part of the chain throws an exception the chain terminates and the exception is re-thrown by the composite. No clean up is attempted.  1.2.1. Example of Target Chain  To configure a Target Chain all that is needed is a chain of targets (a List), and an object type (which must be an Interface).  \ \           	     		     		     	       \ This exposes a bean called compositeResourceLocator which implements the interface com.mycompany.ResourceLocator. Calls to (e.g.) a method URL locate(String) will be delegated first to the localResourceLocator, and if nothing is found (null returned), it will move on to the remoteResourceLocator.  ---  **Issue Links:** - #6382 ChainOfResponsibilityFactoryBean; factoryBean which creates a proxy that acts as a COR over a list of objects (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2006-11-06T21:40:59Z","2019-01-11T21:32:40Z"
"","7595","Arguments not properly bound in advice when @Pointcut defines ""args(...)"" [SPR-2908]","**[Dave Knipp](https://jira.spring.io/secure/ViewProfile.jspa?name=puppetmasta)** opened **[SPR-2908](https://jira.spring.io/browse/SPR-2908?redirect=false)** and commented  I get an exception when I define a pointcut via `@Pointcut` and I define the 'args(...)' in that pointcut.  I then apply the defined pointcut with `@Around` advice and I receive the following exeception :  ---  Caused by: java.lang.IllegalStateException: Failed to bind all argument names: 1 argument(s) could not be bound at org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.getParameterNames(AspectJAdviceParameterNameDiscoverer.java:282) at org.springframework.core.PrioritizedParameterNameDiscoverer.getParameterNames(PrioritizedParameterNameDiscoverer.java:54) at org.springframework.aop.aspectj.AbstractAspectJAdvice.bindArgumentsByName(AbstractAspectJAdvice.java:356) at org.springframework.aop.aspectj.AbstractAspectJAdvice.calculateArgumentBindings(AbstractAspectJAdvice.java:317) at org.springframework.aop.aspectj.AbstractAspectJAdvice.afterPropertiesSet(AbstractAspectJAdvice.java:283) at org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory.getAdvice(ReflectiveAspectJAdvisorFactory.java:211) ... 172 more  ---  I stepped through the code and found that org.springframework.aop.aspectj.AspectJAdviceParameterNameDiscoverer.maybeBindThisOrTargetOrArgsFromPointcutExpression() is only binding arguments if the 'args(...)' declaration is defined in the advice (`@Around`) declaration as opposed to being defined in the `@Pointcut` declaration.  Defining the 'args(...)' in the `@Pointcut` declaration is valid according to the aspectj documentation for the new annotations in AspectJ 5. (see http://www.eclipse.org/aspectj/doc/released/adk15notebook/ataspectj-pcadvice.html for an example)  The related forum thread explaining my findings and example can be found here : http://forum.springframework.org/showthread.php?t=32111  ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-04T04:53:35Z","2019-01-13T08:09:44Z"
"","7693","New RuntimePropertyNamingStrategy for generating JMX ObjectNames from bean's instance properties at runtime [SPR-3007]","**[Dave Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=dk)** opened **[SPR-3007](https://jira.spring.io/browse/SPR-3007?redirect=false)** and commented  I wrote a NamingStrategy I thought I'd share. I've recently encountered some situations where I wanted the ObjectName of an MBean to somehow be generated from its instance properties at runtime. I had accomplished this with variations of MethodInvokingFactoryBean and playing with the ""SelfNaming"" interface, but I wanted a better/cleaner way that abstracted away any concern of naming from the actual bean. So I wrote RuntimePropertyNamingStrategy. It's a lot like KeyNamingStrategy, but instead of looking up the ObjectName in a properties map, it looks up a ""template"" and then translates that template into an ObjectName at runtime using the managed bean's instance properties.  It's heavily javadoc'd to explain usage, but in short:  You define templates somewhat like Ant: $[...] and @[...] (default braces instead of ellipses to avoid collisions with PropertyPlaceholderConfigurer - can be configured to something else) Example template: $[category]:@[name]  Category and name are properties on the managed bean. $ placeholders are replaced with the value only, and @ placeholders are replaced with 'name=value', so the result might look like: Definitions:name=Dictionary  Other examples: $[category]:mySpecificName=$[name]  results in  Definitions:mySpecificName=Dictionary Domain:id=$[name],@[type]  results in  Domain:id=Dictionary,type=Unabridged Etc.  I'll attach the class and a TestCase in the hopes that it will be useful and find its way into the distribution.  Thanks! DJK   ---  **Affects:** 2.0.1  **Attachments:** - [AlternateRuntimePropertyNamingStrategy.zip](https://jira.spring.io/secure/attachment/12316/AlternateRuntimePropertyNamingStrategy.zip) (_8.26 kB_) - [RuntimePropertyNamingStrategy.zip](https://jira.spring.io/secure/attachment/12315/RuntimePropertyNamingStrategy.zip) (_18.24 kB_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-02T08:36:56Z","2019-01-11T16:33:43Z"
"","7681","Enhance RmiRegistryFactoryBean to allow option to create registry by default [SPR-2995]","**[Dave Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=dk)** opened **[SPR-2995](https://jira.spring.io/browse/SPR-2995?redirect=false)** and commented  In our environment, finding an existing RMI registry is the exception, not the rule. When RmiRegistryFactoryBean calls ""LocateRegistry.getRegistry"" looking for an existing registry (that we know doesn't exist), it clocks for approx. 20-25 seconds before it fails to find one and then creates it. I propose adding a new property called ""defaultCreate"" that RmiRegistryFactoryBean examines before attempting to find a registry. If the property is false (default) it will continue as it had before: to find one, and create it if it doesn't exist. However, if defaultCreate is true, it will skip the find and immediately attempt to create one. If one already exists when it attempts to create it, a RemoteException should get thrown to be handled by the client.  I'll attach the rough refactoring I did...late one night...   ---  **Affects:** 2.0.1  **Attachments:** - [RmiRegistryFactoryBean.zip](https://jira.spring.io/secure/attachment/12307/RmiRegistryFactoryBean.zip) (_3.03 kB_)","closed","type: enhancement,","spring-projects-issues","2006-12-29T16:10:31Z","2012-06-19T03:50:27Z"
"","7659","Broken Link to ObjectMentor in Documentation [SPR-2973]","**[Dave Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=dk)** opened **[SPR-2973](https://jira.spring.io/browse/SPR-2973?redirect=false)** and commented  The reference documentation has a broken link to Bob Martin's ""Open-Closed Principle"". Section III, Chapter 13.1, ""Open for Extension..."" callout.  Correct link is: http://www.objectmentor.com/resources/articles/ocp.pdf   ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-12-21T22:38:35Z","2012-06-19T03:51:08Z"
"","7669","Scoped FactoryBeans Cause Access to Scope When Scope is NOT Active (leading to NPE in ScopedProxyFactoryBean on WebApplicationContext initialisation) [SPR-2983]","**[Dave Blumenfeld](https://jira.spring.io/secure/ViewProfile.jspa?name=daveblumenfeld)** opened **[SPR-2983](https://jira.spring.io/browse/SPR-2983?redirect=false)** and commented  When scoping a FactoryBean at any scope other than singleton or prototype (using ), Spring attempts to access the FactoryBean's target object instance from its backing scope when creating the scoped proxy - i.e. when initialising the WebApplicationContext (assuming that the proxy is injected into any singletons - e.g. a controller or interceptor). The same problem does not occur when the scoped bean is a standard bean instance, rather than an object created by a FactoryBean.  The stack trace is:  2006-12-27 17:21:04,628|ERROR|org.springframework.web.servlet.DispatcherServlet||Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testInterceptor' defined in ServletContext resource [/WEB-INF/test-servlet.xml]: Cannot resolve reference to bean 'myBean' while setting bean property 'myBean'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myBean': Initialization of bean failed; nested exception is java.lang.NullPointerException Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myBean': Initialization of bean failed; nested exception is java.lang.NullPointerException Caused by: java.lang.NullPointerException at org.springframework.aop.scope.ScopedProxyFactoryBean.setBeanFactory(ScopedProxyFactoryBean.java:91) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1020) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:420) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:955) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:729) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:416) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:290) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:308) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:252) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:221) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:115) at javax.servlet.GenericServlet.init(GenericServlet.java:211) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1105) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:932) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3915) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4176) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:275) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)  If you turn on debugging, the underlying cause is revealed to be:  2006-12-27 17:21:04,612|DEBUG|org.springframework.beans.factory.support.DefaultListableBeanFactory||Ignoring bean creation exception on FactoryBean type check org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.myBean': Scope 'request' is not active; nested exception is java.lang.IllegalStateException: No thread-bound request: use RequestContextFilter Caused by: java.lang.IllegalStateException: No thread-bound request: use RequestContextFilter at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:61) at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:40) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:279) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1197) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:563) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:396) at org.springframework.aop.scope.ScopedProxyFactoryBean.setBeanFactory(ScopedProxyFactoryBean.java:90) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1020) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:420) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:955) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:729) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:416) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:290) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:308) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:252) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:221) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:115) at javax.servlet.GenericServlet.init(GenericServlet.java:211) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1105) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:932) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3915) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4176) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:275) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)  The problem is that the call to beanFactory.getType() on line 90 of ScopedProxyFactoryBean results in the bean factory trying to retrieve the FactoryBean's target object from the backing scope in order to identify its type. I'm not sure of the exact reason for this, as my FactoryBean implements the getObjectType() method, so I would have thought that a throw-away instance could be created to call this method quite easily. Perhaps this was done to improve performance or to allow FactoryBeans to dynamically alter the type of returned objects?  Whatever the underlying reason, it is surely wrong for Spring to attempt to access a request-based scope at web application start-up when no current request exists. Note that Tomcat users have a work-around available for this issue as long as they are only using the built-in request and / or session scopes (see the description of additional problems with custom scopes below), which is to lazy-load the WebApplicationContext by not loading the DispatcherServlet at startup. But this does not work on Websphere (haven't tried any other servers), even if you use the RequestContextListener or RequestContextFilter, because Websphere calls the servlet's init() method before invoking either the RequestContextListener.requestInitialized() or RequestContextFilter.doFilter() methods. The only solution I've been able to come up with for Websphere is to override the DispatcherServlet / FrameworkServlet initialisation routines to disable context initialisation until the first request is actually being processed.  The problem is even worse when using a custom scope (e.g. I have a scope which operates at the level of a Tiles ComponentContext - roughly equivalent to page scope in a JSP). This scope is not active until the view rendering phase, so even the solutions discussed above cause a failure. In order to get a FactoryBean to work with the custom scope, I have to avoid throwing any exceptions if the scope is accessed when it is not yet active, and I have to create and return a throw-away instance of the scoped FactoryBean object (without storing it in the backing scope) so that Spring can do its type check to create the proxy at context initialisation.  Sounds like a lot of work doesn't it? Surely there is some way the bean factory can handle this for us.   ---  **Affects:** 2.0.1  **Attachments:** - [testScope.war](https://jira.spring.io/secure/attachment/12303/testScope.war) (_2.76 MB_)","closed","in: core,","spring-projects-issues","2006-12-26T17:55:22Z","2012-06-19T03:50:15Z"
"","7047","Clarify HibernateTemplate javadoc wrt get() vs load() [SPR-2358]","**[Daniel Serodio](https://jira.spring.io/secure/ViewProfile.jspa?name=dserodio)** opened **[SPR-2358](https://jira.spring.io/browse/SPR-2358?redirect=false)** and commented  As I commented in this post: http://forum.springframework.org/showthread.php?t=27366 , the rationale behind the ""HibernateTemplate is evil"" accusation that's common in the JBoss camp is that its Javadoc doesn't clearly differentiate between get() and load(). Assuming Hibernate documentation's license allows (IANAL), I suggest we copy Hibernate's Session javadoc for these methods verbatim:  *** quote *** get(...) Return the persistent instance of the given entity class with the given identifier, or null if there is no such persistent instance. (If the instance, or a proxy for the instance, is already associated with the session, return that instance or proxy.)  load(...) Return the persistent instance of the given entity class with the given identifier, assuming that the instance exists. You should not use this method to determine if an instance exists (use get() instead). Use this only to retrieve an instance that you assume exists, where non-existence would be an actual error. *** /endquote ***  This should be added to both the 1.2.x and 2.x branches, to solve this ""once and for all"".   ---  **Affects:** 1.2.8, 2.0 RC2  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-27T00:56:14Z","2012-06-19T03:50:49Z"
"","7172","IllegalArgumentException from RegexpMethodPointcutAdvisor initialization when using DEBUG log level [SPR-2483]","**[Daniel Potter](https://jira.spring.io/secure/ViewProfile.jspa?name=djpotter77)** opened **[SPR-2483](https://jira.spring.io/browse/SPR-2483?redirect=false)** and commented  When DEBUG logging level is turned on the toString() method of RegexpMethodPointcutAdvisor is invoked prior to the setPatterns() method being called to populate the patterns property of the advisor.  The toString() method invokes getPointcut() which creates the pointcut and attempts to set the patterns used on the pointcut.  The setPatterns() method includes an Assert.notEmpty() on the patterns argument.  When this assertion is fired (again, this only happens with a DEBUG log level), the patterns property has not yet been set, which causes the assertion (and therefore the bean creation) to fail.  A workaround for this is to use constructor-arg injection to set the patterns and advice.  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7130 Simple RegexpMethodPointcutAdvisor configuration failing in 2.0-rc3 (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2006-08-26T04:58:18Z","2019-01-12T16:52:05Z"
"","7787","Feasibility study about Spring framework  [SPR-3100]","**[Daniel joe](https://jira.spring.io/secure/ViewProfile.jspa?name=daniel)** opened **[SPR-3100](https://jira.spring.io/browse/SPR-3100?redirect=false)** and commented  Iam new to spring . I was assigned to do feasibility study about spring to our new project.  I need details about  1) Can we use multiple action handlers in spring 2) what are the config files in spring 3) Does Spring supports SNMP, FTP, HTTP, HTTPS protocols 4) Can we use SOAP along with spring  It is very urgent . I need your valuable information and comments   --- No further details from [SPR-3100](https://jira.spring.io/browse/SPR-3100?redirect=false)","closed","status: declined,","spring-projects-issues","2007-01-31T16:04:54Z","2007-01-31T19:39:00Z"
"","7322","form:checkbox limitations [SPR-2633]","**[Daniel Hopper](https://jira.spring.io/secure/ViewProfile.jspa?name=split3)** opened **[SPR-2633](https://jira.spring.io/browse/SPR-2633?redirect=false)** and commented  public class Client { private Long id;      private Set products;          ...get/set id methods...          public Set getProducts() {         return products;     }          public void setProducts(Set products) {         this.products = products;     }  }  public class Product {      private Long id;          private String name;          ... get/set methods...  }  public class BasicDaoCollectionEditor extends CustomCollectionEditor{      private BasicDao basicDao;          public BasicDaoCollectionEditor(Class clazz, BasicDao basicDao) {     	super(clazz);     	this.basicDao = basicDao;     }          @Override     protected Object convertElement(Object object) {     	Long id = new Long((String)object);     	return basicDao.load(id);     }  }  In the controller the backing object is a Client object Also in request scope is a collection of available products in scope products. ------------ jsp -------------    ${product.name}   ------------ jsp -------------  The collection products will contain the appropriate products on select and submit. The problem is on update or a resubmit due to validation errors the form:checkbox is trying to check the value Long == Product.  Would is make sense to have something like  ${product.name}  So that way is would check againsted a particular field if desired, or is there another way around this?  Also the checkbox tag will select the appropriate values on validation error or update if the tag uses  --------- jsp ---------------- ${product.name} --------- jsp ----------------  In which case the value is actually the toString of the object, but then supports won't work at all unless the toString is returning just the id value which isn't really an option.   ---  **Affects:** 2.0 RC4  8 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2006-09-25T00:45:57Z","2012-06-19T03:50:06Z"
"","7131","exceptions on web application reloading [SPR-2442]","**[Daniel Aioanei](https://jira.spring.io/secure/ViewProfile.jspa?name=aioaneid)** opened **[SPR-2442](https://jira.spring.io/browse/SPR-2442?redirect=false)** and commented  I've got two exceptions after updating at runtime a .war file under tomcat which usually works fine and can be hot-deployed with success most of the time:  java.lang.NullPointerException at org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo.bindToThread(TransactionAspectSupport.java:382) at org.springframework.transaction.interceptor.TransactionAspectSupport$TransactionInfo.access$100(TransactionAspectSupport.java:342) at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:239) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:89) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176) at $Proxy179.saveOrUpdate(Unknown Source) at \ at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:287) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:181) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:148) at org.springframework.remoting.support.RemoteInvocationTraceInterceptor.invoke(RemoteInvocationTraceInterceptor.java:68) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176) at $Proxy185.handle(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.remoting.support.RemoteInvocation.invoke(RemoteInvocation.java:179) at org.springframework.remoting.support.DefaultRemoteInvocationExecutor.invoke(DefaultRemoteInvocationExecutor.java:33) at org.springframework.remoting.support.RemoteInvocationBasedExporter.invoke(RemoteInvocationBasedExporter.java:76) at org.springframework.remoting.support.RemoteInvocationBasedExporter.invokeAndCreateResult(RemoteInvocationBasedExporter.java:112) at org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.handleRequest(HttpInvokerServiceExporter.java:82) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:44) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:723) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:663) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:394) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:358) at javax.servlet.http.HttpServlet.service(HttpServlet.java:709) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:204) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595)  java.lang.NullPointerException at org.springframework.context.i18n.LocaleContextHolder.setLocaleContext(LocaleContextHolder.java:48) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:775) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:663) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:394) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:358) at javax.servlet.http.HttpServlet.service(HttpServlet.java:709) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:204) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595)  I hope the stack traces provide sufficient information to investigate the issue. It might as well be a tomcat bug I guess ..   ---  **Affects:** 1.2.7, 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-17T22:25:52Z","2012-06-19T03:50:03Z"
"","7481","DispatcherPortlet does not restore LocaleContextHolder and RequestContextHolder state [SPR-2794]","**[Dan McCallum](https://jira.spring.io/secure/ViewProfile.jspa?name=dmccallum)** opened **[SPR-2794](https://jira.spring.io/browse/SPR-2794?redirect=false)** and commented  Finally blocks in DispatcherPortlet.doActionService() and doRenderService() reset Thread-bound references held by by LocaleContextHolder and RequestContextHolder. This is problematic for clients that require access to scoped beans following DispatcherPortlet invocation. For example, a portlet container may depend on request- or session-scoped beans initialized by a ServletRequestListener or Filter. Such a container likely expects those beans to be accessible for the complete lifetime of a request and may be unpleasantly suprised by DispatcherPortlet's aggressive cleanup behavior. Ideally, DispatcherPortlet would behave like DispatcherServlet and restore the received state of LocaleContextHolder and RequestContextHolder after it completes its internal request handling.   ---  **Affects:** 2.0 final, 2.0.1  **Attachments:** - [dispatcher-portlet-patch.txt](https://jira.spring.io/secure/attachment/12081/dispatcher-portlet-patch.txt) (_10.50 kB_)","closed","type: bug,","spring-projects-issues","2006-11-02T09:21:48Z","2012-06-19T03:50:20Z"
"","7850","Doc: Execution order for aspectj aspects and  [SPR-3164]","**[Dan Luputan](https://jira.spring.io/secure/ViewProfile.jspa?name=dl_dan)** opened **[SPR-3164](https://jira.spring.io/browse/SPR-3164?redirect=false)** and commented  This is related to #7190, which is needed but not complete.  I have one aspectj around aspect (an exception handler) which has to surround the txn interceptor. So I make it implement Ordered and give an order value lower than the order attribute in the . Now, the org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator compares the advisor order and even if the txn advisor has the right order the exception handler advisor still has the max int order, so the order present in the advice is not used.  Since the documentation says the aspects implement Ordered to control the execution order this might also be a bug. I tested with 2.0.3 build 104.  ---  **Affects:** 2.0.3  **Issue Links:** - #7747 Document the 'order' attribute of the  element. (_**""depends on""**_)","closed","in: core,","spring-projects-issues","2007-02-14T18:17:09Z","2019-01-11T17:34:49Z"
"","7710","Make AbstractAutoProxyCreator implement BeanClassLoaderAware to expose classloader to the ProxyFactory [SPR-3024]","**[Dan Glasser](https://jira.spring.io/secure/ViewProfile.jspa?name=dglasser)** opened **[SPR-3024](https://jira.spring.io/browse/SPR-3024?redirect=false)** and commented  I'm currently working in an eclipse rcp environment.  The ApplicationContext creation and ClassLoader is custom and while we can provide the correct classloader to the ApplicationContext proxies created in this context via the BeanNameAutoProxyCreator, or more acurately subclasses of AbstractAutoProxyCreater fail because it drops back to a default class loader in lieu of using the one provided to the BeanFactory.  Recently support was added to make the ProxyFactoryBean BeanClassLoaderAware. I didn't see an issue raised for this same enhancement on the AbstractAutoProxyCreator which at current uses the no arg call to ProxyFactory.getProxy(). As I said, this in turn drops back to a default classloader. Is this by design, or could support be added to make the AbstractAutoProxyCreator BeanClassLoaderAware as well?   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2007-01-09T05:53:07Z","2012-06-19T03:51:15Z"
"","7583","Read iBatis configuration file as InputStream to fix iBatis's encoding issue. [SPR-2895]","**[Daigo Kobayashi](https://jira.spring.io/secure/ViewProfile.jspa?name=daigo)** opened **[SPR-2895](https://jira.spring.io/browse/SPR-2895?redirect=false)** and commented  Current iBatis have severe encoding issue. But this will fix in next release.(I heard iBatis 2.3 will release later this week.) http://issues.apache.org/jira/browse/IBATIS-349  However to apply this fix, SqlMapClientFactoryBean modification is necessary. Modification is just trivial.  Current spring 2.0 and 2.0.1 has following code on SqlMapClientFactoryBean try { // Build the SqlMapClient. InputStream is = this.configLocation.getInputStream(); this.sqlMapClient = (this.sqlMapClientProperties != null) ? SqlMapClientBuilder.buildSqlMapClient(new InputStreamReader(is), this.sqlMapClientProperties) : SqlMapClientBuilder.buildSqlMapClient(new InputStreamReader(is));  // Tell the SqlMapClient to use the given DataSource, if any. if (this.dataSource != null) { TransactionConfig transactionConfig = (TransactionConfig) this.transactionConfigClass.newInstance(); DataSource dataSourceToUse = this.dataSource; if (this.useTransactionAwareDataSource && !(this.dataSource instanceof TransactionAwareDataSourceProxy)) { dataSourceToUse = new TransactionAwareDataSourceProxy(this.dataSource); } transactionConfig.setDataSource(dataSourceToUse); transactionConfig.initialize(this.transactionConfigProperties); applyTransactionConfig(this.sqlMapClient, transactionConfig); } }  Following two line need to modify. SqlMapClientBuilder.buildSqlMapClient(new InputStreamReader(is), this.sqlMapClientProperties) : SqlMapClientBuilder.buildSqlMapClient(new InputStreamReader(is));  Modification is just trivial. I think just remove new InputStreamReader(is) is enough. SqlMapClientBuilder.buildSqlMapClient(is, this.sqlMapClientProperties) : SqlMapClientBuilder.buildSqlMapClient(is);  This worked fine on my environment. Of cause iBatis library update is necessary. (Currently we can't download iBatis 2.3, so I checked out latest source and build myself.)   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-29T11:23:06Z","2012-06-19T03:50:09Z"
"","7346","There is no way to display success message(s). [SPR-2657]","**[Daigo Kobayashi](https://jira.spring.io/secure/ViewProfile.jspa?name=daigo)** opened **[SPR-2657](https://jira.spring.io/browse/SPR-2657?redirect=false)** and commented  There is no way to display success message(s) like struts' ActionMessage. Spring should provide Messages inteface in a similar way of Errors and related tag libraries.  ---  **Issue Links:** - #11130 Flash Scope  for Spring MVC (Without Spring Web Flow) (_**""duplicates""**_)  12 votes, 12 watchers","closed","has: votes-jira,","spring-projects-issues","2006-09-29T00:01:15Z","2019-01-11T21:18:18Z"
"","7872","SingleConnectionFactory's shared Connection should support setExceptionListener calls [SPR-3187]","**[Craig Day](https://jira.spring.io/secure/ViewProfile.jspa?name=craigday)** opened **[SPR-3187](https://jira.spring.io/browse/SPR-3187?redirect=false)** and commented  SingleConnectionFactory produces Connection instances that don't obey the interface contract of Connection. setExceptionListener and setClientID now throw IllegalStateException's. You have done this to enhance the recoverability features of SingleConnectionFactory. Its a big call to break the Connection interface like that. At the very least I think you should modify the invocation handler to selectively block those calls based on the setting of reconnectOnException. Perhaps you could also consider an implementation of setExceptionListener that passes the ExceptionListener on to the SingleConnectionFactory so it can do its chaining. Expecting users of the Connection instance to check whether the source connection factory is instanceOf SingleConnectionFactory to attach the ExceptionListener is too much to ask.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-19T15:59:56Z","2012-06-18T12:45:02Z"
"","7059","DefaultMessageListenerContainer does not recover from broken connections [SPR-2370]","**[Craig Day](https://jira.spring.io/secure/ViewProfile.jspa?name=craigday)** opened **[SPR-2370](https://jira.spring.io/browse/SPR-2370?redirect=false)** and commented  If a connection is ever closed underneath a DefaultMessageListenerContainer, the container will never recover. The initResourcesIfNecessary() method in the internal AsyncMessageListenerInvoker continues to use the connection returned by the getConnection() method (which is not a call that ends up in connectionFactory.createConnection()).    ---  **Affects:** 2.0 RC1, 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-31T18:03:53Z","2020-04-16T13:23:01Z"
"","7272","BridgeMethodResolver throwing sporadic exception [SPR-2583]","**[Craig Baker](https://jira.spring.io/secure/ViewProfile.jspa?name=crbaker)** opened **[SPR-2583](https://jira.spring.io/browse/SPR-2583?redirect=false)** and commented  I've run into a problem with the BridgeMethodResolver  where by it is throwing seemingly the random exception  Caused by: java.lang.IllegalStateException: Unable to locate generic definition for bridge method 'public volatile void com.tangler.manager.broadcaster.impl.MessageBroadcasterImpl.receive(com.tangler.server.core.channel.Event)'  Strangely this only occurs sometimes when starting my application, probably 50% of the time this work correct, then without any changes to the code base the application will fail to start with this exception.   ---  **Affects:** 2.0 RC3  **Attachments:** - [skeleton-SPR-2583_updated.zip](https://jira.spring.io/secure/attachment/11960/skeleton-SPR-2583_updated.zip) (_14.70 kB_) - [skeleton-SPR-2583.zip](https://jira.spring.io/secure/attachment/11959/skeleton-SPR-2583.zip) (_13.22 kB_)","closed","in: core,","spring-projects-issues","2006-09-13T11:27:07Z","2012-06-19T03:51:07Z"
"","7876","AbstractSingleSpringContextTests - runBare vs final setUp() [SPR-3191]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3191](https://jira.spring.io/browse/SPR-3191?redirect=false)** and commented  Me again :)  I'm working on the OSGi test support which is similar to the one provided by Spring - however, I see that for some reason the setup and tearDown methods are final in c. Is there any reason for that? Why not add the functionality inside runBare and leave setUp and tearDown methods untouched.  See http://www.martinfowler.com/bliki/CallSuper.html for an example  - basically move the special test functionality inside runBare instead of setUp and tearDown which are quite heavily by application developers.  Another separate issue would be to extract the junit functionality into helper classes which can be reused by third parties  - for example AbstractSpringContextTests adds caching functionality that could be extracted so if one has its own junit hierarchy it can reuse these instead of copying. This has been mentioned a number of times by various customers/users which have their own infrastructure and can't easily reuse the context functionality.  ---  **Issue Links:** - #7949 no-op behavior for Junit classes (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2007-02-22T03:09:43Z","2019-01-11T17:36:40Z"
"","7875","AbstractApplicationContext shutdown hook for custom bean destruction [SPR-3190]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3190](https://jira.spring.io/browse/SPR-3190?redirect=false)** and commented  at the moment onClose is being called in the doClose method after the singletons and the beanFactory have been destroyed which means that the beanFactory cannot be used to do any queries. In my case, I'm trying to destroy the state of certain scopes but I can't do this in onClose since there is no BF to work on - so I have to override doClose which seems wrong.  Does it make sense to move onClose (in a try/catch block) before closeBeanFactory()? At the moment I see no elegant and safe way for an applicationCtx implementation to support custom bean destruction unless ContextClosedEvent is being used.  Also, would it make sense to add a destruction callback for scopes (is this done automatically by the appCtx) - that is, when an appCtxt is being closed, do the custom scopes get informed somehow so the scope-managed beans can be properly destroyed?   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-20T21:42:27Z","2012-06-19T03:50:55Z"
"","7863","array/collection utility methods [SPR-3178]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3178](https://jira.spring.io/browse/SPR-3178?redirect=false)** and commented  It would be nice to support some collection/arrays features from Java 5 on older VM such as 1.4. Arrays.toString(array) and Collections.addAll(Collection, array) for example into ObjectUtils and CollectionUtils. This could be add to the capabilities of comparing arrays already mentioned.   --- No further details from [SPR-3178](https://jira.spring.io/browse/SPR-3178?redirect=false)","closed","type: task,","spring-projects-issues","2007-02-16T06:31:29Z","2019-01-11T17:34:31Z"
"","7857","CollectionFactory support for concurrent collections [SPR-3172]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3172](https://jira.spring.io/browse/SPR-3172?redirect=false)** and commented  CollectionFactory provides a transparent way of getting a specialized type of collection implementation based on the classes available on the classpath. It would be nice to provide support for concurrent collections mainly ConcurrentHashMap - available in 1.5+ or concurrent-backport (and maybe commons-collections).   --- No further details from [SPR-3172](https://jira.spring.io/browse/SPR-3172?redirect=false)","closed","status: declined,","spring-projects-issues","2007-02-15T03:25:47Z","2007-02-16T01:10:58Z"
"","7855","utility method for comparing arrays [SPR-3169]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3169](https://jira.spring.io/browse/SPR-3169?redirect=false)** and commented  It would be nice to have a method added in ObjectUtils for comparing arryas - or in Assert. Something similar to deepEquals present in Arrays. since 1.5 - I keep bumping into this issue when I have arrays which have the same content but the order is different.  I have attached below a simple method that I use at the moment (note that it might be a bit inefficient since it doesn't do a binary search but however this means it works even on array of objects which are not comparable).      private boolean compareArrays(Object[] a, Object[] b) {     	if (a.length != b.length)     		return false;          	for (int i = 0; i < a.length; i++) {     		boolean found = false;     		for (int j = 0; j < b.length; j++) {     			if (a[i].equals(b[j])) {     				found = true;     				break;     			}     		}     		if (!found)     			return false;     	}     	return true;     }  Juergen, I can take care of the issue if it makes sense - just assign it to me.   --- No further details from [SPR-3169](https://jira.spring.io/browse/SPR-3169?redirect=false)","closed","status: declined,","spring-projects-issues","2007-02-15T01:36:00Z","2008-05-04T07:08:41Z"
"","7854","AbstractBeanDefinitionParser method for optional ID [SPR-3168]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3168](https://jira.spring.io/browse/SPR-3168?redirect=false)** and commented  It would be useful to have a hook inside AbstractBeanDefinitionParser to  support beans with optional ID by default. That is, if a bean has an id then use that one, if it doesn't then generate one. At the moment, based on a boolean the id is either generated or retrived from the application Context  (see #resolveId) By adding a small protected method which return a boolean, subclasses can choose if a particular namespace has id optional. A concrete example would be an exporter FactoryBean (for OSGi services) which in 80% doesn't require a name since you don't have to refer to it. However, for the remaining 20%, you might want to work with its product which means you need a friendlier name then the generated one.    ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-15T01:35:46Z","2012-06-19T03:51:14Z"
"","7532","allow bean definition changes at runtime [SPR-2845]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2845](https://jira.spring.io/browse/SPR-2845?redirect=false)** and commented  Please add to the bean factory core, the possibility of changing existing bean definitions (swapping them with new ones) and also synchronizing any existing singletons if they have been already instantiated. Since the context might be already in use, the bean factory has to internally synchronize its state when doing the status update on both the definition but also the bean instances. This feature will help at least Spring OSGi which will provide a dynamic PropertyPlaceholder which will dynamically update bean definitions and singleton instances when the underlying properties change.   ---  **Issue Links:** - [OSGI-35](https://jira.spring.io/browse/OSGI-35) Integration test of property placeholder support (Config Admin Service) (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2006-11-16T06:22:18Z","2012-06-19T03:50:34Z"
"","7220","multiple EMFBs affect performance as the PersistenceUnits parsing is done multiple times (per factoryBean) [SPR-2531]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2531](https://jira.spring.io/browse/SPR-2531?redirect=false)** and commented  When having multiple persistence.xml files, each EMFB will do parse them in order to find the appropriate PersistenceUnit - this cost increases with the number of persistence.xml files. More details can be found here: http://blog.interface21.com/main/2006/08/07/using-jpa-in-spring-without-referencing-spring/#comment-42  A possible solution is using an internal cache (which has the same boundaries as the classloader/classpath) which can store the resulting PUs and avoid multiple parsings.   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-03T19:49:52Z","2012-06-19T03:50:23Z"
"","7182","PersistenceRootUrl problematic when dealing with jars [SPR-2493]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2493](https://jira.spring.io/browse/SPR-2493?redirect=false)** and commented  See http://forum.springframework.org/showthread.php?t=28254 - basically the persistenceRootUrl is not recognized by Hibernate nor Toplink.   ---  **Affects:** 2.0 RC3  1 votes, 0 watchers","closed","type: bug,","spring-projects-issues","2006-08-27T21:53:37Z","2012-06-19T03:50:48Z"
"","7122","AbstractJpaTests Not Working with Maven 2 [SPR-2433]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2433](https://jira.spring.io/browse/SPR-2433?redirect=false)** and commented  Sounds like a classloading issue - see this thread for more info:http://forum.springframework.org/showthread.php?t=28026   ---  **Affects:** 2.0 RC3  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2006-08-15T21:52:22Z","2012-06-19T03:50:53Z"
"","7121","integrate JPA with the native provider API [SPR-2432]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2432](https://jira.spring.io/browse/SPR-2432?redirect=false)** and commented  On the forum various questions have been raised about working with the same library through both JPA and the native (for example Hibernate Session) API. While clearly there is a mismatch, the boundaries of the problem and what is possible should be documented.   ---  **Affects:** 2.0 RC3  6 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-15T20:21:58Z","2015-09-22T18:55:04Z"
"","7056","joinTransaction() with EXTENDED application-managed PersistenceContext triggers infinite loop [SPR-2367]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2367](https://jira.spring.io/browse/SPR-2367?redirect=false)** and commented  seems that hashcode calls on the org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:170) yield a recursive, infine method call. See http://forum.springframework.org/showthread.php?t=27513 for more info.   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-30T05:26:30Z","2012-06-19T03:50:42Z"
"","7028","document the classpath: behavior on various platform [SPR-2339]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2339](https://jira.spring.io/browse/SPR-2339?redirect=false)** and commented  Classpath* depends on the classloader which in some cases doesn't behave properly (i.e. while classpath* works in tomcat it does not in oc4j - at least not in a standard configuration). Add some clarification in the documentation mainly as a heads up. More details can be found here: http://forum.springframework.org/showthread.php?t=27179   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-07-24T07:44:55Z","2012-06-19T03:50:34Z"
"","7009","setApplicationContext() is not called for ScriptFactory & scripted beans [SPR-2320]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2320](https://jira.spring.io/browse/SPR-2320?redirect=false)** and commented  In Spring 2.0 RC2, setApplicationContext() is not called for ScriptFactoryS & scripted beans that implement ApplicationContextAware. http://forum.springframework.org/showthread.php?t=27063   ---  **Affects:** 2.0 RC2  **Attachments:** - [SPR2320.zip](https://jira.spring.io/secure/attachment/11820/SPR2320.zip) (_1.36 kB_)","closed","type: bug,","spring-projects-issues","2006-07-18T21:12:27Z","2012-06-19T03:51:00Z"
"","6972","NPE in AbstractAutoProxyCreator when using RC2 [SPR-2283]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2283](https://jira.spring.io/browse/SPR-2283?redirect=false)*** and commented  Apparently switching from RC1 to RC2 and using   issues  a NPE. Also a deprecated AspectJ method is used.  More details in this post: http://forum.springframework.org/showthread.php?t=26793  ---  **Affects:** 2.0 RC2  **Attachments:** - [Spring2-AutoProxy-FactoryBean-NPE.zip](https://jira.spring.io/secure/attachment/11819/Spring2-AutoProxy-FactoryBean-NPE.zip) (_3.68 kB_)  **Issue Links:** - #6967 Change to AbstractAdvisorAutoProxyCreator causing NPE during context startup (_**""duplicates""**_)  4 votes, 3 watchers","closed","in: core,","spring-projects-issues","2006-07-11T18:41:18Z","2019-01-11T19:09:29Z"
"","6971","document logging [SPR-2282]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2282](https://jira.spring.io/browse/SPR-2282?redirect=false)** and commented  Add a chapter inside the docs about how to turn on logging in Spring (i.e. explain the usage of commons-logging, log4j, logging levels).   ---  **Affects:** 2.0 final  2 votes, 2 watchers","closed","type: documentation,","spring-projects-issues","2006-07-11T17:34:48Z","2012-06-19T03:52:44Z"
"","6953","update jmx remoting docs  [SPR-2264]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2264](https://jira.spring.io/browse/SPR-2264?redirect=false)** and commented  Update/clarify the jmx docs regarding the RMI registry - more info can be found here: http://forum.springframework.org/showthread.php?p=67982#post67982   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-09T05:28:57Z","2006-07-12T01:55:15Z"
"","6913","different clear synchronization behavior after 2.0-m4 [SPR-2223]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2223](https://jira.spring.io/browse/SPR-2223?redirect=false)** and commented  The jcr project part of Spring Modules contains a Local TransactionManager for jackrabbit. After upgrading to 2.0-m5 or rc1 one of the tests if failing - it passes if 2.0-m4- is used. The stack trace is : java.lang.IllegalStateException: Cannot deactivate transaction synchronization - not active at org.springframework.transaction.support.TransactionSynchronizationManager.clearSynchronization(TransactionSynchronizationManager.java:261) at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:785) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:580) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:509) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140) at org.springmodules.jcr.jackrabbit.LocalTransactionManagerTests.testTransactionRollbackOnlyWithPrebound(LocalTransactionManagerTests.java:350) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  while the test that fails is called testTransactionRollbackOnlyWithPrebound() and can be found here: https://springmodules.dev.java.net/source/browse/springmodules/projects/jcr/src/test/org/springmodules/jcr/jackrabbit/LocalTransactionManagerTests.java?rev=1.2&view=markup   ---  **Affects:** 2.0 M5, 2.0 RC1  **Attachments:** - [logs.txt](https://jira.spring.io/secure/attachment/11803/logs.txt) (_7.11 kB_)","closed","type: bug,","spring-projects-issues","2006-06-29T23:17:11Z","2012-06-19T03:52:21Z"
"","6912","improve JPA version of Petclinic [SPR-2222]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-2222](https://jira.spring.io/browse/SPR-2222?redirect=false)** and commented  Update the petclinic.html page to mention JPA, the jar with the latests toplink drop and the code to get around the 'stale cache' issue.   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-06-29T19:29:57Z","2012-06-19T03:52:50Z"
"","7416","Custom XML beans in util:list don't work without id [SPR-2728]","**[Cormac Blackwell](https://jira.spring.io/secure/ViewProfile.jspa?name=cormacb)** opened **[SPR-2728](https://jira.spring.io/browse/SPR-2728?redirect=false)** and commented  If you use a custom bean definition parser extended from AbstractBeanDefinitionParser in a util list, set or map an IllegalArgumentException will be thrown it you do not supply an id for your bean e.g.    \     The BeanDefinitionParsers in UtilNamespaceHandler don't pass the parent bean definition when parsing the list, map, or set e.g. parserContext.getDelegate().parseListElement(element, null);  Interestingly regular beans work, so I guess they don't have the same check for the id as is in AbstractBeanDefinitionParser?  Workaround: just add an id to your custom bean.   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-10-18T00:42:56Z","2012-06-19T03:51:08Z"
"","7127","@Configurable won't autowire Hibernate beans [SPR-2438]","**[Corby Page](https://jira.spring.io/secure/ViewProfile.jspa?name=corby)** opened **[SPR-2438](https://jira.spring.io/browse/SPR-2438?redirect=false)** and commented  I have a Hibernate-persisted object named CompanyBean that I have annotated with a plain-jane `@Configurable` annotation, which gets weaved at build-time.  The springContext.xml definition is as follows:  \  When I load an instance from the database, Hibernate instantiates the object and attempts to autowire. However, it fails with the following:  Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No b ean named 'com.blued.bigdeal.model.company.CompanyBean$$EnhancerByCGLIB$$37b29b3 2' is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory. getBeanDefinition(DefaultListableBeanFactory.java:368) at org.springframework.beans.factory.support.AbstractBeanFactory.getMerg edBeanDefinition(AbstractBeanFactory.java:741) at org.springframework.beans.factory.support.AbstractAutowireCapableBean Factory.applyBeanPropertyValues(AbstractAutowireCapableBeanFactory.java:260) at org.springframework.beans.factory.wiring.BeanConfigurerSupport.config ureBean(BeanConfigurerSupport.java:117) at org.springframework.beans.factory.aspectj.AbstractBeanConfigurerAspec t.ajc$afterReturning$org_springframework_beans_factory_aspectj_AbstractBeanConfi gurerAspect$1$6b4509ab(AbstractBeanConfigurerAspect.aj:44) at com.blued.bigdeal.model.company.CompanyBean.\(CompanyBean.java:4 0) at com.blued.bigdeal.model.company.CompanyBean$$EnhancerByCGLIB$$37b29b3 2.\(\)   --- No further details from [SPR-2438](https://jira.spring.io/browse/SPR-2438?redirect=false)","closed","in: core,","spring-projects-issues","2006-08-16T13:47:54Z","2019-01-11T19:32:50Z"
"","7038","No Test Cases Exist for @Configurable [SPR-2349]","**[Corby Page](https://jira.spring.io/secure/ViewProfile.jspa?name=corby)** opened **[SPR-2349](https://jira.spring.io/browse/SPR-2349?redirect=false)** and commented  The `@Configurable` annotation is not working correctly in current builds. The annotation needs test coverage, and I need to get a working test case so that I can submit counterexamples for a bug report.   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-07-26T01:17:57Z","2012-06-19T03:50:23Z"
"","6993","doesn't care for new transaction configuration [SPR-2304]","**[Corby Page](https://jira.spring.io/secure/ViewProfile.jspa?name=corby)** opened **[SPR-2304](https://jira.spring.io/browse/SPR-2304?redirect=false)** and commented  I am running nightly build 72.  I have transction management configured as follows:  \ \ \         Everything works great. Now, if I add:    without adding any other advice or pointcuts, I fail on startup:  SEVERE: Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.aspectj.AspectJPointcutAdvisor': Error setting property values; nested exception is PropertyAccessExceptionsException (1 errors)  Caused by: PropertyAccessExceptionsException (1 errors) org.springframework.beans.MethodInvocationException: Property 'pointcut' threw exception; nested exception is java.lang.IllegalArgumentException: AspectJPointcutAdvisor requires an AspectJExpressionPointcut but was passed an instance of '$Proxy12' Caused by: java.lang.IllegalArgumentException: AspectJPointcutAdvisor requires an AspectJExpressionPointcut but was passed an instance of '$Proxy12' at org.springframework.aop.aspectj.AspectJPointcutAdvisor.setPointcut(AspectJPointcutAdvisor.java:48) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:737) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:575)   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-07-15T13:01:00Z","2012-06-19T03:52:25Z"
"","6954","doesn't care for abstract beans [SPR-2265]","**[Corby Page](https://jira.spring.io/secure/ViewProfile.jspa?name=corby)** opened **[SPR-2265](https://jira.spring.io/browse/SPR-2265?redirect=false)** and commented  I have a set of Spring config files that work just fine, until I add:    Note, this is without adding any pointcut or advisor definitions, I just added the autoproxy declaration.  It appears to object to the existence of an abstract bean that is defined in my config:  \ \ \ \bigdeal.hbm.xml\ \osworkflow.hbm.xml\ \ \ \ \ \ \ \ \ [Boring config excluded] \ \ \  The stacktrace I get on startup is:  org.springframework.beans.factory.BeanCreationExce ption: Error creating bean with name 'bigdealSessionFactory' defined in class path resource [serverComponents.xml]: Cannot resolve reference to bean 'dataSource' while setting bean property'dataSource'; nested exception is org.springframework.beans.factory.BeanIsAbstractEx ception: Error creating bean with name 'baseSessionFactory': Bean definition is abstract  Caused by: org.springframework.beans.factory.BeanIsAbstractEx ception: Error creating bean with name 'baseSessionFactory': Bean definition is abstract  at org.springframework.beans.factory.support.Abstract BeanFactory.checkMergedBeanDefinition(AbstractBean Factory.java:804) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:233) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:153) at org.springframework.beans.factory.support.Abstract BeanFactory.getType(AbstractBeanFactory.java:377) at org.springframework.aop.aspectj.annotation.Annotat ionAwareAspectJAutoProxyCreator.createAspectJAdvis ors(AnnotationAwareAspectJAutoProxyCreator.java:16 7) at org.springframework.aop.aspectj.annotation.Annotat ionAwareAspectJAutoProxyCreator.findCandidateAdvis ors(AnnotationAwareAspectJAutoProxyCreator.java:13 7) at org.springframework.aop.framework.autoproxy.Abstra ctAdvisorAutoProxyCreator.findEligibleAdvisors(Abs tractAdvisorAutoProxyCreator.java:67) at org.springframework.aop.framework.autoproxy.Abstra ctAdvisorAutoProxyCreator.getAdvicesAndAdvisorsFor Bean(AbstractAdvisorAutoProxyCreator.java:53)    ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-09T07:02:27Z","2012-06-19T03:52:38Z"
"","7814","Add JDK 5 Generics support to HibernateTemplate's returned Lists [SPR-3128]","**[Corba the Geek](https://jira.spring.io/secure/ViewProfile.jspa?name=corbathegeek)** opened **[SPR-3128](https://jira.spring.io/browse/SPR-3128?redirect=false)** and commented  In Spring 2.0.x's HibernateTemplate, all the find() methods return unparameterized Lists.  Why not have 'find...()' and 'loadAll()' methods return a parameterizable List\ like the SimpleJdbcTemplate?  This was discussed in: http://forum.springframework.org/showthread.php?t=34526.   ---  **Affects:** 2.0.2  1 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-06T10:32:36Z","2012-06-19T03:51:19Z"
"","7779","PropertyAccessor.getPropertyValueAsText [SPR-3093]","**[Condor](https://jira.spring.io/secure/ViewProfile.jspa?name=condor)** opened **[SPR-3093](https://jira.spring.io/browse/SPR-3093?redirect=false)** and commented  Spring supports setting a bean property with a value converted from a string by a registered property editor. However, there is no way to do the reverse: getting the value of a bean property converted to a string by a registered property editor.  I suggest adding the following method to the PropertyAccessor interface and the BeanWrapperImpl class: String getPropertyValueAsText(String propertyName) throws BeansException;  This could be used in a Spring MVC View implementation that renders bean properties (e.g. the proposed JsonView).   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-30T00:56:20Z","2015-09-22T17:34:31Z"
"","7403","URL encoded parameter names [SPR-2715]","**[Condor](https://jira.spring.io/secure/ViewProfile.jspa?name=condor)** opened **[SPR-2715](https://jira.spring.io/browse/SPR-2715?redirect=false)** and commented  I have the following problem:  - The controller uses a command object that has a property of type Map. - The form uses method=""GET"" (POST works fine)  The resulting request URL looks something like:  http://server/webroot/controller?map%5Bkey%5D=value  Spring doesn't decode parameter names, so it tries to find a property named map%5Bkey%5D (instead of map[key]) in the command object.  ps. It is also possible that this is a bug in WebSphere 5.1 Express, because Suns API doc for HttpServletRequest isn't clear on whether the application server is supposed to decode parameter names or if you need to do this yourself. Could somebody please check this on different application servers ?   --- No further details from [SPR-2715](https://jira.spring.io/browse/SPR-2715?redirect=false)","closed","status: declined,","spring-projects-issues","2006-10-16T01:53:44Z","2019-01-12T16:40:41Z"
"","6921","Programatically setting a transaction to rollBack results in UnexpectedRollbackException [SPR-2231]","**[Colin Yates](https://jira.spring.io/secure/ViewProfile.jspa?name=yatesco)** opened **[SPR-2231](https://jira.spring.io/browse/SPR-2231?redirect=false)** and commented  http://forum.springframework.org/showthread.php?p=67566#post67566  Essentially I am using aop:config and tx:advice to mark all my controllers transaction and introspecting into hibernate backed objects.  If there is a validation error, we mark the current transaction rollBack.  Since upgrading (not sure whether it was introduced in 1.2.x or 2.0rc1) we are now getting the following stack trace:  org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only Caused by: org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:504) at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:275) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176)  It appears that neither TransactionInterceptor, nor the TransactionAspectSupport nor the transactionManager take into account whether the transaction is marked as rollback or not before committing.    ---  **Affects:** 2.0 RC1","closed","status: declined,","spring-projects-issues","2006-07-03T20:42:05Z","2019-01-12T16:29:05Z"
"","6977","ScopedObject.remove() needs to be renamed to avoid conflicts [SPR-2288]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-2288](https://jira.spring.io/browse/SPR-2288?redirect=false)** and commented  This is not really a bug, but as per discussion with Juergen (who agrees) ScopedObject.remove() is not an appropriate name for that method, since there is a pretty large chance of conflict with an existing remove() method in the proxied object.  It should probably be called removeFromScope() or something like that, which would be much safer.   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-12T05:15:59Z","2012-06-19T03:52:40Z"
"","6974","Duplicate bean id allowed in same XML file by using name attribute [SPR-2285]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-2285](https://jira.spring.io/browse/SPR-2285?redirect=false)** and commented  The bean factory and application context contract clearly states (as per our docs) that within one definition xml file a bean id must be unique.  This is enforced by the XML parser when using the ""id"" attribute exclusively because this is flagged as an XML IDREF attribute. However, by combining the use of the id attribute and the name attribute, or just using the name attribute exclusively, it is possible to have 2 or more bean definitions in the same xml file with the same id. This is silently accepted with the last bean definition winning out.  The bean definition reader must basically track ids, however they are supplied, and enforce the same semantics from usage of the ""name"" attribute as from usage of the ""id"" attribute.  A related question is what should happen in the case of \? An argument could be made either way here.   ---  **Affects:** 2.0 RC2  **Attachments:** - [spring2285_testcase_and_patch.zip](https://jira.spring.io/secure/attachment/11870/spring2285_testcase_and_patch.zip) (_2.67 kB_)","closed","in: core,","spring-projects-issues","2006-07-12T01:40:12Z","2019-01-11T19:09:34Z"
"","7160","Create concept or ""bean group"" and ""group of groups"" to resolve initialization order challenge. [SPR-2471]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-2471](https://jira.spring.io/browse/SPR-2471?redirect=false)** and commented  When a projects gets big with lots of modularity (i.e. components developed by several different parties), the initialization order becomes a challenge.  The Spring Framework should support the concept of ""bean group"" to give more control over the initialization order of the beans.   There could also be ""group of groups"" which makes the concept of grouping hierarchically.  The idea is to allow the programmer to specify the order of the initialization of the groups.  Each group could have an initialization order attribute (initOrder=""1"").  This feature would go a long way to resolve the initialization order challenges.   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-08-23T23:42:11Z","2012-06-19T09:37:24Z"
"","7152","CustomizableTraceInterceptor exception logging does not calculate invocationTime correctly. [SPR-2463]","**[Claus Nielsen](https://jira.spring.io/secure/ViewProfile.jspa?name=clanie)** opened **[SPR-2463](https://jira.spring.io/browse/SPR-2463?redirect=false)** and commented  In CustomizableTraceInterceptor.invokeUnderTrace(...)  exceptions are logged like this:  writeToLog(logger, replacePlaceholders(this.exceptionMessage, invocation, null, ex, stopWatch.getTotalTimeMillis()), ex);  However stopWatch.getTotalTimeMillis() always returns zero because stopWatch.stop() isn't called first.   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-23T00:01:50Z","2012-06-19T03:50:57Z"
"","7829","Petclinic - readme.txt - toplink issue [SPR-3143]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-3143](https://jira.spring.io/browse/SPR-3143?redirect=false)** and commented  In the readme.txt for the petclinic sample it states:  * NOTE: The sample currently only works against TopLink 10.1.3 developer previews. * The reason for this is an incompatibility in TopLink 10.1.3 final's HSQLDB * platform adapter. This will be resolved until Spring 2.0 final.  Is this still valid? Spring 2.0 has been released.   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-02-10T23:34:25Z","2012-06-19T03:50:31Z"
"","7827","Petclinic - Apache OJB in tutorial [SPR-3141]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-3141](https://jira.spring.io/browse/SPR-3141?redirect=false)** and commented  I deployed the Petclinic sample in Tomcat and was reading the Petclinic tutorial that is provided with this sample.  #1 The tutorial mentions Apache OJB that to my recall has been removed from Spring 2.0 onwards and now resides in Spring Modules. I think the tutorial should be updated and have Apache OJB removed.  #2 There is a note in the tutorial mentioned that iBATIS is not demonstrated in this sample ( NOTE: Spring also provides infrastructure for using other Object-Relational-Mapping frameworks such as  JDO and iBATIS SqlMaps but these are not demonstrated in PetClinic. )  I think the note should point to the other sample jpetstore that has iBATIS demonstrated.    ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-02-10T21:48:09Z","2012-06-19T03:50:37Z"
"","7826","Petclinic - link on frontpage to documentation broken (404) [SPR-3140]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-3140](https://jira.spring.io/browse/SPR-3140?redirect=false)** and commented  I build the Petclinic sample and deployed it in Tomcat 5.5.20.  On the frontpage of the sample there is a link to ""Documentation"". Clicking this link renders a HTTP 404 error code (The requested resource (/petclinic/docs/index.html) is not available.)   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-02-10T21:36:18Z","2012-06-19T03:50:28Z"
"","7825","javadoc - here be dragons - (10 cosmetic/missing issues with javadoc) [SPR-3139]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-3139](https://jira.spring.io/browse/SPR-3139?redirect=false)** and commented  DONE #1 I was browsing some of the javadoc for the spring framework and stumbled across this strange dragon sentence ;) Here be dragons. in the class org.springframework.aop.aspectj.RuntimeTestWalker  AA: I guess Adrian put this here on purpose to tell everybody this class contains functionality that should be moved over to AspectJ and that essentially this piece of code is a little less clean (to put it mildly ;-). I've removed it.  DONE #2 org.springframework.aop.config.AdvisorComponentDefinition has no class javadoc  #3 org.springframework.jmx.export.annotation.ManagedNotification has no annotation javadoc org.springframework.jmx.export.annotation.ManagedNotifications has no annotation javadoc  DONE #4 org.springframework.orm.ibatis The link to ibatis is moved to Apache: http://ibatis.apache.org/  DONE #5 org.springframework.scripting.config.LangNamespaceHandler has no class javadoc  DONE #6 org.springframework.test.annotation several annotations in this package have no javadoc  DONE #7 org.springframework.transaction.config.TxNamespaceHandler has no class javadoc  DONE #8 org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag has no class javadoc  DONE #9 org.springframework.web.servlet.view.tiles.TilesJstlView has it's summary text cut due using dot in ""i.e."" so it can not show the entire sentence (Specialization of TilesView for JSTL pages, i.e. Tiles pages that use the JSP Standard Tag Library.)  DONE #10 org.springframework.web.servlet.view.velocity.VelocityViewResolver As #9    ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-02-10T08:32:13Z","2012-06-19T03:51:02Z"
"","7824","Javadoc for class ReflectiveLoadTimeWeaver has cosmetic issue [SPR-3138]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-3138](https://jira.spring.io/browse/SPR-3138?redirect=false)** and commented  Look at the package summary for pacakge org.springframework.instrument.classloading The class ReflectiveLoadTimeWeaver has a very long text description the its summary.  See: http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/instrument/classloading/package-summary.html   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-02-10T07:49:51Z","2012-06-19T03:50:42Z"
"","7503","Unable to specify implementation of List or Map when defined as inner bean [SPR-2816]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-2816](https://jira.spring.io/browse/SPR-2816?redirect=false)** and commented  I would like to re-open #4751, in the hope that you've changed your minds since then. :-) If not, feel free to just close this issue. Maybe you can explain why you think this is not a good idea. Anyway, keep up the great work!  Here's a comment I added to #4751:  Now that you've added the util stuff, why not reconsider this decision?  It seems so very intuitive to do this:  \ \ \  Instead, I have to do this:  \ \ \ \ \ \ \ \  ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-09T04:19:20Z","2019-01-11T21:31:44Z"
"","7502","cannot set property of type List [SPR-2815]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-2815](https://jira.spring.io/browse/SPR-2815?redirect=false)** and commented  I have a property named arrays of type List  public void setArrays( List arrays )  I try to set it like this:  \ \ \ \value1\ \value1\ \ \ \  But at runtime I get a List that contains a List, not a List that contains a String array. I added the value-type=""java.lang.String[]"" attribute, but it didn't change anything.  I would expect this work since I can set a property of type String[]  public void setArray( String[] array )  like this:  \ \ \value1\ \value1\ \ \ This is similar to (or even a duplicate of?) #7198 and #7494.  ---  **Affects:** 2.0 final  **Attachments:** - [generic.beans](https://jira.spring.io/secure/attachment/12195/generic.beans) (_657 bytes_) - [Generic.java](https://jira.spring.io/secure/attachment/12196/Generic.java) (_1.02 kB_)","closed","in: core,","spring-projects-issues","2006-11-09T04:04:03Z","2019-01-11T21:31:46Z"
"","7486","ClassArrayEditor.getAsText() does not handle array classes [SPR-2799]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-2799](https://jira.spring.io/browse/SPR-2799?redirect=false)** and commented  Same thing as #6856 basically.  ClassArrayEditor editor = new ClassArrayEditor(); editor.setAsText(""java.lang.String[], int[]""); System.out.println(editor.getAsText());  prints ""[Ljava.lang.String;,[I"" instead of ""java.lang.String[],int[]"".  ClassArrayEditor.toCommaDelimitedString() should not use Class.getName(), but ClassUtils.getQualifiedName().  ---  **Affects:** 2.0 final  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/12084/patch.txt) (_737 bytes_)","closed","in: core,","spring-projects-issues","2006-11-03T10:32:11Z","2019-01-11T21:05:17Z"
"","7362","DefaultResourceLoader: null handling in constructor and setClassLoader()  [SPR-2673]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-2673](https://jira.spring.io/browse/SPR-2673?redirect=false)** and commented  If loader is null, the following code crashes:  ClassLoader loader = ...; AbstractApplicationContext context = new FileSystemXmlApplicationContext(""context.xml""); context.setClassLoader(loader); context.refresh();  with the following exception:  Exception in thread ""main"" java.lang.IllegalArgumentException: ClassLoader must not be null at org.springframework.util.Assert.notNull(Assert.java:113) at org.springframework.beans.factory.xml.PluggableSchemaResolver.\(PluggableSchemaResolver.java:87) at org.springframework.beans.factory.xml.PluggableSchemaResolver.\(PluggableSchemaResolver.java:78) at org.springframework.beans.factory.xml.DelegatingEntityResolver.\(DelegatingEntityResolver.java:66) at org.springframework.beans.factory.xml.ResourceEntityResolver.\(ResourceEntityResolver.java:64) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext. java:74) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableAppl icationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294)  According to the Javadoc for DefaultResourceLoader.setClassLoader(), null should be ok:  Specify the ClassLoader to load class path resources with, or \null\ for using the thread context class loader at the time of actual resource access.  I see several ways to fix this:  - PluggableSchemaResolver should not throw an exception if class loader is null, but use the context class loader instead - PluggableSchemaResolver should not throw an exception if class loader is null, but use the class loader of the Spring classes instead - DefaultResourceLoader should throw an exception if the class loader parameter is null - DefaultResourceLoader should set the classLoader field to the context class loader if the class loader parameter is null - DefaultResourceLoader should do nothing if the class loader parameter is null and keep using the class loader that was set previously  Don't know which is correct. Probably none of these. ;-)   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-10-04T03:47:25Z","2012-06-19T03:50:41Z"
"","7347","PropertyEditors should know their target class [SPR-2658]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-2658](https://jira.spring.io/browse/SPR-2658?redirect=false)** and commented  It would make registration much more convenient.   ---  **Affects:** 2.0 RC4  **Attachments:** - [TargetedEditorConfigurer.java](https://jira.spring.io/secure/attachment/12002/TargetedEditorConfigurer.java) (_1.08 kB_) - [TargetedPropertyEditor.java](https://jira.spring.io/secure/attachment/12000/TargetedPropertyEditor.java) (_388 bytes_) - [TargetedPropertyEditorSupport.java](https://jira.spring.io/secure/attachment/12001/TargetedPropertyEditorSupport.java) (_874 bytes_)","closed","type: enhancement,","spring-projects-issues","2006-09-29T04:48:04Z","2012-06-19T09:37:38Z"
"","6965","PropertiesEditor may mangle encoding [SPR-2276]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-2276](https://jira.spring.io/browse/SPR-2276?redirect=false)** and commented  PropertiesEditor should use text.getBytes(""ISO-8859-1"") to load the properties.  Currently, PropertiesEditor uses text.getBytes(), which converts chars to bytes using the platform default encoding:  http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html#getBytes()  It then passes these bytes to Properties.load(), which uses ISO-8859-1:  http://java.sun.com/j2se/1.5.0/docs/api/java/util/Properties.html#load(java.io.InputStream)  On a system that doesn't use ISO-8859-1 as the default encoding, this may lead to problems. (It works on Windows, whose default encoding is almost identical to ISO-8859-1, but many Linux systems use UTF-8).   ---  **Affects:** 2.0 RC2  **Attachments:** - [PropertiesEditorPatch.txt](https://jira.spring.io/secure/attachment/11875/PropertiesEditorPatch.txt) (_795 bytes_) - [PropertiesEditorTest.java](https://jira.spring.io/secure/attachment/11798/PropertiesEditorTest.java) (_901 bytes_)","closed","in: core,","spring-projects-issues","2006-07-11T02:39:40Z","2012-06-19T03:52:28Z"
"","6924","Cglib2AopProxy should have an HashCodeInterceptor [SPR-2234]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-2234](https://jira.spring.io/browse/SPR-2234?redirect=false)** and commented  The proxy created by Cglib2AopProxy handles calls to equals() with an EqualsInterceptor, but calls to hashCode() are handled by the advisors. Shouldn't there also be a HashCodeInterceptor that handles calls to hashCode()? Otherwise, two proxies for which equals() returns true may have different hash codes.  JdkDynamicAopProxy is different - it intercepts equals() and handles it itself (just like Cglib2AopProxy), but it also intercepts hashCode() and handles it itself.  I only browsed the code, though. Maybe I missed something and Cglib2AopProxy is correct.   ---  **Affects:** 2.0 RC1","closed","in: core,","spring-projects-issues","2006-07-04T04:00:51Z","2012-06-19T03:52:38Z"
"","7738","Spring doesn't propagate rollback to existing transaction [SPR-3052]","**[Christopher G. Stach II](https://jira.spring.io/secure/ViewProfile.jspa?name=cgs)** opened **[SPR-3052](https://jira.spring.io/browse/SPR-3052?redirect=false)** and commented  I don't have a test case for this, but I wish I did.  Luckily, it's easy to replicate.  Maybe you have some ideas on making one more quickly than I could. :)  We are accepting messages from ActiveMQ 4.1.0's via its ResourceAdapter with Jencks 2.0.  Hibernate 3.2.0 is involved for persistence.  All of this is running inside of Resin 3.0.22, which acts as the JCA pool for AMQ and the database pool, so it's the transaction manager.  XA transactions and JtaTransactionManager are being used.  Steps involved:  1. Accept a message from AMQ with an existing Resin UserTransaction via Jencks 2. Involve Hibernate and MySQL 3. TransactionInterceptor triggers a Hibernate flush, which deadlocks and generates a RuntimeException (SpringSessionSynchronization line 126) 4. The exception is caught at AbstractPlatformTransactionManager line 678, and a rollback is attempted at line 682 5. AbstractPlatformTransactionManager line 791 skips over doRollback because the transaction is not new (AbstractPlatformTransactionManager lines 327 to 441), it existed starting when the JCA connector accepted the queued message (JtaTransactionManager.doRollback would have marked Resin's UserTransaction for rollback) 6. Execution continues until Jencks' XAEndpoint line 101, which checks Resin's UserTransaction's status and calls commit instead of rollback  Stack trace when the deadlock happens:      at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000)     at  org.springframework.orm.hibernate3.SpringSessionSynchronization.beforeCommit(SpringSessionSynchronization.java:126) at org.springframework.transaction.support.TransactionSynchronizationUtils.triggerBeforeCommit(TransactionSynchronizationUtils.java:48) at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerBeforeCommit(AbstractPlatformTransactionManager.java:821) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:637) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:624) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:307) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:117) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:176) at com.xxx.interceptor.XxxInterceptor.invoke(DistributingInterceptor.java:152) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:176) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:210) at $Proxy70.runMethods(Unknown Source) at sun.reflect.GeneratedMethodAccessor751.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.util.MethodInvoker.invoke(MethodInvoker.java:270) at com.xxx.jms.JmsMessageListenerService.onMessage(JmsMessageListenerService.java:124) at org.jencks.XAEndpoint.onMessage(XAEndpoint.java:129) at org.apache.activemq.ra.MessageEndpointProxy$MessageEndpointAlive.onMessage(MessageEndpointProxy.java:121) at org.apache.activemq.ra.MessageEndpointProxy.onMessage(MessageEndpointProxy.java:61) at org.apache.activemq.ActiveMQSession.run(ActiveMQSession.java:695) at org.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:165) at com.caucho.jca.WorkThread.run(WorkThread.java:99) at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:520) at com.caucho.util.ThreadPool.run(ThreadPool.java:442) at java.lang.Thread.run(Thread.java:619)   ---  **Affects:** 1.2.8, 2.0.2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2007-01-18T14:47:02Z","2012-06-19T03:50:59Z"
"","7185","Hibernate unique constraint : exception badly translated with HSQLDB [SPR-2496]","**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[SPR-2496](https://jira.spring.io/browse/SPR-2496?redirect=false)** and commented  Create a business object Node with a unique constraint on the property name. The following code demonstrate the bug under HSQLDB  NodeServices ns = (NodeServices) this.applicationContext.getBean(""nodeServices"");        assertNotNull(ns);                      try {               Node n = new Node();               n.setName(""first node"");               ns.saveNode(n);               ns.getHibernateTemplate().flush();         Node n = new Node();          n.setName(""first node"");          ns.saveNode(n);          ns.getHibernateTemplate().flush();               fail();            } catch (DataIntegrityViolationException e) {               //it is ok, we can not have 2 nodes named ""first node""            } catch (Exception e) {               //TODO:we should not be here               //NOT WORKING UNDER HSQLDB BUT WORKS WITH MYSQL               //http://forum.springframework.org/showthread.php?t=28462            }    ---  **Affects:** 2.0 RC2, 2.0 RC3","closed","status: declined,","spring-projects-issues","2006-08-28T02:36:50Z","2019-01-12T16:28:55Z"
"","7180","Hibernate not-null constraint : exception badly translated [SPR-2491]","**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[SPR-2491](https://jira.spring.io/browse/SPR-2491?redirect=false)** and commented  Having a not-null=""true"" constraint on Node.name. When doing node.setName(null); save(node); you should receive a DataIntegrityViolation exception. Instead, you receive a HibernateSystemException (which means uncategorized exception).  Reproduction with the following code :  public void testNotNull() {        NodeServices ns = (NodeServices) this.applicationContext.getBean(""nodeServices"");            assertNotNull(ns);                      //not-null            try {               Node n = new Node();               n.setName(null);               ns.saveNode(n);               fail();            } catch (DataIntegrityViolationException e) {               //it is ok, we can not have a node without a name            } catch (Exception e) {               //we should not be here               //NOT THE CORRECT EXCEPTION               //http://forum.springframework.org/showthread.php?t=28458            }  }   ---  **Affects:** 2.0 RC2, 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-27T18:21:53Z","2012-06-19T03:50:55Z"
"","7279","If default init method is ""afterPropertiesSet()"" this method is called twice for beans implementing ""InitializingBean"" [SPR-2590]","**[Christoph Kiehl](https://jira.spring.io/secure/ViewProfile.jspa?name=ckiehl)** opened **[SPR-2590](https://jira.spring.io/browse/SPR-2590?redirect=false)** and commented  If default init method is ""afterPropertiesSet()"" this method is called twice for beans implementing ""InitializingBean"". This is due to the implementation of  protected void invokeInitMethods(String beanName, Object bean, RootBeanDefinition mergedBeanDefinition)  in AbstractAutowireCapableBeanFactory  There should a check if the method was already called.   ---  **Affects:** 2.0 RC3  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2006-09-16T01:17:48Z","2012-06-19T03:50:52Z"
"","7713","Enable custom default value for @Transactional's rollbackFor argument [SPR-3027]","**[Christoph Hilmes](https://jira.spring.io/secure/ViewProfile.jspa?name=kopinsky)** opened **[SPR-3027](https://jira.spring.io/browse/SPR-3027?redirect=false)** and commented  Just resently there was an issue about setting a default value for the timeout-argument of the `@Transactional-Annotation`. I´m sorry to bring up this issue again, but for me it would be nice if i could set a default value for the rollbackFor argument. At the moment i have to set this argument to my custom exceptions for every class which is a little bit cumbersome. Maybe you can do the same thing as for ""timeout"" once again for this argument!? Thanks.   ---  **Affects:** 2.0.1  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-01-10T18:05:55Z","2012-06-19T03:50:57Z"
"","7734","Add rebind method to JndiRmiServiceExporter to allow rebinding the service to a naming service [SPR-3048]","**[Christian Haselbach](https://jira.spring.io/secure/ViewProfile.jspa?name=chaselbach)** opened **[SPR-3048](https://jira.spring.io/browse/SPR-3048?redirect=false)** and commented  Currently it is not (or hardly) possible with JndiRmiServiceExporter to rebind a serivce to a naming service. This is useful if you use a naming service which does not persist its registry when it restarts. All that is missing is the following method: public void rebind() throws NamingException { this.jndiTemplate.rebind(this.jndiName, this.exportedObject); } (The last line of prepare sould probably replaced by ""rebind()"".)  Alternatively, public getter for exportedObject could be provided which would allow to implement this somewhere else.   ---  **Affects:** 2.0 final, 2.0.1, 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-18T01:10:01Z","2012-06-19T03:50:51Z"
"","7847","Add scope attribute to script tags in lang namespace [SPR-3161]","**[chris tam](https://jira.spring.io/secure/ViewProfile.jspa?name=cltam96)** opened **[SPR-3161](https://jira.spring.io/browse/SPR-3161?redirect=false)** and commented  In spring framework 2.0.3, all dynamic language scripting bean scope is restricted to ""singleton"". For example, ...    ... The above ""GroovyPerson"" bean scope is always singleton which will restrict the usage of the bean. For example: ... Person person1 = (Person)context.getBean(""GroovyPerson""); person1.setName(""chris tam""); Person person2 = (Person)context.getBean(""GroovyPerson""); person2.setName(""Rod Johnson""); // should print out ""chris tam"" but print out ""Rod Johnson"" System.out.println(person1.getName()); ... I have checked the spring-lang-2.0.xsd and ScriptBeanDefinitionParser files and do some experiments on adding an ""script-scope"" attribute to the lang namespace to control the scripting bean scope and so far it works fine. Is it possible to add an ""script-scope"" attribute to the scripting bean? Thanks a lot for any help  Thanks and best regards chris tam xenium    ---  **Affects:** 2.0.3  **Attachments:** - [ScriptScope.patch](https://jira.spring.io/secure/attachment/12419/ScriptScope.patch) (_2.74 kB_)  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-13T18:33:41Z","2012-06-19T03:51:06Z"
"","7778","JRuby throw undefined method `hashCode' Exception when inject a JRuby bean into another JRuby bean in application context [SPR-3092]","**[chris tam](https://jira.spring.io/secure/ViewProfile.jspa?name=cltam96)** opened **[SPR-3092](https://jira.spring.io/browse/SPR-3092?redirect=false)** and commented  If I define a JRuby script bean in the application context xml file which is autowired with another JRuby script bean, the ClassPathXmlApplicationContext will throw BeanCreationException which is due to a JRubyException of undefined method ""hashCode"". For example, ...         ... ClassPathXmlApplicationContext will throw exception when it tries to inject the ""JRubyCountry"" bean into ""JRubyPerson"" bean. The exception is thrown by JRuby JavaSupport class getJavaObjectFromCache method and registered as JRuby bug JRUBY-244. Please provide a temporary workaround for the above problem. According to the following blog:  http://blog.nominet.org.uk/tech/2006/10/30/codeproxycode-gotchas-in-jruby/  It is possible to handle the above problem if the following code is added to RubyObjectInvocationHandler class invoke method.  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { if (AopUtils.isToStringMethod(method)) { return ""JRuby object ["" + this.rubyObject + ""]""; }  // the following code is used to handle the hashCode and equals methods if (method.getName().equals(""hashCode"")) { return new Integer(hashCode(); } if (method.getName().equals(""equals"")) { return new Boolean(equals(args[0])); }  try { IRubyObject[] rubyArgs = convertToRuby(args); IRubyObject rubyResult = this.rubyObject.callMethod(this.ruby.getCurrentContext(), method.getName(), rubyArgs); return JavaEmbedUtils.rubyToJava(this.ruby, rubyResult, method.getReturnType()); } catch (RaiseException ex) { throw new JRubyException(ex); } }  Thanks a lot for any help  cheers chris tam   ---  **Affects:** 2.0.2  **Attachments:** - [JRubyBugDemo.zip](https://jira.spring.io/secure/attachment/12372/JRubyBugDemo.zip) (_3.61 kB_)","closed","type: enhancement,","spring-projects-issues","2007-01-29T23:14:36Z","2012-06-19T03:50:40Z"
"","7724","RubyObjectInvocationHandler invoke method throw ClassCastException when return value is java primitive wrapper object [SPR-3038]","**[chris tam](https://jira.spring.io/secure/ViewProfile.jspa?name=cltam96)** opened **[SPR-3038](https://jira.spring.io/browse/SPR-3038?redirect=false)** and commented  RubyObjectInvocationHandler will throw ClassCastException when calling a java method which return a java primitive wrapper object, like java.lang.Integer, java.lang.Long and so on. For example: In the java interface class, the following method is defined: ... public Integer getAge() ; ... In the JRuby file, the corresponding method is ... def getAge return `@age` end ... When the ""getAge"" method is called, it will throw the ClassCastException because the JavaUtil.convertRubyToJava(result, method.getReturnType()) always try to cast the result  object  to JRuby JavaObject. I don't know JRuby has fixed this problem or not but I would suggest to work around this problem in the current RubyObjectInvocationHandler using the following code: ... Class returnClazz = method.getReturnType() ; Object obj = convertRubyToJavaPrimitiveWrapper(result, returnClazz) ; if (obj == null) { obj = JavaUtil.convertRubyToJava(result, returnClazz); } return obj ; ... private Object convertRubyToJavaPrimitiveWrapper(IRubyObject rubyObject, Class javaClass) { if (rubyObject == null || rubyObject.isNil()) { return null; }  ThreadContext context = rubyObject.getRuntime().getCurrentContext();  String cName = javaClass.getName(); if (cName == ""java.lang.Boolean"") { return Boolean.valueOf(rubyObject.isTrue()); } else if (cName == ""java.lang.Float"") { if (rubyObject.respondsTo(""to_f"")) { return new Float(((RubyNumeric) rubyObject.callMethod(context, ""to_f"")).getDoubleValue()); } return new Float(0.0); } else if (cName == ""java.lang.Double"") { if (rubyObject.respondsTo(""to_f"")) { return new Double(((RubyNumeric) rubyObject.callMethod(context, ""to_f"")).getDoubleValue()); } return new Double(0.0); } else if (cName == ""java.lang.Long"") { if (rubyObject.respondsTo(""to_i"")) { return new Long(((RubyNumeric) rubyObject.callMethod(context, ""to_i"")).getLongValue()); } return new Long(0); } else if (cName == ""java.lang.Integer"") { if (rubyObject.respondsTo(""to_i"")) { return new Integer((int) ((RubyNumeric) rubyObject.callMethod(context, ""to_i"")).getLongValue()); } return new Integer(0); } else if (cName == ""java.lang.Short"") { if (rubyObject.respondsTo(""to_i"")) { return new Short((short) ((RubyNumeric) rubyObject.callMethod(context, ""to_i"")).getLongValue()); } return new Short((short) 0); } else if (cName == ""java.lang.Byte"") { if (rubyObject.respondsTo(""to_i"")) { return new Byte((byte) ((RubyNumeric) rubyObject.callMethod(context, ""to_i"")).getLongValue()); } return new Byte((byte) 0); }      // not primitive wrapper object, just return null ;     return null ;  }    ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-01-14T00:59:48Z","2019-01-11T16:38:00Z"
"","7722","BeanShell integration should support scripts that declare an actual class or instance [SPR-3036]","**[chris tam](https://jira.spring.io/secure/ViewProfile.jspa?name=cltam96)** opened **[SPR-3036](https://jira.spring.io/browse/SPR-3036?redirect=false)** and commented  According to spring reference manual and source code, the beanshell script must implement a java interface according to the following format style:  String message; String getMessage() { return message; } void setMessage(String aMessage) { message = aMessage; }  As a beanshell user, there is an alternative way to implemet the java interface. For example,  import org.springframework.scripting.Messenger; public class MyMessenger implements Messenger { private String message ; public String getMessage() { return message; } public void setMessage(String aMessage) { message = aMessage; } } return new MyMessenger() ;  But this alternative method does not work with the current ""createBshObject"" method in BshScriptUtils.java because the ""createBshObject""  method does not expect the bsh interpreter returns any object. I suggest to modify the ""createBshObject"" method : ... // get the return object of the bsh interpreter and if the return object is not null, just return the object Object returnObject = interpreter.eval(scriptSource); if (returnObject != null) { return returnObject ; } XThis xt = (XThis) interpreter.eval(""return this""); ... The above change will be able to handle both the 2 implementations.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-13T19:15:43Z","2012-06-19T03:50:40Z"
"","7712","RubyObjectInvocationHandler invoke method incorrectly handle primitive int return value [SPR-3026]","**[chris tam](https://jira.spring.io/secure/ViewProfile.jspa?name=cltam96)** opened **[SPR-3026](https://jira.spring.io/browse/SPR-3026?redirect=false)** and commented  RubyObjectInvocationHandler use the following code to handle the return value from JRuby program: ... IRubyObject[] rubyArgs = convertToRuby(args); IRubyObject result = this.rubyObject.callMethod(this.ruby.getCurrentContext(), method.getName(), rubyArgs); return JavaUtil.convertRubyToJava(result); ... Since the return value class is not passed to the JavaUtil.convertRubyToJava method, JRuby does not handle the return value correctly if the return type is primitive, like int, in JDK 1.4.2.  To handle the case, the code should be ... Class returnClazz = method.getReturnType() ; IRubyObject[] rubyArgs = convertToRuby(args); IRubyObject result = this.rubyObject.callMethod(this.ruby.getCurrentContext(), method.getName(), rubyArgs); return JavaUtil.convertRubyToJava(result, returnClazz); ...   ---  **Affects:** 2.0.2  **Attachments:** - [JRubyBugDemo.zip](https://jira.spring.io/secure/attachment/12325/JRubyBugDemo.zip) (_2.91 kB_)","closed","in: core,","spring-projects-issues","2007-01-10T16:00:43Z","2012-06-19T03:50:24Z"
"","7247","Enhancement to the iBatis SqlMapClient to allow injection of ResultObjectFactory [SPR-2558]","**[Chris Mathrusse](https://jira.spring.io/secure/ViewProfile.jspa?name=cmathrusse)** opened **[SPR-2558](https://jira.spring.io/browse/SPR-2558?redirect=false)** and commented  iBatis allows you to define a ResultObjectFactory that the framework can use to request new instances of objects (POJO's) that wil be used to populate with data returned from queries. Currently iBatis requires that you define the ResultObjectFactory within the SqlMapConfig file. While this allows us to define the factory and provide an implementation it does not allow us to leverage the Spring container easily.  The solution I currently have in place is to extend org.springframework.orm.ibatis.SqlMapClientFactoryBean to gain access to the underlying SqlMapClient and inject the ResultObjectFactory into it. While this works it would be a great enhancement to be able to simply define the ResultObjectFactory in my Spring context file, and reference it from the SqlMapClientFactoryBean, similar to the following:  \ \ \ \ \","closed","type: enhancement,","spring-projects-issues","2006-09-08T02:53:02Z","2012-06-19T09:37:37Z"
"","7186","Transaction suspend returns connection to pool for closure causing resume to throw exception [SPR-2497]","**[Chris Mathrusse](https://jira.spring.io/secure/ViewProfile.jspa?name=cmathrusse)** opened **[SPR-2497](https://jira.spring.io/browse/SPR-2497?redirect=false)** and commented  Please refer to posting http://forum.springframework.org/showpost.php?p=74520&postcount=13  I'm utilizing Spring's transaction interceptor to manage my transactions and JtaTransactionManager as I have distributed transactions that need to occur. But the real problem is with suspend/resume and the DataSourceUtils class. It appears that there is some recursion happening.  My data source is getting wrapped in a TransactionAwareDataSourceProxy in the iBatis SqlClientMapFactoryBean.  When a request is made in the SqlMapClientTemplate execute method, a request is made for a connection. This is accomplished with a call to DataSourceUtils.getConnection(getDataSource()). The call to getDataSource()  returns the TransactionAwareDataSourceProxy and passes it into the getConnection method. A call is then made to doGetConnection(dataSource). The line of code is as follows:  ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);  This call returns null as it is the first request. The line of code executed is a logging statement:    ---  **Affects:** 1.2.8, 2.0 RC2, 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-28T04:27:40Z","2012-06-19T03:51:18Z"
"","7602","ServletRequestUtils.getXXXParameter with default value argument uses too much memory [SPR-2916]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-2916](https://jira.spring.io/browse/SPR-2916?redirect=false)** and commented  While profiling the memory of our application, we discovered that the ServletRequestUtils.getXXXParameter methods allocate memory for an error message that is caught and eaten:  This code...  public static boolean getBooleanParameter(ServletRequest request, String name, boolean defaultVal) { try { return getRequiredBooleanParameter(request, name); } catch (ServletRequestBindingException ex) { return defaultVal; } }  ...results in the creation of an exception object:  protected final void validateRequiredParameter(String name, Object parameter) throws ServletRequestBindingException {           if (parameter == null) {               throw new ServletRequestBindingException(                             ""Required "" + getType() + "" parameter '"" + name + ""' is not present"");          }     }  Attaching the output from a profiling session where getBooleanParameter was called ~300 times.  Possible solutions:  1) Use a StringBuffer to construct the message instead of (expensive) String concatentation; 2) Build the assembly smarts into ServletRequestBindingException so the message is only assembled when requested, i.e. throw new ServletRequestBindingException( getType(), name ).  In this case, given that there are a whole class of methods that depend on eating ServletRequestBindingExceptions, options 2 would seem prudent - defer the message construction until if/when it is needed (it would be avoided totally for the getXXXParameter calls).  Categorizing this as a bug vs. improvement, as the message construction uses excessive memory when other options are available.   ---  **Affects:** 2.0.1  **Attachments:** - [booleanParameterParser.jpg](https://jira.spring.io/secure/attachment/12264/booleanParameterParser.jpg) (_190.60 kB_)","closed","type: bug,","spring-projects-issues","2006-12-05T09:03:46Z","2012-06-19T03:50:59Z"
"","7562","Add an optional 'prefix' property to DefaultMessageCodesResolver [SPR-2875]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-2875](https://jira.spring.io/browse/SPR-2875?redirect=false)** and commented  Add an optional 'prefix' property to DefaultMessageCodesResolver that allows for a system-enforced convention for validation failure messages codes.  This is important on large i18n projects (with thousands of message codes) for providing grouping / context.  To extend the example provided in DefaultMessageCodesResolver (using a prefix of 'validation'):      *  1. try ""validation.typeMismatch.user.age""     * 2. try ""validation.typeMismatch.age""     * 3. try ""validation.typeMismatch.int""     * 4. try ""validation.typeMismatch""   I've attached a sample of how we have accomplished this - having the prefix property would be simpler/cleaner.  Another option to consider would be refactoring the code construction into overridable methods (buildCode(errorCode,objectName,field) and buildCode(errorCode,field), which opens up possibilities beyond the simple addition of a prefix.   ---  **Affects:** 2.0.1  **Attachments:** - [FrameworkMessageCodesResolver.java](https://jira.spring.io/secure/attachment/12238/FrameworkMessageCodesResolver.java) (_2.05 kB_)","closed","type: enhancement,","spring-projects-issues","2006-11-25T13:22:35Z","2012-06-19T03:51:17Z"
"","7475","form:errors tag clobbers 'messages' attribute - again [SPR-2788]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-2788](https://jira.spring.io/browse/SPR-2788?redirect=false)** and commented  This is a do-over of #7126, which was fixed but broken again by #7303.  Please refer to these issues for background.  We are now experiencing the same behaviour as indicated in #7126.  The NullPointerException experienced in #7303 appears to be a container problem; according to the J2EE 1.4 spec  http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/jsp/JspContext.html#setAttribute(java.lang.String,%20java.lang.Object) : Register the name and value specified with page scope semantics. If the value passed in is null, this has the same effect as calling removeAttribute( name, PageContext.PAGE_SCOPE ).  That aside, the fix for this problem changed the semantics of removing and restoring the prior 'messages' attribute; since removeAttribute is used with no scope (vs the previous setAttribute(messages,null), which uses page scope) - and exposeAttributes is only called when shouldRender() is true (in the case of errors), we end up with 'messages' being clobbered from all scopes when there are no error messages.  The fix is simple; constrain everything to page scope, adding a flag to indicate if we exposed the messages (to deal with the case where there were previously page scoped messages):  private boolean exposedMessages;      @Override     protected void exposeAttributes() throws JspException     {         List errorMessages = new ArrayList();         errorMessages.addAll( Arrays.asList( getBindStatus().getErrorMessages() ) );         this.oldMessages = this.pageContext.getAttribute( MESSAGES_ATTRIBUTE,                 PageContext.PAGE_SCOPE );         this.pageContext.setAttribute( MESSAGES_ATTRIBUTE, errorMessages, PageContext.PAGE_SCOPE );         this.exposedMessages = true;     }          @Override     protected void removeAttributes()     {         if( this.exposedMessages )         {             if( this.oldMessages != null )             {                 this.pageContext.setAttribute( MESSAGES_ATTRIBUTE, this.oldMessages,                         PageContext.PAGE_SCOPE );                 this.oldMessages = null;             }             else             {                 this.pageContext.removeAttribute( MESSAGES_ATTRIBUTE, PageContext.PAGE_SCOPE );             }             this.exposedMessages = false;         }     }  ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-01T09:31:38Z","2019-01-11T21:06:29Z"
"","7140","Request scoped typed collection fails when used as a dependency [SPR-2451]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-2451](https://jira.spring.io/browse/SPR-2451?redirect=false)** and commented  Using the following context fragment to inject a request-scoped collection (the per-request state) into a singleton:  \ \ \                      The singleton bean is implemented as:  public class OnLoadScriptManagerImpl extends WebObjectSupport implements OnLoadScriptManager { private List\ m_onLoadScripts; private Comparator m_comparator = new OrderComparator();      public OnLoadScriptManagerImpl()     {         // EMPTY     }          @SuppressWarnings( ""unchecked"" )     public void addOnLoadScript( OnLoadScript script )     {         m_onLoadScripts.add( script );     }          @SuppressWarnings( ""unchecked"" )     public List getOnLoadScripts()     {         Collections.sort( m_onLoadScripts, m_comparator );         return m_onLoadScripts;     }          @Required     public void setOnLoadScripts( List onLoadScripts )     {         m_onLoadScripts = onLoadScripts;     }  }  ...note the typed collection in setOnLoadScripts.  On context initialization, this fails with the below exception / stack trace:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'onLoadScriptManager' defined in file [C:\jboss-3.2.6\server\bridges\deploy\bridges\choices-development.ear\shared-webapp-context\web-context.xml]: Error setting property values; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.onLoadScripts': Scope 'request' is not active; nested exception is java.lang.IllegalStateException: No thread-bound request: use RequestContextFilter Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.onLoadScripts': Scope 'request' is not active; nested exception is java.lang.IllegalStateException: No thread-bound request: use RequestContextFilter Caused by: java.lang.IllegalStateException: No thread-bound request: use RequestContextFilter at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:62) at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:40) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:276) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.aop.target.AbstractPrototypeBasedTargetSource.newPrototypeInstance(AbstractPrototypeBasedTargetSource.java:58) at org.springframework.aop.target.PrototypeTargetSource.getTarget(PrototypeTargetSource.java:30) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:673) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:624) at $java.util.ArrayList$$EnhancerByCGLIB$$ab5862d8.size(\) at org.springframework.beans.TypeConverterDelegate.convertToTypedCollection(TypeConverterDelegate.java:301) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:189) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:127) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:770) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:606) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(AbstractPropertyAccessor.java:49) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:74) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:861) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:303) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)  ...it appears that, in the process of converting to a typed collection, the proxy is triggered to fetch the bean from it's respective scope, which is (generally) non-sensical during initialization.  Working around this by making an OnLoadState object that contains the collection.   ---  **Affects:** 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-21T02:22:55Z","2012-06-19T03:50:19Z"
"","7126","form:errors tag clobbers 'messages' attribute [SPR-2437]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-2437](https://jira.spring.io/browse/SPR-2437?redirect=false)** and commented  After upgrading to Spring 2.0 RC3, we noticed that any our i18n code failed to resolve keys; this was tracked down to revisions in the form:errors tag that clobber the 'messages' attribute (i.e. removing it instead of resetting it).  Scenario:  Consider the following JSP:  \	${messages['common.aa.siteId']} \ 							\														 								\\ 								\\\ 							\ 							\ 							\${messages['common.aa.createPortfolio.forgotInformationContactSchool']}\ 							\  ...where we expose a custom map 'messages' (I believe this is the same name that JSF/Facelets uses as well) to resolve keys (using a ReloadableResourceBundleMessageSource behind the scenes).   The second use of 'messages' does not output anything; removing the form:errors tag resolves the issue (until the next field, and so on...).  It looks like RC3's ErrorsTag.java added exposeAttributes and removeAttributes, which clobber the 'messages' attribute.  Options:  1) Change the 'messages' attribute name (it is new in RC3); perhaps 'formMessages'? 2) Store / restore the 'messages' attribute in removeAttributes; do note that this prevents use of the oringinal 'messages' object inside a form:error tag 3) Don't expose the messages as an attribute inside form:error    ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-16T07:40:17Z","2012-06-19T03:50:13Z"
"","7102","NPE with TransactionAttributeSourceAdvisor.TransactionAttributeSourcePointcut when debug enabled [SPR-2413]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-2413](https://jira.spring.io/browse/SPR-2413?redirect=false)** and commented  Upgrading from 2.0RC2 to 2.0RC3; aside from a couple of moved classes, everything went smooth, until we turned on DEBUG for org.springframework.  This resulting in a NPE:  java.lang.NullPointerException at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.getTransactionAttributeSource(TransactionAttributeSourceAdvisor.java:102) at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.hashCode(TransactionAttributeSourceAdvisor.java:121) at java.lang.Object.toString(Object.java:209) at java.lang.String.valueOf(String.java:2615) at java.lang.StringBuffer.append(StringBuffer.java:220) at org.springframework.aop.support.AbstractPointcutAdvisor.toString(AbstractPointcutAdvisor.java:71) at java.lang.String.valueOf(String.java:2615) at java.lang.StringBuffer.append(StringBuffer.java:220) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:383) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242)  ...the bean that triggered this was:  \ \ \ \ \ \ \ \  It looks like AbstractAutowireCapableBeanFactory logs a debug message (line 383) ""Eagerly caching..."", which forces a toString on the instantiated bean; since the TransactionAttributeSourceAdvisor.TransactionAttributeSourcePointcut does not have a toString() method, it uses Object.toString, which calls hashCode(), triggering the NPE (as the interceptor hasn't been injected yet).  Possible solutions are to remove the hashCode (presumably it is there for a reason though) or add a toString() method to TransactionAttributeSourceAdvisor.TransactionAttributeSourcePointcut  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7192 Change of logging level to debug causes bean creation failure in presence of  (_**""is duplicated by""**_) - #7103 NPE when creating a TransactionAttributeSourceAdvisor bean w/debug enabled (_**""is duplicated by""**_) - #7205 Bug with  and JPA with Spring 2 RC3: internal creation TransactionAttributeSourceAdvisor leads to NPE (_**""is duplicated by""**_) - #7277 Turning on debugging causes NPE with aspects (_**""is duplicated by""**_)  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2006-08-11T05:29:33Z","2019-01-11T19:33:29Z"
"","6955","Documentation for advising transactional operations (section 9.5.5) doesn't include example for tx:annotation-driven [SPR-2266]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-2266](https://jira.spring.io/browse/SPR-2266?redirect=false)** and commented  The documentation on advising transaction operations (section 9.5.5) states ""Consider the situation where you have an instance of a class, and you would like to execute both transactional and (to keep things simple) some basic profiling advice . So how do you effect this in the context of using ?""  ...yet the included example doesn't address tx:annotation-driven / `@Transactional`.   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-09T10:00:32Z","2012-06-19T03:52:30Z"
"","6927","Subclasses of ApplicatonObjectSupport can no longer be proxied via CGLIB [SPR-2237]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-2237](https://jira.spring.io/browse/SPR-2237?redirect=false)** and commented  The latest nightly build (2.0RC2 b69) fails to proxy beans whose implementation inherits from ApplicationObjectSupport.  With RC1, the following messages were logged:  10:36:58.469 INFO  [Cglib2AopProxy] Unable to proxy method [public final org.springframework.context.ApplicationContext org.springframework.context.support.ApplicationObjectSupport.getApplicationContext() throws java.lang.IllegalStateException] because it is final: All calls to this method via a proxy will be routed directly to the proxy. [] [main] 10:36:58.469 INFO  [Cglib2AopProxy] Unable to proxy method [public final void org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException] because it is final: All calls to this method via a proxy will be routed directly to the proxy. [] [main]  With RC2b69, an exception is thrown with the following message:  Cannot proxy class 'bridges.facade.aa.AuthenticationFacadeImpl' since it has one or more public final methods.  ...it looks like the implementation of Cglib2AopProxy.doValidateClass changed between RC1 & RC2b69.  One workaround would be to use JDK proxies, which works for this specific object; however, we have a number of legacy objects (now Spring-proxied for txns), which is why CGLIB proxying is enabled.    ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-04T08:06:28Z","2012-06-19T03:52:30Z"
"","7638","Change RowMapperResultSetExtractor.extractData() to always use ArrayList [SPR-2952]","**[chris alme](https://jira.spring.io/secure/ViewProfile.jspa?name=almeitus)** opened **[SPR-2952](https://jira.spring.io/browse/SPR-2952?redirect=false)** and commented  Currently, RowMapperResultSetExtractor.extractData() uses an ArrayList if the expected results is known, a LinkedList otherwise:  public Object extractData(ResultSet rs) throws SQLException { // Use the more efficient collection if we know how many rows to expect: // ArrayList in case of a known row count, LinkedList if unknown List results = (this.rowsExpected > 0) ? (List) new ArrayList(this.rowsExpected) : (List) new LinkedList(); int rowNum = 0; while (rs.next()) { results.add(this.rowMapper.mapRow(rs, rowNum++)); } return results; }  Due to the fact that the mapped row is always added to the end of the list, it would be more efficient to always use ArrayList as the backing List implementation saves us the added overhead of a LinkedList.  See this post for more info:  http://forum.springframework.org/showthread.php?t=32591  -Chris   ---  **Affects:** 1.2.8, 2.0.1  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-12-14T14:10:46Z","2012-06-19T03:50:37Z"
"","7642","Spring MVC vulnerability allows extraneous parameters attack [SPR-2956]","**[Cheng Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=cheng.lee)** opened **[SPR-2956](https://jira.spring.io/browse/SPR-2956?redirect=false)** and commented  When using Spring MVC to process form submission, it is possible to inject values that were not expected into the backing bean.  Suppose the following bean:  public class User { String name; String password; BigDecimal balance; }  and the generated query string during a form submission:  http://www.mydomain.com/updateAccount  It feasible to append parameters in order to inject value into the backing bean by simply supplying the bean attribute name, such as ""password"" or ""balance"", that is for example by appending:  http://www.mydomain.com/updateAccount?balance=1000000000   ---  **Affects:** 1.2.8","closed","status: declined,","spring-projects-issues","2006-12-17T13:12:31Z","2019-01-12T16:40:32Z"
"","7460","Poor performance creating non-singleton beans with many threads [SPR-2772]","**[Charles Blaxland](https://jira.spring.io/secure/ViewProfile.jspa?name=charlesb)** opened **[SPR-2772](https://jira.spring.io/browse/SPR-2772?redirect=false)** and commented  When many threads attempt to create non-singleton beans simultaneously Spring's performance is extremely poor. Spring 2.0 also seems to be worse than Spring 1.2.8 in this regard. I suspect its due to all the synchronized blocks in the BeanFactory.  I have a heavily threaded server application, which at a certain point creates a bunch of nested non-singleton beans via a Spring lookup-method. While running load tests I noticed this step was a bottleneck in our application. I wrote a small test application which created a number of threads which all tried to create a number of non-singleton beans. The results are below:  ``` Spring 2.0 ========== singleton=""false"" ----------------- 08188ms 1 Thread, 10000 bean creations per thread (10000 total) 15656ms 10 Threads, 1000 bean creations per thread (10000 total) 24703ms 100 Threads, 100 bean creations per thread (10000 total) 27235ms 1000 Threads, 10 bean creations per thread (10000 total)  singleton=""true"" ---------------- 01110ms 1 Thread, 10000 bean creations per thread (10000 total) 01266ms 10 Threads, 1000 bean creations per thread (10000 total) 01281ms 100 Threads, 100 bean creations per thread (10000 total) 01515ms 1000 Threads, 10 bean creations per thread (10000 total)   Spring 1.2.8 ============ singleton=""false"" ----------------- 04797ms 1 Thread, 10000 bean creations per thread (10000 total) 05719ms 10 Threads, 1000 bean creations per thread (10000 total) 13000ms 100 Threads, 100 bean creations per thread (10000 total) 17922ms 1000 Threads, 10 bean creations per thread (10000 total) ```  You can see that for the same number of bean creations, the time taken increases rapidly as you increase the number of threads. Obviously there is some overhead in managing the many threads, but not enough to account for what is seen here. Its apparent that Spring 2.0 is also 60-70% slower than 1.2.8 for this task, even with a single thread.  ---  **Affects:** 1.2.8, 2.0 final  **Attachments:** - [screenshot profiling session.jpg](https://jira.spring.io/secure/attachment/12075/screenshot+profiling+session.jpg) (_293.05 kB_) - [Spring2TestBean.java](https://jira.spring.io/secure/attachment/12074/Spring2TestBean.java) (_672 bytes_) - [springtest.zip](https://jira.spring.io/secure/attachment/12072/springtest.zip) (_1.98 kB_)  **Issue Links:** - #7573 Poor performance creating prototype beans (_**""is duplicated by""**_) - #7667 Spring performance is insufficient for intensive work at short scopes  6 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-10-28T18:26:07Z","2019-01-11T21:07:25Z"
"","7305","Support for JSTL 1.2 [SPR-2616]","**[Changshin Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=iasandcb)** opened **[SPR-2616](https://jira.spring.io/browse/SPR-2616?redirect=false)** and commented  The current TLD file is based on JSTL 1.1. The patch is a revised TLD for JSTL 1.2.   ---  **Attachments:** - [spring.tld](https://jira.spring.io/secure/attachment/11971/spring.tld) (_12.97 kB_)","closed","type: enhancement,","spring-projects-issues","2006-09-20T19:25:00Z","2012-06-18T12:44:33Z"
"","7766","Section 17.3.3 Wrong url configuration [SPR-3080]","**[Carsten Ziegeler](https://jira.spring.io/secure/ViewProfile.jspa?name=cziegeler)** opened **[SPR-3080](https://jira.spring.io/browse/SPR-3080?redirect=false)** and commented  I think the url for the remote service is not correct, the property ""serviceUrl"" should be http://remotehost:8080/remoting/AccountService  and not  http://remotehost:8080/AccountService   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-01-25T18:51:17Z","2012-06-19T03:50:04Z"
"","7726","Classes loaded with ShadowingClassloader return null for getPackage() call [SPR-3040]","**[Caleb Washburn](https://jira.spring.io/secure/ViewProfile.jspa?name=cwash5)** opened **[SPR-3040](https://jira.spring.io/browse/SPR-3040?redirect=false)** and commented  When leveraging the ShadowingClassloader the classes that are loaded return null for getPackage() method calls.  This causes a problem with code that is using the getPackage().getName() to determine the package name of the class.  OpenJpa 0.9.7 uses this mechanism to load it localizer.properties from each package.  Below is a unit test added to ResourceOverridingShadowingClassLoaderTests  public void testGetClassPackageFromOverriddenClassLoader() { try { assertNotNull(overridingLoader.loadClass(EXISTING_CLASS).getPackage()); } catch (ClassNotFoundException e) { throw new RuntimeException(e); }  }  Where EXISTING_CLASS is the fully qualified class name of a class that is not in a package that has already been loaded by the parent classloader.  ie org.springframework.instrument.classloading.test.TestClass   ---  **Affects:** 2.0.1, 2.0.2  **Attachments:** - [ShadowingClassLoader.java](https://jira.spring.io/secure/attachment/12340/ShadowingClassLoader.java) (_5.62 kB_)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2007-01-15T00:57:16Z","2012-06-19T03:50:25Z"
"","7616","Allow additional class prefixes to be excluded from being loaded by ShadowingClassLoader [SPR-2930]","**[Caleb Washburn](https://jira.spring.io/secure/ViewProfile.jspa?name=cwash5)** opened **[SPR-2930](https://jira.spring.io/browse/SPR-2930?redirect=false)** and commented  When using AbstractJPATests on WebSphere 6.1 JRE an UnsatisfiedLinkError on an internal Trace class within the com.ibm.* package structure when trying to load com.ibm classes (DB2 Driver in particular).  The same configuration works on Java Sun JRE.  org.springframework.test.jpa.OrmXmlOverridingShadowingClassLoader does not currently allow clients to configure additional classes to exclude from being loaded.  Proposed Fix:  Add an overloaded constructor that allows passing in a list of prefixes to exclude.  //added public OrmXmlOverridingShadowingClassLoader(ClassLoader loader, String realOrmXmlLocation, List\ excludedPrefixes) { this(loader, realOrmXmlLocation); this.excludedPrefixes = excludedPrefixes;		 }  As well as add the following code to isClassNameExcludedFromShadowing()  for (String excludedPrefix : excludedPrefixes) { if (className.startsWith(excludedPrefix)) { return true; } }  Also added a protected method to org.springframework.test.jpa.AbstractJpaTests      protected List getExcludedPrefixes() {     	return new ArrayList();     }  and modified the following method.  protected ClassLoader createShadowingClassLoader(ClassLoader classLoader) { OrmXmlOverridingShadowingClassLoader orxl = new OrmXmlOverridingShadowingClassLoader(classLoader, getActualOrmXmlLocation(),getExcludedPrefixes());		 customizeResourceOverridingShadowingClassLoader(orxl); return orxl; }  This would allow implementors of AbstractJpaTests to override getExcludedPrefixes and specify additional class prefixes to be excluded from being loaded by the ShadowingClassLoader.    ---  **Affects:** 2.0 final, 2.0.1  **Attachments:** - [AbstractAspectjJpaTests.java](https://jira.spring.io/secure/attachment/12271/AbstractAspectjJpaTests.java) (_2.10 kB_) - [OrmXmlOverridingShadowingClassLoader.java](https://jira.spring.io/secure/attachment/12270/OrmXmlOverridingShadowingClassLoader.java) (_2.72 kB_) - [OrmXmlOverridingShadowingClassLoader.java](https://jira.spring.io/secure/attachment/12269/OrmXmlOverridingShadowingClassLoader.java) (_2.72 kB_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-12-08T03:32:54Z","2012-06-19T03:50:32Z"
"","7436","Small typo in doc. [SPR-2748]","**[Bård Dybwad Kristensen](https://jira.spring.io/secure/ViewProfile.jspa?name=bdk)** opened **[SPR-2748](https://jira.spring.io/browse/SPR-2748?redirect=false)** and commented  Hi  Just found at typo in the doc. In chapter 2.7.1.2. XML configuration the word ""shiiped"" is used.  Cheers   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-24T06:11:04Z","2012-06-19T03:51:14Z"
"","6969","Add Spring lightweight plug-ins to core [SPR-2280]","**[Bryant Harris](https://jira.spring.io/secure/ViewProfile.jspa?name=bryant_harris)** opened **[SPR-2280](https://jira.spring.io/browse/SPR-2280?redirect=false)** and commented  Hi, First let me say, love the Spring framework, really, really good stuff.  I couldn't find a better place to submit this, but I think I came up with a new usage of Spring as a platform for lightweight plug-ins.  I actually got an article published about it (http://www.devx.com/Java/Article/31835).  I'd like to submit the code to the Spring project.  We use the approach described in the article in my current project to dynamically assemble our app and it works great.   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-11T12:22:17Z","2012-06-19T09:37:22Z"
"","7873","custom-scoped proxied beans are incompatible with autowiring by type [SPR-3188]","**[Bruno Navert](https://jira.spring.io/secure/ViewProfile.jspa?name=mycroft)** opened **[SPR-3188](https://jira.spring.io/browse/SPR-3188?redirect=false)** and commented  A custom-scoped bean, proxied using , cannot be autowired into any object, because both the proxied object and the original bean are visible to the bean factory, which of course fails with an exception like this:  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name '...' defined in file [...]: Unsatisfied dependency expressed through bean property '...': There are 2 beans of type [...] for autowire by type. There should have been exactly 1 to be able to autowire property '...' of bean '...'. Consider using autowire by name instead.  When scoped-proxy is used, the original bean definition should be marked with autowire-candidate=""false"", thereby hiding it when searching for beans to autowire. The bean factory should then be able to find the proxied bean. The proxied bean should of course still honor the setting of the autowire-candidate in the XML file, but the original bean should always have ""false"" no matter what it says in the config.   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2007-02-20T02:01:30Z","2012-06-19T03:50:06Z"
"","7836","Create CGLIB proxy instances honoring  tags [SPR-3150]","**[Bruno Navert](https://jira.spring.io/secure/ViewProfile.jspa?name=mycroft)** opened **[SPR-3150](https://jira.spring.io/browse/SPR-3150?redirect=false)** and commented  This problem was encountered with Snapshot build 98 of version 2.0.3.  The following bean definition of a custom-scoped bean (the class is a backport of JDK 1.5's java.util.concurrent.ArrayBlockingQueue to work on JDK 1.4):  ```xml             ```  Failed with the error below. The class in question has no empty constructor, it needs an integer value, which is specified by \.  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue#55a338': Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Couldn't generate CGLIB subclass of class [class edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Superclass has no null constructors but no arguments were given Caused by: org.springframework.aop.framework.AopConfigException: Couldn't generate CGLIB subclass of class [class edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue]: Common causes of this problem include using a final class or a non-visible class; nested exception is java.lang.IllegalArgumentException: Superclass has no null constructors but no arguments were given Caused by: java.lang.IllegalArgumentException: Superclass has no null constructors but no arguments were given 	at net.sf.cglib.proxy.Enhancer.emitConstructors(Enhancer.java:718) 	at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:499) 	at net.sf.cglib.transform.TransformingClassGenerator.generateClass(TransformingClassGenerator.java:33) 	at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) 	at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:216) 	at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377) 	at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285) 	at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:193) 	at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:107) 	at org.springframework.aop.scope.ScopedProxyFactoryBean.setBeanFactory(ScopedProxyFactoryBean.java:109) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1074) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:430) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:197) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1017) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:810) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:426) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:252) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:144) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:249) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:358) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:869) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:782) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:426) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:252) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:144) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:249) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:280) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:357) ```  I am using CGLib 2.1.3 (the one that ships with Hibernate 3.2.1)  This problem does not occur in version 2.0.0  ---  **Affects:** 2.0.3  **Issue Links:** - #15223 Add ability to create proxy around classes that has no default constructor (_**""is superseded by""**_)  15 votes, 19 watchers","closed","has: votes-jira,","spring-projects-issues","2007-02-11T23:58:27Z","2019-01-11T17:34:59Z"
"","7821","Custom-scoped beans cannot be declared inline in a  tag in 2.0.2 [SPR-3135]","**[Bruno Navert](https://jira.spring.io/secure/ViewProfile.jspa?name=mycroft)** opened **[SPR-3135](https://jira.spring.io/browse/SPR-3135?redirect=false)** and commented  A custom-scoped bean cannot be declared as such in Spring 2.0.2:   \ \  \ \ \  It must be declared outside the parent and referenced:  \ \ \ \ \ \  (note: the fact that the bean is a static inner class has nothing to do with this, I get the same problem with a regular non-inner class)  The first definition style works fine in version 2.0.0 (final) but fails in 2.0.2 with this error message:  org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'scopedTarget.com.ms.wi.ireports.ce.async.SubmitJobExecutor$JobCounter#14db0e3' is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:340) at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:906) at org.springframework.beans.factory.support.AbstractBeanFactory.isSingleton(AbstractBeanFactory.java:351) at org.springframework.aop.target.AbstractPrototypeBasedTargetSource.setBeanFactory(AbstractPrototypeBasedTargetSource.java:44) at org.springframework.aop.scope.ScopedProxyFactoryBean.setBeanFactory(ScopedProxyFactoryBean.java:84) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1076) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:429) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:250) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:247) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:161) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:270) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:346) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156)   ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-02-08T04:38:48Z","2012-06-19T03:51:08Z"
"","7820","Doc: Beans injected (or referenced by) a BeanPostProcessor cannot have aspects woven into them [SPR-3134]","**[Bruno Navert](https://jira.spring.io/secure/ViewProfile.jspa?name=mycroft)** opened **[SPR-3134](https://jira.spring.io/browse/SPR-3134?redirect=false)** and commented  When a BeanPostProcessor needs a reference to some bean, that bean cannot later have aspects woven in it, because its BeanDefinition has been frozen and the AbstractBeanFactory silently ignores any modifications. The mergedBeanDefinitions Map contains the bean, since it is preloaded when loading the post-processor, and from that point on any attempt to modify the bean (such as weaving an aspect) fails silently with no error message.  Steps to reproduce: have a BeanPostProcessor depend on a single bean. Create an aspect for that bean (any type of aspect) in order to have Spring proxy the bean. Then once the context is loaded, do a getBean() with its name and output the .getClass(). If the post-processor was injected with the bean, it will output the direct class (no proxy). Then remove the injection in the post-processor, and the proxy class will be output instead.  At the very least an error message would be nice when a modified BeanDefinition is refused by the BeanFactory, i.e. when AbstractBeanFactory.getMergedBeanDefinition() find an entry in its Map (mergedBeanDefinitions), it should check whether the passed-in BeanDefinition is different from the one saved in the Map. If so, at the very least log that the modified definition will NOT be used, since otherwise it is quite difficult to find the cause of the error. Ideally allow the mergedBeanDefinition to be updated from the passed-in definition, but that implies changing the reference already injected in the post-processor, which doesn't seem possible with the current workflow from what I can tell.   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2007-02-08T04:07:04Z","2012-06-19T03:51:16Z"
"","7808","Constructor autowiring for BeanFactoryPostProcessors pre-instantiates all singleton beans, preventing PropertyPlaceholder replacement from working [SPR-3121]","**[Bruno Navert](https://jira.spring.io/secure/ViewProfile.jspa?name=mycroft)** opened **[SPR-3121](https://jira.spring.io/browse/SPR-3121?redirect=false)** and commented  When the context contains a BeanFactoryPostProcessor whose constructor must be autowired, the getBeansForType() will automatically pre-instantiate singletons in order to obtain their type. If these singletons need some of their properties resolved with a PropertyPlaceholder, then it will not work, since the mergedBeanDefinition has already been saved in AbstractBeanFactory.  In other words, AbstractBeanFactory.getMergedBeanDefinition() will ignore the modified bean definition, resulting from property placeholder resolving, because its inner Map, mergedBeanDefinitions, already contains the original definition for the bean (prior to resolving placeholders). The reason for this is that the getBeansForType() method has run before to try to find an appropriate bean for autowiring, and was forced to call getBean() to get the singleton instance. From that point on the bean definition is frozen and cannot be modified.  In Spring 2.0.0 this did not happen, the singleton bean was NOT instantiated and the bean definition was not frozen. The inner mechanisms for obtaining the type of a singleton bean seem to have changed considerably from 2.0.0 to 2.0.2, the resolveBeanClass() method in 2.0.0 work very well to obtain the class without having to get an instance.  To reproduce: add 2 bean post processors, one is PropertyPlaceholderConfigurer, the other has a constructor that must be autowired (any dummy custom implementation will do, as long as its constructor must be autowired). Then add a third singleton bean which has a placeholder in one of its properties, and  the placeholder will not be resolved in 2.0.2, but it will work in 2.0.0   ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-02-06T01:54:47Z","2019-01-11T17:32:39Z"
"","7277","Turning on debugging causes NPE with aspects [SPR-2588]","**[Brian Topping](https://jira.spring.io/secure/ViewProfile.jspa?name=topping)** opened **[SPR-2588](https://jira.spring.io/browse/SPR-2588?redirect=false)** and commented  If log4j debugging is turned on (org.springframework=DEBUG), the container cannot load an aspect bean without getting an NPE in TransactionAttributeSourceAdvisor for the current Trails project.  The regression on this should be easy if you want to sample a project with it.  Just download Trails from trailsframework.org, generate an app from archetype and turn on log4j.logging.  If you just want to look at the spring configuration, you can do that at http://fisheye.codehaus.org/browse/trails/trunk/trails/trails-archetype/src/main/resources/archetype-resources/src/main/resources/applicationContext.xml?r=329  ---  **Affects:** 2.0 RC3  **Issue Links:** - #7102 NPE with TransactionAttributeSourceAdvisor.TransactionAttributeSourcePointcut when debug enabled (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2006-09-14T19:42:44Z","2019-01-12T16:51:59Z"
"","7188","HibernateTemplate.createSessionProxy() should return proxy implementing SessionImplementor [SPR-2499]","**[Brian Topping](https://jira.spring.io/secure/ViewProfile.jspa?name=topping)** opened **[SPR-2499](https://jira.spring.io/browse/SPR-2499?redirect=false)** and commented  The proxy returned by HibernateTemplate.createSessionProxy() should implement SessionImplementor.  Not doing so causes a CCE in Hibernate3's DetachedCriteria.getExecutableCriteria() when called from an implementation of HibernateCallback.  Consider:      public  T getInstance(final DetachedCriteria criteria)     {         Object result = getHibernateTemplate().execute(new HibernateCallback() {             public Object doInHibernate(Session session) throws HibernateException, SQLException {                 Criteria executableCriteria = criteria.getExecutableCriteria(session);                 return executableCriteria.uniqueResult();             }         });         return (T) result;     }  The first thing the call to getExecutableCriteria does is cast the session argument to a SessionImplmentor.  A patch is attached.    ---  **Affects:** 2.0 RC3  **Attachments:** - [HibernateTemplate.patch](https://jira.spring.io/secure/attachment/11913/HibernateTemplate.patch) (_428 bytes_)","closed","type: bug,","spring-projects-issues","2006-08-28T12:58:55Z","2019-01-11T19:35:22Z"
"","7183","Compiling from maven POM tree creates incomplete JARs [SPR-2494]","**[Brian Topping](https://jira.spring.io/secure/ViewProfile.jspa?name=topping)** opened **[SPR-2494](https://jira.spring.io/browse/SPR-2494?redirect=false)** and commented  When compiling from the maven POMs that are checked into CVS, the ""tiger"" source tree is not included in the JARs that are created.  As a result, one issue is annotation support is not included in the JARs that are created.  If one needs to build from source and wants transitive dependencies to work with M2, they have to use these POMs, but if the POMs don't work, the M2 user is stuck.  I have a few changes to the POMs to bring them up to date, but I'm not sure how the source overlay works with this ""tiger"" tree or why it is separated out, so it's hard for me to go much further.   ---  **Affects:** 2.0 RC3  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2006-08-27T22:10:21Z","2007-01-23T00:51:06Z"
"","7341","Nested Transactional REQUIRES_NEW annotation ignored in case of AopContext.currentProxy() call [SPR-2652]","**[Brian Pontarelli](https://jira.spring.io/secure/ViewProfile.jspa?name=voidmain)** opened **[SPR-2652](https://jira.spring.io/browse/SPR-2652?redirect=false)** and commented  Found another possible blocker. I'm using annotation driven transactions and I'm NOT using the new XML namespace configuration because I need access to the current proxy using AopContext and I couldn't figure out how to access that using the new configuration. Anyways, a method in a class that uses the current proxy to call another method in the same class. The first method is REQUIRED and the second method is REQUIRES_NEW. In M4 and earlier releases this would correctly setup a second transaction and have the correct AOP interceptor chain in place. This no longer works in RC4. It appears that either the current proxy is invalid or the interceptors are not being setup correctly.  Here is the code:      @Transactional(propagation = Propagation.REQUIRED)     public Keyword getSystemKeyword(String keyword, String domain){         long keywordId = getThis().getSystemKeywordId(keyword, domain);         return find(keywordId);     }          public void update(Keyword keyword) throws DataIntegrityViolationException {         getHibernateTemplate().update(keyword);     }          public Keyword find(long id) {         List list = getHibernateTemplate().find(                 ""from Keyword where id=? "", id);         return getFirst(list);     }          @Transactional(propagation = Propagation.REQUIRES_NEW)     protected long getSystemKeywordId(String keyword, String domain) {         keyword = normalizeKeyword(keyword);         domain = normalizeDomain(domain);         //Try inserting the keyword into the database. If it fails, it already exists, so grab it.         Keyword result = new Keyword(keyword, domain);         try {             KeywordDAOImpl proxy = getThis();             proxy.detachedInsert(result);             String[] words = keyword.split("" "");             for (String s : words) {                 Word word = new Word();                 try{                     word.setWord(s);                     wordDAO.detachedUpsert(word);                 }catch(DataIntegrityViolationException e){                     word = wordDAO.find(s);                 }                 word.addKeyword(result);                 result.addWord(word);                 update(result);             }         } catch (DataIntegrityViolationException e) {             result = find(keyword, domain);         }         return result.getId();     }          @Transactional(propagation = Propagation.REQUIRES_NEW)     protected void detachedInsert(Keyword keyword) throws DataIntegrityViolationException {         getHibernateTemplate().save(keyword);     }          protected Keyword find(String keyword, String domain) {         List list = getHibernateTemplate().find(                 ""from Keyword where keyword=? and domain=?"", new Object[]{keyword, domain});         return getFirst(list);     }          private KeywordDAOImpl getThis() {         try {             return (KeywordDAOImpl) AopContext.currentProxy();         }         catch (AspectException e) {             return this;         }     }  I've debugged this issue and when the call to getSystemKeywordId is made, which should have a completely new transaction and new interceptor stack, the call stack looks like this:  at com.naymz.dao.listing.KeywordDAOImpl.getSystemKeywordId(KeywordDAOImpl.java:83) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:338) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:180) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:711) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:147) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:652) at com.naymz.dao.listing.KeywordDAOImpl$$EnhancerByCGLIB$$a1f06446.getSystemKeywordId(\) at com.naymz.dao.listing.KeywordDAOImpl.getSystemKeyword(KeywordDAOImpl.java:38) at com.naymz.dao.listing.KeywordDAOImpl$$FastClassByCGLIB$$8206dd97.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:714) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:147) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:169) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:169) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:652) at com.naymz.dao.listing.KeywordDAOImpl$$EnhancerByCGLIB$$a1f06446.getSystemKeyword(\)  It looks like the first method has the correct transaction interceptors and the second doesn't.   ---  **Affects:** 2.0 RC4","closed","status: declined,","spring-projects-issues","2006-09-28T10:49:21Z","2019-01-12T16:28:36Z"
"","7340","Presence of Acegi interceptors breaks autowiring (was working in m4) [SPR-2651]","**[Brian Pontarelli](https://jira.spring.io/secure/ViewProfile.jspa?name=voidmain)** opened **[SPR-2651](https://jira.spring.io/browse/SPR-2651?redirect=false)** and commented  I previously had a configuration that was working fine through all 2.0 releases until I recently upgrade from M4 to RC4. This no longer works. Here is the stack trace:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'messageSource' defined in file [/home/brian/dev/java/naymz/web/WEB-INF/classes/applicationContext.xml]: Cannot resolve reference to bean 'messageDAO' while setting bean property 'messageDAO'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'messageDAO' defined in file [/home/brian/dev/java/naymz/web/WEB-INF/classes/applicationContext-dao.xml]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: sessionFactory or hibernateTemplate is required Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'messageDAO' defined in file [/home/brian/dev/java/naymz/web/WEB-INF/classes/applicationContext-dao.xml]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: sessionFactory or hibernateTemplate is required Caused by: java.lang.IllegalArgumentException: sessionFactory or hibernateTemplate is required at org.springframework.orm.hibernate3.support.HibernateDaoSupport.checkDaoConfig(HibernateDaoSupport.java:112) at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:957) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:924) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:415) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:246) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:850) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:624) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:411) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:646) at org.springframework.context.support.AbstractApplicationContext.initMessageSource(AbstractApplicationContext.java:455) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:336) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:138) at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:125) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:104) at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:75) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69) at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)  This configuration for the SessionFactory (which is a FactoryBean) and the DAO are:  \ \ \ \org.hibernate.dialect.MySQLInnoDBDialect\ \org.hibernate.cache.EhCacheProvider\ \true\ \true\ \false\ \thread\ \true\ \ \ \ \ \ \ \ \ \ \ (snip) \ \ \ \  The configuration for the messageSource bean is:  \ \ \ \ \ \ The issue appears to be that since there is an abstract FactoryBean, the messageDAO is not being injected based on type. My DAO has no dependencies. The superclass of my DAO with a dependency is org.springframework.orm.hibernate3.support.HibernateDaoSupport, which has a setter for a org.hibernate.SessionFactory. I have tried changing the autowire to byType with no luck. byName works but forces huge amounts of changes all over my configuration so that everything is byName and lines up correctly. For whatever reason, the container can no longer determine that I only have a single bean defined of type org.hibernate.SessionFactory and inject that. So, it seems that autowire autodetect and byType are now broken, probably due to the abstract FactoryBean stuff.   ---  **Affects:** 2.0 RC4","closed","in: core,","spring-projects-issues","2006-09-28T07:41:32Z","2012-06-19T03:50:41Z"
"","7729","extractJarFileURL doesn't create the correct file URL from a zip URL on unix [SPR-3043]","**[Brian Curnow](https://jira.spring.io/secure/ViewProfile.jspa?name=bcurnow)** opened **[SPR-3043](https://jira.spring.io/browse/SPR-3043?redirect=false)** and commented  Currently the extractJarFileURL has logic to handle a MalformedURLException. The problem is that the extra slash (added to fix #7607) is invalid when you're on Unix. On Windows the getFile() method on the URL returns a path like:  C:/sandbox/wl9/domains/distribution/./servers/distribution/tmp/_WL_user/_appsdir_getResources_war/kgkwyw/war/WEB-INF/lib/_wl_cls_gen.jar!/META-INF/persistence.xml  Once the method has applied the rest of the logic (it will actually hit the catch block for MalformedURLException) the string it will use to create the URL is:  file:/C:/sandbox/wl9/domains/distribution/./servers/distribution/tmp/_WL_user/_appsdir_getResources_war/kgkwyw/war/WEB-INF/lib/_wl_cls_gen.jar  The extra slash before C:/ is required to fix the ""URL is not hierarchical"" error. However, on Unix the getFile() method on the URL returns a path like:  /lcl/data/wls/wls9/corp1/./servers/admin/tmp/_WL_user/getResources/ijrc95/war/WEB-INF/lib/_wl_cls_gen.jar!/META-INF/persistence.xml  And once the method has applied the rest of the logic (this will also hit the catch block for MalformedURLException) the string it will use to create the URL is:  file://lcl/data/wls/wls9/corp1/./servers/admin/tmp/_WL_user/getResources/ijrc95/war/WEB-INF/lib/_wl_cls_gen.jar  Now you get the message ""URL has authority component"" error.  To fix this, a check should be done on the string to see if it starts with a slash, if it doesn't, add one, if it does just add the ""file:"".  The corrected method is below:  public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException { String urlFile = jarUrl.getFile(); int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR); if (separatorIndex != -1) { String jarFile = urlFile.substring(0, separatorIndex); try { return new URL(jarFile); } catch (MalformedURLException ex) { // Probably no protocol in original jar URL, like ""jar:C:/mypath/myjar.jar"". // This usually indicates that the jar file resides in the file system. if (jarFile.startsWith(""/"")) { return new URL(FILE_URL_PREFIX + jarFile); } else { return new URL(FILE_URL_PREFIX + ""/"" + jarFile); } } } else { return jarUrl; } }  ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-01-16T07:59:16Z","2019-01-11T16:36:44Z"
"","7414","extractJarFileURL throws java.net.MalformedURLException incorrectly [SPR-2726]","**[Brian Curnow](https://jira.spring.io/secure/ViewProfile.jspa?name=bcurnow)** opened **[SPR-2726](https://jira.spring.io/browse/SPR-2726?redirect=false)** and commented  The method extractJarFileURL in org.springframework.util.ResourceUtils attempts to construct a new URL using only the file portion of the original URL, this results in a java.net.MalformedURLException because there is not a valid protocol specified. This error does not occur when running locally from Eclipse, only when running in WebLogic.  I am attempting to setup a LocalContainerEntityManagerFactory:                                                                  My persistence.xml is:  \  \ \ \dto.Invoice\ \dto.InvoiceLine\ \true\ \ \ \ \ \ \  I am using the WebLogicJtaTransactionManager in WebLogic:             and the JpaTransactionManager locally:                               I am using the same JNDI based datastore in both configurations (the datasource is setup in WebLogic JNDI).  I am using annotation driven transactions:   The URL that comes back from the ClassLoader.getResources(""META-INF/persistence.xml"") call looks like:  zip:D:/sandbox/wl9/domains/jpajta/./servers/bcdevapp1/tmp/_WL_user/_appsdir_getResources_war/cnul88/war/WEB-INF/lib/_wl_cls_gen.jar!/META-INF/persistence.xml  The extractJarFileURL method first calls getFile on the URL to get:  D:/sandbox/wl9/domains/jpajta/./servers/bcdevapp1/tmp/_WL_user/_appsdir_getResources_war/cnul88/war/WEB-INF/lib/_wl_cls_gen.jar!/META-INF/persistence.xml  And then strips off the everything after (and including) !/ which leaves:  D:/sandbox/wl9/domains/jpajta/./servers/bcdevapp1/tmp/_WL_user/_appsdir_getResources_war/cnul88/war/WEB-INF/lib/_wl_cls_gen.jar  The method than attempts to construct a URL using that string which is not a valid URL spec.  If the method is changed from:      return new URL(urlFile.substring(0, separatorIndex));  to: return new URL(jarUrl.getProtocol(), jarUrl.getHost(), jarUrl.getPort(), urlFile.substring(0, separatorIndex));  the URL will no longer be malformed.   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-10-17T22:50:21Z","2012-06-19T03:50:49Z"
"","7514","Add ""modules"" support to TilesView and TilesConfigurer [SPR-2827]","**[Brad Cantwell](https://jira.spring.io/secure/ViewProfile.jspa?name=bradcantwell)** opened **[SPR-2827](https://jira.spring.io/browse/SPR-2827?redirect=false)** and commented  Add ""modules"" support to TilesView and TilesConfigurer so that each ApplicationContext can have its own TilesConfigurer.  Currently, the TilesConfigurer calls ""TilesUtil.createDefinitionsFactory(getServletContext(), factoryConfig);"" to create the DefinitionsFactory and place it in the ServletContext under a fixed attribute name.  This restricts each ApplicationContext from loading its own tiles configuration file that does not conflict with ones from other application contexts.  The createDefinitionsFactory method of TilesConfigurer can be overridden in a subclass to place the DefinitionsFactory returned from the TilesUtil.createDefinitionsFactory method call on a unique key in the ServletContext (for example, TilesUtilImpl.DEFINITIONS_FACTORY + getSuffix(), where suffix is a property of the TilesConfigurer subclass).  The TilesView cannot be subclassed since the definitionsFactory variable is declared as private and it has no accessors defined.   If access was available to the definitionsFactory variable, then the initApplicationContext method could be overridden to retrieve the DefinitionsFactory for the particular ApplicationContext from the ServletContext (for example, by finding the bean of type TilesConfigurer in the ApplicationContext and reading its getSuffix() method to generate the unique key as described above).  My favorite solution would be to have modules support added directly to the TilesView and TilesConfigurer.   Another option would be to add a getter and setter for the definitionsFactory variable of TilesView so the initApplicationContext could be overridden.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-11T13:47:42Z","2012-06-19T09:37:35Z"
"","7641","p namespace doesn't work for inner beans [SPR-2955]","**[Blair Nilsson](https://jira.spring.io/secure/ViewProfile.jspa?name=blair)** opened **[SPR-2955](https://jira.spring.io/browse/SPR-2955?redirect=false)** and commented  beans using the p schema don't always get correctly configured.  in this case, test2, test3 and test4 get correctly created, but test1 doesn't get setName called.  \  \                                                                             \  ---  **Affects:** 2.0 final  **Attachments:** - [BeanDefinitionParserDelegate.java](https://jira.spring.io/secure/attachment/12281/BeanDefinitionParserDelegate.java) (_42.27 kB_)  **Issue Links:** - #7661 BeanDefinitionDecorator not being called when nested (_**""depends on""**_)  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2006-12-17T08:03:11Z","2019-01-11T21:21:54Z"
"","7069","Using array syntax generates invalid id [SPR-2380]","**[Bjørn Sættem](https://jira.spring.io/secure/ViewProfile.jspa?name=bzm)** opened **[SPR-2380](https://jira.spring.io/browse/SPR-2380?redirect=false)** and commented  The tag   generates  \ but ""["" and ""]"" are invalid in an identifier name. Ref. http://www.w3.org/TR/html4/types.html#type-name  ---  **Affects:** 2.0 RC2  **Issue Links:** - #9375 form tags path attribute leaving square brackets out of id attribute of html tag  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-03T05:31:00Z","2019-01-11T18:36:54Z"
"","7007","BlobByteArrayType/DefaultLobHandler breaks with Hibernate 3.1.3 and PostgreSQL  [SPR-2318]","**[Bill Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=wrschneider99)** opened **[SPR-2318](https://jira.spring.io/browse/SPR-2318?redirect=false)** and commented  BlobByteArrayType and DefaultLobHandler assume they can call ResultSet.getBytes and PreparedStatement.setBytes on underlying BLOB columns.  However, VARBINARY and BLOB are distinct JDBC  types, and the byte-array methods on the underlying JDBC driver may not always work with BLOB columns.  For example, PostgreSQL does not support get/setBytes on an 'oid'  column.  This became an issue with Hibernate 3.x because Hibernate now maps BLOBs to oids  in PostgreSQL when it used to use bytea in 2.x.  I can think of two potential solutions: - use get/setAsBinaryStream across the board instead of get/setBytes - make a new PostgreSQLLobHandler to parallel Oracle's (except, the underlying stream methods actually work :-))  It seems like it would be the lesser of two evils to always assume LOBs are to be handled as streams in the underlying JDBC driver, but not sure if that breaks any assumptions on other databases.  It may be the case that we need to have distinct LobHandlers for each DB implementation (not much unlike Hibernate dialects) to work around differences in JDBC driver behavior.   ---  **Affects:** 1.2.8  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-18T05:42:23Z","2012-06-19T03:50:27Z"
"","7087","timeout support in @Transactional [SPR-2398]","**[Bill Poitras](https://jira.spring.io/secure/ViewProfile.jspa?name=wpoitras)** opened **[SPR-2398](https://jira.spring.io/browse/SPR-2398?redirect=false)** and commented  As far as I can tell from the documention there is no way to specify a transaction timeout value using `@Transactional`.  You would have to resort old style transaction attributes.  I would suggest adding a timeout property to the `@Transactional` annotation.   ---  **Affects:** 1.2.8, 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-08-09T05:25:30Z","2012-06-19T03:50:08Z"
"","7377","Null check missing in JtaTransactionManager.doRegisterAfterCompletionWithJtaTransaction() [SPR-2689]","**[Bill Gates](https://jira.spring.io/secure/ViewProfile.jspa?name=centipede)** opened **[SPR-2689](https://jira.spring.io/browse/SPR-2689?redirect=false)** and commented  Code lines related are : if (getTransactionManager() != null) { getTransactionManager().getTransaction()....  We have hit a situation were getTransactionManager() does return not null, however getTransaction() returns null.  Using WebLogicJtaTransactionManager, we have an environment were JTA transactions are created for us by a different software layer, which is meant to have full control over issuing commit() or rollback() on the transaction passed to us. To guarantee this, we use ""PROPAGATION_MANDATORY,+Throwable""  Investigating the possible misbehaving code that could possibly be written in our layer, we wrote code that performs a lookup to find the inflight JTA UserTransaction, and performs a commit(). According to the UserTransaction API, that would unattach the transaction to the thread.  When the application shuts down, I believe the house keeping work around this transaction ends up calling the doRegisterAfterCompletionWithJtaTransaction(), which gives NullPointerException, since getTransactionManager().getTransaction() gives null.  We have put in place an easy workaround by subclassing WebLogicJtaTransactionManager and overwriting doRegisterAfterCompletionWithJtaTransaction() so that it checks for that null and either calls super.doRegister.... to resume normal processing or throws an IllegalStateException, so as to hook with the existing handling foreseen in registerAfterCompletionWithExistingTransaction(). In that way, it returns a more graceful NoTransactionException.  Are we missing some config settings that could catter better for our requirement (that is, no messing with the state of the incoming, borrowed JTA transaction) ?   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-10-06T00:11:18Z","2012-06-19T03:50:23Z"
"","7412","cannot set special chars to a property inside the spring configuration [SPR-2724]","**[Berthold Frank](https://jira.spring.io/secure/ViewProfile.jspa?name=zwiebljack)** opened **[SPR-2724](https://jira.spring.io/browse/SPR-2724?redirect=false)** and commented  when i want to set a char property with 2 character (eg. \t for tab) inside the spring.xml i get the error  java.lang.IllegalArgumentException: String [\t] with length 2 cannot be converted to char type   --- No further details from [SPR-2724](https://jira.spring.io/browse/SPR-2724?redirect=false)","closed","status: declined,","spring-projects-issues","2006-10-17T19:48:20Z","2019-01-12T16:40:38Z"
"","7605","Javadoc task in CVS build.xml fails [SPR-2919]","**[Ben Speakmon](https://jira.spring.io/secure/ViewProfile.jspa?name=bens)** opened **[SPR-2919](https://jira.spring.io/browse/SPR-2919?redirect=false)** and commented  The javadoc task in the CVS build.xml fails with 2 'Unknown package name: """"' errors.  The problem is the HTTP proxy host and port parameters -- they're not being passed to the JVM, they're being passed to javadoc itself, which chokes on them.  This patch fixes it:  Index: build.xml  ---  RCS file: /cvsroot/springframework/spring/build.xml,v retrieving revision 1.239 diff -r1.239 build.xml 758,759c758,759 <                       \ <                       \ —  > \ >  >> \  ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2006-12-06T06:35:29Z","2019-01-13T22:45:00Z"
"","7155","XmlBeanDefinitionReader fails when executed behind an http proxy [SPR-2466]","**[Ben Hood](https://jira.spring.io/secure/ViewProfile.jspa?name=0x6e6562)** opened **[SPR-2466](https://jira.spring.io/browse/SPR-2466?redirect=false)** and commented  Whilst executing the XmlBeanDefinitionReader behind an authenticated http proxy, the spring bean definitions do not parse, because of a  java.net.UnknownHostException whilst resolving www.springframework.org.   ---  **Affects:** 2.0 RC2  **Attachments:** - [mvn_trace.txt](https://jira.spring.io/secure/attachment/11910/mvn_trace.txt) (_123.54 kB_)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2006-08-23T03:35:31Z","2019-01-11T19:34:24Z"
"","7372","SpringSessionSynchronization fails after moving from Hibernate 3.0 to 3.1 [SPR-2684]","**[Ben Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=banderson)** opened **[SPR-2684](https://jira.spring.io/browse/SPR-2684?redirect=false)** and commented  I've been asked to create this JIRA for issue I've encountered with the SpringSessionSynchronisation class after moving our application from Hibernate 3.0 to 3.1.  Essentially, it looks like Spring is closing the Hibernate session and then attempting to reconnect to it and complaining that it has been closed i.e.  2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.transaction.interceptor.TransactionInterceptor - Invoking commit for transaction on com.aaa.bbb.core.business.billing.BillingService.processPaymentRequests 2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.orm.hibernate3.SessionFactoryUtils - Flushing Hibernate Session on transaction synchronization 2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.orm.hibernate3.SessionFactoryUtils - Flushing Hibernate Session on transaction synchronization 2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.transaction.support.TransactionSynchronizationManager - Removed value [org.springframework.orm.hibernate3.SessionHolder@556547] for key [org.hibernate.impl.SessionFactoryImpl@be5687] from thread [AAAScheduler_Worker-4] 2006-10-04 11:42:00,281 DEBUG  AAAScheduler_Worker-4 org.springframework.orm.hibernate3.SessionFactoryUtils - Closing Hibernate Session 2006-10-04 11:42:00,281 ERROR  AAAScheduler_Worker-4 com.aaa.bbb.core.common.event.hibernate.HibernateTransactionManagerEventProducer - TransactionSynchronization.afterCompletion threw exception org.hibernate.SessionException: Session is closed! at org.hibernate.impl.AbstractSessionImpl.errorIfClosed(AbstractSessionImpl.java:49) at org.hibernate.impl.SessionImpl.reconnect(SessionImpl.java:374) at org.springframework.orm.hibernate3.SessionFactoryUtils$SpringSessionSynchronization.afterCompletion(SessionFactoryUtils.java:981) at org.springframework.transaction.support.AbstractPlatformTransactionManager.invokeAfterCompletion(AbstractPlatformTransactionManager.java:729) at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCompletion(AbstractPlatformTransactionManager.java:701) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:538) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:473) at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:267) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at com.aaa.bbb.core.business.common.dao.EntitySessionScopeInterceptor.invoke(EntitySessionScopeInterceptor.java:64) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at com.aaa.bbb.core.business.common.dao.OptimisticLockInterceptor.invoke(OptimisticLockInterceptor.java:46) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at com.aaa.bbb.core.business.aop.PerformanceLoggerInterceptor.invoke(PerformanceLoggerInterceptor.java:377) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176) at $Proxy99.processPaymentRequests(Unknown Source) at com.aaa.bbb.core.business.billing.scheduling.PaymentRequestRunJobWrapper.executeInternal(PaymentRequestRunJobWrapper.java:51) at com.aaa.bbb.core.business.common.scheduling.AbstractBbbQuartzJobBean.execute(AbstractBbbQuartzJobBean.java:96) at org.quartz.core.JobRunShell.run(JobRunShell.java:195) at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:520)  The full details of the issue are described in my post on the Spring forums http://forum.springframework.org/showthread.php?t=29680   ---  **Affects:** 1.2.8  **Attachments:** - [optimisticLockTrace.txt](https://jira.spring.io/secure/attachment/12342/optimisticLockTrace.txt) (_10.09 kB_)","closed","type: bug,","spring-projects-issues","2006-10-05T13:00:06Z","2012-06-19T03:51:15Z"
"","7382","Ordering of automatically-instantiated FreeMarker TemplateLoaders should be configurable [SPR-2694]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-2694](https://jira.spring.io/browse/SPR-2694?redirect=false)** and commented  FreeMarkerConfigurationFactory has a private templateLoaders field.  The current implementation allows this field to be set via the setTemplateLoaders(List) method. Subsequently FreeMarkerConfigurationFactory.getTemplateLoaderForPath(String templateLoaderPath) and FreeMarkerConfigurer.postProcessTemplateLoaders(List) add new TemplateLoaders to END of this templateLoaders List.  I have written a TemplateLoader that should serve as the last TemplateLoader, because it automatically generates a suitable Template instance. This behaviour is presently unsupported by FreeMarkerConfigurationFactory and FreeMarkerConfigurer. A workaround has been to subclass FreeMarkerConfigurer and override postProcessTemplateLoader(List), thereby removing the content-generating TemplateLoader from the List (where it appears at index 0) and adding it again (thus appearing after the TemplateLoader instances added by FreeMarkerConfigurationFactory and FreeMarkerConfigurer).  It would be preferable if FreeMarkerConfigurationFactory and FreeMarkerConfigurer could be configured to insert the automatically-instantiated TemplateLoader instances at the beginning of the templateLoaders List. A simple solution would be to have a protected boolean property automaticTemplateLoadersAtBeginning = false. This property would be detected by both classes and their corresponding templateLoaders.add(TemplateLoader) methods would simply become templateLoaders.add(0, TemplateLoader) if true.  Please also note issue #7381 reports a bug in FreeMarkerConfigurer. The code fragment in that issue does not reflect the behaviour proposed here.  ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-07T14:59:08Z","2019-01-11T21:20:24Z"
"","7381","FreeMarkerConfigurer doesn't permit subclassing [SPR-2693]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-2693](https://jira.spring.io/browse/SPR-2693?redirect=false)** and commented  FreeMarkerConfigurer provides the following method:      protected void postProcessTemplateLoaders(List templateLoaders) {          	templateLoaders.add(new ClassTemplateLoader(getClass()));          	logger.info(""ClassTemplateLoader for Spring macros added to FreeMarker configuration"");          }  There are two issues here:  1. As the above method is not marked as ""final"", it is reasonable to subclass. Subclassing does not work successfully due to the construction of ClassTemplateLoader. The getClass() method will return a class within the package of the subclass. If the package of the subclass differs from org.springframework.web.servlet.view.freemarker, the created ClassTemplateLoader will fail in finding spring.ftl.  2. The ClassTemplateLoader(Class) constructor is deprecated (at least in FreeMarker 2.3.8).  To fix this issue (with FreeMarker 2.3.8) the revised method should be:      protected void postProcessTemplateLoaders(List templateLoaders) {     	templateLoaders.add(new ClassTemplateLoader(FreeMarkerConfigurer.class, """"));     	logger.info(""ClassTemplateLoader for Spring macros added to FreeMarker configuration"");     }  The fix will thus always ensure the same package as where spring.ftl resides, and uses a new non-deprecated constructor.   ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-10-07T14:47:55Z","2012-06-19T03:50:18Z"
"","7606","Cannot export regular lazy-init MBeans when using AnnotationJmxAttributeSource [SPR-2920]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2920](https://jira.spring.io/browse/SPR-2920?redirect=false)** and commented  When an exporter configured with AnnotationJmxAttributeSource encounters a lazy-init bean which extends an MBean interface it fails to export the mbean. The failure occurs in the call stack:  registerLazyInit createAndConfigureMBean getMBeanInfo {... this. assembler.getMBeanInfo(managedBean, beanKey); ...}  Since the bean is an actual MBean and not a `@ManagedResource` the assembler fails.  Here's the mbean exporter config:                                                                                               ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-06T06:49:39Z","2012-06-19T03:51:21Z"
"","7483","DefaultPersistenceUnitManager should support post-processing a specific persistence unit [SPR-2796]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2796](https://jira.spring.io/browse/SPR-2796?redirect=false)** and commented  DefaultPersistenceUnitManager.preparePersistenceUnitInfos() reads in all persistence.xml and runs post-processors on each. When a EMFB defines a UnitName, this makes no sense. In fact, it creates bogus behavior.  Consider this scenario:  - the application has several persistence.xml files within the classpath, each defining its own persistence unit  - LCEMFBs are declared for each persistence-unit  - one LCEMFB is declared as:    \   \   \   \   \   \   \   \   \  In this case, the unit-post-processor configure the PersistenceUnit specifically for the InfraTest2 unit.  - LCEMFB creates an instance of DefaultPersistenceUnitManager, which then, in its afterPropertiesSet(), loads /all/ persistence.xml's and invokes this specific  post-processor on /all/ SpringPersistenceUnitInfo's. In our case, this post-processor is rather expensive, as it scans the class path for components that contribute entities this persistence-unit.  Why does the DefaultPersistenceUnitManager do this eagerly? The LCEMFB is going to either ask for the default persistence-unit, in which case there must be only one else DefaultPersistenceUnitManager  throws an exception. Or, LCEMFB is going to task for a particular persistence-unit (our case). In either case on a single PersistenceUnitInfo need ever be created.  In other words, DefaultPersistenceUnitManager should be filtering the persistence.xml based on the unit-name and only creating a PersistenceUnitInfo for a single unit. More importantly, a PersistenceUnitInfoPostProcessor configured to post-process a particular unit should be run against /every/ unit on the classpath.  It seems as if DefaultPersistenceUnitManager is over-engineered. It is building keeping track of all the unit-infos, which can be obtained via obtainPersistenceUnitInfo(name). But this method is (currently) only used by LCEMFB, which only supports a single unit.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-02T23:47:18Z","2015-09-22T17:34:36Z"
"","7446","AbstractJpaTests can leave context in an indeterminate state  [SPR-2759]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2759](https://jira.spring.io/browse/SPR-2759?redirect=false)** and commented  in AbstractJpaTests.runBare() near the end of the main try block the newly constructed context is placed in the cache prior to the refresh:      contextCache.put(combinationOfContextLocationsForThisTestClass, cachedContext);     genericApplicationContextClass.getMethod(""refresh"").invoke(cachedContext);  If the refresh fails (which is typical in tests) all the beans currently constructed are destroyed and removed from the various collections (eg, ""alreadyCreated""). But the context remains the in the test-case cache and is used for the remaining tests.  What does it mean to continue to use a context for subsequent tests if all the beans have been destroyed?  I would think that these two lines should be swapped. This would bean that if the context fails to refresh due to a non-lazy bean it will fail for all subsequent tests that use the same context. But this seems a more intuitive behavior than simply giving the subsequent tests an empty context.  (PS. Can we add a component for the mock/test code?)    ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-26T02:29:03Z","2012-06-19T03:50:48Z"
"","7168","AbstractTransactionalSpringContextTests subclasses should have access to transactionDefinition [SPR-2479]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2479](https://jira.spring.io/browse/SPR-2479?redirect=false)** and commented  There are cases where a subclass of AbstractTransactionalSpringContextTests needs access to the private property 'transactionDefinition'.  On example is when preventTransaction() is used to allow a specialized test to fully manage transactions.  In this case, to keep the code clean from messy try/finally blocks an after-test hook method can be used to clean up transactions when a test method throws an exception. eg:      @After     public void closeTransactionIfOpen() throws Exception {         if (transactionStatus == null || transactionDefinition == null) {             return;         }         if (transactionStatus.isRollbackOnly()) {             rollbackTransaction();         } else if (!transactionStatus.isCompleted()) {             endTransaction();         }             }  (The `@After` is an addon that I added to the spring test framework, but other mechanisms to hook in a after-test-method could be used.)   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-24T23:22:47Z","2012-06-19T03:50:57Z"
"","7120","LocalContainerEntityManagerFactoryBean invokes postProcessPersistenceUnitInfo too soon [SPR-2431]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2431](https://jira.spring.io/browse/SPR-2431?redirect=false)** and commented  postProcessPersistenceUnitInfo() is invoked before the PersistenceUnitInfo is fully constructed. My post processor (which is what drove this hook in the first place) needs access to the persistenceUnitRootUrl, which is set after the post processor is invoked.  The call to the postProcessPersistenceUnitInfo should (please) be moved after the snippet:      if (this.persistenceUnitInfo.getPersistenceUnitRootUrl() == null) {         this.persistenceUnitInfo.setPersistenceUnitRootUrl(determinePersistenceUnitRootUrl());     }    ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-15T09:53:43Z","2012-06-19T03:50:24Z"
"","7101","EntityManagerSynchronization closing of EntityManager in before completion causes Hibernate to fail [SPR-2412]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2412](https://jira.spring.io/browse/SPR-2412?redirect=false)** and commented  EntityManagerFactoryUtils.EntityManagerSynchronization.beforeCompletion will close the EntityManager. But if during the actual commit, when hibernate attempts to update the databases, an exception is thrown hibernate will fail hard because the entity manager is closed.  Specifically, hibernate's AbstractEntityManagerImpl.markAsRollback will invoke getSession(), which first thing asserts that it is not closed. But it is, spring closed it in the triggerBeforeCompletion() phase of processCommit().  It appears as if something is violating the JPA spec. The hibernate team says its spring, in that spring should not close the EntityManager until after the JTA commit.   ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-08-11T03:55:48Z","2019-01-12T16:28:56Z"
"","7085","AbstractTransactionalSpringContextTests does not handle preventTransaction() in tearDown() correctly [SPR-2396]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2396](https://jira.spring.io/browse/SPR-2396?redirect=false)** and commented  In onSetup() the condition used to detect that a transaction should not be started is:  if (this.transactionManager == null) { else if (this.transactionDefinition == null) {  But in onTearDown() there is not such guard. onTearDown always invokes endTransaction(). endTransaction will check if there is a null transactionStatus, but this value can be set if a transaction was started by the test itself via startNewTransaction.  This causes problems with test of the form:  public class TransactionsTest extends AbstractAspectjJpaTests {      ...          @Override     public void runBare() throws Throwable {         preventTransaction();         super.runBare();     }          public void testRollback() {         TransactionEntityForTest entity;         {             startNewTransaction();             entity = new TransactionEntityForTest();             sharedEntityManager.persist(entity);             endTransaction();         }                  try {             startNewTransaction();             sharedEntityManager.persist(entity);             fail(""expected exception"");             endTransaction();         } catch (Exception e) {             System.err.println(""***"" + e);             transactionManager.rollback(transactionStatus);         }     }  }  At the end of the test methods, spring will still try to commit the transaction because of what I described above. This results in an exception:      if (defStatus.isCompleted()) {          throw new IllegalTransactionStateException(                    ""Transaction is already completed - do not call commit or rollback more than once per transaction"");     }  If the onTearDown() used the same guard as the onSetupUp, then AbstractTransactionalSpringContextTests.commit() would never have been called.   ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-08-08T23:47:34Z","2012-06-19T03:50:59Z"
"","7036","Aspectj weaving fails unless spring provided aspectj jars are used [SPR-2347]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2347](https://jira.spring.io/browse/SPR-2347?redirect=false)** and commented  Unless I use the RC2 aspectj jars (and the required xerces jar) I get failures in weaving. The weaving is being initiated by concrete instances of AbstractAspectjJpaTests. A sample class file dump resulting in an NPE is shown below.  The very strange thing is that I get these errors if I use my own 1.5.2 aspectj jars OR if I use the aspectj jars provided from RC3/head. Only if I use the RC2 jars can I get a clean run.  ---  info weaving 'org/opentrader/infra/validation/BeanValidator' abort trouble in: public class org.opentrader.infra.validation.BeanValidator extends java.lang.Object: private final org.apache.log4j.Logger log private java.util.Map classValidators [Signature(Ljava/util/Map;)] public void \(): ALOAD_0     // Lorg/opentrader/infra/validation/BeanValidator; this   (line 13) INVOKESPECIAL java.lang.Object.\ ()V constructor-execution(void org.opentrader.infra.validation.BeanValidator.\()) |               ALOAD_0     // Lorg/opentrader/infra/validation/BeanValidator; this   (line 15) |               ALOAD_0     // Lorg/opentrader/infra/validation/BeanValidator; this |               INVOKEVIRTUAL java.lang.Object.getClass ()Ljava/lang/Class; |               INVOKESTATIC org.apache.log4j.Logger.getLogger (Ljava/lang/Class;)Lorg/apache/log4j/Logger; |               PUTFIELD org.opentrader.infra.validation.BeanValidator.log Lorg/apache/log4j/Logger; |               ALOAD_0     // Lorg/opentrader/infra/validation/BeanValidator; this   (line 17) |               NEW java.util.HashMap |               DUP |               INVOKESPECIAL java.util.HashMap.\ ()V |               PUTFIELD org.opentrader.infra.validation.BeanValidator.classValidators Ljava/util/Map; |               RETURN   (line 13) constructor-execution(void org.opentrader.infra.validation.BeanValidator.\()) end public void \()  ... gobs and gobs of class dumps  - (NullPointerException) null   null   java.lang.NullPointerException   at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass(ClassLoaderRepository.java:128)   at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass(ClassLoaderRepository.java:146)   at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:143)   at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getAnnotationTypes(Java15ReflectionBasedReferenceTypeDelegate.java:86)   at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.hasAnnotation(Java15ReflectionBasedReferenceTypeDelegate.java:92)   at org.aspectj.weaver.ReferenceType.hasAnnotation(ReferenceType.java:151)   at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:95)   at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly(TypePattern.java:470)   at org.aspectj.weaver.patterns.TypePattern.matchesStatically(TypePattern.java:121)   at org.aspectj.weaver.patterns.SignaturePattern.matchesExactlyConstructor(SignaturePattern.java:405)   at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly(SignaturePattern.java:327)   at org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:289)   at org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:106)   at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)   at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:51)   at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)   at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:51)   at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146)   at org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:71)   at org.aspectj.weaver.Advice.match(Advice.java:111)   at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:107)   at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2799)   at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit(BcelClassWeaver.java:2401)   at org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2292)   at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:490)   at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115)   at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574)   at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525)   at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305)   at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)   at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:284)   at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:212)   at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65)   at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:55)   at org.springframework.instrument.classloading.ShadowingClassLoader.applyTransformers(ShadowingClassLoader.java:119)   at org.springframework.instrument.classloading.ShadowingClassLoader.doLoadClass(ShadowingClassLoader.java:101)   at org.springframework.instrument.classloading.ShadowingClassLoader.loadClass(ShadowingClassLoader.java:58)   at java.lang.ClassLoader.loadClassInternal(Unknown Source)   at java.lang.Class.forName0(Native Method)   at java.lang.Class.forName(Unknown Source)   at org.springframework.util.ClassUtils.forName(ClassUtils.java:160)   at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:324)   at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:834)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:138)   at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:657)   at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:387)   at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:319)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)   at java.lang.reflect.Method.invoke(Unknown Source)   at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:212)   at org.opentrader.itest.IntegrationTestCase.runBare(IntegrationTestCase.java:34)   at junit.framework.TestResult$1.protect(TestResult.java:110)   at junit.framework.TestResult.runProtected(TestResult.java:128)   at junit.framework.TestResult.run(TestResult.java:113)   at junit.framework.TestCase.run(TestCase.java:120)   at junit.framework.TestSuite.runTest(TestSuite.java:228)   at junit.framework.TestSuite.run(TestSuite.java:223)   at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:35)   at org.junit.internal.runners.CompositeRunner.run(CompositeRunner.java:29)   at org.junit.internal.runners.TestClassRunner$1.runUnprotected(TestClassRunner.java:42)   at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)   at org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52)   at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)   at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)   at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)   at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)   at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)   at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  ---  **Affects:** 2.0 RC2, 2.0 RC3  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2006-07-25T08:23:32Z","2019-01-13T22:46:53Z"
"","7035","build.xml target ""srczip"" does not include the tiger mock classes [SPR-2346]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2346](https://jira.spring.io/browse/SPR-2346?redirect=false)** and commented  build.xml target ""srczip"" does not include the tiger mock classes. eg, the following fileset is missing:                         ---  **Affects:** 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-25T07:40:29Z","2012-06-19T03:50:27Z"
"","6990","Allow for configurable PersistenceUnitReader in LocalContainEntityManagerFactoryBean [SPR-2301]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2301](https://jira.spring.io/browse/SPR-2301?redirect=false)** and commented  LocalContainerEntityManagerFactory bean creates and uses a hard-coded concrete PersistenceUnitReader. This prevents the use of other strategies for parsing persistence.xml files and building the PersistenceUnitInfo.  The motivation to allow the reader to be configurable is to support applications where ""components"" can contribute `@Entity`'s to the applications persistence context. Since the types of entities contributed will tend to be closely bound to existing entities in the application (eg, additional subclasses that participate in relationships, aspects that introduce persistence properties), they must exist in a single persistence context.  The brute force solution to achieve this type of extensibility is to hard-code a set of ""component"" jars in the persistence.xml file. But this approach does not allow for new components jars to simply be ""dropped-in"" to the application and auto-discovered.  The desired/proposed solution to achieve this functionality is to allow for a PersistenceUnitReader which does has all the default behavior of parsing the persistence.xml, but in addition scans the classpath and adds component jars to the PersistenceUnitInfo.jarFileUrls property.  I have already spiked this implementation and it is working great. The following are the spring code changes I had to make:  - added the protected hook method LocalContainerEntityManagerFactory.PersistenceUnitReader createPersistenceUnitReader(ResourceLoader resourceLoader, DataSourceLookup dataSourceLookup). The default implementation of this method does what the LCEMFB does now: return new PersistenceUnitReader(resourceLoader, dataSourceLookup);  - modifiy LCEMFG.parsePersistenceUnitInfo() to instead of newing the hard-coded PersistenceUnitReader to instead invoke the above hook method to obtain the reader.  - changed the class PersistenceUnitReader from package scope to public scope (this class was subclassed to add the jar discovery behavior)  - changed the class SpringPersistenceUnitInfo from package scope to public scope (this was required so the my PersistenceUnitReader subclass could return an instance)  Costin has been guiding me thru this in the following forum threads - http://forum.springframework.org/showthread.php?t=26365 - http://forum.springframework.org/showthread.php?p=68957#post68957  One concern Costin has put forth, is that this approach may be in some violating the JPA spec. Even if this is the case (although I think it should not; see my last post in http://forum.springframework.org/showthread.php?p=68957#post68957), the above changes to the spring code do not change the current spring behavior in any way, and all tests continue to pass without change. (Although some new tests may need to be introduced.)  A plead: Our current system relies heavily on this type of auto-discovery of persistence-contributers. Pre JPA, we simply had a FactoryPostProcessor which set properties SessionFactoryBean bean info instance. So once the factory bean was invoked, it was configured with all the sources of `@Entity`'s, `@TypeDef`'s etc without having to hard code a list anywhere. (We primarily don't use *.hbm.xml files, so that type of autodiscovery does not help much.)    ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-07-14T04:01:40Z","2012-06-19T03:52:29Z"
"","6964","Provide non-transactional onSetup* hook in AbstractTransactionalSpringContextTests [SPR-2275]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-2275](https://jira.spring.io/browse/SPR-2275?redirect=false)** and commented  AbstractTransactionalSpringContextTests has no onSetup* hook for test methods marked as `@NotTransactional`. The onSetup methods only invokes onSetupBeforeTransaction if the transactionDefinition is not null. And since the AbstractTransactionalSpringContextTests.onSetup is set to be final, there is no way to add in any type of additional setup hooks.  Maybe onSetup/TeardownBeforeNonTransaction()?  ---  **Affects:** 2.0 RC2  **Issue Links:** - #8081 AbstractTransactionalSpringContextTests shoud still call onSetupBeforeTransaction if transactions are prevented (_**""is duplicated by""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-11T01:45:03Z","2019-01-11T19:09:39Z"
"","7704","JSF/Spring integration - managed-property problem [SPR-3018]","**[bansi](https://jira.spring.io/secure/ViewProfile.jspa?name=mail2bansi)** opened **[SPR-3018](https://jira.spring.io/browse/SPR-3018?redirect=false)** and commented  I am using JSF 1.1_01 (MyFaces 1.1), Spring 1.2, Ajax4Jsf. The JSF application has h:selectOneMenu .  On change event of h:selectOneMenu sets ""selectedValue"" into backing bean as shown below:  ------------------   page.jsp  ---           -----------------------   TestBean.java (Backing Bean)  ---  public String getSelectedDevice() { logger.info("" *** In getSelectedDevice *** ""); if (selectedDevice == null) {  selectedDevice = ""0""; // This will be the default selected item. } return selectedDevice; }  public void setSelectedDevice(String selectedDevice) { logger.info("" *** In setSelectedDevice *** ""); this.selectedDevice = selectedDevice; }  Here are the configuration file snippets for integrating JSF Spring  ---  web.xml  ---  \ \org.apache.myfaces.webapp.StartupServletContextListener\ \ \ \contextConfigLocation\ \/WEB-INF/applicationContext.xml\ \ --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  faces-config.xml ----------------  \ \org.springframework.web.jsf.DelegatingVariableResolver\ \ \ \test\ \test.TestBean\ \request\ \ \deviceManager\ \ test.DeviceTypeManager \ \#{deviceManager}\ \ \  The above code results in the following error  javax.faces.FacesException: Cannot get value for expression '#{test.selectedDevice}'  The error occurs only if i include \ inside the \ in faces-config.xml. The moment i remove \ from face-config.xml the error disappears & page gets rendered properly.  The purpose in having \ inside  managed-bean is to call Spring's Manager class (i.e. deviceManager) from JSF application  Any pointers/suggestions in resolving the error will be highly appreciated  Regards Bansi  ---  No further details from [SPR-3018](https://jira.spring.io/browse/SPR-3018?redirect=false)","closed","status: declined,","spring-projects-issues","2007-01-07T04:04:29Z","2019-01-13T22:44:39Z"
"","7263","Problems with JSF and Spring Integration : EvaluationException: Expression Error [SPR-2574]","**[bansi](https://jira.spring.io/secure/ViewProfile.jspa?name=mail2bansi)** opened **[SPR-2574](https://jira.spring.io/browse/SPR-2574?redirect=false)** and commented  Hi All I am using JSF 1.1_01, Spring 1.2.6, Tomcat 5.0.28. I am getting following error  [COLOR=""Red""]javax.servlet.jsp.JspException: javax.faces.FacesException: javax.faces.el.EvaluationException: Expression Error: Named Object: 'springBean' not found.[/COLOR]  The root cause for the error is ""\"" under \ from JSF which references Spring Bean. It is not able to evaluate JSF Expression Language. Then i tried following permutations and combinations  -> instead of using JSF EL, i hardcoded the property value and it worked  Any pointers/suggestions will be highly appreciate. I am working on this for more than a week  Regards Bansi   ---  **Attachments:** - [JSFSpring1.war](https://jira.spring.io/secure/attachment/11951/JSFSpring1.war) (_8.26 MB_)","closed","status: declined,","spring-projects-issues","2006-09-11T10:35:22Z","2012-06-18T12:44:49Z"
"","7253","Problem Integrating Spring with JSF [SPR-2564]","**[bansi](https://jira.spring.io/secure/ViewProfile.jspa?name=mail2bansi)** opened **[SPR-2564](https://jira.spring.io/browse/SPR-2564?redirect=false)** and commented  I posted it last week their was no response. also still it shows unassigned.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-09-08T09:12:58Z","2019-01-12T16:52:01Z"
"","7214","Problem integrating JSF with Spring [SPR-2525]","**[bansi](https://jira.spring.io/secure/ViewProfile.jspa?name=mail2bansi)** opened **[SPR-2525](https://jira.spring.io/browse/SPR-2525?redirect=false)** and commented  Hi All I am having similar problem integrating JSF using Spring  As suggested by Rob and Mark , the managed property has a setter method initialized I am using JSF 1.1_01, spring 1.2 , Tomcat 5.0 and MyEclipse 5.0 IDE  Wondering whether its the problem with spring 1.2 . Do i need to have Spring 2.0 or is it something else  Any pointers/suggestions at mail2bansi@yahoo.com will be highly appreciated  Regards Bansi   ---  **Affects:** 1.2.3  **Attachments:** - [applicationContext.xml](https://jira.spring.io/secure/attachment/11931/applicationContext.xml) (_2.94 kB_) - [faces-config.xml](https://jira.spring.io/secure/attachment/11929/faces-config.xml) (_825 bytes_) - [web.xml](https://jira.spring.io/secure/attachment/11930/web.xml) (_1.17 kB_)","closed","in: core,","spring-projects-issues","2006-09-01T08:02:25Z","2012-06-19T09:37:22Z"
"","7725","Maven 2 Support - Source Jars [SPR-3039]","**[Baerrach bonDierne](https://jira.spring.io/secure/ViewProfile.jspa?name=baerrach)** opened **[SPR-3039](https://jira.spring.io/browse/SPR-3039?redirect=false)** and commented  Release spring-core-1.2.7-sources.jar seems to be the last version that bundled source jars when deployed to ibiblio.  Is it possible to get source builds deployed as well?  If you need help with this let me know.  ---  **Affects:** 2.0.2  **Issue Links:** - #7392 Create and upload Maven Source and Javadoc Bundles for Spring 2.0 (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-01-14T08:20:00Z","2019-01-12T16:51:48Z"
"","7687","DefaultPropertyPlaceholderConfigurer [SPR-3001]","**[Axel Wienberg](https://jira.spring.io/secure/ViewProfile.jspa?name=axel)** opened **[SPR-3001](https://jira.spring.io/browse/SPR-3001?redirect=false)** and commented  We're using the PropertyPlaceholderConfigurer quite a bit at work, and I was thinking about ways to handle default values more elegantly. When a property is not configured by a customer, usually some default should be used. The standard spring way seems to be to put a property map inside the XML configuration file (as in http://www.kleineikenscheidt.de/stefan/archives/2005/06/default-configuration-with-spring.html), or to have two properties files, one with the defaults, and one for customer customization. However, that means some redundancy: Each placeholder is listed two or three times, once in the list of defaults, once when it is assigned to a bean property, and once when it is customized. What I've come up with is this:  \ \ \  \ \ \  If ""my.properties"" contains a value for my.cache.size, that value is used, otherwise, the default ""100"" is assigned.  The idea is to have the default value just where the placeholder and the bean property are, using a syntax like ${placeholder=defaultvalue}.  I would love to see this in the springframework proper. I'm attaching the source file.   ---  **Attachments:** - [DefaultPropertyPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/12312/DefaultPropertyPlaceholderConfigurer.java) (_3.46 kB_)  6 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2006-12-31T23:33:31Z","2014-05-07T06:09:11Z"
"","7567","does not support property replacement for bean names [SPR-2879]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axelfont)** opened **[SPR-2879](https://jira.spring.io/browse/SPR-2879?redirect=false)** and commented  A.java  ---  public class A { public void hello() { System.out.println(""Hello""); } }  Main.java  ---  import org.springframework.beans.factory.BeanFactory; import org.springframework.context.support.ClassPathXmlApplicationContext;  public class Main { public static void main(String[] args) { BeanFactory beanFactory = new ClassPathXmlApplicationContext(""aliasContext.xml""); A a = (A) beanFactory.getBean(""a""); a.hello(); } }  aliasContext.xml  ---  \  \               app.properties                              \  app.properties  ---  a.name=myA  Without the property it works.  We use this to switch between a local and a remote implementation a service by adjusting a property file without having to rebuild and redeploy an ear file.  Cheers, Axel  ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-27T04:21:06Z","2019-01-13T22:45:10Z"
"","7295","Method Injection ""steals"" call to overloaded methods with the same name as the injected method [SPR-2606]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axelfont)** opened **[SPR-2606](https://jira.spring.io/browse/SPR-2606?redirect=false)** and commented  MethodInjectionContext.xml  ---  \ \ \ \ \ \        \  Class a.A  ---  package a;  public abstract class A { public abstract B getB();      public B getB(Object o) {         System.out.println(""Ok"");         return new B();     }  }  Class a.B  ---  package a;  public class B { public B() { System.out.println(""new B""); } }  Class a.MethodInjection  ---  package a;  import org.springframework.context.support.ClassPathXmlApplicationContext;  public class MethodInjection { public static void main(String[] args) { ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext( ""methodInjectionContext.xml""); A a = (A) applicationContext.getBean(""A""); B b = a.getB(new Object()); System.out.println(b); } }  Console output  ---  new B a.B@1acd47  Expected output  ---  Ok new B a.B@1acd47  In other words, the wrong method on a.A is called ! I can promise you, it was a bastard to debug ! ;-)  Hope there is time to fix this for 2.0 final.  Cheers, Axel  ---  **Affects:** 2.0 RC4","closed","in: core,","spring-projects-issues","2006-09-19T03:25:18Z","2019-01-13T22:46:04Z"
"","7482","Log4jConfigurer client code is uninformed of missing Log4J configuration file [SPR-2795]","**[Atif Faridi](https://jira.spring.io/secure/ViewProfile.jspa?name=mshikaji)** opened **[SPR-2795](https://jira.spring.io/browse/SPR-2795?redirect=false)** and commented  Log4jConfigurer.initLogging(String location) is excessively lenient when called with a location that does not point to an existent file. Unlike its counterpart method Log4jConfigurer.initLogging(String location, String, long refreshInterval), it does not check the target of the URL.  The actual Log4J configuration is delegated to org.apache.log4j.xml.DOMConfigurator or org.apache.log4j.PropertyConfigurator. The problem is that when these classes fail to parse a file, they catch the thrown Exception and merely write an error message and stack trace to System.err. The client code is not informed of the problem. Thus, we are getting false positives regarding Log4J configuration.  I believe a simple solution could be to check for the existence of the URL target with something like:      // Make sure the URL points to a real file     try {         URLConnection conn = url.openConnection();         conn.connect();     } catch (IOException e) {         throw new FileNotFoundException(""Log4J config file [""                 + resolvedLocation + ""] not found"");     }  Atif Faridi   ---  **Affects:** 2.0 final  **Attachments:** - [TestLog4jConfigurer.java](https://jira.spring.io/secure/attachment/12082/TestLog4jConfigurer.java) (_2.85 kB_)  1 votes, 1 watchers","closed","status: invalid,","spring-projects-issues","2006-11-02T12:40:31Z","2019-01-12T05:34:14Z"
"","7473","org.springframework.jdbc.core.JdbcTemplate.query(Ljava/lang/String;[Ljava/lang/Object;Lorg/springframework/jdbc/core/RowCallbackHandler;)Ljava/util/List [SPR-2786]","**[Ashwani Sharma](https://jira.spring.io/secure/ViewProfile.jspa?name=ashwani_ks)** opened **[SPR-2786](https://jira.spring.io/browse/SPR-2786?redirect=false)** and commented  Following method is not available in Spring 2.0. Whereas this method is there in Spring -  1.2.6. Does this mean Spring 2.0 is not backward compatible.  org.springframework.jdbc.core.JdbcTemplate.query(Ljava/lang/String;[Ljava/lang/Object;Lorg/springframework/jdbc/core/RowCallbackHandler;)Ljava/util/List   ---  **Affects:** 2.0 final  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2006-11-01T05:41:37Z","2019-01-12T16:40:36Z"
"","7716","JNDI Property Placeholder Configurer [SPR-3030]","**[Arthur](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.branham@morganstanley.com)** opened **[SPR-3030](https://jira.spring.io/browse/SPR-3030?redirect=false)** and commented  When creating beans such as a JNDITemplate it is often desireable to have a container supply the provider URL and other configuration options via Environment entries.  I find it is generally not a great idea swap applicationContext files using a build script because it adds another layer of complexitity to the build process.  Therefore I prefer having different deployment descriptors on different test/production servers with different Environment settings.  The real benefit comes with the ability for certain containers to update these Environment entries during runtime such as if a provider URL becomes inaccessible.  I propose a JNDI Property Placehold Configurer which will do java:comp/env/ lookups to fill in the appropriate property values.  Example usage would be as follows:  \ \ \ \${java.naming.factory.initial}\ \${java.naming.provider.url}\ \${java.naming.factory.url.pkgs}\ \		 \ \ I will attach a working version I have been using for several months now.  ---  **Attachments:** - [JndiAwarePropertyPlaceholderConfigurer.zip](https://jira.spring.io/secure/attachment/15611/JndiAwarePropertyPlaceholderConfigurer.zip) (_2.82 kB_) - [JndiPropertiesFactoryBean.java](https://jira.spring.io/secure/attachment/12492/JndiPropertiesFactoryBean.java) (_4.47 kB_) - [JndiPropertyPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/12333/JndiPropertyPlaceholderConfigurer.java) (_7.98 kB_)  **Issue Links:** - #5690 Configurer that resolves placeholders as environment entries (_**""is duplicated by""**_) - #12693 Register JndiPropertySource by default in StandardPortletEnvironment  10 votes, 6 watchers","closed","has: votes-jira,","spring-projects-issues","2007-01-12T00:50:18Z","2019-01-11T16:37:42Z"
"","7405","Petportal sample not in 2.0 distribution [SPR-2717]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2717](https://jira.spring.io/browse/SPR-2717?redirect=false)** and commented  The reference documentation, Section 16.1.3, states:  ""The Spring distibution ships with a complete Spring Portlet MVC sample application that demonstrates all of the features and functionality of the Spring Portlet MVC framework. This 'petportal' application can be found in the 'samples/petportal' directory of the full Spring distribution.""  However, the 2.0 release of Spring did not include the Petportal sample application. Here is the forum link in reference to this: http://forum.springframework.org/showthread.php?t=29762  -Arthur Loder   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-16T07:26:44Z","2012-06-19T03:50:30Z"
"","7397","Reference manual error with ""singleton"" attribute [SPR-2709]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2709](https://jira.spring.io/browse/SPR-2709?redirect=false)** and commented  As pointed out in the Spring forum (http://forum.springframework.org/showthread.php?t=30209), the reference documentation states that a bean can still have a ""singleton"" attribute for backwards compatibility, even though this was removed in Spring RC4.  The Section 3.4.1 of the current reference doc (http://static.springframework.org/spring/docs/2.0.x/reference/beans.html#beans-factory-scopes-singleton) inaccurately states that this backward compatibility is retained.  Thanks!   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-12T02:19:30Z","2012-06-19T03:51:17Z"
"","7318","SQLErrorCodesFactory Javadoc improvements [SPR-2629]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2629](https://jira.spring.io/browse/SPR-2629?redirect=false)** and commented  The SQLErrorCodesFactory Javadoc contains non-summary first sentences in the constructor and the loadResource method.   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-22T04:24:38Z","2012-06-19T03:51:21Z"
"","7308","Reference Documentation: web container listener description [SPR-2619]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2619](https://jira.spring.io/browse/SPR-2619?redirect=false)** and commented  http://static.springframework.org/spring/docs/2.0.x/reference/beans.html#context-create  The following statement is kind of ambiguous:  ""Since the Servlet 2.4 specification, listeners are required to initialize after startup of a web application.""  This sentence says nothing about the fact that the spec requires that listeners are initialized before servlets; initializing listeners after startup of a web application still means the listeners could be started after initializing the servlets.  -Arthur Loder   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-21T03:13:18Z","2012-06-19T03:50:15Z"
"","7307","Reference Documentation Velocity mistake [SPR-2618]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2618](https://jira.spring.io/browse/SPR-2618?redirect=false)** and commented  http://static.springframework.org/spring/docs/2.0.x/reference/view.html#view-xslt-controllercode  The following paragraph looks incorrect:  ""So far we've done nothing that's XSLT specific. The model data has been created in the same way as you would for any other Spring MVC application. Depending on the configuration of the application now, that list of words could be rendered by JSP/JSTL by having them added as request attributes, or they could be handled by Velocity by adding the object to the So far we've done nothing.""  Notice the ""So far we've done nothing"" part of the last sentence. Should it be replaced with ""VelocityContext""?  -Arthur Loder    ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-21T01:37:32Z","2012-06-19T03:50:46Z"
"","7269","Confusing lookup method injection section in Reference documentation [SPR-2580]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2580](https://jira.spring.io/browse/SPR-2580?redirect=false)** and commented  The file in question is: spring/docs/reference/src/beans.xml  I think that the section in the reference documentation about lookup method injection is fairly confusing. Here is a forum link with questions regarding it: http://forum.springframework.org/showthread.php?t=28979  First of all, the first sentence should not have a period after the word ""container"":      Lookup method injection refers to the ability of the container to override abstract or concrete methods on managed beans      in the container, to return the result of looking up another named bean in the container.  I also think the following sentence is confusing:      In the client class containing the method to be injected, the method definition must be an abstract (or concrete) definition        in this form:  It is not readily apparent from the above description and the following sample code what form the method must take. Also, why add the ""abstract (or concrete)"" part? Every method is either abstract or concrete, so this does not add any value to the required form explanation; it simply makes it more confusing. Why not just discuss the form of the method required? I think a good ol' fashion English explanation prior to the code sample would help (e.g. ""the method must not take any parameters...""; to be honest, I don't know the requirements of the required form!)  The two sentences following the code sample do not really belong together, and were the original cause for the confusion mentioned in the above thread:      If the method is not abstract, Spring will simply override the existing implementation. In the case of XML-based      configuration metadata, you instruct Spring to inject/override this method to return a particular bean from the container, by      using the lookup-method element inside the bean definition.  I think it would make more sense to put the first sentence right after the CGLIB sentence earlier, when the concrete/abstract option is discussed.  Also, is it common for the reference documentation to explicitly state ""In the case of XML-based configuration metadata""? I read that a couple of times before realizing that this is just referring to the standard method of defining bean factories in XML files. Isn't that implied throughout the reference documentation? It did not sound like a familiar phrase.  Lastly, there is no mention of how to write a unit test if the bean is abstract. This may be obvious to some, but others may read and not understand. I realize that you can't cover ALL questions in the reference, but I could see a short explanation being useful.  -Arthur Loder   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-13T00:58:12Z","2012-06-19T03:51:22Z"
"","7264","Javadoc misspelling in DispatcherServlet.java [SPR-2575]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2575](https://jira.spring.io/browse/SPR-2575?redirect=false)** and commented  In line 77 of DispatcherServlet (/spring/src/org/springframework/web/servlet/DispatcherServlet.java) there is a mistake (you need to add a 'd' to the word 'define'):  WRONG: HandlerMapping objects can be define as beans  CORRECT: HandlerMapping objects can be defined as beans  -Arthur Loder   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-12T01:11:03Z","2012-06-19T03:51:17Z"
"","7250","Misleading Javadoc for HibernateOperations [SPR-2561]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2561](https://jira.spring.io/browse/SPR-2561?redirect=false)** and commented  The find* methods of the org.springframework.orm.hibernate.HibernateOperations interface have (in my opinion) misleading Javadocs; this indirectly affects the HibernateTemplate class because the interface Javadoc is copied into it. For instance:  /** * Execute a query for persistent instances. * `@param` queryString a query expressed in Hibernate's query language * `@return` a List containing 0 or more persistent instances * `@throws` org.springframework.dao.DataAccessException in case of Hibernate errors * `@see` org.hibernate.Session#createQuery   */   List find(String queryString) throws DataAccessException;  I had a problem because I thought that this helper method could only be used to retrieve persistent instances (based on the first sentence and the `@return` statement). However, it can execute ANY valid HQL. For instance, the following HQL queryString is a valid argument and yet does not return persistent instances: ""select count(*) from Team"".  In the end, I think a Hibernate Query.list() is performed behind the scenes. The Hibernate documentation does not specify anything about persistent instances being returned in the Query.list Javadoc: ""Return the query results as a List. If the query contains multiple results pre [sic] row, the results are returned in an instance of Object[]."" (sic) Instead, the Hibernate documentation is correctly stated in a more general manner.  Though most people probably do use the HibernateOperations.find* methods to retrieve persistent instances, the current Spring description is too specific. Maybe it doesn't throw others off, but it wasn't until I saw the Wrox sample code that I realized the find* methods can be used for executing ANY HQL.  -Arthur Loder   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-08T05:36:08Z","2012-06-19T03:51:03Z"
"","7249","Javadoc misspelling in TargetSource.java [SPR-2560]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2560](https://jira.spring.io/browse/SPR-2560?redirect=false)** and commented  Line 54 of the org.springframework.aop.TargetSource class contains a misspelling for the word ""which"" (incorrectly spelled ""whicch"").  -Arthur Loder   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-08T04:04:24Z","2012-06-19T03:50:30Z"
"","7240","docs/taglib/introduction.html broken links [SPR-2551]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2551](https://jira.spring.io/browse/SPR-2551?redirect=false)** and commented  This is simply a documentation issue. In the docs/taglib/introduction.html file, there are two broken links. Here are the incorrect and the correct  elements to include:  Incorrect versions: MVC Step by Step tutorial Reference Document - Chapter 11. Web framework  Corrected versions: MVC Step by Step tutorial Reference Document - Chapter 13. Web MVC framework  -Arthur Loder   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-09-07T01:34:29Z","2012-06-19T03:50:59Z"
"","7118","Minor Formatting Issues [SPR-2429]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2429](https://jira.spring.io/browse/SPR-2429?redirect=false)** and commented  I realize that this is probably the least important issue in Jira right now, but I figured I would enter it anyway:  The BeanFactoryLocator and BeanFactoryReference classes (both in the org.springframework.beans.factory.access package) use spaces instead of tabs for indentation.  In addition, the Javadoc for the BeanFactoryReference.release() method does not line up (the `@see` tags are off).  I'm sure everyone will be able to sleep a little sounder at night once this one is closed :)   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-15T06:11:02Z","2012-06-19T03:50:26Z"
"","7062","Javadoc incorrect for DelegatingConnectionFactory (org.springframework.jca.cci.connection.DelegatingConnectionFactory) [SPR-2373]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2373](https://jira.spring.io/browse/SPR-2373?redirect=false)** and commented  I just searched for the phrase ""to be to be"" in the 2.0 RC3 source, and I came up with another bug similar to #7061:  There are two errors in the following Javadoc comment (from org.springframework.jca.cci.connection.DelegatingConnectionFactory):  /** * ConnectionFactory implementation that delegates all calls to a given target * ConnectionFactory. Abstract because it is meant to be to be subclasses, * overriding specific methods that should not simply delegate to the target. *  * `@author` Juergen Hoeller * `@since` 1.2   */  1) This class is no longer abstract (since version 1.4), though the comment claims that it is (""Abstract because..."").  2) The same sentence incorrectly states ""..is meant to be to be subclasses..."" (repeating ""to be""; ""subclasses"" instead of ""subclassed"").  Personally, I think the following would be an adequate replacement for line 32:  ""ConnectionFactory. Can be subclassed, with subclasses""  ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-01T06:17:27Z","2019-01-11T18:37:09Z"
"","7061","Javadoc incorrect for DelegatingDataSource (org.springframework.jdbc.datasource.DelegatingDataSource) [SPR-2372]","**[Arthur Loder](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.loder)** opened **[SPR-2372](https://jira.spring.io/browse/SPR-2372?redirect=false)** and commented  There are two errors in the following Javadoc comment (from org.springframework.jdbc.datasource.DelegatingDataSource):  /** * DataSource implementation that delegates all calls to a given target DataSource. * Abstract because it is meant to be to be subclassed, overriding specific methods * (such as \getConnection()\ that should not simply delegate to the target. *  * `@author` Juergen Hoeller * `@since` 1.1 * `@see` #getConnection() * `@see` #getConnection(String, String)   */  1) This class is no longer abstract (since version 1.9), though the comment claims that it is (""Abstract because..."").  2) The same sentence incorrectly states ""..is meant to be to be subclassed..."" (repeating ""to be"").  I think the following would be an adequate replacement for line 29:  ""Can be subclassed, with subclasses overriding specific methods""   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-01T06:05:32Z","2012-06-19T03:51:03Z"
"","7111","Inconsistent terminology in MVC tutorial [SPR-2422]","**[Arnout Engelen](https://jira.spring.io/secure/ViewProfile.jspa?name=raboof)** opened **[SPR-2422](https://jira.spring.io/browse/SPR-2422?redirect=false)** and commented  http://www.springframework.org/docs/MVC-step-by-step/Spring-MVC-step-by-step-Part-1.html uses log4j.rootLogger in the example code, but the text above it still calls it log4j.rootCategory.  Even though they're basically equivalent, the former is preferred (http://www.mail-archive.com/log4j-user@logging.apache.org/msg00614.html).  Suggested fix: change 'rootCategory' to 'rootLogger'.   ---  **Affects:** 1.2.8","closed","type: bug,","spring-projects-issues","2006-08-13T19:40:01Z","2012-06-19T03:50:56Z"
"","7667","Spring performance is insufficient for intensive work at short scopes [SPR-2981]","**[Antranig Basman](https://jira.spring.io/secure/ViewProfile.jspa?name=bosmon)** opened **[SPR-2981](https://jira.spring.io/browse/SPR-2981?redirect=false)*** and commented  When making large numbers of instantiations, in particular at short scopes such as within an HTTP request, Spring core performance can become a bottleneck. Note that this appears to be an orthogonal problem to that referred to in #7460 since this affects singleton and non-singleton beans alike, even (and, actually especially) in a single-threaded context. This is suggested also by the fact that this speed test is affected relatively little by the change from Spring 1.2.8 to 2.0.1 (slows by around 4%)  There is a test project in our SVN tagged at https://saffron.caret.cam.ac.uk/svn/projects/TestRSAC/tags/J-ServletUtil-1.2 which demonstrates the issue. A modest-sized container (30 beans with varying numbers of properties from 1 to 13) is fired up in various versions of Spring, and is subjected to repeated cycles of a fetch of the most derived bean followed by a call to destroySingletons(). This stabilises in the region of 8ms per instantiation of the bean set (for these 30 beans, on a fairly modest laptop). This would obviously be an unacceptable per-request overhead if occuring on each HTTP cycle.  It's worth comparing this much lower figure with that of the 6-bean container in #7460 - I think much of the difference lies in the considerably greater number of properties (some of which require conversion) on the beans in this test, which is more representative of a real-world container. For comparison purposes a run with a SINGLE leaf bean instantiates the container in only 22 microseconds, more than 400 times faster - demonstrating that the overhead is really a per-bean one, and strongly penalising beans with larger and more complex property sets.  Profiling suggests that around 30% of the time is being lost in Sun introspection code, and a further 30% in instantiation of BeanWrapperImpl objects, which appear to be fabricated in a complete fresh set for every property set. Synchronisation also seems to be a significant part of the overhead. Even with removal of those first two two sources of overhead, the lag from this test instantation still couldn't be overwhelmingly expected to be","closed","type: enhancement,","spring-projects-issues","2006-12-25T09:52:29Z","2019-01-11T21:26:12Z"
"","7536","Emphasise XML-driven configuration over annotations for AOP injection and configuration in documentation [SPR-2849]","**[Antranig Basman](https://jira.spring.io/secure/ViewProfile.jspa?name=bosmon)** opened **[SPR-2849](https://jira.spring.io/browse/SPR-2849?redirect=false)** and commented  One might be forgiven for coming to think that different parts of the Spring documentation were written by different people :P  For example,  the last section of 3.3.8 includes the evaluation ""The above example is generally is not a desirable solution since the business code is then aware of and coupled to the Spring Framework. Method Injection, a somewhat advanced feature of the Spring IoC container, allows this use case to be handled in a clean fashion.""  This has as I see it always been one of the overriding goals of the Spring framework, that is to ensure that clients have as few dependencies as possible handed on to them. Unfortunately in the area of Java 5 annotations, there doesn't seem to be the same awareness/eagerness to ensure dependency cleanliness.  For example, section 6.4.2 on ""`@AspectJ` or XML for Spring AOP?"" gives as the headline advice ""If you are using Java 5, use annotations"" which is inconsistent with this philosophy. Further, section 6.8.1 shows an extensively worked example using annotations with little if any consideration given to the externally-specified (XML or other) equivalent. Whilst section 6.3 opens with a discussion of the","closed","type: enhancement,","spring-projects-issues","2006-11-18T05:17:23Z","2012-06-19T03:50:56Z"
"","7506","""TargetListAggregatingBean"" allows distributed collaboration to build up list-valued properties [SPR-2819]","**[Antranig Basman](https://jira.spring.io/secure/ViewProfile.jspa?name=bosmon)** opened **[SPR-2819](https://jira.spring.io/browse/SPR-2819?redirect=false)** and commented  Several requests are outstanding in JIRA to improve Spring support for constructing list-valued properties, but I believe there is a deeper underlying issue which can be addressed. I have written up a possible solution as ""TargetListAggregatingBean""  A brief summary of the issues -  * Whilst Spring has support for aggregating list-valued dependencies from the container, these must currently form a bounded set which is known to the recipient at definition time. In a more distributed architecture, it can become necessary for a recipient to express dependency on a collection whose members are drawn from a number of different contexts which cannot be known in advance. The standard Spring approach to this problem is ListableBeanFactory.getBeanNamesOfType, which is explained on the wiki page (link below) to suffer from two deficiencies, firstly in creating a framework dependency on the target, and secondly of being insufficiently fine-grained.  The TLAB solution allows any number of beans to express their contribution to the target list from around the context, by means of pure Spring definitions, and without exposing any additional dependencies to the recipient.  I have written up the issues and a solution on the RSF wiki on its own page:  http://www2.caret.cam.ac.uk/rsfwiki/Wiki.jsp?page=TargetListAggregatingBean  Implementation notes: i) All licenced under a Apache 1.1-style licence, no other encumbrance ii) implementation doesn't fundamentally have extraneous dependencies, but **does** currently use RSF's introspection scheme rather than javax.beans for performance reasons. iii) Currently packaged as a standard Spring BeanPostProcessor initialised by an ApplicationListener, an implementation integrated into the Spring core could be more slick :P  Other related JIRAs:  #7488/SPR-230 - supply ""adder"" in addition to ""setter"". If adder-injection were supplied, this would ideally become TLABable. #6382 - A TLAB-delivered list would be a very good fit for being delivered to ChainOfResponsibilityFactoryBean #5784 - TLAB is in fact a more general implementation of  ""depends-on-after-created"" (DOAC). The rationale for DOAC however would be unclear and most probably would reflect a poor design, unless the identified dependents were somehow **delivered** to the target. TLAB actually solves the underlying problem that DOAC is aimed at while insisting that the arrow of dependence remains aligned with the arrow of relative construction time.  ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-09T06:44:54Z","2019-01-11T21:31:52Z"
"","7474","Formatting error in GenericWebApplicationContext javadoc [SPR-2787]","**[Antranig Basman](https://jira.spring.io/secure/ViewProfile.jspa?name=bosmon)** opened **[SPR-2787](https://jira.spring.io/browse/SPR-2787?redirect=false)** and commented  The bold tag in the class comment for GenericWebApplicationContext is not closed properly - as currently visible at http://www.springframework.org/docs/api/org/springframework/web/context/support/GenericWebApplicationContext.html   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-11-01T09:17:02Z","2012-06-19T03:51:06Z"
"","7134","Error in LazyInitTargetSource Javadoc (1.2.x only) [SPR-2445]","**[Antranig Basman](https://jira.spring.io/secure/ViewProfile.jspa?name=bosmon)** opened **[SPR-2445](https://jira.spring.io/browse/SPR-2445?redirect=false)** and commented  The Javadocs for LazyInitTargetSource in the 1.2.x version at http://static.springframework.org/spring/docs/1.2.x/api/index.html are incorrect in that the property  \  is set to a reference to the bean, rather than the name of the bean. This error has already been corrected in the 2.x Javadocs where this property reads  \\\   ---  **Affects:** 1.2.8","closed","in: core,","spring-projects-issues","2006-08-18T02:28:19Z","2012-06-19T03:51:01Z"
"","7133","Allow short-form ""idref"" properties in addition to ""ref"" [SPR-2444]","**[Antranig Basman](https://jira.spring.io/secure/ViewProfile.jspa?name=bosmon)** opened **[SPR-2444](https://jira.spring.io/browse/SPR-2444?redirect=false)** and commented  Although in Spring 1.2 the ""short form"" attribute syntax for properties allows bean references and values (""ref"" and ""value"") to be specified inline, currently there is no way to do this for references to the names of beans, for example the following  \ \ \ \ \  could be written in the proposed syntax  \ \ \  Currently the only workaround is to use ""value"" in place of ""idref"" if one wants a short form.  I believe this case is common enough, and the extra link-safety provided by idref is valuable enough to make this small change worthwhile.  ---  **Affects:** 2.0 RC3  **Issue Links:** - #12830 Evaluate 'idref' element and 'local' attribute in Spring 3.1","closed","type: enhancement,","spring-projects-issues","2006-08-18T02:22:19Z","2019-01-11T19:32:21Z"
"","7114","getBeanNamesForType with includeFactories = true causes inconsistent construction semantics [SPR-2425]","**[Antranig Basman](https://jira.spring.io/secure/ViewProfile.jspa?name=bosmon)** opened **[SPR-2425](https://jira.spring.io/browse/SPR-2425?redirect=false)** and commented  The construction semantics for getBeanNamesForType are inconsistent, in that any user in the container may cause an alteration in startup behaviour by issuing a query with the includeFactories = true parameter.  The relevant code is in DefaultListableBeanFactory - should it fail on the first branch, it will attempt to make a match on bean type based on a query for the factory itself:      // In case of FactoryBean, try to match FactoryBean itself next.                    beanName = FACTORY_BEAN_PREFIX + beanName;               }               // Match raw bean instance (might be raw FactoryBean).               if ((includePrototypes || rbd.isSingleton()) && isBeanTypeMatch(beanName, type)) {                    result.add(beanName);               }  and/or from ""AbstractBeanFactory.getType"": // Check bean class whether we're dealing with a FactoryBean. if (FactoryBean.class.isAssignableFrom(beanClass) && !isFactoryDereference(name)) { // If it's a FactoryBean, we want to look at what it creates, not the factory class. FactoryBean factoryBean = (FactoryBean) getBean(FACTORY_BEAN_PREFIX + beanName); return factoryBean.getObjectType(); }  This will cause the factory bean to be ""incompletely constructed"" - it will have dependencies delivered, but will not be used to deliver its product. This means that the bean in question will not be constructed properly during startup of the container in general (assuming it has lazy-init=""false""), unless it is explicitly demanded as a dependency by another bean. There seem to be a number of ways out of this - either any fetch of a FactoryBean should fully construct both itself and product, **or** the container should detect such partially constructed factories during the rest of its startup, and continue to fully construct them then.  Right now I have to make sure that neither myself nor any of my users issue such a query during startup, i.e. this represents an unpleasant race condition. The possibility for construct **order** perturbation is fine, and any correct bean container should be prepared for this, but construct **result** perturbation is not.   ---  **Affects:** 1.2.8","closed","in: core,","spring-projects-issues","2006-08-14T05:49:50Z","2012-06-19T03:50:55Z"
"","7105","Forcing inherited classloader in ApplicationContext hierarchies breaks hot-deploy and hierarchical class loaders [SPR-2416]","**[Antony Blakey](https://jira.spring.io/secure/ViewProfile.jspa?name=antony.blakey)** opened **[SPR-2416](https://jira.spring.io/browse/SPR-2416?redirect=false)** and commented  2.0RC2 contained a change (#6847) that breaks a number of very useful features, and IMHO is contrary to the how Java classloading is intended to work.  In particular, if I have a hierarchy of ApplicationContexts where some of the leaves are in .war or .ear files, then the leaf contexts are most likely referencing classes that are in the .war or .ear, and therefore require a different classloader than the parent contexts. The classloader in all likelihood is part of a hierarchy that mirrors the ApplicationContext hierarchy. This is the situation in JBoss in particular - at least if isolation is on and/or during hot-(re)deploy, and of course Java deals with this using the TCCL mechanism. Even if most JBoss users don't use isolation, it does use a different classloader during hot-(re)deploy. Furthermore other containers may correctly implement isolation which will make this problem more obvious.  The workaround is to null the classloader on the ResourceLoader in a bean post-processor, which I do by specifing a custom classloader-nulling ApplicationContext in the node in my hierarchy that corresponds to a classloader hierarchy boundary. I don't think users should have to do this for what is after all a fundamental feature of war/ear classloading design (even if JBoss ignores it by default), especially breaking hot-redeploy.  I must admit I'm not sure of the use case that motivated the change. For a change with such a significant chance of breakage, I was surprised that I couldn't find it listed in the 2.0RC2 changelog.  ---  **Affects:** 2.0 RC2, 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-11T11:09:10Z","2019-01-11T19:33:21Z"
"","7487","Allow AbstractTransactionalDataSourceSpringContextTests to use SimpleJdbcTemplate for it's underlying template class [SPR-2800]","**[Anthony Falabella](https://jira.spring.io/secure/ViewProfile.jspa?name=tonyjoe)** opened **[SPR-2800](https://jira.spring.io/browse/SPR-2800?redirect=false)** and commented  Allow AbstractTransactionalDataSourceSpringContextTests to use SimpleJdbcTemplate for it's underlying template class.  The AbstractTransactionalDataSourceSpringContextTests class has this code:      public void setDataSource(DataSource dataSource) {     	// TODO what if you want to use a JdbcTemplate by preference,     	// for a native extractor?     	this.jdbcTemplate = new JdbcTemplate(dataSource);     }  One option I can think of would be for you to setup 2 attributes, one for jdbcTemplate and one for simpleJdbcTemplate.  Having both might make your backward compatibility easier.  Within the setDataSource(...) method I guess you'd have to create one of each object so that people with code pointing to the old attribute would not break.  Also if using JRE 1.4 delegate any internal calls to the old jdbcTemplate otherwise use the new simpleJdbcTemplate.    ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-03T16:50:52Z","2012-06-19T09:37:31Z"
"","7361","TypeConverterDelegate does not cohearse primatives and their Object counterparts in Spring 2.0 as it did in 1.2.8 [SPR-2672]","**[Anthony Falabella](https://jira.spring.io/secure/ViewProfile.jspa?name=tonyjoe)** opened **[SPR-2672](https://jira.spring.io/browse/SPR-2672?redirect=false)** and commented  I have a class that has a property on it that is of type ""long"".  There's also a public setter for it that takes in a long.  My context file contains the following:           	     		1000     	                         	     	     		     	          	     		FcNameFileIngestor-${env.name}     	       While this used to work in Spring 1.2.8, it no longer does in Spring 2.0 final.  It raises this exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'fcNameFileIngestor' defined in file [C:\eclipse3.2\workspace\batchutil\classes\com\citigroup\futures\account\batch\testCtxBatchProcessors.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.Integer] to required type [long] for property 'processingCommitInterval'; nested exception is java.lang.IllegalArgumentException: No matching editors or conversion strategy found Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessException details (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.Integer] to required type [long] for property 'processingCommitInterval'; nested exception is java.lang.IllegalArgumentException: No matching editors or conversion strategy found Caused by: java.lang.IllegalArgumentException: No matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:212) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:127) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:775) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:608) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(AbstractPropertyAccessor.java:49) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:74) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:970) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:729) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:416) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:290) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:138) at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:125) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:104) at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:75) at junit.framework.TestCase.runBare(TestCase.java:128) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:228) at junit.framework.TestSuite.run(TestSuite.java:223) at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:35) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  Can the TypeConverterDelegate be made more robust to cohearse some primatives into other types when no data would be lost in the transition (i.e. an int can go to a long, a float can go to a double)?  As I mentioned, the above example did work in 1.2.8.   ---  **Affects:** 2.0 final","closed","type: bug,","spring-projects-issues","2006-10-04T03:23:46Z","2012-06-19T03:50:37Z"
"","6986","MVC tutorial breaks, possibly because of bug in standard.jar:c.tld [SPR-2297]","**[Anno Langen](https://jira.spring.io/secure/ViewProfile.jspa?name=anno)** opened **[SPR-2297](https://jira.spring.io/browse/SPR-2297?redirect=false)** and commented  Downloaded spring-framework-2.0-rc2-with-dependencies.zip and started following the MVC tutorial. Breaks in Step 14. Tomcat reports:  org.apache.jasper.JasperException: /WEB-INF/jsp/hello.jsp(6,28) According to TLD or attribute directive in tag file, attribute value does not accept any expressions  I resolved it in my copy by editing c.tld in the standard.jar. I set   \true\  for attribute ""value"" in tag ""out"".  BTW: I see that the source for the MVC tutorial is out of date, e.g., docs/MVC-step-by-step/src/part1.xml, is newer than docs/MVC-step-by-step/Spring-MVC-step-by-step-Part-1.html. I failed to generate html using the downloaded jar dependencies.   ---  **Affects:** 2.0 RC2","closed","type: bug,","spring-projects-issues","2006-07-13T04:12:36Z","2012-06-19T03:52:43Z"
"","7222","Support JavaBean Eventing methods in Spring [SPR-2533]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-2533](https://jira.spring.io/browse/SPR-2533?redirect=false)** and commented  JavaBeans support the management of listeners via the addX() methods (see section 6 of the JavaBeans specification, titled ""Events""). It would be extremely useful to support this in spring so that event listeners could be added to a bean using standard IoC. This could be done either by overloading the meaning of ""property"" or introducing a new ""listener"" tag. For instance given the addX() method on a bean you would like to be able to do the following:  \ \ \ \   ---  **Affects:** 2.0 RC3  **Issue Links:** - #4961 Please improve BeanFactory support for containers & collections (_**""duplicates""**_)  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-09-04T20:04:24Z","2019-01-11T19:21:50Z"
"","6942","Expand the scope of magic beans and application context meta information [SPR-2253]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-2253](https://jira.spring.io/browse/SPR-2253?redirect=false)** and commented  In many situations you want to apply global configuration to your application context defintion. PropertyPlaceholderConfigurer is an example of how this is done today. Basically people use ""magic beans"" that work via side effects. In many ways it would be much better if this support could be normalized to incorporate magic beans and their associated actions into a specific lifecycle for the application context. Another example is BeanPostProcessor - spring detects this and does something special with it early. All of these approaches suffer from the fact that the bean class has to be instantiated in order for action to be taken, sometimes with unintended consequences. Much better to mark magic beans in the XML itself, preferably with a known initialization order and with access to the config and beans at various points in the application context lifecycle.   --- No further details from [SPR-2253](https://jira.spring.io/browse/SPR-2253?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-07-06T19:14:35Z","2012-06-19T09:37:40Z"
"","6941","Support relative paths in file: URLs [SPR-2252]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-2252](https://jira.spring.io/browse/SPR-2252?redirect=false)** and commented  Spring conveniently supports relative paths in unscoped Resource references, transparently converting strings to FileSystemResource. However the same is not true for file: scoped resources. It would be convenient (and trivial to implement) if this were actually the case.   ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-06T19:06:52Z","2012-06-19T09:37:35Z"
"","6943","CommonsPoolTargetSource throws NullPointerException on context initialization [SPR-2254]","**[Andrzej Dengusiak](https://jira.spring.io/secure/ViewProfile.jspa?name=endriu)** opened **[SPR-2254](https://jira.spring.io/browse/SPR-2254?redirect=false)** and commented  I'm trying to create a pool of Converter objects, so I won't have to initialize them every time, but Spring throws NullPointerException on context initialization. My config is 1:1 copy from documentation but it doesn't work. Tested on Spring 2.0 RC1 and Spring 2.0 RC2           	          	     	                    	       2006-07-07 12:01:45,256 ERROR [org.springframework.web.context.ContextLoader] Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'openOfficeConverter': FactoryBean threw exception on object creation; nested exception is java.lang.NullPointerException Caused by: java.lang.NullPointerException at org.springframework.util.ClassUtils.getAllInterfacesForClassAsSet(ClassUtils.java:486) at org.springframework.util.ClassUtils.getAllInterfacesForClass(ClassUtils.java:464) at org.springframework.aop.framework.ProxyFactoryBean.getSingletonInstance(ProxyFactoryBean.java:300) at org.springframework.aop.framework.ProxyFactoryBean.getObject(ProxyFactoryBean.java:253) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectFromFactoryBean(AbstractBeanFactory.java:991) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:960) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:215) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:609) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:566) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:389) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:277) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:199) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:188) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:181) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findMatchingBeans(DefaultListableBeanFactory.java:325) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:648) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:571) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:389) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:257) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:392) at org.springframework.beans.factory.support.DefaultListableBeanFactory.isBeanTypeMatch(DefaultListableBeanFactory.java:228) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:141) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:194) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:188) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:181) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findMatchingBeans(DefaultListableBeanFactory.java:325) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:648) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:571) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:389) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:257) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:254) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:332) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3729) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4187) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.apache.commons.modeler.BaseModelMBean.invoke(BaseModelMBean.java:503) at org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:164) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.apache.catalina.core.StandardContext.init(StandardContext.java:5116) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.apache.commons.modeler.BaseModelMBean.invoke(BaseModelMBean.java:503) at org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:164) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at [...]   ---  **Affects:** 2.0 RC1, 2.0 RC2","closed","in: core,","spring-projects-issues","2006-07-06T22:46:44Z","2012-06-19T03:52:30Z"
"","7231","Error in sample usage of ControllerClassNameHandlerMapping  [SPR-2542]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-2542](https://jira.spring.io/browse/SPR-2542?redirect=false)** and commented  There seems to be an error in the example given in section 13.11.1 of the reference docs:  ~~ Quote ~~~~~~~~~~~~~~~~~~~  In the case of MultiActionController handler classes, the mappings generated are (ever so slightly) more complex, but hopefully no less understandeable. Some examples (all of the Controller  names in this next bit are assumed to be MultiActionController  implementations).      * AdminController maps to the '/welcome/*' request URL     * CatalogController maps to the '/catalog/*' request URL  ~~ End Quote ~~~~~~~~~~~~~~~~~~~  Surely AdminController would map to the '/admin/*' request URL?   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-09-05T15:21:29Z","2012-06-19T03:50:32Z"
"","7139","Implement equals() in a meaningful way for ObjectError and FieldError [SPR-2450]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-2450](https://jira.spring.io/browse/SPR-2450?redirect=false)** and commented  For the same reasons as issue #7110 (http://opensource.atlassian.com/projects/spring/browse/SPR-2421), it would be good if the ObjectError and FieldError classes implemented equals() in a meaningful way. For example:  - ObjectError instances could check they had the same object name - FieldErrors could additionally check they were for the same field and whether they were both binding failures  Of course, the hashCode() methods would need to be implemented accordingly in both classes.  ---  **Affects:** 1.2.8, 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-20T16:37:55Z","2019-01-11T19:34:35Z"
"","7110","Implement BindException#equals() in a meaningful way [SPR-2421]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-2421](https://jira.spring.io/browse/SPR-2421?redirect=false)** and commented  BindException inherits its equals() method from java.lang.Object. This means that two BindException instances are unable to be compared in any meangingful way. This creates complications when using EasyMock (http://www.easymock.org) to express expectations about the parameters passed to a Spring Validator's validate() method. For example, it would be nice to be able to do this:  public class SimpleFormControllerTestCase extends junit.framework.TestCase {  private SimpleFormController controller = new SimpleFormController(...);  // invokes validate private Validator mockValidator = EasyMock.createStrictMock(Validator.class); private Object myTarget = new Object();  public void testMyClassUsingValidator() { controller.setValidator(mockValidator); // Set up expectations EasyMock.expect(mockValidator.validate(myTarget, new BindException(myTarget, ""object being validated"")));  // *** EasyMock.replay(mockValidator);      // Run the method that calls validate()     controller.bindAndValidate(...);          // Check the mocks     EasyMock.verify(mockValidator);  } }  Unfortunately the expectation marked ""***"" fails because the BindExceptions instantiated by the test case and SimpleFormController are not ""equal"" according to java.lang.Object, even though they are logically the same, i.e. - same target - same ""objectName"" property - same empty list of errors  This could be fixed by implementing BindException#equals() as follows:  public boolean equals(Object object) { if (!(object instanceof BindException)) { return false; } BindException other = (BindException) object; return new EqualsBuilder() // Check it has the same name .append(getObjectName(), other.getObjectName()) // The same error list .append(getAllErrors(), other.getAllErrors()) // The same target .append(getTarget(), other.getTarget()) .isEquals(); }  Of course the hashCode() method would need to be implemented in a similar way.   ---  **Affects:** 1.2.8, 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2006-08-13T15:52:01Z","2012-06-19T03:50:12Z"
"","7040","org.springframework.beans.factory.support.BeanDefinitionValueResolver is not designed for extension [SPR-2351]","**[Andrew Perepelytsya](https://jira.spring.io/secure/ViewProfile.jspa?name=aperepel)** opened **[SPR-2351](https://jira.spring.io/browse/SPR-2351?redirect=false)** and commented  This issue is related to #6974. Unfortunately, I was unable to get feedback on it, so asking at least to allow for providing the means to fix it on our side. The org.springframework.beans.factory.support.BeanDefinitionValueResolver is a package-friendly class. That makes it awkward for subclass by other non-spring packages which want to put it under their own namespace. Moreover, because of those private methods in AutowireCapableBeanFactory it's hard. I had to resort to creating my own bean factory just to expose some internals for redefining the resolver. Eventually, I had to resort to copying the entire resolver class and customizing the bits I need, as it was tightly coupled to where it was originally.  Please, weaken access to those private methods in bean factories (like applyBeanProperties, etc.). Protected is fine. Then, try to set a custom BeanDefinitionValueResolver, you'll understand the pain ;) Maybe it's time to extract one more interface in Spring?  ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-07-26T13:19:19Z","2019-01-11T18:35:14Z"
"","7344","MessageListenerAdapter should use DestinationResolver to resolve defaultResponseDestination [SPR-2655]","**[Andrew (gus) Gustafson](https://jira.spring.io/secure/ViewProfile.jspa?name=gus4000)** opened **[SPR-2655](https://jira.spring.io/browse/SPR-2655?redirect=false)** and commented  Similar to the behaviour in JMSTemplate, MessageListenerAdapter should use a DestinationResolver to resolve the defaultResponseDestination. Something like: private Object defaultResponseDestination; public void setDefaultResponseDestination(Destination destination) { this.defaultResponseDestination = destination; } public void setDefaultResponseDestinationName(String defaultResponseDestinationName) { this.defaultResponseDestination= defaultDestinationName; } Refactoring needed on getResponseDestination(..) method to include Session param.   ---  **Affects:** 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2006-09-28T20:53:53Z","2012-06-19T03:50:33Z"
"","7148","Missing: org.springframework.jdbc.core.ResultReader - need migration docs for 1.2 to 2.0 [SPR-2459]","**[Andrew (gus) Gustafson](https://jira.spring.io/secure/ViewProfile.jspa?name=gus4000)** opened **[SPR-2459](https://jira.spring.io/browse/SPR-2459?redirect=false)** and commented  Perhaps mistakenly, we have used org.springframework.jdbc.core.ResultReader within our codebase. Unfortunately this class no longer exists in Spring 2.0. So, for backward compatability we either need the class to return again, or for some migration docs to be included. Similarly, we have referenced org.springframework.jdbc.core.StatementCreatorUtils which is no longer visible.   ---  **Affects:** 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3","closed","in: core,","spring-projects-issues","2006-08-22T02:57:14Z","2012-06-19T03:50:05Z"
"","10522","JSON formatting view for Spring MVC [SPR-5853]","**[Andres Almiray](https://jira.spring.io/secure/ViewProfile.jspa?name=aalmiray)** opened **[SPR-5853](https://jira.spring.io/browse/SPR-5853?redirect=false)** and commented  Create a view that outputs its model as a JSON object. This will help AJAX enabled applications to transfer less bytes as the JSON format is more compact that XML. It also allows for quick object creation using eval(), no need for extra XML parsing.  I have created such view (JsonView) using the json-simple library (http://json.org/java) and would like to contribute it.   ---  **Attachments:** - [JsonView.java](https://jira.spring.io/secure/attachment/13220/JsonView.java) (_3.26 kB_) - [JsonView.zip](https://jira.spring.io/secure/attachment/11771/JsonView.zip) (_45.82 kB_) - [SmdServiceExporter.java](https://jira.spring.io/secure/attachment/12313/SmdServiceExporter.java) (_5.06 kB_) - [SpringJSONExporter.jar](https://jira.spring.io/secure/attachment/11879/SpringJSONExporter.jar) (_24.67 kB_) - [SpringJSONRPC.war](https://jira.spring.io/secure/attachment/11880/SpringJSONRPC.war) (_302.96 kB_) - [spring-jsonview.v2.1.zip](https://jira.spring.io/secure/attachment/12374/spring-jsonview.v2.1.zip) (_86.86 kB_) - [spring-jsonview.v2.zip](https://jira.spring.io/secure/attachment/12373/spring-jsonview.v2.zip) (_86.73 kB_)  **Issue Links:** - [SWF-1273](https://jira.spring.io/browse/SWF-1273) Json-Rpc-Java (AJAX) and Spring integration - [SWF-1295](https://jira.spring.io/browse/SWF-1295) Move the JacksonJsonView implementation to the core Spring Framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ae919af1ce664424f5de2d43e8ba4e2849e1060, https://github.com/spring-projects/spring-framework/commit/398729cda1da9ddea58eb1a506c4bad8f77e63c3  26 votes, 26 watchers","closed","has: votes-jira,","spring-projects-issues","2006-06-28T03:47:12Z","2012-06-19T03:43:46Z"
"","7668","Spring remoting in non-webapp environments [SPR-2982]","**[Andres Almiray](https://jira.spring.io/secure/ViewProfile.jspa?name=aalmiray)** opened **[SPR-2982](https://jira.spring.io/browse/SPR-2982?redirect=false)** and commented  Most of Spring Remoting's exporters require a webapp with DispatchServlet because they are usually based on the http protocol, this constraints the app to be inside a servlet container. What about going in the opposite direction, a standalone app that has an embedded servlet container, like Jetty ? This will provide two choices for developers instead of only one way to go. In the attachment you'll find a small code base that may serve as a starting point. It is based on Jetty 6.1.0rc2, an older version depending on Jetty 5.1.4 has been on production for more than 4 months.   ---  **Affects:** 2.1 M4  **Attachments:** - [spring-serviceexporter.zip](https://jira.spring.io/secure/attachment/12301/spring-serviceexporter.zip) (_17.94 kB_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-12-26T05:11:41Z","2008-03-13T05:56:59Z"
"","7789","Trim classnames in bean definition [SPR-3102]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-3102](https://jira.spring.io/browse/SPR-3102?redirect=false)** and commented  As I see, the default ClassEditor does trim the passed in String before trying to resolve the class. However, specifying a class in a bean definition (using the ""class"" attribute) does not. For the sake of consistency and for elimination of problems due to leading/trailing blanks I suggest to perform also a trimming of classnames for bean definitions.  Regards, Andreas   ---  **Affects:** 1.2.8, 2.0.2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-02-01T16:46:20Z","2012-06-19T03:51:16Z"
"","7782","Typo in notice.txt? [SPR-3095]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-3095](https://jira.spring.io/browse/SPR-3095?redirect=false)** and commented  As I had a look into notice.txt distributed with spring I wondered about this section:  ""Alternately, this acknowledgement may appear in the software itself, if and wherever such third-party acknowledgements normally appear.""  Shouldn't it be ""Alternatively"" instead of ""Alternately""?  And, yes, it is nitpicking :-)) I just thought that, if my english doesn't fail me here, this should be corrected as it is part of the license agreement.   ---  **Affects:** 1.2.8, 2.0.2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2007-01-30T18:35:53Z","2012-06-19T03:50:10Z"
"","7740","Extend RmiInvocationHandler to allow querying the service interface [SPR-3054]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-3054](https://jira.spring.io/browse/SPR-3054?redirect=false)** and commented  I would like to have the ability to query a RmiInvocationHandler for the service interface it refers to. This would allow the generic querying of registered handlers. I want to use such a feature for dynamically creating proxies of registered beans. Therefore I suggest adding an according property (which should be of type String and yields the fully qualified classname. Providing the class itself might be problematic as it might not be available on the client (in my case it is, but in others it may not).   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-18T17:32:28Z","2012-06-19T03:50:20Z"
"","7739","Add getters for host/port to RmiRegistryFactoryBean [SPR-3053]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-3053](https://jira.spring.io/browse/SPR-3053?redirect=false)** and commented  I propose adding getters for host and port properties of RmiRegistryFactoryBean. Background of the proposal is this: I configured a Registry in an application context and want to propagate its configuration to another process so that it could connect to it. To make this easy I want to retrieve the factory bean and query its properties. Currently I subclassed the factory bean to achieve my goal though it is a bit awkward.    ---  **Affects:** 1.2.8, 2.0.2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-01-18T17:22:31Z","2012-06-19T03:50:22Z"
"","7517","Inefficient array assignment with BeanWrapperImpl [SPR-2830]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-2830](https://jira.spring.io/browse/SPR-2830?redirect=false)** and commented  The programmatic usage of BeanWrapperImpl to assign property values is somewhat inefficient in case of arrays (maybe also collections, but I didn't test that). See the forum thread http://forum.springframework.org/showthread.php?t=30840 for details. There is also code for a small test available. For larger arrays the assignment takes significantly longer than the assignment of a simple object.  Regards, Andreas   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-11-12T19:57:59Z","2012-06-19T03:50:47Z"
"","6932","Visibility of execute methods in StoredProcedure is at odds with javadoc [SPR-2242]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-2242](https://jira.spring.io/browse/SPR-2242?redirect=false)** and commented  The javadoc of the StoredProcedure class states the following:  ""This class is abstract and its execute methods are protected, preventing use other than through a subclass that offers tighter typing.""  However, the execute-methods are public. And also is the declareParameter method. I do not know when that discrepancy entered; also in the oldest version I have around (1.2.2) this case exists. I agree completely with the documented facts and its intentions and would therefore suggest to reduce the visibility of the mentioned methods to ""protected"" (maybe making them ""final"" as well).  Perhaps this might be a problem for 1.2.9 (if that will be published), because of compatibility issues. Anyway I would suggest to make this change in 2.0.  Regards, Andreas   ---  **Affects:** 1.2.8, 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-07-05T21:53:27Z","2012-06-19T03:52:44Z"
"","7806","CookieGenerator (or an extension) to support reading cookies from a request [SPR-3119]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-3119](https://jira.spring.io/browse/SPR-3119?redirect=false)** and commented  Basically I'd like the functionality of WebUtils.getCookie in the CookieGenerator, too. The cookie name and path would be taken from the CookieGenerator Bean properties rather than being passed in via parameter of getCookie.  This would have the advantage of being able to configure the cookie in the Spring-Context only once, and use it for reading and writing.  Maybe the CookieGenerator should then be renamed to something like CookieSupport (or have CookieSupport extend CookieGenerator?).  I could provide a patch if desired.   ---  **Affects:** 2.0.2  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-06T00:32:07Z","2012-06-19T09:37:22Z"
"","7805","CookieGenerator to support Cookie Comments [SPR-3118]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-3118](https://jira.spring.io/browse/SPR-3118?redirect=false)** and commented  I'd like the Cookie Generator to also support comments, like any other field that is exposed via javax.servlet.http.Cookie.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-06T00:24:53Z","2012-06-19T09:37:32Z"
"","7797","Dependency Injection for Servlet Filters: FilterToBeanProxy [SPR-3110]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-3110](https://jira.spring.io/browse/SPR-3110?redirect=false)** and commented  I think Spring should contain something like Acegi's org.acegisecurity.util.FilterToBeanProxy. This wrapping Servlet Filter allows dependency injection for Servlet Filters. This is something that has not got anything to do with Authentication or Authorization (Acegi), but could be used for many other Filters, too.    ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-05T03:20:46Z","2012-06-19T03:50:49Z"
"","7099","add displayValue for form:radiobutton and form:checkbox [SPR-2410]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-2410](https://jira.spring.io/browse/SPR-2410?redirect=false)** and commented  Similar to #6996, a way to convert reference data objects to their display value with the form:-tags for the other form elements with reference data would be useful.  e.g. something like this:     or      A similar mechanism would be useful for form:checkbox.  I'd like to add that instead of implicitly exposing the two variables (possibly overriding/overwriting other attributes with the same name) I would explicitly name the variable to use. What about varValue and varDisplayValue?  ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-08-11T03:13:10Z","2019-01-11T19:33:19Z"
"","7044","allow for multiple parent contexts in an application context [SPR-2355]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-2355](https://jira.spring.io/browse/SPR-2355?redirect=false)** and commented  The problem is that when you are using the parent context feature via SingletonBeanFactoryLocator (beanRefFactory.xml) for modularization, you can currently have only one dependency per module. This is not realistic. For example, you can have your business logic access multiple DAO modules (one for database access, perhaps one for a SOAP connector, one for sending mails...). Putting all those modules into one big DAO application context works against modularization, as I'd have to manage one shared beanRefFactory.xml for all those DAO modules.   ---  **Affects:** 2.0 RC2  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-07-26T19:51:58Z","2012-06-19T09:37:23Z"
"","7012","and null values [SPR-2323]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-2323](https://jira.spring.io/browse/SPR-2323?redirect=false)** and commented  I have a select box that selects one of several values and also the special option ""none"". The object representation (in the reference data) of that ""none"" is a simple null reference. I handle this special case in the associated PropertyEditor (null is converted to the empty string and vice versa).  Unfortunately, I get the following exception when rendering the options of the select box:  java.lang.IllegalArgumentException: 'value' cannot be null. at org.springframework.util.Assert.notNull(Assert.java:113) at org.springframework.web.servlet.tags.form.OptionTag.setValue(OptionTag.java:82)  A peek at line 82 in OptionTag.java reveals:  public void setValue(Object value) { Assert.notNull(value, ""'value' cannot be null.""); this.value = value; }  For the sake of easyness, I'd like to propose allowing null as a value of the option tag (possibly options tag, too). The alternative would be creating a special object that represents null, which is a bit unusual.   ---  **Affects:** 2.0 RC2  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11821/patch.txt) (_1.60 kB_)","closed","type: enhancement,","spring-projects-issues","2006-07-19T06:34:38Z","2012-06-19T03:50:54Z"
"","6996","selects all options [SPR-2307]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-2307](https://jira.spring.io/browse/SPR-2307?redirect=false)** and commented  In this example,  does select every option that is being rendered, effectively always selecting the last entry:           It is the same with the following variation:           The problem disappears if I reduce the code to the following, by doing without  and :        but unfortunately in this case, I have not got a sensible label.  I suspect,  somehow has a bad influence on the test for equality in  (always true).   ---  **Affects:** 2.0 RC2  **Attachments:** - [RulesVariant.java](https://jira.spring.io/secure/attachment/11813/RulesVariant.java) (_1020 bytes_) - [RulesVariantEditor.java](https://jira.spring.io/secure/attachment/11814/RulesVariantEditor.java) (_377 bytes_)","closed","type: bug,","spring-projects-issues","2006-07-16T08:03:17Z","2019-01-11T18:33:20Z"
"","6988","provide form:transform tag [SPR-2299]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-2299](https://jira.spring.io/browse/SPR-2299?redirect=false)** and commented  Please consider this code:                                                                                                                                                                                       As you can see, I need to duplicate the reference to the ""rules"" property in my command, just to be able to use the (very convenient) new form tags and still be able to convert my form objects to strings using the registered property editors with spring:transform. Spring:transform needs its own context, which is defined with spring:bind.  I propose to add a form:transform tag with similar syntax to spring:transform, which uses the context of form:select (and similar) tags instead. This would reduce the code to something like                                                                                                              which is much more readable and only has got one reference to the command property.  ---  **Affects:** 2.0 RC2  **Issue Links:** - #8144 form:form should work like spring:nestedPath","closed","type: enhancement,","spring-projects-issues","2006-07-13T12:49:56Z","2019-01-11T19:10:11Z"
"","7391","Improve startup time when using aop:aspectj-autoproxy and annotations [SPR-2703]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-2703](https://jira.spring.io/browse/SPR-2703?redirect=false)** and commented  Sometime between the later 2.0 release candidates and 2.0 final, startup time for our application roughly doubled.  There's a related discussion on the forums at http://forum.springframework.org/showthread.php?t=30052   ---  **Affects:** 2.0 final  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2006-10-11T05:05:23Z","2019-01-11T19:37:41Z"
"","7297","AbstractAspectJAdvice and AspectJAroundAdvice subvert ReflectiveMethodInvocation.invocableClone [SPR-2608]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-2608](https://jira.spring.io/browse/SPR-2608?redirect=false)** and commented  I'm using ReflectiveMethodInvocation.invocableClone in an `@Around` aspect to implement transaction retries.  However, AbstractAspectJAdvice & AspectJAroundAdvice stash a ProceedingJoinPoint in the MIs userAttributes.  That stashed PJP has a pointer to the original, uncloned, MI, so invoking my cloned MI ends up calling the next interceptor twice (because the interceptorIndex is coming from this stashed PJP/MI).  I think a workaround is to just clear out the stashed PJP, but I haven't tried that yet.   ---  **Affects:** 2.0 RC4","closed","in: core,","spring-projects-issues","2006-09-19T10:15:13Z","2012-06-19T03:51:05Z"
"","6897","Make the ""disable"" attribute of form tags more friendly [SPR-2207]","**[Amon Beckler](https://jira.spring.io/secure/ViewProfile.jspa?name=abeckler)** opened **[SPR-2207](https://jira.spring.io/browse/SPR-2207?redirect=false)** and commented  Some of the syntax for the attributes on the new form tags  can be confusing.  Specifically, the disable attribute of the form tag.  I attempted adding disabled =""false"" to a form:input, but it would still always disable the input .  I had to dig through the code to figure out that it is really looking for null or whitespace to assume a value of false.  If there is any text in the value, it translates as true.  So my two suggestions: 1. Make this attribute accept a boolean value. 2. Or at least add some documentation.    ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-06-28T00:46:47Z","2012-06-19T03:52:36Z"
"","7419","configuring pre-instantiated objects using spring [SPR-2731]","**[Amir Pashazadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=pasha)** opened **[SPR-2731](https://jira.spring.io/browse/SPR-2731?redirect=false)** and commented  I have found ""applyBeanPropertyValues(Object existingBean, String beanName) "" in ""AutowireCapableBeanFactory"" is for that feature.  but as far as the only concrete classes which implement this interface are ""DefaultListableBeanFactory"" and ""XmlBeanFactory""!  I believe more BeanFactories and ApplicationContext must have this feature; there is no way to use this feature in a WebApplicationContext....  ---  #4997  ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-10-18T13:10:34Z","2019-01-13T22:45:37Z"
"","7170","method replacer does not work on abstract methods inherited from super interfaces [SPR-2481]","**[Amir Pashazadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=pasha)** opened **[SPR-2481](https://jira.spring.io/browse/SPR-2481?redirect=false)** and commented  Abstract methods inherited from a superinterface (which are not implemented in target class) can not be replaced in a BeanFactory.  Suppose there exists:  public insterface MyInterface { void myMethod(); }  public abstract MyClass implements MyInterface { }  you can not define ""MyClass"" as a bean, and replace myMethod in it (with a methodReplacer)! or you must redeclare ""myMethod"" in ""MyClass""!   ---  **Affects:** 1.2.8, 2.0 RC2","closed","in: core,","spring-projects-issues","2006-08-25T10:54:23Z","2012-06-19T03:50:36Z"
"","7860","tag missing readonly attribute  [SPR-3175]","**[Alpheratz](https://jira.spring.io/secure/ViewProfile.jspa?name=alpheratz)** opened **[SPR-3175](https://jira.spring.io/browse/SPR-3175?redirect=false)** and commented  I can see that the  tag allows disabled=""true"".  It does not appear to permit readonly=""true"".  See: http://forum.springframework.org/showthread.php?t=34936  Probably also affects","closed","type: bug,","spring-projects-issues","2007-02-15T07:29:38Z","2012-06-19T03:50:25Z"
"","7003","Transaction synchronization error with PROPAGATION_REQUIRES_NEW and error obtaining new connection [SPR-2314]","**[Alon Salant](https://jira.spring.io/secure/ViewProfile.jspa?name=asalant)** opened **[SPR-2314](https://jira.spring.io/browse/SPR-2314?redirect=false)** and commented  AbstractPlatformTransactionManager can get itself in an unrecoverable state when it suspends one transaction and gets an error trying to create a new connection in the same thread of execution. Details and fix follow.  The symptom is the exception:  java.lang.IllegalStateException: Cannot deactivate transaction synchronization - not active at org.springframework.transaction.support.TransactionSynchronizationManager.clearSynchronization(TransactionSynchronizationManager.java:263) at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:746) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:615) at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:560) at org.springframework.transaction.interceptor.TransactionAspectSupport.doCloseTransactionAfterThrowing(TransactionAspectSupport.java:285) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:100) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176) ...  When this exception happens the first connection is never closed resulting in abandoned connections in the connection pool. Ouch.  To reproduce this error, we have a connection pool with only one connection available. We are using declarative transactions with AOP TransactionInterceptor. methodA() is configured with PROPAGATION_REQUIRED and calls methodB() which is configured with PROPAGATION_REQUIRES_NEW.  Calling methodA() results in:  1. New connection and transaction for methodA() execution 2. methodA() calls methodB() resulting in: 3. AbstractPlatformTransactionManager calls suspend(transaction) at line 321 4. AbstractPlatformTransactionManager calls doBegin() at line 322 and gets a timeout exception waiting for a new connection 5. Exception bubbles up causing a rollback but the original transaction is not in place to be rolled back 6. An exception is thrown in rollback (IllegalStateException) so connection is never closed  It appears that the fix would be to catch the exception in doBegin() and to resume the original transaction before rethrowing the exception.  This patch appears to do it for this specific case. I'm not sure if doBegin() should have the same handling elsewhere:  AbstractPlatformTransactionManager.java  322c322,330 <                       doBegin(transaction, definition); —  > try > { > doBegin(transaction, definition); > } > catch (RuntimeException e) > { > resume(transaction, (SuspendedResourcesHolder) suspendedResources); > throw e; > }  With this fix, the connection pool timeout exception bubbles all the way up and causes a rollback for the first transaction.  Alon  ---  **Affects:** 1.2.8, 2.0 final  **Issue Links:** - #7541 spring should not throw IllegalStateException if begin a transaction fail (_**""is duplicated by""**_)  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2006-07-17T08:21:55Z","2019-01-11T18:33:14Z"
"","7398","Platform inconsistency in path handling in ClassPathXmlApplicationContext  Windows vs Unix [SPR-2710]","**[Allan Lang](https://jira.spring.io/secure/ViewProfile.jspa?name=allanlang)** opened **[SPR-2710](https://jira.spring.io/browse/SPR-2710?redirect=false)** and commented  When specifying imported XML config resources in an XML config file, the handling paths specified in the resource attribute of the \ element is inconsistent between Unix and Windows platforms.  For example, the following is valid on Windows XP but does not work on Mac OS X:  \ ... \ ... \  The following works on both platforms:  \ ... \ ... \   ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-10-12T21:07:42Z","2019-01-12T16:40:44Z"
"","7301","Public final methods in AbstractMessageListenerContainer [SPR-2612]","**[Alin Dreghiciu](https://jira.spring.io/secure/ViewProfile.jspa?name=adreghiciu)** opened **[SPR-2612](https://jira.spring.io/browse/SPR-2612?redirect=false)** and commented  AbstractMessageListenerContainer class has only two publc methods declared as final: isActive() and isRunning(). In a runtime usage I can not find now any use care where you would like to override this so, there is nothing wrong about. The hard part starts when you would like to start doing unit tests that checks that the classes that uses DefaultMessageListenerContainer (or the 102) have the correct behavior. Concrete, by mocking the DefaultMessageListenerContainer102 with EasyMock class extension (since there is no interface) the two methods cannot be mocked so, the normal behaviour is executed. Starting with RC3 and the new syncronization implementation the syncronized(this.lifecycleMonitor) will fail the tests by throwing a NullPointerException. This happens due to the fact that easymock class extension will not call any constructor/initializing code so, the private final lifecycleMonitor will not be initialized to a new Object(). In order to avoid this kind of situations (Spring is promoting testability) can there be an interface exposing the public interface of the MessageListenerContainer or at least remove the final modifier in order to have a proper mocking.    ---  **Affects:** 2.0 RC4  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-09-19T22:46:15Z","2012-06-19T09:37:32Z"
"","7031","Add Hibernate Schema [SPR-2342]","**[Alin Dreghiciu](https://jira.spring.io/secure/ViewProfile.jspa?name=adreghiciu)** opened **[SPR-2342](https://jira.spring.io/browse/SPR-2342?redirect=false)** and commented  Is there any intent to create a hibernate schema support to be used in 2.0 XML Schema-based configuration style? Will it speed up the process to contribute in this area ?   --- No further details from [SPR-2342](https://jira.spring.io/browse/SPR-2342?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-07-25T02:04:26Z","2012-06-19T09:37:28Z"
"","7024","PropertiesGetterFactoryBean [SPR-2335]","**[Alin Dreghiciu](https://jira.spring.io/secure/ViewProfile.jspa?name=adreghiciu)** opened **[SPR-2335](https://jira.spring.io/browse/SPR-2335?redirect=false)** and commented  It is sometimes usefull to get a property from a java.util.Properties and you can not use the PropertyPlaceholderConfigurer. Such a situation can happen for example when a direct or indirect reference will come from a PropertyPlaceholderConfigurer/PropertyOverrideConfigurer. In that case the only solution )I see and found also on the forums) is to create a child context. An example of this situation can be sean at http://forum.springframework.org/showthread.php?t=15583. To be able to handle such a situation in one context and still be able to read the database setting from a properties file the values can be read from the properties by using MethodInvokingFactoryBean. The problem is that the configuration is too verbose for just retriving one value and that the class is to ""heavy"" fro this purpose.  So, my sugestion is to have a FactoryBean that can be used in the same manner as FieldRetrievingFactoryBean and using the name to specify the property object and static key. e.g.:  \  In that case the value can be refered with something like ref=""myProperties[myKey]""  I already have such a factory bean + JUnit and I can donate it.   ---  **Attachments:** - [PropertiesGetterFactoryBean.java](https://jira.spring.io/secure/attachment/11834/PropertiesGetterFactoryBean.java) (_8.59 kB_) - [PropertiesGetterFactoryBeanTests.java](https://jira.spring.io/secure/attachment/11835/PropertiesGetterFactoryBeanTests.java) (_8.07 kB_)","closed","type: enhancement,","spring-projects-issues","2006-07-23T23:26:22Z","2012-06-19T09:37:38Z"
"","7745","AbstractMessageListenerContainer.refreshSharedConnection [SPR-3059]","**[Alfons Spiegelhauer](https://jira.spring.io/secure/ViewProfile.jspa?name=spiegelhauer)** opened **[SPR-3059](https://jira.spring.io/browse/SPR-3059?redirect=false)** and commented  Method    AbstractMessageListenerContainer.refreshSharedConnection  After line ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), running);  this.sharedConnection should be set to null. After the call to ConnectionFactoryUtils.releaseConnection the connection is logically closed      protected final void refreshSharedConnection() throws JMSException {     	boolean running = isRunning();     	synchronized (this.sharedConnectionMonitor) {     		ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), running);  > this.sharedConnection = null;      		Connection con = createConnection();     		try {     			prepareSharedConnection(con);     		}     		catch (JMSException ex) {     			JmsUtils.closeConnection(con);     			throw ex;     		}     		this.sharedConnection = con;     	}     }    ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-01-20T07:05:02Z","2012-06-19T03:51:14Z"
"","7735","AbstractFactoryBean should support strongly-typed collection (Java5+ only) [SPR-3049]","**[Alfons Spiegelhauer](https://jira.spring.io/secure/ViewProfile.jspa?name=spiegelhauer)** opened **[SPR-3049](https://jira.spring.io/browse/SPR-3049?redirect=false)** and commented  The collection classes derived from AbstractFactoryBean  must support generic types. Otherwise the result will be incorrect.  Sample:  public class NamedUrlMap extends HashMap { }  application-context:  \ \   After bean creation the type of the value elements is String and not URL   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-01-18T04:52:56Z","2012-06-19T03:51:06Z"
"","7223","EJBException is raised when calling setRollbackOnly in CMT [SPR-2534]","**[Alexander Schulz](https://jira.spring.io/secure/ViewProfile.jspa?name=a_schulle)** opened **[SPR-2534](https://jira.spring.io/browse/SPR-2534?redirect=false)** and commented  Calling TransactionAspectSupport.currentTransactionStatus( ).setRollbackOnly() result in an EJBException on transaction end. The client receives this Exception instead of receiving the normal return object. It seems like Spring is using UserTransaction to set rollback, but this is prohibited in CMT by EJB 2.1 specification. Using pure CMT with ejbContext.setRollbackOnly is working correctly.  My bean configuration looks like this \\ \ \ \ \ \ \PROPAGATION_REQUIRED,timeout_500\ \ \ \ \ \ \java:comp/env/ejb/BestandsBerechnerSLocal\ \ \ \de.solutionary.bps.session.bestandsfuehrung .BestandsBerechnerSBI\ \ \  Here is the stacktrace:  2006-09-04 10:50:06,894 ERROR (VorgangDetail.java:789) # Exception: javax.ejb.EJBException: An exception occurred during transaction completion: ; nested exception is: javax.transaction.RollbackException javax.transaction.RollbackException at com.evermind.server.ApplicationServerTransaction.c heckForRollbackOnlyWhileInCommit(ApplicationServer Transaction.java:537) at com.evermind.server.ApplicationServerTransaction.d oCommit(ApplicationServerTransaction.java:240) at com.evermind.server.ApplicationServerTransaction.c ommit(ApplicationServerTransaction.java:126) at com.evermind.server.ApplicationServerTransactionMa nager.commit(ApplicationServerTransactionManager.j ava:433) at com.evermind.server.ApplicationServer$2.commit(App licationServer.java:4540) at com.evermind.server.ejb.EJBTransactionManager.end( EJBTransactionManager.java:136) at com.evermind.server.ejb.interceptor.system.TxRequi redInterceptor.invoke(TxRequiredInterceptor.java:6 3) at com.evermind.server.ejb.interceptor.InvocationCont extImpl.proceed(InvocationContextImpl.java:69) at com.evermind.server.ejb.interceptor.system.DMSInte rceptor.invoke(DMSInterceptor.java:52) at com.evermind.server.ejb.interceptor.InvocationCont extImpl.proceed(InvocationContextImpl.java:69) at com.evermind.server.ejb.StatelessSessionEJBObject. OC4J_invokeMethod(StatelessSessionEJBObject.java:8 6) at VorgangsEditorSLocal_StatelessSessionBeanWrapper0. addAbrechnungsVorgang(VorgangsEditorSLocal_Statele ssSessionBeanWrapper0.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.ejb.access.LocalSlsbInvokerInt erceptor.invoke(LocalSlsbInvokerInterceptor.java:7 1) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :170) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(JdkDynamicAopProxy.java:176) at $Proxy36.addAbrechnungsVorgang(Unknown Source) at de.mummert.abrechnung.web.abrechnung.VorgangDetail .speichern(VorgangDetail.java:741) at de.mummert.abrechnung.web.abrechnung.VorgangDetail .reactOnSpeichern(VorgangDetail.java:477) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.gasx.casabac.control.GXDialogElement.invokeAct ionMethod(GXDialogElement.java:188) at com.gasx.casabac.control.GXButton.onButton(GXButto n.java:111) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.softwareag.cis.server.InteractionModel.invokeM ethodInternally(Unknown Source) at com.softwareag.cis.server.InteractionModel.invokeM ethod(Unknown Source) at com.softwareag.cis.server.XMLProcessor.processXML( Unknown Source) at com.softwareag.cis.server.Connector.doPost(Unknown Source) at javax.servlet.http.HttpServlet.service(HttpServlet .java:763) at javax.servlet.http.HttpServlet.service(HttpServlet .java:856) at com.evermind.server.http.ServletRequestDispatcher. invoke(ServletRequestDispatcher.java:719) at com.evermind.server.http.ServletRequestDispatcher. forwardInternal(ServletRequestDispatcher.java:376) at com.evermind.server.http.HttpRequestHandler.doProc essRequest(HttpRequestHandler.java:870) at com.evermind.server.http.HttpRequestHandler.proces sRequest(HttpRequestHandler.java:451) at com.evermind.server.http.HttpRequestHandler.serveO neRequest(HttpRequestHandler.java:218) at com.evermind.server.http.HttpRequestHandler.run(Ht tpRequestHandler.java:119) at com.evermind.server.http.HttpRequestHandler.run(Ht tpRequestHandler.java:112) at oracle.oc4j.network.ServerSocketReadHandler$SafeRu nnable.run(ServerSocketReadHandler.java:260) at com.evermind.util.ReleasableResourcePooledExecutor $MyWorker.run(ReleasableResourcePooledExecutor.jav a:303) at java.lang.Thread.run(Thread.java:595) javax.ejb.EJBException: An exception occurred during transaction completion: ; nested exception is: javax.transaction.RollbackException at com.evermind.server.ejb.EJBUtils.createEJBExceptio n(EJBUtils.java:352) at com.evermind.server.ejb.EJBTransactionManager.end( EJBTransactionManager.java:143) at com.evermind.server.ejb.interceptor.system.TxRequi redInterceptor.invoke(TxRequiredInterceptor.java:6 3) at com.evermind.server.ejb.interceptor.InvocationCont extImpl.proceed(InvocationContextImpl.java:69) at com.evermind.server.ejb.interceptor.system.DMSInte rceptor.invoke(DMSInterceptor.java:52) at com.evermind.server.ejb.interceptor.InvocationCont extImpl.proceed(InvocationContextImpl.java:69) at com.evermind.server.ejb.StatelessSessionEJBObject. OC4J_invokeMethod(StatelessSessionEJBObject.java:8 6) at VorgangsEditorSLocal_StatelessSessionBeanWrapper0. addAbrechnungsVorgang(VorgangsEditorSLocal_Statele ssSessionBeanWrapper0.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.ejb.access.LocalSlsbInvokerInt erceptor.invoke(LocalSlsbInvokerInterceptor.java:7 1) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :170) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(JdkDynamicAopProxy.java:176) at $Proxy36.addAbrechnungsVorgang(Unknown Source) at de.mummert.abrechnung.web.abrechnung.VorgangDetail .speichern(VorgangDetail.java:741) at de.mummert.abrechnung.web.abrechnung.VorgangDetail .reactOnSpeichern(VorgangDetail.java:477) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.gasx.casabac.control.GXDialogElement.invokeAct ionMethod(GXDialogElement.java:188) at com.gasx.casabac.control.GXButton.onButton(GXButto n.java:111) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.softwareag.cis.server.InteractionModel.invokeM ethodInternally(Unknown Source) at com.softwareag.cis.server.InteractionModel.invokeM ethod(Unknown Source) at com.softwareag.cis.server.XMLProcessor.processXML( Unknown Source) at com.softwareag.cis.server.Connector.doPost(Unknown Source) at javax.servlet.http.HttpServlet.service(HttpServlet .java:763) at javax.servlet.http.HttpServlet.service(HttpServlet .java:856) at com.evermind.server.http.ServletRequestDispatcher. invoke(ServletRequestDispatcher.java:719) at com.evermind.server.http.ServletRequestDispatcher. forwardInternal(ServletRequestDispatcher.java:376) at com.evermind.server.http.HttpRequestHandler.doProc essRequest(HttpRequestHandler.java:870) at com.evermind.server.http.HttpRequestHandler.proces sRequest(HttpRequestHandler.java:451) at com.evermind.server.http.HttpRequestHandler.serveO neRequest(HttpRequestHandler.java:218) at com.evermind.server.http.HttpRequestHandler.run(Ht tpRequestHandler.java:119) at com.evermind.server.http.HttpRequestHandler.run(Ht tpRequestHandler.java:112) at oracle.oc4j.network.ServerSocketReadHandler$SafeRu nnable.run(ServerSocketReadHandler.java:260) at com.evermind.util.ReleasableResourcePooledExecutor $MyWorker.run(ReleasableResourcePooledExecutor.jav a:303) at java.lang.Thread.run(Thread.java:595) Caused by: javax.transaction.RollbackException at com.evermind.server.ApplicationServerTransaction.c heckForRollbackOnlyWhileInCommit(ApplicationServer Transaction.java:537) at com.evermind.server.ApplicationServerTransaction.d oCommit(ApplicationServerTransaction.java:240) at com.evermind.server.ApplicationServerTransaction.c ommit(ApplicationServerTransaction.java:126) at com.evermind.server.ApplicationServerTransactionMa nager.commit(ApplicationServerTransactionManager.j ava:433) at com.evermind.server.ApplicationServer$2.commit(App licationServer.java:4540) at com.evermind.server.ejb.EJBTransactionManager.end( EJBTransactionManager.java:136) ... 42 more  If I'm calling ejbContext.getUserTransaction().setRollbackOnly() in a pure CMT environment without Spring the following Exception is raised: 2006-09-05 10:52:24,031 FATAL (VorgangsEditorSImpl.java:2599) # java.lang.IllegalStateException: Only beans with user-managed transactions can invoke getUserTransaction() at com.evermind.server.ejb.AbstractEJBContext.getUser Transaction(AbstractEJBContext.java:262) at de.solutionary.bps.session.tankfarm.VorgangsEditor SImpl.addAbrechnungsVorgang(VorgangsEditorSImpl.ja va:2591) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.aop.support.AopUtils.invokeJoi npointUsingReflection(AopUtils.java:287) at org.springframework.aop.framework.ReflectiveMethod Invocation.invokeJoinpoint(ReflectiveMethodInvocat ion.java:181) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :148) at org.springframework.transaction.interceptor.Transa ctionInterceptor.invoke(TransactionInterceptor.jav a:96) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :170) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(JdkDynamicAopProxy.java:176) at $Proxy36.addAbrechnungsVorgang(Unknown Source) at de.solutionary.bps.session.tankfarm.VorgangsEditor SBean.addAbrechnungsVorgang(VorgangsEditorSBean.ja va:654) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.evermind.server.ejb.interceptor.joinpoint.EJBJ oinPointImpl.invoke(EJBJoinPointImpl.java:35) at com.evermind.server.ejb.interceptor.InvocationCont extImpl.proceed(InvocationContextImpl.java:69) at com.evermind.server.ejb.interceptor.system.DMSInte rceptor.invoke(DMSInterceptor.java:52) at com.evermind.server.ejb.interceptor.InvocationCont extImpl.proceed(InvocationContextImpl.java:69) at com.evermind.server.ejb.interceptor.system.TxRequi redInterceptor.invoke(TxRequiredInterceptor.java:5 5) at com.evermind.server.ejb.interceptor.InvocationCont extImpl.proceed(InvocationContextImpl.java:69) at com.evermind.server.ejb.interceptor.system.DMSInte rceptor.invoke(DMSInterceptor.java:52) at com.evermind.server.ejb.interceptor.InvocationCont extImpl.proceed(InvocationContextImpl.java:69) at com.evermind.server.ejb.StatelessSessionEJBObject. OC4J_invokeMethod(StatelessSessionEJBObject.java:8 6) at VorgangsEditorSLocal_StatelessSessionBeanWrapper0. addAbrechnungsVorgang(VorgangsEditorSLocal_Statele ssSessionBeanWrapper0.java:141) at de.mummert.abrechnung.web.abrechnung.VorgangDetail .speichern(VorgangDetail.java:747) at de.mummert.abrechnung.web.abrechnung.VorgangDetail .reactOnSpeichern(VorgangDetail.java:482) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.gasx.casabac.control.GXDialogElement.invokeAct ionMethod(GXDialogElement.java:188) at com.gasx.casabac.control.GXButton.onButton(GXButto n.java:111) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.softwareag.cis.server.InteractionModel.invokeM ethodInternally(Unknown Source) at com.softwareag.cis.server.InteractionModel.invokeM ethod(Unknown Source) at com.softwareag.cis.server.XMLProcessor.processXML( Unknown Source) at com.softwareag.cis.server.Connector.doPost(Unknown Source) at javax.servlet.http.HttpServlet.service(HttpServlet .java:763) at javax.servlet.http.HttpServlet.service(HttpServlet .java:856) at com.evermind.server.http.ServletRequestDispatcher. invoke(ServletRequestDispatcher.java:719) at com.evermind.server.http.ServletRequestDispatcher. forwardInternal(ServletRequestDispatcher.java:376) at com.evermind.server.http.HttpRequestHandler.doProc essRequest(HttpRequestHandler.java:870) at com.evermind.server.http.HttpRequestHandler.proces sRequest(HttpRequestHandler.java:451) at com.evermind.server.http.HttpRequestHandler.serveO neRequest(HttpRequestHandler.java:218) at com.evermind.server.http.HttpRequestHandler.run(Ht tpRequestHandler.java:119) at com.evermind.server.http.HttpRequestHandler.run(Ht tpRequestHandler.java:112) at oracle.oc4j.network.ServerSocketReadHandler$SafeRu nnable.run(ServerSocketReadHandler.java:260) at com.evermind.util.ReleasableResourcePooledExecutor $MyWorker.run(ReleasableResourcePooledExecutor.jav a:303) at java.lang.Thread.run(Thread.java:595)   ---  **Affects:** 1.2.8","closed","type: enhancement,","spring-projects-issues","2006-09-05T00:32:18Z","2006-12-31T07:22:46Z"
"","7615","Inner beans definitions not decorating by namespase handlers [SPR-2929]","**[Alexander Gavrilov](https://jira.spring.io/secure/ViewProfile.jspa?name=lucker)** opened **[SPR-2929](https://jira.spring.io/browse/SPR-2929?redirect=false)** and commented  I'm implemented my own namespase handler for decorating beans definition wia additional Meta attributes, whith are used in custom BeanFactoryPostprocessor for implementing custom logic. I'm declared custom attribue in the nameshema. When i use this attribue in top-level bean definition like \ all perfomed fine, and my handler invoked. But when i'm trying to use my custom attribute in inner bean definition, like \ \ \ \ \ my hadler is not invoking. I'm fixed this by refactored inner beans to toplevel beans and reffering it in property definition, but i think that inner beans definitions should been decorated to.    ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-12-08T00:49:09Z","2012-06-19T03:50:36Z"
"","7233","NamedParameterUtils does not perform correctly with SQL statemets containing bitwise AND operators (&) [SPR-2544]","**[Alexander Gavrilov](https://jira.spring.io/secure/ViewProfile.jspa?name=lucker)** opened **[SPR-2544](https://jira.spring.io/browse/SPR-2544?redirect=false)** and commented  NamedParameterUtils.parseSqlStatement and NamedParameterUtils.substituteNamedParameters incorrectly parses SQL statemets with bitwise AND operators (&).  Following test cases demonstrated this  package org.springframework.jdbc.core.namedparam; public class NamedParameterUtilsTests { public void testParseSqlStatementWithLogicalAnd() { final String sql = ""xxx & yyyy""; final ParsedSql psql = NamedParameterUtils.parseSqlStatement(sql); assertEquals(sql, psql.getNewSql()); }      public void testSubstituteNamedParametersWithLogicalAnd() throws Exception {     	final String sql = ""xxx & yyyy"";     	final String newSql = NamedParameterUtils.substituteNamedParameters(sql, new MapSqlParameterSource());     	assertEquals(sql, newSql);     }  }  There are suggested changes  RCS file: /cvsroot/springframework/spring/src/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java,v retrieving revision 1.4 diff -r1.4 NamedParameterUtils.java 156a157,158  > } else { > newSql.append(statement[i]);  239a242,243  > } else { > newSql.append(statement[i]);    ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-09-05T23:34:44Z","2012-06-19T03:50:22Z"
"","7812","AopUtils.invokeJoinPointUsingReflection should support matching method on different object [SPR-3126]","**[Alexander Boccaletti Marques Picoli](https://jira.spring.io/secure/ViewProfile.jspa?name=abmpicoli@uol.com.br)** opened **[SPR-3126](https://jira.spring.io/browse/SPR-3126?redirect=false)** and commented  Symptoms:  The following exception:  org.springframework.aop.AopInvocationException: AOP configuration seems to be invalid: tried calling method [public final java.lang.String $Proxy5.execute() throws java.lang.Exception] on target [ssda.action.ActionPesquisarMig@1cc5af0]; nested exception is java.lang.IllegalArgumentException: object is not an instance of declaring class  Caused by: java.lang.IllegalArgumentException: object is not an instance of declaring class  is thrown when I call AopUtils.invokeJoinPointUsingReflection(Object target, Method method, Object[] args)  ===SOLUTION===  The problem is that the ""method"" parameter, in my situation, is binded to a different class than the object.  The solution that I've found so far should be the changing of invokeJoinPointUsingReflection method inside org.springframework.aop.support.AopUtils  ===ORIGINAL CODE=== try { if (!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) { method.setAccessible(true); } return method.invoke(target, args); }  ===CHANGED CODE=== try{ Method objectMethod = target.getClass().getMethod(method.getName(), method.getParameterTypes()); if (!Modifier.isPublic(objectMethod.getModifiers()) || !Modifier.isPublic(objectMethod.getDeclaringClass().getModifiers())) { objectMethod.setAccessible(true); } return objectMethod.invoke(target, args); }   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-06T07:37:26Z","2012-06-18T12:45:18Z"
"","7159","Incorrect link in documentation and web page [SPR-2470]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-2470](https://jira.spring.io/browse/SPR-2470?redirect=false)** and commented  I'm sorry to report here but I could not find a better place. The documentation at page http://www.springframework.org/documentation has a link to taglib here: http://static.springframework.org/spring/docs/2.0.x/taglib/index.html But the link does not work. The same link is proposed inside the documentation.   ---  **Affects:** 2.0 RC3","closed","type: task,","spring-projects-issues","2006-08-23T19:47:08Z","2012-06-19T03:50:39Z"
"","7108","Please provide HibernateTemplate.setFirstResult() method [SPR-2419]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-2419](https://jira.spring.io/browse/SPR-2419?redirect=false)** and commented  Hello, it would be nice to have a setFirstResult() method along with the already existing setMaxResults().  If there are not strange implications I suppose the right way to add it is: - add the corresponding property and setter/getter to the class HibernateTemplate - modify the prepareQuery() method adding the following lines:   if (getFirstResult() > 0) {   queryObject.setFirstResult(getFirstResult());   }  That simple addition would permit handling paginated results without the need of using HibernateCallbacks.  Thanks! Alex  P.S.: I'm unsure which component that issues belongs to, please forgive me if I choosed the wrong one.   ---  **Affects:** 2.0 RC3  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-08-12T02:10:30Z","2008-07-12T00:47:29Z"
"","7083","form:form create an invalid action if no ""action"" attribute specified [SPR-2394]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-2394](https://jira.spring.io/browse/SPR-2394?redirect=false)** and commented  I tried to use the showcases examples to understand how spring works, and I had problems on form submission (examples did not work).  So I made a custom mini-example to understand the problem and I verified that the form:form tag produces a default wrong action if that attribute is not specified. For example:  is translated to:  \ while it should be: \ or at least: \ (i.e.: the name of the view)  I'm a newbye and maybe I've overlooked something, but I can't understand what.  Thanks, Alex   ---  **Affects:** 2.0 RC2","closed","in: web,","spring-projects-issues","2006-08-08T21:38:51Z","2019-01-11T18:36:40Z"
"","6983","Incorrect string parsing of mapped property names [SPR-2294]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=alza)** opened **[SPR-2294](https://jira.spring.io/browse/SPR-2294?redirect=false)** and commented  I have a class 'MyBean' with a property 'myMap' of type java.util.Map. Spring allows me to configure an instance of this class as follows, using mapped properties:  \ \ \  This works fine.  However, I have an application where the map keys need to be mapped property names, e.g ""foo.bar[0]"". i.e. the map entry key itself contains the ""["" and ""]"" character:  \ \ \  When I call toString() on the myMap property after Spring has instantiated the bean, this is the result:  {foo.bar[0=a}  As you can see, the key for this map entry is missing the closing ""]"" character.  There appears to be a bug in the string parsing of the mapped property name?  ---  **Affects:** 1.2.8  **Issue Links:** - #5976 Handle nested brackets in a map keys (_**""duplicates""**_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-07-12T22:54:36Z","2019-01-12T16:52:08Z"
"","7813","InputTag prints the readonly attribute in the HTML regardless of the attribute's value. [SPR-3127]","**[Alex Wood](https://jira.spring.io/secure/ViewProfile.jspa?name=tawood3)** opened **[SPR-3127](https://jira.spring.io/browse/SPR-3127?redirect=false)** and commented  The InputTag class simply echoes whatever is placed in the readonly attribute.  However, some browsers (I'm using Firefox 1.5) will make an input field read only if the attribute is present at all.  For example, '\' will still make the field read only.  Right now, the InputTag accepts EL expressions for the readonly attribute.  It would be nice if the expression evaluated to true, then the tag would print ""readonly='readonly'"" and would print nothing if the expression evaluated to false.  The disabled attribute also falls under this same circumstance.   ---  **Affects:** 2.0 final  **Attachments:** - [AbstractHtmlInputElementTag.java](https://jira.spring.io/secure/attachment/12411/AbstractHtmlInputElementTag.java) (_5.35 kB_) - [InputTag.java](https://jira.spring.io/secure/attachment/12415/InputTag.java) (_4.47 kB_) - [spring-form.tld](https://jira.spring.io/secure/attachment/12412/spring-form.tld) (_51.02 kB_)","closed","type: enhancement,","spring-projects-issues","2007-02-06T09:32:57Z","2012-06-19T03:50:52Z"
"","7637","ReloadableResourceBundleMessageSource.calculateFilenamesForLocale() is silent about basename values ending with newlines [SPR-2951]","**[Alex Wood](https://jira.spring.io/secure/ViewProfile.jspa?name=tawood3)** opened **[SPR-2951](https://jira.spring.io/browse/SPR-2951?redirect=false)** and commented  Basenames provided for the ReloadableResourceBundleMessageSource will include a newline if the XML is formatted differently from the standard Spring style.  \ \ \ /WEB-INF/StringResource \ \ \  The above snippet will result in the basename of ""/WEB-INF/StringResource\n"" and so when calculateFilenamesForLocale() runs it generates filenames with newlines in the middle of the name: ""/WEB-INF/StringResource\n_en"" which won't be found.  It would be nice to have a log.warn() statement if the basename ends with a newline.  I can't fathom that anyone would want to use filenames that end with newlines, but if they did then they could just ignore the warning.   ---  **Affects:** 2.0 final","closed","type: enhancement,","spring-projects-issues","2006-12-14T06:17:37Z","2012-06-19T09:37:37Z"
"","7064","Pooling target source should not need to implement DisposableBean interface to be able to clean up [SPR-2375]","**[Alex Wei](https://jira.spring.io/secure/ViewProfile.jspa?name=ozgwei)** opened **[SPR-2375](https://jira.spring.io/browse/SPR-2375?redirect=false)** and commented  When using CommonsPoolTargetSource to pool objects that needs clean-up, the pooling target source must implement DisposableBean interface so that CommonsPoolTargetSource can call the destroy() method in destroyObject() method to do the clean-up.  This couples the pool target source to Spring API.  A better solution is being able to specify the destroy-method of a pooling target source.  Since pooling target source is normally prototype, destroy-method attribute is not available in bean definition.  Prototype destroy-method only makes sense for pooling. Therefore, I propose to add a targetDestroyMethod property to AbstractPoolingTargetSource, which should provide a destroyPrototypeInstance(Object) method.    ---  **Affects:** 1.2.8, 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-08-01T16:06:31Z","2012-06-19T09:37:38Z"
"","7600","Doc warning: Extended EntityManagers are not intended to be used concurrently [SPR-2914]","**[Alex Savitsky](https://jira.spring.io/secure/ViewProfile.jspa?name=asavitsky)** opened **[SPR-2914](https://jira.spring.io/browse/SPR-2914?redirect=false)** and commented  Several concurrent threads executing JPA queries result in ""Transaction already active"" exception.   ---  **Affects:** 2.0.1  **Attachments:** - [ExtendedEntityManagerCreator.java](https://jira.spring.io/secure/attachment/12273/ExtendedEntityManagerCreator.java) (_13.82 kB_) - [Test.zip](https://jira.spring.io/secure/attachment/12263/Test.zip) (_7.34 kB_)","closed","type: enhancement,","spring-projects-issues","2006-12-05T05:06:12Z","2012-06-19T03:50:59Z"
"","7582","Extended EntityManager commit exception swallowed by Spring transaction management [SPR-2894]","**[Alex Savitsky](https://jira.spring.io/secure/ViewProfile.jspa?name=asavitsky)** opened **[SPR-2894](https://jira.spring.io/browse/SPR-2894?redirect=false)** and commented  When a DML operation fails a constraint (in my case, it was a UNIQUE constraint), the exception that gets thrown is swallowed by the Spring layer, without being passed to the client (it gets reported as an error condition in the logs though)   ---  **Affects:** 2.0.1  **Attachments:** - [Test.zip](https://jira.spring.io/secure/attachment/12250/Test.zip) (_6.41 kB_)","closed","type: bug,","spring-projects-issues","2006-11-29T04:02:27Z","2019-01-11T21:39:33Z"
"","7119","EL Exception when integrating JSF beans with Spring beans using MyFaces [SPR-2430]","**[Alex Savitsky](https://jira.spring.io/secure/ViewProfile.jspa?name=asavitsky)** opened **[SPR-2430](https://jira.spring.io/browse/SPR-2430?redirect=false)** and commented  This bug happens when trying to inject a Spring bean into a JSF one, like this:           	regionList     	     		com.tdsecurities.app.view.RegionListBackingBean     	     	request     	     		persistenceService     		${persistenceService}     	       In DelegatingVariableResolver.resolveVariable(), it first delegates to the original resolver (in my case, it's Apache MyFaces 1.1.3):      Object originalResult = getOriginalVariableResolver().resolveVariable(facesContext, name);     if (originalResult != null) {          return originalResult;     }  However, since the JSF bean definition being passed to the MyFaces resolver is not a ""normal"" one, but contains a reference to a Spring bean, the MyFaces resolver throws an exception, claiming it cannot convert a String into the bean's property type:  javax.servlet.jsp.el.ELException: Attempt to convert String ""${persistenceService}"" to type ""com.tdsecurities.common.persistence.IPersistenceService"", but there is no PropertyEditor for that type at org.apache.commons.el.Logger.logError(Logger.java:481) at org.apache.commons.el.Logger.logError(Logger.java:498) at org.apache.commons.el.Logger.logError(Logger.java:566) at org.apache.commons.el.Coercions.coerceToObject(Coercions.java:769) at org.apache.commons.el.Coercions.coerce(Coercions.java:343) at org.apache.myfaces.shared_impl.util.ClassUtils.convertToType(ClassUtils.java:301) at org.apache.myfaces.config.ManagedBeanBuilder.initializeProperties(ManagedBeanBuilder.java:189) at org.apache.myfaces.config.ManagedBeanBuilder.buildManagedBean(ManagedBeanBuilder.java:56) at org.apache.myfaces.el.VariableResolverImpl.resolveVariable(VariableResolverImpl.java:311) ... etc.  Now, I'm not sure whether it's a MyFaces problem or not (the exception is legitimate, however, I'm not sure whether the spec allows exceptions in this case or not) - but in any case, wouldn't it be helpful to build some additional safeguards for such a case in DelegatingVariableResolver.resolveVariable() ?   ---  **Affects:** 1.2.8, 2.0 RC2","closed","in: web,","spring-projects-issues","2006-08-15T07:42:54Z","2019-01-11T19:32:42Z"
"","7337","BridgeMethodResolver - IllegalStateException [SPR-2648]","**[Alex Mathey](https://jira.spring.io/secure/ViewProfile.jspa?name=mathey)** opened **[SPR-2648](https://jira.spring.io/browse/SPR-2648?redirect=false)** and commented  The #7143 issue has been marked as resolved, but unfortunately, it's not. I have found a new situation where the bug described there occurs again. Please see the last comments of that issue for details.  Greetings, Alex  ---  **Affects:** 2.0 RC4","closed","in: core,","spring-projects-issues","2006-09-28T01:25:31Z","2019-01-11T21:18:24Z"
"","7143","isBridgeMethodFor method in BridgeMethodResolver class throws ClassCastException if bridge method has a parameter of type ParameterizedType [SPR-2454]","**[Alex Mathey](https://jira.spring.io/secure/ViewProfile.jspa?name=mathey)** opened **[SPR-2454](https://jira.spring.io/browse/SPR-2454?redirect=false)** and commented  If the isBridgeMethodFor method in the BridgeMethodResolver class is called with a bridge method which has a parameter of type java.lang.reflect.ParameterizedType (for example Class\), a ClassCastException is thrown.  This issue is due to the fact that in the isBridgeMethodFor method calls the private isResolvedTypeMatch method. In this method, the generic parameter types are extracted from the generic method (i.e. from the generic declaration whose erased signature matches that of the supplied bridge method). Then, each generic parameter is either cast to a java.lang.reflect.TypeVariable if it is an instance of TypeVariable, and then resolved using a type variable map and cast to java.lang.Class, or, if it is not an instance of TypeVariable, it is cast immediately to java.lang.Class. However, if a generic parameter is an instance of java.lang.reflect.ParameterizedType, the isResolvedTypeMatch method tries to cast this parameter immediately to java.lang.Class (since it is not an instance of TypeVariable), which results in a ClassCastException, since the type of this generic parameter (which is for example sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl, an implementation of the ParameterizedType interface) is cast to java.lang.Class.  The following example demostrates this. If we have the following bridge method: Class\ getFor(Class\), whose parameter is of type ParameterizedTypeImpl, a ClassCastException is thrown, since the isResolvedTypeMatch method tries to cast ParameterizedTypeImpl to java.lang.Class.  The solution would be to treat the case if a generic type parameter is of type ParameterizedType separately in the isResolvedTypeMatch method of the BridgeMethodResolver class.   ---  **Affects:** 2.0 RC3  **Attachments:** - [AnnotationUtils_patch_2006_09_01.txt](https://jira.spring.io/secure/attachment/11926/AnnotationUtils_patch_2006_09_01.txt) (_1.55 kB_) - [BridgeMethodResolver_patch_2006_08_30.txt](https://jira.spring.io/secure/attachment/11917/BridgeMethodResolver_patch_2006_08_30.txt) (_11.38 kB_) - [BridgeMethodResolver_patch_2006_08_31.txt](https://jira.spring.io/secure/attachment/11920/BridgeMethodResolver_patch_2006_08_31.txt) (_969 bytes_) - [BridgeMethodResolverClassCastTests.java](https://jira.spring.io/secure/attachment/11966/BridgeMethodResolverClassCastTests.java) (_2.55 kB_) - [classes.zip](https://jira.spring.io/secure/attachment/11961/classes.zip) (_13.45 kB_) - [classes20060928.zip](https://jira.spring.io/secure/attachment/11999/classes20060928.zip) (_9.73 kB_) - [hibernateDatabase.xml](https://jira.spring.io/secure/attachment/11956/hibernateDatabase.xml) (_4.35 kB_) - [keyword-core-repository-hibernate-config.xml](https://jira.spring.io/secure/attachment/11955/keyword-core-repository-hibernate-config.xml) (_1.49 kB_) - [transactionJava5Annotations.xml](https://jira.spring.io/secure/attachment/11957/transactionJava5Annotations.xml) (_2.20 kB_)  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2006-08-21T20:17:10Z","2019-01-13T22:46:36Z"
"","7578","MethodInvokingJobDetailFactoryBean is compiled using quartz 1.6 only constructor for JobExecutionException [SPR-2890]","**[Alex Burgel](https://jira.spring.io/secure/ViewProfile.jspa?name=aburgel)** opened **[SPR-2890](https://jira.spring.io/browse/SPR-2890?redirect=false)** and commented  i'm getting this exception when using spring 2.0.1 and quartz 1.5.2  Exception in thread ""pool-1-thread-1"" java.lang.NoSuchMethodError: org.quartz.JobExecutionException.\(Ljava/lang/String;Ljava/lang/Throwable;Z)V at org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean$MethodInvokingJob.executeInternal(MethodInvokingJobDetailFactoryBean.java:221) at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79) at org.quartz.core.JobRunShell.run(JobRunShell.java:203) at com.dailycandy.security.DelegatingAuthenticatedTaskExecutor$1.run(DelegatingAuthenticatedTaskExecutor.java:29) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595)  my quartz job is throwing an exception, which is supposed to get wrapped in a JobExecutionException.  the constructor signature for JobExecutionException changed in 1.6 from taking an Exception to taking a Throwable. i think, despite the fact that MethodInvokingJobDetailFactoryBean calls it with an Exception object, spring 2.0.1 was compiled with quartz 1.6, so it is looking for a method that takes a Throwable, not an Exception. this causes the NoSuchMethodError.   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2006-11-28T07:06:07Z","2012-06-19T03:50:32Z"
"","7363","Implementations of AbstractPropertyBindingResult do not preserve the custom property editors [SPR-2674]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-2674](https://jira.spring.io/browse/SPR-2674?redirect=false)** and commented  If a redirectToView is used after the request has been binded and validated, both BeanPropertyBindingResult and DirectFieldBindingResult do not carry over the underlying BeanWrapper and DirectFieldAccessor (due to them being transient and thus not being serialized in the implementations of the HTTP session which uses byte-array serialization mechanism), and as a result, loosing all the custom PropertyEditors which were assigned to the BindingResult during.  Not sure what the exact reason for declaring the BeanWrapper/DirectFieldAccessor transient is, but the most obvious fix is to make them non-transient, or explicitly hold a reference to the PropertyEditorRegistry in the *BindingResult implementations and then inject it into the newly recreated instances of BeanWrapper/DirectFieldAccessor.  ---  **Affects:** 2.0 final  **Issue Links:** - #7258 Serializable Bind exception bean wrapper is transient, therefore installed property editors are lost upon deserialization. (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2006-10-04T04:06:05Z","2019-01-11T21:16:12Z"
"","7327","DataBinder isAllowed/checkRequiredFields do not properly handle properties for maps [SPR-2638]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-2638](https://jira.spring.io/browse/SPR-2638?redirect=false)** and commented  If the fields on the JSP are submitted like ""models['search'].type"" and the getRequiredFields() in the DataBinder returns ""models[search].type""  the DataBinder does not treat them as equal, whereas BeanWrapper correctly processes the above and successfully maps ""models['search'].type"" to ""models[search].type"" using the name cannonization.  The same goes for the allowedFields handling.   ---  **Affects:** 2.0 RC4","closed","type: bug,","spring-projects-issues","2006-09-26T02:39:42Z","2012-06-19T03:50:42Z"
"","7074","AbstractPropertyAccessor ignoring NullValueInNestedPathException in setPropertyValue method when ignoreUnknown is set to true [SPR-2385]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-2385](https://jira.spring.io/browse/SPR-2385?redirect=false)** and commented  AbstractPropertyAccessor ignoring NullValueInNestedPathException in setPropertyValue method when ignoreUnknown is set to true  When trying to bind to a root object that is an instance of a map, the property name like  'models[user].firstName'  triggers a NullValueInNestedPathException if the key 'user' does not exist in the map. This condition is equivalent to a property name 'user.fullName' to be applied on an object User which does not have a property fullName, which in turn would throw a NonWritablePropertyException, and thus be caught if ignoreUnknown flag is set to true and prevent the stack to propagate further up, instead completing the binding.  The condition when a parameter like that could be submitted by the web form and yet not to belong to this form-backing object is easily created when using Spring Web Flow, which allows one form to be posted to multiple FormAction hanlers, each of them could contain its own section of the form (a component, so to call) which is bindied independantly.  i.e. \ \ \ \  Where the 'user' and 'address' keys are different objects in a map and are being processed by separate Action classes in SWF.  ---  5:34:51,419 ERROR [[springdispatcher]] Servlet.service() for servlet springdispatcher threw exception org.springframework.webflow.ActionExecutionException: Exception thrown executing [AnnotatedAction@48075 targetAction = ....main.action.TravelerInfoAction@5c80e8, attributes = map['method' -> 'bind']] in state 'travelerInformation' of flow 'bookingpath' -- action execution properties where 'map['method' -> 'bind']'; nested exception is org.springframework.beans.NullValueInNestedPathException: Invalid property 'models[user]' of bean class [....component.Form]: Value of nested property 'models[user]' is null Caused by: org.springframework.beans.NullValueInNestedPathException: Invalid property 'models[user]' of bean class [....component.Form]: Value of nested property 'models[user]' is null at org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:387) at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:362) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:568) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(AbstractPropertyAccessor.java:49) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:68) at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:478) at org.springframework.validation.DataBinder.doBind(DataBinder.java:393) at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:146) at org.springframework.validation.DataBinder.bind(DataBinder.java:378) at org.springframework.webflow.action.FormAction.doBind(FormAction.java:632) at ....actionhandlers.Action.doBind(Action.java:320) at org.springframework.webflow.action.FormAction.bind(FormAction.java:536) at ....actionhandlers.Action.bind(Action.java:62)  ---  **Affects:** 2.0 RC2","closed","type: enhancement,","spring-projects-issues","2006-08-04T08:18:19Z","2019-01-13T22:46:46Z"
"","7774","ControllerClassNameUrlHandlerMapping can't cope with multiple controller of the same type [SPR-3088]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3088](https://jira.spring.io/browse/SPR-3088?redirect=false)** and commented  ControllerClassNameUrlHandlerMapping throws an exception when multiple controllers of the same type are mapped. In principal this is correct, however, when combining multiple handler mappings, this is incorrect.  The client wants to be able to combine a ControllerClassNameUrlHandlerMapping with several UrlFileNameViewControllers (requiring a BeanNameUrlHandlerMapping for example).  Caused by: java.lang.IllegalStateException: Cannot map handler [/accessdenied.html] to URL path [/urlfilenameview*]: There is already handler [org.springframework.web.servlet.mvc.UrlFilenameViewController@198e8b4] mapped. at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:215) at org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping.registerController(ControllerClassNameHandlerMapping.java:128)    ---  **Affects:** 2.0 final, 2.0.1, 2.0.2","closed","type: bug,","spring-projects-issues","2007-01-29T08:10:17Z","2012-06-19T03:51:21Z"
"","7574","Child bean definitions do not inherit autowire attribute if parents specify it [SPR-2886]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-2886](https://jira.spring.io/browse/SPR-2886?redirect=false)** and commented  I've added a test (commented this time :) to XmlBeanFactoryTests (at the top) that shows the behavior related to child beans not inherited autowiring behavior from parent beans.  I guess this should be propagated to the child beans as well. overrides.xml contains beans needed for this test to fail. Those beans are **not** commented!                                    	       cheers, Alef   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-27T22:30:57Z","2007-07-17T09:33:13Z"
"","7565","AbstractDependencyInjectionSpringContextTests could use getApplicationContext [SPR-2878]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-2878](https://jira.spring.io/browse/SPR-2878?redirect=false)** and commented  I'm not sure if this would be possible (because of the keyed-ness of AppCtxs), but a getApplicationContext() method instead of just a protected field would be good. I keep on running into people that think this is strange (they are used to having getters and setters and now all of a sudden there's no getter for the context).    ---  **Affects:** 2.0 final, 2.0.1","closed","type: enhancement,","spring-projects-issues","2006-11-27T00:37:13Z","2012-06-19T03:50:59Z"
"","7561","JdbcTemplate does not throw IncorrectResultSetSizeDAE when expected for queryForObject [SPR-2874]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-2874](https://jira.spring.io/browse/SPR-2874?redirect=false)** and commented  the queryForObject(String,Class) method on the JdbcTemplate should throw an IncorrectResultSetSizeDataAccessException when more than one row is returned. It doesn't at the moment.  I've added a failing test suit to the JdbcTemplateTests (you'll notice it) with the corresponding bug number as method name.  Fix should be easy; adding DataAccessUtils.requireUniqueResult should be enough. Haven't done this though, as this needs backporting to the 1.2 branch.    ---  **Affects:** 1.2.8, 2.0 final, 2.0.1  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2006-11-24T04:20:40Z","2012-06-19T03:50:30Z"
"","7165","Improve error message for FactoryBeanNotInitializedException in some situations [SPR-2476]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-2476](https://jira.spring.io/browse/SPR-2476?redirect=false)** and commented  Related to issue no. 1650, we can improve the error message for the FactoryBeanNotInitializedException a bit. Laurie Harper (see mails) got misinformed by the exception message.    --- No further details from [SPR-2476](https://jira.spring.io/browse/SPR-2476?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-08-24T09:30:55Z","2019-01-13T22:46:30Z"
"","7229","Junit 4.x version of AbstractTransactionalDataSourceSpringContextTests [SPR-2540]","**[Alan Stewart (personal account)](https://jira.spring.io/secure/ViewProfile.jspa?name=alankstewart)** opened **[SPR-2540](https://jira.spring.io/browse/SPR-2540?redirect=false)** and commented  Currently org.springframework.test.AbstractTransactionalDataSourceSpringContextTests is in the inheritance hierachy that descends from the Junit 3.8.1 junit.framework.TestCase class.  I would like to see a version that is compatible with Junit 4.x with a view to writing test cases with Junit's annotations but still allow rollback after the test completes.  ---  **Issue Links:** - #7791 Junit4 support (_**""depends on""**_)  10 votes, 11 watchers","closed","has: votes-jira,","spring-projects-issues","2006-09-05T09:06:30Z","2019-01-13T22:46:17Z"
"","7832","proposition for a little enhencement to the AbstractXsltView [SPR-3146]","**[Alain Gaeremynck](https://jira.spring.io/secure/ViewProfile.jspa?name=garem)** opened **[SPR-3146](https://jira.spring.io/browse/SPR-3146?redirect=false)** and commented  I propose to change the method doTransform(Source source, Map parameters, Result result, String encoding) to doTransform(Map model, Source source, Map parameters, Result result, String encoding)  and replace the following lines: Transformer trans = (this.templates != null) ? this.templates.newTransformer() : // we have a stylesheet this.transformerFactory.newTransformer(); // just a copy by Transformer trans = getTransformer(model);  and of course add the following to the class:  protected Transformer getTransformer(Map model){ (this.templates != null) ? this.templates.newTransformer() : // we have a stylesheet this.transformerFactory.newTransformer(); // just a copy }  this way an implementing class could just overide this new method to, for example, have more then one possible stylesheet for the given view or implement a mecanism for refreshing the stylesheet when it changes on the disk and all sorts of little goodies like that.  Hope you guys like the idea   ---  **Attachments:** - [AbstractXsltView.java](https://jira.spring.io/secure/attachment/12336/AbstractXsltView.java) (_17.54 kB_) - [AbstractXsltView.java](https://jira.spring.io/secure/attachment/12335/AbstractXsltView.java) (_17.28 kB_)","closed","type: enhancement,","spring-projects-issues","2007-01-13T05:32:42Z","2012-06-19T03:50:32Z"
"","7658","use of multiple BeanNameAutoProxyCreators broke when we upgraded from 1.2.8 to 2.0.1 [SPR-2972]","**[Ailish Byrne](https://jira.spring.io/secure/ViewProfile.jspa?name=abyrne)** opened **[SPR-2972](https://jira.spring.io/browse/SPR-2972?redirect=false)** and commented  i'm sure i'm just missing something, but i've looked and looked and can't figure out what it is. we are using mutiple BeanNameAutoProxyCreators - for transaction management, caching, and method logging. i upgraded to 2.0.1 then noticed that when a given bean was listed for more that one of the auto proxy creators, only one picked it up. i tried each auto proxy creator in turn and verified that it was working, confirming that the problem was just when more than one was in effect (i think). here is the related configuration from our SpringBeans.xml (slightly simplified to list only one bean for each auto proxy creator):  \ \ \ \ \ \ \ \ \PROPAGATION_SUPPORTS\ \PROPAGATION_SUPPORTS\ \PROPAGATION_SUPPORTS\ \PROPAGATION_SUPPORTS\ \PROPAGATION_SUPPORTS\ \PROPAGATION_SUPPORTS\ \PROPAGATION_SUPPORTS\ \PROPAGATION_SUPPORTS\ \PROPAGATION_SUPPORTS\ \ \ \ \ \getAllProperties\ \getPropertyString\ \ \ \ \PROPAGATION_REQUIRED\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \true\ \__oscache_mrcache\ \false\ \1000\ \org.kuali.core.util.cache.MethodResultsCacheMonitor\ \ \ \ \ \ \ \ \ \ \10\ \ \ \ \ \ \ \ \ \org.kuali.*\.PersistenceStructureService.*\..*\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  ---  **Affects:** 2.0.1  **Issue Links:** - #7695 fix of SPR-2721 broke nested proxies (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2006-12-21T15:21:12Z","2019-01-11T21:27:09Z"
"","7199","form:errors tag doesn't render [SPR-2510]","**[Adrian Ross](https://jira.spring.io/secure/ViewProfile.jspa?name=shivermetimbers)** opened **[SPR-2510](https://jira.spring.io/browse/SPR-2510?redirect=false)** and commented  The ErrorsTag is not rendering despite there being errors present.  Have tracked this down to the following code in AbstractHtmlElementBodyTag.doEndTag():  if (this.bodyContent != null) { renderFromBodyContent(this.bodyContent, this.tagWriter); } else { renderDefaultContent(this.tagWriter); }  The tag is written as , ie. without body content. this.bodyContent is **not** null but instead this.bodyContent.getString() returns the empty string (at least in Weblogic 8.1). Thus the tag is never rendered.  The solution seems to be either to modify this check, or to implement ErrorsTag.renderFromBodyContent() to call renderDefaultContent().   ---  **Affects:** 2.0 RC3","closed","type: bug,","spring-projects-issues","2006-08-30T10:52:36Z","2012-06-19T03:51:04Z"
"","7500","Package spring.schema and spring.handler mappings in appropriate module jars [SPR-2813]","**[Adrian Colyer](https://jira.spring.io/secure/ViewProfile.jspa?name=adrian.colyer)** opened **[SPR-2813](https://jira.spring.io/browse/SPR-2813?redirect=false)** and commented  Currently spring packages one spring.schemas file in spring-beans.jar. As we move to an OSGi world, this won't work as the resources referenced in the file will not be found within the spring-beans bundle. Instead we need to have each module jar (spring-aop, spring-dao etc.) define it's own contribution to the spring.schemas and spring.handlers set. The Spring-OSGi project already does this re-packaging when making OSGi bundles out of  the core spring jars, so we can reuse the files created there. [Ultimately the Spring-OSGi project intends to use the module jars produced directly by the Spring project without any additional repackaging needed].  ---  **Affects:** 2.0 final  **Issue Links:** - #6496 Support for OSGi","closed","type: enhancement,","spring-projects-issues","2006-11-09T00:28:09Z","2019-01-11T21:31:48Z"
"","7375","Argument binding in pointcut expressions fails with multiple interceptors in chain [SPR-2687]","**[Adrian Colyer](https://jira.spring.io/secure/ViewProfile.jspa?name=adrian.colyer)** opened **[SPR-2687](https://jira.spring.io/browse/SPR-2687?redirect=false)** and commented  Binding values in AspectJ style pointcut expressions fails when there are multiple interceptors in the chain. See e.g.  http://forum.springframework.org/showthread.php?t=29902:  http://forum.springframework.org/showthread.php?t=29858:     ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-10-05T20:38:16Z","2012-06-19T03:50:54Z"
"","7260","Use of AspectException with broken getMessage in case of nested exception [SPR-2571]","**[Adrian Colyer](https://jira.spring.io/secure/ViewProfile.jspa?name=adrian.colyer)** opened **[SPR-2571](https://jira.spring.io/browse/SPR-2571?redirect=false)** and commented  The AspectException used by Spring in its AOP support has a bug when constructed with a message and nested exception :- the message is never set and thus the class returns null on a call to get message. This results is very poor diagnostics as seen in for example #7193.  ---  **Issue Links:** - #7206 Stack Trace / Error Missing when attempting to proxy a ""final"" DAO class (_**""is depended on by""**_)","closed","in: core,","spring-projects-issues","2006-09-11T00:36:06Z","2019-01-11T19:22:36Z"
"","7585","Typo in Spring MVC documentation: RegistrationControllerController [SPR-2897]","**[Adam Murray](https://jira.spring.io/secure/ViewProfile.jspa?name=adamj)** opened **[SPR-2897](https://jira.spring.io/browse/SPR-2897?redirect=false)** and commented  In the example controller XML configuration under section 13.11.3 (http://static.springframework.org/spring/docs/2.0.x/reference/mvc.html#mvc-coc-r2vnt) there is a bean defined: \  The class should be ""x.y.RegistrationController""   ---  **Affects:** 2.0.1","closed","type: bug,","spring-projects-issues","2006-11-29T16:48:32Z","2012-06-19T03:50:49Z"
"","7822","Javadoc formatting correction on JndiDestinationResolver  [SPR-3136]","**[Adam Lewandowski](https://jira.spring.io/secure/ViewProfile.jspa?name=alewando)** opened **[SPR-3136](https://jira.spring.io/browse/SPR-3136?redirect=false)** and commented  Missing closing \ tag on final paragraph of class Javadoc.   ---  **Affects:** 2.0.2  **Attachments:** - [JndiDestinationResolver.java.patch](https://jira.spring.io/secure/attachment/12382/JndiDestinationResolver.java.patch) (_520 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-02-08T06:52:40Z","2012-06-19T03:50:53Z"
"","7853","Destroy method of session scoped bean called at webapp reload [SPR-3167]","**[3i](https://jira.spring.io/secure/ViewProfile.jspa?name=3i)** opened **[SPR-3167](https://jira.spring.io/browse/SPR-3167?redirect=false)** and commented  In our environment, we configured our web server to persist any open sessions to disk in case of a server shutdown or a webapp reload so that they can be resumed later. This means that the session is not terminated yet, however our session scoped beans do get their destroy method called. Also, after the webapp is started again, these beans are still present in the resumed sessions (being in a ""destroyed"" state) leading to undefined behaviour.  Looking in Spring's sources, I tracked it down to org.springframework.web.context.request.ServletRequestAttributes.DestructionCallbackBindingListener not being Serializable. Therefore it is being kicked out of the session (and have its valueUnbound() method called) by the servlet container prior to serializing the session data.  See also #6773  ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-02-14T21:00:30Z","2019-01-11T17:34:42Z"
"","7417","org.springframework.scheduling.commonj.DelegatingWork class needs a getRunnable() to return the runnable object contained in DelegatingWork object. [SPR-2729]","**[ sr l](https://jira.spring.io/secure/ViewProfile.jspa?name=srl)** opened **[SPR-2729](https://jira.spring.io/browse/SPR-2729?redirect=false)** and commented  Once we schedule the Runnable object with WorkManagerTaskExecutor a WorkItem is returned to track the work submitted. There is a getResult() method in WorkItem to return the work object submitted. This method now returns the DelegatingWork object as it was used to submit the work. There is no method available currently to retrieve the actual Runnable object that is contained inside the DelegatingWork object. As the results are stored in the Runnable object and it needs to be retrieved for using the results. This problem can be solved by adding a getRunnable() method to DelegatingWork class and this method should return the contained runnable object.  Optionally the runnable objects could be saved to be reused later for results but I think adding above method provides a clean implementation and is in sync with how workmanager API is used.    ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2006-10-18T04:00:56Z","2012-06-19T03:50:02Z"