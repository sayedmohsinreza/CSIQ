"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","1505","合并更新","合并更新","closed","","fqyee","2017-08-24T03:03:21Z","2017-08-24T06:42:22Z"
"","1605","SPR-16235 - ResourceBundleMessageSource uses ConcurrentHashMaps instead of synchr…","…onization  Issue: https://jira.spring.io/browse/SPR-16235","closed","","imasahiro","2017-11-26T16:26:34Z","2018-01-09T21:19:00Z"
"","1624","SPR-16295 - Programmatic creation of caching proxies using CacheProxy…","…FactoryBean does not work.  This changes the o.s.cache.interceptor.CacheProxyFactoryBean to implement the SmartInitializingSingleton and BeanFactoryAware interfaces, which delegate to the internal CacheInterceptor in order to appropraiately configure the interceptor to enable the creation of cache proxies programmatically.  Resolves SPR-16295","closed","","jxblum","2017-12-12T21:21:10Z","2018-01-14T22:47:58Z"
"","1623","Fixes SPR-16295 - Programmatic creation of caching proxies using Cach…","…eProxyFactoryBean does not work.  This changes the o.s.cache.interceptor.CacheProxyFactoryBean to implement the SmartInitializingSingleton and BeanFactoryAware interfaces, which delegate to the internal CacheInterceptor in order to appropraiately configure the interceptor to enable the creation of cache proxies programmatically.","closed","","jxblum","2017-12-12T21:10:19Z","2017-12-12T21:17:08Z"
"","1594","Updating WebClient's javadocs","without this change the code in the Javadocs of `WebClient` is invalid. It doesn't compile. with this change, I've updated the Javadocs to be consistent with the current implementation  related issue - https://jira.spring.io/browse/SPR-16197","closed","","marcingrzejszczak","2017-11-14T17:25:09Z","2017-11-23T04:29:00Z"
"","1520","Remove ""chin"" in admonition blocks of reference documentation.","Without the change proposed, admonition blocks carry quite a ""chin"" that looks heavy.  Before:    After:","closed","","odrotbohm","2017-09-08T14:07:43Z","2017-09-25T13:21:10Z"
"","1590","SPR-16178: Fix NullPointer in DefaultRequestBodyUriSpec.cookies method","When you are using  ```DefaultRequestBodyUriSpec.cookies(Consumer> cookiesConsumer)``` method the map from consumer is null as it is not initialized anywhere.","closed","","Yneth","2017-11-08T22:26:44Z","2017-11-09T22:17:48Z"
"","1526","AbstractListenerWriteFlushProcessor: Ensure the last flush will be performed","When writing Publisher>, a flush operation is performed onComplete for every Publisher. If the flush operation is not able to be performed immediately it will be retried before starting to process data provided by the next Publisher. For the last Publisher the implementation needs to ensure that the flush will be performed only then whole operation will complete.  Issue: SPR-15949","closed","","violetagg","2017-09-13T22:15:59Z","2017-09-18T12:33:01Z"
"","1522","SPR-15944  solve the bug of i18n dynamic switching","when we set ""localeResolver"" to realize the i18n dynamic switching, if we access to the jsp page directly, it's invalid.","closed","status: declined,","wuyuyan","2017-09-09T10:19:44Z","2021-11-15T11:58:13Z"
"","1521","solve the bug of i18n dynamic switching","when we set ""localeResolver"" to realize the i18n dynamic switching, if we access to the jsp page directly, it's invalid.","closed","","wuyuyan2256","2017-09-09T10:07:14Z","2017-09-09T16:11:25Z"
"","1553","SPR-16060 - Enhance AnnotationUtils to find annotations on generic interfaces","When scanning for annotations on a class that implements a generic interface where the generic type is specified in the implementing class, annotation scanning would fail to identify annotations from the interface since the parameter types do not match.  For example, given an interface: ```    public interface Foo {        @Order        void foo(T t);    } ``` and a class: ```    public class StringFoo implements Foo {        public void foo(String s) { ... }    } ``` when scanning StringFoo.foo for annotations, no annotations were identified.  This commit changes annotation scanning so that when scanning for annotations, the parameters are compared for assignability (using Class.isAssignableFrom()) rather than requiring exact matches.  Issue: SEC-3081","closed","","christor","2017-10-11T02:58:19Z","2018-07-18T17:47:14Z"
"","1696","Handle end of stream when reading the request body","When reading request body -1 means all data read. Instead of waiting for an event from the server, call onAllDataRead immediately.","closed","","violetagg","2018-02-20T17:41:30Z","2018-03-05T13:43:40Z"
"","1725","Fix issue: getters and setters should be synchronized in pairs","When one part of a getter/setter pair is synchronized the other part should be too. Failure to synchronize both sides of a pair may result in inconsistent behaviour at runtime as callers access an inconsistent method state.","closed","","igor-suhorukov","2018-03-08T15:32:21Z","2018-03-08T16:01:17Z"
"","1722","Invert the check as ServletInputStream.isReady() is the active method","When checking whether there is still request body the first method that should be checked is ServletInputStream.isReady() and then ServletInputStream.isFinished(). ServletInputStream.isReady() is the active method whereas the ServletInputStream.isFinished() is not. It is important to call ServletInputStream.isReady() because if it returns false it will schedule a dispatch and if the request body is already read it will send onAllDataRead event.  Issue SPR-16521","closed","","violetagg","2018-03-07T15:08:32Z","2018-03-08T13:43:03Z"
"","1727","Polish: inner class calls to super class methods should be unambiguous","When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called explicitly, using super.","closed","","igor-suhorukov","2018-03-08T17:32:46Z","2018-03-08T17:50:16Z"
"","1691","Corrected Javadoc in WebSocketMessageBrokerStats","WebSocketMessageBrokerStats's Javadoc now states the correct default logging period  Obvious Fix","closed","","theHacker","2018-02-17T22:43:39Z","2018-02-18T17:04:41Z"
"","1699","Take brotli encoding into account for caching","We use a BrotliResourceResolver to deliver pre compressed content. If we use the `CachingResourceResolver` including `ResourceHandlerRegistry.resourceChain(true)` we cache brotli compressed content and deliver it to only gzip aware clients.  This fix resolves that by taking the brotli encoding into account. As all brotli aware browsers most likely supports gzip I think those two ifs are fine :-)","closed","","burka","2018-02-23T15:15:46Z","2018-05-23T14:53:36Z"
"","1716","Faster search for characters in string for deletion","Using HashSet  time for searching every character in String charsToDelete  in StringUtils.deleteAny method, can be saved.","closed","","akikrasic","2018-03-04T00:26:26Z","2018-03-06T14:32:23Z"
"","1595","Merge pull request #1 from spring-projects/master","Updating master","closed","","ghost","2017-11-15T02:09:56Z","2017-11-15T07:46:39Z"
"","1617","Merge pull request #1 from spring-projects/master","update from spring  project framework 2017年12月7日18:42:42","closed","","liyongscys","2017-12-07T10:42:46Z","2017-12-07T11:11:01Z"
"","1631","SPR-16322 - Use BeanInfoFactory when introspecting interfaces","Update `CachedIntrospectionResults` to use `BeanInfoFactory` implementations when introspecting interfaces.  Also add a couple of optimizations to save introspection of `Object` and `Serializable`.","closed","","philwebb","2017-12-22T19:39:03Z","2018-01-08T16:50:55Z"
"","1692","Merge pull request #1 from spring-projects/master","update","closed","","chejinqiang","2018-02-18T11:50:41Z","2018-02-19T08:10:40Z"
"","1501","Delete extra characters","Underline is superfluous","closed","","vincenthsin","2017-08-21T01:32:34Z","2017-08-21T06:43:38Z"
"","1650","Remove an unnecessary intermediate variable","This PR removes an unnecessary intermediate variable.","closed","","izeye","2018-01-24T02:11:23Z","2018-01-24T08:27:09Z"
"","1647","Polish InterceptorRegistration","This PR refactors to reuse the existing `List` versions.","closed","","izeye","2018-01-20T01:14:40Z","2018-01-20T10:58:06Z"
"","1657","Polish SqlParameter.sqlTypesToAnonymousParameterList()","This PR polishes `SqlParameter.sqlTypesToAnonymousParameterList()`.","closed","","izeye","2018-02-01T05:09:29Z","2018-02-01T11:33:00Z"
"","1665","Polish","This PR fixes some typos and polishes trivial stuff.","closed","","izeye","2018-02-07T01:57:09Z","2018-02-07T13:23:37Z"
"","1636","Fix an exception message in ScheduledAnnotationBeanPostProcessor","This PR fixes an exception message missed in 591429e538d1e59b47dff4c760cfd8763c57ebd7.","closed","","izeye","2017-12-26T17:24:35Z","2018-01-15T14:42:44Z"
"","1516","Fix AbstractJackson2Encoder#canEncode and make writer type resolution more consistent","This PR contains 2 commits intended to address [SPR-15910](https://jira.spring.io/browse/SPR-15910) raised by @wilkinsona. The type resolution consistency change is a significant (but really needed IMO) one that I would like to validate with @wilkinsona, @rstoyanchev, @poutsma and @bclozel.  The details of this change are in the 2nd commit message log and reproduced bellow:  > Before this commit, Spring WebFlux used both the declared > return value type and the concrete object type in writers, > in a similar fashion than Spring MVC. >  > But this can lead to inconsistent behaviors, for example between > type resolution of a return value that requires an adapter > (declared return value type is used) and one that does not > (concrete return value type is used) or between ? and Object handling. >  > After this commit, only declared type (via return value type for > annotation-based programming model or ParameterizedTypeReference for > the functional API) is used in order to provide a consistent and > predictable behavior. >  > The asynchronous nature of WebFlux, type erasure and providing > error-prone SPI are also reasons that motivates this change. >  > Concretely that means that handler methods declaring an Object return > value type and returning a String or Resource value won't be handled > anymore by respectively by CharSequenceEncoder and ResourceEncoder. > These handler methods need to declare explicitly the return value type. >  > For use cases that requires Spring MVC dynamic type resolution based > on the concrete return value type, using the functional API which allows > programmatic type resolution is the recommended way to use with WebFlux.  Thanks in advance for your feedbacks.","closed","","sdeleuze","2017-09-05T11:50:54Z","2021-04-28T10:12:15Z"
"","1711","SPR-12756: Local visibility for writes to caches with transactional decorators","This patch adds an alternative to the TransactionAwareCacheDecorator that addresses issues raised in SPR-12756 - it makes writes to decorated caches visible within the scope of the transaction.  It is intended to be minimally obtrusive. The current interface is not changed beyond adding a `setCacheDecoratorFactory` method to the `TransactionAwareCacheManagerProxy` to allow the strategy to be selected. The behaviour defaults to use the existing `TransactionAwareCacheDecorator`.","open","in: data,","williamhoyle","2018-03-01T07:20:57Z","2021-11-18T05:37:30Z"
"","1592","SPR-16022: avoid implicit autowiring with Kotlin secondary ctors","This one is tricky, but after some time to think and experiment on it, I tend to think we went maybe a little bit to far with implicit autowiring of Kotlin classes with secondary constructors, which has impact on `ConstructorResolver`.  In order to fix [SPR-16022](https://jira.spring.io/browse/SPR-16022), my proposal is to avoid implicit autowiring when the Kotlin class has secondary constructors.  Notice that Kotlin compiler can generate (in additional to the synthetic constructor generated for primary constructor) a non-synthetic default constructor when using no-arg compiler plugin or when a class have primary constructor with optional parameters that have all default values. This proposed change try to handle all these use cases.","closed","","sdeleuze","2017-11-13T11:16:43Z","2021-04-28T09:58:11Z"
"","1581","Fix SpEL comparison operator for comparable types","This is my first contribution to spring, so please advise if I have missed anything.  This PR fixes SPR-16141 by allowing equality checking to defer to the `TypeComparator`'s `canCompare`, rather than hardcoding conditions.","closed","in: core,","triggerNZ","2017-11-01T05:58:25Z","2021-11-25T20:23:23Z"
"","1548","SPR-9989 Using multiple PropertyPlaceholderConfigurer breaks @Value default value behaviour","This is a difficult ticket requiring nontrivial refactoring (see comments on https://jira.spring.io/browse/SPR-9989 for details). I explored quite some alternatives and found the following plan most ideal:  - tweak PropertyPlaceholderHelper's implementation to accept a new boolean parameter (ignoreDefault) to control whether default value will be used for a specific StringValueResolver;  - change AbstractBeanFactory's internal implementation of 'resolveStringValue(String)' to dictate that only the last StringValueResolver will go about default value return (if needed) and ignore default value for all the other ones, by passing appropriate boolean parameter to the above tweaked PropertyPlaceHolderHelper's public method;  A a new unit testing method named 'resolveEmbeddedDefaultValue' was added to DefaultListableBeanFactoryTests.","closed","","NathanQingyangXu","2017-10-05T21:45:36Z","2020-03-09T13:22:22Z"
"","1542","SPR-16027: Remove possible Servlet instance leak","This happens for example from JolokiaMvcEndpoint in spring-boot-actuator 1.5.7 where ``@ConfigurationProperties`` triggers two calls to ``afterPropertiesSet()`` thus resulting in a duplicate AgentServlet that is initialized but never destroyed.","closed","","ArloL","2017-09-29T10:45:25Z","2017-09-29T13:12:08Z"
"","1662","SPR-15083: Improve WebFlux exception logging","This commit updates `HttpWebHandlerAdapter` and `ResponseStatusExceptionHandler` in order to specify the method/uri in the logged message.  It also logs a `WARN` message for bad request (400) HTTP responses in order to get some logs when an exception is thrown due to client error (unable to deserialize request body for example).  Issue: [SPR-15083](https://jira.spring.io/browse/SPR-15083)","closed","","sdeleuze","2018-02-05T10:07:21Z","2021-04-28T09:58:19Z"
"","1602","SPR-16166: Handle top level json value in Jackson2JsonTokenizer","This commit introduces support for top level Json value `String`, `true`, `false`, `null`, `number`) to `Jackson2JsonTokenizer`.  Before this change `Jackson2JsonTokenizer` would only consider token in an object or array and this scenario will fail:  ``` @RestController public class JsonValueResource {     @GetMapping(""/fail"")     public Mono fail() {         return WebClient.builder().baseUrl(""http://localhost:8000"")                 .build().get().uri(""/"")                 .accept(MediaType.APPLICATION_JSON)                 .retrieve()                 .bodyToMono(Boolean.class)                 .switchIfEmpty(Mono.error(new RuntimeException(""No response"")));     }      @GetMapping     Mono jsonValueBoolean() {         return Mono.just(true);     }  } ```  Issue: SPR-16166","closed","","madgnome","2017-11-21T21:47:17Z","2017-12-15T10:17:03Z"
"","1620","SPR-16282 Deprecate classes removed in 5","This commit deprecates the following things   * the entire NativeJdbcExtractor hierarchy  * all types in the org.springframework.beans.factory.access package  * all types in the org.springframework.context.access package  * all types in the org.springframework.ejb.interceptor package  Issue: SPR-16282","closed","","marschall","2017-12-09T17:10:52Z","2017-12-12T14:41:26Z"
"","1593","SPR-16098: Fix Reactive JsonView + HttpEntity handling","This commit adds an `AbstractMessageWriterResultHandler#writeBody` variant which allows to pass the actual `MethodParameter` in order to perform proper annotation-based hint resolution with nested generics like with `ResponseEntityResultHandler`.","closed","","sdeleuze","2017-11-14T17:22:17Z","2021-04-28T09:58:12Z"
"","1580","Move requests.add(request) into finally block.","This avoids ""IllegalStateException: Expectations already declared"" when a MockRestServiceServer is used after one request throws an exception. I consider this a trivial fix.  Issues: SPR-16132","closed","","epabst","2017-10-30T14:55:07Z","2017-11-09T15:56:36Z"
"","1621","SPR-16291 - Declarative null checks","This *PR* illustrates an approach when explicit *null*-checks are replaced by a *NonNull* annotations on method parameters. Actual checks are generated during compilation and inserted into resulting byte code by the [Traute](http://traute.oss.harmonysoft.tech/) *javac* plugin.    Example: [here](https://github.com/denis-zhdanov/spring-framework/commit/5a126cf58a9c30cfbf55ebc5a88eafbc188efc34#diff-bf9a31b564bfe45387eb54a9f23560a0) we mark the parameters by Spring's *NonNull* annotation. Result:    ``` javap -c ./spring-core/build/classes/java/main/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.class ...   org.springframework.core.annotation.AbstractAliasAwareAnnotationAttributeExtractor(java.lang.Class, java.lang.Object, S);     Code:        0: aload_0        1: invokespecial #1                  // Method java/lang/Object."""":()V        4: aload_1        5: ifnonnull     18        8: new           #2                  // class java/lang/NullPointerException       11: dup       12: ldc           #3                  // String annotationType must not be null       14: invokespecial #4                  // Method java/lang/NullPointerException."""":(Ljava/lang/String;)V       17: athrow       18: aload_3       19: ifnonnull     32       22: new           #2                  // class java/lang/NullPointerException       25: dup       26: ldc           #5                  // String source must not be null       28: invokespecial #4                  // Method java/lang/NullPointerException."""":(Ljava/lang/String;)V       31: athrow ... ```  I'm fine with creating new *PR* where the change is applied to all use-cases within the project if the team likes the idea.","closed","","denis-zhdanov","2017-12-12T08:00:28Z","2017-12-22T17:27:21Z"
"","1557","Move ""Note"" before ""source"" in webmvc.adoc and fix typo","There is a "":"" in the end of the ""Note"" sentence, just like the sentence below, so move the ""Note"" sentence before ""source"".","closed","","nkjackzhang","2017-10-12T07:58:42Z","2017-12-18T07:25:14Z"
"","1555","Move ""Note"" before ""source"" in webmvc.adoc","There is a "":"" in the end of the ""Note"" sentence, just like the sentence below, so move the ""Note"" sentence before ""source"".","closed","","nkjackzhang","2017-10-12T03:22:24Z","2017-10-12T07:51:44Z"
"","1504","SPR-15900 - StringIndexOutOfBoundsException from RestTemplate.doExecute IOException handler when query string is empty","The RestTemplate.doExecute IOException handler produces a StringIndexOutOfBoundsException when the URI's query string is an empty string.","closed","","bbohl","2017-08-23T20:21:58Z","2017-09-01T20:59:05Z"
"","1720","Make MockRestRequestMatchers independent of JUnit","The MockRestRequestMatchers was using `org.junit.Assert.assertNotNull` and thus it could not be used in projects that use e.g. TestNG instead of JUnit, because this causes a `java.lang.NoClassDefFoundError: org/junit/Assert` at runtime.  This PR removes that dependency.","closed","","yankee42","2018-03-07T07:59:32Z","2018-03-07T12:24:09Z"
"","1641","SPR-16368 - jdbcTemplate in JdbcDaoSupport should have non-null 'dataSource'","The method checkDaoConfig() may throw an IllegalArgumentException which message is ""'dataSource' or 'jdbcTemplate' is required"", but doesn't require that jdbcTemplate has non-null 'dataSource' value, this message may confuse users, or maybe the IllegalArgumentException's message  should be ""'jdbcTemplate' is required""?  [SPR-16368](https://jira.spring.io/browse/SPR-16368)","closed","","nkjackzhang","2018-01-12T02:32:05Z","2018-03-27T06:51:08Z"
"","1549","Fix markdown","The list of resources for working with Asciidoctor were being displayed in the same line because of the missing line break.","closed","","wilder","2017-10-06T01:47:14Z","2017-10-06T05:47:00Z"
"","1685","Align spring-webflux's Webjars Locator dependency with spring-webmvc","The intention is to align with [this change](https://github.com/spring-projects/spring-framework/commit/8d42888476e892dfa1b099684c9a381bbd26f916#diff-6b23f872b29c97049a56354504169781L29) to spring-webmvc.","closed","type: task,","wilkinsona","2018-02-14T21:21:13Z","2019-03-19T15:17:56Z"
"","1651","SPR-16417 - Support varargs for expectations in MockMvc","The current way of writing multiple expect statements is kinda verbose:  ```java  mockMvc.perform(get(""/person/1""))    .andExpect(status().isOk())    .andExpect(content().contentType(MediaType.APPLICATION_JSON))    .andExpect(jsonPath(""$.person.name"").value(""Jason"")); ```  I propose vararg method that can do the same in a slightly cleaner way using default interface method:  ```java  mockMvc.perform(get(""/person/1""))    .andExpect(      status().isOk(),      content().contentType(MediaType.APPLICATION_JSON),      jsonPath(""$.person.name"").value(""Jason"")    ); ```","closed","","neonailol","2018-01-25T05:56:04Z","2018-07-21T08:07:10Z"
"","1706","SPR-16519 - Adding new acknowledge method version","The change according to Rossen Stoyanchev' comment","closed","","mariusz-jasinski","2018-02-27T15:48:41Z","2018-02-27T20:47:42Z"
"","1704","Polish: String.valueOf() should not be appended to a String","The argument passed to String.valueOf() should be directly appended to string instead.","closed","","igor-suhorukov","2018-02-25T20:02:28Z","2018-02-25T20:10:21Z"
"","1643","Use ArrayList instead of LinkedList for known size","Spring JDBC unlike other modules uses LinkedList instead of ArrayList in several places. There is a large body of evidence suggesting that on contemporary hardware ArrayList is both faster and has less overhead than even in degenerate cases of empty lists [3] or unknown size.  There are two places in Spring JDBC where the size of the list is known in advance and an ArrayList of the correct final size can be created   [1] https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8011200  [2] http://cliffc.org/blog/2017/11/05/modern-hardware-performance-cache-lines/  [3] https://bugs.openjdk.java.net/browse/JDK-8011200  Issue: SPR-16378","closed","","marschall","2018-01-14T13:21:00Z","2018-01-14T16:45:33Z"
"","1689","SPR-16505 - getReader/getInputStream retaining previous result","SPR-16505","closed","","av-pinzur","2018-02-15T20:59:25Z","2018-06-13T19:41:20Z"
"","1642","Specify AbstractWebSocketMessageBrokerConfigurer as depricated","Specify AbstractWebSocketMessageBrokerConfigurer as depricated.  Add to interface WebSocketMessageBrokerConfigurer default methods (made possible by a Java 8 baseline) from AbstractWebSocketMessageBrokerConfigurer and can be implemented WebSocketMessageBrokerConfigurer interface directly without the need abstract class using default methods","closed","","EnvOut","2018-01-13T12:30:53Z","2018-01-15T21:14:14Z"
"","1538","Kotlin documentation readability improvements","Some tiny tidyups and grammar improvements.","closed","","dharrigan","2017-09-28T19:45:50Z","2017-09-28T20:04:37Z"
"","1524","Documentation readability improvements","Some changes to make the Kotlin documentation a little more readable.  -=david=-","closed","","dharrigan","2017-09-12T13:38:41Z","2017-09-13T08:58:17Z"
"","1648","SPR-16404 - Removed unnecessary cast to int","Since Java7 HttpURLConnection offers setFixedLengthStreamingMode method with long parameter which should be prefered over version with int argument, therefore casting ContentLength to int is no longer needed. Moreover it makes impossible to stream payload larger than Integer.MAX_VALUE  The issue was actually caught within one of our production applications where RestTemplate is used to stream large binaries. I understand that this is not the intended use of RestTemplate, but since the Spring Framework is baselined on Java8 there is no harm of applying this fix. Moreover according to HttpURLConnection javadoc using the method with long argument must be preferred and it takes precedence over the int version  Excerpt from HttpURLConnection.fixedContentLength javadoc:        *  NOTE: {@link #fixedContentLengthLong} is recommended instead      * of this field, as it allows larger content lengths to be set.","closed","","mrmaus","2018-01-20T10:31:29Z","2018-01-20T13:11:17Z"
"","1667","Add support to set visibility via Jackson2ObjectMapperBuilder","See SPR-16411","closed","","eddumelendez","2018-02-08T04:12:15Z","2018-05-15T08:56:43Z"
"","1680","Avoid creating message arguments to Assert.isABC calls","See https://github.com/spring-projects/spring-framework/commit/67f184293b94c076b0474231f739a74f42d5ffa8","closed","","vlsi","2018-02-13T11:19:56Z","2018-02-13T11:31:50Z"
"","1694","Return correct return type for Kotlin suspending functions in MethodParameter.","Return type for Kotlin suspending functions (as returned by `MethodParameter#getParameterType` and `MethodParameter#getgenericReturnType` methods) is incorrect. The true return type is the generic parameter of the last parameter of the method.  This change modifies the behaviour of the aforementioned methods so that they work correctly for all cases.  Issue: [SPR-16515](https://jira.spring.io/browse/SPR-16515)","closed","","konrad-kaminski","2018-02-19T10:45:43Z","2022-02-18T19:11:08Z"
"","1550","4.3.x","Retrieve and Review","closed","","krishs09","2017-10-09T03:06:20Z","2017-10-09T21:23:22Z"
"","1494","Update RestTemplate.java","ResponseEntity responseEntity = restTemplate.exchange(                 url,                 HttpMethod.GET,                 new HttpEntity(headers),                 InputStreamResource.class);         OutputStream out = null;         try {             InputStream inputStream = responseEntity.getBody().getInputStream();   If I need an original InputStream ,the response is closed here,the original InputStream is closed","closed","","ooooow","2017-08-05T03:14:22Z","2017-11-03T05:26:52Z"
"","1496","SPR-14555","Resolve map of dependencies by keying on an enum value instead of bean name. This is more a proof of concept than a complete implementation, as I believe there are many ways to go about this.  I chose the route to just leave resolving beans by type in place, and remap the keys by searching a method on the value type that returns the expected key type. If multiple methods have the return type, this throws an exception. If multiple beans resolve to the same key, this throws an exception.  Very open to suggestions and guidance towards a complete solution.","closed","in: core,","NielsDoucet","2017-08-12T19:31:56Z","2021-11-26T11:08:11Z"
"","1525","Fix broken RequestMappingHandlerAdapter setter","RequestMappingHandlerAdapter.setReactiveRegistry() doesn't actually set the value appropriately.  FYI: I found this using lgtm.com  https://lgtm.com/projects/g/spring-projects/spring-framework/alerts/?mode=list","closed","","nertzy","2017-09-12T15:55:16Z","2017-09-12T19:08:06Z"
"","1539","Fix SPR-16024 broken links to Message Converters","Replace wrong link #rest-message-conversion with correct link  #mvc-config-message-converters.","closed","","arend-von-reinersdorff","2017-09-28T20:03:03Z","2017-09-29T15:50:45Z"
"","1573","Remove redundant lower cased strings creation for their comparison in startsWithIgnoreCase method.","Remove redundant lower cased strings creation for their comparison in startsWithIgnoreCase method.","closed","","ruslan5t","2017-10-22T10:20:14Z","2017-10-23T13:19:24Z"
"","1574","Remove redundant lower cased strings creation for their comparision in endsWithIgnoreCase method.","Remove redundant lower cased strings creation for their comparision in endsWithIgnoreCase method.","closed","","ruslan5t","2017-10-22T10:26:24Z","2017-10-22T12:18:27Z"
"","1572","Remove redundant check for string emptiness before calling overridden method for checking text presence.","Remove redundant check for string emptiness before calling overridden method for checking text presence. This check is already present in called method for CharSequence.","closed","","ruslan5t","2017-10-22T09:34:03Z","2017-10-22T10:11:21Z"
"","1713","Polish: Overriding methods should do more than simply call the same method in the super class","Remove methods with the same visibility and without comments about workaround.","closed","","igor-suhorukov","2018-03-01T23:00:40Z","2018-03-03T15:16:35Z"
"","1628","Refactor getMethodIfAvailable to not cause NoSuchMethodExceptions","Refactor `ClassUtils.getMethodIfAvailable(...)` to loop over methods rather than cause a `NoSuchMethodException`. Since this method is called often, this change can help improve application startup times.  Issue:","closed","","philwebb","2017-12-22T19:29:14Z","2017-12-31T07:09:30Z"
"","1629","Refactor getMethodIfAvailable to not cause NoSuchMethodExceptions","Refactor `ClassUtils.getMethodIfAvailable(...)` to loop over methods rather than cause a `NoSuchMethodException`. Since this method is called often this change can help improve application startup times.  Issue:","closed","","philwebb","2017-12-22T19:29:17Z","2017-12-22T19:31:37Z"
"","1630","Refactor AnnotatedElementUtils to not cause NoSuchMethodExceptions","Refactor `AnnotatedElementUtils` to loop over methods rather than cause a `NoSuchMethodException`. Since this method is called often, this change can help improve application startup times.  Issue:","closed","","philwebb","2017-12-22T19:33:20Z","2017-12-31T07:09:51Z"
"","1739","SPR-16578 - queryForMap returns last value","queryForMap returns last value returns the last value of equally named columns. The JDBC specification says that in such cases the first value should be returned instead.   - change ColumnMapRowMapper to not overwrite existing values  Issue: SPR-16578","closed","","marschall","2018-03-10T12:47:49Z","2018-06-11T08:48:12Z"
"","1619","Merge pull request #1 from spring-projects/master","pull new code","closed","","sunkolin","2017-12-07T11:54:55Z","2017-12-07T11:55:21Z"
"","1625","Merge pull request #1 from spring-projects/master","pull from oirgin","closed","","tempestLXC","2017-12-18T09:55:29Z","2017-12-18T14:26:32Z"
"","1534","SPR-15993: Revisit meaning of response.close() in HTTP client","Prior to this issue, SPR-15920 added this new `close()` method which was supposed to be called to clean resources after response processing.  This commit changes the meaning of that method: calling `close()` will close the underlying HTTP connection. This has to be called if the response body is not consumed by the application, since at that point the underlying connection might be in an inconsistent state if shared in a connection pool.  Issue: SPR-15993","closed","","bclozel","2017-09-25T16:09:54Z","2017-09-27T12:03:59Z"
"","1659","MockHttpServletRequestBuilder decodes pathInfo","Previously MockHttpServletRequestBuilder calculated the pathInfo from the provided URL without decoding the value. This meant that the pathInfo incorrectly included URL encoded values.  Now MockHttpServletRequestBuilder properly decodes the pathInfo.  Fixes: SPR-16453","closed","","rwinch","2018-02-01T19:26:01Z","2018-03-15T19:15:51Z"
"","1503","SPR-15892 - Url parameter based version strategy support","Prefix based version path strategy has a problem with css.  If css include any relative url, the server can not resolve relative url, because it has two version prefix in the url.  **Example**  The version: 1.0.0  The css url: http://localhost/application/1.0.0/css/test.css  Original css content ``` body {     background-image: url(""img/picture.jpg"");     background-size: cover; } ``` Modified css content ``` body {     background-image: url(""1.0.0/img/picture.jpg"");     background-size: cover; } ``` The picture.jpg url will be: http://localhost/application/1.0.0/css/1.0.0/img/picture.jpg but the expected is http://locahost/application/1.0.0/css/img/picture.jpg  **Solution**  We was make the UrlParameterFixedVersrionStrategy class.  The css url: http://localhost/application/css/test.css?v=1.0.0  Modified css content ``` body {     background-image: url(""img/picture.jpg?v=1.0.0"");     background-size: cover; } ``` the picture.jpg url: http://localhost/application/css/img/picture.jpg?v=1.0.0  MvcConfig example ``` import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter; import org.springframework.web.servlet.resource.AbstractVersionStrategy; import org.springframework.web.servlet.resource.UrlParameterFixedVersionStrategy; import org.springframework.web.servlet.resource.VersionResourceResolver;  @Configuration @ComponentScan({""test.controller""}) public class MvcConfig extends WebMvcConfigurerAdapter {      @Override     public void addResourceHandlers(ResourceHandlerRegistry registry) {         AbstractVersionStrategy fixedVersionStrategy = new UrlParameterFixedVersionStrategy(""1.0.0"");         VersionResourceResolver versionResourceResolver = new VersionResourceResolver()                 .addVersionStrategy(fixedVersionStrategy, ""/**"");          registry.addResourceHandler(""/**"")                 .addResourceLocations(""classpath:/other-resources/"")                 .resourceChain(true)                 .addResolver(versionResourceResolver);     }  } ```","closed","","zsoltii","2017-08-23T08:59:08Z","2018-01-12T14:37:35Z"
"","1735","Merge pull request #1 from spring-projects/master","pr","closed","","jiuzhou9","2018-03-09T03:08:14Z","2018-03-09T03:08:33Z"
"","1698","Polish: Replace this ""Map.get()"" and condition with a call to ""Map.computeIfAbsent()""","Polish: Replace this ""Map.get()"" and condition with a call to ""Map.computeIfAbsent()""","closed","","andrey916","2018-02-23T00:14:22Z","2018-04-11T17:28:52Z"
"","1675","Polish: assertion arguments should be passed in the correct order","Polish: assertion arguments should be passed in the correct order, use assertNull instead of assertEquals(null, value), declare delta as double value in assertEquals","closed","","igor-suhorukov","2018-02-10T12:42:39Z","2018-02-10T16:17:29Z"
"","1690","Polish: anonymous inner classes containing only one method should become lambdas,","Polish: anonymous inner classes containing only one method should become lambdas, use getOrDefault instead of ternary operator","closed","","igor-suhorukov","2018-02-16T07:03:27Z","2018-02-16T13:51:38Z"
"","1490","Fix for SPR-15804 - BatchUpdate with multiple sql statements is failing","Please fix for #SPR-15804 - BatchUpdate with multiple sql statements is failing","closed","","anilkumarkatta204","2017-08-02T07:06:06Z","2017-08-02T13:28:13Z"
"","1597","SPR-16211 - Change getter method visibility of ParsedSql","ParsedSql parsedSql = NamedParameterUtils.parseSqlStatement(sql); parsedSql.getParameterNames(); //NOT public","closed","status: superseded,","quaff","2017-11-17T03:35:37Z","2019-07-31T08:02:34Z"
"","1608","Enhanced MockRestResponseCreators by a withStatus with body and media type","Otherwise one have to do something like this: ```     private static class SomeResponseCreator extends DefaultResponseCreator {          SomeResponseCreator(HttpStatus statusCode) {             super(statusCode);         }     } ```","closed","","hadjiski","2017-11-29T16:53:15Z","2017-12-18T17:42:04Z"
"","1579","SPR-16138 - MockHttpServletRequest: use computed serverName","otherwise it's easy to accidentally get 'localhost' even if you set a `Host:` header","closed","","stevenschlansker","2017-10-27T20:01:49Z","2017-11-06T17:44:53Z"
"","1649","Matcher for asserting that header does exists","Opposite of existing matcher HeaderResultMatchers#doesNotExist this is minor change so i dont created jira issue","closed","","neonailol","2018-01-22T15:56:55Z","2018-01-25T04:25:30Z"
"","1611","Add missing verb on the note about relays","Obvious Fix","closed","","ugultopu","2017-12-04T01:59:53Z","2017-12-04T16:20:40Z"
"","1584","SPR-16154 - Correctly handle NVARCHAR, LONGNVARCHAR and NCLOBs (master)","NVARCHAR , LONGNVARCHAR and NCLOBs 4000 characters or less are set viasetNString.","closed","","jmax01","2017-11-02T20:24:50Z","2017-11-03T19:38:46Z"
"","1693","Fix typo","MockMVc -> MockMvc","closed","","urangurang","2018-02-19T07:37:59Z","2018-02-21T19:22:46Z"
"","1697","Merge pull request","Merge pull request","closed","","wenshenjun","2018-02-22T01:19:27Z","2018-02-22T01:21:06Z"
"","1585","Fixed a broken link","John Blum reported that the link whose text reads ""Request and session scoped beans"" points to https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#beans-factory-scopes-other but should point to https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes.  I fixed the asciidoc file accordingly. My text editor (Atom) strips spaces at the ends of lines, which accounts for the other changes.","closed","","Buzzardo","2017-11-02T21:42:29Z","2017-11-03T01:22:29Z"
"","1540","SPR-16032 - Fix tonkenizer","It uses the `ch == 0` to check whether this expression reaches end, makes me impossible to use `\0` in Spring EL like following:  ``` #{#str?.split('\0')} ```","closed","","zzt93","2017-09-29T03:10:55Z","2017-10-04T09:55:57Z"
"","1598","AbstractListenerWebSocketSession: suspend the channel when there is no demand","Issues: SPR-16207","closed","","violetagg","2017-11-17T08:49:54Z","2017-11-23T06:34:32Z"
"","1688","SPR-16499 - MockHttpServletRequest.getReader vs. getInputStream","Issue: SPR-16499","closed","","av-pinzur","2018-02-15T13:44:53Z","2018-06-13T19:42:47Z"
"","1686","MockHttpServletRequest.getReader vs. getInputStream","Issue: SPR-16499","closed","","av-pinzur","2018-02-14T23:03:01Z","2018-02-15T14:00:02Z"
"","1661","SPR-16460 - Add SAP HANA to common database platforms","Issue: SPR-16460","closed","","breglerj","2018-02-02T14:39:07Z","2018-05-05T17:53:06Z"
"","1618","Let Netty Webclient optionally follow redirects.","Issue: SPR-16277","closed","","agent-ost","2017-12-07T10:48:23Z","2018-03-30T13:45:01Z"
"","1616","SPR-16265  - Fix Stomp Broker Relay ignoring destination prefixes in some cases","Issue: SPR-16265  https://jira.spring.io/browse/SPR-16265","closed","","Toilal","2017-12-05T14:11:46Z","2017-12-11T21:25:30Z"
"","1532","ProtobufHttpMessageConverter: Ensure that JSON is written to response body","Issue: SPR-15988","closed","","aahlenst","2017-09-21T10:27:02Z","2017-09-21T10:45:50Z"
"","1508","SPR-15906 - Fix wrong instructions for building documentation","Issue: SPR-15906","closed","","LinkedList","2017-08-29T13:03:56Z","2017-08-29T14:51:22Z"
"","1622","Improve performance of some string operations","Issue: https://jira.spring.io/browse/SPR-16293","closed","","dreis2211","2017-12-12T16:16:48Z","2017-12-12T17:36:07Z"
"","1614","Reduce access on user in SimpleBrokerMessageHandler.handleMessageInternal","Issue: https://jira.spring.io/browse/SPR-16264","closed","","dreis2211","2017-12-05T10:24:48Z","2017-12-05T23:40:39Z"
"","1510","Create session-based WebSessionIdResolver","Introduces HeaderSessionIdResolver, which allows storing session ids in headers instead of cookies.  Related issue: SPR-15917","closed","","gregturn","2017-08-30T21:07:25Z","2017-09-09T11:20:30Z"
"","1499","Jackson encoder and decoder should use provided mime types","Instead of always using the default JSON mime types.  SPR-15866","closed","","rlindooren","2017-08-16T10:53:36Z","2017-08-16T13:46:49Z"
"","1695","Tokenizer - removing unnecessary boxing","Instead of ""Integer.valueOf(ch)"" can be simply ""(int) ch""","closed","status: superseded,","vladad","2018-02-20T07:32:53Z","2021-05-19T10:43:59Z"
"","1736","Update TransactionTemplate#equals() and #hashCode()","Inspect the PlatformTransactionManager property as well. Issues: SPR-16572","closed","","arne-vandamme","2018-03-09T08:15:17Z","2018-03-09T08:35:14Z"
"","1615","Fixed exception message","initialDelayString is parsed into long not integer","closed","","gro-gg","2017-12-05T10:43:36Z","2017-12-09T23:47:30Z"
"","1523","Spr 15950 PathMatchingResourcePatternResolver.java cannot find any resources in jar file in weblogic and websphere","In my project, I used this code to find resources in jar file. It works nice in tomcat and spring-boot:run but cannot find any resources in jar file in weblogic and websphere . So by read this stackoverflow https://stackoverflow.com/questions/17429736/spring-configuration-files-loading-not-working-on-websphere-7 I think rewrite PathMatchingResourcePatternResolver() maybe the best answer. Issue: SPR-15950 huangjie 2017/9/11 09:29","closed","in: core,","kk580kk","2017-09-11T01:38:35Z","2021-12-03T09:46:10Z"
"","1492","Avoid NoSuchMethodException generation","In my application this exception is generated at rate ~2000 exceptions per one minute (it is generated inside spring-data-jpa, my application intensively interacts with database).  This change may help to avoid slow operation of creation exception and its stack trace.","closed","status: declined,","anavrotski","2017-08-03T22:10:16Z","2020-06-23T07:55:29Z"
"","1489","Modify from return method 'requiredSingleResult' to 'singleResult' in in NamedParameterJdbcTemplate`s queryForObject","in DataAccessUtils.java, ``` public static  T singleResult(@Nullable Collection results) throws IncorrectResultSizeDataAccessException { 		int size = (results != null ? results.size() : 0); 		if (size == 0) { 			return null; 		} 		if (results.size() > 1) { 			throw new IncorrectResultSizeDataAccessException(1, size); 		} 		return results.iterator().next(); 	} ``` 	public static  T requiredSingleResult(@Nullable Collection results) throws IncorrectResultSizeDataAccessException { 		int size = (results != null ? results.size() : 0); 		if (size == 0) { 			throw new EmptyResultDataAccessException(1); 		} 		if (results.size() > 1) { 			throw new IncorrectResultSizeDataAccessException(1, size); 		} 		return results.iterator().next(); 	}`  when result`s size is 0, singleReust method return null  and requiredSingleResult method throw 'EmptyResultDataAccessException'.  In NamedParameterJdbcTemplate\`s queryForObject method use DataAccessUtils`s requiredSingleResult method.  This means developer using queryForObject in NamedParameterJdbcTemplate additionally accepts and handles EmptyResultDataAccessException when result size of query is 0.  I think Handling process when result size is 0 is not  Jdbctemplate\`s role or DAO`s role so, NamedParmeterJdbcTemplate should return null when result size is 0.","closed","","sjkim2322","2017-08-02T05:23:23Z","2017-08-02T16:22:54Z"
"","1603","removed incorrect @Nullable annotations from queryForObject methods","In both javadocs and implementations it is clearly stated that these methods cannot return null and will throw IncorrectResultSizeDataAccessException instead. It seems that they were marked as `@Nullable` by mistake.","closed","","isopov","2017-11-22T11:05:43Z","2017-11-22T11:58:02Z"
"","1589","SPR-16171 MediaType, add application/schema+json","Implementation of SPR-16171 -  adding MediaTypes - application/schema+json - application/schema+json;charset=UTF-8 - application/problem+json;charset=UTF-8","closed","","simplicii","2017-11-07T19:54:57Z","2018-12-17T22:30:36Z"
"","1678","Supports ConversionService on SingleColumnRowMapper","I've fixed the [SPR-16483](https://jira.spring.io/browse/SPR-16483).","closed","","kazuki43zoo","2018-02-11T16:25:02Z","2018-02-12T07:15:58Z"
"","1528","Allow to override a validation message using bean validation message code","I've fixed [SPR-15967](https://jira.spring.io/browse/SPR-15967). Please review this.","closed","type: enhancement,","kazuki43zoo","2017-09-15T09:41:33Z","2021-12-03T12:58:05Z"
"","1634","SPR-16324 - Added overloading methods to addPathPatterns and excludePathPatterns","I've decided to add these methods because it's inconvenient to add paths to method one by one, separating them by commas, if I want to include them to properties file, I'm forced to add them through cycle. This is an implementation of method that makes it possible to use the list of strings in a way that's more convenient.","closed","","rinorium","2017-12-24T01:04:39Z","2018-01-08T22:37:46Z"
"","1529","First Pull Request","I wan to join as a contributor.","closed","","sandeepjariya","2017-09-15T14:11:54Z","2017-09-15T14:29:46Z"
"","1601","fixed the javadoc mistake casued by copy","I think this is a little mistake in javadoc, or not.","closed","","hongxingwz","2017-11-20T11:30:45Z","2017-11-21T05:59:59Z"
"","1543","Proofreading pass","I proofread the WebFlux documentation. I had a couple suggestions and questions, which I put in as TODOs.","closed","","Buzzardo","2017-09-29T19:37:36Z","2017-09-30T14:01:33Z"
"","1513","Proofreading of the webflux chapter in the reference guide","I proofread the WebFlux chapter.","closed","","Buzzardo","2017-08-31T17:15:08Z","2017-09-05T17:23:15Z"
"","1512","CONTRIBUTING-DOCUMENTATION.adoc edit","I proofread the WebFlux chapter.","closed","","Buzzardo","2017-08-31T17:05:30Z","2017-09-01T07:29:05Z"
"","1656","Fixes typos - Obvious Fix","I noticed a few misspellings in the docs","closed","","adamlehenbauer","2018-01-31T20:08:05Z","2018-02-01T07:46:11Z"
"","1663","4.3.x","I need to code custom SpringSessionContext and need to know the inside of TransactionSynchronizationManager.java. However cannot seem to find spring-tx 4.3.13 source package.","closed","","bungrudi","2018-02-05T10:11:09Z","2018-02-05T21:10:16Z"
"","1569","Typo fix","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","lonre","2017-10-20T08:35:00Z","2018-02-09T12:22:28Z"
"","1558","Integrity violation exceptions are being hidden for EXASOL.","I have discovered that when java.sql.Connection#setAutoCommit set to 'false' PK/FK violations ignored. After debugging I noticed that Exasol does these checks on  java.sql.Statement#close rather than on java.sql.PreparedStatement#executeUpdate. Checked   JdbcUtils class I found that it is ignoring all ""on close"" exceptions however this specific case should be handled because otherwise  transactions  management  won't work with EXASOL.","closed","status: declined,","YLesko","2017-10-12T19:27:19Z","2021-11-24T14:24:14Z"
"","1509","Fix for issue SPR-15906","I corrected the instructions for generating the documentation. I also made the file conform to the guidelines by wrapping at 90 characters or less.","closed","","Buzzardo","2017-08-29T18:20:53Z","2017-08-30T16:14:51Z"
"","1544","SPR-9019 - Clarify docs for usage of @Configurable objects","Hi, I had similar issue as #13658 but with LocalContainerEntityManagerFactoryBean and Hibernate creating instances of cutom UserType classes with injected members. I was digging around and found, that it is all about depend-on as described in docs. But problem was that there is no bean with proper name created as noted in docs. I am sending PR with added alias for aspect bean and old bean name kept, because I want to be backward compatible. I have written note into docs, to be more specific and be able to be found by google search. Hope PR is ok for you. Thx, Ivos","closed","in: core,","bedla","2017-09-29T19:45:09Z","2022-02-01T12:23:00Z"
"","1506","Allow configuring separate CaffeineSpec properties per Cache name","Hi,  I've implemented a minor improvement which we already use in our project with Spring and Guava Cache (have not migrated to Caffeine yet).  With this extension we're able to use a single simple `GuavaCacheManager`, just specifying the needed configuration through properties.  In my opinion this suites well for both Spring Framework and Spring Boot projects as allows to achieve more without implementing new code (just setting properties).","closed","","stepio","2017-08-24T14:32:05Z","2019-12-22T16:59:38Z"
"","1666","Expose publicly ServerSentEvent constructor","Hello,  In my project, I would like to have an event stream of data and keep-alive messages each 15 seconds, [to support legacy proxy as explained here](https://www.w3.org/TR/eventsource/#notes). In order to do this, I need to have a `Flux`, merged from the original `Flux` containing data with the keep-alive messages as server sent event comments.  I wanted to use the `ServerSentEvent` class, which can handle `comment` and `data` but the constructor is not `public`. So I cannot do this: ```     @GetMapping(value = ""/sse"", produces = TEXT_EVENT_STREAM_VALUE)     public Flux get() {         Flux interval = Flux.interval(Duration.ofMillis(15_000));         Flux keepAliveFlux = Flux.fromStream(Stream.generate(()-> new ServerSentEvent(null, null, null, ""keep-alive"", null));         Flux keepAliveFluxWithInterval = Flux.zip(interval, keepAliveFlux).map(Tuple2::getT2);         return Flux.merge(keepAliveFluxWithInterval, otherFluxContainingData);     } ``` The `ServerSentEvent.BuilderImpl` is `private` too, so there is apparently no way to create a custom `ServerSentEvent`.  This PR exposes the `ServerSentEvent` constructor in order to send custom events (containing only `comment` for this example).  Thanks!","closed","","damienbeaufils","2018-02-07T16:07:24Z","2018-02-08T16:44:10Z"
"","1612","Support identical minPort and maxPort in SocketUtils","Found and fixed a defect with SocketUtils.findAvailableTcpPort when minPort == maxPort","closed","","tonymitchell","2017-12-04T22:56:26Z","2017-12-07T00:38:47Z"
"","1723","4.3.x","for educational example.","closed","","AidenFlowers","2018-03-07T22:59:57Z","2018-03-08T08:01:29Z"
"","1684","SPR-16496 - Exception handler class lookup fix","Fixes SPR-16496","closed","","encircled","2018-02-14T09:52:36Z","2018-02-14T23:57:30Z"
"","1566","Missing some double backticks with apostrophes","Fixes incorrect monospace formatting of unwanted text until next backtick is found. I can also do for the 4.3.x branch if ok.","closed","","drumonii","2017-10-17T02:36:41Z","2017-10-17T06:36:00Z"
"","1587","Reduce access on headers for STOMP messaging","Fixes https://jira.spring.io/browse/SPR-16165","closed","","dreis2211","2017-11-06T19:20:50Z","2017-11-06T19:41:11Z"
"","1599","[Obvious Fix] Fix typos, formatting and escaping in reference documentation","Fix various typos, formatting and escaping issues that I find while reading through the reference documentation.  This is an obvious fix.  Note: Some symbol combinations (including ""<="") serve as textual symbol replacements in AsciiDoc, and require escaping when replacement isn't expected. See http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/#text-replacement","closed","","bianjp","2017-11-19T06:00:20Z","2018-03-30T14:09:10Z"
"","1535","Fix typos in xsd file","Fix some typos in spring-mvc.xsd.","closed","","nkjackzhang","2017-09-28T02:36:20Z","2017-10-13T10:05:07Z"
"","1679","Polish: unused method parameters should be removed.","fix potential issue with parameter ClassWriter.addType(final Item item)","closed","","igor-suhorukov","2018-02-12T22:57:02Z","2018-02-13T10:13:42Z"
"","1607","marshalXmlStreamWriter  need respect StaxDriver","fix namespace issue","closed","in: messaging,","qxo","2017-11-29T09:44:32Z","2021-11-23T10:45:08Z"
"","1586","SPR-16154 - Correctly handle NVARCHAR, LONGNVARCHAR and NCLOBs","Fix for [SPR-16154](https://jira.spring.io/browse/SPR-16154) `NVARCHAR` , `LONGNVARCHAR` and `NCLOBs` 4000 characters or less are set via` setNString`.","closed","","jmax01","2017-11-03T19:52:26Z","2017-11-03T22:48:45Z"
"","1583","SPR-16154 - Correctly handle NVARCHAR, LONGNVARCHAR and NCLOBs (4.3.x)","Fix for [SPR-16154](https://jira.spring.io/browse/SPR-16154) `NVARCHAR` , `LONGNVARCHAR` and `NCLOBs` 4000 characters or less are set via` setNString`.","closed","","jmax01","2017-11-02T18:50:18Z","2017-11-03T19:38:13Z"
"","1632","SPR-16288","fix BridgeMethodResolver#findGenericDeclaration method work for classes which implement more than one interface","closed","","Skelotron","2017-12-23T23:49:44Z","2018-01-11T20:58:50Z"
"","1531","Update Errors.java","Fix a typo in the Javadoc for the AddAllErrors() method in the org.springframework.validation.Errors class.","closed","","xavier630","2017-09-19T23:24:18Z","2017-09-20T07:35:25Z"
"","1652","Fix `DelegatingServletInputStream#available`","Ensure that the method returns the correct number of bytes that can be read without blocking  Issue: #SPR-16416","closed","","ketan","2018-01-25T15:50:33Z","2018-01-25T17:03:01Z"
"","1717","SPR-16556 - Incorrect isGetGeneratedKeysSimulated() return value logic in PostgresTableMetaDataProvider.java","Do a comparison by major and minor numbers instead of lexically","closed","","anguslee","2018-03-06T04:36:31Z","2018-03-06T12:26:38Z"
"","1588","SPR-16170 Spring-jdbc : Improve memory allocations when substituting named parameters.","Create the buffer with at least the original sql length to avoid multiple re-allocations Add a fast path if the original sql doesn't contain any parameters  JMH result ``` MyBenchmark.old                                                  thrpt   50   429702,315 ±   8526,336   ops/s MyBenchmark.old:·gc.alloc.rate                                   thrpt   50     1089,447 ±     21,757  MB/sec MyBenchmark.old:·gc.alloc.rate.norm                              thrpt   50     3992,001 ±      0,001    B/op MyBenchmark.old:·gc.churn.PS_Eden_Space                          thrpt   50     1102,400 ±     29,500  MB/sec MyBenchmark.old:·gc.churn.PS_Eden_Space.norm                     thrpt   50     4039,513 ±     71,742    B/op MyBenchmark.old:·gc.churn.PS_Survivor_Space                      thrpt   50        0,180 ±      0,027  MB/sec MyBenchmark.old:·gc.churn.PS_Survivor_Space.norm                 thrpt   50        0,659 ±      0,098    B/op MyBenchmark.old:·gc.count                                        thrpt   50      783,000               counts MyBenchmark.old:·gc.time                                         thrpt   50      333,000                   ms MyBenchmark.newVersion                                           thrpt   50   478496,476 ±   5144,476   ops/s MyBenchmark.newVersion:·gc.alloc.rate                            thrpt   50     1008,926 ±     10,849  MB/sec MyBenchmark.newVersion:·gc.alloc.rate.norm                       thrpt   50     3320,001 ±      0,001    B/op MyBenchmark.newVersion:·gc.churn.PS_Eden_Space                   thrpt   50     1023,339 ±     21,646  MB/sec MyBenchmark.newVersion:·gc.churn.PS_Eden_Space.norm              thrpt   50     3368,042 ±     68,881    B/op MyBenchmark.newVersion:·gc.churn.PS_Survivor_Space               thrpt   50        0,156 ±      0,033  MB/sec MyBenchmark.newVersion:·gc.churn.PS_Survivor_Space.norm          thrpt   50        0,514 ±      0,109    B/op MyBenchmark.newVersion:·gc.count                                 thrpt   50      647,000               counts MyBenchmark.newVersion:·gc.time                                  thrpt   50      285,000                   ms  MyBenchmark.oldNoParams                                          thrpt   50  1642986,386 ±  47483,217   ops/s MyBenchmark.oldNoParams:·gc.alloc.rate                           thrpt   50     2857,392 ±     82,456  MB/sec MyBenchmark.oldNoParams:·gc.alloc.rate.norm                      thrpt   50     2738,400 ±      3,600    B/op MyBenchmark.oldNoParams:·gc.churn.PS_Eden_Space                  thrpt   50     2893,399 ±     96,256  MB/sec MyBenchmark.oldNoParams:·gc.churn.PS_Eden_Space.norm             thrpt   50     2773,357 ±     51,150    B/op MyBenchmark.oldNoParams:·gc.churn.PS_Survivor_Space              thrpt   50        0,186 ±      0,031  MB/sec MyBenchmark.oldNoParams:·gc.churn.PS_Survivor_Space.norm         thrpt   50        0,178 ±      0,029    B/op MyBenchmark.oldNoParams:·gc.count                                thrpt   50      882,000               counts MyBenchmark.oldNoParams:·gc.time                                 thrpt   50      382,000                   ms MyBenchmark.newVersionNoParams                                   thrpt   50  2355892,983 ± 107644,968   ops/s MyBenchmark.newVersionNoParams:·gc.alloc.rate                    thrpt   50     2178,567 ±     99,614  MB/sec MyBenchmark.newVersionNoParams:·gc.alloc.rate.norm               thrpt   50     1456,000 ±      0,001    B/op MyBenchmark.newVersionNoParams:·gc.churn.PS_Eden_Space           thrpt   50     2186,719 ±    112,842  MB/sec MyBenchmark.newVersionNoParams:·gc.churn.PS_Eden_Space.norm      thrpt   50     1461,406 ±     35,027    B/op MyBenchmark.newVersionNoParams:·gc.churn.PS_Survivor_Space       thrpt   50        0,179 ±      0,030  MB/sec MyBenchmark.newVersionNoParams:·gc.churn.PS_Survivor_Space.norm  thrpt   50        0,121 ±      0,022    B/op MyBenchmark.newVersionNoParams:·gc.count                         thrpt   50      907,000               counts MyBenchmark.newVersionNoParams:·gc.time                          thrpt   50      401,000                   ms ```","closed","","benbenw","2017-11-07T17:27:16Z","2017-11-08T22:54:39Z"
"","1645","docs: ""will overrides"" -> ""overrides""","Correct grammar.","closed","","JanStureNielsen","2018-01-17T15:21:26Z","2018-01-17T17:07:48Z"
"","1671","Polish: change this ""try"" to a try-with-resources.","Close PrintWriter - prevent resource leak. Change this ""try"" to a try-with-resources.","closed","","igor-suhorukov","2018-02-08T22:01:07Z","2018-02-09T09:17:35Z"
"","1519","Change bean registration Kotlin docs to use initialize function","Changing docs to conform API defined in https://github.com/spring-projects/spring-framework/commit/8b8a6766de01467c8b45b1b9664f0ab2d58f7c69","closed","","Xantier","2017-09-08T08:17:11Z","2017-09-28T13:04:16Z"
"","1576","Fix typo in javadoc","Change ""@code"" to ""@link"".","closed","","nkjackzhang","2017-10-25T10:52:32Z","2017-12-18T07:26:40Z"
"","1635","SPR-16326 - Add bean details for ImplicitlyAppearedSingletonException","Captures and appends related details for the bean that resulted in this ImplicitlyAppearedSingletonException along with the exception","closed","","rahulsh1","2017-12-26T04:39:10Z","2018-11-19T21:58:06Z"
"","1517","Add close() method on HTTP client response","Before this commit, there was no way to signal the HTTP client that we were done consuming the response. Without that, the underlying client library cannot know when it is safe to release the associated resources (e.g. the HTTP connection).  This commit adds new `close()` methods on both `ClientHttpResponse` and `ClientResponse`. This methods is non-blocking and its behavior depends on the library, its configuration, HTTP version, etc.  At the `WebClient` level, `close()` is called automatically if we consume the response body through the `ResponseSpec` or the `ClientResponse` itself.  Note that it is *required* to call `close()` manually otherwise; not doing so might create resource leaks or connection issues.  Issue: SPR-15920","closed","","bclozel","2017-09-06T12:25:33Z","2022-01-31T20:19:02Z"
"","1639","SPR-16354 - Improve callbacks creation in CglibAopProxy","Avoid unnecessary `FixedChainStaticTargetInterceptor` creation for methods without advice if the target is a static one and the advice chain is frozen.","closed","","MottoX","2018-01-06T13:00:42Z","2022-02-18T19:11:08Z"
"","1591","SPR-16162 make JpaVendorAdapter configuration properties more transaction type aware","Autoconfigure based on the transaction type if detected. If the transaction type cannot be detected for whatever reason, it falls back to the current behavior.  This is basically to prevent the Vendor Adapter to set an invalid connection release mode for JTA transactions but can be used for further configuration based on the detected transaction type.  Running the application with embedded tomcat: ![image](https://user-images.githubusercontent.com/4395571/32646606-f2147598-c5f5-11e7-89a1-63b37dea955b.png)  Running with weblogic ![image](https://user-images.githubusercontent.com/4395571/32659057-8aafb630-c625-11e7-8576-4821add6d828.png)","closed","","apixandru","2017-11-10T07:04:44Z","2017-11-10T20:58:22Z"
"","1571","SPR-7961 Allow MailMessage to have multiple Reply-To addresses","As proposed in [SPR-7961](https://jira.spring.io/browse/SPR-7961).  The JavaMail API states that ""normally only a single address will be specified"", but `MailMessage` should be consistent with `MimeMessage`.","closed","","rweisleder","2017-10-21T18:17:40Z","2017-10-22T10:19:04Z"
"","1565","SPR-7925 Introduce Assert.noNullElements for collections","As proposed in [SPR-7925](https://jira.spring.io/browse/SPR-7925).  The issue also proposes a `noNullKeys(Map)` and `noNullValues(Map)`. If this makes sense I would also implement it with this or a separate PR.","closed","status: superseded,","rweisleder","2017-10-16T19:31:11Z","2020-06-11T16:54:24Z"
"","1644","SPR-16383 - Log SQL parameters in EclipseLink when using showSql","As of EclipseLink 2.4.0 - Juno this is not sufficient to log SQL parameter binding. Additionally, eclipselink.logging.parameters must be enabled.  Issue: SPR-16383","closed","","timomeinen","2018-01-16T12:01:43Z","2018-01-16T13:28:21Z"
"","1578","Handle parameters of Kotlin extension methods correctly.","As described in [SPR-16119](https://jira.spring.io/browse/SPR-16119):  The `EXTENSION_RECEIVER` parameter of Kotlin's extension methods appear as normal method parameters to Java and thus require a name. The synthetic name `$receiver` is used here, as it is not a valid Kotlin identifier, but valid in Java.","closed","","diesieben07","2017-10-26T13:13:32Z","2017-11-13T14:54:56Z"
"","1577","Allow empty usernames for BasicAuth","As described in [SPR-16116](https://jira.spring.io/browse/SPR-16116):  The RFCs around basic authentication don't explicitly disallow empty usernames. On the other hand usernames containing colons are, as colons are used to separate the username from the password.  This PR will allow empty usernames (empty string or NULL) to be used, but will disallow to use usernames containing a colon.","closed","","BattleRattle","2017-10-25T19:30:37Z","2017-11-03T23:33:27Z"
"","1701","Polish: Array designators ""[]"" should be on the type, not the variable","Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the variable name to know whether or not a variable is an array.","closed","","igor-suhorukov","2018-02-25T08:13:13Z","2018-02-25T12:14:21Z"
"","1530","fix class name in javadoc","appeared after renaming in commit 760cab8fea4710dc6bf207a3d7d38244518894cf","closed","","qwazer","2017-09-18T11:59:24Z","2017-09-18T12:30:03Z"
"","1556","spring-jdk9-hello-world","An example ""Hello world"" was added.","closed","","Arxemond777","2017-10-12T07:44:52Z","2017-10-16T20:57:25Z"
"","1740","SPR-16590: getParameterValues would work incorrectly","Affected method:  **DefaultMultipartHttpServletRequest::getParameterValues** **DefaultMultipartHttpServletRequest::getParameterMap**  getParameterValues is used to return multi values of a same key in request, including query string, post contents. And DefaultMultipartHttpServletRequest would be used instead of default servlet wrapper when using ""**multipart/form-data**"" post method to realize including vars in multipart body. And there is a problem in its getter in dealing values of same keys. It will not merge them to values in  query string.  It can be reproduced by following steps: ``` curl -F ""key1=test"" ""http://test.com/hello?key1=other"" ``` You will get a parameter map like: ``` key1: 	test ```  ``` curl -d ""key1=test"" ""http://test.com/hello?key1=other"" ``` And you will get: ``` key1: 	test 	other ```  Let's sit down to discuss whether fix it?","closed","","jasonjoo2010","2018-03-14T09:09:03Z","2018-03-20T16:34:51Z"
"","1681","Added explicit anchor to discussion about constructor VS. setter injection.","Added Asciidoc anchor to the section on different injection styles to be able to link to the discussion as official recommendation.","closed","","odrotbohm","2018-02-13T16:24:20Z","2018-03-02T10:16:35Z"
"","1637","SPR-16340 - Added a new param separator for NamedParameterUtils","Added '[' and ']' as param separator and test for this case  Closes SPR-16340","closed","","KitHat","2018-01-02T20:32:08Z","2018-01-09T15:59:31Z"
"","1613","Introduce mockAutowired() in ReflectionTestUtils","Add method mockAutowired and getBean to auto mock Autowired fields, then it will be easy when mock some complex server with many Autowired fields.It's a new feature.","closed","status: declined,","boroborome","2017-12-05T09:29:45Z","2021-12-07T10:45:04Z"
"","1545","Fix typo","According to the class _org.springframework.transaction.TransactionDefinition_, it should be ""PROPAGATION_REQUIRED"" instead of ""PROPAGATION_REQUIRES"".","closed","","MottoX","2017-09-30T16:50:57Z","2018-01-22T15:32:30Z"
"","1562","Rest based cache manager.","A rest cache manager build on top of Unirest.  Expects an base endpoint and a class mapping for deserialization.  PD: first pull request ever, note me anything pls","closed","","pablocloud","2017-10-13T16:36:52Z","2017-10-15T11:25:07Z"
"","1561","Restcachemanager","A rest cache manager build on top of Unirest.  Expects an base endpoint and a class mapping for deserialization.  PD: first pull request ever, note me anything pls","closed","","pablocloud","2017-10-13T16:21:10Z","2017-10-13T16:31:24Z"
"","1560","Rest based cache manager.","A rest cache manager build on top of Unirest.  Expects an base endpoint and a class mapping for deserialization.  PD: first pull request ever, note me anything pls","closed","","pablocloud","2017-10-13T16:16:51Z","2017-10-13T16:19:01Z"
"","1627","Fix a  obvious typo in javadoc","A  obvious typo.","closed","","nkjackzhang","2017-12-22T02:07:38Z","2017-12-25T06:40:14Z"
"","1660","SPR-16468 - Default to MySQL55Dialect based on InnoDB","`MySQL5Dialect` set currently as default is based on the MyISAM storage engine, which is not recommended. MySQL 5.5 has been out since 2010. So, it's pretty safe to go with it as the default dialect.  Related to https://github.com/spring-cloud/spring-cloud-gcp/issues/392.","closed","status: declined,","meltsufin","2018-02-01T21:42:46Z","2019-03-08T15:16:21Z"
"","1533","Remove jackson-datatype-jdk7 auto registration","`jackson-datatype-jdk7` is not provided anymore. It's handlers are incorporated in core databind.","closed","","eddumelendez","2017-09-25T03:36:24Z","2017-09-26T12:48:45Z"
"","1654","SPR-16372 The FieldError class does not provide access to the exception that triggered the binding error.","[SPR-16372](https://jira.spring.io/browse/SPR-16372) Provide access to the actual exception that triggered the binding error","closed","","marknorkin","2018-01-26T10:26:09Z","2018-02-09T16:39:02Z"
"","1604","Directory Traversal Attack","[Obvious Fix] Extend the existing directory traversal attack to protect against URL encoded `..\`  attack example: http:///my-servlet/%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5c%2e%2e%5cwindows%5cSystem32%5cdrivers%5cetc%5chosts","closed","","martin1yness","2017-11-25T19:20:44Z","2017-11-26T19:08:53Z"
"","1687","SPR-16501: add caching support for cache2k","[cache2k](https://cache2k.org) is one of the [best performing Java caches](https://cruftex.net/2017/09/01/Java-Caching-Benchmarks-Part-3.html) with a hit rate efficiency similar to Caffeine.  The jar size of cache2k is smaller than the currently available alternatives like EHCache and Caffeine. Although its small jar size it comes with XML configuration and JMX support.  The direct support of cache2k makes use of the build in `null` value support which leads to less overhead than Caffeine or using the JCache API.","closed","","cruftex","2018-02-15T06:15:52Z","2018-07-10T09:19:57Z"
"","1541","Add abstraction for method endpoint; wrt SPR-14683.","@snicoll this should be the minimal needed change.","closed","status: declined,","alesj","2017-09-29T09:19:41Z","2021-12-03T13:02:51Z"
"","1546","Update SimpleApplicationEventMulticaster.java","@Override 	public void multicastEvent(final ApplicationEvent event, @Nullable ResolvableType eventType) { 		ResolvableType type = (eventType != null ? eventType : resolveDefaultEventType(event));    //Here getTaskExecutor () method to get the foreach loop outside the performance can be optimized 		Executor executor = getTaskExecutor(); 		for (final ApplicationListener listener : getApplicationListeners(event, type)) {	 			if (executor != null) { 				executor.execute(() -> invokeListener(listener, event)); 			} 			else { 				invokeListener(listener, event); 			} 		} 	}","closed","status: superseded,","muyinchen","2017-10-01T07:49:57Z","2021-11-24T14:22:49Z"
"","1515","Merge pull request #1 from spring-projects/master","20170905","closed","","mage234","2017-09-05T03:08:57Z","2017-09-05T05:49:39Z"
"","1596","UndertowServerHttpRequest: suspend reading when no demand","- When there is no demand for reading, the implementation should suspend reading otherwise useless events will be send by Undertow to the registered read listener. - There is not need to wait for an event for reading/writing after calling resumeReads/resumeWrites","closed","","violetagg","2017-11-15T10:57:28Z","2017-11-20T00:57:36Z"
"","1498","SPR-15850 - Support groovy markup template in WebFlux","- Migrate groovy markup template implementation from webmvc to webflux.  - Migrate groovy markup template tests from webmvc to webflux.  - Add groovy markup view solver to view resolver registry.  Issue: SPR-15850","closed","status: declined,","onionf91","2017-08-16T02:03:43Z","2019-02-05T14:05:58Z"
"","1527","SPR-15966 Fix manual release DataBuffer issue in FreeMarkerView class","- Manual release DataBuffer inatance in catch scope  Issue: SPR-15966","closed","","onionf91","2017-09-15T09:31:12Z","2017-09-22T08:16:21Z"
"","1575","Fix wrong javadoc example","- Fix javadoc example in `org.springframework.context.annotation.Primary`.","closed","","ocadaruma","2017-10-23T04:49:23Z","2017-10-23T07:21:50Z"
"","20938","value-type has no purpose in util:list [SPR-16392]","**[שלה יהושוע](https://jira.spring.io/secure/ViewProfile.jspa?name=blessedgeek)** opened **[SPR-16392](https://jira.spring.io/browse/SPR-16392?redirect=false)** and commented  Given any class  ```java public class UnitTestData {   public String vin, model;   //... setters .... } ```  Within the spring context config src/testresources/telematics/call-test-cfg.xml  ```                                    ```  Referenced in a main code body  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(""telematics/call-test-cfg.xml"") public class VehicleValidation{   @Inject List datalist;  }  ```  1. Ist, it doesn't matter if value-type is declared in list of beans declaration in config 2. Then the generic declaration, List\ datalist is not recognised and produces run error. Instead, I would have to declare as non-generic and then cast each item.    ---  **Affects:** 4.3.8","open","in: core,","spring-projects-issues","2018-01-16T21:20:04Z","2019-01-11T15:28:02Z"
"","20588","StandardMultipartHttpServletRequest.StandardMultipartFile not serializable [SPR-16039]","**[Łukasz Glapiński](https://jira.spring.io/secure/ViewProfile.jspa?name=lglapinski)** opened **[SPR-16039](https://jira.spring.io/browse/SPR-16039?redirect=false)** and commented  Mentioned class implements **Serializable** but **Part part** field is populated with **org.apache.catalina.core.ApplicationPart** as implementation which is not serializable.   ---  **Affects:** 4.3.11","closed","status: declined,","spring-projects-issues","2017-10-03T15:42:47Z","2019-01-12T16:33:00Z"
"","20463","Huge performance issue with @Transactional [SPR-15909]","**[Ács Ádám](https://jira.spring.io/secure/ViewProfile.jspa?name=acsadam)** opened **[SPR-15909](https://jira.spring.io/browse/SPR-15909?redirect=false)** and commented  Enabling `@Transaction` on a spring service makes a method execution time 100x slower. I set up a minimum example, it shows the following:  1 spring bean + 1 pojo, both has a trivial method to execute. Mesured with spring stopwatch.  Without transaction: pojo: 1ms bean: 1ms  With transaction: pojo: 1ms bean: 89ms   ---  **Affects:** 4.3.10  **Attachments:** - [slow_transactional.zip](https://jira.spring.io/secure/attachment/25083/slow_transactional.zip) (_2.70 kB_)","closed","status: declined,","spring-projects-issues","2017-08-30T08:49:34Z","2022-02-18T20:26:51Z"
"","21133","ServletHttpHandlerAdapter @WebServlet annotation attributes do not conform to servlet spec [SPR-16591]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-16591](https://jira.spring.io/browse/SPR-16591?redirect=false)** and commented  trying to deploy a spring-5 web-app (servlet/war) to weblogic 12c (12.2.1.2) fails during the validation phase (prior to the actual application start) with:  `Either the urlPatterns or the value attribute in the WebServlet annotation MUST be present: org.springframework.http.server.reactive.ServletHttpHandlerAdapter.`  unfortunately, i think weblogic may be right because it seems the annotation `@WebServlet(asyncSupported = true)` without a `value` or `urlPatterns` attribute does not conform to the servlet spec (3.0, 3.1, 4.0):  > The urlPatterns or the value attribute on the annotation MUST be present.  offending occurrences: * https://github.com/spring-projects/spring-framework/blob/v5.0.4.RELEASE/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java#L56 * https://github.com/spring-projects/spring-framework/blob/v5.0.4.RELEASE/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHttpHandlerAdapter.java#L38 * https://github.com/spring-projects/spring-framework/blob/v5.0.4.RELEASE/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java#L43  environment: win x64, oracle jdk8u151, weblogic 12c 12.2.1.2, spring-boot-2.0.0.RELEASE, spring-web-5.0.4.  console output:  ```","closed","type: bug,","spring-projects-issues","2018-03-14T13:22:54Z","2018-04-03T20:34:27Z"
"","20592","sort BeanDefinitionRegistryPostProcessors added by other BeanDefinitionRegistryPostProcessors [SPR-16043]","**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-16043](https://jira.spring.io/browse/SPR-16043?redirect=false)** and commented  we are having an ordering problem where one `BeanDefinitionRegistryPostProcessor` adds multiple other `BeanDefinitionRegistryPostProcessor` s. those additional ones get applied in arbitrary order (i.e. not in the order that would correspond to their `Ordered` precedence).  i dropped a commit comment here: https://github.com/spring-projects/spring-framework/commit/bb971cecf15e8c7983cbaf7767851236d132889c#diff-94c72f4a124185c98f882bc9a7038e74R112  ref. also #15258  problem initially found here: https://github.com/grails/grails-core/issues/10824#issuecomment-334106247  thanks, zyro  ---  **Affects:** 4.3.11, 5.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/bb971cecf15e8c7983cbaf7767851236d132889c#diff-94c72f4a124185c98f882bc9a7038e74R112  **Issue Links:** - #15258 Allow BeanDefinitionRegistryPostProcessor to register other BeanDefinitionRegistryPostProcessors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7610210a0e35f17d116a2093f51635aa81c3dfa6, https://github.com/spring-projects/spring-framework/commit/ad4c8e7c0d8b35b633c08255603a2e5a3acf8fd2  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","in: core,","spring-projects-issues","2017-10-04T12:18:34Z","2019-01-14T04:33:50Z"
"","20446","url parameter base fixed verion strategy  [SPR-15892]","**[Zsolt Fatér](https://jira.spring.io/secure/ViewProfile.jspa?name=fater.zsolt@gmail.com)** opened **[SPR-15892](https://jira.spring.io/browse/SPR-15892?redirect=false)** and commented  Pull request url: https://github.com/spring-projects/spring-framework/pull/1503  Prefix based version path strategy has a problem with css.  If css include any relative url, the server can not resolve relative url, because it has two version prefix in the url.  Example  The version: 1.0.0  The css url: http://localhost/application/1.0.0/css/test.css  Original css content  ```css body {     background-image: url(""img/picture.jpg"");     background-size: cover; } ```  Modified css content  ```css body {     background-image: url(""1.0.0/img/picture.jpg"");     background-size: cover; } ```  The picture.jpg url will be: http://localhost/application/1.0.0/css/1.0.0/img/picture.jpg but the expected is http://locahost/application/1.0.0/css/img/picture.jpg  Solution  We was make the UrlParameterFixedVersrionStrategy class.  The css url: http://localhost/application/css/test.css?v=1.0.0  Modified css content  ```css body {     background-image: url(""img/picture.jpg?v=1.0.0"");     background-size: cover; } ```  the picture.jpg url: http://localhost/application/css/img/picture.jpg?v=1.0.0  MvcConfig example  ```java import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter; import org.springframework.web.servlet.resource.AbstractVersionStrategy; import org.springframework.web.servlet.resource.UrlParameterFixedVersionStrategy; import org.springframework.web.servlet.resource.VersionResourceResolver;  @Configuration @ComponentScan({""test.controller""}) public class MvcConfig extends WebMvcConfigurerAdapter {      @Override     public void addResourceHandlers(ResourceHandlerRegistry registry) {         AbstractVersionStrategy fixedVersionStrategy = new UrlParameterFixedVersionStrategy(""1.0.0"");         VersionResourceResolver versionResourceResolver = new VersionResourceResolver()                 .addVersionStrategy(fixedVersionStrategy, ""/**"");          registry.addResourceHandler(""/**"")                 .addResourceLocations(""classpath:/other-resources/"")                 .resourceChain(true)                 .addResolver(versionResourceResolver);     }  } ```    ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1503","closed","status: declined,","spring-projects-issues","2017-08-23T09:18:59Z","2020-04-01T14:21:34Z"
"","20441","[support] capacity extend when the bean just been autowired [SPR-15886]","**[zhangzhijia](https://jira.spring.io/secure/ViewProfile.jspa?name=jiahut)** opened **[SPR-15886](https://jira.spring.io/browse/SPR-15886?redirect=false)** and commented  we konw  spring can do something when the bean been created ,eg  implement InitializingBean  could we do something  when the bean had been autowired, export some hook which we can extend before  the bean used .    --- No further details from [SPR-15886](https://jira.spring.io/browse/SPR-15886?redirect=false)","open","in: core,","spring-projects-issues","2017-08-22T03:08:15Z","2019-01-11T18:05:40Z"
"","20654","code encryption [SPR-16106]","**[ZhangXin](https://jira.spring.io/secure/ViewProfile.jspa?name=minicoral)** opened **[SPR-16106](https://jira.spring.io/browse/SPR-16106?redirect=false)** and commented  I use Spring to build my project, when the project is delivered, I would like to do my code encryption, how can I do. Thanks   --- No further details from [SPR-16106](https://jira.spring.io/browse/SPR-16106?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-10-24T09:49:37Z","2019-01-12T05:20:04Z"
"","20915","jdbcTemplate in JdbcDaoSupport should have non-null 'dataSource' [SPR-16368]","**[Zhang Jie](https://jira.spring.io/secure/ViewProfile.jspa?name=nkjackzhang)** opened **[SPR-16368](https://jira.spring.io/browse/SPR-16368?redirect=false)** and commented  The method checkDaoConfig() may throw a IllegalArgumentException which message is ""'dataSource' or 'jdbcTemplate' is required"", but doesn't require that jdbcTemplate has non-null 'dataSource' value, this message may confuse users, or maybe the IllegalArgumentException's message should just be ""'jdbcTemplate' is required""? Besides, I find the method 'checkDaoConfig()' in other subclasses of DaoSupport only confirm non-null '*Template', not confirm that the 'dataSource' or 'sessionFactory' or something else is non-null, and the IllegalArgumentException's message is just like message in JdbcDaoSupport, I don't know why.   ---  **Affects:** 4.3.13  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1641","closed","type: enhancement,","spring-projects-issues","2018-01-12T02:32:42Z","2018-01-25T09:20:30Z"
"","20902","It's very boring to mock a lot of autowired fields in a complex service when writing a test case. [SPR-16355]","**[YushanGao](https://jira.spring.io/secure/ViewProfile.jspa?name=boroborome)** opened **[SPR-16355](https://jira.spring.io/browse/SPR-16355?redirect=false)** and commented  When write a unit test case for a service, we have to write code like this to mock every depend services:  ReflectionTestUtils.setField(targetService, ""dependService1"", dependService1Mock); ReflectionTestUtils.setField(targetService, ""dependService2"", dependService2Mock); ReflectionTestUtils.setField(targetService, ""dependService3"", dependService3Mock); ....  There will be many code like this in a complex service, we need an easy way to replace this code.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1613","closed","status: superseded,","spring-projects-issues","2018-01-08T01:47:57Z","2021-11-26T14:09:41Z"
"","20453","List available media types for 406 Not Accepted response [SPR-15899]","**[Yi EungJun](https://jira.spring.io/secure/ViewProfile.jspa?name=eungjun.yi)** opened **[SPR-15899](https://jira.spring.io/browse/SPR-15899?redirect=false)** and commented  It would be helpful if the payload of 406 Not Accepted response contains a list of available media types so that client choose one of them, as outlined in RFC 7231.  > The server SHOULD generate a payload containing a list of available > representation characteristics and corresponding resource identifiers > from which the user or user agent can choose the one most > appropriate.  A user agent MAY automatically select the most > appropriate choice from that list.  However, this specification does > not define any standard for such automatic selection, as described in > Section 6.4.1. >  > https://tools.ietf.org/html/rfc7231#page-59    --- No further details from [SPR-15899](https://jira.spring.io/browse/SPR-15899?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-08-24T12:57:59Z","2019-02-22T07:56:13Z"
"","21021","Expose property ""complete"" of ResponseBodyEmitter [SPR-16476]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-16476](https://jira.spring.io/browse/SPR-16476?redirect=false)** and commented  ```java SseEmitter emitter = new SseEmitter(); while(!emitter.isComplete()){     emitter.send(); }  //other thread could stop it by emitter.complete(); ```    ---  **Affects:** 5.0.3","closed","type: enhancement,","spring-projects-issues","2018-02-08T03:17:53Z","2018-02-22T02:48:49Z"
"","21018","[Regression] NamedParameterUtils::parseSqlStatement cannot parse chinese param name [SPR-16473]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-16473](https://jira.spring.io/browse/SPR-16473?redirect=false)** and commented  ```java NamedParameterUtils.parseSqlStatement(""select username from user where username=:用户名""); ```  ```java Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: 29992 	at org.springframework.jdbc.core.namedparam.NamedParameterUtils.isParameterSeparator(NamedParameterUtils.java:394) 	at org.springframework.jdbc.core.namedparam.NamedParameterUtils.parseSqlStatement(NamedParameterUtils.java:141) ```  Caused by #20887  ---  **Affects:** 5.0.3  **Issue Links:** - #21017 NamedParameterUtils.isParameterSeparator throws ArrayIndexOutOfBoundsException for non ASCII characters (_**""duplicates""**_) - #20887 NamedParameterJdbcTemplate fails on PostgreSQL array","closed","status: duplicate,","spring-projects-issues","2018-02-06T10:43:49Z","2019-01-12T16:44:43Z"
"","20903","ComponentScanBeanDefinitionParser::parseTypeFilters should not fail on ClassNotFoundException [SPR-16356]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-16356](https://jira.spring.io/browse/SPR-16356?redirect=false)** and commented  For example, parent project have such configuration to filter mvc and websocket component from root ApplicationContext, let them instantiated by child ApplicationContext  ```xml                           ```  Some projects reuse such configuration and without spring-websocket dependency, it will throws ClassNotFoundException.  ``` Caused by: java.lang.ClassNotFoundException: org.springframework.web.socket.config.annotation.WebSocketConfigurer 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1333) ~[catalina.jar:8.0.44] 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1167) ~[catalina.jar:8.0.44] 	at org.springframework.util.ClassUtils.forName(ClassUtils.java:255) ~[spring-core-5.0.2.jar:5.0.2.RELEASE] 	at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.createTypeFilter(ComponentScanBeanDefinitionParser.java:239) ~[spring-context-5.0.2.jar:5.0.2.RELEASE] 	at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parseTypeFilters(ComponentScanBeanDefinitionParser.java:215) ~[spring-context-5.0.2.jar:5.0.2.RELEASE] ```  I think spring should be lenient here, if class not present and the filter rule should ignore, at least ""annotation"" and  ""assignable"" should do.   ---  **Affects:** 4.3.13, 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/092b3d4a526ee2118793b53fc428cdcc3fddb43d, https://github.com/spring-projects/spring-framework/commit/4adc820714bc363b909a2107e57069aadb21f757  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-01-08T03:34:06Z","2018-01-23T09:33:23Z"
"","20759","Expose parameter names from ParsedSql [SPR-16211]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-16211](https://jira.spring.io/browse/SPR-16211?redirect=false)** and commented  I'm developing a query console using NamedParameterJdbcTemplate, I need get parameter names from sql to construct UI form let user input parameters  ```java ParsedSql parsedSql = NamedParameterUtils.parseSqlStatement(sql); List params = parsedSql.getParameterNames(); //NOT public ```  It's better if NamedParameterJdbcTemplate could provide a method to get parameter name and parameter type, using PreparedStatement.getParameterMetaData().getParameterType()  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1597  **Issue Links:** - #15442 make org.springframework.jdbc.core.namedparam.ParsedSql public accessible  (_**""is duplicated by""**_) - #20887 NamedParameterJdbcTemplate fails on PostgreSQL array - #20908 SqlParameterSource needs method for extracting parameter names","open","type: enhancement,","spring-projects-issues","2017-11-18T03:29:07Z","2020-02-14T13:46:23Z"
"","20658","Supports annotating parameter annotations like @PathVariable on interface method [SPR-16110]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-16110](https://jira.spring.io/browse/SPR-16110?redirect=false)** and commented  ```java public interface EchoService { 	@RequestMapping(value = ""/echo/{name}"", method = RequestMethod.POST) 	public String echo(@PathVariable String name); } ```  ```java @RestController public class EchoServiceImpl implements EchoService { 	public String echo(String name) { 		return name; 	} } ```  My motivation: I need annotating `@PathVariable` and other parameter annotations in interface to create client proxy.  My proposal: Improve org.springframework.core.MethodParameter to find annotation like AnnotatedElementUtils.findMergedAnnotation() which used by method level annotation like  `@RequestMapping`. If it has side effects, improve RequestResponseBodyMethodProcessor and AbstractNamedValueMethodArgumentResolver directly.  My workaround: Duplicate Parameter annotations on concrete controller method.  ---  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface (_**""duplicates""**_) - #20270 `@RequestBody` annotation in interface is ignored","closed","type: enhancement,","spring-projects-issues","2017-10-25T09:36:01Z","2019-01-13T05:01:33Z"
"","20652","@RestController doesn't supports class which implements interface [SPR-16104]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-16104](https://jira.spring.io/browse/SPR-16104?redirect=false)** and commented  ```java public interface TestService { 	public String echo(String user); } ```  ```java @RestController public class TestController implements TestService { 	@RequestMapping(value = ""/echo"", method = RequestMethod.POST) 	public String echo(@RequestBody String string) { 		return string; 	} } ```  It will cause ""No mapping found for HTTP request"". Workaround 1: remove ""implements TestService"" Workaround 2: break `@RestController` into `@Controller` and `@ResponseBody`   --- No further details from [SPR-16104](https://jira.spring.io/browse/SPR-16104?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-10-24T03:06:27Z","2019-01-12T05:20:05Z"
"","20639","SchedulingConfigurer and JmsListenerConfigurer should respect @Order [SPR-16090]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-16090](https://jira.spring.io/browse/SPR-16090?redirect=false)** and commented  I have multiple SchedulingConfigurer, I want control order of SchedulingConfigurer::configureTasks, currently they are not ordered by `@Order`, perhaps other XxxConfigurer have the same problem.   ---  **Affects:** 4.3.12, 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40f3fb20c214779eb912c9121b7673ebe538ba10, https://github.com/spring-projects/spring-framework/commit/d1fac36e3ea03bda44fb44174ce07c521d4bdb82  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-10-20T02:22:23Z","2017-10-24T16:24:07Z"
"","20615","Annotations like @Service should add @AliasFor for @Component [SPR-16066]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-16066](https://jira.spring.io/browse/SPR-16066?redirect=false)** and commented  `@Service` is a specialization of `@Component`, like `@GetMapping` is a specialization of `@RequestMapping`, `@Service` should add `@AliasFor` like `@GetMapping`  ```java @Component public @interface Service {   @AliasFor(annotation=Component.class)   String value() default """"; } ```  We can get metadata from annotation via unified code  ```java Component component = AnnotatedElementUtils.getMergedAnnotation(clazz, @Component.class); String beanName = component.value(); ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/43b5e21947f3ad9682ae39cd8b8b5ae4b8f72c14, https://github.com/spring-projects/spring-framework/commit/625737f90ad07b08a301252a8b5a4d2f8652817d","closed","type: enhancement,","spring-projects-issues","2017-10-13T08:13:10Z","2017-10-24T16:24:07Z"
"","20603","Add convenient method to construct ParameterizedTypeReference from Type [SPR-16054]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-16054](https://jira.spring.io/browse/SPR-16054?redirect=false)** and commented  I am implementing MethodInterceptor to translate method call to rest api call, so I need translate method.getGenericReturnType() to ParameterizedTypeReference for ResponseEntity, Here is my hack:  ```java new ParameterizedTypeReference() {      @Override      public Type getType() {           return method.getGenericReturnType();      } } ```  I wish spring provide such as:  ```java public static ParameterizedTypeReference from(Type type){      return new ParameterizedTypeReference() {           @Override           public Type getType() {                return type;           }      }; } ```    ---  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-10-07T07:45:11Z","2017-10-10T14:41:47Z"
"","21121","spring webflux ServerRequest.bodyToMono().block will freeze for HTTP post request whose header size + body size > 1024 [SPR-16579]","**[Yang Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=ramgoer)** opened **[SPR-16579](https://jira.spring.io/browse/SPR-16579?redirect=false)** and commented  ```java // curl -vX POST --data @large_file.txt http://localhost:8080/test // if header + body > 1024, body.block() will freeze @Bean   public RouterFunction rf() {     return route(         POST(""/test""), req -> {           Mono body = req.bodyToMono(String.class);           System.out.println(body.block());           return ServerResponse.ok().body(Mono.just(""ok""), String.class);         }     );   } ```  ---  **Affects:** 5.0.4  **Issue Links:** - #21088 StackOverflowError when using WebFlux multipart file data handler with Undertow - #20757 Webflux server sometimes block when receiving large post body (_**""supersedes""**_)  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2018-03-11T06:21:47Z","2019-01-12T16:21:42Z"
"","21068","Reactive Web ServerRequest.bodyToMono don't work with requests with Content-Length > 1024 [SPR-16525]","**[Yang Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=ramgoer)** opened **[SPR-16525](https://jira.spring.io/browse/SPR-16525?redirect=false)** and commented  sample code:  ```java public static void main(String[] args) {     SpringApplication.run(DemoApplication.class, args);   }    @Bean   public RouterFunction rf() {     return route(POST(""/test""), req -> {       return ServerResponse.ok().body(req.bodyToMono(String.class), String.class);     });   } ```  then run curl -d '**chars more than 1024**' http://localhost:8080/test connection will be hanged opened without any data returned.   ---  **Affects:** 5.0.4","closed","status: invalid,","spring-projects-issues","2018-02-22T14:27:16Z","2019-01-12T05:19:23Z"
"","20874","DefaultMessageListenerContainer shutdown exceptions with ActiveMQ [SPR-16327]","**[yael](https://jira.spring.io/secure/ViewProfile.jspa?name=yaelal99)** opened **[SPR-16327](https://jira.spring.io/browse/SPR-16327?redirect=false)** and commented  upon system shutdown we get exceptions from DefaultMessageListenerContainer happens every time something here is not closing correctly  ```java 27 09:19:29.603  INFO [Thread-11] AnnotationConfigEmbeddedWebApplicationContext:984 : Closing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@68702e03: startup date [Wed Dec 27 09:17:35 IST 2017]; root of context hierarchy 27 09:19:29.607  INFO [Thread-11]       o.s.c.support.DefaultLifecycleProcessor:358 : Stopping beans in phase 2147483647 27 09:19:29.628  WARN [DefaultMessageListenerContainer-1]    org.apache.activemq.jms.pool.PooledSession:121 : Caught exception trying rollback() when putting session back into the pool, will invalidate. javax.jms.IllegalStateException: The Session is closed javax.jms.IllegalStateException: The Session is closed 	at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:771) 	at org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:596) 	at org.apache.activemq.jms.pool.PooledSession.close(PooledSession.java:118) 	at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:108) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:1207) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1066) 	at java.lang.Thread.run(Thread.java:748) 27 09:19:29.630  WARN [DefaultMessageListenerContainer-1]       o.s.j.l.DefaultMessageListenerContainer:880 : Setup of JMS message listener invoker failed for destination 'test.scan.responses' - trying to recover. Cause: null 27 09:19:29.635  WARN [DefaultMessageListenerContainer-1]    org.apache.activemq.jms.pool.PooledSession:121 : Caught exception trying rollback() when putting session back into the pool, will invalidate. javax.jms.IllegalStateException: The Session is closed javax.jms.IllegalStateException: The Session is closed 	at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:771) 	at org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:596) 	at org.apache.activemq.jms.pool.PooledSession.close(PooledSession.java:118) 	at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:108) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:1207) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1066) 	at java.lang.Thread.run(Thread.java:748) 27 09:19:29.635  WARN [DefaultMessageListenerContainer-1]       o.s.j.l.DefaultMessageListenerContainer:880 : Setup of JMS message listener invoker failed for destination 'test.realtime.responses' - trying to recover. Cause: The Session is closed 27 09:19:29.636  WARN [DefaultMessageListenerContainer-2]    org.apache.activemq.jms.pool.PooledSession:121 : Caught exception trying rollback() when putting session back into the pool, will invalidate. javax.jms.IllegalStateException: The Session is closed javax.jms.IllegalStateException: The Session is closed 	at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:771) 	at org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:596) 	at org.apache.activemq.jms.pool.PooledSession.close(PooledSession.java:118) 	at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:108) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:1207) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1066) 	at java.lang.Thread.run(Thread.java:748) 27 09:19:29.647  WARN [Thread-11]     c.c.m.a.connectors.AppServerCommListeners:137 : Shutting down 3 jms listeners. 27 09:19:29.658  WARN [DefaultMessageListenerContainer-1]    org.apache.activemq.jms.pool.PooledSession:121 : Caught exception trying rollback() when putting session back into the pool, will invalidate. javax.jms.IllegalStateException: The Session is closed javax.jms.IllegalStateException: The Session is closed 	at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:771) 	at org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:596) 	at org.apache.activemq.jms.pool.PooledSession.close(PooledSession.java:118) 	at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:108) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:1207) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1066) 	at java.lang.Thread.run(Thread.java:748) 27 09:19:29.658  WARN [DefaultMessageListenerContainer-1]       o.s.j.l.DefaultMessageListenerContainer:880 : Setup of JMS message listener invoker failed for destination 'test.scan.requests' - trying to recover. Cause: The Session is closed 27 09:19:29.668  WARN [Thread-11]    org.apache.activemq.jms.pool.PooledSession:121 : Caught exception trying rollback() when putting session back into the pool, will invalidate. javax.jms.IllegalStateException: The Session is closed javax.jms.IllegalStateException: The Session is closed 	at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:771) 	at org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:596) 	at org.apache.activemq.jms.pool.PooledSession.close(PooledSession.java:118) 	at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:108) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:1207) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.access$000(DefaultMessageListenerContainer.java:1032) 	at org.springframework.jms.listener.DefaultMessageListenerContainer.doShutdown(DefaultMessageListenerContainer.java:579) 	at org.springframework.jms.listener.AbstractJmsListeningContainer.shutdown(AbstractJmsListeningContainer.java:237) 	at org.springframework.jms.listener.AbstractJmsListeningContainer.destroy(AbstractJmsListeningContainer.java:177) 	at org.springframework.jms.config.JmsListenerEndpointRegistry.destroy(JmsListenerEndpointRegistry.java:252) 	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:272) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) 	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1006) 	at org.springframework.context.support.AbstractApplicationContext$2.run(AbstractApplicationContext.java:929) 27 09:19:29.671  WARN [Thread-11]    org.apache.activemq.jms.pool.PooledSession:121 : Caught exception trying rollback() when putting session back into the pool, will invalidate. javax.jms.IllegalStateException: The Session is closed javax.jms.IllegalStateException: The Session is closed 	at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:771) 	at org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:596) 	at org.apache.activemq.jms.pool.PooledSession.close(PooledSession.java:118) 	at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:108) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:1207) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.access$000(DefaultMessageListenerContainer.java:1032) 	at org.springframework.jms.listener.DefaultMessageListenerContainer.doShutdown(DefaultMessageListenerContainer.java:579) 	at org.springframework.jms.listener.AbstractJmsListeningContainer.shutdown(AbstractJmsListeningContainer.java:237) 	at org.springframework.jms.listener.AbstractJmsListeningContainer.destroy(AbstractJmsListeningContainer.java:177) 	at org.springframework.jms.config.JmsListenerEndpointRegistry.destroy(JmsListenerEndpointRegistry.java:252) 	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:272) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) 	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1006) 	at org.springframework.context.support.AbstractApplicationContext$2.run(AbstractApplicationContext.java:929) 27 09:19:29.673  WARN [Thread-11]    org.apache.activemq.jms.pool.PooledSession:121 : Caught exception trying rollback() when putting session back into the pool, will invalidate. javax.jms.IllegalStateException: The Session is closed javax.jms.IllegalStateException: The Session is closed 	at org.apache.activemq.ActiveMQSession.checkClosed(ActiveMQSession.java:771) 	at org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:596) 	at org.apache.activemq.jms.pool.PooledSession.close(PooledSession.java:118) 	at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:108) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:1207) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.access$000(DefaultMessageListenerContainer.java:1032) 	at org.springframework.jms.listener.DefaultMessageListenerContainer.doShutdown(DefaultMessageListenerContainer.java:579) 	at org.springframework.jms.listener.AbstractJmsListeningContainer.shutdown(AbstractJmsListeningContainer.java:237) 	at org.springframework.jms.listener.AbstractJmsListeningContainer.destroy(AbstractJmsListeningContainer.java:177) 	at org.springframework.jms.config.JmsListenerEndpointRegistry.destroy(JmsListenerEndpointRegistry.java:252) 	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:272) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) 	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1006) 	at org.springframework.context.support.AbstractApplicationContext$2.run(AbstractApplicationContext.java:929) 27 09:19:29.755  INFO [Thread-11]      o.s.s.concurrent.ThreadPoolTaskScheduler:203 : Shutting down ExecutorService 'defaultScheduler' 27 09:19:29.795  INFO [Thread-11] .s.o.j.LocalContainerEntityManagerFactoryBean:548 : Closing JPA EntityManagerFactory for persistence unit 'default'  Process finished with exit code 0  ```    ---  **Affects:** 4.3.9","open","in: messaging,","spring-projects-issues","2017-12-27T07:23:33Z","2021-05-12T18:07:15Z"
"","20610","FormHttpMessageConverter doesn't support utf-8 filename [SPR-16061]","**[Xinyi.Liu](https://jira.spring.io/secure/ViewProfile.jspa?name=asmburning)** opened **[SPR-16061](https://jira.spring.io/browse/SPR-16061?redirect=false)** and commented  I want to use FeignClient to pass MultipartFile .https://github.com/pcan/feign-client-test this project doesn't work with chinese filename,maybe all non-ascII filename. At first i find this jira  #19115 then i upgrade spring-boot-starter to 1.5.7.RELEASE but it still doesn't work! Then i debuged again to find why,FormHttpMessageConverter line 408 getFilename seems to support filename*= , but FormHttpMessageConverter line 368 doesn't pass a charset to  HttpHeaders line 682 , and at line 708 charset seems to be Deprecated. I tried UrlEncoder to encode filename and set FormHttpMessageConverter.setMultipartCharset in github project file FeignSpringFormEncoder,none of my tries works.  ---  **Affects:** 4.3.11  **Reference URL:** https://github.com/pcan/feign-client-test  **Issue Links:** - #19115 HttpHeaders.setContentDispositionFormData() doesn't encode non-acsii characters correctly","closed","in: web,","spring-projects-issues","2017-10-12T04:46:18Z","2019-01-14T04:33:46Z"
"","20926","InterceptingClientHttpRequest is always buffered despite the delegate [SPR-16380]","**[Wyatt Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=wyatt)** opened **[SPR-16380](https://jira.spring.io/browse/SPR-16380?redirect=false)** and commented  When writing an application, I had to upload a large file (~600 MB) using the RestTemplate, as well as use an oAuth2 bearer header. To do this, I added a custom interceptor to write the oauth header:  ```java restTemplate.getInterceptors().add(new OauthAuthorizationInterceptor(accessToken)); ```  Because the file is so large, I was getting an OutOfMemoryException, so I disabled buffering:  ```java HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(); requestFactory.setBufferRequestBody(false); restTemplate = new RestTemplate(requestFactory); ```  The application continued getting the memory exception. Upon investigation, it appears as though the ClientHttpRequestFactory is wrapped by an InterceptingClientHttpRequestFactory because of the interceptor (InterceptingHttpAccessor#getRequestFactory). InterceptingClientHttpRequestFactory.getRequestFactory() returns a InterceptingClientHttpRequest, which is a AbstractBufferingClientHttpRequest (InterceptingClientHttpRequestFactory#createRequest). Despite requestFactory.setBufferRequestBody(false), a buffered request is made.  My temporary solution is to manually add the Authorization header everywhere and eliminate the interceptor so InterceptingHttpAccessor#getRequestFactory returns my original HttpComponentsClientHttpRequestFactory with buffering disabled instead of a InterceptingClientHttpRequestFactory wrapping it.  The long term solution should be for the InterceptingClientHttpRequestFactory to be allowed to be streaming instead of buffered.  ---  **Affects:** 4.3.9  **Issue Links:** - #21650 HttpComponentsStreamingClientHttpRequest fails if restTemplate has interceptors","closed","type: enhancement,","spring-projects-issues","2018-01-15T00:14:52Z","2019-01-11T15:14:51Z"
"","20498","when we set ""localeResolver"" to realize the i18n dynamic switching, if we access to the jsp page directly, it's invalid. [SPR-15944]","**[wuyuyan](https://jira.spring.io/secure/ViewProfile.jspa?name=wuyuyan)** opened **[SPR-15944](https://jira.spring.io/browse/SPR-15944?redirect=false)** and commented  when we set ""localeResolver"" to realize the i18n dynamic switching, if we access to the jsp page directly, it's invalid.  spring-framework/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContext.java  public RequestContext(HttpServletRequest request, `@Nullable` HttpServletResponse response, `@Nullable` ServletContext servletContext, `@Nullable` Map model) {      	this.request = request;     	this.response = response;     	this.model = model;          	// Fetch WebApplicationContext, either from DispatcherServlet or the root context.     	// ServletContext needs to be specified to be able to fall back to the root context!     	WebApplicationContext wac = (WebApplicationContext) request.getAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE);     	if (wac == null) {     		wac = RequestContextUtils.findWebApplicationContext(request, servletContext);     		if (wac == null) {     			throw new IllegalStateException(""No WebApplicationContext found: not in a DispatcherServlet "" +     					""request and no ContextLoaderListener registered?"");     		}     	}     	this.webApplicationContext = wac;          	Locale locale = null;     	TimeZone timeZone = null;          	// Determine locale to use for this RequestContext.     	LocaleResolver localeResolver = RequestContextUtils.getLocaleResolver(request);     	if (localeResolver instanceof LocaleContextResolver) {     		LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request);     		locale = localeContext.getLocale();     		if (localeContext instanceof TimeZoneAwareLocaleContext) {     			timeZone = ((TimeZoneAwareLocaleContext) localeContext).getTimeZone();     		}     	}  line 228 LocaleResolver localeResolver = RequestContextUtils.getLocaleResolver(request); it's not get theLocaleResolver.   ---  **Affects:** 4.3.10  **Reference URL:** https://github.com/spring-projects/spring-framework/compare/master...wuyuyan:patch-1","closed","status: superseded,","spring-projects-issues","2017-09-09T09:35:48Z","2021-11-12T13:46:34Z"
"","20671","SpelExpression throws NullPointerException instead of EvaluationException for primitives [SPR-16123]","**[Wojciech Gruszczyk](https://jira.spring.io/secure/ViewProfile.jspa?name=jestem_wojtek)** opened **[SPR-16123](https://jira.spring.io/browse/SPR-16123?redirect=false)** and commented  Bug proof:  ```java package com.demo.bugproof;  import org.junit.Test; import org.springframework.expression.EvaluationException; import org.springframework.expression.spel.standard.SpelExpressionParser;   public class SpelNPEDemoTest {  	@Test(expected = EvaluationException.class) 	public void npeBugProof() 	{ 		new SpelExpressionParser().parseExpression(""demo"").setValue(new SomePOJO(), null); 	}  	private class SomePOJO 	{ 		private boolean demo;  		public boolean isDemo() 		{ 			return demo; 		}  		public void setDemo(final boolean demo) 		{ 			this.demo = demo; 		} 	}  }  ```  ---  **Affects:** 4.3.11  **Issue Links:** - #20215 Backport selected refinements from the nullability efforts in 5.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fd6f2bd6a42ff385f2cc6bbd213ee14a7c40c10d","closed","in: core,","spring-projects-issues","2017-10-26T19:39:57Z","2019-01-11T13:15:09Z"
"","21077","testBindInstantFromJavaUtilDate fails on systems in the Pacific/Auckland time zone [SPR-16534]","**[William Hoyle](https://jira.spring.io/secure/ViewProfile.jspa?name=teppic)** opened **[SPR-16534](https://jira.spring.io/browse/SPR-16534?redirect=false)** and commented  The `DateTimeFormattingTests.testBindInstantFromJavaUtilDate` test fails if run on a machine with a default time zone of ""Pacific/Auckland"" (UTC+12/13 depending on the time of year).  To reproduce:  Force the time zone in _spring-context/spring-context.gradle_:  ``` test {     systemProperty 'user.timezone', 'Pacific/Auckland' } ```  Run the test:  ``` ./gradlew :spring-context:test --tests org.springframework.format.datetime.standard.DateTimeFormattingTests ```  Results in:  ``` > Task :spring-context:test FAILED  org.springframework.format.datetime.standard.DateTimeFormattingTests > testBindInstantFromJavaUtilDate FAILED     java.lang.AssertionError at DateTimeFormattingTests.java:366 ```    ---  **Affects:** 4.3.14, 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d89de06e396d2d8c135b44552865c3703b9fc73, https://github.com/spring-projects/spring-framework/commit/8181c0237f9ef3f10e527dd76d9ac676879fbcc3  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-02-26T03:34:18Z","2018-04-03T20:34:27Z"
"","21076","Race condition in ConcurrentMapCache [SPR-16533]","**[William Hoyle](https://jira.spring.io/secure/ViewProfile.jspa?name=teppic)** opened **[SPR-16533](https://jira.spring.io/browse/SPR-16533?redirect=false)** and commented  `ConcurrentMapCache.get(Object, Callable)` can throw a `NullPointerException` if the key is evicted by another thread during the get.  From the source:  ```java if (this.store.containsKey(key)) { 	// get(key) may return null if another thread evicts the key   	return (T) get(key).get(); } ```  This is fixed by #18383 in the 5.0 branch.  Test code:  ```java import org.springframework.cache.concurrent.ConcurrentMapCache;  import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.atomic.AtomicInteger;  public class Scratch {     public static void main(String[] args) {         ConcurrentMapCache cache = new ConcurrentMapCache(""foo"");          ExecutorService executor = Executors.newCachedThreadPool();         AtomicInteger count = new AtomicInteger();         int iterations = 100;         for (int i = 0; i < iterations; i++) {             executor.execute(() -> {                 for (int j = 0; j < iterations; j++) {                     int k = j;                     try {                         if (cache.get(""test"", () -> k) != null) {                             count.incrementAndGet();                         }                     } catch (Throwable t) {                         // ignore problems                     }                     cache.evict(""test"");                 }             });         }         executor.shutdown();          int expected = iterations * iterations;         if (count.get() != expected) {             throw new AssertionError(""Expected "" + expected + "", got "" + count);         }     } } ```  ---  **Affects:** 4.3.14  **Issue Links:** - #18383 Better synchronization in ConcurrentMapCache  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06e2bada0a9dbaf54b15e79f3394329addb718b8","closed","in: core,","spring-projects-issues","2018-02-25T21:59:21Z","2019-01-11T14:35:45Z"
"","20921","Global exception handler catch wrong exception [SPR-16375]","**[WhatAKitty](https://jira.spring.io/secure/ViewProfile.jspa?name=whatakitty)** opened **[SPR-16375](https://jira.spring.io/browse/SPR-16375?redirect=false)** and commented  The controller file:  ```java @RequestMapping('/test') public void test() {   throw new BusinessException(""excpetion1""); } ```  The exception handler file:  ```java @RequestMapping('/test') @RestControllerAdvice(basePackages = ""com.gnet"") public class BusinessExcepionAdvice {      @ExceptionHandler(BusinessException.class)     public ResponseEntity businessException(final BusinessException e) {         throw new AnotherException(""exception2"")     }  } ```  I think when I visit this controller method, it will give me the response as below:  ```json {     ""timestamp"": 1515751322930,     ""status"": 500,     ""error"": ""Internal Server Error"",     ""exception"": ""com.gnet.business.exception.AnotherException"",     ""message"": ""excpetion2"",     ""path"": ""/test"" } ```  But unfortunately, the result is this:  ```json {     ""timestamp"": 1515751322930,     ""status"": 500,     ""error"": ""Internal Server Error"",     ""exception"": ""com.gnet.business.exception.BusinessException"",     ""message"": ""excpetion1"",     ""path"": ""/test"" } ```  It will make people confused, especially if you have some code error in exception handler instead of throw exception manually as above.   ---  **Affects:** 4.3.10","closed","in: core,","spring-projects-issues","2018-01-12T17:58:58Z","2019-01-11T15:16:44Z"
"","20730","JDBCTemplate.extractOutputParameters() should not expect ordered parameters [SPR-16182]","**[weidox](https://jira.spring.io/secure/ViewProfile.jspa?name=weidox)** opened **[SPR-16182](https://jira.spring.io/browse/SPR-16182?redirect=false)** and commented  Noticed in 4.3.3 while analyzing, see the same in fresh code I found in Github so I guess it will be 5.0.1 or newer. It is possible to refer parameters by name in CallableStatement and SQL driver is supposed to determine column number by itself, however SqlOutParameters are extracted by definition order in Java code which may not match what is in the stored procedure. In short, it breaks a bit of default JDBC functionality. Technically this is caused in that extractOutputParameters() is calling cs.getObject(int) instead of cs.getObject(String) (plus one more case with SqlReturnType).   ---  **Affects:** 5.0.1","open","type: enhancement,","spring-projects-issues","2017-11-09T16:07:31Z","2017-11-10T17:15:08Z"
"","20551","UriComponentsBuilder inconsistent encode/decode query params behavior [SPR-16002]","**[Vsevolod Kalinin](https://jira.spring.io/secure/ViewProfile.jspa?name=flash)** opened **[SPR-16002](https://jira.spring.io/browse/SPR-16002?redirect=false)** and commented  After working with that for quite some time I have a strong feeling that something is wrong with `UriComponentsBuilder` query params encoding/decoding. Will try to explain it step by step now + my vision to the problem (still with hope of doing something wrong/missing something :)). Will use _fromHttpUrl(..)_ in examples, but the behavior is the same for all _from*(..)_ methods of all `*UriComponentsBuilder` classes (and it hurt even more when using something like _fromHttpRequest(..)_).  ## Use cases  So, consider I want to take current request URL, modify it (add/remove query params, etc.) and eventually use it somewhere else. Again there are _fromHttpUrl(..)_ calls below for simplicity; IRL they are _fromHttpRequest(..)_, etc.  1. h3. Double-encoded query params from original URL  ```java UriComponentsBuilder ucb = UriComponentsBuilder.fromHttpUrl(""http://host.com?name=Tom%26Jerry""); ucb.queryParam(""album"", ""S&M""); ucb.toUriString(); // http://host.com?name=Tom%2526Jerry&album=S%26M ```  It returns `http://host.com?name=Tom%2526Jerry&album=S%26M` which is wrong (see double-encoded initial _name_ param). I was only able to solve the above with something like:  ```java UriComponentsBuilder ucb = UriComponentsBuilder.fromHttpUrl(""http://host.com?name=Tom%26Jerry""); ucb.queryParam(""album"", java.net.URLEncoder.encode(""S&M"")); ucb.build(true).toUriString(); ```  Now it returns the correct `http://host.com?name=Tom%26Jerry&album=S%26M`, but the whole thing got a bit ugly. 1. h3. application/x-www-form-urlencoded whitespaces    Now the request has application/x-www-form-urlencoded whitespace (converted to +) and taught by the bitter experience above we use `ucb.build(true).toUriString()`:  ```java UriComponentsBuilder ucb = UriComponentsBuilder.fromHttpUrl(""http://host.com?name=Tom+Jerry""); ucb.queryParam(""album"", ""S&M""); ucb.build(true).toUriString(); ```  But it's _java.lang.IllegalArgumentException_ now - _UriComponentsBuilder_ doesn't like ""+"".  Reverting to the initial approach doesn't work either:  ```java UriComponentsBuilder ucb = UriComponentsBuilder.fromHttpUrl(""http://host.com?name=Tom+Jerry""); ucb.queryParam(""album"", ""S&M""); ucb.toUriString(); ```  results in `http://host.com?name=Tom%2BJerry&album=S%26M` - note ""+"" being encoded now.  The only option is to do an ugly workaround mentioned in #14805.  ## Probable solution  IMHO it would have been much more convenient if `UriComponentsBuilder` decoded query params while parsing (presumably with application/x-www-form-urlencoded support; at least when creating from a request where MIME type should be available). This way both cases above are solved + a test  ```java final String requestHttpUrl = ; final String processedHttpUrl = UriComponentsBuilder.fromHttpUrl(requestHttpUrl).toUriString(); assertEquals(processedHttpUrl, requestHttpUrl); ```  will pass for any valid URL which is what I'd expect. Although backward compatibility concern won't make it happen easily...  Looking forward for help with this one :D  ---  **Affects:** 4.3.11  **Issue Links:** - #19394 UriComponentBuilder doesn't work with encoded HTTP URL having '+'. (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-09-25T14:22:32Z","2019-01-12T16:44:53Z"
"","21039","ExceptionHandlerExceptionResolver advice applicability check may fail against interface-based controller proxy [SPR-16496]","**[Vladislav Kisel](https://jira.spring.io/secure/ViewProfile.jspa?name=encircled)** opened **[SPR-16496](https://jira.spring.io/browse/SPR-16496?redirect=false)** and commented  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver uses HandlerMethod#getBeanType during handler lookup. This method may return com.sun.proxy.Proxy when controller impl is a proxy.  Thus ControllerAdvice basePackages/basePackageClasses/assignableTypes are not working correctly, because ControllerAdviceBean#isApplicableToBeanType receives Proxy class as an argument.   ---  **Affects:** 4.3.14, 5.0.3  **Attachments:** - [test-controller-advice.zip](https://jira.spring.io/secure/attachment/25397/test-controller-advice.zip) (_65.69 kB_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1684  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-02-14T09:32:28Z","2018-02-19T12:19:21Z"
"","20833","DefaultLifecycleProcessor#stop doesn't check for beans in parent context [SPR-16286]","**[Vladislav Fefelov](https://jira.spring.io/secure/ViewProfile.jspa?name=fvlad42)** opened **[SPR-16286](https://jira.spring.io/browse/SPR-16286?redirect=false)** and commented  When calling DefaultLifecycleProcessor#stop it stops Lifecycle beans only in the current context, not checking for beans in the parent context.   ---  **Affects:** 4.3.13","closed","in: core,","spring-projects-issues","2017-12-11T17:05:29Z","2019-01-12T16:32:48Z"
"","20967","Unauthorized WebSocket response is never send for reactive sockets [SPR-16421]","**[Vladimir Tsanev](https://jira.spring.io/secure/ViewProfile.jspa?name=tsachev)** opened **[SPR-16421](https://jira.spring.io/browse/SPR-16421?redirect=false)** and commented  I am trying to implement some security on websockets with webflux.  I use current spring-boot 2 snapshot with spring-webflux 5.0.3.RELEASE and spring-security 5.0.1.RELEASE.  It seems that the commense in https://github.com/spring-projects/spring-security/blob/master/web/src/main/java/org/springframework/security/web/server/authentication/HttpBasicServerAuthenticationEntryPoint.java#L42-L46 does not call send() and I see that this is true for all the entry points. It works as expected for regular http request but for requests with header 'upgrade: websocket' it never completes.  The reason for this is that reactor-netty server operations will not call writeAndFlush on  its own for upgrade requests when they complete (https://github.com/reactor/reactor-netty/blob/master/src/main/java/reactor/ipc/netty/http/server/HttpServerOperations.java#L384-L386).  I am not sure if this is a bug in reactor-netty, spring-webflux or in spring-security. I could probably workaround this with my custom entry point that calls send.  Any advice appreciated.   ---  **Affects:** 5.0.3","closed","status: declined,","spring-projects-issues","2018-01-26T13:42:58Z","2019-01-12T16:21:53Z"
"","20568","javassit linkage error with spring-aop while deploying on websphere java 8 [SPR-16019]","**[vkp](https://jira.spring.io/secure/ViewProfile.jspa?name=vkp)** opened **[SPR-16019](https://jira.spring.io/browse/SPR-16019?redirect=false)** and commented  I have tried to deploy JDK1.8 compatible .EAR file on websphere java 8 . I am getting following exception  ```java Caused by: java.lang.IllegalStateException: javassist.CannotCompileException: by java.lang.LinkageError: org.springframework.aop.framework.ProxyCreatorSupport         at org.springframework.aop.framework.JavassistApplicationContext.(JavassistApplicationContext.java:61)         ... 114 more Caused by: javassist.CannotCompileException: by java.lang.LinkageError: org.springframework.aop.framework.ProxyCreatorSupport         at javassist.ClassPool.toClass(ClassPool.java:1120)         at javassist.ClassPool.toClass(ClassPool.java:1063)         at javassist.ClassPool.toClass(ClassPool.java:1021)         at javassist.CtClass.toClass(CtClass.java:1259)         at org.springframework.aop.framework.JavassistApplicationContext.(JavassistApplicationContext.java:59)         ... 114 more Caused by: java.lang.LinkageError: org.springframework.aop.framework.ProxyCreatorSupport         at java.lang.ClassLoader.defineClassImpl(Native Method)         at java.lang.ClassLoader.defineClass(ClassLoader.java:346)         at java.lang.ClassLoader.defineClass(ClassLoader.java:283)         at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)         at java.lang.reflect.Method.invoke(Method.java:508)         at javassist.ClassPool.toClass2(ClassPool.java:1133)         at javassist.ClassPool.toClass(ClassPool.java:1114)         ... 118 more     ```  I am using spring  ```java          4.2.5.RELEASE         2.4.0.RELEASE         4.0.0.RELEASE         1.6.1         true         4.8.2         3.5.6-Final     ```  and javassit  ```java                       javassist             javassist             3.19.0-GA          ```  But when i deploy same application on JDK 1.6 , it was working fine with out any exception error .  I am getting errors on  ```java package org.spring.aop.framework;  import javassist.ClassPool; import javassist.CtClass; import javassist.CtConstructor; import javassist.LoaderClassPath; import org.springframework.web.context.support.XmlWebApplicationContext;  public class JavassistApplicationContext extends XmlWebApplicationContext {      static {         ClassPool classPool = ClassPool.getDefault();         try {             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();             classPool.appendClassPath(new LoaderClassPath(classLoader));              CtClass cc = classPool.get(""org.spring.aop.framework.ProxyCreatorSupport"");             CtConstructor c = cc.getConstructors()[0];             c.insertAfter(""$0.aopProxyFactory = new org.spring.aop.framework.JavassistAopProxyFactory();"");             cc.toClass();         } catch (Exception e) {             throw new IllegalStateException(e);         }     } } ```  Any idea ? Anything i am missing ?   ---  **Affects:** 4.3.5","closed","in: core,","spring-projects-issues","2017-09-27T19:23:46Z","2019-01-12T05:20:13Z"
"","21011","Add Thrift RPC support to WebFlux [SPR-16466]","**[Vitaly Romashkin](https://jira.spring.io/secure/ViewProfile.jspa?name=vit34)** opened **[SPR-16466](https://jira.spring.io/browse/SPR-16466?redirect=false)** and commented  I concerned into building high-performance, reactive microservices using Spring Webflux and Spring Boot 2.0. Now one possible way of communication between microservices is RPC. Curently in our team we are using Spring Boot 1.x, Spring 4.x, Tomcat/Jetty, Thrift as RPC library and have synchronious and blocking RPC calls between services. To boost performance In the nearest future we are going to switch to async and non-blocking communication. Binding async and non-blocking Netty/RxNetty runtime, running under Spring Webflux, with async Thrift RPC would be a greate improvement. For ordinary user such operation migh be not trivial. So, could you consider adding such integration to Spring web-reactive/web-flux?  As a reference there is a very interesting project - [project armeria](https://github.com/line/armeria). You could adopt ideas/code from it or even better colloborate with its authors to make such integration.  ---  **Reference URL:** #21011  **Issue Links:** - #20905 Provide gRPC support  1 votes, 3 watchers","open","in: web,","spring-projects-issues","2018-02-04T20:34:20Z","2020-10-27T06:29:26Z"
"","20989","Allow ""release on close"" for DataBuffer.asInputStream [SPR-16444]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-16444](https://jira.spring.io/browse/SPR-16444?redirect=false)** and commented  We should add a variant of `DataBuffer.asInputStream` that releases the underlying data buffer when the input stream is closed.  Further more, we should enhance the javadoc for `DataBuffer.asInputStream()` to point out that InputStream#close will not release the underlying buffer. So the user is responsible to release the buffer using `DataBufferUtils.release()`.   ---  **Affects:** 5.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb61af1882a3bb3ce1dcca7f1194c7162a2c3048","closed","in: core,","spring-projects-issues","2018-01-31T11:56:56Z","2018-02-19T12:19:19Z"
"","20928","root cause (stack trace) swallowed in AbstractApplicationContext [SPR-16382]","**[Victor Volle](https://jira.spring.io/secure/ViewProfile.jspa?name=vivo)** opened **[SPR-16382](https://jira.spring.io/browse/SPR-16382?redirect=false)** and commented  Spring boot project. I had an Entity with a duplicate column.  When starting the application I get an error message: ""... Unable to build Hibernate SessionFactory"" But without any stack trace.  1) The TomcatStarter only logs the Exception message 2) The AbstractApplicationContext again only logs the message:  ``` catch (BeansException ex) {   if (logger.isWarnEnabled()) {     logger.warn(""Exception encountered during context initialization - "" +         ""cancelling refresh attempt: "" + ex);   }   ... ```  But none of the logged messages shows the root cause.  This could be either handled by the TomcatStarter or by the AbstractApplicationContext   ---  **Affects:** 5.0.2  **Attachments:** - [spring.log](https://jira.spring.io/secure/attachment/25332/spring.log) (_9.91 kB_)","closed","in: core,","spring-projects-issues","2018-01-15T20:08:16Z","2019-01-12T05:19:33Z"
"","21065","UriComponentsBuilder::pathSegment can't handle urls within urls [SPR-16522]","**[Victor Romero](https://jira.spring.io/secure/ViewProfile.jspa?name=vromero)** opened **[SPR-16522](https://jira.spring.io/browse/SPR-16522?redirect=false)** and commented  UriComponentsBuilder doesn't escape pathSegments that have an url inside:  The following code:  ```java URI uri = UriComponentsBuilder.fromHttpUrl(""http://127.0.0.1:"" + randomServerPort + ""/"")               .pathSegment(""http://url.com/within"")               .build().toUri(); System.out.println(uri.toString()); ```  Will generate:  http://127.0.0.1:43963/http://url.com/within  Project that reproduces: https://github.com/vromero/webclient-issue-uri-in-uri   ---  **Affects:** 5.0.4  **Reference URL:** https://github.com/vromero/webclient-issue-uri-in-uri","closed","in: core,","spring-projects-issues","2018-02-21T19:52:00Z","2021-03-19T16:29:20Z"
"","20459","Controller exclusion does not work [SPR-15905]","**[Victor Khovanskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=victor.khovanskiy)** opened **[SPR-15905](https://jira.spring.io/browse/SPR-15905?redirect=false)** and commented  I have 2 artifacts which are included to main project. The first one contains package ""com.parent.controller"". The second - ""com.child.controller"". Each package contains one contoller - ParentController and ChildContoller, respectively. Both of them has the same RequestMapping (for example just ""/abc""). Also I have included exlude filter for ParentController. But in any case I have an exception:  ``` java.lang.IllegalStateException: Ambiguous mapping. ```  ```java @SpringBootConfiguration @EnableAutoConfiguration @EntityScan(basePackages = {""com.parent"", ""com.child""}) @ComponentScan(basePackages = {""com.parent"", ""com.child""}, excludeFilters = {         @ComponentScan.Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),         @ComponentScan.Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class),         @ComponentScan.Filter(type = FilterType.REGEX, pattern = ""com\\.parent\\..*Controller""),         @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ParentController.class) }) ```  I suppose it happens due to AbstractHandlerMethodMapping uses getApplicationContext().getBeanNamesForType(Object.class) in initHandlerMethods method to retrieve the list of bean names which are used to RequestMapping scan. And this list contains ParentController and ChildController names. But it should not.   ---  **Affects:** 4.3.9","closed","in: core,","spring-projects-issues","2017-08-27T19:07:32Z","2019-01-12T05:20:22Z"
"","20807","Document WebFlux rendering of String and Flux with JSON [SPR-16260]","**[Victor Herraiz Posada](https://jira.spring.io/secure/ViewProfile.jspa?name=victorherraiz)** opened **[SPR-16260](https://jira.spring.io/browse/SPR-16260?redirect=false)** and commented  The following method produces an invalid JSON output:  ```java  @GetMapping(value = ""/list"", produces = APPLICATION_JSON_UTF8_VALUE)  public Flux getStringList() {      return Flux.fromIterable(Arrays.asList(""Hola"", ""Mundo"")); } ```  In my opinion, this should be:  ```json [""Hola"", ""Mundo""] ```  Instead of:  ``` HolaMundo ```    ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7bf9b767fda40f175123e96858cab0185c73ee7c, https://github.com/spring-projects/spring-framework/commit/542de82c5fed3083b079673c791e91731e3c32e5","closed","type: documentation,","spring-projects-issues","2017-12-04T11:13:29Z","2018-01-23T10:05:12Z"
"","20695","Hateoas appending optional parameters to the return link [SPR-16147]","**[Verznev Catubig](https://jira.spring.io/secure/ViewProfile.jspa?name=verznev)** opened **[SPR-16147](https://jira.spring.io/browse/SPR-16147?redirect=false)** and commented  Hateoas appending null value parameters to the return link. Ex. ""http://localhost:8080/transactions?startDate=2017-10-01T00:59:00.000Z&endDate=2017-10-21T23:59:00.000Z&offset=0&limit=5{&merchantRefNum,currency,accountGroup}""  merchantRefNum, currency, and accountGroup are optional fields.  I use ControllerLinkBuilder methodOn and linkTo methods.  This is only happen after I upgrade spring Brixton.SR1 to Dalston.SR3 The temporary solution I made is to use org.springframework.hateoas:spring-hateoas:0.21.0.RELEASE. org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE is use by Dalston.SR3 by default.   --- No further details from [SPR-16147](https://jira.spring.io/browse/SPR-16147?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-11-01T19:08:41Z","2019-01-12T05:20:01Z"
"","21064","JSON with missing quote leads to hanging [SPR-16521]","**[Veit Guna](https://jira.spring.io/secure/ViewProfile.jspa?name=vguna)** opened **[SPR-16521](https://jira.spring.io/browse/SPR-16521?redirect=false)** and commented  Hi.  I'm currently creating a REST service based on Spring Boot 2.0.0.RC1, Webflux and Spring Security using Tomcat embedded container. During integration testing via WebTestClient, some strange error occurred.  In this TestNG testcase, a broken JSON body is send to the server. When using `WebTestClient` it happens, that this blocks indefinetely - until timeout, not returning the expected parsing error response created by Spring. The call looks like this:  ``` @Test public void testBrokenJson() {     client.post()             .uri(""/resourcea/1/resourceb/2/test"")             .body(BodyInserters.fromObject(""{\""status\"": \""noClosingQuote}""))             .exchange()             .expectStatus().isBadRequest()             .expectBody(Void.class); } ```  The funny part comes now: if I simply give another broken JSON like this in the payload instead:  ``` {""status"": notquoted } ```  I get the expected error response.  Another fun part: when sending the same blocking payload via Postman, it returns the expected response.  I could drill it down having something todo with Spring Security. If I take it out of the mix, it seems to work as expected. Not sure though, where the root cause comes from. Since it's working with Postman, I tend to think it's the `WebTestClient`.  I attached a test project that shows that behavior. Maybe it helps.   ---  **Affects:** 5.0.3  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/25405/test.zip) (_6.81 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/030bc224e30699a91e33e27a6d9782803afbd0d4, https://github.com/spring-projects/spring-framework/commit/6959e66b25785b4ad056791517411b5fb762ab9f, https://github.com/spring-projects/spring-framework/commit/a6d527e57aedd94a2e23cc8d35572076dbf0e417","closed","type: bug,","spring-projects-issues","2018-02-20T16:31:31Z","2018-04-03T20:34:28Z"
"","20963","Support varargs for expectations in MockMvc [SPR-16417]","**[Valeriy Zhirnov](https://jira.spring.io/secure/ViewProfile.jspa?name=neonailol)** opened **[SPR-16417](https://jira.spring.io/browse/SPR-16417?redirect=false)** and commented  The current way of writing multiple expect statements is kinda verbose:  ```java mockMvc.perform(get(""/person/1""))   .andExpect(status().isOk())   .andExpect(content().contentType(MediaType.APPLICATION_JSON))   .andExpect(jsonPath(""$.person.name"").value(""Jason"")); ```  I propose vararg method that can do the same in a slightly cleaner way using default interface method:  ```java mockMvc.perform(get(""/person/1""))   .andExpect(     status().isOk(),     content().contentType(MediaType.APPLICATION_JSON),     jsonPath(""$.person.name"").value(""Jason"")   ); ```  the pull reuest are at github by the link in reference url  ---  **Affects:** 5.0.3  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1651  **Issue Links:** - #19647 MockMvc compatible API for doing real HTTP tests  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c57e1afd2bebde816d4c17676f356963c94d2bdd","closed","type: enhancement,","spring-projects-issues","2018-01-25T18:12:00Z","2019-01-11T15:37:52Z"
"","21008","Doc: @Transactional.isolation does not guarantee the specified isolation level [SPR-16463]","**[Valentin Kovalenko](https://jira.spring.io/secure/ViewProfile.jspa?name=stinc.male)** opened **[SPR-16463](https://jira.spring.io/browse/SPR-16463?redirect=false)** and commented  Let's imagine two bean methods:  ```java @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.READ_UNCOMMITTED) public void methodA(Runnable action) {   jdbc.execute(""select 'inside methodA before methodB'"");   action.run();   jdbc.execute(""select 'inside methodA after methodB'""); } @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.SERIALIZABLE) public void methodB() {   jdbc.execute(""select 'inside methodB'""); } ```  and we want to use them like this:  ```java public void use() {   bean.methodA(bean::methodB); } ```  This is a tricky case: it can't be implemented without violating the semantics of either `Transactional.propagation` or `Transactional.isolation`, because modern RDBMS do not allow changing an isolation level in the middle of a transaction, and Spring does not even try doing this. A user, however, may not realize this fact, or may not realize the fact that he actually has the situation `bean.methodA(bean::methodB)` in his project. Thus the user may believe that `methodB` is always executed in a transaction context with `Isolation.SERIALIZABLE`, which does not happen to be true.  The same is true not only for `Propagation.REQUIRED`, but also for `Propagation.MANDATORY`. This means that annotating a method with `@Transactional(propagation = Propagation.MANDATORY, isolation = Isolation.SERIALIZABLE)` _does not guarantee_ that the method will be executed in a transaction context with `Isolation.SERIALIZABLE`.  I think that such behaviour violates the principle of least astonishment and may easily lead to bugs related to a usage of an incorrect isolation level. However, it may not be a good idea to always throw an exception when Spring cannot guarantee the demanded level of isolation. Possibly this can be solved by throwing an exception by default but providing a way to disable it by explicitly specifying which semantics the Spring framework should violate in such situations: `Transactional.propagation` or `Transactional.isolation`. I believe the solution definitely requires discussing.  The complete description of this situation can be found here: https://sites.google.com/site/aboutmale/techblog/transactionalcatch  ---  **Affects:** 4.3.14  **Issue Links:** - #8870 Add warning and/or exception facility to propagating transactions that try to change the isolation level  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc77b4b9955c01a6904b2d4d6c9b13958246e75e, https://github.com/spring-projects/spring-framework/commit/0ac117ff270ae9b95f6fc00cf01e8145ec7bb7a4, https://github.com/spring-projects/spring-framework/commit/f7898951bd0955023667c43088567e640f242972  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: task,","spring-projects-issues","2018-02-03T13:15:33Z","2019-01-11T15:32:52Z"
"","20993","WebMVC RequestMapping Produces Problem [SPR-16448]","**[Uwe Grünheid](https://jira.spring.io/secure/ViewProfile.jspa?name=ugruenheid)** opened **[SPR-16448](https://jira.spring.io/browse/SPR-16448?redirect=false)** and commented  Hey,  maybe I am totally wrong in my expectations of using rest APIs so sorry if this request sounds to stupid but I was actually working on a legacy project and got a problem with having two media types produces via _`@RequestMapping`_-Annotation.  In my opinion the actual delivering of request mapping especially it's handling of produced media types could be improved if there would be a check in _AbstractMessageConverterMethodProcessor.writeWithMessageConverters(...)_ if an explicit content type was given in the response entity.  I made a little showcase which could be found in the referenced URL. Normally my old legacy service just returned a string like media type **text/plain**. But for getting this service towards REST I also inserted a **application/json** resource in my exception handler. I know that there are some other ways to get it working. For example I could just wrap my String into an resource object or just deliver also a string as error response. But the funny fact that everything works perfectly fine if just removing the produces flag in the annotation (like picture 3) made me thinking that this could also be handled in the HttpEntityMethodProcessor.  Cheers & Thanks for taking a look :) Uwe  ---  **Affects:** 4.3.14  **Reference URL:** https://github.com/mixaaaa/produces-problem  **Attachments:** - [2018-01-31 17_11_38-produces-problem.png](https://jira.spring.io/secure/attachment/25361/2018-01-31+17_11_38-produces-problem.png) (_68.89 kB_) - [2018-01-31 17_11_38-produces-problem-2.png](https://jira.spring.io/secure/attachment/25362/2018-01-31+17_11_38-produces-problem-2.png) (_58.62 kB_) - [2018-01-31 17_11_38-produces-problem-3.png](https://jira.spring.io/secure/attachment/25360/2018-01-31+17_11_38-produces-problem-3.png) (_88.85 kB_)  **Issue Links:** - #20720 AbstractMessageConverterMethodProcessor ignores HttpEntityMethodProcessor's Content-Type header (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2018-01-31T16:34:25Z","2019-01-13T04:53:36Z"
"","21135","ResourceDatabasePopulator should ignore MySQL single-line comments in SQL scripts [SPR-16594]","**[Urs Wiss](https://jira.spring.io/secure/ViewProfile.jspa?name=urswiss)** opened **[SPR-16594](https://jira.spring.io/browse/SPR-16594?redirect=false)** and commented  In MySQL, starting a line with a hash key is a valid comment (see https://dev.mysql.com/doc/refman/5.7/en/comments.html)  Currently, ResourceDatabasePopulator doesn't recognize lines starting with a hash key as comments. See the example https://github.com/urswiss/spring-jdbc-comment, it's based on h2 but it nonetheless illustrates the point I think.   --- No further details from [SPR-16594](https://jira.spring.io/browse/SPR-16594?redirect=false)","open","type: enhancement,","spring-projects-issues","2018-03-14T08:16:33Z","2020-05-26T13:22:02Z"
"","20665","PathMatchingResourcePatternResolver returns duplicate resources when using classpath* prefix [SPR-16117]","**[Udayakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=udaikumar26)** opened **[SPR-16117](https://jira.spring.io/browse/SPR-16117?redirect=false)** and commented  I am working on a drools project. The goal is to search all the rules(*.rdrl) files in the classpath and write it into the KieFileSystem. The rules file(.rdrl) will be present under multiple jar files. These jar files were added as a dependency in the drools project. Below is the code that is used to find all the .rdrl files.  ClassLoader classloader = this.getClass().getClassLoader(); ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver(classloader);  for (Resource file : resourcePatternResolver.getResources(""classpath*:/**/*.rdrl"")) { System.out.println(""name: "" + file.getURL()); kieFileSystem.write(ResourceFactory.newUrlResource(file.getURL())); }  Below is the sample output printed by the above code  name: jar:file:/C:/mvn_repo/com/myteam/OOP_Modular/1.0.0/OOP_Modular-1.0.0.jar!/com/myteam/oop_modular/OOP_MOD_Network_In_Network.rdrl  name: jar:file:/C:/mvn_repo/com/myteam/OOP_Modular/1.0.0/OOP_Modular-1.0.0.jar!/com/myteam/oop_modular/OOP_MOD_Individual1.rdrl  name: jar:file:c:\mvn_repo\com\myteam\OOP_Modular\1.0.0\OOP_Modular-1.0.0.jar!/com/myteam/oop_modular/OOP_MOD_Network_In_Network.rdrl  name: jar:file:c:\mvn_repo\com\myteam\OOP_Modular\1.0.0\OOP_Modular-1.0.0.jar!/com/myteam/oop_modular/OOP_MOD_Individual1.rdrl  As seen from the above output there are two entries for the same files OOP_MOD_Network_In_Network.rdrl and OOP_MOD_Individual1.rdrl. When you look at the output, the path is exactly same except that one starts with /C: and other with c:  Because of this issue, since i am trying to write each rule twice into kiefilesystem, it throws an exception saying ""Duplicate rule name"".  Note: When using pattern such as (""classpath*:com/**/*.rdrl""), the resources are returned only once but we are not sure if the rules file will be present only under 'com', it can also be under 'org' or anything else.  System: Windows 7, JDK 1.8  ---  **Affects:** 4.3.12, 5.0.1  **Issue Links:** - #20539 PathMatchingResourcePatternResolver provides duplicate resources when using classpath* prefix combined with ant-style - #18260 PathMatchingResourcePatternResolver does not consider manifest based classpaths  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8904de2149ef315e39d2464fa4283322d6137130, https://github.com/spring-projects/spring-framework/commit/a2f5e1254e3ccf190ec559492a33ca87c47e54d3  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","in: core,","spring-projects-issues","2017-10-25T21:24:46Z","2019-01-11T13:15:32Z"
"","20834","Record the time it takes to run a method annotated with @PostConstruct [SPR-16287]","**[Tyler K Van Gorder](https://jira.spring.io/secure/ViewProfile.jspa?name=tkvangorder)** opened **[SPR-16287](https://jira.spring.io/browse/SPR-16287?redirect=false)** and commented  This is a small, very useful enhancement to help triage startup times of a Spring application. The  methods annotated with `@PostConstruct` are all executed on the main thread during startup. In a large, legacy spring application there can be many such methods. Adding the ability to record how much time each method is contributing to the startup time is very useful. This can even be something that is only reported when debug logging is enabled. It might be more useful to report a warning if a `@PostConstruct` method exceeds a certain threshold (although this is not critical).  I have implemented this locally by making a change to the InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata.invokeInitMethods()  ```java for (LifecycleElement element : initMethodsToIterate) { 	if (debug) { 		long start =  System.currentTimeMillis(); 		logger.debug(""Invoking init method on bean '"" + beanName + ""': "" + element.getMethod()); 		element.invoke(target); 		logger.debug(""Init method on bean '"" + beanName + ""': "" + element.getMethod() + "" took "" + (System.currentTimeMillis() - start) + ""ms.""); 	} else { 		element.invoke(target); 	} } ```    ---  **Affects:** 4.3.14","closed","status: superseded,","spring-projects-issues","2017-12-11T19:34:19Z","2020-04-08T17:54:31Z"
"","21017","NamedParameterUtils.isParameterSeparator throws ArrayIndexOutOfBoundsException for non ASCII characters [SPR-16472]","**[Torsten Kuhnhenne](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten.kuhnhenne)** opened **[SPR-16472](https://jira.spring.io/browse/SPR-16472?redirect=false)** and commented  If you use non ASCII characters as a name (e.g german umlauts) then NamedParameterUtils.isParameterSeparator will throw an ArrayIndexOutOfBoundsException because the character-code is taken as array index for the boolean array  ```sql private static final boolean[] separatorIndex = new boolean[128]; ```  This bug was introduced in version 5.3.0 with this commit https://github.com/spring-projects/spring-framework/commit/b2322e58d99888acdca7fad0dba6a43323675e8b  Example query to reproduce the problem:  ```sql INSERT INTO csv2sql (Geplantes_Auslaufdatum, Einführungsjahr, Neueinführung) VALUES (:Geplantes_Auslaufdatum, :Einführungsjahr, :Neueinführung) ```  ---  **Affects:** 5.0.3  **Issue Links:** - #21018 [Regression] NamedParameterUtils::parseSqlStatement cannot parse chinese param name (_**""is duplicated by""**_) - #20887 NamedParameterJdbcTemplate fails on PostgreSQL array  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac7a6993567fcd2c2935f73129b3936409eebf60","closed","type: bug,","spring-projects-issues","2018-02-06T09:31:38Z","2019-01-11T15:31:12Z"
"","21107","Spring Boot Configuration Annotation Processor for List of Object [SPR-16565]","**[Tony Zeng](https://jira.spring.io/secure/ViewProfile.jspa?name=tony%20zeng)** opened **[SPR-16565](https://jira.spring.io/browse/SPR-16565?redirect=false)** and commented  We have some relative complex configurations which is written in yml and we want to provide some code completion as it is did by other spring boot lib's configurations.  As this official document shows, we can add ConfigurationProperties and use configuration-processor to generate json to let IDE assist config. But it seems that no support for list of objects' assist? i.e. like the following, it can only prompt to tests, but I want it to also assist each item's fields and possible choice:  ```java tests:     - a: ..       b: ..     - a: ..       b: .. ```  I have tried some configurations like this but not work (it not prompt list item but prompt tests[0].a):  ```java public class XXX {    @ConfigurationProperties(""tests"")   public List getTests() {     return tests;   } }  @ConfigurationProperties(""tests[0]"") public class Test {    public A getA() {     return xx;   } } ```    --- No further details from [SPR-16565](https://jira.spring.io/browse/SPR-16565?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-03-08T04:20:23Z","2019-01-12T05:19:17Z"
"","21019","Spring EL: collection projection support List [SPR-16474]","**[Tony Zeng](https://jira.spring.io/secure/ViewProfile.jspa?name=tony%20zeng)** opened **[SPR-16474](https://jira.spring.io/browse/SPR-16474?redirect=false)** and commented  When use Spring EL to do projection on a `List`, I found that it can't get the map's value using key:  > lists.![text]  will give me the following error:  > Property or field 'text' cannot be found on object of type 'xx.xx.xMap' - maybe not public  Should I create a PR to support this feature?   --- No further details from [SPR-16474](https://jira.spring.io/browse/SPR-16474?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-02-06T11:41:32Z","2018-02-07T09:51:28Z"
"","20581","Spring EL does not allow '\0' characters [SPR-16032]","**[Tony Zeng](https://jira.spring.io/secure/ViewProfile.jspa?name=tony%20zeng)** opened **[SPR-16032](https://jira.spring.io/browse/SPR-16032?redirect=false)** and commented  `Tokenizer` class uses the `ch == 0` to check whether this expression reaches end, making it is impossible to use `\0` in Spring EL like following:  ```java #{#str?.split('\0')} ```    ---  **Affects:** 4.3.11, 5.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1540#issuecomment-333054714  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03b68286a215e96d4706efe1c6fdcbf48169c930, https://github.com/spring-projects/spring-framework/commit/d0d4421aeacd9ff43e5e18dd18dfe8337c21457f  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","in: core,","spring-projects-issues","2017-10-02T01:58:23Z","2017-10-10T14:41:47Z"
"","20689","SpEL: Equality should honour canCompare  [SPR-16141]","**[Tin Pavlinic](https://jira.spring.io/secure/ViewProfile.jspa?name=triggernz)** opened **[SPR-16141](https://jira.spring.io/browse/SPR-16141?redirect=false)** and commented  The attached test fails. There are two issues:  1) StandardTypeComparator's canCompare is wrong, in the sense that it answers true to comparisons between integers and strings, but compare crashes.  2) Possibly as a workaround for (1) Operator.equalityCheck does checks to make sure the comparison is safe instead of delegating to canCompare.  The result is that implementing a custom TypeComparator does not always result in it being used in equality checks.   ---  **Affects:** 5.0.1  **Attachments:** - [AlternativeComparatorTests.java](https://jira.spring.io/secure/attachment/25202/AlternativeComparatorTests.java) (_1.96 kB_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1581","closed","status: superseded,","spring-projects-issues","2017-11-01T03:52:06Z","2021-11-25T17:58:25Z"
"","21049","ForwardedHeaderFilter garbles query params during sendRedirect() [SPR-16506]","**[Timothy Aitken](https://jira.spring.io/secure/ViewProfile.jspa?name=caldfir)** opened **[SPR-16506](https://jira.spring.io/browse/SPR-16506?redirect=false)** and commented  The [ForwardedHeaderFilter](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java) garbles the query-string provided to `sendRedirect()`. If both the original request and the provided location both contain a query, then the two are improperly concatenated (with a extra ""?"" between them) making the resulting location redirect invalid, eg:  http://hostname:port/path?newqp=1?oldqp=2  The expected behavior should be one of: 1. fail-out explicitly, rather than returning garbage 2. properly concatenate the two lists of params 3. replace the old params with the new ones if provided  I'm not sure which of these are preferable, but #3 seems most consistent with the behavior when this filter is removed.   ---  **Affects:** 4.3.10  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6920a1f9588d3d381d4d530120733f24009536f5, https://github.com/spring-projects/spring-framework/commit/608ef46516cf9787a0406605f5b52946893a82f1, https://github.com/spring-projects/spring-framework/commit/ac495d7380e56b0160391a7764fb7e2f5eefb8c9  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-02-15T23:39:22Z","2018-02-19T12:19:21Z"
"","20929","EclipseLink does not log SQL parameters when using showSql [SPR-16383]","**[Timo Meinen](https://jira.spring.io/secure/ViewProfile.jspa?name=timo.meinen)** opened **[SPR-16383](https://jira.spring.io/browse/SPR-16383?redirect=false)** and commented  `EclipseLinkJpaVendorAdapter` sets the logging level of `eclipselink.logging.level.sql` to `FINE` when `showSql` is `true`.  As of EclipseLink 2.4.0 - Juno this is not sufficient to log SQL parameter binding. Additionally, `eclipselink.logging.parameters` must be enabled.  From [EclipseLink Wiki](http://wiki.eclipse.org/EclipseLink/Examples/JPA/Logging):  ``` The logging of SQL parameters can be enabled, or disabled through the following properties:   Note: Setting eclipselink.logging.level to FINE is not sufficient (as of EclipseLink 2.4.0 - Juno), you have to set eclipselink.logging.level.sql to FINE. ```  Please see attached Github Pull Request.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1644  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: bug,","spring-projects-issues","2018-01-16T11:57:42Z","2018-01-23T09:33:22Z"
"","20605","Spring Hateoas prevents from disabling 'allowBeanDefinitionOverriding' [SPR-16056]","**[Thomas Vahrst](https://jira.spring.io/secure/ViewProfile.jspa?name=t.vahrst)** opened **[SPR-16056](https://jira.spring.io/browse/SPR-16056?redirect=false)** and commented  We had some trouble with overridden spring beans in one of our spring boot applications. So we decided to set spring-context's 'allowBeanDefinitionOverriding' Flag to false to determine the duplicate bean definitions of our application.  But this leads to an Exception during spring-boot startup, caused by Spring Hateoas (we use spring-hateos to autogenerate the actuator endpoint overview list). The exception:  ``` org.springframework.beans.factory.BeanDefinitionStoreException:    Invalid bean definition with name 'entityLinksPluginRegistry' defined in null:    Cannot register bean definition [Root bean: class [org.springframework.plugin.core.support.PluginRegistryFactoryBean];  	scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] for bean 'entityLinksPluginRegistry':    There is already [Root bean: class [org.springframework.plugin.core.support.PluginRegistryFactoryBean];  	scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] bound.  	at org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(DefaultListableBeanFactory.java:814) 	at org.springframework.hateoas.config.LinkBuilderBeanDefinitionRegistrar.registerBeanDefinitions(LinkBuilderBeanDefinitionRegistrar.java:63) 	at org.springframework.hateoas.config.HypermediaSupportBeanDefinitionRegistrar.registerBeanDefinitions(HypermediaSupportBeanDefinitionRegistrar.java:100) 	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsFromRegistrars(ConfigurationClassBeanDefinitionReader.java:359) 	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:143) 	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:116) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:320) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ```  The bean definition 'entityLinksPluginRegistry' is definined in LinkBuilderBeanDefinitionRegistrar, and this Registrar is called twice:  1. From HypermediaAutoConfiguration#EntityLinksConfiguration via `@EnableEntityLinks`. This Annoation imports the LinkBuilderBeanDefinitionRegistrar.  2. From HypermediaAutoConfiguratoin#HypermediaConfiguration via `@EnableHypermediaSupport`. This Annoations imports HypermediaSupportBeanDefinitionRegistrar. This registrar in turn creates its own Instance of LinkBuilderBeanDefinitionRegistrar and invokes 'registerBeanDefinitions()'.  This second invocation leads to overriding all allready defined Beandefinitions.  Possible Solution: check in LinkBuilderBeanDefinitionRegistrar if the beans are already defined and avoid duplicate registration.    --- No further details from [SPR-16056](https://jira.spring.io/browse/SPR-16056?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-10-10T07:19:37Z","2019-01-12T05:20:10Z"
"","20398","BeanCurrentlyInCreationException depending on order of bean creation [SPR-15843]","**[Thomas Vahrst](https://jira.spring.io/secure/ViewProfile.jspa?name=t.vahrst)** opened **[SPR-15843](https://jira.spring.io/browse/SPR-15843?redirect=false)** and commented  We experienced a `BeanCurrentlyInCreationException` in a Spring-Boot application when we introduced a BeanPostProcessor to wrap the current datasource. The problem was, that this exception occured randomly, so we tried to debug and reduce the problem. In the end we build a simple Spring testcase to demonstrate, that the order of `@Bean` definitions in a `@Configuration` class leads to different behavior, one time passing, one time failing with a `BeanCurrentlyInCreationException`.  Failing:  ```java 	@Bean 	@DependsOn(""datasource"")   	public TxManager txmanager(){ 		return new TxManager(); 	}  	@Bean 	public Datasource datasource(){ 		return new Datasource(); 	}  ... so more beans... ```  Passing:  ```java  	@Bean 	public Datasource datasource(){ 		return new Datasource(); 	}  	@Bean 	@DependsOn(""datasource"")   	public TxManager txmanager(){ 		return new TxManager(); 	}  ... some more beans ```  I put the complete testcase in github: https://github.com/tvahrst/spring_dependson_problem In the original spring-boot application, it was not the order of `@Bean` methods in the `@Configuration`, but different `@Autowird` fields, which led to different order of bean creation.  It seems, that this 'flaky' behavior is due to the fact, that some 'dependsOn' metainformation for beans are analyzed during bean **creation**. The `dependenciesForBeanMap` in DefaultSingletonRegistry is filled during `preInstantiateSingletons`.    ---  **Affects:** 4.3.10","open","in: core,","spring-projects-issues","2017-08-02T13:25:07Z","2019-01-11T17:40:35Z"
"","20675","AbstractMessageSource does not support null as default message anymore [SPR-16127]","**[Thomas Heigl](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasheigl)** opened **[SPR-16127](https://jira.spring.io/browse/SPR-16127?redirect=false)** and commented  I just encountered some issues in my application due to a subtle change in `AbstractMessageSource` between Spring 4.x and 5.x.  In Spring 4.x is was possible to pass `null` as `defaultMessage`, Spring 5.x always returns an empty string.  Spring 4.x:  ``` public final String getMessage(String code, Object[] args, String defaultMessage, Locale locale) { 	String msg = getMessageInternal(code, args, locale); 	if (msg != null) { 		return msg; 	} 	if (defaultMessage == null) { 		String fallback = getDefaultMessage(code); 		if (fallback != null) { 			return fallback; 		} 	} 	return renderDefaultMessage(defaultMessage, args, locale); } ```  Spring 5.x:  ``` public final String getMessage(String code, @Nullable Object[] args, @Nullable String defaultMessage, Locale locale) { 	String msg = getMessageInternal(code, args, locale); 	if (msg != null) { 		return msg; 	} 	if (defaultMessage == null) { 		String fallback = getDefaultMessage(code); 		return (fallback != null ? fallback : """"); 	} 	return renderDefaultMessage(defaultMessage, args, locale); } ```  If the default message is `null` and the fallback is `null` Spring now returns `""""`.  This makes it hard to distinguish between properties that are defined but empty and properties that are undefined.  ---  **Affects:** 5.0.1  **Issue Links:** - #20596 AbstractMessageSource does not properly interact with DelegatingMessageSource parent - #20099 Introduce null-safety of Spring Framework API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5c8dc0d6594494cc8f2a3e638295ceef3e4db8b","closed","in: core,","spring-projects-issues","2017-10-28T18:25:52Z","2019-01-11T13:15:18Z"
"","21115","Multiple RequestMappings with same path do not differentiate HTTP method when resolving path parameters [SPR-16573]","**[Thomas Auinger](https://jira.spring.io/secure/ViewProfile.jspa?name=t.auinger@byteconsult.de)** opened **[SPR-16573](https://jira.spring.io/browse/SPR-16573?redirect=false)** and commented  We have these two request-mappings in one controller class:  ```java @RequestMapping(value = ""/{tenantId}/locks/{key:.+}"", method = GET) public LockResponse getLock(@PathVariable String key, HttpServletRequest request, HttpServletResponse response) { ... } @RequestMapping(value = ""/{tenantId}/locks/{domainObjectId}"", method = DELETE) public void deleteLock(@PathVariable String domainObjectId, HttpServletRequest request, HttpServletResponse response) { ... } ```  When calling GET Spring complains about a missing ""key"" path-variable, since apparently the mapping from DELETE overrules the one from GET.  I expect that - depending on the method - mappings can have their own namespace of variable names.   ---  **Affects:** 3.2.18","closed","in: web,","spring-projects-issues","2018-03-09T12:26:17Z","2019-01-11T14:31:07Z"
"","20697","Early ApplicationContext close call may lead to ApplicationEventMulticaster/LifecycleProcessor access exception [SPR-16149]","**[Terence Mill](https://jira.spring.io/secure/ViewProfile.jspa?name=cforce)** opened **[SPR-16149](https://jira.spring.io/browse/SPR-16149?redirect=false)** and commented  Similar things as in #17501 happened again on spring-cloud dalston ( spring framework 4.3.9.RELEASE). Not sure but maybe the change has been introduced from change spring-cloud dalston SR3 to SR4 (did not happen fopr me before)  ```java java.lang.IllegalStateException: LifecycleProcessor not initialized - call 'refresh' before invoking lifecycle methods via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@624c96df: startup date [Thu Nov 02 08:27:24 CET 2017]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@1c5ebbc5 	at org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor(AbstractApplicationContext.java:427) 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:999) 	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:958) 	at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:750) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) 	at com.myorg.dvd.core.DvdSpringApplication.run(DvdSpringApplication.java:68) 	at com.myorg.dvd.core.DvdSpringApplication.run(DvdSpringApplication.java:37) 	at com.myorg.dvd.cfg.ConfigServerApplication.main(ConfigServerApplication.java:36) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)   2017-11-02 08:27:28.425 ERROR [configserver,,,] 13740 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception   java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@624c96df: startup date [Thu Nov 02 08:27:24 CET 2017]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@1c5ebbc5 	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) 	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) 	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) 	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1006) 	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:958) 	at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:750) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) 	at com.myorg.dvd.core.DvdSpringApplication.run(DvdSpringApplication.java:68) 	at com.myorg.dvd.core.DvdSpringApplication.run(DvdSpringApplication.java:37) 	at com.myorg.dvd.cfg.ConfigServerApplication.main(ConfigServerApplication.java:36) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) ```  ---  **Affects:** 4.3.9  **Reference URL:** #17501  **Issue Links:** - #17501 Revisit ""ApplicationEventMulticaster not initialized"" behavior for early event publication scenarios  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/519195cf66d6a5e4b6657093a22d691d2908e0b3, https://github.com/spring-projects/spring-framework/commit/1611ce7180b985084e60abc116f32d5db886808d  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","in: core,","spring-projects-issues","2017-11-02T10:59:42Z","2019-01-14T04:33:30Z"
"","20766","CPU utilization too high for a simple server [SPR-16218]","**[Taylor Gautier](https://jira.spring.io/secure/ViewProfile.jspa?name=tgautier)** opened **[SPR-16218](https://jira.spring.io/browse/SPR-16218?redirect=false)** and commented  Here's a simple WebFlux based Spring 5 app:  https://gist.github.com/tsgautier/3189b671fcc2441f9be2c29887d3f9fe  Benchmark this application using something like https://github.com/wg/wrk:  $ wrk -t4 -c40 -d500s http://localhost:9000/1KiB  **Expected outcome:**  Low CPU utilization due to WebFlux usage of Netty/Async IO.  **Actual outcome:**  Very high CPU utilization.  **Notes:**  jvisualvm records ~60-80% CPU usage during this test.  Using OS X Activity Monitor the OS reports nearly 300% CPU utilization.  Run this test with for example an Node.js based HTTP-server like https://www.npmjs.com/package/http-server and the Activity Monitor OS CPU utilization is near 1/3 of the Spring/JVM server at ~100%  ---  **Affects:** 5.0.1  **Issue Links:** - #21519 Reduce the impact on startup time of adding Reactor to the classpath  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc8e525e604c5d56a7ef522a06c82821b4393916","closed","status: declined,","spring-projects-issues","2017-11-20T17:01:50Z","2019-01-12T16:32:52Z"
"","20748","Docs for ClientResponse object are misleading [SPR-16200]","**[Taylor Gautier](https://jira.spring.io/secure/ViewProfile.jspa?name=tgautier)** opened **[SPR-16200](https://jira.spring.io/browse/SPR-16200?redirect=false)** and commented  https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/reactive/function/client/ClientResponse.html  In the docs above, it is suggested to use bodyToMono(Void.class) if you are not interested in the body.  This introduces some unexpected - but understandable behavior.  Due to the change here https://github.com/spring-projects/spring-framework/commit/126ac849e5592f65d742d1f23bf891e1a115af01 using bodyToMono(Void.class) closes the HTTP connections, and therefore the WebClient cannot take advantage of HTTP connection keep-alives.  If you think about it for a minute, this makes sense - if the server were sending megabytes and megabytes of data, and the client didn't consume it, it's not possible to put that connection back in the pool.  However, a naive reader who hasn't gone into the deep dark details of the implemenation is liable to be tripped up by the suggestion in the docs.  I recommend adding a description of the behavior that using bodyToMono(Void.class) will do (namely, that it will nullify the use of Http Connection Pooling) and to provide an alternate suggestion that will consume and release the body DataBuffers if the user is interested in ignoring the body but keeping the Http Connection Pool (which is probably the most likely scenario here).  ---  **Affects:** 5.0.1  **Issue Links:** - #20745 [doc] WebClient's javadocs are invalid  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e21023f2875f64538e060d298684789354b3ba9","closed","type: task,","spring-projects-issues","2017-11-15T16:06:11Z","2019-01-11T13:31:58Z"
"","20779","SpelExpressionParser fails to parse Integer.MIN_VALUE [SPR-16232]","**[Tamas Szekeres](https://jira.spring.io/secure/ViewProfile.jspa?name=firefoxpdm)** opened **[SPR-16232](https://jira.spring.io/browse/SPR-16232?redirect=false)** and commented  The Tokenizer cuts Integer.MIN_VALUE (-2147483648) into a MINUS token and a LITERAL_INT. The integer token, in itself, falls outside of the integer range, so from that point of view it is understandable that the parsing later fails, but from a usability one, it should work.  ``` public void testParseWhenMinIntegerSetShouldNotBeThrowingExceptionButItDoes() {     final ExpressionParser parser = new SpelExpressionParser();     final Expression expression = parser.parseExpression(String.valueOf(Integer.MIN_VALUE));     expression.getValue(); } ```  ``` FAILED: testParseWhenMinIntegerSetShouldNotBeThrowingExceptionButItDoes org.springframework.expression.spel.SpelParseException: EL1035E: The value '2147483648' cannot be parsed as an int 	at org.springframework.expression.spel.ast.Literal.getIntLiteral(Literal.java:80) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.maybeEatLiteral(InternalSpelExpressionParser.java:840) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatStartNode(InternalSpelExpressionParser.java:500) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatPrimaryExpression(InternalSpelExpressionParser.java:343) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatUnaryExpression(InternalSpelExpressionParser.java:337) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatUnaryExpression(InternalSpelExpressionParser.java:316) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatPowerIncDecExpression(InternalSpelExpressionParser.java:293) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatProductExpression(InternalSpelExpressionParser.java:272) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatSumExpression(InternalSpelExpressionParser.java:255) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatRelationalExpression(InternalSpelExpressionParser.java:210) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatLogicalAndExpression(InternalSpelExpressionParser.java:198) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatLogicalOrExpression(InternalSpelExpressionParser.java:186) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatExpression(InternalSpelExpressionParser.java:146) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.doParseExpression(InternalSpelExpressionParser.java:127) 	at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:60) 	at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:32) 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:73) 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:60) 	... Caused by: java.lang.NumberFormatException: For input string: ""2147483648"" 	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) 	at java.lang.Integer.parseInt(Integer.java:499) 	at org.springframework.expression.spel.ast.Literal.getIntLiteral(Literal.java:76) 	... 44 more ```    ---  **Affects:** 4.3.11, 4.3.12","open","type: enhancement,","spring-projects-issues","2017-11-25T21:00:14Z","2017-11-25T22:36:31Z"
"","21088","StackOverflowError when using WebFlux multipart file data handler with Undertow [SPR-16545]","**[Tamas Eppel](https://jira.spring.io/secure/ViewProfile.jspa?name=teppel)** opened **[SPR-16545](https://jira.spring.io/browse/SPR-16545?redirect=false)** and commented  I am using Spring Boot 2 RC2 - Spring 5.0.3 with WebFlux and the Router abstraction. The server is Undertow.  I have created the handler according to: https://github.com/sdeleuze/webflux-multipart/blob/master/src/main/java/com/example/MultipartRoute.java  I have a router handler like this:  ```kotlin @Component class MultimediaHandler {     fun upload(request: ServerRequest): Mono {         return request.body(BodyExtractors.toMultipartData()).flatMap{ parts ->             val map = parts.toSingleValueMap()             ServerResponse.ok().build()         }     } } ```  I am getting a StackOverflowError:  ``` java.lang.StackOverflowError: null 	at io.undertow.conduits.FixedLengthStreamSourceConduit.read(FixedLengthStreamSourceConduit.java:249) ~[undertow-core-1.4.22.Final.jar:1.4.22.Final] 	at org.xnio.conduits.ConduitStreamSourceChannel.read(ConduitStreamSourceChannel.java:127) ~[xnio-api-3.3.8.Final.jar:3.3.8.Final] 	at io.undertow.channels.DetachableStreamSourceChannel.read(DetachableStreamSourceChannel.java:209) ~[undertow-core-1.4.22.Final.jar:1.4.22.Final] 	at io.undertow.server.HttpServerExchange$ReadDispatchChannel.read(HttpServerExchange.java:2332) ~[undertow-core-1.4.22.Final.jar:1.4.22.Final] 	at org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.read(UndertowServerHttpRequest.java:171) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] 	at org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.read(UndertowServerHttpRequest.java:127) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.readAndPublish(AbstractListenerReadPublisher.java:145) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$1000(AbstractListenerReadPublisher.java:47) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$4.onDataAvailable(AbstractListenerReadPublisher.java:317) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.onDataAvailable(AbstractListenerReadPublisher.java:85) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] 	at org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:155) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:177) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$900(AbstractListenerReadPublisher.java:47) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] 	... ```  ---  **Affects:** 5.0.3  **Attachments:** - [foo-small.txt](https://jira.spring.io/secure/attachment/25415/foo-small.txt) (_2.44 kB_) - [upload-error-sample.zip](https://jira.spring.io/secure/attachment/25416/upload-error-sample.zip) (_182.67 kB_) - [upload-error-sample-wo-kafka.zip](https://jira.spring.io/secure/attachment/25417/upload-error-sample-wo-kafka.zip) (_181.18 kB_)  **Issue Links:** - #21173 Spring WebFlux + Undertow + HTTP/2 is not working with a POST request (_**""is duplicated by""**_) - #21121 spring webflux ServerRequest.bodyToMono().block will freeze for HTTP post request whose header size + body size > 1024 - #21089 FilePart transferTo fails with java.nio.file.NoSuchFileException - #21243 StackOverFlowError and memory leaking when sending large files slowly with Webflux + Undertow - #21090 [docs] Restructure chapter Functional Endpoints chpater  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9df8c738a4eb9fff292f58a82be7ba09e1c3097","closed","type: bug,","spring-projects-issues","2018-03-02T10:54:05Z","2019-01-11T14:34:39Z"
"","21139","Support Kotlin parameter default values in HTTP handler methods [SPR-16598]","**[Take Weiland](https://jira.spring.io/secure/ViewProfile.jspa?name=diesieben07)** opened **[SPR-16598](https://jira.spring.io/browse/SPR-16598?redirect=false)** and commented  Support specifying defaults for e.g. `@RequestMapping` via Kotlin parameter default values like so:  ``` @GetMapping fun get(@RequestParam limit: Int = 20) ```  Such a method should behave equivalent to `@RequestMapping` with `defaultValue`, except that the value does not need to be processed by converters, etc.  This can be implemented in `org.springframework.web.method.support.InvocableHandlerMethod` using Kotlin Reflection (`KCallable#callBy`), which allows omitting parameters with default values.   ---  **Affects:** 5.0.4  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1741  2 votes, 5 watchers","open","in: kotlin,","spring-projects-issues","2018-03-15T15:21:58Z","2022-01-19T11:04:45Z"
"","20667","KotlinReflectionParameterNameDiscoverer does not handle instance-extension methods properly [SPR-16119]","**[Take Weiland](https://jira.spring.io/secure/ViewProfile.jspa?name=diesieben07)** opened **[SPR-16119](https://jira.spring.io/browse/SPR-16119?redirect=false)** and commented  `KotlinReflectionParameterNameDiscoverer` filters out any parameters that are not of type `KParameter.Kind.VALUE`. This works fine, except if you have an extension method _inside a class_, like this:  ```java class Example {     // this method will look like doSomething(String) in the bytecode and to Java     fun String.doSomething() } ```  The extension receiver (`KParameter.Kind.EXTENSION_RECEIVER`) parameter must not be ignored here, since as far as Java code is concerned, this is a regular parameter.  I noticed this problem in combination with Hibernate Validator, which will throw an `ArrayIndexOutOfBoundsException` when analyzing such a method.  I am in the process of creating a pull request to fix this issue and will update this ticket when it is submitted.   ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e49e321889d23828c5307842ac25d444ce7ec88","closed","in: core,","spring-projects-issues","2017-10-26T12:01:28Z","2017-11-27T12:17:08Z"
"","20992","Update and improve script templating documentation [SPR-16447]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16447](https://jira.spring.io/browse/SPR-16447?redirect=false)** and commented  ---  **Issue Links:** - #20939 [docs]: Add WebFlux content on view technology - #19630 Support i18n and nested template loading in ScriptTemplateView render function","closed","type: documentation,","spring-projects-issues","2018-01-31T16:21:44Z","2019-01-11T15:35:05Z"
"","20959","Add Vary: Access-Control-Request-Method/Headers CORS headers [SPR-16413]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16413](https://jira.spring.io/browse/SPR-16413?redirect=false)** and commented  [Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de) noticed me that Spring Data REST [CorsIntegrationTests](https://github.com/spring-projects/spring-data-rest/blob/9e7a9d3ae61525046ebda369ea737acd3561b832/spring-data-rest-tests/spring-data-rest-tests-jpa/src/test/java/org/springframework/data/rest/webmvc/jpa/CorsIntegrationTests.java#L86-L87) started to behave differently after upgrading from 5.0.2 to 5.0.3.  It may be a consequence of #20327 that changes the combining logic when `*` is involved (in that case combining `AbstractHandlerMethodMapping#PREFLIGHT_AMBIGUOUS_MATCH` with the global configuration).  With `allowedMethods(""GET"", ""PUT"", ""POST"")` globally configured, with Spring 5.0.2 `Access-Control-Request-Method: GET` or `Access-Control-Request-Method: POST` request headers resulted in `Access-Control-Allow-Methods: GET,PUT,POST` response header because the combined configuration was `""GET"", ""PUT"", ""POST""`.  With Spring 5.0.3, `Access-Control-Request-Method: GET` request header results in `Access-Control-Allow-Methods: GET` and `Access-Control-Request-Method: POST` to `Access-Control-Allow-Methods: POST` because the combined configuration is `""*""` and [CORS specification](https://www.w3.org/TR/cors/) specifies ""Since the list of methods can be unbounded, simply returning the method indicated by `Access-Control-Request-Method` (if supported) can be enough.""  To my current understanding, both behavior will behave as expected but this new behavior made me having a deeper thought to caching potential issues, and I tend to think `Vary: Access-Control-Request-Method` and `Vary: Access-Control-Request-Headers` should be added to current `Vary: Origin` current header. [This GO implementation](https://github.com/rs/cors/blob/master/cors.go#L246-L251) seems to confirm this hypothesis.  The caching issue (never reported) was potentially already present in Spring 5.0.2 and previous versions, but the new behavior make it more likely to be reached.  This issue fix should also add a test similar to Spring Data REST `CorsIntegrationTests` for preflight ambiguous request + global configuration.  All this need to be obviously validated with concrete repro projects and more time, I may be wrong in my analysis.  ---  **Affects:** 5.0.3  **Issue Links:** - #20327 CORS combine - override specific host defined in global conf with * in controller/method - #20772 Set Vary: Origin on CORS unauthorized response  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d02e4fb545f71ea1d101fdf534b3b4d6e9d86ef8","closed","type: enhancement,","spring-projects-issues","2018-01-24T14:07:23Z","2019-01-11T15:37:46Z"
"","20909","Check scheme in WebUtils#isSameOrigin [SPR-16362]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16362](https://jira.spring.io/browse/SPR-16362?redirect=false)** and commented  [CORS specification](https://www.w3.org/TR/cors/) specifies that ""an origin is composed of only the scheme, hostname, and port"", but `WebUtils#isSameOrigin` currently only checks hostname and port.  Based on my current understanding, the main way to trigger an incorrect behavior with current implementation is to send a request from `http://domain.com` to `https://domain.com` or the other way around. Based on the spec, it should be detected by the browser as a cross origin request but won't be understood as such by our implementation, skipping CORS checks and CORS response header processing, resulting of such HTTP exchange being rejected by the browser due to the lack of CORS response headers.  Note that performing a check on the scheme should be done very carefully in that context because it could have some unexpected side effects given that: - Unlike the `Origin` one, the `Host` header does not contain the scheme information (for example `Host: domain.com`) - Chrome and Safari includes the `Origin` header for some same origin requests, making such change on `WebUtils#isSameOrigin` risky.  ---  **Issue Links:** - #20809 spring-web CORS requires X-Forwarded-Port  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/896eb5687ab2a0b8bddce46ab9ec766c9987f26e","closed","type: enhancement,","spring-projects-issues","2018-01-09T14:20:18Z","2019-01-11T15:17:31Z"
"","20875","Make RestOperations extensions parameters nullability consistent with Java API [SPR-16328]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16328](https://jira.spring.io/browse/SPR-16328?redirect=false)** and commented  In `RestOperations` extensions, nullability of parameters should be consistent with the Java API. It is currently not the case for `requestEntity` for example. Also potentially using `null` default parameters where that's possible could make sense.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d2616b79968d816ac4d7a581469f84c19fe1b127","closed","type: enhancement,","spring-projects-issues","2017-12-27T16:20:02Z","2018-01-23T10:05:12Z"
"","20821","Improve RestOperations Kotlin extensions [SPR-16274]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16274](https://jira.spring.io/browse/SPR-16274?redirect=false)** and commented  `RestOperations` Kotlin extensions should be improved on the following points.  **1.** Since type erasure can be fixed only when using `ParameterizedTypeReference` based Java methods, API documentation should be updated to avoid mentioning reified type parameters **or** `getForObject()` / `getForEntity()` should call internally `exchange()` with a `ParameterizedTypeReference` parameter.  Spring Boot `TestRestTemplate` extensions should be updated as well.  **2.** Nullability of parameters should be consistent with the Java API. It is currently not the case for `requestEntity` for example. Also potentially using `null` default parameters where that's possible could make sense.  ---  **Issue Links:** - #20820 Clarify Kotlin reified type parameter extensions documentation about type erasure (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2017-12-06T21:50:35Z","2019-01-11T15:14:15Z"
"","20820","Clarify Kotlin reified type parameter extensions documentation about type erasure [SPR-16273]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16273](https://jira.spring.io/browse/SPR-16273?redirect=false)** and commented  Since type erasure can be fixed only when using `ParameterizedTypeReference` based Java methods, `RestOperations` API documentation should be updated to specify which extensions are subject to type erasure, and which are not. Same for WebFlux client and server API.  Spring Boot `TestRestTemplate` extensions should be updated as well.  ---  **Issue Links:** - #20821 Improve RestOperations Kotlin extensions (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/deac8e556e10f8ec352f5dae36e54e897fea2b2e","closed","type: enhancement,","spring-projects-issues","2017-12-06T21:50:22Z","2019-01-11T15:14:26Z"
"","20816","Kotlin bean definition DSL should provide access to getBeansOfType() [SPR-16269]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16269](https://jira.spring.io/browse/SPR-16269?redirect=false)** and commented  As discussed with Josh Long, Kotlin bean definition DSL should provide a way to access to a list of beans of a specific type, for example by providing a `getBeansOfType()` alias in `BeanDefinitionContext`.  ---  **Issue Links:** - #20958 Ability to access Environment in the beans element of the Kotlin bean definition DSL - #21886 Replace context by provider() in Kotlin bean DSL (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2017-12-05T19:54:31Z","2019-01-11T13:28:25Z"
"","20815","Fix Kdoc regression to show only Kotlin API [SPR-16268]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16268](https://jira.spring.io/browse/SPR-16268?redirect=false)** and commented  Unlike [Spring Framework 5.0.1 Kdoc](https://docs.spring.io/spring-framework/docs/5.0.1.RELEASE/kdoc-api/spring-framework/), [5.0.2 Kdoc](https://docs.spring.io/spring-framework/docs/5.0.2.RELEASE/kdoc-api/spring-framework/)  contains both Java and Kotlin API. This regression should be fixed.   ---  **Affects:** 5.0.2","closed","type: task,","spring-projects-issues","2017-12-05T19:36:04Z","2018-01-23T10:05:13Z"
"","20794","Content-type not set by default with the functional Web API [SPR-16247]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16247](https://jira.spring.io/browse/SPR-16247?redirect=false)** and commented  Unlike the annotation-based view rendering, the functional one does not set default `Content-Type` response header by default. This could be because the default content type [is retrieved from the header](https://github.com/spring-projects/spring-framework/blob/63c2c08e017d4bc195aaa86c3c62fb2d075ab3a6/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java#L180) and not from the `View`.   ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/99cbfd32c3d7cea039536d784835238a9343b939","closed","type: bug,","spring-projects-issues","2017-11-30T13:36:44Z","2018-01-23T10:05:11Z"
"","20786","Upgrade to Kotlin 1.2 [SPR-16239]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16239](https://jira.spring.io/browse/SPR-16239?redirect=false)** and commented  [Kotlin 1.2](https://blog.jetbrains.com/kotlin/2017/11/kotlin-1-2-released/) has been released and provides useful syntax enhancements, faster compilation and multiplatform support. That's the version we are likely going to use for Spring Boot 2 and start.spring.io as well, so let's upgrade to it, potentially using `-api-version 1.1` and `-language-version 1.1` to keep good compatibility with those who stick to 1.1.  ---  **Reference URL:** http://kotlinlang.org/docs/reference/compatibility.html  **Issue Links:** - #20742 Upgrade to Kotlin 1.1.61 - #20945 Upgrade to Kotlin 1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/821ab62492a36450ab2b04e15a686641f78a3243, https://github.com/spring-projects/spring-framework/commit/7368f58518303a1fc0b7c64e4acb3d249b8f7cc5","closed","type: task,","spring-projects-issues","2017-11-29T09:10:34Z","2019-01-11T13:29:45Z"
"","20777","Add missing RestOperations extensions [SPR-16229]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16229](https://jira.spring.io/browse/SPR-16229?redirect=false)** and commented  While adding a test that checks programmatically if extensions are available for each `RestOperations` method that contains a `Class` or `ParameterizedTypeReference` parameter as proposed by [Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson) in [this pull request](https://github.com/spring-projects/spring-boot/pull/11039), I found a few missing extensions. This improvement add them.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3b96690e697f093b414da120785e1adab22ca901","closed","type: enhancement,","spring-projects-issues","2017-11-23T21:08:48Z","2017-11-27T12:17:08Z"
"","20768","Make UrlBasedViewResolver prefix/suffix nullability consistent [SPR-16220]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16220](https://jira.spring.io/browse/SPR-16220?redirect=false)** and commented   --- No further details from [SPR-16220](https://jira.spring.io/browse/SPR-16220?redirect=false)","open","status: blocked,","spring-projects-issues","2017-11-21T14:29:51Z","2021-11-24T20:05:03Z"
"","20754","Upgrade to Reactor Bismuth-SR4 [SPR-16206]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16206](https://jira.spring.io/browse/SPR-16206?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3e8e0c1d6a26aed28dad2282745ac286398f4525","closed","type: task,","spring-projects-issues","2017-11-16T14:31:02Z","2017-11-27T12:17:08Z"
"","20747","Add WebFlux CORS reference documentation [SPR-16199]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16199](https://jira.spring.io/browse/SPR-16199?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38040bf3f2b4aaa5c342fedcd12421a2eacc9ae5","closed","type: task,","spring-projects-issues","2017-11-15T15:00:15Z","2017-11-27T12:17:07Z"
"","20742","Upgrade to Kotlin 1.1.61 [SPR-16194]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16194](https://jira.spring.io/browse/SPR-16194?redirect=false)** and commented  Upgrade to the Kotlin 1.1.60 branch.  ---  **Issue Links:** - #20786 Upgrade to Kotlin 1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/81052cd27ad6b86764526001a6ebcf0df34dee10, https://github.com/spring-projects/spring-framework/commit/90e594501485eceb6b7c9e6bde74346a6d99ca8b","closed","type: task,","spring-projects-issues","2017-11-14T09:08:29Z","2019-01-11T13:25:56Z"
"","20669","Allow to set cookies via WebFlux functional handlers [SPR-16121]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16121](https://jira.spring.io/browse/SPR-16121?redirect=false)** and commented  Unless I missed something, it seems to me it is not possible to set cookies -or session attributes- in WebFlux functional handlers since relevant methods are in `ServerWebExchange` which is not exposed. That sounds a legitimate use case, so it would be nice to provide such capability.   ---  **Reference URL:** https://github.com/mixitconf/mixit/pull/239  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db0066919727f6299f673682b3417648f71fd219  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2017-10-26T14:25:53Z","2017-11-27T12:17:09Z"
"","20634","Upgrade to Reactor Bismuth-SR2 [SPR-16085]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16085](https://jira.spring.io/browse/SPR-16085?redirect=false)** and commented   --- No further details from [SPR-16085](https://jira.spring.io/browse/SPR-16085?redirect=false)","closed","type: task,","spring-projects-issues","2017-10-18T09:37:47Z","2017-10-24T16:24:07Z"
"","20563","Support autowiring by constructor in Kotlin bean DSL [SPR-16014]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16014](https://jira.spring.io/browse/SPR-16014?redirect=false)** and commented  After the blog post presenting the Kotlin bean definition DSL, we had a lot of feedbacks and improvement requests about `Routes(ref(), ref())` syntax, and even if `ref()` is valid, such declaration frequently used for constructor injection deserve a better syntax.  By enabling constructor autowiring by default (which make sense in Kotlin) and allowing easily to customize the `autowireMode` we can significantly improve syntax and readability of Kotlin bean definition DSL.    ---  **Affects:** 5.0 RC4  **Reference URL:** https://spring.io/blog/2017/08/01/spring-framework-5-kotlin-apis-the-functional-way#functional-bean-definitions-with-spring-rsquo-s-new-kotlin-dsl  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbb428f0322b759b5d17bc966db8d631466581cf, https://github.com/spring-projects/spring-framework/commit/23497a7ece7aac1591187b46f4b601d2f48764e0","closed","type: enhancement,","spring-projects-issues","2017-09-26T23:22:07Z","2017-09-28T12:14:37Z"
"","20548","Support non-standard classes in Kotlin reflection discovery methods [SPR-15999]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15999](https://jira.spring.io/browse/SPR-15999?redirect=false)** and commented  When invoked on non-standard classes like generated one, Kotlin reflection API can throw exception like: `java.lang.UnsupportedOperationException: This class is an internal synthetic class generated by the Kotlin compiler, such as an anonymous class for a lambda, a SAM wrapper, a callable reference, etc. It's not a Kotlin class or interface, so the reflection library has no idea what declarations does it have. Please use Java reflection to inspect this class: class org.javatechs.kbackup.commander.util.jmx.JmxIniter$crerateUser$u$1`.  Since it seems the API to check the class kind is not available without accessing to Kotlin internals, we should add defensive checks in ours `KotlinDelegate.find*()` methods to retrn `null` in such case.  ```java 2017-09-19 16:00:22.097 ERROR 17965 --- [ restartedMain] o.s.boot.SpringApplication : Application startup failed   org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name '/auth' defined in file [/home/gleb/myown/kBackup/commander/out/production/classes/org/javatechs/kbackup/commander/service/menu/security/AuthApiController.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'nodeUserDetailsService' defined in file [/home/gleb/myown/kBackup/commander/out/production/classes/org/javatechs/kbackup/commander/service/security/NodeUserDetailsService.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userRepo2': Cannot resolve reference to bean 'neo4jMappingContext' while setting bean property 'mappingContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'neo4jMappingContext': Invocation of init method failed; nested exception is java.lang.UnsupportedOperationException: This class is an internal synthetic class generated by the Kotlin compiler, such as an anonymous class for a lambda, a SAM wrapper, a callable reference, etc. It's not a Kotlin class or interface, so the reflection library has no idea what declarations does it have. Please use Java reflection to inspect this class: class org.javatechs.kbackup.commander.util.jmx.JmxIniter$crerateUser$u$1     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:745) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:214) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1269) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1126) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) ~[spring-context-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:122) ~[spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT]     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:386) [spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1245) [spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1233) [spring-boot-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT]     at org.javatechs.kbackup.commander.BackendApplicationKt.main(BackendApplication.kt:24) [classes/:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]     at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]     at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'nodeUserDetailsService' defined in file [/home/gleb/myown/kBackup/commander/out/production/classes/org/javatechs/kbackup/commander/service/security/NodeUserDetailsService.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userRepo2': Cannot resolve reference to bean 'neo4jMappingContext' while setting bean property 'mappingContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'neo4jMappingContext': Invocation of init method failed; nested exception is java.lang.UnsupportedOperationException: This class is an internal synthetic class generated by the Kotlin compiler, such as an anonymous class for a lambda, a SAM wrapper, a callable reference, etc. It's not a Kotlin class or interface, so the reflection library has no idea what declarations does it have. Please use Java reflection to inspect this class: class org.javatechs.kbackup.commander.util.jmx.JmxIniter$crerateUser$u$1     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:745) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:214) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1269) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1126) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:275) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1133) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1060) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:832) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:737) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     ... 24 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userRepo2': Cannot resolve reference to bean 'neo4jMappingContext' while setting bean property 'mappingContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'neo4jMappingContext': Invocation of init method failed; nested exception is java.lang.UnsupportedOperationException: This class is an internal synthetic class generated by the Kotlin compiler, such as an anonymous class for a lambda, a SAM wrapper, a callable reference, etc. It's not a Kotlin class or interface, so the reflection library has no idea what declarations does it have. Please use Java reflection to inspect this class: class org.javatechs.kbackup.commander.util.jmx.JmxIniter$crerateUser$u$1     at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:378) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1607) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1352) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:275) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1133) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1060) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:832) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:737) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     ... 38 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'neo4jMappingContext': Invocation of init method failed; nested exception is java.lang.UnsupportedOperationException: This class is an internal synthetic class generated by the Kotlin compiler, such as an anonymous class for a lambda, a SAM wrapper, a callable reference, etc. It's not a Kotlin class or interface, so the reflection library has no idea what declarations does it have. Please use Java reflection to inspect this class: class org.javatechs.kbackup.commander.util.jmx.JmxIniter$crerateUser$u$1     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1702) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:583) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:367) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     ... 52 common frames omitted Caused by: java.lang.UnsupportedOperationException: This class is an internal synthetic class generated by the Kotlin compiler, such as an anonymous class for a lambda, a SAM wrapper, a callable reference, etc. It's not a Kotlin class or interface, so the reflection library has no idea what declarations does it have. Please use Java reflection to inspect this class: class org.javatechs.kbackup.commander.util.jmx.JmxIniter$crerateUser$u$1     at kotlin.reflect.jvm.internal.KClassImpl.reportUnresolvedClass(KClassImpl.kt:289) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.KClassImpl.access$reportUnresolvedClass(KClassImpl.kt:42) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.KClassImpl$Data$descriptor$2.invoke(KClassImpl.kt:52) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.KClassImpl$Data$descriptor$2.invoke(KClassImpl.kt:43) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal.invoke(ReflectProperties.java:93) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:32) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.KClassImpl$Data.getDescriptor(KClassImpl.kt) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.KClassImpl.getDescriptor(KClassImpl.kt:172) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.KClassImpl.getConstructorDescriptors(KClassImpl.kt:186) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.KClassImpl$Data$constructors$2.invoke(KClassImpl.kt:90) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.KClassImpl$Data$constructors$2.invoke(KClassImpl.kt:43) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal.invoke(ReflectProperties.java:93) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:32) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.KClassImpl$Data.getConstructors(KClassImpl.kt) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.internal.KClassImpl.getConstructors(KClassImpl.kt:222) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at kotlin.reflect.jvm.ReflectJvmMapping.getKotlinFunction(ReflectJvmMapping.kt:149) ~[kotlin-reflect-1.1.4-3.jar:1.1.4-3]     at org.springframework.core.KotlinReflectionParameterNameDiscoverer.getParameterNames(KotlinReflectionParameterNameDiscoverer.java:75) ~[spring-core-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.core.PrioritizedParameterNameDiscoverer.getParameterNames(PrioritizedParameterNameDiscoverer.java:67) ~[spring-core-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers.buildPreferredConstructor(PreferredConstructorDiscoverer.java:209) ~[spring-data-commons-2.0.0.RC3.jar:na]     at org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers.access$200(PreferredConstructorDiscoverer.java:89) ~[spring-data-commons-2.0.0.RC3.jar:na]     at org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers$2.lambda$discover$0(PreferredConstructorDiscoverer.java:161) ~[spring-data-commons-2.0.0.RC3.jar:na]     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[na:1.8.0_144]     at java.util.Spliterators$ArraySpliterator.tryAdvance(Spliterators.java:958) ~[na:1.8.0_144]     at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) ~[na:1.8.0_144]     at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) ~[na:1.8.0_144]     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) ~[na:1.8.0_144]     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_144]     at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) ~[na:1.8.0_144]     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_144]     at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) ~[na:1.8.0_144]     at org.springframework.data.mapping.model.PreferredConstructorDiscoverer$Discoverers$2.discover(PreferredConstructorDiscoverer.java:164) ~[spring-data-commons-2.0.0.RC3.jar:na]     at org.springframework.data.mapping.model.PreferredConstructorDiscoverer.discover(PreferredConstructorDiscoverer.java:77) ~[spring-data-commons-2.0.0.RC3.jar:na]     at org.springframework.data.mapping.model.BasicPersistentEntity.(BasicPersistentEntity.java:93) ~[spring-data-commons-2.0.0.RC3.jar:na]     at org.springframework.data.mapping.model.BasicPersistentEntity.(BasicPersistentEntity.java:74) ~[spring-data-commons-2.0.0.RC3.jar:na]     at org.springframework.data.neo4j.mapping.Neo4jPersistentEntity.(Neo4jPersistentEntity.java:56) ~[spring-data-neo4j-5.0.0.RC3.jar:na]     at org.springframework.data.neo4j.mapping.Neo4jMappingContext.createPersistentEntity(Neo4jMappingContext.java:64) ~[spring-data-neo4j-5.0.0.RC3.jar:na]     at org.springframework.data.neo4j.mapping.Neo4jMappingContext.createPersistentEntity(Neo4jMappingContext.java:44) ~[spring-data-neo4j-5.0.0.RC3.jar:na]     at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:376) ~[spring-data-commons-2.0.0.RC3.jar:na]     at org.springframework.data.mapping.context.AbstractMappingContext.addPersistentEntity(AbstractMappingContext.java:343) ~[spring-data-commons-2.0.0.RC3.jar:na]     at org.springframework.data.neo4j.mapping.Neo4jMappingContext.lambda$new$1(Neo4jMappingContext.java:57) ~[spring-data-neo4j-5.0.0.RC3.jar:na]     at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[na:1.8.0_144]     at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[na:1.8.0_144]     at java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1620) ~[na:1.8.0_144]     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[na:1.8.0_144]     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_144]     at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[na:1.8.0_144]     at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[na:1.8.0_144]     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_144]     at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[na:1.8.0_144]     at org.springframework.data.neo4j.mapping.Neo4jMappingContext.(Neo4jMappingContext.java:57) ~[spring-data-neo4j-5.0.0.RC3.jar:na]     at org.springframework.data.neo4j.repository.config.Neo4jMappingContextFactoryBean.createInstance(Neo4jMappingContextFactoryBean.java:62) ~[spring-data-neo4j-5.0.0.RC3.jar:na]     at org.springframework.data.neo4j.repository.config.Neo4jMappingContextFactoryBean.createInstance(Neo4jMappingContextFactoryBean.java:31) ~[spring-data-neo4j-5.0.0.RC3.jar:na]     at org.springframework.beans.factory.config.AbstractFactoryBean.afterPropertiesSet(AbstractFactoryBean.java:141) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1761) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1698) ~[spring-beans-5.0.0.RC4.jar:5.0.0.RC4]     ... 59 common frames omitted ```    ---  **Affects:** 5.0 RC4  **Issue Links:** - [DATACMNS-1171](https://jira.spring.io/browse/DATACMNS-1171) PreferredConstructorDiscoverer attempts constructor discovery on synthetic Kotlin class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3996f3339916dafffbedcf155d9f540f73db1966","closed","type: bug,","spring-projects-issues","2017-09-24T20:36:34Z","2017-09-28T12:14:38Z"
"","20513","Add CBOR support to WebFlux [SPR-15961]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15961](https://jira.spring.io/browse/SPR-15961?redirect=false)** and commented  See https://github.com/FasterXML/jackson-dataformats-binary/issues/110  ---  **Issue Links:** - #20331 Support Protobuf serialization in WebFlux","open","type: enhancement,","spring-projects-issues","2017-09-14T12:08:16Z","2019-01-11T18:09:13Z"
"","20496","Support null-safety at generics, varargs and array elements level [SPR-15942]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15942](https://jira.spring.io/browse/SPR-15942?redirect=false)** and commented  As raised and discuss on [KT-19592 Kotlin issue](https://youtrack.jetbrains.com/issue/KT-19592), null-safety of Spring API does not apply to generic type arguments. To do so, after KT-19592 being fixed we would have to use `ElementType.TYPE_USE` but its scope is too wide to make it usable for us at `@TypeQualifierDefault` level of `@Nullable` and `@NonNullApi`.  Another solution would be to add `ElementType.TYPE_USE` at `@Target` and annotate every generic type argument of Spring API, maybe that could be done via introducing a `@NonNull` annotation that would also be useful for #20311.  ---  **Issue Links:** - #20311 Revisit nullability annotations towards GA (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e1be82cfbc5b31bc8edcbec81feb08a99d9c3de, https://github.com/spring-projects/spring-framework/commit/1bc93e3d0f2bd3ffc6b48662073a427c31088b3d","open","type: enhancement,","spring-projects-issues","2017-09-08T15:10:53Z","2021-07-26T11:26:23Z"
"","20495","Consistent type resolution for ? and Object element type [SPR-15941]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15941](https://jira.spring.io/browse/SPR-15941?redirect=false)** and commented  As discussed on #20464 and [this PR](https://github.com/spring-projects/spring-framework/pull/1516), if we want Spring WebFlux to be consistent for `?` and `Object` element type resolution (for example to work when a `Resource` instance is return asynchronously or not), we should make sure than the following return types are handled like `ResponseEntity` when a single value type is returned: - `ResponseEntity>` with `ResponseEntity>` with `ResponseEntity` return value - `Publisher` with `Mono` return value - `Publisher` with `Mono` return value - `ResponseEntity>` - `ResponseEntity>` - `Single` - `Single`  Implementation note: current hint resolution is broken (for example [here](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java#L117) for `JsonView` support) when getting the nested `ResolvableType` and we should probably limit the early `flatmap()` operation to `?` and `Object` element types but we should be careful to avoid doing type resolution twice (in `writeBody()` + in `handleResult()`).  ---  **Issue Links:** - #20464 WebFlux incorrectly falls back to application/json for method that produces application/octet-stream and returns ResponseEntity - #20647 Fix Reactive JsonView + HttpEntity handling","closed","type: enhancement,","spring-projects-issues","2017-09-08T14:53:21Z","2019-01-11T18:10:29Z"
"","20444","Detect and log when kotlin-reflect is not on the classpath [SPR-15889]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15889](https://jira.spring.io/browse/SPR-15889?redirect=false)** and commented   --- No further details from [SPR-15889](https://jira.spring.io/browse/SPR-15889?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-08-22T09:19:34Z","2017-08-22T14:13:38Z"
"","20424","Fix overridden methods nullability [SPR-15869]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15869](https://jira.spring.io/browse/SPR-15869?redirect=false)** and commented  As specified in [this custom nullability proposal](https://github.com/Kotlin/KEEP/blob/jsr-305/proposals/jsr-305-custom-nullability-qualifiers.md#conflicts-between-default-qualifiers-and-overridden) and as discussed with Jetbrains team, methods overridding parent one with `@Nullable` return values annotation require the `@Nullable` annotation to be present at the same level than `@Override` to get nullable qualifier taken in account in the overridden method.  This is currently not done in most places, so this need to be fixed to get null-safety handled correctly by IDEA and Kotlin.  ---  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API - #20311 Revisit nullability annotations towards GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73cf07e9a4f1000087118c24ef5d56f621f41160, https://github.com/spring-projects/spring-framework/commit/47a7475898fc918e2f945206e3364bdaab2bb39f","closed","type: bug,","spring-projects-issues","2017-08-16T20:54:13Z","2019-01-11T18:07:59Z"
"","20640","ContentDisposition class cannot parse quoted filename with ; [SPR-16091]","**[Szava Jeno Maczika](https://jira.spring.io/secure/ViewProfile.jspa?name=maczikasz)** opened **[SPR-16091](https://jira.spring.io/browse/SPR-16091?redirect=false)** and commented  Trying to parse a filename containing a semicolon in the name will cause `ContentDisposition` class to throw  ``` java.lang.IllegalArgumentException: Invalid content disposition format ```  This is due to the StringTokenizer with "";"" does not ignore quoted, it's possible to solve with a negative lookahead regexp:  https://stackoverflow.com/questions/1757065/java-splitting-a-comma-separated-string-but-ignoring-commas-in-quotes  This was working for us in a similar case, but I am not sure what's the performance impact using this in spring-web.  ```java @Test public void parseQuotedFileNameWithSemicolon() {      ContentDisposition disposition = ContentDisposition                .parse(""attachment; filename=\""filename with ; semicolon.txt\"""");      assertEquals(ContentDisposition.builder(""attachment"")                .filename(""filename with ; semicolon.txt.txt"").build(), disposition); } ```  ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c256a112b345f1a35a572c7498abc3f95b997ea","closed","type: bug,","spring-projects-issues","2017-10-20T17:55:32Z","2019-06-05T08:16:32Z"
"","21009","About Default Message Listener Container [SPR-16464]","**[SWAPNIL UGARE](https://jira.spring.io/secure/ViewProfile.jspa?name=swapnilugare)** opened **[SPR-16464](https://jira.spring.io/browse/SPR-16464?redirect=false)** and commented  Hi All,  We created spring boot JMS application which listen MQ and process received message.when Message processing we have third party API call which does not support the asynchronous call API call. We made  third party API  synchronized. so that it will thread safe and keep session.  When we push multiple messages in MQ that number of thread will create in our spring boot JMS application. all thread will work asynchronously when all thread reach to third party API call then it will wait still previous thread finish his work.  But third party API call will take more time because of that some JMS thread will expire or dead without throwing any exception.  Let we know which way we will keep alive messaging thread for long time or provide any alternative solution.   --- No further details from [SPR-16464](https://jira.spring.io/browse/SPR-16464?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-02-03T15:07:57Z","2019-01-12T05:19:27Z"
"","21095","Incorrect description for class-level @Transactional with AspectJ [SPR-16552]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-16552](https://jira.spring.io/browse/SPR-16552?redirect=false)** and commented  Section **Data Access**, paragraph **1.5.9. Using `@Transactional` with AspectJ** contains description of using a **`@Transactional`** annotation. But the aforementioned description for the class's annotation is not completely right or clear. There is written: `The @Transactional annotation on a class specifies the default transaction semantics for the execution of *any* method in the class.`  But I've checked the aspect org.springframework.transaction.aspectj.AnnotationTransactionAspect and seen that it is not quite true because it is true only for **public** methods of the class. So we should write this: `The @Transactional annotation on a class specifies the default transaction semantics for the execution of *any public* method in the class.` or something like that.  ---  **Affects:** 4.3.14, 5.0.4  **Reference URL:** https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/data-access.html#transaction-declarative-aspectj  **Attachments:** - [aop_aspect_J_descriprion.png](https://jira.spring.io/secure/attachment/25411/aop_aspect_J_descriprion.png) (_28.18 kB_)  **Issue Links:** - #21092 Incorrect pointcut expressions in reference documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff818d56a484cff403bb41668aeddea6b47c8fa9, https://github.com/spring-projects/spring-framework/commit/f7898951bd0955023667c43088567e640f242972  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: documentation,","spring-projects-issues","2018-03-04T22:01:48Z","2019-01-11T14:33:11Z"
"","21092","Incorrect pointcut expressions in reference documentation [SPR-16549]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-16549](https://jira.spring.io/browse/SPR-16549?redirect=false)** and commented  The section **Data Access**, paragraph **1.5.8. Advising transnational operations** contains incorrect pointcut expressions: `""execution(!void x.y..Service.(..))""` and `""execution(\* x.y..Service.(..))""` at 3 places as shown in images that is attached. The correct poincut expressions should be: `""execution(!void x.y..\*Service.\*(..))""` and `""execution(\* x.y..\*Service.\*(..))""` accordingly. h4. I think that aforementioned section, paragraph **1.5.4. Configuring different transnational semantics for different beans** also contains wrong pointcut expression : `""execution(\* x.y.service.\*Service.\*(..))""` because we point to some class that ends with `Service` in packet  x.y.service, but actually we want to point to any packet that have a root - x.y.service. So the correct pointcut expression should be: `""execution(\* x.y.service..\*Service.\*(..))""`  ---  **Affects:** 5.0.4  **Reference URL:** https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/data-access.html#spring-data-tier  **Attachments:** - [Bad_Pointcat_Expression1.png](https://jira.spring.io/secure/attachment/25409/Bad_Pointcat_Expression1.png) (_53.25 kB_) - [Bad_Pointcat_Expression2_3.png](https://jira.spring.io/secure/attachment/25408/Bad_Pointcat_Expression2_3.png) (_62.51 kB_) - [Wrong_Pointcat_Expression.png](https://jira.spring.io/secure/attachment/25407/Wrong_Pointcat_Expression.png) (_47.17 kB_)  **Issue Links:** - #21095 Incorrect description for class-level `@Transactional` with AspectJ  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff818d56a484cff403bb41668aeddea6b47c8fa9","closed","type: documentation,","spring-projects-issues","2018-03-04T09:54:18Z","2019-01-13T04:50:50Z"
"","20862","Incorrect SpEL syntax in reference documentation [SPR-16315]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-16315](https://jira.spring.io/browse/SPR-16315?redirect=false)** and commented  Spring Framework Reference (Testing) https://docs.spring.io/spring/docs/5.0.2.RELEASE/spring-framework-reference/testing.html contains incorrect code fragment in section `3.5.6. Testing request and session scoped beans`  The incorrect fragment is:  ```                              ```  The problem is that `c:username=""{request.getParameter('user')}""` should have prefix `#{` for correct SpEL syntax. The same is true for `c:password=""{request.getParameter('pswd')}""`   ---  **Affects:** 4.3.13, 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8aa94aee27e2423da4c79f2df5e2a693a3fe1152, https://github.com/spring-projects/spring-framework/commit/0d151b02120789f65f79f218c5e87d66b3c8663e  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: documentation,","spring-projects-issues","2017-12-19T16:18:58Z","2018-01-23T09:33:23Z"
"","20659","Incorrect SpEL example in reference documentation [SPR-16111]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-16111](https://jira.spring.io/browse/SPR-16111?redirect=false)** and commented  Spring Framework Reference Core Technologies https://docs.spring.io/spring/docs/current/spring-framework-reference/pdf/core.pdf contains incorrect code fragment in section `4.5.6. Methods`. The incorrect code fragment is: ``` // string literal, evaluates to ""bc"" String c = parser.parseExpression(""'abc'.substring(2, 3)"").getValue(String.class);  ``` Because string literal, evaluates to ""c"" but not to ""bc"" ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f965123513bfa04780404abb19bd66bbaa5a655f, https://github.com/spring-projects/spring-framework/commit/5867ea0c3c274c29cdec41f7114b2dbd73e8fa62  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: documentation,","spring-projects-issues","2017-10-25T11:41:31Z","2017-11-27T10:59:11Z"
"","20611","Remove duplicate commons logging classes from spring-jcl [SPR-16062]","**[Sven Haster](https://jira.spring.io/secure/ViewProfile.jspa?name=haster)** opened **[SPR-16062](https://jira.spring.io/browse/SPR-16062?redirect=false)** and commented  spring-jcl has duplicated a number of classes from apache commons logging, such as org.apache.commons.logging.Log spring-core has a dependency on spring-jcl and therefore everyone who has a dependency on spring-core gets these duplicate classes and has errors resulting from this if they also depend on commons logging or slf4j-jcl  This is less than ideal and goes against convention. It would be better to either a) have a dependency on commons-logging or b) if you really want to include these classes, change the package names to something like org.springframework.x.y  ---  **Affects:** 5.0 GA  **Issue Links:** - #20509 spring-jcl does not include exported packages of java commons logging - #19081 Revisit Commons Logging vs java.util.logging vs SLF4J vs Log4j 2","closed","type: enhancement,","spring-projects-issues","2017-10-12T11:29:20Z","2022-06-22T11:36:43Z"
"","20888","Add ClientHttpConnector for Apache Http-async-client [SPR-16341]","**[sushma](https://jira.spring.io/secure/ViewProfile.jspa?name=sushma28)** opened **[SPR-16341](https://jira.spring.io/browse/SPR-16341?redirect=false)** and commented  Since RestTemplate, earlier had provided support for Apache Http Components, I was expecting Web Flux also to provide a default implementation for Apache Async Components.  Can you please direct me to any documentation on this ? or Provide me more information on this  Thanks  ---  **Issue Links:** - #19658 Jetty HTTP client integration with WebClient","closed","type: enhancement,","spring-projects-issues","2018-01-03T06:52:14Z","2019-01-11T15:20:03Z"
"","21012","Decrease SPRING_SECURITY_CONTEXT and SPRING_SECURITY_SAVED_REQUEST_KEY session keys size [SPR-16467]","**[suneel nulu](https://jira.spring.io/secure/ViewProfile.jspa?name=leenus_0071)** opened **[SPR-16467](https://jira.spring.io/browse/SPR-16467?redirect=false)** and commented  The size of SPRING_SECURITY_CONTEXT and SPRING_SECURITY_SAVED_REQUEST_KEY session key is around 1,285b and 2,174b, as it is saved as object of types org.springframework.security.web.savedrequest.DefaultSavedRequest and org.springframework.security.core.context.SecurityContextImpl.  Over a period of several years we have improvised our own application session usage and came to a understanding that keeping an object vs string object in session utilizes less space on jvm heap.  We save about 20+ attributes in session, together they take way less size than that of the above two attributes coming out of spring.  By doing this we are now able to serve more sessions per vm node, which brings our operational cost down.  So please break the above types into individual string type attributes and make use of it in spring projects, or if there is an alternative, please suggest that.  Actual: SPRING_SECURITY_CONTEXT and SPRING_SECURITY_SAVED_REQUEST_KEY    session keys using more heap memory.  Expected: SPRING_SECURITY_CONTEXT and SPRING_SECURITY_SAVED_REQUEST_KEY session keys should use less heap memory.   ---  **Attachments:** - [Spring session.jpg](https://jira.spring.io/secure/attachment/25379/Spring+session.jpg) (_301.36 kB_)","closed","status: invalid,","spring-projects-issues","2018-02-05T05:51:44Z","2019-01-12T05:19:26Z"
"","19266","CustomTypeCondition will be missing if not have @RequestMapping annotation [SPR-16442]","**[suimi](https://jira.spring.io/secure/ViewProfile.jspa?name=suimi)** opened **[SPR-16442](https://jira.spring.io/browse/SPR-16442?redirect=false)** and commented  when custom the request condition, if the type without `@RequestMapping` annotation, it's will be missing  ```java  @Override     protected RequestCondition getCustomTypeCondition(Class handlerType) {         ApiVersion apiVersion = AnnotationUtils.findAnnotation(handlerType, ApiVersion.class);         //如果类没有定义api版本，则设置为应用版本         int currentVersion = apiVersion == null ? versionProperties.getVersion() : apiVersion.value();         return createCondition(currentVersion, currentVersion);     }      @Override     protected RequestCondition getCustomMethodCondition(Method method) {         ApiVersion apiVersion = AnnotationUtils.findAnnotation(method, ApiVersion.class);         //如果没有定义api版本，则设定为-1，意为未定义         return createCondition(versionProperties.getVersion(), apiVersion == null ? -1 : apiVersion.value());     } ```  here is the code from RequestMappingHandlerMapping, if type without `@RequestMapping` annotation, type request mapping info will be null, typeInfo.combine(info) will not be execute, the result is type condition missing  ```java 	@Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class handlerType) { 		RequestMappingInfo info = createRequestMappingInfo(method); 		if (info != null) { 			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType); 			if (typeInfo != null) { 				info = typeInfo.combine(info); 			} 		} 		return info; 	}  	/** 	 * Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)}, 	 * supplying the appropriate custom {@link RequestCondition} depending on whether 	 * the supplied {@code annotatedElement} is a class or method. 	 * @see #getCustomTypeCondition(Class) 	 * @see #getCustomMethodCondition(Method) 	 */ 	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) { 		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class); 		RequestCondition condition = (element instanceof Class ? 				getCustomTypeCondition((Class) element) : getCustomMethodCondition((Method) element)); 		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null); 	} ```    ---  **Affects:** 4.3.14  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b77032c36eedfd2cc9952f3042ca361b335f5b82","closed","status: declined,","spring-projects-issues","2018-01-31T07:20:00Z","2019-01-12T16:33:56Z"
"","21131","Support for grouped DeferredImportSelector [SPR-16589]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-16589](https://jira.spring.io/browse/SPR-16589?redirect=false)** and commented  `DeferredImportSelector` instances are processed independently and they can't share any state. It is a problem if several instances are contributing to the same deferred import sets (typically spring boot auto-configurations).   ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc12afdea2c4b2c3073c1c2bbc88091a4e7db74e","closed","type: enhancement,","spring-projects-issues","2018-03-13T20:51:54Z","2018-04-03T20:34:26Z"
"","21105","Document that @PropertySource and @TestPropertySource do not support YAML [SPR-16563]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-16563](https://jira.spring.io/browse/SPR-16563?redirect=false)** and commented   ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d1a0b8d53f92ec410d51bdd89aee979107541bd4","closed","type: documentation,","spring-projects-issues","2018-03-07T14:05:57Z","2019-01-11T14:32:23Z"
"","20907","Improve WebFlux.fn Java configuration documentation [SPR-16360]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-16360](https://jira.spring.io/browse/SPR-16360?redirect=false)** and commented  See https://github.com/spring-projects/spring-boot/issues/11576  Looking at the current reference guide, there is a very good explanation at how a router can be composed from multiple `RouterFunction`. There is also a link to the Java configuration part but this section doesn't seem to have anything specific to WebFlux.fn  It would be nice if that part of the doc had a section so that we understand what `@EnableWebFlux` does in that situation.   ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72e3c43375e50f40d7ef52ede74ccc93455e8a97, https://github.com/spring-projects/spring-framework/commit/cdf2ab973783062ba55cc9fbd2ad881eae094647","closed","type: documentation,","spring-projects-issues","2018-01-09T09:01:37Z","2018-01-23T10:05:12Z"
"","20598","Lower log level of ResponseStatusExceptionHandler [SPR-16049]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-16049](https://jira.spring.io/browse/SPR-16049?redirect=false)** and commented  Assuming the following code  ```java @GetMapping(""/speakers/{id}"") public Mono byId(@PathVariable String id) {     return this.repository.findById(id)             .switchIfEmpty(Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND))); } ```  logs at error level when an unknown id is provided:  ``` ERROR 9551 --- [      Thread-15] o.s.w.s.h.ResponseStatusExceptionHandler : Response status 404 ```  `ERROR` for an expected case sounds too high.   ---  **Affects:** 5.0 GA","closed","type: enhancement,","spring-projects-issues","2017-10-05T16:02:11Z","2017-10-24T16:24:06Z"
"","20483","Inconsistent bean definition visibility between @ComponentScan and @Import [SPR-15929]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15929](https://jira.spring.io/browse/SPR-15929?redirect=false)** and commented  The use case is described [in a Spring Boot issue](https://github.com/spring-projects/spring-boot/issues/5093#issuecomment-180405492)   ---  **Affects:** 4.3.10","open","type: enhancement,","spring-projects-issues","2017-09-06T15:56:32Z","2017-09-18T22:18:05Z"
"","20477","Provide hierarchy traversal support for getBeanNamesForAnnotation [SPR-15923]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15923](https://jira.spring.io/browse/SPR-15923?redirect=false)** and commented   ---  **Affects:** 5.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/71182ab54b62924ad2e475995872435211b33807","closed","type: enhancement,","spring-projects-issues","2017-09-01T14:41:24Z","2017-09-11T12:09:51Z"
"","20443","Build failing with Sonar [SPR-15888]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-15888](https://jira.spring.io/browse/SPR-15888?redirect=false)** and commented  The sonar build is failing for quite some time. I can reproduce that locally by having Sonar running on my machine + `./gradlew sonarqube`  ``` java.lang.IllegalStateException: Multiple matching methods: ResolvableMethod.Builder[ 	objectClass = org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests$TestController, 	filters = [ 		annotationNotPresent=[interface org.springframework.web.bind.annotation.ResponseBody] 	] ] Matched: [ 	private static boolean[] org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests$TestController.$jacocoInit(), 	public java.lang.String org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests$TestController.doWork() ] 	at org.springframework.util.Assert.state(Assert.java:73) 	at org.springframework.web.method.ResolvableMethod$Builder.build(ResolvableMethod.java:374) 	at org.springframework.web.method.ResolvableMethod$Builder.resolveMethod(ResolvableMethod.java:403) 	at org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests.supports(ResponseBodyResultHandlerTests.java:86) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ```  Looks like Jacoco is messing up something   ---  **Affects:** 5.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5a51351fa4e582571a442b331fb3f2bec0e63f30","closed","type: task,","spring-projects-issues","2017-08-22T07:47:21Z","2017-09-11T12:09:49Z"
"","20467","Handle @RequestMapping at package level [SPR-15913]","**[Stéphane Daviet](https://jira.spring.io/secure/ViewProfile.jspa?name=stephanedaviet)** opened **[SPR-15913](https://jira.spring.io/browse/SPR-15913?redirect=false)** and commented  I would like to manage the version of my REST API in the URL, something like _v1/my_resource_ and get all the controllers under a same package exposed under the same version path. I was seeking for an elegant way of doing this without hardly coding the version part in all the controllers (like `@RequestMapping(""/v1/myresource"")`). I would like to know if applying the `@RequestMapping` at the package level (in an `package-info.java`) is an idea that is worth trying? If yes, I would gladly try to provide a pull request.  ---  **Affects:** 4.3.10  **Issue Links:** - #19231 support for providing a path component on a package-info (_**""duplicates""**_) - #20883 Ability to provide an external base path for controllers (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2017-08-30T13:06:48Z","2019-01-11T18:12:06Z"
"","20686","MockHttpServletRequest with Host: set builds wrong getRequestURL() [SPR-16138]","**[Steven Schlansker](https://jira.spring.io/secure/ViewProfile.jspa?name=stevenschlansker)** opened **[SPR-16138](https://jira.spring.io/browse/SPR-16138?redirect=false)** and commented  MockHttpServletRequest has a `serverName` field, but the getter does additional logic around parsing the `Host:` header.  This leads to inconsistency when `getRequestURL` reflects a different `serverName` than `getServerName` does.  https://github.com/spring-projects/spring-framework/pull/1579  ---  **Affects:** 4.3.12  **Issue Links:** - #16704 MockHttpServletRequest should honor ""Host"" header in getServerName() and getServerPort() - #20708 MockHttpServletResponse.getDateHeader fails with NPE for non-existing header  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ca4de1ccf6cbe69b30bc93a724f1014dfdbb22c, https://github.com/spring-projects/spring-framework/commit/0edf4d6509a7a4d43b70a408e4ff40e9c0d083fe  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: bug,","spring-projects-issues","2017-10-31T20:35:55Z","2019-01-11T13:14:48Z"
"","20491","StompDecoder Logs Null Session IDs for Heartbeats [SPR-15937]","**[Steve Roy](https://jira.spring.io/secure/ViewProfile.jspa?name=stevedroy)** opened **[SPR-15937](https://jira.spring.io/browse/SPR-15937?redirect=false)** and commented  When enabling the TRACE log level on the StompDecoder, a null session id is logged for heartbeats in the Spring WebSocket STOMP client.  Here is a logging sample:  ``` 11:39:03 [WebSocketClient-AsyncIO-1] StompDecoder - Decoded heart-beat in session null 11:39:30 [WebSocketClient-AsyncIO-1] StompDecoder - Decoded heart-beat in session null 11:39:31 [WebSocketClient-AsyncIO-1] StompDecoder - Decoded heart-beat in session null 11:39:32 [WebSocketClient-AsyncIO-1] StompDecoder - Decoded heart-beat in session null 11:39:36 [WebSocketClient-AsyncIO-1] StompDecoder - Decoded heart-beat in session null ```    ---  **Affects:** 4.3.9  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/07a0a3156559c3d838249b7aa923abe1d9ee1f83, https://github.com/spring-projects/spring-framework/commit/aa4ae7a750cfc4b024dcec3d411f7e8d083fbee7","closed","type: bug,","spring-projects-issues","2017-09-07T16:00:38Z","2017-09-11T09:13:06Z"
"","20455","When Enabling DEBUG log level on SimpleBrokerMessageHandler Exceptions are Logged [SPR-15901]","**[Steve Roy](https://jira.spring.io/secure/ViewProfile.jspa?name=stevedroy)** opened **[SPR-15901](https://jira.spring.io/browse/SPR-15901?redirect=false)** and commented  When enabling the DEBUG log level on SimpleBrokerMessageHandler exceptions are logged.  ``` 11:41:36.631 [http-nio-27080-exec-3]  level=DEBUG logger=SimpleBrokerMessageHandler : Processing MESSAGE destination=/topic/interestinginfo session=null payload=\{""data"":""123""\} java.lang.IllegalStateException: Already immutable 	at org.springframework.util.Assert.state(Assert.java:70) 	at org.springframework.messaging.support.MessageHeaderAccessor$MutableMessageHeaders.getRawHeaders(MessageHeaderAccessor.java:620) 	at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.handleMessageInternal(SimpleBrokerMessageHandler.java:264) 	at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:238) 	at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:135) 	at org.springframework.messaging.support.ExecutorSubscribableChannel.sendInternal(ExecutorSubscribableChannel.java:91) 	at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:117) 	at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:104) 	at org.springframework.messaging.simp.SimpMessagingTemplate.sendInternal(SimpMessagingTemplate.java:184) 	at org.springframework.messaging.simp.SimpMessagingTemplate.doSend(SimpMessagingTemplate.java:159) 	at org.springframework.messaging.simp.SimpMessagingTemplate.doSend(SimpMessagingTemplate.java:47) 	at org.springframework.messaging.core.AbstractMessageSendingTemplate.send(AbstractMessageSendingTemplate.java:105) 	at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:143) 	at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:123) 	at org.springframework.messaging.core.AbstractMessageSendingTemplate.convertAndSend(AbstractMessageSendingTemplate.java:118) 	at com.wex.mobile.paymentservice.websockets.listener.WebSocketSessionSubscribeEventListener.onApplicationEvent(WebSocketSessionSubscribeEventListener.java:57) 	at com.wex.mobile.paymentservice.websockets.listener.WebSocketSessionSubscribeEventListener.onApplicationEvent(WebSocketSessionSubscribeEventListener.java:19) 	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) 	at org.springframework.web.socket.messaging.StompSubProtocolHandler.publishEvent(StompSubProtocolHandler.java:398) 	at org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageFromClient(StompSubProtocolHandler.java:312) 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:307) 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75) 	at org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleMessage(LoggingWebSocketHandlerDecorator.java:56) 	at org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleMessage(ExceptionWebSocketHandlerDecorator.java:58) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.handleTextMessage(StandardWebSocketHandlerAdapter.java:110) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.access$000(StandardWebSocketHandlerAdapter.java:42) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:81) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:78) 	at org.apache.tomcat.websocket.WsFrameBase.sendMessageText(WsFrameBase.java:388) 	at org.apache.tomcat.websocket.server.WsFrameServer.sendMessageText(WsFrameServer.java:110) 	at org.apache.tomcat.websocket.WsFrameBase.processDataText(WsFrameBase.java:489) 	at org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:288) 	at org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:127) 	at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:73) 	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.upgradeDispatch(WsHttpUpgradeHandler.java:148) 	at org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:54) 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53) 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:748) ```    --- No further details from [SPR-15901](https://jira.spring.io/browse/SPR-15901?redirect=false)","closed","","spring-projects-issues","2017-08-25T15:48:21Z","2019-01-11T18:12:12Z"
"","20418","Token-based WebSocket Authentication Documentation Inaccuracy [SPR-15863]","**[Steve Roy](https://jira.spring.io/secure/ViewProfile.jspa?name=stevedroy)** opened **[SPR-15863](https://jira.spring.io/browse/SPR-15863?redirect=false)** and commented  The Spring documentation to register a custom websocket authentication interceptor has an inaccuracy.  For custom OAuth authentication ( or any custom authentication ), the sample code indicates a security Principal should be set on the StompHeaderAccessor.  However, the downstream Spring Security code expects the object set on the StompHeaderAccessor to be of type Authentication rather than Principal.  ( Note, Authentication is a sub-interface of Principal. )  **Documentation:** **26.4.11 Token-based Authentication** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html  Code example from documentation:  ```java if (StompCommand.CONNECT.equals(accessor.getCommand())) {     Principal user = ... ; // access authentication header(s)     accessor.setUser(user); } ```  **Current Spring Security Code:** SecurityContextChannelInterceptor https://github.com/spring-projects/spring-security/blob/master/messaging/src/main/java/org/springframework/security/messaging/context/SecurityContextChannelInterceptor.java  See Line 125  ```java Authentication authentication; if ((user instanceof Authentication)) {      authentication = (Authentication) user; } else {      authentication = this.anonymous; } ```  When setting an object of type Principal, the check fails and the security context is set to an anonymous user.   ---  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8b64ad3192b46feb9cad0de582496c37100d2fdc, https://github.com/spring-projects/spring-framework/commit/181f002ddf22b6b05bd517f57c72f6ec9eeaf0b6","closed","type: task,","spring-projects-issues","2017-08-14T17:31:36Z","2017-09-11T09:13:06Z"
"","21043","Invalid/missing locale strings in header prevents resolving the locale [SPR-16500]","**[Stephen Imhoff](https://jira.spring.io/secure/ViewProfile.jspa?name=clockwork-muse)** opened **[SPR-16500](https://jira.spring.io/browse/SPR-16500?redirect=false)** and commented  Spring Boot 2.0.0.M7 with the web-flux starter.  Not sure if I just have a screw loose or what, but invalid locale strings (""en_US"" instead of ""en-US"") or missing the header entirely seems to prevent any locale from being resolved in controllers and elsewhere.  Supplying  a `LocaleContextResolver` bean doesn't seem to help.  `LocaleResolver` doesn't seem to be compatible due to version, it looks like.  I think I would have anticipated a null locale, instead of a 500 error, or at least a 400...  ---  **Affects:** 5.0.3  **Attachments:** - [locale_repro.zip](https://jira.spring.io/secure/attachment/25398/locale_repro.zip) (_55.97 kB_)  **Issue Links:** - #21002 AcceptHeaderLocaleResolver should match country locales against supported language locales - #19987 Revise AcceptHeaderLocaleResolver default locale handling  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cd8a1bdb8bcf3fb903c7c88bdfd5c49c194f0c65","closed","type: bug,","spring-projects-issues","2018-02-15T00:56:10Z","2019-01-11T14:38:12Z"
"","20880","SpEL auto-boxing error [SPR-16333]","**[Stephanie Blair](https://jira.spring.io/secure/ViewProfile.jspa?name=diestephanie)** opened **[SPR-16333](https://jira.spring.io/browse/SPR-16333?redirect=false)** and commented  in my application.properties file i have the following line:  ```java occurrence.of.garbage=9 ```  in a Java class i have the following use of SpEL:  ```java @Value(""#{new Integer('\""${occurrence.of.garbage}\""')}"") protected int garbageOccurs; ```  I receive the following stack trace upon start up:  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'com.blairtech.wsjoiner.controller.WSJoinerSourceControllerTest': **Unsatisfied dependency expressed through field 'garbageOccurs'; nested exception is org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is org.springframework.expression.spel.SpelEvaluationException: EL1003E: A problem occurred whilst attempting to construct an object of type 'Integer' using arguments '(java.lang.String)'** at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:588) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:386) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)    ---  **Affects:** 4.3.10","closed","in: core,","spring-projects-issues","2017-12-30T11:10:06Z","2019-01-12T05:19:37Z"
"","21074","Make SubProtocolWebSocketHandler connection timeout configurable [SPR-16531]","**[Stefano Gargiulo](https://jira.spring.io/secure/ViewProfile.jspa?name=sgargiulo)** opened **[SPR-16531](https://jira.spring.io/browse/SPR-16531?redirect=false)** and commented  Hi, can you make this parameter configurable via application.properties or java/xml configuration?  Thanks in advance  ```java /**  * Sessions connected to this handler use a sub-protocol. Hence we expect to  * receive some client messages. If we don't receive any within a minute, the  * connection isn't doing well (proxy issue, slow network?) and can be closed.  * @see #checkSessions()  */ private static final int TIME_TO_FIRST_MESSAGE = 60 * 1000; ```  https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java#L77   --- No further details from [SPR-16531](https://jira.spring.io/browse/SPR-16531?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-02-23T15:25:38Z","2018-07-26T08:09:36Z"
"","20955","SubProtocolWebSocketHandler should not log ERROR on ""No messages received after ..."" [SPR-16409]","**[Stefan Norberg](https://jira.spring.io/secure/ViewProfile.jspa?name=stnor)** opened **[SPR-16409](https://jira.spring.io/browse/SPR-16409?redirect=false)** and commented  SubProtocolWebSocketHandler log level seems off for: https://github.com/spring-projects/spring-framework/blob/4b861aeae60952bb94e486e7d97e723eca048f0c/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java#L473  I feel that this log message should be logged on INFO (or possibly WARN) rather than ERROR:  ERROR o.s.w.s.m.SubProtocolWebSocketHandler - No messages received after 102078 ms. Closing WebSocketServerSockJsSession[id=m5sjshh2]  ---  **Affects:** 4.3.14, 5.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/4b861aeae60952bb94e486e7d97e723eca048f0c/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java#L473  **Issue Links:** - #21031 Deadlock in SubProtocolWebSocketHandler on shutdown with Undertow - #20961 AbstractClientSockJsSession.close call does not propagate IOException from disconnect  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e2be91353ae64e4cbfadc427a058595f504fb1f, https://github.com/spring-projects/spring-framework/commit/09cb7f4c310b66cdf46bdc4934eee7f0536dbee2  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-01-23T07:58:23Z","2019-01-11T15:37:21Z"
"","20890","DefaultLifecycleProcessor throws BeanNotOfRequiredType for null beans (cause of NullBean instance cannot be converted) [SPR-16343]","**[Stefan Mueller](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.mueller@zkb.ch)** opened **[SPR-16343](https://jira.spring.io/browse/SPR-16343?redirect=false)** and commented  When initializing applications with null-beans of type `Lifecycle`, `DefaultLifecycleProcessor.getLifecycleBeans` throws a `BeanNotOfRequiredType` exception rather then ignoring null-beans like in previous spring versions.  `DefaultLifecycleProcessor` should be fixed to not call the `ctx.getBean(name, type)` method but rather getBean(name) and check for type explicitely.  Reason/Background: In earlier versions of Spring the `ctx.getBean(name, type)` method returned null for null-beans. Since Spring 5, Spring returns the `NullBean` instance but that cannot be converted to required type.  See as well #20582, #20711 and #20889.  ---  **Affects:** 5.0.2  **Issue Links:** - #20889 BeanNotOfRequiredTypeException (NullBean instead of null) when calling ApplicationContext.getBean(name, type)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/977550f9560f6ce7670aae883261f412fbba02f4","closed","in: core,","spring-projects-issues","2018-01-03T15:15:09Z","2019-01-14T04:32:41Z"
"","20889","BeanNotOfRequiredTypeException (NullBean instead of null) when calling ApplicationContext.getBean(name, type) [SPR-16342]","**[Stefan Mueller](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.mueller@zkb.ch)** opened **[SPR-16342](https://jira.spring.io/browse/SPR-16342?redirect=false)** and commented  #20582 and #20711 fixed a similar bug. The problem still exists if calling ctx.getBean(name, type) for a null-bean which in older Spring versions (pre 5) returned null and now throws a org.springframework.beans.factory.BeanNotOfRequiredTypeException.  Can be reproduced by adding the following to [spring-framework-issues](https://github.com/spring-projects/spring-framework-issues/pull/173)      assertNotNull(ctx.getBean(""bean1"", IDummy.class)); // Works     assertNull(ctx.getBean(""bean4"", IDummy.class)); // Throws a BeanNotOfRequiredTypeException  ---  **Affects:** 5.0.2  **Issue Links:** - #20582 CastClass exception when wiring Map of beans (NullBean instead of 'null' in the map) - #20711 CastClass exception (NullBean instead of 'null' value) when getting map of beans directly from ApplicationContext - #20099 Introduce null-safety of Spring Framework API - #20384 Autowire contract is not honored in cases where FactoryBean or `@Bean` return null - #20890 DefaultLifecycleProcessor throws BeanNotOfRequiredType for null beans (cause of NullBean instance cannot be converted)","closed","in: core,","spring-projects-issues","2018-01-03T13:33:04Z","2019-01-14T04:32:44Z"
"","20732","Rest Controller resource URI Mapping issue [SPR-16184]","**[srikanta panda](https://jira.spring.io/secure/ViewProfile.jspa?name=spanda)** opened **[SPR-16184](https://jira.spring.io/browse/SPR-16184?redirect=false)** and commented  When i am defining URI at the rest controller level and defining a sub resource URI or Path variable at the method level . I am getting a strange error saying Method not supported. When i am defiining the full URI at the method level it seems to work fine . It clearly violates the rest conventions , i should be able to define a parent resource URI at the rest controller level and define either path variables at the method levels.  **+when i hit http://localhost:8091/employees +** it gives me an error Whitelabel Error Page  This application has no explicit mapping for /error, so you are seeing this as a fallback. Fri Nov 10 10:57:01 GMT 2017 There was an unexpected error (type=Bad Request, status=400). Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: ""employees"" + when i hit http://localhost:8091/ +  it gives me the list of employees , which is strange.  **+when i hit http://localhost:8091/employees/7 +**  it is giving me the list  of all employees , which is worse  **+CODE WHICH DOESNT WORK+** `@RestController`(""/employees"") `@Slf4j` public class DemoController {      @Autowired     private EmployeeRepository employeeRepository;          @PutMapping     public void save(@RequestBody Employee employee) {     	log.info(""------------SAVE EMPLOYEE-------------"");     	Employee emp = this.employeeRepository.save(employee);     	log.info(""Saved Employee"" + emp);     	System.out.println(emp.getId());     }          @GetMapping(""/{id}"")     public Employee getEmployee(@PathVariable Long id) {     	return (Employee) this.employeeRepository.findOne(id);     }          @GetMapping     public List getEmployeeById() {     	return (List) this.employeeRepository.findAll();     }  }  **+CODE WHICH WORKS+**  `@RestController` `@Slf4j` public class DemoController {      @Autowired     private EmployeeRepository employeeRepository;          @PutMapping(""/employees"")     public void save(@RequestBody Employee employee) {     	log.info(""------------SAVE EMPLOYEE-------------"");     	Employee emp = this.employeeRepository.save(employee);     	log.info(""Saved Employee"" + emp);     	System.out.println(emp.getId());     }          @GetMapping(""employees/{id}"")     public Employee getEmployee(@PathVariable Long id) {     	return (Employee) this.employeeRepository.findOne(id);     }          @GetMapping(""/employees"")     public List getEmployeeById() {     	return (List) this.employeeRepository.findAll();     }  }   ---  **Affects:** 5.0.1  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/25288/demo.zip) (_54.47 kB_)","closed","status: invalid,","spring-projects-issues","2017-11-10T11:00:23Z","2019-01-12T05:19:55Z"
"","20805","Support for EAR Parent Context Loader in Spring Framework 5.0 [SPR-16258]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-16258](https://jira.spring.io/browse/SPR-16258?redirect=false)** and commented  I'm unable to upgrade our EAR project to use spring 5.0 only due to the fact that spring is no more supporting the parent context loader, the detail is same as given in the stackoverflow.  I understood it is removed intentionally from the spring core, but this decision is stopping us upgrading spring framework, though we can stick to 4.x of spring core, we were unable to upgrade the modules like spring data (elasticsearch, etc) due to the same reason.  I hope the world is still using non boot and non microservice projects with highest expectation from framework like spring. So, on behalf of all i would like to request spring team to add support for parent context loading back to spring project.  If its not possible, request someone to provide an alternative solution as a documentation or as an example on how to achieve this.   ---  **Affects:** 5.0 GA  **Reference URL:** https://stackoverflow.com/questions/46902115/spring-framework-5-0-0-final-parent-context-not-getting-loaded","open","type: enhancement,","spring-projects-issues","2017-12-03T13:00:33Z","2022-03-09T04:41:18Z"
"","20980","ServerHttpRequest.mutate does not preserve encoded chars if path modified [SPR-16434]","**[Spencer Gibb](https://jira.spring.io/secure/ViewProfile.jspa?name=sgibb)** opened **[SPR-16434](https://jira.spring.io/browse/SPR-16434?redirect=false)** and commented  In the spring cloud gateway, I used `ServerHttpRequest.mutate()` quite often. A few users noticed that encoded query parameters would get decoded before sending downstream causing unintended side effects. I have my own implementation of `ServerHttpRequest.Builder` to work around the issue, but it seems like a simple enhancement could change that.  Adding `ServerHttpRequest build(encoded)` similar to `UriComponentsBuilder.build(encoded)` would fix the issue for me.  My implementation (once there is an encoded field), would look like:  ```java      private URI getUriToUse() {         if (this.uriPath == null) {             return this.uri;         }         try {             return UriComponentsBuilder.fromUri(this.uri)                     .replacePath(uriPath)                     .build(encoded).toUri();         }         catch (RuntimeException ex) {             throw new IllegalStateException(""Invalid URI path: \"""" + this.uriPath + ""\"""");         }     } ```    ---  **Affects:** 5.0.3  **Reference URL:** https://github.com/spring-cloud/spring-cloud-gateway/issues/147  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15c97b753ef32cd4bf000148f9dddbfc89ddab47, https://github.com/spring-projects/spring-framework/commit/8a56cd0e8b05ce1517b346f654af5ff707c54282, https://github.com/spring-projects/spring-framework/commit/f4de8615aa300f1fbb082b7880236e3fb460d4f8","closed","type: bug,","spring-projects-issues","2018-01-30T06:04:11Z","2018-02-26T01:41:04Z"
"","20785","Custom AssertJ for framework classes [SPR-16238]","**[Spencer Gibb](https://jira.spring.io/secure/ViewProfile.jspa?name=sgibb)** opened **[SPR-16238](https://jira.spring.io/browse/SPR-16238?redirect=false)** and commented  As spring cloud migrates to assertj assertions in tests, it would be nice to have something like  ```java assertThat(applicationContext).containsBean(""bean""); ```  rather than  ```java assertThat(applicationContext.containsBean(""bean"")).isTrue(); ```  It could provide more informative error messages like ""application context with id '0' did not contain bean of type MyType"".   ---  **Reference URL:** http://joel-costigliola.github.io/assertj/assertj-core-custom-assertions.html  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2017-11-29T00:46:04Z","2018-01-10T16:42:55Z"
"","20439","spring proxy bug,interface wapper method parameter type error [SPR-15884]","**[SongJian](https://jira.spring.io/secure/ViewProfile.jspa?name=songjian)** opened **[SPR-15884](https://jira.spring.io/browse/SPR-15884?redirect=false)** and commented  I found a proxy bug,maybe caused by spring  source code : https://github.com/devpage/spring4-mvc-gradle-async-http-proxy  access http://localhost:8080/spring4/async/error then will trigger a TimeoutException, look terminal logs at '^^^^^^^^simple^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^' line, compare '^^^^^^^^simple^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^' end content with asyncHttpApiExecutorProxy.callAsyncApiByBody 2th param Class Type , you will found it   ---  **Affects:** 4.2.9, 4.3.11","closed","in: core,","spring-projects-issues","2017-08-21T11:19:39Z","2019-01-11T18:05:46Z"
"","20803","onClose event for WebSocket on Reactive stack [SPR-16256]","**[Sola](https://jira.spring.io/secure/ViewProfile.jspa?name=soladev)** opened **[SPR-16256](https://jira.spring.io/browse/SPR-16256?redirect=false)** and commented  I've tried `doOnTerminate` `doOnCancel` `doOnSubscribe` on the sending flux, but all of them won't get invoked when a WebSocket connection incoming or closing. I'm wondering how can I get noticed when a WebSocket connection is being closed?  ---  **Affects:** 5.0.2  **Issue Links:** - #20674 WebSocketSession should expose method to indicate whether it is still active (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2017-12-02T00:31:14Z","2019-01-11T13:28:39Z"
"","20776","Allow configuration for DEFAULT_FRAME_MAX_SIZE of WebSocketSession on WebFlux with Netty [SPR-16228]","**[Sola](https://jira.spring.io/secure/ViewProfile.jspa?name=soladev)** opened **[SPR-16228](https://jira.spring.io/browse/SPR-16228?redirect=false)** and commented  Currently WebSocket in WebFlux with Netty only allows frames that are not over 65536 bytes (in NettyWebSocketSessionSupport#DEFAULT_FRAME_MAX_SIZE) It would be nice if we can override the default value.  ---  **Affects:** 5.0.1, 5.0.8  **Issue Links:** - #20933 Upgrade to Reactor Netty 0.8 (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/288a9ecd186f35e47c401108e04575ed570e2e2e  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2017-11-23T00:08:50Z","2019-01-11T13:30:30Z"
"","20762","UnsupportedOperationException when closing WebSocketSession on Reactive stack [SPR-16214]","**[Sola](https://jira.spring.io/secure/ViewProfile.jspa?name=soladev)** opened **[SPR-16214](https://jira.spring.io/browse/SPR-16214?redirect=false)** and commented  when closing `WebSocketSession` with `WebSocketSession#close`, It gives me the following error:  ``` java.lang.UnsupportedOperationException: Currently in Reactor Netty applications are expected to use the Cancellation returned from subscribing to the ""receive""-side Flux in order to close the WebSocket session. 	at org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession.close(ReactorNettyWebSocketSession.java:72) ~[spring-webflux-5.0.2.BUILD-SNAPSHOT.jar:5.0.2.BUILD-SNAPSHOT] ```  It confused me because I don't know how to obtain the `Cancellation` that returned from subscribing   ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30c06163846f8bc5801d3f754def135ed79eb38b","closed","type: task,","spring-projects-issues","2017-11-18T22:06:17Z","2018-01-23T10:05:13Z"
"","20760","WebSocket in WebFlux stack doesn't support Session Attributes [SPR-16212]","**[Sola](https://jira.spring.io/secure/ViewProfile.jspa?name=soladev)** opened **[SPR-16212](https://jira.spring.io/browse/SPR-16212?redirect=false)** and commented  Which has already supported in Servlet stack: https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/WebSocketSession.html#getAttributes--   ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9074828478cd964e3e1e6a8f0e02739cc88fe055, https://github.com/spring-projects/spring-framework/commit/192c7a56277a651839cf9275a59eb5001b56ff99","closed","type: enhancement,","spring-projects-issues","2017-11-18T10:27:13Z","2018-07-26T08:09:34Z"
"","20604","WebClient failed to write application/x-www-form-urlencoded [SPR-16055]","**[Sola](https://jira.spring.io/secure/ViewProfile.jspa?name=soladev)** opened **[SPR-16055](https://jira.spring.io/browse/SPR-16055?redirect=false)** and commented  According to https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java#L53-L54 and https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java#L53-L54  the `FormHttpMessageWriter` should accept any `MultiValueMap`, but the following test can't get passed  ```kotlin import org.junit.Assert import org.junit.Test import org.springframework.core.ResolvableType import org.springframework.http.MediaType import org.springframework.http.codec.FormHttpMessageWriter import org.springframework.util.LinkedMultiValueMap import org.springframework.util.MultiValueMap  class ResolvableTypeTest {      @Test     fun test() {         val writer = FormHttpMessageWriter()         Assert.assertTrue(                 writer.canWrite(                         ResolvableType.forInstance(LinkedMultiValueMap()),                         MediaType.APPLICATION_FORM_URLENCODED                 )         )     }      private val MULTIVALUE_TYPE = ResolvableType.forClassWithGenerics(MultiValueMap::class.java, String::class.java, String::class.java)      @Test     fun testSimulate() {         Assert.assertTrue(                 MULTIVALUE_TYPE.isAssignableFrom(                         ResolvableType.forInstance(                                 LinkedMultiValueMap()                         )                 )         )     }  } ```  // code above was written in Kotlin  ---  **Affects:** 5.0 GA  **Issue Links:** - #20679 Multipart form data can no longer be sent with syncBody in WebTestClient","closed","type: bug,","spring-projects-issues","2017-10-08T08:57:16Z","2019-01-11T13:12:01Z"
"","20449","SimpleAsyncTaskExecutor not respect ConcurrencyThrottleSupport.NO_CONCURRENCY limit [SPR-15895]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-15895](https://jira.spring.io/browse/SPR-15895?redirect=false)** and commented  When I set the `SimpleAsyncTaskExecutor` `setConcurrencyLimit` with value `ConcurrencyThrottleSupport.NO_CONCURRENCY` (i.e. value = 0), the `execute` of `SimpleAsyncTaskExecutor` will not take `NO_CONCURRENCY` in consideration. The `Runnable` will always be executed in all cases.  ``` public void execute(Runnable task, long startTimeout) {      Assert.notNull(task, ""Runnable must not be null"");      Runnable taskToUse = (this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);      if (isThrottleActive() && startTimeout > TIMEOUT_IMMEDIATE) {           this.concurrencyThrottle.beforeAccess();           doExecute(new ConcurrencyThrottlingRunnable(taskToUse));      }      else {           doExecute(taskToUse);      } } ```  The root cause is `isThrottleActive()` will always returns `false` as the concurrent limit = 0 in this case, hence `ConcurrencyThrottleAdapter` will not be processed.  This is also the reason why the 1st test case `SimpleAsyncTaskExecutorTests` `cannotExecuteWhenConcurrencyIsSwitchedOff` is disabled by the SPF committer.  The current workaround is `SimpleAsyncTaskExecutor.setConcurrencyLimit(1)`.  BTW, `NO_CONCURRENCY = 0` is somehow wrong in definition. No currency should means there should be one invocation of method at a time, other invocations should be waited. That means `NO_CONCURRENCY` should have a value of `1` instead.  ---  **Affects:** 4.3.10  **Issue Links:** - #18091 Migrate remaining JUnit 3 based tests to JUnit 4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f3a2f5769692c60e8dd8b502c562c6e2a4c730f1, https://github.com/spring-projects/spring-framework/commit/204ddebd68c37c49fd95acb2265ef98859afcf99","closed","in: core,","spring-projects-issues","2017-08-24T07:31:38Z","2019-01-11T18:04:58Z"
"","20809","spring-web CORS requires X-Forwarded-Port [SPR-16262]","**[simon Kitching](https://jira.spring.io/secure/ViewProfile.jspa?name=simon-um)** opened **[SPR-16262](https://jira.spring.io/browse/SPR-16262?redirect=false)** and commented  I am running a spring-boot app within Google AppEngine behind an IAP proxy which terminates https connections. The proxy sets X-Forwarded-Proto=https on requests, but does not set X-Forwarded-Port. The result is that the spring-web CORS filter rejects requests with ""not same origin"" even though the origin actually is the same.  This is made worse by the fact that the Chrome browser sends the ""origin"" header on many different request types, including all POST requests and all resources referenced from a css-file (eg fonts) - ie on requests which are NOT cross-origin.  While it may be argued that Google should add a header, this is a problem that may hit many users. It is also really really nasty to actually figure out the real cause of the problem..  ---  **Affects:** 4.3.12  **Issue Links:** - #16475 UriComponentsBuilder#fromHttpRequest should consider RFC-7239 Forwarded headers - #20063 UriComponentsBuilder's fromHttpRequest uses server port as host port when handling the Forwarded header - #20909 Check scheme in WebUtils#isSameOrigin  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c7de232b844816dd550130da720587cd9d23b6b, https://github.com/spring-projects/spring-framework/commit/c326e444885584261cd00cac3fdf83eaacfd3bb6, https://github.com/spring-projects/spring-framework/commit/1b3b058ebd86b9f3d5129ad5b5bb18540d2bf779  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: bug,","spring-projects-issues","2017-12-04T16:13:20Z","2019-01-11T13:27:55Z"
"","20879","Issue about the method ""onSuccess"" in Callback instance is executed synchronically when using AsyncRestTemplate [SPR-16332]","**[Shinn Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=shinn.zhang)** opened **[SPR-16332](https://jira.spring.io/browse/SPR-16332?redirect=false)** and commented  I encountered an issue when using AsyncRestTemplate. The code I used as below:  ```java updateUserFuture = new AsyncRestTemplate().put(projectBURL + ""/update/{id}"", userEntity, id); updateUserFuture.addCallback(callBack, callBack); ```  The issue is in the method ""updateUserFuture.addCallback"", it executed the mothod ""onSuccess"" synchronically which is not my expection. What I expect is the method ""onSuccess"" is executed in another thread after executing ""updateUserFuture.addCallback"".  After I debugged the code, I found the STATE was changed to ""SUCCESS"" before I invoked the method ""updateUserFuture.addCallback"" so invoking ""onSuccess"" method synchronically.  Is there anything wrong with the code?  Could anyone tell me how to satisfy my reqirement using AsyncRestTemplate?  Regards,  Shinn   --- No further details from [SPR-16332](https://jira.spring.io/browse/SPR-16332?redirect=false)","closed","status: declined,","spring-projects-issues","2017-12-30T04:28:09Z","2019-01-12T16:21:59Z"
"","20408","Async method implementing j.u.Function returns null [SPR-15853]","**[Shannon Lloyd](https://jira.spring.io/secure/ViewProfile.jspa?name=shanloid)** opened **[SPR-15853](https://jira.spring.io/browse/SPR-15853?redirect=false)** and commented  I have an `@Async` method on a `@Component` which implements `java.util.Function>`. Calling this method from a client object via the `Function` interface results in a `null` return value from the method call. If, however, I rewrite the interface (Kotlin) like so:  ```java // Original (returns null when impl called)  // interface XProcessor : Function> // Rewritten (works)  interface XProcessor { fun apply(x: X): ListenableFuture } ```  then calls to the `apply(x)` method work as expected, with no changes to the implementation of the apply function or to the calling code. It is only if I try to use the commented-out interface definition above that the calls return null.  Any ideas?   ---  **Affects:** 4.3.8","open","in: core,","spring-projects-issues","2017-08-08T05:29:17Z","2019-01-11T17:39:49Z"
"","20631","Checkbox/RadioButton incorrectly converts collections of enums with a custom converter [SPR-16082]","**[Seth A Wilcox](https://jira.spring.io/secure/ViewProfile.jspa?name=laoseth)** opened **[SPR-16082](https://jira.spring.io/browse/SPR-16082?redirect=false)** and commented  If you have an a collection of enums, for which you have implemented a custom org.springframework.core.convert.converter.Converter, the values are mapped from the form differently then they are mapped back to it.  When spring reads the values from a submitted form, it runs the value supplied to the tag through the conversionService, so it expects the values to be in the checkbox/radiobox value field that the converter recognizes.  However, when checking if the checkbox/radio button should be checked, it requires the value of the box to match the name() method of the enum, and does not run through the converter when checking for ""equality' to mark the correct boxes checked.  The issue seems to lie in org.springframework.web.servlet.tags.form.SelectedValueComparator.exhaustiveCompare(Object, Object, PropertyEditor, Map)  The logic first checks if the class we are binding to is an enum, and if it does, it checks against the toString of the enum.  If that doesn't match, it then returns, skipping the PE compare later on, which would use the conversion service to properly convert the string to the appropriate type.  Basically, the else before the PE-Based comparison should be removed, to the conversion service always gets a chance to convert before the comparison   ---  **Affects:** 4.3.11  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97c63857c4562e252943c55dbc9a1cb652f98381, https://github.com/spring-projects/spring-framework/commit/ef6aef91077901a5ed532ec3e7a55f5e0e554080  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: bug,","spring-projects-issues","2017-10-17T07:42:58Z","2017-10-24T16:24:06Z"
"","20996","Segregate BasicTraceInterceptor from CustomizableTraceInterceptor  [SPR-16451]","**[Sergii Karpenko](https://jira.spring.io/secure/ViewProfile.jspa?name=seka)** opened **[SPR-16451](https://jira.spring.io/browse/SPR-16451?redirect=false)** and commented  Segregate basic trace logic from logic responsible for log message construction. Move out invokeUnderTrace to BasicTraceInterceptor and parametrise it with entranceConsumer, exitConsumer, exceptionConsumer.  Except of violating single responsibility principle current implementation doesn't allow me to distinguish entrance message from exit massages.  This should fix both points and also will allow to avoid of expensive replacePlaceholders calls if necessary.   --- No further details from [SPR-16451](https://jira.spring.io/browse/SPR-16451?redirect=false)","open","in: core,","spring-projects-issues","2018-02-01T10:56:09Z","2019-01-11T15:33:48Z"
"","20853","SessionStatus#setComplete() should affect concurrent requests as well [SPR-16306]","**[Sergey Yaskov](https://jira.spring.io/secure/ViewProfile.jspa?name=yaskovdev)** opened **[SPR-16306](https://jira.spring.io/browse/SPR-16306?redirect=false)** and commented  I have the Spring MVC controller which handles AJAX requests from a user. I have the next 2 handler methods:  ```java @PostMapping(""/notifications"") void performLongRunningOperation() {     // some operation which may take about 10 seconds }  @PostMapping(""/cancel"") void cancel(SessionStatus sessionStatus) {     sessionStatus.setComplete(); } ```  The problem is that if `cancel()` finishes execution before `performLongRunningOperation()` finishes execution, then `setComplete()` has no effect. More precisely, `setComplete()` cleans the session up, but then the session unexpectedly gets restored to the state which was during execution of the `performLongRunningOperation()` method. This is the unexpected behavior.  To summarize: `setComplete()` method does not work properly in a situation when one do not know exactly the order in which the handler methods are going to finish execution.  Please see the link to the related StackOverflow question in the ""Reference URL"".  The reproduction project could be found here: https://github.com/yaskovdev/sandbox/tree/master/spring-session-sandbox   ---  **Affects:** 4.3.10  **Reference URL:** https://stackoverflow.com/questions/46505612/spring-mvc-setcomplete-does-not-guarantee-the-session-cleanup","closed","status: declined,","spring-projects-issues","2017-12-15T19:57:47Z","2020-04-02T19:52:11Z"
"","20839","404 error in Spring framework wiki [SPR-16292]","**[SeongJin Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=sjkim2322)** opened **[SPR-16292](https://jira.spring.io/browse/SPR-16292?redirect=false)** and commented  I'm not sure if this should be here but in What's New in Spring Framework 5.x wiki page, at Spring web mvc section, ""extened syntax"" link is Not found  full url is https://docs.spring.io/spring/docs/5.0.0.RELEASE/javadoc-api/org/springframework/web/util/patterns/PathPattern.html  i expect it should be https://docs.spring.io/spring/docs/5.0.0.RELEASE/javadoc-api/org/springframework/web/util/pattern/PathPattern.html   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/wiki/What's-New-in-Spring-Framework-5.x","closed","","spring-projects-issues","2017-12-12T10:35:58Z","2019-01-11T15:13:29Z"
"","20399","Modify from return method 'requiredSingleResult' to 'singleResult' in in NamedParameterJdbcTemplate`s queryForObject [SPR-15844]","**[SeongJin Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=sjkim2322)** opened **[SPR-15844](https://jira.spring.io/browse/SPR-15844?redirect=false)** and commented  in DataAccessUtils.java,  > public static \ T singleResult(`@Nullable` Collection\ results) throws IncorrectResultSizeDataAccessException { > int size = (results != null ? results.size() : 0); > if (size == 0) { > return null; > } > if (results.size() > 1) { > throw new IncorrectResultSizeDataAccessException(1, size); > } > return results.iterator().next(); > } > public static \ T requiredSingleResult(`@Nullable` Collection\ results) throws IncorrectResultSizeDataAccessException { > int size = (results != null ? results.size() : 0); > if (size == 0) { > throw new EmptyResultDataAccessException(1); > } > if (results.size() > 1) { > throw new IncorrectResultSizeDataAccessException(1, size); > } > return results.iterator().next(); > }`  when result`s size is 0, singleReust method return null and requiredSingleResult method throw 'EmptyResultDataAccessException'.  In NamedParameterJdbcTemplate`s queryForObject method use DataAccessUtils`s requiredSingleResult method.  This means developer using queryForObject in NamedParameterJdbcTemplate additionally accepts and handles EmptyResultDataAccessException when result size of query is 0.  I think Handling process when result size is 0 is not Jdbctemplate`s role or DAO`s role so, NamedParmeterJdbcTemplate should return null when result size is 0.  ---  **Reference URL:** https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.html","closed","type: enhancement,","spring-projects-issues","2017-08-02T13:51:24Z","2019-01-13T20:28:58Z"
"","20734","WebClient resultMono.block() blocks application if called from RestController [SPR-16186]","**[Semen Goryachkin](https://jira.spring.io/secure/ViewProfile.jspa?name=artful.tiger)** opened **[SPR-16186](https://jira.spring.io/browse/SPR-16186?redirect=false)** and commented  **WebClient resultMono.block() blocks application if called from RestController.** In this case the browser does not receive a response from the server and the application stops responding to requests.  Example:  ``` @RestController public class WebClientController { ... 	@GetMapping(path = ""/people1/{id}"") 	public String getPeopleBlock(@PathVariable Long id) { 		System.out.println(""People block request: "" + id); 		return getPeopleRsp(id).block(); 	}  	private Mono getPeopleRsp(Long id) { 		String url = ""https://swapi.co/api/people/"" + id + ""?format=json""; 		return webClient.get().uri(url).accept(MediaType.APPLICATION_JSON_UTF8).header(""User-Agent"", ""Chrome"") 				.exchange().log().flatMap(r -> r.bodyToMono(String.class)); 	} } ```  Full example code (simple boot app): https://github.com/sgoryachkin/webclient-example  System: Google Chrome, Windows 7, JDK 1.8  Log:  ``` People request: 4 2017-11-10 18:19:23.303  INFO 14664 --- [ctor-http-nio-2] reactor.Mono.SwitchIfEmpty.4             : onSubscribe(FluxSwitchIfEmpty.SwitchIfEmptySubscriber) 2017-11-10 18:19:23.303  INFO 14664 --- [ctor-http-nio-2] reactor.Mono.SwitchIfEmpty.4             : request(unbounded) 2017-11-10 18:19:24.373  INFO 14664 --- [ctor-http-nio-4] reactor.Mono.SwitchIfEmpty.4             : onNext(org.springframework.web.reactive.function.client.DefaultClientResponse@7057bfd4) 2017-11-10 18:19:24.374  INFO 14664 --- [ctor-http-nio-4] reactor.Mono.SwitchIfEmpty.4             : onComplete() People request: 4 2017-11-10 18:19:26.559  INFO 14664 --- [ctor-http-nio-2] reactor.Mono.SwitchIfEmpty.6             : onSubscribe(FluxSwitchIfEmpty.SwitchIfEmptySubscriber) 2017-11-10 18:19:26.559  INFO 14664 --- [ctor-http-nio-2] reactor.Mono.SwitchIfEmpty.6             : request(unbounded) 2017-11-10 18:19:27.736  INFO 14664 --- [ctor-http-nio-2] reactor.Mono.SwitchIfEmpty.6             : onNext(org.springframework.web.reactive.function.client.DefaultClientResponse@2ddb2177) 2017-11-10 18:19:27.737  INFO 14664 --- [ctor-http-nio-2] reactor.Mono.SwitchIfEmpty.6             : onComplete() People block request: 4 2017-11-10 18:19:32.864  INFO 14664 --- [ctor-http-nio-2] reactor.Mono.SwitchIfEmpty.8             : onSubscribe(FluxSwitchIfEmpty.SwitchIfEmptySubscriber) 2017-11-10 18:19:32.864  INFO 14664 --- [ctor-http-nio-2] reactor.Mono.SwitchIfEmpty.8             : request(unbounded) People block request: 4 2017-11-10 18:19:51.075  INFO 14664 --- [ctor-http-nio-4] reactor.Mono.SwitchIfEmpty.10            : onSubscribe(FluxSwitchIfEmpty.SwitchIfEmptySubscriber) 2017-11-10 18:19:51.075  INFO 14664 --- [ctor-http-nio-4] reactor.Mono.SwitchIfEmpty.10            : request(unbounded) ```  ---  **Affects:** 5.0.1  **Reference URL:** https://github.com/sgoryachkin/webclient-example/blob/master/src/main/java/org/sego/webclient/example/WebClientController.java  **Issue Links:** - #20757 Webflux server sometimes block when receiving large post body","closed","in: web,","spring-projects-issues","2017-11-10T15:35:42Z","2019-01-13T20:28:11Z"
"","20744","Combining @Retryable and @Scheduled/@JmsListener doesn't work [SPR-16196]","**[Selim Ok](https://jira.spring.io/secure/ViewProfile.jspa?name=selimok)** opened **[SPR-16196](https://jira.spring.io/browse/SPR-16196?redirect=false)** and commented  Hi,  if I use `@Retryable` annotation for a method of a certain bean and `@scheduled` for another method of the same bean, ScheduledAnnotationBeanPostProcessor doesn't process this class and thus `@Scheduled` method is not executed. This is a very strange problem.  If I remove the `@Retryable` annotation, ScheduledAnnotationBeanPostProcessor process the bean with processScheduled() method and the scheduled task is executed without any problem.  I already created a ticket to spring-retry project on github (https://github.com/spring-projects/spring-retry/issues/94). Mr. Russell can reproduce the problem with a slightly different symptom. He think that might be an issue with the ScheduledAnnotationBeanPostProcessor.  Thank you. Selim  ---  **Affects:** 4.3.10, 4.3.12  **Reference URL:** https://github.com/spring-projects/spring-retry/issues/94  **Issue Links:** - #21100 `@JmsListener` annotated method need to be extracted to interface even if CGLIB used  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","in: core,","spring-projects-issues","2017-11-14T10:03:05Z","2019-01-14T04:33:14Z"
"","20585","@Payload does not convert the message on a @JmsListener annotated method [SPR-16036]","**[Sebastiaan van Erk](https://jira.spring.io/secure/ViewProfile.jspa?name=sebster)** opened **[SPR-16036](https://jira.spring.io/browse/SPR-16036?redirect=false)** and commented  I have the following method:  ``` @JmsListener(destination = ""myDestination"") public void on(@Payload Object message) { ... } ```  However messages that are received are not converted (I get AMQTextMessage instances with the XML string in the body). If I change the method signature to:  ``` @JmsListener(destination = ""myDestination"") public void on(Message message) { ... message.getPayload() ... } ```  then everything works fine (the payload is unmarshalled using the configured JAXB unmarshaller).   ---  **Affects:** 4.3.7","open","in: messaging,","spring-projects-issues","2017-10-03T12:26:50Z","2019-01-11T13:13:19Z"
"","20823","Exceptions of type ""Message: JAR entry META-INF /services/* not found in /"" [SPR-16276]","**[Sasidhar Sekar](https://jira.spring.io/secure/ViewProfile.jspa?name=sasidharsmit)** opened **[SPR-16276](https://jira.spring.io/browse/SPR-16276?redirect=false)** and commented  Seeing more than 2 million instances of the below exceptions in springboot based microservice.  !Exception.png|thumbnail!  ```java Stack Trace	Count	Percentage(%)	Total java.lang.Throwable.(String)	1,532,051	95.618	0    java.lang.Exception.(String)	1,532,051	95.618	0       java.io.IOException.(String)	1,503,857	93.858	0          java.io.FileNotFoundException.(String)	1,503,782	93.854	0             org.springframework.boot.loader.jar.JarURLConnection.throwFileNotFound(Object, JarFile)	1,503,782	93.854	0                org.springframework.boot.loader.jar.JarURLConnection.connect()	1,503,782	93.854	0                   org.springframework.boot.loader.jar.JarURLConnection.getInputStream()	1,503,782	93.854	0                      sun.misc.URLClassPath$Loader.findResource(String, boolean)	1,503,782	93.854	0                         sun.misc.URLClassPath$1.next()	1,503,782	93.854	0                            sun.misc.URLClassPath$1.hasMoreElements()	1,503,782	93.854	0                               java.net.URLClassLoader$3$1.run()	1,503,782	93.854	0                                  java.net.URLClassLoader$3$1.run()	1,503,782	93.854	0                                     java.security.AccessController.doPrivileged(PrivilegedAction, AccessControlContext)	1,503,782	93.854	0                                        java.net.URLClassLoader$3.next()	1,503,782	93.854	0                                           java.net.URLClassLoader$3.hasMoreElements()	1,503,782	93.854	0                                              sun.misc.CompoundEnumeration.next()	1,503,782	93.854	0                                                 sun.misc.CompoundEnumeration.hasMoreElements()	1,503,782	93.854	0                                                    sun.misc.CompoundEnumeration.next()	1,503,782	93.854	0                                                       sun.misc.CompoundEnumeration.hasMoreElements()	1,503,782	93.854	0                                                          java.util.ServiceLoader$LazyIterator.hasNextService()	1,503,782	93.854	0                                                             java.util.ServiceLoader$LazyIterator.hasNext()	1,503,782	93.854	0                                                                java.util.ServiceLoader$1.hasNext()	1,503,782	93.854	0                                                                   javax.xml.transform.FactoryFinder$1.run()	1,046,435	65.31	0                                                                      java.security.AccessController.doPrivileged(PrivilegedAction)	1,046,435	65.31	0                                                                         javax.xml.transform.FactoryFinder.findServiceProvider(Class)	1,046,435	65.31	0                                                                            javax.xml.transform.FactoryFinder.find(Class, String)	1,046,435	65.31	0                                                                               javax.xml.transform.TransformerFactory.newInstance()	1,046,435	65.31	0                                                                                  com.sun.xml.messaging.saaj.util.transform.EfficientStreamingTransformer.()	1,046,435	65.31	0                                                                                     com.sun.xml.messaging.saaj.util.transform.EfficientStreamingTransformer.newTransformer()	1,046,435	65.31	0                                                                                        com.sun.xml.messaging.saaj.soap.impl.EnvelopeImpl.output(OutputStream)	589,228	36.775	0                                                                                           com.sun.xml.messaging.saaj.soap.impl.EnvelopeImpl.output(OutputStream, boolean)	589,228	36.775	0                                                                                              com.sun.xml.messaging.saaj.soap.SOAPPartImpl.getContentAsStream()	589,228	36.775	0                                                                                                 com.sun.xml.messaging.saaj.soap.MessageImpl.getHeaderBytes()	589,228	36.775	0                                                                                                    com.sun.xml.messaging.saaj.soap.MessageImpl.saveChanges()	589,228	36.775	0                                                                                                       org.springframework.ws.soap.saaj.SaajSoapMessage.writeTo(OutputStream)	589,228	36.775	0                                                                                                          org.springframework.ws.transport.AbstractWebServiceConnection.send(WebServiceMessage)	589,228	36.775	0                                                                                                             org.springframework.ws.client.core.WebServiceTemplate.sendRequest(WebServiceConnection, WebServiceMessage)	589,228	36.775	0                                                                                                                org.springframework.ws.client.core.WebServiceTemplate.doSendAndReceive(MessageContext, WebServiceConnection, WebServiceMessageCallback, WebServiceMessageExtractor)	589,228	36.775	0                                                                                                                   org.springframework.ws.client.core.WebServiceTemplate.sendAndReceive(String, WebServiceMessageCallback, WebServiceMessageExtractor)	589,228	36.775	0                                                                                                                      org.springframework.ws.client.core.WebServiceTemplate.marshalSendAndReceive(String, Object, WebServiceMessageCallback)	589,228	36.775	0                                                                                                                         org.springframework.ws.client.core.WebServiceTemplate.marshalSendAndReceive(Object, WebServiceMessageCallback)	589,228	36.775	0                                                                                                                            org.springframework.ws.client.core.WebServiceTemplate.marshalSendAndReceive(Object)	589,228	36.775	0                                                                                                                               com.hotels.booking.discos.loyalty.client.LoyaltyWebServiceGateway.sendAndReceive(AbstractLoyaltyRequest)	589,228	36.775	0                                                                                                                                  com.hotels.booking.discos.loyalty.client.LoyaltyWebServiceGateway.retrieveRewardAdjustments(LoyaltyRewardAdjustmentsRetrievalRequest)	217,970	13.604	0                                                                                                                                     sun.reflect.GeneratedMethodAccessor334.invoke(Object, Object[])	217,970	13.604	0                                                                                                                                        sun.reflect.DelegatingMethodAccessorImpl.invoke(Object, Object[])	217,970	13.604	0                                                                                                                                           java.lang.reflect.Method.invoke(Object, Object[])	217,970	13.604	0                                                                                                                                              com.hotels.thermos.proxy.GenericProxyCircuitBreaker.execute()	217,970	13.604	0                                                                                                                                                 com.hotels.thermos.AbstractCircuitBreaker.run()	217,970	13.604	0                                                                                                                                                    com.hotels.thermos.HystrixCommandWrapper.run()	217,970	13.604	0                                                                                                                                                       com.netflix.hystrix.HystrixCommand$1.call(Subscriber)	217,970	13.604	0                                                                                                                                                          com.netflix.hystrix.HystrixCommand$1.call(Object)	217,970	13.604	0                                                                                                                                                             rx.Observable$2.call(Subscriber)	217,970	13.604	0                                                                                                                                                                rx.Observable$2.call(Object)	217,970	13.604	0                                                                                                                                                                   rx.Observable$2.call(Subscriber)	217,970	13.604	0                                                                                                                                                                      rx.Observable$2.call(Object)	217,970	13.604	0                                                                                                                                                                         rx.Observable$2.call(Subscriber)	217,970	13.604	0                                                                                                                                                                            rx.Observable$2.call(Object)	217,970	13.604	0 ```  * These exceptions do not affect the functionality of the service itself * They are not logged in any of the application log files * I managed to find these via flight recorder * The consequence is that because of the huge number of exception objects created, I see a lot of memory pressure on the service - leading to full GCs  Below are details of spring/springboot versions used:  ```java 1.5.4.RELEASE 4.2.7.RELEASE ```  I did quite a bit of searching to see if this issue is already known. While there are many similar issues, all pointing to bugs in tomcat, the below one looked the closest to my situation.  https://bz.apache.org/bugzilla/show_bug.cgi?id=61503  As per the suggestions mentioned in the above ticket, tried upgrading tomcat from 8.5.15 to 8.5.21, without much success.  Any help would be highly appreciated.   ---  **Attachments:** - [Exception.png](https://jira.spring.io/secure/attachment/25315/Exception.png) (_141.38 kB_)","closed","status: invalid,","spring-projects-issues","2017-12-07T09:07:57Z","2019-01-12T05:19:45Z"
"","20781","MethodValidationPostProcessor does not work with Mono and Flux method parameters [SPR-16234]","**[Sanjaya Kumar Patel](https://jira.spring.io/secure/ViewProfile.jspa?name=skpatel20)** opened **[SPR-16234](https://jira.spring.io/browse/SPR-16234?redirect=false)** and commented  Traditionally (non-reactive), we had been doing method parameter validation as below:  ``` @Validated @Service public class FooService  @Validated(SignUpValidation.class) public void signup(@Valid UserCommand userCommand) {      ... } ```  In a reactive world, this might look like:  ``` @Validated @Service public class FooService  @Validated(SignUpValidation.class) public Mono signup(@Valid Mono userCommand) {      ... } ```  But this is not working. So, in summary:  1. Support for Mono and Flux is missing when using MethodValidationPostProcessor 2. Also need support for [validation groups](https://docs.spring.io/autorepo/docs/spring-framework/current/javadoc-api/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.html) (See `@Validated`(SignUpValidation.class) above)    ---  **Affects:** 5.0.1  **Reference URL:** https://stackoverflow.com/questions/47244769/how-to-validate-mono-when-using-spring-reactive","open","type: enhancement,","spring-projects-issues","2017-11-26T00:36:40Z","2021-11-01T14:38:22Z"
"","21129","MockMvcResultMatchers.jsonPath(String).value() should have a matching method to declare the expected type [SPR-16587]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-16587](https://jira.spring.io/browse/SPR-16587?redirect=false)** and commented  #19067 was intended to introduce this support in `JsonPathResultMatchers`; however, it only introduced this support in `JsonPathRequestMatchers` and `JsonPathExpectationsHelper`.  This issue will therefore add this support to `JsonPathResultMatchers` as well.  ---  **Affects:** 4.3.14, 5.0.4  **Reference URL:** https://stackoverflow.com/a/38013171/388980  **Issue Links:** - #19067 MockMvcResultMatchers.jsonPath(String).value() should have a matching method to declare the expected type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d57d914b264475a7c8ee756179738d4824381ca2, https://github.com/spring-projects/spring-framework/commit/68463e2018eed926b7a9d1aaba7fe4215c51c0fd, https://github.com/spring-projects/spring-framework/commit/2c2ce55f47cddd4e510cbbdefb34d7dde6144762  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-03-13T14:00:41Z","2019-06-12T17:14:37Z"
"","21118","Document @Autowired support on method parameters [SPR-16576]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-16576](https://jira.spring.io/browse/SPR-16576?redirect=false)** and commented  #### Overview  `@Autowired` may be declared on a method or constructor parameter; however, as of Spring Framework 5.0 this feature is only explicitly supported in conjunction with the `SpringExtension` for JUnit Jupiter.  #### Deliverables  - Document where `@Autowired` can be used on method and constructor parameters.  ---  **Affects:** 5.0 GA  **Issue Links:** - #21117 Update Spring Annotation Programming Model to reflect status quo","closed","in: core,","spring-projects-issues","2018-03-09T15:18:51Z","2019-04-04T16:43:19Z"
"","21117","Update Spring Annotation Programming Model to reflect status quo [SPR-16575]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-16575](https://jira.spring.io/browse/SPR-16575?redirect=false)** and commented  #### Overview  The [Spring Annotation Programming Model](https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model) has become a bit outdated due to changes in Spring 4.3 and 5.0.  #### Deliverables  - Update the _Spring Annotation Programming Model_ wiki page to reflect the status quo.   - specifically removing references to obsolete annotations in the _Spring Composed_ project.  ---  **Affects:** 5.0 GA  **Issue Links:** - #16140 Document Spring Annotation Programming Model in the Wiki - #21118 Document `@Autowired` support on method parameters","closed","type: documentation,","spring-projects-issues","2018-03-09T15:13:23Z","2019-11-15T12:18:27Z"
"","21116","Introduce consumeWith() methods in WebTestClient assertions [SPR-16574]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-16574](https://jira.spring.io/browse/SPR-16574?redirect=false)** and commented  In order to make it easier for developers to provide custom assertions when using `WebTestClient`, it would be beneficial to introduce dedicated `consumeWith(...)` methods in assertion classes such as `JsonPathAssertions`, `HeaderAssertions`, `StatusAssertions`, etc.  For a concrete use case, consider that you want to assert that a given evaluated JsonPath contains a specific substring. With `MockMvc` that's easy due to the support for Hamcrest matchers. However, with `WebTestClient` users have to jump through hoops to implement something as simple as `containsString(...)`. See the linked Stack Overflow discussion for additional details.  ---  **Affects:** 5.0 GA  **Reference URL:** https://stackoverflow.com/questions/49149376/webtestclient-check-that-jsonpath-contains-sub-string  **Issue Links:** - #21270 WebTestClient does not provide Hamcrest Matcher assertions for JSONPath","closed","type: enhancement,","spring-projects-issues","2018-03-09T14:46:21Z","2019-01-11T14:31:09Z"
"","20930","Upgrade to JUnit Jupiter 5.0.3 [SPR-16384]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-16384](https://jira.spring.io/browse/SPR-16384?redirect=false)** and commented  ---  **Affects:** 5.0.2  **Issue Links:** - #20293 Upgrade to JUnit 5.0 GA - #20954 Upgrade to JUnit Jupiter 5.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b4ec72378cb06c9e7c8f1c44f3aba1565108232","closed","type: task,","spring-projects-issues","2018-01-16T12:05:01Z","2019-01-11T15:15:21Z"
"","20484","Ensure spring-jcl is used in the generated Eclipse classpath instead of commons-logging [SPR-15930]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-15930](https://jira.spring.io/browse/SPR-15930?redirect=false)** and commented  ## Status Quo  Changes in #16455 pushed all project dependencies to the end of the Eclipse classpath.  However, with the recent introduction of the `spring-jcl` module, log4j is no longer used when executing tests within the Eclipse IDE. Consequently, we see thousands of lines of unwanted log statements written to the console using STD_ERR (since JUL logs INFO messages to STD_ERR by default).  ## Manual Work-around  Manually move the `spring-jcl` classpath entry before any third-party JARs in the generated Eclipse `.classpath` file.  ## Deliverables  - [ ] Modify the `ide.gradle` script so that `spring-jcl` comes before any third-party JAR in the generated Eclipse `.classpath`   - [x] Implemented differently  ---  **Issue Links:** - #16455 Eclipse project dependencies override locally declared Gradle dependencies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8acb8aef1f4b87ecfb965084f3f19ce2e188201c","closed","type: task,","spring-projects-issues","2017-09-06T16:09:16Z","2019-01-11T18:11:03Z"
"","20417","Fix Eclipse support in Gradle build [SPR-15862]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-15862](https://jira.spring.io/browse/SPR-15862?redirect=false)** and commented  After the upgrade to Gradle 4.0, we now see the following error when executing `import-into-eclipse.sh`:  ``` FAILURE: Build failed with an exception.  * Where: Script '/spring-framework/gradle/ide.gradle' line: 24  * What went wrong: Execution failed for task ':spring-aspects:eclipseClasspath'. > Could not find matching constructor for: org.gradle.plugins.ide.eclipse.model.ProjectDependency(org.codehaus.groovy.runtime.GStringImpl, java.lang.String) ```  Reverting to Gradle 3.5 displays the following warning:  ``` The ProjectDependency(String path, String gradlePath) method has been deprecated and is scheduled to be removed in Gradle 4.0. Please use ProjectDependency(String path) instead.         at ide_7j0kvly8u2wb253k4xchxls6o$_run_closure2$_closure12.doCall(/Users/sbrannen/source/spring-framework/gradle/ide.gradle:24) ```  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20226 Upgrade to Gradle 4.1 for clean JDK 9 build compatibility  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1cb96f47c87cc15bfda2026dc85c7af95278c081","closed","type: task,","spring-projects-issues","2017-08-11T20:47:13Z","2019-01-11T18:07:47Z"
"","20403","Upgrade to JUnit Jupiter 5.0 RC3 [SPR-15848]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-15848](https://jira.spring.io/browse/SPR-15848?redirect=false)** and commented  The extension model for JUnit Jupiter might contain some breaking changes in [JUnit Jupiter 5.0 RC3](https://github.com/junit-team/junit5/milestone/13). Thus we should upgrade as soon as it's released (tentatively scheduled for August 24), just in time for Spring 5.0 RC4.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20293 Upgrade to JUnit 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d070010650d3d1b3b49e40bb5a0306cf8f2638f5","closed","type: task,","spring-projects-issues","2017-08-04T19:02:08Z","2019-01-11T17:39:40Z"
"","20965","Update Javadoc on RestTemplate#setUriTemplateHandler [SPR-16419]","**[Sachin Lad](https://jira.spring.io/secure/ViewProfile.jspa?name=slad)** opened **[SPR-16419](https://jira.spring.io/browse/SPR-16419?redirect=false)** and commented  It looks like with Spring v5, DefaultUriBuilderFactory does not expand correctly if uriTemplate contains ""protocol + hostname"" as templated. This UriBuilder is used in RestTemplate to expand the templatedUris. Such templatedUri works well with Spring 1.5.x.  Looks like DefaultUriBuilderFactory is newly introduced in Spring v5 so may be this is not bug but the functionality has changed? But this breaks bunch of test code so I am considering this as regression.  Here is the unit test to reproduce it -  ```java // Some comments here @Test     public void testUrlBuilder() throws URISyntaxException {         String uriTemplate = ""{baseUrl}/info"";         String[] vars = new String[]{""http://localhost:8085""};          DefaultUriBuilderFactory factory = new DefaultUriBuilderFactory();          URI uri = factory.expand(uriTemplate, vars);          assertEquals(new URI(""http://localhost:8085/info""), uri);     } ```  In Spring 4.x it looks like the uriTemplate is expanded using DefaultUriTemplateHandler which works well -  ```java     @Test     public void testUrlBuilder() throws URISyntaxException {         String uriTemplate = ""{baseUrl}/info"";         String[] vars = new String[]{""http://localhost:8085""};          DefaultUriTemplateHandler handler = new DefaultUriTemplateHandler();         URI uri = handler.expand(uriTemplate, vars);          assertEquals(new URI(""http://localhost:8085/info""), uri);     } ```    ---  **Affects:** 5.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4f28c28287d9715bf1a7a9693a809b099003ae88","closed","in: core,","spring-projects-issues","2018-01-25T21:21:52Z","2018-02-19T12:19:21Z"
"","20857","resttemplate multipart post with InputStreamResource not working for .png files [SPR-16310]","**[Sachin Ghalme](https://jira.spring.io/secure/ViewProfile.jspa?name=sachinghalme)** opened **[SPR-16310](https://jira.spring.io/browse/SPR-16310?redirect=false)** and commented  I've been tried to upload files using multipart post vai restTemplate, Please find below code for the same, it works for jpg, pdf files but fails for png file. following code to compose request.  ```java LinkedMultiValueMap requestParts = new LinkedMultiValueMap<>(); requestParts.add(""documentImage"",  new MultipartFileResource(multipartFile)); requestParts.add(""documentType"", ""Proof of address"");  HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.MULTIPART_FORM_DATA); HttpEntity> requestEntity = new HttpEntity<>(requestParts, headers); response = restTemplate.exchange(""""http://localhost:8080/app/upload"", HttpMethod.POST, 						requestEntity, String.class); ```  MultipartFileResource file  ```java public class MultipartFileResource extends ByteArrayResource { 		private String filename;  		public MultipartFileResource(MultipartFile multipartFile) throws IOException { 			super(multipartFile.getBytes()); 			this.filename = multipartFile.getOriginalFilename(); 		}  		@Override 		public String getFilename() { 			return this.filename; 		} 	} ```  Error Logs :  ```java org.springframework.web.client.HttpClientErrorException: 400 Bad Request 	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:91) 	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:641) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:597) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:557) 	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:475) 	at com.aps.MainController.uploadUserDocuments(MainController.java:132) 	at com.aps.MainController.postDWUploadFiles(MainController.java:85) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) 	at java.lang.reflect.Method.invoke(Unknown Source) 	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:817) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:731) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:870) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:648) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522) 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672) 	at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2500) 	at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2489) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Unknown Source) ```    ---  **Affects:** 4.3.13","closed","status: invalid,","spring-projects-issues","2017-12-18T07:52:57Z","2019-01-12T05:19:41Z"
"","20812","Stomp Broker Relay may ignore configured destination prefixes [SPR-16265]","**[Rémi Alvergnat](https://jira.spring.io/secure/ViewProfile.jspa?name=toilal)** opened **[SPR-16265](https://jira.spring.io/browse/SPR-16265?redirect=false)** and commented  There's a bug in StompHeaderAccessor class, method updateStompCommandAsClientMessage.  Problem occurs when getCommand() returns null. setHeader is called with SEND command, but command variable is not set after that and method returns null instead of SEND  It cause the stomp broker relay to ignore destination prefixes because command is null (see StompBrokerRelayMessageHandler L507).  ---  **Affects:** 4.3.13, 5.0.2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1616  **Issue Links:** - #20713 Reduce access on headers for STOMP messaging  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4fe94dffc04450e60aca2ff86d9c971163c2381f, https://github.com/spring-projects/spring-framework/commit/76dcde9e31072f7a1b14942aad3581b5dec00f37  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: regression,","spring-projects-issues","2017-12-05T14:06:41Z","2019-01-11T13:28:19Z"
"","20819","PooledConnection Has Already Been Closed Exception with Hibernate 5.1.0 [SPR-16272]","**[Ryan O'Meara](https://jira.spring.io/secure/ViewProfile.jspa?name=romeara)** opened **[SPR-16272](https://jira.spring.io/browse/SPR-16272?redirect=false)** and commented  When using Spring ORM (4.3.9) and Hibernate (5.1.0) and using a Hibernate user type, on the second use of the type, I get an exception:  ``` Caused by: java.sql.SQLException: PooledConnection has already been closed. ```  This appears to have been addressed previously in #15028, however the fix was implemented in org.springframework.orm.jpa.vendor.HibernateJpaDialect.HibernateConnectionHandle by checking Hibernate's SessionImpl for the prescence of a method called ""connection"" - this was present in Hibernate 3.x, but not in Hibernate 4.x, so it's existence was used to determine if HibernateConnectionHandle should close the connection.  However, in Hibernate 5.1.0, SessionImpl has a method called ""connection"" again - so HibernateConnectionHandle now does the Hibernate 3.x behavior if hibernate 5.x is being used, causing this error to re-surface  ---  **Affects:** 4.3.9, 4.3.13","closed","status: invalid,","spring-projects-issues","2017-12-06T20:19:45Z","2019-01-12T05:19:47Z"
"","20587","Can't access native headers in STOMP connected event [SPR-16038]","**[Ryan Caskey](https://jira.spring.io/secure/ViewProfile.jspa?name=rsparkyc)** opened **[SPR-16038](https://jira.spring.io/browse/SPR-16038?redirect=false)** and commented  I'm trying to access the native headers in the `onSessionConnectedEvent`.  I've seen several examples stating that I can wrap the `SessionConnectedEvent`'s `message` object in a `StompHeaderAccessor`, and then access the native headers by calling `getNativeHeader(""foo"")`.  However, it seems like it's expecting there to be a `nativeHeaders` entry in the `StompHeaderAccessor`'s header collection, when instead it needs to go a bit deeper.  In using the debugger, I found that I needed to look at the `simpConnectMessage` header, and then _it_ had the `nativeHeaders` collection.  You can see what I had to do in my `ConnectionListener` class in the provided github example.   ---  **Affects:** 4.3.11  **Reference URL:** https://github.com/rsparkyc/WebSocketServer","closed","status: declined,","spring-projects-issues","2017-10-03T15:26:46Z","2019-01-12T16:33:01Z"
"","20643","Add API to compose ParameterizedTypeReference instances (resolve one against other) [SPR-16094]","**[Ruslan Stelmachenko](https://jira.spring.io/secure/ViewProfile.jspa?name=djxak)** opened **[SPR-16094](https://jira.spring.io/browse/SPR-16094?redirect=false)** and commented  There is no way to compose several `ParameterizedTypeReference` s.  See for example Guava's [TypeToken](https://google.github.io/guava/releases/21.0/api/docs/com/google/common/reflect/TypeToken.html) and it's [reference documentation](https://github.com/google/guava/wiki/ReflectionExplained#typetoken).  With `TypeToken` we can do things like this:  ```java static  TypeToken> mapToken(TypeToken keyToken, TypeToken valueToken) {   return new TypeToken>() {}     .where(new TypeParameter() {}, keyToken)     .where(new TypeParameter() {}, valueToken); } ... TypeToken> mapToken = mapToken(    TypeToken.of(String.class),    TypeToken.of(BigInteger.class)); TypeToken>> complexToken = mapToken(    TypeToken.of(Integer.class),    new TypeToken>() {}); ```  Why this matters?  For example, if you want to make a generic API calling method, when each response is wrapped in some way:  ```java @Data public class ApiResponse {  	private String status; 	private String message; 	private T result;  } ```  The `T` can be any type here.  The method can be written like this:  ```java public  ApiResponse makeRequest(URI uri, ParameterizedTypeReference> responseTypeToken); ```  To reduce boilerplate we don't want to pass  ```java new ParameterizedTypeReference>() {} // or new ParameterizedTypeReference>>() {} ```  each time when we need to call our generic API method.  Instead we want to pass  ```java new ParameterizedTypeReference() {} // or new ParameterizedTypeReference>() {} ```  So our method shold be written like this:  ```java public  ApiResponse makeRequest(URI uri, ParameterizedTypeReference resultTypeToken); ```  But then, we have no way to construct `ParameterizedTypeReference` instance which includes `ApiResponse` type as wrapper of passed type.  In other words, we can't transform  ```java new ParameterizedTypeReference>() {} // into new ParameterizedTypeReference>>() {} ```  With `TypeToken` it is easy:  ```java makeRequest(uri, new TypeToken>() {}); // then inside makeRequest method TypeToken> responseTypeToken = new TypeToken>() {}         .where(new TypeParameter() {}, resultTypeToken); // responseTypeToken.getType() will return ApiResponse> ```  If `RestTemplate` and `WebClient` was able to take `TypeToken` argument, then we were able to use it as is. But they can't (and shouldn't). So can we just add this composition feature into `ParameterizedTypeReference`?  -Also it will be good to have some `TypeToken` to `ParameterizedTypeReference` adapter, like this:-  ```java import com.google.common.reflect.TypeToken; import org.springframework.core.ParameterizedTypeReference;  import java.lang.reflect.Type;  public class ParameterizedTypeReferenceBuilder {  	public static  ParameterizedTypeReference fromTypeToken(TypeToken typeToken) { 		return new TypeTokenParameterizedTypeReference<>(typeToken); 	}  	private static class TypeTokenParameterizedTypeReference extends ParameterizedTypeReference {  		private final Type type;  		private TypeTokenParameterizedTypeReference(TypeToken typeToken) { 			this.type = typeToken.getType(); 		}  		@Override 		public Type getType() { 			return type; 		}  		@Override 		public boolean equals(Object obj) { 			return (this == obj || (obj instanceof ParameterizedTypeReference && 					this.type.equals(((ParameterizedTypeReference) obj).getType()))); 		}  		@Override 		public int hashCode() { 			return this.type.hashCode(); 		}  		@Override 		public String toString() { 			return ""ParameterizedTypeReference<"" + this.type + "">""; 		}  	}  } ```  -But maybe this adapter is beyond the scope of spring core and more appropriate for something like spring-boot.- Forget about adapter, it is already implemented in 5.0.1 through `ParameterizedTypeReference.fromType`. Let's focus on ability to composition instead.   ---  **Affects:** 5.0 GA","open","type: enhancement,","spring-projects-issues","2017-10-22T07:40:13Z","2017-10-22T10:02:31Z"
"","20642","Consider to add ability to modify the URI on ClientRequest.Builder [SPR-16093]","**[Ruslan Stelmachenko](https://jira.spring.io/secure/ViewProfile.jspa?name=djxak)** opened **[SPR-16093](https://jira.spring.io/browse/SPR-16093?redirect=false)** and commented  There is convinient method `ClientRequest.from(ClientRequest other)` which returns `ClientRequest.Builder` instance.  It is useful to create a request copy in `ExchangeFilterFunction` to modify request in some way. For example, to add some heasers.  Actually, this is used in `ExchangeFilterFunctions.basicAuthentication()` helper.  It works fine, but sometimes you need to modify not only headers, but also request URI (to add `sign` query parameter for example).  Now we forced to manually copy each request part to the new request just to change the URL:  ```java private ExchangeFilterFunction addSignFilter() { 	return ExchangeFilterFunction.ofRequestProcessor(clientRequest -> { 		URI url = UriComponentsBuilder.fromUri(clientRequest.url()) 				.queryParam(""sign"", createSign(clientRequest)) 				.build() 				.toUri(); 		ClientRequest authenticatedRequest = ClientRequest.method(clientRequest.method(), url) 				.headers(headers -> headers.addAll(clientRequest.headers())) 				.cookies(cookies -> cookies.addAll(clientRequest.cookies())) 				.attributes(attributes -> attributes.putAll(clientRequest.attributes())) 				.body(clientRequest.body()) 				.build();  		return Mono.just(authenticatedRequest); 	}); } ```  But if request builder had the `url(URI url)` setter, then we were able to do:  ```java private ExchangeFilterFunction addSignFilter() { 	return ExchangeFilterFunction.ofRequestProcessor(clientRequest -> { 		URI url = UriComponentsBuilder.fromUri(clientRequest.url()) 				.queryParam(""sign"", createSign(clientRequest)) 				.build() 				.toUri(); 		ClientRequest authenticatedRequest = ClientRequest.from(clientRequest) 				.url(url) 				.build();  		return Mono.just(authenticatedRequest); 	}); } ```  This is much less error-prone when we want to change just one part of the request (URL in this case), than copying each request part by hand when creating new builder instance manually or using `ClientRequest.method(HttpMethod method, URI url)`.   ---  **Affects:** 5.0 GA","closed","type: enhancement,","spring-projects-issues","2017-10-22T01:50:48Z","2017-10-24T16:24:07Z"
"","21130","Support for SimpleEvaluationContext in SpEL [SPR-16588]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16588](https://jira.spring.io/browse/SPR-16588?redirect=false)** and commented  `StandardEvaluationContext` provides more options than are actually required for many common uses cases (e.g. data binding expressions, property based filters, etc) where the goal is to provide a little extra flexibility but not necessarily expose the full extent of the SpEL language. Arguably there should be a more basic `EvaluationContext` that meaningfully restricts the SpEL language and the set of relevant configuration options to what is relevant for those scenarios, optimizing guidance and SpEL resolution performance for the particular scenario.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - [DATACMNS-1282](https://jira.spring.io/browse/DATACMNS-1282) Use SimpleEvaluationContext in MapDataBinder (_**""is depended on by""**_) - #21481 Performance degradation in SPEL expression evaluation - [SWF-1722](https://jira.spring.io/browse/SWF-1722) Use SimpleEvaluationContext in AbstractMvcView - #21244 Incomplete backport of DefaultSubscriptionRegistry changes for SPR-16588  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-03-13T18:57:01Z","2019-01-11T14:30:07Z"
"","21090","[docs] Restructure chapter Functional Endpoints chpater [SPR-16547]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16547](https://jira.spring.io/browse/SPR-16547?redirect=false)** and commented  At present the [Functional Endpoints|file:///home/rossen/dev/github/spring-projects/spring-framework/build/asciidoc/html5/web-reactive.html#webflux-fn] chapter reads like a tutorial that takes a tour of how to handle and route requests, and then to run a server. This is effective when reading for the first time to get oriented, but there is no clear place to add reference content.  The content needs to be re-organized to separate overview explanations (e.g. how handling works) from reference content (e.g. various ways to work with the request body). After the restructuring, address the [this request](https://jira.spring.io/browse/SPR-16545? focusedCommentId=157457&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-157457) to cover working with multipart requests.  ---  **Affects:** 5.0.4  **Issue Links:** - #21088 StackOverflowError when using WebFlux multipart file data handler with Undertow  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3d8c60abafcfcf30f1780fb6302b41521cfbc33, https://github.com/spring-projects/spring-framework/commit/e228ded5898485e657e896d40d624e4bb19f2538","closed","type: documentation,","spring-projects-issues","2018-03-02T15:53:33Z","2019-01-11T14:34:26Z"
"","21089","FilePart transferTo fails with java.nio.file.NoSuchFileException [SPR-16546]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16546](https://jira.spring.io/browse/SPR-16546?redirect=false)** and commented  When attempting to transfer a FilePart:  ```java @RestController public class MultipartController {  	@Value(""#{systemProperties['user.dir']}"") 	private String dir;  	@PostMapping(""/upload"") 	Mono upload(@RequestPart(""files"") FilePart filePart, @RequestPart(""submit-name"") Part namePart) { 		return filePart.transferTo(new File(dir + ""/"" + filePart.filename())).then(); 	} } ```  The following occurs:  ``` java.nio.file.NoSuchFileException: /home/rossen/dev/github/sdeleuze/webflux-multipart/image.png 	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) ~[na:1.8.0_77] 	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) ~[na:1.8.0_77] 	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) ~[na:1.8.0_77] 	at sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:177) ~[na:1.8.0_77] 	at java.nio.channels.FileChannel.open(FileChannel.java:287) ~[na:1.8.0_77] 	at java.nio.channels.FileChannel.open(FileChannel.java:335) ~[na:1.8.0_77] 	at org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossFilePart.transferTo(SynchronossPartHttpMessageReader.java:302) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE] 	at com.example.MultipartController.upload(MultipartController.java:39) ~[classes/:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_77] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_77] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_77] 	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_77] ... ```  ---  **Affects:** 5.0.4  **Issue Links:** - #21088 StackOverflowError when using WebFlux multipart file data handler with Undertow  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cef98e1125f7470b3dcc7615821223299bb84d93","closed","type: bug,","spring-projects-issues","2018-03-02T15:38:43Z","2019-06-18T03:38:36Z"
"","21085","EncoderHttpMessageWriter never sets Content-Length [SPR-16542]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16542](https://jira.spring.io/browse/SPR-16542?redirect=false)** and commented  Currently only `ResourceHttpMessageWriter` and `FormHttpMessageWriter` set the Content-Length header. For any `Encoder` (String, byte[], ByteBuffer, etc) wrapped with `EncoderHttpMessageWriter`, there is no mechanism in place to set the Content-Length header, even in cases where a single item is provided synchronously (e.g. WebClient's `syncBody`, controller returning a String, etc.).  We should be able to set the content length in cases where the input Publisher is a Mono. That would provide parity with `HttpMessageConverter`s, covering all single value cases (synchronous or asynchronous).  ---  **Affects:** 5.0.4  **Issue Links:** - #21431 AbstractJackson2Encoder::getContentLength should not return null for MonoJust/FluxJust publisher - #21926 Remove transfer-encoding check in EncoderHttpMessageWriter and related workaround in ReactorServerHttpResponse  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27815847b109a9074bbbb49ac1faf74468d42d6a","closed","type: enhancement,","spring-projects-issues","2018-02-27T21:49:17Z","2019-01-11T14:34:13Z"
"","21082","Jackson Encoder(s) ignore charset in MimeType [SPR-16539]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16539](https://jira.spring.io/browse/SPR-16539?redirect=false)** and commented  Currently `AbstractJackson2Encoder` does not take into account the charset that may be present on the input `MimeType`. By contrast `AbstractJackson2HttpMessageConverter` works a little differently, creating a `JsonGenerator` with a `JsonEncoding` that matches the input `MediaType`. If possible we should align how the two use Jackson, but in the very least ensure the charset is respected.  Note that this came through #21059 where the charset on the SSE stream dictates the encoding of individual data objects.  ---  **Affects:** 5.0.4  **Issue Links:** - #21059 SSE writer does not allow customizing the charset  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/36a222acd5ef02dc4452addcedc6708edf46ed4e","closed","type: enhancement,","spring-projects-issues","2018-02-26T21:38:53Z","2019-01-11T14:35:53Z"
"","21047","Review use of zip operator in WebFlux to ensure default value [SPR-16504]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16504](https://jira.spring.io/browse/SPR-16504?redirect=false)** and commented   ---  **Affects:** 5.0.3","closed","status: invalid,","spring-projects-issues","2018-02-15T15:50:19Z","2019-01-12T05:19:25Z"
"","21040","Avoid multiple warnings related to jackson-module-kotlin in Jackson2ObjectMapperBuilder [SPR-16497]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16497](https://jira.spring.io/browse/SPR-16497?redirect=false)** and commented  The following message appears repeatedly:  ``` 16:21:15.415 [main] WARN  org.springframework.http.converter.json.Jackson2ObjectMapperBuilder - For Jackson Kotlin classes support please add ""com.fasterxml.jackson.module:jackson-module-kotlin"" to the classpath ```  It seems we would be able to do some detection on startup and report only once, at least per `Jackson2ObjectMapperBuilder` initialization.  ---  **Affects:** 5.0.3  **Issue Links:** - #20217 Log a warning in Jackson builder when Kotlin is used without jackson-module-kotlin  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7baf33fea0aa55251c549ef36ad32abddab8fcd9","closed","type: enhancement,","spring-projects-issues","2018-02-14T15:31:19Z","2021-11-04T17:43:34Z"
"","21037","[docs] Document the need for periodic writes on a streaming response [SPR-16494]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16494](https://jira.spring.io/browse/SPR-16494?redirect=false)** and commented  There is a regression in Reactor Netty 0.7.3, reported under [issue 283](https://github.com/reactor/reactor-netty/issues/283), that was originally reported before 5.0 with #18523, but we never did add a test because it was fixed in Reactor Netty. The fix will again need to come from Reactor Netty but we should add an integration test on our side.  ---  **Affects:** 5.0.3  **Issue Links:** - #18523 WebFlux SSE controller does not detect disconnected client  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1908080d5c23d254eebac869435d3e569972e181, https://github.com/spring-projects/spring-framework/commit/eb96ff2943182565f1aa3508f9c3e39a4997d56d, https://github.com/spring-projects/spring-framework/commit/8c37ad7ac5034faed74cb53fd37b9865adfd56a5","closed","type: task,","spring-projects-issues","2018-02-13T18:34:04Z","2019-01-11T15:29:37Z"
"","19295","Document how to test WebClient code with a mock server [SPR-16482]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16482](https://jira.spring.io/browse/SPR-16482?redirect=false)** and commented  While #19852 is unresolved, we could at least document the approach with using the OkHttp [MockWebServer](https://github.com/square/okhttp#mockwebserver), so that's more accessible.  ---  **Affects:** 5.0.3  This issue is a sub-task of #19852  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3367df8637983c1e5a2c17d1a2e6819e04ca7ad6","closed","type: task,","spring-projects-issues","2018-02-09T20:46:56Z","2019-01-11T15:30:31Z"
"","21016","JDK 11 WebSocket integration with WebSocketClient [SPR-16471]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16471](https://jira.spring.io/browse/SPR-16471?redirect=false)** and commented  The JDK HttpClient [documentation](https://docs.oracle.com/javase/10/docs/api/jdk/incubator/http/package-summary.html) shows there is also a [WebSocket client](http://download.java.net/java/jdk10/docs/api/jdk/incubator/http/WebSocket.html) in the same package. Along the same lines as #21014 we need to try it now and aim to integrate with JDK 11 for 5.2.  At present, unlike `HttpClient`, the `WebClient` API does not explicitly expose Reactive Streams contracts. It does however provide flow control on the reading side where you must first request the number of messages to receive. On the writing side it's sending one message at a time with a `CompletableFuture` notification.  ---  **Affects:** 5.0.3  **Issue Links:** - #21014 JDK 11 HttpClient integration with WebClient","open","type: enhancement,","spring-projects-issues","2018-02-05T17:06:02Z","2021-11-01T14:41:54Z"
"","21014","JDK 11 HttpClient integration with WebClient [SPR-16469]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16469](https://jira.spring.io/browse/SPR-16469?redirect=false)** and commented  According to this [blog post](http://openjdk.java.net/groups/net/httpclient/intro.html) the HttpClient ""handles request and response bodies as reactive-streams"", and it is currently in [incubation status](http://http://openjdk.java.net/jeps/11), but will be made official in JDK 11 when it will switch to `java.net` from `jdk.incubator`.  Given the JDK 11 release dates, this is probably a 5.2 target. However, at present, we need to experiment with the proposed API to see if there any issues in adapting it through a `ClientHttpConnector`, and raise issues if necessary.  [JDK HTTP Client - JEP 321 - Update](http://mail.openjdk.java.net/pipermail/net-dev/2018-February/011155.html)  ---  **Affects:** 5.0.3  **Issue Links:** - #21016 JDK 11 WebSocket integration with WebSocketClient - #19658 Jetty HTTP client integration with WebClient  0 votes, 6 watchers","closed","status: superseded,","spring-projects-issues","2018-02-05T16:26:40Z","2019-11-08T11:22:32Z"
"","20977","ViewResolverRegistry in WebFlux is missing a scriptTemplate option [SPR-16431]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16431](https://jira.spring.io/browse/SPR-16431?redirect=false)** and commented  The `ViewResolverRegistry` has a method to add any `ViewResolver` but is missing a dedicated shortcut for script templates, just like there is for Freemarker, and for parity with the MVC config.   ---  **Affects:** 5.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b2681e1f4af623a782dab82ed5eef881316bb366","closed","type: enhancement,","spring-projects-issues","2018-01-29T17:17:16Z","2018-02-19T12:19:19Z"
"","20969","[docs] Add WebFlux content on URI links [SPR-16423]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16423](https://jira.spring.io/browse/SPR-16423?redirect=false)** and commented  The [topic is covered](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-uri-building) in the Serlvet section but there is no content on the WebFlux side..   ---  **Affects:** 5.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b4250ec4427933b00286ebf8e0dbf4af7ca4747","closed","type: documentation,","spring-projects-issues","2018-01-26T17:53:13Z","2018-02-19T12:19:21Z"
"","20968","[docs] Explain URI template encoding [SPR-16422]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16422](https://jira.spring.io/browse/SPR-16422?redirect=false)** and commented  Encoding with URI templates is a very common source of issues and questions. There are a number of options that have appeared over time as a result. Some can be discovered in the JavaDoc, e.g. `RestTemplate#setUriTemplateHandler` or the `UriBuilderFactor` in `WebClient.Builder`, but it's also easy to miss if debugging a problem or using the underlying `UriComponentsBuilder` directly.  This topic needs to be addressed properly and thoroughly in the reference where it would be easier to find. It would also make it easier to answer questions by pointing to the reference content.  ---  **Affects:** 4.3.14, 5.0.3  **Issue Links:** - #21259 UriComponentsBuilder does not encode ""+"" properly - #20750 Encoding of URI Variables on RestTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aa4bcedad37a9a084e96298f087fec4889c59cdc, https://github.com/spring-projects/spring-framework/commit/4db0d999af9a6d5ca9ee09df1b8c08bcaf9cf5dd, https://github.com/spring-projects/spring-framework/commit/3d20db1e49bc286015f5e343587b6ac3b07de734","closed","type: documentation,","spring-projects-issues","2018-01-26T17:48:38Z","2019-01-11T15:36:56Z"
"","20966","Update priority for ServerResponseResultHandler [SPR-16420]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16420](https://jira.spring.io/browse/SPR-16420?redirect=false)** and commented  Currently it's at lowest precedence which seems unnecessarily low and could cause issues. Since it checks by type it should be safe to have a higher precedence.  By comparison `ResponseEntity` is at 0, `ResponseBody` is at 100, and view resolution is at lowest precedence. In a mix of functional endpoints and controllers, if the `ViewResolutionResultHandler` checks first, the `ServerResponse` would be treated as a model attribute. In that sense view resolution is really meant to be last in line because it ends up making default assumptions broadly applicable to any non-simple type.  I would suggest to use 0, just like `ResponseEntity`, for the same reason.   ---  **Affects:** 5.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbde97f30258f90a08375dbe6a949ef4f3a172db","closed","type: task,","spring-projects-issues","2018-01-25T23:19:11Z","2018-02-19T12:19:20Z"
"","20943","[doc] Update documentation on WebAsyncManager thread pool [SPR-16397]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16397](https://jira.spring.io/browse/SPR-16397?redirect=false)** and commented  #20751 will provide better defaults in 5.1. Until then we should have something in the documentation to at least mention that this needs to be configured when streaming with reactive types.  ---  **Affects:** 5.0.2  **Issue Links:** - #20751 Warn about use of SimpleAsyncTaskExecutor for async requests","closed","type: documentation,","spring-projects-issues","2018-01-17T21:45:08Z","2019-01-11T15:28:31Z"
"","20941","[docs] Add WebFlux content on HTTP caching [SPR-16395]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16395](https://jira.spring.io/browse/SPR-16395?redirect=false)** and commented   ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/be5229949cca44858378e0307bc43c95d91cb4fe, https://github.com/spring-projects/spring-framework/commit/4a435c12f24a08c9dc4de91e672136a587bdbd19, https://github.com/spring-projects/spring-framework/commit/ef41dcf6878d4063f10cfa946bcf079b2bf71eb4, https://github.com/spring-projects/spring-framework/commit/516937cfc51f87cc2b3a258539c7aa59e33af145","closed","type: documentation,","spring-projects-issues","2018-01-17T04:37:40Z","2018-06-12T15:44:03Z"
"","20940","[docs] Add WebFlux content on exception handling [SPR-16394]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16394](https://jira.spring.io/browse/SPR-16394?redirect=false)** and commented  ---  **Affects:** 5.0.2  **Issue Links:** - #21097 Using `@ControllerAdvice` with WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65fdd0efebd95f36904256cc0b5d9038287622ea, https://github.com/spring-projects/spring-framework/commit/9dd3cd98ac1ee043563d2feda8a245888231ffe9, https://github.com/spring-projects/spring-framework/commit/0ded23945357abb04bc3cc5be24913e2ec3c20f4","closed","type: documentation,","spring-projects-issues","2018-01-17T04:37:12Z","2019-01-13T04:55:43Z"
"","20939","[docs]: Add WebFlux content on view technology [SPR-16393]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16393](https://jira.spring.io/browse/SPR-16393?redirect=false)** and commented  ---  **Affects:** 5.0.2  **Issue Links:** - #20992 Update and improve script templating documentation","closed","type: documentation,","spring-projects-issues","2018-01-17T04:36:38Z","2019-01-11T15:28:20Z"
"","20933","Upgrade to Reactor Netty 0.8 [SPR-16387]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16387](https://jira.spring.io/browse/SPR-16387?redirect=false)** and commented  The upgrade brings API changes but that should be transparent to applications aside from the required dependency upgrade.  ---  **Affects:** 5.0.2  **Issue Links:** - #20824 Let netty webclient optionally follow redirects (_**""is depended on by""**_) - #20776 Allow configuration for DEFAULT_FRAME_MAX_SIZE of WebSocketSession on WebFlux with Netty (_**""is depended on by""**_) - #20931 Upgrade to Reactor Core 3.1.3 (including Reactive Streams 1.0.2) - #20932 Upgrade to Reactor Core 3.2 - #22055 ReactorNettyTcpClient constructor with callback to initialize TcpClient  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1831, and commits https://github.com/spring-projects/spring-framework/commit/a3216432b5b86e1e42110af1738ea66bdd58b163, https://github.com/spring-projects/spring-framework/commit/ffbc75ae47936c8668c55332e5b70142279f64ac, https://github.com/spring-projects/spring-framework/commit/72b1d4c648b11db499c2a4e48ceccc9985ca7345","closed","type: task,","spring-projects-issues","2018-01-16T18:49:31Z","2019-01-11T15:15:47Z"
"","20800","Byte related decoders should implement decodeToMono [SPR-16253]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16253](https://jira.spring.io/browse/SPR-16253?redirect=false)** and commented  ByteBufferDecoder, ByteArrayDecoder, and DataBufferDecoder all rely on the default implementation of decodeToMono which raises UnsupportedOperationException. That means a controller method cannot declare `@RequestBody` with `byte[]` for example, or likewise when using the WebClient. Those scenarios are perfectly valid, they rely on an explicit declaration, and should be work. This is also inconsistent with StringDecoder which does implement decodeToMono.    ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f4d8c7cc2b6e3add1b1b06dc487cce82dceb4a49","closed","type: enhancement,","spring-projects-issues","2017-12-01T14:34:32Z","2018-01-23T10:05:11Z"
"","20755","Review Publisher adapters for reading and writing [SPR-16207]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16207](https://jira.spring.io/browse/SPR-16207?redirect=false)** and commented  1. As a follow-up to PR 1596 (https://github.com/spring-projects/spring-framework/pull/1596), let's review the suspend/resume related functionality in the sub-classes of AbstractListenerReadPublisher and decide if that needs to be exposed/present in the base class.  2. Address race conditions identified as part of a related review.    ---  **Affects:** 5.0.2","closed","type: task,","spring-projects-issues","2017-11-16T15:24:35Z","2017-11-27T12:17:08Z"
"","20752","Support for autowire-candidate with @Bean [SPR-16204]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16204](https://jira.spring.io/browse/SPR-16204?redirect=false)** and commented  XML bean declarations support this attribute but not `@Bean` declarations. The need for this has come up in #20737 and now also #20751.  ---  **Affects:** 5.0.1  **Issue Links:** - #20737 WebSocketConfigurationSupport.defaultSockJsTaskScheduler adds NoOpScheduler to context that is not usable in any way (_**""is depended on by""**_) - #20751 Warn about use of SimpleAsyncTaskExecutor for async requests (_**""is depended on by""**_) - #13043 Support disabling `@Autowired` on a per-`@Bean` basis - #21572 Consistent non-exposure of null beans in the BeanFactory API - #21814 Deprecate autowire attribute on `@Bean` annotation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fc699b2b3784413bb7348b8c2a92eb2ab871479f","closed","type: enhancement,","spring-projects-issues","2017-11-15T23:45:45Z","2019-01-13T04:59:53Z"
"","20751","Warn about use of SimpleAsyncTaskExecutor for async requests [SPR-16203]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16203](https://jira.spring.io/browse/SPR-16203?redirect=false)** and commented  The Spring MVC Java config and XML namespace allow configuring an `AsyncTaskExecutor` originally used for `java.util.concurrent.Callable` return values and by default a `SimpleAsyncTaskExecutor` is used with the recommendation to configure a task executor with a thread pool for use under load.   Now that the same executor is also used for blocking writes when streaming with `Flux` or `Observable`, we should warn more proactively about this in the logs.   ---  **Affects:** 5.0.1  **Issue Links:** - #20752 Support for autowire-candidate with `@Bean` (_**""depends on""**_) - #20737 WebSocketConfigurationSupport.defaultSockJsTaskScheduler adds NoOpScheduler to context that is not usable in any way - #20943 [doc] Update documentation on WebAsyncManager thread pool  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b861aeae60952bb94e486e7d97e723eca048f0c, https://github.com/spring-projects/spring-framework/commit/7b3a72f48346b5aa270750dae6b75a0d57fef3d9, https://github.com/spring-projects/spring-framework/commit/7ea8ecb6abccdec0b4183c27f5f314e21314f204","closed","type: enhancement,","spring-projects-issues","2017-11-15T23:42:40Z","2019-01-13T05:00:14Z"
"","20735","NPE in ErrorsMethodArgumentResolver [SPR-16187]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16187](https://jira.spring.io/browse/SPR-16187?redirect=false)** and commented  This is based on a Spring Boot ticket https://github.com/spring-projects/spring-boot/issues/10950. The specific use case that led to the NPE is a `BindingResult` argument after an `@RequestBody` which is not supported.   ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff97eafa4f39411a68a1632f7218158287546457","closed","type: bug,","spring-projects-issues","2017-11-10T15:55:43Z","2017-11-27T12:17:09Z"
"","20703","Support prefix-based Servlet path mapping in ServletHttpHandlerAdapter [SPR-16155]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16155](https://jira.spring.io/browse/SPR-16155?redirect=false)** and commented  ---  **Affects:** 5.0.1  **Issue Links:** - #20691 ""No matching handler"" when override method getServletMapping() in AbstractAnnotationConfigDispatcherHandlerInitializer"" (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4534c5fbfc283f840314419a90640a43e66af9cd, https://github.com/spring-projects/spring-framework/commit/8c33ed02b33c0b708958cf05919740bef9a94e16","closed","type: enhancement,","spring-projects-issues","2017-11-02T20:36:49Z","2019-01-11T13:27:40Z"
"","20693","Improve ReactorNettyTcpClient shutdown logic [SPR-16145]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16145](https://jira.spring.io/browse/SPR-16145?redirect=false)** and commented  Take care of the TODOs in the shutdown method and test.   ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abe4420006d244140d9d4efd0c31756b13951e76","closed","type: enhancement,","spring-projects-issues","2017-11-01T17:47:34Z","2017-11-27T12:17:08Z"
"","20682","Create builder for multipart bodies [SPR-16134]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16134](https://jira.spring.io/browse/SPR-16134?redirect=false)** and commented  It would be useful to support more explicitly the case of creating an `HttpEntity` in order to provide a part with headers in multipart request, e.g. a `PartHttpEntity` sub-class. Such a class could provide a builder similar to those in RequestEntity but by comparison the use case here can make the assumptions and for example a body can always be expected along with a content type.  This was first raised in #20666 (WebTestClient) but would also help for WebClient and RestTemplate scenarios.  ---  **Affects:** 5.0.1  This issue is a sub-task of #20666  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d1f87501c043fc58200ce4d1b0f544f8ad04619","closed","type: task,","spring-projects-issues","2017-10-30T18:21:31Z","2019-01-11T13:14:35Z"
"","20681","Chained API for form and multipart data in BodyInserters [SPR-16133]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16133](https://jira.spring.io/browse/SPR-16133?redirect=false)** and commented  The ability to build the form inline:  ```java BodyInserters.fromFormData(""a"", ""a1"").param(""b"", ""b1"", ""b2"") ```  Or multipart data:  ```java BodyInserters.fromMultipartData(""foo"", new Foo()).param(""b"", new HttpEntity(...)) ```  Each call to param returns an inserter that's ready for use, either by creating a new one with the additional parameter, or by modifying the existing one.  ---  **Affects:** 5.0.1  This issue is a sub-task of #20666  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a58002a5dee402fc005b5544d41e5f83b3bbea34","closed","type: task,","spring-projects-issues","2017-10-30T18:11:40Z","2019-01-11T13:14:30Z"
"","20668","PathContainer-based implementation of extractPathWithinPattern [SPR-16120]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16120](https://jira.spring.io/browse/SPR-16120?redirect=false)** and commented  The `extractPathWithinPattern` in `PathPattern` takes `PathContainer` as input and output but internally it still delegates to an `AntPathMatcher` based implementation that takes String as input and returns the same as output.  This is largely an internal affair to make it more consistent and efficient as the rest of `PathPattern` but another important reason is to fix the behavior with regards to trimming and stripping trailing slashes to be consistent with the rest of `PathPattern`.   ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/508aea8a47b69ac11426a6cedd9ddd9f93117ad2","closed","type: enhancement,","spring-projects-issues","2017-10-26T13:17:00Z","2017-11-27T12:17:08Z"
"","20594","Refactor the Appendix section in the reference documentation [SPR-16045]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16045](https://jira.spring.io/browse/SPR-16045?redirect=false)** and commented  The Appendix used to have links to What's New and the Migration guides on the Wiki. Lots of people couldn't find it there -- it's not a very logical to check.  Those are now removed from the Appendix and are instead mentioned on the index page. They're important enough and What's new used to be the start of the reference.  From the remaining content, some needs to be trimmed like the classic ORM and AOP usage.  The XML schema configuration could move to the ""Core Container"" section, at the bottom. Arguably, in this new section-based structure, it would be more useful there, as a local Appendix of sorts. It does not alone justify having a top-level Appendix section.  The form tags reference is of marginal value. The API docs already lists all Tag classes and methods. We could make sure the API docs have the same amount of information (even including HTML tables in class level Javadoc) and then simply refer to the Javadoc form the reference without bloating the size of the content.  ---  **Affects:** 5.0 GA  **Issue Links:** - #20593 Top-level ""Language Support"" reference section  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5a5677fcd2a0948be5ab87fbd418fdc7b2b1daf, https://github.com/spring-projects/spring-framework/commit/eea8ee2165d694165364692bfd1ad761bb7fc09d","closed","type: task,","spring-projects-issues","2017-10-04T16:36:45Z","2019-01-11T13:12:56Z"
"","20593","Top-level ""Language Support"" reference section [SPR-16044]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16044](https://jira.spring.io/browse/SPR-16044?redirect=false)** and commented  Currently we have ""Kotlin Support"" as a top-level section. Groovy support is sprinkled throughout the ""Core Container"" section.  There is also a ""Dynamic Languages Support"" chapter in the ""Integration"" section.  The Kotlin section seems like a good model to emulate with a single place for Kotlin users to go to. We can build on that and create a top-level ""Language Support' section with chapters on Kotlin, Groovy, and also move the  dynamic languages content on from the Integration section.  Java language information could also be linked to or summarized in that section regardless of where it actually lives.  ---  **Affects:** 5.0 GA  **Issue Links:** - #20594 Refactor the Appendix section in the reference documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3e62284eacda529f28433f26f9f91370d164a3b  1 votes, 1 watchers","closed","type: documentation,","spring-projects-issues","2017-10-04T16:22:34Z","2019-01-11T13:12:37Z"
"","20589","[docs] Complete WebFlux annotation programming model parts [SPR-16040]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16040](https://jira.spring.io/browse/SPR-16040?redirect=false)** and commented   ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb7152d6e7e4050db2230198a4d0c0350e505833, https://github.com/spring-projects/spring-framework/commit/61fc32155464f597eec0f1eefd9cdcb5c45f81c3, https://github.com/spring-projects/spring-framework/commit/4f2e54fc2dfe6d30336f6b2390cc563ee9bc5343, https://github.com/spring-projects/spring-framework/commit/1dbcd66091e1bafeee6bb0deb3bec62840f3e62f, https://github.com/spring-projects/spring-framework/commit/b97fa4a5ee2f8ec76e1240935198e14388997b2b, https://github.com/spring-projects/spring-framework/commit/437c33ba425b46a82c9ccbe16a8796050790a597","closed","type: documentation,","spring-projects-issues","2017-10-03T19:25:37Z","2018-01-23T10:05:12Z"
"","20567","Fix behavior of ClientResponse bodyToMono and bodyToFlux with Void.class [SPR-16018]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16018](https://jira.spring.io/browse/SPR-16018?redirect=false)** and commented  Currently `.bodyToMono(Void.class)` and `.bodyToFlux(Void.class)` do not do attempt to do anything with the body and simply return `Mono.empty()` instead.  This is a potential backdoor to connection pool issues if the response does have a body. We need to go farther in the handling of Void to actually attempt to consume the body, and cancel in case we do get some data. This is a sensible default behavior for a call such as `.bodyToMono(Void.class)` which cannot return anything more useful anyway.  Not only does such an improvement close a loophole into connection pool issues but it also makes for a more consistent message with regards to not leaving unconsumed resources -- instead of a close method on the response which is hard to explain how to use correctly or when, the advice is now simply  ""always use one of the body methods"".  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20542 Revisit how WebClient disposes connection - #21177 WebClient retrieve() does not handle Void.class as recommended  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/126ac849e5592f65d742d1f23bf891e1a115af01","closed","type: bug,","spring-projects-issues","2017-09-27T15:40:49Z","2019-01-11T14:15:06Z"
"","20555","WebFlux support for HttpHeaders controller method return value [SPR-16006]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16006](https://jira.spring.io/browse/SPR-16006?redirect=false)** and commented  RequestMappingInfoHandlerMapping uses such a method and is one reason for #20544.  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20544 WebFlux support for HTTP OPTIONS not working  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2da2c17fbb0bec5b1858878826a79a9c6af4ffcb","closed","type: enhancement,","spring-projects-issues","2017-09-25T19:04:18Z","2019-01-11T14:15:48Z"
"","20547","WebFlux support for Locale, TimeZone, ZoneId controller method arguments [SPR-15998]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15998](https://jira.spring.io/browse/SPR-15998?redirect=false)** and commented   ---  **Affects:** 5.0 RC4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/869b818e96844791bdd30201f2ee4c636ebba075","closed","type: enhancement,","spring-projects-issues","2017-09-24T14:35:01Z","2017-09-28T12:14:38Z"
"","20546","WebFlux support for UriBuilder, UriComponentsBuilder controller method arguments [SPR-15997]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15997](https://jira.spring.io/browse/SPR-15997?redirect=false)** and commented  Essentially `UriComponentsBuilder.fromHttpRequest(request)`.  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20505 Introduce WebFluxUriComponentsBuilder  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bdde0f1ea0424d8639d2c7133d89a799a9721fc7","closed","type: enhancement,","spring-projects-issues","2017-09-24T14:31:59Z","2019-01-11T18:22:31Z"
"","20544","WebFlux support for HTTP OPTIONS not working [SPR-15995]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15995](https://jira.spring.io/browse/SPR-15995?redirect=false)** and commented  HTTP OPTIONS doesn't seem to work. An `@RestController` with a `Flux` return value produces a 500 and this:  ``` [http-nio-8081-exec-2] 40:37 HttpWebHandlerAdapter: Failed to handle request java.lang.IllegalStateException: Could not resolve view with name 'cars'. 	at org.springframework.web.reactive.result.view.ViewResolutionResultHandler.lambda$resolveViews$3(ViewResolutionResultHandler.java:276) ```  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20555 WebFlux support for HttpHeaders controller method return value","closed","type: bug,","spring-projects-issues","2017-09-23T21:43:58Z","2019-01-11T18:22:40Z"
"","20543","WebFlux support for HTTP HEAD [SPR-15994]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15994](https://jira.spring.io/browse/SPR-15994?redirect=false)** and commented  For mapping purposes it works  the same as in Spring MVC -- HTTP HEAD is implicitly allowed where HTTP GET is declared. However in Spring MVC the Servlet API buffers response content, sets the content-length, and doesn't write. There is no equivalent support in Spring WebFlux. Reactor Netty produces a full response. Tomcat, Jetty, and Underow simply hang after the response headers which include ""transfer-encoding:chunked"".   ---  **Affects:** 5.0 RC4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6ee1af27c61c015461f79f95f1e4f89db911be0c","closed","type: enhancement,","spring-projects-issues","2017-09-23T21:37:27Z","2017-09-28T12:14:36Z"
"","20542","Revisit how WebClient disposes connection [SPR-15993]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15993](https://jira.spring.io/browse/SPR-15993?redirect=false)** and commented  #20474 introduced a close method on ClientResponse and applied it automatically when body reading methods are used. However while investigating #20523 we realized the underlying dispose() on the Reactor HttpClientResponse is not meant to be called always but rather only as a means of cancelling or declaring that you won't read the body. Using dispose actually closes the connection and counteracts the benefits of using a connection pool.  We should remove the automatic calls to close (the `.doAfterTerminate(response::close)` when reading the body and probably also perhaps revisit the `close()` method behavior and name.  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20560 WebClient doesn't reuse connections (_**""is duplicated by""**_) - #20474 Ensure that WebClient disposes the HTTP client connection once the client response is consumed - #20567 Fix behavior of ClientResponse bodyToMono and bodyToFlux with Void.class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/10139d42fc57131386f57d5b160412cfb0c9fc86  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2017-09-22T20:39:18Z","2019-01-11T18:22:06Z"
"","20534","Remove ResourceServlet from master [SPR-15984]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-15984](https://jira.spring.io/browse/SPR-15984?redirect=false)** and commented  It seems that we never did remove the ResourceServlet [as indicated](https://pivotal.io/security/cve-2016-9878). It was however deprecated in 4.3.5.   ---  **Affects:** 4.3.11  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/132022861e635736e2d4ab0f95247ad10cc39cc0","closed","type: task,","spring-projects-issues","2017-09-20T16:58:55Z","2017-09-28T12:14:38Z"
"","21083","Restdoc generation does not fail on missing fields because JsonContentHandler.getUndocumentedContent() removes complete arrays if documented [SPR-16540]","**[Roland Bachlechner](https://jira.spring.io/secure/ViewProfile.jspa?name=rbachlec)** opened **[SPR-16540](https://jira.spring.io/browse/SPR-16540?redirect=false)** and commented  I just detected that this issue has gone in newest version of restdocs project (2.0.0.RELEASE). But it's still present in version currently used in Spring Boot. Sorry for that, please close this bug.  **Situation:** An array is JSON response payload should be documented. Also the fields of the objects in the array should be documented.  **Code:**  ```java PayloadDocumentation.responseFields( 	fieldWithPath(""data"").description(""Array containing fields""), 	fieldWithPath(""data[].field1"").description(""The first field""), 	fieldWithPath(""data[].field2"").description(""The second field""), 	fieldWithPath(""data[].field3"").description(""The third field"") ) ```  **Response payload:**  ```javascript {   ""data"": [     {       ""field1"": ""value1"",       ""field2"": ""value2"",       ""field3"": ""value3"",       ""field4"": ""value4""     }   ] } ```  **Problem:** The test does not fail on missing documentation of field4.  **Reason:** JsonContentHandler.getUndocumentedContent() removes the whole array from content on path ""$.data"" and cannot find the missing field4 within the object in the array.   ---  **Affects:** 4.3.14","closed","status: invalid,","spring-projects-issues","2018-02-27T09:10:17Z","2019-01-12T05:19:20Z"
"","20894","AbstractAutoProxyCreator throws IllegalStateException when using Apache Orchestra conversations  [SPR-16347]","**[Roland Bachlechner](https://jira.spring.io/secure/ViewProfile.jspa?name=rbachlec)** opened **[SPR-16347](https://jira.spring.io/browse/SPR-16347?redirect=false)** and commented  I tried to migrate our applications from Spring 4 to Spring 5 and got the following problem. Defining and accessing a bean with orchestra conversation scope leads to this stacktrace:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personDao' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: BeanFactory required for resolving interceptor names 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:348) 	at org.apache.myfaces.orchestra.conversation.spring.AbstractSpringOrchestraScope.getRealBean(AbstractSpringOrchestraScope.java:370) 	at org.apache.myfaces.orchestra.conversation.spring.ScopedBeanTargetSource.getTarget(ScopedBeanTargetSource.java:73) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673) 	at mycompany.persistence.dao.PersonDao$$EnhancerBySpringCGLIB$$6faf3db0.toString() 	at com.sun.facelets.util.DevTools.writeVariables(DevTools.java:168) 	at com.sun.facelets.util.DevTools.writeVariables(DevTools.java:145) 	at com.sun.facelets.util.DevTools.debugHtml(DevTools.java:109) 	at com.sun.facelets.FaceletViewHandler.handleRenderException(FaceletViewHandler.java:692) 	at com.sun.facelets.FaceletViewHandler.renderView(FaceletViewHandler.java:660) 	at org.ajax4jsf.application.ViewHandlerWrapper.renderView(ViewHandlerWrapper.java:108) 	at org.ajax4jsf.application.AjaxViewHandler.renderView(AjaxViewHandler.java:189) 	at com.sun.faces.lifecycle.RenderResponsePhase.execute(RenderResponsePhase.java:110) 	at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:100) 	at com.sun.faces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:139) 	at javax.faces.webapp.FacesServlet.service(FacesServlet.java:266) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.ajax4jsf.webapp.BaseXMLFilter.doXmlFilter(BaseXMLFilter.java:154) 	at org.ajax4jsf.webapp.BaseFilter.handleRequest(BaseFilter.java:260) 	at org.ajax4jsf.webapp.BaseFilter.processUploadsAndHandleRequest(BaseFilter.java:366) 	at org.ajax4jsf.webapp.BaseFilter.doFilter(BaseFilter.java:493) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at mycompany.presentation.MySpecificFilter.doFilter(MySpecificFilter.java:46) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.myfaces.orchestra.filter.OrchestraServletFilter.doFilter(OrchestraServletFilter.java:77) 	at org.apache.myfaces.orchestra.lib.CompoundFilter$1.doFilter(CompoundFilter.java:58) 	at org.apache.myfaces.orchestra.lib._NullFilter.doFilter(_NullFilter.java:45) 	at org.apache.myfaces.orchestra.lib.CompoundFilter.doFilter(CompoundFilter.java:63) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:595) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) 	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:624) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341) 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:748) Caused by: java.lang.IllegalStateException: BeanFactory required for resolving interceptor names 	at org.springframework.util.Assert.state(Assert.java:73) 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.resolveInterceptorNames(AbstractAutoProxyCreator.java:547) 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.buildAdvisors(AbstractAutoProxyCreator.java:514) 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:463) 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:355) 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:304) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:438) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1714) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:583) 	... 54 more ```  I debugged the code and found the line AbstractAutoProxyCreator:547 (Spring 5.0.2) that asserts that the beanFactory is not null (the line has not been there in Spring 4). But the beanFactory field is annotated `@Nullable`.  I'm actually no sure if this is a bug but I didn't find a possibility to set the beanFactory field on the instance (actual class is org.apache.myfaces.orchestra.conversation.spring.OrchestraAdvisorBeanPostProcessor). The AbstractAutoProxyCreator class did not change that much between 4 and 5 and especially the method that throws the exception only fails because of the Assert.  The orchestra bean configuration looks like this:  ```xml                                                                                                                                                                                                                                                                                                                         	                 		                 		                 			                 				                 			                 		                 		                 	                                                                                       ```    ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a06bce3a6aae37c154e18615de9ef2ca25b3cd9","closed","in: core,","spring-projects-issues","2018-01-04T14:31:34Z","2018-01-23T10:05:13Z"
"","20901","Improve getCallbacks(Class) method of CglibAopProxy [SPR-16354]","**[Robin Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=mottox)** opened **[SPR-16354](https://jira.spring.io/browse/SPR-16354?redirect=false)** and commented  CglibAopProxy#getCallbacks creates FixedChainStaticTargetInterceptor for all methods of a target that is static when the advice chain is frozen which is unnecessary for methods with no advice. This is already mentioned in the TODO comment at line 329. According to CglibAopProxy.ProxyCallbackFilter#accept, when advice chain is frozen, methods with no advice have no possibility to choose a FixedChainStaticTargetInterceptor as their interceptor. So we can implement this optimization to improve memory efficiency.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1639","open","in: core,","spring-projects-issues","2018-01-06T09:16:23Z","2019-01-11T15:18:49Z"
"","20835","Ambiguous mapping error when using generic interface [SPR-16288]","**[Robert Thornton](https://jira.spring.io/secure/ViewProfile.jspa?name=thorntonrp)** opened **[SPR-16288](https://jira.spring.io/browse/SPR-16288?redirect=false)** and commented  I've upgraded my project from Spring Boot 1.5.8.RELEASE (using Spring Framework 4.3.12) to 1.5.9.RELEASE (using Spring Framework 4.3.13), and I am now getting an ambiguous mapping error on startup.  ``` Caused by: java.lang.IllegalStateException: Ambiguous mapping. Cannot map 'articleController' method  public org.springframework.data.domain.Page demo.ArticleController.find(org.springframework.data.domain.Pageable,demo.EntityPredicate) throws java.io.IOException to {[/v1/articles],methods=[GET],params=[page]}: There is already 'articleController' bean method public org.springframework.data.domain.Page demo.ArticleController.find(org.springframework.data.domain.Pageable,demo.ArticlePredicate) mapped. 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.assertUniqueMethodMapping(AbstractHandlerMethodMapping.java:576) ~[spring-webmvc-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:540) ~[spring-webmvc-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.registerHandlerMethod(AbstractHandlerMethodMapping.java:264) ~[spring-webmvc-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.detectHandlerMethods(AbstractHandlerMethodMapping.java:250) ~[spring-webmvc-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.initHandlerMethods(AbstractHandlerMethodMapping.java:214) ~[spring-webmvc-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.afterPropertiesSet(AbstractHandlerMethodMapping.java:184) ~[spring-webmvc-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.afterPropertiesSet(RequestMappingHandlerMapping.java:127) ~[spring-webmvc-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1687) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1624) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE] ```  I've isolated the cause and simplified it to the following sample code that reproduces the issue:  ```java package demo;  import java.io.IOException; import java.time.Instant; import java.util.List; import java.util.UUID;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.data.domain.Page; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import static demo.ApiConstants.ARTICLES_PATH;  @SpringBootApplication public class DemoApplication {      public static void main(String[] args) {         SpringApplication.run(DemoApplication.class, args);     } }  @RestController @RequestMapping(path = ARTICLES_PATH) class ArticleController implements ApiConstants, ResourceEndpoint {      @GetMapping(params = ""page"")     public Page find(Pageable pageable, ArticlePredicate predicate) {         throw new UnsupportedOperationException(""not implemented"");     }      @GetMapping     public List find(Sort sort, ArticlePredicate predicate) {         throw new UnsupportedOperationException(""not implemented"");     } }  interface ApiConstants {      String API_V1 = ""/v1"";     String ARTICLES_PATH = API_V1 + ""/articles""; }  interface ResourceEndpoint {      Page find(Pageable pageable, P predicate) throws IOException;      List find(Sort sort, P predicate) throws IOException; }  abstract class Entity {      public UUID id;     public String createdBy;     public Instant createdDate; }  class Article extends Entity {      public String slug;     public String title;     public String content; }  abstract class EntityPredicate {      public String createdBy;     public Instant createdBefore;     public Instant createdAfter;      public boolean accept(E entity) {         return (createdBy == null || createdBy.equals(entity.createdBy)) &&                 (createdBefore == null || createdBefore.compareTo(entity.createdDate) >= 0) &&                 (createdAfter == null || createdAfter.compareTo(entity.createdDate) >= 0);     } }  class ArticlePredicate extends EntityPredicate {      public String query;      @Override     public boolean accept(Article entity) {         return super.accept(entity) && (query == null || (entity.title.contains(query) || entity.content.contains(query)));     } } ```  The `ArticleController` class implements two interfaces: `ApiConstants`, and `ResourceEndpoint`. The `ResourceEndpoint` interface is a generic interface that accepts type parameters for the resource entity and a predicate. If I remove the `ApiConstants` interface, the error goes away, suggesting that Spring MVC may be confused when the controller implements more than one interface.  I've verified that the above code still works on Spring Boot 1.5.8 (using Spring Framework 4.3.12)  The above sample code doesn't demonstrate why I'm using the two interfaces. Its intent is simply to demonstrate the regression in functionality.  ---  **Affects:** 4.3.13  **Issue Links:** - #20651 Incorrectly identify bridged method on interface  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1632, and commits https://github.com/spring-projects/spring-framework/commit/347c2daa2c83f061bb53e089e4b64e5ef031d5c1, https://github.com/spring-projects/spring-framework/commit/69c882cfbcb357d9438732663a5c798c52ec79f7, https://github.com/spring-projects/spring-framework/commit/121f9e3734d8998e62c65cb7f230cd88680888b6  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: regression,","spring-projects-issues","2017-12-11T22:22:40Z","2019-01-11T15:14:11Z"
"","21098","ChannelSendOperator.WriteBarrier readyToWrite has race condition [SPR-16555]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16555](https://jira.spring.io/browse/SPR-16555?redirect=false)** and commented  There is a race condition on `ChannelSendOperator.WriteBarrier.readyToWrite` which prevents data from being written to the response.  This happens when using `publishOn`. From a Spring Security standpoint this means that the data written after a user authenticates is dropped randomly.  NOTE: [smaldini](https://jira.spring.io/secure/ViewProfile.jspa?name=smaldini) has agreed to send a PR for this issue.   ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e48def2d351353c9fe2e893a69610a6a0a7711cc","closed","type: bug,","spring-projects-issues","2018-03-06T02:55:57Z","2018-04-03T20:34:27Z"
"","21096","Provide simple way to create ClientResponse [SPR-16553]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16553](https://jira.spring.io/browse/SPR-16553?redirect=false)** and commented  When working with an `ExchangeFilterFunction` it expects that a `Mono` is provided as a return type. Similar to `ClientRequest.Builder` for `ClientRequest`, it would be nice if there were a simple way to create a `ClientResponse`. This would make it easier to use the `ExchangeFilterFunction` API to provide custom `ClientResponse`. For example, consider an `ExchangeFilterFunction` that provides a default value on an error:  ```java ClientResponse fallbackResponse = null; // no builder for this ExchangeFilterFunction fallback = (r,n) -> n 		.exchange(r) 		.onErrorResume(Exception.class, e -> Mono.just(fallbackResponse)); ```  A few use cases that would be valuable to support are:  * Creating a `ClientResponse` from a `WebClient.ResponseSpec` * Creating a `ClientResponse` from an existing `ClientResponse`  ---  **Affects:** 5.0.4  **Issue Links:** - #21247 Provide simple way to create ServerRequest  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04c2a2990dda185cca75ded2b218dff3054dafa8  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-03-05T15:31:25Z","2019-01-11T14:32:57Z"
"","21025","Use of ApplicationEventPublisher in a reactive call stack [SPR-16481]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16481](https://jira.spring.io/browse/SPR-16481?redirect=false)** and commented  Currently there is no equivalent of reactive `ApplicationEventPublisher` which means the only way to publish events is blocking and cannot be performed in a `WebFlux` application. This impacts Spring Security applications which currently cannot publish authentication events. See https://github.com/spring-projects/spring-security/issues/4961  ---  **Affects:** 5.0.3  **Issue Links:** - #21831 Support for non-blocking event listener methods  1 votes, 8 watchers","open","type: enhancement,","spring-projects-issues","2018-02-09T16:35:16Z","2020-09-24T14:58:38Z"
"","20998","MockMvcRequestBuilder does not decode pathInfo [SPR-16453]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16453](https://jira.spring.io/browse/SPR-16453?redirect=false)** and commented  ## Description  The `HttpServletRequest.getPathInfo()` [javadoc](https://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getPathInfo()) states:  > Returns: > a String, **decoded by the web container**, specifying extra path information that comes after the servlet path but before the query string in the request URL; or null if the URL does not have any extra path information  However, `MockMvcRequestBuilder` [does not decode](https://github.com/spring-projects/spring-framework/blob/v5.0.3.RELEASE/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java#L699) `pathInfo` when calculating it from the provided URL. For example, the following test fails, but should pass  ```java this.builder = new MockHttpServletRequestBuilder(HttpMethod.GET, ""/travel/hotels 42""); MockHttpServletRequest request = this.builder.buildRequest(this.servletContext);  assertEquals(""/travel/hotels 42"", request.getPathInfo()); ```  ## Impact  This bug has a fairly significant impact now that Spring Security rejects request that appear to be performing double encoding. For example, running the test with Spring Security would result in the following exception:  ``` org.springframework.security.web.firewall.RequestRejectedException: The request was rejected because the URL contained a potentially malicious String ""%""  	at org.springframework.security.web.firewall.StrictHttpFirewall.rejectedBlacklistedUrls(StrictHttpFirewall.java:145) 	at org.springframework.security.web.firewall.StrictHttpFirewall.getFirewalledRequest(StrictHttpFirewall.java:120) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:194) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:166) ```  ## Work Around  A workaround is by using a `RequestPostProcessor` to decode the pathInfo. For example:  ```java public class DecodePathInfoPostProcessor implements RequestPostProcessor {     private final UrlPathHelper urlPathHelper = new UrlPathHelper();     @Override     public MockHttpServletRequest postProcessRequest(MockHttpServletRequest request) {         request.setPathInfo(this.urlPathHelper.decodeRequestString(request, request.getPathInfo()));         return request;     } } ```  Then using it like this:  ```java MockMvc mvc = MockMvcBuilders.standaloneSetup(new Controller()) 	.defaultRequest(get(""/"").with(new DecodePathInfoPostProcessor())) 	.addFilter(new FilterChainProxy(Collections.emptyList())) 	.build();  mvc.perform(get(""/path/hello world/"")) 	.andExpect(status().isNotFound()); ```    ---  **Affects:** 4.3.14, 5.0.3  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1659, and commits https://github.com/spring-projects/spring-framework/commit/fe4472dbebbbaa86cf3157a20c0dd2f0aaef57cd, https://github.com/spring-projects/spring-framework/commit/0cd427bdd35e668dda6332ae2885d94c222d9c49  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2018-02-01T19:21:15Z","2018-02-19T12:19:20Z"
"","20964","CookieWebSessionIdResolver should leverage SameSite Cookie Attribute [SPR-16418]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16418](https://jira.spring.io/browse/SPR-16418?redirect=false)** and commented  It may be a little early for this given the limited Browser support, but we should consider setting the `SameSite` attribute on session cookies as this will prevent CSRF attacks without the need for any special code.  See https://tools.ietf.org/html/draft-west-first-party-cookies-07  ---  **Issue Links:** - #21518 Provide more control for setting the secure flag on the session cookie  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-01-25T18:52:19Z","2019-01-11T15:37:50Z"
"","20749","InMemoryWebSession.changeSessionId reports error if the session does not exist [SPR-16201]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16201](https://jira.spring.io/browse/SPR-16201?redirect=false)** and commented  If a user invokes `InMemoryWebSession.changeSessionId` before the session has been created, an error is reported stating:  ``` java.lang.IllegalStateException: Failed to change session id: 4854375d-1713-468b-9e4c-61fe282de0bc because the Session is no longer present in the store. 		at org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.changeSessionId(InMemoryWebSessionStore.java:214) 		at org.springframework.security.web.server.csrf.WebSessionServerCsrfTokenRepository.lambda$saveToken$1(WebSessionServerCsrfTokenRepository.java:64) 		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118) 		... 36 more ```  I think the method should support changing the id even if the session is new.  As it currently stands an additional problem is that it appears there is no way to determine if this operation is safe.   ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19a9bc4747028e68d0fc9ce71c302488cfbfa978","closed","type: bug,","spring-projects-issues","2017-11-15T20:44:02Z","2017-11-27T12:17:08Z"
"","20706","@RequestAttribute Mono is not allowed for attributes that are of type Mono [SPR-16158]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16158](https://jira.spring.io/browse/SPR-16158?redirect=false)** and commented  If there is request attribute that is of type Mono it cannot be accessed via `@RequestAttribute`. For example:  ```java serverWebExchange.setAttribute(""test"", Mono.just(""this"")); ```  ```java @ModelAttribute Mono test(@RequestAttribute(""test"") Mono test) {     return Mono.just(""""); } ```  fails with an exception similar to:  ``` 14:55:32.196 [reactor-http-nio-2] ERROR org.springframework.web.server.adapter.HttpWebHandlerAdapter - Failed to handle request java.lang.IllegalStateException: RequestAttributeMethodArgumentResolver doesn't support reactive type wrapper: reactor.core.publisher.Mono     at org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverSupport.buildReactiveWrapperException(HandlerMethodArgumentResolverSupport.java:99)     at org.springframework.web.reactive.result.method.HandlerMethodArgumentResolverSupport.checkAnnotatedParamNoReactiveWrapper(HandlerMethodArgumentResolverSupport.java:130)     at org.springframework.web.reactive.result.method.annotation.RequestAttributeMethodArgumentResolver.supportsParameter(RequestAttributeMethodArgumentResolver.java:54)     at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$findResolver$6(InvocableHandlerMethod.java:205)     at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174) ```    ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9786750b5acb151fcc845abfb2c8b8679ec44599","closed","type: bug,","spring-projects-issues","2017-11-03T20:14:03Z","2017-11-27T12:17:08Z"
"","20692","AbstractDispatcherHandlerInitializer does not detect WebFilter beans [SPR-16144]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16144](https://jira.spring.io/browse/SPR-16144?redirect=false)** and commented  Currently `AbstractDispatcherHandlerInitializer` uses `new DispatcherHandler(ApplicationContext)`. This means that the `WebFilter` instances (i.e. Spring Security) are not registered. Instead  `AbstractDispatcherHandlerInitializer` should use `WebHttpHandlerBuilder.applicationContext` to create an `HttpHandler` that is passed to `ServletHttpHandlerAdapter`.  Users can work around this by overriding `registerDispatcherHandler`. For example:  ```java public class AppInitializer extends AbstractAnnotationConfigDispatcherHandlerInitializer {  	@Override 	protected Class[] getConfigClasses() { 		return new Class[]{ 			HelloWebfluxApplication.class 		}; 	}  	protected void registerDispatcherHandler(ServletContext servletContext) { 		String servletName = getServletName(); 		ApplicationContext applicationContext = createApplicationContext();  		refreshApplicationContext(applicationContext); 		registerCloseListener(servletContext, applicationContext);  		HttpHandler httpHandler = WebHttpHandlerBuilder.applicationContext(applicationContext) 			.build(); 		ServletHttpHandlerAdapter handlerAdapter = new ServletHttpHandlerAdapter(httpHandler);  		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, handlerAdapter); 		 		registration.setLoadOnStartup(1); 		registration.addMapping(getServletMapping()); 		registration.setAsyncSupported(true);  		customizeRegistration(registration); 	} } ```  ---  **Affects:** 5.0.1  **Issue Links:** - #20633 Using AbstractAnnotationConfigDispatcherHandlerInitializer to run Spring Webflux application as a WAR doesn't work (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4534c5fbfc283f840314419a90640a43e66af9cd, https://github.com/spring-projects/spring-framework/commit/aa653b23bc68220c34543071ef4219e11c8f29c2","closed","type: bug,","spring-projects-issues","2017-11-01T17:37:10Z","2019-01-11T13:13:57Z"
"","20677","Add StatusAssertions.isForbidden [SPR-16129]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16129](https://jira.spring.io/browse/SPR-16129?redirect=false)** and commented  `HttpStatus.FORBIDDEN` is used quite a bit in security related applications. It would be nice if `ResponseSpec.StatusAssertions` had `isForbidden` on it.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/70ed45020b116118fed38424694e5b37eb5c773b","closed","type: enhancement,","spring-projects-issues","2017-10-29T02:18:59Z","2017-11-27T12:17:08Z"
"","20676","Simplify MockServerWebExchange getFormData [SPR-16128]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16128](https://jira.spring.io/browse/SPR-16128?redirect=false)** and commented  It would be nice if there were a simple way to specify the value for `getFormData` more easily.   --- No further details from [SPR-16128](https://jira.spring.io/browse/SPR-16128?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-10-29T00:42:58Z","2019-01-11T13:15:11Z"
"","20628","Consider adding MockServerWebExchange.from(MockServerHttpRequest.BaseBuilder) [SPR-16079]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16079](https://jira.spring.io/browse/SPR-16079?redirect=false)** and commented  As often as it occurs it would be very convenient to have `MockServerWebExchange.from(MockServerHttpRequest.BaseBuilder)` in addition to `MockServerWebExchange.from(MockServerHttpRequest)`   ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/94c4a7f94174243899d0f2bf94d6121f68d9c388","closed","type: enhancement,","spring-projects-issues","2017-10-16T19:43:18Z","2017-10-24T16:24:07Z"
"","20613","Package tangles in codec configurers [SPR-16064]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16064](https://jira.spring.io/browse/SPR-16064?redirect=false)** and commented  It appears there are some package tangles in the codec related classes. I believe most (if not all) are package private scope issues so it is possible this can be resolved passively. At quick glance there are the classes referring to classes within child packages that should be cleaned up:  https://github.com/spring-projects/spring-framework/blob/2e0a2845abe87f709b9f797eef615c6be1e272f5/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java#L35-L38  https://github.com/spring-projects/spring-framework/blob/2e0a2845abe87f709b9f797eef615c6be1e272f5/spring-web/src/main/java/org/springframework/http/codec/DefaultServerCodecConfigurer.java#L23-L24  https://github.com/spring-projects/spring-framework/blob/2e0a2845abe87f709b9f797eef615c6be1e272f5/spring-web/src/main/java/org/springframework/http/codec/DefaultClientCodecConfigurer.java#L25   ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/682186a20deaa121425f17570ebc8a233b774389","closed","type: task,","spring-projects-issues","2017-10-12T18:13:14Z","2017-10-24T16:24:06Z"
"","20608","WebClient.mutate() impacts future .mutate() invocations [SPR-16059]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16059](https://jira.spring.io/browse/SPR-16059?redirect=false)** and commented  The following code is surprising to me in that by the end it has 10 `ExchangeFilterFunction` instances on the `WebClient` which means the request contains the headers `header0`..`header9`.  ```java WebClient client = WebClient.create(); for(int i = 0; i<10; i++) { 	String headerName = ""header"" + i; 	String size = client 			.mutate() 			.filter((request, next) -> { 				request = ClientRequest.from(request) 						.header(headerName, ""addative"") 						.build(); 				return next.exchange(request); 			}) 			.build() 			.get() 			.uri(""http://localhost:8080/foo"") 			.retrieve() 			.bodyToMono(String.class) 			.block(); } ```  Instead each request should only have a single `headerX` value in it. `WebTestClient` has the same problem. I'm not sure if it is the same issue, but it should be fixed too.   ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/24ca8ccf5ac9582dbc6d2f15848c4f8398a3a96f, https://github.com/spring-projects/spring-framework/commit/faa74988c4a5d296cd631af2746f4b681a04b0f8","closed","type: bug,","spring-projects-issues","2017-10-10T20:38:19Z","2017-10-24T16:24:06Z"
"","20590","[doc] AbstractDispatcherServletInitializer support DispatcherServlet from Root Context [SPR-16041]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16041](https://jira.spring.io/browse/SPR-16041?redirect=false)** and commented  It would be nice if `AbstractDispatcherServletInitializer` made it simple to register the `DispatcherServlet` using the root `ApplicationContext`  ---  **Affects:** 4.3.11, 5.0 GA  **Issue Links:** - #15982 AbstractAnnotationConfigDispatcherServletInitializer does not allow consolidating all configuration into the ""root"" context  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/32d78e60b6bf19a66865478b86c69eb6ff49c8df","closed","type: task,","spring-projects-issues","2017-10-03T21:51:56Z","2019-01-11T13:12:43Z"
"","20579","CookieWebSessionIdResolver should set path to the context path + ""/"" [SPR-16030]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16030](https://jira.spring.io/browse/SPR-16030?redirect=false)** and commented  Currently the cookie path of the session is left blank which means the cookie path is the current path of the request. This means when a user creates a session in a nested directory like `/foo/bar/` the path of the cookie prevents it from being submitted in `/` or `/a/b/`.  Since a session is scoped to an application, we should set the path of the cookie to be the context path of the application.  The following code provides a reasonably simple workaround.  ```java  @Bean(WebHttpHandlerBuilder.WEB_SESSION_MANAGER_BEAN_NAME) public WebSessionManager webSessionManager() { 	DefaultWebSessionManager manager = new DefaultWebSessionManager(); 	manager.setSessionIdResolver(new PatchCookieWebSessionIdResolver()); 	return manager; }  static class PatchCookieWebSessionIdResolver extends CookieWebSessionIdResolver { 	@Override 	public void setSessionId(ServerWebExchange exchange, String id) { 		Assert.notNull(id, ""'id' is required""); 		setSessionCookie(exchange, id, getCookieMaxAge()); 	}  	private void setSessionCookie(ServerWebExchange exchange, String id, Duration maxAge) { 		String name = getCookieName(); 		boolean secure = ""https"".equalsIgnoreCase(exchange.getRequest().getURI().getScheme()); 		MultiValueMap cookieMap = exchange.getResponse().getCookies(); 		String path = exchange.getRequest().getPath().contextPath().value() + ""/""; 		cookieMap.set(name, ResponseCookie.from(name, id).path(path).maxAge(maxAge).httpOnly(true).secure(secure).build()); 	} }  ```    ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d05e538fb690aa38e3bef8afc14b1d48a74e054","closed","type: bug,","spring-projects-issues","2017-09-29T19:05:45Z","2017-10-24T16:24:07Z"
"","20562","Improve HandlerMappingIntrospector performance [SPR-16013]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16013](https://jira.spring.io/browse/SPR-16013?redirect=false)** and commented  Currently `HandlerMappingIntrospector` must iterate over all `HandlerMappings` to determine if a pattern matches. Then the `DispatcherServlet` must iterate over the same mappings to find a match. It would be nice if this could be optimized.  NOTE: This was originally reported by a user via email  ---  **Affects:** 4.3.11, 5.0 RC4  **Issue Links:** - #20094 AbstractHandlerMethodMapping should allow for customized bean retrieval","open","type: enhancement,","spring-projects-issues","2017-09-26T21:39:06Z","2019-01-11T14:15:03Z"
"","20535","Upgrade to Gradle 4.2(.1) [SPR-15985]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15985](https://jira.spring.io/browse/SPR-15985?redirect=false)** and commented  Consider updating to Gradle 4.2 https://docs.gradle.org/4.2/release-notes.html  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20226 Upgrade to Gradle 4.1 for clean JDK 9 build compatibility - #20629 Upgrade to Gradle 4.3(.1)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ba74e428088ddf4c54505357c333f5cbd76056c2, https://github.com/spring-projects/spring-framework/commit/95fdfac1281b7c54755890a43ccc9a4f617a69c9","closed","type: task,","spring-projects-issues","2017-09-20T21:23:19Z","2019-01-11T18:23:20Z"
"","20516","WebFlux Should Communicate X509 Authentication [SPR-15964]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15964](https://jira.spring.io/browse/SPR-15964?redirect=false)** and commented  X509 authentication occurs at the socket connection and thus must be done by the container (i.e. Netty). However, many applications need to perform authorization based upon the X509 certificate.  To solve this in the [servlet world](http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getAttribute(java.lang.String)), the X509 certificate is communicated to the user using a `HttpServletRequest.getAttribute`  The `WebFlux` abstraction should provide a mechanism to communicate the X509 certificate to the user.   ---  **Affects:** 5.0 RC4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87375fe6f81cb70f9ee3e44c4800ef8edce655a0","closed","type: enhancement,","spring-projects-issues","2017-09-14T22:13:00Z","2017-11-27T12:17:08Z"
"","20515","InMemoryWebSessionStore Leaks Memory [SPR-15963]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15963](https://jira.spring.io/browse/SPR-15963?redirect=false)** and commented  `InMemoryWebSessionStore` leaks expired sessions. There is code in `DefaultWebSessionManger` that cleans up an expired session but only if the user makes a request with that expired session. This means that if a user creates a session and just closes the browser tab without logging out, the session is never deleted.  Another problem is that relying on `DefaultWebSessionManger` to clean up the expired session is leaking implementation details. If someone wrote their own `WebSessionManager` and did not clean up the expired sessions within it, the problem would be even worse.  I think it would be better if `InMemoryWebSessionStore` knew how to clean up its own sessions (both the ones that are accessed and the ones that are never accessed again).  ---  **Affects:** 5.0 RC4  **Issue Links:** - #21558 InMemoryWebSessionStore could leak memory if sessions created but never used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec5969c5786b7810755a2fb0fb78d4e2764cfdf1, https://github.com/spring-projects/spring-framework/commit/cb2deccb2d414cabea15453ac440abab8cfe1334, https://github.com/spring-projects/spring-framework/commit/6da3518a6662fd0e6725597009acaf0b26262a16","closed","type: bug,","spring-projects-issues","2017-09-14T22:04:23Z","2019-01-11T18:09:10Z"
"","20512","WebSession provide invalidate method [SPR-15960]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15960](https://jira.spring.io/browse/SPR-15960?redirect=false)** and commented  There should be an easy way to programtically invalidate a `WebSession`   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15cc44e6e8b715a6e6e499f5e813149045068248","closed","type: enhancement,","spring-projects-issues","2017-09-13T20:56:48Z","2017-09-28T12:14:36Z"
"","20511","Allow Consumer-style access to FluxExchangeResult within chain of calls [SPR-15959]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15959](https://jira.spring.io/browse/SPR-15959?redirect=false)** and commented  Currently `ExchangeResult.assertWithDiagnostics` accepts a `Runnable` which works fine for assertions within `ExchangeResult` because other methods have a reference to the `ExchangeResult` to create a `Runnable` which performs the assertion.  However, a `Runnable` does not work nicely for an external user who wants to perform an assertion. Currently they must do something like:  ```java FluxExchangeResult result = client.get() 	.exchange() 	.expectStatus() 	.isOk() 	.returnResult(String.class); result.assertWithDiagnostics(() -> assertThat(result.getResponseCookies().isEmpty())); ```  It would be nice if `assertWithDiagnostics` accepted a `Consuer` so that the code can be refactored to be something like:  ```java  client.get() 	.exchange() 	.expectStatus() 	.isOk() 	.returnResult(String.class) 	.assertWithDiagnostics( result -> assertThat(result.getResponseCookies().isEmpty())); ```  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20474 Ensure that WebClient disposes the HTTP client connection once the client response is consumed  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d742fc198abc8fee8477cea2d5761649b8ac40e3","closed","type: enhancement,","spring-projects-issues","2017-09-13T19:36:11Z","2019-01-11T18:09:07Z"
"","20478","Consider moving ServerHttpResponse encodeUrl / registerUrlEncoder to ServerWebExchange? [SPR-15924]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15924](https://jira.spring.io/browse/SPR-15924?redirect=false)** and commented  Similar to how `WebSession` is not part of the HTTP request, neither `encodeUrl` nor `registerUrlEncoder` are actually part of the response. Perhaps they make more sense on `ServerWebExchange`  ---  **Affects:** 5.0 RC3  **Issue Links:** - #19098 Reactive response URL-rewriting mechanism  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/02a2c400c77cf7ea1d867e933654b56da09856ed","closed","type: task,","spring-projects-issues","2017-09-01T18:32:20Z","2019-01-11T18:11:48Z"
"","20431","Provide hook in DefaultWebSessionManager to support creating custom WebSession implementation [SPR-15876]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15876](https://jira.spring.io/browse/SPR-15876?redirect=false)** and commented  It would be nice if `DefaultWebSessionManager` provided a hook for creating a new `WebSession` vs instantiating it directly. This is necessary in Spring Session because Spring Session repositories allow creating a custom implementation based on the session store type. This allows for optimizations on how/when the session is persisted. For example, the Redis implementation of Spring Session tracks the changes that have been made and only persists the changes.  Spring Session can still accomplish what it needs, but it must create its own `WebSessionManager` which requires a lot more work than just providing a `WebSessionStore`  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20430 DefaultWebSessionManager requires DefaultWebSession  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1507","closed","type: enhancement,","spring-projects-issues","2017-08-18T15:42:48Z","2019-01-11T18:06:42Z"
"","20430","DefaultWebSessionManager requires DefaultWebSession [SPR-15875]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-15875](https://jira.spring.io/browse/SPR-15875?redirect=false)** and commented  Given the fact that `DefaultWebSessionManager` allows injecting a `WebSessionStore` and `WebSessionStore` allows any implementation of `WebSession` to be returned, it seems reasonable that `DefaultWebSessionManager` would work with a `SessionStore` that returns a different implementation of `WebSession`. However, this is not the case because it [performs a cast](https://github.com/spring-projects/spring-framework/blob/18f42f9667bae7aac52eb62408476b40ef69b0c2/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java#L125) to `DefaultWebSession`.  This makes it difficult for a custom implementation of `WebSessionStore` to be provided. This is further compounded by the fact that `DefaultWebSession` is package scope which means reading from an external data store cannot be performed since `DefaultWebSession` cannot be instantiated. It also means that a custom implementation of `WebSession` cannot be provided (which Spring Session needs).  Please make `DefaultWebSessionManager` able to work with any `WebSession` implementation being returned from `WebSessionStore`.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20431 Provide hook in DefaultWebSessionManager to support creating custom WebSession implementation  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1507, and commits https://github.com/spring-projects/spring-framework/commit/2fc2dab2302afb6e558c7a0e0c172291e1fca217, https://github.com/spring-projects/spring-framework/commit/8ad14ae95c973b5eb1feb05e8cb52a48513cca72, https://github.com/spring-projects/spring-framework/commit/86912475af6cd86c2e09c8aeabd8697708be1ab8","closed","type: bug,","spring-projects-issues","2017-08-18T15:37:15Z","2019-01-11T18:06:35Z"
"","21055","NamedParameterJdbcTemplate doesn't support postgresql dollar quoting $$ [SPR-16512]","**[RJ](https://jira.spring.io/secure/ViewProfile.jspa?name=ewing.rj)** opened **[SPR-16512](https://jira.spring.io/browse/SPR-16512?redirect=false)** and commented  When trying to use valid postgresql [dollar quoting](https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-SYNTAX-DOLLAR-QUOTING) syntax, NamedParameterJDBCTemplate thinks that the dollarquote is a named param and fails b/c no value is given.  A query like:  ``` select * from a where a.col1 = $ranS58$value$ranS58$; ```  throws the error:  ``` org.springframework.dao.InvalidDataAccessApiUsageException: No value supplied for the SQL parameter 'value$ranS58$': ```  ---  **Affects:** 4.3.14  **Issue Links:** - #20887 NamedParameterJdbcTemplate fails on PostgreSQL array - #21054 Spring JDBC not correctly processing Postgresql ? operator","open","type: enhancement,","spring-projects-issues","2018-02-17T21:44:59Z","2019-01-11T14:37:52Z"
"","21054","Spring JDBC not correctly processing Postgresql ? operator [SPR-16511]","**[RJ](https://jira.spring.io/secure/ViewProfile.jspa?name=ewing.rj)** opened **[SPR-16511](https://jira.spring.io/browse/SPR-16511?redirect=false)** and commented  When running the following valid postgresql:  ```sql select '{""a"":1, ""b"":2}'::jsonb ? ':1'; ```  I get the error ``` Not allowed to mix named and traditional ? placeholders.  ```  related to #19945 and #18159 ```  ---  **Affects:** 4.3.14  **Issue Links:** - #18159 Spring JDBC not correctly processing Postgresql ?-contained operator - #19945 Spring JDBC not correctly processing Postgresql ?| and ?& operator - #21055 NamedParameterJdbcTemplate doesn't support postgresql dollar quoting $$","closed","type: enhancement,","spring-projects-issues","2018-02-17T20:39:39Z","2019-01-14T04:32:10Z"
"","20851","Access-Control-Allow-Origin header returns wrong value using SockJS  [SPR-16304]","**[Richard Janík](https://jira.spring.io/secure/ViewProfile.jspa?name=richardj)** opened **[SPR-16304](https://jira.spring.io/browse/SPR-16304?redirect=false)** and commented  Example of websocket configuration using SockJS  ```java @Configuration @EnableWebSocketMessageBroker public class WebSocketAppConfig extends AbstractWebSocketMessageBrokerConfigurer { 	 	 	@Override 	public void registerStompEndpoints(StompEndpointRegistry registry) { 		registry.addEndpoint(""/ws"").setAllowedOrigins(""https://example.com"").withSockJS(); 	}  	@Override 	public void configureMessageBroker(MessageBrokerRegistry config) { 		config.enableSimpleBroker(""/topic"").setHeartbeatValue(new long[] {10000,10000}).setTaskScheduler(new DefaultManagedTaskScheduler()); 		config.setApplicationDestinationPrefixes(""/app""); 	} 	 } ```  When we set allowed origin to https://example.com and we make call to server let's say /ws/info/ with header (I will exclude others just to show example)  ```java Origin: https://another.example.com ```  the server returns correctly Http status response 403 - forbidden. But it returns also  ```java Access-Control-Allow-Origin: https://another.example.com access-control-allow-credentials: true ```  The issue is that incorrect origin was sent and it returns as allowed.  I've found that  ```java AbstractSockJsService.getCorsConfiguration ```  returns wildcard every time. The check is done in OriginHandshakeInterceptor.java but the headers are created in DefaultCorsProcessor.java - at line 121 -  ```java String allowOrigin = checkOrigin(config, requestOrigin); ```  - which accepts configuration from AbstractSockJsService.getCorsConfiguration.  (I assume this is occurring also on newer versions because I didn't find any problems regarding this topic)   ---  **Affects:** 4.3.9  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: bug,","spring-projects-issues","2017-12-15T14:31:51Z","2018-01-23T09:33:23Z"
"","20725","NumberFormatException caused by property paths from JSR-303 based validation with no index into a collection [SPR-16177]","**[Ricardo Malikoski](https://jira.spring.io/secure/ViewProfile.jspa?name=malikoski)** opened **[SPR-16177](https://jira.spring.io/browse/SPR-16177?redirect=false)** and commented  When a I have a custom validator to child collection that can't be indexed, (example attached with Set.class), fails. The problem is the same with #13276.  ---  **Affects:** 4.3.12, 5.0.1  **Reference URL:** #13276  **Attachments:** - [spring-validator-test.zip](https://jira.spring.io/secure/attachment/25210/spring-validator-test.zip) (_11.95 kB_)  **Issue Links:** - #13970 SpringValidatorAdapter is incorrectly resolving rejected value for bean based field level constraints - #14876 GenericConversionService.convert() throws IllegalArgumentException after updating to Spring 3.2.1 - #13276 NumberFormatException caused by property paths from JSR-303 based validation with no index into a collection - #19648 Spring validation crashes with Hibernate Validation 5 style list constraint violations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9779b8b2ab33ea6a10e9fabdbe1eb7966b0bf6fd, https://github.com/spring-projects/spring-framework/commit/3091feee231bf4f5b129e88ba371dd40f8d9a474  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: bug,","spring-projects-issues","2017-11-09T11:26:15Z","2019-01-14T04:33:19Z"
"","20421","Jackson2JsonEncoder and Jackson2JsonDecoder should use provided mime types [SPR-15866]","**[Ricardo Lindooren](https://jira.spring.io/secure/ViewProfile.jspa?name=rlindooren)** opened **[SPR-15866](https://jira.spring.io/browse/SPR-15866?redirect=false)** and commented  I'm using `Webclient` to consume a webservice that uses a legacy mime type for JSON: `text/javascript`.  This works when using the Webclient builder.  ```java @Autowired public ItunesAlbumServiceImpl(ObjectMapper mapper) {     ExchangeStrategies strategies = ExchangeStrategies.builder().codecs(clientCodecConfigurer ->         clientCodecConfigurer.customCodecs().decoder(                 new Jackson2JsonDecoder(mapper,                         new MimeType(""text"", ""javascript"", StandardCharsets.UTF_8)))     ).build();      webClient = WebClient.builder()             .exchangeStrategies(strategies)             .baseUrl(""https://itunes.apple.com"")             .build(); } ```  But when trying to configure this on application level it doesn't work.  ```java @SpringBootApplication public class SpringReactiveApplication {      public static void main(String[] args) {         SpringApplication.run(SpringReactiveApplication.class, args);     }      @Bean     public CodecCustomizer jacksonLegacyJsonCustomizer(ObjectMapper mapper) {         return (configurer) -> {             MimeType textJavascript = new MimeType(""text"", ""javascript"", StandardCharsets.UTF_8);             CodecConfigurer.CustomCodecs customCodecs = configurer.customCodecs();             customCodecs.decoder(                     new Jackson2JsonDecoder(mapper, textJavascript));             customCodecs.encoder(                     new Jackson2JsonEncoder(mapper, textJavascript));         };     } } ```  While stepping through the code I noticed that the `Jackson2JsonDecoder.getDecodableMimeTypes()` and `Jackson2JsonEncoder.getEncodableMimeTypes()` methods always return the default JSON mime types, not the one(s) provided as constructor argument.  ```java public class Jackson2JsonDecoder extends AbstractJackson2Decoder {      public Jackson2JsonDecoder() {         super(Jackson2ObjectMapperBuilder.json().build());     }      public Jackson2JsonDecoder(ObjectMapper mapper, MimeType... mimeTypes) {         super(mapper, mimeTypes);     }      @Override     public List getDecodableMimeTypes() {         return JSON_MIME_TYPES;     } } ```  Causing `Jackson2CodecSupport.supportsMimeType` to return `false` for the provided mime types.  Looks related to #20034  I created this PR with a proposed change: [1499](https://github.com/spring-projects/spring-framework/pull/1499)  ---  **Affects:** 5.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb327b90a64d12d24daf2f0c3258d1dc94a02de2","closed","type: bug,","spring-projects-issues","2017-08-16T10:28:23Z","2019-01-11T18:08:07Z"
"","20828","Unnecessary file system access in SimpleMetadataReaderFactory.getMetadataReader [SPR-16281]","**[Rex Hoffman](https://jira.spring.io/secure/ViewProfile.jspa?name=rexhoffman)** opened **[SPR-16281](https://jira.spring.io/browse/SPR-16281?redirect=false)** and commented  Instead of eagerly checking the file exists with  ""if (!resource.exists())"" perhaps move the logic into the metadata reader only attempt the rewrite if the access has failed with the passed in name?  We can provide a patch if needed.  ---  **Affects:** 4.3.6, 4.3.14  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/type/classreading/SimpleMetadataReaderFactory.java#L80-L90  **Issue Links:** - #20881 PropertySourcesPlaceholderConfigurer can not ignore resource if not found  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ad69bfc20ae6a4c02b5bdf06952f045ddd4f9ce, https://github.com/spring-projects/spring-framework/commit/3368dcae2299e165d8c986698d61ee09b63f2d36  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","in: core,","spring-projects-issues","2017-12-07T19:24:59Z","2019-01-11T15:13:48Z"
"","20719","MediaType, add application/schema+json [SPR-16171]","**[Renato Soppelsa](https://jira.spring.io/secure/ViewProfile.jspa?name=simplicii)** opened **[SPR-16171](https://jira.spring.io/browse/SPR-16171?redirect=false)** and commented  Adding application/schema+json to be able to retrieve a Json schema in REST Service. as well as application/schema+json;charset=UTF-8  For completion ""application/problem+json;charset=UTF-8"" was added as only the non utf-8 version was abailable.  Quote from ietf.org:  ``` Abstract  JSON Schema defines the media type ""application/schema+json"", a JSON- based format for describing the structure of JSON data. JSON Schema asserts what a JSON document must look like, ways to extract information from it, and how to interact with it, ideal for annotating existing JSON APIs that would not otherwise have hypermedia controls or be machine-readable. ```    ---  **Affects:** 5.0.1  **Reference URL:** https://datatracker.ietf.org/doc/draft-wright-json-schema/  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2017-11-07T19:45:10Z","2019-01-11T13:26:32Z"
"","20906","Support compile-time weaving and dependency injection [SPR-16359]","**[Remo](https://jira.spring.io/secure/ViewProfile.jspa?name=remmeier)** opened **[SPR-16359](https://jira.spring.io/browse/SPR-16359?redirect=false)** and commented  Spring incurs high computational costs during startup to wire beans together and perform AOP. With newer technologies like docker or serverless/faas architectures there is a trend to move more and more work into the compile-step where possible. On the one side it allows to catch issues early. On the other side it allows to perform more optimizations like  - tree-shaking (with something like proguard) to remove unnecessary parts - AoT compilation with Java 9+ - Jlink with Java9+ - and in general do the wiring only once at compile-time instead of each time at runtime. - exclude AutoConfigurations not necessary for a particular application  having such a thing in place would drastically improve startup performance, but can also would make the application more lightweight, saving space and memory.  Other projects in the area is, for example, https://github.com/google/dagger.  Doing something in this area seems in particular important for serverless/faas architectures (https://github.com/spring-cloud/spring-cloud-function/issues/132). Without a small footprint and in particular very fast cold start performance, Spring will not be applicable in such areas.   ---  **Affects:** 5.0.2  3 votes, 6 watchers","open","in: core,","spring-projects-issues","2018-01-09T07:38:11Z","2021-11-10T09:51:26Z"
"","21052","AbstractRoutingDataSource to try to load/create a new DataSource if determineTargetDataSource can not find a DataSource for the current lookup key. [SPR-16509]","**[Razvan Popian](https://jira.spring.io/secure/ViewProfile.jspa?name=razvan77@gmail.com)** opened **[SPR-16509](https://jira.spring.io/browse/SPR-16509?redirect=false)** and commented  org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource#determineTargetDataSource will throw an exception if it can not return a DataSource for the current lookup key. This class could be modified or extended so that if there is no DataSource for the current key, one could be loaded/created. This would be useful in scenarios where new data sources are created while the program using the routing data source is running. The program would not need to be restarted if the routing data source would lazily pick up newly created data sources. I needed this feature on a project so I created a subclass of the AbstractRoutingDataSource, I attached it to the ticket, in case it is useful to somebody. The implementation is a bit messy because it uses reflection to access certain private things in the super class.   ---  **Affects:** 4.3.10  **Attachments:** - [AbstractNewDsAwareRoutingDataSource.java](https://jira.spring.io/secure/attachment/25401/AbstractNewDsAwareRoutingDataSource.java) (_9.11 kB_) - [LazyAbstractRoutingDataSource.java](https://jira.spring.io/secure/attachment/25760/LazyAbstractRoutingDataSource.java) (_2.08 kB_)  1 votes, 3 watchers","open","in: core,","spring-projects-issues","2018-02-16T14:57:27Z","2019-01-11T14:37:22Z"
"","20919","The FieldError class does not provide access to the exception that triggered the binding error. [SPR-16372]","**[Razvan Popian](https://jira.spring.io/secure/ViewProfile.jspa?name=razvan77@gmail.com)** opened **[SPR-16372](https://jira.spring.io/browse/SPR-16372?redirect=false)** and commented  It would be nice if the org.springframework.validation.FieldError class would provide access to the actual exception that triggered the binding error. That exception might be thrown in a Converter or Formatter and it could be helpful for somebody who is trying to get more details about why a certain field failed to bind. Currently the org.springframework.validation.FieldError class does store the exception message, but it would be better if it would store the actual exception (See the org.springframework.validation.DefaultBindingErrorProcessor#processPropertyAccessException method). There are definetely workarrounds to achieve this by extending FieldError and by injecting a custom BindingErrorProcessor in the DataBinder, but I think it would be nice if the framework would do this out of the box.  ---  **Affects:** 4.3.6  **Issue Links:** - #20994 Cannot create BindStatus for valid field on immutable form object in case of bind errors  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1654","closed","type: enhancement,","spring-projects-issues","2018-01-12T16:22:51Z","2019-01-11T15:16:35Z"
"","20863","Large transaction timeout value (Integer.MAX_VALUE for example) results in transaction expiring immediately after starting. [SPR-16316]","**[Razvan Popian](https://jira.spring.io/secure/ViewProfile.jspa?name=razvan77@gmail.com)** opened **[SPR-16316](https://jira.spring.io/browse/SPR-16316?redirect=false)** and commented  Setting a large transaction timeout value like Integer.MAX_VALUE in the `@Transactional` annotation causes the transaction to timeout immediately. The problem appears to be in the setTimeoutInSeconds method in the org.springframework.transaction.support.ResourceHolderSupport class. The timeout in seconds is multiplied by 1000. Two ints multiplied in java result in an int so for example Integer.MAX_VALUE * 1000 equals -1000. This is why the transaction times out immediately as described..   ---  **Affects:** 3.2.18, 4.3.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1633, and commits https://github.com/spring-projects/spring-framework/commit/e5025419c2fc167a650e284928ccf7ff296ccba0, https://github.com/spring-projects/spring-framework/commit/b9e03cb06b617fc052b8a80eeee89324e2ba0cd7  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: bug,","spring-projects-issues","2017-12-20T15:43:39Z","2018-01-23T09:33:23Z"
"","21069","StringIndexOutOfBoundsException when rewriting links in CSS resources [SPR-16526]","**[Ravish Bhagdev](https://jira.spring.io/secure/ViewProfile.jspa?name=ravish)** opened **[SPR-16526](https://jira.spring.io/browse/SPR-16526?redirect=false)** and commented  Scenario, - CSS with relative paths to PNG files within. - Happens regardless of versioning strategy used (Fixed and Content) - Fails for the web service with relatively longer context path when trying to parse URL for PNG with the CSS :  ``` 2018-02-22T11:27:31.721017610Z java.lang.StringIndexOutOfBoundsException: String index out of range: -2 2018-02-22T11:27:31.721022567Z  at java.lang.String.substring(String.java:1967) ~[na:1.8.0_161] 2018-02-22T11:27:31.721027608Z  at org.springframework.web.servlet.resource.ResourceUrlProvider.getForRequestUrl(ResourceUrlProvider.java:187) ~[spring-webmvc-4.3.13.RELEASE.jar!/:4.3.13.RELEASE] 2018-02-22T11:27:31.721032196Z  at org.springframework.web.servlet.resource.ResourceTransformerSupport.resolveUrlPath(ResourceTransformerSupport.java:80) ~[spring-webmvc-4.3.13.RELEASE.jar!/:4.3.13.RELEASE] 2018-02-22T11:27:31.721037033Z  at org.springframework.web.servlet.resource.CssLinkResourceTransformer.transform(CssLinkResourceTransformer.java:105) ~[spring-webmvc-4.3.13.RELEASE.jar!/:4.3.13.RELEASE] 2018-02-22T11:27:31.721041105Z  at org.springframework.web.servlet.resource.DefaultResourceTransformerChain.transform(DefaultResourceTransformerChain.java:67) ~[spring-webmvc-4.3.13.RELEASE.jar!/:4.3.13.RELEASE] 2018-02-22T11:27:31.721045190Z  at org.springframework.web.servlet.resource.CachingResourceTransformer.transform(CachingResourceTransformer.java:76) ~[spring-webmvc-4.3.13.RELEASE.jar!/:4.3.13.RELEASE] 2018-02-22T11:27:31.721049282Z  at org.springframework.web.servlet.resource.DefaultResourceTransformerChain.transform(DefaultResourceTransformerChain.java:67) ~[spring-webmvc-4.3.13.RELEASE.jar!/:4.3.13.RELEASE] 2018-02-22T11:27:31.721053655Z  at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.getResource(ResourceHttpRequestHandler.java:538) ~[spring-webmvc-4.3.13.RELEASE.jar!/:4.3.13.RELEASE] 2018-02-22T11:27:31.721058140Z  at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:433) ~[spring-webmvc-4.3.13.RELEASE.jar!/:4.3.13.RELEASE] 2018-02-22T11:27:31.721063672Z  at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) ~[spring-webmvc-4.3.13.RELEASE.jar!/:4.3.13.RELEASE] 2018-02-22T11:27:31.721068193Z  at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.13.RELEASE.jar!/:4.3.13.RELEASE] ```  It seems like the relative paths to PNG files within my CSS are processed incorrectly. Prefix and suffix generated in ResourceUrlProvider.java on line number 183 and 184 and then incorrect: int prefixIndex = getLookupPathIndex(request); int suffixIndex = getEndPathIndex(requestUrl);  Suffix index is often > prefix index. Causing above exception.  Here is my configuration:  VersionResourceResolver versionResourceResolver = new VersionResourceResolver() .addVersionStrategy(new ContentVersionStrategy(), ""/**"");      registry.addResourceHandler(""/js/**"", ""/css/**"", ""/images/**"", ""/favicon.ico"")             .addResourceLocations(                     ""classpath:static/js/"", ""static/js/"",                     ""classpath:static/css/"", ""static/css/"",                     ""classpath:static/images/"", ""static/images/""             )             .setCachePeriod(CACHE_PERIOD)             .resourceChain(true)             .addResolver(versionResourceResolver);  ```  Works fine if I remove versionResourceResolver from above resource handler registry.  There was a similar issue fixed earlier with ResourceUrlEncodingFilter : #18420  I wonder if this is similar to that but in ResourceUrlProvider?    I've now created a sample project and reproduced the exception reported. There is a Readme on this project with steps for testing: https://github.com/RavBhagdev/sample  Will appreciate any help or advice with this.  ```  ---  **Affects:** 4.3.13  **Reference URL:** #18420  **Issue Links:** - #18420 Regression: ResourceUrlEncodingFilter can throw StringIndexOutOfBoundsException with relative URL  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/56fdda167e094acf73763128b5b40ab1a35d5b2d, https://github.com/spring-projects/spring-framework/commit/6d26e61ac7d7f86012a276c152910f918af8781e  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-02-22T16:16:29Z","2019-01-14T04:32:06Z"
"","20690","Field name is used to match on bean name when @Autowired matches several beans by type [SPR-16142]","**[Rasmus Lund](https://jira.spring.io/secure/ViewProfile.jspa?name=rasmus.lund)** opened **[SPR-16142](https://jira.spring.io/browse/SPR-16142?redirect=false)** and commented  As shown by the referenced example project, field name is used to match on bean name when `@Autowired` matches several beans by type. We can't find this behavior documented anywhere. Is it by accident or by purpose? If by purpose, it should be mentioned in the reference documentation when `@Autowired` is described.  Note: The example project referenced by the URL shows a minimal setup that illustrates the unexpected behavior. It also has a more verbose explanation in its README.md.  ---  **Reference URL:** https://github.com/mkjensen/spring-question  **Issue Links:** - #20722 Autowiring by name (interface vs class)  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","in: core,","spring-projects-issues","2017-11-01T08:08:32Z","2019-01-14T04:33:32Z"
"","21053","StandaloneMockMvcBuilder does not seem to register controller [SPR-16510]","**[Raoul de Haard](https://jira.spring.io/secure/ViewProfile.jspa?name=r.de.haard@everest.nl)** opened **[SPR-16510](https://jira.spring.io/browse/SPR-16510?redirect=false)** and commented  In our testcase (see attachment) we use the StandaloneMockMvcBuilder to test our controller. Since we use Spring-boot 2.0.0.RC1 our test is broken because the controller in our test does not seem to get registered. Our post to the controller get's an 404 instead of an 200(see ControllerMockMvcTest.java in attachment). The test is successful when you change the Spring-boot version to 1.5.10.RELEASE.  When we look at the log of our real-life testcase we see that no Request mapping get's registered(Spring-boot2).  ``` 2018-02-16 16:08:00.396 DEBUG s.w.s.m.m.a.RequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Looking for request mappings in application context: org.springframework.test.web.servlet.setup.StubWebApplicationContext@58326051 2018-02-16 16:08:00.802 INFO  s.w.s.m.m.a.RequestMappingHandlerAdapter runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Looking for @ControllerAdvice: org.springframework.test.web.servlet.setup.StubWebApplicationContext@58326051 ```  With Spring-boot 1.5.10.RELEASE the log looks like this:  ``` 2018-02-16 16:11:26.723 DEBUG ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Looking for request mappings in application context: org.springframework.test.web.servlet.setup.StubWebApplicationContext@2d2ffcb7 2018-02-16 16:11:26.782 DEBUG ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - 9 request handler methods found on class com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController: {public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.get(java.lang.String)={[/get/{sessionId}],methods=[GET]}, public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.put(java.lang.String)={[/put/{sessionId}],methods=[PUT]}, public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.delete(java.lang.String)={[/delete/{sessionId}],methods=[DELETE]}, public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.patch(java.lang.String)={[/patch/{sessionId}],methods=[PATCH]}, public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.noValidation(java.lang.String)={[/no-validation/{sessionId}],methods=[POST]}, public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.post(java.lang.String)={[/post/{sessionId}],methods=[POST]}, public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.noRenewal(java.lang.String)={[/no-renewal/{sessionId}],methods=[POST]}, public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.other()={[/other],methods=[POST]}, public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.ignored(java.lang.String)={[/ignored/{sessionId}],methods=[POST]}} 2018-02-16 16:11:26.787 INFO  ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Mapped ""{[/get/{sessionId}],methods=[GET]}"" onto public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.get(java.lang.String) 2018-02-16 16:11:26.789 INFO  ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Mapped ""{[/put/{sessionId}],methods=[PUT]}"" onto public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.put(java.lang.String) 2018-02-16 16:11:26.789 INFO  ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Mapped ""{[/delete/{sessionId}],methods=[DELETE]}"" onto public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.delete(java.lang.String) 2018-02-16 16:11:26.790 INFO  ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Mapped ""{[/patch/{sessionId}],methods=[PATCH]}"" onto public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.patch(java.lang.String) 2018-02-16 16:11:26.790 INFO  ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Mapped ""{[/no-validation/{sessionId}],methods=[POST]}"" onto public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.noValidation(java.lang.String) 2018-02-16 16:11:26.790 INFO  ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Mapped ""{[/post/{sessionId}],methods=[POST]}"" onto public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.post(java.lang.String) 2018-02-16 16:11:26.790 INFO  ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Mapped ""{[/no-renewal/{sessionId}],methods=[POST]}"" onto public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.noRenewal(java.lang.String) 2018-02-16 16:11:26.791 INFO  ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Mapped ""{[/other],methods=[POST]}"" onto public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.other() 2018-02-16 16:11:26.791 INFO  ilder$StaticRequestMappingHandlerMapping runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Mapped ""{[/ignored/{sessionId}],methods=[POST]}"" onto public void com.aquima.web.webinterceptor.RequestWardInterceptorTest$TestController.ignored(java.lang.String) 2018-02-16 16:11:27.200 INFO  s.w.s.m.m.a.RequestMappingHandlerAdapter runtimeSessionId="""" userId="""" projectName="""" projectVersion="""" currentPageName="""" - Looking for @ControllerAdvice: org.springframework.test.web.servlet.setup.StubWebApplicationContext@2d2ffcb7 ```  Our idea was that is a bug in Spring-framework(web/test) since the StandaloneMockMvcBuilder isn't behaving as expected. If you think this is a Spring-boot issue we are happy to report it there.   ---  **Affects:** 5.0.3  **Attachments:** - [MockMVCIssue.zip](https://jira.spring.io/secure/attachment/25402/MockMVCIssue.zip) (_48.85 kB_)","closed","status: declined,","spring-projects-issues","2018-02-16T15:56:29Z","2019-01-12T16:21:46Z"
"","20712","Printing of session with null attributes results in NullPointerException [SPR-16164]","**[Randy Cramp](https://jira.spring.io/secure/ViewProfile.jspa?name=randy.cramp@gmail.com)** opened **[SPR-16164](https://jira.spring.io/browse/SPR-16164?redirect=false)** and commented  After migrating from Spring 4.3.12, we're now seeing NullPointerExceptions as a result of the code for #19755. During debugging, we see that the attributes field on the session is null. As a result, the Collections.list(session.getAttributeNames)) throws the NPE.  Partial stacktrace:  java.lang.NullPointerException at java.util.Collections.list(Collections.java:5239) at org.springframework.test.web.servlet.result.PrintingResultHandler.getSessionAttributes(PrintingResultHandler.java:152) at org.springframework.test.web.servlet.result.PrintingResultHandler.printRequest(PrintingResultHandler.java:120) at org.springframework.test.web.servlet.result.PrintingResultHandler.handle(PrintingResultHandler.java:87) at org.springframework.test.web.servlet.MockMvc$1.andDo(MockMvc.java:184)  Code snippet:  MockHttpSession session = Mockito.mock(MockHttpSession.class);  MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post(""/dummy-url"") .contentType(MediaType.APPLICATION_JSON_UTF8) .header(HEADER_ENDPOINT, endpointUrl) .content(someContent); requestBuilder.session(session);  MockMvc mockMvc = MockMvcBuilders.standaloneSetup(endpointController).build(); mockMvc.perform(requestBuilder) .andDo(print()) .andExpect(status().isOk());  ---  **Affects:** 5.0.1  **Reference URL:** #19755  **Issue Links:** - #19755 Print session attributes in PrintingResultHandler in Spring MVC Test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ec60f08ad8f6b9c6da68c09bdccfcc4cdc92eae","closed","type: bug,","spring-projects-issues","2017-11-06T18:08:32Z","2019-01-14T04:33:24Z"
"","20927","Support for serving Brotli encoded, static resources [SPR-16381]","**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-16381](https://jira.spring.io/browse/SPR-16381?redirect=false)** and commented  With the release of Safari 11 in September 2017 all major browsers support the Brotli content encoding.  Spring supports the gzip encoding with the org.springframework.web.servlet.resource.GzipResourceResolver but currently there is no equivalent for Brotli.  Would be nice if Spring could also bring support for Brotli. Similar to the GzipResourceResolver class but instead of gzip it needs to check for  ```java br ```  in the Accept-Encoding header and look for files with the suffix  ```java  .br  ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/56ab0da2872de71fddf55ef035aedd5b04b99960","closed","type: enhancement,","spring-projects-issues","2018-01-15T04:05:26Z","2020-03-18T08:02:14Z"
"","20873","More detailed information about failing bean on ImplicitlyAppearedSingletonException [SPR-16326]","**[Rahul Shinde](https://jira.spring.io/secure/ViewProfile.jspa?name=rsjira22)** opened **[SPR-16326](https://jira.spring.io/browse/SPR-16326?redirect=false)** and commented  At times, my application fails to boot up and the exception in the logs just shows the IllegalStateException /ImplicitlyAppearedSingletonException. With the current code, there is no additional data on which bean triggered this exception.  With the changes in the PR, the offending bean can be identified easily.   ---  **Affects:** 5.0.2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1635","open","in: core,","spring-projects-issues","2017-12-27T02:14:58Z","2019-01-11T15:22:47Z"
"","20995","CachingConnectionFactory - Invalid session in session cache [SPR-16450]","**[Radek Kraus](https://jira.spring.io/secure/ViewProfile.jspa?name=rkraus)** opened **[SPR-16450](https://jira.spring.io/browse/SPR-16450?redirect=false)** and commented  I have a suspicion there is a small possibility, that invalid session (session, which belongs to the ""old"" connection) is returned into session cache (`cachedSessions` map). Let suppose following scenario.  Two threads - T1 and T2. T1 asks for connection and session and then close the acquired session (session is put into the session cache).  ``` CachingConnectionFactory ccf = ... Connection con1 = ccf.createConnection(); Session session1 = con1.createSession(false, Session.AUTO_ACKNOWLEDGE); session1.close(); ```  Now, the thread T2 invokes `onException()` method, because current connection is invalid (disconnection from JMS Provider or whatever ...).  ``` ccf.onException(...) ```  The `onException` method caused that `CachingConnectionFactory.resetConnection()` is invoked (clear the session cache, `active` boolean flag settings). At the moment the  thread T1 comes back and asks next JMS session (`createSession(false, Session.AUTO_ACKNOWLEDGE)`), exactly in a moment, when thread T2 already cleared the session cache and set `active` boolean flag back on `true` value (see my comment bellow). It causes that new session list is registered into cache session map (`sessionList` and it is passed into `CachedSessionInvocationHandler` - `getSession()` method).  ``` @Override public void resetConnection() {     this.active = false;     synchronized (this.cachedSessions) {         for (LinkedList sessionList : this.cachedSessions.values()) { 	    synchronized (sessionList) { 	        for (Session session : sessionList) { 		    try { 		        session.close();                     }                     catch (Throwable ex) {                         logger.trace(""Could not close cached JMS Session"", ex);                     }                 }             }         } 	this.cachedSessions.clear();     }     this.active = true;     // !!!     // In this time thread T1 asks for next session => new sessionList is registered into cachedSessions     // !!!       // Now proceed with actual closing of the shared Connection...     super.resetConnection(); } ```  I know that invocation of `createSession(...)` method (done by T1) probably fails, because connection is already invalid, but we suppose that new session is successfully created. After T1 receives new session, the `resetConnection()` method is finished by invocation of `super.resetConnection()`. Now we suppose that thread T1 (or some another thread) invokes `createConnection()` method, which caused that new connection is established.  Now, the session, which was acquired by T1 in a moment when `resetConnection()` method was running, is closed => `CachedSessionInvocationHandler.logicalClose()` is invoked. Again, I know that there is a big probability, that this operation fails (message consumer close or session rolback throws JMSException, which is handled now - #16762). But when the ""close"" actions finish successfully, **the session, which belong to ""old"" connection is returned back into session cache**.  I attached ""demonstration"" test, which shows this behavior. Unfortunately I am unable to write this test, without modification of `CachingConnectionFactory`, because I need to simulate ""some delay"" in `resetConnection()` method, so as first I modified `CachingConnectionFactory` - new method clearSessionCache() was created (but this modification doesn't change the behavior).  Content of ""demonstration"" zip package: * CachingConnectionFactory.java (modified `CachingConnectionFactory`, which is a start point for problem simulation) * CachingConnectionFactoryTest.java (demonstration test itself) * CachingConnectionFactory.java.diff (fix proposal)  I know that there is very small chance to reach this scenario (small time range, all close operations must be success ...), but anyway, I still feel ""synchrozation"" problem here. In addition my fix proposal is too ""invasive"" (signature of protected methods was changed ...). Maybe there is a better way how to fix this problem: * clear session cache (again) in `doCreateConnection()` method * move ""clear"" session cache operation into `closeConnection()` method, which is guarded by `connectionMonitor` lock (but it is not probably wanted  - delay in create new connection till old connection is invalidated) * ...  The main motivation for creating this issue was, that we have strange problems in old Spring (3.0.x), which can be caused by this problem. Maybe/probably the situation should be better from a moment when #16762 was done. But I think, that ""synchronization"" problem still exists.  ---  **Affects:** 4.3.13  **Attachments:** - [CachingConnectionFactory.java](https://jira.spring.io/secure/attachment/25378/CachingConnectionFactory.java) (_20.78 kB_) - [demonstration-test.zip](https://jira.spring.io/secure/attachment/25366/demonstration-test.zip) (_9.48 kB_)  **Issue Links:** - #16762 CachingConnectionFactory should catch exceptions on logical close - #20900 JMS Producers are cached even when the destination is a temporary queue causing a memory leak  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b6ecfcf9ecf263e9226493e26abbe632f3b838f6, https://github.com/spring-projects/spring-framework/commit/d8a26725050df3254e3ecc75832641714b414390  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-02-01T09:04:26Z","2019-01-14T04:32:26Z"
"","20717","UriTemplate.matches boolean has greedy behavior at the end of a pattern [SPR-16169]","**[R. Michael Rogers](https://jira.spring.io/secure/ViewProfile.jspa?name=rmrogers)** opened **[SPR-16169](https://jira.spring.io/browse/SPR-16169?redirect=false)** and commented  The following test fails:  ``` @Test public void uriTemplatesShouldHaveSaneMatching() {     UriTemplate template = new UriTemplate(""/account/{accountId}"");     assertThat(template.matches(""/account/15/alias/5""), is(equalTo(false))); } ```  My expectation is that `UriTemplate.matches` should have the same behavior as the `@RequestMapping` annotation and I haven't been able to find any documentation that contradicts (nor reinforces) that understanding.   ---  **Affects:** 4.3.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c60313de3f0797f987bc7a392d75aebd17020158","closed","type: enhancement,","spring-projects-issues","2017-11-07T15:24:29Z","2018-01-23T10:05:11Z"
"","21010","Profile activation: not operator does not work consistently [SPR-16465]","**[Pushkar Prakash](https://jira.spring.io/secure/ViewProfile.jspa?name=prakash.p)** opened **[SPR-16465](https://jira.spring.io/browse/SPR-16465?redirect=false)** and commented  https://github.com/spring-projects/spring-framework/commit/bcd44f3798ed06c0704d2a3564b8a9735e747e87 As mentioned in the above commit, the following works  ```  ```  But, this does not work  ```  ```  Even this does not work.  ```  ```  ---  **Affects:** 3.2.18, 4.3.14, 5.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/bcd44f3798ed06c0704d2a3564b8a9735e747e87  **Issue Links:** - #17063 Support AND operator in `@Profile` annotation - #13370 Support not (!) operator for profile selection  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/285b01fc795a8c90561900eb655b5fc9067ea172, https://github.com/spring-projects/spring-framework/commit/14440949b3b069a2831f7bbfe62ed1cb90561b7a","closed","in: core,","spring-projects-issues","2018-02-03T21:46:02Z","2019-01-13T04:52:51Z"
"","20508","Migration from 3.2 to 4.3 gives Error Attempting to execute an operation on a closed EntityManager. [SPR-15956]","**[Prashant Saraf](https://jira.spring.io/secure/ViewProfile.jspa?name=prashant.saraf)** opened **[SPR-15956](https://jira.spring.io/browse/SPR-15956?redirect=false)** and commented  we are migrating from our application from Spring 3.2 to 4 and we are getting below error Attempting to execute an operation on a closed EntityManager. application is CXF webservices and below is beans.xml  \                                                        	                                                                              	     	     	        \ I am not sure what is missing here, if I change my spring version to 3.2.18.RELEASE everything works fine.   ---  **Affects:** 4.3.7","closed","in: core,","spring-projects-issues","2017-09-12T21:23:49Z","2019-01-12T05:20:18Z"
"","21120","JdbcTemplate.queryForMap should return first value of equally named columns [SPR-16578]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-16578](https://jira.spring.io/browse/SPR-16578?redirect=false)** and commented  When a ResultSet contains multiple columns which are equal when ignoring the case the Map returned by `JdbcTemplate#queryForMap` contains the value of the last column with the equal name. As an example think of the following query:  ``` SELECT 1 as ""X"", 2 as ""x"" from dual ```  However the specification of [ResultSet](https://docs.oracle.com/javase/9/docs/api/java/sql/ResultSet.html) states that  > Column names used as input to getter methods are case insensitive. When a getter method is called with a column name and several columns have the same name, the value of the first matching column will be returned.  ---  **Affects:** 5.0.4  **Issue Links:** - #21465 LinkedCaseInsensitiveMap should explicitly implement putIfAbsent and computeIfAbsent  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1739, and commits https://github.com/spring-projects/spring-framework/commit/7bce7504c7be31bce558e1da0f5534e6ebd9d7bc","closed","type: enhancement,","spring-projects-issues","2018-03-10T12:40:35Z","2019-01-11T14:31:23Z"
"","20924","Use ArrayList instead of LinkedList for known size [SPR-16378]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-16378](https://jira.spring.io/browse/SPR-16378?redirect=false)** and commented  Spring JDBC unlike other modules uses LinkedList instead of ArrayList in several places. There is a large body of evidence suggesting that on contemporary hardware ArrayList is both faster and has less overhead than even in degenerate cases of empty lists [3] or unknown size.  There are two places in Spring JDBC where the size of the list is known in advance and an ArrayList of the correct final size can be created  [1] https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8011200 [2] http://cliffc.org/blog/2017/11/05/modern-hardware-performance-cache-lines/ [3] https://bugs.openjdk.java.net/browse/JDK-8011200   ---  **Affects:** 4.3.13, 5.0.2  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1643, and commits https://github.com/spring-projects/spring-framework/commit/64af3a0f6498a2b229e1efdc96bc5c0e10e79fe8, https://github.com/spring-projects/spring-framework/commit/91e39d558f1a95bd1a49f29e9636135085bc628f  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-01-14T13:16:35Z","2018-01-23T09:33:23Z"
"","20908","SqlParameterSource needs method for extracting parameter names [SPR-16361]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-16361](https://jira.spring.io/browse/SPR-16361?redirect=false)** and commented  `NamedParameterJdbcOperations` supports passing in custom implementations of `SqlParameterSource`. Unfortunately doing so silently breaks. The issue is that `SqlParameterSource` offers no way of accessing the names of the parameters so `SqlParameterSourceUtils#extractCaseInsensitiveParameterNames` has to cast to the implementation classes `BeanPropertySqlParameterSource` and `MapSqlParameterSource`. For any other implementation class an empty map is returned.  ---  **Affects:** 5.0.2  **Issue Links:** - #20887 NamedParameterJdbcTemplate fails on PostgreSQL array - #20763 SqlParameterSourceUtils.createBatch with Collection support - #20759 Expose parameter names from ParsedSql","closed","type: enhancement,","spring-projects-issues","2018-01-09T12:13:20Z","2019-01-11T15:17:34Z"
"","20829","Cover all removed classes in the migration document [SPR-16282]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-16282](https://jira.spring.io/browse/SPR-16282?redirect=false)** and commented  Several classes removed in version 5 are not deprecated in version 4. This makes upgrading unnecessarily hard.  Among those are `NativeJdbcExtractor` and the `org.springframework.beans.factory.access`, `org.springframework.context.access` and `org.springframework.ejb.interceptor` packages.  Unfortunately none of those are mentioned in [Upgrading to Version 5.0](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x)   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1620","closed","in: core,","spring-projects-issues","2017-12-09T16:54:01Z","2019-01-11T15:13:52Z"
"","20497","@TransactionalEventListener(fallbackExecution = true) runs before commit [SPR-15943]","**[Philip Bayer](https://jira.spring.io/secure/ViewProfile.jspa?name=blackbart)** opened **[SPR-15943](https://jira.spring.io/browse/SPR-15943?redirect=false)** and commented  A method annotated with `@TransactionalEventListener`(fallbackExecution = true) can run before commit when asynchronous event handling is enabled.  I have confirmed this both by observing unexpected behavior in my system, and by carefully reviewing the Trace output of org.springframework.transaction.interceptor.  The output looks something like the following:  Getting transaction for [event-launching method] Getting transaction for [event-handling method] Getting transaction for [method from other class invoked by event-handling method] Closing transaction for [event-launching method]  Note, the behavior is inconsistent.  When I wrap unit test code in while (true) { ... }, assert statements in the loop pass 6 to 10 times before failing.  After adding Thread.sleep(1000) to the listener, the loop never fails and needs to be stopped manually, as all of the asserts pass due to the 1 second delay allow time for the Transaction to commit.  My only guess at this point is that the event is being tied to the wrong Transaction. It is worth noting that four listeners are loaded in separate threads when the event is launched.  The Reference URL points to my stack overflow post on the issue.   ---  **Affects:** 4.3.10  **Reference URL:** https://stackoverflow.com/questions/46094344/transactionaleventlistenerfallbackexecution-true-runs-before-commit","closed","in: core,","spring-projects-issues","2017-09-08T18:12:56Z","2019-01-11T18:10:42Z"
"","21001","Resolvable type cannot resolve generic between different collection types [SPR-16456]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16456](https://jira.spring.io/browse/SPR-16456?redirect=false)** and commented  Unfortunately the fix for #20758 has caused a regression in `ResolvableType` meaning that it can no longer resolve some generics.  Here's a test:  ```java 	@Test 	public void testSpr16456() throws Exception { 		ResolvableType genericType = ResolvableType.forField( 				UnresolvedWithGenerics.class.getDeclaredField(""set"")).asCollection(); 		ResolvableType type = ResolvableType.forClassWithGenerics(ArrayList.class, 				genericType.getGeneric()); 		assertThat(type.resolveGeneric(), equalTo(Integer.class)); 	}  	public abstract class UnresolvedWithGenerics {  		Set set; 	} ```  ---  **Affects:** 5.0.3  **Issue Links:** - #20758 DispatcherHandler invoke wrong method when discriminating request with params - #17298 ResolvableType.getType() should reflect the set up type correctly","closed","in: core,","spring-projects-issues","2018-02-02T06:58:39Z","2019-01-11T15:34:15Z"
"","20981","Lambda error detection might not work on JDK 9 [SPR-16435]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16435](https://jira.spring.io/browse/SPR-16435?redirect=false)** and commented  I recently [extracted](https://github.com/spring-projects/spring-boot/issues/11584) the lambda class error detection logic into a dedicated util in Spring Boot and added a lot of additional tests.  Interestingly, the tests failed on JDK 9 with the following:  ``` ERROR] callbacksInvokeWhenMultipleShouldInvokeSuitable(org.springframework.boot.util.LambdaSafeTests)  Time elapsed: 0 s  <<< ERROR! java.lang.ClassCastException: java.base/java.lang.String cannot be cast to java.base/java.lang.StringBuilder ```  I appears that the format of the `ClassCastException` has changed and it now includes the module name. I've attempted to fix this in Spring Boot by [including the module name](https://github.com/spring-projects/spring-boot/commit/1a2186e6efed5c53d7c50548de7b30b9a6dcd7f7), but since this code [also appears in framework](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java#L176) I thought you might have the same issue.  ---  **Affects:** 4.3.14, 5.0.3  **Issue Links:** - #19412 SimpleApplicationEventMulticaster should not generally suppress ClassCastException - #19711 SimpleApplicationEventMulticaster should not rely on ClassCastException having a message - #21630 Classification of ClassCastExceptions doesn't work in JDK 11 (OpenJDK)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b125b5e398cfefc0bd9709198e04594ea6ea861b, https://github.com/spring-projects/spring-framework/commit/89d2bd954ab99cc4ad93ccb15f632693675ef712  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-01-30T07:14:10Z","2019-01-11T15:36:19Z"
"","20869","CachedIntrospectionResults should use BeanInfoFactory when introspecting implemented interfaces  [SPR-16322]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16322](https://jira.spring.io/browse/SPR-16322?redirect=false)** and commented  #18772 updated `CachedIntrospectionResults` to explicitly introspect implemented interfaces (for Java 8 default methods), however it directly calls `Introspector.getBeanInfo` and I believe it should probably try the `BeanInfoFactory` implementations first, in case a custom introspection method is being used.  It's also possible to skip the `Serializable` interface and stop when `Object` is reached (rather than `null`).  ---  **Affects:** 5.0.2  **Issue Links:** - #18772 Java 8 default methods not detected as bean properties - #21208 Reduce ClassUtils.forName overhead (in particular for annotation introspection purposes) - #21516 CachedIntrospectionResults should build complete descriptor for setter/getter across interface hierarchy - #21110 Consider caching interface-derived BeanInfo instances in CachedIntrospectionResults  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1631, and commits https://github.com/spring-projects/spring-framework/commit/45828cb934174479a230a10bb5d5b64d0d56867b","closed","type: enhancement,","spring-projects-issues","2017-12-22T19:01:45Z","2019-01-11T15:22:37Z"
"","20868","Remove NoSuchMethodExceptions when using AnnotatedElementUtils [SPR-16321]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16321](https://jira.spring.io/browse/SPR-16321?redirect=false)** and commented  Whilst profiling [Spring Boot performance issues](https://github.com/spring-projects/spring-boot/issues/11226) it became apparent that `NoSuchMethodException` is thrown and caught many times during startup (over 1000). One of the places this happens is in `AnnotatedElementUtils`. This class could be changed so that the exception is never thrown.  ---  **Affects:** 5.0.2  **Issue Links:** - #20867 Remove NoSuchMethodExceptions when calling ClassUtils.getMethodIfAvailable()  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1630","closed","type: enhancement,","spring-projects-issues","2017-12-22T18:53:49Z","2019-01-11T15:22:44Z"
"","20867","Remove NoSuchMethodExceptions when calling ClassUtils.getMethodIfAvailable() [SPR-16320]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16320](https://jira.spring.io/browse/SPR-16320?redirect=false)** and commented  Whilst profiling [Spring Boot performance issues](https://github.com/spring-projects/spring-boot/issues/11226) it became apparent that `NoSuchMethodException` is thrown and caught many times during startup (over 1000). One of the places this happens is in `ClassUtils.getMethodIfAvailable()`. This method could be changed so that the exception is never thrown.  ---  **Affects:** 5.0.2  **Issue Links:** - #20868 Remove NoSuchMethodExceptions when using AnnotatedElementUtils  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1628","closed","type: enhancement,","spring-projects-issues","2017-12-22T18:53:03Z","2019-01-11T15:22:41Z"
"","20761","Document common use cases for @Order vs @Priority vs @DependsOn [SPR-16213]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16213](https://jira.spring.io/browse/SPR-16213?redirect=false)** and commented  It wasn't immediately obvious to me that `@Order` can be used on `@Bean` methods to change the order of `Collection` injection.  Some dedicated section of the reference documentation explaining `@Order` and the difference between `@DependsOn` could be useful. It might also be worth adding a note to the Javadoc (although technically `@Order` is in core so it shouldn't know about context concerns).  Here's an example stack overflow question with someone else asking the question and a slightly misleading answer: https://stackoverflow.com/questions/36187063/instantiate-beans-in-order-in-spring  ---  **Issue Links:** - #17237 `@Order` should get detected in case of proxyTargetClass=false as well - #17403 `@Order` annotations not consistently honored within DispatcherServlet and other parts of the framework - #10245 Autowiring should support ordered collection driven by Order annotation or Ordered interface - #15179 Add support for `@javax`.annotation.Priority as alternative to `@Primary` - #15934 Support for `@Order` at the `@Bean` method level  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/84699c8b9b7bd6660ad897df54fdce244b5b50e0, https://github.com/spring-projects/spring-framework/commit/1d060ecff0942149489b1ceceedff786ded081ab  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","in: core,","spring-projects-issues","2017-11-18T18:51:44Z","2019-01-13T04:59:36Z"
"","20818","Multiple TaskSchedulers to be supported with @Scheduled [SPR-16271]","**[Peter Szanto](https://jira.spring.io/secure/ViewProfile.jspa?name=szantopeter)** opened **[SPR-16271](https://jira.spring.io/browse/SPR-16271?redirect=false)** and commented  I would like to have multiple scheduled tasks in my application, with multiple their pool size, thread name and some as daemon. I can customize these properties using a TaskScheduler, but in an single application I can have only one TaskScheduler. It would be nice if I could define multiple schedulers and refer them in the `@Scheduled` annotation similar as I can refer cache name in the `@Cacheable` annotation. There could be even something similar to `@CacheConfig` so class level settings for multiple scheduled definitions could be configured   ---  **Affects:** 4.3.13","open","type: enhancement,","spring-projects-issues","2017-12-06T11:53:37Z","2021-08-19T18:40:05Z"
"","21108","Add ComponentName Suggestion to ControllerAdvice Annotations [SPR-16566]","**[Peter Luttrell](https://jira.spring.io/secure/ViewProfile.jspa?name=pluttrell)** opened **[SPR-16566](https://jira.spring.io/browse/SPR-16566?redirect=false)** and commented  Please consider adding a property to the `@ControllerAdvice` and `@RestControllerAdvice` annotations that provides a hint to SpringBoot naming just like is currently provided for `@Controller` and `@RestController`. This would enable users to have two identically named `ControllerAdvice` classes in different packages peacefully coexist.  For example, these two classes works nicely togather:  `com.v1.SomeRestController`:  ```java @RestController public class SomeRestController{ } ```  `com.v2.SomeRestController`:  ```java @RestController(""someRestController-v2"") public class SomeRestController{ } ```  So it'd be great if these would also work togather:  `com.v1.SomeRestControllerAdvice`:  ```java @RestControllerAdvice(assignableTypes = {SomeRestController.class}) public class SomeRestControllerAdvice{ } ```  `com.v2.SomeRestControllerAdvice`:  ```java @RestControllerAdvice(assignableTypes = {SomeRestController.class}) public class SomeRestControllerAdvice{ } ```  But the last class causes the following as of the version of Spring included with Spring Boot 2.0.0.RELEASE:  ``` org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class           [omitted for brevity] Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'someRestControllerAdvice' for bean class [com.v2.SomeRestControllerAdvice] conflicts with existing, non-compatible bean definition of same name and class [com.v1.SomeRestControllerAdvice] 	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.checkCandidate(ClassPathBeanDefinitionScanner.java:345) ~[spring-context-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:283) ~[spring-context-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:135) ~[spring-context-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:287) ~[spring-context-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) ~[spring-context-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) ~[spring-context-4.3.13.RELEASE.jar:4.3.13.RELEASE] 	... 13 common frames omitted  ```    ---  **Affects:** 5.0.4","open","type: enhancement,","spring-projects-issues","2018-03-08T07:12:46Z","2019-02-22T15:52:00Z"
"","20433","Add Support for Java 8 Optional to the Spring Expression Language [SPR-15878]","**[Peter Luttrell](https://jira.spring.io/secure/ViewProfile.jspa?name=pluttrell)** opened **[SPR-15878](https://jira.spring.io/browse/SPR-15878?redirect=false)** and commented  This is a feature request to add support for Java 8 Optionals to the Spring Expression Language.  One use case that I just ran into is wanting to use `@PostAuthorize` on a method that returns an Optional in conjunctions with custom expressions. For example the following fails:  ```java @PostAuthorize(""canAccessOrganization(returnObject.organiztionId)"") public Optional getPerson(String personId){     ... } ```  In this case, if the returned reference isn't present, that `@PostAuthorize` would allow the response, which should be Optional.empty(). If it is present, then it'd be dereferenced into the returnObject, so we'd have direct access to its fields for use in the expression.   ---  4 votes, 6 watchers","open","in: core,","spring-projects-issues","2017-08-18T21:45:17Z","2022-03-08T15:15:15Z"
"","20700","Wildcard JPA packages are not scanned [SPR-16152]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-16152](https://jira.spring.io/browse/SPR-16152?redirect=false)** and commented  Looking at the latest 5.0.1 `CandidateComponentIndexer` code:  https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndex.java#L68  candidates are filtered based on the `startsWith` criteria. This prevents packages containing wildcards to be scanned:  ```     @Bean(name = { ""defaultEntityManagerFactory"", ""entityManagerFactory"" })     protected LocalContainerEntityManagerFactoryBean defaultEntityManagerFactory(JpaProperties jpaProperties) throws PropertyVetoException, IOException {         LocalContainerEntityManagerFactoryBean entityManagerFactory = new LocalContainerEntityManagerFactoryBean();         entityManagerFactory.setDataSource(defaultDataSource());         entityManagerFactory.setJpaVendorAdapter(defaultJpaVendorAdapter());         entityManagerFactory.setJpaProperties(defaultTestJpaProperties(jpaProperties));         entityManagerFactory.setPackagesToScan(""com.nemesis.platform.core.entity"", ""com.nemesis.platform.module.**.core.entity"");         entityManagerFactory.setLoadTimeWeaver(new InstrumentationLoadTimeWeaver());          return entityManagerFactory;     } ```  Please note that this is a regression, as this used to work fine with 4.3.x  ---  **Affects:** 5.0.1  **Issue Links:** - #20660 Spring context indexer does not work with nested classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9511d29adb10e8c5da674c66bcdc8b83c04142b9, https://github.com/spring-projects/spring-framework/commit/1838ddb95d40c57eb0ba3909f6ea3d67cab7640d  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2017-11-02T17:17:42Z","2019-01-11T13:27:30Z"
"","20641","Doc: @Async in an Interceptor postHandle() doesn't work [SPR-16092]","**[Pawan Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=kr.pawank)** opened **[SPR-16092](https://jira.spring.io/browse/SPR-16092?redirect=false)** and commented  If you use a `@Async`(""yourExecutorBeanName"") in a method called by an interceptor's postHandle method (whether same class or different class), the Async nature doesn't come into picture, nor does Spring complain for a wrong bean type if doesn't exist by name of ""yourExecutorBeanName"".  ```java public class EventHandlerInterceptor extends HandlerInterceptorAdapter {      @Override     public void postHandle(final HttpServletRequest request, final HttpServletResponse response, final Object handler, final ModelAndView modelAndView) throws Exception {       //some custom logic       publishSomeEvent(someRequestObj);     }      @Async(""eventHandlerExecutor"")     public void publishSomeEvent(Request someRequestObj) {         logger.info(""Inside EventHandlerInterceptor - trying for Async.. doesn't work"");         //do something Async.     } } ```  ```xml                     ```    ---  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","in: core,","spring-projects-issues","2017-10-21T18:31:33Z","2017-10-24T16:24:07Z"
"","20982","Review spring-jdbc vulnerabilities report [SPR-16436]","**[Pavel Shelentsov](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel-sb)** opened **[SPR-16436](https://jira.spring.io/browse/SPR-16436?redirect=false)** and commented  We use maven dependency on spring-jdbc module and have recently scanned this using static veracode analyzer. There are some vulnerabilities there including flaws with high severity (possible SQL Injections), these can be false positive, but need to be checked.  Detailed vulnerabilities report [^spring-jdbc_5.0.3.RELEASE.pdf] is attached to the issue.   ---  **Affects:** 5.0.3  **Attachments:** - [spring-jdbc_5.0.3.RELEASE.pdf](https://jira.spring.io/secure/attachment/25359/spring-jdbc_5.0.3.RELEASE.pdf) (_195.35 kB_)","closed","in: data,","spring-projects-issues","2018-01-30T09:09:38Z","2019-01-11T15:36:04Z"
"","20466","Is ""bodyToEntity"" reference incorrect in the org.springframework.web.reactive.function.client.WebClient.RequestHeadersSpec Javadoc? [SPR-15912]","**[Paul Grime](https://jira.spring.io/secure/ViewProfile.jspa?name=gitgrimbo)** opened **[SPR-15912](https://jira.spring.io/browse/SPR-15912?redirect=false)** and commented  `bodyToEntity` in the Javadoc doesn't seem to exist.  https://github.com/spring-projects/spring-framework/blob/5394cc0c63471e7de8399c97ea201bbc0a4dd4d4/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java#L486   ---  **Affects:** 5.0 RC3  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/5394cc0c63471e7de8399c97ea201bbc0a4dd4d4/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java#L486  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/14af5d941a70f43906c4e6787f83fa48e276bfaf","closed","in: web,","spring-projects-issues","2017-08-30T13:06:30Z","2017-09-11T12:09:50Z"
"","20614","Adopt a spring boot Condition  [SPR-16065]","**[pas filip](https://jira.spring.io/secure/ViewProfile.jspa?name=pasfilip)** opened **[SPR-16065](https://jira.spring.io/browse/SPR-16065?redirect=false)** and commented  I would like to propose that some or all of the implementations of org.springframework.context.annotation.Condition from spring boot be adopted by spring core.  Specifically:  * OnBeanCondition * OnClassCondition * OnExpressionCondition * OnJavaCondition * OnJndiCondition * OnPropertyCondition * OnResourceCondition  Optionally:  * OnWebApplicationCondition  These are conditions that would add nice value to the spring core framework. I am aware that spring boot is opinionated but I would argue that these features make sense to exist in spring core so it's users can benefit from it. I'm not sure if it was a conscious design decision to not include these in spring core originally or if things just evolved naturally within the spring boot project.  Currently I have only three options, none of which I like, which are: 1. Roll my own implementation for every project I'm confronted with that uses spring framework without spring boot. 2. Import the spring boot autoconfigure module into my projects. 3. Migrate my projects to spring boot.  The reasons why I don't like these options are: 1. Rolling my own just doesn't seem very dry. Feels a lot like reinventing the wheel. :) 2. The spring boot autoconfigure seems to be a rather large module. Feels rather heavy. :) 3. A viable option; but feels like a large hurdle to jump to just use those condition features. :)  It looks like the package org.springframework.boot.autoconfigure.condition would be a good candidate for a separate module.  I've also created a JIRA issue in the spring boot project for this. (See issue [Create a separate module for generic conditions](https://github.com/spring-projects/spring-boot/issues/10628)) If extracted into a small module the barrier to importing it would already be greatly reduced. Which would make the 2nd option already much more viable although it feels like an omission in spring core.  Ideally though I think these implementations would sit better in spring core or perhaps a new module along the lines of spring core autoconfigure or spring core condition. Unfortunately convention would bid the package name be changed and here I'd propose the following: * Introduce code into spring core so users of spring core and boot can start using these ""new"" spring core features. * Deprecate the existing spring boot code. * On the next major release version of spring boot remove the existing implementations. This would be a big breaking change although easy to refactor/migrate.  ---  **Affects:** 4.3.12, 5.0 GA  **Issue Links:** - #15592 Port `@ConditionalOn`... from Spring Boot into Spring Core (_**""duplicates""**_) - #17835 Adding ConditionalOnProperty to spring-core (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2017-10-12T20:02:13Z","2019-01-13T05:02:36Z"
"","20597","@async with aspect mode not working [SPR-16048]","**[pankaj pandey](https://jira.spring.io/secure/ViewProfile.jspa?name=pankajnits)** opened **[SPR-16048](https://jira.spring.io/browse/SPR-16048?redirect=false)** and commented  Hi, I am using spring boot starter 1.5.4.release version and found an issue with async annotation.  When I use `@enableasync` in aspect mode, `@async` annotation works for internal method calls but not for method defined in different bean.  I am using compile time weaving with aspectjrt and aspectjweaver and spring aspects.  If I disable aspect mode in enableasync annotation external method call works asynchronously  however internal calls doesn't, i understand the reason behind why internal call doesn't works asynchronously in proxy mode. However I expected that in aspect mode internal as well as external call should work asynchronously with async annotation.  Could you help me in resolving this issue.    ---  **Affects:** 4.3.6","closed","in: core,","spring-projects-issues","2017-10-05T13:03:12Z","2019-01-11T13:12:54Z"
"","20770","Spring WebFlux (Netty/Jackson) treats Mono and Mono differently [SPR-16222]","**[Panikiran Periyapatna](https://jira.spring.io/secure/ViewProfile.jspa?name=pvpkiran)** opened **[SPR-16222](https://jira.spring.io/browse/SPR-16222?redirect=false)** and commented  Given the following mapping on server side  ```java @Bean public RouterFunction routerFunction () {     return          route(GET (""/string""), serverRequest ->                         ServerResponse.ok()                         .contentType(MediaType.APPLICATION_JSON)                         .body(Mono.just(""TestString""), String.class)                     )         .and( route(GET (""/integer""), serverRequest ->                         ServerResponse.ok()                         .contentType(MediaType.APPLICATION_JSON)                         .body(Mono.just(1), Integer.class)                     ))             ; } ```  When I reach the endpoints through browser, I get the response correctly  /integer --- returns -- > 1 /string --- returns -- > TestString  When I try the same using webclient  ```java WebClient client = WebClient.create(""http://localhost:8080"");  String stringValue = client.get()     .uri(""/string"")     .accept(MediaType.APPLICATION_JSON)     .retrieve()     .bodyToMono(String.class)     .block(); System.out.println(""StringValue : "" + stringValue);   Integer intValue = client.get()     .uri(""/integer"")     .accept(MediaType.APPLICATION_STREAM_JSON)     .retrieve()     .bodyToMono(Integer.class)     .block();  System.out.println(""IntegerValue : "" +  intValue); ```  I get StringValue : testString **IntegerValue : null**  This is strange. When I saw the netty logs this is what I found. In string case, I have one message from server as per netty logs with response code and body(TestString)  ```java   +-------------------------------------------------+          |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f | +--------+-------------------------------------------------+----------------+ |00000000| 48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d |HTTP/1.1 200 OK.| |00000010| 0a 74 72 61 6e 73 66 65 72 2d 65 6e 63 6f 64 69 |.transfer-encodi| |00000020| 6e 67 3a 20 63 68 75 6e 6b 65 64 0d 0a 43 6f 6e |ng: chunked..Con| |00000030| 74 65 6e 74 2d 54 79 70 65 3a 20 61 70 70 6c 69 |tent-Type: appli| |00000040| 63 61 74 69 6f 6e 2f 6a 73 6f 6e 0d 0a 0d 0a 61 |cation/json....a| |00000050| 0d 0a 54 65 73 74 53 74 72 69 6e 67 0d 0a 30 0d |..TestString..0.| |00000060| 0a 0d 0a                                        |...             | +--------+-------------------------------------------------+----------------+ ```  but in integer case (the same is true for double also) I see two messages  ```java         +-------------------------------------------------+          |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f | +--------+-------------------------------------------------+----------------+ |00000000| 48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d |HTTP/1.1 200 OK.| |00000010| 0a 74 72 61 6e 73 66 65 72 2d 65 6e 63 6f 64 69 |.transfer-encodi| |00000020| 6e 67 3a 20 63 68 75 6e 6b 65 64 0d 0a 43 6f 6e |ng: chunked..Con| |00000030| 74 65 6e 74 2d 54 79 70 65 3a 20 61 70 70 6c 69 |tent-Type: appli| |00000040| 63 61 74 69 6f 6e 2f 6a 73 6f 6e 0d 0a 0d 0a    |cation/json.... | +--------+-------------------------------------------------+----------------+ 20:06:00.564 [reactor-http-nio-2] DEBUG reactor.ipc.netty.http.client.HttpClientOperations - [id: 0xf1a130f5, L:/127.0.0.1:38864 - R:localhost/127.0.0.1:8080] Received response (auto-read:false) : [transfer-encoding=chunked, Content-Type=application/json] 20:06:00.564 [reactor-http-nio-2] DEBUG org.springframework.web.reactive.function.client - onNext(ReactorClientHttpResponse{request=[GET /integer],status=200}) 20:06:00.602 [reactor-http-nio-2] DEBUG reactor.ipc.netty.channel.FluxReceive - [id: 0xf1a130f5, L:/127.0.0.1:38864 - R:localhost/127.0.0.1:8080] Subscribing inbound receiver [pending: 0, cancelled:false, inboundDone: false] 20:06:00.603 [reactor-http-nio-2] DEBUG org.springframework.web.reactive.function.client - onComplete() 20:06:00.603 [reactor-http-nio-2] DEBUG reactor.ipc.netty.http.client.HttpClient - [id: 0xf1a130f5, L:/127.0.0.1:38864 - R:localhost/127.0.0.1:8080] READ COMPLETE 20:06:00.603 [reactor-http-nio-2] DEBUG reactor.ipc.netty.http.client.HttpClient - [id: 0xf1a130f5, L:/127.0.0.1:38864 - R:localhost/127.0.0.1:8080] READ: 11B          +-------------------------------------------------+          |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f | +--------+-------------------------------------------------+----------------+ |00000000| 31 0d 0a 31 0d 0a 30 0d 0a 0d 0a                |1..1..0....     | +--------+-------------------------------------------------+----------------+    ```  ---  **Affects:** 5.0.1  **Reference URL:** https://stackoverflow.com/questions/47420900/spring-webflux-netty-treats-monointeger-and-monostring-differently  **Issue Links:** - #20714 Support top-level scalar values in Jackson2Tokenizer (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-11-21T19:52:20Z","2019-01-12T16:44:45Z"
"","20479","Reactive response is not shown in Postman [SPR-15925]","**[Orest](https://jira.spring.io/secure/ViewProfile.jspa?name=korest)** opened **[SPR-15925](https://jira.spring.io/browse/SPR-15925?redirect=false)** and commented  I've created sample project using start.spring.io with the latest Spring Boot version 2.0.0.M3 and Reactive Web dependency.  Added there simple controller with one endpoint:  ```java @RestController public class DemoController {      @GetMapping(value = ""/test"")     public Mono serverResponseMono() {         return ServerResponse.ok()                 .contentType(APPLICATION_JSON)                 .body(Mono.just(""test""), String.class);     }  }  ```  Then called it in Postman and I can't see the result. It has status 200 but body is  ```java data: ```  Also I can see headers:  ```java Content-Type →text/event-stream transfer-encoding →chunked ```  Not sure if it a bug but I suppose it should show response in Postman. Attached the sample project.   ---  **Affects:** 5.0 RC3  **Attachments:** - [demo_postman.7z](https://jira.spring.io/secure/attachment/25091/demo_postman.7z) (_68.03 kB_)","closed","status: invalid,","spring-projects-issues","2017-09-05T07:57:50Z","2019-01-12T05:20:19Z"
"","20771","DefaultOAuth2RequestValidator requires client scopes [SPR-16223]","**[Olivier Theriault](https://jira.spring.io/secure/ViewProfile.jspa?name=otheriault)** opened **[SPR-16223](https://jira.spring.io/browse/SPR-16223?redirect=false)** and commented  When writing a custom implementation of the ClientDetailsService, I noticed that I started to get this error when trying to perform OAuth2 /authorize: ""Empty scope (either the client or the user is not allowed the requested scopes)"".  This stems from the facts that I do not require a scope for my client and the DefaultOAuth2RequestValidator requires a scope for the client:  ```java 	private void validateScope(Set requestScopes, Set clientScopes) {  		if (clientScopes != null && !clientScopes.isEmpty()) { 			for (String scope : requestScopes) { 				if (!clientScopes.contains(scope)) { 					throw new InvalidScopeException(""Invalid scope: "" + scope, clientScopes); 				} 			} 		} 		 		if (requestScopes.isEmpty()) { 			throw new InvalidScopeException(""Empty scope (either the client or the user is not allowed the requested scopes)""); 		} 	} ```  I found this already reported on Github: https://github.com/spring-projects/spring-security-oauth/issues/775.   --- No further details from [SPR-16223](https://jira.spring.io/browse/SPR-16223?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-11-22T03:55:37Z","2019-01-12T05:19:53Z"
"","21075","Allow runtime detection of CGLib proxying VS. JDK proxying for different parts of the framework [SPR-16532]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-16532](https://jira.spring.io/browse/SPR-16532?redirect=false)** and commented  The change in Spring Boot 2.0's default proxying behavior (defaulting to CGLib proxies), prevents it to actually consider user configuration explicitly using e.g. `@EnableTransactionManagement(proxyTargetClass = false)` as they all end up in the registration of the `org.springframework.aop.config.internalAutoProxyCreator` bean. This would cause the singular use of e.g. `@ETM(pTC=true)` to disable the Boot default for all cases that – according to Boot's default – use proxying (general AOP, caching etc.).  It would be cool if there was a way for downstream projects to find out about for which part of the framework a particular proxy setting was activated explicitly, so that Boot can apply its default to all others. I guess another option would be to allow the default to be used in the framework to be configured externally, so that Boot could just forward the flag and would not have to consider the exclusions itself.  The effect of the current state of affairs is that you can have a Boot 2.0 application with e.g. transactions explicitly configured to use JDK proxies but Boot's default still trumping this. This is particularly worrying as it's AFAIK the only situation in which user configuration does not trump Boots defaults. Additionally, the Spring Framework log output in erroneous scenarios (e.g. the class to be proxied using final methods) hints at enabling JDK proxies, which is exactly what the user configuration does. This leaves users with hard to diagnose configuration issues.   ---  **Affects:** 4.3.14, 5.0.4","open","in: core,","spring-projects-issues","2018-02-23T15:44:30Z","2019-01-11T14:35:32Z"
"","20727","Invalid instance injected for generic type in case of partial type variable [SPR-16179]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-16179](https://jira.spring.io/browse/SPR-16179?redirect=false)** and commented  The following test fails:  ```java package example;  import static org.hamcrest.CoreMatchers.*; import static org.junit.Assert.*;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class SpringInjectionTest {  	@Configuration 	static class Config {  		@Bean 		PageAssembler assembler() { 			return new PageAssembler<>(); 		} 	}  	@Autowired(required = false) Assembler assembler;  	@Test 	public void testname() { 		assertThat(assembler, is(nullValue())); 	}  	interface Assembler {}  	static class PageAssembler implements Assembler> {}  	interface Page {}  	interface SomeOtherType {} } ```  Spring injects the configured bean instance here despite the fact that the generic declarations clearly don't match as `Page` is not compatible with the requested `SomeOtherType`.   ---  **Affects:** 4.3.12, 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59d654b0cfa523fb9f5d2ff9961106ad46d92953, https://github.com/spring-projects/spring-framework/commit/e2bb06edbdd23716df7c265db28f65e6c432a2aa","open","in: core,","spring-projects-issues","2017-11-09T13:35:40Z","2018-11-30T08:59:05Z"
"","20648","Allow declaration-stable lookup of declared methods via ASM [SPR-16100]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-16100](https://jira.spring.io/browse/SPR-16100?redirect=false)** and commented  `ClassMetadata` currently exposes ASM based metadata about the type hierarchy. Also, it's subtype `AnnotationMetadata` exposes information about type annotations and annotated methods.  It would be very helpful to also be able to obtain the `MethodMetadata` for **all** declared methods in a type.   ---  **Affects:** 4.3.12, 5.0 GA  **Issue Links:** - [DATAJPA-1209](https://jira.spring.io/browse/DATAJPA-1209) Compatibility with Hibernate < 5.2.11 broken for projections on native queries - [DATACMNS-1206](https://jira.spring.io/browse/DATACMNS-1206) Introduce abstraction to detect declared methods in declaration order","open","type: enhancement,","spring-projects-issues","2017-10-23T10:40:55Z","2017-11-03T15:57:34Z"
"","20625","Improve documentation of lite configuration mode [SPR-16076]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-16076](https://jira.spring.io/browse/SPR-16076?redirect=false)** and commented  There's a brief discussion of the lite `@Bean` configuration mode in the [reference documentation](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-java-basic-concepts). However it doesn't actually explain why this mode actually exists and what a scenario could look like you'd actually want to use it in.   ---  **Issue Links:** - [DATAJPA-1201](https://jira.spring.io/browse/DATAJPA-1201) BeanDefinitionUtils.registerEntityManagerFactoryBeanDefinition() not registering EntityManagerFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/be9c0967467ba2e0dda4aa7f2ae72bd9bbc7ab99, https://github.com/spring-projects/spring-framework/commit/17fb4fed098d95bfdb6609c138afb14c38c0b0ab  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: documentation,","spring-projects-issues","2017-10-16T14:27:26Z","2017-10-24T16:24:06Z"
"","21002","AcceptHeaderLocaleResolver should match country locales against supported language locales [SPR-16457]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-16457](https://jira.spring.io/browse/SPR-16457?redirect=false)** and commented  We are using the `AcceptHeaderLocaleResolver` along with a list of supported language locales to determine a matching locale based on the browser's accepted locales. This works pretty well for most browsers as those browsers always send also the (base) language locale as accepted locale.  For example if I configure Chrome to use ""German (Germany)"" as the preferred language, it will send both ""de-DE"" and ""de"" as accepted locales.  Unfortunately this is not the case in iOS where the request contains only a single ""de-DE"" locale. Currently the `AcceptHeaderLocaleResolver` will not accept ""de-DE"" if only ""de"" is in the list of supported locales, so it will fallback to the default locale.  I could work around this limitation by either creating a list of all possible country locales for our supported language locales or by modifying the HTTP request to strip the country part from the accepted locales.  It would be great if I don't have to do this and the `AcceptHeaderLocaleResolver` would match automatically a country specific locale against a supported language locale.  ---  **Affects:** 4.3.14  **Issue Links:** - #19987 Revise AcceptHeaderLocaleResolver default locale handling - #21043 Invalid/missing locale strings in header prevents resolving the locale - #21140 AcceptHeaderLocaleResolver chooses wrong Locale for language match  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cd8a1bdb8bcf3fb903c7c88bdfd5c49c194f0c65, https://github.com/spring-projects/spring-framework/commit/4dc964544ff98fbe1a9bb53864bc5f1525107655, https://github.com/spring-projects/spring-framework/commit/8fda96cadbc8939088a35789a48de2808b46261e  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-02-02T10:13:47Z","2019-01-11T15:34:21Z"
"","20960","ServletServerHttpRequest.getURI() may throw a java.net.URISyntaxException [SPR-16414]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-16414](https://jira.spring.io/browse/SPR-16414?redirect=false)** and commented  We just encountered an error in our Spring Boot application that came from the innocent looking call  > ServletUriComponentsBuilder.fromRequest(httpServletRequest)  which uses internally  > ServletServerHttpRequest.getURI()  The URL of this request was indeed illegal since it had an illegal escape sequence in its query part, something like `http://app.org/request?query=foo%` or `http://app.org/request?query=foo%xx`. Typing this URL into a browser will cause normal request processing (the controller will handle the `query` parameter as not present, the corresponding `@RequestParam` is null), however using the `ServletUriComponentsBuilder` as mentioned above will cause a `java.net.URISyntaxException`. (In our case this exception occurred during the rendering of the view, which is even worse.)  I wonder if the framework (i.e. `ServletUriComponentsBuilder` or `ServletUriComponentsBuilder`) should handle this illegal URI. Or is it the job of the application using the framework? Either way, the user shouldn't see an error 500.   ---  **Affects:** 4.3.13  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e6f8df0a8ad0aed9046884cb06313ba7165feae, https://github.com/spring-projects/spring-framework/commit/04f954956cc5942fbee4fec8f07d46c284cf3037  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-01-24T18:05:42Z","2018-06-05T18:19:12Z"
"","20791","Trying to rewrite request URI in a WebFilter fails on missing client TLS certificate [SPR-16244]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-16244](https://jira.spring.io/browse/SPR-16244?redirect=false)** and commented  Stack: Spring WebFlux 5.0.2, reactor-netty 0.7.2, netty 4.1.17, netty-tcnative-boringssl-static 2.0.7, java 8u152. Connection: TLS, no client certificate.  We're rewriting request URI from absolute form to relative in a `WebFilter` because of #20790 using the following construct:  ```java request       .mutate()       .uri(relativeUri)       .build() ```  This results in the following exception:  ``` java.lang.IllegalStateException: Failed to get SSL certificates 	at org.springframework.http.server.reactive.DefaultSslInfo.initCertificates(DefaultSslInfo.java:94) ~[spring-web-5.0.2.RELEASE.jar:5.0.2.RELEASE] 	at org.springframework.http.server.reactive.DefaultSslInfo.(DefaultSslInfo.java:51) ~[spring-web-5.0.2.RELEASE.jar:5.0.2.RELEASE] 	at org.springframework.http.server.reactive.ReactorServerHttpRequest.initSslInfo(ReactorServerHttpRequest.java:141) ~[spring-web-5.0.2.RELEASE.jar:5.0.2.RELEASE] 	at org.springframework.http.server.reactive.AbstractServerHttpRequest.getSslInfo(AbstractServerHttpRequest.java:162) ~[spring-web-5.0.2.RELEASE.jar:5.0.2.RELEASE] 	at org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder$DefaultServerHttpRequest.(DefaultServerHttpRequestBuilder.java:176) ~[spring-web-5.0.2.RELEASE.jar:5.0.2.RELEASE] 	at org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.build(DefaultServerHttpRequestBuilder.java:133) ~[spring-web-5.0.2.RELEASE.jar:5.0.2.RELEASE] ... Caused by: javax.net.ssl.SSLPeerUnverifiedException: peer not verified 	at io.netty.handler.ssl.ReferenceCountedOpenSslEngine$OpenSslSession.getPeerCertificates(ReferenceCountedOpenSslEngine.java:2121) ~[netty-handler-4.1.17.Final.jar:4.1.17.Final] 	at org.springframework.http.server.reactive.DefaultSslInfo.initCertificates(DefaultSslInfo.java:91) ~[spring-web-5.0.2.RELEASE.jar:5.0.2.RELEASE] ... ```  ---  **Affects:** 5.0.2  **Issue Links:** - #20790 Controller cannot be found if absolute URI is given in HTTP request  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b9a11685801511a866b415ae66ce4249a7d503a4","closed","type: bug,","spring-projects-issues","2017-11-29T16:02:45Z","2019-01-11T13:29:17Z"
"","20790","Controller cannot be found if absolute URI is given in HTTP request [SPR-16243]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-16243](https://jira.spring.io/browse/SPR-16243?redirect=false)** and commented  Stack: Spring WebFlux 5.0.1, 5.0.2, reactor-netty 0.7.2, reactor-core 3.1.2, netty 4.1.17, java 8u154.  Some of our customers use our server as an HTTP proxy, resulting in absolute URI being sent in requests, e.g.:  ``` GET http://server/path HTTP/1.1 ```  Such a request results in 404 response having a controller on `@GetMapping(""/path"")`, while usual requests with relative URI are properly handled:  ``` GET /path HTTP/1.1 ```  While this looks like a marginal case, https://tools.ietf.org/html/rfc7230#section-5.3.2 states  > To allow for transition to the absolute-form for all requests in some > future version of HTTP, a server MUST accept the absolute-form in > requests, even though HTTP/1.1 clients will only send them in > requests to proxies.  So, this sounds more like a bug.  ---  **Affects:** 5.0.2  **Issue Links:** - #20791 Trying to rewrite request URI in a WebFilter fails on missing client TLS certificate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/203370a810fad77d33c3484dbf9e79242583bf5b","closed","type: enhancement,","spring-projects-issues","2017-11-29T15:36:21Z","2019-01-11T13:29:15Z"
"","20619","DataBufferUtils.read(ReadableByteChannel,...) may corrupt data when used with NettyDataBuffers [SPR-16070]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-16070](https://jira.spring.io/browse/SPR-16070?redirect=false)** and commented  If published buffer is not immediately consumed, `read` may corrupt the data because the same `ByteBuffer` is reused and `NettyDataBuffer.write(ByteBuffer)` just wraps it into a `ByteBuf` and adds to a `CompositeByteBuf`, effectively reusing the same byte array.  Here is a test reproducing the problem""  ``` public class DataBufferUtilsTest extends FTestBase {    private final ByteBufAllocator allocator = DEFAULT;   private final DataBuffer dataBuffer = bufferFactory.allocateBuffer();   private final DataBufferFactory bufferFactory = new NettyDataBufferFactory(allocator);   @Mock   private ReadableByteChannel channel;    @Test   public void read_shouldPublishData() throws Exception {     when(channel.read(any()))         .thenAnswer(putByte(1))         .thenAnswer(putByte(2))         .thenAnswer(putByte(3))         .thenReturn(-1);      Flux read = read(channel, bufferFactory, 1);      StepVerifier.create(         read.reduce(DataBuffer::write)             .map(this::dataBufferToBytes)             .map(this::encodeHexString)     )         .expectNext(""010203"")         .verifyComplete();   }    private Answer putByte(int b) {     return invocation -> {       invocation.getArgumentAt(0, ByteBuffer.class).put((byte) b);       return 1;     };   }    private byte[] dataBufferToBytes(DataBuffer buffer) {     try {       int byteCount = buffer.readableByteCount();       byte[] bytes = new byte[byteCount];       buffer.read(bytes);       return bytes;     } finally {       release(buffer);     }   }    private String encodeHexString(byte[] data) {     StringBuilder builder = new StringBuilder();     for (byte b : data) {       builder.append((0xF0 & b) >>> 4);       builder.append(0x0F & b);     }     return builder.toString();   } ```  Output:  ``` java.lang.AssertionError: expectation ""expectNext(010203)"" failed (expected value: 010203; actual value: 030303) ```  Another problem with this method is that reusing the same `ByteBuffer` for reads means unnecessary copy of data is required (it does happen with `DefaultDataBuffer` and doesn't with `NettyDataBuffer` - hence, the corruption), what seems to be contrary to the idea of more efficient hardware usage in reactive programs.  For now we're interested in Netty only, so we fixed it in the following way:  ``` public static Flux read(ReadableByteChannel channel) {          return Flux.generate(       () -> channel,       (ch, sink) -> {         boolean release = true;         NettyDataBuffer dataBuffer = DEFAULT_DATA_BUFFER_FACTORY.allocateBuffer(BUFFER_SIZE);         try {           int read;           ByteBuf byteBuf = dataBuffer.getNativeBuffer();           // Cannot use asByteBuffer() as it returns one with zero capacity: #20617           ByteBuffer byteBuffer = byteBuf.nioBuffer(0, byteBuf.capacity());           if ((read = ch.read(byteBuffer)) >= 0) {             byteBuf.writerIndex(read);             release = false;             sink.next(dataBuffer);           } else {             sink.complete();           }         } catch (Throwable ex) {           sink.error(ex);         } finally {           if (release) {             release(dataBuffer);           }         }         return channel;       },       IOUtils::closeQuietly   ); ```  This way to fix both the corruption and get rid of unnecessary copy.  Unfortunately, the idiom doesn't work well for `DefaultDataBuffer`. For it, with current API, perhaps `ByteArray` could be allocated, then data is read into it and then `DefaultDataBufferFactory.wrap(ByteBuffer)` would properly set `read/writePosition`.  ---  **Affects:** 5.0 GA  **Issue Links:** - #20617 Empty NettyByteBuffer.asByteBuffer() returns ByteBuffer with zero capacity  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7a15260d631371481519098432795e8808ec9bc  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2017-10-13T17:09:55Z","2019-01-14T04:33:44Z"
"","20617","Empty NettyByteBuffer.asByteBuffer() returns ByteBuffer with zero capacity [SPR-16068]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-16068](https://jira.spring.io/browse/SPR-16068?redirect=false)** and commented  `DataBuffer` allocated with `NettyDataBufferFactor.allocateBuffer(capacity)` on `asByteBuffer()` returns one with zero capacity. It makes it useless for reading data e.g. from `ReadableByteChannel`.  The reason is that `NettyDataBuffer.asByteBuffer()` calls `ByteBuf.nioBuffer()` without parameters, which uses `ByteBuf.readableBytes()` as length. Perhaps it should call `byteBuf.nioBuffer(0, byteBuf.capacity())` instead.  Workaround:  ``` ByteBuf byteBuf = dataBuffer.getNativeBuffer(); ByteBuffer byteBuffer = byteBuf.nioBuffer(0, byteBuf.capacity()); int read = ch.read(byteBuffer); byteBuf.writerIndex(read); ```  ---  **Affects:** 5.0 GA  **Issue Links:** - #20619 DataBufferUtils.read(ReadableByteChannel,...) may corrupt data when used with NettyDataBuffers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7a15260d631371481519098432795e8808ec9bc  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2017-10-13T13:37:42Z","2019-01-11T13:11:48Z"
"","20817","Topic messages are not sent when using transacted JmsTemplate in 'TransactionSynchronization.afterCommit' phase [SPR-16270]","**[ofer baranes](https://jira.spring.io/secure/ViewProfile.jspa?name=ofer.baranes)** opened **[SPR-16270](https://jira.spring.io/browse/SPR-16270?redirect=false)** and commented  On the following scenario, an attempt to send message to a TOPIC using JmsTemplate is not effective (the message is never sent and there is no error): 1. Open Transaction using spring framework 2. Register TransactionSynchronization to the active Transaction 3. On the TransactionSynchronization, implement the 'afterCommit' as below:  * create JmsTemplate and set it to be 'transacted' * send a message to a topic  4. commit the Transaction  The expectation is that the message would be send and the subscriber would handle it. On real, the message is never handled by the subscriber. The reason is that the message wasn't truly send.  Other observations: The expectation is fulfilled and the subscriber gets the message if: a) Using 'afterCompletion' instead of 'afterCommit', b) Using none transacted JmsTemplate (on the 'afterCommit')  It appears that Spring determines the existence of an ongoing transaction by checking state  _**TransactionSynchronizationManager** public static boolean isSynchronizationActive()  { return synchronizations.get() != null; } _  Since the 'synchronizations' thread local is not cleared when executing the 'afterCommit' callback, Spring mistakenly assumes that there is ongoing transaction and hence bounds the JMS operation to the ongoing transaction (instead of commiting it immediately) and since there is no ongoing transaction the JMS operation would never be committed. (When using 'afterCompletion' it works since the 'synchronizations' thread local was cleared)  ---  **Affects:** 4.3.11  **Issue Links:** - #16214 TransactionSynchronizationManager - throw an Exception or log a warning if a Synchronization wants to add a Synchronization and afterCompletion is already called","open","type: bug,","spring-projects-issues","2017-12-06T10:00:09Z","2019-01-11T15:14:12Z"
"","20664","BasicAuth interceptor does not accept empty username [SPR-16116]","**[Norman Soetbeer](https://jira.spring.io/secure/ViewProfile.jspa?name=norman.soetbeer)** opened **[SPR-16116](https://jira.spring.io/browse/SPR-16116?redirect=false)** and commented  The BasicAuthorizationInterceptor does not accept an empty username, but accepts usernames containing colons. According to the RFCs around basic authentication, empty usernames are not explicitly disallowed, but usernames containing colons are.  I have a commit ready to solve this issue in case you agree with me.  Sources: \[1] https://tools.ietf.org/html/rfc2617#page-6  > basic-credentials = base64-user-pass > base64-user-pass  =  > user-pass   = userid "":"" password > userid      = * > password    = *TEXT  \[2] https://tools.ietf.org/html/rfc7617#page-5  > Furthermore, a user-id containing a colon character is invalid, as > the first colon in a user-pass string separates user-id and password > from one another; text after the first colon is part of the password. > User-ids containing colons cannot be encoded in user-pass strings.    ---  **Affects:** 5.0.1","closed","type: bug,","spring-projects-issues","2017-10-25T19:22:25Z","2017-11-27T12:17:09Z"
"","20978","RestTemplate.exchange ignores request body. [SPR-16432]","**[Nitin Bhatt](https://jira.spring.io/secure/ViewProfile.jspa?name=nitinbhatt)** opened **[SPR-16432](https://jira.spring.io/browse/SPR-16432?redirect=false)** and commented  When using restTemplate, looks like restTemplate.exchange simply ignores if a body is attached as an HttpEntity. Here is what I see, from my client  ``` HttpHeaders headers = new HttpHeaders();         headers.setContentType(MediaType.TEXT_PLAIN);         headers.setAccept(Arrays.asList(MediaType.ALL));         final HttpEntity entity;         entity = new HttpEntity(""TEST"", headers);          return restTemplate.exchange(new URI(""http://localhost:8080/body"")                 , HttpMethod.GET, entity, String.class); ```  On my server this is the handler:  ``` @RequestMapping(path = ""/body"", method = RequestMethod.GET)     public ResponseEntity getDataWithBody(@RequestBody Optional body) {          if (body.isPresent()) {             System.out.println(""Body is present"");         }         else {             System.out.println(""Body is absent"");             throw new IllegalArgumentException(""No Body provided"");         }         return new ResponseEntity(""Data Received -- "" + body.get() + ""\r\n"", HttpStatus.OK);     } ```  I would expect that the client does send body over to the server.   ---  **Affects:** 4.3.13","closed","status: declined,","spring-projects-issues","2018-01-29T23:07:17Z","2019-01-12T16:21:52Z"
"","20698","Identical approach to implement ""getSqlMapClientTemplate().execute(new SqlMapClientCallback()"" in Mybatis  [SPR-16150]","**[Nirmit Mutalik](https://jira.spring.io/secure/ViewProfile.jspa?name=mnirmit)** opened **[SPR-16150](https://jira.spring.io/browse/SPR-16150?redirect=false)** and commented  Hi   We are migrating from ibatis to mybatis 3.4.4. And in ibatis we have perform execute method in below formate using sqlcallbackmethod.  getSqlMapClientTemplate().execute(new SqlMapClientCallback() { public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException { executor.startBatch(); executor.insert(""TestInsert"", testObject) } executor.executeBatch(); return null; } });  is there identical method implementation with mybatis-spring version 1.31. and mybatis version 3.4.5. This is blocker, please help.  Currently i am not able to find alternative method in mybatis document.   ---  **Affects:** 3.2.18","closed","status: invalid,","spring-projects-issues","2017-11-02T12:32:26Z","2019-01-12T05:19:59Z"
"","20895","Set 304 status on ServerResponse when ETag/LastModified match [SPR-16348]","**[Nikola Kolosnjaji](https://jira.spring.io/secure/ViewProfile.jspa?name=nikkol1985)** opened **[SPR-16348](https://jira.spring.io/browse/SPR-16348?redirect=false)** and commented  When Controller returns 200 OK and Mono> with Etag HTTP header, second GET will result in 304 HTTP status, if client sends correct If-None-Match HTTP header. This is not the case when using functional Endpoints.  Same behaviour would be expected with WebFlux.fn and ServerResponse and using 'Cache-Control', 'ETag', and/or 'If-Modified-Since' HTTP headers reference: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-caching-etag-lastmodified  Attached sample which reproduce the problem with two endponts: /contoller & /handler    ---  **Affects:** 5.0.2  **Attachments:** - [etag.zip](https://jira.spring.io/secure/attachment/25329/etag.zip) (_52.80 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c53c8bfc5a7ff963e1762edfcbb6425fc5088035","closed","type: enhancement,","spring-projects-issues","2018-01-04T15:45:50Z","2018-01-23T10:05:12Z"
"","20887","NamedParameterJdbcTemplate fails on PostgreSQL array [SPR-16340]","**[Nikita Khateev](https://jira.spring.io/secure/ViewProfile.jspa?name=khatkit)** opened **[SPR-16340](https://jira.spring.io/browse/SPR-16340?redirect=false)** and commented  There is a possible bug while parsing SQL query for PostgreSQL DB. If you will try to execute a named query like this:  ```sql UPDATE table SET name = array[:param] ```  The name of param will be parsed as 'param]', which is incorrect. However, if you will try to execute this query:  ```sql UPDATE table SET name = array[:param ] ```  It will parse param name correctly.  ---  **Affects:** 5.0.2  **Issue Links:** - #12613 NamedParameterUtils.parseSqlStatement can't handle quote following comment end - #21018 [Regression] NamedParameterUtils::parseSqlStatement cannot parse chinese param name - #21017 NamedParameterUtils.isParameterSeparator throws ArrayIndexOutOfBoundsException for non ASCII characters - #21204 NamedParameterUtils.parseSqlStatement should parse :{x} style parameter correctly - #20759 Expose parameter names from ParsedSql - #21055 NamedParameterJdbcTemplate doesn't support postgresql dollar quoting $$ - #20908 SqlParameterSource needs method for extracting parameter names  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1637","open","type: enhancement,","spring-projects-issues","2018-01-02T20:19:57Z","2019-01-11T15:20:01Z"
"","21138","WebFlux commitActions are called after status, headers and cookies are set [SPR-16597]","**[Nicolas Portmann](https://jira.spring.io/secure/ViewProfile.jspa?name=tkp1n)** opened **[SPR-16597](https://jira.spring.io/browse/SPR-16597?redirect=false)** and commented  ServerHttpResponse allows commitActions to be added (e.g. inside a WebFilter) via the beforeCommit method.  AbstractHttpServerResponse however calls the protected methods applyStatusCode(), applyHeaders() and applyCookies() synchronously before the Mono\s passed as commitActions get executed. This makes it impossible to change the status code, add headers or cookies in beforeCommit actions asynchonously. A use case for this would be to add values from the subscriber context to the response headers.  AbstractHttpServerResponse#doCommit should wrap the calls to the applyXXX() methods in a mono which is subscribed to after the other commitActions.  Current code:  ```java this.commitAction.add(() -> {     applyStatusCode();     applyHeaders();     applyCookies();     // ...     return Mono.empty(); }); ```  Proposed solution:  ```java this.commitActions.add(() -> {     Mono.fromRunnable(() -> {         applyStatusCode();         applyHeaders();         applyCookies();         // ...     }); }); ```  ---  **Affects:** 5.0.4  **Issue Links:** - #21882 Send static file action is invoked before applying the relevant headers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72bbb2619dcd2d71f4333fb501a7495ef34eec53","closed","type: bug,","spring-projects-issues","2018-03-15T12:50:28Z","2019-01-11T14:28:30Z"
"","20750","Encoding of URI Variables on RestTemplate [SPR-16202]","**[Nicolas Miranda](https://jira.spring.io/secure/ViewProfile.jspa?name=nicomiranda)** opened **[SPR-16202](https://jira.spring.io/browse/SPR-16202?redirect=false)** and commented  On Version 5.0.1 encoding works different than version 4.x.  Given the following code in version 5 the parameter is received by any endpoint with an space ""a b"" while in version 4 it was received with ""a+b"". I tried to encode the + sign with %2B but is received as %2B. I don't know if its a bug on version 4 or version 5 but it works different.  ```java // Some comments here 	RestTemplate restTemplate = new RestTemplate();     	String url = ""http://localhost:8080/test?param1=a+b¶m2=d"";     	HttpHeaders headers = new HttpHeaders();     	HttpEntity req = new HttpEntity(new String(""""), headers);     	String restResp = restTemplate.postForObject(url, req, String.class);     	     	System.out.println(restResp); ```  ---  **Affects:** 5.0.1  **Issue Links:** - #22006 Not encoding '+' in URLs anymore breaks backwards compatibility with apps running on spring 4 (_**""is duplicated by""**_) - #19394 UriComponentBuilder doesn't work with encoded HTTP URL having '+'. - #20968 [docs] Explain URI template encoding - #21577 Support stricter encoding of URI variables in UriComponents (_**""is superseded by""**_)  0 votes, 7 watchers","closed","in: core,","spring-projects-issues","2017-11-15T23:35:31Z","2019-01-14T04:33:11Z"
"","20509","spring-jcl does not include exported packages of java commons logging [SPR-15957]","**[Nicola Ferraro](https://jira.spring.io/secure/ViewProfile.jspa?name=nferraro)** opened **[SPR-15957](https://jira.spring.io/browse/SPR-15957?redirect=false)** and commented  We are trying to support spring-boot 2 in Apache Camel and we have found some issues with commons-logging (ticket here: https://issues.apache.org/jira/browse/CAMEL-11756).  Some classes of the ""impl"" package of commons-logging are used by third party libraries. For example commons-configuration (v1 and v2) use the NoOpLog from that package in: https://github.com/apache/commons-configuration/blob/3c212681e410097cf38ee376540da585a8938923/src/main/java/org/apache/commons/configuration/AbstractConfiguration.java#L366  There are some camel modules that use commons-configuration, so we need to add commons-logging or jcl-over-slf4j to overcome this issue, but that would create duplicate classes, because the base package (org.apache.commons.configuration) is already provided by spring-jcl.  As jcl-over-slf4j did (https://github.com/qos-ch/slf4j/tree/master/jcl-over-slf4j/src/main/java/org/apache/commons/logging/impl), it would be useful to add some common classes from the ""org.apache.commons.configuration.impl"" package also in spring-jcl, in order to make the migration smoother for 1.x users.  ---  **Affects:** 5.0 RC4  **Reference URL:** https://issues.apache.org/jira/browse/CAMEL-11756  **Issue Links:** - #20774 commons-logging LogFactory and String arguments - #20611 Remove duplicate commons logging classes from spring-jcl  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1f3967cb3c1097ae2584c81a7361990a8190864e","closed","in: core,","spring-projects-issues","2017-09-13T10:00:39Z","2019-01-11T18:09:59Z"
"","20796","dependentBeanMap won't be rebuilt after destroySingleton and recreate it [SPR-16249]","**[Nick Allen](https://jira.spring.io/secure/ViewProfile.jspa?name=nicktheuncharted)** opened **[SPR-16249](https://jira.spring.io/browse/SPR-16249?redirect=false)** and commented  If we call destroySingleton it calls destroyBean which remove it's dependency from dependentBeanMap. Then if we call getBean which create that singleton again,  dependency won't be added back to dependentBeanMap (Because it should have been added in AutowiredAnnotationBeanPostProcessor.inject but it won't call registerDependentBeans if it is cached).  Solution: Remove metadataCache of bean in injectionMetadataCache when that bean get destroyed.  ---  **Affects:** 4.3.10  **Issue Links:** - #21663 BeanDefinition-aware BeanPostProcessors should clear cache in case of bean definition reset","open","type: enhancement,","spring-projects-issues","2017-11-30T16:03:46Z","2019-01-11T13:29:19Z"
"","20673","Stronger warning about overridden bean in case of type mismatch [SPR-16125]","**[Nguyen The Viet](https://jira.spring.io/secure/ViewProfile.jspa?name=ntviet18)** opened **[SPR-16125](https://jira.spring.io/browse/SPR-16125?redirect=false)** and commented  I have following classes  ```java package com.company1  class A { } ```  ```java package com.company2  class A { }  class B {   A a;   B(A a) { this.a = a; } } ```  with configurations  ```java import com.company1.*;  class Config1 {   @Bean A a() { return new A(); }; }  import com.company2.*;  class Config2 {   @Bean A a() { return new A(); };   @Bean B b(A a) { return new B(a) }; } ```  Expected: A warning or error about duplicated bean ids Actual: Very ambiguous error - Parameter 0 of method b in com.company.Config2 required a bean of type 'com.company2.A' that could not be found.   ---  **Affects:** 4.3.11","closed","in: core,","spring-projects-issues","2017-10-27T14:08:57Z","2019-01-30T14:40:47Z"
"","20504","HttpEntityMethodProcessor discards headers [SPR-15952]","**[Nestor Tarin Burriel](https://jira.spring.io/secure/ViewProfile.jspa?name=nestabur)** opened **[SPR-15952](https://jira.spring.io/browse/SPR-15952?redirect=false)** and commented  When upgrading to spring webmvc from version 4.2.9 to version 4.3.9, we have detected an issue when adding cookies to the response entity from a controller.  In the HttpEntityMethodProcessor class, when handling the return value, if the ServletServerHttpResponse contains already the header that is added to the entityHeaders object, it won't be added to the outputHeaders.  This scenario happens when for example the JSESSIONID cookie is added to the response header before calling a controller and then when the controller tries to add an extra cookie it is ignored due to the described behaviour.  By comparing versions 4.2.x and 4.3.x:  **version 4.2.x**  ```java public void handleReturnValue(...) {   ...   HttpHeaders entityHeaders = responseEntity.getHeaders();   if (!entityHeaders.isEmpty()) {     outputMessage.getHeaders().putAll(entityHeaders);   }   ... } ```  **version 4.3.x**  ```java public void handleReturnValue(...) {   ...   if (!entityHeaders.isEmpty()) {     for (Map.Entry> entry : entityHeaders.entrySet()) {       if (!outputHeaders.containsKey(entry.getKey())) {         outputHeaders.put(entry.getKey(), entry.getValue());       }     }   }   ... } ```  I set the bug level to critical as is blocking us to upgrade from 4.2 to 4.3, but you can decide which level suits you better.  Kind regards,  Néstor  ---  **Affects:** 4.3.9  **Issue Links:** - #18642 Support for HTTP Vary configuration (e.g. in reaction to locale-based rendering)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5bdcb895c077468ca70bfb51780a0ec6d8d5a46a, https://github.com/spring-projects/spring-framework/commit/dedecb9daab0fb1847189ac964965aee9f69d5df  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","type: bug,","spring-projects-issues","2017-09-11T14:08:46Z","2019-01-11T18:09:45Z"
"","20565","Deprecate HibernateJpaSessionFactoryBean (against Hibernate 5.2) [SPR-16016]","**[Naveen Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=krnaveen14)** opened **[SPR-16016](https://jira.spring.io/browse/SPR-16016?redirect=false)** and commented  We're in the process migrating a large spring application to spring-boot and data-jpa. Almost all of the dao's use SessionFactory resource and Hibernate 4's Criteria classes.  Since it's not possible to instantly convert all those dao methods, so we decided to create a **SessionFactory** bean based on this [reference documentation](https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#_infrastructure) and gradually do jpa migration process.  But we end up with **BeanCurrentlyInCreationException** (attached the logs). Reproduced the same issue with a sample project and referred the gitlab url for that project. Until now, i have not yet come up with a workaround, so our migration process is blocked on this.  Glad to know if there is any workaround or any other ways to create SessionFactory bean.  **Note**: Existing application uses thread based session for transaction commits and rollbacks, so it's not feasible to use **entityManager.unwrap(Session.class)** as it's not thread based at all.   ---  **Affects:** 4.3.11, 5.0 RC4, 5.0 GA  **Reference URL:** https://gitlab.com/krnaveen14/spring-orm-sessionfactorybean-bug  **Attachments:** - [direct_sf_unwrap_error.log](https://jira.spring.io/secure/attachment/25127/direct_sf_unwrap_error.log) (_2.30 kB_) - [error.log](https://jira.spring.io/secure/attachment/25121/error.log) (_2.31 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66a6fdaccab4aeffef5b3beed34ad5a0fcf2b386, https://github.com/spring-projects/spring-framework/commit/bb41ccefc04cc2acfa8f8e8b1b9415e30679dcc8  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","type: task,","spring-projects-issues","2017-09-27T07:51:49Z","2017-10-10T14:41:47Z"
"","21067","[Reactor Netty] Incorrect error level logging for client bad request [SPR-16524]","**[Nathan Kooij](https://jira.spring.io/secure/ViewProfile.jspa?name=nathankooij)** opened **[SPR-16524](https://jira.spring.io/browse/SPR-16524?redirect=false)** and commented  On line 65 of ReactorHttpHandlerAdapter a bad request is logged as an error, when it should be logged as a warning instead.  Example: `ERROR 6 --- \[ctor-http-nio-1\] o.s.h.s.r.ReactorHttpHandlerAdapter      () : Invalid URL Illegal character in path at index \[...\]`   ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1278459ad536126a7c707e4b69a0a359f54bb556","closed","type: bug,","spring-projects-issues","2018-02-22T12:12:51Z","2018-04-03T20:34:29Z"
"","20678","Disable CORS credentials by default [SPR-16130]","**[Nanne Baars](https://jira.spring.io/secure/ViewProfile.jspa?name=nanneb)** opened **[SPR-16130](https://jira.spring.io/browse/SPR-16130?redirect=false)** and commented  Using a simple Spring Boot application and defining a REST endpoint with the following annotation:  ```java @GetMapping @CrossOrigin(value = ""*"") fun allBlogs(): Iterable = blogRepository.findAll() ```  Using the following curl request: (for testing purposes only, to easily show the response, you can do this with a XHR script running on foo.com as well)  ``` curl -i -XGET -H ""Origin: http://foo.com"" http://localhost:8083/blogs/ ```  which replies with:  ``` HTTP/1.1 200  Access-Control-Allow-Origin: http://foo.com Access-Control-Allow-Credentials: true Content-Type: application/json;charset=UTF-8 ```  The origin is reflected and here is the strange part the ""Access-Control-Allow-Credentials"" header is set to true. Meaning any site can make a XHR request with credentials, see attached link to see why this can be an issue.  This probably is not the best default setting (using `'*'` with Access-Control-Allow-Credentials: true would have been better because the browser simply does not send credentials along in this case). In my opinion the default settings with `*` should set the Access-Control-Allow-Origin response header to `""*""` and leave out the Access-Control-Allow-Credentials header.  For more information, see: http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html  ---  **Issue Links:** - [DATAREST-1160](https://jira.spring.io/browse/DATAREST-1160) Adapt test cases to new CORS defaults in Spring 5.0.2 - #20893 CORS support broken when updating to Spring 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/652e5c5584dd8c734311784e8b4ceec25b39a163","closed","type: bug,","spring-projects-issues","2017-10-29T19:45:32Z","2019-09-11T20:02:47Z"
"","20783","ReflectUtils produces Warning in Spring Boot 2.0.0.M6 and Java 9.0.1 [SPR-16236]","**[Myungwoon Oh](https://jira.spring.io/secure/ViewProfile.jspa?name=homoefficio)** opened **[SPR-16236](https://jira.spring.io/browse/SPR-16236?redirect=false)** and commented  I made a new Spring Boot 2.0.0.M6 + Java 9.0.1 project to study WebFlux.  When I run application, it runs without Error but with some Warnings related to ReflectUtils.  See https://gist.github.com/HomoEfficio/5075df52298baf8188e6847b0b9cf914#file-springboot2-java9-webflux-console-L18  ---  **Affects:** 5.0.1  **Reference URL:** https://gist.github.com/HomoEfficio/5075df52298baf8188e6847b0b9cf914  **Attachments:** - [build.gradle](https://jira.spring.io/secure/attachment/25306/build.gradle) (_1.05 kB_)  **Issue Links:** - #20414 MethodHandles.Lookup.defineClass for CGLIB class definition purposes (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2017-11-27T15:38:25Z","2019-01-11T13:29:51Z"
"","20780","IllegalArgumentException: Unable to locate persister [SPR-16233]","**[Mohamad ABBAS](https://jira.spring.io/secure/ViewProfile.jspa?name=mabbas)** opened **[SPR-16233](https://jira.spring.io/browse/SPR-16233?redirect=false)** and commented  Hello,  I've created a sample project with two modules:  * The first module **_example-project_** is a spring project that contains a JPA entity + a service class and a DAO class for this entity. (I configure this entity inside an orm.xml file + the persistence unit inside a persist.xml file). * The second module **_example-project-boot_** is a simple spring-boot project that calls the service class of the first module.  Please find below the codebase of this project (you can also find it [here](https://github.com/mabbas85/example-project-parent)).  When I run this project with IntelliJ or Eclipse, everything works as expected.  When I package this same project as a fat jar, then I try to run it, I am getting an  ```java IllegalArgumentException: Unable to locate persister. ```  I noticed that, on startup, a call is made to method  ```java org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader#determinePersistenceUnitRootUrl ```  with **_/Users/mabbas/example-project-parent/example-project-boot/target/example-project-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/lib/example-project.jar!/META-INF/persist.xml_**  and this method is returning **_/Users/mabbas/example-project-parent/example-project-boot/target/example-project-boot-0.0.1-SNAPSHOT.jar_**  instead of  **_/Users/mabbas/example-project-parent/example-project-boot/target/example-project-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/lib/example-project.jar_** (the root of _*persist.xml*_ is **_example-project_** and not **_example-project-boot_**).  Because of this result, I think that the entity defined inside _*example-project.jar*_ is never loaded and then the exception is thrown.  I have first created a spring-boot issue [here](https://github.com/spring-projects/spring-boot/issues/11144), but it seems that this problem is more about spring-orm than spring-boot.  Thanks in advance,   ---  **Affects:** 4.3.12  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/11144  **Attachments:** - [example-project-parent.zip](https://jira.spring.io/secure/attachment/25304/example-project-parent.zip) (_350.82 kB_)  1 votes, 4 watchers","open","in: data,","spring-projects-issues","2017-11-25T22:38:40Z","2020-05-01T06:20:21Z"
"","20724","Redirect from controller behind zuul proxy [SPR-16176]","**[Modestas Kažinauskas](https://jira.spring.io/secure/ViewProfile.jspa?name=m.kazinauskas)** opened **[SPR-16176](https://jira.spring.io/browse/SPR-16176?redirect=false)** and commented  Could you please check this issue. This is a problem till now, even with latest spring versions. https://stackoverflow.com/questions/35453939/spring-redirect-url-issue-when-behind-zuul-proxy   ---  **Affects:** 4.3.12  **Reference URL:** https://stackoverflow.com/questions/35453939/spring-redirect-url-issue-when-behind-zuul-proxy","closed","status: declined,","spring-projects-issues","2017-11-09T10:46:09Z","2019-01-12T16:32:54Z"
"","20738","Support for form data via @RequestParam on WebFlux [SPR-16190]","**[Miroslav Hrúz](https://jira.spring.io/secure/ViewProfile.jspa?name=jinxx)** opened **[SPR-16190](https://jira.spring.io/browse/SPR-16190?redirect=false)** and commented  In Spring 4 and Spring 5/ Web (Servlet API) you could write annotated controller method without explicitly say `@GetMapping` or `@PostMapping` and without any `@RequestParam` or `@ModelAttribute`  ```java @RequestMapping(""/get/and/post/form-data-www-urleconded"") public String getAndPost(String param1, String param2) { 	return ""Got: param1=""+param1+"", param2=""+param2; } ```  Which does except others:  1. Binds /get/and/post/form-data-www-urleconded to be used with HTTP GET and param1, param2 parameters to HTTP query parameters 2. Binds /get/and/post/form-data-www-urleconded to be used with HTTP POST form data www-urlencoded and param1, param2 to HTTP POST form data. 3. Binds /get/and/post/form-data-www-urleconded to be used with HTTP POST multipart data (FormFieldPart) and param1, param2 to HTTP POST multipart data  In Spring WebFlux 5.0.1 it's not working. It works in Spring Web 5.0.1 and in Spring Web 4.x.  The desired use case is when you want to expose REST API for both HTTP GET and POST and you want to simple write the method ones, not to use `@GetMapping` with appropriate `@RequestParam` or `@PostMapping` with `@ModelAttribute` or `@RequestBody`. The beauty is not to use any argument annotation at all.  I've attached example projects for spring 4.x, Spring 5.0.1 Web and Spring 5.0.1 WebFlux.  requestMapping_for_post test is failing and should not.  ```java @Test public void requestMapping_for_get() { 	final WebTestClient client = WebTestClient.bindToController(new TestController()).build();  	final String responseBody = client.get() 			.uri(""/get/and/post/form-data-www-urleconded?param1=111¶m2=222"") 			.exchange() 			.expectStatus().isOk() 			.expectBody(String.class) 			.returnResult().getResponseBody();  	Assert.assertEquals(""Got: param1=111, param2=222"", responseBody); }  @Test public void requestMapping_for_post() { 	final WebTestClient client = WebTestClient.bindToController(new TestController()).build();  	final MultiValueMap formData = new LinkedMultiValueMap<>(); 	formData.add(""param1"", ""111""); 	formData.add(""param2"", ""222"");  	final String responseBody = client.post() 			.uri(""/get/and/post/form-data-www-urleconded"") 			.body(BodyInserters.fromFormData(formData)) 			.exchange() 			.expectStatus().isOk() 			.expectBody(String.class) 			.returnResult().getResponseBody();  	Assert.assertEquals(""Got: param1=111, param2=222"", responseBody); } ```  ---  **Affects:** 5.0.1  **Attachments:** - [FormDataWorkaround.java](https://jira.spring.io/secure/attachment/25719/FormDataWorkaround.java) (_2.81 kB_) - [spring4-formData.zip](https://jira.spring.io/secure/attachment/25291/spring4-formData.zip) (_58.26 kB_) - [spring5-webflux-formdata.zip](https://jira.spring.io/secure/attachment/25289/spring5-webflux-formdata.zip) (_59.16 kB_) - [spring5-web-formdata.zip](https://jira.spring.io/secure/attachment/25290/spring5-web-formdata.zip) (_59.02 kB_)  **Issue Links:** - #20067 Remove support for ""request params"" from WebFlux","open","type: enhancement,","spring-projects-issues","2017-11-13T15:19:26Z","2022-01-11T09:39:48Z"
"","20458","ClassNotFoundException exception when trying to start new created gradle project via Initializr [SPR-15904]","**[Milan Adamovic](https://jira.spring.io/secure/ViewProfile.jspa?name=milannz)** opened **[SPR-15904](https://jira.spring.io/browse/SPR-15904?redirect=false)** and commented  When i create simple Spring gradle project via Spring Initializr and try to run it in Intellij every time i get: ClassNotFoundException: org.springframework.boot.SpringApplication  If i use same setup but instead gradle project i choose maven, then everything works great.  Steps to reproduce: 1. Go to Spring Initializr, choose gradle project. 2. Set some random names or keep demo. 3. Add Web and Rest as dependencies. 4. Download and import in Intellij as gradle project. 5. Go to run settings (Edit Configurations.. -> + -> Applications), set Main class and module, click save and close dialog. 6. Run!  **Expected:** Everything works fine exactly like maven generated project.  **Actual:** You get exception: ClassNotFoundException: org.springframework.boot.SpringApplication  Spring version: latest Intellj version: IntelliJ IDEA 2016.1.4 Build #IC-145.2070, JRE: 1.8.0_76-release-b198 x86_64 JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o   --- No further details from [SPR-15904](https://jira.spring.io/browse/SPR-15904?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-08-26T11:39:34Z","2019-01-12T05:20:23Z"
"","20674","WebSocketSession should expose method to indicate whether it is still active [SPR-16126]","**[Mikhail Konovalov](https://jira.spring.io/secure/ViewProfile.jspa?name=mskonovalov)** opened **[SPR-16126](https://jira.spring.io/browse/SPR-16126?redirect=false)** and commented  Hi  in non-reactive API WebSocketSession has method isOpen. In reactive - not!  How can I determine whether client closed the connection to stop my Flux?  ---  **Affects:** 5.0 GA  **Issue Links:** - #20803 onClose event for WebSocket on Reactive stack (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2017-10-27T16:06:35Z","2019-01-11T13:15:13Z"
"","21013","HibernateJpaDialect: Default to MySQL55Dialect based on InnoDB [SPR-16468]","**[Mike Eltsufin](https://jira.spring.io/secure/ViewProfile.jspa?name=meltsufin)** opened **[SPR-16468](https://jira.spring.io/browse/SPR-16468?redirect=false)** and commented  `MySQL5Dialect` set currently as default is based on the MyISAM storage engine, which is not recommended. MySQL 5.5 has been out since 2010. So, it's pretty safe to go with it as the default dialect.  Related to: https://github.com/spring-cloud/spring-cloud-gcp/issues/392.  See PR: https://github.com/spring-projects/spring-framework/pull/1660  ---  **Affects:** 5.0.3  **Reference URL:** https://stackoverflow.com/questions/1459265/hibernate-create-mysql-innodb-tables-instead-of-myisam  **Issue Links:** - #21005 Add SAP HANA to common JPA database platforms  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1660  1 votes, 4 watchers","closed","status: duplicate,","spring-projects-issues","2018-02-05T16:12:13Z","2019-03-08T15:12:35Z"
"","20946","Path variable doesn't handle periods correctly [SPR-16400]","**[Michel Jung](https://jira.spring.io/secure/ViewProfile.jspa?name=micheljung)** opened **[SPR-16400](https://jira.spring.io/browse/SPR-16400?redirect=false)** and commented  Assume this controller:  ``` @SpringBootApplication @RestController public class PathBugApplication {  	public static void main(String[] args) { 		SpringApplication.run(PathBugApplication.class, args); 	}  	@RequestMapping(path = ""/{token}"", method = RequestMethod.GET) 	public String bug(@PathVariable(""token"") String token) { 		return token; 	} } ```  When calling `http://localhost:8080/a.b.c`, what is the expected output?  1. `a.b.c` 2. `a.b`  If 2. then everything is fine and I just need to RTFM (can you point me to it?) If 1. then there's a bug, because the result is 2.   ---  **Affects:** 4.3.13","closed","status: declined,","spring-projects-issues","2018-01-18T23:36:26Z","2019-01-13T20:27:36Z"
"","20465","CGLIB forwarding broken for package-visible method on @Repository bean [SPR-15911]","**[Michel Jung](https://jira.spring.io/secure/ViewProfile.jspa?name=micheljung)** opened **[SPR-15911](https://jira.spring.io/browse/SPR-15911?redirect=false)** and commented  Posted in https://stackoverflow.com/questions/45955727/autowired-field-is-null-in-cglib-enhanced-bean  I have this repository:  ``` @Repository public class MyRepository {    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;    public MyRepository(NamedParameterJdbcTemplate namedParameterJdbcTemplate) {     this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;   }    void doSomething() {     namedParameterJdbcTemplate.update(...);   } } ```  With Spring 4.3.7 everything worked as expected. But it no longer does since Spring 4.3.8:  When the bean is being instantiated, constructor-injection works as expected. However, when `doSomething()` is called, the debugger shows that my repository is an instance of `MyRepository$$EnhancerBySpringCGLIB` (wasn't with Spring 4.3.7) and `namedParameterJdbcTemplate` is `null`.  If I use `@Service` instead of `@Repository` the bean does **not** get CGLIB enhanced and everything works as expected.  I guess there's a reason why repositories are now GCLIB enhanced, but why doesn't auto wiring work anymore? I tried removing `final` but it didn't change anything.    ---  **Affects:** 4.3.8  **Attachments:** - [spr-15911-v4.3.7.log](https://jira.spring.io/secure/attachment/25085/spr-15911-v4.3.7.log) (_4.52 MB_) - [spr-15911-v4.3.8.log](https://jira.spring.io/secure/attachment/25084/spr-15911-v4.3.8.log) (_4.50 MB_)","open","in: core,","spring-projects-issues","2017-08-30T12:31:26Z","2020-03-13T22:28:47Z"
"","20983","Missing java.time.Year Formatter [SPR-16437]","**[Michał Sobkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=perceptron8)** opened **[SPR-16437](https://jira.spring.io/browse/SPR-16437?redirect=false)** and commented  Please consider adding some kind of `org.springframework.format.datetime.standard.YearFormatter` (similarly to `org.springframework.format.datetime.standard.YearMonthFormatter`).  I believe it's more convenient and self-explanatory to use `java.time.Year` as param in e.g. handlers whenever it really means a year and so on.  ---  **Affects:** 5.0.3  **Issue Links:** - #19405 `@DateTimeFormat` support for YearMonth, MonthDay, Year  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef2e16912daf0e4ca2ed00c0de32ea3b84991b32","closed","type: enhancement,","spring-projects-issues","2018-01-30T11:34:28Z","2019-01-13T04:54:05Z"
"","20445","no dependencyManagement in spring-framework-bom [SPR-15890]","**[Michał Sobkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=perceptron8)** opened **[SPR-15890](https://jira.spring.io/browse/SPR-15890?redirect=false)** and commented  There is no \ section in spring-framework-bom.pom in recent builds*.  Please, compare http://repo.spring.io/milestone/org/springframework/spring-framework-bom/5.0.0.RC3/spring-framework-bom-5.0.0.RC3.pom with http://repo.spring.io/snapshot/org/springframework/spring-framework-bom/5.0.0.BUILD-SNAPSHOT/spring-framework-bom-5.0.0.BUILD-20170821.175536-484.pom  *) https://github.com/spring-projects/spring-framework/commit/2eeb428e95c188f60f9fe81e2a6f5f859d52bacb#diff-db75b55a99552a4638e4bdfe275c4a5e maybe?  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20440 Reorganize Gradle build","closed","type: bug,","spring-projects-issues","2017-08-22T12:01:08Z","2019-01-14T04:34:23Z"
"","20524","Clarify @Bean return type recommendation in case of multiple interfaces [SPR-15973]","**[Michal Domagala](https://jira.spring.io/secure/ViewProfile.jspa?name=michaldo)** opened **[SPR-15973](https://jira.spring.io/browse/SPR-15973?redirect=false)** and commented  I discovered than bean graph may depend on order of bean declaration. I always thought that assembly algorithm analyze injections and determine order of beans creation.  However, example below shows that bean graph depend on order of declaration.  ```java public static void main(String[] args) { 		SpringApplication.run(MyApp.class, args); 	} 	 	public static interface A {} 	 	public static interface B {} 	 	public static interface C {} 	 	public static class ABC implements A,B,C {} 	 	@Bean Object checkB(@Autowired(required = false) B b) { 		System.out.println(""B is "" + b); 		return new Object(); 	} 	 	@Bean A a() { 		System.out.println(""abc""); 		return new ABC(); 	} 	 	@Bean Object checkC(@Autowired(required = false) C c) { 		System.out.println(""C is "" + c); 		return new Object(); 	} ```  Actual:  > B is null > abc > C is com.sixdegreeshq.MyApp$ABC@17f7cd29  Expected: Rather  > B is null > abc > C is null  but without a doubt B and C should be symmetric   ---  **Affects:** 4.3.11  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ffe80ff0029d5d0cc2cb66ebf7ad023f4792d356, https://github.com/spring-projects/spring-framework/commit/963dd3f804657f4002ea4a68dc8d915a00261198  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","in: core,","spring-projects-issues","2017-09-18T22:18:49Z","2017-09-28T12:14:37Z"
"","21059","SSE writer does not allow customizing the charset [SPR-16516]","**[Michael Stadler](https://jira.spring.io/secure/ViewProfile.jspa?name=michaelstdlr)** opened **[SPR-16516](https://jira.spring.io/browse/SPR-16516?redirect=false)** and commented  I've been struggling to set the encoding to UTF-8 for my _text/event-stream_ content. I would like to change the encoding so that clients (e.g. the browser) knows how to interpret umlaut characters correctly (_e.g. ä, ü, ö_). I posted this problem on Stack Overflow (see Reference URL), where a more detailed description can be found. Thank you.  ---  **Affects:** 5.0.4  **Reference URL:** https://stackoverflow.com/questions/48864564/spring-boot-webflux-set-utf-8-encoding  **Issue Links:** - #21082 Jackson Encoder(s) ignore charset in MimeType  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0e90ed006a06580d64a2f936ddba0f5198ead41","closed","type: enhancement,","spring-projects-issues","2018-02-19T14:14:14Z","2019-01-11T14:38:00Z"
"","21094","HiddenHttpMethodFilter breaks HandlerFunction with BodyExtractors.toFormData [SPR-16551]","**[Michael Simons](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.simons)** opened **[SPR-16551](https://jira.spring.io/browse/SPR-16551?redirect=false)** and commented  I want to use `org.springframework.web.filter.reactive.HiddenHttpMethodFilter`. In a Spring Boot application, I can just add this as a Bean, it's recognized and works as expected. Incoming POST-requests are routed accordingly. But: I cannot access form data in all cases: As long as I use annotated controller methods taking in a `ServerWebExchange` and using [getFormData ](https://docs.spring.io/spring/docs/5.0.3.RELEASE/javadoc-api/) or a `Mono` of a model attribute as shown [here](https://github.com/faucet-pipeline/faucet-pipeline-spring-boot-starter/blob/5f464d5d0ed819e0e12edb8b269442486db49956/demo-webflux/src/main/kotlin/org/faucet_pipeline/demo/webflux/Idea.kt#L74) everything works well.  If I want to use a `HandlerFunction` however, it collides while using the form data. The HiddenMethodFilter works, but I cannot access form data any more. Using a handler function likes this  ```java final HandlerFunction handlerFunction = req -> req               .body(toFormData())               .map(MultiValueMap::toSingleValueMap)               .flatMap(formData -> ok().body(Mono.just(""You posted "" + formData.get(""content"")), String.class))               .switchIfEmpty(ServerResponse.badRequest().build()); ```  breaks with an `java.lang.IllegalStateException`: Only one connection receive subscriber allowed in the `.body(toFormData())`-call  ``` 19:33:36.576 [reactor-http-nio-2] ERROR org.springframework.web.server.adapter.HttpWebHandlerAdapter - Failed to handle request [POST http://localhost:8080/stuff] java.lang.IllegalStateException: Only one connection receive subscriber allowed. 	at reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:276) 	at reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124) 	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62) 	at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242) ```  I have attached a demo project with the full code.  The test will work as soon as the hidden method filter is removed and the routing is changed to match `POST` or the test client uses `PUT`.  ---  **Affects:** 5.0.4  **Attachments:** - [kaputtflux.zip](https://jira.spring.io/secure/attachment/25410/kaputtflux.zip) (_10.44 kB_)  **Issue Links:** - #21824 Document the need for consistent access to form data through ServerWebExchange  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c56317928fa457f83a93411c097f150c242de6a5","closed","type: bug,","spring-projects-issues","2018-03-04T18:46:26Z","2019-01-11T14:33:07Z"
"","20549","Inefficient equals logic in Spring Cache [SPR-16000]","**[Michael Rumpf](https://jira.spring.io/secure/ViewProfile.jspa?name=mrumpf)** opened **[SPR-16000](https://jira.spring.io/browse/SPR-16000?redirect=false)** and commented  We are using Spring Cache in one of our high traffc microservices (Spring Boot 1.3.8). A profiling with the Java Flight Recorder revealed a high amount of char[] data bein allocated. The stacktrace shows as the source of the issue the getOperationDescription() method of the CacheOperation class.  ``` char[] java.util.Arrays.copyOf(char[], int)	93222 void java.lang.AbstractStringBuilder.expandCapacity(int)	93124 void java.lang.AbstractStringBuilder.ensureCapacityInternal(int)	93124 AbstractStringBuilder java.lang.AbstractStringBuilder.append(String)	80015 StringBuilder java.lang.StringBuilder.append(String)	79938 StringBuilder org.springframework.cache.interceptor.CacheOperation.getOperationDescription()	51652 StringBuilder org.springframework.cache.interceptor.CacheableOperation.getOperationDescription()	51138 String org.springframework.cache.interceptor.CacheOperation.toString()	51138 boolean org.springframework.cache.interceptor.CacheOperation.equals(Object)	36476 boolean org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationCacheKey.equals(Object)	36476 Object java.util.concurrent.ConcurrentHashMap.get(Object)	36476 CacheAspectSupport$CacheOperationMetadata org.springframework.cache.interceptor.CacheAspectSupport.getCacheOperationMetadata(CacheOperation, Method, Class)	36476 CacheAspectSupport$CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.getOperationContext(CacheOperation, Method, Object[], Object, Class)	36476 void org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContexts.(CacheAspectSupport, Collection, Method, Object[], Object, Class)	36476 Object org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheOperationInvoker, Object, Method, Object[])	36476 Object org.springframework.cache.interceptor.CacheInterceptor.invoke(MethodInvocation)	36476 Object org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()	36476 Object org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(Object, Method, Object[], MethodProxy)	35404 ```  When looking at the code you can see that the CacheOperation.equals() uses toString() to check whether 2 instances of CacheOperation are equal.  Using the toString() method seems to be very inefficient because each time a StringBuilder is used, which is filled by many calls to append(). When the String Builder is not correctly sized at initialization time. The issue gets worse by having to expand its capacity multiple times, see expandCapacity(int).  CacheOperation:  ``` protected StringBuilder getOperationDescription() {      StringBuilder result = new StringBuilder(getClass().getSimpleName());      result.append(""["").append(this.name);      result.append(""] caches="").append(this.cacheNames);      result.append("" | key='"").append(this.key);      result.append(""' | keyGenerator='"").append(this.keyGenerator);      result.append(""' | cacheManager='"").append(this.cacheManager);      result.append(""' | cacheResolver='"").append(this.cacheResolver);      result.append(""' | condition='"").append(this.condition).append(""'"");      return result; } ```  CacheableOperation:  ``` @Override protected StringBuilder getOperationDescription() {      StringBuilder sb = super.getOperationDescription();      sb.append("" | unless='"");      sb.append(this.unless);      sb.append(""'"");      sb.append("" | sync='"");      sb.append(this.sync);      sb.append(""'"");      return sb; } ```  The issue is probably not that toString() is used inside equals(), but that the StringBuilder creates a string each time equals() is invoked on an annotation parameter that does not change at runtime.  ---  **Affects:** 4.2.9  **Attachments:** - [2017-09-24 22_55_08-Oracle Java Mission Control.png](https://jira.spring.io/secure/attachment/25117/2017-09-24+22_55_08-Oracle+Java+Mission+Control.png) (_294.17 kB_)  **Issue Links:** - #18542 Improve CacheOperation equals/hashCode implementation performance    (_**""duplicates""**_) - #21033 `@Cacheable` annotation lead to a huge memory allocation from the side of OperationCache equals/hashCode (_**""is duplicated by""**_)","closed","status: duplicate,","spring-projects-issues","2017-09-24T21:07:42Z","2019-01-13T05:04:04Z"
"","20843","ResourceUrlProvider.getForLookupPath fails if path contains double slashes [SPR-16296]","**[Michael Freitag](https://jira.spring.io/secure/ViewProfile.jspa?name=freitagm)** opened **[SPR-16296](https://jira.spring.io/browse/SPR-16296?redirect=false)** and commented  If the ResourceUrlProvider.getLookupForPath(String) method is called with a path containing double slashes, a StringIndexOutOfBoundsException is thrown. This situation may arise, for example, if a third-party library is sloppily programmed and contains references to resources with double slashes. As developers may not be able to modify such libraries, the ResourceUrlProvider should be able to handle such requests.  Below is a test case illustrating the issue.  ```java import org.junit.Test; import org.springframework.web.servlet.resource.ResourceHttpRequestHandler; import org.springframework.web.servlet.resource.ResourceResolver; import org.springframework.web.servlet.resource.ResourceUrlProvider;  import static org.junit.Assert.assertEquals; import static org.mockito.ArgumentMatchers.any; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.when;  public class ResourceUrlProviderTest {      @Test     public void getForLookupPathShouldNotFailIfPathContainsDoubleSlashes() {         // given         ResourceResolver mockResourceResolver = mock(ResourceResolver.class);         when(mockResourceResolver.resolveUrlPath(any(), any(), any())).thenReturn(""some-path"");          ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler();         handler.getResourceResolvers().add(mockResourceResolver);          ResourceUrlProvider provider = new ResourceUrlProvider();         provider.getHandlerMap().put(""/some-pattern/**"", handler);          // when         String lookupForPath = provider.getForLookupPath(""/some-pattern/some-lib//some-resource"");          // then         assertEquals(""/some-pattern/some-path"", lookupForPath);     } } ```    ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea73ec5c41d3a706a871ada0e597465ef971c4f2","closed","type: enhancement,","spring-projects-issues","2017-12-13T13:01:41Z","2018-01-23T10:05:12Z"
"","20844","Bean Validation does not work with Kotlin  [SPR-16297]","**[Michael Böckling](https://jira.spring.io/secure/ViewProfile.jspa?name=buddycasino)** opened **[SPR-16297](https://jira.spring.io/browse/SPR-16297?redirect=false)** and commented  I made a test case: https://github.com/MrBuddyCasino/spring-validator-test  Execute the following test case: `de.codecentric.controller.AccountControllerShould`  **Expected result**: the request should fail with a BadRequest, the unit test should fail  **Actual result**: the request succeeds, the unit test fails  I made some tests and this version works:  ```java class CreateUserDTO {      @Email     var email: String? = null      @Size(min = 8)     var password: String? = null } ```  This version does not:  ```java class CreateUserDTO(         @Email         val email: String,          @Size(min = 8)         val password: String) { } ```  This version does not:  ```java data class CreateUserDTO(         @Email         val email: String,          @Size(min = 8)         val password: String) { } ```  So it seems to be a problem with immutable Kotlin properties. Spring Boot 2 advertises Kotlin support, so this should work IMHO.  also see: https://github.com/spring-projects/spring-boot/issues/11343   ---  **Affects:** 5.0.2  **Reference URL:** https://github.com/MrBuddyCasino/spring-validator-test","closed","in: core,","spring-projects-issues","2017-12-13T16:06:56Z","2019-01-12T05:19:44Z"
"","20539","PathMatchingResourcePatternResolver provides duplicate resources when using classpath* prefix combined with ant-style [SPR-15989]","**[Maël OUAHI](https://jira.spring.io/secure/ViewProfile.jspa?name=ma%C3%ABl%20ouahi)** opened **[SPR-15989](https://jira.spring.io/browse/SPR-15989?redirect=false)** and commented  PathMatchingResourcePatternResolver provides duplicate resources when using ""classpath*"" prefix combined with Ant-style patterns.  I'll attach an application that reproduces the problem.The application uses the location pattern ""classpath*:/*-perm.json"" to resolve Resources. If you package and run it  ``` mvn clean package && java -jar target/resources-0.0.1-SNAPSHOT.jar ```  You should see the following output:  ``` file:/D:/resources/target/resources-0.0.1-SNAPSHOT.jar!/ file:D:\resources\target\resources-0.0.1-SNAPSHOT.jar!/ file:/C:/Program%20Files/Java/jdk1.8.0_40/jre/lib/ext/dnsns.jar!/ ... file:/D:/resources/target/resources-0.0.1-SNAPSHOT.jar!/domaine-perm.json file:D:\resources\target\resources-0.0.1-SNAPSHOT.jar!/domaine-perm.json ```  ---  **Affects:** 4.3.8, 4.3.9, 4.3.10, 4.3.11  **Attachments:** - [resources.zip](https://jira.spring.io/secure/attachment/25111/resources.zip) (_1.04 MB_)  **Issue Links:** - #18260 PathMatchingResourcePatternResolver does not consider manifest based classpaths - #20665 PathMatchingResourcePatternResolver returns duplicate resources when using classpath* prefix  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d8e3d4185b9f1158de31c4f9a53f2a036a041df, https://github.com/spring-projects/spring-framework/commit/a839477d4a4e2b52464381c69ba198a7c703fe9f  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","in: core,","spring-projects-issues","2017-09-21T13:20:10Z","2019-01-14T04:37:57Z"
"","21079","DefaultMessageListenerContainer should interrupt worker threads when not returning on shutdown [SPR-16536]","**[Maxim Popov](https://jira.spring.io/secure/ViewProfile.jspa?name=mpopov)** opened **[SPR-16536](https://jira.spring.io/browse/SPR-16536?redirect=false)** and commented  **[configuration]** The problem is reproduced whem JMS prefetch size is set to 0.  ```java connectionFactory.getPrefetchPolicy().setQueuePrefetch(0); ```  **[description]** _`@DirtiesContext`(classMode=DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)_ annotations triggers _org.springframework.context.support.DefaultLifecycleProcessor.LifecycleGroup.stop()_ method which tries to shutdown bean _org.springframework.jms.config.JmsListenerEndpointRegistry_.  When _JmsListenerEndpointRegistry_ stops, it calls stop on _DefaultMessageListenerContainer_ which is marked stopped by flag 'running'  ```java this.running = false; ```  But _ActiveMQMessageConsumer_ is blocked by waiting a message from broker when prefetch size is 0  ```java if (info.getPrefetchSize() == 0) {     md = dequeue(-1); // We let the broker let us know when we timeout. } else {     md = dequeue(timeout); } ```  So _DefaultMessageListenerContainer_ can't react on flag 'running' and continue to wait a message.  As result _DefaultLifecycleProcessor.LifecycleGroup.stop()_ is waiting 30 seconds to stop normally without any success.  ```java latch.await(this.timeout, TimeUnit.MILLISECONDS); ```  ---  **Affects:** 4.3.14  **Issue Links:** - #21128 Application Server Fail to Stop Application and server while stopping transactions with spring - #21148 ThreadPoolTaskExecutor should cancel all remaining Future handles on shutdown  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c6bd0c9f3dff92a63946c0d790a9c30f093df371, https://github.com/spring-projects/spring-framework/commit/59f12635f9d0f3efc01131802ff1e69d717b5f08, https://github.com/spring-projects/spring-framework/commit/95aad9cdc2eb3a9811d117a97bb1e96cf9787017","closed","type: enhancement,","spring-projects-issues","2018-02-26T07:55:39Z","2019-01-13T04:51:16Z"
"","20910","Add tests and doc for collections to Jaxb2XmlEncoder [SPR-16363]","**[max.cai](https://jira.spring.io/secure/ViewProfile.jspa?name=strtsoia)** opened **[SPR-16363](https://jira.spring.io/browse/SPR-16363?redirect=false)** and commented  Default Jaxb2XmlEncoder is not capable of marshal collections. The reason is Line 40 of Jaxb2XmlEncoder calls line 22 of JaxbContextContainer which ultimately call Line 36 of JaxbContextContainer where causes problem. **jaxbContext = JAXBContext.newInstance(clazz);** If I pass in wrap class, it returns empty xml. Instead of binding single class, spring should have feature let user bind multiple classes or bind by contextPaths just like org.springframework.oxm.jaxb.Jaxb2Marshaller provide.  For example. (I did not include xml annotation) abstract class model...... Class A extends model..... Class B {..... protected List\ items = new ArrayList(); public List\ getItems() { return items. } }  ServerResponse.ok().contentType(MediaType.APPLICATION_XML).body(BodyInserters.fromObject(B)); Above call returns empty result since jaxbContext only loads single Class B and has no ware of Class A.    ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c628293a2eda10ab07d77f4d2ae832d134c578c","closed","type: task,","spring-projects-issues","2018-01-09T20:53:03Z","2018-08-17T09:42:43Z"
"","20722","Autowiring by name (interface vs class) [SPR-16174]","**[Max Samsonov](https://jira.spring.io/secure/ViewProfile.jspa?name=drenadan)** opened **[SPR-16174](https://jira.spring.io/browse/SPR-16174?redirect=false)** and commented  Lets say we have 2 beans that implement interface A:  ``` interface A {} class B implements A {}  @Configuration public class C {   @Bean public A red() { return new B(); }   @Bean public A black() { return new B(); } } ```  If we autowire them later, in 2 fields, we won't get an exception. But, we will randomly get same bean injected in both fields.  ``` @Service public class ServiceImpl {   private final A red;   private final A black;   public ServiceImpl(A red, A black) {     this.red = red;     this.black = black;   } } ```  Otherwise, if we change type of fields (from interface to class), it will work as expected.  ``` @Service public class ServiceImpl {   private final B red;   private final B black;   public ServiceImpl(B red, B black) {     this.red = red;     this.black = black;   } } ```  ---  **Affects:** 4.3.12  **Issue Links:** - #20690 Field name is used to match on bean name when `@Autowired` matches several beans by type","closed","in: core,","spring-projects-issues","2017-11-08T12:31:32Z","2019-01-13T05:00:56Z"
"","20503","ExceptionHandlerMethodResolver unwraps cause, but InvocableHandlerMethod does not support it [SPR-15951]","**[Mauro Molinari](https://jira.spring.io/secure/ViewProfile.jspa?name=mauromol)** opened **[SPR-15951](https://jira.spring.io/browse/SPR-15951?redirect=false)** and commented  In Spring Framework 4.3, the `org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver` should support exception unwrapping (i.e.: extracting the cause from a wrapping exception) to properly invoke methods annotated with `@ExceptionHandler` for an exception type which is the runtime type of the cause of the wrapping exception.  This is performed thanks to `org.springframework.web.method.annotation.ExceptionHandlerMethodResolver.resolveMethod(Exception)` performing an attempt with the exception cause if no method is resolved for the wrapping exception type. By the way, my first question is: shouldn't `org.springframework.web.method.annotation.ExceptionHandlerMethodResolver.resolveMethod(Exception)` perform a recursive search on causes?  Anyway, suppose we do not need recursion here, as in my case. Once `org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(HttpServletRequest, HttpServletResponse, HandlerMethod, Exception)` has resolved the method and put it into a `org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod` instance, it calls `org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletWebRequest, ModelAndViewContainer, Object...)`, which fails because it can't unwrap the exception like the method resolver did. This is because neither `org.springframework.web.method.support.InvocableHandlerMethod.resolveProvidedArgument(MethodParameter, Object...)` nor anybody calling it performs such unwrapping.  Let's explain this with an example.  Suppose I have my controller method:  ```java public void doSomething() throws WrappingException {   throw new WrappingException(new MyException()); } ```  And I have this in my controller advice:  ```java @ExceptionHandler(MyException.class) @ResponseStatus(HttpStatus.FORBIDDEN) @ResponseBody public String handleMyException(final MyException e) {   return ""handled!""; } ```  By debugging I see that when the controller method throws its `WrappingException` with a `MyException` instance as its cause, the `handleMyException` handler method is correctly resolved by `ExceptionHandlerMethodResolver`, but then `org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletWebRequest, ModelAndViewContainer, Object...)` fails because `org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(NativeWebRequest, ModelAndViewContainer, Object...)` fires an `IllegalStateException` with message:  ``` Could not resolve method parameter at index 0 in public void mypackage.MyControllerAdvice.handleMyException(mypackage.MyException): No suitable resolver for argument 0 of type 'mypackage.MyException' ```  This is because `org.springframework.web.method.support.InvocableHandlerMethod.resolveProvidedArgument(MethodParameter, Object...)` simply tries to match the method arguments by type, and hence expects a `WrappingException` to be passed to the handler method.   ---  **Affects:** 4.3.10","closed","in: web,","spring-projects-issues","2017-09-11T14:08:05Z","2019-08-14T08:23:31Z"
"","20482","Value of ""produces"" on RequestMapping not used when writing to an OutputStream [SPR-15928]","**[Mauro Molinari](https://jira.spring.io/secure/ViewProfile.jspa?name=mauromol)** opened **[SPR-15928](https://jira.spring.io/browse/SPR-15928?redirect=false)** and commented  I have a `@RestController` having a method like this:  ```java @GetMapping(value = ""invoices/{id}"", produces = MediaType.APPLICATION_XML_VALUE) public void getInvoice(@PathVariable long id, OutputStream out) {   // some code that streams XML contents to out } ```  I understand that `produces=MediaType.APPLICATION_XML_VALUE` tells Spring to restrict the set of requests to be served by that method. But Spring documentation also says:  > Furthermore, use of the produces condition ensures the actual content type used to generate the response respects the media types specified in the produces condition.  However, what I observe in my case is that the response body correctly contains the XML contents I stream, but no `ContentType` header is set. Probably `produces` was designed to be honoured by `HttpMessageConverter` s only, but then I think I need some other way to accomplish what I'm trying to do.  The only solution I found is to replace the `OutputStream` input parameter with a `ServletResponse`/`HttpServletResponse`, then setting the content type on it and stream the response to its output stream. However, in this way my code is more tightly bound to the Servlet API.  Other attempts I made is to return a `ResponseEntity` (with just headers and status code set) or a `HttpHeaders` object directly, to set the `ContentType` header explicitly, but in both cases the return type seems to be completely ignored in this scenario.  Unless there's another way I could not find... otherwise I was wondering how an `OutputStream` or `Writer` input parameter could be used profitably by a Controller class, if there's no way to set the content type.   ---  **Affects:** 4.3.10","closed","type: enhancement,","spring-projects-issues","2017-09-06T15:09:22Z","2017-12-12T15:08:45Z"
"","20793","Reactive WebClient corrupts uploaded files [SPR-16246]","**[Matúš Sekáč](https://jira.spring.io/secure/ViewProfile.jspa?name=msekac)** opened **[SPR-16246](https://jira.spring.io/browse/SPR-16246?redirect=false)** and commented  When I try to upload some ordinary file through reactive WebClient, the file ends up corrupted. It happens with audio files as well as text files. I tried creating request body manually or via MultiPartBodyBuilder in newer version and the result was same. The behavior is same when using WebTestClient.  I also tried uploading to Apache web server and the files were still corrupted.  Sample test:  ```java 	@Test 	public void audioFile() throws IOException { 		ClassPathResource resource = new ClassPathResource(TEST_WAV_NAME);  		LinkedMultiValueMap> body = new LinkedMultiValueMap<>(); 		HttpHeaders headers = new HttpHeaders(); 		headers.setContentType(MediaType.APPLICATION_OCTET_STREAM); 		HttpEntity part = new HttpEntity<>(resource, headers); 		body.add(""file"", part);  		doTest(hash(resource), body); 	}  	private static long hash(AbstractFileResolvingResource resource) throws IOException { 		CRC32 crc = new CRC32(); 		crc.update(Files.readAllBytes(resource.getFile().toPath())); 		return crc.getValue(); 	}  	private void doTest(long hash, LinkedMultiValueMap> body) throws IOException { 		String result = WebClient.builder() 				.baseUrl(""http://localhost:8080"") 				.build() 				.post() 				.uri(""/upload"") 				.body(BodyInserters.fromMultipartData(body)) 				.retrieve() 				.bodyToMono(String.class) 				.block(); 		Assert.assertEquals(String.valueOf(hash), result); 	} ```  And corresponding controller:  ```java @PostMapping(value = ""/upload"", consumes = MediaType.MULTIPART_FORM_DATA_VALUE) public Mono upload(@RequestPart(""file"") FilePart part) throws IOException {      File tf = Files.createTempFile(""spring-test"", ""temp"").toFile();      part.transferTo(tf);      CRC32 crc = new CRC32();      crc.update(Files.readAllBytes(tf.toPath()));      return Mono.just(String.valueOf(crc.getValue())); } ```  The whole sample project with tested files is attached.   ---  **Affects:** 5.0 GA  **Attachments:** - [spring_reaxtiveweb_test.zip](https://jira.spring.io/secure/attachment/25310/spring_reaxtiveweb_test.zip) (_2.34 MB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b36af8a11fba610d39cc0464565d1413b5a5b293, https://github.com/spring-projects/spring-framework/commit/91d3e4402f11317c157dfbbdd9bd01bf689f8b1f","closed","type: bug,","spring-projects-issues","2017-11-30T11:01:10Z","2018-01-23T10:05:11Z"
"","20657","STOMP SEND should not map to @SubscribeMapping methods [SPR-16109]","**[Matthew](https://jira.spring.io/secure/ViewProfile.jspa?name=mattsmiglarski)** opened **[SPR-16109](https://jira.spring.io/browse/SPR-16109?redirect=false)** and commented  ### The issue is:  A WebSocket request-response pattern using `@SubscribeMapping` does not currently work because of a null check.  The null check in question is from the `handleReturnValue` method in `SubscriptionMethodReturnValueHandler`:  ```java if (subscriptionId == null) {     throw new IllegalStateException(""No simpSubscriptionId in "" + message +             "" returned by: "" + returnType.getMethod()); } ```  ### The steps to reproduce are:  Annotate a `@Controller` method with `@SubscribeMapping` in an application using Spring Boot's `@EnableWebSocketMessageBroker`, with a simple message broker configured.  Something like the following should reproduce the bug:  ```java @Configuration @EnableWebSocketMessageBroker public class WebSocketSupport extends AbstractWebSocketMessageBrokerConfigurer {      @Override     public void registerStompEndpoints(StompEndpointRegistry registry) {         registry.addEndpoint(""/endpoint"")                 .setAllowedOrigins(""*"")                 .withSockJS()         ;     }     @Override     public void configureMessageBroker(MessageBrokerRegistry config) {         config                 .setApplicationDestinationPrefixes(""/app"")                 .enableSimpleBroker(""/topic"", ""/queue"")         ;     }      @Controller     public class SocketMessageController {          @SubscribeMapping(""/ping"")         public SocketMessage handle(SocketMessage socketMessage) {             return Service.command(socketMessage);         }     } } ```  _(According to the docs, the `@SubscribeMapping` should cause the return value to be sent back to the calling client.)_  Then, call the endpoint using STOMP over WebSockets.  ### What happens is:  When the `SubscriptionMethodReturnValueHandler` is called, the null check for the `simpSubscriptionId` header prevents sending the response message back to the client.  ### A workaround is:  Add an identically named class `SubscriptionMethodReturnValueHandler` in an identically named package `org.springframework.messaging.simp.annotation.support` which does not perform this null check. The socket message responses are sent to the calling client, (and only the calling client.)  ---  **Affects:** 5.0.1  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64bc9b43115bfc0bd563e1b3d064d0665ecaef02","closed","type: enhancement,","spring-projects-issues","2017-10-24T17:56:17Z","2019-01-11T13:16:48Z"
"","20976","MockMvc error handling with CompletableFuture regression in 5.0.1+ [SPR-16430]","**[Matt Newman](https://jira.spring.io/secure/ViewProfile.jspa?name=mdjnewman)** opened **[SPR-16430](https://jira.spring.io/browse/SPR-16430?redirect=false)** and commented  I originally reported this on the Spring Boot project: https://github.com/spring-projects/spring-boot/issues/11345  ---  With 5.0.0.RELEASE, the following controller:  ```java @SpringBootApplication @RestController class DemoApplication {     @RequestMapping(""/sad"", method = arrayOf(RequestMethod.POST))     fun getErroringCompletableFuture(): CompletableFuture {         return CompletableFuture.supplyAsync {             throw RuntimeException()         }     } } ```  coupled with the following advice:  ```java @ControllerAdvice class ErrorHandlingAdvice {     @ExceptionHandler(Exception::class)     fun handleException(exception: Exception): ResponseEntity<*> {         return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(""Handled by ${this.javaClass.simpleName}"")     } } ```  passes the following test:  ```java @Test fun errorIsHandled() {     val mvcResult = mockMvc         .perform(post(""/sad""))         .andExpect(request().asyncStarted())         .andReturn()      mockMvc         .perform(asyncDispatch(mvcResult))         .andDo(MockMvcResultHandlers.print())         .andExpect(content().string(""Handled by ErrorHandlingAdvice""))         .andExpect(status().is5xxServerError) } ```  In 5.0.1 & above, the status is set to 200 rather than 500.  A project reproducing this issue can be found at https://github.com/mdjnewman/studious-funicular. The test passes in the master branch (using Boot 2.0.0.M5 & Spring Framework 5.0.0). There is a `spring-5.0.1.RELEASE` branch which fails, the only change being the addition of  ```java ext['spring.version'] = '5.0.1.RELEASE' ```  to the build.gradle.  ---  **Affects:** 5.0.1, 5.0.2, 5.0.3  **Issue Links:** - #20616 MockMvc async does not re-use response instance on async dispatch  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d909b013e17e18da13f00213254a784c19408e4  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2018-01-29T12:29:25Z","2019-01-13T04:55:18Z"
"","20470","Error on type argument constraint validation failure [SPR-15916]","**[Matt Newman](https://jira.spring.io/secure/ViewProfile.jspa?name=mdjnewman)** opened **[SPR-15916](https://jira.spring.io/browse/SPR-15916?redirect=false)** and commented  When using type argument constraints on a collection, if a validation failure occurs, a `NotReadablePropertyException` is thrown.  The issues occurs with Spring 4.3.10 and Hibernate 5.3.5, but not with Spring 4.3.9 and Hibernate 5.2.5.  First noticed this when upgrading from Spring Boot 1.4.7 to 1.5.6.  A minimal reproduction is available at https://github.com/mdjnewman/spring-framework-issues/tree/master/SPR-15916.  The following error is thrown by `shouldRaise400IfNestedValidationFails` in the demo project:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: JSR-303 validated property 'thingIds[0].' does not have a corresponding accessor for Spring data binding - check your DataBinder's configuration (bean property versus direct field access)  	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:982) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) 	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:65) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) 	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:167) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:134) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:155) 	at org.springframework.issues.TestControllerTests.doTheThingShouldNotDoTheThingWithoutAnId(TestControllerTests.java:56) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: java.lang.IllegalStateException: JSR-303 validated property 'thingIds[0].' does not have a corresponding accessor for Spring data binding - check your DataBinder's configuration (bean property versus direct field access) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:162) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:117) 	at org.springframework.validation.DataBinder.validate(DataBinder.java:891) 	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.validateIfApplicable(ModelAttributeMethodProcessor.java:168) 	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:115) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:158) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) 	... 38 more Caused by: org.springframework.beans.NotReadablePropertyException: Invalid property 'thingIds[0].' of bean class [org.springframework.issues.model.ThingRequest]: Bean property 'thingIds[0].' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? 	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:633) 	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:624) 	at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:99) 	at org.springframework.validation.AbstractBindingResult.getRawFieldValue(AbstractBindingResult.java:283) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.getRejectedValue(SpringValidatorAdapter.java:268) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:148) 	... 52 more ```  ---  **Affects:** 4.3.10  **Issue Links:** - #20490 Wrong exception thrown by Springframework Beans when Type validation fails (_**""is duplicated by""**_) - #20394 SpringValidatorAdapter fails to retrieve value for Bean Validation 2.0's """" literal - #20411 Unable to use Hibernate Validator 4.3.2 if Bean Validation API 1.1 is on the classpath  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f944815d9200faae9a09375e48d9259b28efaa1d, https://github.com/spring-projects/spring-framework/commit/26284cac4f86a4e6aeead19d8676f6459f422fbb","closed","in: core,","spring-projects-issues","2017-08-30T19:49:16Z","2019-12-31T07:45:02Z"
"","20866","Limit thread synchronization in AbstractRequestExpectationManager [SPR-16319]","**[Mathieu POUSSE](https://jira.spring.io/secure/ViewProfile.jspa?name=mpousse)** opened **[SPR-16319](https://jira.spring.io/browse/SPR-16319?redirect=false)** and commented  I am using the MockRestServiceServer to simulate calls to some external system. My application uses parallel requests and I'd like to simulate this case in the test.  Therefore, I'd like to add a delay before the response is returned to the RestTemplate.  This can easily done this way:  ``` this.server.expect(...).andExpect(method(HttpMethod.GET))         .andRespond(                 request -> {                     waitABit();                     return withSuccess(...).createResponse(request);                 }); ```  Unfortunately, the way `AbstractRequestExpectationManager` is currently written lock the MockServer until the response for the current request has been returned (because of this synchronized block https://github.com/spring-projects/spring-framework/blob/295e3b6a994b91c815481c104af47f2d120d743d/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java#L78)  I am wondering if we can exclude the call to `validateRequestInternal(request)` from the synchronized block.  The current behavior of expectation validation will remain as is, but the response generation will not block the other threads.  cc https://github.com/spring-projects/spring-framework/pull/1626  ---  **Affects:** 5.0.2  **Issue Links:** - #19027 Support timeout settings in MockRestServiceServer  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1626, and commits https://github.com/spring-projects/spring-framework/commit/0c289283ff4fab171b527b7f195639e7a950f470","closed","type: enhancement,","spring-projects-issues","2017-12-21T13:22:01Z","2019-01-11T15:23:42Z"
"","21031","Deadlock in SubProtocolWebSocketHandler on shutdown with Undertow [SPR-16488]","**[Mathieu Carbou](https://jira.spring.io/secure/ViewProfile.jspa?name=mathieucarbou)** opened **[SPR-16488](https://jira.spring.io/browse/SPR-16488?redirect=false)** and commented  Probably affects also 4.3.13 because the change log does not seem to fix this issue (https://jira.spring.io/browse/SPR/fixforversion/16354/?selectedTab=com.atlassian.jira.plugins.jira-development-integration-plugin:release-report-tabpanel).  We are using:  - Spring Boot 1.5.8.RELEASE - Spring Framework 4.3.12.RELEASE  Thread dump extract:  ```java ""XNIO-2 I/O-13"" #49 prio=5 os_prio=0 tid=0x00007fb110c9a000 nid=0xc482 waiting for monitor entry [0x00007fafd6bef000]    java.lang.Thread.State: BLOCKED (on object monitor) 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.isRunning(SubProtocolWebSocketHandler.java:280) 	- waiting to lock <0x0000000080db6890> (a java.lang.Object) 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.checkSessions(SubProtocolWebSocketHandler.java:438) 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:311) 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75) 	at org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleMessage(LoggingWebSocketHandlerDecorator.java:56) 	at org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleMessage(ExceptionWebSocketHandlerDecorator.java:58) 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.delegateMessages(AbstractSockJsSession.java:380) 	at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.handleMessage(WebSocketServerSockJsSession.java:194) 	at org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler.handleTextMessage(SockJsWebSocketHandler.java:92) 	at org.springframework.web.socket.handler.AbstractWebSocketHandler.handleMessage(AbstractWebSocketHandler.java:43) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.handleTextMessage(StandardWebSocketHandlerAdapter.java:110) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.access$000(StandardWebSocketHandlerAdapter.java:42) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:81) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:78) 	at io.undertow.websockets.jsr.FrameHandler$7.run(FrameHandler.java:283) 	at io.undertow.websockets.jsr.ServerWebSocketContainer$1.call(ServerWebSocketContainer.java:162) 	at io.undertow.websockets.jsr.ServerWebSocketContainer$1.call(ServerWebSocketContainer.java:159) 	at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) 	at io.undertow.websockets.jsr.ServerWebSocketContainer.invokeEndpointMethod(ServerWebSocketContainer.java:575) 	at io.undertow.websockets.jsr.ServerWebSocketContainer.invokeEndpointMethod(ServerWebSocketContainer.java:565) 	at io.undertow.websockets.jsr.FrameHandler.invokeTextHandler(FrameHandler.java:263) 	at io.undertow.websockets.jsr.FrameHandler.onFullTextMessage(FrameHandler.java:314) 	at io.undertow.websockets.core.AbstractReceiveListener$2.complete(AbstractReceiveListener.java:156) 	at io.undertow.websockets.core.AbstractReceiveListener$2.complete(AbstractReceiveListener.java:152) 	at io.undertow.websockets.core.BufferedTextMessage.read(BufferedTextMessage.java:105) 	at io.undertow.websockets.core.AbstractReceiveListener.readBufferedText(AbstractReceiveListener.java:152) 	at io.undertow.websockets.core.AbstractReceiveListener.bufferFullMessage(AbstractReceiveListener.java:90) 	at io.undertow.websockets.jsr.FrameHandler.onText(FrameHandler.java:179) 	at io.undertow.websockets.core.AbstractReceiveListener.handleEvent(AbstractReceiveListener.java:44) 	at io.undertow.websockets.core.AbstractReceiveListener.handleEvent(AbstractReceiveListener.java:33) 	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) 	at io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener.handleEvent(AbstractFramedChannel.java:932) 	at io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener.handleEvent(AbstractFramedChannel.java:913) 	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) 	at org.xnio.conduits.ReadReadyHandler$ChannelListenerHandler.readReady(ReadReadyHandler.java:66) 	at org.xnio.nio.NioSocketConduit.handleReady(NioSocketConduit.java:88) 	at org.xnio.nio.WorkerThread.run(WorkerThread.java:561)  ""Thread-11"" #71 prio=5 os_prio=0 tid=0x00007fad9c001000 nid=0xccf3 in Object.wait() [0x00007fae29adb000]    java.lang.Thread.State: WAITING (on object monitor) 	at java.lang.Object.wait(Native Method) 	at java.lang.Object.wait(Object.java:502) 	at io.undertow.server.protocol.framed.AbstractFramedStreamSinkChannel.awaitWritable(AbstractFramedStreamSinkChannel.java:281) 	- locked <0x0000000617eed070> (a java.lang.Object) 	at org.xnio.channels.Channels.writeBlocking(Channels.java:99) 	at io.undertow.websockets.jsr.WebSocketSessionRemoteEndpoint$BasicWebSocketSessionRemoteEndpoint.sendText(WebSocketSessionRemoteEndpoint.java:283) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketSession.sendTextMessage(StandardWebSocketSession.java:203) 	at org.springframework.web.socket.adapter.AbstractWebSocketSession.sendMessage(AbstractWebSocketSession.java:101) 	at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.writeFrameInternal(WebSocketServerSockJsSession.java:222) 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.close(AbstractSockJsSession.java:204) 	at org.springframework.web.socket.handler.WebSocketSessionDecorator.close(WebSocketSessionDecorator.java:158) 	at org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.close(ConcurrentWebSocketSessionDecorator.java:192) 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.stop(SubProtocolWebSocketHandler.java:258) 	- locked <0x0000000080db6890> (a java.lang.Object) 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.stop(SubProtocolWebSocketHandler.java:272) 	- locked <0x0000000080db6890> (a java.lang.Object) 	at org.springframework.context.support.DefaultLifecycleProcessor.doStop(DefaultLifecycleProcessor.java:231) 	at org.springframework.context.support.DefaultLifecycleProcessor.access$300(DefaultLifecycleProcessor.java:50) 	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:365) 	at org.springframework.context.support.DefaultLifecycleProcessor.stopBeans(DefaultLifecycleProcessor.java:204) 	at org.springframework.context.support.DefaultLifecycleProcessor.onClose(DefaultLifecycleProcessor.java:120) 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:999) 	at org.springframework.context.support.AbstractApplicationContext$2.run(AbstractApplicationContext.java:929) 	- locked <0x0000000080372f30> (a java.lang.Object) ```  ---  **Affects:** 4.3.12  **Issue Links:** - #20955 SubProtocolWebSocketHandler should not log ERROR on ""No messages received after ..."" - #21137 Consistent volatile access to running flag in Lifecycle implementations  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-02-12T18:12:53Z","2019-01-11T15:30:41Z"
"","20994","Cannot create BindStatus for valid field on immutable form object in case of bind errors [SPR-16449]","**[Masatoshi Tada](https://jira.spring.io/secure/ViewProfile.jspa?name=masatoshi%20tada)** opened **[SPR-16449](https://jira.spring.io/browse/SPR-16449?redirect=false)** and commented  Hi,  I got a problem when using immutable form object.  When a form object is immutable and type conversion failed, a form object became null and an error occurred in a view. I think this is not convenient. The form object should be created.  Please take a look my sample codes. (See ""Reference URL"")  How to reproduce this problem is below. 1. Build this app with `mvn package` and deploy WAR to Tomcat. 2. Access http://localhost:8080/01-spring/ 3. Click [Add new employee].    !スクリーンショット 2018-02-01 10.56.19.png|thumbnail! 4. Specify ""aaaa"" in [Joined date] and click [Submit].    (""Joined date"" must be ""yyyy-MM-dd"")    !スクリーンショット 2018-02-01 10.56.40.png|thumbnail! 5. View becomes strange.    !スクリーンショット 2018-02-01 10.56.54.png|thumbnail! 6. Tomcat Localhost Log is below. EmployeeForm is null.  ``` 01-Feb-2018 10:56:44.091 ERROR [http-nio-8080-exec-1] org.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() for servlet [dispatcher] in context with path [/01-spring] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateProcessingException: Error during execution of processor 'org.thymeleaf.spring5.processor.SpringInputGeneralFieldTagProcessor' (template: ""employee/insertMain"" - line 21, col 53)] with root cause java.lang.IllegalStateException: Cannot access properties on null bean instance 'employeeForm'! 	at org.springframework.util.Assert.state(Assert.java:73) 	at org.springframework.validation.BeanPropertyBindingResult.createBeanWrapper(BeanPropertyBindingResult.java:111) 	at org.springframework.validation.BeanPropertyBindingResult.getPropertyAccessor(BeanPropertyBindingResult.java:98) 	at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:103) 	at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:236) 	at org.springframework.web.servlet.support.BindStatus.(BindStatus.java:129) 	at org.springframework.web.servlet.support.RequestContext.getBindStatus(RequestContext.java:903) 	at org.thymeleaf.spring5.context.webmvc.SpringWebMvcThymeleafRequestContext.getBindStatus(SpringWebMvcThymeleafRequestContext.java:227) 	at org.thymeleaf.spring5.util.FieldUtils.getBindStatusFromParsedExpression(FieldUtils.java:305) 	at org.thymeleaf.spring5.util.FieldUtils.getBindStatus(FieldUtils.java:252) 	at org.thymeleaf.spring5.util.FieldUtils.getBindStatus(FieldUtils.java:226) 	at org.thymeleaf.spring5.processor.AbstractSpringFieldTagProcessor.doProcess(AbstractSpringFieldTagProcessor.java:174) 	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) 	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) 	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) 	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918) 	at org.thymeleaf.engine.StandaloneElementTag.beHandled(StandaloneElementTag.java:228) 	at org.thymeleaf.engine.TemplateModel.process(TemplateModel.java:136) 	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:592) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) 	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) 	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:355) 	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:188) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1325) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1069) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1008) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:881) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:855) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:475) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) 	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:651) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:500) 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:754) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1376) 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:745) ```  Thanks  ---  **Affects:** 5.0.3  **Reference URL:** https://github.com/MasatoshiTada/spring-for-spring-boot/blob/immutable-form/01-spring/src/main/java/com/example/web/form/EmployeeForm.java  **Attachments:** - [スクリーンショット 2018-02-01 10.56.19.png](https://jira.spring.io/secure/attachment/25363/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2018-02-01+10.56.19.png) (_40.87 kB_) - [スクリーンショット 2018-02-01 10.56.40.png](https://jira.spring.io/secure/attachment/25364/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2018-02-01+10.56.40.png) (_21.51 kB_) - [スクリーンショット 2018-02-01 10.56.54.png](https://jira.spring.io/secure/attachment/25365/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88+2018-02-01+10.56.54.png) (_16.56 kB_)  **Issue Links:** - #20101 BindingResult support for constructor argument mismatch on immutable data object - #20432 Revisit handling of missing fields (without default values) for immutable data classes - #20919 The FieldError class does not provide access to the exception that triggered the binding error. - #21381 Validation failure not exposed next to binding failure for immutable form class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a1cc9ced789a73e34b153f5eff76267bfdf1f87","closed","type: bug,","spring-projects-issues","2018-02-01T04:16:05Z","2019-01-11T15:35:19Z"
"","20782","Remove synchronization from ResourceBundleMessageSource [SPR-16235]","**[Masahiro Ide](https://jira.spring.io/secure/ViewProfile.jspa?name=imasahiro)** opened **[SPR-16235](https://jira.spring.io/browse/SPR-16235?redirect=false)** and commented  The ResourceBundleMessageSource class caches the properties to HashMaps by default and this class locks the hashmaps when getting/putting a entry from/to hashmaps. This synchronization causes slow down the property look-up in multi threaded application.  Here is the stack trace, notice the first line is holding lock on a hashmap, which is the hashmap that holds properties:  ``` org.springframework.context.support.ResourceBundleMessageSource.getResourceBundle(String, Locale) Line: 176 org.springframework.context.support.ResourceBundleMessageSource.resolveCodeWithoutArguments(String, Locale) Line: 129 org.springframework.context.support.AbstractMessageSource.getMessageInternal(String, Object[], Locale) Line: 209 org.springframework.context.support.AbstractMessageSource.getMessage(String, Object[], Locale) Line: 151 org.springframework.context.support.AbstractApplicationContext.getMessage(String, Object[], Locale) Line: 1256 ... ```  Because in major case, these hashmaps are ready-heavy and entries of these hashmaps will not be purged. To improve this, want to use a concurrent hashmap.  Here is the patch, jmh benchamrk and benchmark results. * https://github.com/spring-projects/spring-framework/commit/b6025e28b390ee13fb801c80d4c1be7d5323c625 * https://github.com/imasahiro/spring-issue/blob/08a3f57506dcf1f65205fbd6aea9e7a894e7438e/src/jmh/java/com/github/imasahiro/spring/ResourceBundleMessageSourceBenchmark.java  ``` 1. Thread=1 Benchmark                                         Mode  Cnt        Score       Error  Units ResourceBundleMessageSourceBenchmark.concurrent  thrpt   20  2460083.135 ± 21356.649  ops/s ResourceBundleMessageSourceBenchmark.original    thrpt   20  2628372.407 ± 31603.771  ops/s ```  ``` 1. Thread=20 Benchmark                                         Mode  Cnt         Score        Error  Units ResourceBundleMessageSourceBenchmark.concurrent  thrpt   20  11137855.564 ± 344640.055  ops/s ResourceBundleMessageSourceBenchmark.original    thrpt   20   1924866.006 ± 332692.104  ops/s ```  As you can see, if my change is correct, using ConcurrentHashMap is 5~6X faster than large synchronization block.  ---  **Affects:** 4.3.12, 5.0.1  **Reference URL:** https://github.com/imasahiro/spring-issue  **Issue Links:** - #15133 ReloadableResourceBundleMessageSource locks properties hashmap and fails under load. - #17885 ResourceBundleMessageSource performance optimization for getStringOrNull  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1605, and commits https://github.com/spring-projects/spring-framework/commit/d9af4d65994a85c66988c01ffb0d2e8c4ca76a81","closed","type: enhancement,","spring-projects-issues","2017-11-26T16:20:31Z","2019-01-11T13:29:34Z"
"","20824","Let netty webclient optionally follow redirects [SPR-16277]","**[Martin Österlund](https://jira.spring.io/secure/ViewProfile.jspa?name=agent-ost)** opened **[SPR-16277](https://jira.spring.io/browse/SPR-16277?redirect=false)** and commented  The Reactive Webclient does not follow redirects. According to the comments on #20333  > WebClient does not follow Location headers (yet). This might be a customisable feature we add it the future.  ---  **Affects:** 5.0.2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1618  **Issue Links:** - #20933 Upgrade to Reactor Netty 0.8 (_**""depends on""**_) - #20137 HandlerStrategies should use Lists instead of Streams","closed","type: enhancement,","spring-projects-issues","2017-12-07T09:40:13Z","2019-01-11T15:14:31Z"
"","20661","Spring context indexer requires undocumented dependency [SPR-16113]","**[Martin Veverka](https://jira.spring.io/secure/ViewProfile.jspa?name=marvertin)** opened **[SPR-16113](https://jira.spring.io/browse/SPR-16113?redirect=false)** and commented  If we write to our gradle.build:  ``` compileOnly ""org.springframework:spring-context-indexer:5.0.1.RELEASE"" ```  we get an compilation error:  ``` error: cannot access InterceptorBinding   class file for javax.interceptor.InterceptorBinding not found   Consult the following stack trace for details.   com.sun.tools.javac.code.Symbol$CompletionFailure: class file for javax.interceptor.InterceptorBinding not found ```  I must add another dependency to my build.gradle:  ``` compileOnly ""org.springframework:spring-context-indexer:5.0.1.RELEASE"" compileOnly  ""javax.interceptor:javax.interceptor-api:3.1"" ```  Now all works fine.   ---  **Affects:** 5.0.1","closed","in: core,","spring-projects-issues","2017-10-25T12:26:53Z","2019-01-11T13:15:24Z"
"","20660","Spring context indexer does not work with nested classes [SPR-16112]","**[Martin Veverka](https://jira.spring.io/secure/ViewProfile.jspa?name=marvertin)** opened **[SPR-16112](https://jira.spring.io/browse/SPR-16112?redirect=false)** and commented  The `Inner` class with its annotation is not indexed and application does not work. If we move the Inner class to its own file, all works fine.  ```java import javax.persistence.Converter;  public class Outer {    @Converter(autoApply=true)   public static class Inner implements AttributeConverter<...> {      ...   } } ```  ---  **Affects:** 5.0.1  **Issue Links:** - #20700 Wildcard JPA packages are not scanned  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb76aa015003124cb7f450c240a4fff8bd6d4ee3","closed","type: enhancement,","spring-projects-issues","2017-10-25T11:55:59Z","2019-01-11T13:15:27Z"
"","20397","String to JSON conversion does not produce valid JSON [SPR-15842]","**[Martin Burchard](https://jira.spring.io/secure/ViewProfile.jspa?name=mburchard)** opened **[SPR-15842](https://jira.spring.io/browse/SPR-15842?redirect=false)** and commented  Yesterday I found a big issue with Spring 4.3. Currently upgrading a project from Spring 3.2 to 4.3 all seems to work fine. Some Method return plain Strings as JSON.  With Spring 3.2 there is a header: Content-Type:application/json;charset=UTF-8 and the response body contains ""OK""  With Spring 4.3 there is a header: Content-Type:application/json;charset=UTF-8 and the response body contains OK. This is not JSON.  Today I created an simple app using spring.io guide for Restful Web Service.  `@RestController` `@RequestMapping`(produces = {MediaType.APPLICATION_JSON_UTF8_VALUE}) class GreetingController {           @ResponseBody          @RequestMapping(""/greeting1"")          String greeting1() {               return ""OK"";          }          @RequestMapping(""/greeting2"")          ResponseEntity greeting2() {               return ResponseEntity.ok(""OK"");          }          @RequestMapping(""/greeting3"")          ResponseEntity> greeting3() {               Map map = new HashMap<>();               map.put(""key"", ""value"");               return ResponseEntity.ok(map);          }     }  Only greeting3 returns valid JSON.  ---  **Affects:** 4.3.10  **Reference URL:** https://stackoverflow.com/questions/45412991/spring-return-string-as-json-behaviour-changed  **Issue Links:** - #21617 Json serialization / conversion of basic String not quoted (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/25b8f73b707db3511749d4be2088962566922d7a","closed","status: declined,","spring-projects-issues","2017-08-01T14:06:22Z","2019-01-14T04:34:33Z"
"","20621","RequestMapping method returning Future with null result causes NullPointerException [SPR-16072]","**[martian](https://jira.spring.io/secure/ViewProfile.jspa?name=martian)** opened **[SPR-16072](https://jira.spring.io/browse/SPR-16072?redirect=false)** and commented  RequestMapping returns a Future with anytype generic parameter and async result is null leads to NullPointerException It's fix with 5.0.0.RELEASE  ---  **Affects:** 4.3.12  **Reference URL:** https://github.com/zhanhb/future-null-pointer-exception  **Issue Links:** - #20624 setArguments(null) on MethodInvoker no longer coerces null to Object[0]  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f65b638de5357999d9c740e7f98441b4bb775ed, https://github.com/spring-projects/spring-framework/commit/c2438cb932fd4948a065254854519667e443d396","closed","type: bug,","spring-projects-issues","2017-10-16T03:55:16Z","2019-01-11T13:10:58Z"
"","20904","Initialization blocked by multi-threaded event publishing [SPR-16357]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-16357](https://jira.spring.io/browse/SPR-16357?redirect=false)** and commented  Publishing events can block the container initialization in conjunction with event publishing from a different thread.  This can happen if events are published from a bean constructor while its bean is instantiated and events get published in a different thread while the constructed bean awaits completion of event publishing.  Consider following code:  ```java @Component class Foo {  	Foo(ApplicationEventPublisher publisher) throws Exception {  		Thread t = new Thread(() -> publisher.publishEvent(new Object())); 		t.start(); 		t.join(); 	} } ```  The code above publishes an event in an other thread than the constructing thread while awaiting completion before the constructor progresses.  It leads to a thread state like:  ``` ""Thread-19@5373"" daemon prio=5 tid=0x22 nid=NA waiting for monitor entry   java.lang.Thread.State: BLOCKED 	 waiting for main@1315 to release lock on <0x17bd> (a java.util.concurrent.ConcurrentHashMap) 	  at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:189) 	  at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:133) 	  at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:399) 	  at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:353) 	  at com.example.demo.Foo$1.run() ```  ``` ""main@1315"" prio=5 tid=0xf nid=NA waiting (Thread calling initialization code)   java.lang.Thread.State: WAITING 	 blocks Thread-19@5373 	  at java.lang.Object.wait(Object.java:-1) 	  at java.lang.Thread.join(Thread.java:1252) 	  at java.lang.Thread.join(Thread.java:1326) 	  at com.example.demo.Foo. 	  at sun.reflect.NativeConstructorAccessorImpl.newInstance0(NativeConstructorAccessorImpl.java:-1) 	  at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	  at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	  at java.lang.reflect.Constructor.newInstance(Constructor.java:423) 	  at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:163) 	  at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117) 	  at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:271) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1270) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) 	  at org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$87.1534495070.getObject(Unknown Source:-1) 	  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	  - locked <0x17bd> (a java.util.concurrent.ConcurrentHashMap) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:758) ```  The example originates from reactive code in which a constructor is used to call initialization code using `.block()` for synchronization, see [DATAMONGO-1841](https://jira.spring.io/browse/DATAMONGO-1841).  ---  **Affects:** 5.0 GA  **Issue Links:** - [DATAMONGO-1841](https://jira.spring.io/browse/DATAMONGO-1841) Reactive mongodb hangs on block() when used in component initialization - #19487 Asynchronous initialization of beans during startup - #13410 Parallel bean initialization during startup  0 votes, 8 watchers","open","in: core,","spring-projects-issues","2018-01-08T09:54:14Z","2021-06-09T15:29:07Z"
"","20827","Provide methods to add query string parameters to MockServerHttpRequest [SPR-16280]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-16280](https://jira.spring.io/browse/SPR-16280?redirect=false)** and commented  Spring Data Commons is using Webflux' `MockServerHttpRequest` to test `HandlerMethodArgumentResolver` directly without `WebTestClient`. These tests use query string parameters as input, and other URI components do not have any significance. Adding API to configure query string parameters would help to setup query parameters without the need to pay attention to encoding or URI representation and concatenation.  `MockHttpServletRequest` has such an API:  ```java MockHttpServletRequest request = new MockHttpServletRequest(); request.addParameter(""page"", ""0""); request.addParameter(""size"", ""200""); ```  The same fixture with `MockServerHttpRequest` looks like:  ```java MockServerHttpRequest request = MockServerHttpRequest.get(""foo?page=0&size=200"").build(); ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8cf275aed9de171b3bc9d032ff750de43e5196d","closed","type: enhancement,","spring-projects-issues","2017-12-07T17:54:27Z","2018-01-23T10:05:12Z"
"","20559","Support RegexPatternTypeFilter include filter for component index [SPR-16010]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-16010](https://jira.spring.io/browse/SPR-16010?redirect=false)** and commented  Using `ClassPathScanningCandidateComponentProvider` with an `RegexPatternTypeFilter` include filter prevents use of the component index.  It might be worth to evaluate regex on the component index so Spring Data's [custom repository implementation scan](https://github.com/spring-projects/spring-data-commons/blob/049970874dca2b648c9d2f3bfdd01f0e8a11de51/src/main/java/org/springframework/data/repository/config/CustomRepositoryImplementationDetector.java#L116) could benefit from component-index-based scanning. `RegexPatternTypeFilter` is used on every scan to limit component candidates with a simple class name.  It also might be worth introducing a `SimpleClassNameTypeFilter` dedicated to this style of filtering to eliminate regex pattern compilation and the associated matching cost.   --- No further details from [SPR-16010](https://jira.spring.io/browse/SPR-16010?redirect=false)","open","in: core,","spring-projects-issues","2017-09-26T14:05:41Z","2019-01-11T14:14:43Z"
"","21124","RestTemplate with HttpComponentsClientHttpRequestFactory and no buffering with an interceptor throws UnsupportedOperationException [SPR-16582]","**[Mark Jeffrey](https://jira.spring.io/secure/ViewProfile.jspa?name=mjeffrey)** opened **[SPR-16582](https://jira.spring.io/browse/SPR-16582?redirect=false)** and commented  When creating a RestTemplate with a HttpComponentsClientHttpRequestFactory with buffering disabled (to be able to stream) and an interceptor, the rest call fails with an UnsupportedOperationException.  This is a [Testcase](https://github.com/mjeffrey/stream.git) on github I also reproduced this on Spring Boot 2.0.0.RELEASE.  ``` 2018-03-12 20:41:18.466 ERROR 3508 --- [o-auto-1-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.UnsupportedOperationException: getBody not supported] with root cause  java.lang.UnsupportedOperationException: getBody not supported         at org.springframework.http.client.HttpComponentsStreamingClientHttpRequest.getBodyInternal(HttpComponentsStreamingClientHttpRequest.java:85) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.http.client.AbstractClientHttpRequest.getBody(AbstractClientHttpRequest.java:47) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:97) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at com.sa.stream.ClientRequestInterceptor.intercept(ClientRequestInterceptor.java:17) ~[classes/:na]         at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:86) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:70) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:53) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:660) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:621) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:539) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at com.sa.stream.StreamResource.postOne(StreamResource.java:48) ~[classes/:na]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]         at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]         at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:661) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.27.jar:8.5.27]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27]         at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_131]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_131]         at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27]         at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]  Intercepting Tests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 4.661 sec <<< FAILURE! - in com.sa.stream.StreamResourceTest streamWithInterceptor(com.sa.stream.StreamResourceTest)  Time elapsed: 0.482 sec  <<< FAILURE! org.junit.ComparisonFailure: expected:<""MyRequest""> but was:         at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)         at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)         at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)         at com.sa.stream.StreamResourceTest.assertResponseEchoed(StreamResourceTest.java:47)         at com.sa.stream.StreamResourceTest.streamWithInterceptor(StreamResourceTest.java:24)   ```  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #15356 Request streaming for HttpComponentsClientHttpRequestFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41730220f4e5ef89024f3fbcf20b1f8362a56565, https://github.com/spring-projects/spring-framework/commit/2cac3a82552063b9b7eb3ad6089bd06e12fe5dab  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-12T19:50:25Z","2019-01-11T14:29:42Z"
"","21062","Headers adding ability in ACK/NACK frame [SPR-16519]","**[Mariusz Jasiński](https://jira.spring.io/secure/ViewProfile.jspa?name=mariowro)** opened **[SPR-16519](https://jira.spring.io/browse/SPR-16519?redirect=false)** and commented  There is **acknowledge** function (public) in DefaultStompSession class: (path: src\main\java\org\springframework\messaging\simp\stomp\DefaultStompSession.java)  The acknowledge function sends ACK or NACK frame to broker. I can't send custom header with NACK frame to my broker with this function. I use RabbitMQ and I need send **requeue** (with false value) header into NACK frame for control dead-letter-queue behavior.  So I propose overload acknowledge function in DefaultStompSession class with one new parameter (stompHeaders):  ``` @Override public Receiptable acknowledge(String messageId, boolean consumed, StompHeaders stompHeaders) {   if (stompHeaders == null) {     stompHeaders = new StompHeaders();   }   if (""1.1"".equals(this.version)) {     stompHeaders.setMessageId(messageId);   }   else {     stompHeaders.setId(messageId);   }    String receiptId = checkOrAddReceipt(stompHeaders);   Receiptable receiptable = new ReceiptHandler(receiptId);    StompCommand command = (consumed ? StompCommand.ACK : StompCommand.NACK);   StompHeaderAccessor accessor = createHeaderAccessor(command);   accessor.addNativeHeaders(stompHeaders);   Message message = createMessage(accessor, null);   execute(message);    return receiptable; } ```  Analogues function to StompSession interface:  ``` Receiptable acknowledge(String messageId, boolean consumed, StompHeaders stompHeaders) ```  and I propose change to existing acknowledge function in DefaultStompSession class:  ``` @Override public Receiptable acknowledge(String messageId, boolean consumed) {   StompHeaders stompHeaders = null;   return acknowledge(messageId, consumed, stompHeaders); } ```  References: * DefaultStompSession.java: https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java * RabbitMQ STOMP Adapter: https://www.rabbitmq.com/stomp.html    ---  **Affects:** 4.3.14, 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bf0308b0cf2b13dd6d13069f0e4d617109b926da, https://github.com/spring-projects/spring-framework/commit/356ef5199e218861dd935a25c20ebfdf60c6c78a, https://github.com/spring-projects/spring-framework/commit/184ed6da579f180cd79de28cc06bebe6556c4d75","closed","type: enhancement,","spring-projects-issues","2018-02-20T15:05:38Z","2018-04-03T20:34:26Z"
"","20494","When using kotlin Collection then @Autowire Collection does not work correctly [SPR-15940]","**[Mario Zagar](https://jira.spring.io/secure/ViewProfile.jspa?name=mzagar)** opened **[SPR-15940](https://jira.spring.io/browse/SPR-15940?redirect=false)** and commented  Using: - spring-framework 5.0.0.RC3 (also tested wth 1.5.6.RELEASE, problem also present) - kotlin-stdlib 1.1.4-3  Following test fails when autowiring kotlin Collection _`@Autowired` lateinit var beans : Collection_.  When using _java.util.Collection_ autowiring works as expected.  Not really sure if this is kotlin issue or spring issue.  Here's the test:  ``` package spring.autowire.test  import org.assertj.core.api.Assertions import org.junit.Test import org.junit.runner.RunWith import org.springframework.beans.factory.annotation.Autowired import org.springframework.context.annotation.Bean import org.springframework.context.annotation.Configuration import org.springframework.test.context.ContextConfiguration import org.springframework.test.context.junit4.SpringRunner  interface FirstInterface interface SecondInterface interface ThirdInterface  class Bean1 : FirstInterface, SecondInterface, ThirdInterface class Bean2 : FirstInterface, SecondInterface, ThirdInterface class Bean3 : FirstInterface, SecondInterface, ThirdInterface class Bean4 : FirstInterface, SecondInterface, ThirdInterface  @Configuration open class TestSpringConfig {     @Bean open fun bean1() : Bean1 = Bean1()     @Bean open fun bean2() : FirstInterface = Bean2()     @Bean open fun bean3() : SecondInterface = Bean3();     @Bean open fun bean4() : ThirdInterface = Bean4(); }  @RunWith(SpringRunner::class) @ContextConfiguration(classes = arrayOf(TestSpringConfig::class)) class KotlinAutowireTest {     @Autowired     lateinit var beans : Collection // test passes if I use java.util.Collection      @Test     fun test() {         Assertions.assertThat(beans)                 .extracting{it.javaClass.name}                 .containsOnly(                         ""spring.autowire.test.Bean1"",                         ""spring.autowire.test.Bean2"",                         ""spring.autowire.test.Bean3"",                         ""spring.autowire.test.Bean4""                 )     } } ```  Test output:  ``` java.lang.AssertionError:  Expecting:   <[""spring.autowire.test.Bean1"", ""spring.autowire.test.Bean3""]> to contain only:   <[""spring.autowire.test.Bean1"",     ""spring.autowire.test.Bean2"",     ""spring.autowire.test.Bean3"",     ""spring.autowire.test.Bean4""]> but could not find the following elements:   <[""spring.autowire.test.Bean2"", ""spring.autowire.test.Bean4""]> ```  ---  **Affects:** 5.0 RC3  1 votes, 3 watchers","open","in: kotlin,","spring-projects-issues","2017-09-08T12:51:07Z","2022-01-19T11:07:54Z"
"","21051","NPE in AnnotationAwareOrderComparator.getPriority [SPR-16508]","**[Mario Hochreiter](https://jira.spring.io/secure/ViewProfile.jspa?name=hochraldo)** opened **[SPR-16508](https://jira.spring.io/browse/SPR-16508?redirect=false)** and commented  The null check in spring 5 was removed. In my project a bean is returning null. It is marked as Nullable, nevertheless the container startup fails due to a NPE at line 109 in AnnotationAwareOrderComparator of 5.0.3.  Code in 4.3.12:  ``` public Integer getPriority(Object obj) {      Integer priority = null;      if (obj instanceof Class) {           priority = OrderUtils.getPriority((Class) obj);      }      else if (obj != null) {           priority = OrderUtils.getPriority(obj.getClass());           if (priority == null && obj instanceof DecoratingProxy) {                priority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass());           }      }      return priority; } ```  Now in 5.0.3:  ``` public Integer getPriority(Object obj) {      if (obj instanceof Class) {           return OrderUtils.getPriority((Class) obj);      }      Integer priority = OrderUtils.getPriority(obj.getClass());      if (priority == null && obj instanceof DecoratingProxy) {           priority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass());      }      return priority; } ```  ---  **Affects:** 5.0.3  **Issue Links:** - #21125 NullPointerException in AnnotationAwareOrderComparator#getPriority (_**""is duplicated by""**_) - #20378 AnnotationAwareOrderComparator doesn't handle null values anymore  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9d08bff4199adb42f138076cc91a3990c0515c4","closed","in: core,","spring-projects-issues","2018-02-16T12:35:20Z","2019-01-11T14:37:12Z"
"","20468","WebClient - add option to disable chunked transfer [SPR-15914]","**[Marek Hawrylczak](https://jira.spring.io/secure/ViewProfile.jspa?name=mhawrylczak)** opened **[SPR-15914](https://jira.spring.io/browse/SPR-15914?redirect=false)** and commented  Currently all requests except GET and HEAD are using transfer-encoding: chunked. There is no way to disable it, thus is not possible to call a network device that cannot support chunked transfer.   ---  **Affects:** 5.0 RC3","closed","type: enhancement,","spring-projects-issues","2017-08-30T13:11:50Z","2021-03-15T12:08:02Z"
"","20745","[doc] WebClient's javadocs are invalid [SPR-16197]","**[Marcin Grzejszczak](https://jira.spring.io/secure/ViewProfile.jspa?name=marcin.grzejszczak)** opened **[SPR-16197](https://jira.spring.io/browse/SPR-16197?redirect=false)** and commented  without this change the code in the Javadocs of WebClient is invalid. It doesn't compile. with this change, I've updated the Javadocs to be consistent with the current implementation  I've added a PR that fixes this - https://github.com/spring-projects/spring-framework/pull/1594  ---  **Affects:** 5.0.2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1594  **Issue Links:** - #20748 Docs for ClientResponse object are misleading  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e05a5881e404b8a1ab7eac049d82d0faeb7eb10","closed","in: web,","spring-projects-issues","2017-11-14T17:27:02Z","2019-01-11T13:26:02Z"
"","20476","AbstractFilterRegistrationBean should check isEnabled earlier [SPR-15922]","**[Marcel Thannhäuser](https://jira.spring.io/secure/ViewProfile.jspa?name=der%20thanne)** opened **[SPR-15922](https://jira.spring.io/browse/SPR-15922?redirect=false)** and commented  in org.springframework.boot.web.servlet.AbstractFilterRegistrationBean onStartup at first a check is done if a filter has been set.  But if i want to disable the filter, why should i create one (which can be an extensive process) and add it to the RegistrationBean, just to never use it.  Code in onStartup should be changed from  {{		Filter filter = getFilter(); Assert.notNull(filter, ""Filter must not be null""); String name = getOrDeduceName(filter); if (!isEnabled()) { this.logger.info(""Filter "" + name + "" was not registered (disabled)""); return; }}}  To {{	if (!isEnabled()) { this.logger.info(""Filter "" + getOrDeduceName( null )+ "" was not registered (disabled)""); return; } Filter filter = getFilter(); Assert.notNull(filter, ""Filter must not be null"");}}    ---  **Affects:** 4.3.10","closed","status: invalid,","spring-projects-issues","2017-09-01T10:55:50Z","2019-01-12T05:20:21Z"
"","21027","WebClient | onErrorResume logs exception although it has been handled [SPR-16484]","**[Marc-Christian Schulze](https://jira.spring.io/secure/ViewProfile.jspa?name=marc-christian.schulze)** opened **[SPR-16484](https://jira.spring.io/browse/SPR-16484?redirect=false)** and commented  Given the following example:  ```java return WebClient.create(""http://anyurl"")     .get()     .uri(builder -> {         return builder.path(""/somePath"")                 .queryParam(""..."", ...)                 .build();     })     .retrieve()     .bodyToFlux(AnyPojo.class)     // shouldn't this convert any error in an empty Flux and suppress the error logging?     .onErrorResume(e -> Flux.empty())     .map(this::myMappingMethod)     .collectList()     .block(); ```  **Expected behaviour:** - returns empty Flux - no exception thrown or logged  **Actual Behaviour:** - returns empty Flux - no exception thrown BUT logged with severity ERROR  **Example Logs:**  ``` 07:31:51.997 [reactor-http-nio-5] ERROR o.s.web.reactive.function.client - onError(io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: 068933adf361/172.17.0.2:80) 07:31:51.998 [reactor-http-nio-5] ERROR o.s.web.reactive.function.client - io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: 068933adf361/172.17.0.2:80     at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)     at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)     at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:352)     at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:340)     at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:612)     at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:559)     at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:476)     at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)     at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)     at java.lang.Thread.run(Thread.java:748) Caused by: java.net.ConnectException: Connection refused     ... 10 common frames omitted ```  Logging uncaught errors with severity ERROR seems to be good thing but I would expect that errors that have been handled by user code are no longer logged.   ---  **Affects:** 5.0.3","closed","type: enhancement,","spring-projects-issues","2018-02-11T14:45:44Z","2018-02-19T12:19:20Z"
"","20952","MultipartHttpMessageWriter fails when Publisher is provided as Multipart [SPR-16406]","**[Marc-Christian Schulze](https://jira.spring.io/secure/ViewProfile.jspa?name=marc-christian.schulze)** opened **[SPR-16406](https://jira.spring.io/browse/SPR-16406?redirect=false)** and commented  When using a Publisher to provide asynchronously a multipart the **MultipartHttpMessageWriter** fails to write the content with an exception:  ``` reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.core.codec.CodecException: No suitable writer found for part: file Caused by: org.springframework.core.codec.CodecException: No suitable writer found for part: file   at org.springframework.http.codec.multipart.MultipartHttpMessageWriter.encodePart(MultipartHttpMessageWriter.java:276) ~[spring-web-5.0.3.BUILD-SNAPSHOT.jar:5.0.3.BUILD-SNAPSHOT]   at org.springframework.http.codec.multipart.MultipartHttpMessageWriter.lambda$encodePartValues$3(MultipartHttpMessageWriter.java:226) ~[spring-web-5.0.3.BUILD-SNAPSHOT.jar:5.0.3.BUILD-SNAPSHOT]   at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[na:1.8.0_151]   at java.util.LinkedList$LLSpliterator.forEachRemaining(LinkedList.java:1235) ~[na:1.8.0_151]   at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[na:1.8.0_151]   at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_151]   at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) ~[na:1.8.0_151]   at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_151]   at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) ~[na:1.8.0_151]   at org.springframework.http.codec.multipart.MultipartHttpMessageWriter.encodePartValues(MultipartHttpMessageWriter.java:226) ~[spring-web-5.0.3.BUILD-SNAPSHOT.jar:5.0.3.BUILD-SNAPSHOT]   at org.springframework.http.codec.multipart.MultipartHttpMessageWriter.lambda$writeMultipart$2(MultipartHttpMessageWriter.java:210) ~[spring-web-5.0.3.BUILD-SNAPSHOT.jar:5.0.3.BUILD-SNAPSHOT]   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:357) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.Flux.subscribe(Flux.java:6633) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:200) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:80) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.Flux.subscribe(Flux.java:6633) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.ipc.netty.channel.ChannelOperationsHandler.drain(ChannelOperationsHandler.java:461) ~[reactor-netty-0.7.3.BUILD-SNAPSHOT.jar:0.7.3.BUILD-SNAPSHOT]   at reactor.ipc.netty.channel.ChannelOperationsHandler.flush(ChannelOperationsHandler.java:191) ~[reactor-netty-0.7.3.BUILD-SNAPSHOT.jar:0.7.3.BUILD-SNAPSHOT]   at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776) ~[netty-transport-4.1.19.Final.jar:4.1.19.Final]   at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:802) ~[netty-transport-4.1.19.Final.jar:4.1.19.Final]   at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:814) ~[netty-transport-4.1.19.Final.jar:4.1.19.Final]   at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:794) ~[netty-transport-4.1.19.Final.jar:4.1.19.Final]   at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:831) ~[netty-transport-4.1.19.Final.jar:4.1.19.Final]   at io.netty.channel.DefaultChannelPipeline.writeAndFlush(DefaultChannelPipeline.java:1041) ~[netty-transport-4.1.19.Final.jar:4.1.19.Final]   at io.netty.channel.AbstractChannel.writeAndFlush(AbstractChannel.java:300) ~[netty-transport-4.1.19.Final.jar:4.1.19.Final]   at reactor.ipc.netty.NettyOutbound.lambda$sendObject$6(NettyOutbound.java:298) ~[reactor-netty-0.7.3.BUILD-SNAPSHOT.jar:0.7.3.BUILD-SNAPSHOT]   at reactor.ipc.netty.FutureMono$DeferredFutureMono.subscribe(FutureMono.java:106) ~[reactor-netty-0.7.3.BUILD-SNAPSHOT.jar:0.7.3.BUILD-SNAPSHOT]   at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.Mono.subscribe(Mono.java:3006) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.FluxConcatIterable$ConcatIterableSubscriber.onComplete(FluxConcatIterable.java:141) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.FluxConcatIterable.subscribe(FluxConcatIterable.java:60) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.MonoSourceFlux.subscribe(MonoSourceFlux.java:47) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.Mono.subscribe(Mono.java:3006) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:172) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE]   at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390) ~[reactor-netty-0.7.3.BUILD-SNAPSHOT.jar:0.7.3.BUILD-SNAPSHOT]   at reactor.ipc.netty.http.client.HttpClientOperations.onHandlerStart(HttpClientOperations.java:479) ~[reactor-netty-0.7.3.BUILD-SNAPSHOT.jar:0.7.3.BUILD-SNAPSHOT]   at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-common-4.1.19.Final.jar:4.1.19.Final]   at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) [netty-common-4.1.19.Final.jar:4.1.19.Final]   at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463) [netty-transport-4.1.19.Final.jar:4.1.19.Final]   at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886) [netty-common-4.1.19.Final.jar:4.1.19.Final]   at java.lang.Thread.run(Thread.java:748) [na:1.8.0_151] ```  I attached two test cases, a positive and a negative one. The generic test:  ```java private void runTest(Publisher publisher)       throws InterruptedException, ExecutionException, TimeoutException {     CompletableFuture f = new CompletableFuture<>();      MultipartBodyBuilder builder = new MultipartBodyBuilder();     builder.asyncPart(""file"", publisher, String.class).headers(h -> {       h.setContentDispositionFormData(""file"", ""somefile.txt"");     });      WebClient.create().post() //         .uri(getURI()) //         .body(BodyInserters.fromMultipartData(builder.build())) //         .retrieve() //         .bodyToMono(String.class) //         .subscribe(filename -> {           f.complete(filename);         });      String filename = f.get(5, TimeUnit.SECONDS);     assertEquals(""somefile.txt"", filename);   } ```  The positive one that is working fine:  ```java   @Test   public void positiveTest() throws InterruptedException, ExecutionException, TimeoutException {     Publisher publisher = Mono.just(""someString"");      runTest(publisher);   } ```  The negative Test that fails with the above-mentioned exception:  ```java   @Test   public void negativeTest() throws InterruptedException, ExecutionException, TimeoutException {     Publisher publisher = new Publisher() {        @Override       public void subscribe(Subscriber subscriber) {         subscriber.onNext(""someString"");         subscriber.onComplete();       }     };      runTest(publisher);   } ```  See also #20922.  ---  **Affects:** 5.0.2  **Attachments:** - [testcase.tar.gz](https://jira.spring.io/secure/attachment/25346/testcase.tar.gz) (_1.95 kB_)  **Issue Links:** - #20922 Support Custom Headers for Multipart Async Data","closed","status: invalid,","spring-projects-issues","2018-01-21T07:10:30Z","2019-01-12T05:19:31Z"
"","20922","Support Custom Headers for Multipart Async Data [SPR-16376]","**[Marc-Christian Schulze](https://jira.spring.io/secure/ViewProfile.jspa?name=marc-christian.schulze)** opened **[SPR-16376](https://jira.spring.io/browse/SPR-16376?redirect=false)** and commented  In order to upload a file using the newly introduced method (cf. #20854)  ``` public static >  MultipartInserter BodyInserters::fromMultipartAsyncData (   String key,    P publisher,    Class elementClass ) ```  it's necessary to specify the filename and content type along with the publisher.  Right now when streaming asynchronously file content into a multipart request  ``` Publisher filePublisher = ... WebClient    .create(baseUrl)    .post()    .uri(""..."")    .body(BodyInserters.fromMultipartAsyncData(""file"", filePublisher, ByteBuffer.class))  ```  the resulting http request looks like:  ``` --ZAbh_nuM150m0P4R_zq9ywXiM_pJ0IKJq  Content-Disposition: form-data; name=""file""     ......  --ZAbh_nuM150m0P4R_zq9ywXiM_pJ0IKJq--   ```  As you can see the file name and the content type is not specified. For a correct file upload I would expect the http request to look like:  ``` --ZAbh_nuM150m0P4R_zq9ywXiM_pJ0IKJq  Content-Disposition: form-data; name=""file""; filename=""myFile.txt"" Content-Type: application/octet-stream     ......  --ZAbh_nuM150m0P4R_zq9ywXiM_pJ0IKJq--   ```  ---  **Affects:** 5.0.2  **Issue Links:** - #20948 MultipartHttpMessageWriter should not subscribe to Publisher multipart data (_**""depends on""**_) - #20854 Support Publishers for multipart data in BodyInserters - #20949 DataBufferUtils.read should not take input stream/channel as parameter - #20952 MultipartHttpMessageWriter fails when Publisher is provided as Multipart  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/646fcc5c2faf3df5905f7b1b5a62b4abd97a5d34, https://github.com/spring-projects/spring-framework/commit/283811b16b3b568230ace382f9d16c1c6b662b7a","closed","type: enhancement,","spring-projects-issues","2018-01-13T15:05:58Z","2019-01-11T15:16:48Z"
"","20854","Support Publishers for multipart data in BodyInserters [SPR-16307]","**[Marc-Christian Schulze](https://jira.spring.io/secure/ViewProfile.jspa?name=marc-christian.schulze)** opened **[SPR-16307](https://jira.spring.io/browse/SPR-16307?redirect=false)** and commented  In order to stream content into a MultipartRequest it would be nice to have support for Publisher, e.g.:  ``` Publisher publisher = ...  WebClient      .create(someUrl)      .post()      .uri(URI.create(""/whatever""))      .body(BodyInserters.fromMultipartData(""file"", publisher))     ... ```  ---  **Issue Links:** - #20897 Multi-part upload of a byte[] with WebTestClient is Base64 encoded (?) and assigned a JSON content type - #20922 Support Custom Headers for Multipart Async Data  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/283811b16b3b568230ace382f9d16c1c6b662b7a, https://github.com/spring-projects/spring-framework/commit/7035ee7ebb63f14e8947fe8c014bded3adfc028f, https://github.com/spring-projects/spring-framework/commit/6c3a64578c10dd4e6fed933864f1721cf35203ae, https://github.com/spring-projects/spring-framework/commit/f23612c3a3e5624051b8653389ca1a192c5b4875","closed","type: enhancement,","spring-projects-issues","2017-12-17T13:20:05Z","2019-01-11T15:24:23Z"
"","20999","MockHttpServletRequest.addHeader fails for invalid LanguageRange in Accept-Language [SPR-16454]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16454](https://jira.spring.io/browse/SPR-16454?redirect=false)** and commented  I have a Spring Project `4.3.10.RELEASE`, MVC and Rest are tested (working with JUnit 4). In some scenarios the `Accept-Language` header is applied. Until here all work fine.  I have created other project working with Spring Project `5.0.3.RELEASE`, practically the same infrastructure is used, but all the Test classes have migrated to JUnit 5. Remember the business and infrastructure code remains the same.  When I test MVC it fails with the following error message:  ``` Error Message range=en_us Stacktrace java.lang.IllegalArgumentException: range=en_us 	at java.util.Locale$LanguageRange.(Locale.java:2913) 	at sun.util.locale.LocaleMatcher.parse(LocaleMatcher.java:284) 	at java.util.Locale$LanguageRange.parse(Locale.java:3028) 	at org.springframework.http.HttpHeaders.getAcceptLanguage(HttpHeaders.java:479) 	at org.springframework.http.HttpHeaders.getAcceptLanguageAsLocales(HttpHeaders.java:499) 	at org.springframework.mock.web.MockHttpServletRequest.addHeader(MockHttpServletRequest.java:996) 	at org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.buildRequest(MockHttpServletRequestBuilder.java:624) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:141) 	at com.manuel.jordan.controller.persona.AbstractPersonaDeleteOneControllerTest.deleteOneDeleteTest(AbstractPersonaDeleteOneControllerTest.java:112) 	at com.manuel.jordan.controller ```  What is strange is `range=en_us` , the `Locale` is created in this way within an enum `new Locale(""en"",""US"")`.  The Rest Test classes fails with:  ``` Error Message 500 Internal Server Error Stacktrace org.springframework.web.client.HttpServerErrorException: 500 Internal Server Error 	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:97) 	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:79) 	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63) 	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:773) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:726) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:700) 	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:670) 	at  ```  Sadly the error message is not useful  **Note** I get the same error messages if for the first project I create a new branch through Git and use Spring updated to `5.0.3.RELEASE`.  Thus not sure if it is bug or something extra about configuration is mandatory now. I am confused  Thanks  ---  **Affects:** 5.0 GA, 5.0.3  **Issue Links:** - #20162 Spring WebFlux fails with 500 if Accept-Language is set to an empty string - #19591 Add HttpHeaders getter and setter for Accept-Language - #21315 Spring MVC in runtime fails when the locale is changed according with BCP 47 - #22098 MockHttpServletRequest changes Accept-Language header values  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3e21ec737938ea3a412d9027c9f6d6c0c780ba7","closed","type: regression,","spring-projects-issues","2018-02-01T19:56:53Z","2019-01-11T15:33:50Z"
"","20991","Document JUnit Jupiter options in Spring 4.3.x [SPR-16446]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16446](https://jira.spring.io/browse/SPR-16446?redirect=false)** and commented  I am migrating a Spring 4.x project from JUnit 4 to JUnit 5, taking in consideration to use all the APIs of JUnit **5**, thus removing all usage of JUnit **4**.  I realize I must use either `@ExtendWith(SpringExtension.class)`, `@SpringJUnitConfig`, or `@SpringJUnitWebConfig`, but this requires an upgrade to Spring 5.  I checked [Spring Framework Reference Documentation 4.3.14.RELEASE](https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/#testcontext-support-classes), but it is not clear, for example, if Spring 4.x can be used with JUnit 5 and how.  A dedicated section would be valuable.   ---  **Affects:** 4.3.14","closed","type: documentation,","spring-projects-issues","2018-01-31T15:56:15Z","2018-06-12T15:44:56Z"
"","20849","Introduce support for executing a test class with different sets of profiles [SPR-16302]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16302](https://jira.spring.io/browse/SPR-16302?redirect=false)** and commented  Hello Spring Team  Consider to add a new feature for Testing support with the purpose to have just one Spring Test class to be tested many times with a different set of profiles, it for each set.  More details in the link from SO.  Thank You.   ---  **Affects:** 4.3.10  **Reference URL:** https://stackoverflow.com/questions/47816959/testing-one-spring-test-class-for-many-different-set-of-profiles","open","type: enhancement,","spring-projects-issues","2017-12-14T15:39:04Z","2019-01-15T10:51:21Z"
"","20564","Let Spring show the URL mappings for @MessageMapping in startup process [SPR-16015]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16015](https://jira.spring.io/browse/SPR-16015?redirect=false)** and commented  When I startup the Tomcat server I can see during the process all the `URL URI` available in the web app from all the `@Controller` and `@RestController` according their `@RequestMapping` and variations such as: `@GetMapping` etc. And of course taking in consideration the attributes, such as `produces`, `consumes` etc ...  I think for `websocket` the same should happen for `@MessageMapping`   ---  **Affects:** 4.3.11","closed","type: enhancement,","spring-projects-issues","2017-09-26T23:26:21Z","2019-03-12T21:07:06Z"
"","20420","Improve @ActiveProfiles [SPR-15865]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-15865](https://jira.spring.io/browse/SPR-15865?redirect=false)** and commented  I have the following which works fine.  ```java public class TestActiveProfilesResolver implements ActiveProfilesResolver {  	@Override 	public String[] resolve(Class testClass) { 		return new String[]{Profile.ConstantEnvironment.DEVELOPMENT, 							Profile.ConstantDatabase.H2, 							Profile.ConstantAOP.AOP_LOGIC_VALIDATION}; 	}  } ```  **Note** the `resolve` method shown above must **not** be edited.  Thus, it can be used as follows:  ```java @ActiveProfiles(resolver=TestActiveProfilesResolver.class) ```  Until here all fine.  Now I have two `@Test` classes, where for one of them I need add the `JDBC` profile. The other needs the `hibernate` profile.  Well, my first attempt was:  ```java @ActiveProfiles(resolver=TestActiveProfilesResolver.class, profiles={Profile.ConstantPersistence.JDBC}) ```  Even when above compiles, sadly at **runtime** the `profiles` attribute is completely _ignored_.  **Question 1**: It is the expected behavior?, or is a kind of bug?  Only is considered the `resolver` attribute. Thus the `@Test` methods fail because the `ApplicationContext` can't be created _correctly_ because the `JDBC` profile was not applied and some beans were therefore not created.  Seems mandatory to create a new class that implements `TestActiveProfilesResolver`.  Ok until some point, because the following is not possible:  ```java @ActiveProfiles(resolver={TestActiveProfilesResolver.class,TestJdbcActiveProfilesResolver.class}) ```  It because the `resolver` attribute returns `Class`.  **Question 2**: Would it be possible to consider perhaps returning an _array_ of `ActiveProfilesResolver` for the `resolver` attribute, or to create a new attribute named `resolvers` (plural) to represent the array?  My unique way by the moment is having this subclass:  ```java public class TestJdbcActiveProfilesResolver extends TestActiveProfilesResolver {  	@Override 	public String[] resolve(Class testClass) { 		return Stream.concat(Arrays.stream(super.resolve(testClass)), 				             Arrays.stream(new String[]{Profile.ConstantPersistence.JDBC})) 				     .toArray(String[]::new); 	}  } ```  And of course using:  ```java @ActiveProfiles(resolver = TestJdbcActiveProfilesResolver.class) ```    ---  **Affects:** 4.3.8","closed","type: enhancement,","spring-projects-issues","2017-08-15T20:26:05Z","2017-08-26T15:57:58Z"
"","21125","NullPointerException in AnnotationAwareOrderComparator#getPriority [SPR-16583]","**[Manish Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=its_panwar)** opened **[SPR-16583](https://jira.spring.io/browse/SPR-16583?redirect=false)** and commented  This issue is similar to #20378 but at a different code location.  We have registered 2 instances of same bean, one is nullable and other is not-nullable. Now we use/inject these beans in some other components as follows:  ``` @Autowired(required = false) private MyConfig nullableBean; @Autowired private MyConfig nonNullableBean; ```  We get NPE in Spring 5.0.3 while 4.3.10 used to work fine.  ``` Caused by: java.lang.NullPointerException: null 	at org.springframework.core.annotation.AnnotationAwareOrderComparator.getPriority(AnnotationAwareOrderComparator.java:109) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getPriority(DefaultListableBeanFactory.java:1471) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.determineHighestPriorityCandidate(DefaultListableBeanFactory.java:1417) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.determineAutowireCandidate(DefaultListableBeanFactory.java:1348) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1113) ```  What we found that older version(4.3.10) of Spring had null check and then in 5.0.3 we seems to have removed it. See below code from **AnnotationAwareOrderComparator** class from 5.0.3.  ```      public Integer getPriority(Object obj) {      if (obj instanceof Class) {           return OrderUtils.getPriority((Class) obj);      }      Integer priority = OrderUtils.getPriority(obj.getClass());      if (priority == null && obj instanceof DecoratingProxy) {           priority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass());      }      return priority; } ```  Here if **obj** is NULL, NPE will happen. Spring-core 4.3.10 had NULL check for same. Below is code snippet from Spring-core 4.3.10 which has proper NULL check.  ```     public Integer getPriority(Object obj) {      Integer priority = null;      if (obj instanceof Class) {           priority = OrderUtils.getPriority((Class) obj);      }      else if (obj != null) {           priority = OrderUtils.getPriority(obj.getClass());           if (priority == null && obj instanceof DecoratingProxy) {                priority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass());           }      }      return priority; } ```  ---  **Affects:** 5.0.3  **Issue Links:** - #21051 NPE in AnnotationAwareOrderComparator.getPriority (_**""duplicates""**_) - #20378 AnnotationAwareOrderComparator doesn't handle null values anymore","closed","in: core,","spring-projects-issues","2018-03-12T21:05:33Z","2019-01-12T16:44:41Z"
"","20428","MicroService auto wiring. [SPR-15873]","**[Madhusudhana Rao Valeti](https://jira.spring.io/secure/ViewProfile.jspa?name=valetimadhu)** opened **[SPR-15873](https://jira.spring.io/browse/SPR-15873?redirect=false)** and commented  Hi, It would be a great if Spring come up with micro service auto wiring like bean auto wiring. I know it's different than bean wiring as spring beans are controlled at spring container level where as micro services will be controlled at cloud level. Bean discovery is different from micro service discovery as beans are registered with static ip address where as micro service address are dynamic.  Thanks & Regards Madhusudhan Valeti   --- No further details from [SPR-15873](https://jira.spring.io/browse/SPR-15873?redirect=false)","closed","in: core,","spring-projects-issues","2017-08-17T17:13:32Z","2019-01-12T05:20:27Z"
"","21106","Reading annotations in ConfigurationClassParser does not fall back to ASM on Google App Engine [SPR-16564]","**[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave)** opened **[SPR-16564](https://jira.spring.io/browse/SPR-16564?redirect=false)** and commented  `ConfigurationClassParser` has a sanity test to ensure that annotations can be read and in case of an Exception, it falls back to ASM. On Google App Engine `classType.getAnnotations()` does not throw an Exception if a class is not found and instead the annotation value looks something like this `value=sun.reflect.annotation.TypeNotPresentExceptionProxy`.  This causes unexpected behavior in Spring Boot's `OnClassCondition` as the metadata is not an `AnnotationMetadataReadingVisitor`.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #15712 `@PropertySources` fails on JDK 7 due to `@Repeatable` - #15274 Support `@Configuration` class parsing fallback to ASM  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7cafa6764ce12191bd824da06b88729dffc20e69, https://github.com/spring-projects/spring-framework/commit/967a2ef2d20b7bc6f6bf79463ee15d7c3e2ec607, https://github.com/spring-projects/spring-framework/commit/50e980c02f0dba610303e064289be0420d1f6ce1  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-07T20:22:24Z","2019-01-13T04:49:55Z"
"","20845","Provide access to ApplicationContext via ServerWebExchange [SPR-16298]","**[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave)** opened **[SPR-16298](https://jira.spring.io/browse/SPR-16298?redirect=false)** and commented  In the MVC world, we can get the `servletContext` from the `HttpServletRequest` and then get a handle on the `ApplicationContext`.  It would be nice if we could have something similar for a `ServerWebExchange`.  ---  **Issue Links:** - #21510 The WebHttpHandlerBuilder copy constructor does not copy the applicationcontext  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37f0e8c6e541f58364691e1c49a179ed6e629570  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2017-12-13T18:22:41Z","2019-01-11T15:13:46Z"
"","20876","Empty List instead of null in List files [SPR-16329]","**[Maciej Zerkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=zerkowsm)** opened **[SPR-16329](https://jira.spring.io/browse/SPR-16329?redirect=false)** and commented  This is a followup to the following bug: #20472.  It seems that it's not possible to send `null` as `List` or `MultipartFile[]` in `@RequestPart(value = ""attachments"", required = false) List files` controller's method param. I tried PUT and POST.  ---  **Affects:** 4.3.13  **Issue Links:** - #20472 java.util.Optional MultipartFile[] `@RequestParam` argument is null in multipart/form-data POST  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8f6d3feaa0280261497042a9c2bc746d2d7f2f68","closed","status: declined,","spring-projects-issues","2017-12-28T15:02:01Z","2019-01-14T04:32:48Z"
"","20925","WebTestClient - expecting lack of header [SPR-16379]","**[Maciej Szarlinski](https://jira.spring.io/secure/ViewProfile.jspa?name=mszarlinski)** opened **[SPR-16379](https://jira.spring.io/browse/SPR-16379?redirect=false)** and commented  **EDIT: it has been added in 5.0.3 already**  There is no way to verify whether response header is missing using WebTestClient, apparently HeaderAssertions has no suitable method for that.  It would be nice to enhance HeaderAssertions API adding doesNotContain(headerName) method.  ---  **Issue Links:** - #20832 Improve HeaderAssertions for specific tests (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2018-01-14T13:20:59Z","2019-01-11T15:16:50Z"
"","21119","SimpleAliasRegistry registerAlias not atomic [SPR-16577]","**[László Magyar](https://jira.spring.io/secure/ViewProfile.jspa?name=magyarl)** opened **[SPR-16577](https://jira.spring.io/browse/SPR-16577?redirect=false)** and commented  org.springframework.core.SimpleAliasRegistry class registerAlias method get - compute - put is not atomic. It should be synchronized with this.aliasMap or java.util.concurrent.ConcurrentMap interface compute method should be used.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #21113 WebAsyncManager concurrentResult should be volatile - #21166 FactoryBeanRegistrySupport atomicity issues  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3dff1b3f6e9589b4b33f0311e349c2bf694d89ea, https://github.com/spring-projects/spring-framework/commit/1b1a69a144f657d46c752f1c017f64d3302891d2  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-10T01:35:17Z","2019-01-11T14:31:18Z"
"","21113","WebAsyncManager concurrentResult should be volatile [SPR-16571]","**[László Magyar](https://jira.spring.io/secure/ViewProfile.jspa?name=magyarl)** opened **[SPR-16571](https://jira.spring.io/browse/SPR-16571?redirect=false)** and commented  concurrentResult field of org.springframework.web.context.request.async.WebAsyncManager should be volatile to enforce the read thread to reach the memory.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #21119 SimpleAliasRegistry registerAlias not atomic  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-08T23:27:07Z","2019-01-11T14:30:53Z"
"","20616","MockMvc async does not re-use response instance on async dispatch [SPR-16067]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-16067](https://jira.spring.io/browse/SPR-16067?redirect=false)** and commented  I have a MockMvc test for testing controller with deferred result. It works nice, unit the moment I add ShallowEtagFilter which assumes that the response from the async start request is kept for the following processing. MockMvc.perform always creates new MockHttpServletResponse which causes ShallowEtagFilter to fail. Please, see this demo project for details https://github.com/lukas-krecan-lt/async-demo  ---  **Affects:** 4.3.11  **Reference URL:** https://github.com/lukas-krecan-lt/async-demo/blob/master/src/test/java/com/example/asyncdemo/AsyncControllerTest.java  **Issue Links:** - #20976 MockMvc error handling with CompletableFuture regression in 5.0.1+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cd634633d8ba690ff5c91efdbd0ace19e1018fe2","closed","type: enhancement,","spring-projects-issues","2017-10-13T08:24:48Z","2019-01-11T13:11:44Z"
"","20728","spring webflux: stack overflow when response data is greater then 16MB [SPR-16180]","**[Lukas Havemann](https://jira.spring.io/secure/ViewProfile.jspa?name=lukashavemann)** opened **[SPR-16180](https://jira.spring.io/browse/SPR-16180?redirect=false)** and commented  Hello,  we are using the `org.springframework.web.reactive.function.client.WebClient` for querying a REST-Service. Its all working fine, but when the response data exceeds a certain size (in our case 16 MB), we are runnig into a stack overflow inside netty-Code.  java.lang.StackOverflowError: null at io.netty.buffer.CompositeByteBuf.isDirect(CompositeByteBuf.java:567) ~[netty-buffer-4.1.13.Final.jar:4.1.13.Final] at io.netty.buffer.AbstractUnpooledSlicedByteBuf.isDirect(AbstractUnpooledSlicedByteBuf.java:85) ~[netty-buffer-4.1.13.Final.jar:4.1.13.Final] at io.netty.buffer.CompositeByteBuf.isDirect(CompositeByteBuf.java:567) ~[netty-buffer-4.1.13.Final.jar:4.1.13.Final] at io.netty.buffer.AbstractUnpooledSlicedByteBuf.isDirect(AbstractUnpooledSlicedByteBuf.java:85) ~[netty-buffer-4.1.13.Final.jar:4.1.13.Final] at io.netty.buffer.CompositeByteBuf.isDirect(CompositeByteBuf.java:567) ~[netty-buffer-4.1.13.Final.jar:4.1.13.Final]  I think the stack overflow is caused by the call of isDirect() in the NettyDataBuffer Class in line 211 [1].  best regards, Lukas  [1] https://github.com/spring-projects/spring-framework/blob/c7a15260d631371481519098432795e8808ec9bc/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBuffer.java#L211   ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8223809455a5eabf85321ead0df483a3f29e7755","closed","type: bug,","spring-projects-issues","2017-11-09T13:36:45Z","2017-11-27T12:17:09Z"
"","21034","Order of JMS TransactionSynchronizations should be sortable programmatically [SPR-16491]","**[Ludovit Varga](https://jira.spring.io/secure/ViewProfile.jspa?name=ludovit.varga)** opened **[SPR-16491](https://jira.spring.io/browse/SPR-16491?redirect=false)** and commented  Scenario: I have application that consume message from JMS Server A, update row in database and produce messages to multiple JMS queues on different servers. This must be done in transaction and without JTA. Application is written with Spring Boot 2.0.0.M7 (with Spring 5.0.2) with data-jpa and jms starters.  Problem: Application can't use JTA transactions (requirement from client), so I implemented [Best effort 1PC pattern](https://www.javaworld.com/article/2077963/open-source-tools/distributed-transactions-in-spring--with-and-without-xa.html?page=2). It works nicely but client needs to have specific order of commit/rollback of JMS transactions. In my case he required that outbound messages are committed first and then are committed inbound message.  When i was reading thru code and documentation i found JmsResourceSynchronization and TransactionSynchronizationManager that are in middle of this functionality.  If i understand code correctly then while triggering afterCommit, JpaTransactionManager gets list of sorted TransactionSynchronization and sorting is done with AnnotationAwareOrderComparator.sort(). My observation is that order of commit/rollback is based on order in which JMS messages was send (and registered inside TransactionSynchronizationManager).  Because most methods are static and JmsResourceSynchronization is private, only what i can currently do is ugly and unreliable workaround like this:  ```java List synchronizations = TransactionSynchronizationManager.getSynchronizations(); TransactionSynchronizationManager.clearSynchronization(); TransactionSynchronizationManager.initSynchronization(); synchronizations = Lists.reverse(synchronizations); synchronizations.forEach(TransactionSynchronizationManager::registerSynchronization); ```  If this sorting of same implementation of TransactionSynchronization (in my case JmsResourceSynchronization) can be done programmatically from `@Configuration` classes, that would be great.   ---  **Affects:** 5.0.2","open","type: enhancement,","spring-projects-issues","2018-02-13T15:58:05Z","2018-02-13T17:03:45Z"
"","20896","Generic bean factory [SPR-16349]","**[Lovro Pandžić](https://jira.spring.io/secure/ViewProfile.jspa?name=lpandzic)** opened **[SPR-16349](https://jira.spring.io/browse/SPR-16349?redirect=false)** and commented  From https://stackoverflow.com/questions/45741395/spring-generic-bean-factory, I'd like to be able to define a factory which automatically creates beans for all beans declared of a certain type. The important part is that the factory has generic type available upon request. If this is already possible, please provide an example in the documentation.   ---  1 votes, 1 watchers","open","in: core,","spring-projects-issues","2018-01-04T15:51:28Z","2021-11-12T12:17:46Z"
"","20753","@RequestMapping get '406 Not Acceptable' when change 'produces' order [SPR-16205]","**[Loi Huu Mai](https://jira.spring.io/secure/ViewProfile.jspa?name=maihuuloi123)** opened **[SPR-16205](https://jira.spring.io/browse/SPR-16205?redirect=false)** and commented  I have a Rest API for download Media Resource. Inside this API, an exception would be thrown if some conditions are satisfied, no physical file found for example. I have a `@ControllerAdvice` class which will catch that exception and returns a JSON Object.  The problem is when an exception is thrown and caught in ControllerAdvice, if I had the **produces** with MediaType.APPLICATION_JSON_VALUE stand first, it will work fine, a JSON Object will be returned.  ```java @RequestMapping(value = ""/download"", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_OCTET_STREAM_VALUE}) ```  ```json {     ""id"": 2,     ""message"": ""Test message"" } ```  However,  MediaType.APPLICATION_OCTET_STREAM_VALUE stand first,   406 Not Acceptable status will be returned  ```java @RequestMapping(value = ""/download"", method = RequestMethod.GET, produces = { MediaType.APPLICATION_OCTET_STREAM_VALUE, MediaType.APPLICATION_JSON_VALUE} ```  I did some debug into the framework and found this: !Debug.png|thumbnail!  The result should be the same regardless the order of produces.  ---  **Affects:** 4.3.12  **Reference URL:** https://github.com/maihuuloi123/accept_mapping_bug.git  **Attachments:** - [Debug.png](https://jira.spring.io/secure/attachment/25293/Debug.png) (_98.65 kB_)  **Issue Links:** - #18982 Content negotiation fails with the conjonction of text/plain and ExceptionHandler (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-11-16T05:04:27Z","2019-01-12T16:44:47Z"
"","20612","BeanDefinitionValidationException when beans are null (NullBean) and initMethod is set [SPR-16063]","**[Loabe Me](https://jira.spring.io/secure/ViewProfile.jspa?name=loebe0)** opened **[SPR-16063](https://jira.spring.io/browse/SPR-16063?redirect=false)** and commented  After upgrading to Spring 5.0.0 the following exception occurs during application runtime:  ``` Caused by: org.springframework.beans.factory.support.BeanDefinitionValidationException: Couldn't find an init method named 'initialize' on bean with name 'offlineMode' 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1795) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1772) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1700) ```  I tracked it down to the AbstractAutowireCapableBeanFactory.invokeCustomInitMethod where the bean object is correctly typed as NullBean.class. But nonetheless there is a BeanDefinitionValidationException thrown because the initMethod is null. Is this an expected change in behavior from 4.x to 5.x? For our situation its a breaking change because there is a 3rd party library initialized that can produce null beans. If that change was expected, whats the correct way to do handle that situation with 5.x?  ---  **Affects:** 5.0 GA  **Issue Links:** - #20582 CastClass exception when wiring Map of beans (NullBean instead of 'null' in the map) - #20384 Autowire contract is not honored in cases where FactoryBean or `@Bean` return null  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91a899389575755f89760d9cd21c564632c15394","closed","in: core,","spring-projects-issues","2017-10-12T12:00:57Z","2019-01-13T05:02:54Z"
"","20720","AbstractMessageConverterMethodProcessor ignores HttpEntityMethodProcessor's Content-Type header [SPR-16172]","**[Liam Bryan](https://jira.spring.io/secure/ViewProfile.jspa?name=.com)** opened **[SPR-16172](https://jira.spring.io/browse/SPR-16172?redirect=false)** and commented  **Context:** We have a controller method which returns `ResponseEntity` (because several conversions are supported based on the client's request).  This means that there is no `produces` specified in the `@RequestMapping` (or more directly, `@GetMapping`) annotation.  Using: `return ResponseEntity.ok().contentType(...).body(...);`  I believe it should be possible to directly specify the `Content-Type` of the returned entity.  **Problem** The `HttpEntityMethodProcessor` _does_ add the specified `Content-Type` header to the `outputHeaders` (line `184`); however the call to `AbstractMessageConverterMethodProcessor.writeWithMessageConverters` does _not_ pay attention to this header's presence.  `getProducibleMediaTypes` then falls through to looking at the `produces` part of the `@RequestMapping` annotation (which is empty) and so declares support for everything.  In our case this means that it ends up being handled by the _wrong_ (or at least, from our perspective, not the intended) `HttpMessageConverter`.  **Current workaround** We are getting around this at present by adding a call to `HttpServletRequest.setAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, Collections.singleton(...));` (which then directly overrides the return value from `getProducibleMediaTypes`).  I'm not 100% certain this is a bug, but it certainly makes using the `ResponseEntity.BodyBuilder.contentType` method appear misleading in this context.  Tested on both `4.3.7.RELEASE` and `4.3.12.RELEASE`.  ---  **Affects:** 4.3.7, 4.3.12  **Issue Links:** - #20993 WebMVC RequestMapping Produces Problem (_**""is duplicated by""**_) - #20798 Breaking change in MVC: Accept handling is now more strict  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a894ab61e4613af176029761b75d7ad2a733440","closed","type: bug,","spring-projects-issues","2017-11-08T00:06:47Z","2019-01-14T04:33:22Z"
"","21099","PostgresTableMetaDataProvider.isGetGeneratedKeysSimulated() does not detect Postgres 10 [SPR-16556]","**[LI Geng](https://jira.spring.io/secure/ViewProfile.jspa?name=theangus)** opened **[SPR-16556](https://jira.spring.io/browse/SPR-16556?redirect=false)** and commented  After postgresql server upgraded to version 10+, string comparison fails to return correct value.  In PostgresTableMetaDataProvider.java:      if (version != null && version.compareTo(""8.2.0"") >= 0) {          return true;     }  ""10"".compareTo(""8.2.0"") < 0  ---  **Affects:** 3.2.18, 4.3.10, 5.0.4  **Issue Links:** - #21152 CallMetaDataContext.reconcileParameters doesn't catch output parameters with DatabaseMetaData.procedureColumnResult type (on Postgres) - #21101 Consistent incrementer arrangement for PostgreSQL, DB2 and SAP HANA  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1717, and commits https://github.com/spring-projects/spring-framework/commit/4a4f2c2f0810416b25165545988690d84b55347c, https://github.com/spring-projects/spring-framework/commit/b643f7836c3fc59445eb5a1e6b03d747a8a4229e  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-06T04:20:12Z","2019-01-11T14:33:25Z"
"","20410","Autowire resolution mechanism doesn't work with generic covariance [SPR-15855]","**[lhbaccount](https://jira.spring.io/secure/ViewProfile.jspa?name=lhbaccount)** opened **[SPR-15855](https://jira.spring.io/browse/SPR-15855?redirect=false)** and commented  GenericTypeAwareAutowireCandidateResolver doesn't work with generic covariance   ---  **Affects:** 4.3.10","open","in: core,","spring-projects-issues","2017-08-09T08:57:23Z","2019-01-11T17:40:10Z"
"","20406","Kotlin bean instantiation regression with default declared constructor [SPR-15851]","**[Lewis](https://jira.spring.io/secure/ViewProfile.jspa?name=lewis)** opened **[SPR-15851](https://jira.spring.io/browse/SPR-15851?redirect=false)** and commented  #20232 is the original report of the issue.  With Spring Boot 2.0 M3:  ```java @ConfigurationProperties(""foo"") class FooProperties(     var bar: String = ""bar"",     var baz: Int = 1 ) ```  Generates this stacktrace:  ``` Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [de.techdev.xyz.FooProperties]: No corresponding Kotlin constructor found         at org.springframework.beans.BeanUtils$KotlinDelegate.instantiateClass(BeanUtils.java:742) ~[spring-beans-5.0.0.RC3.jar:5.0.0.RC3]         at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:165) ~[spring-beans-5.0.0.RC3.jar:5.0.0.RC3]         at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:88) ~[spring-beans-5.0.0.RC3.jar:5.0.0.RC3] ```  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20232 Kotlin class instantiation with optional parameters and default values  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef175d7ca6fc0f66db527abfaa796edc6744da9c","closed","type: bug,","spring-projects-issues","2017-08-07T07:04:01Z","2019-01-11T17:39:56Z"
"","20646","Add new html content matcher for MockMvcResultMatchers [SPR-16097]","**[Leonard Brünings](https://jira.spring.io/secure/ViewProfile.jspa?name=leonard84)** opened **[SPR-16097](https://jira.spring.io/browse/SPR-16097?redirect=false)** and commented  The current `ContentResultMatchers` have direct support for plain strings, json, and xml. I would propose to add another that supports the usage of `cssQuery` and `DOM` operations.  Using https://jsoup.org/ I've created a small POC and it was rather easy to get this example implemented.  This example checks if the csrf token was correctly injected by spring security.  ```java mockMvc.perform(get(""/"").with(user(""user""))) 		.andExpect(status().is2xxSuccessful()) 		.andExpect(html(contains(""form input[type=hidden][name=_csrf]""))); ```  I don't think that there is a way to do the same with the current available methods, the closest would be a `containsString(""","open","type: enhancement,","spring-projects-issues","2017-10-22T18:51:09Z","2019-09-25T20:50:01Z"
"","20847","Typo in example code in spring reactive reference document [SPR-16300]","**[Lei Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=raistlic)** opened **[SPR-16300](https://jira.spring.io/browse/SPR-16300?redirect=false)** and commented  The current example code:  ``` import static org.springframework.http.HttpStatus.UNAUTHORIZED;  SecurityManager securityManager = ... RouterFunction route = ...  RouterFunction filteredRoute = 	route.filter(request, next) -> { // line with typo 		if (securityManager.allowAccessTo(request.path())) { 			return next.handle(request); 		} 		else { 			return ServerResponse.status(UNAUTHORIZED).build(); 		}   }); ```  Notice there is a **(** missing in the invocation **route.filter**, which may confuse the readers.   ---  **Affects:** 5.0.2  **Reference URL:** https://docs.spring.io/spring-framework/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/web-reactive.html#_handlerfilterfunction  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b8201f48fd7d3c5650e14b1443414f1c9665cbfe","closed","type: documentation,","spring-projects-issues","2017-12-13T23:27:41Z","2018-01-23T10:05:11Z"
"","20409","Backport s/s/m/j/o/s/m/w/MockPart.java from 5.x to 4.3.x [SPR-15854]","**[Laurent Perez](https://jira.spring.io/secure/ViewProfile.jspa?name=laurentperez)** opened **[SPR-15854](https://jira.spring.io/browse/SPR-15854?redirect=false)** and commented  Currently s/s/m/j/o/s/m/w/MockPart.java from 5.x to 4.3.x is 5.x only In 4.3.x there is MockHttpServletRequest.java#addPart(Part p), but no mock for Part It'd be useful to be able to reuse MockPart in 4.3.x  Context : wrote a test case in a non Spring Web project (bare Servlets + Mockito) but used Spring Test mocks in test dependencies. Had to copy paste MockPart from 5.x without Nullable/Assert to get the mock.  ---  **Affects:** 4.3.10  **Issue Links:** - #18825 Introduce MockPart in spring-test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87df393f9154d8da2fe2580982ff5fed2082129f, https://github.com/spring-projects/spring-framework/commit/ea01c4113af22099755de763e9fb1dddb7691c0b","closed","type: enhancement,","spring-projects-issues","2017-08-09T00:16:07Z","2019-01-11T17:39:52Z"
"","20530","Consider Starting a Gitter Chat Room [SPR-15980]","**[Kyle Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=kanderson)** opened **[SPR-15980](https://jira.spring.io/browse/SPR-15980?redirect=false)** and commented  I would like to suggest starting a Gitter chat room for the Spring Framework itself.  Many other projects in the Spring portfolio use this tool as an alternative support channel to Jira/GitHub Issues and Stackoverflow.  It is most useful when a question or problem needs some back and forth interaction from others in the community.  Those scenarios are not well supported by Stackoverflow nor do they necessarily warrant a new Issue.  Thanks for your consideration.   ---  **Reference URL:** https://jira.spring.io/browse/SPR-15265?focusedCommentId=135538&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-135538","closed","status: declined,","spring-projects-issues","2017-09-19T18:48:46Z","2022-02-18T20:25:29Z"
"","20554","Controller fails to map for URLs patterns containing semicolons [SPR-16005]","**[Konstantin Chernov](https://jira.spring.io/secure/ViewProfile.jspa?name=cherko)** opened **[SPR-16005](https://jira.spring.io/browse/SPR-16005?redirect=false)** and commented  We use Spring WebFlux 5.0 RC4 in our project. We have semicolon format URLs like  > http:/server_url/command;t=param1;param2  Controller worked with annotation  > `@GetMapping`(path=""/command;{params}"")  public Mono>> getSpecificChannels(`@PathVariable` String params)  in Spring WebFlux version 5.0.0.m5  Now I'm getting  > Response status 404 with reason ""No matching handler""   If semicolon is removed from URL then method is mapped but variable params is empty  ---  **Affects:** 5.0 RC4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab92754a2efebda6baa063e8ecd381c322582cf8  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2017-09-25T15:47:40Z","2019-01-13T20:28:35Z"
"","21058","Incorrect return type of Kotlin suspending functions [SPR-16515]","**[Konrad Kamiński](https://jira.spring.io/secure/ViewProfile.jspa?name=konrad-kaminski)** opened **[SPR-16515](https://jira.spring.io/browse/SPR-16515?redirect=false)** and commented  The return type of Kotlin suspending functions (as returned via [`getParameterType()`](https://github.com/spring-projects/spring-framework/blob/v5.0.3.RELEASE/spring-core/src/main/java/org/springframework/core/MethodParameter.java#L396) and [`getGenericParameterType()`](https://github.com/spring-projects/spring-framework/blob/v5.0.3.RELEASE/spring-core/src/main/java/org/springframework/core/MethodParameter.java#L416) methods of [`MethodParameter`](https://github.com/spring-projects/spring-framework/blob/v5.0.3.RELEASE/spring-core/src/main/java/org/springframework/core/MethodParameter.java)) is incorrect. The true return type is actually a generic type of the last parameter of the method.  This issue affects [spring-kotlin-coroutine](https://github.com/konrad-kaminski/spring-kotlin-coroutine) library, specifically issues [#10](https://github.com/konrad-kaminski/spring-kotlin-coroutine/issues/10) and [#14](https://github.com/konrad-kaminski/spring-kotlin-coroutine/issues/14).  This issue is related to #19975.  ---  **Affects:** 5.0.3  **Issue Links:** - #19975 Add support for Kotlin coroutines - #21073 Cache, allow custom wrapper types other than java.util.Optional  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1694  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2018-02-19T10:31:38Z","2019-03-06T09:32:19Z"
"","20502","PathMatchingResourcePatternResolver not working fine on weblogic and websphere [SPR-15950]","**[kk580kk](https://jira.spring.io/secure/ViewProfile.jspa?name=huangjie)** opened **[SPR-15950](https://jira.spring.io/browse/SPR-15950?redirect=false)** and commented  In my project, I used this code to find resources in jar file. It works nice in tomcat and spring-boot:run but cannot find any resources in jar file in weblogic and websphere . this is my code:  ```java PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(); Resource[] moduleProps = resolver.getResources(""classpath*:""+ resourceName + "".properties""); ```  I tried to fix this problem and find out PathMatchingResourcePatternResolver.class.getClassLoader().getResources(path) returns different values between tomcat and weblogic.  So by read this stackoverflow https://stackoverflow.com/questions/17429736/spring-configuration-files-loading-not-working-on-websphere-7 I think rewrite PathMatchingResourcePatternResolver() maybe the best answer.  In my project, I used PathMatchingResourcePatternResolver like this:  ```java               PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver() {                     /* 重写用来支持file开头的jar包读取*/                     protected Resource convertClassLoaderURL(URL url) {                         if (url.getProtocol().equals(""file"") && url.getFile().endsWith("".jar"")) {                             try {                                 return new UrlResource(""jar"", url + ""!/"");                             } catch (final MalformedURLException ex) {                                 //LOG.catching(ex);                             }                         }                         return new UrlResource(url);                     }                      /*重写用来支持遇到classes目录，去读取隔壁目录的lib下面的jar包里面的properties*/                     protected Set doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) throws IOException {                         Set matches = super.doFindPathMatchingFileResources(rootDirResource, subPattern);                         try {                             File rootDir = rootDirResource.getFile();                             /*for mac and linux*/                             if (rootDir.getAbsolutePath().endsWith(""/classes"")) {                                 rootDir = new File(rootDir.getAbsolutePath().substring(0, rootDir.getAbsolutePath().lastIndexOf(""/classes"")) + ""/lib"");                             }                             /*for windows*/                             if (rootDir.getAbsolutePath().endsWith(""\\classes"")) {                                 rootDir = new File(rootDir.getAbsolutePath().substring(0, rootDir.getAbsolutePath().lastIndexOf(""\\classes"")) + ""\\lib"");                             }                             if (rootDir.isDirectory()) {                                 System.out.println(""[CONFIG] config doFindPathMatchingJarResources rootDir: "" + rootDir.getAbsolutePath());                                 Set containedJARs = doFindMatchingFileSystemResources(rootDir, ""*.jar"");                                 for (Resource jar : containedJARs) {                                     Set matchingResourcesFoundInJar = doFindPathMatchingJarResources(convertClassLoaderURL(jar.getURL()), jar.getURL(), subPattern);                                     if (matchingResourcesFoundInJar != null && matchingResourcesFoundInJar.size() > 0) {                                         for (Resource resource : matchingResourcesFoundInJar) {                                             System.out.println(""[CONFIG] config doFindPathMatchingJarResources resource: "" + resource.getURL());                                         }                                         matches.addAll(matchingResourcesFoundInJar);                                     }                                 }                             }                         } catch (final IOException ex) {                             ex.printStackTrace();                         }                         return matches;                     }                  }; ```  And finally fixed this problems.  Now I think Spring can fix this problem in the framework or write on the document.  I have submit a pull request to fix this problem .  Kind regards, kk580kk   ---  **Affects:** 4.3.8  **Reference URL:** https://stackoverflow.com/questions/17429736/spring-configuration-files-loading-not-working-on-websphere-7","closed","in: core,","spring-projects-issues","2017-09-11T01:19:44Z","2021-11-29T16:10:37Z"
"","20684","main menu [SPR-16136]","**[kirthi](https://jira.spring.io/secure/ViewProfile.jspa?name=kirthi)** opened **[SPR-16136](https://jira.spring.io/browse/SPR-16136?redirect=false)** and commented   --- No further details from [SPR-16136](https://jira.spring.io/browse/SPR-16136?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-10-31T06:41:34Z","2019-01-12T05:20:02Z"
"","20962","`DelegatingServletInputStream#available` always returns 0 [SPR-16416]","**[Ketan Padegaonkar](https://jira.spring.io/secure/ViewProfile.jspa?name=ketanpkr)** opened **[SPR-16416](https://jira.spring.io/browse/SPR-16416?redirect=false)** and commented  `InputStream#available()` is expected to answer the remaining number of bytes that can be read without blocking. The default implementation returns a `0`, but subclasses may override it.  The `DelegatingServletInputStream` which delegates to a `ByteArrayOutputStream` would be expected to delegate this call to the stream it wraps over, instead of delegating to the superclass and return a `0`.  I can submit a PR on github with this implementation if it's allright with the core team:  ```java public class DelegatingServletInputStream extends ServletInputStream { ... 	@Override 	public int available() throws IOException { 		return this.sourceStream.available(); 	} ... } ```    ---  **Affects:** 5.0.3  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1652","closed","type: enhancement,","spring-projects-issues","2018-01-25T15:06:51Z","2018-02-19T12:19:19Z"
"","20481","Autowired Rules do not work with SpringClassRule or SpringMethodRule [SPR-15927]","**[Ken Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=khkwang)** opened **[SPR-15927](https://jira.spring.io/browse/SPR-15927?redirect=false)** and commented  Using `SpringJUnit4ClassRunner`, one was able to autowire a JUnit 4 rule into a test.  However, with `SpringClassRule` and `SpringMethodRule`, this no longer seems to be possible and though my rule is autowired, the rule is never actually applied.  ---  **Issue Links:** - #14885 Add ability to inject dependencies into JUnit 4 `@Rule` and `@ClassRule` instances  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ba6b617bd518444b2fe654c87a29e4c1275f55e4","closed","status: declined,","spring-projects-issues","2017-09-05T21:46:45Z","2019-01-13T05:04:52Z"
"","20480","spring-instrument javaagent fails to weave classes that are parameters to a junit test class method [SPR-15926]","**[Ken Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=khkwang)** opened **[SPR-15926](https://jira.spring.io/browse/SPR-15926?redirect=false)** and commented  I have aspectj set up in my spring application, using the spring-instrument javaagent to run my junit test through maven.  Here is some sample code:  ```java      org.apache.maven.plugins     maven-failsafe-plugin     2.20              -javaagent:/path/to/spring-instrument.jar                                                 integration-test                 verify                             ```  ```java @Configurable public class ConfigurableEntity {     @Autowired     private SomeBean someBean;      private boolean isAutowired() {         return this.someBean != null;     } } ```  ```xml    ```  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(""test-context.xml"") public class ConfigurableTest {          @Test     public void testConfigurable() {         assertTrue(new ConfigurableEntity().isAutowired());     }  } ```  The above code **does** work. However, the following does **not**:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(""test-context.xml"") public class ConfigurableTest {          @Test     public void testConfigurable() {         assertTrue(new ConfigurableEntity().isAutowired());     }      public void doSomething(ConfigurableEntity entity) {         ...     }  } ```  The problem is that prior to running the test, the maven surefire plugin makes a call to ConfigurableTest.getDeclaredMethods(), which at that point will load class ConfigurableEntity. However, spring has not yet had a chance to enable the loadTimeWeaver yet, and so ConfigurableEntity is unwoven and the above test fails.  I have found some workarounds to the above issue... but I am wondering if this is a known problem. Since this is just a unit test, it isn't too major of a concern, but it worries me that there might be instances in my main application where an advised class is loaded before spring has a chance to enable weaving.   ---  **Affects:** 4.3.8","open","in: core,","spring-projects-issues","2017-09-05T21:30:25Z","2019-01-11T18:10:54Z"
"","21073","Cache, allow custom wrapper types other than java.util.Optional [SPR-16530]","**[Ken Schosinsky](https://jira.spring.io/secure/ViewProfile.jspa?name=schosins)** opened **[SPR-16530](https://jira.spring.io/browse/SPR-16530?redirect=false)** and commented  Currently the caching annotations can only work with java.util.Optional. There's no support for other wrapper types (e.g. Vavr's Option/Try/Either/Lazy etc.).  I would like to be able to register custom return value unwrappers or something equivalent to the key property for the return value:  ```java // Example with Vavr's Either @CachePut(cacheNames = ""myCache"", condition = ""#result.isRight()"", result = ""#result.getRight()"") Either myMethod(int id); ```  Greetings, Ken  ---  **Issue Links:** - #20361 Allow transaction control via well-known method return types - #21058 Incorrect return type of Kotlin suspending functions","open","type: enhancement,","spring-projects-issues","2018-02-23T14:34:40Z","2019-01-11T14:35:35Z"
"","21060","Kotlin compile error with JdbcOperations Extensions with variable arguments [SPR-16517]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-16517](https://jira.spring.io/browse/SPR-16517?redirect=false)** and commented  Hi :) I'm testing out Kotlin 1.2.21 in a small Spring Boot 2 SNAPSHOT application on JDK 9.0.4 and am encountering the following (unexpected) compilation error:  ```java Compilation failure:  [ERROR] /Users/steadykeith/IdeaProjects/change/src/main/kotlin/org/steadytown/change/ChangeApplication.kt:[24,53] None of the following functions can be called with the arguments supplied:  [ERROR] public final fun query(p0: String!, @Nullable p1: ((PreparedStatement!) -> Unit)!, p2: ((ResultSet!) -> Unit)!): Unit defined in org.springframework.jdbc.core.JdbcOperations [ERROR] @Nullable public final fun  query(p0: String!, @Nullable p1: ((PreparedStatement!) -> Unit)!, p2: ((ResultSet!) -> Collection!)!): Collection! defined in org.springframework.jdbc.core.JdbcOperations [ERROR] public final fun  query(p0: String!, @Nullable p1: ((PreparedStatement!) -> Unit)!, p2: ((ResultSet!, Int) -> Person!)!): (Mutable)List! defined in org.springframework.jdbc.core.JdbcOperations [ERROR] public final fun query(p0: String!, p1: ((ResultSet!) -> Unit)!, @Nullable p2: Array<(out) Any!>!): Unit defined in org.springframework.jdbc.core.JdbcOperations [ERROR] @Nullable public final fun  query(p0: String!, p1: ((ResultSet!) -> Collection!)!, @Nullable p2: Array<(out) Any!>!): Collection! defined in org.springframework.jdbc.core.JdbcOperations [ERROR] public final fun  query(p0: String!, p1: ((ResultSet!, Int) -> Person!)!, @Nullable p2: Array<(out) Any!>!): (Mutable)List! defined in org.springframework.jdbc.core.JdbcOperations [ERROR] public final fun query(p0: String!, p1: Array<(out) Any!>!, p2: ((ResultSet!) -> Unit)!): Unit defined in org.springframework.jdbc.core.JdbcOperations [ERROR] @Nullable public final fun  query(p0: String!, p1: Array<(out) Any!>!, p2: ((ResultSet!) -> Collection!)!): Collection! defined in org.springframework.jdbc.core.JdbcOperations [ERROR] public final fun  query(p0: String!, p1: Array<(out) Any!>!, p2: ((ResultSet!, Int) -> Person!)!): (Mutable)List! defined in org.springframework.jdbc.core.JdbcOperations [ERROR] @Nullable public abstract fun  query(p0: String!, p1: Array<(out) Any!>!, p2: ResultSetExtractor!>!): Collection! defined in org.springframework.jdbc.core.JdbcOperations [ERROR] public abstract fun query(p0: String!, p1: Array<(out) Any!>!, p2: RowCallbackHandler!): Unit defined in org.springframework.jdbc.core.JdbcOperations [ERROR] public abstract fun  query(p0: String!, p1: Array<(out) Any!>!, p2: RowMapper!): (Mutable)List! defined in org.springframework.jdbc.core.JdbcOperations [ERROR] @Nullable public abstract fun  query(p0: String!, @Nullable p1: PreparedStatementSetter!, p2: ResultSetExtractor!>!): Collection! defined in org.springframework.jdbc.core.JdbcOperations [ERROR] public abstract fun query(p0: String!, @Nullable p1: PreparedStatementSetter!, p2: RowCallbackHandler!): Unit defined in org.springframework.jdbc.core.JdbcOperations [ERROR] public abstract fun  query(p0: String!, @Nullable p1: PreparedStatementSetter!, p2: RowMapper!): (Mutable)List! defined in org.springframework.jdbc.core.JdbcOperations [ERROR] /Users/steadykeith/IdeaProjects/change/src/main/kotlin/org/steadytown/change/ChangeApplication.kt:[24,113] Cannot infer a type for this parameter. Please specify it explicitly. [ERROR] /Users/steadykeith/IdeaProjects/change/src/main/kotlin/org/steadytown/change/ChangeApplication.kt:[24,117] Cannot infer a type for this parameter. Please specify it explicitly. ```  The code that is failing to compile, both in an IDE and when separately compiled using Maven, is:  ```java fun find(name: String): Collection = db.query(""select * from PERSONS where FIRST_NAME = ?"", name) { rs, _ ->     Person(rs.getString(""FIRST_NAME""), rs.getString(""LAST_NAME""), rs.getDate(""BIRTH_DATE"").toLocalDate()) } ```  The following workaround (converting the argument to a single Object array parameter using arrayOf(...)) fixes the error:  ```java fun find(name: String): Collection = db.query(""select * from PERSONS where FIRST_NAME = ?"", arrayOf(name)) { rs, _ ->         Person(rs.getString(""FIRST_NAME""), rs.getString(""LAST_NAME""), rs.getDate(""BIRTH_DATE"").toLocalDate())     } ```  What's really strange is I see Spring Framework's JdbcOperationsExtensionsTests.kt that cover this feature and presume they compile and run fine--however, the above similar code still fails, and even copying some of the test code into my environmental also fails with a similar compilation error.  I apologize if I'm missing something obvious, or if something basic is wrong with my environment, but I'am really at a loss at why this compilation error is occurring against Spring JDBC 5.0.4. Since this seems to be a fairly new feature, I figured I'd report it. Thanks! Keith   ---  **Affects:** 5.0.4","closed","status: invalid,","spring-projects-issues","2018-02-19T19:03:12Z","2019-01-12T05:19:24Z"
"","21026","Supports ConversionService on SingleColumnRowMapper [SPR-16483]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-16483](https://jira.spring.io/browse/SPR-16483?redirect=false)** and commented  I will propose to support the `ConversionService` on `SingleColumnRowMapper` like as the `BeanPropertyRowMapper`.  In fact, I've encountered a problem that cannot fetch as `LocalDateTime` using `JdbcTemplate#queryForObject` on JDBC driver that does not support JDBC 4.1(e.g. HSQL 2.3.5).  e.g.)  ```java JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource); LocalDateTime localDateTime = jdbcTemplate.queryForObject(         ""SELECT current_timestamp FROM INFORMATION_SCHEMA.SYSTEM_USERS""         , LocalDateTime.class); ```  Above code occurred TypeMismatchDataAccessException as follow:  ``` org.springframework.dao.TypeMismatchDataAccessException: Type mismatch affecting row number 0 and column type 'TIMESTAMP WITH TIME ZONE': Value [2018-02-11 22:59:00.54] is of type [java.sql.Timestamp] and cannot be converted to required type [java.time.LocalDateTime]  	at org.springframework.jdbc.core.SingleColumnRowMapper.mapRow(SingleColumnRowMapper.java:108) 	at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:93) 	at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:60) 	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:434) 	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:446) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:456) 	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:467) 	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:474) ... ```  WDYT?   ---  **Affects:** 5.0.3  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1678, and commits https://github.com/spring-projects/spring-framework/commit/8c623c8a429afe83d3d6fed008eec0a9a45d29e2","closed","type: enhancement,","spring-projects-issues","2018-02-11T14:15:42Z","2018-02-19T12:19:20Z"
"","20519","Allow to override a validation message using bean validation message code [SPR-15967]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-15967](https://jira.spring.io/browse/SPR-15967?redirect=false)** and commented  I propose to allow to override a validation message using bean validation message code(like `{javax.validation.constraint.Size.message}`) at Spring's `MessageSource`.  e.g) message.properties  ```properties javax.validation.constraints.Size.message={0}'s size is must be between {2} and {1} ```  I know it can be realised using a constraint validation simple class name like as:  ```properties Size={0}'s size is must be between {2} and {1} ```  But there is a case that can't use it.  For example, there is a case that uses composed annotation not work fine as follow:  ```java @Documented @Constraint(validatedBy = {}) @Target({ TYPE, ANNOTATION_TYPE }) @Retention(RUNTIME) @Compare(left = """", right = """", operator = Compare.Operator.EQUAL, requireBoth = true) // use composed annotation public @interface Confirm {      @OverridesAttribute(constraint = Compare.class, name = ""message"")     String message() default ""{com.example.sample.domain.validation.Confirm.message}"";      // ...  } ```  In this case, following definition does not work (can't override a default message generated by bean validation), because bean validation creates a `ConstraintViolation` of `@Compare` instead of `@Confirm`.  ```properties Confirm=must be same value with ""{4}"" password=Password ```  I want to override a message corresponding `@Confirm` using Spring's `MessageSource` feature as follow:  e.x ) message.properties  ```properties com.example.sample.domain.validation.Confirm.message=must be same value with ""{4}"" password=Password ```  I will submit a PR at later.  Thanks.  ---  **Affects:** 4.3.11, 5.0 RC4  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1528","open","type: enhancement,","spring-projects-issues","2017-09-15T09:35:14Z","2021-12-03T12:58:28Z"
"","20591","Possible issue with hashCode() in ByteArrayResource [SPR-16042]","**[Kay Janssen](https://jira.spring.io/secure/ViewProfile.jspa?name=kjanssen)** opened **[SPR-16042](https://jira.spring.io/browse/SPR-16042?redirect=false)** and commented  Hey there,  i just came across some code in ByteArrayResource and wonder if this is intended or a bug.  The hashCode is calculated by `(byte[].class.hashCode() * 29 * this.byteArray.length);`.  While this might be correct i wonder if this should rather use the hashcode of the byteArray instead of `byte[].class`?  I just wanted to mention it in case it is an actual bug.  Thanks!   ---  **Affects:** 4.3.11  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/f813712f5b413b354560cd7cc006352e9defa9a3/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java#L129","closed","in: core,","spring-projects-issues","2017-10-04T08:26:41Z","2019-01-12T16:32:59Z"
"","20461","ExceptionHandlerMethodResolver loses all handler methods [SPR-15907]","**[Kai Burjack](https://jira.spring.io/secure/ViewProfile.jspa?name=kaiburjack)** opened **[SPR-15907](https://jira.spring.io/browse/SPR-15907?redirect=false)** and commented  There is a serious bug in Spring Web MVC introduced in Spring 5 which results in the ExceptionHandlerMethodResolver (the one responsible for resolving `@ControllerAdvice`/`@RestControllerAdvice` exception handler methods) to lose all exception handler method associations under heavy memory/GC pressure.  We are currently using Spring 5 RC3 in an application and after about one day of runtime, our exception handler methods in a `@ControllerAdvice` class just won't get called anymore. They are being called perfectly once the application was started so there is no general issue with the code setup there.  We've investigated this issue very thoroughly and the cause is the use of an ConcurrentReferenceHashMap in (see: https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java#L53)  This changed as of Version 5 in Spring from a ConcurrentHashMap to this soft/weak reference map. Now, the problem is that the garbage collector will clear the soft/weak references held in this map under heavy memory load such that no exception handler method will ever get called again and the server reports HTTP status code 500 because of the exception being caught by the upper-most servlet handler.  We also realized that the ExceptionHandlerMethodResolver is being built and populated by the ExceptionHandlerExceptionResolver. HOWEVER, there it is being held in a strongly referenced ConcurrentHashMap. This will result in the ExceptionHandlerExceptionResolver NOT losing the ExceptionHandlerMethodResolver, BUT the methods in the soft/weak map inside the ExceptionHandlerMethodResolver to be cleared once GC performs a full cycle.  The issue is easy to reproduce: All that is needed is a simple Web MVC project with a `@ControllerAdvice` annotated class with a `@ExceptionHandler`(MyException.class) annotated method and a thread which keeps on allocating memory up to the point where an OutOfMemoryError _would_ occur and then clearing the memory.  Please fix this by at least making the field ExceptionHandlerMethodResolver.mappedMethods not a soft/weak map anymore (the exceptionLookupCache field may of course be weak/soft, since it is _a cache_).  Thanks!  ---  **Affects:** 5.0 RC3  **Attachments:** - [springissue.zip](https://jira.spring.io/secure/attachment/25082/springissue.zip) (_4.63 kB_)  **Issue Links:** - #20416 `@ControllerAdvice` behaving erratically in latest milestones (_**""is duplicated by""**_) - #20276 Extend null-safety to field level  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b44e6e21c9e96ca329be8c5a2f7a9e62a318fc4","closed","type: regression,","spring-projects-issues","2017-08-29T09:37:09Z","2019-01-13T05:13:22Z"
"","21063","Unable to register @RestControllerAdvice Class via WebTestClient [SPR-16520]","**[kabubu](https://jira.spring.io/secure/ViewProfile.jspa?name=kabubu)** opened **[SPR-16520](https://jira.spring.io/browse/SPR-16520?redirect=false)** and commented  Given rest controller:  ```java @RestController public class MyController {      @GetMapping(value = ""/errors"")     public Flux getErrors() {         return Flux.error(new NumberFormatException());     } } ```  controlleradvice code:  ```java @RestControllerAdvice  public class GlobalHandler{      @ExceptionHandler(NumberFormatException.class)     public ResponseEntity hadleEx(NumberFormatException ex) {        return ResponseEntity.badRequest().build();     } } ```  and test:  ```java @RunWith(SpringRunner.class) public class SimpleTest{      WebTestClient webTestClient;      @Before     public void init() {          webTestClient = WebTestClient                 .bindToController(new MyController())                 .controllerAdvice(GlobalHandler.class)                              .build();     }    @Test     public void getErrors() {         this.webTestClient.get().uri(""/errors"")                 .exchange()                 .expectStatus().isBadRequest();     } } ```  Despite invoking  controllerAdvice() method on WebTestClient an `@ExceptionHandler` located on ControllerAdvice doesnt work and test ends with "" No content < 500 Internal Server Error < Content-Type: [application/json;charset=UTF-8] Content not available yet""  If we put `@ExceptionHandler` in `@RestController` body everything works fine.    ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb8cddda23ad1bc4764d82a126a062dc63fef1a8, https://github.com/spring-projects/spring-framework/commit/01d9475bcc4ad615649fbd358ace0dcc31bac0ef","closed","type: enhancement,","spring-projects-issues","2018-02-20T16:02:02Z","2018-04-03T20:34:25Z"
"","20942","@Debounce annotation for debouncing a method/api call [SPR-16396]","**[Juzer Ali](https://jira.spring.io/secure/ViewProfile.jspa?name=juzerali)** opened **[SPR-16396](https://jira.spring.io/browse/SPR-16396?redirect=false)** and commented  Debouncing requests/method-calls is a common use case which arises in lots of scenarios. ``` `@Debounce`(value=30)  ```will be a useful annotation to have. I can work on implementing this if the feature request is accepted. ```    ---  2 votes, 3 watchers","open","in: core,","spring-projects-issues","2018-01-17T08:02:57Z","2019-01-11T15:28:12Z"
"","20714","Support top-level scalar values in Jackson2Tokenizer [SPR-16166]","**[Julien Hoarau](https://jira.spring.io/secure/ViewProfile.jspa?name=jhoarau)** opened **[SPR-16166](https://jira.spring.io/browse/SPR-16166?redirect=false)** and commented  WebClient failed to convert a json response containing a top level JsonValue (`true`, `false`, `null`, `NUMBER` ) (Valid Json according to [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf))  Simple code example for demonstration  ```java package com.atlassian.product.fabric.tasksdecisions.rest;  import org.springframework.http.MediaType; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.reactive.function.client.WebClient; import reactor.core.publisher.Mono;  @RestController public class JsonValueResource {     @GetMapping(""/fail"")     public Mono fail() {         return WebClient.builder().baseUrl(""http://localhost:8000"")                 .build().get().uri(""/"")                 .accept(MediaType.APPLICATION_JSON)                 .retrieve()                 .bodyToMono(Boolean.class)                 .switchIfEmpty(Mono.error(new RuntimeException(""No response"")));     }      @GetMapping     Mono jsonValueBoolean() {         return Mono.just(true);     }  } ```  `Jackson2Tokenizer` seems to only return tokens if they are in an object or array.  ---  **Affects:** 5.0.1  **Issue Links:** - #20770 Spring WebFlux (Netty/Jackson) treats Mono and Mono differently (_**""is duplicated by""**_) - #20953 Support array of scalar values in Jackson2Tokenizer  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1602, and commits https://github.com/spring-projects/spring-framework/commit/8e253a316d7f9f6d76fc343b96d747e1d056a0ae  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2017-11-06T21:50:07Z","2019-01-11T13:27:09Z"
"","21137","Consistent volatile access to running flag in Lifecycle implementations [SPR-16596]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16596](https://jira.spring.io/browse/SPR-16596?redirect=false)** and commented  As #21031 revealed, several of our `Lifecycle` implementations enforce overly strong locks, in particular in their `isRunning()` implementations. As we do in a many places already, `running` should be a `volatile` flag that can be checked outside of any lifecycle monitor.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #21031 Deadlock in SubProtocolWebSocketHandler on shutdown with Undertow  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b8c92ce9319a5baa71dd4dba1065be19e64cbb37  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-03-15T12:43:43Z","2019-01-11T14:28:48Z"
"","21112","Inconsistent synchronization in AbstractBeanFactoryBasedTargetSource and JdbcAccessor [SPR-16570]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16570](https://jira.spring.io/browse/SPR-16570?redirect=false)** and commented  As pointed out by https://github.com/spring-projects/spring-framework/pull/1725, `AbstractBeanFactoryBasedTargetSource.getTargetClass()` and `JdbcAccessor.getExceptionTranslator()` are marked as `synchronized` but their corresponding setter methods aren't... which may lead to inconsistent visibility at runtime.  Since all we want to prevent there is entering the lazy initialization algorithm concurrently, we can use a `volatile` field instead, only entering full synchronization when no existing instance has been found. Once initialized, we're happy to go with whatever has been set, so a volatile field is sufficient there.   ---  **Affects:** 4.3.14, 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a403a754e977a46892b62932c85b12d4894896d1, https://github.com/spring-projects/spring-framework/commit/7f1a8d78b58be0d259795256eb18f5ddbc5caa9f, https://github.com/spring-projects/spring-framework/commit/207e8c240913a96fa9e21e4417fa66c12f64bb44, https://github.com/spring-projects/spring-framework/commit/1bde920cce0eb6b7d0db60a604eb34d57747e1c7, https://github.com/spring-projects/spring-framework/commit/50253f670ef9cf894fe8c077d4d58c562951cd41  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-08T15:54:18Z","2018-04-03T20:34:28Z"
"","21104","Overloaded convenience setters on HttpHeaders [SPR-16562]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16562](https://jira.spring.io/browse/SPR-16562?redirect=false)** and commented  While `HttpHeaders` saw plenty of new methods in 5.0 (e.g. #20220, #19591, #19105, #18979), we are still missing a few quite obvious convenience setters: in particular `setCacheControl(CacheControl)` and `setExpires(ZonedDateTime)`.  ---  **Affects:** 5.0 GA  **Issue Links:** - #18979 Introduce HttpHeaders getContentDisposition() and setContentDisposition() - #19105 Add HttpHeaders getter and setter for Content-Language - #19591 Add HttpHeaders getter and setter for Accept-Language - #20220 Consider using ZonedDateTime in HttpHeaders - #22103 Allow java.time types for setting the Last-Modified header  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90d768bb7f36819893db968bd87daba81abbffb2","closed","type: enhancement,","spring-projects-issues","2018-03-06T20:51:37Z","2019-01-11T14:32:19Z"
"","21101","Consistent incrementer arrangement for PostgreSQL, DB2 and SAP HANA [SPR-16558]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16558](https://jira.spring.io/browse/SPR-16558?redirect=false)** and commented  Spring's JDBC module provides several abstractions for provider-specific database mechanisms, in particular `jdbc.support.incrementer`. Over time, several inconsistencies have accumulated in the support for various databases there, in terms of class naming as well as database identification.  Let's use the 5.0.5 / 4.3.15 wrap-up (before entering the maintenance phase there) as an opportunity to revisit the support for PostgreSQL, DB2 (including its new LUW naming for the the Linux, Unix, Windows product) and SAP HANA (""HDB"" as the primary JDBC database product name, and introducing a `HanaSequenceMaxValueIncrementer`).  ---  **Issue Links:** - #21099 PostgresTableMetaDataProvider.isGetGeneratedKeysSimulated() does not detect Postgres 10 - #21005 Add SAP HANA to common JPA database platforms - #18833 Add database product name for SAP HANA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0962c665923ab36e39e259487e6d123e6903aee2, https://github.com/spring-projects/spring-framework/commit/82515a3f01190a9c401ab257a40f320b811d04b5  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-03-06T11:17:36Z","2019-01-11T14:33:19Z"
"","21066","Consistent use of Collection.toArray with zero-sized array argument [SPR-16523]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16523](https://jira.spring.io/browse/SPR-16523?redirect=false)** and commented  Aligned with https://github.com/spring-projects/spring-boot/issues/12160, let's revisit all the `Collection.toArray` call in the codebase and consistently use the `toArray(new T[0])` pattern over pre-initialized arrays with a given length. In contrast to the established latter pattern, the former turns out to be more performant on modern JVMs since it doesn't initialize the array with `null` values first and allows for using efficient array cloning mechanisms underneath.  ---  **Affects:** 5.0.4  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a5cbf5fe246e362c939db006cb44793b22bdc741","closed","type: enhancement,","spring-projects-issues","2018-02-22T04:16:59Z","2019-01-11T14:36:42Z"
"","21020","Upgrade to Gradle 4.8(.1) [SPR-16475]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16475](https://jira.spring.io/browse/SPR-16475?redirect=false)** and commented  Gradle 4.5 is out in the meantime, with even a 4.5.1 maintenance release available already... and now Gradle 4.6 goes RC, so we should go straight to that one.  Update: Gradle 4.7 is out now. Maybe we'll even get Gradle 4.8 in time for our 5.1 RC1...  ---  **Affects:** 5.0.3  **Issue Links:** - #21213 Use Gradle 4.6's built-in support for the JUnit Platform (_**""is depended on by""**_) - #20784 Upgrade to Gradle 4.4(.1) - #21692 Upgrade to Gradle 4.10  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/17c16eaa9efac10d04db8c61146c2c93dcdd2ee1, https://github.com/spring-projects/spring-framework/commit/853d30df264a0a584298a096846645fd7b0cb854, https://github.com/spring-projects/spring-framework/commit/eaffcbe3be43bb8ab7229e1a40ecfd32c1cccf7f","closed","type: task,","spring-projects-issues","2018-02-07T13:17:51Z","2019-01-11T15:31:37Z"
"","21015","Upgrade framework build to Tomcat 9.0 and Undertow 2.0 [SPR-16470]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16470](https://jira.spring.io/browse/SPR-16470?redirect=false)** and commented  Tomcat 9 is considered stable as of 9.0.4. Let's upgrade to it for Spring Framework 5.1.  Undertow 2.0 works fine with our master branch, so we don't expect explicit steps for compatibility with it. Nevertheless, let's use this ticket for upgrading our build.  ---  **Issue Links:** - #18650 Compatibility with Tomcat 8.5.2 and 9.0 M6 - #18694 Initial compatibility with Undertow 2.0 - #18900 Compatibility with Undertow 1.4 - #21226 Upgrade framework build to JPA 2.2 and JTA 1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e88ca0d6338aa870ed3c61043aa2fa46c3e49ce4, https://github.com/spring-projects/spring-framework/commit/53aa9cc4cd9c6f4ce53e39ae586b0db2f4d7051c","closed","type: task,","spring-projects-issues","2018-02-05T16:49:29Z","2019-01-11T15:31:22Z"
"","21000","Avoid String concatenation for not-null assertion in BeanProperty/DirectFieldBindingResult [SPR-16455]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16455](https://jira.spring.io/browse/SPR-16455?redirect=false)** and commented  `BeanPropertyBindingResult` and `DirectFieldBindingResult` both come with an assertion for a not-null target object. In both cases, the assertion concatenates the object name into the message which creates unnecessary performance overhead for the regular code path.   ---  **Affects:** 4.3.14, 5.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c069f6cb1a58ea0861200e2a70fda6dde0ce70a, https://github.com/spring-projects/spring-framework/commit/9926b684737906b7614e1f4d44d4fff72cf70d5b  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-02-01T20:03:05Z","2018-02-19T12:19:19Z"
"","20972","Deprecate outdated HibernateTemplate operations in favor of lambdas [SPR-16426]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16426](https://jira.spring.io/browse/SPR-16426?redirect=false)** and commented  In anticipation of Hibernate ORM 5.3 (#20850) and for example its removal of legacy positional parameters, let's revisit `HibernateTemplate` and possibly deprecate affected operations upfront, allowing either for removal in Spring Framework 5.1/5.2 or at least for only supporting them against Hibernate ORM 5.0-5.2 but not 5.3.  ---  **Issue Links:** - #20850 Support for Hibernate ORM 5.3 - #20974 Doc: hibernate.dialect_resolvers vs HibernateJpaVendorAdapter.setDatabase  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4e194c3fbe472261051811fee1c3a4389c782aef","closed","type: task,","spring-projects-issues","2018-01-28T14:57:35Z","2019-01-11T15:36:59Z"
"","20961","AbstractClientSockJsSession.close call does not propagate IOException from disconnect [SPR-16415]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16415](https://jira.spring.io/browse/SPR-16415?redirect=false)** and commented  `AbstractClientSockJsSession.close` and in particular `AbstractClientSockJsSession.close(CloseReason)` do not propagate an `IOException` from the disconnect attempt to the caller, despite the intention in their signature. While internal close attempts need to swallow and log such exceptions, explicit API calls should propagate them as expected.  ---  **Affects:** 4.3.14, 5.0.3  **Issue Links:** - #20955 SubProtocolWebSocketHandler should not log ERROR on ""No messages received after ...""  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-01-25T11:17:57Z","2019-01-11T15:37:42Z"
"","20954","Upgrade to JUnit Jupiter 5.2 [SPR-16408]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16408](https://jira.spring.io/browse/SPR-16408?redirect=false)** and commented  The second JUnit 5.1 milestone will be out soon, with 5.1 GA planned for as early as February.  Update: JUnit 5.2 is out in the meantime, picked up by Spring Framework 5.1 RC1.  ---  **Affects:** 5.0.3  **Issue Links:** - #20293 Upgrade to JUnit 5.0 GA - #20930 Upgrade to JUnit Jupiter 5.0.3 - #21666 Upgrade to JUnit Jupiter 5.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/71cacff8c2f83884c31d9fd5ea2d67e4e1bb5a7f  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2018-01-22T15:51:17Z","2019-01-11T15:38:41Z"
"","20951","Upgrade to ASM 6.0 level (for CGLIB 3.2.6) [SPR-16405]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16405](https://jira.spring.io/browse/SPR-16405?redirect=false)** and commented  As required by #20814, Spring Framework 4.3.14 needs to be upgraded to CGLIB 3.2.6. Since the latter is based on ASM 6.0 now, we have to upgrade our ASM fork to 6.0 level in the 4.3.x line as well (backported from 5.0).  ---  **Affects:** 4.3.13  **Issue Links:** - #20814 Embedded cglib 3.2.5 not closing input streams that read class files - #19083 Upgrade to ASM 6.0","closed","in: core,","spring-projects-issues","2018-01-20T15:12:15Z","2019-01-11T15:38:43Z"
"","20945","Upgrade to Kotlin 1.3 [SPR-16399]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16399](https://jira.spring.io/browse/SPR-16399?redirect=false)** and commented  Since Kotlin 1.3 went GA shortly after Spring Framework 5.1, let's upgrade our build to Kotlin 1.3 as of Spring Framework 5.2.  ---  **Issue Links:** - #20606 Unable to use WebTestClient with mock server in Kotlin (_**""is depended on by""**_) - #20786 Upgrade to Kotlin 1.2 - #20936 Compatibility with JDK 10 - #22049 Upgrade to Hibernate ORM 5.4 - #21998 Support for parameter name introspection on Kotlin inline classes - #21546 Support for kotlinx.reflect.lite  2 votes, 7 watchers","closed","in: core,","spring-projects-issues","2018-01-18T13:08:44Z","2019-01-24T14:03:39Z"
"","20944","Upgrade to ASM 6.2 [SPR-16398]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16398](https://jira.spring.io/browse/SPR-16398?redirect=false)** and commented  ASM 6.1 is tracking JDK 10, with its GA expected soon after JDK 10 GA.  ---  **Reference URL:** https://gitlab.ow2.org/asm/asm/tree/master/asm/src/main/java/org/objectweb/asm  **Issue Links:** - #20937 Compatibility with JDK 11 (_**""is depended on by""**_) - #19083 Upgrade to ASM 6.0 - #20936 Compatibility with JDK 10 - #21633 Classpath scanning on inner classes fails against JDK 11 bytecode level - #21640 LocalVariableTableParameterNameDiscoverer runs into UnsupportedOperationException in ClassVisitor.visitNestMemberExperimental() - #21800 Upgrade to ASM 7.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a9d042320515edcc92c970c8c328d05432be7ca, https://github.com/spring-projects/spring-framework/commit/a1d209726cda050db7c74f97fb6b6608e9299fe2","closed","in: core,","spring-projects-issues","2018-01-18T12:52:24Z","2019-01-11T15:28:33Z"
"","20937","Compatibility with JDK 11 [SPR-16391]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16391](https://jira.spring.io/browse/SPR-16391?redirect=false)** and commented  JDK 11 is currently scheduled for September 2018. Not expecting any major changes beyond JDK 10 from our perspective, we should be able to fully support it in the 5.1 line already. Ideally our framework build would be able to run on JDK 8, 9, 10 as well as 11, even if our own test efforts will focus on JDK 8 and 11 (as the official long-term support branches) at that point.  ---  **Issue Links:** - #18941 Compatibility with JDK 9 GA (_**""depends on""**_) - #20936 Compatibility with JDK 10 (_**""depends on""**_) - #20944 Upgrade to ASM 6.2 (_**""depends on""**_) - #21800 Upgrade to ASM 7.0 (_**""depends on""**_) - #20414 MethodHandles.Lookup.defineClass for CGLIB class definition purposes (_**""depends on""**_) - #21515 Classpath scanning does not work in tests using the module path - #21633 Classpath scanning on inner classes fails against JDK 11 bytecode level - #21630 Classification of ClassCastExceptions doesn't work in JDK 11 (OpenJDK) - [DATACMNS-1373](https://jira.spring.io/browse/DATACMNS-1373) Align class loading in ClassGeneratingEntityInstantiator with ClassGeneratingPropertyAccessorFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93bb78ec235c691a1a092cb6b6c19c236deaa5ab, https://github.com/spring-projects/spring-framework/commit/50949415d71dea9ff07d4f5d2ad85732e46918a0  2 votes, 13 watchers","closed","type: task,","spring-projects-issues","2018-01-16T19:56:17Z","2019-01-11T15:27:58Z"
"","20936","Compatibility with JDK 10 [SPR-16390]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16390](https://jira.spring.io/browse/SPR-16390?redirect=false)** and commented  JDK 10 is currently in early access, scheduled for GA in late March: http://openjdk.java.net/projects/jdk/10/  Our Spring Framework master build is known to be compatible with JDK 10 EA already. Let's double-check against JDK 10 GA for Spring Framework 5.0.5.  ---  **Issue Links:** - #18941 Compatibility with JDK 9 GA (_**""depends on""**_) - #20937 Compatibility with JDK 11 (_**""is depended on by""**_) - #20945 Upgrade to Kotlin 1.3 - #20944 Upgrade to ASM 6.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/28ea718d2d62a43bd54a5795f5c511284508df15  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2018-01-16T19:47:49Z","2019-01-11T15:28:06Z"
"","20935","Support for Jackson 3 [SPR-16389]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16389](https://jira.spring.io/browse/SPR-16389?redirect=false)** and commented  Jackson 3 is currently in development, becoming a 5.1 or 5.2 topic for us.  ---  **Issue Links:** - #19492 Support for Jackson 2.9","open","type: enhancement,","spring-projects-issues","2018-01-16T19:38:28Z","2020-08-24T17:29:06Z"
"","20934","Upgrade to RxJava 2.2 [SPR-16388]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16388](https://jira.spring.io/browse/SPR-16388?redirect=false)** and commented  RxJava 2.2 is currently scheduled for end of June, just in time for our 5.1 RC1.  https://github.com/ReactiveX/RxJava/milestones  ---  **Issue Links:** - #19628 Deprecate RxJava 1 in favor of RxJava 2 - #20056 Upgrade to RxJava 1.3 & 2.1 - #20932 Upgrade to Reactor Core 3.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/821ab62492a36450ab2b04e15a686641f78a3243","closed","type: task,","spring-projects-issues","2018-01-16T19:34:14Z","2019-01-11T15:15:38Z"
"","20932","Upgrade to Reactor Core 3.2 [SPR-16386]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16386](https://jira.spring.io/browse/SPR-16386?redirect=false)** and commented  https://spring.io/blog/2018/01/16/sneak-peek-at-reactor-core-3-2-with-milestone-1  ---  **Issue Links:** - #19881 Upgrade to Reactor Core 3.1 Milestone - #20931 Upgrade to Reactor Core 3.1.3 (including Reactive Streams 1.0.2) - #20934 Upgrade to RxJava 2.2 - #21693 Upgrade to Reactor Californium RC1 - #20933 Upgrade to Reactor Netty 0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a18cfd71b99c38a77cefbf9a7864fe6ddae18963","closed","in: core,","spring-projects-issues","2018-01-16T18:42:26Z","2019-01-11T15:15:45Z"
"","20931","Upgrade to Reactor Core 3.1.3 (including Reactive Streams 1.0.2) [SPR-16385]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16385](https://jira.spring.io/browse/SPR-16385?redirect=false)** and commented  Since we're currently on Reactor Bismuth snapshots, let's use this ticket for the upgrade to Reactor Core 3.1.3 proper (which includes Reactive Streams 1.0.2) in time for Spring Framework 5.0.3.  ---  **Issue Links:** - #20108 Upgrade to Reactor 3.1 RC1 (including Reactive Streams 1.0.1) - #20932 Upgrade to Reactor Core 3.2 - #20933 Upgrade to Reactor Netty 0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aee8a9c97b263db3fd8d495bdaacb03af46eaec2","closed","in: core,","spring-projects-issues","2018-01-16T18:41:25Z","2019-01-11T15:15:25Z"
"","20920","CollectionUtils.lastElement for common Set/List extraction [SPR-16374]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16374](https://jira.spring.io/browse/SPR-16374?redirect=false)** and commented  There is a recurring need for extracting the last element of a given `Set` or `List`, usually leading to a similar implementation pattern - and sometimes suboptimal variants thereof. A common `CollectionUtils.lastElement` delegate improves proper reuse as well as readability.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06e6386dc9d99498930314927cbaecd2a0766093","closed","in: core,","spring-projects-issues","2018-01-12T17:22:09Z","2018-01-23T10:05:11Z"
"","20850","Support for Hibernate ORM 5.3 [SPR-16303]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16303](https://jira.spring.io/browse/SPR-16303?redirect=false)** and commented  Hibernate ORM 5.3 is currently in preparation, finally supporting JPA 2.2. Let's pick it up for our Spring Framework 5.1 release for some deeper integration (e.g. #20852), while continuing Hibernate ORM 5.0-5.2 support at runtime (not least of it all for compatibility with WildFly 10/11 and JBoss EAP 7.0/7.1).  ---  **Issue Links:** - #20852 Support Hibernate 5.3's ManagedBeanRegistry for dependency injection (_**""depends on""**_) - #22049 Upgrade to Hibernate ORM 5.4 (_**""is depended on by""**_) - #18899 Support for Hibernate ORM 5.2 - #18061 Compatibility with Bean Validation 2.0 and JPA 2.2 - #20425 Compatibility with EclipseLink 2.7 - #21226 Upgrade framework build to JPA 2.2 and JTA 1.3 - #21540 LocalSessionFactoryBean and HibernateTransactionManager for JPA EntityManagerFactory setup - #20972 Deprecate outdated HibernateTemplate operations in favor of lambdas - #21111 ClassUtils.getUserClass should support ByteBuddy-generated proxies (e.g. from Hibernate 5.3) - #21494 Propagate read-only status to Hibernate Session through setDefaultReadOnly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0ccbcbb66d37e8d64cbaa4a4b5273bc74103700  3 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2017-12-14T19:58:43Z","2019-01-11T15:24:11Z"
"","20784","Upgrade to Gradle 4.4(.1) [SPR-16237]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16237](https://jira.spring.io/browse/SPR-16237?redirect=false)** and commented  Gradle 4.4 is at RC4 already, so probably GA by the time of our 5.0.3 release in late December.  ---  **Affects:** 5.0.2  **Issue Links:** - #20629 Upgrade to Gradle 4.3(.1) - #21020 Upgrade to Gradle 4.8(.1)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/425a999d5e3b98ea7e607b2b100e1aa567e372d4, https://github.com/spring-projects/spring-framework/commit/d198626618b0cc744de9a11ad13c328e8e69a2ff","closed","type: task,","spring-projects-issues","2017-11-28T16:01:47Z","2019-01-11T13:29:54Z"
"","20773","Nullability inconsistency in DataAccessUtils requiredSingleResult vs requiredUniqueResult [SPR-16225]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16225](https://jira.spring.io/browse/SPR-16225?redirect=false)** and commented  In our `DataAccessUtils` helper, `requiredSingleResult` and `requiredUniqueResult` differ in their nullability declarations. There is no good reason for this; either both of them need to declare a non-null return value or both have to expect `null` values in their input collections.  ---  **Affects:** 5.0.1  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b1c657fa4b81bc0d6ca9289beddc7b2c35d41457, https://github.com/spring-projects/spring-framework/commit/723b2b19a667b37f516c3b4ba1e91cc5235c3d6e","closed","type: bug,","spring-projects-issues","2017-11-22T11:57:51Z","2019-01-11T13:30:32Z"
"","20767","Deprecate Castor support [SPR-16219]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16219](https://jira.spring.io/browse/SPR-16219?redirect=false)** and commented  Following the deprecation (and subsequent removal) of XMLBeans support back in 4.2, let's also deprecate Castor support. While Castor isn't officially retired yet, there is very low activity in recent years: only one release in the past four years (!), and that one is 1.5 years old already.  We'll keep Castor support around for the time being but won't be actively maintaining it anymore. As of 5.1 or 5.2, we're going to remove `CastorMarshaller` and co completely.  ---  **Issue Links:** - #17979 Deprecate XMLBeans support  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: task,","spring-projects-issues","2017-11-20T20:57:30Z","2019-01-11T13:31:35Z"
"","20763","SqlParameterSourceUtils.createBatch with Collection support [SPR-16215]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16215](https://jira.spring.io/browse/SPR-16215?redirect=false)** and commented  As indicated in the sample code for #20687 and also in our reference documentation, `SqlParameterSourceUtils` should really have a `createBatch(Collection)` variant in order to avoid manual array adaptation. That new variant could support `Map` as well as bean values, and it also makes sense to revise the plain `Object[]` variant that way (and turn into a vararg).  ---  **Issue Links:** - #20687 Doc: ParameterMetaData.getParameterType performance on Oracle 12c - #20908 SqlParameterSource needs method for extracting parameter names  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a58ef88f1df3e391ee78f89d67af6a168687bb1d, https://github.com/spring-projects/spring-framework/commit/a8b48848b9354c277f032c35a0adf1ea5cbef50a","closed","type: enhancement,","spring-projects-issues","2017-11-18T22:40:51Z","2019-01-11T13:31:28Z"
"","20740","Consistent and efficient access to BeanDefinition argument values [SPR-16192]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16192](https://jira.spring.io/browse/SPR-16192?redirect=false)** and commented  Starting with a nullability mismatch between `AbstractBeanDefinition.getConstructorArgumentValues/getPropertyValues` and its corresponding setters (which should get addressed for the Kotlin bean DSL), it turns out that all such access can be optimized through the introduction of `hasConstructorArgumentValues/hasPropertyValues` methods, never enforcing the creation of those holders objects unless actually necessary. The same applies to `getMethodOverrides`.  ---  **Issue Links:** - #12149 Reduce footprint due to BeanDefinitions - #20347 Make getters and setters null-safety consistent  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b5cedd43eb2b70510729696554bbc1f99003ac10","closed","in: core,","spring-projects-issues","2017-11-13T20:41:56Z","2019-01-11T13:26:00Z"
"","20733","End of first-class JDK 6 support [SPR-16185]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16185](https://jira.spring.io/browse/SPR-16185?redirect=false)** and commented  As indicated by #20731, JDK 6 is severely outdated and effectively unmaintained in the meantime. The official end of of commercial JDK 6 support is coming up soon, with Oracle (http://www.oracle.com/technetwork/java/eol-135779.html) as well as IBM (https://developer.ibm.com/wasdev/docs/end-java-se-6-go/).  We'll have to join the club there, simply documentating that Spring Framework 4.3.x users are expected to be on recent patch releases of JDK 7, 8 or 9 these days. Let's roll this into 4.3.13's documentation and also blog about it around that time, officially declaring the end of first-class JDK 6 support on our end.  To be clear, we'll keep tolerating JDK 6 at runtime in the entire Spring Framework 4.3.x line, even in upcoming maintenance releases for the next few years. We just won't test on JDK 6 ourselves anymore and won't work around any JDK 6 specific issues, asking people to upgrade to JDK 7+ instead.  ---  **Issue Links:** - #19713 Upgrade to CGLIB 3.2.5 - #20159 Upgrade to Objenesis 2.6 for Google App Engine Standard on Java 8 and for better JDK 9 support - #20731 SettableListenableFuture set has a race on Java6 (and old versions of Java7)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ffbaa26b4f91e912a3957af6bbcc12d17eb920ab","closed","type: documentation,","spring-projects-issues","2017-11-10T12:46:12Z","2019-01-11T13:26:22Z"
"","20708","MockHttpServletResponse.getDateHeader fails with NPE for non-existing header [SPR-16160]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16160](https://jira.spring.io/browse/SPR-16160?redirect=false)** and commented  `MockHttpServletResponse.getDateHeader` doesn't check for the existence of the corresponding header and ends up calling `DateFormat.parse` with a `null` value. Aligned with `HttpServletRequest.getDateHeader()`, it should simply return -1 in such a case.  ---  **Affects:** 4.3.12, 5.0.1  **Issue Links:** - #20686 MockHttpServletRequest with Host: set builds wrong getRequestURL() - #20220 Consider using ZonedDateTime in HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a75dd2dd3e8be9cc7fa239a68d1a10e86096bafb, https://github.com/spring-projects/spring-framework/commit/80a0cf71f4b7d244e1832656a76810d4c79b3f1a, https://github.com/spring-projects/spring-framework/commit/dc0a934c998cc329bda3a4a76bc3290e3518546f  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: bug,","spring-projects-issues","2017-11-05T14:35:42Z","2019-01-11T13:26:46Z"
"","20705","Upgrade to Mockito 2.11 [SPR-16157]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16157](https://jira.spring.io/browse/SPR-16157?redirect=false)** and commented  Mockito 2.11 contains an API revision for `InvocationContainer` which we'll have to adapt to in our `MockitoUtils`. It also strictly validates exception signatures now, so we have to fix a few unit tests which apply undeclared checked exceptions for certain mock methods.  ---  **Issue Links:** - #19446 Upgrade to Mockito 2.2","closed","type: task,","spring-projects-issues","2017-11-03T19:18:50Z","2019-01-11T13:27:35Z"
"","20656","DefaultResponseErrorHandler.hasError doesn't tolerate unknown status codes [SPR-16108]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16108](https://jira.spring.io/browse/SPR-16108?redirect=false)** and commented  While the backport for #20529 addressed several issues, it unfortunately missed `DefaultResponseErrorHandler.hasError` which should simply return `false` for unknown status codes.  ---  **Affects:** 4.3.12  **Issue Links:** - #20529 RestTemplate doesn't consistently tolerate unknown HTTP status codes - #20918 RestTemplate.ResponseEntityResponseExtractor doesn't tolerate unknown status codes - #21971 RestTemplate does not throw exception for custom error codes - #21145 DefaultResponseErrorHandler wastes the body of a response with an unknown status  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d963597ec076da41a238659271ada292f3540275, https://github.com/spring-projects/spring-framework/commit/ab19c227d39da9c0a6b09992734d2cf1848ef92e","closed","type: bug,","spring-projects-issues","2017-10-24T13:28:33Z","2019-01-11T13:16:42Z"
"","20655","Compatibility with OpenPDF as alternative to iText 2.1.7 [SPR-16107]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16107](https://jira.spring.io/browse/SPR-16107?redirect=false)** and commented  OpenPDF is an actively maintained, liberally licensed fork of 2009's iText 2.1.7 (which turned AGPL afterwards): https://github.com/LibrePDF/OpenPDF  Since our `AbstractPdf(Stamper)View` classes work fine with OpenPDF as well, let's explicitly declare compatibility there.  ---  **Reference URL:** https://github.com/LibrePDF/OpenPDF  **Issue Links:** - #20899 Replace iText 2.1.7 dependency with OpenPDF 1.0.5  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: task,","spring-projects-issues","2017-10-24T10:09:58Z","2019-01-11T13:16:36Z"
"","20644","Avoid temporary String creation in StringUtils.starts/endsWithIgnoreCase [SPR-16095]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16095](https://jira.spring.io/browse/SPR-16095?redirect=false)** and commented  Along the lines of https://github.com/spring-projects/spring-framework/pull/1574, `StringUtils.endsWithIgnoreCase` as well as {startsWithIgnoreCase}} can be reimplemented towards use of `String.regionMatches` without any temporary String creation.   ---  **Affects:** 4.3.12, 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/99d39eb2ee49ebebf1e856c7c284d35a602db66a, https://github.com/spring-projects/spring-framework/commit/75ec973bae4b06bd6aed18463507c22170e73dca, https://github.com/spring-projects/spring-framework/commit/5d41e0f0121d710cf2e0f90fac3920057004d254  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-10-22T12:13:07Z","2017-10-24T16:24:07Z"
"","20629","Upgrade to Gradle 4.3(.1) [SPR-16080]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16080](https://jira.spring.io/browse/SPR-16080?redirect=false)** and commented  There's an RC for Gradle 4.3 in the meantime, so in all likelihood it'll be GA in time for our 5.0.2 release in November. However, Gradle 4.4 is scheduled for mid November already, so we might wait for that right away... and possibly only upgrade for 5.0.3 or even just 5.1?  ---  **Affects:** 5.0.1  **Issue Links:** - #20535 Upgrade to Gradle 4.2(.1) - #20784 Upgrade to Gradle 4.4(.1)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/423af674cda54a257832d22391c05e4dff9f39ec","closed","type: task,","spring-projects-issues","2017-10-16T21:44:52Z","2019-01-11T13:10:43Z"
"","20626","Upgrade to AspectJ 1.9 RC1 [SPR-16077]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16077](https://jira.spring.io/browse/SPR-16077?redirect=false)** and commented  Since Spring Framework 5.0 GA builds with AspectJ 1.9 beta 7, we need to resolve that dependency to AspectJ 1.9 RC1 in Spring Framework 5.0.1 (and to AspectJ 1.9 GA later on).  ---  **Affects:** 5.0 GA  **Issue Links:** - #20525 Upgrade to AspectJ 1.9 beta 7 - #18941 Compatibility with JDK 9 GA - #21227 Upgrade to AspectJ 1.9 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a4f8ce75538c9c4148ed31bc77cc60ca0a1f9b5c","closed","in: core,","spring-projects-issues","2017-10-16T15:06:40Z","2019-01-11T13:11:05Z"
"","20618","Support for reactive relational database access [SPR-16069]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16069](https://jira.spring.io/browse/SPR-16069?redirect=false)** and commented  As per JavaOne 2017, a Reactive JDBC API is ""targeted for a near future release, Java 10 or equivalent"" (see https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1491). Let's pick this up in a programmatic form once available, with Spring Data providing its repository model on top of it.   ---  **Reference URL:** https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1491  12 votes, 19 watchers","closed","status: superseded,","spring-projects-issues","2017-10-13T14:27:36Z","2019-01-30T15:40:00Z"
"","20569","Streamline and reduce Kotlin delegates [SPR-16020]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16020](https://jira.spring.io/browse/SPR-16020?redirect=false)** and commented  With #20432 leading to yet another need for a Kotlin-specific parameter declaration check, let's take the opportunity to streamline our Kotlin support code: Specifically, we can unify the detection of Kotlin's optional parameters in `MethodParameter.isOptional()`, reduce `BeanUtils.findPrimaryConstructor` to Kotlin semantics (for reuse in `AutowiredAnnotationBeanPostProcessor` as well as data class construction), and finally introduce a common `KotlinDetector` delegate with an `isKotlinType(Class)` check.  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20232 Kotlin class instantiation with optional parameters and default values - #20402 Add support for Kotlin autowired constructor with optional parameters - #20432 Revisit handling of missing fields (without default values) for immutable data classes - #21825 GenericApplicationContext.registerBean should support non-default constructors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec345bf162285e397df774bdc2ad756e3aba155a","closed","in: core,","spring-projects-issues","2017-09-27T22:28:22Z","2019-01-11T14:14:02Z"
"","20566","Consistent configurer access in WebMvcConfigurationSupport [SPR-16017]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16017](https://jira.spring.io/browse/SPR-16017?redirect=false)** and commented  `ContentNegotiationConfigurer` and other configurers used in `WebMvcConfigurationSupport` should get more explicitly narrowed to that purpose and not make any compromises beyond that field of use.  ---  **Affects:** 4.3.11  **Issue Links:** - #20527 ChannelRegistration.setInterceptors is misnamed  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","type: task,","spring-projects-issues","2017-09-27T14:44:24Z","2019-01-11T14:15:20Z"
"","20556","Upgrade to Reactor Bismuth-RELEASE [SPR-16007]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16007](https://jira.spring.io/browse/SPR-16007?redirect=false)** and commented  Reactor 3.1 is finally GA :-)  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20108 Upgrade to Reactor 3.1 RC1 (including Reactive Streams 1.0.1)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3133f87c1472205f00e617cc7137821a030bac76","closed","type: task,","spring-projects-issues","2017-09-25T19:27:45Z","2019-01-11T14:15:39Z"
"","20545","Build against EE 8 API level wherever possible [SPR-15996]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15996](https://jira.spring.io/browse/SPR-15996?redirect=false)** and commented  While we're building against several final EE 8 APIs in 5.0 RC4 already - Servlet 4.0 (#20434), JPA 2.2 (#20425), Bean Validation 2.0 (#20363), JSON Binding 1.0 (#20149) -, a few of them are still left: namely JAXB 2.3, JAX-WS 2.3, and also the latest maintenance versions of Common Annotations (1.3.1) and the Interceptor API (1.2.1). Let's close that gap for 5.0 GA.  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20149 Use Apache Johnzon 1.1 for JSON-B integration tests (_**""depends on""**_) - #20363 Compatibility with Hibernate Validator 6.0 GA (_**""depends on""**_) - #20425 Compatibility with EclipseLink 2.7 (_**""depends on""**_) - #20434 Upgrade to Servlet API 4.0 for MVC (PushBuilder and Servlet mocks) (_**""depends on""**_) - #18941 Compatibility with JDK 9 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65f556c0e2dd9c3e3c7055e4356d2772d2721de9","closed","type: task,","spring-projects-issues","2017-09-24T14:20:44Z","2019-01-11T18:22:24Z"
"","18941","Compatibility with JDK 9 GA [SPR-15992]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15992](https://jira.spring.io/browse/SPR-15992?redirect=false)** and commented  JDK 9 GA is available now. Let's double-check our compatibility story and also upgrade our JDK 9 CI build to it.  ---  **Reference URL:** http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html  **Issue Links:** - #20245 Compatibility with JDK 9 release candidate (_**""depends on""**_) - #20936 Compatibility with JDK 10 (_**""is depended on by""**_) - #20937 Compatibility with JDK 11 (_**""is depended on by""**_) - #18289 Stable module names for Spring Framework jars on JDK 9 module path - #19083 Upgrade to ASM 6.0 - #19148 Document Spring recommendations/restrictions for Java 9 module setups - #20525 Upgrade to AspectJ 1.9 beta 7 - #20545 Build against EE 8 API level wherever possible - #20626 Upgrade to AspectJ 1.9 RC1 - #21227 Upgrade to AspectJ 1.9 GA","closed","type: task,","spring-projects-issues","2017-09-22T17:01:08Z","2019-01-11T18:22:00Z"
"","20537","Upgrade to Hessian 4.0.51 [SPR-15987]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15987](https://jira.spring.io/browse/SPR-15987?redirect=false)** and commented  Hessian 4.0.51 is now on Maven Central. It has a new whitelist/blacklist feature to secure the deserialization process and the manifest includes a Java 9 module name.  ---  **Issue Links:** - #16023 Upgrade Hessian from 4.0.7 to 4.0.38","closed","type: task,","spring-projects-issues","2017-09-21T10:15:16Z","2019-01-11T18:23:42Z"
"","20527","ChannelRegistration.setInterceptors is misnamed [SPR-15976]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15976](https://jira.spring.io/browse/SPR-15976?redirect=false)** and commented  While refactoring the `ChannelRegistration` code a bit for #20514, I've noticed that `ChannelRegistration.setInterceptors` is misnamed since it actually **adds** interceptors to the channel's current list. I've therefore deprecated it in favor of a fluently named `interceptors(...)` method which is documented to add to the list.  ---  **Issue Links:** - #20514 TaskExecutorRegistration.getTaskExecutor() overrides executor properties of a provided ThreadPoolTaskExecutor - #20566 Consistent configurer access in WebMvcConfigurationSupport  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d11bd64e0d9bc4388d462dfd7cc42f537cb7caf4, https://github.com/spring-projects/spring-framework/commit/ac9cfefaffb78cb26c3a755f4594b1a113a97144  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","type: bug,","spring-projects-issues","2017-09-19T11:34:38Z","2019-01-11T18:08:51Z"
"","20525","Upgrade to AspectJ 1.9 beta 7 [SPR-15974]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15974](https://jira.spring.io/browse/SPR-15974?redirect=false)** and commented  We're currently building against AspectJ 1.9 beta 6 for JDK 9 compatibility in our test suite. It'd be great to get out of beta there for our 5.0 GA release.  If AspectJ 1.9 remains in pre-release stage for some further time, we'll have to separate the version that we're exposing in the `spring-aspects` POM (downgraded to 1.8.10) from the one that we use in our framework build (latest 1.9 milestone), eventually catching up once AspectJ 1.9 goes GA.  ---  **Affects:** 5.0 RC4  **Issue Links:** - #19586 Pointcut evaluation fails against AbstractHandlerMethodMapping$MappingRegistry with AspectJ 1.8.10 - #20391 spring-aspects should remain on AspectJ 1.8.9 by default (since aspectjrt 1.8.10 requires Java 7+) - #18941 Compatibility with JDK 9 GA - #18412 Upgrade to AspectJ 1.9 beta 3 (for build compatibility with JDK 9 build 95+) - #15898 Spring 4.0.0.RELEASE depends on aspectjweaver 1.8.0.M1 not found in Maven Central - #20626 Upgrade to AspectJ 1.9 RC1","closed","in: core,","spring-projects-issues","2017-09-18T22:31:35Z","2019-01-11T18:08:30Z"
"","20435","Merge EhCache 3 tests into spring-context-support [SPR-15880]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15880](https://jira.spring.io/browse/SPR-15880?redirect=false)** and commented  With an enforced cache provider name in the tests, it is feasible to merge the EhCache 3 tests into `spring-context-support` right next to the EhCache 2 tests, instead of hosting them on their own in `spring-test` (where they don't fit anyway).  ---  **Affects:** 4.3.10, 5.0 RC3  **Issue Links:** - #20434 Upgrade to Servlet API 4.0 for MVC (PushBuilder and Servlet mocks) - #17926 Test against EhCache 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fac1f236c312ebffe9662d209ac67f0dc6238332, https://github.com/spring-projects/spring-framework/commit/fa2c377405ea9b65c0624bf706a4a5b71a6d77ba","closed","in: core,","spring-projects-issues","2017-08-20T21:30:26Z","2019-01-11T18:05:32Z"
"","20434","Upgrade to Servlet API 4.0 for MVC (PushBuilder and Servlet mocks) [SPR-15879]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15879](https://jira.spring.io/browse/SPR-15879?redirect=false)** and commented  Servlet 4.0 is finally GA now, with its API available in final form from Maven Central. Let's upgrade `spring-test` to it for actual `MockServletContext` overrides, and also `spring-webmvc` for non-reflective `PushBuilder` injection with corresponding tests (#17273).  `spring-web` keeps building against the Servlet API 3.1 for the time being. This may change as we start to optionally integrate with specific Servlet 4.0 features in the core web facilities (e.g. #19883 in `UrlPathHelper` outside of `spring-webmvc`) but isn't necessary at this point.  ---  **Affects:** 5.0 RC1  **Issue Links:** - #20545 Build against EE 8 API level wherever possible (_**""is depended on by""**_) - #17273 Support for Servlet 4.0 API - #19942 Compatibility with Servlet 4.0 final draft - #19883 Make use of Servlet 4.0 mapping introspection when available - #20435 Merge EhCache 3 tests into spring-context-support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fac1f236c312ebffe9662d209ac67f0dc6238332","closed","type: task,","spring-projects-issues","2017-08-20T20:35:08Z","2019-01-11T18:07:03Z"
"","20432","Revisit handling of missing fields (without default values) for immutable data classes [SPR-15877]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15877](https://jira.spring.io/browse/SPR-15877?redirect=false)** and commented  Following up on #20426 and #20101, there is still a case to be revisited: namely missing fields (without default values provided by Kotlin) which we currently inject as a `null` value. While this can be acceptable for object types, it leads to an `IllegalArgumentException` on construction for primitive types which is definitely worth improving. We could also reject such missing fields upfront if there are no default values or optional declarations for them.  Also, the WebFlux `ModelAttributeMethodArgumentResolver` needs to catch up around all of those RC4 refinements eventually.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #19763 Data binding with immutable objects (Kotlin / Lombok / `@ConstructorProperties`) - #20232 Kotlin class instantiation with optional parameters and default values - #20101 BindingResult support for constructor argument mismatch on immutable data object - #20402 Add support for Kotlin autowired constructor with optional parameters - #20426 Immutable object constructor arguments not considering WebDataBinder's FIELD_MARKER_PREFIX - #20994 Cannot create BindStatus for valid field on immutable form object in case of bind errors - #20569 Streamline and reduce Kotlin delegates  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec345bf162285e397df774bdc2ad756e3aba155a  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2017-08-18T15:51:12Z","2019-01-13T05:14:07Z"
"","20425","Compatibility with EclipseLink 2.7 [SPR-15870]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15870](https://jira.spring.io/browse/SPR-15870?redirect=false)** and commented  EclipseLink 2.7 is at RC3 now, including a corresponding version of the JPA 2.2 API. Along with the recent build upgrade to Hibernate Validator 6.0, let's cover EclipseLink 2.7 the same way.  ---  **Issue Links:** - #20545 Build against EE 8 API level wherever possible (_**""is depended on by""**_) - #18061 Compatibility with Bean Validation 2.0 and JPA 2.2 - #20363 Compatibility with Hibernate Validator 6.0 GA - #20850 Support for Hibernate ORM 5.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b6c1d3e537d4cfe3b7f3cb3649a199ca356475c","closed","type: task,","spring-projects-issues","2017-08-17T10:09:26Z","2019-01-11T18:06:31Z"
"","20414","MethodHandles.Lookup.defineClass for CGLIB class definition purposes [SPR-15859]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15859](https://jira.spring.io/browse/SPR-15859?redirect=false)** and commented  As discussed in https://github.com/cglib/cglib/commit/d6fe1d8c73508ef30883eb1f9ae965d15953e7d0 and in #20245 comments, there is currently a `defineClass` warning triggered by CGLIB when running on JDK 9 in classpath mode. While there are workarounds for it (""illegal-access=deny"" or ""add-opens java.base/java.lang=ALL-UNNAMED""), suppressing that warning at runtime, it'd be nice to avoid the warning completely when running on JDK 9, possibly through a specific check for JDK 9 which skips the `ClassLoader.defineClass` access attempt completely, always going with the `Unsafe.defineClass` fallback right away in such a scenario. We have yet to see whether this can be patched in CGLIB itself or just in Spring's CGLIB fork.  **UPDATE: Since JDK 11 won't have `Unsafe.defineClass` at all anymore, we need to use `MethodHandles.Lookup.defineClass` as our primary mechanism, avoiding a `ClassLoader.defineClass` warning on the classpath and providing compatibility with the module path on JDK 11.**  ---  **Affects:** 5.0 RC3  **Reference URL:** https://github.com/cglib/cglib/commit/d6fe1d8c73508ef30883eb1f9ae965d15953e7d0  **Issue Links:** - #20937 Compatibility with JDK 11 (_**""is depended on by""**_) - #21317 An illegal reflective access operation has occurred (_**""duplicates""**_) - #20493 Running an app with `@Configuration` using Java 9 prints ugly illegal access warnings (_**""is duplicated by""**_) - #20783 ReflectUtils produces Warning in Spring Boot 2.0.0.M6 and Java 9.0.1 (_**""is duplicated by""**_) - #19713 Upgrade to CGLIB 3.2.5 - [DATACMNS-1376](https://jira.spring.io/browse/DATACMNS-1376) Assure JDK 11 compatibility for DefaultMethodInvokingMethodInterceptor - #21913 i'm new with spring and from the start i found this warning while executing - #21441 Spring Boot DevTools on 5.1 fails with java.lang.LinkageError: loader attempted duplicate class definition - #22032 Illegal reflective access operation warning for toString() on CGLIB proxies - [DATACMNS-1401](https://jira.spring.io/browse/DATACMNS-1401) Warning about illegal reflective access in Spring Data Commons / MongoDB  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6a34ca24ceb031d45fb9f6ce4847eaeb82774901, https://github.com/spring-projects/spring-framework/commit/61c3db0869416bf61e7e4cbc5bd7dd2ece24b0a2  17 votes, 40 watchers","closed","has: votes-jira,","spring-projects-issues","2017-08-10T17:02:54Z","2020-09-16T18:49:47Z"
"","21032","EL1072E when evaluating compiled null-safe expression [SPR-16489]","**[Juan Domínguez González](https://jira.spring.io/secure/ViewProfile.jspa?name=jdomigon)** opened **[SPR-16489](https://jira.spring.io/browse/SPR-16489?redirect=false)** and commented  When evaluating an expression involving a null-safe access to a field it fails when using the bytecode compiled expression.  Can be reproduced using the attached test case.  The problem could reside in class PropertyOrFieldReference. Its readProperty method (used when evaluating in interpreted mode), takes into account the nullSafe field, however its  generateCode method doesn't use the nullSafe field. It seems that generateCode method could append bytecodes for null-checking the context object, as in the interpreted version.   ---  **Affects:** 4.3.14  **Attachments:** - [NullSafeTestBean.java](https://jira.spring.io/secure/attachment/25384/NullSafeTestBean.java) (_2.06 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1db7e02de3eb0c011ee6681f5a12eb9d166fea81, https://github.com/spring-projects/spring-framework/commit/d3acf45ea4db51fa5c4cbd0bc0e7b6d9ef805e69  **Backported to:** [4.3.16](https://github.com/spring-projects/spring-framework/milestone/165?closed=1)","closed","in: core,","spring-projects-issues","2018-02-13T08:59:11Z","2018-04-10T14:27:08Z"
"","20848","No bean named 'mvcHandlerMappingIntrospector' available when start Spring MVC Context + DelatingFilterProxy [SPR-16301]","**[José María Sola Durán](https://jira.spring.io/secure/ViewProfile.jspa?name=josemariasoladuran)** opened **[SPR-16301](https://jira.spring.io/browse/SPR-16301?redirect=false)** and commented  I start Spring MVC Context with this WebApplicationInitializer:  ```java public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {  	@Override 	protected Class[] getRootConfigClasses() { 		return Stream.of(AppConfig.class).toArray(size -> new Class[size]); 	}  	@Override 	protected Class[] getServletConfigClasses() { 		return Stream.of(SpringMVCRestConfig.class).toArray(size -> new Class[size]); 	}  	@Override 	protected Filter[] getServletFilters() { 		return Stream.of(new DelegatingFilterProxy()).toArray(size -> new Filter[size]); 	}  	@Override 	protected String[] getServletMappings() { 		return new String[] { ""/api/*"" }; 	} } ```  Also, I start Spring Security Context. When the web app init context, I obtain the next exception:  ``` Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'mvcHandlerMappingIntrospector' available: A Bean named mvcHandlerMappingIntrospector of type org.springframework.web.servlet.handler.HandlerMappingIntrospector is required to use MvcRequestMatcher. Please ensure Spring Security & Spring MVC are configured in a shared ApplicationContext. 	at org.springframework.security.config.annotation.web.configurers.CorsConfigurer$MvcCorsFilter.getMvcCorsFilter(CorsConfigurer.java:113) 	at org.springframework.security.config.annotation.web.configurers.CorsConfigurer$MvcCorsFilter.access$000(CorsConfigurer.java:103) 	at org.springframework.security.config.annotation.web.configurers.CorsConfigurer.getCorsFilter(CorsConfigurer.java:97) 	at org.springframework.security.config.annotation.web.configurers.CorsConfigurer.configure(CorsConfigurer.java:66) 	at org.springframework.security.config.annotation.web.configurers.CorsConfigurer.configure(CorsConfigurer.java:39) 	at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.configure(AbstractConfiguredSecurityBuilder.java:384) 	at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.doBuild(AbstractConfiguredSecurityBuilder.java:330) 	at org.springframework.security.config.annotation.AbstractSecurityBuilder.build(AbstractSecurityBuilder.java:41) 	at org.springframework.security.config.annotation.web.builders.WebSecurity.performBuild(WebSecurity.java:290) 	at org.springframework.security.config.annotation.web.builders.WebSecurity.performBuild(WebSecurity.java:77) 	at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.doBuild(AbstractConfiguredSecurityBuilder.java:334) 	at org.springframework.security.config.annotation.AbstractSecurityBuilder.build(AbstractSecurityBuilder.java:41) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.springSecurityFilterChain(WebSecurityConfiguration.java:104) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$f8f3949f.CGLIB$springSecurityFilterChain$0() 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$f8f3949f$$FastClassBySpringCGLIB$$75b450f2.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:361) 	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$f8f3949f.springSecurityFilterChain() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) 	... 26 more ```  I solve this error, if I add the next code in the root app context:  ```java @Configuration public class AppConfig { [...] 	@Bean(name = ""mvcHandlerMappingIntrospector"") 	public HandlerMappingIntrospector mvcHandlerMappingIntrospector() { 		return new HandlerMappingIntrospector(); 	} } ```    ---  **Affects:** 5.0.2","closed","status: invalid,","spring-projects-issues","2017-12-14T12:49:05Z","2019-01-12T05:19:43Z"
"","20846","java.lang.NoClassDefFoundError: org/springframework/beans/factory/access/el/SpringBeanELResolver [SPR-16299]","**[José María Sola Durán](https://jira.spring.io/secure/ViewProfile.jspa?name=josemariasoladuran)** opened **[SPR-16299](https://jira.spring.io/browse/SPR-16299?redirect=false)** and commented  I try start JSF application with Spring Framework 5. Below, you can show the faces-config.xml file:  ```    	 		 			es 			es 			en 		 		 			net.ddns.jmsola.customproject.app.resources.Messages 			msg 		 		org.springframework.web.jsf.el.SpringBeanFacesELResolver 	 [....] ```  I configure as a EL Resolver the class org.springframework.web.jsf.el.SpringBeanFacesELResolver. However, when I deploy my web application in Tomcat, I obtain the next exception:  ``` com.sun.faces.config.ConfigurationException:    Source Document: jar:file:/C:/Users/jmsola.duran/Dropbox/Freelance/Plantillas-Semillas/Java/Workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/customproject-jsf/WEB-INF/lib/spring-faces-2.4.6.RELEASE.jar!/META-INF/faces-config.xml   Cause: Class 'org.springframework.faces.webflow.FlowELResolver' is missing a runtime dependency: java.lang.NoClassDefFoundError: org/springframework/beans/factory/access/el/SpringBeanELResolver [...] Caused by: java.lang.ClassNotFoundException: org.springframework.beans.factory.access.el.SpringBeanELResolver 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1285) 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119) 	... 29 more ```  In Spring Framework 4.2.x.RELEASE, this class was in a spring-beans module. The problem is when the Faces Context read de file faces-config.xml that it is inside spring-faces-2.4.6.RELEASE.jar.  I understand that it's necessary new version of spring-faces.jar and spring-webflow.jar. I need spring-faces and spring-webflow because I use spring-security-taglibs.  Can you help me?  Thank a lot!    ---  **Affects:** 5.0 GA, 5.0.1, 5.0.2","closed","status: declined,","spring-projects-issues","2017-12-13T21:49:40Z","2019-01-12T16:22:03Z"
"","20837","AbstractReactiveWebInitializer does not property initialize ApplicationContext [SPR-16290]","**[José María Sola Durán](https://jira.spring.io/secure/ViewProfile.jspa?name=josemariasoladuran)** opened **[SPR-16290](https://jira.spring.io/browse/SPR-16290?redirect=false)** and commented  I have this class to start WebFlux context in my web application:  ```java public class WebAppInitializer extends AbstractReactiveWebInitializer { 	@Override 	protected Class[] getConfigClasses() { 		return Stream.of(AppConfig.class, SpringWebFluxConfig.class).toArray(size -> new Class[size]); 	} } ```  When start the context, I obtain this exception:  ``` java.lang.IllegalStateException: org.springframework.context.annotation.AnnotationConfigApplicationContext@280d42a1 has not been refreshed yet ```  I think that the problem is in the method AbstractReactiveWebInitializer#onStartup() because not refresh context. In this previous version RELASE of Spring Framework, I use the now deprecated class AbstractAnnotationConfigDispatcherHandlerInitializer. This class HandlerInitializer refresh context in the method AbstractDispatcherHandlerInitializer#onStartup():  ```java public class WebAppInitializer extends AbstractReactiveWebInitializer { 	 	@Override 	public void onStartup(ServletContext servletContext) throws ServletException { 	String servletName = getServletName(); 		Assert.hasLength(servletName, ""getServletName() must not return empty or null"");  		ApplicationContext applicationContext = createApplicationContext(); 		Assert.notNull(applicationContext, 				""createApplicationContext() did not return an application "" + 				""context for servlet ["" + servletName + ""]"");  		refreshApplicationContext(applicationContext); [....] ```  I need help you. Thanks a lot!  ---  **Affects:** 5.0.2  **Issue Links:** - #20633 Using AbstractAnnotationConfigDispatcherHandlerInitializer to run Spring Webflux application as a WAR doesn't work (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2017-12-12T08:30:23Z","2019-01-11T15:13:31Z"
"","20707","Always anonymous authentication Spring Security WebFlux [SPR-16159]","**[José María Sola Durán](https://jira.spring.io/secure/ViewProfile.jspa?name=josemariasoladuran)** opened **[SPR-16159](https://jira.spring.io/browse/SPR-16159?redirect=false)** and commented  The project (WAR) deploy in a Tomcat 8.5.x servlet container. Start the context with the next WebAppInitializer:  ```java public class WebAppInitializer 		extends AbstractAnnotationConfigDispatcherHandlerInitializer { 	@Override 	protected Class[] getConfigClasses() { 		return Stream.of(AppConfig.class, SpringWebFluxConfig.class).toArray(size -> new Class[size]); 	} } ```  I am configuring Spring Security WebFlux context in the project. This is the configuration:  ```java @EnableWebFluxSecurity @EnableReactiveMethodSecurity(proxyTargetClass = true) public class SpringWebFluxSecurityConfig {  	@Bean 	SecurityWebFilterChain springWebFilterChain(ServerHttpSecurity http) throws Exception { 		return http.authorizeExchange().anyExchange().authenticated().and().httpBasic().and().build(); 	} 	@Bean 	public ReactiveUserDetailsService userDetailsRepository() { 		return new ReactiveUserDetailsServiceImpl(); 	} } ```  I need a _Http Basic Authentication_ for all REST resources of my API. Also, the authentication is performed against a database. I implements the ReactiveUserDetailsService interface. The code is below:  ```java public class ReactiveUserDetailsServiceImpl implements ReactiveUserDetailsService { 	@Autowired 	private UserServiceDto userService; 	@Autowired 	private MessagesServiceI18n messagesService;  	@Override 	public Mono findByUsername(String username) { 		Optional user= this.userService.findUsuarioByLogin(username); 		if (!user.isPresent()) { 			throw new UsernameNotFoundException(this.messagesService.getMensajeI18n(""login.notFound"")); 		} 		Set authorities = new HashSet(); 		for (RoleDto role : user.get().getRoles()) { 			authorities.add(new SimpleGrantedAuthority(role.getRole().name())); 		} 		return Mono.justOrEmpty( 				new AuthenticationUser(usuario.get().getLogin(), usuario.get().getPassword(), authorities, usuario.get())); 	} } ```  The next code is a example of one REST resource:  ```java @RestController @RequestMapping(""/user"") public class UserWebFluxRestController { 	@Autowired 	private UserReactiveServiceDto userService;  	@GetMapping 	@PreAuthorize(value = ""hasAuthority('ROLE_ADMIN')"") 	public @ResponseBody Mono> findUsers( 			@RequestParam(value = ""q"", required = false) String searchText, 			@RequestParam(name = ""pageNumber"", required = true, defaultValue = ""1"") Integer pageNumber, 			@RequestParam(name = ""pageSize"", required = true, defaultValue = Constantes.DEFAULT_PAGE_SIZE_STRING) Integer pageSize) {  		return this.userService.findBySearchFilterPagination(searchText, pageNumber, pageSize); 	} } ```  The problem is that the _Http Basic Authentication_ not working. I debug the code and never stop in entry of method _findByUsername()_ of my class _ReactiveUserDetailsServiceImpl_  This is my HTTP request:  ``` HTTP GET http://localhost:8080/customproject-webflux/user Headers:  Authorization : am1zb2xhOmFkbWlu [...] ```  In order to try to find the problem, I debug the code of method before() of the class ExpressionBasedPreInvocationAdvice, the argument _authentication_ is a anonymous user always.  Due, when I send the HTTP request, the Spring Framework throw the next exception:  ``` [http-nio-8080-exec-2] 2017-11-05 12:12:52 DEBUG org.springframework.web.reactive.DispatcherHandler.handle(151) - Processing GET request for [http://localhost:8080/customproject-webflux/user] [http-nio-8080-exec-2] 2017-11-05 12:12:52 DEBUG org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping.getHandlerInternal(259) - Looking up handler method for path /customproject-webflux/user [http-nio-8080-exec-2] 2017-11-05 12:12:52 DEBUG org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping.getHandlerInternal(273) - Returning handler method [public reactor.core.publisher.Mono> net.ddns.jmsola.customproject.webflux.reactive.controllers.UserWebFluxRestController.findUsers(java.lang.String,java.lang.Integer,java.lang.Integer)] [http-nio-8080-exec-2] 2017-11-05 12:12:52 ERROR org.springframework.web.server.adapter.HttpWebHandlerAdapter.logHandleFailure(185) - Failed to handle request org.springframework.security.access.AccessDeniedException: Denied 	at org.springframework.security.access.prepost.PrePostAdviceReactiveMethodInterceptor.invoke(PrePostAdviceReactiveMethodInterceptor.java:75) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) 	at net.ddns.jmsola.customproject.webflux.reactive.controllers.UserWebFluxRestController$$EnhancerBySpringCGLIB$$b853f964.findUsers() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:243) 	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:138) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118) 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1092) 	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258) 	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329) 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185) 	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1649) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1463) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1337) 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2913) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130) 	at reactor.core.publisher.Operators.complete(Operators.java:125) 	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45) 	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) 	at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2913) 	at reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180) 	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148) 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271) 	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:798) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1649) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1463) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1337) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2913) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:91) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:55) 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2913) 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167) 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2913) 	at org.springframework.http.server.reactive.ServletHttpHandlerAdapter.service(ServletHttpHandlerAdapter.java:121) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:624) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783) 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:789) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1437) 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:745)  ```  Can you help me?   ---  **Affects:** 5.0.1  **Reference URL:** https://github.com/spring-projects/spring-security/blob/5.0.0.RC1/samples/javaconfig/hellowebflux-method/src/main/java/sample/SecurityConfig.java","closed","status: invalid,","spring-projects-issues","2017-11-05T11:14:01Z","2019-01-12T05:19:58Z"
"","20691","""No matching handler"" when override method getServletMapping() in AbstractAnnotationConfigDispatcherHandlerInitializer"" [SPR-16143]","**[José María Sola Durán](https://jira.spring.io/secure/ViewProfile.jspa?name=josemariasoladuran)** opened **[SPR-16143](https://jira.spring.io/browse/SPR-16143?redirect=false)** and commented  I override the method getServletMapping in my WebAppInitializer, in order to publish the REST controllers under URL prefix api/.  ```java import java.util.stream.Stream; import org.springframework.web.reactive.support.AbstractAnnotationConfigDispatcherHandlerInitializer; public class WebAppInitializer extends AbstractAnnotationConfigDispatcherHandlerInitializer { 	@Override 	protected String getServletMapping() { 		return ""/api/*""; 	} 	@Override 	protected Class[] getConfigClasses() { 		return Stream.of(AppConfig.class, SpringWebFluxConfig.class).toArray(size -> new Class[size]); 	} } ```  However, Spring Framework throw the next exception in the DispatcherHandler:  ``` org.springframework.web.server.ResponseStatusException: Response status 404 with reason ""No matching handler"" 	at org.springframework.web.reactive.DispatcherHandler.(DispatcherHandler.java:74) 	at org.springframework.web.reactive.config.WebFluxConfigurationSupport.webHandler(WebFluxConfigurationSupport.java:105) 	at org.springframework.web.reactive.config.DelegatingWebFluxConfiguration$$EnhancerBySpringCGLIB$$47fdb591.CGLIB$webHandler$34() 	at org.springframework.web.reactive.config.DelegatingWebFluxConfiguration$$EnhancerBySpringCGLIB$$47fdb591$$FastClassBySpringCGLIB$$cf39c992.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:361) 	at org.springframework.web.reactive.config.DelegatingWebFluxConfiguration$$EnhancerBySpringCGLIB$$47fdb591.webHandler() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:155) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:575) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1249) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1098) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) 	at org.springframework.web.reactive.support.AbstractDispatcherHandlerInitializer.refreshApplicationContext(AbstractDispatcherHandlerInitializer.java:135) 	at org.springframework.web.reactive.support.AbstractDispatcherHandlerInitializer.registerDispatcherHandler(AbstractDispatcherHandlerInitializer.java:87) 	at org.springframework.web.reactive.support.AbstractDispatcherHandlerInitializer.onStartup(AbstractDispatcherHandlerInitializer.java:63) 	at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:172) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5178) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1419) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1409) 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) ```  I think that the problem is inside the method getMatchingMapping() of the class org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping because it does not have handle the defined prefix  ---  **Affects:** 5.0 GA  **Issue Links:** - #20883 Ability to provide an external base path for controllers - #20703 Support prefix-based Servlet path mapping in ServletHttpHandlerAdapter (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2017-11-01T10:46:16Z","2019-01-11T13:13:43Z"
"","20645","DelegatingFilterProxy not found WebApplicationContext when start context with AbstractAnnotationConfigDispatcherHandlerInitializer [SPR-16096]","**[José María Sola Durán](https://jira.spring.io/secure/ViewProfile.jspa?name=josemariasoladuran)** opened **[SPR-16096](https://jira.spring.io/browse/SPR-16096?redirect=false)** and commented  I start a new project with Spring WebFlux. I want integrate this project with the new version of Spring Security 5.0.0.M5. I start the WebFlux context with WebAppInitializer, in particular extends the abstract class AbstractAnnotationConfigDispatcherHandlerInitializer. The code is below  ```java public class WebAppInitializer extends AbstractAnnotationConfigDispatcherHandlerInitializer { 	@Override 	public void onStartup(ServletContext servletContext) throws ServletException { 		super.onStartup(servletContext); 		 		/* Spring Security Filter */ 		FilterRegistration.Dynamic securityFilterRegistration = servletContext.addFilter(DelegatingFilterProxy.class.getSimpleName(), DelegatingFilterProxy.class); 		securityFilterRegistration.setAsyncSupported(true); 		securityFilterRegistration.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST, DispatcherType.ASYNC), false, ""/*""); 	} 	 	@Override 	protected String getServletMapping() { 		return ""/api/*""; 	}  	@Override 	protected Class[] getConfigClasses() { 		return Stream.of(AppConfig.class, SpringWebFluxConfig.class).toArray(size -> new Class[size]); 	} } ```  But when I send a request for de API, I obtaing the next exception:  ``` java.lang.IllegalStateException: No WebApplicationContext found: no ContextLoaderListener or DispatcherServlet registered? 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:260) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:624) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783) 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:789) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1437) 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:745) ```  AbstractAnnotationConfigDispatcherHandlerInitializer instance a HttpHandler for Non I/O Blocking request, but ¿why DelegatingProxy not found WebApplicationContext if it's started?  I attach the complete log of Tomcat 8.5.x server.   ---  **Affects:** 5.0 GA  **Attachments:** - [catalina.out](https://jira.spring.io/secure/attachment/25194/catalina.out) (_16.89 kB_)","closed","status: invalid,","spring-projects-issues","2017-10-22T18:12:57Z","2019-01-12T05:20:06Z"
"","20861","RequestEntity ignores headers sometimes [SPR-16314]","**[Josh](https://jira.spring.io/secure/ViewProfile.jspa?name=0x123123123)** opened **[SPR-16314](https://jira.spring.io/browse/SPR-16314?redirect=false)** and commented  https://github.com/spring-projects/spring-boot/issues/11375   --- No further details from [SPR-16314](https://jira.spring.io/browse/SPR-16314?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-12-19T15:38:41Z","2019-01-12T05:19:39Z"
"","20651","Incorrectly identify bridged method on interface [SPR-16103]","**[Joseph Valerio](https://jira.spring.io/secure/ViewProfile.jspa?name=jvalerio)** opened **[SPR-16103](https://jira.spring.io/browse/SPR-16103?redirect=false)** and commented  BridgeMethodResolver incorrectly identifies the bridgedMethod for nested interface hierarchies. This causes incorrect annotation processing.  TestCase: https://github.com/joevalerio/SPR-16103.git  Related to: [DATAREST-1134](https://jira.spring.io/browse/DATAREST-1134)  ---  **Affects:** 4.3.12  **Issue Links:** - #19588 BridgeMethodResolver.findBridgedMethod() return wrong method with interface (_**""is duplicated by""**_) - #20835 Ambiguous mapping error when using generic interface  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6446ffd063d64f0ee6aac488daad405b2aa3f3dd, https://github.com/spring-projects/spring-framework/commit/182da1590821a0b621c8721e325b5bfc17755fec  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","in: core,","spring-projects-issues","2017-10-23T19:45:43Z","2019-01-11T13:16:31Z"
"","20958","Ability to access Environment in the beans element of the Kotlin bean definition DSL [SPR-16412]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-16412](https://jira.spring.io/browse/SPR-16412?redirect=false)** and commented  The bean definition DSL is a great, and long awaited way to define beans in a more dynamic way. However it seems that still there are cases that can't be implemented. Consider this (simplistic) scenario in which I want to define some beans dynamically based on properties that are present in Spring's Environment. In a Spring Boot app:  **application.yml**  ```java number-of-beans: 5 ```  **BeanDsl.kt**  ```java fun beans() = beans {     val n = env.getProperty(""number-of-beans"")     for (i in 1..n) {         bean(""string${i}"") { ""string${i}"" }     }  } ```  The env variable is not accessible right inside the beans element (it is inside bean {} though), so there is no way we can access environment configurations at that point.  Could you consider it as an enhancement?  Thanks!  ---  **Affects:** 5.0.3  **Reference URL:** https://stackoverflow.com/questions/48411169/how-to-access-environment-properties-in-the-beans-element-of-the-bean-definition  **Issue Links:** - #20816 Kotlin bean definition DSL should provide access to getBeansOfType()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b71d0eeec9c9ed59f8b7f4e3acaec6f4919b46b0, https://github.com/spring-projects/spring-framework/commit/97ee94f4ca7e1d0c6f7e218e0ba8448940b7ba24, https://github.com/spring-projects/spring-framework/commit/be416ef9c4f63298891c0d667c03c283607680d8","closed","type: enhancement,","spring-projects-issues","2018-01-23T22:48:47Z","2019-01-11T15:37:44Z"
"","20407","WebAsyncManager should cancel task thread on timeout [SPR-15852]","**[Jordi Puigsegur](https://jira.spring.io/secure/ViewProfile.jspa?name=jpuigsegur)** opened **[SPR-15852](https://jira.spring.io/browse/SPR-15852?redirect=false)** and commented  Hi,  We are implementing a REST service with and endpoint that does some processing, part of it being in a database transaction. We would like to use WebAsyncTask to run this task in a separate thread and establish a timeout. However, we find that when the timeout has elapsed the service returns the corresponding Timeout Exception but the thread continues to work finishing the database transaction while we would like it to fail and perform a rollback.  We understand that the way to control it is by honoring isInterrupted() inside our code before committing the transaction. This way the executor thread will know that the timeout has exceeded and will exit with an exception performing a rollback. However it seems that the thread is not interrupted.  Which is the right way to do this?  Is the spring platform supposed to call .interrupt() when the timeout is activated or we have to do this ourselves?  Thanks, Jordi.   ---  **Affects:** 4.3.5  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncTask.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/681ced8fd3101e3453274630e3df8c2ff8856c41, https://github.com/spring-projects/spring-framework/commit/8b7a670821793a1bd15cea0fb388deaf88cd2d0e","closed","type: enhancement,","spring-projects-issues","2017-08-07T13:49:36Z","2017-09-11T09:13:06Z"
"","21005","Add SAP HANA to common JPA database platforms [SPR-16460]","**[Jonathan Bregler](https://jira.spring.io/secure/ViewProfile.jspa?name=jbregler)** opened **[SPR-16460](https://jira.spring.io/browse/SPR-16460?redirect=false)** and commented  Currently it's not possible to specify HANA as the database using the  ``` spring.jpa.database ```  property.  ---  **Affects:** 5.0.3  **Issue Links:** - #18833 Add database product name for SAP HANA - #21013 HibernateJpaDialect: Default to MySQL55Dialect based on InnoDB - #21101 Consistent incrementer arrangement for PostgreSQL, DB2 and SAP HANA  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1661, and commits https://github.com/spring-projects/spring-framework/commit/504e2768de904cd9c653e9f22b6d99a0ec26697a  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2018-02-02T14:25:33Z","2019-01-11T15:32:40Z"
"","21080","Need ability to access URI template in WebClient metrics/tracing instrumentation [SPR-16537]","**[Jon Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=jschneider)** opened **[SPR-16537](https://jira.spring.io/browse/SPR-16537?redirect=false)** and commented  For tagging on metrics and tracing, it is essential that we have access to the templated URI before it is expanded with variables. For example, a metrics tag should have `uri=/users/{id}` and not `uri=/users/1` to perform useful aggregation on requests and not overwhelm a monitoring system with unique tags.  There is a way to set the `uriBuilderFactory` on `WebClient.Builder`, but no effective way to retrieve the preconfigured `uriBuilderFactory` in order to delegate to it while capturing the template.  ---  **Affects:** 5.0.4  **Issue Links:** - #20148 Provide access to the unexpanded URI template when using WebTestClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9352e3d047e27a91149e471bac7584ff17fa6b92  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2018-02-26T17:56:46Z","2019-01-13T20:27:15Z"
"","20602","Document that @Bean nullable parameters imply optional injection of the bean [SPR-16053]","**[Jon Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=jschneider)** opened **[SPR-16053](https://jira.spring.io/browse/SPR-16053?redirect=false)** and commented  Question from Rob Fletcher:  If I autowire a `@Bean` method and one of the params is nullable (i.e. `?` suffix) does that imply it’s non-required?   ---  **Affects:** 5.0.1","closed","in: core,","spring-projects-issues","2017-10-06T13:58:02Z","2018-02-19T12:19:21Z"
"","20886","JsonPathExpectationsHelper doesn't offer a way to distinguish between field not existing and an explicit null [SPR-16339]","**[John Ryan Bard](https://jira.spring.io/secure/ViewProfile.jspa?name=rbard)** opened **[SPR-16339](https://jira.spring.io/browse/SPR-16339?redirect=false)** and commented  [JsonPathExpectationsHelper's doesNotExist](https://github.com/spring-projects/spring-framework/blob/v5.0.2.RELEASE/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java#L207) method does not distinguish between the value being null because the jsonPath didn't find a property or because there was an explicit null in the json.  In doesNotExist, if the field/property in the jsonPath isn't there, it eats the AssertionError and returns (as I would expect).  If, however, the json has an explicit null for the jsonPath, the doesNotExist falls through to the else statement on line 207 and will fall through without throwing an AssertionError (because the value is null).  If this is a bug in the doesNotExist method, change this ticket to bug/defect instead of feature.  If, however, that is not the intent of the doesNotExist method, I would like to have a method that allows me to not only check that there isn't a value in the supplied jsonPath, but also that the field doesn't exist (for `jsonPath(""$.abc"").doesNotExist()`, I would want `""{\""abc\"": null}""` to throw an AssertionError and `""{}""` to pass).  If implementing this feature, be careful not to break empty array behavior mentioned in #17935.  Jayway JsonPath has the [JsonPathMatchers.hasNoJsonPath](https://github.com/json-path/JsonPath/blob/master/json-path-assert/src/main/java/com/jayway/jsonpath/matchers/JsonPathMatchers.java#L30) / [WithoutJsonPath matcher](https://github.com/json-path/JsonPath/blob/master/json-path-assert/src/main/java/com/jayway/jsonpath/matchers/WithoutJsonPath.java#L26) for this.  Test case:  ```java @Test public void doesNotExistForAnExplicitNull() throws Exception {         String expression = ""$.none"";         exception.expect(AssertionError.class);         new JsonPathExpectationsHelper(expression).doesNotExist(""{\""none\"": null}""); } ```  ---  No further details from [SPR-16339](https://jira.spring.io/browse/SPR-16339?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-01-02T22:18:18Z","2019-01-14T04:32:46Z"
"","20662","Interception through CGLIB subclassing of target bean class (without a proxy) [SPR-16114]","**[John Doe](https://jira.spring.io/secure/ViewProfile.jspa?name=ah_paris)** opened **[SPR-16114](https://jira.spring.io/browse/SPR-16114?redirect=false)** and commented  When using cglib proxy, 'this' should be the proxy (like for the `@Configuration` classes), making internal calls eligible for interception. It is how cglib Enhancer works, `@Configuration` also works this way but not `@Component` beans (nor objects created from `@Import` or `@Bean`).  if there is a good reason for this different behaviors maybe it should be documented.   --- No further details from [SPR-16114](https://jira.spring.io/browse/SPR-16114?redirect=false)","open","type: enhancement,","spring-projects-issues","2017-10-25T12:56:14Z","2017-10-25T13:11:54Z"
"","20842","Programmatic creation of caching proxies using CacheProxyFactoryBean does not work [SPR-16295]","**[John Blum](https://jira.spring.io/secure/ViewProfile.jspa?name=jblum)** opened **[SPR-16295](https://jira.spring.io/browse/SPR-16295?redirect=false)** and commented  When a user attempts to create caching proxies using the `o.s.cache.interceptor.CacheProxyFactoryBean`, this **fails** to work.  A user might want to use the `CacheProxyFactoryBean` to introduce caching behavior and logic to classes from a 3rd party library.  This recently came up in a [_StackOverflow_ post](https://stackoverflow.com/questions/47665485/how-can-i-manually-add-a-spring-cacheinterceptor-using-java-config).  Please read the post and the answers (especially [this one](https://stackoverflow.com/questions/47665485/how-can-i-manually-add-a-spring-cacheinterceptor-using-java-config?answertab=active#tab-top)) for further details.  Ideally, a user would be able to add caching behavior to any class, programmatically (not declaratively) using...  ```java @Bean CacheProxyFactoryBean someBean() {      CacheProxyFactoryBean factoryBean = new CacheProxyFactoryBean();      factoryBean.setCacheOperationSources(...);     factoryBean.setTarget(new ThirdPartyClass());      return factoryBean; } ```  Unfortunately, this does **not** work because the [internal](https://github.com/spring-projects/spring-framework/blob/v5.0.2.RELEASE/spring-context/src/main/java/org/springframework/cache/interceptor/CacheProxyFactoryBean.java#L46) `CacheInterceptor's` [`afterSingletonesInitialized()`](https://github.com/spring-projects/spring-framework/blob/v5.0.2.RELEASE/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java#L184-L203) method never gets called, thereby [setting](https://github.com/spring-projects/spring-framework/blob/v5.0.2.RELEASE/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java#L202) the `initialized` bit and therefore allowing the [caching behavior/logic](https://github.com/spring-projects/spring-framework/blob/v5.0.2.RELEASE/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java#L310-L320) to be evaluated.  As result, the target object's [original operation is always invoked](https://github.com/spring-projects/spring-framework/blob/v5.0.2.RELEASE/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java#L322), forgoing any caching behavior, making any caching proxy configuration useless.  This can be fixed by having `CacheProxyFactoryBean` implement the `SmartInitializingSingleton` interface along with `BeanFactoryAware` and delegating said operations to the internal `CacheInterceptor`.  See **Pull Request** for fix.  ---  **Affects:** 4.3.13, 5.0.2  **Reference URL:** https://stackoverflow.com/questions/47665485/how-can-i-manually-add-a-spring-cacheinterceptor-using-java-config  **Issue Links:** - #16941 `@EnableCaching` provokes early initialization of any config class declaring a CacheManager  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1624, and commits https://github.com/spring-projects/spring-framework/commit/b160f93495f762b1f59519b66c3e07fe6bf387fd, https://github.com/spring-projects/spring-framework/commit/d53ede9bd3325269411efc67ab248389e02c85aa  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","in: core,","spring-projects-issues","2017-12-12T21:03:03Z","2019-01-13T04:57:40Z"
"","20450","H2 aliases are not supported in SQL ScriptUtils [SPR-15896]","**[John Allberg](https://jira.spring.io/secure/ViewProfile.jspa?name=smuda)** opened **[SPR-15896](https://jira.spring.io/browse/SPR-15896?redirect=false)** and commented  When creating an H2 alias in the `schema.sql` file, the statement is cut at the first semicolon, even though that's part of the alias. Seems related to #16184, #14165 and #16310.  Perhaps there is a way to escape semicolons to not signal a command break?  According to #16310, I've tried setting `ScriptUtils.EOF_STATEMENT_SEPARATOR=^^^ END OF SCRIPT ^^^` in `application.properties` to run the whole file as one script, but that doesn't seem to work.  Content of `schema.sql`:  ```sql DROP ALIAS IF EXISTS MYFUNCTION; CREATE ALIAS MYFUNCTION AS $$ String getTableContent(java.sql.Connection con) throws Exception {     String resultValue=null;     java.sql.ResultSet rs = con.createStatement().executeQuery(     "" SELECT * FROM TABLE_NAME"");        while(rs.next())        {         resultValue=rs.getString(1);        }     return resultValue; } $$; ```  Exception:  ``` org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Tomcat.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceInitializer': Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #2 of URL [jar:file:/Users/mynameallberg/Projects/project3/server/target/project-3.0.0-SNAPSHOT.war!/WEB-INF/classes!/schema-h2.sql]: CREATE ALIAS MYFUNCTION AS $$ String getTableContent(java.sql.Connection con) throws Exception { String resultValue=null; nested exception is org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement ""CREATE ALIAS MYFUNCTION AS [*]$$ String getTableContent(java.sql.Connection con) throws Exception { String resultValue=null"" [42000-196] 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1193) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1095) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:372) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1078) ~[spring-context-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:857) ~[spring-context-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.6.RELEASE.jar!/:1.5.6.RELEASE] 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.6.RELEASE.jar!/:1.5.6.RELEASE] 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.6.RELEASE.jar!/:1.5.6.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.6.RELEASE.jar!/:1.5.6.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.6.RELEASE.jar!/:1.5.6.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.6.RELEASE.jar!/:1.5.6.RELEASE] 	at com.bankid.project.App.main(App.java:28) [classes!/:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111] 	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111] 	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [project-3.0.0-SNAPSHOT.war:na] 	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [project-3.0.0-SNAPSHOT.war:na] 	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [project-3.0.0-SNAPSHOT.war:na] 	at org.springframework.boot.loader.WarLauncher.main(WarLauncher.java:59) [project-3.0.0-SNAPSHOT.war:na] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Tomcat.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceInitializer': Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #2 of URL [jar:file:/Users/myname/Projects/project3/server/target/project-3.0.0-SNAPSHOT.war!/WEB-INF/classes!/schema-h2.sql]: CREATE ALIAS MYFUNCTION AS $$ String getTableContent(java.sql.Connection con) throws Exception { String resultValue=null; nested exception is org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement ""CREATE ALIAS MYFUNCTION AS [*]$$ String getTableContent(java.sql.Connection con) throws Exception { String resultValue=null"" [42000-196] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	... 36 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceInitializer': Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #2 of URL [jar:file:/Users/myname/Projects/project3/server/target/project-3.0.0-SNAPSHOT.war!/WEB-INF/classes!/schema-h2.sql]: CREATE ALIAS MYFUNCTION AS $$ String getTableContent(java.sql.Connection con) throws Exception { String resultValue=null; nested exception is org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement ""CREATE ALIAS MYFUNCTION AS [*]$$ String getTableContent(java.sql.Connection con) throws Exception { String resultValue=null"" [42000-196] 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:137) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:220) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1018) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:345) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:340) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerPostProcessor.postProcessAfterInitialization(DataSourceInitializerPostProcessor.java:62) ~[spring-boot-autoconfigure-1.5.6.RELEASE.jar!/:1.5.6.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:423) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1633) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	... 46 common frames omitted Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #2 of URL [jar:file:/Users/project/Projects/project3/server/target/project-3.0.0-SNAPSHOT.war!/WEB-INF/classes!/schema-h2.sql]: CREATE ALIAS MYFUNCTION AS $$ String getTableContent(java.sql.Connection con) throws Exception { String resultValue=null; nested exception is org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement ""CREATE ALIAS MYFUNCTION AS [*]$$ String getTableContent(java.sql.Connection con) throws Exception { String resultValue=null"" [42000-196] 	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:491) ~[spring-jdbc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:238) ~[spring-jdbc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:48) ~[spring-jdbc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.runScripts(DataSourceInitializer.java:192) ~[spring-boot-autoconfigure-1.5.6.RELEASE.jar!/:1.5.6.RELEASE] 	at org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.runSchemaScripts(DataSourceInitializer.java:92) ~[spring-boot-autoconfigure-1.5.6.RELEASE.jar!/:1.5.6.RELEASE] 	at org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.init(DataSourceInitializer.java:83) ~[spring-boot-autoconfigure-1.5.6.RELEASE.jar!/:1.5.6.RELEASE] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111] 	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111] 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:366) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:311) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:134) ~[spring-beans-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	... 61 common frames omitted Caused by: org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement ""CREATE ALIAS MYFUNCTION AS [*]$$ String getTableContent(java.sql.Connection con) throws Exception { String resultValue=null"" [42000-196] 	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345) ~[h2-1.4.196.jar!/:na] 	at org.h2.message.DbException.get(DbException.java:179) ~[h2-1.4.196.jar!/:na] 	at org.h2.message.DbException.get(DbException.java:155) ~[h2-1.4.196.jar!/:na] 	at org.h2.message.DbException.getSyntaxError(DbException.java:191) ~[h2-1.4.196.jar!/:na] 	at org.h2.jdbc.JdbcConnection.translateGetEnd(JdbcConnection.java:1219) ~[h2-1.4.196.jar!/:na] 	at org.h2.jdbc.JdbcConnection.translateSQL(JdbcConnection.java:1396) ~[h2-1.4.196.jar!/:na] 	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:175) ~[h2-1.4.196.jar!/:na] 	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:164) ~[h2-1.4.196.jar!/:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111] 	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111] 	at org.apache.tomcat.jdbc.pool.StatementFacade$StatementProxy.invoke(StatementFacade.java:114) ~[tomcat-jdbc-8.5.16.jar!/:na] 	at com.sun.proxy.$Proxy60.execute(Unknown Source) ~[na:na] 	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:470) ~[spring-jdbc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE] 	... 73 common frames omitted ```  ---  **Affects:** 4.3.10  **Reference URL:** #16310  **Issue Links:** - #16184 SQL Scripts with newline separators no longer work - #14165 Support multi-line SQL comments in ResourceDatabasePopulator and JdbcTestUtils - #16310 Support EOF as statement separator in SQL scripts  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4e81ee5fdf2db69773bbcf55a3898b4aed01f7f9","closed","status: declined,","spring-projects-issues","2017-08-24T08:20:49Z","2019-01-14T04:34:19Z"
"","21038","NPE in Spring-JDBC with Oracle and SimpleJdbcInsert [SPR-16495]","**[John Ahlroos](https://jira.spring.io/secure/ViewProfile.jspa?name=johndevs)** opened **[SPR-16495](https://jira.spring.io/browse/SPR-16495?redirect=false)** and commented  When running the following code:  ```java // Inserts a row and returns the generated id public String performInsert() {   SimpleJdbcInsert insert = new SimpleJdbcInsert(dataSource)                 .withTableName(LOG_TABLE_NAME)                 .withSchemaName(SCHEMA_NAME)                 .usingGeneratedKeyColumns(ID_COLUMN)                 .usingColumns(VALUE_COLUMN);         KeyHolder keyHolder = insert.executeAndReturnKeyHolder(Collections.singletonMap(VALUE_COLUMN, json));         String id = (String) keyHolder.getKeys().get(ID_COLUMN);         return id; } ```  This code will work with Spring JDBC 4.3.6.RELEASE but if I change it to 4.3.7.RELEASE or above it will fail in:  ``` Caused by: java.lang.NullPointerException 	at org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider.lookupDefaultSchema(OracleTableMetaDataProvider.java:79) 	at org.springframework.jdbc.core.metadata.OracleTableMetaDataProvider.(OracleTableMetaDataProvider.java:68) 	at org.springframework.jdbc.core.metadata.TableMetaDataProviderFactory$1.processMetaData(TableMetaDataProviderFactory.java:74) 	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:336) 	at org.springframework.jdbc.core.metadata.TableMetaDataProviderFactory.createMetaDataProvider(TableMetaDataProviderFactory.java:64) 	at org.springframework.jdbc.core.metadata.TableMetaDataContext.processMetaData(TableMetaDataContext.java:206) 	at org.springframework.jdbc.core.simple.AbstractJdbcInsert.compileInternal(AbstractJdbcInsert.java:280) 	at org.springframework.jdbc.core.simple.AbstractJdbcInsert.compile(AbstractJdbcInsert.java:266) 	at org.springframework.jdbc.core.simple.AbstractJdbcInsert.checkCompiled(AbstractJdbcInsert.java:313) 	at org.springframework.jdbc.core.simple.AbstractJdbcInsert.doExecuteAndReturnKeyHolder(AbstractJdbcInsert.java:396) 	at org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeAndReturnKeyHolder(SimpleJdbcInsert.java:142) ```  ---  **Affects:** 4.3.14  **Issue Links:** - #21022 SimpleJdbcCall can't access synonyms in Oracle database - #19234 Drop NativeJdbcExtractor mechanism in favor of java.sql.Connection.unwrap()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2dc075335ea31448fad355d25d04dcc4f0b8d8c, https://github.com/spring-projects/spring-framework/commit/766e6028d7fa648ce83113d9ee6325b1ac90b50e  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: regression,","spring-projects-issues","2018-02-14T08:15:43Z","2019-01-11T15:29:41Z"
"","20526","AbstractJackson2Decoder breaks Custom Deserializers [SPR-15975]","**[Johannes Edmeier](https://jira.spring.io/secure/ViewProfile.jspa?name=joshi)** opened **[SPR-15975](https://jira.spring.io/browse/SPR-15975?redirect=false)** and commented  When using a custom Jackson Deserializer the following test throws a `java.lang.IllegalStateException: No ObjectCodec defined for parser, needed for deserialization`  Imho the `AbstractJackson2Decoder` should call `tokenBuffer.asParser(getObjectMapper())` instead of `tokenBuffer.asParser()` since the used `NonBlockingJsonParser` will always return `null` for `getCodec()`. (This solution does work for me)  ```java import reactor.core.publisher.Flux; import reactor.core.publisher.Mono; import reactor.test.StepVerifier;  import java.io.IOException; import org.junit.Test; import org.springframework.core.ResolvableType; import org.springframework.core.io.buffer.DataBuffer; import org.springframework.core.io.buffer.DefaultDataBufferFactory; import org.springframework.http.codec.json.Jackson2JsonDecoder; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.annotation.JsonDeserialize; import com.fasterxml.jackson.databind.deser.std.StdDeserializer;  import static org.assertj.core.api.Assertions.assertThat;  public class Jackson2DecoderTest {      @Test     public void test() {         DataBuffer buffer = new DefaultDataBufferFactory().wrap(""{\""test\"": 1}"".getBytes());          Jackson2JsonDecoder decoder = new Jackson2JsonDecoder(new ObjectMapper());         Flux decoded = decoder.decode(Mono.just(buffer), ResolvableType.forClass(TestObject.class), null,                 null).cast(TestObject.class);          StepVerifier.create(decoded).assertNext(v -> assertThat(v.getTest()).isEqualTo(1)).verifyComplete();     }      @JsonDeserialize(using = Deserializer.class)     public static class TestObject {         private int test;         public int getTest() {             return test;         }         public void setTest(int test) {             this.test = test;         }     }          public static class Deserializer extends StdDeserializer {         protected Deserializer() {             super(TestObject.class);         }          @Override         public TestObject deserialize(JsonParser p,                                       DeserializationContext ctxt) throws IOException, JsonProcessingException {             JsonNode node = p.readValueAsTree();             TestObject result = new TestObject();             result.setTest(node.get(""test"").asInt());             return result;         }     } } ```    ---  **Affects:** 5.0 RC4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74120ef00f149c10521b52948711de0e700b4e06","closed","type: bug,","spring-projects-issues","2017-09-18T22:36:11Z","2017-09-28T12:14:36Z"
"","20438","Generic variant of FactoryBean  [SPR-15883]","**[joerg.hohwiller@googlemail.com](https://jira.spring.io/secure/ViewProfile.jspa?name=hohwille)** opened **[SPR-15883](https://jira.spring.io/browse/SPR-15883?redirect=false)** and commented  `FactoryBean` can only be used if the type of the bean to create is known before. As your `BeanFactory` offers a method ` T getBean(Class requiredType)` I would expect to see a way to register one or multiple instances of a new factory bean interface that would be used as fallback if no bean is already present and also no concrete factory is available. With fallback I mean that before spring is actually comming to the conclusion that it should throw an exception telling that there is no such bean, it could traverse a list of potential implementations of that new interface and delegate the fabrication to that interface before giving up and throwing the exception. IMHO this could be easily added as a new feature without breaking compatibility if you know the right magic spot in the spring core code. In case you agree and give a slight hint I would even try to create a PR.  Without such generic factory bean the only suitable case seems to be a classpath scanning during the bootstrap (what e.g. spring-data is doing). IMHO it is not a good idea to have multiple ""solutions"" hooked up into spring that rely on such classpath scanning. Due to the support for classpath scanning offered by spring itself this does not even cache work that has already been done before. In the end this all results in bad bootstrapping performance. I really searched deep and found things like #19149 but still this does not solve my problem. My usecase is that e.g. in case you have a marker interface called `Service` that you may configure spring in a way so that if a concrete sub-interface `MyFooService` is injected then my generic custom factory bean could be invoked from `BeanFactory` and would create a client stub for that service including service discovery, etc. I already have created such client stub factory for REST and SOAP services as open-source: https://github.com/hohwille/oasp4j/blob/develop/modules/service/src/main/java/io/oasp/module/service/common/api/client/ServiceClientFactory.java All I need is a way to integrate this with spring to even lower the burden of actually creating the client stub for every usage as an advanced and optional use-case on top of this. However, there are tons of other use-cases for this need.  I love to hear from you and say thanks in advance for considering my proposal. In case this feature is already available and I have missed it then I apologize and you can close this issue with a simple link on the docs (but I really looked everywhere I could imagine).  ---  **Reference URL:** https://stackoverflow.com/questions/44495708/dynamic-spring-factory-to-create-a-bean-requested-by-its-given-type  2 votes, 3 watchers","open","in: core,","spring-projects-issues","2017-08-21T10:06:16Z","2021-11-10T12:40:20Z"
"","20758","DispatcherHandler invoke wrong method when discriminating request with params [SPR-16210]","**[Jocelyn Ntakpe](https://jira.spring.io/secure/ViewProfile.jspa?name=jntakpe)** opened **[SPR-16210](https://jira.spring.io/browse/SPR-16210?redirect=false)** and commented  When having to controller methods with almost the same parameters and return type, DispatcherHandler doesn't apply the right JsonView. For instance :  ```kotlin @RestController     @RequestMapping(""/users"")     class UserController {          @JsonView(Public::class)         @GetMapping(""/{username}"")         fun findPublic(@PathVariable username: String) = User(username, ""pwd"").toMono()          @JsonView(Internal::class)         @GetMapping(""/{username}"", params = arrayOf(""withpwd""))         fun findInternal(@PathVariable username: String) = User(username, ""pwd"").toMono()      }      data class User(val username: String, @field:JsonView(Internal::class) val password: String?)      interface Views {          interface Public          interface Internal : Public     } ```  If you run tests depending on tests order the code above will fail on one of the two endpoints.  !webflux_bug.png|thumbnail!  It seems HandlerResult method (findPublic) differs from getReturnTypeSource (findInternal) because in HandlerResult constructor handler.getMethod() doesn't return the same that ResolvableType.forMethodParameter(returnType).getSource().  The code works fine if the endpoints returns User instead of Mono\.  The issue looks like #20647 but the fix doesn't solve this one  ---  **Affects:** 5.0.2  **Reference URL:** https://github.com/jntakpe/webflux-bug-report  **Attachments:** - [webflux_bug.png](https://jira.spring.io/secure/attachment/25294/webflux_bug.png) (_20.48 kB_)  **Issue Links:** - #19392 ResolvableType equals method should not consider TypeProvider source - #21001 Resolvable type cannot resolve generic between different collection types  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f3141cddaf878d635318750b49f54147012a137, https://github.com/spring-projects/spring-framework/commit/4c7414833beacab66957c12df52bffe58df60709","closed","type: bug,","spring-projects-issues","2017-11-17T22:15:46Z","2019-01-14T04:33:08Z"
"","20685","InterceptingHttpAccessor.setInterceptors should support immutable lists [SPR-16137]","**[Joakim Lindberg](https://jira.spring.io/secure/ViewProfile.jspa?name=joaklind)** opened **[SPR-16137](https://jira.spring.io/browse/SPR-16137?redirect=false)** and commented  When upgrading from **org.springframework:spring-web:4.2.4.RELEASE** our httpinterceptors stopped working because we used immutable list as input to **InterceptingHttpAccessor.setInterceptors**. That method now use **AnnotationAwareOrderComparator.sort(interceptors)** and in extent **Collections.sort** which is not side effect free.  **InterceptingHttpAccessor.setInterceptors** should use a copied list to sort on.  ---  **Affects:** 5.0 GA, 5.0.1  **Issue Links:** - #18543 Update RestTemplate to respect `@Order` for ClientHttpRequestInterceptor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d06129debdfd7dad3a446355773dbbf9276875bb","closed","type: regression,","spring-projects-issues","2017-10-31T12:48:50Z","2019-01-13T05:01:17Z"
"","20913","ServerResponse should allow the usage of unassigned HTTP status codes [SPR-16366]","**[Jiří Pauer](https://jira.spring.io/secure/ViewProfile.jspa?name=pjiri)** opened **[SPR-16366](https://jira.spring.io/browse/SPR-16366?redirect=false)** and commented  Hello,  the current implementation of the ServerResponse does not allow the usage of unassigned HTTP status codes, because of the HttpStatus enum which contains only IANA registered HTTP Status codes.  But the HTTP specification allows the usage of new/extension/unassigned status codes. See: http://tools.ietf.org/html/rfc7231#section-6 and http://tools.ietf.org/html/rfc7231#section-8.2.2 Unfortunately, custom status codes are sometimes used by RESTful APIs.  It would be nice if the ServerResponse would allow custom status codes. The ServerResponse needs a constructor or builder method which excepts custom status codes.  The IANA list shows the codes which are unassigned: http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml  ---  **Affects:** 5.0.2  **Issue Links:** - #20622 Returning non-standard HTTP status code causes exceptions on WebFlux - #18779 ResponseEntity should allow the usage of unassigned HTTP status codes - #21289 No support for non-standard HTTP status codes in reactive ClientHttpResponse  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9623cdec4883e134c2691cec56c39e59e1b4b80a","closed","type: enhancement,","spring-projects-issues","2018-01-11T21:58:28Z","2019-01-11T15:17:39Z"
"","20799","Exception when receiving Long collection in MessageMapping [SPR-16252]","**[Jhovanni](https://jira.spring.io/secure/ViewProfile.jspa?name=jhovanni)** opened **[SPR-16252](https://jira.spring.io/browse/SPR-16252?redirect=false)** and commented  When you try to receive a collection of Long values, as parameter of a MessageMapping method (from spring messaging), you can print the collection. But if you try to access its values, there is an exception throw about not being able to cast Integer to Long.  Replicate it is easy:  `@MessageMapping`(""/channel"") public void receiveLongs(List\ list) { for (Long value : list) { System.out.println(""Line above throws java.lang.ClassCastException""); } } Exception throw is java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long. Code found in github repository is ready to be used and replicate the bug.  ---  **Affects:** 4.3.12  **Reference URL:** https://github.com/Jhovanni/LongException  **Issue Links:** - #21029 JsonMappingException when trying to instantiate org.springframework.messaging.Message  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/583201b02c4e0f188e765f749be2232354eb5ffb, https://github.com/spring-projects/spring-framework/commit/6dbc828aa1301db30015ad0095be69b3aa0f9879  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: bug,","spring-projects-issues","2017-12-01T14:18:29Z","2019-01-11T13:28:29Z"
"","20864","Documentation about Spring Framework BOM missing for Spring Framework 5.0 [SPR-16317]","**[Jesper de Jong](https://jira.spring.io/secure/ViewProfile.jspa?name=jesperdj)** opened **[SPR-16317](https://jira.spring.io/browse/SPR-16317?redirect=false)** and commented  The reference documentation for Spring Framework 5.0 does not contain information about the Spring Framework Bill-of-Materials (BOM) for Maven, like it did for previous versions.  The file spring-framework-bom.txt in the module spring-framework-bom refers to this URL, which leads to a 404 page: http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html#overview-maven-bom  File: https://github.com/spring-projects/spring-framework/blob/master/spring-framework-bom/spring-framework-bom.txt   ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3ae776b1fa94e56ffd32bf54549bba9cb3912720","closed","type: documentation,","spring-projects-issues","2017-12-21T09:16:20Z","2018-01-23T10:05:12Z"
"","21046","Support for read through / loading caches [SPR-16503]","**[Jens Wilke](https://jira.spring.io/secure/ViewProfile.jspa?name=cruftex)** opened **[SPR-16503](https://jira.spring.io/browse/SPR-16503?redirect=false)** and commented  The cache abstraction currently operates the cache in a cache aside pattern. Operating the cache via a cache loader would make it possible to use advanced caching features, such as refresh ahead or resilience.  Right now, it is possible to ""hack up"" a `CacheResolver` that creates a loading cache, in case there is only a single method annotated with `Cachable` and it only has a single argument.  IMHO, the current cache abstraction would provide enough to be able to create a loading cache, however, the current Spring internals don't make it possible.  Needed:  * A concept of a `StaticCacheResolver` that is only run once at startup and gets all needed information * A reverse mapping for `KeyGenerator` to be able to call the loading method on behalf of the cache key  Thoughts?   --- No further details from [SPR-16503](https://jira.spring.io/browse/SPR-16503?redirect=false)","open","type: enhancement,","spring-projects-issues","2018-02-15T06:31:26Z","2018-03-02T17:21:52Z"
"","21044","Support for cache2k caching [SPR-16501]","**[Jens Wilke](https://jira.spring.io/secure/ViewProfile.jspa?name=cruftex)** opened **[SPR-16501](https://jira.spring.io/browse/SPR-16501?redirect=false)** and commented  [cache2k](https://cache2k.org) is one of the [best performing Java caches](https://cruftex.net/2017/09/01/Java-Caching-Benchmarks-Part-3.html) with [a hit rate efficiency similar to Caffeine](https://github.com/ben-manes/caffeine/issues/106).  The jar size of cache2k is smaller than the currently available alternatives like EHCache and Caffeine. Although its small jar size it comes with XML configuration and JMX support.  The direct support of cache2k makes use of the build in `null` value support which leads to less overhead than Caffeine or using the JCache API.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1687","closed","type: enhancement,","spring-projects-issues","2018-02-15T05:04:29Z","2018-07-12T09:53:20Z"
"","21111","ClassUtils.getUserClass should support ByteBuddy-generated proxies (e.g. from Hibernate 5.3) [SPR-16569]","**[Jens Schauder](https://jira.spring.io/secure/ViewProfile.jspa?name=schauder)** opened **[SPR-16569](https://jira.spring.io/browse/SPR-16569?redirect=false)** and commented  Regarding the test failure for the latest Hibernate Snapshots (5.3.0-SNAPSHOT): Hibernate seems to have changed the way class names get generated for their proxies. This causes [`ClassUtils.getUserClass`](https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/util/ClassUtils.java#L368) to fail to detect it as a proxy because the class name does not contain a `$$`. This breaks the `AbstractPersistable.equals` method, triggering a test failure for `AbstractPersistableIntegrationTests`.  ---  **Issue Links:** - #20850 Support for Hibernate ORM 5.3 - [DATAJPA-1347](https://jira.spring.io/browse/DATAJPA-1347) Improve proxy detection to properly detect Hibernate 5.3 proxies  1 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2018-03-08T10:46:42Z","2019-01-11T14:32:29Z"
"","20956","@Cacheable with Sync does not support unless [SPR-16410]","**[jeff porter](https://jira.spring.io/secure/ViewProfile.jspa?name=jeff_porter)** opened **[SPR-16410](https://jira.spring.io/browse/SPR-16410?redirect=false)** and commented  If we annotate a method with the following...  `@Cacheable`(value = ""hardware.devices"", key = ""#hardwareId"",  unless=""#result == null"", sync=true)  Then we get an exception (`@Cacheable`(sync=true) does not support unless attribute on )  This means that there is no way to config the cache to NOT cache null objects if sync is used.  If the option of ""sync"" is not provided, then we can use the parameter unless.  I feel this should be considered a defect.   ---  **Affects:** 4.3.14, 5.0.3  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2018-01-23T11:17:52Z","2020-01-14T13:33:45Z"
"","20792","AbstractRequestLoggingFilter | allow modification of payload used in createMessage [SPR-16245]","**[Jeff Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=nels4784)** opened **[SPR-16245](https://jira.spring.io/browse/SPR-16245?redirect=false)** and commented  It would be nice if it were easy to manipulate the payload used in createMessage(). This could be  easily done with a new method ``` protected String getMessagePayload(HttpServletRequest request)  ```and a light refactor of the ```protected String createMessage(HttpServletRequest request, String prefix, String suffix) ``` method  I will be happy to submit a PR for this. ```    ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1609, and commits https://github.com/spring-projects/spring-framework/commit/537f79f68091bfbb1c702ee6083ebbd30dd874f4, https://github.com/spring-projects/spring-framework/commit/30e40210a8d798246963c826fcbe4c0bce6a5c01","closed","type: task,","spring-projects-issues","2017-11-29T23:01:18Z","2018-01-23T10:05:12Z"
"","20702","When using NamedParameterJdbcTemplate, NVARCHAR or NCLOB(4000 characters or less) columns are not properly populated since StatementCreatorUtils does setString for these types instead of setNString. [SPR-16154]","**[Jeff Maxwell](https://jira.spring.io/secure/ViewProfile.jspa?name=jeff.maxwell@gmail.com)** opened **[SPR-16154](https://jira.spring.io/browse/SPR-16154?redirect=false)** and commented  When using `NamedParameterJdbcTemplate`, `NVARCHAR` or `NCLOB`(4000 characters or less) columns are not properly populated since `StatementCreatorUtils` uses `setString` for these types instead of `setNString`.  Before #16555 `NVARCHAR` columns would populate correctly as the logic falls back to `setObject` since `NVARCHAR` and `LONGNVARCHAR` are not explicitly handled.  After #16555 `setString` is called for `NVARCHAR` (and `LONGNVARCHAR`) causing the data to be stored with the `NLS_CHARACTERSET` and not the `NLS_NCHAR_CHARACTERSET`.  This [commit](https://github.com/spring-projects/spring-framework/commit/390880448671077311aaa34f75182c4bf55b57c2#diff-ff36febe8461dd0f7821851a203057ba) handles `NCLOBs` properly but only if they are greater than 4000 characters.  Note that `NCHAR` works fine as it still handled by `setObject`.  The updated `setValue` method is below.  **Environment** * Java 1.8.0_121 * Spring 4.3.2 to 4.3.12 * Windows 7 Professional SR1 * Oracle Database 11g Enterprise Edition Release 11.2.0.4.0 * Oracle Character Set Config:   * NLS_CHARACTERSET: WE8MSWIN1252   * NLS_NCHAR_CHARACTERSET: AL16UTF16 * Oracle Drivers:   * ojdbc7 12.1.0.2.0   * ojdbc7_g 12.1.0.2.0   * ojdbc8 12.2.0.1   * ojdbc8_g 12.2.0.1  ```java 	private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, 			Integer scale, Object inValue) throws SQLException {  		if (inValue instanceof SqlTypeValue) { 			((SqlTypeValue) inValue).setTypeValue(ps, paramIndex, sqlType, typeName); 		} 		else if (inValue instanceof SqlValue) { 			((SqlValue) inValue).setValue(ps, paramIndex); 		} 		else if (sqlType == Types.VARCHAR || sqlType == Types.LONGVARCHAR ) { 			ps.setString(paramIndex, inValue.toString()); 		} 		else if (sqlType == Types.NVARCHAR || sqlType == Types.LONGNVARCHAR) { 			ps.setNString(paramIndex, inValue.toString()); 		} 		else if ((sqlType == Types.CLOB || sqlType == Types.NCLOB) && isStringValue(inValue.getClass())) { 			String strVal = inValue.toString(); 			if (strVal.length() > 4000) { 				// Necessary for older Oracle drivers, in particular when running against an Oracle 10 database. 				// Should also work fine against other drivers/databases since it uses standard JDBC 4.0 API. 				try { 					if (sqlType == Types.NCLOB) { 						ps.setNClob(paramIndex, new StringReader(strVal), strVal.length()); 					} 					else { 						ps.setClob(paramIndex, new StringReader(strVal), strVal.length()); 					} 					return; 				} 				catch (AbstractMethodError err) { 					logger.debug(""JDBC driver does not implement JDBC 4.0 'setClob(int, Reader, long)' method"", err); 				} 				catch (SQLFeatureNotSupportedException ex) { 					logger.debug(""JDBC driver does not support JDBC 4.0 'setClob(int, Reader, long)' method"", ex); 				} 			} 			else { 				// Fallback: setString or setNString binding 				if (sqlType == Types.NCLOB) { 					ps.setNString(paramIndex, strVal); 				} 				else { 					ps.setString(paramIndex, strVal); 				} 			} 		} 		else if (sqlType == Types.DECIMAL || sqlType == Types.NUMERIC) { 			if (inValue instanceof BigDecimal) { 				ps.setBigDecimal(paramIndex, (BigDecimal) inValue); 			} 			else if (scale != null) { 				ps.setObject(paramIndex, inValue, sqlType, scale); 			} 			else { 				ps.setObject(paramIndex, inValue, sqlType); 			} 		} 		else if (sqlType == Types.BOOLEAN) { 			if (inValue instanceof Boolean) { 				ps.setBoolean(paramIndex, (Boolean) inValue); 			} 			else { 				ps.setObject(paramIndex, inValue, Types.BOOLEAN); 			} 		} 		else if (sqlType == Types.DATE) { 			if (inValue instanceof java.util.Date) { 				if (inValue instanceof java.sql.Date) { 					ps.setDate(paramIndex, (java.sql.Date) inValue); 				} 				else { 					ps.setDate(paramIndex, new java.sql.Date(((java.util.Date) inValue).getTime())); 				} 			} 			else if (inValue instanceof Calendar) { 				Calendar cal = (Calendar) inValue; 				ps.setDate(paramIndex, new java.sql.Date(cal.getTime().getTime()), cal); 			} 			else { 				ps.setObject(paramIndex, inValue, Types.DATE); 			} 		} 		else if (sqlType == Types.TIME) { 			if (inValue instanceof java.util.Date) { 				if (inValue instanceof java.sql.Time) { 					ps.setTime(paramIndex, (java.sql.Time) inValue); 				} 				else { 					ps.setTime(paramIndex, new java.sql.Time(((java.util.Date) inValue).getTime())); 				} 			} 			else if (inValue instanceof Calendar) { 				Calendar cal = (Calendar) inValue; 				ps.setTime(paramIndex, new java.sql.Time(cal.getTime().getTime()), cal); 			} 			else { 				ps.setObject(paramIndex, inValue, Types.TIME); 			} 		} 		else if (sqlType == Types.TIMESTAMP) { 			if (inValue instanceof java.util.Date) { 				if (inValue instanceof java.sql.Timestamp) { 					ps.setTimestamp(paramIndex, (java.sql.Timestamp) inValue); 				} 				else { 					ps.setTimestamp(paramIndex, new java.sql.Timestamp(((java.util.Date) inValue).getTime())); 				} 			} 			else if (inValue instanceof Calendar) { 				Calendar cal = (Calendar) inValue; 				ps.setTimestamp(paramIndex, new java.sql.Timestamp(cal.getTime().getTime()), cal); 			} 			else { 				ps.setObject(paramIndex, inValue, Types.TIMESTAMP); 			} 		} 		else if (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER && 				""Oracle"".equals(ps.getConnection().getMetaData().getDatabaseProductName()))) { 			if (isStringValue(inValue.getClass())) { 				ps.setString(paramIndex, inValue.toString()); 			} 			else if (isDateValue(inValue.getClass())) { 				ps.setTimestamp(paramIndex, new java.sql.Timestamp(((java.util.Date) inValue).getTime())); 			} 			else if (inValue instanceof Calendar) { 				Calendar cal = (Calendar) inValue; 				ps.setTimestamp(paramIndex, new java.sql.Timestamp(cal.getTime().getTime()), cal); 			} 			else { 				// Fall back to generic setObject call without SQL type specified. 				ps.setObject(paramIndex, inValue); 			} 		} 		else { 			// Fall back to generic setObject call with SQL type specified. 			ps.setObject(paramIndex, inValue, sqlType); 		} 	} ```  ---  **Affects:** 4.3.12, 5.0.1  **Issue Links:** - #16555 Support for Types.NCLOB in SqlLobValue to simplify use with NamedParameterJdbcTemplate.  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1586, and commits https://github.com/spring-projects/spring-framework/commit/d5f34ed64112eefc13065f45ce107c727207db51, https://github.com/spring-projects/spring-framework/commit/e4c5b77de79fa8b5ea71891c7c7223d12f42a35b, https://github.com/spring-projects/spring-framework/commit/a37fce854fffb7002420a62bbf115fce100b8359  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: bug,","spring-projects-issues","2017-11-02T18:35:30Z","2019-01-11T13:27:22Z"
"","20442","WebFlux @MVC Controllers do not support @SessionAttributes. (plus SessionStatus) [SPR-15887]","**[Jean](https://jira.spring.io/secure/ViewProfile.jspa?name=jean.ho)** opened **[SPR-15887](https://jira.spring.io/browse/SPR-15887?redirect=false)** and commented  `@SessionAttributes` is not supported by webflux.  I am expecting same `@MVC` code work in both servlet or netty environment.  A very simple example (spring-boot, kotlin, thymeleaf):  `DemoController.kt`  ```kotlin @Controller @SessionAttributes(""a"") class DemoController {      @GetMapping     fun index(model: Model): String {         val old_a = model.asMap()[""a""] as? Int         val a = 1 + (old_a ?: 0)          model[""a""] = a          return ""index""     } } ```  `index.html`  ```html        ```  This demo works as expected - _increasing numbers displayed for each request in web brower_ - with **webmvc**, but not working - _the number is always 1_ - with **webflux**.  There's no `SessionStatus` argument resolver in **webflux** too.   ---  **Affects:** 5.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f76ac5bb32c5e5529ca036f44cae4bd25f4f6b9a","closed","type: enhancement,","spring-projects-issues","2017-08-22T05:14:50Z","2017-09-11T12:09:49Z"
"","20426","Immutable object constructor arguments not considering WebDataBinder's FIELD_MARKER_PREFIX [SPR-15871]","**[Jean](https://jira.spring.io/secure/ViewProfile.jspa?name=jean.ho)** opened **[SPR-15871](https://jira.spring.io/browse/SPR-15871?redirect=false)** and commented  Unchecked checkbox value should be recognized via `WebDataBinder#fieldMarkerPrefix`.  However when creating attribute, only constructor parameter names used, so field marker is not applied.  When this html form submit:  ```html         ```  - kotlin code  ```kotlin @Controller class TestController {   class Form(val a: Boolean = true)      @RequestMapping   fun handle(@ModelAttribute form: Form) {   } }  ```  when checkbox is unchecked, request should be:  ``` ?_a=on ```  and the value of `form.a` should be `false`, but **currently** it remains `true`.  ---  https://github.com/spring-projects/spring-framework/blob/61cdc842e08f468c8aec9d10a900f3ba087f348e/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java#L238  ---  **Affects:** 5.0 RC3  **Issue Links:** - #19763 Data binding with immutable objects (Kotlin / Lombok / `@ConstructorProperties`) - #20101 BindingResult support for constructor argument mismatch on immutable data object - #20432 Revisit handling of missing fields (without default values) for immutable data classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/496223a927862603570b6d832a8e88953581552b, https://github.com/spring-projects/spring-framework/commit/9aa369f40222527f7f0f864b53659d8b585dcd7b","closed","type: enhancement,","spring-projects-issues","2017-08-17T11:24:09Z","2019-01-13T05:15:02Z"
"","20415","Reactive GET request query-params are not decoded correctly. + sign must be space. [SPR-15860]","**[Jean](https://jira.spring.io/secure/ViewProfile.jspa?name=jean.ho)** opened **[SPR-15860](https://jira.spring.io/browse/SPR-15860?redirect=false)** and commented  When decoding query parameters, plus sign '+' must be decoded as space.  https://github.com/spring-projects/spring-framework/blob/6855a85c41a51aeb151c8c1103e30a6a6745197b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java#L117  StringUtils.uriDecode() does not handle '+' sign. It's problem for query params.  For reference:  https://github.com/spring-projects/spring-framework/blob/6855a85c41a51aeb151c8c1103e30a6a6745197b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java#L128  when POST, URLDecoder.decode() is used and fine.   ---  **Affects:** 5.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/645e3492dba42ec14553fca642344cafba571ed0","closed","type: bug,","spring-projects-issues","2017-08-11T05:36:02Z","2017-09-11T12:09:50Z"
"","20475","Spring MVC : ModelAttribute not being populated on a PUT request [SPR-15921]","**[Jean-Charles Eloi](https://jira.spring.io/secure/ViewProfile.jspa?name=jceloi)** opened **[SPR-15921](https://jira.spring.io/browse/SPR-15921?redirect=false)** and commented  Hello,  Migrating to the latest Spring Boot version, we're experiencing problems with our PUT forms `@ModelAttribute` annotated request params : their content is totally blank.  I've traced the problem to this commit : https://github.com/spring-projects/spring-framework/commit/8d743181daf6120c34d1c7778ea5231a78d72d7b fixing #20308 on HttpPutFormContentFilter.java, more precisely this line :  String[] queryParam = (super.getQueryString() != null ? super.getParameterValues(name) : null);  vs a direct read previously : String[] queryStringValues = super.getParameterValues(name);  In our case (standard spring MVC, Thymeleaf templating), super.getQueryString() is null but super.getParameterValues(name) does return the expected value (as it did previously).  The consequence is that the request params aren't bound at all now.  The sample is there : https://github.com/spring-projects/spring-framework-issues/pull/170 Could you have a look on that ?  Regards !  ---  **Affects:** 4.3.10  **Issue Links:** - #20383 Parameter values are null when making a PUT request (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-09-01T10:13:04Z","2019-01-14T04:34:13Z"
"","20518","DataBuffer Should Release Manually when Exception Thrown [SPR-15966]","**[Jason Yu](https://jira.spring.io/secure/ViewProfile.jspa?name=jason.yu)** opened **[SPR-15966](https://jira.spring.io/browse/SPR-15966?redirect=false)** and commented  As [this comment](https://jira.spring.io/browse/SPR-15850?focusedCommentId=154107&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-154107), I guess following implementation should manual release DataBuffer instance in catch block.  ``` @Override protected Mono renderInternal(Map renderAttributes, 		@Nullable MediaType contentType, ServerWebExchange exchange) {  	// Expose all standard FreeMarker hash models. 	SimpleHash freeMarkerModel = getTemplateModel(renderAttributes, exchange); 	if (logger.isDebugEnabled()) { 		logger.debug(""Rendering FreeMarker template ["" + getUrl() + ""].""); 	}  	Locale locale = LocaleContextHolder.getLocale(exchange.getLocaleContext()); 	DataBuffer dataBuffer = exchange.getResponse().bufferFactory().allocateBuffer(); 	try { 		Charset charset = getCharset(contentType); 		Writer writer = new OutputStreamWriter(dataBuffer.asOutputStream(), charset); 		getTemplate(locale).process(freeMarkerModel, writer); 	} 	catch (IOException ex) { 		String message = ""Could not load FreeMarker template for URL ["" + getUrl() + ""]""; 		return Mono.error(new IllegalStateException(message, ex)); 	} 	catch (Throwable ex) { 		return Mono.error(ex); 	} 	return exchange.getResponse().writeWith(Flux.just(dataBuffer)); } ```    ---  **Affects:** 5.0 RC4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/78434c8e2043e18040ea8a57868b2cee46fbd8a5","closed","type: bug,","spring-projects-issues","2017-09-15T07:50:41Z","2017-09-28T12:14:37Z"
"","20405","Support groovy template engine in webflux [SPR-15850]","**[Jason Yu](https://jira.spring.io/secure/ViewProfile.jspa?name=jason.yu)** opened **[SPR-15850](https://jira.spring.io/browse/SPR-15850?redirect=false)** and commented  Support groovy template engine just like spring web mvc. It would be nice to write domain-specific code via groovy markup builder.   --- No further details from [SPR-15850](https://jira.spring.io/browse/SPR-15850?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-08-07T01:36:20Z","2018-04-06T13:53:44Z"
"","21132","MultipartHttpServletRequest.getParameterValues does not merge values from query string and body [SPR-16590]","**[Jason Joo](https://jira.spring.io/secure/ViewProfile.jspa?name=hblzxsj)** opened **[SPR-16590](https://jira.spring.io/browse/SPR-16590?redirect=false)** and commented  Affected method:  **DefaultMultipartHttpServletRequest::getParameterValues** **DefaultMultipartHttpServletRequest::getParameterMap**  getParameterValues is used to return multi values of a same key in request, including query string, post contents. And DefaultMultipartHttpServletRequest would be used instead of default servlet wrapper when using ""**multipart/form-data**"" post method to realize including vars in multipart body. And there is a problem in its getter in dealing values of same keys. It will not merge them to values in  query string.  It can be reproduced by following steps:  ```shell curl -F ""key1=test"" ""http://test.com/hello?key1=other"" ```  You will get a parameter map like:  > key1: [test]  ```shell curl -d ""key1=test"" ""http://test.com/hello?key1=other"" ```  And you will get:  > key1: [test, other]  Let's sit down to discuss whether fix it?   ---  **Affects:** 5.0.4  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1740  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab6a6f4e1777af9ebb5ad09a53efb21951007133","closed","type: enhancement,","spring-projects-issues","2018-03-14T09:24:07Z","2018-07-26T08:09:33Z"
"","20810","@EnableWebSocketMessageBroker breaks Jetty integration testing in 5.0.x [SPR-16263]","**[Jared Jacobs](https://jira.spring.io/secure/ViewProfile.jspa?name=jmj)** opened **[SPR-16263](https://jira.spring.io/browse/SPR-16263?redirect=false)** and commented  When we attempted to migrate our codebase from 4.3.3 to 5.0.2, our controller integration tests all failed, because our ApplicationContext in the test environment couldn't be created, since we have one controller that uses STOMP over a web socket. We actually aren't even testing STOMP messages in our integration tests. We only test simple HTTP requests, but again, those tests won't run because the ApplicationContext can't be created. This looks like a regression from 4.3.3.  I reproduced the issue easily using an entirely different codebase, a sample application written to showcase testing of spring-websocket. See the example test at the Reference URL above (note the fork).  Problems: 1. `WebSocketServerFactory.doStart()` throws an IllegalStateException because it doesn't have a DecoratedObjectFactory. This can be worked around pretty easily by setting the `DecoratedObjectFactory.ATTR` attribute on the ServletContext. 2. `WebSocketServerFactory` throws a NullPointerException because it doesn't have an Executor and can't get one via a ContextHandler. This is because Spring's MockServletContext doesn't implement Jetty's ContextHandler.Context. I can’t seem to find a workaround because these spring-websocket types seem to form a chain of construction via `new`:  * WebMvcStompWebSocketEndpointRegistration * DefaultSockJsService * DefaultHandshakeHandler * JettyRequestUpgradeStrategy * WebSocketServerFactory  For the time being, we are working around the issue by omitting the web socket mappings from our integration test environment (no longer using `@EnableWebSocketMessageBroker` in our integration tests). Until this issue is fixed, it seems we no longer have the option of adding tests that exercise the web socket.   ---  **Affects:** 5.0.2  **Reference URL:** https://github.com/2is10/spring-websocket-portfolio/blob/master/src/test/java/org/springframework/samples/portfolio/web/jetty/JettyIntegrationTest.java","closed","status: invalid,","spring-projects-issues","2017-12-05T05:56:43Z","2019-01-12T05:19:48Z"
"","20988","Use SMTP Message instead of MimeMessage to get access to setEnvelopeForm [SPR-16443]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-16443](https://jira.spring.io/browse/SPR-16443?redirect=false)** and commented  When you use a MimeMessageHelper you can't set the ""envelope from"" only by setting a property ""mail.smtp.from"" for the java mail session. But this property affects every mail. It makes sense to set an variable envelope return path ([VERP](https://en.wikipedia.org/wiki/Variable_envelope_return_path)) for every message to process bounces.  com.sun.mail.smtp.SMTPMessage extends MimeMessage and is supporting setEnvelopeFrom which overrides ""mail.smtp.from"".  At the moment you can achieve this only by building a new MimeMessage  ```java MimeMessageHelper helper; SMTPMessage smtpMessage = new SMTPMessage(helper.getMimeMessage()); smtpMessage.setEnvelopeFrom(verpAddress) javaMailSender.send(smtpMessage) ```  It would be quite easy to use SMTPMessage instead of MimeMessage   ---  **Affects:** 5.0.3  **Reference URL:** http://cephas.net/blog/2006/06/09/using-apache-james-and-javamail-to-implement-variable-envelope-return-paths/","open","type: enhancement,","spring-projects-issues","2018-01-31T10:42:06Z","2018-02-25T15:34:51Z"
"","20510","Conflict between ShallowETagHeaderFilter and Tomcats DefaultServlet  [SPR-15958]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-15958](https://jira.spring.io/browse/SPR-15958?redirect=false)** and commented  I configured a ShallowEtagHeaderFilter in my web.xml for the root path. And I enabled the Tomcats DefaultServlet with DefaultServletHandlerConfigurer.enable().  If you run both on the same resource you get a conflict about generated ETags  The DefaultServlet is building only a weak ETag based on contentLength and lastModified. You can configure ShallowEtagHeaderFilter to build weak ETags too, but they are based on the content itself.  If you request a resource with a simple GET Request, you get the ETag from ShallowEtagHeaderFilter. If you request it again with ""if-match"" Header, the DefaultServlet kicks in and compares the requested ETag from ShallowEtagHeader with its own weak ETag and sends therefore a 412 status code.   ---  **Affects:** 4.3.11","closed","status: invalid,","spring-projects-issues","2017-09-13T11:01:16Z","2019-01-12T05:20:17Z"
"","20870","Race-condition between @SubscribeMapping and ChannelInterceptorAdapter.preSend [SPR-16323]","**[Jan Nielsen](https://jira.spring.io/secure/ViewProfile.jspa?name=jan.sture.nielsen@gmail.com)** opened **[SPR-16323](https://jira.spring.io/browse/SPR-16323?redirect=false)** and commented  In my Spring Boot 1.5.9 application with Spring Websockets, web-socket subscriptions are intercepted with an implementation of `ChannelInterceptorAdapter`:  ```java @Override public Message preSend(Message message, MessageChannel channel) {     StompHeaderAccessor accessor = StompHelper.accessor(message);     StompCommand command = accessor.getCommand();      if (null != command) {         StompHelper.authentication(message, tokenHandler);          switch (command) {          case SUBSCRIBE:             this.stompHandler.subscribe(message);             break;         case UNSUBSCRIBE:             this.stompHandler.unsubscribe(message);             break;         // ...         }     }     return super.preSend(message, channel); }  ```  which captures the subscriber and destination so subscriber-specific messages can be sent. In the web-socket controller, the `@SubscribeMapping` implementation publishes initialization data to the subscriber. But the `@SubscribeMapping` and `ChannelInterceptorAdapter.preSend` are invoked in different threads, so occasionally the `@SubscribeMapping` executes before the completion of `ChannelInterceptorAdapter.preSend` which results in the subscriber not getting the initialization data.  This seems like a Spring Websocket design problem, but is there an (elegant-ish) work-around?   ---  **Affects:** 4.3.13, 5.0.2  **Reference URL:** https://stackoverflow.com/questions/47945583/race-condition-between-subscribemapping-and-channelinterceptoradapter-presend","closed","status: declined,","spring-projects-issues","2017-12-24T06:04:18Z","2019-01-12T16:22:01Z"
"","21057","Performance degradation for creating non-singleton bean [SPR-16514]","**[Jakub Bednar](https://jira.spring.io/secure/ViewProfile.jspa?name=bednar)** opened **[SPR-16514](https://jira.spring.io/browse/SPR-16514?redirect=false)** and commented  In our system we use the short live non singleton bean. After upgrade to Spring 5.0.3 our performance tests has performance degradation caused by slowdown the bean creation. Here is a speed comparison between the Spring 4.3.6 and the Spring 5.0.3:  **Spring 4.3.6.RELEASE**  ``` PerformanceIssue - 1000 bean creations 67 ms PerformanceIssue - 10000 bean creations 161 ms PerformanceIssue - 100000 bean creations 222 ms ```  **Spring 5.0.3.RELEASE**  ``` PerformanceIssue - 1000 bean creations 100 ms PerformanceIssue - 10000 bean creations 296 ms PerformanceIssue - 100000 bean creations 1894 ms ```  This problem is caused by Assert.notNull in method AnnotationUtils.synthesizeAnnotation. See the YourKit call tree:  **Spring 4.3.6.RELEASE** !YourKit-Spring4.png|thumbnail!  **Spring 5.0.3.RELEASE** !YourKit-Spring5.png|thumbnail!  - [GitHub reproduction project](https://github.com/bednar/spring-5-performance-issue)    ---  **Affects:** 5.0.3  **Reference URL:** https://github.com/bednar/spring-5-performance-issue  **Attachments:** - [YourKit-Spring4.png](https://jira.spring.io/secure/attachment/25403/YourKit-Spring4.png) (_823.23 kB_) - [YourKit-Spring5.png](https://jira.spring.io/secure/attachment/25404/YourKit-Spring5.png) (_1.02 MB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f316f6a46a86030dd7e6797d8fdc575a908cf106","closed","in: core,","spring-projects-issues","2018-02-19T07:18:40Z","2018-02-19T12:19:21Z"
"","20737","WebSocketConfigurationSupport.defaultSockJsTaskScheduler adds NoOpScheduler to context that is not usable in any way [SPR-16189]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-16189](https://jira.spring.io/browse/SPR-16189?redirect=false)** and commented  WebSocketConfigurationSupport.defaultSockJsTaskScheduler() produces TaskScheduler bean and adds it to application context. But if SockJS is not used and not configured - it creates NoOpScheduler that can only throw IllegalStateExceptions. If other component is added to context that requires TaskScheduler it picks that NoOpScheduler and fails with ""Unexpected use of scheduler"" on it use instead of ""No such bean"" on creation.  It seems to me that it will be better not to add such NoOpScheduler to application context since it is not usable in any way.  ---  **Affects:** 5.0.1  **Issue Links:** - #20752 Support for autowire-candidate with `@Bean` (_**""depends on""**_) - #21246 EnableWebSocket registers a non functional task scheduler to the context (_**""duplicates""**_) - #21572 Consistent non-exposure of null beans in the BeanFactory API - #20751 Warn about use of SimpleAsyncTaskExecutor for async requests  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3d6e38bb43fe86cc58bc816eff13b968c1e0884f, https://github.com/spring-projects/spring-framework/commit/6aa6d91ea98b16c38ac3c5c10e61c0be30b7b686  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2017-11-13T14:18:08Z","2019-01-13T05:00:41Z"
"","20731","SettableListenableFuture set has a race on Java6 (and old versions of Java7) [SPR-16183]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-16183](https://jira.spring.io/browse/SPR-16183?redirect=false)** and commented  There is a bug in JDK https://bugs.openjdk.java.net/browse/JDK-7132378 that was fixed before Java8 release, backported to Java7 but not backported to Java6 (As far as I can tell)  If running on affected java version - SettableListenableFuture class is affected. Here are the steps to reproduce: 1.Code - https://github.com/isopov/isopov-jcstress/blob/java6/src/main/java/com/sopovs/moradanen/jcstress/spring/ExplicitListenableSet.java (It is slightly modified test from Openjdk, so it is problably GPL-licensed) 2. Ubuntu 14.04 with openjdk6 installed. 3. Launch test in interpreter - java -Xint -jar target/springtest.jar  Since Spring 5 requires Java8 it is definitely not affected, but maybe it is feasible to add some synchronization workaround for this JDK-issue for 4.3.x branch.  ---  **Affects:** 4.3.12  **Reference URL:** https://bugs.openjdk.java.net/browse/JDK-7132378  **Issue Links:** - #19766 SettableListenableFuture may be both set and canceled successfully - #19781 SettableListenableFuture may be successfully set with failureCallback executed and success callback ignored - #20733 End of first-class JDK 6 support","closed","in: core,","spring-projects-issues","2017-11-10T10:57:14Z","2019-01-12T16:32:53Z"
"","20716","WebTestClient supports custom TLS certificate verification [SPR-16168]","**[Ivan Pavlukhin](https://jira.spring.io/secure/ViewProfile.jspa?name=ivan.pavlukhin2)** opened **[SPR-16168](https://jira.spring.io/browse/SPR-16168?redirect=false)** and commented  I am trying to use WebTestClient in integration tests. I create client using WebTestClient.bindToServer(). Tested server serves resources with HTTPS. There is no need to use certificate signed by well-known CA in tests. But it seems impossible to configure custom verification strategy for WebTestClient. For WebClient there is such ability via `clientConnector` builder method, but I have not found similar for WebTestClient.   ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/263da1535baab5d605daf888a2f00ec5c4994319","closed","type: enhancement,","spring-projects-issues","2017-11-07T08:22:26Z","2017-11-27T12:17:09Z"
"","20600","WebFlux controller successfully completes response if Flux emits error [SPR-16051]","**[Ivan Pavlukhin](https://jira.spring.io/secure/ViewProfile.jspa?name=ivan.pavlukhin2)** opened **[SPR-16051](https://jira.spring.io/browse/SPR-16051?redirect=false)** and commented  I observed such behaviour with reactor-netty HttpServer and ReactorHttpHandlerAdapter. Actually if error is first emitted event then will controller return HTTP error code. But if some event was emitted before error, then response will complete successfully (ending with zero chunk). See reproducing gist https://gist.github.com/TanyaGaleyev/83ad550cf7221ef84a3bfe6df26eec3c I suppose that proper behaviour here is to close connection when error occurs without writing end chunk.   ---  **Affects:** 5.0.2","closed","type: bug,","spring-projects-issues","2017-10-06T09:13:43Z","2018-01-23T10:05:12Z"
"","21029","JsonMappingException when trying to instantiate org.springframework.messaging.Message [SPR-16486]","**[Itamar Benjamin](https://jira.spring.io/secure/ViewProfile.jspa?name=thimim)** opened **[SPR-16486](https://jira.spring.io/browse/SPR-16486?redirect=false)** and commented  in StreamListener input, when trying to receive a parameterized Message instance (see referenced github gist link), this exception is thrown: org.springframework.messaging.converter.MessageConversionException: Could not read JSON: Can not construct instance of org.springframework.messaging.Message: abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information  this was introduced in spring-messaging:4.3.14.RELEASE, overriding only this dependency to 4.3.13.RELEASE resolves this issues  ---  **Affects:** 4.3.14  **Reference URL:** https://gist.github.com/ItamarBenjamin/feb62ab96bda55555aa6c96dd545ddaf  **Issue Links:** - #20799 Exception when receiving Long collection in MessageMapping  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ee09c89b5e1bf891f57e6f0b46382c28b487f2b, https://github.com/spring-projects/spring-framework/commit/2033f50f2206f3af3090cac7c7cb1e82fa8add54  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)  1 votes, 2 watchers","closed","type: regression,","spring-projects-issues","2018-02-11T19:40:20Z","2019-01-11T15:30:48Z"
"","20437","Seperate Spring Web annotations from spring web [SPR-15882]","**[Itamar Benjamin](https://jira.spring.io/secure/ViewProfile.jspa?name=thimim)** opened **[SPR-15882](https://jira.spring.io/browse/SPR-15882?redirect=false)** and commented  Hi, In my company we have an API project for every service, and each service that uses another one is dependent on the latter's API project in gradle. I know this is not the recommended way to work by spring but that's convenient for us for the time being.  In these API projects we have the controller's interface, which needs `@RequestMapping` and other spring-web annotations. Since these annotations come with the entire spring-web code, we get conflicts in some of our client applications, and the API jar, which should be very slim, brings with it many spring-web classes.  it will be very useful for us, and i'm sure for other teams that work like us, to have a separate annotation package published (similar to swagger annotations package - https://mvnrepository.com/artifact/io.swagger/swagger-annotations)  Thanks!   ---  **Affects:** 4.3.10  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2017-08-21T07:57:05Z","2019-01-11T18:05:25Z"
"","21086","WebApplicationContextFacesELResolver#isReadOnly always return false [SPR-16543]","**[Igor](https://jira.spring.io/secure/ViewProfile.jspa?name=sukhigo)** opened **[SPR-16543](https://jira.spring.io/browse/SPR-16543?redirect=false)** and commented  Is it correct behaviour that org.springframework.web.jsf.el.WebApplicationContextFacesELResolver#isReadOnly always return false?   ---  **Affects:** 4.3.14, 5.0.4  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/jsf/el/WebApplicationContextFacesELResolver.java#L155  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/478162741df63d5516fa7e730c977472867fde7d, https://github.com/spring-projects/spring-framework/commit/3e6cfb7c6d6e2a900bde847d5ad259c852c5040b  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-02-28T21:17:39Z","2018-04-03T20:34:28Z"
"","21023","Set thread interrupt flag on InterruptedException [SPR-16479]","**[Igor](https://jira.spring.io/secure/ViewProfile.jspa?name=sukhigo)** opened **[SPR-16479](https://jira.spring.io/browse/SPR-16479?redirect=false)** and commented  missing a few interrupt() calls there which is also inconsistent with other places in the framework codebase  `@jhoeller` want to merge it in version 5.0.4 and 4.3.15   ---  **Affects:** 4.3.14, 5.0.3  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1668, and commits https://github.com/spring-projects/spring-framework/commit/39201adca461f374f1ee4328c75354f559fb301e, https://github.com/spring-projects/spring-framework/commit/33d655a63479ea6fdfda96b142e39bc5412f68ca  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-02-08T20:39:23Z","2018-02-19T12:19:19Z"
"","20457","Provide an Apache Commons Logging's LogFactory provider in spring-jcl to support WebSphere's Parent-First classloader [SPR-15903]","**[Ibrahim Ghazal](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrahim.mg)** opened **[SPR-15903](https://jira.spring.io/browse/SPR-15903?redirect=false)** and commented  In #19081 (specifically [this comment](https://jira.spring.io/browse/SPR-14512?focusedCommentId=151209)), [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) said:  > In ""Parent First"" mode, it's always WebSphere's own version of Commons Logging getting picked up. It does not make a difference whether the application contains a variant of Commons Logging itself: an application-level variant is always being ignored. Therefore it doesn't make a difference whether we embed our own variant versus JCL-over-X bridges or the standard Commons Logging jar.  In practice, there **is** a difference. When a _real_ Commons Logging JAR is picked up (such as when using WebSphere's Parent-First classloader), `spring-jcl` is not used and spring's logs end up going to Commons Logging's default implementation (most likely JUL). But when `log4j-jcl` or `jcl-over-slf4j` are used instead of `spring-jcl`, logs are redirected to Log4j2 or SLF4J respectively.  This is because Commons Logging searches for a provider using the JAR Services Discovery mechanism (`META-INF/services/org.apache.commons.logging.LogFactory` file). Both `log4j-jcl` and `jcl-over-slf4j` provide this and so they just work even in such situations.  I think it's quite easy to provide this in `spring-jcl` too.  (The linked comment above mentions implementing the discovery mechanism in `spring-jcl`, but this issue is asking for the opposite (providing a provider)).  ---  **Affects:** 5.0 RC3  **Issue Links:** - #21127 Allow spring-jcl to be found by Commons Logging's service discovery  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b86c71b2ae3b7a43900bc4760b7e12426f96616","closed","type: enhancement,","spring-projects-issues","2017-08-26T11:17:41Z","2019-01-11T18:11:55Z"
"","20411","Unable to use Hibernate Validator 4.3.2 if Bean Validation API 1.1 is on the classpath [SPR-15856]","**[Ibrahim Ghazal](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrahim.mg)** opened **[SPR-15856](https://jira.spring.io/browse/SPR-15856?redirect=false)** and commented  Trying to create a `LocalValidatorFactoryBean` bean while both Hibernate Validator 4.3.2 and Bean Validation 1.1 are on the classpath throws the below error:  ``` Aug 09, 2017 1:11:57 PM org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh INFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5197848c: startup date [Wed Aug 09 13:11:57 AST 2017]; root of context hierarchy Aug 09, 2017 1:11:57 PM org.hibernate.validator.internal.util.Version  INFO: HV000001: Hibernate Validator 4.3.2.Final Aug 09, 2017 1:11:57 PM org.springframework.context.annotation.AnnotationConfigApplicationContext refresh WARNING: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'localValidatorFactoryBean' defined in demo.Demo: Invocation of init method failed; nested exception is java.lang.AbstractMethodError: org.hibernate.validator.internal.engine.ConfigurationImpl.getDefaultParameterNameProvider()Ljavax/validation/ParameterNameProvider; Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'localValidatorFactoryBean' defined in demo.Demo: Invocation of init method failed; nested exception is java.lang.AbstractMethodError: org.hibernate.validator.internal.engine.ConfigurationImpl.getDefaultParameterNameProvider()Ljavax/validation/ParameterNameProvider; 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1628) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:84) 	at demo.Demo.main(Demo.java:11) Caused by: java.lang.AbstractMethodError: org.hibernate.validator.internal.engine.ConfigurationImpl.getDefaultParameterNameProvider()Ljavax/validation/ParameterNameProvider; 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:216) 	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:201) 	at org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.configureParameterNameProviderIfPossible(LocalValidatorFactoryBean.java:315) 	at org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.afterPropertiesSet(LocalValidatorFactoryBean.java:284) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1687) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1624) 	... 11 more  ```  The issue is that `LocalValidatorFactoryBean` tries to detect Bean Validation 1.1 using the API interfaces, regardless of what the provider actually implements (See [here](https://github.com/spring-projects/spring-framework/blob/35248498aeb269d280a63ff4c15e4d845408871a/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java#L311-L316) and [here](https://github.com/spring-projects/spring-framework/blob/35248498aeb269d280a63ff4c15e4d845408871a/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java#L94)). And since `Class.getMethod` succeeds, `ReflectionUtils.invokeMethod` throws an `AbstractMethodError`, which is an `Error` and not an `Exception`, so it doesn't get caught by the catch [here](https://github.com/spring-projects/spring-framework/blob/35248498aeb269d280a63ff4c15e4d845408871a/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java#L356).  This could be fixed by explicitly catching `AbstractMethodError` in addition to `Exception`. But I think the correct fix is to call `getMethod` on the provider class instead of the API interfaces.  (The reason I can't simply remove Bean Validation 1.1 from the classpath is that Spring Boot includes it even if `4.3.2.Final` is set in pom.xml. We also faced the same issue when deploying to a Java EE container that implements Bean Validation 1.1.)  This is only an issue for Spring 4.x. Spring 5 will make Bean Validation 1.1 mandatory.  To reproduce: pom.xml  ```  	4.0.0 	com.example 	demo 	0.0.1-SNAPSHOT  	 		1.8 		1.8 	  	 		 			org.springframework 			spring-context 			4.3.10.RELEASE 		 		 			javax.validation 			validation-api 			1.1.0.Final 		 		 			org.hibernate 			hibernate-validator 			4.3.2.Final 		 	  ```  src/main/java/demo/Demo.java  ``` package demo;  import javax.validation.Validator;  import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;  public class Demo { 	public static void main(String[] args) { 		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Demo.class); 		Validator validator = context.getBean(Validator.class); 		System.out.println(validator);  		context.close(); 	}  	@Bean 	public LocalValidatorFactoryBean localValidatorFactoryBean() { 		LocalValidatorFactoryBean localValidatorFactoryBean = new LocalValidatorFactoryBean();  		return localValidatorFactoryBean; 	} } ```  ---  **Affects:** 4.3.10  **Issue Links:** - #20362 Follow-up: AbstractMethodError when calling validated method of MethodValidationPostProcessor is using a `@Lazy` validator - #20470 Error on type argument constraint validation failure  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d0399ac02d3532bd09daf46bf9a5022bae0d15f","closed","in: core,","spring-projects-issues","2017-08-09T10:37:10Z","2019-01-13T05:15:10Z"
"","20522","Spring EL does not support equal comparator between String and Integer [SPR-15970]","**[huangqingwei](https://jira.spring.io/secure/ViewProfile.jspa?name=hqw19881118)** opened **[SPR-15970](https://jira.spring.io/browse/SPR-15970?redirect=false)** and commented  Step1. I create a String and Integer Comparator as Follows:  ```java public class StringAndIntegerComparator extends StandardTypeComparator {     @Override     public boolean canCompare(Object o, Object o1) {         if ((o instanceof String && o1 instanceof Integer) || (o1 instanceof String && o instanceof Integer)) {             return true;         } else {             return super.canCompare(o, o1);         }     }      @Override     public int compare(Object o, Object o1) throws EvaluationException {         if ((o instanceof String && o1 instanceof Integer) || (o1 instanceof String && o instanceof Integer)) {             return stringAndIntegercompare(o, o1);         } else {             return super.compare(o, o1);         }     }      private int stringAndIntegercompare(Object o, Object o1) {         Integer oi;         if (o instanceof String) {             oi = Integer.parseInt((String) o);         } else {             oi = (Integer) o;         }          Integer oi1;         if (o1 instanceof String) {             oi1 = Integer.parseInt((String) o1);         } else {             oi1 = (Integer) o1;         }         if (oi > oi1) {             return 1;         }         else if (oi < oi1) {             return -1;         }         else {             return 0;         }     } } ```  Step 2. I write a TestComparator using the upper Comparator:  ```java public void testComparator() {         ExpressionParser parser = new SpelExpressionParser();         StandardEvaluationContext context = new StandardEvaluationContext();         context.setTypeComparator(new StringAndIntegerComparator());          Expression expression = parser.parseExpression(""'123' >= 123"");         Assert.assertTrue(expression.getValue(context, Boolean.class)); // true          expression = parser.parseExpression(""'123' == 123"");         Assert.assertTrue(expression.getValue(context, Boolean.class)); // false     } ```  So, what I expect is a true of ""'123' == 123"", but I get false. Thanks.   ---  **Affects:** 4.3.9","open","in: core,","spring-projects-issues","2017-09-18T08:41:12Z","2019-01-11T18:08:28Z"
"","20764","Make annotation of param can be inherited [SPR-16216]","**[higan](https://jira.spring.io/secure/ViewProfile.jspa?name=higan)** opened **[SPR-16216](https://jira.spring.io/browse/SPR-16216?redirect=false)** and commented   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1600","closed","status: superseded,","spring-projects-issues","2017-11-20T07:09:25Z","2022-02-18T20:38:43Z"
"","21030","Doc: AbstractMessageListenerContainer rejecting messages on shutdown causes message loss in AUTO_ACK mode [SPR-16487]","**[hezhou](https://jira.spring.io/secure/ViewProfile.jspa?name=hezhou66)** opened **[SPR-16487](https://jira.spring.io/browse/SPR-16487?redirect=false)** and commented  The property acceptMessagesWhileStopping in AbstractMessageListenerContainer has defult value false, which will reject messages when shutdown and causes message lossing for AUTO_ACK.   But JMS1.1 tutorial section 4.5.2 specify : The result of a listener throwing a RuntimeException depends on the session's acknowledgment mode. • AUTO_ACKNOWLEDGE - the message will be immediately redelivered. The number of times a JMS provider will redeliver the same message before giving up is provider dependent.   ---  **Affects:** 4.3.14  **Attachments:** - [log.png](https://jira.spring.io/secure/attachment/25383/log.png) (_70.34 kB_) - [sampleCode.png](https://jira.spring.io/secure/attachment/25382/sampleCode.png) (_47.36 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d60446a4feec189a1637c3d8f69e1502582df5bf, https://github.com/spring-projects/spring-framework/commit/95f7180298337ec9f140d4f6bb81ffd0e0e1dff2  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: task,","spring-projects-issues","2018-02-12T08:47:02Z","2018-02-19T12:19:21Z"
"","20469","EnableAsync prevents EnableCaching from working in self-injection scenarios [SPR-15915]","**[Henri Tremblay](https://jira.spring.io/secure/ViewProfile.jspa?name=henri.tremblay)** opened **[SPR-15915](https://jira.spring.io/browse/SPR-15915?redirect=false)** and commented  If I use `@Async` and `@CacheEvict` on the same class, calling the method with `@CacheEvict` directly won't evict anymore.  Let's say I have the following class.  ```java public class MyClass {    private CountDownLatch latch;   private MyClass meWithAProxy;    @Autowired   ApplicationContext applicationContext;    @PostConstruct   public void init() {     meWithAProxy = applicationContext.getBean(MyClass.class);   }    public CountDownLatch getLatch() {     return latch;   }    public void setLatch(CountDownLatch latch) {     this.latch = latch;   }    @Async   public void function1() {     meWithAProxy.anotherFunction(123);      if(latch != null) {       latch.countDown();     }   }    @CacheEvict(cacheNames = ""cache"", key = ""#testId"")   public List anotherFunction(int testId) {     return Collections.emptyList();   }  } ```  And I then use it like that:  ```java @Configuration @EnableCaching @EnableAsync public class App {    public static void main(String[] args) throws InterruptedException {     ApplicationContext context = new AnnotationConfigApplicationContext(App.class);     CacheManager cacheManager = context.getBean(CacheManager.class);     Cache cache = cacheManager.getCache(""cache"");      MyClass myClass = context.getBean(MyClass.class);      cache.put(123, ""test""); // value to evict      myClass.setLatch(new CountDownLatch(1));     myClass.function1(); // this is correctly called asynchronously     myClass.getLatch().await();     assertThat(cache.get(123)).describedAs(""Reentrant call failed"").isNull(); // and the value is evicted as expected      cache.put(1, ""test""); // new value to evict     assertThat(cache.get(1)).isNotNull();      myClass.anotherFunction(1); // direct call     assertThat(cache.get(1)).describedAs(""Direct call failed"").isNull(); // fails!   }    @Bean   public MyClass myClass() {     return new MyClass();   }    @Bean   public TaskExecutor taskExecutor() {     return new SimpleAsyncTaskExecutor();   }    @Bean   public CacheManager cacheManager() {     javax.cache.CacheManager cacheManager = Caching.getCachingProvider().getCacheManager();     cacheManager.createCache(""cache"", new MutableConfiguration<>().setStoreByValue(false));     return new JCacheCacheManager(cacheManager);   } } ```  For some reason, the cache interceptor is not there. It seems that the Advisors with the cache are replaced by the async ones but I don't know why.  ---  **Affects:** 4.3.10  **Reference URL:** https://stackoverflow.com/questions/45938279/cache-not-refreshing-when-being-called-from-a-asynchrounous-function-in-spring/45963494#45963494  **Issue Links:** - #18488 Scheduled method is not invoked via proxy","open","in: core,","spring-projects-issues","2017-08-30T15:06:10Z","2019-01-11T18:11:28Z"
"","21050","With two-way-ssl exchange.getRequest().getSslInfo() always null [SPR-16507]","**[Henning Vogt](https://jira.spring.io/secure/ViewProfile.jspa?name=vogthenn)** opened **[SPR-16507](https://jira.spring.io/browse/SPR-16507?redirect=false)** and commented  Affected spring-boot configurations: Tomcat or Jetty Embedded (netty works) If using two-way-ssl, the getSslInfo() is always null due to apparently wrong attribute used.  The spec notes a different attribute that contains the x509Certificate (see below)  class org.springframework.http.server.reactive.ServletServerHttpRequest, in method initSslInfo()  Instead of java.security.cert.X509Certificate it should read the attribute javax.servlet.request.X509Certificate to return the certificate. This is statet here https://tomcat.apache.org/tomcat-8.5-doc/servletapi/javax/servlet/ServletRequest.html and https://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html  I think it's safe, just to rename this, since the spec says it, and I had the problem in real life, too. Don't know where the initial property came from, see reference URL.  ---  **Affects:** 5.0.3  **Reference URL:** #20516  **Issue Links:** - #21382 ""Want"" two-way-ssl not containing SSL-Certificate is not checkable due to contract violation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dcf5c646be66b9882335f1780313aa7775e46100","closed","type: bug,","spring-projects-issues","2018-02-16T09:03:55Z","2019-01-14T04:32:12Z"
"","20520","Using @Autowired Environment doesn't work [SPR-15968]","**[Helder Sousa](https://jira.spring.io/secure/ViewProfile.jspa?name=htmsousa)** opened **[SPR-15968](https://jira.spring.io/browse/SPR-15968?redirect=false)** and commented  Hi,  I'm not sure if this is similar to #18258 but when we have something like the following setup, the ""env"" is null when creating bean `ServiceA`, but it is not null while creating `ServiceB`. Note that `ServiceB` bean is being created before `ServiceA` bean because of the `@Import(ConfigB.class)` in `ConfigA`  ```java @Configuration @Import(ConfigB.class) public class ConfigA {     @Autowired     Environment env;      @Bean     public static PropertySourcesPlaceholderConfigurer propertyPlaceHolderConfigurer() {         return new PropertySourcesPlaceholderConfigurer();     }      @Bean     public ServiceA serviceA() {         return new ServiceA(env.getProperty(""myPropertyA""));     } }  @Configuration public class ConfigB {     @Autowired     Environment env;      @Bean     public ServiceB serviceB(ServiceA serviceA) {         return new ServiceB(serviceA, env.getProperty(""myPropertyB""));     } }  ```  Everything works fine if the interface `EnvironmentAware` is implemented by `ConfigA`. Is this a known limitation or should it work?   ---  **Affects:** 4.3.10","closed","in: core,","spring-projects-issues","2017-09-15T15:06:13Z","2022-02-18T20:34:51Z"
"","20778","HttpWebHandlerAdapter should log helpful information when response is committed [SPR-16231]","**[Haug Bürger](https://jira.spring.io/secure/ViewProfile.jspa?name=pinus)** opened **[SPR-16231](https://jira.spring.io/browse/SPR-16231?redirect=false)** and commented  I'm not sure if this is the right component. I use the spring boot 2.0.0-SNAPSHOT and get the appended exception. Be aware that I set the timeout to a value that it fails.  This produces a java.io.IOException: Broken pipe exception and a java.lang.UnsupportedOperationException.  I assumed to get no exception because I implemented onErrorResume() but this might be wrong. But getting a UnsupportedOperationException from UnmodifiableMap seems to be a bug.  ``` @Service public class SimpleEndpoint {      WebClient client() {         WebClient.builder()                 .defaultHeader(""Bearer"", ""&%&/())=)==="")                 .build();         return WebClient.create(""http://localhost:8080"");     }      public Mono getLocation(String id) {         return client().get()                 .uri(""/simple/{id}"", id)                 .exchange()                 .timeout(Duration.ofMillis(55))                 .flatMap(clientResponse -> {                     System.out.println(""code=""+clientResponse.statusCode().value()+"", simple-"" + id);                     return clientResponse.bodyToMono(String.class);                 })                 .onErrorResume(ex -> Mono.just(""DEFAULT""))                 .doOnError(ex -> {                     System.out.println("">>> "" + ex.getMessage());                 });     } } ```  ``` java.lang.UnsupportedOperationException: null 	at java.util.Collections$UnmodifiableMap.put(Collections.java:1457) ~[na:1.8.0_151] 	at org.springframework.http.HttpHeaders.set(HttpHeaders.java:1439) ~[spring-web-5.0.2.BUILD-20171123.211328-85.jar:5.0.2.BUILD-SNAPSHOT] 	at org.springframework.http.HttpHeaders.setContentType(HttpHeaders.java:849) ~[spring-web-5.0.2.BUILD-20171123.211328-85.jar:5.0.2.BUILD-SNAPSHOT] 	at org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler.write(AbstractErrorWebExceptionHandler.java:235) ~[spring-boot-autoconfigure-2.0.0.BUILD-20171124.121129-239.jar:2.0.0.BUILD-SNAPSHOT] 	at org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler.lambda$handle$1(AbstractErrorWebExceptionHandler.java:228) ~[spring-boot-autoconfigure-2.0.0.BUILD-20171124.121129-239.jar:2.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118) [reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1092) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1649) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) [reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1649) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1463) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1337) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators.complete(Operators.java:125) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185) [reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:100) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators.error(Operators.java:175) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:129) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE]@Service public class SimpleEndpoint {      WebClient client() {         WebClient.builder()                 .defaultHeader(""Bearer"", ""&%&/())=)==="")                 .build();         return WebClient.create(""http://localhost:8080"");     }      public Mono getLocation(String id) {         return client().get()                 .uri(""/simple/{id}"", id)                 .exchange()                 .timeout(Duration.ofMillis(55))                 .flatMap(clientResponse -> {                     System.out.println(""code=""+clientResponse.statusCode().value()+"", simple-"" + id);                     return clientResponse.bodyToMono(String.class);                 })                 .onErrorResume(ex -> Mono.just(""DEFAULT""))                 .doOnError(ex -> {                     System.out.println("">>> "" + ex.getMessage());                 });     } }  	at org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.onError(ChannelSendOperator.java:339) ~[spring-web-5.0.2.BUILD-20171123.211328-85.jar:5.0.2.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1332) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1135) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onError(MonoIgnoreThen.java:300) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.ipc.netty.FutureMono$FutureSubscription.operationComplete(FutureMono.java:159) ~[reactor-netty-0.7.2.RELEASE.jar:0.7.2.RELEASE] 	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:507) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:481) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:420) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:113) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.channel.DefaultChannelPromise.setFailure(DefaultChannelPromise.java:87) ~[netty-transport-4.1.17.Final.jar:4.1.17.Final] 	at reactor.ipc.netty.channel.ChannelOperationsHandler$PublisherSender.operationComplete(ChannelOperationsHandler.java:644) ~[reactor-netty-0.7.2.RELEASE.jar:0.7.2.RELEASE] 	at reactor.ipc.netty.channel.ChannelOperationsHandler$PublisherSender.operationComplete(ChannelOperationsHandler.java:477) ~[reactor-netty-0.7.2.RELEASE.jar:0.7.2.RELEASE] 	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:507) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:481) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:420) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:163) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:93) ~[netty-transport-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:28) ~[netty-transport-4.1.17.Final.jar:4.1.17.Final] 	at reactor.ipc.netty.channel.ChannelOperationsHandler$PublisherSender.onComplete(ChannelOperationsHandler.java:550) ~[reactor-netty-0.7.2.RELEASE.jar:0.7.2.RELEASE] 	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onComplete(ChannelSendOperator.java:200) ~[spring-web-5.0.2.BUILD-20171123.211328-85.jar:5.0.2.BUILD-SNAPSHOT] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:138) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:93) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(ChannelSendOperator.java:143) ~[spring-web-5.0.2.BUILD-20171123.211328-85.jar:5.0.2.BUILD-SNAPSHOT] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:68) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:76) ~[spring-web-5.0.2.BUILD-20171123.211328-85.jar:5.0.2.BUILD-SNAPSHOT] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) [reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1092) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1092) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:290) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1092) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144) [reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1092) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:258) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1649) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1463) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1337) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoZip$ZipCoordinator.subscribe(MonoZip.java:180) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:126) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) [reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1649) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1463) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1337) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) ~[reactor-core-3.1.2.RELEASE.jar:3.1.2.RELEASE] 	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:383) ~[reactor-netty-0.7.2.RELEASE.jar:0.7.2.RELEASE] 	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359) ~[reactor-netty-0.7.2.RELEASE.jar:0.7.2.RELEASE] 	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463) ~[netty-transport-4.1.17.Final.jar:4.1.17.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) ~[netty-common-4.1.17.Final.jar:4.1.17.Final] 	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_151] ```    ---  **Affects:** 5.0.2  **Attachments:** - [example.zip](https://jira.spring.io/secure/attachment/25305/example.zip) (_54.87 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc3d8340262527a0182ad72c7b756e8d9c555c32, https://github.com/spring-projects/spring-framework/commit/dd0d270ba26e163d41fd2b06e1ea13afe1ca6aac","closed","type: enhancement,","spring-projects-issues","2017-11-24T15:51:26Z","2018-01-23T10:05:12Z"
"","20653","Add support for MockRestServiceServer to verify multipart request [SPR-16105]","**[Haruki Okada](https://jira.spring.io/secure/ViewProfile.jspa?name=ocadaruma)** opened **[SPR-16105](https://jira.spring.io/browse/SPR-16105?redirect=false)** and commented  It would be useful to add RequestMatcher to verify multipart/form-data request.  Such as:  ```java // in MockRestRequestMatchers public static RequestMatcher multipart(final MultiValueMap items) { 	// assert equality } ```  I would like to submit a pull request later.   ---  1 votes, 5 watchers","closed","status: superseded,","spring-projects-issues","2017-10-24T07:27:32Z","2019-11-08T10:08:22Z"
"","20452","ResourceEncodingUrlFilter is not working with standalone tomcat container [SPR-15898]","**[Harpreet Sandhu](https://jira.spring.io/secure/ViewProfile.jspa?name=harpreetsandhu)** opened **[SPR-15898](https://jira.spring.io/browse/SPR-15898?redirect=false)** and commented  I'm configuring it in for* caching of static resources with content based version strategy* . It's working perfectly in embedded tomcat container but not working in standalone tomcat. As per documentation, thymeleaf also use _encodeUrl method_ to encode urls from thymeleaf expresssion (th:ref, th:src).  But in stand alone tomcat it's not encoding urls  ```java public class WebMvcConfig extends WebMvcConfigurerAdapter {     @Bean     public ResourceUrlEncodingFilter urlEncodingFilter(){         return new ResourceUrlEncodingFilter();     }      @Override     public void addResourceHandlers(ResourceHandlerRegistry registry) {         registry.addResourceHandler(""/resources/**"")                 .addResourceLocations(""/resources/"")                 .setCacheControl(                         CacheControl.empty()                         .sMaxAge(7, TimeUnit.DAYS))         .resourceChain(false)         .addResolver(new VersionResourceResolver().addContentVersionStrategy(""/**""));     } } ```    --- No further details from [SPR-15898](https://jira.spring.io/browse/SPR-15898?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-08-24T09:21:59Z","2019-01-12T05:20:26Z"
"","20536","Doc: ReloadableResourceBundleMessageSource's setUseCodeAsDefaultMessage causes the ValidationMessages.properties to not be found and used correctly [SPR-15986]","**[Happy](https://jira.spring.io/secure/ViewProfile.jspa?name=happyb)** opened **[SPR-15986](https://jira.spring.io/browse/SPR-15986?redirect=false)** and commented  There are a few issues with using ```java ReloadableResourceBundleMessageSource  ```  1)Hibernate ValidationMessages.properties is not discovered   When injecting a new ```java ReloadableResourceBundleMessageSource ``` into   ```java    @Bean   public SpringValidatorAdapter springValidatorAdapterFactory()   {     LocalValidatorFactoryBean springValidatorAdapter = new LocalValidatorFactoryBean();     springValidatorAdapter.setValidationMessageSource(messageSource);// <-- here     return springValidatorAdapter;   } ```  then the messages from teh hibernate ValidationMessages.properties are picked and displayed accurately.  When I use ```java ReloadableResourceBundleMessageSource  ```as an injection from the following  ```java     @Bean   public MessageSource messageSource()   {     ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();     messageSource.setBasenames(MESSAGE_SOURCE_BASE_NAMES); //path to i18n/messages     messageSource.setUseCodeAsDefaultMessage(true);     messageSource.setDefaultEncoding(UTF8_ENCODING);     messageSource.setFallbackToSystemLocale(false);     messageSource.setCacheSeconds((int) TimeUnit.HOURS.toSeconds(1));     return messageSource;   } ```  the ValidationMessages.properties file is never scanned.  However, when I set the following to false, comment from the above  ```java // messageSource.setUseCodeAsDefaultMessage(true); ```  The ValidationMessages.properties from hibernate is correctly loaded.  I wouldn't have thought UseCodeAsDefaultMessage would cause this problem. But it does. I have also faced problems as discussed in https://stackoverflow.com/q/23448360/1083581 and commenting out useCodeAsDefaultMessage has fixed errors. It however exposes my app to show errors when message codes aren't found. I am using 4.3.4-RELEASE of spring-context.   ---  **Affects:** 4.3.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37ab8a700bd790ed9428a0c707ded7766f674772, https://github.com/spring-projects/spring-framework/commit/ce9402618c0a8cf7d0ec03e8a2fe8da41d8b5748  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2017-09-21T06:13:59Z","2018-02-19T12:19:20Z"
"","20987","Support W3C Push API [SPR-16441]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-16441](https://jira.spring.io/browse/SPR-16441?redirect=false)** and commented  With the rising succes of progressive web apps there should be server sided support for push notifications: * support the W3C Push API (https://tools.ietf.org/html/draft-ietf-webpush-protocol-12) * support VAPID keys. * support GCM keys.    ---  **Affects:** 5.0.3","closed","status: declined,","spring-projects-issues","2018-01-31T07:15:20Z","2020-04-01T14:22:04Z"
"","20831","Allow to inject enum with package visibility [SPR-16284]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-16284](https://jira.spring.io/browse/SPR-16284?redirect=false)** and commented  A class with package visibility can be injected in a bean. An enum can only be injected if it has public visibility. Given a class  ``` class MyClass {   private final String value;   public MyClass(String value) {     this.value = value;   }	 } ```  an enum  ``` enum MyEnum {   VALUE } ```  a bean class  ``` class MyBean {   private final MyClass myClass;   private final MyEnum myEnum;   public MyBean(MyClass myClass, MyEnum myEnum) {     this.myClass = myClass;     this.myEnum = myEnum;   } } ```  and following bean definition:  ```         ```  you get an exception:java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'enumproblem.MyEnum': no matching editors or conversion strategy found  When you change the visibility of the enum to public, the exception dissapears.  ---  **Affects:** 5.0.2  **Reference URL:** https://github.com/desmethans/enumproblem1.git  **Issue Links:** - #20825 BeanUtils.isSimpleValueType() returns false for enums overriding a method  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4bb837582e7bf4cac4efb0877432652e1fda9297, https://github.com/spring-projects/spring-framework/commit/9beb97880fe1668f59fbc9715739357c130b0522  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-12-11T09:04:44Z","2019-01-11T15:13:58Z"
"","20806","Let the DataBinder use the parametrized constructor of a nested object [SPR-16259]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-16259](https://jira.spring.io/browse/SPR-16259?redirect=false)** and commented  Since Spring 5, the `DataBinder` can use the parametrized constructor to populate the command object upon form submission, which is a great improvement.  It would be nice and handy if the `DataBinder` could also use the parametrized constructor on nested objects of the command object.  When using following class for the command object:  ```java public class Line { 	private final Point point1; 	private final Point point2; 	public Line(Point point1, Point point2) { 		this.point1 = point1; 		this.point2 = point2; 	} 	public Point getPoint1() { 		return point1; 	} 	public Point getPoint2() { 		return point2; 	}	 } ```  which has following class for the nested object:  ```java public class Point { 	private final int x; 	private final int y; 	public Point(int x, int y) { 		this.x = x; 		this.y = y; 	} 	public int getX() { 		return x; 	} 	public int getY() { 		return y; 	} } ```  upon form submission an Exception occurs:  ``` Invalid property 'point1' of bean class [be.vdab.entities.Line]: Could not instantiate property type [be.vdab.valueobjects.Point] to auto-grow nested property path; nested exception is java.lang.NoSuchMethodException: be.vdab.valueobjects.Point.\() ```  ---  **Affects:** 5.0.2","open","type: enhancement,","spring-projects-issues","2017-12-04T09:44:17Z","2021-05-24T18:13:11Z"
"","20789","add a method queryForObject(java.lang.String sql, java.lang.Class requiredType) to NamedParameterJdbcTemplate [SPR-16242]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-16242](https://jira.spring.io/browse/SPR-16242?redirect=false)** and commented  The JdbcTemplate class has a method queryForObject(java.lang.String sql, java.lang.Class\ requiredType), which is handy when the SQL statement has no parameters. Example:  ``` jdbcTemplate.queryForObject(""select count(*) from clients"", Long.class); ```  The NamedParameterJdbcTemplate does not have such a method, so you must use another version of the method, which leads to a longer less readable example:  ``` namedParameterJdbcTemplate.queryForObject(""select count(*) from clients"", Collections.emptyMap(),Long.class); ```    --- No further details from [SPR-16242](https://jira.spring.io/browse/SPR-16242?redirect=false)","open","in: data,","spring-projects-issues","2017-11-29T14:05:42Z","2019-01-11T13:29:04Z"
"","20788","Creating a SimpleJdbcInsert from a NamedParameterJdbcTemplate [SPR-16241]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-16241](https://jira.spring.io/browse/SPR-16241?redirect=false)** and commented  For the moment there is a constructor SimpleJdbcInsert(JdbcTemplate jdbcTemplate). If you would add a constructor SimpleJdbcInsert(NamedParameterJdbcTemplate namedParameterJdbcTemplate) this would be handy if you only inject a NamedParameterJdbcTemplate bean in your repository bean, not a JdbcTemplate bean.  ---  **Affects:** 5.0.2  **Issue Links:** - #20599 Customize PreparedStatementCreatorFactory in getPreparedStatementCreator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b55a2631ba07beb143d30563e9b72c364a6e473a","closed","type: enhancement,","spring-projects-issues","2017-11-29T12:43:36Z","2019-01-11T13:29:02Z"
"","20596","AbstractMessageSource does not properly interact with DelegatingMessageSource parent [SPR-16047]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-16047](https://jira.spring.io/browse/SPR-16047?redirect=false)** and commented  Given following Initializer:  ``` package be.vdab.web;  import javax.servlet.Filter; import org.springframework.web.filter.CharacterEncodingFilter; import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer; import be.vdab.test.TestConfig;   public class Initializer extends AbstractAnnotationConfigDispatcherServletInitializer { 	@Override 	protected String[] getServletMappings() { 		return new String[] { ""/"" }; 	}  	@Override 	protected Class[] getRootConfigClasses() { 		return new Class[] { TestConfig.class }; 		//return null; 	}  	@Override 	protected Class[] getServletConfigClasses() { 		return new Class[] { ControllersConfig.class }; 	}  	@Override 	protected Filter[] getServletFilters() { 		return new Filter[] { new CharacterEncodingFilter(""UTF-8"") }; 	} } ```  and following Controllers config:  ``` package be.vdab.web;  import org.springframework.context.MessageSource; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.support.ReloadableResourceBundleMessageSource; import org.springframework.web.servlet.config.annotation.EnableWebMvc; import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;  @Configuration @EnableWebMvc @ComponentScan public class ControllersConfig extends WebMvcConfigurerAdapter {  	@Bean 	MessageSource messageSource() { 		ReloadableResourceBundleMessageSource source = new ReloadableResourceBundleMessageSource(); 		source.setBasename(""classpath:messages""); 		source.setFallbackToSystemLocale(false); 		return source; 	} } ```  and following Java config  ``` package be.vdab.test;  import org.springframework.context.annotation.Configuration;  @Configuration public class TestConfig {  } ```  and following controller:  ``` package be.vdab.web;  import org.springframework.stereotype.Controller; import org.springframework.validation.BindingResult; import org.springframework.validation.DataBinder; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.InitBinder; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView;  @Controller @RequestMapping(""/"") class IndexController {  	private static final String VIEW = ""/WEB-INF/JSP/index.jsp"";  	@GetMapping 	ModelAndView findByPostcodeReeks() { 		CommandObject reeks = new CommandObject(); 		return new ModelAndView(VIEW).addObject(reeks); 	}  	@GetMapping(params = { ""value"" }) 	ModelAndView findByPostcodeReeks(CommandObject reeks, BindingResult bindingResult) { 		ModelAndView modelAndView = new ModelAndView(VIEW); 		return modelAndView; 	}  	@InitBinder(""commandObject"") 	void initBinderPostcodeReeks(DataBinder dataBinder) { 		dataBinder.setRequiredFields(""value""); 	} } ```  and following Command object class  ``` package be.vdab.web;  public class CommandObject { 	private String value; 	public String getValue() { 		return value; 	}  	public void setValue(String value) { 		this.value = value; 	} } ```  and following index.jsp  ``` <%@page contentType='text/html' pageEncoding='UTF-8' session='false'%> <%@taglib prefix='form' uri='http://www.springframework.org/tags/form'%>      Test    Test            ```  when you run the webapp, leave the field empty and submit the form, you don't see the error message. The problem is solved in three different ways: 1. comment the MessageSource bean in ControllersConfig 2. comment the line    return new Class[] { TestConfig.class }; in Initialzer and uncomment the line return null; 3. Downgrade the webapp to Spring 4.3.11  A project to show the problem is at https://github.com/desmethans/formerrorstag.git  ---  **Affects:** 5.0 GA  **Reference URL:** https://github.com/desmethans/formerrorstag.git  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API - #20675 AbstractMessageSource does not support null as default message anymore  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c3378fda33474e1b4c40d12eb725fb5e2b3d36fe","closed","type: regression,","spring-projects-issues","2017-10-05T07:28:05Z","2019-01-11T13:12:51Z"
"","20586","Command object does not work anymore [SPR-16037]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-16037](https://jira.spring.io/browse/SPR-16037?redirect=false)** and commented  Given a simple command object  ```java package be.vdab.web;  public class CommandObject { 	private String value;  	public String getValue() { 		return value; 	}  	public void setValue(String value) { 		this.value = value; 	} 	 } ```  , a Controller which uses this command object:  ```java package be.vdab.web;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView;  @Controller @RequestMapping(""/"") class IndexController { 	private static final String VIEW = ""index"";  	@GetMapping 	ModelAndView index() { 		return new ModelAndView(VIEW).addObject(new CommandObject()); 	} 	 } ```  and a JSP file which works together with this controller:  ```html <%@page contentType='text/html' pageEncoding='UTF-8' session='false'%>    Test   <%@taglib prefix='form' uri='http://www.springframework.org/tags/form'%>      ```  This gives following error in Spring 5.0.0 (not in Spring 4.3.11):  ``` org.apache.jasper.JasperException: /WEB-INF/JSP/index.jsp (line: [9], column: [0]) Unable to find setter method for attribute: [commandName] ```  ---  **Affects:** 5.0 GA  **Reference URL:** https://github.com/desmethans/commandObjectError.git","closed","status: invalid,","spring-projects-issues","2017-10-03T13:01:10Z","2021-01-03T19:44:32Z"
"","20891","server.ssl.client-auth property is not honored [SPR-16344]","**[Gurprit Singh Johal](https://jira.spring.io/secure/ViewProfile.jspa?name=gjohal)** opened **[SPR-16344](https://jira.spring.io/browse/SPR-16344?redirect=false)** and commented  Looks like SslServerCustomizer is not setting clientAuth in SslContextBuilder and configured _server.ssl.client-auth_ property is not honored.   ---  **Affects:** 5.0.2","closed","status: invalid,","spring-projects-issues","2018-01-03T17:00:29Z","2019-01-12T05:19:36Z"
"","20882","DispatcherHandler getting called with delay, resulting into overall low throughput [SPR-16335]","**[Gurprit Singh Johal](https://jira.spring.io/secure/ViewProfile.jspa?name=gjohal)** opened **[SPR-16335](https://jira.spring.io/browse/SPR-16335?redirect=false)** and commented  There seems to be delay (> 100ms) in calling DispatcherHandler which is resulting into low throughput. Please  see below log excerpt:  [DEBUG] 30:38.617 [reactor-http-nio-7] ChannelOperations - [HttpServer] [id: 0xcdd6aaab, L:/0:0:0:0:0:0:0:1:8080 - R:/0:0:0:0:0:0:0:1:57300] handler is being applied: org.springframework.http.server.reactive.ReactorHttpHandlerAdapter@4bb5ce09 [DEBUG] 30:38.755 [parallel-2] DispatcherHandler - Processing POST request for http://localhost:8080/api/v1/assets   ---  **Affects:** 5.0.2","closed","status: declined,","spring-projects-issues","2017-12-30T15:22:59Z","2019-01-12T16:21:57Z"
"","21091","Improve docs and handling of send errors in ResponseBodyEmitter [SPR-16548]","**[Guido](https://jira.spring.io/secure/ViewProfile.jspa?name=jodiug)** opened **[SPR-16548](https://jira.spring.io/browse/SPR-16548?redirect=false)** and commented  ### Problem  When using SseEmitter and closing tabs in the browser, the `onComplete` and `onError` callbacks are not called for every subscription.  Code to subscribe:  ```java     SseEmitter emitter = new SseEmitter(sseTimeoutMs);      Consumer subscription = message -> {       SseEventBuilder event = SseEmitter.event().name(""message"").data(message);       trySend(emitter, event);     };      subscriptions.add(subscription);     System.out.println(""Subscription added: there are "" + subscriptions.size() + "" subscribers"");      emitter.onCompletion(() -> {       subscriptions.remove(subscription);       System.out.println(""Subscription completed: there are "" + subscriptions.size() + "" subscribers"");     });     emitter.onError(error -> {       subscriptions.remove(subscription);       System.out.println(""Subscription crashed: there are "" + subscriptions.size() + "" subscribers"");     });     emitter.onTimeout(() -> {       subscriptions.remove(subscription);       System.out.println(""Subscription timed out: there are "" + subscriptions.size() + "" subscribers"");     }); ```  Note that an SSE stream is not supposed to know when it is terminated. Only when a message fails to be sent, can the stream be closed. This is what I tried to do.  ``` private void trySend(SseEmitter emitter, SseEmitter.SseEventBuilder event) {   try {     emitter.send(event);   } catch (Exception ex) {     // This is normal behavior when a client disconnects.     try {       emitter.completeWithError(ex);       System.out.println(""Marked SseEmitter as complete with an error."");     } catch (Exception completionException) {       System.out.println(""Failed to mark SseEmitter as complete on error."");     }   } } ```  See below for the output log. I observe that when a `send` call fails, the SseEmitter is not terminated correctly. In addition, it's not possible to mark it as terminated by hand. The `completeWithError` call succeeds in one case and fails in another, but neither call seem to register with the `onComplete` or `onError` listeners.  Is this a bug? What is the proper way to implement an SseEmitter?  ### Steps to reproduce  1. Clone the git repo below 2. Start the application 3. Open `localhost:8088` in four tabs, then close the first three 4. After the tab is complete (1 minute), close the last tab 5. Log should indicate the following  ``` Subscription added: there are 1 subscribers Subscription added: there are 2 subscribers Subscription added: there are 3 subscribers Subscription added: there are 4 subscribers Marked SseEmitter as complete with an error. Marked SseEmitter as complete with an error. Failed to mark SseEmitter as complete on error. Subscription added: there are 5 subscribers Subscription added: there are 6 subscribers Subscription completed: there are 5 subscribers Subscription completed: there are 4 subscribers Subscription completed: there are 3 subscribers Subscription timed out: there are 2 subscribers Subscription completed: there are 2 subscribers ```  ### Resources  - Minimal example on https://github.com/Oduig/connectionleak/tree/sse-emitter-leak  ---  **Issue Links:** - #20173 Handle onError events that are sent by the servlet containers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/568c93457a8487b34381386f06a55e0f22432e9a, https://github.com/spring-projects/spring-framework/commit/e20652009dca44363e7296c7bf7510def391885f","closed","type: enhancement,","spring-projects-issues","2018-03-03T15:31:40Z","2019-01-11T14:34:49Z"
"","20683","Leniently bind ""is"" prefix for boolean properties (along the lines of Jackson) [SPR-16135]","**[gtxx](https://jira.spring.io/secure/ViewProfile.jspa?name=spxx)** opened **[SPR-16135](https://jira.spring.io/browse/SPR-16135?redirect=false)** and commented  I want to bind request parameters to User class instance, and there is a boolean field in User class.  ```java 1. controller class @GetMapping(""/test"") UserBo ttt(User user){         return user; } 1. User.java public class User {     private String username;     private Boolean isActive; } ```  setter for isActive field works only if it's like this:  ```java public void setIsActive(Boolean active) {         isActive = active; } ```  If I use Intellij to generate setter and getter, setter is like this:  ```java public void setActive(Boolean active) {         isActive = active; } ```  with above setter, spring can't bind query parameter isActive to User.isActive.  Jackson can support both setters, I wonder if spring can improve query parameter binding like Jackson.   ---  **Affects:** 4.3.10  **Reference URL:** https://stackoverflow.com/questions/16942193/spring-mvc-complex-object-as-get-requestparam","open","type: enhancement,","spring-projects-issues","2017-10-31T04:05:36Z","2021-11-04T06:01:09Z"
"","20814","Embedded cglib 3.2.5 not closing input streams that read class files [SPR-16267]","**[Gregg Yost](https://jira.spring.io/secure/ViewProfile.jspa?name=yogregg)** opened **[SPR-16267](https://jira.spring.io/browse/SPR-16267?redirect=false)** and commented  cglib 3.2.5, which is currently the latest released cglib version and is the version that Spring embeds in spring-core, has a bug where it calls ClassLoader getResourceAsStream but never closes the stream.  I've reported this cglib problem here: https://github.com/cglib/cglib/issues/115  The bug is in cglib.proxy.BridgeMethodResolver's resolveAll method.  Spring can arrive in that code when a Spring configuration class requires synthetic bridge methods as part of Java's type erasure for generics.  For example, I'm attaching an example to this issue where I have an ApplicationListener class that listens for ContextRefreshedEvents using a generic, like this:  ``` @Configuration public class ListenerSpringConfig implements ApplicationListener {   @Override   public void onApplicationEvent(ContextRefreshedEvent event)   {   } } ```  At web application startup, the presence of that class results in Spring invoking the problematic BridgeMethodResolver code via the path shown in this stack trace:  ``` java.lang.Thread.State: RUNNABLE 	  at org.springframework.cglib.proxy.BridgeMethodResolver.resolveAll(BridgeMethodResolver.java:60) 	  at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:1132) 	  at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:630) 	  at org.springframework.cglib.transform.TransformingClassGenerator.generateClass(TransformingClassGenerator.java:33) 	  at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) 	  at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanFactoryAwareGeneratorStrategy.generate(ConfigurationClassEnhancer.java:252) 	  at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:329) 	  at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:492) 	  at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:93) 	  at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:91) 	  at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54) 	  at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	  at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61) 	  at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) 	  at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:116) 	  at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:291) 	  at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:480) 	  at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:337) 	  at org.springframework.context.annotation.ConfigurationClassEnhancer.createClass(ConfigurationClassEnhancer.java:138) 	  at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:110) 	  at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:393) 	  at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:249) 	  at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:283) 	  at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:127) 	  at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) 	  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) 	  - locked <0x1122> (a java.lang.Object) 	  at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) 	  at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) 	  at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) 	  at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) 	  at org.springframework.boot.web.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:154) 	  at org.springframework.boot.web.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:134) 	  at org.springframework.boot.web.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:87) 	  at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:169) 	  at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5196) 	  - locked <0x1112> (a org.apache.catalina.core.StandardContext) 	  at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	  at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:752) 	  at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:728) 	  at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734) 	  at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:988) 	  at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1860) 	  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) 	  at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	  at java.lang.Thread.run(Thread.java:748) ```  The serious consequence of this bug shows up when my web application is deployed to Tomcat 8.5 on Windows, Tomcat refuses to undeploy the web application -- I have to shut down the entire Tomcat server. This happens because Tomcat's classloader keeps a Windows file lock on jar files when someone has an open input stream on one of the classes in the jar file (such as when opened by classLoader.getResourceAsStream in cglib's BridgeMethodResolver). This is a substantial problem for users of my web application, since they cannot upgrade it without shutting down Tomcat, which often means that users get kicked out of all other web applications that Tomcat is hosting.  To reproduce the problem, unpack the attached spring-locked-file.zip, and run ""mvn package"" in the top-level directory (use Java 8).  It creates two thing: a separate jar file (locked-jar-1.0-SNAPSHOT.jar, built in the ""jar"" subproject) that contains the ListenerSpringConfig class shown above, and a war file (built in the ""war"" subproject) that contains that jar file in its WEB-INF/lib.  The ""mvn package"" will result in a war file named locked-file-1.0-SNAPSHOT.war in war/target.  Deploy that war file in Tomcat 8.5 on Windows.  Wait for the web application to finish deploying, then undeploy the web application.  The application will not undeploy completely, and the deployed war directory will still contain WEB-INF/lib/locked-jar-1.0-SNAPSHOT after the undeployment attempt, because   Tomcat still has the jar file open because of the never-closed InputStream, and Windows does not allow an open file to be deleted.  I tried with both Tomcat 8.5.14 and the most-recent 8.5.23, and the problem occurs with both.  ---  **Affects:** 4.3.9, 4.3.13  **Attachments:** - [spring-locked-file.zip](https://jira.spring.io/secure/attachment/25314/spring-locked-file.zip) (_4.95 kB_)  **Issue Links:** - #20951 Upgrade to ASM 6.0 level (for CGLIB 3.2.6)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4aeca67c4db9b6fe00db52b719d3480a64d59bd5, https://github.com/spring-projects/spring-framework/commit/b2ce98e881d687dbddbf3fdf416aa509d61fa1dc  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","in: core,","spring-projects-issues","2017-12-05T19:34:18Z","2019-01-11T13:28:00Z"
"","20826","Introduce ability to NOT encode URIs with UriTemplate [SPR-16279]","**[Greg Turnquist](https://jira.spring.io/secure/ViewProfile.jspa?name=gregturn)** opened **[SPR-16279](https://jira.spring.io/browse/SPR-16279?redirect=false)** and commented  Spring HATEOAS leverage's Spring Framework's UriTemplate class. However, in certain scenarios, the user provides a URI Template that is already encoded (e.g. `/foo/b%20ar{?x`}). In this scenario, when creating a Spring Framework UriTemplate, the ""%"" gets encoded into%25. And because we wrap this some of our own goodness, it actually gets encoded twice when doing an expand (e.g. `x=>1` in this case).  It would be useful if there was an optional to indicate ""do not encode"", possibly here?  ``` public URI expand(Map uriVariables) {      UriComponents expandedComponents = this.uriComponents.expand(uriVariables);      UriComponents encodedComponents = expandedComponents.encode();      return encodedComponents.toUri(); } ```  A flag here, or an overloaded method to side step encoding would make it possible.  Related issue   ---  **Reference URL:** https://github.com/spring-projects/spring-hateoas/issues/593","closed","type: enhancement,","spring-projects-issues","2017-12-07T16:05:45Z","2018-11-30T17:45:33Z"
"","20471","Introduce header-based WebSessionIdResolver [SPR-15917]","**[Greg Turnquist](https://jira.spring.io/secure/ViewProfile.jspa?name=gregturn)** opened **[SPR-15917](https://jira.spring.io/browse/SPR-15917?redirect=false)** and commented  Create a header-based implementation of WebSessionIdResolver.   ---  **Affects:** 5.0 RC3  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1510, and commits https://github.com/spring-projects/spring-framework/commit/167ddc7cfcc7d96da94454bb8cf2405e7161ee82, https://github.com/spring-projects/spring-framework/commit/c98e01ad1fb12ed791f4c09334b01f7d66e6be99","closed","type: enhancement,","spring-projects-issues","2017-08-30T21:04:45Z","2017-09-11T12:09:49Z"
"","20637","Sharing DataSource Connection with JtaTransactionManager [SPR-16088]","**[Greg Potter](https://jira.spring.io/secure/ViewProfile.jspa?name=gdpotter)** opened **[SPR-16088](https://jira.spring.io/browse/SPR-16088?redirect=false)** and commented  When the HibernateTransactionManager is used, each connection is bound in the TransactionSynchronizationManager. This allows for calls to DataSourceUtils (like in the JdbcTemplate) to use the same connection in the same transaction. For example, if we use Hibernate to perform a query and then use JdbcTemplate in the same transaction (and same datasource) the same connection will be used.  However, this does not happen when using the JTATransactionManager. Instead, JdbcTemplate will open a new connection (after DataSourceUtils does not find one in the TransactionSynchronizationManager) which can result in database locking. For example, if the Hibernate makes an insert (or update, or delete) and then (within the same transaction) the JdbcTemplate tries to alter that same row, then it will lock (and ultimately time out) waiting for the row to no longer be locked.   ---  **Affects:** 4.3.11, 4.3.12, 5.0 GA  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/172","closed","type: enhancement,","spring-projects-issues","2017-10-18T16:07:07Z","2017-10-18T16:19:44Z"
"","20436","HttpComponentsClientHttpRequestFactory setBufferRequestBody(false) problem [SPR-15881]","**[grefen](https://jira.spring.io/secure/ViewProfile.jspa?name=grefen)** opened **[SPR-15881](https://jira.spring.io/browse/SPR-15881?redirect=false)** and commented  when i setBufferRequestBody(false) for HttpComponentsClientHttpRequestFactory;  GsonHttpMessageConverter will close stream in writeInternal method  this will lead ""Attempted write to closed stream"",when write outputstrem after call GsonHttpMessageConverter writeInternal    ---  **Affects:** 4.3.9  **Reference URL:** #15825","closed","in: web,","spring-projects-issues","2017-08-21T03:43:27Z","2019-01-14T04:34:25Z"
"","21056","HTTP OPTIONS response for @RequestMapping should contain OPTIONS consistently [SPR-16513]","**[Graham Cox](https://jira.spring.io/secure/ViewProfile.jspa?name=grahamcox82)** opened **[SPR-16513](https://jira.spring.io/browse/SPR-16513?redirect=false)** and commented  I'll preface this by saying I'm not 100% sure this is really a bug. I can't find anything definitive in the HTTP RFCs as to whether an OPTIONS response should include itself as valid, however is seems unintuitive to not be consistent.  If a controller method doesn't specify it handles any specific HTTP methods, the OPTIONS response includes every possible HTTP method.  If the controller methods do specify that they handle specific HTTP methods, the OPTIONS response only includes these.  This means it's possible to make an OPTIONS request and get a successful response that claims that OPTIONS is not a valid method.  ---  **Affects:** 5.0.3  **Issue Links:** - #17721 Spring should have default support for OPTIONS, HEAD and Allow  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6cf6d8834cbd33ebe8c739cb246cc92153ead619","closed","type: enhancement,","spring-projects-issues","2018-02-17T22:22:04Z","2019-01-11T14:37:48Z"
"","20893","CORS support broken when updating to Spring 5.0.2 [SPR-16346]","**[Graham Cox](https://jira.spring.io/secure/ViewProfile.jspa?name=grahamcox82)** opened **[SPR-16346](https://jira.spring.io/browse/SPR-16346?redirect=false)** and commented  I have an application I'm working on - using Spring Boot 1.5.9.RELEASE and Spring MVC 5.0.1.RELEASE, and the GraphQL Spring Boot Starter. The architecture is to have a backend application running Spring Boot, and a frontend built using Create React App and deployed using Nginx. This all works really well.  I've just been updating version numbers, and the instant I go to Spring MVC 5.0.2.RELEASE instead, everything breaks. And this is because of the CORS headers that are returned.  Using Spring 5.0.1, the browser makes an OPTIONS call to /graphql and gets these headers returned: (With zero configuration)  ``` Access-Control-Allow-Credentials:true Access-Control-Allow-Headers:content-type Access-Control-Allow-Methods:GET,HEAD,POST Access-Control-Allow-Origin:http://localhost:3000 Access-Control-Max-Age:1800 ```  Note the `Access-Control-Allow-Origin`. That is not configured by myself but has been generated by Spring automatically.  Under Spring 5.0.2 I instead get these headers from the exact same call:  ``` Access-Control-Allow-Headers:content-type Access-Control-Allow-Methods:GET,HEAD,POST Access-Control-Allow-Origin:* Access-Control-Max-Age:1800 ```  The notable differences are: * The `Access-Control-Allow-Origin` is now set to ""*"" instead of the actual referrer URL that the request came from * The `Access-Control-Allow-Credentials:true` header is now missing.  This completely breaks my application, just from a micro version update of Spring. And, what's worse, I can't work out what configuration is needed to make it work again.  ---  **Affects:** 5.0.2  **Issue Links:** - #20678 Disable CORS credentials by default","closed","status: declined,","spring-projects-issues","2018-01-04T13:16:47Z","2019-01-12T16:21:55Z"
"","20974","Doc: hibernate.dialect_resolvers vs HibernateJpaVendorAdapter.setDatabase [SPR-16428]","**[Giovanni Lovato](https://jira.spring.io/secure/ViewProfile.jspa?name=heruan)** opened **[SPR-16428](https://jira.spring.io/browse/SPR-16428?redirect=false)** and commented  Hibernate property `hibernate.dialect_resolvers` let specify custom Dialect resolvers if no `hibernate.dialect` is set. I cannot get the property to work with Spring Data JPA and debugging I've found what I guess is the issue, i.e. `HibernateJpaVendorAdapter` at [Line 130](https://github.com/spring-projects/spring-framework/blob/00b95b10a8c93f1bbe6f9b3a873c04e56f1a9ebe/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java#L130) always sets the dialect property and doing so Hibernate will not take into account the `dialect_resolvers` property.  ```java if (getDatabasePlatform() != null) {     jpaProperties.put(AvailableSettings.DIALECT, getDatabasePlatform()); } else {     Class databaseDialectClass = determineDatabaseDialectClass(getDatabase());     if (databaseDialectClass != null) {         jpaProperties.put(AvailableSettings.DIALECT, databaseDialectClass.getName());     } } ```  ---  **Affects:** 4.3.14, 5.0.3  **Issue Links:** - #20972 Deprecate outdated HibernateTemplate operations in favor of lambdas  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e1fa65a37c36a9d81ee6f2f4eeb5e51ae1145a49, https://github.com/spring-projects/spring-framework/commit/f187ca64130180d55c93a3b63ee4b0799cc19e9c  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: task,","spring-projects-issues","2018-01-27T09:45:53Z","2019-01-11T15:37:12Z"
"","20663","javax.activation not available in JDK 9 [SPR-16115]","**[Giovanni Lovato](https://jira.spring.io/secure/ViewProfile.jspa?name=heruan)** opened **[SPR-16115](https://jira.spring.io/browse/SPR-16115?redirect=false)** and commented  In JDK 9 the package `javax.activation` is not accessible by default and should be explicitly granted with `--add-modules java.activation` on compile time. Also, it is deprecated and marked for removal in JDK 10.  The Spring Framework Java Mail API (among others, I suppose) uses the package and projects depending on it fails to compile in JDK 9 with: `cannot access javax.activation.DataSource`.  JavaBeans Activation Framework version 1.2, which is included in JDK 9, should be adopted instead.  (Similar issues apply to JavaEE as well: https://github.com/javaee/javamail/issues/266)   ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a6a6cf7d97c1e2c91fbfdf004abdcb9e133ce901, https://github.com/spring-projects/spring-framework/commit/9bab7a2708d00c6213a22616fd04222bfe0c5912","closed","status: declined,","spring-projects-issues","2017-10-25T14:03:58Z","2019-01-12T16:32:56Z"
"","21123","URIEditor should not double escape classpath: URIs [SPR-16581]","**[Gerhard Bloch](https://jira.spring.io/secure/ViewProfile.jspa?name=blochg)** opened **[SPR-16581](https://jira.spring.io/browse/SPR-16581?redirect=false)** and commented  My Tomcat installation has a space character in the path (installation is provided so I cannot change this). I want to configure my EhCache via JCacheManagerFactoryBean, property cacheManagerUri=classpath:ehcache.xml. The resource URL yields something like ...%20... which is the correct encoding of the space character, but then the default URIEncoder (which is ""encoding"" by default) encodes the percent sign and I end up with a URI like ...%2520... which does not work for obvious reasons. I do not understand why the URIEditor needs to ""encode"" at all, looks like fixing broken URIs at the wrong place, but at least for the case of classpath: URI's I absolutely do not see a point in applying any additional encoding. The resource gives a valid URL and this is just fine as it is.  I suggest to replace the createURI(url) in URIEditor:110 by a simple new URI(url). Running such patch fixes the issue for me.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #10673 org.springframework.beans.propertyeditors.URIEditor does double escaping for % signes for URIs that contain a schema - #11743 Unable to inject a URI with a fragment as a bean property value  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-12T19:47:19Z","2019-01-11T14:29:48Z"
"","21028","Consider adding non-fatal SpringFactories.loadFactories() [SPR-16485]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-16485](https://jira.spring.io/browse/SPR-16485?redirect=false)** and commented  Consider adding an overloaded `loadFactories` method to `SpringFactories` where the non-presence of a target class is not considered fatal (DEBUG logged?).  Spring Integration has several initializers, defined in `META-INF/spring.factories`. Some are in `-core` others in Spring Integration sub-modules `-http`, `-jmx` etc.  The maven shade plugin does not merge `spring.factories` files so we end up with just one; in the reference URL (stack overflow) he just got the core file.  If there was a non-fatal version (for the case of missing classes) we could put all the definitions in core instead of spreading them across modules.   ---  **Affects:** 5.0.3  **Reference URL:** https://stackoverflow.com/questions/48729539/spring-integration-application-does-not-define-channels-when-executed-as-package/48732905#48732905  **Issue Links:** - [INT-4400](https://jira.spring.io/browse/INT-4400) Move all spring.factories entries to core (_**""is depended on by""**_) - [INT-4401](https://jira.spring.io/browse/INT-4401) Document how to use Boot's maven tools to merge spring.factories etc. when using the maven shade plugin","closed","type: enhancement,","spring-projects-issues","2018-02-11T18:19:47Z","2019-01-14T04:32:19Z"
"","20855","DefaultListableBeanFactory.resolvabeDependencies supersede user beans [SPR-16308]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-16308](https://jira.spring.io/browse/SPR-16308?redirect=false)** and commented  I am not sure if this is a bug, or intended, but `resolvableDependencies` in `DLBF.findAutowireCandidates()` (e.g. `ApplicationEventPublisher` ) trump any user-defined beans.  ```java public class So47793485aApplication {  	public static void main(String[] args) { 		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(Config.class); 		MyBean bean = ctx.getBean(MyBean.class); 		Assert.isTrue(bean.publisher.equals(ctx.getBean(""publisher"")), 				() -> ""publisher is not 'publisher'; it's "" + bean.publisher); 		ctx.close(); 	}  	@Configuration 	@Import(MyBean.class) 	public static class Config {  		@Bean 		public ApplicationEventPublisher publisher() { 			return object -> System.out.println(object.toString()); 		}  	}  	@Component 	public static class MyBean {  		private final ApplicationEventPublisher publisher;  		@Autowired 		public MyBean(ApplicationEventPublisher publisher) { 			this.publisher = publisher; 		}   	} } ```  The `ApplicationContext` is wired in as the publisher instead of the user's publisher.   ---  **Affects:** 5.0.2","open","in: core,","spring-projects-issues","2017-12-17T22:42:33Z","2019-01-11T15:24:16Z"
"","20774","commons-logging LogFactory and String arguments [SPR-16226]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-16226](https://jira.spring.io/browse/SPR-16226?redirect=false)** and commented  ```java @SpringBootApplication public class Slf4jApplication {  	private static final Log commonsLogger = LogFactory.getLog(Slf4jApplication.class);  	private static final Logger slf4jLogger = LoggerFactory.getLogger(Slf4jApplication.class);  	public static void main(String[] args) { 		Map emptyMap = new HashMap<>(); 		String message = ""map contents: "" + emptyMap.toString(); 		commonsLogger.warn(message); 		slf4jLogger.warn(message); 	}  } ```  Results in an improper argument expansion due to Log4j internal use of `ReusableObjectMessage`.  ``` 11:40:05.265 [main] WARN com.example.Slf4jApplication - map contents: map contents: {} 11:40:05.267 [main] WARN com.example.Slf4jApplication - map contents: {} ```  If log4j-api is on the class path.  If `LogFactory.Log4jLog` methods tested for a `String` and called the appropriate method, Log4j would use a `ReusableSimpleMessage` instead, which doesn't suffer from this problem.  ---  **Affects:** 5.0.1  **Issue Links:** - #20509 spring-jcl does not include exported packages of java commons logging - #19081 Revisit Commons Logging vs java.util.logging vs SLF4J vs Log4j 2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93f17dae47757d4d562cffc788250bee6ca7b0b5","closed","in: core,","spring-projects-issues","2017-11-22T20:00:56Z","2019-01-11T13:30:36Z"
"","20670","SpEL method invocation with varargs on proxy [SPR-16122]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-16122](https://jira.spring.io/browse/SPR-16122?redirect=false)** and commented  SpEL method invocation on a proxy does not work with varargs.  Consider the following:  ```java @SpringBootApplication public class So46953884Application extends GlobalAuthenticationConfigurerAdapter {  	public static void main(String[] args) { 		SpringApplication.run(So46953884Application.class, args); 	}  	@Value(""#{foo.foo('a', 'b')}"") 	private String fooValue;  //	@Value(""#{fooProxy.foo('c', 'd')}"") 	private String fooProxyValue;  	@Autowired 	private Foo foo;  	@Autowired 	private Foo fooProxy;  	@Bean 	public ApplicationRunner runner() { 		return args -> { 			System.out.println(fooValue); 			System.out.println(foo.getClass()); 			System.out.println(fooProxyValue); 			System.out.println(fooProxy.getClass()); 		}; 	}  	@Bean 	public Foo foo() { 		return new FooImpl(); 	}  	@Bean 	public Foo fooProxy() { 		return new FooImpl(); 	}  	@Bean 	public static BeanPostProcessor bpp() { 		return new BeanPostProcessor() {  			@Override 			public Object postProcessBeforeInitialization(Object bean, String name) throws BeansException { 				if (name.equals(""fooProxy"")) { 					ProxyFactoryBean pfb = new ProxyFactoryBean(); 					pfb.setTarget(bean); 					return pfb.getObject(); 				} 				return bean; 			}  			@Override 			public Object postProcessAfterInitialization(Object bean, String name) throws BeansException { 				return bean; 			} 		}; 	}  	public interface Foo {  		String foo(String... strings);  	}  	public static class FooImpl implements Foo {  		@Override 		public String foo(String... strings) { 			return ""filled: "" + Arrays.toString(strings); 		}  	}  } ```  As written, this emits  ``` filled: [a, b] class com.example.two.So46953884Application$FooImpl null class com.sun.proxy.$Proxy36 ```  Uncommenting the second `@Value` results in...  ``` EL1004E: Method call: Method foo(java.lang.String,java.lang.String) cannot be found on com.sun.proxy.$Proxy36 type ```  ---  **Affects:** 4.3.12  **Reference URL:** https://stackoverflow.com/questions/46953884  **Issue Links:** - #20739 Wrong byte code for compiled SpEL when JDK proxy method invocation is used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/419b4440a726201c21d545aa05014cfe669faa7d, https://github.com/spring-projects/spring-framework/commit/9cc3349e2d622f7f24c0c64183b1e0d67105582f  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","in: core,","spring-projects-issues","2017-10-26T16:33:29Z","2019-01-11T13:15:05Z"
"","20460","CONTRIBUTING-DOCUMENTATION.adoc still refers to the reference gradle task [SPR-15906]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15906](https://jira.spring.io/browse/SPR-15906?redirect=false)** and commented  [This commit](https://github.com/spring-projects/spring-framework/commit/924adaec6c9f955d0207e2ee84652aae70175674#diff-c197962302397baf3a4cc36463dce5ea) removed the `reference` gradle task but the [CONTRIBUTING-DOCUMENTATION.adoc](https://github.com/spring-projects/spring-framework/blob/master/CONTRIBUTING-DOCUMENTATION.adoc) still says `./gradlew reference` is how to build the docs.   ---  **Affects:** 5.0 RC4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/721af4f7808bae0d0bb34db298d55d4d45c4b3cf","closed","type: documentation,","spring-projects-issues","2017-08-28T21:40:59Z","2019-01-14T04:34:17Z"
"","20427","Typo in matrix variable example [SPR-15872]","**[Gaash Hazan](https://jira.spring.io/secure/ViewProfile.jspa?name=gaashh)** opened **[SPR-15872](https://jira.spring.io/browse/SPR-15872?redirect=false)** and commented  At [matrix vars](https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-matrix-variables) at the example for ""// GET /owners/42;q=11;r=12/pets/21;q=22;s=23""  It says:  "" // petMatrixVars: [""q"" : 11, ""s"" : 23] ""  I think it should be:  "" // petMatrixVars: [""q"" : 22, ""s"" : 23]""  --- ""q"" value is different    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/18f42f9667bae7aac52eb62408476b40ef69b0c2","closed","type: documentation,","spring-projects-issues","2017-08-17T14:49:06Z","2017-09-11T12:09:49Z"
"","20721","Explicitly document UriTemplate as thread-safe [SPR-16173]","**[Franz Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=franzwong)** opened **[SPR-16173](https://jira.spring.io/browse/SPR-16173?redirect=false)** and commented  I think the current implementation is thread safe. But can we make it explicitly in javadoc to say it is thread safe? Thanks.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de782026c459d2357ba06b108fd3e2f3e2784924, https://github.com/spring-projects/spring-framework/commit/2c8a6bb6f50af48069883c83e9b9569cd6bcc446  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: task,","spring-projects-issues","2017-11-08T01:24:29Z","2017-11-27T10:59:10Z"
"","20623","Doc: ControllerAdvice @ExceptionHandler matching for root vs cause in multi-advice scenario [SPR-16074]","**[Franz Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=franzwong)** opened **[SPR-16074](https://jira.spring.io/browse/SPR-16074?redirect=false)** and commented  I have ExceptionA and ExceptionB.  ExceptionB is the cause of ExceptionA.  ``` ExceptionB exceptionB = new ExceptionB(); throw new ExceptionA(exceptionB); ```  The order of exception handlers for both exceptions are the same. It means ExceptionBHandler ""may"" be checked before ExceptionAHandler in ""ExceptionHandlerExceptionResolver.getExceptionHandlerMethod"", thus it uses ExceptionBHandler instead of ExceptionAHandler.   ---  **Affects:** 4.3.10  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea00c7c6c881885d65c8799737fb9cd86eb0c3e7, https://github.com/spring-projects/spring-framework/commit/d473506d3293223450f7b5fadff28d26aa69c866  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: task,","spring-projects-issues","2017-10-16T11:22:20Z","2017-10-24T16:24:07Z"
"","21103","Setting a too-big Expires header value results in an uncaught exception [SPR-16560]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-16560](https://jira.spring.io/browse/SPR-16560?redirect=false)** and commented  ``` java.time.DateTimeException: Field Year cannot be printed as the value 292278994 exceeds the maximum print width of 4 	at java.time.format.DateTimeFormatterBuilder$NumberPrinterParser.format(DateTimeFormatterBuilder.java:2548) 	at java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.format(DateTimeFormatterBuilder.java:2179) 	at java.time.format.DateTimeFormatter.formatTo(DateTimeFormatter.java:1746) 	at java.time.format.DateTimeFormatter.format(DateTimeFormatter.java:1720) 	at org.springframework.http.HttpHeaders.setDate(HttpHeaders.java:1201) 	at org.springframework.http.HttpHeaders.setExpires(HttpHeaders.java:917) 	at com.mycode.MyController.publish(MyController.java:401) ```  when:  ```java responseHeaders.setExpires(new Date(Long.MAX_VALUE)); ```  It's obviously a not very useful date, but the error is very noisy and I'm not sure it's intended. I am fixing it at the app-level, but reporting here as low-priority - just in case.  I **think** this did not happen in older versions of the framework (but unfortunately I couldn't identify when this changed).   ---  **Affects:** 5.0.4","closed","status: declined,","spring-projects-issues","2018-03-06T14:56:23Z","2019-01-12T16:58:43Z"
"","20798","Breaking change in MVC: Accept handling is now more strict [SPR-16251]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-16251](https://jira.spring.io/browse/SPR-16251?redirect=false)** and commented  Scenario: - MVC controller with a ResponseEntity object. - Client sends Accept: application/json - Server responds with: application/what.ever+json in the ResponseEntity's headers.  This was seemingly OK with 5.0.1 and before. After upgrading to 5.0.2, it forces to return 406, despite the ResponseEntity saying otherwise.  The commit that caused it is: https://github.com/spring-projects/spring-framework/commit/9a894ab61e4613af176029761b75d7ad2a733440#diff-24571dc5c7743b2a69f7a5df4f2109b2  The RFC says:  ``` If no Accept header field is present, then it is assumed that the client accepts all media types. *If an Accept header field is present, and if the server cannot send a response which is acceptable according to the combined Accept field value, then the server SHOULD send a 406 (not acceptable) response.* ```  Please note that it says SHOULD, and not MUST:  ``` 3. SHOULD   This word, or the adjective ""RECOMMENDED"", mean that there    may exist valid reasons in particular circumstances to ignore a    particular item, but the full implications must be understood and    carefully weighed before choosing a different course. ```  So, a **patch** release of Spring seems to be enforcing a more strict behaviour, disallowing something allowed (albeit not recommended) by RFC, and breaking existing applications.  A workaround is possible by having a nasty servlet filter that manipulates headers, and adds application/*+json when application/json is in Accept... but, considering this is a patch release, I suggest you consider this behaviour change a bug, as it has backward-compatibility implications, and try not to break acceptable flows.  ---  **Affects:** 5.0.2  **Issue Links:** - #20720 AbstractMessageConverterMethodProcessor ignores HttpEntityMethodProcessor's Content-Type header  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fda08852ba9f5d52c149209382c0d03380de413c","closed","type: bug,","spring-projects-issues","2017-12-01T08:12:58Z","2019-01-14T04:33:00Z"
"","20797","null FactoryBean results in BeanCreationException [SPR-16250]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-16250](https://jira.spring.io/browse/SPR-16250?redirect=false)** and commented  When a FactoryBean declaration returns null:  ``` if (something != null) {      MethodInvokingFactoryBean methodInvokingFactoryBean = new MethodInvokingFactoryBean();      methodInvokingFactoryBean.setTargetClass(MyClass.class);      methodInvokingFactoryBean.setTargetMethod(""init"");      methodInvokingFactoryBean.setArguments(new Object[] { something });      return methodInvokingFactoryBean; } else {      return null; } ```  this happens:  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'methodInvokingFactoryBean': Bean instance of type [class org.springframework.beans.factory.support.NullBean] is not a FactoryBean 	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getFactoryBean(FactoryBeanRegistrySupport.java:208) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:955) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:833) 	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:557) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:428) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:399) 	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:222) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1273) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1098) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1062) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:583) 	... 65 more ```  I guess it's the same as #20582, as the `NullBean` is being exposed.  ---  **Affects:** 5.0.2  **Reference URL:** #20582  **Issue Links:** - #20582 CastClass exception when wiring Map of beans (NullBean instead of 'null' in the map) - #20384 Autowire contract is not honored in cases where FactoryBean or `@Bean` return null  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/18d90ec14046c6b6c8d6e4bd1f6535df5fb46d06","closed","in: core,","spring-projects-issues","2017-11-30T23:02:02Z","2019-01-14T04:33:02Z"
"","20711","CastClass exception (NullBean instead of 'null' value) when getting map of beans directly from ApplicationContext [SPR-16163]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-16163](https://jira.spring.io/browse/SPR-16163?redirect=false)** and commented  #20582 was seemingly fixed for 5.0.1 for autowiring, but in that release when asking the app context directly for a map of beans of a given type (getBeansOfType), the problem remains.  Reproduced in https://github.com/spring-projects/spring-framework-issues/pull/173.  ---  **Affects:** 5.0.1  **Issue Links:** - #20582 CastClass exception when wiring Map of beans (NullBean instead of 'null' in the map) - #20889 BeanNotOfRequiredTypeException (NullBean instead of null) when calling ApplicationContext.getBean(name, type) - #21572 Consistent non-exposure of null beans in the BeanFactory API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9649b0cb25b9f5e16f4734f28bc40b7b83b9f80f","closed","in: core,","spring-projects-issues","2017-11-06T12:22:05Z","2019-01-14T04:33:26Z"
"","20709","bean(nameOfBean) doesn't work with Spring Framework 5.0.1 on AspectJ 1.8.12 [SPR-16161]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-16161](https://jira.spring.io/browse/SPR-16161?redirect=false)** and commented  Trying to upgrade to Spring 5.0.1. I'm using AspectJ 1.8.12 as per the release notes of 5.0.1, even if the issues referred to 1.9 RC.  This aspect worked well with 4.3:  ```java 	@Component 	@Aspect 	static class MonitorInterceptor extends PerformanceMonitorInterceptor {  		@Override 		@Pointcut(""bean(s3Client)"") 		public void auditable() { 		} 	}  static abstract class PerformanceMonitorInterceptor {  	public abstract void auditable();  	@Around(""auditable()"") 	public final Object audit(final ProceedingJoinPoint pjp) throws Throwable { 		String name = createName(pjp); 		String target = pjp.getSignature().getDeclaringTypeName(); 		Logger logger = LoggerFactory.getLogger(target);  		StopWatch stopWatch = new StopWatch(name); 		stopWatch.start(name); 		try { 			return pjp.proceed(); 		} finally { 			stopWatch.stop(); 			logger.debug(stopWatch.shortSummary()); 		} 	}  	private static String createName(ProceedingJoinPoint pjp) { 		MethodSignature signature = (MethodSignature) pjp.getSignature(); 		Method method = signature.getMethod(); 		return method.getName(); 	} } ```  But in 5.0.1, I get:  ``` java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:125) 	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:107) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:242) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:539) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:761) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:461) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:207) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'conversionService' defined in class path resource [com/mycompany/storage/server/applicationContext.xml]: Cannot create inner bean 'org.springframework.format.number.NumberFormatAnnotationFormatterFactory#7c729a55' of type [org.springframework.format.number.NumberFormatAnnotationFormatterFactory] while setting bean property 'formatters' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.format.number.NumberFormatAnnotationFormatterFactory#7c729a55' defined in class path resource [com/mycompany/storage/server/applicationContext.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: Pointcut is not well-formed: expecting '(' at character position 0 bean(s3Client) ^  	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:327) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:124) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedSet(BeanDefinitionValueResolver.java:413) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:163) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1607) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1352) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:845) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:246) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117) 	... 25 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.format.number.NumberFormatAnnotationFormatterFactory#7c729a55' defined in class path resource [com/mycompany/storage/server/applicationContext.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: Pointcut is not well-formed: expecting '(' at character position 0 bean(s3Client) ^  	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:312) 	... 44 more Caused by: java.lang.IllegalArgumentException: Pointcut is not well-formed: expecting '(' at character position 0 bean(s3Client) ^  	at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:334) 	at org.aspectj.weaver.reflect.InternalUseOnlyPointcutParser.resolvePointcutExpression(InternalUseOnlyPointcutParser.java:36) 	at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredPointcuts(Java15ReflectionBasedReferenceTypeDelegate.java:309) 	at org.aspectj.weaver.ReferenceType.getDeclaredPointcuts(ReferenceType.java:884) 	at org.aspectj.weaver.ResolvedType$PointcutGetter.get(ResolvedType.java:243) 	at org.aspectj.weaver.ResolvedType$PointcutGetter.get(ResolvedType.java:241) 	at org.aspectj.weaver.Iterators$4$1.hasNext(Iterators.java:213) 	at org.aspectj.weaver.Iterators$4.hasNext(Iterators.java:230) 	at org.aspectj.weaver.ResolvedType.findPointcut(ResolvedType.java:743) 	at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:148) 	at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:189) 	at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:331) 	at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:312) 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:226) 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.obtainPointcutExpression(AspectJExpressionPointcut.java:197) 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:176) 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:224) 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:283) 	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:315) 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:124) 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:93) 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:74) 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:352) 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:304) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:438) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1708) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:583) 	... 46 more  ```    ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7bcbdbbc62215543a6193f650506f2829a117b45","closed","in: core,","spring-projects-issues","2017-11-05T17:49:56Z","2017-11-27T12:17:09Z"
"","20582","CastClass exception when wiring Map of beans (NullBean instead of 'null' in the map) [SPR-16033]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-16033](https://jira.spring.io/browse/SPR-16033?redirect=false)** and commented  Offending code has been working since 4.1 at least, up until 5.0.0.RC3. It just started failing in GA.  ``` java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:125) 	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:107) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:242) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'com.mycompany.platform.server.healthcheck.HealthcheckConfiguration': Unsatisfied dependency expressed through field 'healthcheckConfigSets'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'eventListenerAdapterHealthcheckConfigSet' defined in class path resource [com/mycompany/platform/event/provider/EventBusHealthcheckConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.mycompany.common.healthcheck.service.HealthcheckConfigSet]: Factory method 'eventListenerAdapterHealthcheckConfigSet' threw exception; nested exception is java.lang.ClassCastException: org.springframework.beans.factory.support.NullBean cannot be cast to com.mycompany.platform.event.bus.EventListenerAdapter 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:581) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:367) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1340) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:246) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117) 	... 26 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'eventListenerAdapterHealthcheckConfigSet' defined in class path resource [com/mycompany/platform/event/provider/EventBusHealthcheckConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.mycompany.common.healthcheck.service.HealthcheckConfigSet]: Factory method 'eventListenerAdapterHealthcheckConfigSet' threw exception; nested exception is java.lang.ClassCastException: org.springframework.beans.factory.support.NullBean cannot be cast to com.mycompany.platform.event.bus.EventListenerAdapter 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:583) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1249) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1098) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1320) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1286) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1188) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1091) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1060) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:578) 	... 44 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.mycompany.common.healthcheck.service.HealthcheckConfigSet]: Factory method 'eventListenerAdapterHealthcheckConfigSet' threw exception; nested exception is java.lang.ClassCastException: org.springframework.beans.factory.support.NullBean cannot be cast to com.mycompany.platform.event.bus.EventListenerAdapter 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:186) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:575) 	... 59 more Caused by: java.lang.ClassCastException: org.springframework.beans.factory.support.NullBean cannot be cast to com.mycompany.platform.event.bus.EventListenerAdapter 	at com.mycompany.platform.event.provider.EventBusHealthcheckConfiguration.eventListenerAdapterHealthcheckConfigSet(EventBusHealthcheckConfiguration.java:49) 	at com.mycompany.platform.event.provider.EventBusHealthcheckConfiguration$$EnhancerBySpringCGLIB$$a46517a5.CGLIB$eventListenerAdapterHealthcheckConfigSet$1() 	at com.mycompany.platform.event.provider.EventBusHealthcheckConfiguration$$EnhancerBySpringCGLIB$$a46517a5$$FastClassBySpringCGLIB$$e3074686.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:361) 	at com.mycompany.platform.event.provider.EventBusHealthcheckConfiguration$$EnhancerBySpringCGLIB$$a46517a5.eventListenerAdapterHealthcheckConfigSet() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:155) 	... 60 more ```  Offending bean is defined as:  ```java 	@Bean 	@Profile(""BATCH"") 	HealthcheckConfigSet eventListenerAdapterHealthcheckConfigSet( 			@Autowired(required = false) @Lazy Map eventListenerAdapters) { 		if (eventListenerAdapters == null || eventListenerAdapters.isEmpty()) { 			return null; 		}  		HealthcheckConfigSet set = new HealthcheckConfigSet(HealthcheckGroup.HEALTH); 		for (Entry a : eventListenerAdapters.entrySet()) { 			if (a.getValue() == null) { 				LOGGER.info(""Cannot configure healthcheck for EventListenerAdapter {}: the adapter is null"", 						a.getKey()); 				continue; 			} else { 				LOGGER.info(""Configuring healthcheck for EventListenerAdapter {}"", a.getKey()); 				Healthcheck hc = new EventListenerAdapterHealthcheck(a.getKey(), a.getValue()); 				set.add(""event-listener-adapter-"" + a.getKey(), hc); 			}  		} 		return set; 	}  ```  From the code, I understand that at some point the Map contained null values, and now it seems the map contains NullBean instances.  ---  **Affects:** 5.0 GA  **Issue Links:** - #20384 Autowire contract is not honored in cases where FactoryBean or `@Bean` return null - #20889 BeanNotOfRequiredTypeException (NullBean instead of null) when calling ApplicationContext.getBean(name, type) - #20612 BeanDefinitionValidationException when beans are null (NullBean) and initMethod is set - #20711 CastClass exception (NullBean instead of 'null' value) when getting map of beans directly from ApplicationContext - #20797 null FactoryBean results in BeanCreationException - #21572 Consistent non-exposure of null beans in the BeanFactory API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9d3c2690d5010f6cafe8fb98ae8e9c0b6d92d9b","closed","in: core,","spring-projects-issues","2017-10-02T06:50:40Z","2019-01-14T04:36:55Z"
"","20584","OpenJpaVendorAdapter missing from spring-orm [SPR-16035]","**[Francesco Chicchiriccò](https://jira.spring.io/secure/ViewProfile.jspa?name=ilgrosso77)** opened **[SPR-16035](https://jira.spring.io/browse/SPR-16035?redirect=false)** and commented  I am upgrading Apache Syncope (in its master branch) from Spring 4.3.11.RELEASE to Spring 5.0.0.RELEASE and I have just found that the classes:  * OpenJpaVendorAdapter * OpenJpaDialect  are barely missing from `spring-orm`.  When I just copy these two classes' sources from [4.3.x](https://github.com/spring-projects/spring-framework/tree/4.3.x/spring-orm/src/main/java/org/springframework/orm/jpa/vendor) into Syncope sources, everything works as expected.  ---  **Affects:** 5.0 GA  **Issue Links:** - #18368 Remove Velocity support - #18997 Drop native OpenJPA support","closed","status: declined,","spring-projects-issues","2017-10-02T08:42:22Z","2019-01-12T16:33:02Z"
"","21006","GSON converter only serialises fields of controller method return type, ignoring subclass fields of response object [SPR-16461]","**[Fleur Kelpin](https://jira.spring.io/secure/ViewProfile.jspa?name=fdlk)** opened **[SPR-16461](https://jira.spring.io/browse/SPR-16461?redirect=false)** and commented  The GSON message converter used to serialise using the class of the object that was being serialised. Now it uses the return type of the controller method.  So when I have  ```java @GetMapping(""/animal"") public Animal getAnimal() { return new Cat(...); } ```  the Cat-specific fields do not get serialised, only Animal fields.  Workarounds: * When I replace GSON with Jackson on the classpath, Cat fields get serialised again. * When I subclass the GsonHttpMessageSerializer and override writeInternal as follows:  ```java @Override protected void writeInternal(Object o, @Nullable Type type, Writer writer) throws Exception {     // replaces the type info with null value     super.writeInternal(o, null, writer);  } ```  the Cat fields get serialized again.  Probably introduced in #17408, the last version that serialized Cats as Cats was 4.1.9.  To reproduce: Run the repro project, and GET `http://localhost:8080/SPR-16461/animal` Response should be the same as  `http://localhost:8080/SPR-16461/cat` but isn't.  ---  **Affects:** 4.3.14, 5.0.3  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/175  **Issue Links:** - #17408 Make `@ResponseBody` method return type available to message converters - #21072 GsonHttpMessageConverter cannot be used in an SseEmitter because it closes the response stream  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/817a8369605766b44ecd829f29dd393d602cc026, https://github.com/spring-projects/spring-framework/commit/fd964ca4b11823e4d63f3691cb159ea9e4988fe5  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: regression,","spring-projects-issues","2018-02-02T21:42:27Z","2019-01-13T04:53:09Z"
"","20517","JmsMessagingTemplate is not correctly configured [SPR-15965]","**[Filip Hrisafov](https://jira.spring.io/secure/ViewProfile.jspa?name=filiphr)** opened **[SPR-15965](https://jira.spring.io/browse/SPR-15965?redirect=false)** and commented  The `JmsMessagingTemplate` does not set the payload `MessageConverter` from the `JmsTemplate`.  The [`RabbitMessagingTemplate`](https://github.com/spring-projects/spring-amqp/blob/master/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitMessagingTemplate.java#L112) sets the payload converter from the `JmsTemplate`. I think that the same needs to be done for the `JmsMessagingTemplate` as well.  I have also created an issue for Spring Boot [#10305](https://github.com/spring-projects/spring-boot/issues/10305) and I was redirected here for the fix.  ---  **Affects:** 4.3.11  **Issue Links:** - #20514 TaskExecutorRegistration.getTaskExecutor() overrides executor properties of a provided ThreadPoolTaskExecutor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b275a06d167773df0efdc76884ad7c2067ab9e2b, https://github.com/spring-projects/spring-framework/commit/35af7ff854f54fd005fd91c1780ea0a87defbc27  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","type: bug,","spring-projects-issues","2017-09-15T07:30:31Z","2020-05-18T13:28:01Z"
"","20577","ContentCachingRequestWrapper cache input stream [SPR-16028]","**[Federico Piazza](https://jira.spring.io/secure/ViewProfile.jspa?name=federico.piazza@gmail.com)** opened **[SPR-16028](https://jira.spring.io/browse/SPR-16028?redirect=false)** and commented  This ticket comes from an issue I raised in spring boot github: https://github.com/spring-projects/spring-boot/issues/10452  The class ContentCachingRequestWrapper caches requests but by consuming the input stream, so this is a hard price that pays other filters in the filter chain that cannot read the input stream anymore making this class not very useful.  This issue is created to either improve ContentCachingRequestWrapper or create another wrapper that support multi read request through the filter chain multiple times. Here you can find a stack overflow answer that implements this: https://stackoverflow.com/questions/10210645/http-servlet-request-lose-params-from-post-body-after-read-it-once   --- No further details from [SPR-16028](https://jira.spring.io/browse/SPR-16028?redirect=false)","closed","type: enhancement,","spring-projects-issues","2017-09-29T14:52:32Z","2017-10-03T12:27:45Z"
"","20900","JMS Producers are cached even when the destination is a temporary queue causing a memory leak [SPR-16353]","**[Facundo Velazquez](https://jira.spring.io/secure/ViewProfile.jspa?name=facundovs)** opened **[SPR-16353](https://jira.spring.io/browse/SPR-16353?redirect=false)** and commented  Looking at the code, in CachingConnectionFactory class, I can see [this fix](https://github.com/spring-projects/spring-framework/commit/b91e989ad4eb99999fc16944f37509b6bec06901) was added some years ago for fixing the same case but on the consumer side. However, [Temporary queue producers are always cached](https://github.com/spring-projects/spring-framework/blob/master/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java#L325).  This scenario was discovered in a request-response scenario which is causing a memory leak in the Mule ESB.  At least from my perspective, it doesn't make sense, since temporary queues producers won't be used more than once.  ---  **Affects:** 4.3.13, 5.0.2  **Issue Links:** - #20995 CachingConnectionFactory - Invalid session in session cache  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72590dbb21048245e0af2ea507e7b0896330e89d, https://github.com/spring-projects/spring-framework/commit/bf4cadaddaae4c89c1015bf9a75b6954f0637313  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: bug,","spring-projects-issues","2018-01-05T18:43:23Z","2019-01-11T15:18:45Z"
"","21022","SimpleJdbcCall can't access synonyms in Oracle database [SPR-16478]","**[Ewgenij Sokolovski](https://jira.spring.io/secure/ViewProfile.jspa?name=ewgenijkkg)** opened **[SPR-16478](https://jira.spring.io/browse/SPR-16478?redirect=false)** and commented  After upgrading the Spring framework from <4.2.2.RELEASE> to <5.0.2.RELEASE> it is not possible to call a stored procedure with SimpleJdbcCall if it is behind a synonym in an Oracle database. I did not find any possibility to switch handling of synonyms on, so the only workaround was to use JdbcTemplate where everything worked.  ---  **Affects:** 4.3.14, 5.0.2  **Reference URL:** https://stackoverflow.com/questions/48619799/spring-simplejdbccall-and-oracle-synonyms  **Issue Links:** - #18244 SimpleJdbcCall does not throw an Exception for a missing stored procedure if the name does not contain ""."" - #21038 NPE in Spring-JDBC with Oracle and SimpleJdbcInsert  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fc93f99f539afb812a839e48ef9160b92da913b6, https://github.com/spring-projects/spring-framework/commit/2654dbfcf1b65dd2180421493cf0b95d32d3afea  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: regression,","spring-projects-issues","2018-02-08T10:12:25Z","2019-01-11T15:31:44Z"
"","21134","Doc: @PropertySource meta-annotation not detected next to direct annotation [SPR-16592]","**[Evgeny Naku](https://jira.spring.io/secure/ViewProfile.jspa?name=evgeny.nacu)** opened **[SPR-16592](https://jira.spring.io/browse/SPR-16592?redirect=false)** and commented  Check out sample bug project on github: https://github.com/0v1se/spring-properties-bug  `@PropertySource` is not used when it's defined in other annotation.  For example, I have  ```java @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @PropertySource(""app1.properties"") public @interface IncludeApp1Properties { } ```  Then I have configuration:  ```java @Configuration @IncludeApp1Properties @PropertySource(""app2.properties"") public class ErrorConfiguration {     @Value(""${intValue1}"")     private int value1;     @Value(""${intValue2}"")     private int value2; } ```  When I try to use ErrorConfiguration, there is an error Caused by: java.lang.NumberFormatException: For input string: intValue1  But when I try to use `@PropertySource` directly, everything is fine:  ```java @Configuration @PropertySource(""app1.properties"") @PropertySource(""app2.properties"") public class OkConfiguration {     @Value(""${intValue1}"")     private int value1;     @Value(""${intValue2}"")     private int value2; }  ```    ---  **Affects:** 4.3.14, 5.0.3  **Reference URL:** https://github.com/0v1se/spring-properties-bug  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-14T15:40:10Z","2018-04-03T20:34:27Z"
"","20872","ScheduledAnnotationBeanPostProcessor misses @Scheduled annotations [SPR-16325]","**[evan klinger](https://jira.spring.io/secure/ViewProfile.jspa?name=evan715)** opened **[SPR-16325](https://jira.spring.io/browse/SPR-16325?redirect=false)** and commented  I have 3 `@Service` beans, each with a void method with `@Scheduled` annotations. Only one of these is picked up during startup. I have set log level to trace and even in the trace the ScheduledAnnotationBeanPostProcessor only detects it on one of the beans. The syntax, packages, and everything else are identical. I am using a cron expression with SpringEL to derive the cron value. All have the same cron value. All beans are annotated with `@Profile` (that is not active), each has a `@PostConstruct` method and one `@Scheduled`. I am not sure if this is a Spring bug or what could be causing this? I am registering a taskScheduler bean as follows:  ```java @Bean(destroyMethod = ""shutdown"")     public Executor taskScheduler() {         ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();         scheduler.setPoolSize(4);         scheduler.setThreadNamePrefix(""taskScheduler-"");         scheduler.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());         scheduler.setErrorHandler(t -> logger.error(""Error executing scheduled task"", t));         scheduler.initialize();         return scheduler;     } ```  This is in an `@Configuration` class that also implements SchedulingConfigurer and sets the scheduler like so:  ```java @Override     public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {         taskRegistrar.setScheduler(taskScheduler());     } ```  Any help would be appreciated! Thank you   ---  **Affects:** 5.0.2","open","in: core,","spring-projects-issues","2017-12-24T18:00:34Z","2019-01-11T15:22:53Z"
"","20422","Should call getNativeResponse() instead of getNativeRequest() in FrameworkServlet [SPR-15867]","**[Etienne Neveu](https://jira.spring.io/secure/ViewProfile.jspa?name=eneveu)** opened **[SPR-15867](https://jira.spring.io/browse/SPR-15867?redirect=false)** and commented  While reading the code of `FrameworkServlet#RequestBindingInterceptor`, I noticed that we try to obtain the `HttpServletResponse` using `webRequest.getNativeRequest(HttpServletResponse.class)` instead of `webRequest.getNativeResponse(HttpServletResponse.class)` :  https://github.com/spring-projects/spring-framework/blob/v5.0.0.RC3/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java#L1142  I'm wondering if it's a typo, and if it should be fixed?  I'm not sure about the impact, but it seems to have been added in [this commit](https://github.com/spring-projects/spring-framework/commit/1f55b4f2a897144e40dad394e650012afb89d9b8), so I guess it is not a huge issue, since the code is here since 2013... But I thought I might as well create a ticket, just in case.  ---  **Affects:** 4.3.10, 5.0 RC3  **Issue Links:** - #14976 Change in FrameworkServlet makes it impossible to use an alternative WebRequest instance for request processing  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9dcdfec2e2c2774fd59d8e410bf821af4a89ecf2, https://github.com/spring-projects/spring-framework/commit/b8f5e97ae5d6f3fae7932a85f533c5b7006b344f","closed","type: bug,","spring-projects-issues","2017-08-16T15:31:17Z","2019-01-11T18:08:11Z"
"","20595","StringHttpMessageConverter flush out response immediately before execute posthandler [SPR-16046]","**[eric wang](https://jira.spring.io/secure/ViewProfile.jspa?name=yeak2001)** opened **[SPR-16046](https://jira.spring.io/browse/SPR-16046?redirect=false)** and commented  the problem is related `@RequestBody` the ajax request, if the response content-type is text/plain that means the handler method return string directly, the StringHttpMessageConverter will getting used to handler the HTTP message convert. the problem seems in the writeInternal method, it is calling StreamUtils.copy(String in, Charset charset, OutputStream out) which will create a new Write and flush the response content out immediately.  this problem caused all subsequence handlers like posthandler got executed after response return to the client.  the repro steps should be easy, just create a controller with `@ResponseBody` and return string directly.  ---  **Affects:** 4.3.11  **Issue Links:** - #13864 Response is committed before Interceptor postHandle invoked (_**""duplicates""**_) - #12553 Make HandlerInterceptor play nice with `@ResponseBody`","closed","status: declined,","spring-projects-issues","2017-10-04T21:55:29Z","2019-01-13T05:03:08Z"
"","20680","AbstractRequestExpectationManager fails with ""Expectations already declared"" when ResponseCreator.createResponse throws an exception [SPR-16132]","**[Eric Pabst](https://jira.spring.io/secure/ViewProfile.jspa?name=epabst)** opened **[SPR-16132](https://jira.spring.io/browse/SPR-16132?redirect=false)** and commented  I am trying to test a scenario where an HTTP request fails without getting a response such as a network error, and that failure is handled by making another RestTemplate request.  When I provide a ResponseCreator that throws an exception in createResponse, the test fails with ""IllegalStateException: Expectations already declared"".  (Over-simplified) Code under test  ```java public void makeServiceCall(RestTemplate restTemplate) {   try {     restTemplate.getForEntity(""/some-service/some-endpoint"", String.class);   }   catch (Exception e) {     restTemplate.postForEntity(""/reporting-service/report-error"", e.toString(), String.class);   } } ```  Test that reproduces the failure:  ```java   @Test   public void testRestControllerHandlesMessage_FailsWithUnknownException() throws InterruptedException {     RestTemplate restTemplate = new RestTemplate();     MockRestServiceServer mockRestServiceServer = MockRestServiceServer.bindTo(restTemplate).build();     mockRestServiceServer         .expect(requestTo(""/some-service/some-endpoint""))         .andRespond((request) -> { throw new IllegalStateException(""pseudo network error""); });     mockRestServiceServer         .expect(requestTo(""/reporting-service/report-error""))         .andExpect(method(POST))         .andRespond(withSuccess());      makeServiceCall(restTemplate);     mockRestServiceServer.verify();   } ```  I debugged this and found out that AbstractRequestExpectationManager.validateRequest only adds the request to the requests collection after validateRequestInternal returns normally.  Then when validateRequest is called again for the 2nd RestTemplate call it fails because requests is still empty.  All that is needed is to put ""requests.add(request);"" into a finally block.   ---  **Affects:** 4.3.12, 5.0.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1580, and commits https://github.com/spring-projects/spring-framework/commit/a88c47a120ea7e1e937921b6ca5655b16db6b7ed, https://github.com/spring-projects/spring-framework/commit/43d88e4a250c913e9e4047efd20574e9cca96a82, https://github.com/spring-projects/spring-framework/commit/295e3b6a994b91c815481c104af47f2d120d743d, https://github.com/spring-projects/spring-framework/commit/3c07afc5be29210d6a363f51453ce1d511b8621c  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: bug,","spring-projects-issues","2017-10-30T14:12:22Z","2017-11-27T10:59:11Z"
"","20553","Make event listener bean instance available to condition evaluation [SPR-16004]","**[Eric Bottard](https://jira.spring.io/secure/ViewProfile.jspa?name=eric.bottard)** opened **[SPR-16004](https://jira.spring.io/browse/SPR-16004?redirect=false)** and commented  When using `@EventListener`, it would be nice to have access to the current state of the bean instance that is owning the listener method. Case in point: my bean has a `started` boolean flag and should not listen when it is not started   --- No further details from [SPR-16004](https://jira.spring.io/browse/SPR-16004?redirect=false)","open","in: core,","spring-projects-issues","2017-09-25T15:35:15Z","2019-01-11T14:15:27Z"
"","20552","Safe Navigation Operator and Indexing [SPR-16003]","**[Eric Bottard](https://jira.spring.io/secure/ViewProfile.jspa?name=eric.bottard)** opened **[SPR-16003](https://jira.spring.io/browse/SPR-16003?redirect=false)** and commented  Is there a way to combine `?.` and array/map indexing? If `labels` is a Map that can be `null`, I'd like a nice way to express this using `[]` indexing: `#root.labels?.get('key')`   --- No further details from [SPR-16003](https://jira.spring.io/browse/SPR-16003?redirect=false)","open","in: core,","spring-projects-issues","2017-09-25T15:32:30Z","2019-01-11T14:15:25Z"
"","21097","Using @ControllerAdvice with WebFlux  [SPR-16554]","**[Enzo Bonggio](https://jira.spring.io/secure/ViewProfile.jspa?name=enzo.bonggio)** opened **[SPR-16554](https://jira.spring.io/browse/SPR-16554?redirect=false)** and commented  I have a project that I want to migrate from Tomcat to Netty but I found that one particular error is not being catch by my ControllerAdvice class.  To reproduce the problem: 1. create one project with webflux dependency 2. create one class that have ControllerAdvice annotation 3. add this code to the class:  ```java     @ExceptionHandler(Throwable.class)     @ResponseBody     Complex handleAll(Throwable ex) {         return new Complex();     }      @Data     public static class Complex {         String something;     } ```  4. on Application.java add :  ```java @GetMapping(""/something"") Mono something() {      return Mono.error(new Throwable(""mensaje"")); } ```  5. bootRun the app 6. make a POST call to localhost:8080/something  At this point I expect that the ExceptionHandler catch Method Not Allowed exception and return my Complex object but is not happening. I don't understand also why this is working as expected if I add compile('org.springframework.boot:spring-boot-starter-web') to the project.  ---  **Reference URL:** https://gist.github.com/enzobonggio/8807cfc7e63c73c38fad9018a5c76702  **Issue Links:** - #20940 [docs] Add WebFlux content on exception handling - #21109 Support `@ResponseStatus-annotated` exceptions on WebFlux  0 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2018-03-06T02:36:24Z","2019-01-14T04:31:59Z"
"","20947","Use ResponseCookieBuilder in Spring 5.0.2 [SPR-16401]","**[EHRET Guillaume](https://jira.spring.io/secure/ViewProfile.jspa?name=devmind)** opened **[SPR-16401](https://jira.spring.io/browse/SPR-16401?redirect=false)** and commented  Hi  I want to put a cookie in my Spring WebFlux application. For that I want to use the new method .cookie() defined on the class ServerResponse  To create a cookie I have to use org.springframework.http.ResponseCookie.ResponseCookieBuilder. But you have in the class ResponseCookie, 2 elements with the same name (ResponseCookieBuilder), an interface and an implementation.  In my code I am not able to import the implementation. And as I can't create a ResponseCookieBuilder I can't use this feature.  Is it a bug ? How can I do that   ---  **Affects:** 5.0.2","closed","in: core,","spring-projects-issues","2018-01-19T14:32:49Z","2019-01-12T05:19:32Z"
"","20825","BeanUtils.isSimpleValueType() returns false for enums overriding a method [SPR-16278]","**[Eetu Huisman](https://jira.spring.io/secure/ViewProfile.jspa?name=eh)** opened **[SPR-16278](https://jira.spring.io/browse/SPR-16278?redirect=false)** and commented  `BeanUtils.isSimpleValueType()` uses `Class.isEnum()` to determine whether a type is an `enum`. `Class.isEnum()`, however, returns `false` for certain `enum` values, namely ones overriding a method in their superclass. Using `Enum.class.isAssignableFrom()` instead would make the behavior more predictable.  ---  **Issue Links:** - #20831 Allow to inject enum with package visibility  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3e0f4dd912db2b4244a116b4d36f17dc4dbb0c8, https://github.com/spring-projects/spring-framework/commit/6f6ff3320256cd5260b8e2dc6cc128d246e77d13  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","in: core,","spring-projects-issues","2017-12-07T15:56:24Z","2019-01-11T15:14:28Z"
"","20701","Failure to run second script as intended in @SQLGroup with multiple data sources and transaction managers on a JUnit test class [SPR-16153]","**[Eduardo Beja Martins](https://jira.spring.io/secure/ViewProfile.jspa?name=ebm)** opened **[SPR-16153](https://jira.spring.io/browse/SPR-16153?redirect=false)** and commented  On a JUnit Test configuration, with two data sources of different transaction managers, applied to the test class, the second is rerunned for each test.  Example:  ```java @RunWith(SpringJUnit4ClassRunner.class) @SqlGroup({     @Sql(scripts = ""script1.sql"", config = @SqlConfig(dataSource = ""dataSource1"", transactionManager = ""txMgr1"")),     @Sql(scripts = ""script2.sql"", config = @SqlConfig(dataSource = ""dataSource2"", transactionManager = ""txMgr2"")) }) public class ExampleTest{     @Test     public test1() {         // Some or no code here     }      @Test     public test2() {         // Some or no code here     } } ```  Between test1 and test2, errors will occur because script2.sql has insert statements, that will try to run for each test, and for the second time, registers with the same primary key will aready exist.  If the order of the '`@Sql`' statements is inverted, same problem will occur but for script1.sql.  The need for the persistence comes from the heavy load of JUnit tests for code pieces that only read and do not write to database..   --- No further details from [SPR-16153](https://jira.spring.io/browse/SPR-16153?redirect=false)","closed","status: declined,","spring-projects-issues","2017-11-02T17:54:21Z","2019-02-28T14:39:12Z"
"","20429","BLOCKED ""reactor-http-nio-*"" threads under load [SPR-15874]","**[Eduard Dautov](https://jira.spring.io/secure/ViewProfile.jspa?name=zajs)** opened **[SPR-15874](https://jira.spring.io/browse/SPR-15874?redirect=false)** and commented  I created POC of webflux stub server and faced with performance problems - my application can't handle more than 1000 users simultaneously. !slow.png|thumbnail!  I made some investigations and found the root cause - all ""reactor-HTTP"" threads spent a lot of time in  BLOCKED state. !slowVM.png|thumbnail!  ```java ""reactor-http-nio-2"" #15 daemon prio=5 os_prio=31 tid=0x00007fc8589f6800 nid=0x5a03 waiting for monitor entry [0x00007000017d9000]    java.lang.Thread.State: BLOCKED (on object monitor) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:404) 	- waiting to lock <0x00000006c0478b28> (a java.lang.Object) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) 	at org.springframework.util.ClassUtils.forName(ClassUtils.java:255) 	at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.registerWellKnownModulesIfAvailable(Jackson2ObjectMapperBuilder.java:737) 	at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.configure(Jackson2ObjectMapperBuilder.java:619) 	at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.build(Jackson2ObjectMapperBuilder.java:602) 	at org.springframework.http.codec.json.Jackson2JsonEncoder.(Jackson2JsonEncoder.java:51) 	at org.springframework.http.codec.AbstractCodecConfigurer$AbstractDefaultCodecs.jackson2JsonEncoder(AbstractCodecConfigurer.java:171) 	at org.springframework.http.codec.DefaultServerCodecConfigurer$ServerDefaultCodecsImpl.getSseEncoder(DefaultServerCodecConfigurer.java:98) 	at org.springframework.http.codec.DefaultServerCodecConfigurer$ServerDefaultCodecsImpl.getObjectWriters(DefaultServerCodecConfigurer.java:90) 	at org.springframework.http.codec.AbstractCodecConfigurer.getWriters(AbstractCodecConfigurer.java:115) 	at org.springframework.web.reactive.function.server.support.ServerResponseResultHandler$1.messageWriters(ServerResponseResultHandler.java:100) 	at org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$BodyInserterServerResponse$1.messageWriters(DefaultServerResponseBuilder.java:313) 	at org.springframework.web.reactive.function.BodyInserters.lambda$bodyInserterFor$17(BodyInserters.java:298) 	at org.springframework.web.reactive.function.BodyInserters$$Lambda$292/1708834600.insert(Unknown Source) 	at org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$BodyInserterServerResponse.writeTo(DefaultServerResponseBuilder.java:310) 	at org.springframework.web.reactive.function.server.support.ServerResponseResultHandler.handleResult(ServerResponseResultHandler.java:96) 	at org.springframework.web.reactive.DispatcherHandler.handleResult(DispatcherHandler.java:144) 	at org.springframework.web.reactive.DispatcherHandler.lambda$handle$2(DispatcherHandler.java:131) 	at org.springframework.web.reactive.DispatcherHandler$$Lambda$255/801252068.apply(Unknown Source) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118) ```  This happens because of org.springframework.http.codec.AbstractCodecConfigurer.AbstractDefaultCodecs#jackson2JsonEncoder() - if you don't specify Jackson2JsonEncoder,  Configurer will create new Encoder.  ``` protected Jackson2JsonEncoder jackson2JsonEncoder() { 			return (this.jackson2JsonEncoder != null ? this.jackson2JsonEncoder : new Jackson2JsonEncoder()); 		} ```  In my application, I avoid this using WebFluxConfigurer  ``` @Override     public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {         boolean fastMode = environment.getProperty(""turnOnFastMode"", Boolean.class, false);         if (fastMode) {             configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder());             configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder());         }     } ```  Results: !fast.png|thumbnail! !fastVM.png|thumbnail!  Source code of my application with Gatling tests https://github.com/Zajs/webflux-test This bug can be related to #20143.  ---  **Affects:** 5.0 RC3  **Attachments:** - [fast.png](https://jira.spring.io/secure/attachment/25073/fast.png) (_64.62 kB_) - [fastVM.png](https://jira.spring.io/secure/attachment/25072/fastVM.png) (_126.80 kB_) - [slow.png](https://jira.spring.io/secure/attachment/25075/slow.png) (_78.15 kB_) - [slowVM.png](https://jira.spring.io/secure/attachment/25074/slowVM.png) (_148.72 kB_)  **Issue Links:** - #20371 AbstractCodecConfigurer creates Jackson Encoders/Decoders each time when getters are called (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-08-18T10:29:22Z","2019-01-12T16:45:00Z"
"","20746","Support for @ModelAttribute dependency on webflux [SPR-16198]","**[Dongmin Shin](https://jira.spring.io/secure/ViewProfile.jspa?name=dongmyo)** opened **[SPR-16198](https://jira.spring.io/browse/SPR-16198?redirect=false)** and commented  `@ModelAttribute` method arguments of `@ModelAttribute` annotated method are not resolved on webflux  ```java @ModelAttribute(""a"") public A attrA(@PathVariable String param1) {     return new A(param1); }  @ModelAttribute(""b"") public B attrB(@ModelAttribute(""a"") A a, @RequestParam String param2) {     // a.getParam1() is null     return new B(a.getParam1(), param2); } ```  **_cf.)_** * spring webmvc   https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java#L131  * spring webflux   https://github.com/spring-projects/spring-framework/blob/master/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelInitializer.java#L110    ---  **Affects:** 5.0.1  **References:** pull request https://github.com/spring-projects/spring-framework/pull/2003","open","type: enhancement,","spring-projects-issues","2017-11-15T07:02:55Z","2019-01-29T17:58:41Z"
"","21061","Add way to enable Session filter for Hibernate 5+ [SPR-16518]","**[Dominik Bartholdi](https://jira.spring.io/secure/ViewProfile.jspa?name=domi)** opened **[SPR-16518](https://jira.spring.io/browse/SPR-16518?redirect=false)** and commented  in the context of #5615, _setFilterName_ and _setFilterNames_ methods have been added to _HibernateAccessor_ to support enabling Hibernate Filters for Hibernate 3. Unfortunate there seems no equivalent way to enable Hibernate Filters when using Spring Data Repositories with Hibernate 5.  Sure, I can create a pointcut that matches all repositories:  ``` @Pointcut(""execution(* org.springframework.data.repository.Repository+.*(..))"") public void activateTenantFilter() throws Throwable {      Optional tenantId = TenantUtil.getCurrentTenantId();      tenantId.ifPresent(id -> {           Session session = entityManager.unwrap(Session.class);           Filter filter = session.enableFilter(""TENANT_FILTER"");           filter.setParameter(""tenantId"", id);      }); } ```  But this means the aspect is executed way to many times - e.g. if I have a service calling multiple repository methods.  Another way would be to define a custom annotation (e.g. `@EnableTenantFilter`) and annotate service methods with it to enable the filter based on a Pointcut specific for this Annotation and do the same as in above, but this could lead to the same issue as above.  A nicer way would be to define a Pointcut for _org.hibernate.SessionBuilder.openSession_, but as _SessionBuilder_ is not exposed as a Bean, but this requires Load Time Weaving :(  ``` @AfterReturning(pointcut = ""execution(* org.hibernate.SessionBuilder.openSession(..))"", returning = ""session"")     public void forceFilter(JoinPoint joinPoint, Object session) {           ...           Filter filter = session.enableFilter(""TENANT_FILTER"");           filter.setParameter(""tenantId"", id);     } ```  Also [DATACMNS-293](https://jira.spring.io/browse/DATACMNS-293) would provide a way to implement such a filter (even independent of Hibernate), but it does not seem to be merged anytime soon :(  A way to ease this, would be some kind of a listener that is called whenever a new Hibernate Session is created and allows me to enable the Filter based on my criteria at that point. An important point is that I need to be able to pass parameters to the filter, otherwise it does not make a lot of sense.  Maybe I have missed something and this already exists...  ---  No further details from [SPR-16518](https://jira.spring.io/browse/SPR-16518?redirect=false)","open","in: data,","spring-projects-issues","2018-02-20T08:50:51Z","2020-10-05T15:36:01Z"
"","20757","Webflux server sometimes block when receiving large post body [SPR-16209]","**[Dolphin](https://jira.spring.io/secure/ViewProfile.jspa?name=adaikiss)** opened **[SPR-16209](https://jira.spring.io/browse/SPR-16209?redirect=false)** and commented  Hi, I have a strange issue regarding the WebFlux. It seems like that only part of my post request body is received by the server. I have a very simple spring boot application. (just spring-boot-starter-webflux, with three routers) Server Code:  ```java @Bean public RouterFunction routers() {     return route(path(""""), request -> ServerResponse.ok().render(""index""))         .andRoute(POST(""/hi""), request -> {             String body = request.bodyToMono(String.class).block();             log.info(""body: {}"", body);             return ServerResponse.ok().body(BodyInserters.fromObject(""Data received, length: "" + body.length()));         })         .andRoute(GET(""/hi""), request -> ServerResponse.ok().body(BodyInserters.fromObject(""Hello "" + request.queryParam(""name"").orElse(""Anonymous"") + ""!""))); } ```  When I send a POST request with large body(larger than 304, ie, 500 characters), the web server may only receive part of the data, and block infinitely. This does not always happen, but with very high chance.  GET requests do not block.  It seems simillar to #20345, but I tested with reactor-netty 0.7.2.RELEASE, but still not work.  Tested OS: win10, centos 7 JDK: 1.8.0_121 Spring-boot version: 2.0.0.M6  Thanks for the help  ---  **Affects:** 5.0.1  **Reference URL:** https://github.com/adaikiss/spring-webflux-post-blocks  **Issue Links:** - #20734 WebClient resultMono.block() blocks application if called from RestController - #21121 spring webflux ServerRequest.bodyToMono().block will freeze for HTTP post request whose header size + body size > 1024 (_**""is superseded by""**_)","closed","in: web,","spring-projects-issues","2017-11-17T11:55:42Z","2019-01-12T16:44:46Z"
"","20859","MockHttpServletRequest and MockHttpServletResponse should re-use date patterns / parsers / formatters from HttpHeaders [SPR-16312]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-16312](https://jira.spring.io/browse/SPR-16312?redirect=false)** and commented  [`MockHttpServletRequest`](https://github.com/spring-projects/spring-framework/blob/8f69b5ff23d6835eee89a26c0e1e3e63a64a21a0/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java#L108) has this:  ``` private static final String[] DATE_FORMATS = new String[] { 		""EEE, dd MMM yyyy HH:mm:ss zzz"", 		""EEE, dd-MMM-yy HH:mm:ss zzz"", 		""EEE MMM dd HH:mm:ss yyyy"" }; ```  [`MockHttpServletResponse`](https://github.com/spring-projects/spring-framework/blob/8f69b5ff23d6835eee89a26c0e1e3e63a64a21a0/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java#L63) has this:  ``` private static final String DATE_FORMAT = ""EEE, dd MMM yyyy HH:mm:ss zzz"";  private static final TimeZone GMT = TimeZone.getTimeZone(""GMT""); ```  [`HttpHeaders`](https://github.com/spring-projects/spring-framework/blob/8f69b5ff23d6835eee89a26c0e1e3e63a64a21a0/spring-web/src/main/java/org/springframework/http/HttpHeaders.java#L395) has this:  ``` private static final DateTimeFormatter[] DATE_FORMATTERS = new DateTimeFormatter[] { 		DateTimeFormatter.RFC_1123_DATE_TIME, 		DateTimeFormatter.ofPattern(""EEEE, dd-MMM-yy HH:mm:ss zz"", Locale.US), 		DateTimeFormatter.ofPattern(""EEE MMM dd HH:mm:ss yyyy"",Locale.US).withZone(GMT) }; ```  To optimize above: * `HttpHeaders` is added `addDate(String headerName, long date)` method. * `MockHttpServletResponse` delegates `setDateHeader(String name, long value)` and `addDateHeader(String name, long value)` to `HttpHeaders#setDate()` / `HttpHeaders#addDate()` correspondingly. * `MockHttpServletRequest` delegates `getDateHeader(String name)` to `HttpHeaders#getFirstZonedDateTime(String headerName, boolean rejectInvalid)`.  ---  **Affects:** 5.0.1  **Issue Links:** - #16531 MockHttpServletResponse.setDateHeader does not perform date formatting  1 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2017-12-19T10:59:55Z","2019-01-11T15:23:29Z"
"","20858","MockHttpServletResponse.setLocale(Locale) should set HttpHeaders.CONTENT_LANGUAGE header [SPR-16311]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-16311](https://jira.spring.io/browse/SPR-16311?redirect=false)** and commented  As to my interpretation of [`ServletResponse#setLocale()`](https://docs.oracle.com/javaee/7/api/javax/servlet/ServletResponse.html#setLocale-java.util.Locale-) JavaDoc which reads:  > In the case of HTTP, the locale is communicated via the `Content-Language` header, the character encoding as part of the `Content-Type` header for text media types.  the corresponding implementation should set `HttpHeaders.CONTENT_LANGUAGE` which specifies the ""language"" of response content. Currently it sets `HttpHeaders.ACCEPT_LANGUAGE`, which is ""language that client understands / prefers"" - that one should be set by the client when it makes a request.  See also: * [`org.mortbay.jetty.Response#setLocale()`](http://grepcode.com/file/repo1.maven.org/maven2/org.mortbay.jetty/jetty/6.1.26/org/mortbay/jetty/Response.java#1047) * [`io.undertow.servlet.spec.HttpServletResponseImpl#setLocale()`](http://grepcode.com/file/repository.jboss.org/nexus/content/repositories/releases/io.undertow/undertow-servlet/1.2.10.Final/io/undertow/servlet/spec/HttpServletResponseImpl.java#513)  ---  **Affects:** 5.0.1  **Issue Links:** - #19773 Mock MVC / RequestBuilder should handle Accept-Language header appropriately  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6df1a7874a50a3149278dd9fa4c0fba8c7bd85b6","closed","type: bug,","spring-projects-issues","2017-12-19T10:36:46Z","2019-01-11T15:23:27Z"
"","21087","SpEL : Indexed access within an expression with null variables is no longer a SpelEvaluationException [SPR-16544]","**[DJ Kulkarni](https://jira.spring.io/secure/ViewProfile.jspa?name=dhwajad)** opened **[SPR-16544](https://jira.spring.io/browse/SPR-16544?redirect=false)** and commented  Evaluating a spelExpression which contains indexed access to StandardEvaluationContext variables throws a java.lang.IllegalStateException, when no variables are set.  Previously the exception used to be a friendly SpelEvaluationException with SpelMessage.CANNOT_INDEX_INTO_NULL_VALUE.  See attached a project for testing. Change the springVersion in build.gradle to 4.3.14.RELEASE and the tests are green.  A commit for #20276, specifically in org.springframework.expression.spel.ast.Indexer seems to have introduced the change in behavior.  ---  **Affects:** 5.0 GA, 5.0.1, 5.0.2, 5.0.3, 5.0.4  **Attachments:** - [SpELExceptionAnomaly.zip](https://jira.spring.io/secure/attachment/25406/SpELExceptionAnomaly.zip) (_55.55 kB_)  **Issue Links:** - #20276 Extend null-safety to field level  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa670dd07d630e94ae1b0e7487906adf79f31749","closed","in: core,","spring-projects-issues","2018-02-28T21:18:52Z","2019-01-14T04:32:02Z"
"","20599","Customize PreparedStatementCreatorFactory in getPreparedStatementCreator [SPR-16050]","**[diego lovison](https://jira.spring.io/secure/ViewProfile.jspa?name=diegolovison)** opened **[SPR-16050](https://jira.spring.io/browse/SPR-16050?redirect=false)** and commented  I would like to create a streamable query using spring jdbc.  ```java public class StreamNamedParameterJdbcTemplate extends NamedParameterJdbcTemplate {      private final DataSource dataSource;      public StreamNamedParameterJdbcTemplate(DataSource dataSource) {         super(dataSource);          this.dataSource = dataSource;     }      @SneakyThrows(SQLException.class)     public  Stream streamQuery(String sql, Map parameters, RowMapper rowMapper) {          Connection connection = DataSourceUtils.getConnection(dataSource);          PreparedStatementCreator preparedStatementCreator =                 this.getPreparedStatementCreator(sql, new MapSqlParameterSource(parameters));          PreparedStatement preparedStatement = preparedStatementCreator.createPreparedStatement(connection);          StreamableQuery streamableQuery =                 new StreamableQuery<>(connection, dataSource, preparedStatement, rowMapper);          return streamableQuery.stream();     } } ```  My method is delegating a call to **getPreparedStatementCreator** in the class **NamedParameterJdbcTemplate** to avoid copying and pasting the following code:  ```java protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {      ParsedSql parsedSql = getParsedSql(sql);      String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource);      Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null);      List declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource);      PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters);      return pscf.newPreparedStatementCreator(params); } ```  My project is using DB2 and I need to change the **resultSetType** parameter value in the class **PreparedStatementCreatorFactory**.  Today I can only do that copying and past the entire method.  The idea about stream query come from: https://github.com/APNIC-net/spring-jdbctemplate-streams  ---  **Issue Links:** - #18474 Add iterable JDBC template to process large amount of data - #17262 Add Optional Support to JdbcTemplate - #20788 Creating a SimpleJdbcInsert from a NamedParameterJdbcTemplate","closed","type: enhancement,","spring-projects-issues","2017-10-03T13:23:33Z","2019-01-11T13:11:51Z"
"","20723","org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.StackOverflowError [SPR-16175]","**[dev](https://jira.spring.io/secure/ViewProfile.jspa?name=dev-v)** opened **[SPR-16175](https://jira.spring.io/browse/SPR-16175?redirect=false)** and commented  A week after the project started, an rest-api was accessed and reported the error, and for weeks.  org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.StackOverflowError at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:982) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:208) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.StackOverflowError at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollection.size(Collections.java:1030) at java.util.Collections$UnmodifiableCollec   ---  **Affects:** 4.3.12","closed","status: invalid,","spring-projects-issues","2017-11-09T02:29:28Z","2019-01-12T05:19:56Z"
"","20688","ResourceLoader with local ""file:foo/bar/file.file"" reference does not return WritableResource [SPR-16140]","**[Dennis Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=dschmidt)** opened **[SPR-16140](https://jira.spring.io/browse/SPR-16140?redirect=false)** and commented  For code example, see attached gist.  When loading a local file with the ResourceLoader, we are expecting the returned resource to be a WritableResource. The code example from the gist is derived from a [spring-cloud-aws test](https://github.com/spring-cloud/spring-cloud-aws/blob/master/spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/context/support/io/ResourceLoaderAwsTest.java#L119-L125) where the same behavior as we expect works when loading an S3 resource.  After a brief discussion in the slack channel, Dave Syer suggested this may in fact be a bug. He expects the resource to be returned a FileSystemResource, which should be writable.  ---  **Affects:** 5.0 GA  **Reference URL:** https://gist.github.com/anonymous/c11fee2d338ed4d984c5e7fa698af6e0  **Issue Links:** - #20694 ClassPathResource.createRelative is using wrong ClassPathResource constructor for the returned resource  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/07b479e264a4167d07916c125f1f4e5a7f059e1b, https://github.com/spring-projects/spring-framework/commit/b921d564d26f7eab53171c53c660397461de0ec2","closed","type: enhancement,","spring-projects-issues","2017-11-01T02:37:18Z","2019-01-11T13:13:47Z"
"","20838","Replace explicit null-checks by a declarative approach [SPR-16291]","**[Denis Zhdanov](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.zhdanov)** opened **[SPR-16291](https://jira.spring.io/browse/SPR-16291?redirect=false)** and commented  The idea is to replace explicit _null_ checks by _NonNull_ annotation on target method arguments and let the actual checks be inserted into resulting byte code during compilation based on that annotations.  [This PR](https://github.com/spring-projects/spring-framework/pull/1621) illustrates the concept on the _AbstractAliasAwareAnnotationAttributeExtractor_ class:  **Before**  ```java AbstractAliasAwareAnnotationAttributeExtractor(         Class annotationType, @Nullable Object annotatedElement, S source) {     Assert.notNull(annotationType, ""annotationType must not be null"");     Assert.notNull(source, ""source must not be null"");     this.annotationType = annotationType; ```  **After**  ```java AbstractAliasAwareAnnotationAttributeExtractor(         @Nonnull Class annotationType, @Nullable Object annotatedElement, @Nonnull S source) {     this.annotationType = annotationType; ```  The actual null check is added by the [Traute](http://traute.oss.harmonysoft.tech/) _javac_ plugin - it's configured to generate them for all method parameters marked by the _org.springframework.lang.NonNull_ annotation - [link](https://github.com/spring-projects/spring-framework/pull/1621/files#diff-c197962302397baf3a4cc36463dce5ea).  Result looks as if it's compiled from the source below:  ```java AbstractAliasAwareAnnotationAttributeExtractor(@NonNull Class annotationType, @Nullable Object annotatedElement, @NonNull S source) {     if (annotationType == null) {       throw new NullPointerException(""annotationType must not be null"");     }     if (source == null) {       throw new NullPointerException(""source must not be null"");     }     this.annotationType = annotationType; ```  Actual result:  ``` javap -c ./spring-core/build/classes/java/main/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.class ...   org.springframework.core.annotation.AbstractAliasAwareAnnotationAttributeExtractor(java.lang.Class, java.lang.Object, S);     Code:        0: aload_0        1: invokespecial #1                  // Method java/lang/Object."""":()V        4: aload_1        5: ifnonnull     18        8: new           #2                  // class java/lang/NullPointerException       11: dup       12: ldc           #3                  // String annotationType must not be null       14: invokespecial #4                  // Method java/lang/NullPointerException."""":(Ljava/lang/String;)V       17: athrow       18: aload_3       19: ifnonnull     32       22: new           #2                  // class java/lang/NullPointerException       25: dup       26: ldc           #5                  // String source must not be null       28: invokespecial #4                  // Method java/lang/NullPointerException."""":(Ljava/lang/String;)V       31: athrow ... ```  An additional benefit is that the annotation is present in javadocs, i.e. the contract is defined in more clear way. Another good thing is that IDEs highlight potential _NPE_ when a _might-be-null_ is used as a _NonNull_-parameter.  I'm the _Traute_'s author and I'm keen on applying it into beloved _Spring Framework_, so, if the team likes the change, I'm fine with creating a _PR_ which replaces all existing _null_-checks by the _NonNull_ annotation.   ---  **Affects:** 5.0.2","closed","type: enhancement,","spring-projects-issues","2017-12-12T08:31:58Z","2019-01-13T04:58:51Z"
"","21041","FormTag renders empty  tag [SPR-16498]","**[Delete this account](https://jira.spring.io/secure/ViewProfile.jspa?name=todr)** opened **[SPR-16498](https://jira.spring.io/browse/SPR-16498?redirect=false)** and commented  The doEndTag method in org/springframework/web/servlet/tags/form/FormTag.java uses writeHiddenFields to write the ExtraHiddenFields to a \ tag. The if statement inside writeHiddenFields checks for hiddenFields being null, but in the case of it being an empty Map will write an empty \\ at the end of the \.  Possible solutions: - remove encapsulating \, possible hidden inputs would be direct children of the \ tag - check hiddenFields not only for null but also for empty keyset in the if condition    ---  **Affects:** 4.3.14  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/350f318d2ec3f19855df0124a117ff3a30cdabc0, https://github.com/spring-projects/spring-framework/commit/6d7573262e604b5c8e58cd97309bd2486c478016  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-02-14T16:03:34Z","2018-02-19T12:19:20Z"
"","20540","When mixing XML and JavaConfig, beans in XML cannot reference beans in JavaConfig [SPR-15990]","**[David M. Karr](https://jira.spring.io/secure/ViewProfile.jspa?name=dkarr)** opened **[SPR-15990](https://jira.spring.io/browse/SPR-15990?redirect=false)** and commented  I wanted to write a unit test that just verifies that using my default application context XML file, that expected bindings are done.  The app runs in a container with JNDI, where some external resources are defined.  In my unit test I had to set those to dummy values.  I figured the best place to set those dummy values would be in a `@Configuration` class defined inline in my unit test class, as I would have to have tests in the same file that checked against those same dummy values.  This is as opposed to defining a ""testResources.xml"" file outside of the unit test that defines the dummy values.  This would have been suboptimal to me, as I would have to write tests to check beans against hardcoded values which were originally set in that external file.  Having the internal JavaConfig class would be better.  Note that I've already posted a question about this to StackOverflow, and the only authoritative answer I got was describing the structure I show here, which doesn't work.  In any case, it seemed to me that something like this is what I needed:  ```java @RunWith(SpringRunner.class) @Configuration public class SpringWiringTest {     ...     @Configuration     @ImportResource(""file:src/main/webapp/WEB-INF/applicationContext.xml"")     public static class Config {         @Bean public String uslDatasourcesList() { return ""abc""; }         @Bean public String atgDatasourcesList() { return ""abc""; }         @Bean public String uslTableNamePrefixsList() { return ""abc""; }         @Bean public String atgTableNamePrefixsList() { return ""abc""; }         @Bean public String doNotifications() { return ""false""; }         @Bean public DataSource abc() { return new DriverManagerDataSource(); }     } ```  Here are lines in the application context that reference these beans:  ```java      ```  Note that I also have this in my test class:  ```java @BeforeClass public static void setup() throws Exception {     SimpleNamingContextBuilder  builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder();     DataSource  ds  = new DriverManagerDataSource();     builder.bind(""java:comp/env/abc"", ds); } ```  When I run this test class, I get the following:  ``` java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124) 	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'uslDatasourcesList': Invocation of init method failed; nested exception is javax.naming.NameNotFoundException: Name [uslDatasourcesList] not bound; 1 bindings: [java:comp/env/abc] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1628) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:742) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:108) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:251) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) 	... 26 more Caused by: javax.naming.NameNotFoundException: Name [uslDatasourcesList] not bound; 1 bindings: [java:comp/env/abc] 	at org.springframework.mock.jndi.SimpleNamingContext.lookup(SimpleNamingContext.java:137) 	at javax.naming.InitialContext.lookup(Unknown Source) 	at org.springframework.jndi.JndiTemplate$1.doInContext(JndiTemplate.java:155) 	at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:87) 	at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:152) 	at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:179) 	at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:104) 	at org.springframework.jndi.JndiObjectLocator.lookup(JndiObjectLocator.java:106) 	at org.springframework.jndi.JndiObjectFactoryBean.lookupWithFallback(JndiObjectFactoryBean.java:231) 	at org.springframework.jndi.JndiObjectFactoryBean.afterPropertiesSet(JndiObjectFactoryBean.java:217) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1687) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1624) 	... 41 more ```  So, I then replaced the empty `@ContextConfiguration` at the top of the test class with this:  ```java @ContextConfiguration(value = {""file:src/main/webapp/WEB-INF/applicationContext.xml"", ""/testResources.xml""}) ```  And this being the meat of ""testResources.xml"":  ```java                 ```  And I commented out the internal JavaConfig class.  This all worked fine. However, it's not what I want, as I described earlier.   ---  **Affects:** 4.3.11","open","in: core,","spring-projects-issues","2017-09-21T16:02:06Z","2019-01-11T18:22:12Z"
"","21078","Support for ResolvableType.getType().getTypeName() on Java 8 [SPR-16535]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16535](https://jira.spring.io/browse/SPR-16535?redirect=false)** and commented  Example test that fails:  ``` assertThat(ResolvableType.forClassWithGenerics(Consumer.class, String.class) 		.getType().getTypeName()).isEqualTo(Consumer.class.getName()); ```  I think it just passes the type name property to `toString()` and that isn't very helpful in this case.  It would be nice for the type name to be the same as the raw type (the same as if I have defined a class that implements `Consumer` and printed the type name of its interfaces.   ---  **Affects:** 4.3.14  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6663d0ff0775465ea9b3e4f5931a07290207caeb, https://github.com/spring-projects/spring-framework/commit/901d48c803be0cc2b024e7c3a0da12dbb6d329a9  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-02-26T14:44:32Z","2018-04-03T20:34:25Z"
"","21072","GsonHttpMessageConverter cannot be used in an SseEmitter because it closes the response stream [SPR-16529]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16529](https://jira.spring.io/browse/SPR-16529?redirect=false)** and commented  GsonHttpMessageConverter cannot be used in an SseEmitter (unlike MappingJackson2HttpMessageConverter) because it closes the output stream after every element, committing the HTTP response and shutting it down in the servlet container. To verify this you only need to build an app with Jackson and an SseEmitter, then switch to Gson and see it break (only the first event is emitted).  ---  **Affects:** 4.3.14  **Issue Links:** - #21006 GSON converter only serialises fields of controller method return type, ignoring subclass fields of response object  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-02-23T09:20:16Z","2019-01-11T14:36:44Z"
"","20916","TestExecutionListener class not found logged at INFO [SPR-16369]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16369](https://jira.spring.io/browse/SPR-16369?redirect=false)** and commented  spring-test has this in META-INF/spring.factories:  ``` org.springframework.test.context.TestExecutionListener = \ 	org.springframework.test.context.web.ServletTestExecutionListener,\ 	org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener,\ 	org.springframework.test.context.support.DependencyInjectionTestExecutionListener,\ 	org.springframework.test.context.support.DirtiesContextTestExecutionListener,\ 	org.springframework.test.context.transaction.TransactionalTestExecutionListener,\ 	org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener ```  and then it logs at INFO level (in `AbstractTestContextBootstrapper.instantiateListeners()`) any of those that it cannot load. This is kind of ugly because it generates a lot of logging (several lines per test in a phase that is too early to change using Spring Boot configuration). Maybe they could be logged at a lower level?  Example logs:  ``` 2018-01-12 08:49:51.439  INFO 29447 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Could not instantiate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource] 2018-01-12 08:49:51.439  INFO 29447 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Could not instantiate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute] 2018-01-12 08:49:51.439  INFO 29447 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Could not instantiate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext] 2018-01-12 08:49:51.439  INFO 29447 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@5b275174, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@10ef5fa0, org.springframework.test.context.support.DirtiesContextTestExecutionListener@244e619a, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@10acd6, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@61dde151, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@b25b095, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@5cb042da, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@59c33386, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@571a9686]    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/ ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea5f8f5a7c2ad8053e8cf38fbc3d326abc1d3958, https://github.com/spring-projects/spring-framework/commit/a15975d94d104a1c09130fa9a6538c3d8544d9f3, https://github.com/spring-projects/spring-framework/commit/19640ec3f980b01497779533e15b258c96258693, https://github.com/spring-projects/spring-framework/commit/214576673af42928b0f8271e5b12e36094213ed0  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: bug,","spring-projects-issues","2018-01-12T09:00:16Z","2018-01-23T09:33:24Z"
"","20813","Javadocs for @RequestMapping not so useful in 5.0 [SPR-16266]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16266](https://jira.spring.io/browse/SPR-16266?redirect=false)** and commented  I miss the old javadocs for `@RequestMapping`. I can see why they were changed because the annotation is not specific to servlet MVC any more, but I liked being able to see it in the IDE. Could we backport it to `RequestMappingHandlerAdapter` or something (and the same for the reactive stack)? There is a link to there in the javadocs for `@RequestMapping` now, but there isn't much information there really (even less for the reactive one).   ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/446e7ed25c6cc026f2d3b12594138c74f94879ce","closed","type: enhancement,","spring-projects-issues","2017-12-05T15:16:43Z","2018-01-23T10:05:12Z"
"","20636","No way to signal that controller has handled the request in Webflux [SPR-16087]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16087](https://jira.spring.io/browse/SPR-16087?redirect=false)** and commented  Actually this appears to work:  ```java @GetMapping(""/flux"") @ResponseBody Mono flux(ServerWebExchange exchange) throws Exception {     // write the response using exchange ...  } ```  but as far as I can tell it's undocumented, so I'm not sure if it is correct.   ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8a7b96b46bffa8ef376f056f57bdafb1881603c","closed","type: enhancement,","spring-projects-issues","2017-10-18T14:23:36Z","2017-10-24T16:24:06Z"
"","20635","Webflux handler method does not accept Map as parameter [SPR-16086]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16086](https://jira.spring.io/browse/SPR-16086?redirect=false)** and commented  The user guide says that a `Map` can be used as a handler method param, but it results in an error  ``` Caused by: java.lang.NoSuchMethodException: java.util.Map.()     at java.lang.Class.getConstructor0(Class.java:3082) ~[na:1.8.0_131]     at java.lang.Class.getDeclaredConstructor(Class.java:2178) ~[na:1.8.0_131]     at org.springframework.web.reactive.result.method.annotation.ModelAttributeMethodArgumentResolver.createAttribute(ModelAttributeMethodArgumentResolver.java:210) ~[spring-webflux-5.0.0.RELEASE.jar:5.0.0.RELEASE] ```    ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/950edf888a9935213ce6dc04a8d140c05fa9a860","closed","type: enhancement,","spring-projects-issues","2017-10-18T14:21:26Z","2017-10-24T16:24:07Z"
"","20580","STOMP headers are not propagated [SPR-16031]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16031](https://jira.spring.io/browse/SPR-16031?redirect=false)** and commented  From the Sleuth issue:  > I imagine it would have to use an ExecutorChannelInterceptor  Yes, that's what we do, but Spring doesn't send the headers downstream. Isn't that the problem?  > The STOMP protocol does support custom headers on messages.  Good to know. Can we work out a way to propagate some of the Message headers from Spring to the broker?   ---  **Affects:** 4.3.11  **Reference URL:** https://github.com/spring-cloud/spring-cloud-sleuth/issues/716","closed","","spring-projects-issues","2017-09-30T06:11:34Z","2019-01-11T13:13:15Z"
"","20558","Docs for WebTestClient are pretty thin [SPR-16009]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16009](https://jira.spring.io/browse/SPR-16009?redirect=false)** and commented  The only content I found in the user guide was here: https://docs.spring.io/spring-framework/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/web-reactive.html#web-reactive-tests. It is basically a single paragraph describing broadly what you can do, but not how. Seems a bit thin to me. I have no idea how to write a test that doesn't use the full HTTP stack, for instance, even though I am assured that it is possible.  ---  **Affects:** 5.0 RC4  This issue is a sub-task of #19715  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e7e95cdedbf7eaa44c95afb5b0dbbd49d19cf21, https://github.com/spring-projects/spring-framework/commit/fbf2e1e35528dff3691f811d16893f737a1b2f18, https://github.com/spring-projects/spring-framework/commit/9d5a25e7378f5cb2d20eedbf3a6de1dcca3d1bfb","closed","type: documentation,","spring-projects-issues","2017-09-26T11:00:14Z","2019-01-11T14:15:51Z"
"","20493","Running an app with @Configuration using Java 9 prints ugly illegal access warnings [SPR-15939]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-15939](https://jira.spring.io/browse/SPR-15939?redirect=false)** and commented  When I run a basic Spring Boot app using Java 9 (and classpath, etc. - normal Java 8 command line), I see red WARN messages from the JDK. It seems they are caused by something in CGLib. Harmless but users will not like it.  ``` $ java -cp target/demo-0.0.1-SNAPSHOT.jar:$CP com.example.demo.DemoApplication    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::  (v2.0.0.BUILD-SNAPSHOT)  2017-09-08 10:58:33.782  INFO 17229 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication v0.0.1-SNAPSHOT on tower with PID 17229 (/home/dsyer/dev/demo/workspace/demo/target/demo-0.0.1-SNAPSHOT.jar started by dsyer in /home/dsyer/dev/demo/workspace/demo) 2017-09-08 10:58:33.784  INFO 17229 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to default profiles: default 2017-09-08 10:58:33.814  INFO 17229 --- [           main] ConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@1224144a: startup date [Fri Sep 08 10:58:33 BST 2017]; root of context hierarchy WARNING: An illegal reflective access operation has occurred WARNING: Illegal reflective access by org.springframework.cglib.core.ReflectUtils$1 (file:/home/dsyer/.m2/repository/org/springframework/spring-core/5.0.0.BUILD-SNAPSHOT/spring-core-5.0.0.BUILD-SNAPSHOT.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) WARNING: Please consider reporting this to the maintainers of org.springframework.cglib.core.ReflectUtils$1 WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations WARNING: All illegal access operations will be denied in a future release 2017-09-08 10:58:34.803  INFO 17229 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http) ... ```  Apparently, this is because `--illegal-access=permit` is the default in Java 9, so you can switch it off with `--illegal-access=deny`, but it's awkward to have a default setting that emits a warning.  If I run the app using modules, the error also goes away, which is interesting:  ``` $ java -p target/demo-0.0.1-SNAPSHOT.jar:$CP --add-modules ALL-DEFAULT -m demo/com.example.demo.DemoApplication --endpoints.default.web.enabled=true    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::                          2017-09-08 10:52:23.903  INFO 16567 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication on tower with PID 16567 (/home/dsyer/dev/demo/workspace/demo/target/demo-0.0.1-SNAPSHOT.jar started by dsyer in /home/dsyer/dev/demo/workspace/demo) 2017-09-08 10:52:23.905  INFO 16567 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to default profiles: default 2017-09-08 10:52:23.930  INFO 16567 --- [           main] ConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4f4c4b1a: startup date [Fri Sep 08 10:52:23 BST 2017]; root of context hierarchy 2017-09-08 10:52:24.716  INFO 16567 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http) 2017-09-08 10:52:24.7 ... ```  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20414 MethodHandles.Lookup.defineClass for CGLIB class definition purposes (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2017-09-08T10:01:50Z","2019-01-12T16:44:55Z"
"","20787","Path Variable with dot has weird behaviour for different suffixes [SPR-16240]","**[Dariusz Mydlarz](https://jira.spring.io/secure/ViewProfile.jspa?name=dmydlarz)** opened **[SPR-16240](https://jira.spring.io/browse/SPR-16240?redirect=false)** and commented  When I expose REST API that accepts dots in Path Variable it has weird behaviour for .com domains & .pl domains.  I have already set spring to accept variables with dots by this code:  ``` @RequestMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)  class RestController {      @RequestMapping(value = ""/{domain:.*}"", method = RequestMethod.POST)      public String search(@PathVariable String domain) {          return domain;      }  }  ```  Now when I make request with /google.com everything works fine. But when I make request with /wp.pl I got en error HttpMediaTypeNotAcceptableException.  It looks like Spring still wants to resolve pl as an extension.  I was also trying with Spring WebMvcConfigurerAdapter, but it didn't help.  ``` @Configuration class WebMvcConfig extends WebMvcConfigurerAdapter {      @Override     public void configurePathMatch(PathMatchConfigurer configurer) {         configurer.setUseSuffixPatternMatch(false);     } }  ```  Spring Boot Version: 1.5.8   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63c2c08e017d4bc195aaa86c3c62fb2d075ab3a6","closed","status: declined,","spring-projects-issues","2017-11-29T09:14:50Z","2019-01-12T16:32:49Z"
"","21036","Spring remove space at the end of each string of array @RequestParam  [SPR-16493]","**[dario frongillo](https://jira.spring.io/secure/ViewProfile.jspa?name=d.frongillo)** opened **[SPR-16493](https://jira.spring.io/browse/SPR-16493?redirect=false)** and commented  Hi All, i use as conversionservice  of my mvc a FormattingConversionServiceFactoryBean. If in my controller i have a `@RequestParam` that it is a string array:  ```java @RequestParam(""arrayParam"") String [] arrayParam,  ```  spring remove the space at the end of  each string contained inside **arrayParam** variable... for ie.  ```java myapi?page=0&size=30&arrayParam=alber+cap+ ```  i receive in the variable binded to arrayParm the value [ ""alber cap"" ] (array of 1 element). So spring removed last space on each string contained on the array . i investigated on the core and i found the class StringToArrayConverter that in convert method call  ```java Object targetElement = this.conversionService.convert(sourceElement.trim(), sourceType, targetElementType); ```  how to prevent the trim of the default StringToArrayConverter ? it is important for us  let me know dario    ---  **Affects:** 4.3.14","closed","in: core,","spring-projects-issues","2018-02-13T16:29:20Z","2019-02-13T17:15:53Z"
"","20529","RestTemplate doesn't consistently tolerate unknown HTTP status codes [SPR-15978]","**[Darija Radchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=darija.radchenko)** opened **[SPR-15978](https://jira.spring.io/browse/SPR-15978?redirect=false)** and commented  I'm really sorry, I fill confused about this, but as listed [here](https://jira.spring.io/browse/SPR/fixforversion/15487/?selectedTab=com.atlassian.jira.plugins.jira-development-integration-plugin:release-report-tabpanel) we are enable to handle custom http status codes already... But I'm still getting `IllegalArgumentException: no matching constant for [230]` caused in `MessageBodyClientHttpResponseWrapper.hasEmptyMessageBody()`. I'm using API that responses 230, 240 codes etc... Can you please provide some example or guide me somewhere I can find the solution?  Spring Framework version 4.3.11  ---  **Affects:** 4.3.11  **Issue Links:** - #11418 RestTemplate throws IllegalArgumentException when HTTP status is not in the HttpStatus enum - #14042 Unknown status codes (i.e. not in HttpStatus enum) prevent HttpClientErrorException and HttpServerErrorExceptions from being raised - #18779 ResponseEntity should allow the usage of unassigned HTTP status codes - #20656 DefaultResponseErrorHandler.hasError doesn't tolerate unknown status codes - #20918 RestTemplate.ResponseEntityResponseExtractor doesn't tolerate unknown status codes - #21971 RestTemplate does not throw exception for custom error codes - #20622 Returning non-standard HTTP status code causes exceptions on WebFlux - #21145 DefaultResponseErrorHandler wastes the body of a response with an unknown status - #21359 Improve handling of unknown status codes by WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4cbef27f90ded887af9ae9639550999aa81f3847, https://github.com/spring-projects/spring-framework/commit/038af9a303aa631a66384542eef8c3f0c955d2f8, https://github.com/spring-projects/spring-framework/commit/18a3322d2fb9d5678ffc0caad6fa731cd3f59f2c  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","type: bug,","spring-projects-issues","2017-09-19T13:14:44Z","2019-01-14T04:34:03Z"
"","20715","CorsConfiguration does not return response header with full list of allowed headers when using wildcard config [SPR-16167]","**[Daniel Winsor](https://jira.spring.io/secure/ViewProfile.jspa?name=danielkwinsor)** opened **[SPR-16167](https://jira.spring.io/browse/SPR-16167?redirect=false)** and commented  When sending a CORS preflight check with access-control-request-method set to some 1 method, if the CorsConfiguration has been set to allow methods by wildcard ""*"" (CorsConfiguration.ALL), then the response contains header access-control-allow-methods with just the 1 asked for method, not with a list of all methods, as is expected.  CORS spec states that the access-control-allow-methods should contain a list of all allowed methods, not solely the 1 requested for.  CorsConfiguration.ALL doc is also clear in that it is for ""Wildcard representing _all_ origins, methods, or headers.""   --- No further details from [SPR-16167](https://jira.spring.io/browse/SPR-16167?redirect=false)","closed","status: declined,","spring-projects-issues","2017-11-06T22:39:31Z","2019-01-12T16:32:55Z"
"","21070","No error message when incorrect UUID given as @PathVariable [SPR-16527]","**[Daniel Svedberg](https://jira.spring.io/secure/ViewProfile.jspa?name=migrain)** opened **[SPR-16527](https://jira.spring.io/browse/SPR-16527?redirect=false)** and commented  Calling a rest service that takes an UUID as path parameter and giving it an incorrect UUID String  makes it to fail but there is not the standard Spring error message with details about path etc The response status is Bad Request, but the message body is empty.  There is also no affect to intercept the exception by using a ExceptionHandler  Below is an example of the RestController  ```java @RestController public class HelloResource {      @RequestMapping(value = ""/{id}"")     public String home(@PathVariable(""id"") UUID id) {         return ""Hello world"";     } }` ```    ---  **Affects:** 4.3.14","closed","status: invalid,","spring-projects-issues","2018-02-22T20:09:15Z","2019-01-12T05:19:22Z"
"","20769","Validation Failure does not result in error to client [SPR-16221]","**[Daniel Siviter](https://jira.spring.io/secure/ViewProfile.jspa?name=dansiviter)** opened **[SPR-16221](https://jira.spring.io/browse/SPR-16221?redirect=false)** and commented  When Beans Validation is enabled within WebSockets and a failure is detected an error is not returned to the client. There also appears to be no simple way to send an error to then forcibly close the connection. From a security perspective we should be able to enforce strong types and any failure should be a critical ERROR resulting in connection termination.  I've attempted using a simple global error handler:  ``` @ControllerAdvice public class ErrorHandler {   @MessageExceptionHandler   @SendToUser(broadcast = false)   public Exception handle(Exception cause) {     // either throwing exception or trying to send it results in other errors but it never gets to the user   } } ```  Stacktrace  ``` 2017-11-21 18:13:47,725 ERROR [org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler] (clientInboundChannel-10) Unhandled exception from message handler method: org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException: Could not resolve method parameter at index 2 in public java.lang.String acme.MyController.onMessage(java.security.Principal,org.springframework.messaging.simp.stomp.StompHeaderAccessor,acme.MyMessage): 1 error(s): [Field error in object 'message' on field 'msg': rejected value [[]; codes [Pattern.message.msg,Pattern.msg,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [message.msg,msg]; arguments []; default message [msg],[Ljavax.validation.constraints.Pattern$Flag;@6a04056d,org.springframework.validation.beanvalidation.SpringValidatorAdapter$ResolvableAttribute@3bd9465a]; default message [must match ""^[a-zA-Z0-9 -]*$""]] , failedMessage=GenericMessage [payload=byte[11], headers={simpMessageType=MESSAGE, stompCommand=SEND, nativeHeaders={destination=[app://chat], content-length=[11]}, simpSessionAttributes={}, simpHeartbeat=[J@16bdf432, simpUser=acme.MyAuth@7d49c4d6, lookupDestination=chat, simpSessionId=stdex2yt, simpDestination=app://chat}] 	at org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver.validate(PayloadArgumentResolver.java:201) 	at org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver.resolveArgument(PayloadArgumentResolver.java:144) 	at org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:112) 	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:135) 	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:107) 	at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMatch(AbstractMethodMessageHandler.java:502) 	at org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.handleMatch(SimpAnnotationMethodMessageHandler.java:497) 	at org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.handleMatch(SimpAnnotationMethodMessageHandler.java:87) 	at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessageInternal(AbstractMethodMessageHandler.java:461) 	at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessage(AbstractMethodMessageHandler.java:399) 	at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:135) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) ```    ---  **Affects:** 4.3.12","closed","status: declined,","spring-projects-issues","2017-11-21T18:17:55Z","2019-01-12T16:32:50Z"
"","20970","ScheduledTaskRegistrar to provide all scheduled tasks with getScheduledTasks() [SPR-16424]","**[Daniel Moses](https://jira.spring.io/secure/ViewProfile.jspa?name=dmoses48)** opened **[SPR-16424](https://jira.spring.io/browse/SPR-16424?redirect=false)** and commented  ScheduledTaskRegistrar.getScheduledTasks() only gives a set of all tasks that were registered before bean creation (it gets populated afterPropertiesSet).  The following methods don't keep the scheduled task set up to date: addCronTask, scheduleCronTask, etc.  This easily tested by creating a simple spring boot with actuator application and the following configuration/properties.  (spring-boot 2.0.0.M7)  > `@Configuration` > `@EnableScheduling` > public class TaskConfig implements SchedulingConfigurer { > public void runTask() {} > `@Override` > public void configureTasks(ScheduledTaskRegistrar taskRegistrar) { > taskRegistrar.scheduleCronTask(new CronTask(this::runTask, ""0 0/1 * * * ?"")); > } > }  properties:  > management.endpoint.scheduledtasks.enabled=true > management.endpoints.web.expose=info,status,scheduledtasks  Also of concern is that the list of tasks are not filtered if they were canceled.  ---  **Affects:** 5.0.2  **Issue Links:** - #20532 Provide read access to the scheduled tasks at runtime","closed","type: enhancement,","spring-projects-issues","2018-01-26T21:16:30Z","2019-01-11T15:37:05Z"
"","20647","Fix Reactive JsonView + HttpEntity handling [SPR-16098]","**[Daniel Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=jonesd9)** opened **[SPR-16098](https://jira.spring.io/browse/SPR-16098?redirect=false)** and commented  `@JsonView` annotations aren't being honoured when the return type is a >= 2 nested generic type. i.e. `Mono>`. For example (in Kotlin, but the same occurs with Java):  ``` @RestController @RequestMapping(""/users"") class UserController(         val userAccountRepository: UserAccountRepository,         val passwordEncoder: BCryptPasswordEncoder ) {      @JsonView(UserView.PublicView::class)     @PostMapping     fun create(@RequestBody userAccount: UserAccount, uriBuilder: UriComponentsBuilder): Mono> {         return userAccountRepository                 .save(UserAccount(null,                         userAccount.username,                         passwordEncoder.encode(userAccount.password))).map {             ResponseEntity.created(uriBuilder.path(""/users/${it.id}"").build().toUri())                     .body(it)         }     } } ```  This is because in `AbstractMessageWriterResultHandler.writeBody(...)` where `bodyType` is resolved, `ResolvableType.forMethodParameter(...)` strips the `typeProvider` when extracting the nested generics in `ResolvableType#getNested()`  There was some discussion around this in #19257 which has now been closed, hence I've created a new issue.  ---  **Affects:** 5.0 GA  **Issue Links:** - #20495 Consistent type resolution for ? and Object element type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c530745015d5c7031cfcb6f633f3f459ed97935d","closed","type: bug,","spring-projects-issues","2017-10-23T06:39:09Z","2019-01-14T04:33:39Z"
"","20606","Unable to use WebTestClient with mock server in Kotlin","**[Daniel Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=jonesd9)** opened **[SPR-16057](https://jira.spring.io/browse/SPR-16057?redirect=false)** and commented  I'm trying to set up a Kotlin/Spring project using Spring Boot 2.0.0.M4 and Spring Framework 5.0.0.M4 and have ran into trouble with `WebTestClient` in a mocked-server test.  Essentially the following in Java works fine:  ```java class JavaHelper {     static WebTestClient getMockWebTestClient(ApplicationContext ctx) {         return WebTestClient.bindToApplicationContext(ctx)                             .apply(springSecurity())                             .configureClient()                             .filter(basicAuthentication())                             .build();     } } ```  But Kotlin is unable to infer the type T of apply method:  ```java  T apply(MockServerConfigurer configurer) ```  With the following code:  ```java WebTestClient.bindToApplicationContext(context)                 .apply(springSecurity())                 .configureClient()                 .filter(basicAuthentication())                 .build() ```  The problem is to do with the generic typings, I'm still fairly new to Kotlin but if I write my test using the same package as `ApplicationContextSpec` (since they're package-private) and do the following, it works as expected:  ```java (WebTestClient.bindToApplicationContext(context) as ApplicationContextSpec)                 .apply(springSecurity())                 .configureClient()                 .filter(basicAuthentication())                 .build() ```  I think the following:  ```java static MockServerSpec bindToApplicationContext(ApplicationContext applicationContext) {     return new ApplicationContextSpec(applicationContext); } ```  should be changed to return `ApplicationContextSpec` (or at least `AbstractMockServerSpec`):  and make the class `ApplicationContextSpec` public. The constructor can still be default visibility so users won't be able to misuse the class outside of the defined API, and users in Kotlin will be able to import it for type inference.  ---  **Affects:** 5.0 GA  **Issue Links:** - #20945 Upgrade to Kotlin 1.3 (_**""depends on""**_) - #20251 Kotlin unable to inherit type for WebTestClient#BodySpec  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b9a0e6bbf2b6fe5f0ed222f506efc644d0d9a4f0  2 votes, 11 watchers","closed","type: task,","spring-projects-issues","2017-10-10T10:24:43Z","2021-12-14T14:35:44Z"
"","20490","Wrong exception thrown by Springframework Beans when Type validation fails [SPR-15936]","**[Dan](https://jira.spring.io/secure/ViewProfile.jspa?name=flow_)** opened **[SPR-15936](https://jira.spring.io/browse/SPR-15936?redirect=false)** and commented  Given a dto with the following properties and validation costraints  ```java public class ProjectRequest {      @NotNull     private String randomField;      @NotEmpty     private List<@Email @NotNull String> emails;      public String getRandomField() {         return randomField;     }      public List getEmails() {         return emails;     }      public ProjectRequest setRandomField(String randomField) {         this.randomField = randomField;         return this;     }      public ProjectRequest setEmails(List emails) {         this.emails = emails;         return this;     } }  ```  And given the following controller validating the dto  ```java @RestController public class ProjectController {      @InitBinder     public void activateDirectFieldAccess(DataBinder dataBinder) {         dataBinder.initDirectFieldAccess();     }      @PostMapping(value = ""/project"", consumes = MediaType.APPLICATION_JSON_VALUE)     public ResponseEntity validate(@Valid @RequestBody ProjectRequest request) {         return ResponseEntity.ok().build();     } } ```  When I make a POST request to the /project endpoint with the following payload  ```json {     ""randomField"" : ""d"",     ""emails"" : [         ""invalid-email-string""     ] } ```  Then the following error is thrown  ```json {   ""timestamp"": 1504791495825,   ""status"": 500,   ""error"": ""Internal Server Error"",   ""exception"": ""java.lang.IllegalStateException"",   ""message"": ""JSR-303 validated property 'emails[0].' does not have a corresponding accessor for Spring data binding - check your DataBinder's configuration (bean property versus direct field access)"",   ""path"": ""/project"" } ```  Stack trace:  ``` 2017-09-07 14:52:57.433 ERROR 17504 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: JSR-303 validated property 'emails[0].' does not have a corresponding accessor for Spring data binding - check your DataBinder's configuration (bean property versus direct field access)] with root cause  org.springframework.beans.NotReadablePropertyException: Invalid property 'emails[0].' of bean class [xyz.demo.project.domain.ProjectRequest]: Bean property 'emails[0].' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? 	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:633) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:624) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:99) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.validation.AbstractBindingResult.getRawFieldValue(AbstractBindingResult.java:283) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.getRejectedValue(SpringValidatorAdapter.java:268) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:148) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:117) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.boot.autoconfigure.web.WebMvcValidator.validate(WebMvcValidator.java:69) ~[spring-boot-autoconfigure-1.5.6.RELEASE.jar:1.5.6.RELEASE] 	at org.springframework.validation.DataBinder.validate(DataBinder.java:891) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.validateIfApplicable(AbstractMessageConverterMethodArgumentResolver.java:270) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:133) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:158) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar:4.3.10.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_92] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_92] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.16.jar:8.5.16] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_92] ```  If you provide a valid payload, with correct email address, it will accept it without throwing this error as expected, i.e.:  ```json {     ""randomField"" : ""d"",     ""emails"" : [         ""valid@email.com""     ] } ```  I would have expected a MethodArgumentNotValidException which happens when in this example you would for example leave out ""randomField"", causing `@NonEmpty` validation to fail.  I believe this is related to #17698 and was not fixed correctly.  Demo project is included.  ---  **Affects:** 4.3.10  **Attachments:** - [project.zip](https://jira.spring.io/secure/attachment/25092/project.zip) (_91.95 kB_)  **Issue Links:** - #20394 SpringValidatorAdapter fails to retrieve value for Bean Validation 2.0's """" literal (_**""duplicates""**_) - #20470 Error on type argument constraint validation failure (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2017-09-07T13:56:55Z","2019-07-25T20:32:56Z"
"","20729","Circular dependency scenario that fails (contains some debug info) [SPR-16181]","**[Cristian Spiescu](https://jira.spring.io/secure/ViewProfile.jspa?name=cristian.spiescu)** opened **[SPR-16181](https://jira.spring.io/browse/SPR-16181?redirect=false)** and commented  I have the following case: A -> B -> C -> D -> B. So we have a circular dependency/loop.  If all my objects have `@Service` + `@Transactional`, then everything works fine. If B has `@Repository`, then an error occurs, with the message:  `Error creating bean with name 'b': Bean with name 'b' has been injected into other beans [d] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.`  I was curious to see what happens, and why the first case worked well but not the second. Here is the stack trace, at the instance where D has been created and populated with a proxy of B (common to the 2 cases):  !spring-bug-1.png|thumbnail!  B is proxified by AnnotationAwareAspectJAutoProxyCreator.getEarlyBeanReference(), cf. the image above.  And here is how the cases differ. In AbstractAutowireCapableBeanFactory.doCreateBean(""b"") we have the following code:  !spring-bug-2.png|thumbnail!  if ""B"" has `@Repository`, initializeBean() will return a proxy of B, and not B; hence further down in the code the error will be thrown. If no `@Repository` exists => initializeBean() returns the same object, so the code underneath doesn't complain.  And the above happens because initializeBean() delegates to the post processors, i.e. AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(). More specifically to PersistenceExceptionTranslationPostProcessor, which proxifies our bean because it sees `@Repository`.   ---  **Attachments:** - [spring-bug-1.png](https://jira.spring.io/secure/attachment/25212/spring-bug-1.png) (_221.83 kB_) - [spring-bug-2.png](https://jira.spring.io/secure/attachment/25211/spring-bug-2.png) (_27.08 kB_)","closed","for: stackoverflow,","spring-projects-issues","2017-11-09T13:49:41Z","2022-02-18T20:37:57Z"
"","20694","ClassPathResource.createRelative is using wrong ClassPathResource constructor for the returned resource [SPR-16146]","**[Constantino Cronemberger](https://jira.spring.io/secure/ViewProfile.jspa?name=ccronemberger)** opened **[SPR-16146](https://jira.spring.io/browse/SPR-16146?redirect=false)** and commented  new ClassPathResource(""/test.html"") removes the leading slash, but when the method createRelative is called it does not remove the leading slash in the returned resource as in this example:  System.out.println(((ClassPathResource)new ClassPathResource("""").createRelative(""/test.html"")).getPath());  The fix is very simple.  There are two sets of constructors: the ones for when clazz is not specified and the ones for when it is specified.  The createRelative method should choose the right one to use based on the current value of the clazz attribute.  ---  **Affects:** 4.3.12, 5.0.1  **Issue Links:** - #20688 ResourceLoader with local ""file:foo/bar/file.file"" reference does not return WritableResource  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/573ff2c58d95e26432e36d6600d863b1fe6d3e9f, https://github.com/spring-projects/spring-framework/commit/d00e4f17ec35d44a50e1737bd8e8e8db9992769e  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","in: core,","spring-projects-issues","2017-11-01T18:17:20Z","2019-01-11T13:13:50Z"
"","20830","Not able to use java.util.Duration as @Value configuration [SPR-16283]","**[Constantin Muraru](https://jira.spring.io/secure/ViewProfile.jspa?name=costimuraru)** opened **[SPR-16283](https://jira.spring.io/browse/SPR-16283?redirect=false)** and commented  We are not able to use java.util.Duration as `@Value` configuration in Spring Boot.  Sample project that exhibits this problem here: https://github.com/costimuraru/spring-boot-sample Spring Boot version: 1.5.9.RELEASE  ```java @RestController public class HelloController {      @Value(""${mykey}"")     Duration value;      @RequestMapping(""/"")     public String index() {         return ""Greetings at "" + value;     }  }  ...  public class MyConfigPropertySource extends PropertySource {      MyConfigPropertySource(String name) {         super(name);     }      @Override     public Object getProperty(String path) {         return ""mykey"".equals(path) ? Duration.ofMinutes(1) : null;     } } ```  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'helloController': Injection of autowired dependencies failed; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.time.Duration] to type [java.lang.String] at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:372) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE] ```  This error is totally unexpected: `No converter found capable of converting from type [java.time.Duration] to type [java.lang.String]`. We are not using String in neither the `@Value` field nor in the return statement from the PropertySource. So why is Spring Boot trying to convert it to String? Is there any way around this to make it work?  The use case at hand is to create a PropertySource for typesafe (https://github.com/lightbend/config) which has support for Duration.   --- No further details from [SPR-16283](https://jira.spring.io/browse/SPR-16283?redirect=false)","open","in: core,","spring-projects-issues","2017-12-10T01:13:12Z","2021-11-10T12:00:09Z"
"","20412","@RequestParam Optional> not handling multiple params of the same name correctly [SPR-15857]","**[Cole Snodgrass](https://jira.spring.io/secure/ViewProfile.jspa?name=cole.snodgrass)** opened **[SPR-15857](https://jira.spring.io/browse/SPR-15857?redirect=false)** and commented  A `@RequestParam Optional> param` will only return the first element if the param is specified multiple times in the query-string.  e.g. `?param=a,b,c` will return the expected value but `?param=a¶m=b¶m=c` will not  This is inconsistent with `@RequestParam List> param` behavior.  I have a workaround by using `@RequestParam(required = false) List param` but this is not ideal.  ---  **Affects:** 4.3.9  **Reference URL:** https://gist.github.com/cole-snodgrass/1e6270d4007841af8cff082e2aac8316  **Issue Links:** - #20235 Request params Optional and List are inconsistent (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-08-09T23:01:23Z","2019-01-12T16:45:03Z"
"","20609","Annotations on generic interface methods not found by AnnotationUtils [SPR-16060]","**[Christopher Rued](https://jira.spring.io/secure/ViewProfile.jspa?name=christor)** opened **[SPR-16060](https://jira.spring.io/browse/SPR-16060?redirect=false)** and commented  When scanning for annotations on a class that implements a generic interface where the generic type is specified in the implementing class, annotation scanning would fail to identify annotations from the interface since the parameter types do not match.  For example, given an interface:  ```java public interface Foo {     @Order     void foo(T t); } ```  and a class:  ```java public class StringFoo implements Foo {     public void foo(String s) { ... } } ```  when scanning StringFoo.foo for annotations, no annotations were identified.  This commit changes annotation scanning so that when scanning for annotations, the parameters are compared for assignability (using Class.isAssignableFrom()) rather than requiring exact matches.  Original Issue: [SEC-3081](https://jira.spring.io/browse/SEC-3081)  ---  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface - #15145 AnnotationAwareOrderComparator does not work on proxied classes - #21271 Avoid repeated superclass introspection in AnnotationUtils.findAnnotation - #21683 Annotations on generic superclass methods not found by AnnotationUtils - #21472 Avoid unnecessary synthesizable annotation processing  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1553, and commits https://github.com/spring-projects/spring-framework/commit/23d4862017f8e830321c34abd4c704468144ecb0, https://github.com/spring-projects/spring-framework/commit/b72594d7992d683fe2db585b6ce65542a8263c11","closed","type: enhancement,","spring-projects-issues","2017-10-11T13:24:35Z","2019-01-11T13:11:26Z"
"","21126","Inconsistent handling of null values through Java 8 accessors in ConcurrentReferenceHashMap [SPR-16584]","**[Christoph Strobl](https://jira.spring.io/secure/ViewProfile.jspa?name=cstrobl)** opened **[SPR-16584](https://jira.spring.io/browse/SPR-16584?redirect=false)** and commented  `ConcurrentReferenceHashMap` needs to override the default implementation of `computeIfAbsent` in order to allow adding computed `null` values.  > #from: ConcurrentMap.java >  > ... implementation assumes that the `ConcurrentMap` cannot contain `null` values and `get()` returning `null` unambiguously means the key is absent. Implementations which support `null` values **must** override this default implementation.  The following currently fails:  ```java ConcurrentReferenceHashMap map = new ConcurrentReferenceHashMap<>(); map.computeIfAbsent(""key"", key -> null);  assertThat(map.containsKey(""key"")).isTrue(); ```  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #18553 LinkedCaseInsensitiveMap doesn't implement getOrDefault properly - #20307 LinkedCaseInsensitiveMap cannot access locale from subclass - #21532 ConcurrentReferenceHashMap does not enforce visibility of cached EntrySet  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d8bb04783804898279c5a65754e829562959070, https://github.com/spring-projects/spring-framework/commit/356ef45e99c9d1e409f3d04330c44e43d2b45811  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-13T10:14:05Z","2019-01-11T14:30:00Z"
"","20533","AbstractMessageReaderArgumentResolver element type customization [SPR-15983]","**[Christoph Muck](https://jira.spring.io/secure/ViewProfile.jspa?name=d4muck)** opened **[SPR-15983](https://jira.spring.io/browse/SPR-15983?redirect=false)** and commented  Currently there is now way to customize which element type the org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver#readBody Method uses for deserialization. It always uses the Type of the method parameter, which is retrieved [on line 118](https://github.com/spring-projects/spring-framework/blob/e7c45d986bc674240e18a7bf047a48543ab00699/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java#L118).  I was thinking to add a new  ```java protected ResolvableType getCustomBodyType(MethodParameter bodyParameter, boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {     return null; } ```  method to that class and change the line 118 to  ```java ResolvableType customBodyType = getCustomBodyType(bodyParameter, isBodyRequired, bindingContext, exchange) ; ResolvableType elementType = customBodyType != null ? customBodyType :  (adapter != null ? bodyType.getGeneric() : bodyType); ```  Would that be a viable solution to that problem or am I missing something?   ---  **Affects:** 5.0 RC4","closed","type: enhancement,","spring-projects-issues","2017-09-20T13:20:06Z","2019-02-12T19:31:21Z"
"","20451","Autowiring a collection of beans thats optional should initialize an empty collection [SPR-15897]","**[Christoph Ellinger](https://jira.spring.io/secure/ViewProfile.jspa?name=christophellinger)** opened **[SPR-15897](https://jira.spring.io/browse/SPR-15897?redirect=false)** and commented  I can autowire a list of beans like this:  `@Autowired`(required = false) List\ optionalBeanList;  If really no bean was supplied, optionalBeanList is now null. When I want to use this in my program later I have to include null checks.  I think it would be better to initialize an empty list.   ---  **Affects:** 4.2.9","open","in: core,","spring-projects-issues","2017-08-24T09:12:01Z","2019-01-11T18:04:47Z"
"","21007","DefaultContextCache.remove() can drop database in tests [SPR-16462]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-16462](https://jira.spring.io/browse/SPR-16462?redirect=false)** and commented  Hi,  this week we discovered that our integration tests were failing with error messages that told us the database tables were not existent. (Our test setup uses Hibernate's **create-drop** facilities in order to build up the database and drop everything afterwards).  After quite some digging I found out that we reached the cache limit in `DefaultContextCache`. The problem for us here is that the eventual `ApplicationContext.close()` happening in `DefaultContextCache.remove()` can drop the database for the currently or upcoming tests when using `create-drop`.  While I increased the cache limit for now, I think this is a bug as the eldest `ApplicationContext` instances should be closed/removed at the end of the test instance, not at the beginning when a new one might be loaded/created and put into the `LruCache`. (Though it's probably the appropriate place to handle the cache size).  As I don't have a proper idea yet how to defer the `ApplicationContext` closing in `DefaultContextCache`, I would highly appreciate any ideas. :)  Cheers, Christoph  P.S.: I attached a reproduction project. Simply call `mvn clean test` and you should hopefully notice the test failures saying that the dummy account table doesn't exist.   ---  **Affects:** 4.3.14  **Reference URL:** https://github.com/dreis2211/spring-contextcacheclose-tests","open","type: enhancement,","spring-projects-issues","2018-02-03T09:46:26Z","2019-01-15T10:49:04Z"
"","20840","Improve performance of some string operations [SPR-16293]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-16293](https://jira.spring.io/browse/SPR-16293?redirect=false)** and commented  Hi,  while looking into some Spring-Boot performance improvements, I noticed several opportunities to speedup String operations in the Spring-Framework as well. Mostly, but not limited to excessive substring calls.  For the above case I did some JMH benchmarks:  ### Benchmark-Code  ```     @Benchmark     public String testNew(TestState testState) {         return StringUtils.uncapitalize(testState.originalString);     }      @Benchmark     public String testOld(TestState testState) { 	return testState.originalString.substring(0, 1).toLowerCase() + testState.originalString.substring(1);     } ```  ### Benchmark-Results  ``` Benchmark.testNew                                   thrpt   10  270068983,325 ± 8686263,066   ops/s Benchmark.testNew:·gc.alloc.rate                    thrpt   10         ? 10??                MB/sec Benchmark.testNew:·gc.alloc.rate.norm               thrpt   10         ? 10??                  B/op Benchmark.testNew:·gc.count                         thrpt   10            ? 0                counts Benchmark.testOld                                   thrpt   10   15616764,260 ±  699591,770   ops/s Benchmark.testOld:·gc.alloc.rate                    thrpt   10       3653,894 ±     164,045  MB/sec Benchmark.testOld:·gc.alloc.rate.norm               thrpt   10        368,000 ±       0,001    B/op Benchmark.testOld:·gc.churn.PS_Eden_Space           thrpt   10       3721,582 ±     265,154  MB/sec Benchmark.testOld:·gc.churn.PS_Eden_Space.norm      thrpt   10        374,905 ±      24,713    B/op Benchmark.testOld:·gc.churn.PS_Survivor_Space       thrpt   10          0,169 ±       0,069  MB/sec Benchmark.testOld:·gc.churn.PS_Survivor_Space.norm  thrpt   10          0,017 ±       0,007    B/op Benchmark.testOld:·gc.count                         thrpt   10        151,000                counts Benchmark.testOld:·gc.time                          thrpt   10         80,000                    ms ```  Please note that this shows a case, where nothing has to be done. The case in which we really have to replace something still shows an improvement-factor of 3 to 4, though.  I hope the attached PR gets accepted and possibly merged back into 4.3.  Cheers, Christoph   ---  **Affects:** 4.3.13  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1622, and commits https://github.com/spring-projects/spring-framework/commit/260ebeca3ada9d0bd2d62c41256cafe81ac8ca03, https://github.com/spring-projects/spring-framework/commit/d7959edb3ea1a004d58e989c1a99a53f04d77243, https://github.com/spring-projects/spring-framework/commit/9d421841d56e3ee0817b995185b3c72e83281b14  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-12-12T16:13:29Z","2018-01-23T09:33:23Z"
"","20811","Reduce access on user in SimpleBrokerMessageHandler.handleMessageInternal [SPR-16264]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-16264](https://jira.spring.io/browse/SPR-16264?redirect=false)** and commented  Hi,  similar to #20713 I found another improvement where unnecessary access to message headers is performed. This time in **SimpleBrokerMessageHandler** where we look for a user while this is only really needed for CONNECT/DISCONNECT messages. It's not as big as #20713, but I think nonetheless worthwhile.  The attached PR moves the access on the user header to only CONNECT/DISCONNECT messages in **SimpleBrokerMessageHandler**.  I'd appreciate if this PR gets accepted.  Cheers, Christoph  ---  **Affects:** 4.3.13  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1614, and commits https://github.com/spring-projects/spring-framework/commit/0b77c8835c8d992ebd7efafb9b40b6b5d4335e13, https://github.com/spring-projects/spring-framework/commit/f4e9fb52a87770763199ad37f5ef0257e68848dc, https://github.com/spring-projects/spring-framework/commit/bf8831157d2c5e4b402b0fea758ad1d38c63ce41  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-12-05T10:15:22Z","2019-01-11T13:27:51Z"
"","20713","Reduce access on headers for STOMP messaging [SPR-16165]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-16165](https://jira.spring.io/browse/SPR-16165?redirect=false)** and commented  Hi,  it has been a while since my last PR, but I just noticed in our loadtests that there is quite some repetitive access on message headers when sending messages via STOMP over websockets. Although just being **Map.get()** calls underneath they add up at some point for us.  The attached PR minimizes access to those headers. Especially, but not limited to **StompHeaderAccessor.getCommand()**.  I'd appreciate if this PR gets accepted.  Cheers, Christoph  ---  **Affects:** 4.3.12  **Issue Links:** - #20812 Stomp Broker Relay may ignore configured destination prefixes  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1587, and commits https://github.com/spring-projects/spring-framework/commit/f861f182fad5cc9bb06b6f6bf43cad3565217cef, https://github.com/spring-projects/spring-framework/commit/9fab208fdd4a311f7d3f7587ca0dd6a1aafb553f, https://github.com/spring-projects/spring-framework/commit/899994e7c1d928e32993e8cfe4156d01fd5e8c74  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-11-06T19:18:02Z","2019-01-11T13:26:55Z"
"","20570","Introduce opt-in support for merging class-level and method-level @Sql declarations [SPR-16021]","**[Chris MacPherson](https://jira.spring.io/secure/ViewProfile.jspa?name=chrismacp)** opened **[SPR-16021](https://jira.spring.io/browse/SPR-16021?redirect=false)** and commented  I would like to propose a small improvement which would enable another use-case of the `@Sql` annotation within test cases.  As mentioned in the docs [here](https://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#testcontext-executing-sql-declaratively) ""method-level declarations override class-level"".  For the following usecase I would like this not to occur so that I can set my tests up as follows:  ```java @Sql(scripts = ""/fixtures/cleanup.sql"",      executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD) public class TestCase {    @Test   @Sql(scripts = ""/fixtures/myclass/test1.sql"")          public void aTestForOneUseCase() {   }    @Test   @Sql(scripts = ""/fixtures/myclass/test2.sql"")          public void aTestForAnotherUseCase() {   }  } ```  I can achieve in Java this by just adding the class level `@Sql`, from above, as a second `@Sql` instance in each test, but this becomes quite ugly and my test class starts to look like a list of annotations.  In Groovy, using Spock this doesn't work though, I get the following error:  ```java Error:(43, 5) Groovyc: Cannot specify duplicate annotation on the same member : org.springframework.test.context.jdbc.Sql ```  Then I have to use an `@SqlGroup` for the two scripts which increases the annotations even more.  ```java @SqlGroup([        @Sql(scripts = ""/fixtures/myclass/test1.sql""),        @Sql(scripts = ""/fixtures/cleanup.sql"", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)]) ```  So this is essentially a way to have a clean way to run an `@Sql` after every test. I've been trying to figure out another good way of doing it without relying on `@Transactional`.  I noticed this other ticket #18929 which is kind of asking the same thing, but it's not clear to me in the description. What it's asking for does seem to exist anyway, the `Sql.ExecutionPhase` part. But when I use them, the method level still seems to override the class level even though there's a different `executionPhase`.  So maybe this just needs the execution phase to be overridden at the method level? Hopefully that won't mess with other use-cases.  ---  **Affects:** 4.3.11  **Reference URL:** https://stackoverflow.com/questions/32871817/using-annotation-sql-is-it-possible-to-execute-scripts-in-class-level-before-m  **Issue Links:** - #18929 Introduce class-level execution phases for `@Sql`  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1835  1 votes, 3 watchers","closed","status: superseded,","spring-projects-issues","2017-09-28T12:33:12Z","2019-07-21T11:23:47Z"
"","20852","Support Hibernate 5.3's ManagedBeanRegistry for dependency injection [SPR-16305]","**[Chris Cranford](https://jira.spring.io/secure/ViewProfile.jspa?name=naros)** opened **[SPR-16305](https://jira.spring.io/browse/SPR-16305?redirect=false)** and commented  Hibernate 5.3 introduces a new service contract called `ManagedBeanRegistry`. https://github.com/hibernate/hibernate-orm/blob/master/hibernate-core/src/main/java/org/hibernate/resource/beans/spi/ManagedBeanRegistry.java  This service contract would enable users of Spring to define Spring managed beans for various persistence objects such as Attribute Converters, Event Listeners, and Revision Listeners allowing Hibernate to lookup and use those beans as needed.  ---  **Issue Links:** - #20850 Support for Hibernate ORM 5.3 (_**""is depended on by""**_) - #21548 org.springframework.orm.hibernate5.SpringBeanContainer ignores the fallback bean instance producer - #21696 Support dependency injection in JPA AttributeConverter for EclipseLink - #21540 LocalSessionFactoryBean and HibernateTransactionManager for JPA EntityManagerFactory setup - #21494 Propagate read-only status to Hibernate Session through setDefaultReadOnly - #21368 Apply Hibernate Integrator through LocalSessionFactoryBean - #21581 Hibernate 5: restore ability to inject ""cacheRegionFactory"" of LocalSessionFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/620e83c35d52a4da3453f091c8c47a9d01a8e3dd, https://github.com/spring-projects/spring-framework/commit/c0d4cb55c78b402c8d9c9a710eaa637ae6d3c56a  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2017-12-15T16:31:11Z","2019-11-09T14:24:31Z"
"","20756","Spring 4 HibernateTransactionManager close session while executing hibernate entity-interceptor or event listener [SPR-16208]","**[Chintan](https://jira.spring.io/secure/ViewProfile.jspa?name=ctvisani)** opened **[SPR-16208](https://jira.spring.io/browse/SPR-16208?redirect=false)** and commented  I am upgrading spring and hibernate to 4.2.x from version 3.2.x .But after upgrading query executed inside entity-interceptor breaks transaction and session get closed from next transaction. If I comment out my interceptor logic than application works fine.I also tried with event listener but it happens same.So anything comes with spring newer version (4.2.2) related to interceptor that it wont work with localsessionfactorybean or anything I miss.  My Configuration for localsessionfactorybean :   \ \ \ ...... \ ...... \ \ \ \   --- No further details from [SPR-16208](https://jira.spring.io/browse/SPR-16208?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-11-17T09:03:46Z","2022-02-18T20:40:09Z"
"","20638","Prevent WebSocket buffer overflow through application-level flow control [SPR-16089]","**[ChenYang](https://jira.spring.io/secure/ViewProfile.jspa?name=beikejiedeliulangmao)** opened **[SPR-16089](https://jira.spring.io/browse/SPR-16089?redirect=false)** and commented  Class ConcurrentWebSocketSessionDecorator in Spring Websocket contains  private final Queue> buffer = new LinkedBlockingQueue<>(); that represent bunch of messages that for a queue to be sent towards clients. If the field  private final int bufferSizeLimit; exceeded, an exception is thrown and client is disconnected. I would like to be able to check this buffer size from my application in order to execute flow control and be able to prevent buffer overflow.  How I could possibly peek into this buffer?  ---  **Affects:** 4.3.12  **Reference URL:** https://stackoverflow.com/questions/39709409/how-to-peek-into-concurrentwebsocketsessiondecorator-buffer-in-spring-websocket  **Issue Links:** - #21677 limitExceeded is never reset in ConcurrentWebSocketSessionDecorator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/268ccb6b6b90413b177bb15a020088471682550c, https://github.com/spring-projects/spring-framework/commit/5809f5b8ebd66f1dd4589f7f326a24c10762e24f, https://github.com/spring-projects/spring-framework/commit/a4537b1b6dfef03fb2c004ca1fab5d2019ab52fb  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-10-20T01:48:27Z","2021-07-25T13:00:13Z"
"","20633","Using AbstractAnnotationConfigDispatcherHandlerInitializer to run Spring Webflux application as a WAR doesn't work [SPR-16084]","**[Charles Tian](https://jira.spring.io/secure/ViewProfile.jspa?name=ctian)** opened **[SPR-16084](https://jira.spring.io/browse/SPR-16084?redirect=false)** and commented  Please see the StackOverflow reference URL for more details.  The project is available at https://github.com/chyt/spring-reactive-playground/tree/liberty. This is building the WAR and deploying to Liberty. I have also tried deploying the same WAR to Tomcat 9 (not Spring embedded) and I get the same result.  ---  **Affects:** 5.0 GA  **Reference URL:** https://stackoverflow.com/questions/46736435/running-spring-webflux-application-as-a-war  **Issue Links:** - #20837 AbstractReactiveWebInitializer does not property initialize ApplicationContext (_**""duplicates""**_) - #20692 AbstractDispatcherHandlerInitializer does not detect WebFilter beans (_**""duplicates""**_)  1 votes, 4 watchers","closed","in: web,","spring-projects-issues","2017-10-17T20:13:08Z","2019-01-12T16:44:51Z"
"","20696","The flux created from bodyToFlux does not work with counting after groupBy [SPR-16148]","**[chao chang](https://jira.spring.io/secure/ViewProfile.jspa?name=chaochang)** opened **[SPR-16148](https://jira.spring.io/browse/SPR-16148?redirect=false)** and commented  I'm using web client to retrieve a text file,and then calculate the top N frequent words. the [lines flux](https://github.com/chang-chao/top-freq-words/blob/d3a5f70c8af26b565149d586528999aa9d0def7b/src/main/java/me/changchao/reactive/topfreqwords/TopFreqWordCounter.java#L35) created from bodyToFlux() method seems does not work(the consumer of [topFreqWords](https://github.com/chang-chao/top-freq-words/blob/d3a5f70c8af26b565149d586528999aa9d0def7b/src/main/java/me/changchao/reactive/topfreqwords/TopFreqWordCounter.java#L58) is not called).Alternatively if the lines flux is created from a string array,the program works properly. And,if we just subscribe to the lines flux created from bodyToFlux(),the consumer does get called. if we subscribed to [wordGoups flux](https://github.com/chang-chao/top-freq-words/blob/d3a5f70c8af26b565149d586528999aa9d0def7b/src/main/java/me/changchao/reactive/topfreqwords/TopFreqWordCounter.java#L52),the consumer will be called. But if we subscribed to [wordCounts](https://github.com/chang-chao/top-freq-words/blob/d3a5f70c8af26b565149d586528999aa9d0def7b/src/main/java/me/changchao/reactive/topfreqwords/TopFreqWordCounter.java#L55),the consumer will not be called.  The below is the code snippet.  ```java   // get the content of the text file line by line   Flux lines = client.get().retrieve().bodyToFlux(String.class);    // TODO: if the lines Flux is created using a String array,   // the whole program does work   // So I think this is related to WebClient. //  lines = Flux.fromArray(new String[] { // //    ""That was in the time of Burke and Fox and Rodney."", // //    "" Spain and France and Holland had combined,"", // //    "" and in one great battle threatened to crush"" });    // convert to words   Flux words = lines.filter(it -> StringUtils.isNotBlank(it)).flatMapIterable(this::extractWords);    // group by words   Flux> wordGroups = words.groupBy(it -> it);    // get the number of for each word   Flux> wordCounts = wordGroups.flatMap(gr -> gr.count().map(cnt -> Pair.of(gr.key(), cnt)));    // get top N words   Flux> topFreqWords = wordCounts.sort((p1, p2) -> Long.compare(p2.getRight(), p1.getRight()))     .take(top);    // print the top N words   topFreqWords.subscribe(log::info);  ```    ---  **Affects:** 5.0.1  **Reference URL:** https://github.com/chang-chao/top-freq-words/blob/master/src/main/java/me/changchao/reactive/topfreqwords/TopFreqWordCounter.java","closed","status: invalid,","spring-projects-issues","2017-11-02T01:29:50Z","2019-01-12T05:20:00Z"
"","20804","@CreationTimestamp and @UpdateTimestamp don't work in Spring Kotlin [SPR-16257]","**[cdxf](https://jira.spring.io/secure/ViewProfile.jspa?name=snoobvn)** opened **[SPR-16257](https://jira.spring.io/browse/SPR-16257?redirect=false)** and commented  I tried with Java and it still works, but not with Kotlin. both use Spring Boot 2.0  Kotlin (even with `@Temporal` it doesn't work too):  ```java  @Entity class Post(         @get:NotBlank         var name: String = """",         val content: String = """" ) {     @Id     @GeneratedValue(strategy = GenerationType.SEQUENCE)     val id: Int? = null     @ManyToMany     @Cascade(CascadeType.ALL)     val tags: MutableSet = mutableSetOf()      @CreationTimestamp     lateinit var createDate: Date       @UpdateTimestamp     lateinit var updateDate: Date      fun addTag(tag: Tag) {         this.tags.add(tag)         tag.posts.add(this)     } } ```  The result: !kotlin.png|thumbnail!  Java:  ```java  @Entity public class Post {      public Post(@NotBlank String name, String content) {         this.name = name;         this.content = content;     }      public void addTag(Tag tag) {         this.tags.add(tag);         tag.posts.add(this);     }      @Id     @GeneratedValue(strategy = GenerationType.SEQUENCE)     Integer id;     @NotBlank     String name;     String content;     @ManyToMany     @JoinColumn(name=""tags"")     @Cascade(CascadeType.ALL)     public Set tags = new HashSet();      @CreationTimestamp     @Temporal(TemporalType.TIMESTAMP)     @Column(name = ""created"")     Date createDate;     @Column(name = ""updated"")     @UpdateTimestamp     Date updateDate; } ```  The result:  !java.png|thumbnail!  Below is my sample project: [^project.zip]   ---  **Affects:** 5.0.2  **Attachments:** - [java.png](https://jira.spring.io/secure/attachment/25312/java.png) (_3.71 kB_) - [kotlin.png](https://jira.spring.io/secure/attachment/25311/kotlin.png) (_3.44 kB_) - [project.zip](https://jira.spring.io/secure/attachment/25313/project.zip) (_56.62 kB_)","closed","status: invalid,","spring-projects-issues","2017-12-03T08:53:18Z","2019-01-12T05:19:49Z"
"","21102","Missing PersistenceException cause message in refresh failure warn log [SPR-16559]","**[cda](https://jira.spring.io/secure/ViewProfile.jspa?name=cdalxndr)** opened **[SPR-16559](https://jira.spring.io/browse/SPR-16559?redirect=false)** and commented  Logging a **BeanCreationException** containing a **PersistenceException** doesn't log the **PersistenceException**'s cause (a **MappingException** in my case).  Log prints:  > Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory > but the important message is missing (extracted from manual debug):  > org.hibernate.MappingException: Could not determine type for: pse.shop.component.ShopComponent, at table: shop_template_component, for columns: [org.hibernate.mapping.Column(component)]  From my investigation, the issue is in **NestedExceptionUtls.java**, line 52:  > sb.append(""nested exception is "").append(cause); > where **cause** is an instance of **PersistenceException**, but **PersistenceException.toString()** doesn't contain the cause string.  This issue adds development overhead requiring manual debug to extract the exception message.   ---  **Affects:** 4.3.14, 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb9c43dcbcefee27509d0e1707ed67ca699f6fe1, https://github.com/spring-projects/spring-framework/commit/c15f23bf0ccad29461b59b64ae4f04bc58c1befe  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-06T14:45:33Z","2018-04-03T20:34:28Z"
"","20911","Null path after UriComponents.normalize() results in NullPointerException [SPR-16364]","**[cda](https://jira.spring.io/secure/ViewProfile.jspa?name=cdalxndr)** opened **[SPR-16364](https://jira.spring.io/browse/SPR-16364?redirect=false)** and commented  Test case:  ```java UriComponents uri1 = UriComponentsBuilder.fromUriString( ""http://test.com"" ).build().normalize(); UriComponents uri2 = UriComponentsBuilder.fromUriString( ""http://test.com/"" ).build(); assert !uri1.equals( uri2 ); ```  Throws:  ```java java.lang.NullPointerException 	at org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.equals(HierarchicalUriComponents.java:700) 	at org.springframework.web.util.HierarchicalUriComponents.equals(HierarchicalUriComponents.java:464) ... ```  Also, this code throws NullPointerException:  ```java UriComponentsBuilder.fromUriString( ""http://test.com"" ).build().normalize().getPathSegments() ```  ---  **Affects:** 4.3.12  **Issue Links:** - #20099 Introduce null-safety of Spring Framework API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93f645800b09917be14b0f2a0cf614f495b87c93, https://github.com/spring-projects/spring-framework/commit/f68fdd4454309657fe63006f27e51f67bec2414b","closed","type: bug,","spring-projects-issues","2018-01-11T11:50:53Z","2019-01-11T15:17:48Z"
"","20775","Could not autowire @Configurable bean when running testng tests with two contexts [SPR-16227]","**[cda](https://jira.spring.io/secure/ViewProfile.jspa?name=cdalxndr)** opened **[SPR-16227](https://jira.spring.io/browse/SPR-16227?redirect=false)** and commented  Environment: Spring boot 1.5.8.RELEASE, TestNg 6.11  Use case: Aspects are weaved at compile time. I run a set of tests, having some classes annotated with `@SpringBootTest`, and one with `@WebMvcTest`.  From my investigation: Tests run fine with first application context made for tests with `@SpringBootTest`, but reaching the class with `@WebMvcTest`, a new context is created, with a new bean factory. When configuring the new context, a AnnotationBeanConfigurerAspect bean is requested from SpringConfiguredConfiguration.beanConfigurerAspect():  ```java public AnnotationBeanConfigurerAspect beanConfigurerAspect() {      return AnnotationBeanConfigurerAspect.aspectOf(); } ```  AnnotationBeanConfigurerAspect.aspectOf() resturns the same instance (singleton pattern) as the previous context was using: (decompiled code)  ```java public static AnnotationBeanConfigurerAspect aspectOf() {     if (ajc$perSingletonInstance == null) {         throw new NoAspectBoundException(""org_springframework_beans_factory_aspectj_AnnotationBeanConfigurerAspect"", ajc$initFailureCause);     } else {         return ajc$perSingletonInstance;     } } ```  After returning the same AnnotationBeanConfigurerAspect instance, the old context bean factory from the BeanConfigurerSupport member is replaced with the newly created one:  ```java public void setBeanFactory(BeanFactory beanFactory) {      this.beanConfigurerSupport.setBeanWiringInfoResolver(new AnnotationBeanWiringInfoResolver());      this.beanConfigurerSupport.setBeanFactory(beanFactory); } ```  Testing continues for other `@SpringBootTest` classes, and it fails autowiring `@Configurable` object, due to replaced bean factory, with the following stack trace:  ```java Error creating bean with name 'pse.shop.product.ProductPersister': Unsatisfied dependency expressed through field 'descriptionService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'pse.shop.product.description.DescriptionService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'pse.shop.product.ProductPersister': Unsatisfied dependency expressed through field 'descriptionService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'pse.shop.product.description.DescriptionService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:588) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:386) 	at org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(BeanConfigurerSupport.java:141) 	at org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect.configureBean(AnnotationBeanConfigurerAspect.aj:63) 	at org.springframework.beans.factory.aspectj.AbstractDependencyInjectionAspect.ajc$afterReturning$org_springframework_beans_factory_aspectj_AbstractDependencyInjectionAspect$2$1ea6722c(AbstractDependencyInjectionAspect.aj:88) 	at pse.shop.product.ProductPersister.(ProductPersister.java:54) 	at pse.shop.product.ProductService.saveProduct_aroundBody0(ProductService.java:52) 	at pse.shop.product.ProductService$AjcClosure1.run(ProductService.java:1) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96cproceed(AbstractTransactionAspect.aj:66) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect$AbstractTransactionAspect$1.proceedWithInvocation(AbstractTransactionAspect.aj:72) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96c(AbstractTransactionAspect.aj:70) 	at pse.shop.product.ProductService.saveProduct(ProductService.java:52) 	at pse.shop.persistance.ProductBuilder.build_aroundBody0(ProductBuilder.java:99) 	at pse.shop.persistance.ProductBuilder$AjcClosure1.run(ProductBuilder.java:1) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96cproceed(AbstractTransactionAspect.aj:66) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect$AbstractTransactionAspect$1.proceedWithInvocation(AbstractTransactionAspect.aj:72) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96c(AbstractTransactionAspect.aj:70) 	at pse.shop.persistance.ProductBuilder.build(ProductBuilder.java:78) 	at pse.shop.product.price.PriceHistoryPersistanceTest.testGetBetweenDate_aroundBody6(PriceHistoryPersistanceTest.java:77) 	at pse.shop.product.price.PriceHistoryPersistanceTest$AjcClosure7.run(PriceHistoryPersistanceTest.java:1) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96cproceed(AbstractTransactionAspect.aj:66) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect$AbstractTransactionAspect$1.proceedWithInvocation(AbstractTransactionAspect.aj:72) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282) 	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96c(AbstractTransactionAspect.aj:70) 	at pse.shop.product.price.PriceHistoryPersistanceTest.testGetBetweenDate(PriceHistoryPersistanceTest.java:77) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108) 	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:209) 	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:175) 	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:221) 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:657) 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869) 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193) 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126) 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109) 	at org.testng.TestRunner.privateRun(TestRunner.java:744) 	at org.testng.TestRunner.run(TestRunner.java:602) 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380) 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375) 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340) 	at org.testng.SuiteRunner.run(SuiteRunner.java:289) 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301) 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226) 	at org.testng.TestNG.runSuites(TestNG.java:1144) 	at org.testng.TestNG.run(TestNG.java:1115) 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129) 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88) 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) 	at com.sun.proxy.$Proxy1.stop(Unknown Source) 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:146) 	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:128) 	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) 	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) 	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) 	at java.lang.Thread.run(Thread.java:748) Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'pse.shop.product.description.DescriptionService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1493) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1104) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585) 	... 82 more ```    ---  **Affects:** 4.3.12  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2017-11-22T22:19:54Z","2019-04-09T12:44:59Z"
"","20627","Clarify Bean destroyMethod documentation [SPR-16078]","**[Cameron Steffen](https://jira.spring.io/secure/ViewProfile.jspa?name=camsteffen)** opened **[SPR-16078](https://jira.spring.io/browse/SPR-16078?redirect=false)** and commented  This paragraph seems to imply that setting `destroyMethod=""""` will **not** disable destroy method inference for `DisposableBean`, `Closeable` and `AutoCloseable` beans.  > To disable destroy method inference for a particular `@Bean`, specify an empty string as the value, e.g. `@Bean`(destroyMethod=""""). Note that the DisposableBean and the Closeable/AutoCloseable interfaces will nevertheless get detected and the corresponding destroy/close method invoked.  ---  **Reference URL:** https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html#destroyMethod--  **Issue Links:** - #14347 Infer ""shutdown()"" as destroy method for convenient EHCache setup using `@Bean` - #14668 Support bean disposal on ApplicationContext shutdown for Closeable beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d1b5b5d2f7cdc12df404648b673adcc073838dd5, https://github.com/spring-projects/spring-framework/commit/dff2c84ed1c241af890c8f5dc50f19894e6a338e  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: documentation,","spring-projects-issues","2017-10-16T19:33:27Z","2019-01-13T05:02:10Z"
"","20885","@JmsListener concurrency property is ignored if DefaultJmsListenerContainerFactory#concurrency is set [SPR-16338]","**[Cameron Mayfield](https://jira.spring.io/secure/ViewProfile.jspa?name=cameronjmayfield)** opened **[SPR-16338](https://jira.spring.io/browse/SPR-16338?redirect=false)** and commented  We are noticing that the concurrency property on a specific **`@JmsListener`** annotation is overwritten by the **DefaultJmsListenerContainerFactory** concurrency value which is set using the _spring.jms.listener.concurrency_ property.  This appears to occur in **DefaultJmsListenerContainerFactory#initializeContainer**.  We were hoping to override the concurrency for a specific **`@JmsListener`** while leaving the others on the default.   ---  **Affects:** 4.3.13  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0747cd6a70a21e61871a093743c9391a8d415882, https://github.com/spring-projects/spring-framework/commit/42dfa4015167a660af102c0ca5064f4268901a1a  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: bug,","spring-projects-issues","2018-01-02T21:37:21Z","2018-01-23T09:33:23Z"
"","21045","MediaType application/json not compatible with application/hal+json [SPR-16502]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-16502](https://jira.spring.io/browse/SPR-16502?redirect=false)** and commented  I could be wrong but I think the thing in the mime type after the / but before a + usually represents a sub format, thus something like application/hal+json is always compatible with application/json.  this code however,  ```     @Test     public void root() throws Exception {         String expected = ""http://localhost/v0/public/authentication/password"";         mvc.perform( get( Routes.PUBLIC ) ).andExpect( status().isOk() )             .andExpect( content().contentTypeCompatibleWith( MediaType.APPLICATION_JSON ) )             .andExpect( jsonPath( ""$._links.login.href"", is( expected ) ) );          verify( ctrl, times( 1 ) ).index( any( HttpServletRequest.class ) );     } ```  fails with  ``` MockHttpServletResponse:            Status = 200     Error message = null           Headers = {Cache-Control=[no-cache], Content-Type=[application/hal+json;charset=UTF-8]}      Content type = application/hal+json;charset=UTF-8              Body = {""_links"":{""login"":{""href"":""http://localhost/v0/public/authentication/password""}}}     Forwarded URL = null    Redirected URL = null           Cookies = []  java.lang.AssertionError: Content type [application/hal+json;charset=UTF-8] is not compatible with [application/json] ```  glancing at the code it seems like these are composed of a static map, however it might be better to attempt to actually parse the string to remove `hal+` which would then reduce it to a match `application/json`  my understanding of mime types could be completely wrong   --- No further details from [SPR-16502](https://jira.spring.io/browse/SPR-16502?redirect=false)","closed","status: declined,","spring-projects-issues","2018-02-15T06:13:30Z","2019-01-12T16:21:47Z"
"","20883","Ability to provide an external base path for controllers [SPR-16336]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-16336](https://jira.spring.io/browse/SPR-16336?redirect=false)** and commented  I'm certain wrote, or commented on a similar bug that I currently can't find. I'd like the ability to do this with classes annotated with `@Controller`, and perhaps separately for `@RestController`.  ``` @Configuration class RestConfig extends RepositoryRestConfigurerAdapter {      public void configureRepositoryRestConfiguration( RepositoryRestConfiguration config ) {         config.setBasePath( Routes.PRIVATE );     } } ```  in this way one could write a generic controller with a known subpath, such as /register, but then attach it in the final application as, in my case, /v0/public/register. Suggestions for more flexibility might be a way to setBasePath, explicitly based on annotation.  so you could write `config.setBasePath( PublicController.class, ""/v0/public"" )` where `@PublicController` is an extension of `@Controller`, or maybe it'd just be a good idea to allow it for the specific class instead  one of the reasons I have this problem is I'm modularizing all of my components, but now I have to ensure that these paths are configured properly for hateoas before writing a controller, because the controllers path is static, thus changes to hateoas roots for links have to be made before the controller for tests. If I could change the base path of the controller later then I could bundle the controllers under a configuration, and they'd  be more reusable modules between apps, and completely configurable.  ---  **Affects:** 5.0.2  **Issue Links:** - #20691 ""No matching handler"" when override method getServletMapping() in AbstractAnnotationConfigDispatcherHandlerInitializer"" - #19231 support for providing a path component on a package-info (_**""supersedes""**_) - #18455 Support default URI prefix for web service `@RequestMapping` (_**""supersedes""**_) - #20467 Handle `@RequestMapping` at package level (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58cce615f54418fabd9f3b5d3fb19dcd8456c6a1, https://github.com/spring-projects/spring-framework/commit/928b7804c836b818d363abca0168c35b7a8702b4, https://github.com/spring-projects/spring-framework/commit/86c861516d55c69bae0150271c1a10d40afa726e, https://github.com/spring-projects/spring-framework/commit/d196cdc5cde22308d60fb3eae1bc3e54ccf6bb0a, https://github.com/spring-projects/spring-framework/commit/19dc981685508bd806f63569dac31b58b6282849, https://github.com/spring-projects/spring-framework/commit/31159a8506de42d2a0d3b63efae4c8716453d345, https://github.com/spring-projects/spring-framework/commit/e6fef9555da4f887eb1cfa37428c97e6d2d430d2  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2017-12-30T18:07:47Z","2019-01-13T04:56:45Z"
"","20423","Better exception for bean that doesn't match due to signature [SPR-15868]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-15868](https://jira.spring.io/browse/SPR-15868?redirect=false)** and commented  given this  ```java @Configuration public class LuceneRepositoryConfiguration {      private final boolean test;      public LuceneRepositoryConfiguration( @Value( ""#{environment.acceptsProfiles('test')}"" ) boolean test ) {         this.test = test;     }      @Bean     public LuceneSpecificationExecutor providerTestLuceneRepository() {         return new LuceneRepository<>( ProviderTest.class, test );     } } ```  and this constructor injection  ```java public ZCodeDetailTestsOfferedViewModel(         IPrincipalService principalService,         ProviderTestRepository providerTestRepository,         LuceneRepository providerTestLuceneRepository,         IProviderTestService providerTestService,         ObjectFactory now ) {     this.principalService = principalService;     this.providerTestRepository = providerTestRepository;     this.providerTestLuceneRepository = providerTestLuceneRepository;     this.providerTestService = providerTestService;     this.now = now; } ```  I get this exception  ``` Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.mckesson.dex.repository.lucene.LuceneRepository' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1493) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1104) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) 	... 44 more ```  now I agree this shouldn't work, but I'm wondering if it would be possible to find out that concrete class exists as a bean in the context, but has returned a different signature, and instead say ""signature mismatch"" or ""type mismatch"" with better information. If it's not possible or would be too expensive I can accept that.   --- No further details from [SPR-15868](https://jira.spring.io/browse/SPR-15868?redirect=false)","open","in: core,","spring-projects-issues","2017-08-16T18:43:04Z","2019-01-11T18:07:54Z"
"","20419","allow @Repository on a Java Config method [SPR-15864]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-15864](https://jira.spring.io/browse/SPR-15864?redirect=false)** and commented  We use Lucene with Hibernate Search. Currently I'm implementing a ""Repository"", in spirit of Spring Data JPA, but specific to doing the lucene queries. Turns out for lucene, we only need Specification like behavior (at least right now, maybe someday I'll write something that can execute string queries). Since No methods are required beyond the base ones to execute, we've decided that maybe it's best not to create a subclass just for that. The first of these has thus ended up like this.  ``` @Configuration public class LuceneRepositoryConfiguration {      @Bean     public LuceneSpecificationExecutor providerTestLuceneRepository() { // ProviderTest is one of our entities         return new LuceneRepository<>( ProviderTest.class );     } } ```  However, since Hibernate Search does like run hibernate queries, it would be nice if this was wrapped in Springs Exception Wrapper, which happens automatically with `@Repository` for this reason I'm asking that `@Repository` be allowed on methods in `@Configuration` classes. (I'm honestly not sure why `@Bean` is needed, and why that couldn't have always been `@Component`   ---  **Affects:** 4.3.10","open","in: core,","spring-projects-issues","2017-08-14T18:39:45Z","2021-11-12T12:16:57Z"
"","20632","@ModelAttribute binding defined globally for particular attribute rather than per method invocation [SPR-16083]","**[Brice Roncace](https://jira.spring.io/secure/ViewProfile.jspa?name=broncace)** opened **[SPR-16083](https://jira.spring.io/browse/SPR-16083?redirect=false)** and commented  Given this test controller (and java bean):  ``` @Controller public class TestController {    public static class Bean {     private Long id;      public Long getId() {       return id;     }      public void setId(Long id) {       this.id = id;     }      @Override     public String toString() {       return ""Bean{"" + ""id="" + id + '}';     }   }    @ModelAttribute   public Bean prepareBean() {     return new Bean();   }    @ModelAttribute   public void prepareBean2(@ModelAttribute(binding=false) Bean bean) {     System.out.println(""prepareBean2: "" + bean);   }    @GetMapping(""/bindTest"")   public String editBean(@ModelAttribute(binding=true) Bean bean, BindingResult br) {     System.out.println(""Inside editBean: "" + bean);     System.out.println(br.getAllErrors());     return ""index"";   } } ```  When exercising this controller with `bindTest?id=1` no binding will occur because the `prepareBean2` method disables binding for the `bean` model attribute even though a subsequent use of the `@ModelAttribute` in the `editBean` method expects binding to occur.  The unsatisfactory workarounds are to allow binding and insert an ignored `BindingResult` parameter in the `prepareBean2` method so that if binding errors occur, they can be handled in the `editBean` method where they are expected:  ```   @ModelAttribute   public Bean prepareBean() {     return new Bean();   }    @ModelAttribute   public void prepareBean2(@ModelAttribute Bean bean, BindingResult ignore) {     System.out.println(""prepareBean2: "" + bean);   }    @GetMapping(""/bindTest"")   public String editBean(@ModelAttribute Bean bean, BindingResult br) {     System.out.println(""Inside editBean: "" + bean);     System.out.println(br.getAllErrors());     return ""index"";   } ```  Or pull the `bean` out of the model to prevent binding in the `prepareBean2` method:  ```   @ModelAttribute   public Bean prepareBean() {     return new Bean();   }    @ModelAttribute   public void prepareBean2(Model m) {     Object bean = m.asMap().get(""bean"");     System.out.println(""prepareBean2: "" + bean);   }    @GetMapping(""/bindTest"")   public String editBean(@ModelAttribute Bean bean, BindingResult br) {     System.out.println(""Inside editBean: "" + bean);     System.out.println(br.getAllErrors());     return ""login"";   } ```  Note: in a real-world example these two `@ModelAttribute` annotated methods would not appear in the same class (e.g. `@ControllerAdvice` would apply the initial `prepareBean` method).  ---  **Issue Links:** - #17982 Prevent binding for `@ModelAttribute`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0ae8f6058431c5c4e9757dc49eb5f55cca1b6aa, https://github.com/spring-projects/spring-framework/commit/bec1fc18523e518caa62d4a952b759fe3d5f02e1  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: bug,","spring-projects-issues","2017-10-17T15:29:08Z","2019-01-13T05:01:53Z"
"","20473","only one MultipartFile object populated when using an java.util.Optional MutipartFile array or list @RequestParam [SPR-15919]","**[Brice Roncace](https://jira.spring.io/secure/ViewProfile.jspa?name=broncace)** opened **[SPR-15919](https://jira.spring.io/browse/SPR-15919?redirect=false)** and commented  Having the `multipart/form-data` form:  ``` "" method=""post"" enctype=""multipart/form-data"">           ```  When selecting multiple files for the file input, only one file is actually received by the controller when handling this request:  ```  // Does NOT work for multiple files (only one comes in) @PostMapping(""/optionalPost"") public String postTest2(@RequestParam Optional> files) {   if (files != null && files.isPresent()) {     System.out.println(files.get().size());     files.get().forEach(file -> System.out.println(file.getOriginalFilename()));   }   return ""index""; } ```  This fails in the same way:  ``` // Does NOT work for multiple files (only one comes in) @PostMapping(""/optionalPost"") public String postTest3(@RequestParam Optional files) {   if (files != null && files.isPresent()) {     System.out.println(files.get().length);     Stream.of(files.get()).forEach(file -> System.out.println(file.getOriginalFilename()));   }   return ""index""; } ```  The workaround is to avoid the use of `Optional`:  ``` // Works for multiple files @PostMapping(""/optionalPost"") public String postTest4(@RequestParam MultipartFile[] files) {   System.out.println(files.length);   Stream.of(files).forEach(file -> System.out.println(file.getOriginalFilename()));   return ""index""; } ```  ``` // Works for multiple files @PostMapping(""/optionalPost"") public String postTest5(@RequestParam List files) {   System.out.println(files.size());   files.forEach(file -> System.out.println(file.getOriginalFilename()));   return ""index""; } ```  ---  **Affects:** 4.3.10  **Issue Links:** - #20235 Request params Optional and List are inconsistent - #20472 java.util.Optional MultipartFile[] `@RequestParam` argument is null in multipart/form-data POST  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/53a9697ff1437896ae323b0108c8b82a2ba1c551, https://github.com/spring-projects/spring-framework/commit/15c82afc1cdedc95b453e8f4ca61fd72f4a3ae82  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","type: bug,","spring-projects-issues","2017-08-31T14:06:39Z","2019-01-13T05:05:11Z"
"","20472","java.util.Optional MultipartFile[] @RequestParam argument is null in multipart/form-data POST [SPR-15918]","**[Brice Roncace](https://jira.spring.io/secure/ViewProfile.jspa?name=broncace)** opened **[SPR-15918](https://jira.spring.io/browse/SPR-15918?redirect=false)** and commented  If an `Optional` `@RequestParam` is not present in the request parameters, that value should be `Optional.EMPTY` as opposed to `null`. However, an `Optional` or `Optional>` parameter on a controller method handling a POSTed multipart/form-data request is NOT converting that parameter to Optional.EMPTY as expected but leaving it `null`.  ---  **Affects:** 4.3.10  **Reference URL:** https://stackoverflow.com/q/45949393/225217  **Issue Links:** - #20235 Request params Optional and List are inconsistent - #20876 Empty List instead of null in List files - #20473 only one MultipartFile object populated when using an java.util.Optional MutipartFile array or list `@RequestParam`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15c82afc1cdedc95b453e8f4ca61fd72f4a3ae82, https://github.com/spring-projects/spring-framework/commit/53a9697ff1437896ae323b0108c8b82a2ba1c551  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","type: bug,","spring-projects-issues","2017-08-31T03:17:04Z","2019-01-13T05:13:20Z"
"","20741","SAMLContextProviderLB LPRequestWrapper.getRequestURI does not match expected behaviour of underlying class [SPR-16193]","**[Brian Stocco](https://jira.spring.io/secure/ViewProfile.jspa?name=bjstocco)** opened **[SPR-16193](https://jira.spring.io/browse/SPR-16193?redirect=false)** and commented  The org.springframework.security.saml.context.SAMLContextProviderLB.LPRequestWrapper class extends HttpServletRequestWrapper, but its getRequestURI method does not return the URI in the way described by HttpServletRequestWrapper and the HttpServletRequest interface.  The getRequestURI should return ""the part of this request's URL from the protocol name up to the query string"" according to the [Javadoc for HTTPServletRequest](https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getRequestURI--), but the implementation in this class leaves out the path information.  Also, the non-load balancing version of this class: org.springframework.security.saml.context.SAMLContextProviderImpl passes along just the unwrapped HttpServletRequest, so if you retrieve the request objects from SAMLMessageContext later there is different results in the getRequestURI method between the load balancing and non-load balancing classes.  This was found in spring-security-saml2-core-1.0.2.RELEASE  The getRequestURI method could be updated to include the path information as well, example below:  ``` @Override public String getRequestURI() {     StringBuilder sb = new StringBuilder(contextPath);     sb.append(getServletPath());     if (getPathInfo() != null) sb.append(getPathInfo());     return sb.toString(); } ```  but I don't see a need to override it at all since it does not return any information about the hostname, port etc that would need to be modified to work with load balancing like the getRequestURL method does. Additional note, I think getRequestURL should return a string rather than a StringBuffer.   --- No further details from [SPR-16193](https://jira.spring.io/browse/SPR-16193?redirect=false)","closed","status: invalid,","spring-projects-issues","2017-11-13T23:43:03Z","2019-01-12T05:19:54Z"
"","20514","TaskExecutorRegistration.getTaskExecutor() overrides executor properties of a provided ThreadPoolTaskExecutor [SPR-15962]","**[Brian Stocco](https://jira.spring.io/secure/ViewProfile.jspa?name=bjstocco)** opened **[SPR-15962](https://jira.spring.io/browse/SPR-15962?redirect=false)** and commented  When configuring the threadpool for the websocket clientOutboundChannel for example I will override public void configureClientOutboundChannel(ChannelRegistration registration). On the ChannelRegistration I can call taskExecutor(taskExecutor) and provide a ThreadPoolTaskExecutor which is set in the the ChannelRegistration's TaskExecutorRegistration.  However, when the getTaskExecutor() method is called on the TaskExecutorRegistration my ThreadPoolTaskExecutor is used, but the default settings for the TaskExecutorRegistration then immediately override whatever was set on the ThreadPoolTaskExecutor I provided.  This doesn't seem like the intended logic. I would expect to either provide the settings to the TaskExecutorRegistration and have it create a ThreadPoolTaskExecutor with those settings for me, or provide my own ThreadPoolTaskExecutor object, but I would not expect to have some settings overridden on the provided ThreadPoolTaskExecutor.  I encountered this in 4.2.9, but the latest source code in Github still seems to have this issue.  ---  **Affects:** 4.2.9  **Issue Links:** - #20517 JmsMessagingTemplate is not correctly configured - #20527 ChannelRegistration.setInterceptors is misnamed  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d11bd64e0d9bc4388d462dfd7cc42f537cb7caf4, https://github.com/spring-projects/spring-framework/commit/ac9cfefaffb78cb26c3a755f4594b1a113a97144  **Backported to:** [4.3.12](https://github.com/spring-projects/spring-framework/milestone/161?closed=1)","closed","type: bug,","spring-projects-issues","2017-09-14T16:34:58Z","2019-01-11T18:09:16Z"
"","21084","missing request information while handling Tomcat Async operation timeout [SPR-16541]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16541](https://jira.spring.io/browse/SPR-16541?redirect=false)** and commented  This is a repro case extracted out of a [failing Spring Cloud test](https://github.com/spring-cloud/spring-cloud-netflix/blob/1080a1d/spring-cloud-netflix-core/src/test/java/org/springframework/cloud/netflix/hystrix/HystrixWebfluxEndpointTests.java) (NPEs in the Spring Boot Metrics support).  When a WebFlux application, running on Tomcat, streams data to the client and the client disconnects, an Async operation timeout exception is fired by Tomcat and is propagated through our request handling chain.  In this case, a `WebFilter` is trying to access to the `ServerWebExchange` (actually, the request information) from a `doOnError` callback.  [This repro case](https://github.com/bclozel/spring-framework/tree/SPR-16541) shows that while the `doOnError` is processed, the Tomcat request is recycled and the request information is lost. I can't currently pinpoint the exact origin of this issue - and depending on it, we could probably write a much more contained test for this. Note that this repro case does not fail currently but logs the exception in the console.  Here is the complete stacktrace showing that the request information is missing from within a `doOnError` callback.  ``` 21:56:37.449 [http-nio-auto-1-exec-2] ERROR org.springframework.http.server.reactive.ServletHttpHandlerAdapter - Handling completed with error java.lang.AssertionError:  Expected: equalToIgnoringCase(""GET"")      but: was null 	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20) ~[hamcrest-all-1.3.jar:1.3] 	at org.junit.Assert.assertThat(Assert.java:956) ~[junit-4.12.jar:4.12] 	at org.junit.Assert.assertThat(Assert.java:923) ~[junit-4.12.jar:4.12] 	at org.springframework.web.reactive.TomcatAsyncTimeoutWebFilterIntegrationTests$2.lambda$filter$0(TomcatAsyncTimeoutWebFilterIntegrationTests.java:99) ~[classes/:?] 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:198) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:207) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.onError(ChannelSendOperator.java:336) [classes/:?] 	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1309) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at org.springframework.http.server.reactive.WriteResultPublisher$State.publishError(WriteResultPublisher.java:240) [classes/:?] 	at org.springframework.http.server.reactive.WriteResultPublisher.publishError(WriteResultPublisher.java:79) [classes/:?] 	at org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State.onError(AbstractListenerWriteFlushProcessor.java:315) [classes/:?] 	at org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.onError(AbstractListenerWriteFlushProcessor.java:78) [classes/:?] 	at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.handleError(ServletServerHttpResponse.java:208) [classes/:?] 	at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.onTimeout(ServletServerHttpResponse.java:196) [classes/:?] 	at org.apache.catalina.core.AsyncListenerWrapper.fireOnTimeout(AsyncListenerWrapper.java:44) [tomcat-embed-core-8.5.28.jar:8.5.28] 	at org.apache.catalina.core.AsyncContextImpl.timeout(AsyncContextImpl.java:136) [tomcat-embed-core-8.5.28.jar:8.5.28] 	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:153) [tomcat-embed-core-8.5.28.jar:8.5.28] 	at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:227) [tomcat-embed-core-8.5.28.jar:8.5.28] 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53) [tomcat-embed-core-8.5.28.jar:8.5.28] 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.28.jar:8.5.28] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.28.jar:8.5.28] 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.28.jar:8.5.28] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-util-8.5.28.jar:8.5.28] 	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_162] 	Suppressed: java.lang.AssertionError:  Expected: equalToIgnoringCase(""GET"")      but: was null 		at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20) ~[hamcrest-all-1.3.jar:1.3] 		at org.junit.Assert.assertThat(Assert.java:956) ~[junit-4.12.jar:4.12] 		at org.junit.Assert.assertThat(Assert.java:923) ~[junit-4.12.jar:4.12] 		at org.springframework.web.reactive.TomcatAsyncTimeoutWebFilterIntegrationTests$1.lambda$handle$1(TomcatAsyncTimeoutWebFilterIntegrationTests.java:80) ~[classes/:?] 		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:198) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 		at org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.onError(ChannelSendOperator.java:336) [classes/:?] 		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1309) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 		at org.springframework.http.server.reactive.WriteResultPublisher$State.publishError(WriteResultPublisher.java:240) [classes/:?] 		at org.springframework.http.server.reactive.WriteResultPublisher.publishError(WriteResultPublisher.java:79) [classes/:?] 		at org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State.onError(AbstractListenerWriteFlushProcessor.java:315) [classes/:?] 		at org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.onError(AbstractListenerWriteFlushProcessor.java:78) [classes/:?] 		at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.handleError(ServletServerHttpResponse.java:208) [classes/:?] 		at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.onTimeout(ServletServerHttpResponse.java:196) [classes/:?] 		at org.apache.catalina.core.AsyncListenerWrapper.fireOnTimeout(AsyncListenerWrapper.java:44) [tomcat-embed-core-8.5.28.jar:8.5.28] 		at org.apache.catalina.core.AsyncContextImpl.timeout(AsyncContextImpl.java:136) [tomcat-embed-core-8.5.28.jar:8.5.28] 		at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:153) [tomcat-embed-core-8.5.28.jar:8.5.28] 		at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:227) [tomcat-embed-core-8.5.28.jar:8.5.28] 		at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53) [tomcat-embed-core-8.5.28.jar:8.5.28] 		at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.28.jar:8.5.28] 		at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.28.jar:8.5.28] 		at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.28.jar:8.5.28] 		at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162] 		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162] 		at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-util-8.5.28.jar:8.5.28] 		at java.lang.Thread.run(Thread.java:748) [?:1.8.0_162] 		Suppressed: java.lang.IllegalStateException: Async operation timeout. 			at org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.onTimeout(ServletServerHttpResponse.java:195) [classes/:?] 			at org.apache.catalina.core.AsyncListenerWrapper.fireOnTimeout(AsyncListenerWrapper.java:44) [tomcat-embed-core-8.5.28.jar:8.5.28] 			at org.apache.catalina.core.AsyncContextImpl.timeout(AsyncContextImpl.java:136) [tomcat-embed-core-8.5.28.jar:8.5.28] 			at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:153) [tomcat-embed-core-8.5.28.jar:8.5.28] 			at org.apache.coyote.AbstractProcessor.dispatch(AbstractProcessor.java:227) [tomcat-embed-core-8.5.28.jar:8.5.28] 			at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:53) [tomcat-embed-core-8.5.28.jar:8.5.28] 			at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.28.jar:8.5.28] 			at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.28.jar:8.5.28] 			at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.28.jar:8.5.28] 			at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_162] 			at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_162] 			at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-util-8.5.28.jar:8.5.28] 			at java.lang.Thread.run(Thread.java:748) [?:1.8.0_162] 21:56:37.456 [http-nio-auto-1-exec-2] DEBUG org.springframework.http.server.reactive.ServletHttpHandlerAdapter - Timeout notification from Servlet container ```    ---  **Affects:** 5.0.4","closed","status: invalid,","spring-projects-issues","2018-02-27T20:59:40Z","2019-01-12T05:19:19Z"
"","21081","[docs] Document threading model in Spring WebFlux [SPR-16538]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16538](https://jira.spring.io/browse/SPR-16538?redirect=false)** and commented  Because the Spring team is communicating about the pros/cons of the async, non-blocking runtime model, developers are paying more attention to available threads in their WebFlux applications.  [Here is an example of a StackOverflow question about this theme](https://stackoverflow.com/questions/45019486/threading-model-of-spring-webflux-and-reactor).  Per my comment on that question, I don't think we can document everything here, since we rely on the underlying web server, datastore drivers, and much more (and all of those might depend on the operating system). Developers can also apply scheduling operators on the pipeline, which will change the picture when looking at application threads.  Currently, libraries like Reactor and Reactor Netty don't document this in details.  On the other hand, our reference documentation could have a few pointers and explain:  * the general threading model and how libraries, choice of operators and operating systems can change the picture * that one should not use `block` or `subscribe` operators within WebFlux Controllers * how `publishOn` and `subscribeOn` operators should be used with great care    ---  **Affects:** 5.0.4  **Reference URL:** https://stackoverflow.com/questions/45019486/threading-model-of-spring-webflux-and-reactor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19875d8e3f4dbeaca6c1441ae204e673a9e0c2b8  1 votes, 3 watchers","closed","type: documentation,","spring-projects-issues","2018-02-26T21:35:59Z","2018-04-03T20:34:29Z"
"","20832","Improve HeaderAssertions for specific tests [SPR-16285]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16285](https://jira.spring.io/browse/SPR-16285?redirect=false)** and commented  While writing test assertions with `WebTestClient`, I've found a few problematic cases with the current API.  ### Testing media types  The existing `contentType` assertion tests for `MediaType` equality between the one provided as an argument and the one returned by the endpoint. This is rather strict (which is good for tests) but can be surprising at times when you're asserting for `""application/json""` and getting an error back because the response header actually was `""application/json;charset=UTF-8""`  ### Testing for a missing header  I'd like to test that a response header is not present; with the current API, all methods test for the presence of a given header name. Adding a new method for that purpose could be useful.  Pinging [rstoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoyanchev) on this since we discussed that previously.  ---  **Affects:** 5.0.2  **Issue Links:** - #20925 WebTestClient - expecting lack of header (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e587d5c57315c026e490474df37523a5ea4aba5","closed","type: enhancement,","spring-projects-issues","2017-12-11T15:36:12Z","2019-01-11T15:13:54Z"
"","20607","WebAsyncManager concurrency issue with SseEmitter when client disconnect [SPR-16058]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16058](https://jira.spring.io/browse/SPR-16058?redirect=false)** and commented  This issue has been [reported first in Spring Boot](https://github.com/spring-projects/spring-boot/issues/10332) with a [repro project](https://github.com/yuryfunikov/spring-sse) (amended with [a pull request](https://github.com/yuryfunikov/spring-sse/pull/1)).  This repro project simulates an SSE client connecting to a Spring MVC handler that uses `SSEEmitter` to stream data to the client. That client randomly disconnects while the server is writing. As expected per the [Servlet spec](https://github.com/javaee/servlet-spec/issues/44), the server isn't notified of that disconnection and has to write to the socket to see that the client is gone.  This sample project shows that sometimes a given, unique request, is re-dispatched on the Spring MVC controller even if the client sent that only once. This goes like this:  First, the client connects and the request is dispatched (note, with the `REQUEST` dispatcher):  ``` 2017-10-10 18:34:11.736  INFO 5560 --- [           main] com.example.demo.SseTest                 : [CLIENT] connecting... 2017-10-10 18:34:11.738 DEBUG 5560 --- [o-auto-1-exec-8] o.s.web.servlet.DispatcherServlet        : DispatcherServlet with name 'dispatcherServlet' processing GET request for [/sse/15] 2017-10-10 18:34:11.738 DEBUG 5560 --- [o-auto-1-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Looking up handler method for path /sse/15 2017-10-10 18:34:11.738 DEBUG 5560 --- [o-auto-1-exec-8] s.w.s.m.m.a.RequestMappingHandlerMapping : Returning handler method [public org.springframework.web.servlet.mvc.method.annotation.SseEmitter com.example.demo.SseController.sseEmitter(int,javax.servlet.http.HttpServletRequest)] 2017-10-10 18:34:11.738 DEBUG 5560 --- [o-auto-1-exec-8] o.s.web.servlet.DispatcherServlet        : Last-Modified value for [/sse/15] is: -1 2017-10-10 18:34:11.739  INFO 5560 --- [o-auto-1-exec-8] com.example.demo.SseController           : [SERVER] /sse/15, server call 15, dispatcher REQUEST 2017-10-10 18:34:11.739  INFO 5560 --- [         SSE-15] com.example.demo.SseController           : [SERVER] next: 0 2017-10-10 18:34:11.739 DEBUG 5560 --- [o-auto-1-exec-8] o.s.w.c.request.async.WebAsyncManager    : Concurrent handling starting for GET [/sse/15] 2017-10-10 18:34:11.740 DEBUG 5560 --- [o-auto-1-exec-8] .a.ResponseBodyEmitterReturnValueHandler : Written [data:] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:11.740 DEBUG 5560 --- [o-auto-1-exec-8] .a.ResponseBodyEmitterReturnValueHandler : Written [next: 0] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:11.740 DEBUG 5560 --- [o-auto-1-exec-8] .a.ResponseBodyEmitterReturnValueHandler : Written [  ] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:11.740 DEBUG 5560 --- [o-auto-1-exec-8] o.s.web.servlet.DispatcherServlet        : Leaving response open for concurrent processing 2017-10-10 18:34:11.740  INFO 5560 --- [           main] com.example.demo.SseTest                 : [CLIENT] client receives: next: 0 ```  Then the client disconnects, and other requests are sent and dispatched properly:  ``` Exception in thread ""SSE-14"" java.lang.IllegalArgumentException: Cannot dispatch without an AsyncContext 	at org.springframework.util.Assert.notNull(Assert.java:134) 	at org.springframework.web.context.request.async.StandardServletAsyncWebRequest.dispatch(StandardServletAsyncWebRequest.java:122) 	at org.springframework.web.context.request.async.WebAsyncManager.setConcurrentResultAndDispatch(WebAsyncManager.java:355) 	at org.springframework.web.context.request.async.WebAsyncManager.access$200(WebAsyncManager.java:59) 	at org.springframework.web.context.request.async.WebAsyncManager$7.handleResult(WebAsyncManager.java:418) 	at org.springframework.web.context.request.async.DeferredResult.setResultInternal(DeferredResult.java:233) 	at org.springframework.web.context.request.async.DeferredResult.setErrorResult(DeferredResult.java:248) 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler$HttpMessageConvertingHandler.completeWithError(ResponseBodyEmitterReturnValueHandler.java:225) 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.completeWithError(ResponseBodyEmitter.java:204) 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.sendInternal(ResponseBodyEmitter.java:169) 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.send(ResponseBodyEmitter.java:159) 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:126) 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:107) 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:89) 	at com.example.demo.SseController.lambda$sseEmitter$0(SseController.java:45) 	at java.lang.Thread.run(Thread.java:748) 2017-10-10 18:34:12.738  INFO 5560 --- [         SSE-14] com.example.demo.SseController           : [SERVER] next: 2 2017-10-10 18:34:12.739 DEBUG 5560 --- [         SSE-14] .a.ResponseBodyEmitterReturnValueHandler : Written [data:] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:12.740  INFO 5560 --- [         SSE-14] o.apache.coyote.http11.Http11Processor   : An error occurred in processing while on a non-container thread. The connection will be closed immediately  java.io.IOException: Broken pipe 	at sun.nio.ch.FileDispatcherImpl.write0(Native Method) ~[na:1.8.0_152-ea] 	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47) ~[na:1.8.0_152-ea] 	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93) ~[na:1.8.0_152-ea] 	at sun.nio.ch.IOUtil.write(IOUtil.java:65) ~[na:1.8.0_152-ea] 	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471) ~[na:1.8.0_152-ea] 	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:134) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:157) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1261) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:670) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:607) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:597) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.coyote.http11.Http11OutputBuffer.flushBuffer(Http11OutputBuffer.java:581) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.coyote.http11.Http11OutputBuffer.flush(Http11OutputBuffer.java:272) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.coyote.http11.Http11Processor.flush(Http11Processor.java:1510) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:283) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.coyote.Response.action(Response.java:173) [tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:317) [tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:284) [tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:118) [tomcat-embed-core-8.5.20.jar:8.5.20] 	at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:297) [na:1.8.0_152-ea] 	at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:141) [na:1.8.0_152-ea] 	at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:229) [na:1.8.0_152-ea] 	at org.springframework.util.StreamUtils.copy(StreamUtils.java:119) [spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:106) [spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:41) [spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:227) [spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler$HttpMessageConvertingHandler.sendInternal(ResponseBodyEmitterReturnValueHandler.java:207) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler$HttpMessageConvertingHandler.send(ResponseBodyEmitterReturnValueHandler.java:200) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.sendInternal(ResponseBodyEmitter.java:166) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.send(ResponseBodyEmitter.java:159) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:126) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:107) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:89) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at com.example.demo.SseController.lambda$sseEmitter$0(SseController.java:45) [classes/:na] 	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_152-ea]  2017-10-10 18:34:12.741 DEBUG 5560 --- [         SSE-14] o.s.w.c.request.async.WebAsyncManager    : Concurrent result value [org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe] - dispatching request to resume processing 2017-10-10 18:34:12.743  INFO 5560 --- [         SSE-15] com.example.demo.SseController           : [SERVER] next: 1 2017-10-10 18:34:12.745 DEBUG 5560 --- [         SSE-15] .a.ResponseBodyEmitterReturnValueHandler : Written [data:] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:12.745 DEBUG 5560 --- [         SSE-15] .a.ResponseBodyEmitterReturnValueHandler : Written [next: 1] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:12.746 DEBUG 5560 --- [         SSE-15] .a.ResponseBodyEmitterReturnValueHandler : Written [  ] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:12.747  INFO 5560 --- [           main] com.example.demo.SseTest                 : [CLIENT] client receives: next: 1 2017-10-10 18:34:12.747  INFO 5560 --- [           main] com.example.demo.SseTest                 : [CLIENT] client closes connection 2017-10-10 18:34:12.747  INFO 5560 --- [           main] com.example.demo.SseTest                 : [CLIENT] connecting... 2017-10-10 18:34:12.750 DEBUG 5560 --- [-auto-1-exec-10] o.s.web.servlet.DispatcherServlet        : DispatcherServlet with name 'dispatcherServlet' processing GET request for [/sse/16] 2017-10-10 18:34:12.750 DEBUG 5560 --- [-auto-1-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Looking up handler method for path /sse/16 2017-10-10 18:34:12.750 DEBUG 5560 --- [-auto-1-exec-10] s.w.s.m.m.a.RequestMappingHandlerMapping : Returning handler method [public org.springframework.web.servlet.mvc.method.annotation.SseEmitter com.example.demo.SseController.sseEmitter(int,javax.servlet.http.HttpServletRequest)] 2017-10-10 18:34:12.751 DEBUG 5560 --- [-auto-1-exec-10] o.s.web.servlet.DispatcherServlet        : Last-Modified value for [/sse/16] is: -1 2017-10-10 18:34:12.751  INFO 5560 --- [-auto-1-exec-10] com.example.demo.SseController           : [SERVER] /sse/16, server call 16, dispatcher REQUEST 2017-10-10 18:34:12.751  INFO 5560 --- [         SSE-16] com.example.demo.SseController           : [SERVER] next: 0 2017-10-10 18:34:12.751 DEBUG 5560 --- [-auto-1-exec-10] o.s.w.c.request.async.WebAsyncManager    : Concurrent handling starting for GET [/sse/16] 2017-10-10 18:34:12.752 DEBUG 5560 --- [-auto-1-exec-10] .a.ResponseBodyEmitterReturnValueHandler : Written [data:] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:12.752 DEBUG 5560 --- [-auto-1-exec-10] .a.ResponseBodyEmitterReturnValueHandler : Written [next: 0] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:12.752 DEBUG 5560 --- [-auto-1-exec-10] .a.ResponseBodyEmitterReturnValueHandler : Written [  ] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:12.752 DEBUG 5560 --- [-auto-1-exec-10] o.s.web.servlet.DispatcherServlet        : Leaving response open for concurrent processing 2017-10-10 18:34:12.752  INFO 5560 --- [           main] com.example.demo.SseTest                 : [CLIENT] client receives: next: 0 2017-10-10 18:34:12.752  INFO 5560 --- [           main] com.example.demo.SseTest                 : [CLIENT] client closes connection 2017-10-10 18:34:12.752  INFO 5560 --- [           main] com.example.demo.SseTest                 : [CLIENT] connecting... 2017-10-10 18:34:12.754 DEBUG 5560 --- [o-auto-1-exec-1] o.s.web.servlet.DispatcherServlet        : DispatcherServlet with name 'dispatcherServlet' processing GET request for [/sse/17] 2017-10-10 18:34:12.755 DEBUG 5560 --- [o-auto-1-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Looking up handler method for path /sse/17 2017-10-10 18:34:12.756 DEBUG 5560 --- [o-auto-1-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Returning handler method [public org.springframework.web.servlet.mvc.method.annotation.SseEmitter com.example.demo.SseController.sseEmitter(int,javax.servlet.http.HttpServletRequest)] 2017-10-10 18:34:12.757 DEBUG 5560 --- [o-auto-1-exec-1] o.s.web.servlet.DispatcherServlet        : Last-Modified value for [/sse/17] is: -1 2017-10-10 18:34:12.758  INFO 5560 --- [o-auto-1-exec-1] com.example.demo.SseController           : [SERVER] /sse/17, server call 17, dispatcher REQUEST 2017-10-10 18:34:12.759  INFO 5560 --- [         SSE-17] com.example.demo.SseController           : [SERVER] next: 0 2017-10-10 18:34:12.760 DEBUG 5560 --- [o-auto-1-exec-1] o.s.w.c.request.async.WebAsyncManager    : Concurrent handling starting for GET [/sse/17] 2017-10-10 18:34:12.761 DEBUG 5560 --- [o-auto-1-exec-1] .a.ResponseBodyEmitterReturnValueHandler : Written [data:] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:12.762 DEBUG 5560 --- [o-auto-1-exec-1] .a.ResponseBodyEmitterReturnValueHandler : Written [next: 0] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:12.762 DEBUG 5560 --- [o-auto-1-exec-1] .a.ResponseBodyEmitterReturnValueHandler : Written [  ] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:12.763 DEBUG 5560 --- [o-auto-1-exec-1] o.s.web.servlet.DispatcherServlet        : Leaving response open for concurrent processing 2017-10-10 18:34:12.763  INFO 5560 --- [           main] com.example.demo.SseTest                 : [CLIENT] client receives: next: 0 2017-10-10 18:34:13.748  INFO 5560 --- [         SSE-15] com.example.demo.SseController           : [SERVER] next: 2 2017-10-10 18:34:13.748 DEBUG 5560 --- [         SSE-15] .a.ResponseBodyEmitterReturnValueHandler : Written [data:] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:13.749  INFO 5560 --- [         SSE-15] o.apache.coyote.http11.Http11Processor   : An error occurred in processing while on a non-container thread. The connection will be closed immediately  java.io.IOException: Broken pipe 	at sun.nio.ch.FileDispatcherImpl.write0(Native Method) ~[na:1.8.0_152-ea] 	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47) ~[na:1.8.0_152-ea] 	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93) ~[na:1.8.0_152-ea] 	at sun.nio.ch.IOUtil.write(IOUtil.java:65) ~[na:1.8.0_152-ea] 	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471) ~[na:1.8.0_152-ea] 	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:134) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:157) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1261) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:670) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:607) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:597) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.coyote.http11.Http11OutputBuffer.flushBuffer(Http11OutputBuffer.java:581) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.coyote.http11.Http11OutputBuffer.flush(Http11OutputBuffer.java:272) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.coyote.http11.Http11Processor.flush(Http11Processor.java:1510) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:283) ~[tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.coyote.Response.action(Response.java:173) [tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:317) [tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:284) [tomcat-embed-core-8.5.20.jar:8.5.20] 	at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:118) [tomcat-embed-core-8.5.20.jar:8.5.20] 	at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:297) [na:1.8.0_152-ea] 	at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:141) [na:1.8.0_152-ea] 	at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:229) [na:1.8.0_152-ea] 	at org.springframework.util.StreamUtils.copy(StreamUtils.java:119) [spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:106) [spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:41) [spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:227) [spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler$HttpMessageConvertingHandler.sendInternal(ResponseBodyEmitterReturnValueHandler.java:207) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler$HttpMessageConvertingHandler.send(ResponseBodyEmitterReturnValueHandler.java:200) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.sendInternal(ResponseBodyEmitter.java:166) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.send(ResponseBodyEmitter.java:159) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:126) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:107) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:89) [spring-webmvc-4.3.11.RELEASE.jar:4.3.11.RELEASE] 	at com.example.demo.SseController.lambda$sseEmitter$0(SseController.java:45) [classes/:na] 	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_152-ea]  2017-10-10 18:34:13.749 DEBUG 5560 --- [         SSE-15] o.s.w.c.request.async.WebAsyncManager    : Concurrent result value [org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe] - dispatching request to resume processing 2017-10-10 18:34:13.749  INFO 5560 --- [         SSE-15] com.example.demo.SseController           : IOException  ```  Right after that, the first request is re-dispatched and re-routed to the Spring MVC Controller handler, this time with the `ASYNC` dispatcher:  ``` 2017-10-10 18:34:13.752 DEBUG 5560 --- [o-auto-1-exec-2] o.s.web.servlet.DispatcherServlet        : DispatcherServlet with name 'dispatcherServlet' processing GET request for [/sse/15] 2017-10-10 18:34:13.752 DEBUG 5560 --- [o-auto-1-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Looking up handler method for path /sse/15 2017-10-10 18:34:13.753 DEBUG 5560 --- [o-auto-1-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Returning handler method [public org.springframework.web.servlet.mvc.method.annotation.SseEmitter com.example.demo.SseController.sseEmitter(int,javax.servlet.http.HttpServletRequest)] 2017-10-10 18:34:13.753 DEBUG 5560 --- [o-auto-1-exec-2] o.s.web.servlet.DispatcherServlet        : Last-Modified value for [/sse/15] is: -1 2017-10-10 18:34:13.753  INFO 5560 --- [         SSE-16] com.example.demo.SseController           : [SERVER] next: 1 2017-10-10 18:34:13.753  INFO 5560 --- [o-auto-1-exec-2] com.example.demo.SseController           : [SERVER] /sse/15, server call 18, dispatcher ASYNC 2017-10-10 18:34:13.753 DEBUG 5560 --- [         SSE-16] .a.ResponseBodyEmitterReturnValueHandler : Written [data:] using [org.springframework.http.converter.StringHttpMessageConverter@7db534f2] 2017-10-10 18:34:13.753 DEBUG 5560 --- [o-auto-1-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolving exception from handler [public org.springframework.web.servlet.mvc.method.annotation.SseEmitter com.example.demo.SseController.sseEmitter(int,javax.servlet.http.HttpServletRequest)]: java.lang.IllegalStateException: Server call 18; client call 15; dispatcher: ASYNC 2017-10-10 18:34:13.754  INFO 5560 --- [         SSE-16] o.apache.coyote.http11.Http11Processor   : An error occurred in processing while on a non-container thread. The connection will be closed immediately ```  This duplicate request should not be routed since an async result (disconnect error) should already have been received at that point.  Note that the logs show other errors, that might be unrelated. It seems we're calling an async dispatch even though the underlying state machine forbids it.  ``` DEBUG 2683 --- [         SSE-10] o.s.w.c.request.async.WebAsyncManager    : Concurrent result value [org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe] - dispatching request to resume processing Exception in thread ""SSE-10"" java.lang.IllegalStateException: Calling [asyncDispatch()] is not valid for a request with Async state [MUST_COMPLETE] 	at org.apache.coyote.AsyncStateMachine.doDispatch(AsyncStateMachine.java:379) 	at org.apache.coyote.AsyncStateMachine.asyncDispatch(AsyncStateMachine.java:347) 	at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:387) 	at org.apache.coyote.Request.action(Request.java:431) 	at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:208) 	at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:176) 	at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:170) 	at org.springframework.web.context.request.async.StandardServletAsyncWebRequest.dispatch(StandardServletAsyncWebRequest.java:123) 	at org.springframework.web.context.request.async.WebAsyncManager.setConcurrentResultAndDispatch(WebAsyncManager.java:355) 	at org.springframework.web.context.request.async.WebAsyncManager.access$200(WebAsyncManager.java:59) 	at org.springframework.web.context.request.async.WebAsyncManager$7.handleResult(WebAsyncManager.java:418) 	at org.springframework.web.context.request.async.DeferredResult.setResultInternal(DeferredResult.java:233) 	at org.springframework.web.context.request.async.DeferredResult.setErrorResult(DeferredResult.java:248) 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler$HttpMessageConvertingHandler.completeWithError(ResponseBodyEmitterReturnValueHandler.java:225) 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.completeWithError(ResponseBodyEmitter.java:204) 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.sendInternal(ResponseBodyEmitter.java:169) 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.send(ResponseBodyEmitter.java:159) 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:126) 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:107) 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:89) 	at com.example.demo.SseController.lambda$sseEmitter$0(SseController.java:45) 	at java.lang.Thread.run(Thread.java:748) ```  Checking our codebase in `WebAsyncManager`, it seems we're entering the `else` condition while the underlying state is changing.  ```         if (this.asyncWebRequest.isAsyncComplete()) {             logger.error(""Could not complete async processing due to timeout or network error"");         } else {             if (logger.isDebugEnabled()) {                 logger.debug(""Concurrent result value ["" + this.concurrentResult + ""] - dispatching request to resume processing"");             }              this.asyncWebRequest.dispatch();         } ```  ---  **Affects:** 4.3.11  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/10332  **Issue Links:** - #20173 Handle onError events that are sent by the servlet containers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97bc2762e15a06802b5b472610bf9bb59f668c03  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2017-10-10T16:56:08Z","2019-01-11T13:12:13Z"
"","20601","Support JDK9 Flow.Publisher as an adaptable reactive type [SPR-16052]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16052](https://jira.spring.io/browse/SPR-16052?redirect=false)** and commented  Currently the `ReactiveAdapterRegistry` supports Reactor, RxJava, all Publisher types, etc.  This issue is about adding an adapter for JDK9 `Flow.Publisher` - [an example of that can be found in Reactor](https://github.com/reactor/reactor-core/blob/master/reactor-core/src/main/java/reactor/adapter/JdkFlowAdapter.java).   ---  **Affects:** 5.0 GA  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2017-10-06T12:38:53Z","2017-10-24T16:24:06Z"
"","20583","resourceHandlerMapping should be registered with shared HandlerInterceptor [SPR-16034]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16034](https://jira.spring.io/browse/SPR-16034?redirect=false)** and commented  In `WebMvcConfigurationSupport`, the resource `HandlerMapping` is only registered with the `ResourceUrlProviderExposingInterceptor` and does not leverage the set of configured interceptors.  Even if `ResourceUrlProviderExposingInterceptor` might be enough for most use cases when serving static resources, registering additional interceptors can be useful for other use cases like metrics.   ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/10335  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1356bd4359ee74a5c93630349d76ced142b994d9","closed","type: enhancement,","spring-projects-issues","2017-10-02T08:06:10Z","2017-10-24T16:24:06Z"
"","20572","ResourceWebHandler should throw ResponseStatusException when resources are not found [SPR-16023]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16023](https://jira.spring.io/browse/SPR-16023?redirect=false)** and commented  Currently `ResourceWebHandler` handles directly the response when resources are not found, sending an HTTP 404 response.  This is technically correct but this prevents from dealing with those in a central place, like a `WebExceptionHandler`. This change is required for a global error handling mechanism such as the one in Spring Boot.   ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/8625  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3febec3df6c95651b3a7183bb1f413a8872d53d1","closed","type: enhancement,","spring-projects-issues","2017-09-28T18:30:15Z","2017-10-24T16:24:06Z"
"","20474","Ensure that WebClient disposes the HTTP client connection once the client response is consumed [SPR-15920]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15920](https://jira.spring.io/browse/SPR-15920?redirect=false)** and commented  ## Problems with the WebClient API  Given the current `WebClient` API, it is possible to have:  ```java Mono result = this.webClient.get() 				.uri(""/greeting"") 				.retrieve() 				.bodyToMono(String.class); ```  In that case, we're consuming the response body completely; under the covers, reactor-netty will dispose the connection (close it or return it to the connection pool) as soon as the body has been consumed.  But we can also do this:  ```java Mono status = this.webClient.get() 				.uri(""/example"") 				.exchange() 				.map(response -> response.statusCode()); ```  In that case, the body is not consumed, and the underlying client has no way of knowing that the connection should be closed. This can lead to issues with the connection pool, memory leaks, etc.  In the `ClientConnector#connect` method, before returning the `ClientHttpResponse`, we could do something like:  ```java responseMono.doOnTerminate((response, ex) -> {   if (response != null) {     response.dispose();   } }) ```  But unfortunately, this will close the connection too soon. The first example can be rewritten like:  ```java Mono> result = this.webClient.get() 				.uri(""/greeting"") 				.exchange() 				.flatMap(response -> response.toEntity(String.class)); ```  With the `flatMap` operator, we wait until the `Mono` is completed and proceed with the body. The completion triggers that `doOnTerminate` operator.  ## Reactor Netty changes  Reactor Netty is currently dealing with this in its API and considering the following changes:  ```java public interface ResponseReceiver  {     // HttpClientResponse has no reference to the body, just headers/status/etc   Mono response();     Flux response(BiFunction> receiver);    ByteBufFlux responseContent();     Mono responseSingle(BiFunction> receiver);  } ```  With this type of changes, the response body `Publisher` is tied back to the lifecycle of the connection.  We need to revisit our current client API to make sure that the connection lifecycle can be properly managed for the underlying client library.  ---  **Issue Links:** - #20511 Allow Consumer-style access to FluxExchangeResult within chain of calls - #20542 Revisit how WebClient disposes connection","closed","type: enhancement,","spring-projects-issues","2017-08-31T21:24:23Z","2019-05-17T15:01:22Z"
"","20462","Enable by default HTTP compression support in Reactor WebClient [SPR-15908]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15908](https://jira.spring.io/browse/SPR-15908?redirect=false)** and commented  The `WebClient` creates a default instance of Reactor's `HttpClient`, which does not enable HTTP compression support by default. We should enable this if users don't provide their own `HttpClientOptions` instance.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bff54788e825a05f4ea617544888c56436c54281","closed","type: enhancement,","spring-projects-issues","2017-08-30T08:38:30Z","2017-09-11T12:09:49Z"
"","20440","Reorganize Gradle build [SPR-15885]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-15885](https://jira.spring.io/browse/SPR-15885?redirect=false)** and commented  After the Gradle 4.1 upgrade, and before we actually release 5.0, our build could use some refactoring, especially anything that speeds things up and make it more idiomatic to avoid future compatibility issues.  * Activate Gradle build scans to check for issues * Do not generate all reference documentation formats for each snapshot build, as it takes a long time * Make sure tests actually run before javadoc/reference doc are generated * reconfigure joint compilation for the spring-beans module and merge it with spring-beans-groovy, as this is not required and tends to confuse IDEs * Only apply dependency management to modules that need it (right now it's applied everywhere) * Break up the (huge) `build.gradle` into smaller, dedicated build files for each module  ---  **Issue Links:** - #20445 no dependencyManagement in spring-framework-bom","closed","type: task,","spring-projects-issues","2017-08-21T12:40:20Z","2019-01-11T18:05:50Z"
"","20454","StringIndexOutOfBoundsException from RestTemplate.doExecute IOException handler when query string is empty [SPR-15900]","**[Brian Bohl](https://jira.spring.io/secure/ViewProfile.jspa?name=bbohl)** opened **[SPR-15900](https://jira.spring.io/browse/SPR-15900?redirect=false)** and commented  The RestTemplate.doExecute IOException handler produces a StringIndexOutOfBoundsException when the URI's query string is an empty string.  See [Pull Request](https://github.com/spring-projects/spring-framework/pull/1504) for test case.   ---  **Affects:** 4.3.10, 5.0 RC3  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1504, and commits https://github.com/spring-projects/spring-framework/commit/f5d689e764b9feebe4595a6f7832238be6cfb68c","closed","type: bug,","spring-projects-issues","2017-08-24T15:03:13Z","2017-09-11T09:13:05Z"
"","20448","ClassCastException in CacheAspectSupport interferes with troubleshooting [SPR-15894]","**[Bradley Plies](https://jira.spring.io/secure/ViewProfile.jspa?name=bplies)** opened **[SPR-15894](https://jira.spring.io/browse/SPR-15894?redirect=false)** and commented  Discovered in a few different scenarios  ``` java.lang.ClassCastException: org.springframework.data.redis.RedisConnectionFailureException cannot be cast to org.springframework.cache.interceptor.CacheOperationInvoker$ThrowableWrapper   at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:374)   at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:327)   at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ```  and  ``` java.lang.ClassCastException: redis.clients.jedis.exceptions.JedisException cannot be cast to org.springframework.cache.interceptor.CacheOperationInvoker$ThrowableWrapper   at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:374)   at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:327)   at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)  ```  Because of the CCE pertinent details of the true Exception are lost in typical logging which makes troubleshooting very difficult.  I was last able to reproduce the the issue with the following setup 4.3.8.RELEASE spring-boot-starter-data-redis:1.5.4.RELEASE Redis 3.2.8 with a Redis Sentinel setup  * Arrange your Redis instances such that the master is not on the default Redis port of 6379 * Misconfigure your App such that it will assume usage of port 6379 * Enable caching on something * Trigger a cache put * An Exception should be thrown because you will attempt to write to a read-only slave instance * The Exception encounters the CCE  There are other scenarios I've encountered that also lead to a CCE but none that I can recall reproducible steps for.  Offending line: https://github.com/spring-projects/spring-framework/blob/4.3.x/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java#L374   ---  **Affects:** 4.3.8","open","in: core,","spring-projects-issues","2017-08-24T04:22:27Z","2019-01-11T18:04:41Z"
"","20892","EhCacheManagerFactoryBean cannot work with Tomcat 9.0.2 [SPR-16345]","**[Boreas](https://jira.spring.io/secure/ViewProfile.jspa?name=boreas)** opened **[SPR-16345](https://jira.spring.io/browse/SPR-16345?redirect=false)** and commented  The problem can be reproduced like this  ```java EhCacheManagerFactoryBean bean = new EhCacheManagerFactoryBean(); // class in spring-context-4.3.10.RELEASE  System.out.println(bean instanceof EhCacheManagerFactoryBean); // true  System.out.println(bean instanceof FactoryBean); // true  System.out.println(FactoryBean.class.isAssignableFrom(EhCacheManagerFactoryBean.class); // true   bean.getObject(); // throw NoSuchMethodError   ((FactoryBean) bean).getObject();  // No exception ```    ---  **Affects:** 4.3.10","closed","in: core,","spring-projects-issues","2018-01-04T12:04:05Z","2019-01-11T15:20:10Z"
"","20456","NullpointerException after request endpoint using @EnableAsync with WebFlux [SPR-15902]","**[Bogdan Fedoronchuk ](https://jira.spring.io/secure/ViewProfile.jspa?name=bfedoronchuk)** opened **[SPR-15902](https://jira.spring.io/browse/SPR-15902?redirect=false)** and commented  `@SpringBootApplication` `@EnableAsync` public class Starter { public static void main(String[] args) { SpringApplication.run(Starter.class, args); } }  ---  Stacktrace: java.lang.NullPointerException: null at org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter.handle(HandlerFunctionAdapter.java:62) ~[spring-webflux-5.0.0.RC3.jar:5.0.0.RC3] at org.springframework.web.reactive.DispatcherHandler.invokeHandler(DispatcherHandler.java:137) ~[spring-webflux-5.0.0.RC3.jar:5.0.0.RC3] at org.springframework.web.reactive.DispatcherHandler.lambda$handle$1(DispatcherHandler.java:130) ~[spring-webflux-5.0.0.RC3.jar:5.0.0.RC3] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:270) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:790) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1567) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1381) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1255) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.Mono.subscribe(Mono.java:2769) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:414) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:91) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:55) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.Mono.subscribe(Mono.java:2769) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:165) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:380) ~[reactor-netty-0.7.0.M1.jar:0.7.0.M1] at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:354) ~[reactor-netty-0.7.0.M1.jar:0.7.0.M1] at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-common-4.1.13.Final.jar:4.1.13.Final] at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403) ~[netty-common-4.1.13.Final.jar:4.1.13.Final] at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462) ~[netty-transport-4.1.13.Final.jar:4.1.13.Final] at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) ~[netty-common-4.1.13.Final.jar:4.1.13.Final] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_144]  ---  **Affects:** 5.0 RC3  **Attachments:** - [browser-result.PNG](https://jira.spring.io/secure/attachment/25079/browser-result.PNG) (_11.87 kB_) - [Spring5SimpleProj.rar](https://jira.spring.io/secure/attachment/25080/Spring5SimpleProj.rar) (_24.78 kB_)","closed","status: invalid,","spring-projects-issues","2017-08-26T00:05:11Z","2019-01-13T05:14:02Z"
"","20528","""Parameter metadata not available for the given statement"" SQL Exception after upgrading to Spring 5.0 RC4 [SPR-15977]","**[Bogdan Dumitrescu](https://jira.spring.io/secure/ViewProfile.jspa?name=bogdanbux)** opened **[SPR-15977](https://jira.spring.io/browse/SPR-15977?redirect=false)** and commented  Scenario:  - execute a prepared statement using JdbcTemplate inserting a row into MySQL 5.5:  jdbcTemplate.update(""insert into users (id, name, description) values (?, ?, ?)"", id, name, description);  - condition to reproduce: one of the arguments of the prepared statement is null. The column definition in MySQL corresponding to the null argument accepts null values.  When trying to execute the above with Spring 5.0 RC4 we are getting a ""java.sql.SQLException: Parameter metadata not available for the given statement"".  The same code executes fine when using the 4.3.11.RELEASE of spring-jdbc.  Using version 5.1.44 of mysql-connector-java, we're seeing the same behaviour on the following MySQL versions:  Ver 14.14 Distrib 5.5.53 Ver 14.14 Distrib 5.7.18-15  ---  **Affects:** 5.0 RC4  **Attachments:** - [stacktrace.txt](https://jira.spring.io/secure/attachment/25108/stacktrace.txt) (_3.65 kB_)  **Issue Links:** - #18399 Raise JDBC driver feature baseline to JDBC 4.0+ - #20687 Doc: ParameterMetaData.getParameterType performance on Oracle 12c","closed","type: regression,","spring-projects-issues","2017-09-19T13:12:16Z","2019-01-11T18:08:57Z"
"","20447","Variable index treated as string literal [SPR-15893]","**[Bin Hawking](https://jira.spring.io/secure/ViewProfile.jspa?name=binhawking)** opened **[SPR-15893](https://jira.spring.io/browse/SPR-15893?redirect=false)** and commented  given variable = 9, I expect: map[variable] = map[9]  but in the current SpEL implemention: map[variable] = map[ (varible) ] = map[ ((((varible)))) ]   //weird = map['varible']  After reading the code, I found the cause. In org.springframework.expression.spel.ast.Indexer::getValueRef(.) ... // This first part of the if clause prevents a 'double dereference' of // the property (#10516) if (targetObject instanceof Map && (this.children[0] instanceof PropertyOrFieldReference)) { ... } else ...  #10516 was for spEL 3.x while as far as I can see from the 4.3.x code, dot property has nothing to do with Indexer. An Indexer node is instantiated only after eating '['. Hence the fix of #10516 should NOT be in Indexer.  In practice, I used my revision of spring-expression in which removed are those lines cited above.  Then I got map[variable]=map[9] in my app and the other parts still function correctly.  I hope it can be the official behavior of spEL.  ---  **Affects:** 4.3.10, 5.0 RC3  **Issue Links:** - #10516 Errors in EL expressions in User Guide","open","in: core,","spring-projects-issues","2017-08-23T09:23:41Z","2019-01-11T18:04:35Z"
"","20984","Null check for @RequestAttribute is bypassed if a list contains null is used as the attribute. [SPR-16438]","**[billUsingLP billUsingLP](https://jira.spring.io/secure/ViewProfile.jspa?name=billusinglp)** opened **[SPR-16438](https://jira.spring.io/browse/SPR-16438?redirect=false)** and commented  ## reproduce steps:  ### 1. Define a request mapping in a controller  ```java @RequestMapping(value = ""/test"") @ResponseBody public String queryVenderAutoReply( 		@RequestAttribute String value ) { 	assert value != null; 	return ""success""; } ```  ### 2. Define a interceptor to set the attribute for value.  ```java public class ParameterFilter extends HandlerInterceptorAdapter {     @Override     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {         request.setAttribute(""value"",Collections.singletonList(null)); 	} } ```  ### 3. Just send a request /test to the server  ## Expected behavior:  before entering the controller code, an Exception should be thrown, because the in parameter of value is null.  ## Actuall Behavior:  AssertionError is throwed, because no exception is thrown before entering the controller, and the assert code in controller is executed.  ## Root cause:  in class AbstractNamedValueMethodArgumentResolver, resolveArgument method,  ```java public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 		NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {  	NamedValueInfo namedValueInfo = getNamedValueInfo(parameter); 	MethodParameter nestedParameter = parameter.nestedIfOptional();  	Object resolvedName = resolveStringValue(namedValueInfo.name); 	if (resolvedName == null) { 		throw new IllegalArgumentException( 				""Specified name must not resolve to null: ["" + namedValueInfo.name + ""]""); 	}  	Object arg = resolveName(resolvedName.toString(), nestedParameter, webRequest); 	if (arg == null) { 		if (namedValueInfo.defaultValue != null) { 			arg = resolveStringValue(namedValueInfo.defaultValue); 		} 		else if (namedValueInfo.required && !nestedParameter.isOptional()) { 			handleMissingValue(namedValueInfo.name, nestedParameter, webRequest); 		} 		arg = handleNullValue(namedValueInfo.name, arg, nestedParameter.getNestedParameterType()); 	} 	else if ("""".equals(arg) && namedValueInfo.defaultValue != null) { 		arg = resolveStringValue(namedValueInfo.defaultValue); 	}  	if (binderFactory != null) { 		WebDataBinder binder = binderFactory.createBinder(webRequest, null, namedValueInfo.name); 		try { 			arg = binder.convertIfNecessary(arg, parameter.getParameterType(), parameter); 		} 		catch (ConversionNotSupportedException ex) { 			throw new MethodArgumentConversionNotSupportedException(arg, ex.getRequiredType(), 					namedValueInfo.name, parameter, ex.getCause()); 		} 		catch (TypeMismatchException ex) { 			throw new MethodArgumentTypeMismatchException(arg, ex.getRequiredType(), 					namedValueInfo.name, parameter, ex.getCause());  		} 	}  	handleResolvedValue(arg, namedValueInfo.name, parameter, mavContainer, webRequest);  	return arg; } ```  1. The null check is performed before the convert of the value, 2. If the arg is originally a list, and the target type is normal object, it will use CollectionToObjectConverter to convert the value. The first element of the list is returned as the target object.  So, if an arg is a list whose first element is null, a null ref is returned byt the converter, and this null value just escaped the null check even if the parameter is required.   ---  **Affects:** 5.0.3","closed","status: declined,","spring-projects-issues","2018-01-30T12:04:10Z","2019-01-12T16:21:51Z"
"","20718","spring-jdbc : Improve memory allocations when substituting named parameters. [SPR-16170]","**[Benoit](https://jira.spring.io/secure/ViewProfile.jspa?name=benbenw)** opened **[SPR-16170](https://jira.spring.io/browse/SPR-16170?redirect=false)** and commented  Create the buffer with at least the original sql length to avoid multiple re-allocations Add a fast path if the original sql doesn't contain any parameters  JMH results  ```java MyBenchmark.old                                                  thrpt   50   429702,315 ±   8526,336   ops/s MyBenchmark.old:·gc.alloc.rate                                   thrpt   50     1089,447 ±     21,757  MB/sec MyBenchmark.old:·gc.alloc.rate.norm                              thrpt   50     3992,001 ±      0,001    B/op MyBenchmark.old:·gc.churn.PS_Eden_Space                          thrpt   50     1102,400 ±     29,500  MB/sec MyBenchmark.old:·gc.churn.PS_Eden_Space.norm                     thrpt   50     4039,513 ±     71,742    B/op MyBenchmark.old:·gc.churn.PS_Survivor_Space                      thrpt   50        0,180 ±      0,027  MB/sec MyBenchmark.old:·gc.churn.PS_Survivor_Space.norm                 thrpt   50        0,659 ±      0,098    B/op MyBenchmark.old:·gc.count                                        thrpt   50      783,000               counts MyBenchmark.old:·gc.time                                         thrpt   50      333,000                   ms MyBenchmark.newVersion                                           thrpt   50   478496,476 ±   5144,476   ops/s MyBenchmark.newVersion:·gc.alloc.rate                            thrpt   50     1008,926 ±     10,849  MB/sec MyBenchmark.newVersion:·gc.alloc.rate.norm                       thrpt   50     3320,001 ±      0,001    B/op MyBenchmark.newVersion:·gc.churn.PS_Eden_Space                   thrpt   50     1023,339 ±     21,646  MB/sec MyBenchmark.newVersion:·gc.churn.PS_Eden_Space.norm              thrpt   50     3368,042 ±     68,881    B/op MyBenchmark.newVersion:·gc.churn.PS_Survivor_Space               thrpt   50        0,156 ±      0,033  MB/sec MyBenchmark.newVersion:·gc.churn.PS_Survivor_Space.norm          thrpt   50        0,514 ±      0,109    B/op MyBenchmark.newVersion:·gc.count                                 thrpt   50      647,000               counts MyBenchmark.newVersion:·gc.time                                  thrpt   50      285,000                   ms  MyBenchmark.oldNoParams                                          thrpt   50  1642986,386 ±  47483,217   ops/s MyBenchmark.oldNoParams:·gc.alloc.rate                           thrpt   50     2857,392 ±     82,456  MB/sec MyBenchmark.oldNoParams:·gc.alloc.rate.norm                      thrpt   50     2738,400 ±      3,600    B/op MyBenchmark.oldNoParams:·gc.churn.PS_Eden_Space                  thrpt   50     2893,399 ±     96,256  MB/sec MyBenchmark.oldNoParams:·gc.churn.PS_Eden_Space.norm             thrpt   50     2773,357 ±     51,150    B/op MyBenchmark.oldNoParams:·gc.churn.PS_Survivor_Space              thrpt   50        0,186 ±      0,031  MB/sec MyBenchmark.oldNoParams:·gc.churn.PS_Survivor_Space.norm         thrpt   50        0,178 ±      0,029    B/op MyBenchmark.oldNoParams:·gc.count                                thrpt   50      882,000               counts MyBenchmark.oldNoParams:·gc.time                                 thrpt   50      382,000                   ms MyBenchmark.newVersionNoParams                                   thrpt   50  2355892,983 ± 107644,968   ops/s MyBenchmark.newVersionNoParams:·gc.alloc.rate                    thrpt   50     2178,567 ±     99,614  MB/sec MyBenchmark.newVersionNoParams:·gc.alloc.rate.norm               thrpt   50     1456,000 ±      0,001    B/op MyBenchmark.newVersionNoParams:·gc.churn.PS_Eden_Space           thrpt   50     2186,719 ±    112,842  MB/sec MyBenchmark.newVersionNoParams:·gc.churn.PS_Eden_Space.norm      thrpt   50     1461,406 ±     35,027    B/op MyBenchmark.newVersionNoParams:·gc.churn.PS_Survivor_Space       thrpt   50        0,179 ±      0,030  MB/sec MyBenchmark.newVersionNoParams:·gc.churn.PS_Survivor_Space.norm  thrpt   50        0,121 ±      0,022    B/op MyBenchmark.newVersionNoParams:·gc.count                         thrpt   50      907,000               counts MyBenchmark.newVersionNoParams:·gc.time                          thrpt   50      401,000                   ms ```    ---  **Affects:** 4.3.12, 5.0.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1588, and commits https://github.com/spring-projects/spring-framework/commit/457c70cf33ab2e909ff5a4dcca3a35469eaf59a7  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-11-07T17:24:59Z","2017-11-27T10:59:11Z"
"","20699","Support Smile streaming in WebFlux [SPR-16151]","**[Benoit LEPREVOST](https://jira.spring.io/secure/ViewProfile.jspa?name=benoitlep)** opened **[SPR-16151](https://jira.spring.io/browse/SPR-16151?redirect=false)** and commented  See issue raised initialy on spring-boot: https://github.com/spring-projects/spring-boot/issues/10756  Jackson2SmileEncoder/Decoder declare ""stream+x-jackson-smile"" as a streaming MediaType, it doesn't seem to work by default. In my use case, we need binary encoding as we pass a lot a matrices and json just doesn't perform well for that case. CBOR would also be nice, if it came with a streaming option.  I've attached a new sample project.  Thank you   ---  **Affects:** 5.0.1  **Attachments:** - [smile.zip](https://jira.spring.io/secure/attachment/25205/smile.zip) (_62.42 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/31b25b5808ce7a1da45607c73f1a079bc1078fb2, https://github.com/spring-projects/spring-framework/commit/32f6ccece8ba348381b4dcee8e332a89e9e42b29","closed","type: enhancement,","spring-projects-issues","2017-11-02T16:16:30Z","2018-02-19T12:19:19Z"
"","21122","PDF and ePub docs for Spring Framework 5 are not getting published [SPR-16580]","**[Behrang Saeedzadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=behrangsa)** opened **[SPR-16580](https://jira.spring.io/browse/SPR-16580?redirect=false)** and commented  I can see PDF and ePub docs for versions up to [5.0.0.M5](https://docs.spring.io/autorepo/docs/spring-framework/5.0.0.M5/spring-framework-reference/).  However versions after that no longer have PDF and ePub docs ([e.g. 5.0.4.RELEASE](https://docs.spring.io/autorepo/docs/spring-framework/5.0.4.RELEASE/spring-framework-reference/)) or at least it is not obvious where to find them.   --- No further details from [SPR-16580](https://jira.spring.io/browse/SPR-16580?redirect=false)","closed","status: declined,","spring-projects-issues","2018-03-12T06:24:42Z","2019-01-12T16:21:41Z"
"","20808","Support for the Hibernate OGM [SPR-16261]","**[Bato-Bair Tsyrenov](https://jira.spring.io/secure/ViewProfile.jspa?name=bbtsyrenov)** opened **[SPR-16261](https://jira.spring.io/browse/SPR-16261?redirect=false)** and commented  Hibernate has got the Hibernate Object Grid Mapping project, that allows to connect to NoSQL databases. Spring Framework should have a way to configure Hibernate OGM as a JPA provider the same way as it can do it with Hibernate ORM.   ---  1 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2017-12-04T12:11:33Z","2020-08-24T17:29:32Z"
"","20801","Broken link for JpaBaseConfiguration [SPR-16254]","**[Bato-Bair Tsyrenov](https://jira.spring.io/secure/ViewProfile.jspa?name=bbtsyrenov)** opened **[SPR-16254](https://jira.spring.io/browse/SPR-16254?redirect=false)** and commented  At paragraph 77.9 there is a broken URL - 404   ---  **Affects:** 5.0.2  **Reference URL:** https://docs.spring.io/spring-boot/docs/current/reference/html/howto-data-access.html","closed","status: invalid,","spring-projects-issues","2017-12-01T16:12:13Z","2019-01-12T05:19:52Z"
"","20975","MockMVC ResultMatchers.status().is(200) - method call needs to be escaped in kotlin [SPR-16429]","**[Bastian Voigt](https://jira.spring.io/secure/ViewProfile.jspa?name=batzee)** opened **[SPR-16429](https://jira.spring.io/browse/SPR-16429?redirect=false)** and commented  Spring Boot Version: 2.0.0.M7 (i.e. Spring Framework 5.0.2.RELEASE)  For better experience for Kotlin users, the MockMVC result matcher status() should not use the kotlin keyword is as a method name, because the method call needs to be escaped in backticks which is not very convenient.   ---  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2018-01-29T10:09:21Z","2018-06-12T15:44:03Z"
"","20743","HttpComponentsClientHttpRequestFactory timeout with RestTemplate [SPR-16195]","**[Barak Kedem](https://jira.spring.io/secure/ViewProfile.jspa?name=barak066)** opened **[SPR-16195](https://jira.spring.io/browse/SPR-16195?redirect=false)** and commented  Hi am facing an issue when creation post Request to a Server which requires VPN - when not using a VPN - I get Connect timeout Error which is OK But i would expect the Timeout Error to Retrieval much faster   **The Actual Timeout is about 1 minute - while i define it much less.**  Class is attached.  I also saw this issue which is similar but closed - but there is still a bug In relation to this issue:  #19863  Version: ClientHttpRequestFactory,RestTemplate  - 4.3.5  Stack trace is attached  ``` Caused by: org.apache.http.conn.HttpHostConnectException: Connect to XXXXXXXXXXXX.com:443 [ XXXXXXXXXXXX.com:443 /654654.654654.7654.1654,  XXXXXXXXXXXX.com:443 com/165465.6546.54654.25465447] failed: Connection timed out: connect 	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:158) 	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353) 	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380) 	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236) 	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184) 	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88) 	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110) 	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184) 	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82) 	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55) 	at org.springframework.http.client.HttpComponentsClientHttpRequest.executeInternal(HttpComponentsClientHttpRequest.java:89) 	at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48) 	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:53) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:652) 	... 3 more Caused by: java.net.ConnectException: Connection timed out: connect 	at java.net.DualStackPlainSocketImpl.connect0(Native Method) 	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79) 	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) 	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) 	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) 	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) 	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) 	at java.net.Socket.connect(Socket.java:589) 	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:337) 	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:141) 	... 16 more  ```  ---  **Attachments:** - [MyMicroserviceClient.txt](https://jira.spring.io/secure/attachment/25292/MyMicroserviceClient.txt) (_2.34 kB_)  **Issue Links:** - #21238 Document HttpClient connection socket timeout behavior for CONNECT and SSL connections (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-11-14T09:25:43Z","2019-01-14T04:33:16Z"
"","20990","Update advice on contentLength() in subclasses of InputStreamResource","**[bademus](https://jira.spring.io/secure/ViewProfile.jspa?name=bademux)** opened **[SPR-16445](https://jira.spring.io/browse/SPR-16445?redirect=false)** and commented  It seems the bug was introduced in #16633 org.springframework.http.converter.ResourceHttpMessageConverter#getContentLength  ```java // Don't try to determine contentLength on InputStreamResource - cannot be read afterwards... // Note: custom InputStreamResource subclasses could provide a pre-calculated content length! if (InputStreamResource.class == resource.getClass()) {      return null; } ```  In fact default behavior of InputStreamResource is not the same as for its children.  ---  **Affects:** 4.3.14  **Issue Links:** - #16633 RestTemplate with InputStreamResource does not work if Content-Length is not set - #18147 resttemplate multipart post with InputStreamResource not working","closed","type: task,","spring-projects-issues","2018-01-31T13:17:51Z","2020-04-20T13:43:39Z"
"","21048","MockHttpServletRequest.getReader, getInputStream should each return the same object on repeat calls [SPR-16505]","**[Av Pinzur](https://jira.spring.io/secure/ViewProfile.jspa?name=av.pinzur)** opened **[SPR-16505](https://jira.spring.io/browse/SPR-16505?redirect=false)** and commented  A de facto rule of thumb for the Servlet paradigm is that a `ServletRequest`'s body content can only be read once. This implies at least a couple limitations: 1. The content retrieval methods (`getReader` **and** `getInputStream`) cannot be used in combination. (See #21042.) 2. Each content retrieval method (`getReader` **or** `getInputStream`) will read the body **only once**.  This latter limitation is the subject of this ticket. Although unlike #1, this behavior is not explicitly specified in the [interface documentation](https://static.javadoc.io/javax.servlet/javax.servlet-api/4.0.0/javax/servlet/ServletRequest.html#getReader--), [major](https://github.com/apache/tomcat/blob/trunk/java/org/apache/catalina/connector/Request.java#L1040) [Servlet](https://github.com/eclipse/jetty.project/blob/master/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java#L1149) [implementations](https://github.com/undertow-io/undertow/blob/master/servlet/src/main/java/io/undertow/servlet/spec/HttpServletRequestImpl.java#L867) appear to concur in returning the same object reference for successive calls to either `getReader` or `getInputStream`. This means that it's effectively a bug for application code to attempt to read the body contents twice from two such separate calls.  However, the current implementation of `MockHttpServletRequest` constructs a fresh object each time one of these methods is called. Revising this implementation to retain the returned reader or stream reference for successive calls will better reflect real-world implementations and enhance the framework's value by allowing developers to catch one more class of bugs prior to deploying to an actual container.  ---  **Affects:** 4.3.14, 5.0.3  **Issue Links:** - #21042 MockHttpServletRequest shouldn't allow calls to both getReader and getInputStream - #21906 MockHttpServletRequest doesn't reset InputStream/Reader on setContent  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1689, and commits https://github.com/spring-projects/spring-framework/commit/3fc8ec498c7c7ae3074a4980971b5eb31635cc2c  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-02-15T20:49:32Z","2019-01-21T09:35:45Z"
"","21042","MockHttpServletRequest shouldn't allow calls to both getReader and getInputStream [SPR-16499]","**[Av Pinzur](https://jira.spring.io/secure/ViewProfile.jspa?name=av.pinzur)** opened **[SPR-16499](https://jira.spring.io/browse/SPR-16499?redirect=false)** and commented  Per the [ServletRequest documentation](https://static.javadoc.io/javax.servlet/javax.servlet-api/4.0.0/javax/servlet/ServletRequest.html#getReader--), `ServletRequest`'s two methods for reading the request body - `getReader` and `getInputStream` - cannot be used in combination. Implementations are supposed to throw `IllegalStateException` from either method if the other has already been called.  Revising `MockHttpServletRequest` to conform to this documented behavior will reinforce the value of Spring Test by allowing users to catch subtle bugs during unit/integration testing, rather than discovering non-compliant usage patterns only when running in an actual container.  ---  **Affects:** 4.3.14, 5.0.3  **Issue Links:** - #21048 MockHttpServletRequest.getReader, getInputStream should each return the same object on repeat calls  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1688, and commits https://github.com/spring-projects/spring-framework/commit/3fc8ec498c7c7ae3074a4980971b5eb31635cc2c","closed","type: enhancement,","spring-projects-issues","2018-02-14T22:12:32Z","2019-01-11T15:29:50Z"
"","20881","PropertySourcesPlaceholderConfigurer can not ignore resource if not found [SPR-16334]","**[Attila Turcsan](https://jira.spring.io/secure/ViewProfile.jspa?name=atistrcsn)** opened **[SPR-16334](https://jira.spring.io/browse/SPR-16334?redirect=false)** and commented  Possible bug is the PSPConfigurer not catching the right exception when the setIgnoreResourceNotFound option is true. I got java.nio.file.NoSuchFileException but it only catches java.io.FIleNotFoundException.  **Running environment:** Java: **jdk1.8.0_144** Kotlin: **1.2.10** Running with Spring Boot v2.0.0.M7, Spring v5.0.2.RELEASE  ``` @Bean open fun propertyPlaceholderConfigurer(): PropertySourcesPlaceholderConfigurer {     return PropertySourcesPlaceholderConfigurer().apply {         setIgnoreResourceNotFound(true)         order = Ordered.HIGHEST_PRECEDENCE          setLocations(                 ClassPathResource(""default.properties""),                 FileSystemResource(""${user.home}/desktop.properties"")         )     } } ```  This is the exception stack:  ``` org.springframework.beans.factory.BeanInitializationException: Could not load properties; nested exception is java.nio.file.NoSuchFileException: /Users/dev/desktop.properties 	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.postProcessBeanFactory(PropertySourcesPlaceholderConfigurer.java:153) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:284) 	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:164) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:693) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:531) 	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:138) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:751) 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:387) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) 	at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:136) 	at hu.hobbesmedia.legenda.cassa.BootstrapKt.main(Bootstrap.kt:79) Caused by: java.nio.file.NoSuchFileException: /Users/dev/desktop.properties 	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) 	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) 	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) 	at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214) 	at java.nio.file.Files.newByteChannel(Files.java:361) 	at java.nio.file.Files.newByteChannel(Files.java:407) 	at java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384) 	at java.nio.file.Files.newInputStream(Files.java:152) 	at org.springframework.core.io.FileSystemResource.getInputStream(FileSystemResource.java:123) 	at org.springframework.core.io.support.EncodedResource.getInputStream(EncodedResource.java:159) 	at org.springframework.core.io.support.PropertiesLoaderUtils.fillProperties(PropertiesLoaderUtils.java:99) 	at org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:181) 	at org.springframework.core.io.support.PropertiesLoaderSupport.mergeProperties(PropertiesLoaderSupport.java:162) 	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.postProcessBeanFactory(PropertySourcesPlaceholderConfigurer.java:144) ```  ---  **Affects:** 5.0.2  **Issue Links:** - #20828 Unnecessary file system access in SimpleMetadataReaderFactory.getMetadataReader - #20304 Revise FileSystemResource / FileSystemUtils / FileCopyUtils towards NIO.2 - #21853 HTTP 404 for static resources with last modified = 0L (breaks Docker images build with Jib)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1a154c3e4c2296940e2c3920c664b4999d8dc368","closed","type: regression,","spring-projects-issues","2017-12-30T13:03:43Z","2019-01-11T15:21:19Z"
"","20905","Provide gRPC support [SPR-16358]","**[Ashok](https://jira.spring.io/secure/ViewProfile.jspa?name=thekalinga)** opened **[SPR-16358](https://jira.spring.io/browse/SPR-16358?redirect=false)** and commented  gRPC is becoming defacto standard for service to service communication, due to its ubiquitous nature & use of HTTP2  Currently we have `grpc-java` which generates its own version of classes that handle request in their own proprietary way when compared to Spring MVC & Spring WebFlux.  Plus, modern service mesh frameworks like https://envoyproxy.io works very nicely with gRPC.  Developers in spring world requires this high performance, type safe service-service integration (tho we have integration with hystrix, gRPC is much more performant & support wide variety of languages).  Here are some pain points in using grpc-java in spring world  1. Since gRPC makes no assumption about Spring web framework, its request handling has a completely different path outside of WebFlux/MVC 2. Integrating that code with spring ecosystem like Security will be completely adhoc & fragile  If spring can scaffold a WebFlux/MVC project from grpc service definition, it will improve the development experience & at the sametime developers like me can enjoy the benefits of gRPC  ---  **Issue Links:** - #21292 RSocket client and server support - #20331 Support Protobuf serialization in WebFlux - #21011 Add Thrift RPC support to WebFlux  7 votes, 18 watchers","open","type: enhancement,","spring-projects-issues","2018-01-08T13:27:32Z","2020-08-06T16:17:05Z"
"","20914","MockClientHttpResponse should not return null body [SPR-16367]","**[Arthur Gavlyukovskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=gavlyukovskiy)** opened **[SPR-16367](https://jira.spring.io/browse/SPR-16367?redirect=false)** and commented  According to HttpInputMessage documentation body can never be null, although this is not true when you create mock response using MockRestResponseCreators without body, e.g. withBadRequest() or withSuccess().  Looks like changes should be done in MockHttpInputMessage to set ByteArrayInputStream with empty byte array if passed content is null. As well null check before closing stream in MockClientHttpResponse may be removed.   ---  **Affects:** 4.3.12","closed","type: bug,","spring-projects-issues","2018-01-11T23:35:15Z","2018-01-23T09:33:23Z"
"","20971","Spring RestTemplate adds extra [] (square brackets) when sending arrays [SPR-16425]","**[Artem Loginov](https://jira.spring.io/secure/ViewProfile.jspa?name=logart)** opened **[SPR-16425](https://jira.spring.io/browse/SPR-16425?redirect=false)** and commented  As described on StackOverflow there is an issue serializing array with RestTemplate. The work around was suggested, but I can't use it in my current project because code with rest template is generated by swagger. The pull request is attached. I am not sure about the performance of this fix since I am new to Java. But I will appreciate any help and comments so I can improve this solution to make it production ready.   ---  **Affects:** 5.0.2  **Reference URL:** https://stackoverflow.com/questions/33593390/spring-resttemplate-sending-array-list-of-string-in-get-request  **Attachments:** - [Remove_square_brackets_around_stringified_collections_.patch](https://jira.spring.io/secure/attachment/25354/Remove_square_brackets_around_stringified_collections_.patch) (_1.21 kB_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1655","closed","type: enhancement,","spring-projects-issues","2018-01-27T14:03:48Z","2018-02-23T19:20:35Z"
"","20841","MethodParameter doesn't see parameter annotations if method is proxied [SPR-16294]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-16294](https://jira.spring.io/browse/SPR-16294?redirect=false)** and commented  My use-case is like: we have a `@Transactional` service method with the `@Header` annotation on one of the parameter. When we perform this method via `InvocableHandlerMethod` we end up with the problem that `@Header`  isn't visible and Framework attempts to fallback to the `payload` for this parameter.  The test-case to reproduce:  ```java 	@Test 	public void testProxyAndHeaderAnnotation() throws Exception { 		final AtomicReference payloadReference = new AtomicReference<>(); 		final AtomicReference idReference = new AtomicReference<>();  		class MyHandler {  			public void handle(@Header(MessageHeaders.ID) UUID id, @Payload Object payload) { 				idReference.set(id); 				payloadReference.set(payload); 			}  		}  		MyHandler service = new MyHandler();  		ProxyFactory proxyFactory = new ProxyFactory(service);  		service = (MyHandler) proxyFactory.getProxy(getClass().getClassLoader());  		DefaultMessageHandlerMethodFactory handlerMethodFactory = new DefaultMessageHandlerMethodFactory(); 		handlerMethodFactory.afterPropertiesSet();  		Method method = ClassUtils.getMethod(service.getClass(), ""handle"", null); 		InvocableHandlerMethod handlerMethod = handlerMethodFactory.createInvocableHandlerMethod(service, method);  		GenericMessage testMessage = new GenericMessage<>(""foo""); 		handlerMethod.invoke(testMessage);  		assertEquals(testMessage.getPayload(), payloadReference.get()); 		assertEquals(testMessage.getHeaders().getId(), idReference.get()); 	} ```  When we comment out `getProxy()` everything works well as expected.  Not sure what is wrong, but looks like when we try to get annotations from the method parameter on proxied method, we don't get them. I just followed the debug from the `HeaderMethodArgumentResolver.supportsParameter()`.  See the related JIRA for more information:  https://jira.spring.io/browse/INT-4367   ---  **Affects:** 5.0.2  **Issue Links:** - [INT-4367](https://jira.spring.io/browse/INT-4367) Definition of service-activator in pojo-style does not work with annotaded parameters","closed","in: core,","spring-projects-issues","2017-12-12T18:36:16Z","2019-01-12T16:32:47Z"
"","20739","Wrong byte code for compiled SpEL when JDK proxy method invocation is used [SPR-16191]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-16191](https://jira.spring.io/browse/SPR-16191?redirect=false)** and commented  The test-case to reproduce:  ```java @Test public void testCompiledSpELForProxy() { 	Foo foo = new FooImpl();  	foo = (Foo) new ProxyFactory(foo).getProxy();  	SpelExpressionParser expressionParser = 			new SpelExpressionParser(new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE, null));  	Expression expression = expressionParser.parseExpression(""#target.handle(#root)"");  	StandardEvaluationContext evaluationContext = new StandardEvaluationContext(); 	evaluationContext.setVariable(""target"", foo);  	String result = expression.getValue(evaluationContext, ""foo"", String.class); 	result = expression.getValue(evaluationContext, ""foo"", String.class);  	assertEquals(""FOO"", result); }  public interface Foo {  	String handle(String payload);  }  public class FooImpl implements Foo {  	@Override 	public String handle(String payload) { 		return payload.toUpperCase(); 	}  } ```  The exception looks like:  ``` java.lang.IllegalStateException: Failed to instantiate CompiledExpression      at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:110)     at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:517)     at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:487)     at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:372)     at org.springframework.integration.handler.MethodInvokingMessageProcessorTests.testCompiledSpELForProxy(MethodInvokingMessageProcessorTests.java:904)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)     at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: java.lang.VerifyError: (class: spel/Ex2, method: getValue signature: (Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;) Illegal type in constant pool     at java.lang.Class.getDeclaredConstructors0(Native Method)     at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)     at java.lang.Class.getConstructor0(Class.java:3075)     at java.lang.Class.getDeclaredConstructor(Class.java:2178)     at org.springframework.util.ReflectionUtils.accessibleConstructor(ReflectionUtils.java:503)     at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:107)     ... 28 more ```  The byte code for the compiled class:  ``` ����   1 ! spel/Ex2  6org/springframework/expression/spel/CompiledExpression  ☃0001 ()V getValue X(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object; 2org/springframework/expression/EvaluationException  target 0org/springframework/expression/EvaluationContext  lookupVariable &(Ljava/lang/String;)Ljava/lang/Object;     com/sun/proxy/$Proxy5  Oorg/springframework/integration/handler/MethodInvokingMessageProcessorTests$Foo  java/lang/String  handle &(Ljava/lang/String;)Ljava/lang/String;     Code Exceptions                     *� � ""     ,�  � � +� � �              ```  With SF-5.0.1 it looks like (if that helps somehow..):  ``` ����   1  spel/Ex2  6org/springframework/expression/spel/CompiledExpression   ()V getValue X(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object; 2org/springframework/expression/EvaluationException  target 0org/springframework/expression/EvaluationContext  lookupVariable &(Ljava/lang/String;)Ljava/lang/Object;     com/sun/proxy/$Proxy5  java/lang/String  handle &(Ljava/lang/String;)Ljava/lang/String; Code Exceptions                     ☃0005*� � ,�  � +� � �              ```  It might be like a side-effect of the fix for the #20670 since we have the same problem with the `4.3.13` as well.  ---  **Affects:** 4.3.13, 5.0.2  **Issue Links:** - #20670 SpEL method invocation with varargs on proxy  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c30145d6f965ce7a5c9a6898874cf296fa7269cc, https://github.com/spring-projects/spring-framework/commit/6dc73469f931775323f6f4d1275cc089b69f56a3  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","in: core,","spring-projects-issues","2017-11-13T17:50:15Z","2019-01-11T13:25:58Z"
"","21114","TransactionTemplate inherits equals()/hashCode() from DefaultTransactionDefinition [SPR-16572]","**[Arne Vandamme](https://jira.spring.io/secure/ViewProfile.jspa?name=arne.vandamme)** opened **[SPR-16572](https://jira.spring.io/browse/SPR-16572?redirect=false)** and commented  Two `TransactionTemplate` instances are considered equal purely based on their `DefaultTransactionDefinition` properties, without taking the actual configured `PlatformTransactionManager` into account.  Cause: the `TransactionTemplate` class inherits `equals()` and `hashCode()` from `DefaultTransactionDefinition`. I would assume the actual `PlatformTransactionManager` should also be taken into account.   ---  **Affects:** 4.3.14, 5.0.4  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1736, and commits https://github.com/spring-projects/spring-framework/commit/b1295d0499b195b4f0c597e53d3b3eea272bb8b6, https://github.com/spring-projects/spring-framework/commit/df8061494cec95d0b61cbac5dfbb04e58deba9d5  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-09T08:10:47Z","2018-04-03T20:34:27Z"
"","20523","Getting 'Connection closed prematurely' with WebClient [SPR-15972]","**[Arnaud Cogoluègnes](https://jira.spring.io/secure/ViewProfile.jspa?name=acogoluegnes@gmail.com)** opened **[SPR-15972](https://jira.spring.io/browse/SPR-15972?redirect=false)** and commented  I'm getting the following exception in the [HTTP RabbitMQ Client](https://github.com/rabbitmq/hop) test suite after an upgrade to Spring 5.0.0.RC4:  ```java reactor.core.Exceptions$ReactiveException: java.io.IOException: Connection closed prematurely at com.rabbitmq.http.client.ReactiveClientSpec.PUT /api/exchanges/{vhost}/{name} when vhost exists(ReactiveClientSpec.groovy:348) Caused by: reactor.core.Exceptions$ReactiveException: java.io.IOException: Connection closed prematurely 	at reactor.core.Exceptions.propagate(Exceptions.java:294) 	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:87) 	at reactor.core.publisher.Flux.blockFirst(Flux.java:1909) 	... 1 more Caused by: java.io.IOException: Connection closed prematurely 	at reactor.ipc.netty.http.client.HttpClientOperations.onInboundComplete(HttpClientOperations.java:262) 	at reactor.ipc.netty.channel.ChannelOperations.onHandlerTerminate(ChannelOperations.java:417) 	at reactor.ipc.netty.channel.ChannelOperationsHandler.channelInactive(ChannelOperationsHandler.java:105) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224) 	at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:377) 	at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:342) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224) 	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1354) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231) 	at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:917) 	at io.netty.channel.AbstractChannel$AbstractUnsafe$7.run(AbstractChannel.java:763) 	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) 	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403) 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463) 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) 	at java.lang.Thread.run(Thread.java:748) ```  Instructions to reproduce: * [Download RabbitMQ 3.7.0 M20](https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.0-beta.20/rabbitmq-server-generic-unix-3.7.0-beta.20.tar.xz) (it needs at least Erlang 19.2) and run it:  ``` $ tar xf rabbitmq-server-generic-unix-3.7.0-beta.20.tar.xz $ cd rabbitmq_server-3.7.0-beta.20/sbin $ ./rabbitmq-server -detached $ ./rabbitmq-plugins enable rabbitmq_management ```  * Clone [HOP](https://github.com/rabbitmq/hop):  ``` $ git clone https://github.com/rabbitmq/hop.git ```  * Launch one of the tests that fails:  ``` ./gradlew cleanTest test --tests '*ReactiveClientSpec.PUT /api/exchanges/{vhost}/{name} when vhost exists' ```  The test suite was affected by a [Reactor Netty issue](https://github.com/reactor/reactor-netty/issues/138) and was working with the connection pool disabled. It also works with Spring 5.0.0.RC4, but only against RabbitMQ 3.6.x. Disabling the connection pool makes the test suite works against Spring 5.0.0.RC4 and RabbitMQ 3.7.0.M20.  I noticed something weird: it looks like Wireshark doesn't recognize `WebClient` PUT requests as HTTP requests (the HTTP details don't show up, see capture).   ---  **Affects:** 5.0 RC4  **Attachments:** - [wireshark_put_no_http_details.png](https://jira.spring.io/secure/attachment/25103/wireshark_put_no_http_details.png) (_89.61 kB_)","closed","status: declined,","spring-projects-issues","2017-09-18T14:31:05Z","2019-01-12T16:33:03Z"
"","20576","ServletWrappingController.afterPropertiesSet always instantiates a new Servlet [SPR-16027]","**[Arlo O'Keeffe](https://jira.spring.io/secure/ViewProfile.jspa?name=arlo)** opened **[SPR-16027](https://jira.spring.io/browse/SPR-16027?redirect=false)** and commented  While evaluating spring-boot-actuator I noticed that enabling the jolokia endpoint resulted in ClassLoader leaks when running in a standalone Tomcat. I have boiled it down to the Servlet (AgentServlet in this case) being instantiated twice. This is because JolokiaMvcEndpoint.afterPropertiesSet is being called twice and thus ServletWrappingController.afterPropertiesSet as well. The first call I believe is the default bean instantiation from the JolokiaAutoConfiguration and the second is triggered from the ConfigurationPropertiesRebinder since JolokiaMvcEndpoint is annotated with `@ConfigurationProperties`.  My proposed fix would be to make sure that ServletWrappingController.afterPropertiesSet can be called multiple times by calling Servlet.destroy on any previously instantiated Servlet.   ---  **Affects:** 4.3.11","closed","status: invalid,","spring-projects-issues","2017-09-29T10:41:26Z","2019-01-12T05:20:12Z"
"","20949","DataBufferUtils.read should not take input stream/channel as parameter [SPR-16403]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-16403](https://jira.spring.io/browse/SPR-16403?redirect=false)** and commented  Currently, all `read` variants on `DataBufferUtils` take an input stream or channel as first parameter. When the last data is read, the channel is closed. This results in a ""read-once"" flux of data buffers.  However, (most) Fluxes are expected to be subscribed to multiple times, not once. As such, the `read` methods should take an input stream/channel **supplier** as argument instead. This allows the channel to be opened for the second time when another subscription comes along.  Using `Supplier` seems good enough, except that most I/O related methods throw `IOException`, and `Supplier` does not allow for exceptions to be throw. Using `Callable` therefore makes more sense.  Finally, because of type erasure, we cannot keep using a single, overloaded `read` variant. Instead, we should have `readInputStream`, `readByteChannel`, etc.  ---  **Affects:** 5.0 GA, 5.0.1, 5.0.2  **Issue Links:** - #20922 Support Custom Headers for Multipart Async Data  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5520e730f11e26c42e83eef2089690112e5b7417","closed","type: enhancement,","spring-projects-issues","2018-01-19T15:53:34Z","2019-01-11T15:38:32Z"
"","20948","MultipartHttpMessageWriter should not subscribe to Publisher multipart data [SPR-16402]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-16402](https://jira.spring.io/browse/SPR-16402?redirect=false)** and commented  The `MultipartHttpMessageWriter` should not subscribe to the `partWritten` mono, as that can result in exceptions when the data written comes out of a publisher itself, and when that publisher can only be subscribed to once.  For instance, when the data is coming from a `Channel`, and that channel closes after the first subscription, the second time the publisher is subscribed to results in IO exceptions.  ---  **Affects:** 5.0.2  **Reference URL:** https://github.com/rstoyanchev/spring-framework/blob/6c3a64578c10dd4e6fed933864f1721cf35203ae/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java#L278  **Issue Links:** - #20922 Support Custom Headers for Multipart Async Data (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09f1f727a71326cec68638e80d232cc70278706a, https://github.com/spring-projects/spring-framework/commit/afd248da8a14bdc2aa6ef7569d3a34f8caa64882","closed","type: bug,","spring-projects-issues","2018-01-19T15:35:10Z","2019-12-18T16:34:10Z"
"","20912","Using DataBuffer::write results in IndexOutOfBoundsException [SPR-16365]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-16365](https://jira.spring.io/browse/SPR-16365?redirect=false)** and commented  Using `DataBuffer.write(DataBuffer[] databuffer)` in a `Flux.reduce` aggregation result in a `IndexOutOfBoundsException` when running on Netty. The reason for this is that the initial buffer does not have enough capacity to contain the data of all subsequent buffers.  ---  **Issue Links:** - #20898 Use of CompositeByteBuf in NettyDataBuffer results in IllegalReferenceCountException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0befc60c8fe4896e9c918cfc474ef83e3de0669d, https://github.com/spring-projects/spring-framework/commit/e39bf87b07a84247a8edc7a8e50451743fe7ff45, https://github.com/spring-projects/spring-framework/commit/67e7c784e8097ee60db783a55bf1ab1ad1de529a, https://github.com/spring-projects/spring-framework/commit/384a399fd25bf7a9bd7dff239d31e9e7fbbbad24","closed","in: core,","spring-projects-issues","2018-01-11T15:58:53Z","2019-01-11T15:17:53Z"
"","20704","Document DataBuffer/PooledDataBuffer and Encoder/Decoder [SPR-16156]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-16156](https://jira.spring.io/browse/SPR-16156?redirect=false)** and commented  We should introduce reference documentation about the DataBuffer abstraction, especially concerning memory management with PooledDataBuffer, within the context of Encoder/Decoder.   --- No further details from [SPR-16156](https://jira.spring.io/browse/SPR-16156?redirect=false)","closed","type: task,","spring-projects-issues","2017-11-03T09:28:39Z","2017-11-27T12:17:07Z"
"","20574","WebClient throws ClassCastException for bodyToMono(ParameterizedTypeReference) [SPR-16025]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-16025](https://jira.spring.io/browse/SPR-16025?redirect=false)** and commented  The WebClient always throws a ClassCastException when an error occurs in `bodyToMono(ParameterizedTypeReference)`, and not the defined exception. Reported by ""voidc"" [here](https://github.com/spring-projects/spring-framework/commit/5394cc0c63471e7de8399c97ea201bbc0a4dd4d4#commitcomment-24646940).   ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/69945f4185e57c61ae9dbb3f12b612de046339c9","closed","type: bug,","spring-projects-issues","2017-09-29T08:13:11Z","2017-10-24T16:24:06Z"
"","20506","Introduce ForwardedHeaderFilter for WebFlux [SPR-15954]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15954](https://jira.spring.io/browse/SPR-15954?redirect=false)** and commented  We could use a `ForwardedHeaderFilter` that has similar functionality as the existing, Servlet-based `ForwardedHeaderFilter`, but that implements WebFlux's `WebFilter` interface instead.  ---  **Issue Links:** - #19914 WebFilter X-Forwarded Support (_**""is duplicated by""**_) - #20485 ReactorServerHttpRequest.getUri() does not include scheme  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e70210a1da994ea52e1ade30b052bea9e12e9d1d","closed","type: enhancement,","spring-projects-issues","2017-09-12T15:12:39Z","2019-01-11T18:10:04Z"
"","20505","WebFlux equivalent of MvcUriComponentsBuilder [SPR-15953]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-15953](https://jira.spring.io/browse/SPR-15953?redirect=false)** and commented  We could use a `WebFluxUriComponentsBuilder` that has similar functionality as the `ServletUriComponentsBuilder`,  An additional method that `WebFluxUriComponentsBuilder` should have is `fromServerRequest`, taking a `ServerRequest` from WebFlux.fn, as that type does not implement `HttpRequest`, and therefore cannot be used with `UriComponentsBuilder.fromHttpRequest`.  ---  **Issue Links:** - #20485 ReactorServerHttpRequest.getUri() does not include scheme - #20546 WebFlux support for UriBuilder, UriComponentsBuilder controller method arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1a3cc3df94c0f8e504f36e9be8e6f2ded5a12750, https://github.com/spring-projects/spring-framework/commit/a7617a264120ca486d7c92bb4255ec1ac3ef986e","open","type: enhancement,","spring-projects-issues","2017-09-12T15:09:40Z","2019-07-29T14:18:33Z"
"","20573","Broken links to documentation section ""Message Converters"" [SPR-16024]","**[Arend v. Reinersdorff](https://jira.spring.io/secure/ViewProfile.jspa?name=arend.von.reinersdorff)** opened **[SPR-16024](https://jira.spring.io/browse/SPR-16024?redirect=false)** and commented  There are several references to the documentation section ""Message Converters"". (I counted 3). The links go to #rest-message-conversion which doesn't exist.   ---  **Affects:** 5.0 GA  **Reference URL:** https://docs.spring.io/spring/docs/5.0.0.RELEASE/spring-framework-reference/web.html#mvc-ann-responsebody  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2d040c41cc66e85e0a54199749db99a5bd89de1","closed","type: documentation,","spring-projects-issues","2017-09-28T19:49:33Z","2017-10-24T16:24:07Z"
"","20822","config.enableSimpleBroker(""/topic"", ""/queue""); Should be config.enableSimpleBroker(""/topic"", ""queue""); [SPR-16275]","**[Aray Chou](https://jira.spring.io/secure/ViewProfile.jspa?name=aray)** opened **[SPR-16275](https://jira.spring.io/browse/SPR-16275?redirect=false)** and commented  Hello, there is a error in WebSocket document,  https://docs.spring.io/spring/docs/4.3.x/spring-framework-reference/html/websocket.html the Doc says: I shoud config Borker as : **config.enableSimpleBroker(""/topic"", ""/queue"");**  but if I conifg as above, the following code won't work: **template.convertAndSendToUser(""Aray"",""/queue/trade"",new Greeting(""hhhh""));**  The working config should be : **config.enableSimpleBroker(""/topic"", ""queue"");** (it is ""queue"" NOT ""/queue"")  I debuged and found this:  the message send by template.convertAndSendToUser, its destination will finnally be changed into a string like this: ""queue/trade-users4pkn4bg"", it doesn't start with ""/queue"". and the method org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler#checkDestinationPrefix will return *false *if we config ""/queue"" as the Doc says.  I am not sure, we should change the Doc or change the Java Codes.  thanks  ---  **Affects:** 4.3.13  **Reference URL:** https://docs.spring.io/spring/docs/4.3.x/spring-framework-reference/html/websocket.html  **Issue Links:** - #18616 DefaultUserDestinationResolver does not support ""."" separator convention  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-12-07T08:10:53Z","2019-01-11T15:14:22Z"
"","20521","@Bean method WebMvcConfigurationSupport.mvcConversionService called as a bean reference for type [org.springframework.format.support.FormattingConversionService]  [SPR-15969]","**[Antonio Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=tonymacross)** opened **[SPR-15969](https://jira.spring.io/browse/SPR-15969?redirect=false)** and commented  Hi  I have the following error, searching in several forums (ie stackoverflow, springio, so on) I could not find any response, because I have the following scenario:  I have a Rest spring boot app, but this app reuses many modules and other apps, all the includes / imports is by maven dependency, all modules (persistence, model, service) are working well but at the moment to start with REST project all heritaged configuration it's not working with the Rest project, I tried to follow the rest config from reference, guides or examples without success, I was able to create a common rest service but at the moment to reuse projects are not working. I was able to start the spring boot app with the parameter spring.main.web-environment=false, but once the app up all context and services qhe rest app is turned off, following forums and discussions I can see is a bug from spring boot.  I hava the following config: Spring Boot 1.5.6.RELEASE Spring 4.3.10 Java 8  I paste the complete error.  [2017-09-15@15:28:41.927] [main] [WARN ] [o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext:551] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerAdapter' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter]: Factory method 'requestMappingHandlerAdapter' threw exception; nested exception is java.lang.IllegalStateException: `@Bean` method WebMvcConfigurationSupport.mvcConversionService called as a bean reference for type [org.springframework.format.support.FormattingConversionService] but overridden by non-compatible bean instance of type [com.sun.proxy.$Proxy173]. Overriding bean of same name declared in: class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]   ---  **Affects:** 4.3.10  **Attachments:** - [springboot_error_buildingcontext.JPG](https://jira.spring.io/secure/attachment/25102/springboot_error_buildingcontext.JPG) (_283.16 kB_)","closed","status: invalid,","spring-projects-issues","2017-09-15T20:50:16Z","2021-09-14T11:38:03Z"
"","20578","Detect @Scope annotations on base classes [SPR-16029]","**[Antonio Anzivino](https://jira.spring.io/secure/ViewProfile.jspa?name=antonio.anzivino@csttech.it)** opened **[SPR-16029](https://jira.spring.io/browse/SPR-16029?redirect=false)** and commented  I am working on a software project being a platform for other developers to make their web applications. We have a lot of internal patterns, then.  One pattern is that all MVC controllers must be request-scoped. They extend a common ancestor Another pattern is that schedulable processes (extending a common ancestor) have to be prototypes as an additional protection from concurrent calls.  I noticed that annotating the base class with `@RequestScope` does not apply the scope to all controllers, having found that a lot of people forget to annotate their controllers as such. This, plus the fact that people store authentication/session information as class properties, resulted in confusion.  ### It would be nice  (to provide guidance to developers extending abstract classes)  If Spring adds the `@Inherited` annotation to at least the `@Scope` annotation. The full list of annotation that should be inherited is up to the Spring developers. I imagine that `@Profile` could be a candidate.  For the record, `@Transactional` is already `@Inherited` and rocks!   ---  **Affects:** 4.3.11","open","type: enhancement,","spring-projects-issues","2017-09-29T15:19:12Z","2019-01-11T14:14:19Z"
"","20413","@Lazy collection of optional elements should not crash when no candidates are found [SPR-15858]","**[Antonio Anzivino](https://jira.spring.io/secure/ViewProfile.jspa?name=antonio.anzivino@csttech.it)** opened **[SPR-15858](https://jira.spring.io/browse/SPR-15858?redirect=false)** and commented  Hi,  I have an optional dependency to listener beans in one of my beans. That means that I could have any number of listeners in my Application context.  I have tried to annotate my bean the following way:  ``` @Autowired(required = false) @Lazy private List listeners = new ArrayList<>(0); ```  IMO it is intuitive that Spring will  1. Search for Listener beans only when accessed 2. Do not crash if no Listener bean is defined in the context, namely return an empty list  I don't know if this is a bug in 4.3.5 or is it just how Spring is designed, but the above code, when no Listener bean is defined, crashes instead of returning an empty list when I try to access the listeners object.  If I use eager initialization, Autowired's required=false injects an empty list. I expected similar behaviour for lazy lists.  This ticket is: * MINOR because I can workaround this issue by using eager initialization, for the mometn * IMPROVEMENT because I have found no documentation on whether it is a design choice or an implementation issue  My container bean's afterPropertiesSet does  ``` log.info(""I have {} listeners attached"", listeners.size()); ```  Instead of logging 0, the application crashes with the following stack trace  ``` Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.util.List' available: Optional dependency not present for lazy injection point 	at org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1.getTarget(ContextAnnotationAutowireCandidateResolver.java:85) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:192) 	at com.sun.proxy.$Proxy172.size(Unknown Source) 	at com.acme.ManagerImpl.afterPropertiesSet(ManagerImpl.java:75) ```  Before submitting a test case, I'd first like to be clarified what is the expected Spring's behaviour in such situation  I have reviewed Spring docs on Lazy. The javadoc does not cite the case of optional Collection-dependencies https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Lazy.html  ``` In addition to its role for component initialization, this annotation may also be placed on injection points marked with Autowired or Inject: In that context, it leads to the creation of a lazy-resolution proxy for all affected dependencies, as an alternative to using ObjectFactory or Provider. ```  ---  **Affects:** 4.3.5  **Issue Links:** - #20384 Autowire contract is not honored in cases where FactoryBean or `@Bean` return null  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec1eafc46fe088c9ba3805969507b6e92f89458b, https://github.com/spring-projects/spring-framework/commit/80bf394fdc94a33c42cda5fc0169819ed96146ad","closed","type: enhancement,","spring-projects-issues","2017-08-10T08:31:09Z","2019-01-13T05:15:08Z"
"","21100","@JmsListener annotated method need to be extracted to interface even if CGLIB used [SPR-16557]","**[Anton Filatov](https://jira.spring.io/secure/ViewProfile.jspa?name=a.filatov)** opened **[SPR-16557](https://jira.spring.io/browse/SPR-16557?redirect=false)** and commented  Before bugfix #20744 it was impossible to use `@JmsListener` annotation with cglib-proxied classes at all. Now it works fine, but stil we need to extract annotated method into interface because processJmsListener try to search invocableMethod as follows  ``` Method invocableMethod = AopUtils.selectInvocableMethod(mostSpecificMethod, bean.getClass()); ```  and this lead to  ``` ... Caused by: java.lang.IllegalStateException: Need to invoke method 'process' declared on target class 'Example', but not found in any interface(s) of the exposed proxy type. Either pull the method up to an interface or switch to CGLIB proxies by enforcing proxy-target-class mode in your configuration. 	at org.springframework.core.MethodIntrospector.selectInvocableMethod(MethodIntrospector.java:135) 	at org.springframework.aop.support.AopUtils.selectInvocableMethod(AopUtils.java:130) 	at org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.processJmsListener(JmsListenerAnnotationBeanPostProcessor.java:262) 	at org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.postProcessAfterInitialization(JmsListenerAnnotationBeanPostProcessor.java:240) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:423) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1633) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) 	... 56 common frames omitted ```  Message is discouraging :)  I suppose that  ``` Method invocableMethod = AopUtils.selectInvocableMethod(mostSpecificMethod, AopUtils.getTargetClass(bean)); ```  will fix this problem.  ---  **Affects:** 4.3.14  **Issue Links:** - #20744 Combining `@Retryable` and `@Scheduled`/`@JmsListener` doesn't work","closed","status: invalid,","spring-projects-issues","2018-03-06T06:40:13Z","2019-01-13T04:50:11Z"
"","20726","NullPointer in DefaultRequestBodyUriSpec.cookies method [SPR-16178]","**[Anthony Bondarenko](https://jira.spring.io/secure/ViewProfile.jspa?name=qazyll)** opened **[SPR-16178](https://jira.spring.io/browse/SPR-16178?redirect=false)** and commented  Cookie map that is provided by DefaultRequestBodyUriSpec .cookies(...) consumer function is null  Example to reproduce NullPointerException:  ```java this.webClient.get().uri(""/users"")    .cookies(cookiesMap -> cookiesMap.put(""k1"", ""v1""))    .exchange() ```  NullPointer will be thrown at cookiesMap .put() method invocation as cookiesMap is null   ---  **Affects:** 5.0.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1590","closed","type: bug,","spring-projects-issues","2017-11-09T11:43:32Z","2017-11-27T12:17:07Z"
"","20918","RestTemplate.ResponseEntityResponseExtractor doesn't tolerate unknown status codes [SPR-16371]","**[Anika Solanka](https://jira.spring.io/secure/ViewProfile.jspa?name=anika%20solanka)** opened **[SPR-16371](https://jira.spring.io/browse/SPR-16371?redirect=false)** and commented  ResponseEntityResponseExtractor in version 4.3.13 also has a problem with unknown HTTP status codes. It is calling response.getStatusCode() which throws IllegalArgumentException for unknown status codes.  ---  **Affects:** 4.3.13  **Issue Links:** - #20529 RestTemplate doesn't consistently tolerate unknown HTTP status codes - #20656 DefaultResponseErrorHandler.hasError doesn't tolerate unknown status codes - #21971 RestTemplate does not throw exception for custom error codes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c1bc74c83fb1b1b9f7a0863c2c0ede775182f37f","closed","type: bug,","spring-projects-issues","2018-01-12T13:15:24Z","2019-01-11T15:16:31Z"
"","21136","JUnit Jupiter @Nested class cannot share enclosing class's ApplicationContext if nested class is deemed to be a configuration candidate [SPR-16595]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16595](https://jira.spring.io/browse/SPR-16595?redirect=false)** and commented  This feels like a bug, although it may just be a (rather large) limitation.  It appears to be impossible for an inner test class annotated with `@Nested` to use the enclosing class's application context if the enclosing class is deemed to be a configuration candidate (for example, because it uses `@Import`).  To be able to share the context, the inner test class must have the same configuration as its enclosing class so that they have the same context cache key. In other words, if the enclosing class has used `@Import` the inner class must do so too. This leads to code like this:  ```java import org.junit.jupiter.api.Nested; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.springframework.context.annotation.Import; import org.springframework.test.context.junit.jupiter.SpringExtension;  @ExtendWith(SpringExtension.class) @Import(Imported.class) class NestedLimitationsTests {  	@Nested 	@Import(Imported.class) 	class NestedTests {  		@Test 		public void test() {  		}  	}  }  class Imported { } ```  This fails to launch with the following exception:  ``` Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'example.NestedLimitationsTests$NestedTests': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'example.NestedLimitationsTests' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:729) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:192) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1270) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:107) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:251) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117) 	... 88 common frames omitted Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'example.NestedLimitationsTests' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1509) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1104) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:815) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:721) 	... 106 common frames omitted ```  An attempt is being made to create a `NestedTests` bean as its `@Import` annotation means that `ConfigurationClassUtils` considers it to be a _configuration candidate_. An instance of the enclosing class is needed to create `NestedTests` as the class is not static. It fails because the enclosing class isn't available as a bean.  Declaring the inner class as `static` overcomes the immediate problem but creates another. Being static prevents the inner class from accessing the enclosing class's non-static fields and declaring the enclosing class's fields as static means that they're no longer autowired.  The situation that's described above means that many of Spring Boot's testing annotations do not work. In fact, as far as I can tell, the only one that does work is `@SpringBootTest` as it is not meta-annotated with `@Import`.  ---  **Affects:** 5.0.4  **Reference URL:** https://github.com/spring-projects/spring-restdocs/issues/490  **Issue Links:** - #19930 Discover test configuration on enclosing class for nested test class - #21739 Revisit `@Bean` introspection between `@Configuration` classes and 'lite' beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/7a3db4a47857dbbfa1af5551dc1566e6f561f15a  1 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2018-03-15T10:38:56Z","2019-01-14T04:31:52Z"
"","21127","Allow spring-jcl to be found by Commons Logging's service discovery [SPR-16585]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16585](https://jira.spring.io/browse/SPR-16585?redirect=false)** and commented  I've just learned about a useful behaviour of `jcl-over-slf4j` which allows it to work even when the Commons Logging jar has got onto the classpath somehow.  `jcl-over-slf4j` contains a `META-INF/services/org.apache.commons.logging.LogFactory` file which means that it's found by Commons Logging's standard discovery mechanism. `spring-jcl` has no such file. As a result, when Commons Logging is on the classpath and is being used, it falls back to its default factory and creates `Jdk14Logger` instances.  Would it be possible for `spring-jcl` to provide a `META-INF/services/org.apache.commons.logging.LogFactory` so that it's a better `jcl-over-slf4j` replacement and continues to work even when Commons Logging is on the classpath?  ---  **Affects:** 5.0.4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/12457  **Issue Links:** - #20457 Provide an Apache Commons Logging's LogFactory provider in spring-jcl to support WebSphere's Parent-First classloader - #21835 java.lang.AbstractMethodError: org.apache.commons.logging.LogFactory.setAttribute(..) - #22118 spring-jcl routes logging inefficiently against SLF4J with log4j-to-slf4j setup  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b86c71b2ae3b7a43900bc4760b7e12426f96616, https://github.com/spring-projects/spring-framework/commit/31bfc1dc2b7cb75531b691ed5d9ea0da1f2c5d7a  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-03-13T10:44:55Z","2019-01-11T14:30:03Z"
"","21110","Consider caching interface-derived BeanInfo instances in CachedIntrospectionResults [SPR-16568]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16568](https://jira.spring.io/browse/SPR-16568?redirect=false)** and commented  `CachedIntrospectionResults` currently caches the results for the `Class` passed to `forClass(Class)`, but not for the `Class` passed to `getBeanInfo(Class, boolean)`. If multiple classes passed to `forClass(Class)` implement the same interface, multiple `BeanInfo` instances will be created for that interface. For example, in a small Spring Boot sample application 27 `BeanInfo` instances are created for `org.springframework.core.Ordered`.  This doesn't appear to have too much impact in a small application, but as an application grows and there are more classes implementing the same interfaces, I wonder if caching would become increasingly beneficial?  ---  **Affects:** 5.0.4  **Issue Links:** - #20869 CachedIntrospectionResults should use BeanInfoFactory when introspecting implemented interfaces - #21516 CachedIntrospectionResults should build complete descriptor for setter/getter across interface hierarchy  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a02aafe5fefacc57ab0a5707fb9afa3056d2ab09","closed","type: enhancement,","spring-projects-issues","2018-03-08T10:02:16Z","2019-01-11T14:32:26Z"
"","20897","Multi-part upload of a byte[] with WebTestClient is Base64 encoded (?) and assigned a JSON content type [SPR-16350]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16350](https://jira.spring.io/browse/SPR-16350?redirect=false)** and commented  Consider the following code:  ```java MultiValueMap multipartData = new LinkedMultiValueMap<>(); multipartData.add(""file"", new byte[] { 'a', 'b', 'c', 'd' }); WebTestClient.bindToRouterFunction(RouterFunctions.route(POST(""/foo""), (req) -> { 	MultiValueMap parts = req.body(BodyExtractors.toMultipartData()) 			.block(); 	Part filePart = parts.getFirst(""file""); 	ByteArrayOutputStream contentStream = new ByteArrayOutputStream(); 	DataBufferUtils.write(filePart.content(), contentStream).blockFirst(); 	System.out.println(new String(contentStream.toByteArray())); 	System.out.println(filePart.headers()); 	return null; })).configureClient().baseUrl(""http://localhost"").build().post().uri(""/foo"") 		.body(BodyInserters.fromMultipartData(multipartData)).exchange() 		.expectBody().returnResult(); ```  With recent 5.0.3 snapshots it produces the following output:  ``` [""YWJjZA==""] {content-disposition=[form-data; name=""file""], content-type=[application/json;charset=UTF-8]} ```  With 5.0.2.RELEASE the following output is produced:  ``` abcd {content-disposition=[form-data; name=""file""]} ```  There also appears to be a related regression when using a `ByteArrayResource` that results in an exception, presumably because it's being treated as JSON:  ``` reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.core.codec.CodecException: Type definition error: [simple type, class java.io.ByteArrayInputStream]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.LinkedList[0]->org.springframework.restdocs.webtestclient.WebTestClientRequestConverterTests$1[""inputStream""]) Caused by: org.springframework.core.codec.CodecException: Type definition error: [simple type, class java.io.ByteArrayInputStream]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.LinkedList[0]->org.springframework.restdocs.webtestclient.WebTestClientRequestConverterTests$1[""inputStream""]) 	at org.springframework.http.codec.json.AbstractJackson2Encoder.encodeValue(AbstractJackson2Encoder.java:136) 	at org.springframework.http.codec.json.AbstractJackson2Encoder.lambda$encode$0(AbstractJackson2Encoder.java:100) 	at org.springframework.http.codec.json.AbstractJackson2Encoder$$Lambda$129/1362546706.apply(Unknown Source) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:107) 	at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:91) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1463) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1337) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) 	at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:68) 	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6621) 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:200) 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:80) 	at reactor.core.publisher.MonoIgnoreElements.subscribe(MonoIgnoreElements.java:37) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) 	at reactor.core.publisher.Mono.subscribeWith(Mono.java:3116) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2893) 	at org.springframework.http.codec.multipart.MultipartHttpMessageWriter.encodePart(MultipartHttpMessageWriter.java:262) 	at org.springframework.http.codec.multipart.MultipartHttpMessageWriter.lambda$encodePartValues$3(MultipartHttpMessageWriter.java:225) 	at org.springframework.http.codec.multipart.MultipartHttpMessageWriter$$Lambda$127/57497692.apply(Unknown Source) 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) 	at java.util.LinkedList$LLSpliterator.forEachRemaining(LinkedList.java:1235) 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512) 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502) 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) 	at org.springframework.http.codec.multipart.MultipartHttpMessageWriter.encodePartValues(MultipartHttpMessageWriter.java:225) 	at org.springframework.http.codec.multipart.MultipartHttpMessageWriter.lambda$writeMultipart$2(MultipartHttpMessageWriter.java:209) 	at org.springframework.http.codec.multipart.MultipartHttpMessageWriter$$Lambda$80/576020159.apply(Unknown Source) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:357) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6621) 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:200) 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:80) 	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83) 	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83) 	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83) 	at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6621) 	at reactor.core.publisher.Flux.subscribeWith(Flux.java:6788) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6614) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6578) 	at org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPartGenerator.accept(SynchronossPartHttpMessageReader.java:133) 	at org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPartGenerator.accept(SynchronossPartHttpMessageReader.java:109) 	at reactor.core.publisher.FluxCreate.subscribe(FluxCreate.java:92) 	at reactor.core.publisher.MonoCollect.subscribe(MonoCollect.java:66) 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) 	at reactor.core.publisher.Mono.block(Mono.java:1161) 	at org.springframework.restdocs.webtestclient.WebTestClientRequestConverterTests.lambda$8(WebTestClientRequestConverterTests.java:187) 	at org.springframework.restdocs.webtestclient.WebTestClientRequestConverterTests$$Lambda$10/1638215613.handle(Unknown Source) 	at org.springframework.web.reactive.function.server.RouterFunctions.lambda$null$3(RouterFunctions.java:232) 	at org.springframework.web.reactive.function.server.RouterFunctions$$Lambda$116/945722724.get(Unknown Source) 	at org.springframework.web.reactive.function.server.RouterFunctions.wrapException(RouterFunctions.java:240) 	at org.springframework.web.reactive.function.server.RouterFunctions.lambda$null$4(RouterFunctions.java:232) 	at org.springframework.web.reactive.function.server.RouterFunctions$$Lambda$110/769798433.apply(Unknown Source) 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:141) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167) 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) 	at reactor.core.publisher.Mono.subscribeWith(Mono.java:3116) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3002) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2969) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2941) 	at org.springframework.test.web.reactive.server.HttpHandlerConnector.lambda$connect$1(HttpHandlerConnector.java:90) 	at org.springframework.test.web.reactive.server.HttpHandlerConnector$$Lambda$65/1108924067.apply(Unknown Source) 	at org.springframework.mock.http.client.reactive.MockClientHttpRequest.lambda$null$2(MockClientHttpRequest.java:125) 	at org.springframework.mock.http.client.reactive.MockClientHttpRequest$$Lambda$95/945591847.get(Unknown Source) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:44) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) 	at reactor.core.publisher.FluxConcatIterable$ConcatIterableSubscriber.onComplete(FluxConcatIterable.java:141) 	at reactor.core.publisher.FluxConcatIterable.subscribe(FluxConcatIterable.java:60) 	at reactor.core.publisher.MonoSourceFlux.subscribe(MonoSourceFlux.java:47) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:172) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3008) 	at reactor.core.publisher.Mono.subscribeWith(Mono.java:3116) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3002) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2969) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2941) 	at org.springframework.test.web.reactive.server.HttpHandlerConnector.connect(HttpHandlerConnector.java:101) 	at org.springframework.test.web.reactive.server.WiretapConnector.connect(WiretapConnector.java:73) 	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.exchange(ExchangeFunctions.java:74) 	at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.exchange(DefaultWebClient.java:326) 	at org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.exchange(DefaultWebTestClient.java:282) 	at org.springframework.restdocs.webtestclient.WebTestClientRequestConverterTests.multipartUploadFromResource(WebTestClientRequestConverterTests.java:191) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.LinkedList[0]->org.springframework.restdocs.webtestclient.WebTestClientRequestConverterTests$1[""inputStream""]) 	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77) 	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1191) 	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:312) 	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:71) 	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:33) 	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) 	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) 	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) 	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:145) 	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:107) 	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25) 	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480) 	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:400) 	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1392) 	at com.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue(ObjectWriter.java:1120) 	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:950) 	at org.springframework.http.codec.json.AbstractJackson2Encoder.encodeValue(AbstractJackson2Encoder.java:133) 	... 117 more ```  ---  **Affects:** 5.0.3  **Issue Links:** - #20854 Support Publishers for multipart data in BodyInserters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93a522f3366b1e524863104b32c1cf73acf37bf3","closed","type: bug,","spring-projects-issues","2018-01-05T10:11:11Z","2019-01-11T15:18:33Z"
"","20765","Configuration class's superclass may be incorrectly skipped if first importer isn't skipped till register bean phase of condition evaluation [SPR-16217]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16217](https://jira.spring.io/browse/SPR-16217?redirect=false)** and commented  `ConfigurationClassParser` populates its `knownSuperclasses` map during the configuration phase of condition evaluation. This means that a subclass that has a register bean phase condition can cause the superclass to be skipped even if another superclass that's encountered later would have included it.  The above is perhaps best illustrated by some tests:  ```java import org.junit.Test;  import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ConditionContext; import org.springframework.context.annotation.Conditional; import org.springframework.context.annotation.ConfigurationCondition; import org.springframework.context.annotation.Import; import org.springframework.core.type.AnnotatedTypeMetadata;  public class KnownSuperclassesBug {  	@Test 	public void baseConfigurationIsIncludedWhenFirstSuperclassReferenceIsSkippedInRegisterBeanPhase() { 		try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext( 				RegisterBeanPhaseImportingConfiguration.class)) { 			context.getBean(""someBean""); 		} 	}  	@Test 	public void baseConfigurationIsIncludedWhenFirstSuperclassReferenceIsSkippedInParseConfigurationPhase() { 		try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext( 				ParseConfigurationPhaseImportingConfiguration.class)) { 			context.getBean(""someBean""); 		} 	}  	public static class RegisterBeanPhaseCondition implements ConfigurationCondition {  		@Override 		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { 			return false; 		}  		@Override 		public ConfigurationPhase getConfigurationPhase() { 			return ConfigurationPhase.REGISTER_BEAN; 		}  	}  	public static class ParseConfigurationPhaseCondition 			implements ConfigurationCondition {  		@Override 		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { 			return false; 		}  		@Override 		public ConfigurationPhase getConfigurationPhase() { 			return ConfigurationPhase.PARSE_CONFIGURATION; 		}  	}  	@Import({ RegisterBeanPhaseConditionConfiguration.class, BarConfiguration.class }) 	public static class RegisterBeanPhaseImportingConfiguration {  	}  	@Import({ ParseConfigurationPhaseConditionConfiguration.class, 			BarConfiguration.class }) 	public static class ParseConfigurationPhaseImportingConfiguration {  	}  	public static class BaseConfiguration {  		@Bean 		public String someBean() { 			return ""foo""; 		}  	}  	@Conditional(RegisterBeanPhaseCondition.class) 	public static class RegisterBeanPhaseConditionConfiguration 			extends BaseConfiguration {  	}  	@Conditional(ParseConfigurationPhaseCondition.class) 	public static class ParseConfigurationPhaseConditionConfiguration 			extends BaseConfiguration {  	}  	public static class BarConfiguration extends BaseConfiguration {  	}  } ```  My expectation is that both tests will pass. As things stand `baseConfigurationIsIncludedWhenFirstSuperclassReferenceIsSkippedInRegisterBeanPhase` fails and `baseConfigurationIsIncludedWhenFirstSuperclassReferenceIsSkippedInParseConfigurationPhase()` passes.  The first test fails because `RegisterBeanPhaseConditionConfiguration` is processed and `BaseConfiguration` is added to the `knownSuperclasses` map. When `BarConfiguration` is processed `BaseConfiguration` is already in the `knownSuperclasses` map so its ""import"" via `BarConfiguration` is lost. When the register bean phase condition on `RegisterBeanPhaseConditionConfiguration` is evaluated it doesn't match so it's skipped along with `BaseConfiguration` that it imports.  ---  **Affects:** 4.3.12, 5.0.1  **Reference URL:** https://github.com/spring-projects/spring-boot/pull/11063  **Issue Links:** - #19538 ImportAware.setImportMetadata not invoked if import inherited from superclass with negative condition - #21690 TrackedConditionEvaluator skips loading bean definitions for configuration classes that should not be skipped  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/47383fce97e8748481e7ffe0896b08366d058ddb, https://github.com/spring-projects/spring-framework/commit/08c95fbcb38645486309074eaef7fcf42b846e38  1 votes, 5 watchers","open","in: core,","spring-projects-issues","2017-11-20T17:01:28Z","2019-01-11T13:31:23Z"
"","20679","Multipart form data can no longer be sent with syncBody in WebTestClient [SPR-16131]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16131](https://jira.spring.io/browse/SPR-16131?redirect=false)** and commented  I just upgraded to Framework 5.0.1 and noticed a regression when using `syncBody` to send multipart form data. With 5.0.0, this worked:  ```java MultiValueMap multipartData = new LinkedMultiValueMap<>(); multipartData.add(""file"", new ByteArrayResource(new byte[] { 1, 2, 3, 4 }) {  	@Override 	public String getFilename() { 		return ""image.png""; 	}  }); ExchangeResult result = WebTestClient 		.bindToRouterFunction(RouterFunctions.route(POST(""/foo""), (req) -> { 			req.body(BodyExtractors.toMultipartData()).block(); 			return ServerResponse.ok().build(); 		})).configureClient().baseUrl(""http://localhost"").build().post() 		.uri(""/foo"").syncBody(multipartData).exchange().expectBody() 		.returnResult(); ```  Following the upgrade to 5.0.1 it appears to be trying to send form data rather than multipart data and, as a result, it fails:  ``` java.lang.ClassCastException: org.springframework.restdocs.webtestclient.WebTestClientRequestConverterTests$1 cannot be cast to java.lang.String 	at org.springframework.http.codec.FormHttpMessageWriter.generateForm(FormHttpMessageWriter.java:127) 	at org.springframework.http.codec.FormHttpMessageWriter.lambda$write$0(FormHttpMessageWriter.java:102) 	at org.springframework.http.codec.FormHttpMessageWriter$$Lambda$185/198499365.apply(Unknown Source) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:107) 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1649) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2913) 	at reactor.core.publisher.Mono.subscribeWith(Mono.java:3021) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2907) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2874) 	at reactor.core.publisher.Mono.subscribe(Mono.java:2846) 	at org.springframework.test.web.reactive.server.HttpHandlerConnector.connect(HttpHandlerConnector.java:101) 	at org.springframework.test.web.reactive.server.WiretapConnector.connect(WiretapConnector.java:61) 	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.exchange(ExchangeFunctions.java:74) 	at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.exchange(DefaultWebClient.java:327) 	at org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.exchange(DefaultWebTestClient.java:282) 	at org.springframework.restdocs.webtestclient.WebTestClientRequestConverterTests.multipartUploadFromResource(WebTestClientRequestConverterTests.java:191) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) 	Suppressed: java.lang.Exception: #block terminated with an error 		at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:126) 		at reactor.core.publisher.Mono.block(Mono.java:1185) 		... 25 more ```  It's trying to cast the anonymous `ByteArrayResource` subclass to a `String`. I can work around the problem by using `.body(BodyInserters.fromMultipartData(multipartData))` in place of `.syncBody(multipartData)`.  ---  **Affects:** 5.0.1  **Issue Links:** - #20604 WebClient failed to write application/x-www-form-urlencoded - #20666 Sending form and multipart data with WebTestClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8083eaae54233b84edeeaf253234503c2d7f7256","closed","type: bug,","spring-projects-issues","2017-10-30T13:28:57Z","2019-01-11T13:14:10Z"
"","20672","Cookies are not available from an ExchangeResult [SPR-16124]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16124](https://jira.spring.io/browse/SPR-16124?redirect=false)** and commented  The `ExchangeResult` produced by `WebTestClient` does not provide access to the cookies that were included in the request. As a result, the following test will fail:  ```java ExchangeResult result = WebTestClient         .bindToRouterFunction(route(GET(""/foo""), (req) -> ServerResponse.ok().build()))         .build().get().uri(""/"").cookie(""a"", ""alpha"").exchange().returnResult(); assertThat(result.getRequestHeaders().get(HttpHeaders.COOKIE), is(notNullValue())); ```    ---  **Affects:** 5.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/579328bd7ab1517ee88cdda205b39d28d2943ba8","closed","type: bug,","spring-projects-issues","2017-10-27T14:04:53Z","2017-11-27T12:17:07Z"
"","20666","Sending form and multipart data with WebTestClient [SPR-16118]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16118](https://jira.spring.io/browse/SPR-16118?redirect=false)** and commented  I'm enjoying the more fluent nature of `WebTestClient` when compared with `MockMvc`, but have found that sending a request with form or multipart data body jars a bit. The main problem is that, as far as I can tell, I have to create a `MultiValueMap` for the data separately and then use `BodyInserters.fromMultipartData` or `BodyInserters.fromFormData`, for example:  ```java MultiValueMap formData = new LinkedMultiValueMap<>(); formData.add(""username"", ""Tester""); this.webTestClient.post().uri(""/users"").body(BodyInserters.fromFormData(formData)) ```  I'd like to be able to do something like this instead:  ```java this.webTestClient.post().uri(""/users"").body(BodyInserters.formData().param(""username"", ""Tester"")) ```  ---  **Affects:** 5.0.1  **Sub-tasks:** - #20681 Chained API for form and multipart data in BodyInserters - #20682 Create builder for multipart bodies  **Issue Links:** - #20679 Multipart form data can no longer be sent with syncBody in WebTestClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/14f02d71927fba21336ec9d81ec8631eab341513, https://github.com/spring-projects/spring-framework/commit/48c2cc18b97362bd526e65a990e688fbbf296bb4","closed","type: enhancement,","spring-projects-issues","2017-10-26T10:46:30Z","2019-01-14T04:33:36Z"
"","20649","Make it easier to unit test code that integrates with WebTestClient [SPR-16101]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16101](https://jira.spring.io/browse/SPR-16101?redirect=false)** and commented  I'm working on REST Docs' integration with `WebFlux` and, in particular, `WebTestClient`. Part of this integration is a `Consumer` that a user can pass to `BodyContentSpec.consumeWith(Consumer>)` to document an exchange. As far as I can tell it's very hard, if not impossible, to unit test such a `Consumer` as I can't create a `EntityExchangeResult` due to its constructor being package-private. `ExchangeResult` and `FluxExchangeResult` also have the same problem.   ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a982123ed5067c2e00101db9a8e317cd6b1434b9","closed","type: enhancement,","spring-projects-issues","2017-10-23T11:49:20Z","2018-12-05T17:47:17Z"
"","20624","setArguments(null) on MethodInvoker no longer coerces null to Object[0] [SPR-16075]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16075](https://jira.spring.io/browse/SPR-16075?redirect=false)** and commented  There's a regression in 4.3.12 caused by [this change](https://github.com/spring-projects/spring-framework/commit/9fdc4404a5338c687776dc2d3066dc6b0281d1ed#diff-ef25a963fecb68f9017c86db0d8449e3R126). Spring Batch 3.0.8 [relies on the old behaviour](https://github.com/spring-projects/spring-batch/blob/82b810393660eb87b42002521ebd95fb4f9d0a6d/spring-batch-infrastructure/src/main/java/org/springframework/batch/item/adapter/AbstractMethodInvokingDelegator.java#L213) and, as a result, a `NullPointerException` is now thrown:  ``` java.lang.NullPointerException 	at org.springframework.util.MethodInvoker.prepare(MethodInvoker.java:163) 	at org.springframework.batch.item.adapter.AbstractMethodInvokingDelegator.doInvoke(AbstractMethodInvokingDelegator.java:108) 	at org.springframework.batch.item.adapter.AbstractMethodInvokingDelegator.invokeDelegateMethod(AbstractMethodInvokingDelegator.java:60) 	at org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter.execute(MethodInvokingTaskletAdapter.java:47) 	at org.springframework.batch.core.step.tasklet.StepHandlerAdapterTests.testMapResultWithNull(StepHandlerAdapterTests.java:66) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) (41 more lines...) ```  ---  **Affects:** 4.3.12  **Issue Links:** - #20621 RequestMapping method returning Future with null result causes NullPointerException - #20215 Backport selected refinements from the nullability efforts in 5.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03be8095ca105714ffb3dfbbe3c5a7bee6b6ff83, https://github.com/spring-projects/spring-framework/commit/c29b6f5b5565f8103faa288f3708cb9c736d7ee7","closed","in: core,","spring-projects-issues","2017-10-16T12:38:55Z","2019-01-11T13:11:08Z"
"","20550","Lambda-based consumption of an ObjectProvider's object when available [SPR-16001]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16001](https://jira.spring.io/browse/SPR-16001?redirect=false)** and commented  In a similar vein to #19474, I just wrote the following:  ```java @Bean public HttpHandler httpHandler( 		ObjectProvider webSessionManagerProvider) { 	WebHttpHandlerBuilder builder = WebHttpHandlerBuilder 			.applicationContext(this.applicationContext); 	WebSessionManager webSessionManager = webSessionManagerProvider 			.getIfAvailable(); 	if (webSessionManager != null) { 		builder.sessionManager(webSessionManager); 	} 	return builder.build(); } ```  I'd prefer to avoid the local variable and null check. Something like this:  ```java @Bean public HttpHandler httpHandler( 		ObjectProvider webSessionManagerProvider) { 	WebHttpHandlerBuilder builder = WebHttpHandlerBuilder 			.applicationContext(this.applicationContext); 	webSessionManagerProvider.consumeIfAvailable( 			(webSessionManager) -> builder.sessionManager(webSessionManager)); 	return builder.build(); } ```  ---  **Affects:** 5.0 RC4  **Issue Links:** - #19546 Provide computeIfAbsent-like method on ObjectProvider  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e927cae4763788d5ea43ff7cde5bb025234f1eae","closed","type: enhancement,","spring-projects-issues","2017-09-25T13:18:53Z","2019-01-11T14:15:31Z"
"","20541","DispatcherHandler no longer orders HandlerMapping beans [SPR-15991]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15991](https://jira.spring.io/browse/SPR-15991?redirect=false)** and commented  [This change](https://github.com/spring-projects/spring-framework/commit/819ca0dbd40cccd4eae0353ff0b9aeaf248d3ab6) has introduced a regression which means that `HandlerMapping` beans are no longer ordered. Currently, `this.handlerMappings` is being sorted:  ```java ArrayList mappings = new ArrayList<>(mappingBeans.values()); AnnotationAwareOrderComparator.sort(this.handlerMappings); this.handlerMappings = Collections.unmodifiableList(mappings); ```  I believe it should be `mappings` that is sorted:  ```java ArrayList mappings = new ArrayList<>(mappingBeans.values()); AnnotationAwareOrderComparator.sort(mappings); this.handlerMappings = Collections.unmodifiableList(mappings); ```  ---  **Affects:** 5.0 GA  **Issue Links:** - #20488 Provide an API for introspection of handler mappings  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/816a58fcf91b7cdb27b430ae6b96c9143a67d124, https://github.com/spring-projects/spring-framework/commit/31619b3ffbf4e36bf9c3974d07115a8e3417ba03, https://github.com/spring-projects/spring-framework/commit/f9b319d3ba9d3141fd5edc4fde558daebd2c596f","closed","type: bug,","spring-projects-issues","2017-09-22T15:15:24Z","2019-01-11T18:22:17Z"
"","20532","Provide read access to the scheduled tasks at runtime [SPR-15982]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15982](https://jira.spring.io/browse/SPR-15982?redirect=false)** and commented  We'd like to provide an actuator endpoint in Boot for an application's scheduled tasks. We have [a pull request to add the functionality](https://github.com/spring-projects/spring-boot/pull/9623) but it (ab)uses SchedulingConfigurer to capture a snapshot of the scheduled tasks during startup. There's an ordering issue here as another configurer may schedule tasks that would be missed. We could keep a reference to the configurer and call it whenever the actuator endpoint is called, but this feels like a larger abuse of the configurer callback.  I had hoped that I could just inject `ScheduledTaskRegistrar` but, while its javadoc describes it as a bean, it doesn't appear to actually be one. It also exposes more than I need; I only to read information about registered tasks, not register additional tasks.  Would it be possible to provide an official API for getting information about any scheduled tasks that have been registered? Perhaps via a bean that can be retrieved from the context if the user has enabled scheduling.  ---  **Affects:** 5.0 RC4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/8831  **Issue Links:** - #20970 ScheduledTaskRegistrar to provide all scheduled tasks with getScheduledTasks()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/85baba33bf89de4fc642dea68a759e1e0553faa4, https://github.com/spring-projects/spring-framework/commit/ffd6eff369014f49102bacaa84c0826235c01ee5","closed","type: enhancement,","spring-projects-issues","2017-09-20T12:09:59Z","2019-01-11T18:23:12Z"
"","20489","Provide an API for introspection of a dispatcher handler's handler mappings [SPR-15935]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15935](https://jira.spring.io/browse/SPR-15935?redirect=false)** and commented  Spring Boot provides an Actuator endpoint that aims to list all Spring MVC mappings. We'd like to also offer something similar for WebFlux. To that end, and in the same vein as #20488 for Spring MVC, would it be possible for WebFlux to provide a supported API for introspecting a dispatcher handler's handler mappings?  As with MVC, I suspect there may be some mileage in reflectively accessing `DispatcherHandler.handerMappings` and burrowing down from there but that's a hack and I suspect would be impeded by the ""loss"" of mapping information in composed router functions (#20487).  ---  **Affects:** 5.0 RC3  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9979  **Issue Links:** - #20488 Provide an API for introspection of handler mappings (_**""duplicates""**_) - #20487 Log message for a composed router function contains no information about the mappings or their handlers","closed","type: enhancement,","spring-projects-issues","2017-09-07T11:37:10Z","2019-01-11T18:11:16Z"
"","20488","Provide an API for introspection of handler mappings [SPR-15934]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15934](https://jira.spring.io/browse/SPR-15934?redirect=false)** and commented  Spring Boot provides an Actuator endpoint that aims to list all Spring MVC (or WebFlux) mappings. It's current implementation is rather haphazard in terms of what it does and does not list, and the format in which mappings are listed. Please see some of the comments and concerns raised in https://github.com/spring-projects/spring-boot/issues/9979 for more details.  Would it be possible for Spring MVC and WebFlux to provide a supported API for introspecting DispatcherServlet and DispatcherHandler handler mappings respectively? I think Boot's current implementation could, in some ways, be improved by reflectively accessing `DispatcherServlet.handlerMappings` and burrowing down from there but that would still be something of a hack.  ---  **Affects:** 5.0 RC3  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9979  **Issue Links:** - #20489 Provide an API for introspection of a dispatcher handler's handler mappings (_**""is duplicated by""**_) - #20541 DispatcherHandler no longer orders HandlerMapping beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41b53de6440687fad47504bc35857667e6b7e6c1, https://github.com/spring-projects/spring-framework/commit/9ff4c0bff8d7d9b223986daaf74bfb98f9939386, https://github.com/spring-projects/spring-framework/commit/819ca0dbd40cccd4eae0353ff0b9aeaf248d3ab6, https://github.com/spring-projects/spring-framework/commit/c28a6357c52cba0e2edab923fc22741dcd94a95f","closed","type: enhancement,","spring-projects-issues","2017-09-07T11:30:49Z","2019-01-11T18:11:13Z"
"","20487","Log message for a composed router function contains no information about the mappings or their handlers [SPR-15933]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15933](https://jira.spring.io/browse/SPR-15933?redirect=false)** and commented  When `RouterFunctionMapping` logs a message about a composed router function, the message conveys nothing other than something was mapped. This severely limits the messages usefulness.  With a function with a single mapping:  ```java @Bean public RouterFunction foo() { 	return route(GET(""/foo""), (request) -> ServerResponse.ok().build()); } ```  The log message describes the predicates and the target of the mapping:  ``` 2017-09-07 12:12:49.758  INFO 46234 --- [           main] o.s.w.r.f.s.s.RouterFunctionMapping      : Mapped (GET && /foo) -> com.example.demo.Gh9979Application$$Lambda$159/1751403001@7fc6de5b ```  By contrast, with a composed router function:  ```java @Bean public RouterFunction barAndBaz() { 	return route(GET(""/bar""), this::emptyOk).and(route(GET(""baz""), this::emptyOk)); } ```  The log message doesn't describe any of the predicates or the targets of the mappings:  ``` 2017-09-07 12:12:49.758  INFO 46234 --- [           main] o.s.w.r.f.s.s.RouterFunctionMapping      : Mapped org.springframework.web.reactive.function.server.RouterFunction$$Lambda$163/632475595@fb9c7aa ```  Would it be possible to capture the information about each individual function that's part of the composed function so that the log message can convey some information about all of the mappings that are involved?  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20268 Get a description of all registered routes in a RouterFunction (_**""depends on""**_) - #20489 Provide an API for introspection of a dispatcher handler's handler mappings - #20268 Get a description of all registered routes in a RouterFunction","closed","type: enhancement,","spring-projects-issues","2017-09-07T11:22:42Z","2019-01-11T18:11:22Z"
"","20486","spring-framework-bom lists unpublished spring-build-src module [SPR-15932]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15932](https://jira.spring.io/browse/SPR-15932?redirect=false)** and commented  The latest 5.0.0 build snapshots have started managing the `spring-build-src` module that isn't published:  ```xml      …              org.springframework         spring-build-src         5.0.0.BUILD-SNAPSHOT          …  ```  Can it please be filtered out? Its addition breaks the Platform's build which verifies that everything in its bom can be resolved.   ---  **Affects:** 5.0 RC4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/69edd4ac5019e03022394d19d98d3403e7eec374","closed","type: bug,","spring-projects-issues","2017-09-07T09:22:06Z","2017-09-11T12:09:48Z"
"","20464","WebFlux incorrectly falls back to application/json for method that produces application/octet-stream and returns ResponseEntity [SPR-15910]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15910](https://jira.spring.io/browse/SPR-15910?redirect=false)** and commented  The problem is illustrated by this sample application:  ```java package com.example.demo;  import org.reactivestreams.Publisher; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.core.io.ByteArrayResource; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import reactor.core.publisher.Mono;  @SpringBootApplication @RestController public class WebFluxResponseEntityBugApplication {  	public static void main(String[] args) { 		SpringApplication.run(WebFluxResponseEntityBugApplication.class, args); 	}  	@RequestMapping(path=""publisher-wildcard"", produces=MediaType.APPLICATION_OCTET_STREAM_VALUE) 	public Publisher> publisherWildcard() { 		return Mono.just(new ResponseEntity<>(new ByteArrayResource(""foo"".getBytes()), HttpStatus.OK)); 	}  	@RequestMapping(path=""publisher-object"", produces=MediaType.APPLICATION_OCTET_STREAM_VALUE) 	public Publisher> publisherObject() { 		return Mono.just(new ResponseEntity<>(new ByteArrayResource(""bar"".getBytes()), HttpStatus.OK)); 	}  	@RequestMapping(path=""wildcard"", produces=MediaType.APPLICATION_OCTET_STREAM_VALUE) 	public ResponseEntity wildcard() { 		return new ResponseEntity<>(new ByteArrayResource(""foo"".getBytes()), HttpStatus.OK); 	}  	@RequestMapping(path=""object"", produces=MediaType.APPLICATION_OCTET_STREAM_VALUE) 	public ResponseEntity object() { 		return new ResponseEntity<>(new ByteArrayResource(""bar"".getBytes()), HttpStatus.OK); 	}  } ```  Requests to `wildcard` and `publisher-wildcard` produce the expected 200 response. Requests to `object` and `publisher-object` produce a 500 triggered by this exception:  ``` org.springframework.core.codec.CodecException: Type definition error: [simple type, class java.io.ByteArrayInputStream]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: org.springframework.core.io.ByteArrayResource[""inputStream""]) 	at org.springframework.http.codec.json.AbstractJackson2Encoder.encodeValue(AbstractJackson2Encoder.java:133) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at org.springframework.http.codec.json.AbstractJackson2Encoder.lambda$encode$0(AbstractJackson2Encoder.java:97) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:107) [reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:91) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) [reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(ChannelSendOperator.java:143) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) [reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:68) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:76) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	at reactor.core.publisher.Mono.subscribe(Mono.java:2769) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:172) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:148) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1010) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:238) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1010) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:288) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:72) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1567) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:139) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1381) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:67) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:173) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:161) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:147) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:148) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:270) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:790) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) [reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1567) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) [reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1381) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1255) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) [reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.Mono.subscribe(Mono.java:2769) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:414) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:91) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:55) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.Mono.subscribe(Mono.java:2769) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:165) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) ~[reactor-core-3.1.0.M3.jar:3.1.0.M3] 	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:380) ~[reactor-netty-0.7.0.M1.jar:0.7.0.M1] 	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:354) ~[reactor-netty-0.7.0.M1.jar:0.7.0.M1] 	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-common-4.1.13.Final.jar:4.1.13.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403) ~[netty-common-4.1.13.Final.jar:4.1.13.Final] 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462) ~[netty-transport-4.1.13.Final.jar:4.1.13.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) ~[netty-common-4.1.13.Final.jar:4.1.13.Final] 	at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_121] Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: org.springframework.core.io.ByteArrayResource[""inputStream""]) 	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1191) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:305) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:71) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:33) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1396) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue(ObjectWriter.java:1120) ~[jackson-databind-2.9.0.jar:2.9.0] 	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:950) ~[jackson-databind-2.9.0.jar:2.9.0] 	at org.springframework.http.codec.json.AbstractJackson2Encoder.encodeValue(AbstractJackson2Encoder.java:130) ~[spring-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT] 	... 69 common frames omitted ```  This appears to happen because the `Object` in `ResponseEntity` causes `AbstractMessageWriterResultHandler` to use `EncoderHttpMessageWritter` rather than `ResourceHttpMessageWriter`.  All four request mappings work as expected with Spring MVC. I have tested with both Spring Framework 5.0.0.RC3 and 5.0.0.BUILD-SNAPSHOT.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20495 Consistent type resolution for ? and Object element type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03eb6f76db2208e4283027fba338fe8da9dd755a, https://github.com/spring-projects/spring-framework/commit/5d4ee09d53a727407771c500fc21cbd01c7f3083","closed","type: bug,","spring-projects-issues","2017-08-30T09:31:22Z","2019-01-11T18:12:09Z"
"","20401","FileSystemUtils.deleteRecursively always returns false [SPR-15846]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15846](https://jira.spring.io/browse/SPR-15846?redirect=false)** and commented  The `root` is deleted in `postVisitDirectory` by a call to `Files.delete(dir)`. Once the walking of the file tree has completed `Files.deleteIfExists(root)` is called and its result is returned. This result is always `false` due to the earlier `File.delete(dir)` call.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20400 FileSystemUtils.copyRecursively no longer replaces existing files - #20304 Revise FileSystemResource / FileSystemUtils / FileCopyUtils towards NIO.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fabc9c28d7e115431e25da81a0dca47787a683aa","closed","in: core,","spring-projects-issues","2017-08-03T11:04:47Z","2019-01-11T17:40:43Z"
"","20400","FileSystemUtils.copyRecursively no longer replaces existing files [SPR-15845]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15845](https://jira.spring.io/browse/SPR-15845?redirect=false)** and commented  In 4.3, `copyRecursively` would replace existing files. In 5.0, the move to `Files.copy` means that existing files are no longer overwritten and the copy fails with a `FileAlreadyExistsException`.  I wonder if this change was intentional (and could perhaps be mentioned in the javadoc), or if using `StandardCopyOption.REPLACE_EXISTING` would be appropriate.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20401 FileSystemUtils.deleteRecursively always returns false  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fabc9c28d7e115431e25da81a0dca47787a683aa","closed","in: core,","spring-projects-issues","2017-08-03T10:46:08Z","2019-01-11T17:40:54Z"
"","20620","StreamingResponseBody returns unexpected output on Tomcat [SPR-16071]","**[Andrey Dyachkov](https://jira.spring.io/secure/ViewProfile.jspa?name=adyachkov)** opened **[SPR-16071](https://jira.spring.io/browse/SPR-16071?redirect=false)** and commented  Writing directly to StreamingResponseBody output stream introduces unexpected input on client side:  ```java @SpringBootApplication public class TomcatBugApplication {  	public static void main(String[] args) { 		SpringApplication.run(TomcatBugApplication.class, args); 	}      @Controller     public static class TomcatBugController {         @RequestMapping(""/echo/{text}"")         public StreamingResponseBody getBug(@PathVariable(""text"") String text) {             return (out) -> {                 while (true) {                     try {                         Thread.sleep(100);                     } catch (InterruptedException e) {                         e.printStackTrace();                     }                     out.write(text.getBytes(""UTF-8""));                     out.write(""\n"".getBytes());                     out.flush();                 }             };         }     } } ```  Calling it using several times using curl:  First time:  ```java curl -v -N http://localhost:8080/echo/YYYYYYY   *   Trying ::1...  * TCP_NODELAY set  * Connected to localhost (::1) port 8080 (#0)  > GET /echo/YYYYYYY HTTP/1.1  > Host: localhost:8080  > User-Agent: curl/7.54.0  > Accept: */*  >  < HTTP/1.1 200  < Transfer-Encoding: chunked  < Date: Sat, 14 Oct 2017 13:12:37 GMT  <  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  YYYYYYY  ^C` ```  the second time:  ```java curl -v -N http://localhost:8080/echo/YYYYYYY  *   Trying ::1... * TCP_NODELAY set * Connected to localhost (::1) port 8080 (#0) > GET /echo/YYYYYYY HTTP/1.1 > Host: localhost:8080 > User-Agent: curl/7.54.0 > Accept: */* > YYYYYYY YYYYYYY   8 YYYYYYY  8 YYYYYYY  ^C ```    ---  **Affects:** 4.3.11  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/eedf7d3b114417f09c6b2491eaf51658436e4020","closed","status: invalid,","spring-projects-issues","2017-10-14T13:42:45Z","2019-01-12T05:20:08Z"
"","21024","Errors when Java Config declared TransactionProxyFactoryBean's target bean depends on an annotation declared bean that depends on another bean [SPR-16480]","**[Andrew H](https://jira.spring.io/secure/ViewProfile.jspa?name=meowpressreturn)** opened **[SPR-16480](https://jira.spring.io/browse/SPR-16480?redirect=false)** and commented  This may be another manifestation of #20973 which I reported last week, but it affects Java configured TransactionProxyFactoryBean and it results in multiple exceptions being logged and the creation of the context failing.  It may be reproduced with the following bean configuration in Spring 4.3.14 or 5.0.3:  **transactionManager** - A no-op dummy implementation of PlatformTransactionManager  **javaBazBean** - A TransactionProxyFactoryBean whose target is an instance of BazBean, this is declared in a `@Bean` method of a `@Configuration` class and expects to be injected with a PlatformTransactionManager and an instance of BarBean  **barBean** - A BarBean declared using `@Component`, its constructor takes a FooBean  **fooBean** - A FooBean (declared using XML or `@Component`), its constructor takes no arguments  There is no circular reference yet it complains barBean (which depends only on fooBean) is still in creation, logging this exception in the attempt to create each of the beans that depends on barBean: ""org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'barBean': Requested bean is currently in creation: Is there an unresolvable circular reference?""  As with #20973, the order of annotated bean creation plays a role:  If you declare another bean using `@Component` that depends on a BarBean and its classname comes alphabetically before BarBean - say ""Aardvard"" for example, then the errors vanish (and a WARNING appears instead), but if you rename Aardvark to Zebra, the errors will return.  I have created and attached a small sample project to demonstrate the issue. (The main() class is named BeanCreationError).  Background information: I was attempting to replace some old XML configuration with annotation based configuration in order to reap compile-time error checking benefits. Unfortunately annotation based transaction configuration does not yet seem to provide for setting targetProxyClass at the bean level (#8346 has now been waiting 11 years for triage) hence my attempt to use Java Config with TransactionProxyFactoryBean in the hopes of reproducing the original XML configurations in Java.. This however is blocked by the above problem.  ---  **Affects:** 4.3.14, 5.0.3  **Attachments:** - [beancreationerror_20180209.zip](https://jira.spring.io/secure/attachment/25381/beancreationerror_20180209.zip) (_9.72 kB_)  **Issue Links:** - #20973 Spurious WARNINGs when XML declared TransactionProxyFactoryBean's target bean depends on an annotation declared bean that depends on another bean","open","in: core,","spring-projects-issues","2018-02-09T06:45:35Z","2019-01-11T15:30:16Z"
"","20973","Spurious WARNINGs when XML declared TransactionProxyFactoryBean's target bean depends on an annotation declared bean that depends on another bean [SPR-16427]","**[Andrew H](https://jira.spring.io/secure/ViewProfile.jspa?name=meowpressreturn)** opened **[SPR-16427](https://jira.spring.io/browse/SPR-16427?redirect=false)** and commented  While trying to update some old XML configured code to use annotation configuration for bean declarations I started to see many WARNINGs about BeanCreationException in my log on startup.  Having spend quite some time trying to find where I had created a circular dependency in my beans, I realised that I hadn't and that the WARNINGs were all associated with XML declarations of TransactionProxyFactoryBean. I did some experimentation and created a small project to reproduce the issue in isolation.  Consider the following bean configuration:  **transactionManager**- A no-op dummy implementation of PlatformTransactionManager declared in XML  **bazBean**- A TransactionProxyFactoryBean whose target is bazBean_target  **bazBean_target**, A BazBean that can be declared with XML or with `@Component`, its constructor takes a BarBean  **barBean**- A BarBean declared using `@Component`, its constructor takes a FooBean  **fooBean** - A FooBean declared using XML or `@Component`, its constructor takes no arguments  For the example, none of these beans need have any methods or actually do anything. The BazBean and BarBean classes use constructor injection, and FooBean has no dependencies. It is necessary for BarBean to depend on another bean. If BarBean has no dependencies then the WARNING doesn't occur.  The above configuration (with bazBean_target in xml) will result in the following 1 warning being logged on startup:  _WARNING: Bean creation exception on non-lazy FactoryBean type check: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bazBean' defined in class path resource [context.xml]: Cannot resolve reference to bean 'bazBean_target' while setting bean property 'target'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bazBean_target' defined in class path resource [context.xml]: Cannot resolve reference to bean 'barBean' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'barBean': Requested bean is currently in creation: Is there an unresolvable circular reference?_  If you define bazBean_target using `@Component` you will get the following 2 warnings logged:  \_WARNING: Bean creation exception on non-lazy FactoryBean type check: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bazBean' defined in class path resource [context.xml]: Cannot resolve reference to bean 'bazBean_target' while setting bean property 'target'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'bazBean_target' defined in file [C:\dev\beancreationwarning\target\classes\com\example\beancreationwarning\beans\BazBean.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'barBean': Requested bean is currently in creation: Is there an unresolvable circular reference? Jan 28, 2018 7:51:12 PM org.springframework.beans.factory.support.AbstractBeanFactory getTypeForFactoryBean WARNING: Bean creation exception on non-lazy FactoryBean type check: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bazBean' defined in class path resource [context.xml]: Cannot resolve reference to bean 'bazBean_target' while setting bean property 'target'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'bazBean_target': Requested bean is currently in creation: Is there an unresolvable circular reference?_  The beans do get created and work fine.  The order of annotated bean creation plays a role:  In the above example, if you declare another bean using `@Component` that depends on a BarBean and its classname comes alphabetically before BarBean - say ""Aardvard"" for example, then the warning on bazBean vanishes, but if you rename Aardvark to Zebra, the warning will return.  I have not experimented to determine if the issue occurs with Java Config or with other types of ProxyFactoryBean. It is present in Spring 4.3.14 and 5.0.3 (and I would suspect earlier versions, but haven't verified)  ---  **Affects:** 4.3.14, 5.0.3  **Attachments:** - [beancreationwarning_20180129T123600.zip](https://jira.spring.io/secure/attachment/25355/beancreationwarning_20180129T123600.zip) (_7.43 kB_)  **Issue Links:** - #21024 Errors when Java Config declared TransactionProxyFactoryBean's target bean depends on an annotation declared bean that depends on another bean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65743a68e6c3c4a12128d2093ec9be2f4954767f, https://github.com/spring-projects/spring-framework/commit/7772b914c694b5b16d6e9c9f56acf7b03b47f9d4  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-01-29T04:41:59Z","2019-01-11T15:37:10Z"
"","20986","Quartz Scheduler -allow to use standard properties in non-standard factories [SPR-16440]","**[Andrej Urvantsev](https://jira.spring.io/secure/ViewProfile.jspa?name=urvancevav)** opened **[SPR-16440](https://jira.spring.io/browse/SPR-16440?redirect=false)** and commented  `org.springframework.scheduling.quartz.SchedulerFactoryBean.initSchedulerFactory` has condition which forbids usage of standard spring's quartz properties with non-standard factories:  ```java if (!(schedulerFactory instanceof StdSchedulerFactory)) {      if (this.configLocation != null || this.quartzProperties != null ||                    this.taskExecutor != null || this.dataSource != null) {           throw new IllegalArgumentException(                             ""StdSchedulerFactory required for applying Quartz properties: "" + schedulerFactory);      }      // Otherwise assume that no initialization is necessary...      return; } ```  I think it's up to factory itself to decide what properties to use, so is it possible to change it to the following?  ```java if (!(schedulerFactory instanceof StdSchedulerFactory)) { // Assume that no initialization is necessary... 	return; } ```  ---  **Issue Links:** - #20985 Quartz Scheduler - configurable SchedulerFactory","closed","type: enhancement,","spring-projects-issues","2018-01-30T16:09:12Z","2019-01-11T15:34:56Z"
"","20985","Quartz Scheduler - configurable SchedulerFactory [SPR-16439]","**[Andrej Urvantsev](https://jira.spring.io/secure/ViewProfile.jspa?name=urvancevav)** opened **[SPR-16439](https://jira.spring.io/browse/SPR-16439?redirect=false)** and commented  I was trying to integrate [quartz-mongodb](https://github.com/michaelklishin/quartz-mongodb) with Spring, but found that it's nearly impossible to do that without ugly hacks.  What I wanted is to provide a bean that implements org.quartz.SchedulerFactory which injects MongoClient, so I can create a scheduler which can store jobs in MongoDB.  The problem is in the implementation of `org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet`:  ```java // Create SchedulerFactory instance... SchedulerFactory schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass); initSchedulerFactory(schedulerFactory); ```  Here it instantiates a factory using reflection(I think). Instead I would like to have conditional scheduler factory initialization - if there is a bean of org.quartz.SchedulerFactory, then use it, otherwise use the code above.  Or even better: StdSchedulerFactory can be created as conditional bean as well - if there is not any SchedulerFactory, then create default one.  In the worst case the code above can be moved to protected method so it's possible to override it.  ---  **Affects:** 4.3.14, 5.0.3  **Issue Links:** - #20986 Quartz Scheduler -allow to use standard properties in non-standard factories  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cd57335e46bb91accb82f64eaa122ec78184075a, https://github.com/spring-projects/spring-framework/commit/857a5b03b76cb44e1873abc449a14fb8f5055ac5, https://github.com/spring-projects/spring-framework/commit/33d655a63479ea6fdfda96b142e39bc5412f68ca, https://github.com/spring-projects/spring-framework/commit/c7f60d17998c7791f1acd4d31a92b2f5bb3f6bff  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-01-30T15:29:39Z","2019-01-11T15:36:27Z"
"","20950","Removed unnecessary cast to ""int"" in SimpleStreamingClientHttpRequest [SPR-16404]","**[Andrei Maus](https://jira.spring.io/secure/ViewProfile.jspa?name=mrmaus)** opened **[SPR-16404](https://jira.spring.io/browse/SPR-16404?redirect=false)** and commented  ContentLength should not be casted to int in SimpleStreamingClientHttpRequest.getBodyInternal()  Since Java7 HttpURLConnection offers setFixedLengthStreamingMode method with long parameter which should be prefered over version with int argument, therefore casting ContentLength to int is no longer needed. Moreover it makes impossible to stream payload larger than Integer.MAX_VALUE   ---  **Affects:** 5.0.2  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1648","closed","type: enhancement,","spring-projects-issues","2018-01-20T10:41:27Z","2018-01-23T10:05:12Z"
"","21109","Support @ResponseStatus-annotated exceptions on WebFlux [SPR-16567]","**[Andreas Schilling](https://jira.spring.io/secure/ViewProfile.jspa?name=aschilling)** opened **[SPR-16567](https://jira.spring.io/browse/SPR-16567?redirect=false)** and commented  As of now using `@ResponseStatus` annotations on custom exceptions or exception handler methods of `@ControllerAdvice` classes is not supported. This is a pitfall when coming from the classic web stack where this is kind of the idiomatic way to apply specific response codes to custom exceptions.  Either using `ResponseStatusException` directly or applying a wrapper (e.g. through a `@ControllerAdvice`) is a workaround but feels like it is something the framework should do. As described [in this comment](https://jira.spring.io/browse/SPR-16554?focusedCommentId=157590&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-157590) this seems easily doable through the `ResponseStatusExceptionHandler`.  A small test setup is attached to this ticket. Running `./gradlew test` currently fails as the response status for the custom exception is not set to `400` but by default to `500`.  ---  **Affects:** 5.0.4  **Attachments:** - [webflux-responsestatus.zip](https://jira.spring.io/secure/attachment/25414/webflux-responsestatus.zip) (_55.52 kB_)  **Issue Links:** - #21097 Using `@ControllerAdvice` with WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ba5ef6456faa1ce6f39c8f5474ebf56cb5d07052, https://github.com/spring-projects/spring-framework/commit/b8d94f8a20bd2d8f96fadb6f365178e7ee7c9f95","closed","type: enhancement,","spring-projects-issues","2018-03-08T07:39:53Z","2019-01-13T04:49:34Z"
"","20899","Replace iText 2.1.7 dependency with OpenPDF 1.0.5 [SPR-16352]","**[Andreas Røsdal](https://jira.spring.io/secure/ViewProfile.jspa?name=andreasrosdal)** opened **[SPR-16352](https://jira.spring.io/browse/SPR-16352?redirect=false)** and commented  I propose to replace the iText 2.1.7 dependency in Spring (spring-webmvc) with OpenPDF 1.0.5. OpenPDF is a maintained fork of iText 4.x which still has a LGPL license. The project is maintained on GitHub: https://github.com/librepdf/openpdf  These are some references to iText 2.1.7 in Spring: https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/spring-webmvc.gradle https://github.com/spring-projects/spring-framework/search?utf8=%E2%9C%93&q=itext&type=  Project GitHub page: https://github.com/librepdf/openpdf  OpenPDF contains a fix for CVE-2017-9096 iText XML External Entity Vulnerability https://github.com/LibrePDF/OpenPDF/pull/56 This sercurity vulerability has not been fixed in iText 2.1.7, since it is no longer maintained.  ---  **Issue Links:** - #20655 Compatibility with OpenPDF as alternative to iText 2.1.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7a55d932f96c69d38bed767d099fd4c8ad5e847e","closed","type: task,","spring-projects-issues","2018-01-05T12:23:11Z","2019-01-11T15:18:28Z"
"","20561","AutowiredAnnotationBeanPostProcessor picks ""wrong"" constructor for Kotlin class [SPR-16012]","**[Andreas Baumgart](https://jira.spring.io/secure/ViewProfile.jspa?name=brunpoern)** opened **[SPR-16012](https://jira.spring.io/browse/SPR-16012?redirect=false)** and commented  Hi,  since Spring Boot version 2.0.0.M4 I have the following injection problem (can be reproduced by running the AutorwireBugTest in the attached sample project):  I have a Kotlin class `Foo` which has a primary constructor that expects a parameter of type `Bar`  ```java @Aggregate class Foo(param: Bar) ```  The class also has a default constructor generated by the kotlin-noarg Gradle plugin because of the following configuration in build.gradle:  ```groovy noArg {     annotation(""com.example.autowirebug.Aggregate"") } ```  `Bar` is not a Spring bean i.e. autowiring the primary constructor fails in Spring 2.0.0.RC4 :  ```java java.lang.IllegalStateException: Failed to load ApplicationContext  	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:125) 	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:107) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:242) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'foo' defined in file.../Foo.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.autowirebug.bar.Bar' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:745) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:214) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1269) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1126) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:246) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117) 	... 24 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.autowirebug.bar.Bar' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1501) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1099) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1060) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:832) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:737) 	... 42 more ```  But the same test works in 2.0.0.RC2 because the default constructor is used instead of the primary constructor. Is this behavior intended? Is there a workaround to prevent Spring from picking the wrong constructor.  The problem originally occured when using AxonFramework (http://www.axonframework.org, version, 3.0.5) in combination with Spring Boot and Kotlin. Axon use the following code to load aggregates:  ```java protected T doCreateAggregate(...) {     return (T) applicationContext.getBean(prototypeBeanName); } ```  which now fails with the error described above.  For me it's major problem because it prevents me from using Axon with the latest Spring Boot version and I don't know any workaround.  Thanks and regards, Andreas  ---  **Affects:** 5.0 RC4  **Attachments:** - [autowire-bug.zip](https://jira.spring.io/secure/attachment/25120/autowire-bug.zip) (_58.11 kB_)  **Issue Links:** - #20571 Avoid implicit autowiring with Kotlin secondary constructors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb09a75c8229a440dd302c3585853b967f0dcba3","closed","in: core,","spring-projects-issues","2017-09-26T20:06:43Z","2019-01-11T14:14:58Z"
"","20538","ProtobufHttpMessageConverter: JSON not written to response [SPR-15988]","**[Andreas Ahlenstorf](https://jira.spring.io/secure/ViewProfile.jspa?name=aahlenstorf)** opened **[SPR-15988](https://jira.spring.io/browse/SPR-15988?redirect=false)** and commented  When using ProtobufJavaUtilSupport to serialize Protocol Buffers to JSON the OutputStreamWriter used as sink isn't flushed resulting in empty response bodies.  A pull request fixing this issue is forthcoming.  ---  **Affects:** 5.0 RC4  **Issue Links:** - #18166 ProtobufHttpMessageConverter support for protobuf 3.0.0-beta4 - #20109 ProtobufHttpMessageConverter: Make JSON format configurable  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b30f6fd991a2aaa91bf0c4f9f88b6e99fc66f2a2","closed","type: bug,","spring-projects-issues","2017-09-21T10:17:00Z","2019-01-11T18:23:48Z"
"","20622","Returning non-standard HTTP status code causes exceptions on WebFlux [SPR-16073]","**[Anders Aagaard](https://jira.spring.io/secure/ViewProfile.jspa?name=andaag)** opened **[SPR-16073](https://jira.spring.io/browse/SPR-16073?redirect=false)** and commented  See https://gist.github.com/andaag/f30aeff3bda499bb159f50649a0eb353  When returning a Mono\, and the returned ResponseEntity has a custom http code, spring throws an java.lang.IllegalArgumentException: No matching constant for [555]  ---  **Affects:** 5.0 GA  **Issue Links:** - #20529 RestTemplate doesn't consistently tolerate unknown HTTP status codes - #18779 ResponseEntity should allow the usage of unassigned HTTP status codes - #20913 ServerResponse should allow the usage of unassigned HTTP status codes - #21289 No support for non-standard HTTP status codes in reactive ClientHttpResponse  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3890d4c9eb12341e4a3051b1dac110f96dd9cae7","closed","type: bug,","spring-projects-issues","2017-10-16T10:43:36Z","2019-01-11T13:11:00Z"
"","20865","@RequestMapping produces condition should not impact error responses  [SPR-16318]","**[Ammar Husain](https://jira.spring.io/secure/ViewProfile.jspa?name=ammarhusain007)** opened **[SPR-16318](https://jira.spring.io/browse/SPR-16318?redirect=false)** and commented  For a vanilla REST endpoint created in Spring Boot (1.5.9 Release) as below  ```java @RequestMapping(value = ""/foo"", method = RequestMethod.GET, produces = ""text/csv"") public String getCsv() {     throw new IllegalArgumentException(); } ```  if request has header Accept: application/json,text/csv it should respond with the JSON representation of error / HTTP 500, instead it gives HTTP 406 - Not Acceptable.  Thus Spring seems not to respect the Accept header as it has following exception in DEBUG logs -> org.springframework.web.HttpMediaTypeNotAcceptableException: Could not find acceptable representation  Even after adding additional message converters (StringMessageConverter) the error persists.  Moreover configuring the `@RestControllerAdvice` has no effect.  ---  **Affects:** 4.3.13  **Reference URL:** https://stackoverflow.com/questions/47831530/406-when-exception-thrown-in-spring-controller-with-accept-header-of-text-csv  **Issue Links:** - #21738 `@RequestMapping` get 406 Not Acceptable when I use MediaType.IMAGE_PNG_VALUE (_**""is duplicated by""**_) - #18982 Content negotiation fails with the conjonction of text/plain and ExceptionHandler (_**""is duplicated by""**_) - #18982 Content negotiation fails with the conjonction of text/plain and ExceptionHandler - #21927 Content-Type not set correctly on `@ControllerAdvice`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/395792b30292bc62a56897a4bdc15ab61c689dc1  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2017-12-21T12:47:41Z","2019-01-13T04:57:21Z"
"","20802","NPE in FunctionReference due to race condition in SpelExpression.getValue() [SPR-16255]","**[Alvaro Manuel Recio Perez](https://jira.spring.io/secure/ViewProfile.jspa?name=amrecio)** opened **[SPR-16255](https://jira.spring.io/browse/SPR-16255?redirect=false)** and commented  We have issues in a scenario in which several threads are evaluating the same expression (which include functions) in `IMMEDIATE` mode.  `org.springframework.expression.spel.standard.getValue()` includes the following piece of code:  ```java Object result = this.ast.getValue(expressionState); checkCompile(expressionState); ```  The call to `checkCompile()` goes through a synchronized block in `compileExpression()` which ends up in `org.springframework.expression.spel.ast.FunctionReference.generateCode()`. Inside this method, the field `this.method` is accessed twice, as follows:  ```java @Override  public void generateCode(MethodVisitor mv,CodeFlow cf) {      Assert.state(this.method != null, ""No method handle"");      String classDesc = this.method.getDeclaringClass().getName().replace('.', '/');      generateCodeForArguments(mv, cf, this.method, this.children);      mv.visitMethodInsn(INVOKESTATIC, classDesc, this.method.getName(),                CodeFlow.createSignatureDescriptor(this.method), false);      cf.pushDescriptor(this.exitTypeDescriptor); } ```  However, the call to `this.ast.getValue(expressionState)` in `org.springframework.expression.spel.standard.getValue()` we saw earlier, which does **not** go through a synchronized block, ends up calling `org.springframework.expression.spel.ast.FunctionReference.executeFunctionJLRMethod()`. The first insruction of this method is:  ```java private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {      this.method = null; ```  Because this code path is not synchronized, it may set `this.method` to `null` while the thread executing `checkCompile()` is running, causing a NullPointerException:  ```java Exception in thread ""Thread-95499"" java.lang.NullPointerException 	at org.springframework.expression.spel.ast.FunctionReference.generateCode(FunctionReference.java:184) 	at org.springframework.expression.spel.standard.SpelCompiler.createExpressionClass(SpelCompiler.java:160) 	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:105) 	at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:467) 	at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:437) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:243) ```    ---  **Affects:** 4.3.13, 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6a1fe0b1d06efe894a035451b733a3da3b0b1b45, https://github.com/spring-projects/spring-framework/commit/a9bad580d92802fda38adfb47f8e8e7508c59101  **Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)","closed","in: core,","spring-projects-issues","2017-12-01T16:31:49Z","2018-01-23T09:33:24Z"
"","19129","Bug in Bean Scopes Documentation [SPR-16230]","**[Alptug Dilek](https://jira.spring.io/secure/ViewProfile.jspa?name=alptugd)** opened **[SPR-16230](https://jira.spring.io/browse/SPR-16230?redirect=false)** and commented  Reference Documentation's ""Core"" section has a minor bug in ""1.5. Bean scopes"" section. There says ""Beans can be defined to be deployed in one of a number of scopes: out of the box, the Spring Framework supports six scopes, five of which are available only if you use a web-aware ApplicationContext.""  If I am not wrong ""Singleton"" and ""Prototype"" scopes are available even if I do not use a web-aware ApplicationContext. Hence the part ""five of which are available only if you use a web-aware ApplicationContext."" should be ""four of which are available only if you use a web-aware ApplicationContext."" instead.   ---  **Affects:** 5.0.1  **Reference URL:** https://docs.spring.io/spring/docs/5.0.1.RELEASE/spring-framework-reference/core.html#beans-factory-scopes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/35dd8db8921e71eb9828209b7e995193df061faa","closed","type: documentation,","spring-projects-issues","2017-11-24T11:07:58Z","2017-11-27T12:17:09Z"
"","20630","BeanFactoryReference ClassNotFound On Version 5.0.0 [SPR-16081]","**[Alireza Fattahi](https://jira.spring.io/secure/ViewProfile.jspa?name=afattahi)** opened **[SPR-16081](https://jira.spring.io/browse/SPR-16081?redirect=false)** and commented  After upgrading to version 5.0 I face an issue.  ```java java.lang.NoClassDefFoundError: Lorg/springframework/beans/factory/access/BeanFactoryReference; 	at java.lang.Class.getDeclaredFields0(Native Method) 	at java.lang.Class.privateGetDeclaredFields(Class.java:2583) 	at java.lang.Class.getDeclaredFields(Class.java:1916) 	at org.apache.catalina.util.Introspection.getDeclaredFields(Introspection.java:110) 	at org.apache.catalina.core.DefaultInstanceManager.populateAnnotationsCache(DefaultInstanceManager.java:282) 	at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:142) 	at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:120) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4667) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5207) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1419) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1409) 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:748) Caused by: java.lang.ClassNotFoundException: org.springframework.beans.factory.access.BeanFactoryReference 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1291) 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119) 	... 16 more ```  I am using JDK 1.8.,131 with Tomcat 8.5.15 an d Struts 2.5.13.  I have seen others have same issue too: https://stackoverflow.com/questions/46611786/java-lang-classnotfoundexception-org-springframework-beans-factory-access-beanf   ---  **Affects:** 5.0 GA","closed","in: core,","spring-projects-issues","2017-10-17T06:04:27Z","2019-01-12T05:20:07Z"
"","21003","MimeType compareTo implementation is not compatible with equals [SPR-16458]","**[Aliaksandr Kazlou](https://jira.spring.io/secure/ViewProfile.jspa?name=akazlou)** opened **[SPR-16458](https://jira.spring.io/browse/SPR-16458?redirect=false)** and commented  Not sure, it this is by design or a bug. But in the `MimeType::equals` there is a special check for the `charset` parameter, i.e.  ``` if (PARAM_CHARSET.equals(key)) { 				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) { 					return false; 				} 			} ```  While in the `MimeType::compareTo` method it doesn't handle `charset` parameter any how specific, so simple string comparison is done then.  So, the possible issue is that `equals` will produce true when comparing `application/json;charset=UTF-8` and `application/json;charset=utf-8`, while `compareTo` will return ""false"".  ---  **Affects:** 4.3.14, 5.0.3  **Issue Links:** - #17748 MimeType must use case insensitive comparisons for Charsets  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-02-02T10:38:04Z","2019-01-11T15:34:06Z"
"","21004","Server sent event (SSE) incorrect data format [SPR-16459]","**[Alexis](https://jira.spring.io/secure/ViewProfile.jspa?name=bodtx)** opened **[SPR-16459](https://jira.spring.io/browse/SPR-16459?redirect=false)** and commented  hi, when using webflux with SSE, it is not working under Firefox 52. It is working on last chrome and last FF (57)  to me it comes from that the text/event-stream produced is not complient with http://www.w3.org/TR/eventsource/#event-stream-interpretation  The problem is similar than herehttps://stackoverflow.com/questions/18800540/javascript-sse-not-working-with-firefox  the produced response misses two \n\n here is a correct response  ```java data: The server time is: Fri, 02 Feb 2018 06:45:51 -0500   ```  The  problem appears if I return a  ```java Flux ```  or a  ```java Flux> ```  here is the data corrupted where it misses a \n:  ```java data: The server time is: Fri, 02 Feb 2018 06:45:51 -0500  ```  here is a working exemple with FF52 (for proof) https://www.w3schools.com/html/tryit.asp?filename=tryhtml5_sse    ---  **Affects:** 5.0.2","closed","status: invalid,","spring-projects-issues","2018-02-02T13:41:05Z","2019-01-12T05:19:29Z"
"","20957","Jackson: Add visibility properties to Jackson2ObjectMapperBuilder [SPR-16411]","**[Alexey Trofimov](https://jira.spring.io/secure/ViewProfile.jspa?name=altro)** opened **[SPR-16411](https://jira.spring.io/browse/SPR-16411?redirect=false)** and commented  We use Spring Boot and need to set visibility settings to default jackson ObjectMapper. Something like this:  ```java          mapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);         mapper.setVisibility(PropertyAccessor.CREATOR, JsonAutoDetect.Visibility.NONE);         mapper.setVisibility(PropertyAccessor.GETTER, JsonAutoDetect.Visibility.NONE);         mapper.setVisibility(PropertyAccessor.IS_GETTER, JsonAutoDetect.Visibility.NONE);         mapper.setVisibility(PropertyAccessor.SETTER, JsonAutoDetect.Visibility.NONE);  ```  Please, add to Jackson2ObjectMapperBuilder possibility to configure that Jackson feature  ---  **Affects:** 5.0.3  **Issue Links:** - #22021 Jackson2ObjectMapperBuilder visibilities need to be applied in order  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1667, and commits https://github.com/spring-projects/spring-framework/commit/48c3fa99083a6e420a604a417c3d3112637af265","closed","type: enhancement,","spring-projects-issues","2018-01-23T15:07:43Z","2019-01-11T15:37:40Z"
"","20923","Hazelcast JCache Client integration on reconnect [SPR-16377]","**[Alexandru-Constantin Bledea](https://jira.spring.io/secure/ViewProfile.jspa?name=apixandru)** opened **[SPR-16377](https://jira.spring.io/browse/SPR-16377?redirect=false)** and commented  I also opened an issue on the hazelcast side, I'm not sure where exactly this should be fixed. https://github.com/hazelcast/hazelcast/issues/12128  The problem arises when there is a CLIENT_DISCONNECT event, when I restart the hazelcast instance and the caches are gone from the server.  It looks like the cache manager holds on to the cache references that were established before the client_disconnect, so when the client reconnects, they are now stale and we get errors such as  ```java ""Cache /hz/test is already destroyed or not created yet, on Member [192.168.0.248]:15000 - b422665c-a975-4642-ba7a-57f361078305 this"" ```  I believe that in case of such an exception (CacheNotExistsException) the cache manager should capture this and remove the stale cache reference and then try to re-establish the link to this cache on the server.  I'm not sure if this is something that the spring cache manager should be handling or if it's the hazelcast cache manager that should be responsible for such a cleanup.   ---  **Affects:** 4.3.13, 5.0.2","closed","type: enhancement,","spring-projects-issues","2018-01-14T11:22:39Z","2018-01-15T15:42:45Z"
"","20710","Make JpaVendorAdapters JTA-aware (in particular for Hibernate 5.1/5.2) [SPR-16162]","**[Alexandru-Constantin Bledea](https://jira.spring.io/secure/ViewProfile.jspa?name=apixandru)** opened **[SPR-16162](https://jira.spring.io/browse/SPR-16162?redirect=false)** and commented  One case that I keep coming across every once in a while is the issue that was described in #19524.  So I basically want to reopen that case but with an improvement suggestion rather than a bug report.  The problem as described there was that ""The underlying technical problem is that we can't influence Hibernate's connection release mode depending on the transaction setup: simply because JPA doesn't allow us to reliably introspect the transaction setup in general.""  I've dug a bit into this and I'm wondering why we need to know the transaction manager at the point of creating the JpaVendorAdapter? The JpaVendorAdapter is only used for the EntityManagerFactory and when we are building the EntityManagerFactory we do know what transaction type we will be using. This information is available from the JPA PersistenceUnitInfo.  I'm thinking if it would make sense to add an additional method to JpaVendorAdapter, something like, getAdditionalJpaPropertiesMapByTransactionType() that is called after the default getJpaPropertiesMap method.  That way we can selectively enrich the properties of one transaction type or the other.  By separating the properties by transaction type, it would be possible to 'autoconfigure' the backwards compatibility with spring in standalone mode and also keep the backwards compatibility with the JTA configuration.  What do you think?  ---  **Affects:** 4.3.6  **Issue Links:** - #19524 Doc: HibernateJpaVendorAdapter's ""prepareConnection"" may interfere with Hibernate 5.1+ in a JTA environment  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1591  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: enhancement,","spring-projects-issues","2017-11-06T07:28:14Z","2019-01-11T13:26:59Z"
"","20507","Multipart File upload: Sometimes receiving empty files! [SPR-15955]","**[Alexander Wilhelmer](https://jira.spring.io/secure/ViewProfile.jspa?name=awilhelmer)** opened **[SPR-15955](https://jira.spring.io/browse/SPR-15955?redirect=false)** and commented  On my example repo in branch ""zero-bytes-files"" i was able to reproduce a bug something to do with multipart file upload and the resulting transferTo method. I'm transferring files into temp files and i'm checking against zero byte files, so no data seems to be revceived on the netty server or its a bug in the synchronoss parser,  This test seems to be unfair, because it is starting 20 concurrent threads against the endpoint, but i was able to reproduce this bug on another setting, only with **one thread** and 100 iterations you are able to reproduce it. But you must host the first endpoint on a remote server. Some files will reproduce it more frequently, some files never. The concurrent threads force the test to reproduce it on localhost. You have to run the test min. five times, search for the first exception.  Tested with M3 (RC3) and SNAPSHOT(RC4) version from spring bootstrap, mainly on windows.  Exception:  ``` 2017-09-12 20:01:58.410 ERROR 10032 --- [ctor-http-nio-1] c.e.demo.controller.FileController       : Error!  java.lang.RuntimeException: Zero byte file! ```  I'm working on a temporary remote test to show the not-threaded reproduction.  ---  **Affects:** 5.0 RC3, 5.0 RC4  **Reference URL:** https://github.com/awilhelmer/spring5-multipart-demo/tree/zero-bytes-files  **Issue Links:** - #22194 Delegating File downloads sends incomplete chunks","closed","in: core,","spring-projects-issues","2017-09-12T18:18:20Z","2019-01-11T18:10:07Z"
"","22194","Delegating File downloads sends incomplete chunks [SPR-15949]","**[Alexander Wilhelmer](https://jira.spring.io/secure/ViewProfile.jspa?name=awilhelmer)** opened **[SPR-15949](https://jira.spring.io/browse/SPR-15949?redirect=false)** and commented  I noticed problems when u using this construct:  ```java public Flux getFileContent(String url) {      Mono exchange = webClientService.getWebClient().get().uri(url).accept(MediaType.APPLICATION_OCTET_STREAM).exchange();      return exchange.flatMapMany(clientResponse -> {         return clientResponse.bodyToFlux(DataBuffer.class);      });    } ```  You have to use a HTTP source with transcoding: chunked header without a content-length header. The problem of incomplete chunks only appears when you deploy the spring application on a windows system. I can't reproduce it on linux e.g. ubuntu. I'm using Windows Server 2008 R2 and Windows Server 2003, both with java 1.8 update 144. Requests against localhost works too, you have to stream over network!  Example: I deployed the app on windows. Just call http://217.79.182.40:8091/download/stream/102400 a few times. You will get a Network Error sometimes (1-3 errors on ten attempts). I'll keep that server online for max 7 days.  Source see at reference URL.  ---  **Affects:** 5.0 RC3  **Reference URL:** https://github.com/awilhelmer/streambug  **Attachments:** - [errors.png](https://jira.spring.io/secure/attachment/25094/errors.png) (_4.25 kB_) - [screenshot-1.png](https://jira.spring.io/secure/attachment/25095/screenshot-1.png) (_3.53 kB_)  **Issue Links:** - #20500 WebClient: DELETE request should not send transfer-encoding: chunked header - #20507 Multipart File upload: Sometimes receiving empty files!  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec2218c9670ab2e2b88a86dba21bef7f1bf59f9c","closed","type: bug,","spring-projects-issues","2017-09-10T20:17:23Z","2019-01-11T18:09:30Z"
"","20404","Webflux: Multipart/mixed delegation requests throws exception [SPR-15849]","**[Alexander Wilhelmer](https://jira.spring.io/secure/ViewProfile.jspa?name=awilhelmer)** opened **[SPR-15849](https://jira.spring.io/browse/SPR-15849?redirect=false)** and commented  When a multipart request on one endpoint is delegated to another endpoint with the WebClient the following exception is thrown:  org.springframework.core.codec.CodecException: No suitable writer found for part: file  See the example project and run the Junit test to reproduce.   ---  **Affects:** 5.0 RC3  **Reference URL:** https://github.com/awilhelmer/spring5-multipart-demo","closed","in: core,","spring-projects-issues","2017-08-05T13:04:36Z","2019-01-12T05:20:28Z"
"","20650","WebSphereUowTransactionManager swallows original exception when commit fails for another reason [SPR-16102]","**[Alexander Pinske](https://jira.spring.io/secure/ViewProfile.jspa?name=apinske)** opened **[SPR-16102](https://jira.spring.io/browse/SPR-16102?redirect=false)** and commented  * WebSphereUowTransactionManager stores an exception during the execution of a transactional method in UOWActionAdapter.exception * it would be rethrown during action.getResult() * but not if there is another exception during commit * in that case only the latter exception is thrown and the ""inner"" exception silently ignored  It would be nice if the previous exception could be logged, when it is shadowed by a subsequent commit failure.  Reasoning: We are currently analysing a problem, where a JMS-Publish takes a long time and aborts after some timeout. This is the inner exception. During this time the global transaction is rolled back, which leads to an exception during commit. The behaviour is okay, but we have ""lost"" the actual cause of the problem.  Of course there are workaround, e.g. using a LoggingInterceptor around the transaction method, but that would log any exception (that will usually still be there after commit/rollback) not only the ""shadowed"" ones.   ---  **Affects:** 4.3.11  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75a813aff631930d5ecc92a22626c4861bda864d, https://github.com/spring-projects/spring-framework/commit/efe943df721fd0f39d82ef32db41c4da964a1a3c  **Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)","closed","type: bug,","spring-projects-issues","2017-10-23T18:57:20Z","2017-10-24T16:24:06Z"
"","20560","WebClient doesn't reuse connections [SPR-16011]","**[Alexander Nesterov](https://jira.spring.io/secure/ViewProfile.jspa?name=nestal)** opened **[SPR-16011](https://jira.spring.io/browse/SPR-16011?redirect=false)** and commented  WebClient doesn't reuse connections always closing them regardless keep-alive and connection pools.  According to the contract, ClientHttpResponse.close() should either close a connection or return it back to pool. However ReactorClientHttpResponse implementation calls HttpClientResponse.dispose() method which enforces connection termination ignoring pool.  ---  **Affects:** 5.0 RC4  **Issue Links:** - #20542 Revisit how WebClient disposes connection (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-09-26T19:11:39Z","2019-01-12T16:44:52Z"
"","21035","@Transactional annotation lead to a huge memory allocation during creation String representation of Method uses for logging only [SPR-16492]","**[Alexander Fedorov](https://jira.spring.io/secure/ViewProfile.jspa?name=alexofo83i)** opened **[SPR-16492](https://jira.spring.io/browse/SPR-16492?redirect=false)** and commented  Hello Team, we have faced a very intensive CPU consuming. One of the reason is very high GC activity. GC activity could be splitted into two points: 1. minor GC collections which should be done very quickly in parallel 2. major GC collections ( FullGC ) which should be a rare case and should not lead to a long delay from app ( because FullGC is stop the world in our case ).  Minor GC could be tuned with help of investigating of memory allocation events inside new TLAB. Major GC could be tuned with help of investigating of memory allocation events outside TLAB.  We use JMC and JFR API for aggregating memory allocation events. It looks like  1. Memory allocation events inside new TLAB    !allocation_inside_TLAB.jpg|thumbnail!  2. Memory allocation events outside TLAB    !allocation_outside_TLAB.jpg|thumbnail!  Where higlighted categories are:  ``` spring.cache_interceptor  org.springframework.cache.interceptor spring.TransactionInterceptor.invoke org.springframework.transaction.interceptor.TransactionInterceptor.invoke() ```  Hotspots looks like:  !allocation_inside_TLAB_hotspots2.jpg|thumbnail!  Reg. to transaction we have same bad code that  designed for logging that will never used:  ```  package org.springframework.transaction.interceptor;  /**   * @author Rod Johnson  * @author Juergen Hoeller  * @since 1.1  * @see #setTransactionManager  * @see #setTransactionAttributes  * @see #setTransactionAttributeSource  */ public abstract class TransactionAspectSupport implements BeanFactoryAware, InitializingBean {   	/** 	 * General delegate for around-advice-based subclasses, delegating to several other template 	 * methods on this class. Able to handle {@link CallbackPreferringPlatformTransactionManager} 	 * as well as regular {@link PlatformTransactionManager} implementations. 	 * @param method the Method being invoked 	 * @param targetClass the target class that we're invoking the method on 	 * @param invocation the callback to use for proceeding with the target invocation 	 * @return the return value of the method, if any 	 * @throws Throwable propagated from the target invocation 	 */ 	protected Object invokeWithinTransaction(Method method, Class targetClass, final InvocationCallback invocation) 			throws Throwable {  		// If the transaction attribute is null, the method is non-transactional. 		final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass); 		final PlatformTransactionManager tm = determineTransactionManager(txAttr); 		final String joinpointIdentification = methodIdentification(method, targetClass);  		if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) { 			// Standard transaction demarcation with getTransaction and commit/rollback calls. 			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification); 			Object retVal = null; 			try { 				// This is an around advice: Invoke the next interceptor in the chain. 				// This will normally result in a target object being invoked. 				retVal = invocation.proceedWithInvocation(); 			} 			catch (Throwable ex) { 				// target invocation exception 				completeTransactionAfterThrowing(txInfo, ex); 				throw ex; 			} 			finally { 				cleanupTransactionInfo(txInfo); 			} 			commitTransactionAfterReturning(txInfo); 			return retVal; 		}  		else { 			// It's a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in. 			try { 				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, 						new TransactionCallback() { 							@Override 							public Object doInTransaction(TransactionStatus status) { 								TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status); 								try { 									return invocation.proceedWithInvocation(); 								} 								catch (Throwable ex) { 									if (txAttr.rollbackOn(ex)) { 										// A RuntimeException: will lead to a rollback. 										if (ex instanceof RuntimeException) { 											throw (RuntimeException) ex; 										} 										else { 											throw new ThrowableHolderException(ex); 										} 									} 									else { 										// A normal return value: will lead to a commit. 										return new ThrowableHolder(ex); 									} 								} 								finally { 									cleanupTransactionInfo(txInfo); 								} 							} 						});  				// Check result: It might indicate a Throwable to rethrow. 				if (result instanceof ThrowableHolder) { 					throw ((ThrowableHolder) result).getThrowable(); 				} 				else { 					return result; 				} 			} 			catch (ThrowableHolderException ex) { 				throw ex.getCause(); 			} 		} 	}   	/** 	 * Convenience method to return a String representation of this Method 	 * for use in logging. Can be overridden in subclasses to provide a 	 * different identifier for the given method. 	 * @param method the method we're interested in 	 * @param targetClass the class that the method is being invoked on 	 * @return a String representation identifying this method 	 * @see org.springframework.util.ClassUtils#getQualifiedMethodName 	 */ 	protected String methodIdentification(Method method, Class targetClass) { 		String simpleMethodId = methodIdentification(method); 		if (simpleMethodId != null) { 			return simpleMethodId; 		} 		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + ""."" + method.getName(); 	}  	/** 	 * Convenience method to return a String representation of this Method 	 * for use in logging. Can be overridden in subclasses to provide a 	 * different identifier for the given method. 	 * @param method the method we're interested in 	 * @return a String representation identifying this method 	 * @deprecated in favor of {@link #methodIdentification(Method, Class)} 	 */ 	@Deprecated 	protected String methodIdentification(Method method) { 		return null; 	}  	/** 	 * Create a transaction if necessary, based on the given method and class. 	 * Performs a default TransactionAttribute lookup for the given method. 	 * @param method the method about to execute 	 * @param targetClass the class that the method is being invoked on 	 * @return a TransactionInfo object, whether or not a transaction was created. 	 * The {@code hasTransaction()} method on TransactionInfo can be used to 	 * tell if there was a transaction created. 	 * @see #getTransactionAttributeSource() 	 * @deprecated in favor of 	 * {@link #createTransactionIfNecessary(PlatformTransactionManager, TransactionAttribute, String)} 	 */ 	@Deprecated 	protected TransactionInfo createTransactionIfNecessary(Method method, Class targetClass) { 		// If the transaction attribute is null, the method is non-transactional. 		TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass); 		PlatformTransactionManager tm = determineTransactionManager(txAttr); 		return createTransactionIfNecessary(tm, txAttr, methodIdentification(method, targetClass)); 	}  /** 	 * Create a transaction if necessary based on the given TransactionAttribute. 	 * Allows callers to perform custom TransactionAttribute lookups through 	 * the TransactionAttributeSource. 	 * @param txAttr the TransactionAttribute (may be {@code null}) 	 * @param joinpointIdentification the fully qualified method name 	 * (used for monitoring and logging purposes) 	 * @return a TransactionInfo object, whether or not a transaction was created. 	 * The {@code hasTransaction()} method on TransactionInfo can be used to 	 * tell if there was a transaction created. 	 * @see #getTransactionAttributeSource() 	 */ 	@SuppressWarnings(""serial"") 	protected TransactionInfo createTransactionIfNecessary( 			PlatformTransactionManager tm, TransactionAttribute txAttr, final String joinpointIdentification) {  		// If no name specified, apply method identification as transaction name. 		if (txAttr != null && txAttr.getName() == null) { 			txAttr = new DelegatingTransactionAttribute(txAttr) { 				@Override 				public String getName() { 					return joinpointIdentification; 				} 			}; 		}  		TransactionStatus status = null; 		if (txAttr != null) { 			if (tm != null) { 				status = tm.getTransaction(txAttr); 			} 			else { 				if (logger.isDebugEnabled()) { 					logger.debug(""Skipping transactional joinpoint ["" + joinpointIdentification + 							""] because no transaction manager has been configured""); 				} 			} 		} 		return prepareTransactionInfo(tm, txAttr, joinpointIdentification, status); 	}  ```  Simplest way is reimplement with wrapping into **if (logger.isDebugEnabled()) {** all code lines that related to created java objects ( including string ) for logging.  Attached my version of [^TransactionAspectSupport.java]  Main changes are:  ``` protected String methodIdentification(Method method, Class targetClass) {      if (logger.isDebugEnabled()) {           String simpleMethodId = methodIdentification(method);           if (simpleMethodId != null) {                return simpleMethodId;           }           return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + ""."" + method.getName();      }      return null; } ```  I will pull request little bit later. in progress..  ---  **Affects:** 4.3.14  **Attachments:** - [allocation_inside_TLAB_hotspots2.jpg](https://jira.spring.io/secure/attachment/25392/allocation_inside_TLAB_hotspots2.jpg) (_77.72 kB_) - [allocation_inside_TLAB.jpg](https://jira.spring.io/secure/attachment/25393/allocation_inside_TLAB.jpg) (_20.01 kB_) - [allocation_outside_TLAB.jpg](https://jira.spring.io/secure/attachment/25391/allocation_outside_TLAB.jpg) (_20.90 kB_) - [TransactionAspectSupport.java](https://jira.spring.io/secure/attachment/25390/TransactionAspectSupport.java) (_25.79 kB_)  **Issue Links:** - #19326 Reduce String allocations in TransactionAspectSupport.methodIdentification() (_**""duplicates""**_) - #21033 `@Cacheable` annotation lead to a huge memory allocation from the side of OperationCache equals/hashCode","closed","type: enhancement,","spring-projects-issues","2018-02-13T16:03:47Z","2019-01-13T04:52:14Z"
"","21033","@Cacheable annotation lead to a huge memory allocation from the side of OperationCache equals/hashCode [SPR-16490]","**[Alexander Fedorov](https://jira.spring.io/secure/ViewProfile.jspa?name=alexofo83i)** opened **[SPR-16490](https://jira.spring.io/browse/SPR-16490?redirect=false)** and commented  Hello Team, we have faced a very intensive CPU consuming. One of the reason is very high GC activity. GC activity could be splitted into two points: 1. minor GC collections which should be done very quickly in parallel 2. major GC collections ( FullGC ) which should be a rare case and should not lead to a long delay from app ( because FullGC is stop the world in our case ).  Minor GC could be tuned with help of investigating of memory allocation events inside new TLAB. Major GC could be tuned with help of investigating of memory allocation events outside TLAB.  We use JMC and JFR API for aggregating memory allocation events. It looks like  1. Memory allocation events inside new TLAB    !allocation_inside_TLAB.jpg|thumbnail!  2. Memory allocation events outside TLAB    !allocation_outside_TLAB.jpg|thumbnail!  Where higlighted categories are:  ``` spring.cache_interceptor  org.springframework.cache.interceptor spring.TransactionInterceptor.invoke org.springframework.transaction.interceptor.TransactionInterceptor.invoke() ```  Hotspots looks like:  !allocation_inside_TLAB_hotspots.jpg|thumbnail!  Issue is here:  !decompiled.jpg|thumbnail!  ``` protected StringBuilder getOperationDescription()  {    StringBuilder result = new StringBuilder(getClass().getSimpleName());    result.append(""["").append(this.name);    result.append(""] caches="").append(this.cacheNames);    result.append("" | key='"").append(this.key);    result.append(""' | keyGenerator='"").append(this.keyGenerator);    result.append(""' | cacheManager='"").append(this.cacheManager);    result.append(""' | cacheResolver='"").append(this.cacheResolver);    result.append(""' | condition='"").append(this.condition).append(""'"");    return result;  } ```  Our version is  ``` Manifest-Version: 1.0 Created-By: 1.8.0_20 (Oracle Corporation) Implementation-Title: spring-context Implementation-Version: 4.1.3.RELEASE ```  But issue actual for latest version too.  I suggest that it could be implemented as below:  ``` @Override 	public String toString() { 		if( toStringCachedResult == null ) { 			toStringCachedResult = getOperationDescription().toString().intern(); 		} 		return toStringCachedResult; 	}  	@Override 	public boolean equals(Object o) { 		if (this == o) return true; 		if (o == null || getClass() != o.getClass()) return false;  		CacheOperation that = (CacheOperation) o;  		return toString().equals(that.toString());  	}    	@Override 	public int hashCode() { 		if(hashCodeCachedResult == 0 ) { 			hashCodeCachedResult = toString().hashCode(); 		} 		return hashCodeCachedResult; 	}  	private int hashCodeCachedResult = 0; 	private String toStringCachedResult = null;  	/** 	 * Return an identifying description for this caching operation. 	 * Available to subclasses, for inclusion in their {@code toString()} result. 	 */ 	protected StringBuilder getOperationDescription() { 		StringBuilder result = new StringBuilder(getClass().getSimpleName()); 		result./*append(""["").*/append(this.name); 		result./*append(""] caches="").*/append(this.cacheNames); 		result./*append("" | key='"").*/append(this.key); 		result./*append(""' | keyGenerator='"").*/append(this.keyGenerator); 		result./*append(""' | cacheManager='"").*/append(this.cacheManager); 		result./*append(""' | cacheResolver='"").*/append(this.cacheResolver); 		result./*append(""' | condition='"").*/append(this.condition)/*.append(""'"")*/; 		return result; 	} ```  Main idea is caching and interning string objects for minimizing memory allocation from the side of method **equals** and compare **int** instead of **String** for **hashCode**.  Our cusomized version of [^CacheOperation.java] is attached.  Thank you!  ---  **Affects:** 4.3.14  **Attachments:** - [allocation_inside_TLAB_hotspots.jpg](https://jira.spring.io/secure/attachment/25387/allocation_inside_TLAB_hotspots.jpg) (_66.51 kB_) - [allocation_inside_TLAB.jpg](https://jira.spring.io/secure/attachment/25389/allocation_inside_TLAB.jpg) (_20.01 kB_) - [allocation_outside_TLAB.jpg](https://jira.spring.io/secure/attachment/25388/allocation_outside_TLAB.jpg) (_20.90 kB_) - [CacheOperation.java](https://jira.spring.io/secure/attachment/25385/CacheOperation.java) (_4.92 kB_) - [decompiled.jpg](https://jira.spring.io/secure/attachment/25386/decompiled.jpg) (_110.30 kB_)  **Issue Links:** - #20549 Inefficient equals logic in Spring Cache (_**""duplicates""**_) - #18542 Improve CacheOperation equals/hashCode implementation performance    (_**""duplicates""**_) - #21035 `@Transactional` annotation lead to a huge memory allocation during creation String representation of Method uses for logging only","closed","type: enhancement,","spring-projects-issues","2018-02-13T15:19:15Z","2019-01-13T04:52:37Z"
"","20557","Spring security 5.0.0.M4 jar is not on jcenter while pom is [SPR-16008]","**[Alexander Czar](https://jira.spring.io/secure/ViewProfile.jspa?name=alexczar)** opened **[SPR-16008](https://jira.spring.io/browse/SPR-16008?redirect=false)** and commented  Spring security core jar is not present in jcenter repository, while its pom is there, so when gradle sees the pom it stops trying other repositories, but since jar is not there download fails. The only way to recover from this situation is to manually change repository priorities—not a good thing.  PS: couldn't find Spring Security project option, so chose just SPR   ---  **Affects:** 5.0 RC4","closed","status: invalid,","spring-projects-issues","2017-09-26T09:42:39Z","2019-01-12T05:20:14Z"
"","20836","BeanCreationException when using c-namespace, Kotlin class with default constructor and annotation configuration [SPR-16289]","**[Alexander Chernikov](https://jira.spring.io/secure/ViewProfile.jspa?name=sashache)** opened **[SPR-16289](https://jira.spring.io/browse/SPR-16289?redirect=false)** and commented  #20571 is fixed in Spring 5.0.2. However, I've found minor sub-case when using c-namespace.  Dummy Kotlin:  ``` package cr.spr16022  import org.springframework.context.annotation.Configuration import org.springframework.context.annotation.ImportResource import org.springframework.context.support.ClassPathXmlApplicationContext import org.springframework.context.annotation.AnnotationConfigApplicationContext  class KotlinCtor(val intVal: Int) {     constructor(p: String) : this(p.length) }  class KotlinQtor() {     constructor(p: String) : this() }  @Configuration @ImportResource(""cr.xml"") class KotlinAnnotator  object Main {     @JvmStatic fun main(args: Array) {         val contextXml = ClassPathXmlApplicationContext(""cr.xml"") //        val contextAnn = AnnotationConfigApplicationContext(KotlinAnnotator::class.java)     } } ```  Beans definition:  ```xml               ```  Run this dummy main(): no problems. Uncomment contextAnn declaration and initialization, re-run: fail:  ``` WARNING: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'qtor0s' defined in class path resource [cr.xml]: Could not resolve matching constructor (hint: specify index/type/name arguments for simple parameters to avoid type ambiguities) Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'qtor0s' defined in class path resource [cr.xml]: Could not resolve matching constructor (hint: specify index/type/name arguments for simple parameters to avoid type ambiguities) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:243) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1270) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:758) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:88) 	at cr.spr16022.Main.main(KotlinCtor.kt:22)  Process finished with exit code 1 ```  ---  **Affects:** 5.0.2  **Issue Links:** - #20571 Avoid implicit autowiring with Kotlin secondary constructors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19a1477228b8ed75926a15358e3253eb7ffa492e","closed","in: core,","spring-projects-issues","2017-12-11T23:49:38Z","2019-01-11T15:14:01Z"
"","20571","Avoid implicit autowiring with Kotlin secondary constructors [SPR-16022]","**[Alexander Chernikov](https://jira.spring.io/secure/ViewProfile.jspa?name=sashache)** opened **[SPR-16022](https://jira.spring.io/browse/SPR-16022?redirect=false)** and commented  Looks similar to #20561, which is marked fixed in 5.0, but I observe this with 5.0.0.RELEASE, so creating new issue for a case.  Dummy Kotlin bean class:  ```kotlin class KotlinCtor(val intVal: Int) {     constructor(p: String) : this(p.length)     constructor(p0: Int, p1: String) : this(p0 + p1.length) } ```  Dummy beans in spring.xml:  ```xml ...                                                                   ... ```  Add configuration:  ```kotlin @Configuration @ImportResource(""spring.xml"") open class KotlinAnnotator ```  Dummy application, this time in Java:  ```java import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext;  public class Main {     public static void main(String[] args) {         ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(""spring.xml""); //        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(KotlinAnnotator.class);     } } ```  Execute this main() method: no problem. Comment out XML context creation, uncomment annotation context creation, execute and fail:  ``` WARNING: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ctor1' defined in class path resource [spring.xml]: Unsatisfied dependency expressed through constructor parameter 0: Could not convert argument value of type [java.lang.String] to required type [int]: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: ""a"" Exception in thread ""main"" org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ctor1' defined in class path resource [spring.xml]: Unsatisfied dependency expressed through constructor parameter 0: Could not convert argument value of type [java.lang.String] to required type [int]: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: ""a"" 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:691) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:192) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1269) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1126) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:88) 	at temp.Main.main(Main.java:9) ```  ---  **Affects:** 5.0 GA  **Issue Links:** - #20561 AutowiredAnnotationBeanPostProcessor picks ""wrong"" constructor for Kotlin class - #20836 BeanCreationException when using c-namespace, Kotlin class with default constructor and annotation configuration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19a1477228b8ed75926a15358e3253eb7ffa492e, https://github.com/spring-projects/spring-framework/commit/edf82325557f05f482b0b9c0333d99908c8f1378","closed","type: bug,","spring-projects-issues","2017-09-28T18:00:41Z","2019-01-11T14:13:59Z"
"","20416","@ControllerAdvice behaving erratically in latest milestones [SPR-15861]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-15861](https://jira.spring.io/browse/SPR-15861?redirect=false)** and commented  I'm using messaging (websocket) classes with methods annotated with `@MessageMapping`, with Spring Boot 2.0M3 and I'm experiencing stability issues: my class marked with `@ControllerAdvice` sometimes is not handling the exceptions and they are instead propagated to the client.  I've also seen the problem where when one Exception is generated by controller A gets correctly handled by the `@ControllerAdvice` class, while when generated by controller B is not.  This seems to be related to the way the binary is built: some builds works fine, while some others exhibit the problem, so I would suppose that a different ordering of the jars inside the artifact causes the problem.  I'm not able to reproduce it at will right now, sometimes it works, sometimes not, I would like to leave this report open to track the problem and see if someone else runs in it too.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20461 ExceptionHandlerMethodResolver loses all handler methods (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2017-08-11T10:01:31Z","2019-01-12T16:45:02Z"
"","20856","Webflux doesn't close the connection where request heads has ""connection: close"" [SPR-16309]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=alex-lx)** opened **[SPR-16309](https://jira.spring.io/browse/SPR-16309?redirect=false)** and commented  Here's a the controller  ```java @GetMapping(""/ok"") String ok() {          return ""ok"";  }                  ```  if telneting the server and sending the followed request, the server would send the response headers but not close the connection, while in webmvc it would close.  ```plain HEAD /ok HTTP/1.0 Host: 127.0.0.1 Accept: */* Connection: close ```    ---  **Affects:** 5.0.2","closed","status: invalid,","spring-projects-issues","2017-12-18T07:15:51Z","2019-01-12T05:19:42Z"
"","20531","Read spring.mvc.throw-exception-if-no-handler-found property [SPR-15981]","**[Alex Rader](https://jira.spring.io/secure/ViewProfile.jspa?name=rrader)** opened **[SPR-15981](https://jira.spring.io/browse/SPR-15981?redirect=false)** and commented  At the moment we need to write  ```java .addDispatcherServletCustomizer(dispatcherServlet -> {     dispatcherServlet.setThrowExceptionIfNoHandlerFound(true); }) ```  But I already have in Properties  ```java spring.mvc.throw-exception-if-no-handler-found=true ```  It works in Spring Boot, but doesn't work in tests using MockMvc    --- No further details from [SPR-15981](https://jira.spring.io/browse/SPR-15981?redirect=false)","closed","in: test,","spring-projects-issues","2017-09-20T08:16:46Z","2019-01-11T18:23:10Z"
"","20871","Addition of overloading methods to addPathPatterns and excludePathPatterns in InterceptorRegistration class [SPR-16324]","**[Aleksey Voronenkov](https://jira.spring.io/secure/ViewProfile.jspa?name=linolium)** opened **[SPR-16324](https://jira.spring.io/browse/SPR-16324?redirect=false)** and commented  I've decided to add these methods because it's inconvenient to add paths to method one by one, separating them by commas, if I want to include them to properties file, I'm forced to add them through cycle. This is an implementation of method that makes it possible to use the list of strings in a way that's more convenient.   ---  **Affects:** 5.0.2  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1634, and commits https://github.com/spring-projects/spring-framework/commit/cb8ad465642d7cfa04403fe076688b5fdcdcb82f","closed","type: enhancement,","spring-projects-issues","2017-12-24T12:14:50Z","2018-01-23T10:05:12Z"
"","21093","TestEntityManager can't be configured in @BeforeAll method in test class with @TestInstance(PER_CLASS) in JUnit Jupiter [SPR-16550]","**[Aleksandr](https://jira.spring.io/secure/ViewProfile.jspa?name=sl.aleksandr)** opened **[SPR-16550](https://jira.spring.io/browse/SPR-16550?redirect=false)** and commented  When trying to autowire Spring Boot's `TestEntityManager` in method annotated as `@BeforeAll`, the following exception is thrown:  ``` java.lang.IllegalStateException: No transactional EntityManager found ```  Other beans are autowired into this method without problems.  The case is following - since I have one test class instance for all tests in it, and they require the same prepopulated DB, why not fill the DB once after test class instantiation?  Sample project is referenced in the issue.  ---  **Reference URL:** https://gitlab.com/AleksandrSl/spring-sandbox/blob/junit-5-security/src/test/kotlin/pro/parseq/springsandbox/entities/UserItemsSecurityTests.kt  **Issue Links:** - #10191 Execute all test methods in a class within the same transaction (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2018-03-04T11:03:02Z","2021-11-08T17:30:58Z"
"","21128","Application Server Fail to Stop Application and server while stopping transactions with spring [SPR-16586]","**[Alejandro](https://jira.spring.io/secure/ViewProfile.jspa?name=alejandro_domingo)** opened **[SPR-16586](https://jira.spring.io/browse/SPR-16586?redirect=false)** and commented  When executing the command to stop the instances (stopServer.sh) or using the web console to stop the instances of websphere aplication server with normal or immediate stop, these instances do not stop, the stop fails.  [1/20/18 16:06:26:268 CET] 00000097 TimeoutManage I WTRN0006W: Transaction 0000016114196D9400000001489CCCB44A7B13B1A40632B2663ED0D9BFD85F902942FE0D 0000016114196D9400000001489CCCB44A7B13B1A40632B2663ED0D9BFD85F902942FE0D 00000001 has timed out after 120 seconds. [1/20/18 16:06:26:268 CET] 00000097 TimeoutManage I WTRN0124I: When the timeout occurred the thread with which the transaction is, or was most recently, associated was Thread[org.springframework.jms.listener. DefaultMessageListenerContainer#0-774,5,]. The stack trace of this thread when the timeout occurred was:  the transactions do not end and the server does not stop having to kill it and delete the transaction log every time  IBM support gave us this bug as a possible cause:  #16409 The jira defect says affected versions are 4.0.3, 4.2.4 and is fixed in versions 4.2.5, 4.3 RC1 .  We have verified that the installed version of spring is 4.1.0.  The query is: The version of Spring 4.1.0 Is affected by the bug?  Thanks in advance.  ---  **Reference URL:** #16409  **Issue Links:** - #16409 DefaultMessageListenerContainer hangs on shutdown - #21079 DefaultMessageListenerContainer should interrupt worker threads when not returning on shutdown","closed","in: messaging,","spring-projects-issues","2018-03-13T12:31:15Z","2019-01-14T04:31:54Z"
"","20795","Support load time weaving in Liberty without the agent [SPR-16248]","**[Alasdair Nottingham](https://jira.spring.io/secure/ViewProfile.jspa?name=alasdair)** opened **[SPR-16248](https://jira.spring.io/browse/SPR-16248?redirect=false)** and commented  There is a load time weaver for WebSphere traditional so there is no need to specify the javaagent, but there isn't for the more modern WebSphere/Open Liberty which makes using Spring AOT on Liberty harder. The Liberty application classloader has the following method:      public boolean addTransformer(final ClassFileTransformer cft);  that can be used to register a java.lang.instrument.ClassFileTransformer. The method has a comment that says it is there for Spring, but it doesn't appear that it'll ever be called.  The current detection logic uses com.ibm. as an indicator on the class name for WebSphere and that isn't correct on Liberty.  The Liberty classloader code is here: https://github.com/OpenLiberty/open-liberty/blob/integration/dev/com.ibm.ws.classloading/src/com/ibm/ws/classloading/internal/AppClassLoader.java   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d187cbce73cf8d84a2d95b96f0d4e52a94be84f4","closed","type: enhancement,","spring-projects-issues","2017-11-30T15:59:29Z","2018-01-23T10:05:11Z"
"","20953","Support array of scalar values in Jackson2Tokenizer [SPR-16407]","**[Akshay Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=dolvic)** opened **[SPR-16407](https://jira.spring.io/browse/SPR-16407?redirect=false)** and commented  When using Spring Webflux's WebClient, it is not possible to deserialize a JSON array of integers using the `bodyToFlux` method. Spring returns an empty Flux. However, using `bodyToMono` to get a `List` works and returns a `Mono>` as expected.  I believe the problem lies in `Jackson2Tokenizer`'s handling of this scenario. It returns an empty list of tokens. A variation of this issue was addressed in #20714. It addresses top-level scalar values returned as a JSON response. However, the fix for that still doesn't address the above scenario.  [Original StackOverflow question](https://stackoverflow.com/questions/48344616/deserializing-a-list-of-ints-with-spring-webclient)  ---  **Affects:** 5.0.3  **Reference URL:** https://github.com/Dolvic/spring-SPR-16407  **Issue Links:** - #20714 Support top-level scalar values in Jackson2Tokenizer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b47491695e7f5ad1d047c7156dd362c4f529630d","closed","type: bug,","spring-projects-issues","2018-01-22T14:47:33Z","2019-01-11T15:38:39Z"
"","20917","Spring Junit for controller [SPR-16370]","**[Akhila](https://jira.spring.io/secure/ViewProfile.jspa?name=akhila)** opened **[SPR-16370](https://jira.spring.io/browse/SPR-16370?redirect=false)** and commented  Controller Method: `@RequestMapping`(value = ""/eligibleAccounts"", method = RequestMethod.POST) public ModelMap reguGetEligibleAccounts(`@RequestBody` `@Valid` AccountTypeRequest request, BindingResult bindingResult, HttpServletRequest servReq, ModelMap modelMap) {      	if (bindingResult != null && bindingResult.hasErrors()) {     		logger.error(""eligibleAccounts :: error in binding request"");     		modelMap.addAttribute(Message.MESSAGES, reguErrorHandler.getDefaultErrorMessageObject(servReq));     		return modelMap;     	}          	long userId = 0;     	try {     		userId = Long.valueOf(userSession.getSmUser());     	} catch (Exception e) {     		logger.error(""eligibleAccounts :: error with getting userId"");     		modelMap.addAttribute(Message.MESSAGES, reguErrorHandler.getDefaultErrorMessageObject(servReq));      		return modelMap;     	}          	ReguAccountDetails details;     	try {     		logger.info(""eligible account service call starts !!!"");     		details = reguService.getReguEligibleAccount(userId, request.getAccountType());     		logger.info(""Mapping domans to display classes...!!"");     		CustomerEligibleAccountDisplay eligibleAccount = reguViewHandler.getEligibleAccounts(details);     		modelMap.addAttribute(""accounts"",eligibleAccount);     		return modelMap;     	} catch (ReguException e) {     		logger.error(""eligibleAccounts :: error with hitting service"");     		modelMap.addAttribute(Message.MESSAGES, reguErrorHandler.getErrorMessageObject(e,servReq));     		return modelMap;     	}          }  For this controller method, I have to write Junit. I have written like:  `@Test` public void testReguEligigbleAccounts() { byte[] jsonContent = loadJson(""classpath:/config/mock/eligibleAccount.json"");      	MockHttpServletRequest request = new MockHttpServletRequest(""POST"", ""/loc/eligibleAccounts"");     	     	request.addHeader(""Content-Type"", ""application/json"");         request.setContentType(""application/json"");         request.setContent(jsonContent);                  MockHttpServletResponse response = new MockHttpServletResponse();         ModelAndView            mv       = null;                  try         {           mv = annotationMethodHandlerAdapter.handle(request, response, controller);         }         catch (Exception exp)         {           log.error(""annotationMethodHandlerAdapter.handle() thrown the exception!"", exp);           assertNull (""annotationMethodHandlerAdapter.handle() throws an exception: "" + exp, exp);         }                  assertNotNull(""ModelAndView object is not returned by EligibleAccounts() action!"", mv);     	     }  Error: Failed tests: ReguControllerTest.testReguEligigbleAccounts:190 annotationMethodHandlerAdapter.handle() throws an exception: org.springframework.web.bind.annotation.support.HandlerMethodInvocationException: Failed to invoke handler method [public org.springframework.ui.ModelMap com.etrade.neo.regu.controller.ReguController.reguGetEligibleAccounts(com.etrade.neo.regu.request.AccountTypeRequest,org.springframework.validation.BindingResult,javax.servlet.http.HttpServletRequest,org.springframework.ui.ModelMap)]; nested exception is java.lang.IllegalStateException: Errors/BindingResult argument declared without preceding model attribute. Check your handler method signature! expected null, but was:   --- No further details from [SPR-16370](https://jira.spring.io/browse/SPR-16370?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-01-12T09:36:19Z","2019-01-12T05:19:35Z"
"","20575","Webflux support for flash attributes [SPR-16026]","**[Adrien Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=asanchez)** opened **[SPR-16026](https://jira.spring.io/browse/SPR-16026?redirect=false)** and commented  Hello,  I faced an issue when wanting to perform a redirection with redirect attributes on a Spring Webflux application.  In Spring MVC, I used to add the _RedirectAttributes_ parameter in my controller methods to configure the attributes/flash attributes that I wanted to transmit through my redirection.  However, in Spring Webflux, there seems to be no equivalent to the Spring MVC _RedirectAttributes_ class. This is a problem as Spring Webflux controllers should be able to perform redirections with attributes too.  I tried using the _redirectTo_ method of the reactive _Rendering_ API, that works to perform a redirection, but there's no way to transmit parameters here too. Maybe this API could evolve to include this possibility ? And do you have any workaround that could be used at the moment?  Thanks and regards, Adrien   ---  **Affects:** 5.0 RC3, 5.0 RC4, 5.0 GA  **Reference URL:** https://stackoverflow.com/questions/46474452/redirectattributes-not-working-with-spring-5","open","type: enhancement,","spring-projects-issues","2017-09-29T08:42:48Z","2019-01-31T00:50:40Z"
"","20736","StringToLocaleConverter should allow BCP 47 values [SPR-16188]","**[adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=gonzalad)** opened **[SPR-16188](https://jira.spring.io/browse/SPR-16188?redirect=false)** and commented  I'm using Spring Boot to setup locale in spring mvc.  I'm trying to use BCP 47 for spring.mvc.locale value, but I end up with a  ``` Property: spring.mvc.locale Value: en-US Reason: Failed to convert property value of type 'java.lang.String' to required type 'java.util.Locale' for property 'locale'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.lang.String] to type [java.util.Locale] ```  StringToLocaleConverter (relies on StringUtils.parseLocaleString) relies on _ delimiters, which is not BCP 47.  Could StringToLocaleConverter be improved to handle BCP 47 (or otherwise try both formats ?)  For BCP-47, it would correspond to calling https://docs.oracle.com/javase/7/docs/api/java/util/Locale.html#forLanguageTag(java.lang.String)  wdyt ?  ---  **Affects:** 4.3.10  **Issue Links:** - #17865 BCP 47 compatible Locale support - #21192 Revise StringUtils.parseLocale(String) for proper handling of corner cases - #21241 CookieLocaleResolver is not RFC6265 compliant when setting a locale and time zone - #20016 ScheduledAnnotationBeanPostProcessor does not support Duration syntax  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef3f93e84aa75ae5c70aff0c4a42dc6e3bd55498","closed","type: enhancement,","spring-projects-issues","2017-11-13T10:53:44Z","2019-01-11T13:26:27Z"
"","20772","Set Vary: Origin on CORS unauthorized response [SPR-16224]","**[Adrian Cole](https://jira.spring.io/secure/ViewProfile.jspa?name=adriancole)** opened **[SPR-16224](https://jira.spring.io/browse/SPR-16224?redirect=false)** and commented  Maybe our Cors impl should be setting Vary when we deny, due to some noted cache poison concerns.  Ex we don't set Vary: Origin on 403, but other impls do...  https://github.com/rs/cors/blob/master/cors_test.go#L118  ---  **Issue Links:** - #20959 Add Vary: Access-Control-Request-Method/Headers CORS headers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a87d3da7b8e9530bd0148b6bb35c7ef262783ac","closed","type: enhancement,","spring-projects-issues","2017-11-22T04:57:02Z","2019-01-11T13:30:16Z"
"","20687","Doc: ParameterMetaData.getParameterType performance on Oracle 12c [SPR-16139]","**[Adam Sojka](https://jira.spring.io/secure/ViewProfile.jspa?name=mcadams)** opened **[SPR-16139](https://jira.spring.io/browse/SPR-16139?redirect=false)** and commented  After upgrading from Spring 4.3 to 5.0.1 the NamedParameterJdbcTemplate.batchUpdate call results in an exception ORA-01000: maximum open cursors exceeded when using with Oracle 12c.  The batchUpdate is updating batches of 250 records.  The applications code hasn't changed in method where exception is being thrown.  ```java @SuppressWarnings(""unchecked"")     public int[] saveBatchOutputs(final String updateSql, final List> batchValuesList) {         Map[] batchValues = new Map[batchValuesList.size()];         batchValues = batchValuesList.toArray(batchValues);         return namedParameterJdbcTemplate.batchUpdate(updateSql, batchValues);     } ```  In the method the updateSql is predefined and the batchValuesList is up to 250 elements in size.  ---  **Affects:** 5.0.1  **Issue Links:** - #20528 ""Parameter metadata not available for the given statement"" SQL Exception after upgrading to Spring 5.0 RC4 - #18399 Raise JDBC driver feature baseline to JDBC 4.0+ - #19196 Protect against getParameterType cursor leak with Oracle 12c JDBC driver - #21539 We are facing the maximum open cursor issue - #21354 Spring-jdbc 5.0.5 NamedParameterJdbcTemplate.batchUpdate ORA-01000 - #20763 SqlParameterSourceUtils.createBatch with Collection support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/daee6eeaad4dc063a33482d70406673524f032bb","closed","type: task,","spring-projects-issues","2017-10-31T21:54:34Z","2019-01-11T13:14:42Z"
"","20860","Exception in spring-security intercept-url after spring framework update to 4.3.12 [SPR-16313]","**[Adam Latuszek](https://jira.spring.io/secure/ViewProfile.jspa?name=adam%20latuszek)** opened **[SPR-16313](https://jira.spring.io/browse/SPR-16313?redirect=false)** and commented  I have following configuration using spring-security:  ```java         // (...)                // (...) ```  Where `@webSecurity.isActive()` returned value depends on a flag in database. This configuration is working perfectly when I'm using spring-framework 4.3.11.  The test scenario is: 1. Login as user A 2. Revoke active flag from user A (makes `@webSecurity.isActive()` return `false`) 3. User A makes some action on the webpage (request goes to the server) and then the exception occurs:  ```java 14:35:43.752 ERROR qtp559617324-36 [MessageTag          :87  ] No WebApplicationContext found: not in a DispatcherServlet request and no ContextLoaderListener registered? java.lang.IllegalStateException: No WebApplicationContext found: not in a DispatcherServlet request and no ContextLoaderListener registered?         at org.springframework.web.servlet.support.RequestContext.initContext(RequestContext.java:235)         at org.springframework.web.servlet.support.JspAwareRequestContext.initContext(JspAwareRequestContext.java:75)         at org.springframework.web.servlet.support.JspAwareRequestContext.(JspAwareRequestContext.java:49)         at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:77)         at org.apache.jsp.views.layout.nonTransactional_jsp._jspx_meth_spring_005fmessage_005f0(nonTransactional_jsp.java:486)         at org.apache.jsp.views.layout.nonTransactional_jsp._jspService(nonTransactional_jsp.java:174)         at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)         at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:443)         at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)         at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)         at org.eclipse.jetty.jsp.JettyJspServlet.service(JettyJspServlet.java:112)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)         at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:841)         at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:535)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)         at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:566)         at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)         at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:190)         at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)         at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:188)         at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)         at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168)         at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)         at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)         at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166)         at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)         at org.eclipse.jetty.server.Dispatcher.include(Dispatcher.java:124)         at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:887)         at org.apache.jasper.runtime.PageContextImpl.doInclude(PageContextImpl.java:679)         at org.apache.jasper.runtime.PageContextImpl.include(PageContextImpl.java:673)         at org.apache.tiles.request.jsp.JspRequest.doInclude(JspRequest.java:123)         at org.apache.tiles.request.AbstractViewRequest.dispatch(AbstractViewRequest.java:47)         at org.apache.tiles.request.render.DispatchRenderer.render(DispatchRenderer.java:47)         at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:259)         at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:397)         at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:238)         at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:221)         at org.apache.tiles.template.InsertDefinitionModel.renderDefinition(InsertDefinitionModel.java:132)         at org.apache.tiles.template.InsertDefinitionModel.execute(InsertDefinitionModel.java:99)         at org.apache.tiles.jsp.taglib.InsertDefinitionTag.doTag(InsertDefinitionTag.java:254)         at org.apache.jsp.views.error.layouted_002d403_jsp._jspx_meth_tiles_005finsertDefinition_005f0(layouted_002d403_jsp.java:149)         at org.apache.jsp.views.error.layouted_002d403_jsp._jspService(layouted_002d403_jsp.java:117)         at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)         at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:443)         at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)         at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)         at org.eclipse.jetty.jsp.JettyJspServlet.service(JettyJspServlet.java:112)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)         at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:833)         at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:535)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)         at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:566)         at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)         at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:190)         at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)         at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:188)         at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)         at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168)         at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)         at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)         at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166)         at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)         at org.eclipse.jetty.server.Dispatcher.forward(Dispatcher.java:203)         at org.eclipse.jetty.server.Dispatcher.error(Dispatcher.java:81)         at org.eclipse.jetty.server.handler.ErrorHandler.doError(ErrorHandler.java:119)         at org.eclipse.jetty.server.handler.ErrorHandler.handle(ErrorHandler.java:78)         at org.eclipse.jetty.server.Response.sendError(Response.java:655)         at javax.servlet.http.HttpServletResponseWrapper.sendError(HttpServletResponseWrapper.java:158)         at javax.servlet.http.HttpServletResponseWrapper.sendError(HttpServletResponseWrapper.java:158)         at org.springframework.security.web.util.OnCommittedResponseWrapper.sendError(OnCommittedResponseWrapper.java:119)         at org.springframework.security.web.access.AccessDeniedHandlerImpl.handle(AccessDeniedHandlerImpl.java:75)         at org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(ExceptionTranslationFilter.java:189)         at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:133)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)         at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)         at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)         at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)         at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)         at pl.sgrnet.cargo.web.filter.HttpRedirectFilter.doFilterInternal(HttpRedirectFilter.java:42)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)         at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)         at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)         at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)         at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:190)         at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)         at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:188)         at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)         at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168)         at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)         at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)         at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166)         at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)         at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:219)         at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)         at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)         at org.eclipse.jetty.server.Server.handle(Server.java:564)         at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:317)         at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)         at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279)         at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:110)         at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124)         at org.eclipse.jetty.util.thread.Invocable.invokePreferred(Invocable.java:128)         at org.eclipse.jetty.util.thread.Invocable$InvocableExecutor.invoke(Invocable.java:222)         at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:294)         at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:199)         at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:673)         at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:591)         at java.lang.Thread.run(Thread.java:745) ```  This problem is not occurring when `isAuthenticated()` returns `false` (user is redirected to login page then) but only when `@webSecurity.isActive()` does.  The logs are not clear, but as far as I understood the exception has been thrown from JSP 403-error view inside `` tag.   ---  **Affects:** 4.3.12, 4.3.13","closed","status: declined,","spring-projects-issues","2017-12-19T13:55:54Z","2019-01-13T20:27:50Z"
"","20997","DateFormatter fails for null values [SPR-16452]","**[abhishek srivastava](https://jira.spring.io/secure/ViewProfile.jspa?name=abhi23)** opened **[SPR-16452](https://jira.spring.io/browse/SPR-16452?redirect=false)** and commented  `@DateTimeFormat`(pattern = ""dd/MM/yyyy"") private Date modificationDate;  Above field is part of web form and formatter does the job if value is not null, however, it fails when value is empty or null.   ---  **Affects:** 5.0.3","closed","in: core,","spring-projects-issues","2018-02-01T14:03:07Z","2019-01-11T15:33:56Z"
"","20979","Event publishing from an EventListener doesn't work in Kotlin [SPR-16433]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-16433](https://jira.spring.io/browse/SPR-16433?redirect=false)** and commented  Spring 4.2 introduced annotation-driven event handling such that a non-void method annotated with `@EventListener` automatically publishes a new event with the return type as the source. This behavior is not working with Kotlin. I haven't checked with Java. Following is complete reproducible code.  ``` data class A(val s: String) data class B(val s: String) ```  ``` @SpringBootApplication @EnableAsync class DemoApplication {     @EventListener     fun onApplicationReady(e: ApplicationReadyEvent): A {         println(""Received ApplicationReadyEvent"")          return A(""Hello"")     } }  fun main(args: Array) {     runApplication(*args) } ```  ``` @Component class DemoEventListener {     @EventListener     @Async     fun onEventA(a: A): B {         println(""Received: $a"")         return B(""${a.s} World!"")     } } ```  ``` @RunWith(SpringRunner::class) @SpringBootTest class DemoApplicationTest {     @Autowired     lateinit var ctx: ConfigurableApplicationContext      val latch = CountDownLatch(1)      @PostConstruct     fun init() {         ctx.addApplicationListener {             println(""Received: $it"")             if (it.source is B) {                 latch.countDown()                 assertThat((it.source as B).s).isEqualTo(""Hello World!"")             }         }     }      @Test     fun testEvent() {         assertThat(latch.await(5L, TimeUnit.SECONDS)).isTrue()     } } ```    ---  **Affects:** 5.0.2  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/25358/demo.zip) (_126.81 kB_)","closed","in: core,","spring-projects-issues","2018-01-30T04:44:59Z","2019-01-12T05:19:30Z"
"","20898","Use of CompositeByteBuf in NettyDataBuffer results in IllegalReferenceCountException [SPR-16351]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-16351](https://jira.spring.io/browse/SPR-16351?redirect=false)** and commented  [DataBuffer write(DataBuffer... buffers)](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/buffer/DataBuffer.html#write-org.springframework.core.io.buffer.DataBuffer...-) is supposed to ""Write one or more DataBuffers to this buffer, starting at the current writing position"" but it doesn't.  Consider `buffer = ""abc""`, `slice = ""def""` and `buffer.writePosition() = 3`. `buffer.write(slice)` is supposed to produce `abcdef` but instead `buffer` becomes `abcabc`. The workaround is to use the `write` overload that takes a `byte[]`, like so:  ``` DataBuffer slice = buffer.slice(startIdx, length); byte[] slice1 = new byte[length]; slice.read(slice1, 0, slice1.length); buffer.write(slice1); ```  Related to SO answer https://stackoverflow.com/a/48111196/839733  ---  **Affects:** 5.0.2  **Reference URL:** https://stackoverflow.com/a/48111196/839733  **Issue Links:** - #20912 Using DataBuffer::write results in IndexOutOfBoundsException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/69ccba30e978351acdee12b990f989e97b8a72b0, https://github.com/spring-projects/spring-framework/commit/8a129ef3daf8a28728314905d4b843a4129d9a87, https://github.com/spring-projects/spring-framework/commit/e6893da9714cf557a36691dcefc8209bfff1e98d","closed","in: core,","spring-projects-issues","2018-01-05T10:12:51Z","2019-01-11T15:18:20Z"
"","20884","StringDecoder shouldn't chop off strings randomly [SPR-16337]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-16337](https://jira.spring.io/browse/SPR-16337?redirect=false)** and commented  Given a stream `""abc\n"", ""abc"", ""def\n"", ""abc"", ""def\nxyz\n"", ""abc"", ""def"", ""xyz\n""` [StringDecoder](https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java) simply chops them off at newlines. This is hardly desired, since most applications expect to deal with complete records that end on line boundaries. In other words, the expected output for the above would be `""abc"", ""abcdef"", ""abcdef"", ""xyz"", ""abcdefxyz""`.  I've an alternate implementation that produces the expected output but before making a PR, I would like to check that the existing behavior is not based on some use case I'm not thinking about. https://github.com/asarkar/spring/blob/master/buffer-learning/src/main/java/org/abhijitsarkar/java/StringDecoder.java   ---  **Affects:** 5.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-integration/commit/11240be55583ae7f914422b4ad53896def37494c  0 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2018-01-02T02:10:07Z","2018-02-19T12:19:19Z"
"","20501","WebClient: Multipart POST doesn't work [SPR-15948]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15948](https://jira.spring.io/browse/SPR-15948?redirect=false)** and commented  _Using 5.0.0.BUILD-SNAPSHOT, not RC3._  I understand that #19114 added multipart support for `WebClient`, and I also looked at the integration tests, but sadly, it doesn't work for the following request made using `WebClient`.  ``` curl -v --trace-ascii /dev/stdout -F board=sarkara1/test -F note=test -F image=@test.png ""https://api.pinterest.com/v1/pins/?access_token=xxx"" ```  I keep getting the error ""400 board is required"" from the server. I'm not saying Pinterest API is the best designed in the world, actually it's quite the contrary, but the above `curl` statement works, and so does an `OkHttp` client, so I've to believe that it's a bug with `WebClient`.  By dumping the request body, and comparing it with those from the working versions, I've noticed that `WebClient` adds a `Content-Type: text/plain` header for simple form fields like `board` and `note` above, while the other clients don't. If I remember correctly, `WebClient` also adds a `;utf-8` after the overall `Content-Type` boundary, which the other clients don't. There may be other differences that I'm failing to report now, since it was done in a caffeine-fuelled, late-night, debugging session. Also see #20500 which is adding to the differences.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20500 WebClient: DELETE request should not send transfer-encoding: chunked header - #19114 Reactive multipart request support  0 votes, 5 watchers","closed","in: web,","spring-projects-issues","2017-09-10T20:03:23Z","2019-01-11T18:09:39Z"
"","20500","WebClient: DELETE request should not send transfer-encoding: chunked header [SPR-15947]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15947](https://jira.spring.io/browse/SPR-15947?redirect=false)** and commented  _Using 5.0.0.BUILD-SNAPSHOT, not RC3._  The `WebClient` sends a `transfer-encoding: chunked` header for **all** requests which confuses some servers and cause a timeout. The spec says that for some request methods like GET, HEAD, DELETE, the request body, even if present, should be ignored, so for all practical purposes, there is no body. Thus it doesn't make sense to add a `transfer-encoding: chunked`. See this exact same bug raised and fixed for NodeJS: https://github.com/nodejs/node-v0.x-archive/issues/6185.  As for our case, Pinterest API chokes on this. Here's a sample `curl` statement, where the `access_token` has been replaced with a fake one for obvious reasons.  ``` curl -v -X DELETE -H ""User-Agent: ReactorNetty/0.7.0.BUILD-SNAPSHOT"" -H ""Transfer-Encoding: chunked"" -H ""Accept-Encoding: gzip"" -H ""Accept: application/json"" ""https:/api.pinterest.com/v1/boards/sarkara1/test/?access_token=xxx"" ```  The workaround for this is to set the header to null before making the request, which removes it from the header map. Needless to say, the workaround is ugly and shouldn't be required in the first place.  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20501 WebClient: Multipart POST doesn't work - #22194 Delegating File downloads sends incomplete chunks","closed","type: bug,","spring-projects-issues","2017-09-10T19:52:06Z","2019-01-11T18:09:34Z"
"","20499","WebClient doesn't send error signal for error responses [SPR-15946]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15946](https://jira.spring.io/browse/SPR-15946?redirect=false)** and commented  _Actually using 5.0.0.BUILD-SNAPSHOT, forced to choose RC3 as SNAPSHOT isn't available in the list._  With the latest SNAPSHOT, the `WebClient.retrieve` behavior has changed such that if the response has status code 4xx or 5xx, it returns a **successful** `Mono` instead of a `Mono` with error. This makes no sense and completely breaks the client code. Because the `ResponseSpec` has no `isSuccessful` method or something along that line, the client is completely unaware that the `Mono` now contains a `Throwable`, and gets a `ClassCastException` as follows:  ``` java.lang.ClassCastException: org.springframework.web.reactive.function.client.WebClientResponseException cannot be cast to java.lang.String ```  The expected behavior would be that the `ResponseSpec.onStatus` method return an error `Mono`, or the various `bodyTo*` methods would handle this complication. It is simply not the client's problem.  Here's an alternative implementation that solves this problem; it's in Kotlin but the error handling is lifted straight from `DefaultWebClient`:  ``` fun ClientResponse.isError(): Boolean = this.statusCode().is4xxClientError || this.statusCode().is5xxServerError  private inline fun  ClientResponse.toMono(): Mono {     return if (this.isError()) {         this.body(BodyExtractors.toDataBuffers())                 .reduce { obj, buffers -> obj.write(buffers) }                 .map { dataBuffer ->                     dataBuffer.readableByteCount()                             .let { ByteArray(it) }                             .also { dataBuffer.read(it) }                             .apply { DataBufferUtils.release(dataBuffer) }                 }                 .map { bodyBytes ->                     val msg = ""${this.statusCode().value()} ${this.statusCode().reasonPhrase}""                     val charset = this.headers().contentType()                             .map { it.charset }                             .orElse(StandardCharsets.UTF_8)                     WebClientResponseException(                             msg,                             this.statusCode().value(),                             this.statusCode().reasonPhrase,                             this.headers().asHttpHeaders(),                             bodyBytes,                             charset                     )                 }                 .flatMap { Mono.error(it) }     } else {         this.bodyToMono(T::class.java)     } } ```    ---  **Affects:** 5.0 RC3  **Attachments:** - [spr-15946.zip](https://jira.spring.io/secure/attachment/25096/spr-15946.zip) (_76.26 kB_) - [spr-15946-reopen.zip](https://jira.spring.io/secure/attachment/25100/spr-15946-reopen.zip) (_78.95 kB_)","closed","type: bug,","spring-projects-issues","2017-09-10T06:20:02Z","2019-01-11T18:10:39Z"
"","20492","ClassCastException:ContextRefreshedEvent cannot be cast to WebServerInitializedEvent [SPR-15938]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15938](https://jira.spring.io/browse/SPR-15938?redirect=false)** and commented  When DEBUG enabled, using web flux  ``` java.lang.ClassCastException: org.springframework.context.event.ContextRefreshedEvent cannot be cast to org.springframework.boot.web.context.WebServerInitializedEvent 	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) [spring-context-5.0.0.RC3.jar:5.0.0.RC3] 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.0.0.RC3.jar:5.0.0.RC3] ```    ---  **Affects:** 5.0 RC3","closed","in: web,","spring-projects-issues","2017-09-08T05:46:54Z","2019-01-12T16:44:57Z"
"","20485","ReactorServerHttpRequest.getUri() does not include scheme [SPR-15931]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15931](https://jira.spring.io/browse/SPR-15931?redirect=false)** and commented  `ServerRequest.uri()` returns a relative URI that starts with `//`, thus making it impossible to extract the scheme. The scheme is required when working with OAuth that requires a redirect URL to be sent with the initial request.  Here's a sample OAuth call for Pinterest:  ``` fun redirect(request: ServerRequest): Mono =     UriComponentsBuilder.fromUriString(""https://api.pinterest.com/oauth/"")             .queryParam(""response_type"", ""code"")             .queryParam(""scope"", ""read_public,write_public"")             .queryParam(""state"", state)             .queryParam(""client_id"", clientId)             .queryParam(""redirect_uri"", request.uri().resolve(URI.create(""oauth/token""))                     .let { uri -> (uri.scheme ?: ""https"").let { ""$it:$uri"" } })             .build()             .toUri()             .also { logger.debug(""Making request to: $it."") }             .let { ServerResponse.permanentRedirect(it).build() }  fun accessToken(request: ServerRequest): Mono =     request             .also {                 logger.debug(""Received access token: $it."")                 it.queryParam(""state"")                         .filter { it == state }                         .flatMap { request.queryParam(""code"") }                         .ifPresent { cache.put(""accessToken"", it) }             }             .let { ServerResponse.noContent().build() } ```  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20505 Introduce WebFluxUriComponentsBuilder - #20506 Introduce ForwardedHeaderFilter for WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a0784bea8efdc7fc9b629adfcd8aba749fe94c7, https://github.com/spring-projects/spring-framework/commit/ec6475a24c91b3e90e21b09d41a241e2e72f93a0","closed","type: enhancement,","spring-projects-issues","2017-09-07T08:31:32Z","2019-01-11T18:11:07Z"
"","20402","Add support for Kotlin autowired constructor with optional parameters [SPR-15847]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-15847](https://jira.spring.io/browse/SPR-15847?redirect=false)** and commented  ``` @Component class A(val str: String = ""whatever"", val b: B) {  // class A constructor(val str: String = ""whatever"", @Autowired val b: B) doesn't work either  } ```  ``` @Component class B { } ```  ``` @SpringBootApplication class DemoApplication  fun main(args: Array) {     SpringApplication.run(DemoApplication::class.java, *args) } ```  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'a' defined in file [/A.class]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.example.demo.A]: No default constructor found; nested exception is java.lang.NoSuchMethodException: com.example.demo.A.() 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1242) ~[spring-beans-5.0.0.RC3.jar:5.0.0.RC3] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1141) ~[spring-beans-5.0.0.RC3.jar:5.0.0.RC3] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.example.demo.A]: No default constructor found; nested exception is java.lang.NoSuchMethodException: com.example.demo.A.() 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:84) ~[spring-beans-5.0.0.RC3.jar:5.0.0.RC3] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1234) ~[spring-beans-5.0.0.RC3.jar:5.0.0.RC3] 	... 16 common frames omitted Caused by: java.lang.NoSuchMethodException: com.example.demo.A.() 	at java.lang.Class.getConstructor0(Class.java:3082) ~[na:1.8.0_131] 	at java.lang.Class.getDeclaredConstructor(Class.java:2178) ~[na:1.8.0_131] 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:79) ~[spring-beans-5.0.0.RC3.jar:5.0.0.RC3] 	... 17 common frames omitted ```  ---  **Affects:** 5.0 RC3  **Issue Links:** - #20432 Revisit handling of missing fields (without default values) for immutable data classes - #20569 Streamline and reduce Kotlin delegates  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef68ccdbd85c4662ef0634729250e35d7e7fde83","closed","type: enhancement,","spring-projects-issues","2017-08-04T15:12:00Z","2019-01-11T17:40:49Z"
"","20878","@AspectJ @Component could not autowired its field [SPR-16331]","**[abdushkur ablimit](https://jira.spring.io/secure/ViewProfile.jspa?name=abdushkur)** opened **[SPR-16331](https://jira.spring.io/browse/SPR-16331?redirect=false)** and commented  console debug message says it is autowired but it is not, so debug and took pictures, please review marked info could you give me some advice?   ---  **Affects:** 4.3.8  **Attachments:** - [3.PNG](https://jira.spring.io/secure/attachment/25328/3.PNG) (_143.68 kB_)","open","in: core,","spring-projects-issues","2017-12-29T08:23:13Z","2019-01-11T15:21:21Z"
"","20877","CacheAspectSupport should iterate all caches which cache manger holds [SPR-16330]","**[abdushkur ablimit](https://jira.spring.io/secure/ViewProfile.jspa?name=abdushkur)** opened **[SPR-16330](https://jira.spring.io/browse/SPR-16330?redirect=false)** and commented  I have two level cache EhCache and Memcache, I add two cache implements to CacheManager , what I want is if the Object doesn't exist in EhCache it should get it from Memcache ,if Memcache doesn't have it then should invoke method  , I see source file , it only get the first Cache, then invoked the method. Cache cache = context.getCaches().iterator().next();   ---  **Affects:** 4.3.8  **Attachments:** - [2.PNG](https://jira.spring.io/secure/attachment/25327/2.PNG) (_40.11 kB_)","closed","in: core,","spring-projects-issues","2017-12-28T20:57:12Z","2019-01-12T05:19:38Z"
"","21071","Spurious ERROR-level logging when using SSEEmitter [SPR-16528]","**[Aaron Lane](https://jira.spring.io/secure/ViewProfile.jspa?name=ajlane)** opened **[SPR-16528](https://jira.spring.io/browse/SPR-16528?redirect=false)** and commented  Original report on Spring Boot: https://github.com/spring-projects/spring-boot/issues/12168  Example project: https://github.com/ajlane/spring-boot-sse-example  Steps to reproduce: - Start the application and navigate to http://localhost:8080. - Wait for the client connection to time out or just refresh the page.  Expected behaviour: - Clients disconnecting and reconnecting through normal use is logged at DEBUG level or lower.  Actual behaviour: - Timeouts and Broken pipe IOExceptions are logged at ERROR level, with no clear way to isolate and suppress them.  ``` 2018-02-22 13:26:01.855 ERROR 34241 --- [nio-8080-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Async timeout for GET [/clock] 2018-02-22 13:26:34.945 ERROR 34241 --- [nio-8080-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver : Async timeout for GET [/clock] 2018-02-22 13:27:08.036 ERROR 34241 --- [nio-8080-exec-5] .w.s.m.s.DefaultHandlerExceptionResolver : Async timeout for GET [/clock] 2018-02-22 13:27:12.614 ERROR 34241 --- [nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] threw exception  java.io.IOException: Broken pipe 	at sun.nio.ch.FileDispatcherImpl.write0(Native Method) ~[na:1.8.0_66] 	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47) ~[na:1.8.0_66] 	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93) ~[na:1.8.0_66] 	at sun.nio.ch.IOUtil.write(IOUtil.java:65) ~[na:1.8.0_66] 	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471) ~[na:1.8.0_66] 	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:134) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:157) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1267) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:670) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:607) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:597) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.flush(Http11OutputBuffer.java:646) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.coyote.http11.filters.ChunkedOutputFilter.flush(ChunkedOutputFilter.java:169) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.coyote.http11.Http11OutputBuffer.flush(Http11OutputBuffer.java:252) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.coyote.http11.Http11Processor.flush(Http11Processor.java:1560) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:285) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.coyote.Response.action(Response.java:173) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:317) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:284) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:118) ~[tomcat-embed-core-8.5.27.jar:8.5.27] 	at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:297) ~[na:1.8.0_66] 	at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:141) ~[na:1.8.0_66] 	at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:229) ~[na:1.8.0_66] 	at org.springframework.util.StreamUtils.copy(StreamUtils.java:119) ~[spring-core-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:106) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:41) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:227) ~[spring-web-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler$HttpMessageConvertingHandler.sendInternal(ResponseBodyEmitterReturnValueHandler.java:207) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler$HttpMessageConvertingHandler.send(ResponseBodyEmitterReturnValueHandler.java:200) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.sendInternal(ResponseBodyEmitter.java:166) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter.send(ResponseBodyEmitter.java:159) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:126) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.SseEmitter.send(SseEmitter.java:107) ~[spring-webmvc-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at au.id.ajlane.examples.springsse.ClockController.tick(ClockController.java:31) ~[classes/:na] 	at sun.reflect.GeneratedMethodAccessor31.invoke(Unknown Source) ~[na:na] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_66] 	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_66] 	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:65) ~[spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54) ~[spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at java.util.concurrent.Executors$RunnableAdapter.call$$$capture(Executors.java:511) ~[na:1.8.0_66] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java) ~[na:1.8.0_66] 	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) ~[na:1.8.0_66] 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) ~[na:1.8.0_66] 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) ~[na:1.8.0_66] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_66] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_66] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_66] ```    ---  **Affects:** 4.3.14  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-02-22T21:47:57Z","2018-10-19T14:19:30Z"
"","1493","Refactor of small pieces of code to java 8 for better readability","#I have decided to refactor some of Spring's code to Java 8 since Spring Framework 5 onwards must be Java 8 compatible, allowing legacy code to be refactored. I personally love lambda and streams, so if this PR is approved I will surely keep refactoring small chunks of code little by little.  I am not sure if I am compliant to Spring Guideline, so, please, let me know if I have done anything wrong so I can make it right next time.  PS: No behavior has been changed, so tests pass normally.  Thanks!","closed","","tminussi","2017-08-03T22:18:14Z","2017-08-17T07:46:49Z"
"","1600","SPR-16216 Make annotation of param can be inherited","# Purpose This PR make spring can read annotations of param from interface or super class. It is a sample: ```Java interface InterfaceA{     void method(@TestAnnotation String param0); }  class ClassB implements InterfaceA{     @Override     public void method(String param0){     } } ``` When you create a `ClassB` bean, Spring can find `TestAnnotation` from `ClassB.method param0` even this method is been override.  # How it work I will scan all annotations from same signature method from interfaces and super class.  # Scenarios I think it is very usefully for feign and service. We usually create a feign project for our service(Spring MVC), like this: ```Java @FeignClient(name = ""Editor"") public interface AFeignClient {     @RequestMapping(path = ""/api/test/{id}"", method = RequestMethod.GET)     ResultModel getTestResult(@PathVariable(""id"") String id, @RequestParam(value = ""paging"", required = false) String paging); ``` As you see, we create a feign client for a API, then we will create controller from this feign client, like this: ```Java @RestController public class ServiceController implements AFeignClient {     @Override      ResultModel getTestResult(@PathVariable(""id"") String id, @RequestParam(value = ""paging"", required = false) String paging){      // Business code here     } } ``` Yes, we don't need re-add `RequestMapping` for controller, but we should re-add `PathVariable`, `RequestParam`...It is very easy to forget re-add annotations for controller, and IDE can't add those annotations automatically This PR will solve this problem, you just need your controller implement FeignClient then all will be done by spring.","closed","in: web,","devkanro","2017-11-20T05:05:38Z","2021-11-15T17:35:37Z"
"","1702","Fix typos in webmvc documentation","""Obvious Fix"" of typos in webmvc documentation.","closed","","roamingthings","2018-02-25T18:26:01Z","2018-02-25T18:40:26Z"
"","1738","Polish ""Use Java 8 forEach method on Map""","","closed","","Patrick0308","2018-03-09T16:04:05Z","2018-11-05T15:34:42Z"
"","1737","Polish: remove this unused private method parameters","","closed","","igor-suhorukov","2018-03-09T08:43:51Z","2018-03-25T07:53:43Z"
"","1734","Polish: simplify lambda expression","","closed","","igor-suhorukov","2018-03-08T21:18:27Z","2018-03-08T22:44:33Z"
"","1733","Polish: simplify boolean NOT operation","","closed","","igor-suhorukov","2018-03-08T21:03:57Z","2018-03-08T22:44:16Z"
"","1732","Polish: parentheses should be removed from a single lambda input parameter when its type is inferred","","closed","","igor-suhorukov","2018-03-08T20:52:31Z","2018-03-09T08:45:43Z"
"","1731","Polish: lamdbas containing only one statement should not nest this statement in a block","","closed","","igor-suhorukov","2018-03-08T20:46:18Z","2018-03-08T20:49:05Z"
"","1730","Polish: use more modern java API for empty collections","","closed","","igor-suhorukov","2018-03-08T20:37:16Z","2018-03-08T20:41:58Z"
"","1729","Polish: use StringBuilder for complex string concatenation","","closed","","igor-suhorukov","2018-03-08T20:22:51Z","2018-03-08T20:27:02Z"
"","1728","Polish: to get rid of ""magic"" time constants","","closed","","igor-suhorukov","2018-03-08T18:31:16Z","2018-03-09T10:31:53Z"
"","1726","Polish: reorder the modifiers to comply with the Java Language Specification.","","closed","","igor-suhorukov","2018-03-08T16:36:56Z","2018-03-08T16:57:48Z"
"","1724","Polish: collapsible ""if"" statements should be merged","","closed","","igor-suhorukov","2018-03-08T12:30:52Z","2018-03-08T14:38:07Z"
"","1721","Polish ""Use Java 8 forEach method on Map""","","closed","","Patrick0308","2018-03-07T14:26:14Z","2018-03-07T14:40:00Z"
"","1719","Polish: constant names should comply with a naming convention","","closed","","igor-suhorukov","2018-03-06T20:55:42Z","2018-03-06T21:15:11Z"
"","1718","Polish: local variable and method parameter names should comply with a naming convention","","closed","","igor-suhorukov","2018-03-06T20:29:19Z","2018-03-06T20:46:54Z"
"","1715","Polish: useless imports should be removed","","closed","","igor-suhorukov","2018-03-02T21:40:39Z","2018-03-03T11:13:39Z"
"","1714","Polish: assertion arguments should be passed in the correct order","","closed","","igor-suhorukov","2018-03-02T20:57:27Z","2018-03-03T15:14:47Z"
"","1712","Polish: deprecated elements should have both the annotation and the Javadoc tag","","closed","","igor-suhorukov","2018-03-01T21:09:36Z","2018-03-01T22:38:20Z"
"","1710","Polish: follow naming convention","","closed","","igor-suhorukov","2018-02-28T21:01:15Z","2018-02-28T23:22:30Z"
"","1709","Polish: ""@Override"" should be used on overriding and implementing methods","","closed","","igor-suhorukov","2018-02-28T20:44:30Z","2018-02-28T23:15:19Z"
"","1708","Polish: extract nested ternary operation into an independent statement","","closed","","igor-suhorukov","2018-02-28T06:52:30Z","2018-02-28T09:09:43Z"
"","1707","Polish: to get rid unnecessary array creation","","closed","","igor-suhorukov","2018-02-27T21:31:45Z","2018-02-27T22:37:55Z"
"","1705","Polish: combine catches block with same body","","closed","","igor-suhorukov","2018-02-27T06:03:26Z","2018-02-27T20:20:45Z"
"","1703","Polish: String function use should be optimized for single characters","","closed","","igor-suhorukov","2018-02-25T19:35:03Z","2018-02-25T19:48:48Z"
"","1700","Polish: redundant pairs of parentheses should be removed","","closed","","igor-suhorukov","2018-02-24T22:06:17Z","2018-02-24T23:01:44Z"
"","1683","Polish: lamdbas containing only one statement should not nest this statement in a block","","closed","","igor-suhorukov","2018-02-13T23:13:37Z","2018-02-14T00:22:02Z"
"","1682","Polish: remove unused private fields, remove empty operator","","closed","","igor-suhorukov","2018-02-13T21:08:28Z","2018-02-13T22:00:19Z"
"","1677","Polish: replace the synchronized class ""Stack"" by an unsynchronized one such as ""Deque"".","","closed","","igor-suhorukov","2018-02-11T10:27:13Z","2018-02-11T20:15:47Z"
"","1676","[docs] Fix indentation in '1.4.3. Handler Methods'","","closed","","fabriziocucci","2018-02-11T10:14:58Z","2018-02-12T07:13:26Z"
"","1674","Polish: Lambdas should be replaced with method references","","closed","","igor-suhorukov","2018-02-09T23:43:47Z","2018-02-10T11:09:47Z"
"","1673","Polish: Maps with keys that are enum values should be replaced with EnumMap","","closed","","igor-suhorukov","2018-02-09T23:21:01Z","2018-02-10T11:09:34Z"
"","1672","Polish: follow name convention - make immutable fields final","","closed","","igor-suhorukov","2018-02-09T23:07:51Z","2018-02-10T11:09:20Z"
"","1670","Polish: Collection.isEmpty() should be used to test for emptiness","","closed","","igor-suhorukov","2018-02-08T21:32:56Z","2018-02-09T09:12:38Z"
"","1669","Polish: the diamond operator (""<>"") should be used","","closed","","igor-suhorukov","2018-02-08T21:08:10Z","2018-02-09T09:12:14Z"
"","1668","Set thread interrupt flag on InterruptedException","","closed","","igor-suhorukov","2018-02-08T07:18:03Z","2018-02-10T11:42:42Z"
"","1664","Make use of Stream API in AnnotationBeanUtils","","closed","","pkostrzewa","2018-02-05T15:57:23Z","2018-02-09T12:13:57Z"
"","1658","lambda","","closed","","liaozan","2018-02-01T12:02:23Z","2018-03-01T04:26:22Z"
"","1655","SPR-16425 - Remove square brackets around stringified collections","","closed","status: declined,","logart","2018-01-27T14:06:29Z","2021-01-08T17:04:25Z"
"","1653","SPR-14818: Added MissingHeaderException type","","closed","","pebo","2018-01-26T08:01:00Z","2018-07-18T16:44:08Z"
"","1646","docs: ""does not forcing"" -> ""does not force""","","closed","","JanStureNielsen","2018-01-17T16:53:51Z","2018-01-17T17:07:30Z"
"","1640","Fix source code in doc","","closed","","making","2018-01-09T17:40:28Z","2018-01-09T18:18:18Z"
"","1638","4.3.x","","closed","","karthik-Adiga","2018-01-05T18:51:24Z","2018-01-05T18:56:03Z"
"","1633","SPR-16316 — fix support of transaction timeout value greater than Integer.MAX","","closed","","Skelotron","2017-12-24T00:16:17Z","2018-01-07T22:48:26Z"
"","1626","SPR-16319 - limit the scope of the synchronized block","","closed","","mathieu-pousse","2017-12-21T13:22:44Z","2018-01-17T18:07:50Z"
"","1610","add dropwizard metrics to spring-web http client","","closed","","xiaoshuang-lu","2017-12-01T04:58:50Z","2018-02-08T02:08:50Z"
"","1609","SPR-16245 make it easy to manipulate payload","","closed","","jeffnelson","2017-11-29T23:05:40Z","2018-01-09T21:52:58Z"
"","1606","Replace manual array copy with native method call","","closed","","kamilszymanski","2017-11-27T22:28:57Z","2018-02-08T16:10:33Z"
"","1582","4.3.x","","closed","","zhouchangfu","2017-11-01T08:06:47Z","2017-11-01T08:19:15Z"
"","1570","Add missing ""be"" in Part's javadoc","","closed","","wilkinsona","2017-10-20T14:12:12Z","2017-10-20T14:44:42Z"
"","1568","4.2.x","","closed","","reachvali","2017-10-19T14:38:49Z","2017-12-17T14:43:36Z"
"","1567","3.2.x","","closed","","jinyuzhou","2017-10-19T06:44:56Z","2017-10-19T07:03:19Z"
"","1564","4.3.x","","closed","","IlilIliI","2017-10-16T01:38:01Z","2017-10-16T06:07:33Z"
"","1563","to beautiful model . It's easy to read.","","closed","","teerapat1739","2017-10-15T16:29:43Z","2017-10-15T18:40:11Z"
"","1559","To the beautiful model","","closed","","teerapat1739","2017-10-13T15:40:12Z","2017-10-13T16:14:16Z"
"","1554","To the beautiful model","","closed","","teerapat1739","2017-10-11T15:01:23Z","2017-10-13T16:14:28Z"
"","1552","To the beautiful model","","closed","","teerapat1739","2017-10-10T16:05:50Z","2017-10-13T16:14:39Z"
"","1551","To the beautiful model","","closed","","teerapat1739","2017-10-09T15:21:04Z","2017-10-13T16:14:49Z"
"","1547","Fix typo in exception message: quite -> quiet","","closed","","tomfitzhenry","2017-10-03T02:41:08Z","2017-10-03T06:26:05Z"
"","1537","Correct ResourceTransformer name in asciidoc documentation","","closed","","nkolosnjaji","2017-09-28T17:55:52Z","2017-09-28T18:55:54Z"
"","1536","3.1.x","","closed","","mikeeastin","2017-09-28T12:15:42Z","2017-09-28T12:16:50Z"
"","1518","Fix typo","","closed","","eungjun-yi","2017-09-07T09:40:45Z","2017-09-08T08:48:34Z"
"","1514","3.2.0","","closed","","lipengli001","2017-09-01T11:48:28Z","2017-09-01T11:50:33Z"
"","1511","Minor fix in example code: No quotes for boolean","","closed","","arend-von-reinersdorff","2017-08-31T16:37:53Z","2017-09-01T07:27:55Z"
"","1507","Refactor DefaultWebSessionManager","","closed","","rwinch","2017-08-24T18:27:39Z","2017-09-09T11:17:23Z"
"","1502","te","","closed","","liuxuehai","2017-08-22T02:02:26Z","2017-08-22T04:43:04Z"
"","1500","4.3.x","","closed","","guanmu","2017-08-17T03:33:39Z","2017-08-17T07:43:55Z"
"","1497","4.3.x","","closed","","redrainz","2017-08-15T05:59:58Z","2017-08-15T07:37:18Z"
"","1495","3.2.x","","closed","","dwshmilyss","2017-08-10T17:28:53Z","2017-08-10T17:30:42Z"
"","1491","4.3.x","","closed","","douraid","2017-08-02T22:05:31Z","2017-08-03T06:44:42Z"