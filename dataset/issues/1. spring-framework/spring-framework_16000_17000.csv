"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","169","SPR-9897: add Yaml*FactoryBeans for Map and Properties","YAML is a nice human-readable format for configuration, and it has some useful hierarchical properties. It's more or less a superset of JSON, so it has a lot of similar properties. Some features: - The Properties created have nested paths for   hierarchical objects. - A ""document matcher"" can be injected to select   only some documents fomra multi-document input file. - Yaml is loaded from an array of Resource[] and   a strategy for the resolution and merging behaviour   if multiple resources are presnet can be set   (OVERRIDE, OVERRIDE_AND_IGNORE, FIRST_FOUND)","closed","","dsyer","2012-10-20T22:04:48Z","2014-06-26T07:08:29Z"
"","133","Add MockFilterChain support Filter's and Servlet","Working on Spring Test MVC we have the need for a `MockFilterChain` that will invoke `Filter`'s and/or a `Servlet`. Since this is something that others would likely want, we thought it would be best to update the `MockFilterChain` provided by Spring Framework.  One item that should be highlighted is that the `doFilter` method signature now has throws `IOException`, `ServletException`. While both `Exception`s are on the `FilterChain` interface, this is non-passive for any user invoking `new MockFilterChain().doFilter()` since they would need to handle the newly added `Exception`s. However, since this is to only impact test code and is impossible to miss (due to the compiler) and easily fixable it was thought to be better than wrapping the `Exception`s with a `RuntimeException`.  Currently the MockFilterChain - Performs basic validation on the request/response - Makes the request/response available as members - Ensures doFilter is only invoked once  This commit adds the ability to allow the MockFilterChain to invoke a List of Filter's and/or a Servlet.  Issue: SPR-9745","closed","","rwinch","2012-08-31T18:26:47Z","2014-06-24T16:38:42Z"
"","172","Add SpEL support for increment/decrement operators","With this commit the Spring Expression Language now supports  increment (++) and decrement (--) operators. These can be used as either prefix or postfix operators. For example: 'somearray[index++]' and 'somearray[--index]' are valid.  In order to support this there are serious changes to the  evaluation process for expressions. The concept of a  value reference for an expression component has been introduced. Value references can be passed around and at any time the actual value can be retrieved (via a get) or set (where applicable). This was needed to avoid double evaluation of expression components. For example, in evaluating the expression 'somearray[index++]--' without a value reference SpEL would need to evaluate the 'somearray[index++]' component twice, once to get the value and then again to determine where to put the new value. If that component is evaluated twice, index would be double incremented. A value reference for 'somearray[index++]' avoids this problem.  Many new tests have been introduced into the EvaluationTests to ensure not only that ++ and -- work but also that the  introduction of value references across the all of SpEL has not caused regressions.  Issue: SPR-9751","closed","","aclement","2012-10-23T19:02:21Z","2012-10-24T01:27:25Z"
"","56","SPR-9216 - Add support for 301 redirects using UrlBasedViewResolver prefixes","When returning the ""redirect:"" prefix from a method with a RequestMapping, the default behavior is to return a 302 redirect. It would be nice if there was a way to return a 301 or a 302 redirect based on the prefix used (e.g. ""redirect:"" or ""permanentRedirect:"").   For SEO, a 301 is more desirable than a 302, and it would be nice to have a way to conveniently return the 301 without having the method return a RedirectView with a 301 as it's StatusCode.  https://jira.springsource.org/browse/SPR-9216   I should already have a SpringSource CLA form on file.","closed","","tburch","2012-03-09T23:44:11Z","2014-06-19T05:51:23Z"
"","153","Fixed replaced-method/arg-type to allow the body element to be used.","When parsing the 'replace-method' sub elements use the body content of the 'arg-type' when the 'match' attribute is empty.  This means that the following are the same:      int           Before the int would have been accepted as  and which matches all methods with a single argument.  This style appears to be used in the Appress Pro spring book and while it either hasn't worked like this in a while (or ever) it seems reasonable to handle it. An alternative would be to either change the xsd or throw an exception on finding body content in the 'arg-type' element.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  Issue: SPR-9812  updating the headers and copyright notice","closed","","tempredirect","2012-09-24T08:54:58Z","2014-07-05T13:26:35Z"
"","99","SPR-4675: add explicit test for null return from aop advice","When around advice returns null and the caller is expecting a primitive it is _really_ hard to debug.  Adding an explicit check for this in the aop proxy and throwing a Spring exception seems like the best solution.","closed","","dsyer","2012-06-21T09:29:50Z","2014-06-24T09:06:43Z"
"","70","Update WebMvcConfigurationSupport.java","We should place rss & atom converters before jackson converter, because currently com.sun.syndication.feed.rss.Channel and com.sun.syndication.feed.atom.Feed and converted to json by default which isn't quite right and intuitive.","closed","","allnightlong","2012-04-20T15:34:10Z","2014-07-02T18:12:45Z"
"","74","ClasspathResourceBundleMessageSource to load resources files from the classpath","We are working on a project which has multiple modules based on their business functionality and one web application to expose those modules as web services to the public.   Each module operate independently (meaning it can take in or out based on the licensing/ deployment requirements) .  Common functionality like endpoint exception resolving (with their message localization) has been defined in the web application hence it needs to load all the resources file in its modules by searching the classpath.  This is the implementation we have introduced to implement our requirement and would think that it would be beneficial as a core functionality as this could seems like a common application requirement in modular applications    Thanks  Movin","closed","","movink","2012-05-05T03:53:16Z","2012-05-08T15:14:30Z"
"","83","Fix compiler warnings","Warnings in all src/main/java folders have been reviewed and fixed with the following exceptions: - changes that might break binary compatibility - changes due to reliance on external deprecated code - changes that seem contentious or may require additional review  In addition src/test/java folders have been reviewed and fixed up-to spring-jdbc.  The use of deprecated EasyMock calls have not yet been updated.  The eclipse 'organize imports' command has also been used to fix any unused import declarations and provide a consistent style.","closed","","philwebb","2012-05-21T18:51:33Z","2014-06-21T20:10:48Z"
"","134","Add generic to TypeDescriptor.getAnnotation()","Use generics for TypeDescriptor.getAnnotation() to work in the same way as Method.getAnnotation().  Add hasAnnotation method and update existing conditional converters to make use of it.  Cleanup JavaDoc formatting a little.  Issue: SPR-9744","closed","","philwebb","2012-08-31T18:44:49Z","2014-06-17T11:56:57Z"
"","92","Javadoc patch for RequestMapping (SPR-9483)","Updated Javadoc for RequestMapping as suggested in  https://jira.springsource.org/browse/SPR-9483  ```  * The format is a media type or sequence of media types,  * with a request only mapped if the {@code Content-Type} matches one of these media types.      * Examples: {@code consumes = ""text/plain""} consumes = {""text/plain"", ""application/*""} ```  similar for produces.  Update 06/13/2012: I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","DavidBiesack","2012-06-12T13:05:44Z","2014-06-12T06:55:32Z"
"","136","SpEL support for methods and properties on class","Update the ReflectiveMethodResolver and ReflectivePropertyAccessor to allow methods and properties of java.lang.Class to be resolved when the target object is a class.  Issue: SPR-9017","closed","","philwebb","2012-09-07T02:06:40Z","2012-10-12T20:01:42Z"
"","124","Sort AspectJ annotated methods","Update the ReflectiveAspectJAdvisorFactory class to sort candidate AOP methods based on their annotation 1st and method name second.  Prior to this the order of aspects created from annotated methods could differ depending on the underling JVM.  Issue: SPR-9729","closed","","philwebb","2012-08-27T20:30:29Z","2012-09-06T14:08:18Z"
"","68","3.1.x","Update slf4j dependency to 1.6.1 in ORM; current value seemed to be breaking the Ant build  SPR-9147: Backport ""Race condition in AnnotationMethodHandlerExceptionResolver"" -- made changes based on rstoyanchev's SPR-9138 work via diff at https://github.com/SpringSource/spring-framework/commit/0b0293393876934e24a5215bdb7bc2e1bf75c233#diff-1  Thanks! --DAVE","closed","","djkieras","2012-04-17T14:06:11Z","2014-06-18T16:10:17Z"
"","156","TypeDescriptor collection and map generics","TypeDescriptor.valueOf now uses GenericCollectionTypeResolver to resolve element types.  Issue: SPR-9257","closed","","philwebb","2012-09-28T22:07:48Z","2012-10-30T13:04:53Z"
"","190","Fix spring-test-mvc Eclipse classpath","This will fix the tiles3 compile issue in Eclipse","closed","","rwinch","2012-11-27T01:47:53Z","2012-11-27T08:17:36Z"
"","152","Use the body content of the element 'arg-type' as if the 'match' attribute is empty","This means that the following are the same:      int           Before the int would have been accepted as  and which matches all methods with a single argument.  Issue: SPR-9812","closed","","tempredirect","2012-09-23T09:48:44Z","2012-09-23T15:39:06Z"
"","184","web.Mock* classpath polishing","This is an update per an email chain with Rossen, Chris, and Juergen. I did not put a JIRA ticket with it since it is a minor change within the build and tests. If one is desired, please let me know and I can create one and update the commit message.  Previously when running the tests for spring-web, spring-webmvc, spring-test-mvc, and spring-orm there were possible collissions in the classpath due to the fact that each had its own copy of the web.Mock* classes in it. This causes uncertainty for which class the code was running against. Furthermore, the maintance of keeping the copies up to date was tedious.  Now there are two copies of the web.Mock\* classes. The ones that exist in spring-test main sources and a copy that supports servlet 3 within spring-web test sources. The copy in spring-web test sources has been moved to a new package to avoid having the classes exist twice on the classpath within Eclipse.","closed","","rwinch","2012-11-21T00:08:05Z","2014-07-22T11:12:12Z"
"","118","SPR-7123 - Adding spring-lang-groovy subproject","This is a spike to support moving forward with integrating the Spring BeanBuilder into the main Spring build.","closed","","jeffbrown","2012-08-09T17:34:47Z","2012-08-09T18:31:27Z"
"","65","Fix for SPR-9323 (NPE in WebSphere)","This is a fix for https://jira.springsource.org/browse/SPR-9323 .  It's causing this bug in Grails 2.x: http://jira.grails.org/browse/GRAILS-8791 that breaks WebSphere App Server 6.1 compatibility.","closed","","lhotari","2012-04-13T06:40:57Z","2012-05-16T08:26:44Z"
"","73","HanderInterceptor and OSIV async request changes","This change updates Open-Session-in-View filters and interceptors for use in async requests mainly ensuring the open Hibernate session is unbound from the main request processing thread and bound to the to async thread.  Issue: SPR-8517","closed","","rstoyanchev","2012-05-04T20:15:44Z","2012-05-04T20:16:19Z"
"","162","SPR-9335: catch exceptions explicitly where possible","This change restores the old behaviour in Spring 3.0, as near as I can tell, without breaking the Groovy aspect changes introduced in 3.1.  Since no-one has come up with a test case for all the catch blocks and there is no test project for the WAS case (I tried) we have to rely on the users in the JIRA thread to test this change.","closed","status: superseded,","dsyer","2012-10-09T12:48:26Z","2021-11-12T13:55:52Z"
"","53","Enable SpEL to support array refs in T() construct","This allows SpEL to support this syntax kind of syntax: ""T(foo.Bar[])"".  Without the change SpEL will not allow the use of [] in the T().  Issue: SPR-9203","closed","","aclement","2012-03-05T23:56:11Z","2012-05-17T10:48:56Z"
"","62","Add abstract WebApplicationInitializers","These two commits adds three abstract WebApplicationInitializers, to be used for a typical setup of a Spring Web application. - AbstractContextLoaderInitializer provides an abstract base class for   setting up the ContextLoaderListener. - AbstractDispatcherServletInitializer provides an abstract base class   for setting up one or more DispatcherServlets, with an optional root   context. - AbstractAnnotationConfigDispatcherServletInitializer provides an   abstract base class for setting up DispatcherServlets based on   Configuration classes.  Some points for discussion: - Packaging: I wasn't sure where to put these classes, and I am fully open for suggestions. - Naming: I am happy about `AbstractContextLoaderInitializer` and `AbstractDispatcherServletInitializer`, but less happy about `AbstractAnnotationConfigDispatcherServletInitializer`. Open for suggestions as well. - There are a couple of TODOs, where we have the opportunity to pass a ServletContext to a template method. I wasn't sure if the context was needed, so I left it out.  Also, this seems to have turned into two commits, while the goal was to have one. Blame my git ignorance.","closed","","poutsma","2012-04-03T11:51:13Z","2014-06-13T07:41:17Z"
"","85","Bugfix for https://jira.springsource.org/browse/SPR-9445","These are the proposed changes to fix the bug SPR-9445  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  Regards, Oliver","closed","","obecker","2012-05-26T11:32:31Z","2014-07-21T05:45:04Z"
"","112","Modify tokenizer to support methods on numbers.","The tokenizer will now not consume the trailing '.' on an integer as part of the integer.  So '3.foo()' will now be '3' '.' 'foo()' and not '3.' 'foo()' - which was what prevented parsing of method invocations on integers. To keep the change simple, the parser will no longer handle real numbers of the form '3.e4' and they must include the extra 0, i.e. '3.0e4'.  Issue: SPR-9612","closed","","aclement","2012-08-03T15:51:52Z","2012-08-03T23:09:07Z"
"","115","Support symbolic boolean operators for OR and AND","The tokenizer is modified to recognize && and || as symbolic boolean operators.  The parser is then modified to allow the use of either the textual or symbolic operators.  Issue: SPR-9614","closed","","aclement","2012-08-07T16:23:17Z","2012-08-09T19:18:09Z"
"","116","Support nested double quotes in expressions","The tokenizer has been modified to allow to support nested double quotes in the same way it supports single quotes. A sequence of two double quotes will now be replaced by one when evaluated.  Extra error handling also added to report when invalid escaping is encountered (SpEL does not support escaping with backslash).  Issue: SPR-9620","closed","","aclement","2012-08-07T16:59:21Z","2014-07-04T08:32:06Z"
"","143","Working around String.substring(…) issue introduced in Java7u6","The String.substring(…) method seems to have become significantly slower on the latest Java7 updates so that we see performance degradation by a  factor of 100-1000 in ResourceDatabasePopulator, especially for large SQL files processed. I've worked around this by minimizing the substring  scope to the least amount possible to prevent unnecessary internal  copying of String (which seems to cause the issue).  See http://mail.openjdk.java.net/pipermail/core-libs-dev/2012-May/010257.html  Issue: SPR-9781","closed","","odrotbohm","2012-09-11T10:55:22Z","2014-06-28T15:37:17Z"
"","191","Rename MvcAsyncTask to WebAsyncTask","The name MvcAsyncTask is misleading because the class is part of Spring Web as apposed to Spring MVC. This is also inconsistent with the other async classes which use Web instead of Mvc.  This commit changes MvcAsyncTask to WebAsyncTask making it more consistent with the jar it is found in and the other async classes.  Issue: SPR-10051","closed","","rwinch","2012-11-28T16:50:44Z","2014-08-17T21:49:13Z"
"","117","Avoid NPE when registering MethodFilter","The MethodFilter is only for use with the reflective method resolver.  Now throw an IllegalStateException if the user attempts to set a filter when they appear to be using custom set of resolvers.  Issue: SPR-9621","closed","","aclement","2012-08-07T17:17:40Z","2012-08-09T21:10:31Z"
"","188","AnnotationAwareOrderComparator now exposes INSTANCE constant.","The INSTANCE constant you could refer to on AnnotationAwareOrderComparator actually referred to the constant declared in OrderAwareComparator. Thus AnnotationAwareOrderComparator.INSTANCE did not actually return an AnnotationAwareOrderComparator but an OrderAwareComparator only. This commit introduces a dedicated constant on AnnotationAwareOrderComparator to avoid this glitch.  Issue: SPR-10038","closed","","odrotbohm","2012-11-26T15:37:38Z","2014-06-18T14:58:19Z"
"","161","Global DateTimeFormatters and support without Joda","Support for custom global Joda DateTimeFormatters  Added dateFormatter, timeFormatter and dateTimeFormatter properties to JodaTimeFormatterRegistrar allowing for custom global formatting.  DateTimeFormatterFactory can be used when configuring with XML.  Issue:   This issue incorporates the earlier pull request for","closed","","philwebb","2012-10-09T01:12:58Z","2014-06-20T07:21:04Z"
"","95","Add splitIndex Javadoc option to the root project","Splits the very large index page with all classes into individual pages organized by first letter.  Issue: SPR-4984","closed","","rstoyanchev","2012-06-14T16:20:24Z","2012-06-15T08:57:29Z"
"","183","Make GRADLE-1116 workaround more generic","Some errors have been introduced that occur when importing a project that has not yet been built that are due to GRADLE-1116. To see the issues you can run import a fresh clone or perform the following before importing.  ```   git clean -dfx ```  Previously the workaround for GRADLE-1116 only worked for the merge-dist.gradle projects  Now the workaround is more generic and fixes errors that have since been introduced when performing a fresh import into Eclipse.","closed","","rwinch","2012-11-21T00:03:33Z","2014-06-18T12:08:13Z"
"","87","DatabasePopulatorUtils now uses synchronized connection","So far, `DatabasePopulatorUtils` looked up a `Connection` from the `DataSource` directly which resulted in the executed statements not being executed against a potential transactional connection which resulted in the statements executed by the populator potentially not being rolled back. We now use `DataSourceUtils.getConnection(…)` to transparently take part in synchronized transactions if active.  Issue: SPR-9457","closed","","odrotbohm","2012-06-04T13:14:01Z","2012-06-04T14:39:26Z"
"","84","Passing lookup-method args to bean constructor","should allow specifying any number of parameters. These parameters should be passed directly to the constructor of the newly created bean.  Previously  had to be parameterless. Now if you provide any parameters to that method, they are passes directly (1 to 1) to the bean constructor, just like if they were declared using . The idea was originally suggested here:  http://nurkiewicz.blogspot.com/2010/08/creating-prototype-spring-beans-on.html  This change is based entirely on a patch provided by Karl Pietrzak.  I submitted CLA.  Issue: SPR-7431","closed","status: superseded,","nurkiewicz","2012-05-25T18:12:14Z","2021-12-03T12:55:02Z"
"","129","Initial version of Jackson2ObjectMapperBeanFactory (SPR-9739)","See [SPR-9739](https://jira.springsource.org/browse/SPR-9739).","closed","","dmak","2012-08-29T19:27:37Z","2014-06-13T22:39:11Z"
"","128","Implementation of NumberHttpMessageConverter (SPR-9738)","See [SPR-9738](https://jira.springsource.org/browse/SPR-9738) for more details.","closed","","dmak","2012-08-29T19:22:58Z","2014-06-13T22:38:34Z"
"","135","Proposed fix for SPR-8097","Resubmitting pull request for SPR-8097 (#12752) with some test case fixes and squashed commits.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","twicksell","2012-09-03T13:48:52Z","2022-02-18T19:10:58Z"
"","98","Include eclipse source formatter","Restore eclipse-code-formatter.xml from Spring 3.1 (now in src/eclipse) and also update the gradle build to generate eclipse project specific settings.  Eclipse settings now includes: - Java Formatting settings - Cleanup options - Warning settings - Code template to add the Apache header  Issues: SPR-9518","closed","","philwebb","2012-06-19T23:18:32Z","2014-06-26T20:45:14Z"
"","150","Support for unknown RequestMethod values","RequestMethodsRequestCondition protectes against unknown RequestMethod values (for example PROPFIND).  Issue: SPR-9815","closed","","philwebb","2012-09-21T00:53:18Z","2012-09-21T15:10:58Z"
"","91","SPR-9491: Removed  ""Accept"" header from response for HTTP status 415.","Removed ""Accept"" header from response when the server receives a request with an unsupported media type.  Ref: https://jira.springsource.org/browse/SPR-9491","closed","","matsev","2012-06-11T20:18:28Z","2012-11-14T21:46:13Z"
"","179","Remove unsused imports in spring-aop project","Remove unsused imports in spring-aop project","closed","","EzequielB","2012-11-06T02:55:19Z","2012-11-27T01:00:28Z"
"","176","Prevent duplicate @Import processing","Refactor ConfigurationClassParser to recursively find values from all @Import annotations, combining them into a single unique set.  This change prevents ImportBeanDefinitionRegistrars from being invoked twice.  Issue: SPR-9925","closed","","philwebb","2012-10-31T05:26:02Z","2014-08-12T14:36:53Z"
"","166","Prevent memory leaks with @Configuration beans","Refactor ConfigurationClassEnhancer to allow cglib caching of generated classes.  Prior to this commit each enhanced @Configuration class would consume permgen space when created.  The CallbackFilter and Callback Types are now defined as static final members so that they can be shared by all enhancers.  Only the callbackInstances remain specific to a @Configuration class and these are not used by cglib as part of the cache key.  Issue:","closed","","philwebb","2012-10-12T03:50:39Z","2014-06-12T16:41:39Z"
"","78","SPR-9405 - Add JdbcTemplate parameter and result logging","Pull request for improvement providing JdbcTemplate prepared statement parameter and result logging as described in issue SPR-9405.","closed","","davidthexton","2012-05-14T13:34:14Z","2014-07-22T18:09:52Z"
"","154","Chain exception cause on create failure","Propogate root cause of exceptions thrown from createCollection and createMap.  Issue: SPR-9285","closed","","philwebb","2012-09-28T17:58:19Z","2014-06-18T13:41:35Z"
"","144","Use factories to create property editors","PropertyEditorRegistrySupport uses factories to create PropertyEditors as late as possible.  Issue: SPR-9788","closed","","philwebb","2012-09-11T20:36:38Z","2014-06-25T10:43:40Z"
"","160","Support loading WebApplicationContexts in the TCF","Prior to this commit, the Spring TestContext Framework only supported loading an ApplicationContext in integration tests from either XML or Java Properties files (since Spring 2.5), and Spring 3.1 introduced support for loading an ApplicationContext in integration tests from annotated classes (e.g., @Configuration classes). All of the ContextLoader implementations used to provide this support load a GenericApplicationContext. However, a GenericApplicationContext is not suitable for testing a web application since a web application relies on an implementation of WebApplicationContext (WAC).  This commit makes it possible to integration test Spring-powered web applications by adding the following functionality to the Spring TestContext Framework. - Introduced AbstractGenericWebContextLoader and two concrete   subclasses:   - XmlWebContextLoader   - AnnotationConfigWebContextLoader - Pulled up prepareContext(context, mergedConfig) from   AbstractGenericContextLoader into AbstractContextLoader to allow it   to be shared across web and non-web context loaders. - Introduced AnnotationConfigContextLoaderUtils and refactored   AnnotationConfigContextLoader accordingly. These utils are also used   by AnnotationConfigWebContextLoader. - Introduced a new @WebAppConfiguration annotation to denote that the   ApplicationContext loaded for a test should be a WAC and to configure   the base resource path for the root directory of a web application. - Introduced WebMergedContextConfiguration which extends   MergedContextConfiguration with support for a baseResourcePath for   the root directory of a web application. - ContextLoaderUtils.buildMergedContextConfiguration() now builds a   WebMergedContextConfiguration instead of a standard   MergedContextConfiguration if @WebAppConfiguration is present on the   test class. - Introduced a configureWebResources() method in   AbstractGenericWebContextLoader that is responsible for creating a   MockServletContext with a proper ResourceLoader for the   resourceBasePath configured in the WebMergedContextConfiguration. The   resulting mock ServletContext is set in the WAC, and the WAC is   stored as the Root WAC in the ServletContext. - Introduced a WebTestExecutionListener that sets up default thread   local state via RequestContextHolder before each test method by using   the MockServletContext already present in the WAC and by creating a   MockHttpServletRequest, MockHttpServletResponse, and   ServletWebRequest that is set in the RequestContextHolder. WTEL also   ensures that the MockHttpServletResponse and ServletWebRequest can be   injected into the test instance (e.g., via @Autowired) and cleans up   thread locals after each test method. - WebTestExecutionListener is configured as a default   TestExecutionListener before DependencyInjectionTestExecutionListener - Extracted AbstractDelegatingSmartContextLoader from   DelegatingSmartContextLoader and introduced a new   WebDelegatingSmartContextLoader. - ContextLoaderUtils now selects the default delegating ContextLoader   class name based on the presence of @WebAppConfiguration on the test   class. - Tests in the spring-test-mvc module no longer use a custom   ContextLoader to load a WebApplicationContext. Instead, they now   rely on new core functionality provided in this commit.  Issue: SPR-5243","closed","","sbrannen","2012-10-07T22:25:56Z","2014-06-15T20:39:57Z"
"","147","JibxMarshaller deletes comments","Prior to this commit, JibxMarshaller used a SAX ContentHandler to marshal to StAX XMLEventWriters. After this commit, it uses a XMLStreamWriter adapter.  Issue: SPR-9768","closed","","poutsma","2012-09-14T07:53:37Z","2014-07-04T01:39:49Z"
"","113","Case insensitive null literals supported.","Prior to this change null literals had to be specified as ""null"", with this change the check is now case insensitive.  Issue: SPR-9613","closed","","aclement","2012-08-03T17:44:06Z","2012-08-06T13:55:48Z"
"","185","Support Gradle/maven with multi version artifacts","Previously the publish-maven.gradle only supported having a single artifact be marked as optional or provided. This causes problems now that we are building modules that support multiple versions of an artifact. For example, we have multiple versions of tiles-jsp that both need marked as optional.  This updates publish-maven.gradle to find all the artifacts and mark them as optional as apposed to the first entry.","closed","","rwinch","2012-11-21T17:02:37Z","2014-06-27T17:35:24Z"
"","189","Remove reflection usage in orm.hibernate4.*","Previously reflection was required when interacting with Hibernate 4 in order to support both Hibernate 3 and Hibernate 4 since there were non-passive changes in the APIs. Now that the Spring build uses Gradle it is trivial to support multiple Hibernate versions.  This commit removes the reflection usage in orm.hibernate4.\* by creating a spring-orm-hibernate4 module that uses gradle/merge-artifacts.gradle to build a single artifact but keep distinct classpaths.  Issue: SPR-10039","closed","","rwinch","2012-11-26T17:45:51Z","2012-11-27T15:32:19Z"
"","104","Include **/*.aj files in *-sources.jar files","Previously only *_/_.java sources files were included in the sources jars. This is not ideal for the spring-aspects jar nor does it match prior versions of the sources jars.  Now *_/_.aj files are included in addition to the *_/_.java files.  Issue: SPR-9576  Note: I have verified this by building the source jars without the change and then diffing with the change. The difference is that the *.aj files appears in the *-sources.jar files.","closed","","rwinch","2012-07-10T00:14:24Z","2014-07-16T17:12:42Z"
"","151","Delete CopyOfRequestMappingHandlerMapping class","Previously committed in error.  Issue: SPR-9814","closed","","philwebb","2012-09-21T00:53:47Z","2012-09-21T14:52:48Z"
"","178","Port import-into-eclipse.sh to windows import-into-eclipse.bat","Port import-into-eclipse.sh to windows import-into-eclipse.bat to better support windows platform. I just used the original unix/linux script and changed the commands for the proper ones in windows. The read command was replaced by a pause command since no better solution seems to be availble; and the double pipe (||) for a conditional sentence (if not %ERRORLEVEL% == 0 exit /B %ERRORLEVEL%).  Hope this helps.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","EzequielB","2012-11-03T01:38:07Z","2014-06-28T02:49:01Z"
"","90","Deprecate SimpleJdbcTestUtils in favor of JdbcTestUtils","Original patch by Michel Zanini.  Issue: SPR-9235  Per the JIRA comments hopefully this will be backported to 3.1.2.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","ianbrandt","2012-06-09T18:24:45Z","2014-06-20T01:55:50Z"
"","63","Avoid monitor contention inside MethodParameter.getParameterAnnotations()","MethodParameter.getParameterAnnotations() calls Method.getParameterAnnotations() on every invocation. Latter ends up contending for a monitor inside (Sun) JDK code. Fix by caching values returned by Method.getParameterAnnotations() in a static ConcurrentMap  Issue: SPR-9298","closed","","dukehoops-zz","2012-04-03T23:04:08Z","2014-06-19T17:43:39Z"
"","158","Spring test mvc","Merge spring-test-mvc into spring-framework  This pull requests merges spring-test-mvc into spring-framework and updates the gradle build to include spring-test-mvc.  A few points: - We do a merge to demonstrate spring-test-mvc was developed on its   own prior to the merge. This results in a distinct git tree for   spring-test-mvc prior to the merge - We create spring-test-mvc as a distinct project in order to avoid   classpath issues within Eclipse (see commit logs for details).   However, the grade build merges spring-test-mvc into spring-test   jar, javadoc, source, and pom to keep the number of dependencies   down.","closed","","rwinch","2012-10-04T15:15:34Z","2014-06-12T08:54:40Z"
"","164","SPR-9874 Fix portlet annotation predicate compareTo","Make compareTo behave correctly for portlet annotation handler predicates for all requirements of the compareTo method contract. If predicates of differing types are compared the class name of the types is used to compute the value returned by compareTo. This ensures consistent ordering of predicates in a sorted collection or array.","closed","","edalquist","2012-10-11T20:05:41Z","2014-04-18T12:24:04Z"
"","76","Add Jackson 2 HttpMessageConverter and View","Jackson 2 uses completely new package names and new maven artifact ids. This change adds Jackson 2 as an optional dependency and also provides MappingJackson2HttpMessageConverter and MappingJackson2JsonView for use with the new version.  The MVC namespace and the MVC Java config detect and use MappingJackson2HttpMessageConverter if Jackson 2 is present. Otherwise if Jackson 1.x is present, then MappingJacksonHttpMessageConverter is used.  Issue: SPR-9302","closed","","rstoyanchev","2012-05-09T17:22:13Z","2014-06-12T21:51:28Z"
"","138","SPR-9275 Cache Abstraction Exception Handling","Introduced FailSafeCache.  FailSafeCache is intended to wrap existing cache implementations and gracefully handle any Exceptions thrown by the native cache.  The AbstractCacheManager is responsible for wrapping the native cache(s) IF the gracefullyHandleExceptions property is _true_.  Otherwise, the behavior of the AbstractCacheManager remains unchanged.  Issue: SPR-9275  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","billkoch","2012-09-07T19:00:16Z","2016-07-01T09:26:14Z"
"","186","Introduced TypeInformation abstraction to enable generic autowiring.","Introduced closed TypeInformation API from Spring Data Commons to enable carrying type  information including generics through code and resolving injection points based on generic  type references. Introduced method overloads in BeanFactory implementations using  TypeInformation instead of Class to make sure we keep generics information of the injection  point around.  Upgraded to Hamcrest 1.3 and introduced Mockito dependency in 1.8.5.  Issue: SPR-9965","closed","","odrotbohm","2012-11-22T17:41:41Z","2014-06-13T15:54:52Z"
"","167","Provide alternative message code resolver styles","Introduce new 'style' property to DefaultMessageCodesResolver allowing for alternative message styles.  Current styles are PREFIX_ERROR_CODE and POSTFIX_ERROR_CODE.  The default style retains existing behavior.  Issue: SPR-9707","closed","","philwebb","2012-10-15T16:14:09Z","2014-06-14T10:29:22Z"
"","109","Fix for SPR-9630","Injection of Provider fails for prototype-scoped beans, because the Dependency Descriptor is cached and increaseNestingLevel causes a side effect, where subsequent injections fail. As a workaround a new DependencyDescriptor is created for the DependencyObjectFactory.  Issue: SPR-9630","closed","","mattk","2012-07-25T09:38:57Z","2012-08-02T16:36:22Z"
"","173","refactor ContextLoaderUtils class","In ContextLoaderUtils class, these two methods contain similar loop logic - resolveContextLoaderClass(Class, String) - resolveContextConfigurationAttributes(Class)  Created a private method that returns a list of ContextConfigurationAttribute, and changed above two methods to use the new one to clean up the duplicated logic.  **Further cleanup suggestion:**  ""resolveContextConfigurationAttributes(Class clazz)"" method returns ""List< ContextConfigurationAttributes>"", and the returned list has parent-class-first order. On the other hand, the caller of the method, ""buildMergedContextConfiguration(...)"", uses the list in reverse order: child class first. So, it would be easier to read if  ""resolveContextConfigurationAttributes"" method returns the list as child-first order. This method has unit tests in ContextLoaderUtilsTests, so they need to be updated as well.  ---  Issue: SPR-9918  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","ttddyy","2012-10-25T04:46:38Z","2014-06-18T13:45:41Z"
"","107","Implementation for https://jira.springsource.org/browse/SPR-9585","Implemented wildcard support for profile selection.","closed","status: bulk-closed,","samion","2012-07-12T11:00:30Z","2019-05-23T12:57:06Z"
"","180","Implement java.io.Closeable","Implement `java.io.Closeable` to allow: - automatic invocation of the `close()` method when used within   try-with-resources blocks - usage with Apache Commons' `IOUtils.closeQuietly()` and   Google Guava's `Closeables.closeQuietly()`  Issue: SPR-9962  This was created as a minor improvement that is generally applicable to anyone using the utilities described above or developing in Java 7 using try-with-resources. There is no behavioural change, nor any source or binary incompatibility - only the addition of the `java.io.Closeable` interface to existing interfaces that already define a `close()` method with the same semantics as those described by `Closeable`.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","stuartgunter","2012-11-08T11:21:06Z","2014-07-29T11:46:34Z"
"","137","Support inferred base package for @ComponentScan","If the @ComponentScan annotation does not defined basePackage, basePackageClasses or value scanning will occur from the configuration class.  Issue: SPR-9586","closed","","philwebb","2012-09-07T03:08:13Z","2014-08-17T19:52:46Z"
"","114","Supporting Float natively rather than converting it to Double for arithmetic operations","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","satyapalreddy","2012-08-06T19:12:52Z","2014-07-15T20:58:06Z"
"","110","Avoid side effect for cached Dependency Descriptor","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","mattk","2012-07-25T10:37:03Z","2014-06-17T15:23:16Z"
"","77","Fix typos in Reference Documentation","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","pukkaone","2012-05-12T05:02:49Z","2012-05-12T06:50:49Z"
"","106","[SPR-9375] - Supporting reading annotations from the class of the object.","Hope this time is better.  Thanks for your support!","closed","","nachogiljaldo","2012-07-11T21:40:37Z","2017-06-20T08:17:20Z"
"","54","Added BigDecimal capabilities to SpEl numeric operators","Hi.  Some time ago, we found that the BigDecimals was not considered in the supported operations by  Expression Language. I also opened an issue: https://jira.springsource.org/browse/SPR-8716  If you are interested, we'd like to share our enhancement.  The updated operators are: - gt - ge - lt - le - eq - ne - plus - minus - divide - multiply - power - modulus","closed","","giovannidalloglio","2012-03-07T15:09:14Z","2014-07-04T20:57:09Z"
"","105","[SPR-9375] - Resolution","Hi,  this one of my first pull requests (and my first one to Spring). Please do not hesitate if something could have been better (I don't know as well as you do how the development of the project is carried).  Basically this commit contains a fix for SPR-9375 by allowing the annotations from the exact class of the object to be analyzed.  Kind regards, José Ignacio Gil Jaldo","closed","","nachogiljaldo","2012-07-11T19:43:40Z","2012-07-11T21:38:16Z"
"","96","SPR-5387 - If waitForTasksToCompleteOnShutdown is true then wait a confi...","Hi,  I've written a patch and some test cases for SPR-5387. Please let me know if there are any issues.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  t.","closed","","tmeighen","2012-06-14T20:36:27Z","2014-06-13T23:40:15Z"
"","66","Quick fix for SPR-9176","Hi,  I had a memory leak problem on production using @Resource on HttpServletRequest as described here : https://jira.springsource.org/browse/SPR-9176  After some research, I found that @Autowired and @Resource don't behave the same. It seems to me that @Autowired does one more thing, that is to say caching of the dependency declaration. I came up with this small _quickfix_ patch which simply adds similar caching to @Resource. The leak is gone, and no test is broken.  I mean't to commit this in the 3.1.x branch but the diff looks identical in the master branch. I leave the backport for older versions to you.","closed","","Dridi","2012-04-16T17:34:29Z","2014-07-04T09:24:35Z"
"","127","SPR-9692: Change to match converter to interface before Enum","GenericConversionService changed to not match converter to Enum.class before trying to match converter to an interface.  Prior to this commit a converter would be matched to the superclass of an enum (which will always be Enum.class) ignoring converters matching the interface.  Enum.class will now be ignored when retrieving superclasses and only after trying to match converters to interfaces will it try to match converters to Enum (just before trying to match to Object).  This is the behaviour encountered prior to 3.1.0.  Issue: SPR-9692  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","wkleu","2012-08-29T16:13:44Z","2014-06-18T14:48:06Z"
"","126","SPR-9692: Change to match converter to interface before Enum in GenericConversionService","GenericConversionService changed to not match converter to Enum.class before trying to match converter to an interface.  Prior to this commit a converter would be matched to the superclass of an enum (which will always be Enum.class) ignoring converters matching the interface.  Enum.class will now be ignored when retrieving superclasses and only after trying to match converters to interfaces will it try to match converters to Enum (just before trying to match to Object).  This is the behaviour encountered prior to 3.1.0.  Issue: SPR-9692  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","wkleu","2012-08-29T08:56:09Z","2012-08-29T16:38:11Z"
"","69","Initial cut of Servlet 3.0 based async support","From a programming model perspective, @RequestMapping methods now support two new return value types: - java.util.concurrent.Callable - used by Spring MVC to obtain the   return value asynchronously in a separate thread managed transparently   by Spring MVC on behalf of the application. - org.springframework.web.context.request.async.DeferredResult - used   by the application to produce the return value asynchronously in a   separate thread of its own choosing.  The high-level idea is that whatever value a controller normally returns, it can now provide it asynchronously, through a Callable or through a DeferredResult, with all remaining processing -- @ResponseBody, view resolution, etc, working just the same but completed outside the main request thread.  From an SPI perspective, there are several new types: - AsyncExecutionChain - the central class for managing async request   processing through a sequence of Callable instances each representing   work required to complete request processing asynchronously. - AsyncWebRequest - provides methods for starting, completing, and   configuring async request processing. - StandardServletAsyncWebRequest - Servlet 3 based implementation. - AsyncExecutionChainRunnable - the Runnable used for async request   execution.  All spring-web and spring-webmvc Filter implementations have been updated to participate in async request execution. The open-session-in-view Filter and interceptors implementations in spring-orm will be updated in a separate pull request.  Issue: SPR-8517","closed","","rstoyanchev","2012-04-18T21:07:32Z","2014-06-12T08:05:54Z"
"","89","Initial implementation of EasyMockBeanFactory (SPR-9130)","For more details see [SPR-9130](https://jira.springsource.org/browse/SPR-9130).  Sample usage (from JavaDoc):  ``` xml      ```","closed","","dmak","2012-06-05T18:03:36Z","2014-08-11T08:24:27Z"
"","88","Initial implementation of JacksonObjectMapperBeanFactory (SPR-9125)","For more details see [SPR-9125](https://jira.springsource.org/browse/SPR-9125).  Sample usage (from JavaDoc):  ``` xml                                                                            ```","closed","","dmak","2012-06-05T17:59:14Z","2014-06-14T13:37:04Z"
"","111","Introduce MockEnvironment in the spring-test module","For legacy reasons, a MockEnvironment implementation already exists in multiple places within Spring's test suite; however, it is not available to the general public.  This commit promotes MockEnvironment to a first-class citizen in the spring-test module, alongside the existing MockPropertySource.  In addition, the following house cleaning has been performed. - deleted MockPropertySource from the spring-expression module - deleted MockEnvironment from the ""spring"" integration testing module - updated test copies of MockPropertySource and MockEnvironment - documented MockEnvironment and MockPropertySource in the testing   chapter of the reference manual  Issue: SPR-9492","closed","","sbrannen","2012-07-28T18:22:16Z","2014-06-12T10:49:01Z"
"","102","SPR-9541: Provide PersistenceExceptionTranslator for EclipseLink exceptions","For Hibernate there is an implementation of the interface PersistenceExceptionTranslator to translate Hibernate exceptions to Spring DataAccess exceptions. This would also be good for EclipseLink.  Issue: SPR-9541","closed","","remast","2012-06-25T11:09:19Z","2014-06-14T22:56:26Z"
"","174","Add a setter for wsdl document as Resource.","For a project we included the wsdl and xsd files inside the META-INF/wsdl directory to be able to set this  we needed a classpath / jar URL to be set. Using the Resource abstraction from Spring makes this very easy.  Issue: SPR-9909  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","mdeinum","2012-10-25T12:44:17Z","2012-10-25T13:06:17Z"
"","60","Added note that TypeConverters are not thread-safe.","Fixes SPR-8659.","closed","","shred","2012-03-22T13:26:06Z","2014-06-18T14:46:48Z"
"","71","3.1.x","Fixed test failures caused by conflicting versions of slf4j.  Testsuite: org.springframework.orm.hibernate3.HibernateJtaTransactionTests     [junit] Tests run: 36, Failures: 0, Errors: 8, Time elapsed: 0.147 sec     [junit]     [junit] ------------- Standard Error -----------------     [junit] SLF4J: slf4j-api 1.6.x (or later) is incompatible with this binding.     [junit] SLF4J: Your binding is version 1.5.5 or earlier.     [junit] SLF4J: Upgrade your binding to version 1.6.x. or 2.0.x     [junit] ------------- ---------------- ---------------     [junit] Testcase: testJtaTransactionCommitWithPreBound(org.springframework.orm.hibernate3.HibernateJtaTransactionTests):    Caused an ERROR     [junit] org.slf4j.impl.StaticLoggerBinder.getSingleton()Lorg/slf4j/impl/StaticLoggerBinder;     [junit] java.lang.NoSuchMethodError: org.slf4j.impl.StaticLoggerBinder.getSingleton()Lorg/slf4j/impl/StaticLoggerBinder;     [junit]     at org.slf4j.LoggerFactory.bind(LoggerFactory.java:121)     [junit]     at org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:111)     [junit]     at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:268)     [junit]     at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:241)     [junit]     at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:254)     [junit]     at org.hibernate.engine.QueryParameters.(QueryParameters.java:53)     [junit]     at java.lang.Class.forName0(Native Method)     [junit]     at java.lang.Class.forName(Class.java:169)     [junit]     at $Proxy12.(Unknown Source)     [junit]     at java.lang.reflect.Constructor.newInstance(Constructor.java:513)     [junit]     at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:588)     [junit]     at org.easymock.internal.JavaProxyFactory.createProxy(JavaProxyFactory.java:24)     [junit]     at org.easymock.internal.MocksControl.createMock(MocksControl.java:51)     [junit]     at org.easymock.MockControl.(MockControl.java:44)     [junit]     at org.easymock.MockControl.createControl(MockControl.java:59)     [junit]     at org.springframework.orm.hibernate3.HibernateJtaTransactionTests.doTestJtaTransactionCommitWithPreBound(HibernateJtaTransactionTests.java:547)     [junit]     at org.springframework.orm.hibernate3.HibernateJtaTransactionTests.testJtaTransactionCommitWithPreBound(HibernateJtaTransactionTests.java:484)","closed","","sgri","2012-04-28T12:43:10Z","2012-05-01T10:50:18Z"
"","175","SPR-9912","Fix for SPR-9912 - ResourceDatabasePopulator.readScript() - the reader is not closed after reading a script  https://jira.springsource.org/browse/SPR-9912  I was looking for something straightforward to jump in with.   I wasn't sure how to create a unit test to verify the behavior.   I was able to hook up to yourkit and see that the original code left 2 files open, but the updated code only leaves 2.   If anyone has a good way to unit/integration test it. I'll be happy to dig in on it.   Thanks,  Eric","closed","","ericweinberg","2012-10-26T19:16:18Z","2012-11-05T23:47:49Z"
"","163","Allow SpEL reserved words in type package names","Expand the kinds of tokens considered when parsing qualified type names.  This allows previously reserved words (for example 'mod') to be used as part of a package name.  Issue: SPR-9862","closed","","philwebb","2012-10-10T04:29:30Z","2014-07-09T03:46:57Z"
"","57","Fix constant name lookup for null name prefix","Even though javadoc fo Constants.toCode specifies that null value for namePrefix parameter is allowed, before this change pasing null would throw NullPointerException.  This change fixes constant name lookup for null name prefix as if empty name prefix was used so that all names match, and lookup is performed only by constant value. This way of handling null value for name prefix is consistent with the rest of Constants class API.  Issue: SPR-8278  I have signed and agree to the terms in the SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-03-13T19:23:12Z","2012-05-17T10:07:39Z"
"","101","Improve performance of streaming rest requests","Ensure that the NonClosingOutputStream calls the underlying write method directly when working with byte arrays.  This significantly improves performance.  Issues: SPR-9530","closed","","philwebb","2012-06-22T00:39:33Z","2014-06-13T22:38:11Z"
"","157","Support DateTimeFormat annotation without Joda","Dependency on Joda Time when using the @DateTimeFormat annotation is now optional.  If Joda Time is not present the JDK SimpleDateFormat will be used to parse and print date patterns.  If Joda time is present it will always be used in preference to SimpleDateFormat.  Issue: SPR-6508","closed","","philwebb","2012-09-30T17:14:02Z","2014-06-13T03:14:12Z"
"","75","ability to set handler interceptors by url-path","Currently, outside of javaconfig or mvc namespace, mapping handler-interceptor to url-path is limited to the direction: handler-interceptor => url-paths.  Based on the comment on [SPR-9361](https://jira.springsource.org/browse/SPR-9361), I moved my [previous pull request logic](https://github.com/SpringSource/spring-framework/pull/72) to AbstractHandlerMapping to allow url-path => handler-interceptors via setter.  Issue: SPR-9361 CLA: submitted","closed","","ttddyy","2012-05-06T02:57:30Z","2014-06-26T07:38:24Z"
"","97","Infer return type of parametrized factory methods","Currently, if a factory method is parameterized and the corresponding variable types are declared on the method itself instead of on the enclosing class or interface, Spring always predicts the return type to be Object, even if the return type can be explicitly inferred from the method signature and supplied arguments (which are available in the bean definition).  This commit introduces a new resolveParameterizedReturnType() method in GenericTypeResolver that attempts to infer the concrete type for the generic return type of a given parameterized method, falling back to the standard return type if necessary. Furthermore, AbstractAutowireCapableBeanFactory now delegates to resolveParameterizedReturnType() when predicting the return type for factory methods.  resolveParameterizedReturnType() is capable of inferring the concrete type for return type T for method signatures similar to the following. Such methods may potentially be static. Also, the formal argument list for such methods is not limited to a single argument. - public  T foo(Class clazz) - public  T foo(Object obj, Class clazz) - public  T foo(V obj, Class clazz) - public  T foo(T obj)  Issue: SPR-9493","closed","","sbrannen","2012-06-19T14:01:19Z","2014-06-24T02:36:42Z"
"","145","Minor fix for javadoc of EnableAsync","Currently if the code is simply copied from the javadoc example of EnableAsync the resulting ThreadPoolTaskExecutor is not managed bean. That may lead to confusion why isn't it destroyed when closing ApplicationContext.","closed","","isopov","2012-09-13T15:19:02Z","2014-07-19T18:21:53Z"
"","170","SPR-9898 Fixed mvc-config-enable closing  tag.","Corrected the closing  tag in the mvc-config-enable sections MVC XML namespace example.","closed","","karlbennett","2012-10-20T23:08:59Z","2012-10-23T08:33:45Z"
"","177","fix-typo on gradlew.bat","Correct typo error on gradlew.bat, since VM default memory unit is bytes, and VM would report too small initial heap size.  Hope this helps.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","EzequielB","2012-11-02T17:22:21Z","2012-11-02T18:44:11Z"
"","80","SPR-9164 - Added BigDecimal capabilities to SpEl numeric operators","Clean version of old pull request #54  This should cover part of [SPR-9164](https://jira.springsource.org/browse/SPR-9164)  [added BigDecimal support to SpEl numerics calculations.]  PS: I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","giovannidalloglio","2012-05-15T16:27:09Z","2014-06-25T06:07:03Z"
"","132","Numerous updates to conversion service","Changes are primarily to support conversion of enums with interfaces and to allow performance optimization when converting byte arrays.  See individual commits for details  Issues: SPR-9566, SPR-9692, SPR-9927, SPR-9928","closed","","philwebb","2012-08-30T22:57:48Z","2014-06-18T05:11:02Z"
"","165","SPR-9876 Use forward for resource view rendering","Change the default behavior of DispatcherPortlet when handling resource requests to use PortletRequestDispatcher.forward instead of .include. This behavior can be revereted by setting the renderResourceViewViaInclude property on DisptacherPortlet to true","closed","","edalquist","2012-10-11T20:35:56Z","2014-06-18T12:25:08Z"
"","187","Fix MBeanServerFactoryBean tests failing on JDK 7","Before this fix, an MBeanServerFactoryBean unit test would fail when build is run on JDK 7. Root cause was found to be that another MBeanServerFactoryBean unit test did not properly cleanup state after it's execution.  This fix resolves the issue by cleaning up state of problematic unit test.  Issue: SPR-10030","closed","","sslavic","2012-11-25T22:10:10Z","2012-11-26T23:49:29Z"
"","49","Fix SpEL JavaBean compliance","Before this fix ReflectivePropertyAccessor was not able to find write method for valid property name that has first character in lower case and second character in upper case. Write method lookup would always convert first character of property name to upper case which is not compliant with JavaBean specification. As consequence this caused an unwanted behavior in SpEL when obtaining values of expressions that reference such JavaBean properties.  As of this change, write method lookup skips conversion of property name first character to upper case when property name is longer than one character and second character is in upper case. This also fixes mentioned bug in SpEL value resolution.  Issue: SPR-9123  I have signed and agree to the terms in the SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-03-03T10:17:19Z","2014-06-20T20:48:19Z"
"","48","Fix MultipartResolver javadoc implementation refs","Before this fix MultipartResolver javadoc mentioned that there is only one concrete implementation included in Spring. This was true as of Spring 2.5 but Spring 3.1 added another one, Servlet 3.0 Part API based implementation.  This fix changes MultipartResolver javadoc so that the other one, StandardServletMultipartResolver implementation, gets also listed. Changed javadoc mentions also as of which version does Spring bundle two MultipartResolver implementations.  Issue: SPR-5984  I have signed and agree to the terms of SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-03-02T18:03:36Z","2012-03-03T12:40:34Z"
"","47","Fix MultipartResolver javadoc implementation refs","Before this fix MultipartResolver javadoc mentioned that there is only one concrete implementation included in Spring. This was true as of Spring 2.5 but Spring 3.1 added another one, Servlet 3.0 Part API based implementation.  This fix changes MultipartResolver javadoc so that the other one, StandardServletMultipartResolver implementation, gets also listed. Changed javadoc mentions also as of which version does Spring bundle two MultipartResolver implementations.  Issue: SPR-5984  I have signed and agree to the terms of SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-03-01T23:47:25Z","2012-03-02T18:14:41Z"
"","148","Support opaque URIs in UriComponentsBuilder","Before this commit, UriComponentsBuilder did not handle opaque URIs at all. After this commit it does.  Support is introduced by making UriComponents an abstract base class, and having two concrete subclasses: HierarchicalUriComponents and OpaqueUriComponents. The former is more or less the same as the old UriComponents class.  Issue: SPR-9798","closed","","poutsma","2012-09-14T12:46:56Z","2014-07-29T22:51:31Z"
"","120","Introduce strategy for BeanInfo creation","Before this commit, the CachedIntrospectionResults was hard-coded to create ExtendedBeanInfos for bean classes. The ExtendedBeanInfo support the JavaBeans property contract only.  This commit introduces the BeanInfoFactory, a strategy for creating BeanInfos. Through this strategy, it is possible to support beans that do not necessarily implement the JavaBeans contract (i.e. have a different getter or setter style).  BeanInfoFactories are are instantiated by the CachedIntrospectionResults, which looks for 'META-INF/spring.beanInfoFactories' files on the class path. These files contain one or more BeanInfoFactory class names. When a BeanInfo is to be created, the CachedIntrospectionResults will iterate through the factories, asking it to create a BeanInfo for the given bean class. If none of the factories support it, an ExtendedBeanInfo is created as a default.  This commit also contains a change to Property, allowing BeanWrapperImpl to specify the property name at construction time (as opposed to using Property#resolveName(), which supports the JavaBeans contract only).  Issue: SPR-9677","closed","","poutsma","2012-08-20T11:06:22Z","2012-08-24T10:04:49Z"
"","67","Fix transitive dependency issue with slf4j-api","Before this change, IDE settings generated via import-into-eclipse.sh created a classpath dependency on slf4j-api version 1.6.1 and slf4j-log4j12 version 1.5.10. As a result running tests inside the IDE resulted in a NoSuchMethodException.  build.gradle sets the variable slf4jLog4jVersion to '1.5.10'. However, the hibernate-validator dependency in spring-context pulls in slf4j-api version 1.6.1. The change ensures the version specified in the build script variable is used consistently. Whether it should be 1.5.10 or 1.6.1 is a separate concern.","closed","","rstoyanchev","2012-04-16T19:43:14Z","2012-04-17T07:26:50Z"
"","61","Fix for slf4j dependency issue","Before this change, IDE settings generated via import-into-eclipse.sh created a classpath dependency on slf4j-api version 1.6.1 and slf4j-log4j12 version 1.5.10. As a result running tests inside the IDE resulted in a NoSuchMethodException.  build.gradle sets the variable slf4jLog4jVersion to '1.5.10'. However, the hibernate-validator dependency in spring-context pulls in slf4j-api version 1.6.1. The change ensures the version specified in the build script variable is used consistently. Whether it should be 1.5.10 or 1.6.1 is a separate concern.","closed","","rstoyanchev","2012-03-30T16:57:40Z","2014-06-30T05:05:01Z"
"","59","Fix JibxMarshallerTests failing on Windows","Before this change JibxMarshallerTests would fail on Windows with error message explaining that JiBX compiler generated classes are not found on classpath for binding with name 'binding'. Tests would execute well on Linux.  Actual root cause of this bug is found to be in JiBX 1.1.5 release that is used to build Spring. Binding name can be explicitly specified in JiBX binding file. If omitted, when generating classes JiBX compiler as fall-back mechanism tries to derive binding name from binding file name. That logic had bug which gets manifested when configured binding file path has mixed Windows and Linux style file separators, as in case when mentioned JibxMarshallerTests are executed on Windows platform.  This pull request contains two commits for two different solutions for this issue. See respective commit comments for more details.  Issue: SPR-8360  I have signed and agree to the terms in the SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-03-20T18:26:18Z","2014-07-30T08:37:12Z"
"","58","Have JiBX unmarshal using configured encoding","Before this change JibxMarshaller did not use configured encoding when unmarshalling XML. This caused issues when content being unmarshalled was not encoded using default encoding.  This change fixes the issue by passing configured encoding to JiBX so it gets used when unmarshalling instead of the default encoding.  Issue: SPR-7865  I have signed and agree to the terms of SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-03-14T23:59:27Z","2014-06-15T14:17:02Z"
"","50","Generate bracketless tag id in FreeMarker forms","Before this change if FreeMarker Spring form macro was bound to a path which contains square brackets, those brackets would also appear in id of generated tag, making the id invalid.  As of this fix all FreeMarker Spring form macros generate tag with id that does not contain square brackets.  Issue: SPR-8732  I have signed and agree to the terms of SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-03-04T21:29:14Z","2012-03-05T14:59:59Z"
"","64","NPE in AutowiredAnnotationBeanPostProcessor","AutowiredAnnotationBeanPostProcessor.determineRequiredStatus never checks the return value of ReflectionUtils.findMethod. This method returns null for @Inject @Value @Resource in which case a NullPointerException is thrown in ReflectionUtils.invokeMethod and caught in AutowiredAnnotationBeanPostProcessor.determineRequiredStatus. - check return value of ReflectionUtils.findMethod - default to required if no required method is found - existing test cases cover both cases  Issue: SPR-9316","closed","","marschall","2012-04-09T11:03:32Z","2014-07-26T03:17:37Z"
"","81","Fix annotation search ending too early","At AnnotationUtils.findAnnotation(Method, Class), the search for method annotation fails if: - the original method does not have the annotation - an abstract superclass does not have an equivalent method declared - an interface implemented by the superclass has the method and   the annotation - it is not found  This happened because of the try-catch block being too wide. Therefore, cl.getDeclaredMethod() can throw NoSuchMethodException and skip the searchOnInterfaces() call prematurely.  The try-catch block was made narrower to allow searchOnInterfaces() to run even if the abstract class does not have the method declared at all.  Issue: SPR-9342  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","JanecekPetr","2012-05-16T20:28:46Z","2014-06-24T17:36:33Z"
"","142","Add JUnit Assumptions to core test sources","As per discussion in this weeks stand up I have added a utility class that allows assuming JDK version in order for the test to run. Also see the [junit-assumptions-demo branch](https://github.com/rwinch/spring-framework/tree/junit-assumptions-demo) to see this in action (since there are no use cases in the actual build now).  Previously it was cumbersome for tests to assert if the current JDK was at least JDK 1.7.  There is now a utility class for JUnit assumptions that provides a method that allows tests to assume the current JDK is at least JDK 1.7. If the assumption is not met, a AssumptionViolatedException is thrown to indicate the test should be skipped.","closed","status: declined,","rwinch","2012-09-10T19:57:51Z","2019-03-23T17:20:24Z"
"","159","merge-dist.gradle disables artifactoryPublish","An attempt to fix the build which was resulting in the following:  ``` 05-Oct-2012 09:20:44    * What went wrong: 05-Oct-2012 09:20:44    A problem was found with the configuration of task ':spring-test-   mvc:artifactoryPublish'. 05-Oct-2012 09:20:44    > File '/opt/bamboo-home/xml-data/build-dir/SPR-B32X-JOB1/spring-test-mvc/build/poms/pom-default.xml' specified for property 'mavenDescriptor' does not exist. ```  Previously the project that was getting merged from would try to execute the artifactoryPublish on the build box. This caused issues since the mavenDescriptor did not exist.  The merge-dist.gradle now disables the artifactoryPublish task if it exists (it will only exist on the build box).  Issue: SPR-9859, SPR-7951","closed","","rwinch","2012-10-05T16:45:03Z","2012-10-05T17:53:01Z"
"","146","Develop ConcurrentReferenceHashMap","Also addresses issues SPR-9796, SPR-8701 and SPR-9166.","closed","","philwebb","2012-09-14T00:47:03Z","2012-11-03T22:47:23Z"
"","155","Maps no longer created unless copy is required","Allow MapToMap conversion to work when the target map does not have a default constructor (as long as a new map copy is not required).  Issue: SPR-9284","closed","","philwebb","2012-09-28T21:12:47Z","2012-10-12T20:11:32Z"
"","149","Add support for dispatching all requests","All HTTP requests can now be dispatched regardless of their HTTP method.  The dispatchAllRequests property defaults to ""false"" in order to retain existing behavior.  The protected final doPatch() method (introduced in 3.2 M2) has been removed in favor of generic processing for all enums defined in org.springframework.http.HttpMethod.  Issue: SPR-4799, SPR-7985","closed","","philwebb","2012-09-17T17:44:09Z","2012-09-21T21:13:57Z"
"","93","Fix HTTP MediaType header parsing with single-quoted parameters","Addition to previous fix for double-quoted parameters  Issue: SPR-8917","closed","","maxcom","2012-06-14T04:28:58Z","2014-06-26T20:45:14Z"
"","82","Add URL and method name in ResourceAccessException","Added URL and method name in I/O error message of RestTemplate to log more details for debugging an issue.   Issue: SPR-9325","closed","","rcrathore","2012-05-19T23:31:45Z","2014-07-18T21:08:30Z"
"","181","ImportBeanDefinitionRegistars can now implement Aware interfaces.","Added support to implement BeanFactoryAware, BeanClassLoaderAware and ResourceLoaderAware in implementations of ImportBeanDefinitionRegistrar.  Issue: SPR-9568","closed","","odrotbohm","2012-11-12T14:36:30Z","2014-07-10T05:19:44Z"
"","79","SPR-9346 - Fixed section ids in reference documentation.","Added missing ids to sections in the reference documentation to allow stable links in HTML output.","closed","","odrotbohm","2012-05-15T09:50:05Z","2014-06-17T11:04:52Z"
"","103","SPR-9287 Add properties to control exception handling","Added exposeActionException and exposeEventException properties on DispatcherPortlet to control when DispatcherPortlet should handle versus pass on any exception. This also changes the default exception handling behavior for events from having spring capture the exception in the session to rethrowing the exception back to the portlet container  https://jira.springsource.org/browse/SPR-9287","closed","","edalquist","2012-07-04T02:59:46Z","2014-06-17T03:42:35Z"
"","86","HttpClientErrorException should provide access to response headers","Added `HttpHeaders getResponseHeaders()` to HttpStatusCodeException and populating value via DefaultResponseErrorHandler.  Issue: SPR-7938","closed","","scothis","2012-05-31T17:48:48Z","2014-06-12T10:51:05Z"
"","171","Support @EnableMBeanExport with @Configuration","Add support for @EnableMBeanExport annotation allowing @Configuration classes to easily export all MBeans and @ManagedResources from the Spring application context.  The annotation is functionally equivalent to the XML context:mbean-export/ element.  Issue: SPR-8943","closed","","philwebb","2012-10-23T02:41:09Z","2014-08-04T00:59:29Z"
"","130","SPR-7905 - Support wildcard style media types in JSON converters","Add ""application/*+json"" to supported media types for both Jackson message converters. Test cases included.  Issue: SPR-7905  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","tmeighen","2012-08-29T21:20:05Z","2014-06-12T09:08:39Z"
"","72","Add a factory class for handler interceptors","A factory bean to create a list of HandlerInterceptors and MappedInterceptors, providing ability to map:   url-path => handler-interceptors  It can also specify additional handler interceptors and mapped interceptors.  Thus, result of this factory bean can directly be injected to RequestMappingHandlerMapping bean.  ```                                                                                  ``` # Background  In spring3.1 style configuration, RequestMappingHandlerMapping uses MappedInterceptor which specify one handler interceptor to multiple paths, but not the other way, a path to multiple handler interceptors.  pre-spring3.1: - url-path => handler-interceptors  spring3.1: - handler-interceptor => url-paths  I have multiple SimpleUrlHandlerMapping beans in old version app, and having ability to specify interceptors by path saves a lot of time, rather than re-maping the existing path-to-interceptors mappings to interceptor-to-paths style.  JIRA: SPR-9361 CLA: submitted","closed","","ttddyy","2012-05-02T00:00:06Z","2012-05-02T18:03:09Z"
"","168","Allow usage of injection annotations as meta-annotations.","@Autowired and @Inject can now be used as meta-annotations to create semantic annotations. Assume a library is exposing special primitive values as Spring beans under registered names like 'foo.bar'. They could be used by clients using @Value(""foo.bar""), which is reasonable but error- prone. After this change, the library can go ahead and define a special annotation as follows:  @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) @Value(""foo.bar"") public @interface MySpecialValue { }  This allows clients to use @MySpecialValue for injection and thus prevent potential typos. For @Autowired this essentially now allows for qualified auto wiring being wrappable into a  @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) @Qualifier(""myQualifier"") @Autowired public @interface MyQualifiedAutowire { }  Issue: SPR-9890","closed","","odrotbohm","2012-10-19T03:43:03Z","2012-10-31T17:32:53Z"
"","119","added Sybase ASE lock wait timeout error code 12205","...ql-error-codes.xml  added Sybase ASE lock wait timeout error code 12205","closed","","jjYBdx4IL","2012-08-10T10:57:04Z","2014-06-13T22:06:54Z"
"","123","Additional converters and static helper methods","- Refresh several of the existing Converter implementations with   static helper methods that help to cut down on the amount of code   noise from the use of generics. - Create new ConvertingComparator and InstanceComparator   implementations - Replace existing single test class with a test class per comparator  Issue: SPR-9730","closed","","philwebb","2012-08-27T20:22:44Z","2012-09-06T13:59:29Z"
"","122","Additional converters and static helper methods","- Refresh several of the existing Converter implementations with   static helper methods that help to cut down on the amount of code   noise from the use of generics. - Create new ConvertingComparator and InstanceComparator   implementations - Replace existing single test class with a test class per comparator  Issue: SPR-9730","closed","","philwebb","2012-08-27T20:13:52Z","2012-08-27T20:22:13Z"
"","139","Fix Windows related build issues","- Increase max heap size in gradle wrapper. - Use MockProperties implementation to protect against security   exceptions. - Replace windows CRLF with LF in various tests. - Increase Thread.sleep times to account for lack of precision on   Windows.  Issue: SPR-9717","closed","","philwebb","2012-09-07T19:30:49Z","2014-06-23T22:23:11Z"
"","121","Support ApplicationContextInitializers in the TCF","- Added initializers and inheritInitializers attributes to   @ContextConfiguration.   - Introduced support for ApplicationContextInitializers in     ContextConfigurationAttributes, MergedContextConfiguration, and     ContextLoaderUtils.   - Introduced resolveInitializerClasses() in ContextLoaderUtils.   - MergedContextConfiguration stores context initializer classes as a     Set and incorporates them into the implementations of hashCode() and     equals().   - ApplicationContextInitializers are invoked in the new     prepareContext(GenericApplicationContext, MergedContextConfiguration)     method in AbstractGenericContextLoader.   - Updated DelegatingSmartContextLoader to support initializers.     Specifically, a test class may optionally declare neither XML     configuration files nor annotated classes and instead declare only     application context initializers. In such cases, an attempt will     still be made to detect defaults, but their absence will not result     an an exception.   - Documented support for application context initializers in the     testing chapter of the reference manual.  Issue: SPR-9011","closed","","sbrannen","2012-08-20T13:28:18Z","2014-06-20T03:45:18Z"
"","14487","POM dependency issue: com.caucho#com.springsource.com.caucho;3.2.1 is no longer available [SPR-9854]","**[Zsolt Fabok](https://jira.spring.io/secure/ViewProfile.jspa?name=fabokzs)** opened **[SPR-9854](https://jira.spring.io/browse/SPR-9854?redirect=false)** and commented  There is a dependency on om.caucho#com.springsource.com.caucho;3.2.1 in the pom.xml of spring-web component, but that module is no longer available.   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e318e73f830834bf80294dab8c9c95595e59887","closed","type: bug,","spring-projects-issues","2012-10-04T00:53:20Z","2012-10-31T11:33:59Z"
"","14008","Support the ""profile"" attribute on the ""bean"" XML element in spring-beans.xsd [SPR-9372]","**[Yannick Lazzari](https://jira.spring.io/secure/ViewProfile.jspa?name=ylazzari)** opened **[SPR-9372](https://jira.spring.io/browse/SPR-9372?redirect=false)** and commented  It would be nice that the ""bean"" element in the spring-beans.xsd supports a ""profile"" attribute to match the behavior of the `@Profile` annotation as opposed to have to wrap your bean definitions in other ""beans"" elements inside the top ""beans"" element of a given configuration file.   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-05-03T07:58:55Z","2012-05-14T00:25:39Z"
"","13940","Use Jackson 2.0 for Jackson based json processing such as MappingJacksonJsonView  [SPR-9302]","**[Xun Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=xun.wang.us)** opened **[SPR-9302](https://jira.spring.io/browse/SPR-9302?redirect=false)** and commented  Due to recent release of Jackson 2.0, hope it is on the road map to give Spring user the option to use Jackson 2.0 for Jackson related json functions. Jackson 2.x has different package name for its classes to let code with 1.x be able to coexist. Maybe a new set of the Spring classes need to be created for the same reason for those who like to use the 2.x while others can remain on 1.x. For example MappingJacksonJsonView remains but with MappingJacksonJsonView2 for the 2.x Jackson. I believe someone has better idea how to get it done.  ---  **Affects:** 3.0.5  **Attachments:** - [MappingJacksonHttpMessageConverter.patch](https://jira.spring.io/secure/attachment/19613/MappingJacksonHttpMessageConverter.patch) (_1.65 kB_)  **Sub-tasks:** - #14141 Backport ""Use Jackson 2.0 for Jackson based json processing such as MappingJacksonJsonView""  **Issue Links:** - #13972 Support for Jackson 2.X (_**""is duplicated by""**_) - #14589 Add support for jackson 2.0 message converters MappingJacksonHttpMessageConverter refers to the older ObjectMapper package and methods (_**""is duplicated by""**_)  9 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-03T16:22:45Z","2019-01-11T12:52:15Z"
"","13897","Support URI/URL as return type for @RequestMapping [SPR-9259]","**[Xavier Dury](https://jira.spring.io/secure/ViewProfile.jspa?name=kalgon)** opened **[SPR-9259](https://jira.spring.io/browse/SPR-9259?redirect=false)** and commented  Hi,  would it be possible to support URI/URL as return type for controller methods annotated with `@RequestMapping`? Ideally, an absolute URL could automatically be treated as a redirect.  As I see controller methods already support a lot of different types, wouldn't it be possible to have a pluggable mechanism to handle different return types? There is already a WebArgumentResolver, what about some sort of WebResultProcessor?  Regards,  Xavier   --- No further details from [SPR-9259](https://jira.spring.io/browse/SPR-9259?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-03-22T05:45:44Z","2012-05-18T03:19:17Z"
"","14280","RedirectAttributes - flash attribute can stay available for 2 requests instead of 1. [SPR-9646]","**[Wim De Clercq](https://jira.spring.io/secure/ViewProfile.jspa?name=wim_dc)** opened **[SPR-9646](https://jira.spring.io/browse/SPR-9646?redirect=false)** and commented  Using ""RedirectAttributes flash"" and flash.addFlashAttribute(""flash_msg"", ""letter"");  Can sometimes cause this flashmap to somehow get a bit buggy and only make the attribute available after the 2nd redirect / request.  This bug is reproducable by doing the following: You need a double submit to a controller which will add to the flashmap. (I use fiddler2 to block 2 requests, and then send them simultaniously)  The controller will: 1st request: add something to flashmap and return ""redirect:/whatever""; 2nd request: add something to flashmap and return ""viewname"" (no redirect);  It's a bit of a thread race, but usually the 2nd is later, and your browser will not redirect from the 1st request, but instead show the page of the 2nd.  From that moment, the flashmap is lagging 1 request behind for me.  I've added a small test project which will cause the bug to happen for me: In essence, the JSP is:  ```        ```  Controller is straightforward, and it will do what I've just said to reproduce the problem (new2 method): 1st request> redirect, 2nd request show page.  ```java @Controller @RequestMapping(value = ""/messages"") public class MessageController { 	boolean beenThere = false;  	@RequestMapping(method = RequestMethod.GET) 	public ModelAndView doGet(ModelAndView mav) { 		mav.setViewName(""display-message""); 		return mav; 	}  	@RequestMapping(value=""/new"", method = RequestMethod.POST) 	public ModelAndView createNewMessage(ModelAndView mav, RedirectAttributes flash) { 		flash.addFlashAttribute(""flash_msg"", ""number""); 		mav.setViewName(""redirect:/messages""); 		return mav; 	}  	@RequestMapping(value=""/new2"", method = RequestMethod.POST) 	public ModelAndView createNewMessage2(ModelAndView mav, RedirectAttributes flash) { 		flash.addFlashAttribute(""flash_msg"", ""letter""); 		if(!beenThere){ 			mav.setViewName(""redirect:/messages""); 		} else { 			mav.setViewName(""display-message""); 		} 		beenThere = !beenThere; 		return mav; 	} } ```  So if I click button ""number"", I end up at ""new"" method, and ""number"" appears on my screen.  HOWEVER, after new2 is called twice with a double submit, I expect that if I click on the ""number"", ""number"" will be displayed on the page. But instead ""letter"" is displayed. And on the next request ""number"" is in the scope. So basically my flash scope has turned into a scope which makes attributes available for the 2nd request.  I attached the war from this project, and a zip of the project. No weird configurations are used as far as I can tell.  —  Wim De Clercq   ---  **Affects:** 3.1.1  **Attachments:** - [flashmessage.war](https://jira.spring.io/secure/attachment/20129/flashmessage.war) (_3.49 MB_) - [SpringTest.zip](https://jira.spring.io/secure/attachment/20130/SpringTest.zip) (_5.47 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/7c4ddd5a55947285c6195cd39e52f632d55ef4f3","closed","status: declined,","spring-projects-issues","2012-07-27T02:35:04Z","2019-01-12T16:36:10Z"
"","13844","Add ClasspathScanningJaxb2Marshaller for spring OXM [SPR-9206]","**[William Gorder](https://jira.spring.io/secure/ViewProfile.jspa?name=wgorder)** opened **[SPR-9206](https://jira.spring.io/browse/SPR-9206?redirect=false)** and commented  Having to define every annotated class with","closed","type: enhancement,","spring-projects-issues","2012-03-06T06:33:12Z","2019-01-11T12:44:46Z"
"","13971","@PathVariable drops extension [SPR-9333]","**[Will Glass-Husain](https://jira.spring.io/secure/ViewProfile.jspa?name=wglass)** opened **[SPR-9333](https://jira.spring.io/browse/SPR-9333?redirect=false)** and commented  There's a bug introduced in 3.0.6 (also exists in 3.0.7) with the `@PathVariable`. It's very similar to #10038 though it was actually reintroduced in #13187.  If a item is included on the path that has a period, it's impossible for the full string to be picked up by the path variable.  For example, with this URL and request mapping, userEmail is set to ""jsmith@mail"".  ``` http://mydomain.com/myapp/api/user/jsmith@mail.com ```  and this method  ``` @RequestMapping(value = {""/{userEmail}""}, method = RequestMethod.GET) public ModelAndView doGet(@PathVariable final String userEmail) { } ```  My code also had a class-wide request mapping, though I'm not sure if it's relevant.  The usual advice is to include a DefaultAnnotationHandlerMapping in the context and set the property useDefaultSuffixPattern to false.  However, in 3.0.6, code was introduced into AnnotationMethodHandlerAdapter.getMatchingPattern() which adds .* to the pattern (eliminating the so-called file extension) but which is not suppressed by useDefaultSuffixPattern.  ---  **Affects:** 3.0.6, 3.0.7  **Sub-tasks:** - #14055 Backport ""`@PathVariable` drops extension""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf5d55173bd73adf9c3a93204288013b1ceab246, https://github.com/spring-projects/spring-framework/commit/8143d66e4c13fe2b1b8fb04062145a49e4bd4fca  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2012-04-18T17:51:07Z","2019-01-13T07:05:12Z"
"","14326","Support conversion from Enum Interface [SPR-9692]","**[Wilhelm Kleu](https://jira.spring.io/secure/ViewProfile.jspa?name=wilhelm.kleu@gmail.com)** opened **[SPR-9692](https://jira.spring.io/browse/SPR-9692?redirect=false)** and commented  I noticed the following issue while upgrading my Spring version from version 3.0.6 to version 3.1.2.  `getMatchingConverterForTarget` in `GenericConversionService` will return the default converter `StringToEnumConverterFactory` even if I implement my own `ConverterFactory` and the enum implements `MyInterface`.  In `GenericConversionService.getMatchingConverterForTarget(...)` the class queue first tries to match a converter of the base class and if none is found it will try to match the super class (`Enum.class`) and will find `StringToEnumConverterFactory`. It does not try to match converters to the interfaces.  Possible solution: Don't add superclass to classQueue if an enum: `GenericConversionService:433`:  ```   if (superClass != null && superClass != Object.class && superClass != Enum.class) { ```  And then try to match a converter for `Enum.class` if no other converter is found: `GenericConversionService:447`:  ``` if (targetObjectType.isEnum()) {     GenericConverter converter = matchConverter(converters.get(Enum.class), sourceType, targetType);     if (converter != null) {         return converter;     } } return matchConverter(converters.get(Object.class), sourceType, targetType); ```  Test case attached.  ---  **Affects:** 3.1.2  **Attachments:** - [spring_generic_conversion_service_updated.zip](https://jira.spring.io/secure/attachment/20198/spring_generic_conversion_service_updated.zip) (_5.50 kB_)  **Issue Links:** - #14560 Refactor GenericConversionService (_**""depends on""**_) - #16666 String to Enum Interface conversion not working","closed","type: enhancement,","spring-projects-issues","2012-08-15T07:58:25Z","2019-01-11T13:23:41Z"
"","13862","Spring velocity projects are vulnerable to injection exploits [SPR-9224]","**[whyBish](https://jira.spring.io/secure/ViewProfile.jspa?name=whybish)** opened **[SPR-9224](https://jira.spring.io/browse/SPR-9224?redirect=false)** and commented  http://forum.springsource.org/showthread.php?124077-Spring-WebMVC-Velocity-exploit  If an application uses spring-webmvc and a velocity view resolver and have used #springbind everywhere then html will be escaped but velocity will not. Example exploit text: #if(true)Vend  I can't find any info on how to velocity escape the input. Velocity itself doesn't seem to provide a velocity escaper (it provides html/sql etc). Does one exist or must a custom one be written? The point to change would seem to be the #springbind definition in spring.vm   ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?124077-Spring-WebMVC-Velocity-exploit","closed","in: web,","spring-projects-issues","2012-03-11T16:02:30Z","2019-01-11T12:44:25Z"
"","14194","Subsequent @Valid Required in @RenderMapping When Used in @ActionMapping to Properly Bind Errors [SPR-9560]","**[whardwick](https://jira.spring.io/secure/ViewProfile.jspa?name=whardwick)** opened **[SPR-9560](https://jira.spring.io/browse/SPR-9560?redirect=false)** and commented  When `@Valid` is used with `@ModelAttribute` in an `@ActionMapping`, `@Valid` needs to be specified on the `@ModelAttribute` in the `@RenderMapping` as well, in order for the errors to be properly bound to the attribute.  Example:  `@RenderMapping` public String render(`@Valid` `@ModelAttribute`(value = ""myForm"") MyForm form) {      return ""myView"";  }  `@ActionMapping`(params = ""save"") public void save(`@Valid` `@ModelAttribute`(value = ""myForm"") MyForm form, BindingResult bindingResult) {      if (!bindingResult.hasErrors()) {         response.sendRedirect(""/home"");     }          // If we got here, there were errors and the render will occur  }   ---  **Affects:** 3.1 GA  2 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-07-03T10:29:42Z","2019-01-12T02:47:31Z"
"","14633","Spring RestTemplate does not capture response body when error code 40x is returned [SPR-9999]","**[Wei Teh](https://jira.spring.io/secure/ViewProfile.jspa?name=weiteh)** opened **[SPR-9999](https://jira.spring.io/browse/SPR-9999?redirect=false)** and commented  When invoking rest endpoints with HTTP POST protocol via spring RestTemplate, given error code 4xx is encountered, the response body is not captured and made available to the caller.  An example snippet code is as followed:  ``` try {   // invoking a rest endpoint that expects string object in returned,   // even when the target rest endpoint returns a 4xx status code.   String response = this.restTemplate.postForObject(url, form, String.class); } catch (HtttpClientErrorException hcee) {   // encountered 4xx problem from the server, but response body is not    // captured   // the following assertion failed because the response body is expected to contain string values,      Assert.assertTrue(hcee.getResponseBodyAsByteArray().length > 0); } ```  An example of response content (both header and body) is demonstrated with an invocation to the REST end point via curl: (response body contains exception name with name and message)  ``` $ curl -id ""username=blah&password=blah"" http://localhost:8088/opensso/identity/authenticate   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100   110  100    83  100    27   2677    870 --:--:-- --:--:-- --:--:--  5533HTTP/1.1 401 Unauthorized Server: Apache-Coyote/1.1 Set-Cookie: amlbcookie=01; Path=/ Content-Type: text/plain;charset=UTF-8 Content-Length: 83 Date: Fri, 16 Nov 2012 15:34:41 GMT  exception.name=com.sun.identity.idsvcs.InvalidCredentials Authentication Failed!! ```  **Note** the similar invocation using HTTP GET protocol works just fine (i.e. restTemplate.getForObject(..) ), as described in the forum thread attached in this jira ticket.   ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?126907-Bug-in-Spring-3-1-1-RestTemplate-Class-in-retrieving-response-Buffer-on-401-error  2 votes, 6 watchers","closed","in: web,","spring-projects-issues","2012-11-16T07:39:08Z","2019-04-17T10:57:16Z"
"","14148","Hibernate Session closed unexpected. [SPR-9514]","**[wangyb](https://jira.spring.io/secure/ViewProfile.jspa?name=wangyb7)** opened **[SPR-9514](https://jira.spring.io/browse/SPR-9514?redirect=false)** and commented  I use hibernate 4.1.3/4.1.4 with Spring Java Configuration. This bug happens in random.  When I do query in my controller(Spring MVC, annotated with `@Transactional`(readOnly=true)). It may throw an exception **org.hibernate.SessionException: Session is closed!** The stacktrace see the attachment.  Exception caused by line 63 of SpringSessionSynchronization: getCurrentSession().disconnect();  ``` public void suspend() {     if (this.holderActive) {         TransactionSynchronizationManager.unbindResource(this.sessionFactory);         // Eagerly disconnect the Session here, to make release mode ""on_close"" work on JBoss.         getCurrentSession().disconnect();     } } ```  I read the [manual](http://docs.jboss.org/hibernate/orm/4.1/manual/en-US/html_single/#transactions) from hibernate, get the following notes:  > Earlier versions of Hibernate required explicit disconnection and reconnection of a Session. These methods are deprecated, as beginning and ending a transaction has the same effect.  I suspect this may cause that problem. Some strange things, may related: * Sometimes I got exception like this: org.springframework.transaction.IllegalTransactionStateException: Pre-bound JDBC Connection found! @ HibernateTransactionManager.java:329, **this also happen random, but I only have one transaction manager in my application.** * I didn't got all similar bugs before I shift from Spring 3 to Spring 3.1.1 and use Java Configuration instand of XML  Now I set the release_mode of hibernate to ""on_close"". I am looking forward to walk round the problem.  I think it is much like the bug: #13399  ---  **Affects:** 3.1.1  **Attachments:** - [stacktrace.txt](https://jira.spring.io/secure/attachment/19848/stacktrace.txt) (_10.55 kB_)","closed","status: bulk-closed,","spring-projects-issues","2012-06-16T19:26:45Z","2019-01-12T02:47:46Z"
"","14407","Add support for JavaConfig method parameters  [SPR-9773]","**[Vojtech Krasa](https://jira.spring.io/secure/ViewProfile.jspa?name=meo)** opened **[SPR-9773](https://jira.spring.io/browse/SPR-9773?redirect=false)** and commented  I want to create several beans of the same type but with different configuration, I am currently unable to do it.  For example I would like to create new connection pool for every client like this:  ```java  	@Resource(name=""customerIds"") 	List customerIDs;  	@Bean 	public Map webServiceTemplates() { 		Map result = new HashMap(); 		for (String customerID : customerIDs) { 			WebServiceTemplate webServiceTemplate = createWebServiceTemplate(customerID); 			result.put(customerID, webServiceTemplate); 		} 		return result; 	}  	@Bean 	@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) 	public WebServiceTemplate createWebServiceTemplate(String customerID) { 		WebServiceTemplate webServiceTemplate = new WebServiceTemplate(); 		webServiceTemplate.setMessageSender(createMessageSender(customerID)); 		webServiceTemplate.setInterceptors(getClientInterceptors()); 		webServiceTemplate.setMarshaller(getMarshaller()); 		webServiceTemplate.setUnmarshaller(getMarshaller()); 		return webServiceTemplate; 	}  	@Bean 	@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) 	public WebServiceMessageSender createMessageSender(String customerID) { 		DefaultHttpClient httpClient = createHttpClient(customerID); 		HttpComponentsMessageSender result = new HttpComponentsMessageSender(httpClient); 				// config by customerId... 		return result;  	}  	@Bean 	@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) 	public DefaultHttpClient createHttpClient(String customerID) {         return new DefaultHttpClient(createThreadSafeClientConnManager(customerID));  	}  	@Bean 	@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) 	public ThreadSafeClientConnManager createThreadSafeClientConnManager(String customerID) { 		ThreadSafeClientConnManager result = new ThreadSafeClientConnManager(); 		// config by customerId... 		return result; 	} ```    ---  **Affects:** 3.1.2","closed","in: core,","spring-projects-issues","2012-09-07T07:53:14Z","2019-01-12T05:28:06Z"
"","14293","Spring-instrument and auto injection in new object [SPR-9659]","**[Vladimir](https://jira.spring.io/secure/ViewProfile.jspa?name=zen0n)** opened **[SPR-9659](https://jira.spring.io/browse/SPR-9659?redirect=false)** and commented  I have spring 3.1 application. And I Have spring-instrument java agent, I have configurable class:  ``` @Configurable public class WeavingClass {      @Resource     @Getter     private ApplicationContext ac;      public WeavingClass()     {      }  } {/code} And I Have unit test: ```  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration`(classes={WebBackendContextConfig.class}) `@Slf4j` public class TestWeavingInjection extends TestCase {      @Test     public void isInjectedTest()     {         WeavingClass wc = new WeavingClass();         assertNotNull(wc.getAc());     }  } {/code} And I Have:  ``` @Configuration @PropertySource(value={""classpath:META-INF/conf/liteicms-backend.properties""}) @ComponentScan(value={""ru.icb.liteicms.backend.service"", ""ru.icb.liteicms.domain"", ""ru.icb.liteicms.backend.domain.contentpage.wrappers""}) @EnableSpringConfigured @EnableLoadTimeWeaving @EnableAspectJAutoProxy public class WebBackendContextConfig {  } {/code} I run my test with -javaagent:org.springframework.instrument-3.1.1.RELEASE.jar My test working without errors.  But if I add this: ```  private HashMap> builderMap = new HashMap>() { private static final long serialVersionUID = 1L; { put(String.class, WeavingClass.class); } }; {/code} My test has broken.   ---  **Affects:** 3.1.1  **Reference URL:** http://stackoverflow.com/questions/11755152/spring-instrument-and-auto-injection-in-new-object","closed","in: core,","spring-projects-issues","2012-08-01T02:40:56Z","2019-01-12T16:36:07Z"
"","14427","Spring 3.1 CookieGenerator does not support HttpOnly property added in servlet 3.0 [SPR-9794]","**[Vladimir Semenov](https://jira.spring.io/secure/ViewProfile.jspa?name=vsemenov)** opened **[SPR-9794](https://jira.spring.io/browse/SPR-9794?redirect=false)** and commented  org.springframework.web.util.CookieGenerator does not support setting HttpOnly property on cookies which makes it unusable for a lot of use cases. javax.servlet.http.Cookie now has a setHttpOnly method as of Servlet API 3.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aa4d9c48ab656d8a31c375d449892f9955f7e57b, https://github.com/spring-projects/spring-framework/commit/e670975fdeadff1673eb5a58f249ba7017bb0768  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-09-13T15:27:31Z","2012-11-04T06:54:06Z"
"","13964","Problem with HandlerInterceptor [SPR-9326]","**[Vincent Chan](https://jira.spring.io/secure/ViewProfile.jspa?name=vencentchan)** opened **[SPR-9326](https://jira.spring.io/browse/SPR-9326?redirect=false)** and commented  For now,the HandlerInterceptor has a preHandle() method that call before a controller been called.And it return a bool value to figure out whether the controller should be invoke(or another interceptor in the chain should be called). Consider this situation: 1、We have a app using springmvc. 2、Our app use ContentNegotiatingViewResolver to detect what kind of view to serve. 3、We use HandlerInterceptor to detect if a user is authorised.If so then the process continued,otherwise a error returned.So if the user comes from some kind of web browser or accepts application/html content then we can just redirect to a login page.If not we'd like to return some kind of xml or json figure out that he has no privilege. So the problem is current HandlerInterceptor cannot do that gracefully.It just return bool,take no ModelAndView. For now we just could detect the content type ourself and write the response back.Is it possible to add a ModelAndView arg to the preHandle,and render it back if it's not null when the method return false? Thanks.   --- No further details from [SPR-9326](https://jira.spring.io/browse/SPR-9326?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-04-13T23:40:05Z","2012-04-17T06:46:56Z"
"","13842","Defined URL Not Recognized [SPR-9204]","**[Vernon](https://jira.spring.io/secure/ViewProfile.jspa?name=vernon)** opened **[SPR-9204](https://jira.spring.io/browse/SPR-9204?redirect=false)** and commented  A controller defined as  `@RequestMapping`(""/profiles/new"") `@SessionAttributes`(types = Profile.class) public class RegistrationController { ... }  XML configuration   The URL leads to ""Oops! This link appears to be broken.""  The above works for the 3.0.   ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?123902-Defined-URL-Not-Recognized-Another-Code-Broken-With-3-1&p=404143#post404143  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/f6d1a290c4315ba59918ff6738fe6c460a264d1e","closed","status: declined,","spring-projects-issues","2012-03-05T16:17:38Z","2019-01-12T16:36:40Z"
"","14180","ServletResponse buffering and Jaxb2RootElementHttpMessageConverter serializing problem [SPR-9546]","**[vedat demir](https://jira.spring.io/secure/ViewProfile.jspa?name=vedat227)** opened **[SPR-9546](https://jira.spring.io/browse/SPR-9546?redirect=false)** and commented  Jaxb2RootElementHttpMessageConverter class has a writeToResult method (line 98) to serialize xml form of object t o a buffer in Result object.  at here result is a javax.xml.transform.stream.StreamResult object (particular implementation of server) and marshaller.marshal(o, result); lines try to write all xml content in this buffer.  here is the problem!  accordingly below definition http://java.sun.com/developer/technicalArticles/Servlets/servletapi/ with servlet 2.2 we have a buffer object for ServletResponse and size should be  8K (can be change by server vendor. e.g. i am using was 7.0 and it seems this buffer size is here about 2K). So if the size of your object xml form if bigger than this size, content is being corrupted and server does not post all content.  we need to use flush() method with particular content size. i mean instead of writing all xml content to buffer in one time, we need to make iterative writing with particular size and use flush() method for each write action,  e.g. for(i........ ((javax.xml.transform.stream.StreamResult)result).getOutputStream().write(xmlContent.substring(0, 1850).getBytes()); ((javax.xml.transform.stream.StreamResult)result).getOutputStream().flush();  or we need to restart default buffer size of HttpServletResponse, accordingly object size before write action as below (i used this :) just as a workaround solution) servletResponse.setBufferSize(8*1024); // vsd servletResponse.reset();    ---  **Affects:** 3.0.4","closed","in: web,","spring-projects-issues","2012-06-26T05:20:13Z","2019-01-11T13:07:18Z"
"","14471","RequestMapping parsing upto only one dot in the PathVaraibles [SPR-9838]","**[Vanitha Thadvai](https://jira.spring.io/secure/ViewProfile.jspa?name=vanitha)** opened **[SPR-9838](https://jira.spring.io/browse/SPR-9838?redirect=false)** and commented  Previously we used 3.0.5 version at that time to extract the Uri values which has special charcters or dot we used like below  ``` @RequestMapping(value = ""/fixidentity/""+""**"", method = RequestMethod.GET) 	public @ResponseBody 	String getIdentityByTagValue(HttpServletRequest request) { 	    String tagValues = (String) 	         request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);   ```  and if we pass ""FIX.4.2"" as remaining uri in place of **(means pathvaraible) we got tagvalues as  FIX.4.2 so no issues  But now we upgrade our project to use 3.1.0 and now this is returning whole path now tagvalues is returning ""/fixidentity/FIX.4.2"".  Buy searching we found that the below configuration to our spring  ```      ```  But now tagvalues is returning only up to ""FIX.4"" not whole ""FIX.4.2"" its parsing upto only dot   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/efb29a90449ba3b5f432e338da6ab4a2ef14a6c5, https://github.com/spring-projects/spring-framework-issues/commit/cbfd846b3f7742685d3461e101d7cdabce4125db","closed","in: core,","spring-projects-issues","2012-09-28T02:50:39Z","2019-01-11T13:16:06Z"
"","14554","OpenSessionInViewFilter is incorrectly packaged [SPR-9921]","**[Val Blant](https://jira.spring.io/secure/ViewProfile.jspa?name=vace117)** opened **[SPR-9921](https://jira.spring.io/browse/SPR-9921?redirect=false)** and commented  OpenSessionInViewFilter is packaged inside org.springframework.orm-3.1.2.RELEASE.jar, which means that ORM depends on web classes and OpenSessionInViewFilter  cannot be properly used in an EAR application. Here is why.  OpenSessionInViewFilter extends org.springframework.web.filter.OncePerRequestFilter. So, if want to use OpenSessionInViewFilter in a webapp that is deployed as part of an EAR. org.springframework.orm.jar would natuarally be placed on the EAR classpath, and since OpenSessionInViewFilter depends on OncePerRequestFilter, this also forces us to place org.springframework.web.jar on the EAR classpath.  However, org.springframework.web.jar also contains org.springframework.web.jsf.* classes. Now if the webapp references anything from that package, we'll very likely get an exception - ""java.lang.NoClassDefFoundError: javax/faces/context/FacesContext"" (or something similar), b/c org.springframework.web.jar relies on JSF classes that live in WEB-INF/lib.  In order to fix this dependency problem, OpenSessionInViewFilter should be moved into org.springframework.web.jar   ---  **Affects:** 3.1.2","closed","status: declined,","spring-projects-issues","2012-10-25T11:09:51Z","2019-01-12T16:24:55Z"
"","14119","Need efficient converter for @ResponseBody InputStream [SPR-9484]","**[Uli Bubenheimer](https://jira.spring.io/secure/ViewProfile.jspa?name=ububenheimer)** opened **[SPR-9484](https://jira.spring.io/browse/SPR-9484?redirect=false)** and commented  There is no efficient means in Spring Web MVC today for handling a large HTTP request body as an `@RequestBody` InputStream. It is possible to use a `@RequestBody` Resource and get an InputStream from it; however, this is inefficient for large request bodies, as the ResourceHttpMessageConverter converts the body to a byte array, requiring a large JVM heap and time spent on performing the conversion. For example, uploading a 512MB file via an HTTP PUT does not work well with the Resource approach. Files this large are not unusual, for example, in the medical image domain.  I am attaching a new class, InputStreamHttpMessageConverter, as a more efficient alternative for inclusion in the Spring Web MVC framework. The implementation is straightforward.   ---  **Affects:** 3.1.1  **Attachments:** - [InputStreamHttpMessageConverter.java](https://jira.spring.io/secure/attachment/19828/InputStreamHttpMessageConverter.java) (_1.26 kB_)","closed","status: invalid,","spring-projects-issues","2012-06-07T09:00:37Z","2019-01-12T05:28:35Z"
"","14607","java.lang.ClassCastException running 'mvn test' in spring-mvc-showcase [SPR-9973]","**[Trung Khuu](https://jira.spring.io/secure/ViewProfile.jspa?name=tkhuu)** opened **[SPR-9973](https://jira.spring.io/browse/SPR-9973?redirect=false)** and commented  Running mvn test currently reports 3 failures around deferred async tasks. i.e. Results :  Tests in error: exception(org.springframework.samples.mvc.async.DeferredResultControllerTests): Request processing failed; nested exception is java.lang.ClassCastException: org.springframework.web.context.request.async.DeferredResult cannot be cast to java.lang.Comparable view(org.springframework.samples.mvc.async.DeferredResultControllerTests): Request processing failed; nested exception is java.lang.ClassCastException: org.springframework.web.context.request.async.DeferredResult cannot be cast to java.lang.Comparable responseBody(org.springframework.samples.mvc.async.DeferredResultControllerTests): Request processing failed; nested exception is java.lang.ClassCastException: org.springframework.web.context.request.async.DeferredResult cannot be cast to java.lang.Comparable  This was fixed by changing the queues from PriorityQueues to ConcurrentLinkedQueues in the DeferredResultController. (See attached source)  Regards,   ---  **Affects:** 3.2 RC1  **Reference URL:** https://github.com/SpringSource/spring-mvc-showcase  **Attachments:** - [DeferredResultController.java](https://jira.spring.io/secure/attachment/20607/DeferredResultController.java) (_3.22 kB_)","closed","status: invalid,","spring-projects-issues","2012-11-07T22:30:35Z","2019-01-12T05:27:47Z"
"","13854","Add support for 301 redirects using UrlBasedViewResolver prefixes [SPR-9216]","**[Tristan Burch](https://jira.spring.io/secure/ViewProfile.jspa?name=tburch)** opened **[SPR-9216](https://jira.spring.io/browse/SPR-9216?redirect=false)** and commented  When returning the ""redirect:"" prefix from a method with a RequestMapping, the default behavior is to return a 302 redirect. It would be nice if there was a way to return a 301 or a 302 redirect based on the prefix used (e.g. ""redirect:"" or ""permanentRedirect:"").  For SEO, a 301 is more desirable than a 302, and it would be nice to have a way to conveniently return the 301 without having the method return a RedirectView with a 301 as it's StatusCode.  I attached a patch with an additional prefix that's used to create a RedirectView with a 301 StatusCode. I'll also submit a pull request in github. I should already have a SpringSource CLA form on file.   ---  **Attachments:** - [301-redirects.diff](https://jira.spring.io/secure/attachment/19492/301-redirects.diff) (_16.00 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-09T15:43:17Z","2012-05-18T15:48:55Z"
"","14159","The expression language used in cache annotations can be error prone when referencing explict parameter names [SPR-9525]","**[Travis Schneeberger](https://jira.spring.io/secure/ViewProfile.jspa?name=leo.herbie)** opened **[SPR-9525](https://jira.spring.io/browse/SPR-9525?redirect=false)** and commented  We are using the Spring Cache Abstraction pretty heavily.  One of the standards we have adopted is always placing cache annotations on the service interface.  This allow various implementations of a service to have caching whether the implementation is hand coded, a remote proxy, etc.  For example:  ``` public interface FooService {   @Cacheable(value=Foo, key=""'firstArg=' + #firstArg + '|' + 'secondArg=' + #secondArg"")   Foo getFoo(String firstArg, String secondArg); } ```  Many times we are finding that Spring is literally using the following as the cache key:  ``` firstArg=#firstArg|secondArg=#secondArg ```  This is obviously problematic because everything will generate the same cachekey making caching completely broken.  This happens when Spring cannot find the argument names on the method that spring is proxying for caching.  I suspect this is happening when the spring caching proxy is proxying another proxy (for remoting for example) and that proxy is not keeping the method variable names in tact.  It would be nice is spring would throw an exception or at least log an error when parsing a spring expression referencing argument (or other implicit variables ex: root.methodName) names that do not exist.  Throwing an exception would be preferred because in the case of caching, this is a hard error.  As a work around for this problem we are doing the following which always works:  ``` public interface FooService {   @Cacheable(value=Foo, key=""'firstArg=' + #p0 + '|' + 'secondArg=' + #p1"")   Foo getFoo(String firstArg, String secondArg); } ```  The added benefit of this approach is it can be used without debug symbols.  We probably will not switch back to using real parameter names in our SpEl but for the benefit of the community, I figured I file a jira.  ---  **Affects:** 3.1 GA  **Reference URL:** https://jira.kuali.org/browse/KULRICE-7514  **Issue Links:** - #17942 Generics and caching causing issues","closed","status: bulk-closed,","spring-projects-issues","2012-06-20T14:24:30Z","2019-01-12T02:47:40Z"
"","13939","Context - registerShutdownHook fails with IllegalArgumentException; Hook already registered when used via SingletonBeanFactoryLocator [SPR-9301]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-9301](https://jira.spring.io/browse/SPR-9301?redirect=false)** and commented  Hi,  i am using the SingletonBeanFactoryLocator to create my context (no webapp and no single main there, so i need to do it so). Its possible that many threads does call this method and they all get the same context. But registerShutdownHook fails for some threads, because its already registered. May it be possible to make this like refresh + close synchronized on the startupShutdown monitor to register only one hook.  ``` /**  * Context.  * @param bfLocatorKey  * @param parentContextKey  * @return  */ public static ApplicationContext getAppContext(String bfLocatorKey, String parentContextKey) {   BeanFactoryLocator bfLocator = SingletonBeanFactoryLocator       .getInstance(bfLocatorKey);   BeanFactoryReference bfReference = bfLocator.useBeanFactory(parentContextKey);   BeanFactory factory = bfReference.getFactory();   ConfigurableApplicationContext c = (ConfigurableApplicationContext) factory;   c.registerShutdownHook();   return c; } ```  Exception is:  ```   java.lang.IllegalArgumentException: Hook previously registered         at java.lang.ApplicationShutdownHooks.add(ApplicationShutdownHooks.java:72) ~[na:1.7.0_147-icedtea]         at java.lang.Runtime.addShutdownHook(Runtime.java:209) ~[na:1.7.0_147-icedtea]         at org.springframework.context.support.AbstractApplicationContext.registerShutdownHook(AbstractApplicationContext.java:961) ~[org.springframework.context-3.1.1.RELEASE.jar:3.1.1.RELEASE] ```    ---  **Affects:** 3.1.1","closed","in: core,","spring-projects-issues","2012-04-03T02:44:53Z","2019-01-12T16:36:33Z"
"","14502","OpDivide wrongly wraps result of division in TypedValue  [SPR-9869]","**[Tomasz Wysocki](https://jira.spring.io/secure/ViewProfile.jspa?name=tawek)** opened **[SPR-9869](https://jira.spring.io/browse/SPR-9869?redirect=false)** and commented  Fragment of code from OpDivide.java  ``` 	Object result = state.operate(Operation.DIVIDE, operandOne, operandTwo); return new TypedValue(result); ```  wrongly wraps result of division in TypedValue. Corresponding in OpMultiply.java is correct.  ``` return state.operate(Operation.MULTIPLY, operandOne, operandTwo); ```  Fix is trivial.   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad81ec922b505dbf541c6764e449aab7e1f940af, https://github.com/spring-projects/spring-framework/commit/138fa8af0ef3df3df5dbb2a6db4643cff36043d1","closed","in: core,","spring-projects-issues","2012-10-10T03:32:24Z","2012-11-04T06:54:00Z"
"","14214","Injecting prototypes into tests using @Resource appears to be broken [SPR-9580]","**[Tom Ziemer](https://jira.spring.io/secure/ViewProfile.jspa?name=de_tom)** opened **[SPR-9580](https://jira.spring.io/browse/SPR-9580?redirect=false)** and commented  When injecting a prototype bean into a test derived from AbstractJUnit4SpringContextTests using `@Resource`, it seems that the bean is only created once. Prior to Spring 3.1.2 this was not the case, the framework provided a new instance for each test run.  As a workaround, I now use `@Autowired` + `@Qualifier`.  The attached project uses a unit test to show the problem. Changing the Spring version to 3.1.1-RELEASE (or lower) in the pom fixes the issue.  ---  **Affects:** 3.1.2  **Attachments:** - [resourceIssue.zip](https://jira.spring.io/secure/attachment/20091/resourceIssue.zip) (_4.04 kB_)  **Issue Links:** - #14261 Regression: scoped beans being cached too aggressively  5 votes, 6 watchers","closed","in: core,","spring-projects-issues","2012-07-11T02:22:43Z","2019-01-11T12:53:23Z"
"","14405","CronTriggerFactoryBean doesn't allow calendar name and description to be specified [SPR-9771]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-9771](https://jira.spring.io/browse/SPR-9771?redirect=false)** and commented  Relevant interface is MutableTrigger - see http://quartz-scheduler.org/api/2.1.0/org/quartz/impl/triggers/AbstractTrigger.html#setCalendarName%28java.lang.String%29.  Not really a bug, but without this, a drop in replacement is not always possible. Could add other properties as well as 'setCalendarName'.  ---  **Affects:** 3.1.2  **Issue Links:** - #15568 Provide access to SimpleTriggerFactoryBean property startTime  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","type: enhancement,","spring-projects-issues","2012-09-06T19:49:35Z","2019-01-11T13:36:50Z"
"","14555","@ModelAttribute usage, can prevent @ModelAttribute initialization of dependent. [SPR-9922]","**[Thomas Whitmore](https://jira.spring.io/secure/ViewProfile.jspa?name=twhitmore.nz@gmail.com)** opened **[SPR-9922](https://jira.spring.io/browse/SPR-9922?redirect=false)** and commented  Hi, I've just run into a `@ModelAttribute` ""reference data"" dependency problem.  In my case, which is very simple & presumably common:      @ModelAttribute(""job"")     protected Job loadOrCreate (@RequestParam(value=""id"", required=false) Integer id);          @ModelAttribute(""jobDisplay"")     protected JobDisplay buildJobUI (@ModelAttribute(""job"") Job job);  What I'm finding, is that by quirk of reflection 'buildJobUI' is being found before 'loadOrCreate'; data binding is running, by default, with a newly created instance of Job;  'loadOrCreate' is then skipped, since it's been added to the implicit model by the automatic argument resolution.  So, Job is never loaded from the database, 'loadOrCreate' is being skipped, and fields are bound into the wrong object.  There's a related issue about dependencies - not being called in order -- but what I've found is worse,  that the logic is squashing the (should be prior) dependencies from ever being called at all.  PS:  I wouldn't mind being able to make ""Reference Data"" methods which didn't return any named attribute, but could just takea parameter 'Model model' and populate several attributes into that. Can I do this?  BTW:  I'm not in favour of the idea of ""selective model creation"" in the slightest, sounds like a complex solution in search of a problem.  Thanks guys!  ---  **Affects:** 3.1.2  **Issue Links:** - #10965 Support for `@ModelAttribute` interdependency (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2012-10-25T21:37:44Z","2019-01-13T07:02:27Z"
"","14096","SimpleDriverDataSource doesn't use the connectionProperties specified [SPR-9461]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-9461](https://jira.spring.io/browse/SPR-9461?redirect=false)** and commented  The SimpleDriverDataSource/AbstractDriverBasedDataSource doesn't use the provided connectionProperties. They get lost when a new Properties instance is created. The current code uses:      Properties props = new Properties(getConnectionProperties());  should use:      Properties props = new Properties();     props.addAll(getConnectionProperties());  That way the provided properties get copied over.    ---  **Affects:** 3.0.7, 3.1.1, 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5d9ad5b1d1ceb5e8d0ede2a7ede5203d94964ec2, https://github.com/spring-projects/spring-framework/commit/f3d0beb955031b45284fa1cbda4911ece62d372f, https://github.com/spring-projects/spring-framework/commit/20c4ba40d8735c0b86bc3e5dc20af4b7664b94ae, https://github.com/spring-projects/spring-framework/commit/cd8d72e3f8f5d4e0a792d64ed8a905f1597fb9ae  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2012-06-01T07:52:08Z","2013-01-18T05:01:27Z"
"","14176","ExtendedBeanInfo is extremely slow processing beans derived from java.awt.Component [SPR-9542]","**[Thomas Pasch](https://jira.spring.io/secure/ViewProfile.jspa?name=aanno)** opened **[SPR-9542](https://jira.spring.io/browse/SPR-9542?redirect=false)** and commented  I've got a spring bean derived from java.awt.Component in my context. The log file (spring on debug) is like:  ``` 2012-06-23 16:10:46,834 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Processing injected method of bean 'org.nuclos.client.task.PersonalTaskController': AutowiredMethodElement for void org.nuclos.client.ui.Controller.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:10:46,837 DEBUG AWT-EventQueue-0 [factory.support.DefaultListableBeanFactory] - Returning cached instance of singleton bean 'springLocaleDelegate' 2012-06-23 16:10:47,316 DEBUG AWT-EventQueue-0 [springframework.beans.ExtendedBeanInfo] - Could not add indexed write method [public void java.awt.Component.setSize(int,int)] for property [component]. Reason: type mismatch between indexed read and indexed write methods: component 2012-06-23 16:10:47,545 DEBUG AWT-EventQueue-0 [springframework.beans.ExtendedBeanInfo] - Could not add indexed write method [public void java.awt.Component.setLocation(int,int)] for property [component]. Reason: type mismatch between indexed read and indexed write methods: component 2012-06-23 16:10:52,387 DEBUG AWT-EventQueue-0 [springframework.beans.ExtendedBeanInfo] - Could not add indexed write method [public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)] for property [component]. Reason: type mismatch between indexed read and indexed write methods: component 2012-06-23 16:10:52,653 DEBUG AWT-EventQueue-0 [springframework.beans.ExtendedBeanInfo] - Could not add indexed write method [public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set)] for property [component]. Reason: type mismatch between indexed read and indexed write methods: component 2012-06-23 16:10:57,018 DEBUG AWT-EventQueue-0 [springframework.beans.ExtendedBeanInfo] - Could not add indexed write method [public void java.awt.Component.setLocation(int,int)] for property [component]. Reason: type mismatch between indexed read and indexed write methods: component 2012-06-23 16:11:02,023 DEBUG AWT-EventQueue-0 [springframework.beans.ExtendedBeanInfo] - Could not add indexed write method [public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)] for property [component]. Reason: type mismatch between indexed read and indexed write methods: component 2012-06-23 16:11:02,227 DEBUG AWT-EventQueue-0 [springframework.beans.ExtendedBeanInfo] - Could not add indexed write method [public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set)] for property [component]. Reason: type mismatch between indexed read and indexed write methods: component 2012-06-23 16:11:04,968 DEBUG AWT-EventQueue-0 [springframework.beans.ExtendedBeanInfo] - Could not add indexed write method [public void java.awt.Component.setSize(int,int)] for property [component]. Reason: type mismatch between indexed read and indexed write methods: component 2012-06-23 16:11:05,467 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Found injected element on class [org.nuclos.client.task.PersonalTaskView]: AutowiredMethodElement for void org.nuclos.client.task.TaskView.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:11:05,472 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Processing injected method of bean 'org.nuclos.client.task.PersonalTaskView': AutowiredMethodElement for void org.nuclos.client.task.TaskView.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:11:05,476 DEBUG AWT-EventQueue-0 [factory.support.DefaultListableBeanFactory] - Returning cached instance of singleton bean 'springLocaleDelegate' 2012-06-23 16:11:05,477 DEBUG AWT-EventQueue-0 [factory.annotation.AutowiredAnnotationBeanPostProcessor] - Autowiring by type from bean name 'org.nuclos.client.task.PersonalTaskView' to bean named 'springLocaleDelegate' 2012-06-23 16:11:06,975 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Found injected element on class [org.nuclos.client.task.PersonalTaskTableModel]: AutowiredMethodElement for void org.nuclos.client.ui.model.AbstractListTableModel.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:11:06,985 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Processing injected method of bean 'org.nuclos.client.task.PersonalTaskTableModel': AutowiredMethodElement for void org.nuclos.client.ui.model.AbstractListTableModel.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:11:06,987 DEBUG AWT-EventQueue-0 [factory.support.DefaultListableBeanFactory] - Returning cached instance of singleton bean 'springLocaleDelegate' 2012-06-23 16:11:06,987 DEBUG AWT-EventQueue-0 [factory.annotation.AutowiredAnnotationBeanPostProcessor] - Autowiring by type from bean name 'org.nuclos.client.task.PersonalTaskTableModel' to bean named 'springLocaleDelegate' 2012-06-23 16:11:08,339 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Found injected element on class [org.nuclos.client.ui.collect.component.CollectableTextField]: AutowiredMethodElement for void org.nuclos.client.ui.collect.component.AbstractCollectableComponent.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:11:08,351 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Processing injected method of bean 'org.nuclos.client.ui.collect.component.CollectableTextField': AutowiredMethodElement for void org.nuclos.client.ui.collect.component.AbstractCollectableComponent.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:11:08,353 DEBUG AWT-EventQueue-0 [factory.support.DefaultListableBeanFactory] - Returning cached instance of singleton bean 'springLocaleDelegate' 2012-06-23 16:11:08,354 DEBUG AWT-EventQueue-0 [factory.annotation.AutowiredAnnotationBeanPostProcessor] - Autowiring by type from bean name 'org.nuclos.client.ui.collect.component.CollectableTextField' to bean named 'springLocaleDelegate' 2012-06-23 16:11:08,539 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Processing injected method of bean 'org.nuclos.client.ui.collect.component.CollectableTextField': AutowiredMethodElement for void org.nuclos.client.ui.collect.component.AbstractCollectableComponent.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:11:08,543 DEBUG AWT-EventQueue-0 [factory.support.DefaultListableBeanFactory] - Returning cached instance of singleton bean 'springLocaleDelegate' 2012-06-23 16:11:09,090 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Processing injected method of bean 'org.nuclos.client.ui.collect.component.CollectableTextField': AutowiredMethodElement for void org.nuclos.client.ui.collect.component.AbstractCollectableComponent.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:11:09,097 DEBUG AWT-EventQueue-0 [factory.support.DefaultListableBeanFactory] - Returning cached instance of singleton bean 'springLocaleDelegate' 2012-06-23 16:11:10,010 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Found injected element on class [org.nuclos.client.ui.collect.component.CollectableDateChooser]: AutowiredMethodElement for void org.nuclos.client.ui.collect.component.AbstractCollectableComponent.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:11:10,012 DEBUG AWT-EventQueue-0 [factory.annotation.InjectionMetadata] - Processing injected method of bean 'org.nuclos.client.ui.collect.component.CollectableDateChooser': AutowiredMethodElement for void org.nuclos.client.ui.collect.component.AbstractCollectableComponent.setSpringLocaleDelegate(org.nuclos.common2.SpringLocaleDelegate) 2012-06-23 16:11:10,013 DEBUG AWT-EventQueue-0 [factory.support.DefaultListableBeanFactory] - Returning cached instance of singleton bean 'springLocaleDelegate' ```  In other words:  - Whenever I've got 'Could not add indexed write method...' my application stalls for over one second.  - As 'Could not add indexed write method...' is there over and over and over in the log, this seems to be a performance hit.  - Perhaps it would be better to cache if 'adding an indexed write method' is not possible.  ---  **Affects:** 3.1.1, 3.2 M1  **Issue Links:** - #14663 Overhaul non-void JavaBean write method support","closed","type: enhancement,","spring-projects-issues","2012-06-25T05:06:13Z","2019-01-11T13:07:39Z"
"","14469","Injection of beans that implement interfaces with Generics without qualifier annotation [SPR-9836]","**[Thomas Oellrich](https://jira.spring.io/secure/ViewProfile.jspa?name=toellrich)** opened **[SPR-9836](https://jira.spring.io/browse/SPR-9836?redirect=false)** and commented  I recently had a look at a new Dependency Injection framework called Dagger from Jesse Wilson at Square.  https://github.com/square/Dagger  It has two cool features that I wish Spring had as well (will create a separate issue for the other feature). In Spring, when two classes implement the same generified interface, say Repository\, Spring cannot find the corresponding injection points (because of type erasure I guess). This requires the developer to add qualifier annotations which makes the code less readable. Dagger is somehow able to determine the injection points without qualifier annotations. It would be great if this feature could be added to Spring.  ---  **Affects:** 3.1.2  **Issue Links:** - #14468 Detect beans when `@Inject` is present  1 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-09-27T11:24:32Z","2019-01-13T07:02:57Z"
"","14468","Detect beans when @Inject is present [SPR-9835]","**[Thomas Oellrich](https://jira.spring.io/secure/ViewProfile.jspa?name=toellrich)** opened **[SPR-9835](https://jira.spring.io/browse/SPR-9835?redirect=false)** and commented  I recently had a look at a new Dependency Injection framework called Dagger from Jesse Wilson at Square.  https://github.com/square/Dagger  It has two cool features that I wish Spring had as well (will create a separate issue for the other feature). Dagger adds beans automatically to the application context (called ObjectGraph in Dagger) when a field or constructor is annotated with `@Inject` (Dagger doesn't support method injection). This means the bean itself doesn't need to be annotated at all. All the alternatives for this in Spring are not very appealing:  (a) Using `@Component` leads to a dependency on the Spring API (b) Using `@Named` (without name) isn't very descriptive at all (c) Using `@ManagedBean` is awkward when not using JSF and requires one to add another dependency since it's not part of the JDK  In short, it would be great if no annotation would be required.  ---  **Affects:** 3.1.2  **Issue Links:** - #14469 Injection of beans that implement interfaces with Generics without qualifier annotation","closed","type: enhancement,","spring-projects-issues","2012-09-27T11:16:59Z","2019-01-11T13:16:22Z"
"","14053","Log4jWebConfigurer: wrong config location URL with some property substitutions [SPR-9417]","**[Thomas GL](https://jira.spring.io/secure/ViewProfile.jspa?name=tom.gl)** opened **[SPR-9417](https://jira.spring.io/browse/SPR-9417?redirect=false)** and commented  I would like to use Log4jConfigListener (thus Log4jWebConfigurer) with the following log4jConfigLocation:  ``` ${mywebapp.config.dir:classpath:}log4j.xml ```  The goal is to configure Log4J from: - either an external config file (by defining a mywebapp.config.dir=file:/config/path/ property) - or a default log4j.xml from classpath (when mywebapp.config.dir is not defined)  In Log4jWebConfigurer, the config location is processed as follow:  ```java if (!ResourceUtils.isUrl(location)) {   // Resolve system property placeholders before resolving real path.   location = SystemPropertyUtils.resolvePlaceholders(location);   location = WebUtils.getRealPath(servletContext, location); } ```  After the ""resolvePlaceholders"" call, the location is a valid URL (either file:something or classpath:something). But it gets corrupted on the next line by the ""WebUtils.getRealPath"" call, and it ends with a value like ""file:/path/to/exploded/WAR/file:/config/path/log4j.xml"".  To fix that, I think this code should be modified as follow:  ```java // Resolve system property placeholders before resolving real path. location = SystemPropertyUtils.resolvePlaceholders(location); if (!ResourceUtils.isUrl(location)) {   location = WebUtils.getRealPath(servletContext, location); } ```  Thanks.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59e3223c849fd04c1415f5ddd9bfb9acb9a17b60, https://github.com/spring-projects/spring-framework/commit/2503b7eb891824da01ccde3b5035f0030ea757a4","closed","type: bug,","spring-projects-issues","2012-05-16T08:47:42Z","2012-06-19T03:39:29Z"
"","14124","HandlerMethod.getBeanType() doesn't fully handle CGLIB-generated classes [SPR-9490]","**[Thomas Bruyelle](https://jira.spring.io/secure/ViewProfile.jspa?name=tbruyelle)** opened **[SPR-9490](https://jira.spring.io/browse/SPR-9490?redirect=false)** and commented  https://github.com/SpringSource/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java#L122  ```java    /**  * Returns the type of the handler for this handler method.  * Note that if the bean type is a CGLIB-generated class, the original, user-defined class is returned.  */ public Class getBeanType() {      if (bean instanceof String) {           String beanName = (String) bean;           return beanFactory.getType(beanName);      }      else {           return ClassUtils.getUserClass(bean.getClass());      } } ```  When `bean instanceof String` is true, the method returns the CGLIB-generated class instead of the user-defined one.  `ClassUtils.getUserClass()` should also wrap the return of `beanFactory.getType( beanName )`.   ---  **Affects:** 3.1.1, 3.2 M1","closed","type: bug,","spring-projects-issues","2012-06-10T23:24:15Z","2019-01-11T13:04:51Z"
"","14514","ClassPathXmlApplicationContext not support pattern * under websphere7 [SPR-9881]","**[Thisadee](https://jira.spring.io/secure/ViewProfile.jspa?name=zoftdev)** opened **[SPR-9881](https://jira.spring.io/browse/SPR-9881?redirect=false)** and commented  Code: applicationContext = new ClassPathXmlApplicationContext(""/applicationContext*.xml""); logger.debug(""applicationContext bean:""+Arrays.toString( applicationContext.getBeanDefinitionNames()));  in jetty it work fine in webshere it not  log jetty: applicationContext bean:[LoggingAspect, IN43Connector, IN44Connector, SBMWSBL, sMSFHReply, SBMStateFlowEngine, com.truemove.sbm.stateflow.state.sampleflow.DoSomeThingState, ]  log websphere: applicationContext bean:[]  however, using  \  is alternative solution.   ---  **Affects:** 3.0.7","closed","in: core,","spring-projects-issues","2012-10-13T21:19:11Z","2019-01-12T16:25:01Z"
"","14409","Support Quartz 2.1 DailyTimeIntervalTrigger [SPR-9775]","**[Thad West](https://jira.spring.io/secure/ViewProfile.jspa?name=swisst)** opened **[SPR-9775](https://jira.spring.io/browse/SPR-9775?redirect=false)** and commented  Quartz 2.1 rolled out a new Trigger: DailyTimeIntervalTrigger  It would be great to be able use this with a yet to be written: org.springframework.scheduling.quartz.DailyTimeIntervalTriggerFactoryBean   ---  **Reference URL:** https://jira.terracotta.org/jira/browse/QTZ-196","closed","status: bulk-closed,","spring-projects-issues","2012-09-07T13:05:03Z","2019-01-12T00:26:20Z"
"","14268","IdTransferringMergeEventListener extends org.hibernate.event.def.DefaultMergeEventListener, which has been moved to org.hibernate.event.internal.DefaultMergeEventListener [SPR-9634]","**[Tejas Mehta](https://jira.spring.io/secure/ViewProfile.jspa?name=tmehta)** opened **[SPR-9634](https://jira.spring.io/browse/SPR-9634?redirect=false)** and commented  Need to upgrade IdTransferringMergeEventListener to the hibernate 4 api   ---  **Affects:** 3.1.1, 3.1.2","closed","status: declined,","spring-projects-issues","2012-07-25T07:00:35Z","2019-01-12T16:36:12Z"
"","14098","Error while creating multiple Cache Manager with different name using EhCache [SPR-9463]","**[Tejas Marvania](https://jira.spring.io/secure/ViewProfile.jspa?name=tejas.marvania)** opened **[SPR-9463](https://jira.spring.io/browse/SPR-9463?redirect=false)** and commented  While using cache abstraction backed by EhCache in Spring, I need to create multiple cache manager for different cache configuration.  From EhCache v2.5.x, they have chenged the implementation of CacheManager creation i.e. it does not allow to create more than one Cache Manager instance with same name.  Now when I use EhCacheCacheManagerFactoryBean to create CachaManager instance, I am providng different name to CacheManager but it sets name after creation of CacheManager and hence EhCache is giving exception.  Please note that this same configuration works file with v2.4.7 and below of EhCache.  Please see attached log file, spring context and ehcache configuration file.   ---  **Affects:** 3.1.1, 3.2 M1  **Attachments:** - [ehcache.xml](https://jira.spring.io/secure/attachment/19793/ehcache.xml) (_1002 bytes_) - [ehcache-global.xml](https://jira.spring.io/secure/attachment/19794/ehcache-global.xml) (_1004 bytes_) - [spring-cache.log](https://jira.spring.io/secure/attachment/19791/spring-cache.log) (_70.02 kB_) - [spring-context.xml](https://jira.spring.io/secure/attachment/19792/spring-context.xml) (_2.17 kB_)","closed","in: core,","spring-projects-issues","2012-06-02T02:36:14Z","2019-01-12T05:28:36Z"
"","14151","Bridged @RequestMapping methods not found, possible problem in HandlerMethodSelector  [SPR-9517]","**[Ted Young](https://jira.spring.io/secure/ViewProfile.jspa?name=tyoung)** opened **[SPR-9517](https://jira.spring.io/browse/SPR-9517?redirect=false)** and commented  Consider a case of a ContactController that extends an AbstractController\.  Methods marked `@RequestMapping` in AbstractController will not be found.  Similarly, `@InitBinder` and `@ModelAttribute` methods will not be found either. Specifically, this seems to occur anytime a method is bridged.  I have tracked the problem down to the following code in HandlerMethodSelector:  ```java ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() {   public void doWith(Method method) {     Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);     Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);     if (handlerMethodFilter.matches(specificMethod) &&         (bridgedMethod == specificMethod || !handlerMethodFilter.matches(bridgedMethod))) {       handlerMethods.add(specificMethod);     }   } }, ReflectionUtils.USER_DECLARED_METHODS); ```  It looks like there is an error in the conditional:  If the method was not bridged (i.e. a method in a concrete class) then `handlerMethodFilter.matches(specificMethod) && (bridgedMethod == specificMethod)` returns true: no problem.  If the method was bridged (e.g. when parameterized classes are involved) then the condition boils down to `handlerMethodFilter.matches(specificMethod) && !handlerMethodFilter.matches(bridgedMethod)`.  Since most of the implementations of handlerMethodFilter simply look for an annotation on the method (which also looks at bridge methods) they will always return true for both the real and the bridge methods.  As such, this condition always returns false.  In production, I used load time weaving to patch this with the following and had great success.  ```java public void doWith(Method method) { 	Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass); 	if (specificMethod.isBridge()) { 		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod); 	} 	if (handlerMethodFilter.matches(specificMethod)) { 		handlerMethods.add(specificMethod); 	} } ```  Hopefully, this will be enough information as I will be unable to supply an example (I was hit by a car recently and will be out of action for some time).   ---  **Affects:** 3.1 GA, 3.1.1  **Reference URL:** https://github.com/SpringSource/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/method/HandlerMethodSelector.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/16b189cc1a6b088d2ea4391658e368b7b682801c  5 votes, 4 watchers","closed","status: invalid,","spring-projects-issues","2012-06-19T08:53:54Z","2019-01-12T05:28:31Z"
"","14346","UriComponents cannot process collections [SPR-9712]","**[Taylor S. Wicksell](https://jira.spring.io/secure/ViewProfile.jspa?name=twicksell)** opened **[SPR-9712](https://jira.spring.io/browse/SPR-9712?redirect=false)** and commented  Take a RestTemplate and try to pass in a collection value for a given request parameter  ```java public double sum(double... numbers) { 	return restTemplate.getForEntity(""/sum?numbers={numbers}"", Double.class, numbers).getBody(); } ```  you would expect a request to `/sum?numbers=1,2,3`.  Currently the implementation of `UriComponents` will instead call toString on the collection and give you something like `/sum?numbers=`.   ---  **Affects:** 3.1.2, 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5aa01172285473f8f676bf2ed8af9edb0a96e41","closed","type: enhancement,","spring-projects-issues","2012-08-21T17:22:08Z","2016-04-06T08:38:14Z"
"","13886","WebContentInterceptor.preHandle(request, response, handler), handler of type HandlerMethod not controller instance [SPR-9248]","**[tam sayers](https://jira.spring.io/secure/ViewProfile.jspa?name=tam.sayers)** opened **[SPR-9248](https://jira.spring.io/browse/SPR-9248?redirect=false)** and commented  In WebContentInterceptor.preHandle(request, response, handler), the handler type is evaluated for instanceof LastModified to eventually determine whether to add the must-revalidate Cache-Control header or not. The given handler instance is of type HandlerMethod, not the controller instance, so even if the controller implements LastModified when the point is reached to add the header it never is!  ---  **Affects:** 3.1.1  **Issue Links:** - #13194 Provide controller method level alternative to WebContentInterceptor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/68d4a70f8e7315d227b7727b087a65e64f4b0f9e","closed","type: enhancement,","spring-projects-issues","2012-03-16T09:33:50Z","2019-01-11T12:46:27Z"
"","14551","Reduce code duplication in ContextLoaderUtils [SPR-9918]","**[Tadaya Tsuyukubo](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaya)** opened **[SPR-9918](https://jira.spring.io/browse/SPR-9918?redirect=false)** and commented  #### Status Quo  In `ContextLoaderUtils`, these two methods contain similar loop logic:  - `resolveContextLoaderClass(Class, String)` - `resolveContextConfigurationAttributes(Class)`  #### Proposed Solution  1. extract the duplicated loop logic into a new method.    ---  **Affects:** 3.2 M2","closed","type: task,","spring-projects-issues","2012-10-24T21:12:14Z","2012-11-04T06:54:00Z"
"","13998","Ability to map handler interceptors by url path [SPR-9361]","**[Tadaya Tsuyukubo](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaya)** opened **[SPR-9361](https://jira.spring.io/browse/SPR-9361?redirect=false)** and commented  In spring3.1 style configuration, you can specify a handler interceptor to have multiple paths, but not the other way, a path to multiple handler interceptors.  pre-spring3.1: - url-path => handler-interceptors  spring3.1: - handler-interceptor => url-paths  RequestMappingHandlerMapping uses MappedInterceptor but it still maps single handler-interceptor to multiple paths, as well as mvn:interceptor namespace.  The ability to map multiple handler interceptors by url-path would save time for upgrading pre spring3.1 application since it requires re-mapping to spring3.1 style.  Similar functionality from InterceptorRegistration class but for xml.    ---  **Affects:** 3.1.1  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-05-01T16:34:51Z","2012-08-20T09:05:58Z"
"","14362","Provide a callback mechanism for when a DeferredResult is set or expires [SPR-9728]","**[sylvain maucourt](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvek)** opened **[SPR-9728](https://jira.spring.io/browse/SPR-9728?redirect=false)** and commented  DeferredResult.setResultHandler should be used to ""doSomething"" when the request is ended (with success or from the timeout)  but this function is overrided in WebAsyncManager.startDeferredResultProcessing :-/   ---  **Affects:** 3.2 M2","closed","type: enhancement,","spring-projects-issues","2012-08-26T02:20:09Z","2019-01-11T13:34:50Z"
"","14361","RequestMappingHandlerAdapter.asyncRequestTimeout from my configuration file is erased [SPR-9727]","**[sylvain maucourt](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvek)** opened **[SPR-9727](https://jira.spring.io/browse/SPR-9727?redirect=false)** and commented  i use on my applicationcontext.xml file:           	     		60000     	     	     		     			     		     	       but the timeout is not respected... after debug i saw on WebMvcConfigurationSupport.requestMappingHandlerAdapter that a new RequestMappingHandlerAdapter was created instead of using my own instance   --- No further details from [SPR-9727](https://jira.spring.io/browse/SPR-9727?redirect=false)","closed","status: declined,","spring-projects-issues","2012-08-26T02:14:13Z","2019-01-12T16:36:01Z"
"","14101","Error in doc on JCA CCI - ConnectionSpecConnectionFactoryAdapter [SPR-9466]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-9466](https://jira.spring.io/browse/SPR-9466?redirect=false)** and commented  In the documentation, in chapter about JCA CCI, section ""Configuring CCI connections"", when explaining ConnectionSpecConnectionFactoryAdapter it is said that  > If the adapter's connectionSpec property is specified, the adapter uses the getConnection variant without argument, else the one with the ConnectionSpec argument.  I think that's erroneous : when the connectionSpec is specified the adapter uses the javax.resource.cci.ConnectionFactory.getConnection(ConnectionSpec) method else it uses javax.resource.cci.ConnectionFactory.getConnection()  That seems to be the behavior of the method org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter.doGetConnection(ConnectionSpec) :  ```java protected Connection doGetConnection(ConnectionSpec spec) throws ResourceException {      if (getTargetConnectionFactory() == null) {           throw new IllegalStateException(""targetConnectionFactory is required"");      }      if (spec != null) {           return getTargetConnectionFactory().getConnection(spec);      }      else {           return getTargetConnectionFactory().getConnection();      } } ```  please fix this sentence in the doc.   ---  **Affects:** 3.0.7, 3.1.1  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: documentation,","spring-projects-issues","2012-06-04T23:46:39Z","2013-01-18T04:46:45Z"
"","14063","exposeAccessContext should also be available for JndiRmiClientInterceptor [SPR-9428]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-9428](https://jira.spring.io/browse/SPR-9428?redirect=false)** and commented  I expose some spring beans in Weblogic using the JndiRmiServiceExporter . To use such beans, on the client side I use JndiRmiProxyFactoryBean.  Everything works well, except that the RMI calls are done anonymously eventhough the credentials are specified in the JNDI environment of the jndiTemplate. After investigation, the problem seems to be that the JNDI context is not kept open during remote method calls, it is created when the stub is created but immediately closed.  For EJB remote calls there is the property exposeAccessContext on AbstractSlsbInvokerInterceptor which exists for this Weblogic case. The same property should be available on the class JndiRmiClientInterceptor to provide the same feature, that is creating an InitialContext before the remote call and closing it after. Without such a feature, it is impossible to use security with Spring remoting and RMI/weblogic   ---  **Affects:** 3.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cca255bc7964ede0cde75bfdea08ecba74f3a069, https://github.com/spring-projects/spring-framework/commit/c374389a5957cf91b5169947b44e9b7df4bf4073  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: enhancement,","spring-projects-issues","2012-05-21T06:29:56Z","2013-01-18T07:44:43Z"
"","13905","PDF documentation still missing images (even in 3.1 final) [SPR-9267]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-9267](https://jira.spring.io/browse/SPR-9267?redirect=false)** and commented  Despite #13323 and #13158 stating that the problem is fixed for 3.1RC1, the final documentation of Spring 3.1 available at http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/pdf/spring-framework-reference.pdf still lacks the images. Please fix the PDF version.  ---  **Affects:** 3.1.1","closed","type: bug,","spring-projects-issues","2012-03-25T09:59:38Z","2019-01-11T12:45:25Z"
"","14140","Spring form tag with HashMap binding problem. [SPR-9506]","**[Sunjoong Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=stainless85)** opened **[SPR-9506](https://jira.spring.io/browse/SPR-9506?redirect=false)** and commented  #### Overview  When I tried to bind a HashMap on a spring form tag, there's a problem.  If the HashMap has no elements, my jsp page prints out ""null"" string.  (a screen capture of the page was attached)  This problem was not shown up on Spring 3.0.5.  Form tags print out an empty string ("""") on JSP page if the HashMap is empty, based on Spring 3.0.5.  Except the ""null output"" problem, everything works fine. ( passing a HashMap object to designated controllers and so on.)  I wonder why the Spring form tag (version 3.1.1) shows ""null""  if a HashMap binded with a form tag is empty.  Is there other way that spring form tag prints out nothing if a binded HashMap has no elements?  Any tips or suggestions are welcomed :)  ---  #### Code Samples  ```html                 	Detail information                    	                                               	 *                       					                  	 *                       				           ```  ``` import org.anyframe.pagination.Page; import org.anyframe.util.StringUtil;  /**  * Controller for Board  */ @Controller @RequestMapping(""/board.do"") public class c{  	private final String PARAM_PAGE_INDEX = ""pageIndex"";  	@Inject 	@Named(""boardService"")     private BoardService boardService;      public void setBoardService(BoardService boardService) {         this.boardService = boardService;     }      @RequestMapping(params = ""method=createView"")      public String createView(@ModelAttribute(""board"") HashMapModel hashMapModel) throws Exception {            return ""generation/board/form"";                        }      @RequestMapping(params = ""method=create"")       public String create(@ModelAttribute(""board"") HashMapModel hashMapModel, BindingResult results, SessionStatus status) throws Exception {     	     	if (results.hasErrors()) { 			return ""generation/board/form""; 		} 		         boardService.create(hashMapModel.getMap());             status.setComplete();                      return ""redirect:/board.do?method=list"";             }      // ... ```  My project uses HashMapModel class which is a wrapper class of HashMap.  ``` import java.util.HashMap; import java.util.Map;  public class HashMapModel {     public HashMapModel()     {         map = new HashMap();     }      public Map getMap()     {         return map;     }      public void setMap(Map map)     {         this.map = map;     }      private Map map; } ```  ---  **Affects:** 3.1.1  **Reference URL:** https://github.com/SpringSource/spring-framework-issues/pull/26  **Attachments:** - [Capture - Empty Hash Map.png](https://jira.spring.io/secure/attachment/19840/Capture+-+Empty+Hash+Map.png) (_15.24 kB_) - [Capture - HashMap with elements.png](https://jira.spring.io/secure/attachment/19839/Capture+-+HashMap+with+elements.png) (_15.41 kB_)","closed","status: bulk-closed,","spring-projects-issues","2012-06-13T22:40:49Z","2019-01-13T07:04:11Z"
"","14300","getNativeConnection using spring  [SPR-9666]","**[subbuz](https://jira.spring.io/secure/ViewProfile.jspa?name=subbuz)** opened **[SPR-9666](https://jira.spring.io/browse/SPR-9666?redirect=false)** and commented  My application uses spring to connect to database and fetch the results. To pass an array object to database WSJdbcUtil.getNativeCnnection is used  while creating oracletype ARRAY object. Currenly the application is running on WAS 6.0  1. Can you please provide information how to get a native connection using spring such that it is not dependent on any Websphere jars 2. Another approach to create OracleType.ARRAY object to be passed to database    --- No further details from [SPR-9666](https://jira.spring.io/browse/SPR-9666?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-08-04T02:27:32Z","2019-01-12T05:28:19Z"
"","14318","@Resource injection regression with scope prototype [SPR-9684]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-9684](https://jira.spring.io/browse/SPR-9684?redirect=false)** and commented  The spring test infrastructure no longer honour prototype-scoped beans if they are injected wiht `@Resource`. It does work with `@Autowired`.  We suspect that #13814 may have brought this regression.  To reproduce, extract the zip and run the tests (either from your IDE or on the command line with Maven). You can validate the regression by running the following command:  ``` mvn clean install -Dspring.version=3.1.1.RELEASE ```  ---  **Affects:** 3.1.2  **Attachments:** - [inject-regression-showcase.zip](https://jira.spring.io/secure/attachment/20192/inject-regression-showcase.zip) (_6.16 kB_)  **Issue Links:** - #14261 Regression: scoped beans being cached too aggressively (_**""duplicates""**_)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2012-08-14T00:56:20Z","2019-01-12T16:47:46Z"
"","14596","Implement java.io.Closeable where appropriate [SPR-9962]","**[Stuart Gunter](https://jira.spring.io/secure/ViewProfile.jspa?name=stuartgunter)** opened **[SPR-9962](https://jira.spring.io/browse/SPR-9962?redirect=false)** and commented  It would be useful if relevant classes within the Spring Framework would implement `java.io.Closeable`, as this would allow them to be automatically closed within try-with-resources blocks as well as Apache Commons / Google Guava's closeQuietly() methods.  One example within the Spring Framework that might benefit from this is `org.springframework.http.client.ClientHttpResponse`.  Perhaps a good starting point would be to identify any classes that provide a close() method and evaluate whether these are suitable candidates?  ---  **Affects:** 3.1.3  **Issue Links:** - #16916 WebSocketSession should extend java.io.Closeable - #17447 TcpConnection should extend java.io.Closeable  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5080f7d70685422ea4a6d5cc276fa761ed9c4b2, https://github.com/spring-projects/spring-framework/commit/ea95da126af330863eb6b0431e86d3819bc97632","closed","type: enhancement,","spring-projects-issues","2012-11-06T03:57:21Z","2019-01-11T14:21:45Z"
"","13864","Response is committed before Interceptor postHandle invoked [SPR-9226]","**[Stuart Gunter](https://jira.spring.io/secure/ViewProfile.jspa?name=stuartgunter)** opened **[SPR-9226](https://jira.spring.io/browse/SPR-9226?redirect=false)** and commented  In certain circumstances, the response is committed before the Interceptor postHandle method is invoked. This appears to be caused when the HandlerMethod is annotated with `@ResponseBody`.  Steps to reproduce: 1. Create a Controller method annotated with `@ResponseBody`. 2. Configure an Interceptor for this path (or all path mappings) 3. Submit a request to the path above, with a breakpoint set in the Interceptor's postHandle method. 4. Check the value of response.isCommitted()  Expected: Response should not be committed  Actual: Response is committed.  Implications: Interceptors are unable to modify the response for `@ResponseBody` HandlerMethods. This prevents Interceptors from being able to add headers to the response.  ---  **Affects:** 3.1.1  **Issue Links:** - #20595 StringHttpMessageConverter flush out response immediately before execute posthandler (_**""is duplicated by""**_) - #14614 Make `@RequestMapping` inject the negotiated MediaType - #15486 Provide better intercepting model for controllers returning `@ResponseBody` (_**""is superseded by""**_)  2 votes, 7 watchers","closed","in: web,","spring-projects-issues","2012-03-12T02:25:22Z","2019-01-13T07:05:48Z"
"","14668","Support bean disposal on ApplicationContext shutdown for Closeable beans [SPR-10034]","**[Stuart Gunter](https://jira.spring.io/secure/ViewProfile.jspa?name=stuartgunter)** opened **[SPR-10034](https://jira.spring.io/browse/SPR-10034?redirect=false)** and commented  When shutting down the ApplicationContext, beans that implement DisposableBean are automatically destroyed. However, not all libraries depend on Spring and instead rely on java.io.Closeable for proper cleanup.  It would be very useful if Spring also called the Closeable.close() method on any bean that implements it.  Is this viable, or would it conflict with other behaviour within the framework?  An example that highlighted this problem is the CouchbaseClient, which is constructed via a FactoryBean, which means the destroy-method cannot be specified on the bean created by the factory. This prevents the app context from shutting down correctly. With the above behaviour, CouchbaseClient could be modified to implement java.io.Closeable and be appropriately destroyed on application termination.  ---  **Affects:** 3.2 RC1  **Issue Links:** - #13393 Support 'destroy method inference' for `@Bean` methods - #20627 Clarify Bean destroyMethod documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c6aa3e43bee04bf713cb0077e6de009bd642abb","closed","type: enhancement,","spring-projects-issues","2012-11-26T03:06:33Z","2019-01-13T07:02:00Z"
"","14682","Fix spring-web tests failing due to debug logging [SPR-10048]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-10048](https://jira.spring.io/browse/SPR-10048?redirect=false)** and commented  `RestTemplateTests` and `WebAsyncManagerTests` fail for me when building Spring on command line (see attached [^TEST-org.springframework.web.client.RestTemplateTests.xml] and [^TEST-org.springframework.web.context.request.async.WebAsyncManagerTests.xml]). In Eclipse IDE (Juno SR1) they pass.  I see there is passing [build job for Linux and JDK7 combination](https://build.springsource.org/browse/SPR-B32X). Not sure which JDK7 is used there.  Here is _mvn --version_ output from my environment:  ``` [sslavic@laptop spring-framework]$ mvn --version Apache Maven 3.0.4 (r1232337; 2012-01-17 09:44:56+0100) Maven home: /home/sslavic/work/tools/apache-maven Java version: 1.7.0_09, vendor: Oracle Corporation Java home: /usr/java/jdk1.7.0_09/jre Default locale: en_US, platform encoding: UTF-8 OS name: ""linux"", version: ""3.6.7-4.fc17.x86_64"", arch: ""amd64"", family: ""unix"" ```  Those two consistently fail.  `ServletRequestUtilsTests` `isFastEnough` performance tests occasionally fail. It's typically first of the ""isFastEnough"" tests that is executed is only one that fails (see attached [^TEST-org.springframework.web.bind.ServletRequestUtilsTests.xml]). Maybe consider adding some warmup to them.  Those `isFastEnough` tests also have a (likely copy-paste) error - all of them have same assertion failure message.   ---  **Affects:** 3.2 RC2  **Attachments:** - [TEST-org.springframework.web.bind.ServletRequestUtilsTests.xml](https://jira.spring.io/secure/attachment/20728/TEST-org.springframework.web.bind.ServletRequestUtilsTests.xml) (_7.17 kB_) - [TEST-org.springframework.web.client.RestTemplateTests.xml](https://jira.spring.io/secure/attachment/20726/TEST-org.springframework.web.client.RestTemplateTests.xml) (_123.46 kB_) - [TEST-org.springframework.web.context.request.async.WebAsyncManagerTests.xml](https://jira.spring.io/secure/attachment/20727/TEST-org.springframework.web.context.request.async.WebAsyncManagerTests.xml) (_50.76 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3c977b54b13c27bdf22747bbee8615d643c9559","closed","type: task,","spring-projects-issues","2012-11-27T13:20:07Z","2019-01-11T18:39:32Z"
"","14665","JmxUtilsTests.testLocatePlatformMBeanServer failing [SPR-10031]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-10031](https://jira.spring.io/browse/SPR-10031?redirect=false)** and commented  See attached test report [^TEST-org.springframework.jmx.support.JmxUtilsTests.xml]  Environment: Oracle JDK 1.7 update 09, x64 Fedora 17 x64  Unlike previous one (#14664), this one fails just in gradle, while in eclipse (Juno SR1 x64) it passes.  ---  **Attachments:** - [TEST-org.springframework.jmx.support.JmxUtilsTests.xml](https://jira.spring.io/secure/attachment/20716/TEST-org.springframework.jmx.support.JmxUtilsTests.xml) (_5.94 kB_)  **Issue Links:** - #13926 JMX related failures in spring-context tests (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-11-25T14:14:52Z","2019-01-12T16:47:22Z"
"","14664","MBeanServerFactoryBeanTests.testWithLocateExistingAndExistingServer failing [SPR-10030]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-10030](https://jira.spring.io/browse/SPR-10030?redirect=false)** and commented  See attached [^TEST-org.springframework.jmx.support.MBeanServerFactoryBeanTests.xml]  Environment: Oracle JDK 1.7 update 09, x64 Fedora 17 x64  ---  **Affects:** 3.2 RC1  **Attachments:** - [TEST-org.springframework.jmx.support.MBeanServerFactoryBeanTests.xml](https://jira.spring.io/secure/attachment/20715/TEST-org.springframework.jmx.support.MBeanServerFactoryBeanTests.xml) (_5.89 kB_)  **Issue Links:** - #13926 JMX related failures in spring-context tests (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-11-25T13:52:22Z","2019-01-12T16:47:23Z"
"","14534","The documentation for AbstractMvcView is incorrect [SPR-9901]","**[Steven Davis](https://jira.spring.io/secure/ViewProfile.jspa?name=daveb1040)** opened **[SPR-9901](https://jira.spring.io/browse/SPR-9901?redirect=false)** and commented  Please update the documentation.   --- No further details from [SPR-9901](https://jira.spring.io/browse/SPR-9901?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-10-21T17:58:55Z","2019-01-12T05:27:52Z"
"","14533","AbstractMvcView.bind method does not do what it says it will do. [SPR-9900]","**[Steven Davis](https://jira.spring.io/secure/ViewProfile.jspa?name=daveb1040)** opened **[SPR-9900](https://jira.spring.io/browse/SPR-9900?redirect=false)** and commented  The documentation for AbstractMvcView is incorrect, and has lead to A TON of issues with our production code.  Here is the comment:  In the absence of binding configuration all request parameters will be used to update matching fields on the model.  This is not the case.  It doesn't update matching fields on the model...  it calls corresponding getter and setter methods, regardless of what's on the model, or in the case of the getters, doesn't verify if the return type is serialized.  Our issue is, we have TONS of controllers and webflows that use models that, unfortunately, have convenience methods on them, which are unrelated to the model itself.  BAD PRACTICE!  TRUST ME...  I KNOW!  Anyway, most of these things don't have setAllowableFields or binder tags on them, (again, this is our fault) but we are looking for a way to restrict by ""Return type"" on the getter methods in case something sensitive is exposed, until we can get to fixing all of our code.  1) This comment in this code has caused an enormous misconception of the functionality of binding, and needs to be updated. 2) Is there a way to restrict getters from being invoked in BeanWrapperImpl by return types on a global level by returnType?  (ie, UserCredentials, etc...)  Any assistance you could offer would be greatly appreciated.  Thanks   ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?131194-Restrict-binding-quot-getter-quot-calls-by-return-type-class","closed","status: invalid,","spring-projects-issues","2012-10-21T17:28:59Z","2019-01-12T05:27:54Z"
"","14319","Method-based autowiring fails in certain contexts [SPR-9685]","**[Steve van Loben Sels](https://jira.spring.io/secure/ViewProfile.jspa?name=stevevls)** opened **[SPR-9685](https://jira.spring.io/browse/SPR-9685?redirect=false)** and commented  If an application context contains more than one instance of a bean whose class has an `@Autowired` setter method, then it's possible that some of the beans' dependencies do not get injected.  The attached TestNG unit test demonstrates the bug.  It creates two singletons of type AutowiredMethodBean...one from XML and the other from a `@Configuration`.  When the bean defined in the XML is initialized first, then the JavaConfig's bean will not be autowired and the test will fail.  The order in which the beans are instantiated is crucial...the test passes if the JavaConfig bean is created first.  This problem looks to be due to the cached metadata in AutowiredAnnotationBeanPostProcessor.  If the metadata is lazily created when initializing the XML bean with its explicit property declaration, then the field is marked as skipped and injection won't be attempted on the JavaConfig bean.  This unit test uses a mixed XML/JavaConfig application context because that's the configuration of the application I was working on when I discovered the issue.  I suspect that it's possible to manifest with XML-only configuration if the first bean has the property explicitly set and the second uses autowiring.   ---  **Affects:** 3.1.2  **Attachments:** - [applicationContext-autowiring-bug.xml](https://jira.spring.io/secure/attachment/20193/applicationContext-autowiring-bug.xml) (_431 bytes_) - [AutowiringBugTest.java](https://jira.spring.io/secure/attachment/20194/AutowiringBugTest.java) (_2.47 kB_)","closed","in: core,","spring-projects-issues","2012-08-14T01:49:53Z","2019-01-12T16:36:04Z"
"","14223","inherited @Lazy annotation not picked up for scanned @Components [SPR-9589]","**[Steve van Loben Sels](https://jira.spring.io/secure/ViewProfile.jspa?name=stevevls)** opened **[SPR-9589](https://jira.spring.io/browse/SPR-9589?redirect=false)** and commented  The `@Lazy` annotation is specified as an inheritable, which implies that it can be added to a base class and all of its subclasses will be lazy-initialized unless otherwise specified.  However, when a bean gets picked up using `@ComponentScan`, the annotation on the base class does not come into effect, and unless the subclass has also specified that it's `@Lazy`, it gets eagerly initialized.  See the attached source files for a demonstration.  The com.example.Config will scan for components in its own package, com.example.AbstractComponent is an abstract base class annotated as `@Lazy`, and com.example.MyComponent extends AbstractComponent and is marked as a `@Component`.  The expected behavior is that instantiating the application context for com.example.Config will not result in the afterPropertiesSet() method on com.example.MyComponent being invoked because it should be lazy.  However, you'll see that it does get invoked and prints out ""Initialized!"" to stdout.  ---  **Affects:** 3.1.2  **Attachments:** - [AbstractComponent.java](https://jira.spring.io/secure/attachment/20097/AbstractComponent.java) (_121 bytes_) - [Config.java](https://jira.spring.io/secure/attachment/20096/Config.java) (_271 bytes_) - [MyComponent.java](https://jira.spring.io/secure/attachment/20098/MyComponent.java) (_280 bytes_)  **Issue Links:** - #14111 `@DependsOn` inheritence appears not to function as defined  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87b7e3d8cff3db9d225485c26437f1eacfb0651e","closed","in: core,","spring-projects-issues","2012-07-12T12:31:47Z","2019-01-13T07:03:50Z"
"","14377","using javax.servlet.http.Part with RequestParam results in IllegalStateException (""no matching editors or conversion strategy found"") [SPR-9743]","**[Stefan Lang](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan12345)** opened **[SPR-9743](https://jira.spring.io/browse/SPR-9743?redirect=false)** and commented  Configured as documented,  in web.xml:  ``` 	 		... 		 			5242880 		 	  ```  bean config:  ```  ```  controller method:  ``` @RequestMapping(value = ""/fubar.do"", method = RequestMethod.POST) 	public String fubar(Model model, @PathVariable Integer number, @RequestParam(""file"") Part file) throws Exception { ... ```  html form:  ```               Upload:                         ```  Worked with Spring 3.0.7, results in following exception with Spring 3.1.2:  ``` java.lang.IllegalStateException: Cannot convert value of type [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile] to required type [javax.servlet.http.Part]: no matching editors or conversion strategy found 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:241) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:92) 	at org.springframework.beans.SimpleTypeConverter.convertIfNecessary(SimpleTypeConverter.java:49) 	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:553) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveRequestParam(HandlerMethodInvoker.java:515) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:348) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:171) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:436) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:424) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:923) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:789) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:688) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:770) 	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1542) ... ```    ---  **Affects:** 3.1 GA  **Reference URL:** http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-multipart-resolver-standard","closed","status: declined,","spring-projects-issues","2012-08-30T07:56:37Z","2019-01-12T16:25:17Z"
"","14674","Handling of BeanInfo broken [SPR-10040]","**[Stefan Gheorghiu](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.gheorghiu)** opened **[SPR-10040](https://jira.spring.io/browse/SPR-10040?redirect=false)** and commented  It seems that after introducing of support for non-void setters, the functionality of BeanInfo introspection that worked in 3.0.x is now broken. Version 3.1.3 simply ignores property descriptors extracted from BeanInfo classes. The most recent snapshot of 3.1.4 extracts the appropriate data correctly but still fails due to a wrong assumption that read methods should start from either ""get"" or ""is"", which contradicts to JavaBeans specs, stating that one should not rely on names as long as BeanInfo is present.  I use Spring MVC in conjunction with Scala classes for form binding. Scala has different naming convention for property-like accessors which are incompatible with JavaBeans. However, if a class is annotated with `@BeanInfo`, the appropriate *BeanInfo class is generated during the compile time pointing to correct getters/setters. This functionality worked perfectly before refactoring of BeanWrapperImpl happened in 3.1 branch.   ---  **Affects:** 3.1.3","closed","in: core,","spring-projects-issues","2012-11-26T11:12:53Z","2012-12-10T04:04:54Z"
"","14150","Quartz-2.1.5 is not working in Spring 3.1.0. RELEASE [SPR-9516]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-9516](https://jira.spring.io/browse/SPR-9516?redirect=false)** and commented  Hi, I'm using quartz-2.1.5 and Spring 3.1.0. RELEASE, I'm facing the some problem while starting the Server itself. Log is as follows  ``` Failed to define class org.springframework.scheduling.quartz.JobDetailBean in Module ""deployment.egov.ear:main"" from Service Module Loader: java.lang.IncompatibleClassChangeError: class org.springframework.scheduling.quartz.JobDetailBean has interface org.quartz.JobDetail as super class     at java.lang.ClassLoader.defineClass1(Native Method) [:1.6.0_13]     at java.lang.ClassLoader.defineClass(ClassLoader.java:621) [:1.6.0_13]     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124) [:1.6.0_13]     at org.jboss.modules.ModuleClassLoader.defineClass(ModuleClassLoader.java:397)     at org.jboss.modules.ModuleClassLoader.loadClassLocal(ModuleClassLoader.java:261)     at org.jboss.modules.ModuleClassLoader$1.loadClassLocal(ModuleClassLoader.java:76)     at org.jboss.modules.Module.loadModuleClass(Module.java:590)     at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:183)     at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:361)     at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:310)     at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:103)     at org.springframework.util.ClassUtils.forName(ClassUtils.java:257) [org.springframework.core-3.1.0.RELEASE.jar:]     at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:417) [org.springframework.beans-3.1.0.RELEASE.jar:]     at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1283) [org.springframework.beans-3.1.0.RELEASE.jar:]     at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1254) [org.springframework.beans-3.1.0.RELEASE.jar:]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:576) [org.springframework.beans-3.1.0.RELEASE.jar:]     at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1331) [org.springframework.beans-3.1.0.RELEASE.jar:]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:317) [org.springframework.beans-3.1.0.RELEASE.jar:]     at org.springframework.context.support.DefaultLifecycleProcessor.getLifecycleBeans(DefaultLifecycleProcessor.java:266) [org.springframework.context-3.1.0.RELEASE.jar:]     at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:125) [org.springframework.context-3.1.0.RELEASE.jar:] ```    ---  **Affects:** 3.1 GA","closed","in: core,","spring-projects-issues","2012-06-19T06:06:32Z","2019-01-12T05:28:33Z"
"","14025","FreeMarkerConfigurationFactory's instance variable become enlarged whenever call create method. [SPR-9389]","**[SPT Developer](https://jira.spring.io/secure/ViewProfile.jspa?name=hk)** opened **[SPR-9389](https://jira.spring.io/browse/SPR-9389?redirect=false)** and commented  ""FreeMarkerConfigurationFactory.createConfiguration()"" uses instance variable ""templateLoaders"" (List). This method adds loaders to ""templateLoaders"" directly.      if (this.preTemplateLoaders != null) {         this.templateLoaders.addAll(this.preTemplateLoaders); // Line 298     }     ...  If I call this method many times, ""templateLoaders"" contains great number of same loader. I think, local variable is need for loaders.  +         List templateLoaders = new ArrayList();  +           templateLoaders.addAll(this.templateLoaders);                if (this.preTemplateLoaders != null) {  !           templateLoaders.addAll(this.preTemplateLoaders); } ...  Thank you for your consideration.   ---  **Affects:** 3.0.3  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2012-05-08T19:23:15Z","2013-01-16T04:53:41Z"
"","14627","form:form tag doesn't urlencode generated action attribute  [SPR-9993]","**[spr1ng.n1](https://jira.spring.io/secure/ViewProfile.jspa?name=spr1ng.n1)** opened **[SPR-9993](https://jira.spring.io/browse/SPR-9993?redirect=false)** and commented  Using form:form tag without action attribute makes Spring autogenerate it but not properly url encode it.  F.e. lets tak czech word for 'woman': url %C5%BEna , utf8 žena, iso-8859-1 Å¾ena  on url /žena  the form gets this action /Å¾ena  using this filter in web.xml: \ \encodingFilter\ \org.springframework.web.filter.CharacterEncodingFilter\ \ \encoding\ \UTF-8\ \ \ \forceEncoding\ \true\ \ \           	encodingFilter     	/*       lefts action in utf8 /žena , which at least works but still is not correct as it should be %C5%BEena .  I think there is just missing the encoding logic something like URLEncoder.encode.  As current workaround I'm gonna supply manually urlencoded action attribute.  Thanks for your time and possible response.   ---  **Affects:** 3.1 GA","closed","status: declined,","spring-projects-issues","2012-11-15T13:24:32Z","2019-01-12T16:24:51Z"
"","14583","unable to map urls with and without trailing slash on different methods / controllers [SPR-9950]","**[spr1ng.n1](https://jira.spring.io/secure/ViewProfile.jspa?name=spr1ng.n1)** opened **[SPR-9950](https://jira.spring.io/browse/SPR-9950?redirect=false)** and commented  After whole nights' investigation I was unable to find solution how to map (=distinguish) urls with and without trailing slash to different methods / controllers.  For example: `@RequestMapping`(value = ""/{album}/"") `@RequestMapping`(value = ""/{artist}"")  I did understood it was probably designed in 3.1 onwards like this to make it easy for people who presumes it's the same, although in fact it isn't from the REST point of view and I really thing it really limits Spring's flexibility.  It was probably problematical to implement it so the mainstream would be satisfied without sacrificing the ability to distinguish it.  I'd just like to ask, whether it would be possible to enable this usage by extending the way it already works, that in case there's only /{album} mapping to let /{album}/ request fall here also like it is already now, but in case there's also present more concrete /{album}/ mapping to use this one as this one fits exactly.  Thanks for your time and possible response.  Dear David   ---  **Affects:** 3.1 GA","closed","status: declined,","spring-projects-issues","2012-11-02T23:10:53Z","2019-01-12T16:24:52Z"
"","14660","Spring eats @PathVariable part after last dot [SPR-10026]","**[spr1ng.n1](https://jira.spring.io/secure/ViewProfile.jspa?name=spr1ng.n1)** opened **[SPR-10026](https://jira.spring.io/browse/SPR-10026?redirect=false)** and commented  `@RequestMapping`(value = ""/{var}"", method = RequestMethod.GET) public String show(`@PathVariable` String var, Model m) { System.out.println(var); }  for url: ""/hello.anything"" outputs ""hello"" for url: ""/hello.anything.else"" outputs ""hello.anything""  ---  **Affects:** 3.1 GA  **Issue Links:** - #10832 a Uri Value is incorrectly extracted if it contains '.'. (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2012-11-24T14:29:05Z","2019-01-12T16:47:26Z"
"","14301","Controller request mapping regression when migrating from 3.1.1 to 3.2 [SPR-9667]","**[Sorriso](https://jira.spring.io/secure/ViewProfile.jspa?name=sorriso)** opened **[SPR-9667](https://jira.spring.io/browse/SPR-9667?redirect=false)** and commented  I have an application built against 3.1.1.RELEASE and I want to upgrade it to 3.2.0.BUILD-SNAPSHOT in order to add & use ""chat"" feature.  - with spring 3.1.1, it works fine with tomcat 7.0.29 and jetty 8.1.5.v20120716 - when migrating to 3.2, I get an error message with both tomcat & jetty: ```   ""No mapping found for HTTP request with URI [/test/index.html]""  ```  Maybe have I a wrong configuration, but it should upgrade smoothly. ```    ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/50df146f411ef14799a5af689e36f0389f0a452b, https://github.com/spring-projects/spring-framework-issues/commit/67929277d4a2711eb01fe949db7f45e7c1557ba3","closed","in: web,","spring-projects-issues","2012-08-04T06:00:11Z","2019-01-11T12:58:59Z"
"","14547","Provide a way to handle timeouts for Servlet 3 async requests [SPR-9914]","**[Sonal Patidar](https://jira.spring.io/secure/ViewProfile.jspa?name=sonalp)** opened **[SPR-9914](https://jira.spring.io/browse/SPR-9914?redirect=false)** and commented  Need a way to handle timeout exception on async requests but DefaultTimeoutHandler in StandardServletAsyncWebRequest does not re throw the exception. I would like to customize the response on async timeouts. Thanks.   ---  **Affects:** 3.2 M2  **Reference URL:** http://static.springsource.org/spring-framework/docs/3.2.0.M2/api/org/springframework/web/context/request/async/StandardServletAsyncWebRequest.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d701464517d66b095485671413e4150d9b5f14e3, https://github.com/spring-projects/spring-framework/commit/e14ba9dec329b0f2f3ea414e8119957abd8a2a4c, https://github.com/spring-projects/spring-framework/commit/f036ed639f95b64842aa0abe742cad26f37cc50b, https://github.com/spring-projects/spring-framework/commit/cb867121870b064df622274a0afc13d6198ba2c6  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-10-23T11:30:23Z","2012-11-04T06:54:06Z"
"","14508","Allow configurable await time in TestCallableInterceptor in test mvc [SPR-9875]","**[Sonal Patidar](https://jira.spring.io/secure/ViewProfile.jspa?name=sonalp)** opened **[SPR-9875](https://jira.spring.io/browse/SPR-9875?redirect=false)** and commented  TestCallableInterceptor's await only waits for 5 seconds before returning false. Could we please make this await time configurable?   ---  **Affects:** 3.2 RC1  **Reference URL:** https://github.com/SpringSource/spring-framework/blob/master/spring-test-mvc/src/main/java/org/springframework/test/web/mock/servlet/TestDispatcherServlet.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3bb515bec72b1984ae422f7a9da12e412978f61c  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-10-11T13:28:23Z","2012-11-04T06:54:05Z"
"","14342","WebMvcConfigurationSupport should support Spring MessageSource as JSR 303 message interpolator by default [SPR-9708]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-9708](https://jira.spring.io/browse/SPR-9708?redirect=false)** and commented  #### Status Quo  `WebMvcConfigurationSupport` instantiates a `LocalValidatorFactoryBean` if JSR 303 is supported. However, it does not set the Spring `MessageSource` as the `messageInterpolator` by default.  #### Workaround  Extend `WebMvcConfigurationSupport` and add the following 2nd statement.  ``` validator = (Validator) BeanUtils.instantiate(clazz); ((LocalValidatorFactoryBean) validator).setValidationMessageSource(messageSource); // messageSource is Autowired ```  ---  **Affects:** 3.1 GA, 3.1.1, 3.1.2  **Issue Links:** - #16248 Add support for custom messages when using Apache BVAL as JSR303 validation provider  2 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2012-08-19T20:21:25Z","2020-08-24T17:44:14Z"
"","14257","WebMvcConfigurationSupport's addDefaultHttpMessageConverters should not be final [SPR-9623]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-9623](https://jira.spring.io/browse/SPR-9623?redirect=false)** and commented  The WebMvcConfigurationSupport's addDefaultHttpMessageConverters method is protected but final, which I could not extends the class and modify the default message converters   ---  **Affects:** 3.1.2","closed","status: declined,","spring-projects-issues","2012-07-23T08:06:07Z","2019-01-12T16:36:14Z"
"","14114","Missing @Configuration annotation will cause transaction not working [SPR-9479]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-9479](https://jira.spring.io/browse/SPR-9479?redirect=false)** and commented  The Spring reference didn't mention that I MUST use `@Configuration` for the configuration class being imported. And I found that the bean could be created normally most of the time.  The case I found that if `@Configuration` is missing, transaction is not behave normally in some cases.  I have setup a simple program to illustrate this. Please refer to ""readme.txt"" for the running procedures. From the log, I have checked that the transaction commit command has been issued, but the end result is the value is not committed.  In the example, I have already used SingleConnectionDataSource, to avoid multiple database connection issue.  I have also tried to move the `@EnableTransactionManagement` and transactionManager() to other Spring Java Config class (no matter with/without `@Configuration`), but the problem still occurs.  ---  **Affects:** 3.1.1  **Attachments:** - [TestSpring31Transaction.zip](https://jira.spring.io/secure/attachment/19822/TestSpring31Transaction.zip) (_8.20 kB_)  **Issue Links:** - #13690 spring-test allows you to reference configuration classes that aren't annotated with `@Configuration` (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2012-06-06T21:14:01Z","2019-01-13T07:04:24Z"
"","14102","Document correct data sql file name in default scripts of embedded database in reference manual [SPR-9467]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-9467](https://jira.spring.io/browse/SPR-9467?redirect=false)** and commented  In Spring Reference Documentation Section 13.8.8 [Testing data access logic with an embedded database](http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#jdbc-embedded-database-dao-testing), the default data script name is `""test-data.sql""`; however, from the source code of `EmbeddedDatabaseBuilder.addDefaultScripts()` the data script name should be called `""data.sql""` instead.   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-06-05T04:06:18Z","2012-06-19T15:48:01Z"
"","14099","Method postProcessBeanDefinitionRegistry is not called if the bean implements BeanDefinitionRegistryPostProcessor [SPR-9464]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-9464](https://jira.spring.io/browse/SPR-9464?redirect=false)** and commented  The issue could be revealed if MyBatis for Spring is used.  MapperScannerConfigurer in MyBatis for Spring v1.1.0+ has changed to use BeanDefinitionRegistryPostProcessor instead of BeanFactoryPostProcessor as of v1.0.x for scanning MyBatis mapper resources.  The case is postProcessBeanDefinitionRegistry(BeanDefinitionRegistry beanDefinitionRegistry) is not called by Spring container if MapperScannerConfigurer is created through `@Bean` (but it will be called if the bean is created through XML configuration)  ---  **Affects:** 3.1.1  **Attachments:** - [TestSpring31MyBatis.zip](https://jira.spring.io/secure/attachment/19798/TestSpring31MyBatis.zip) (_10.58 kB_)  **Issue Links:** - #12525 BeanDefinitionRegistryPostProcessor registered via `@Bean` will not be invoked (_**""duplicates""**_) - #12917 BeanFactoryPostProcessor breaks default post-processing of `@Configuration` classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/a1584d7aa1906ab06ffe0dc8161c187647c8f6cc","closed","in: core,","spring-projects-issues","2012-06-03T21:28:54Z","2019-01-13T07:04:28Z"
"","14120","@Configuration bean created in @Bean method not enhanced by CGLIB [SPR-9485]","**[Simon Lavigne-Giroux](https://jira.spring.io/secure/ViewProfile.jspa?name=simonlg)** opened **[SPR-9485](https://jira.spring.io/browse/SPR-9485?redirect=false)** and commented  I'm trying to create a MainConfig that imports another Config by using a `@Bean` method instead of `@Import` like this :  `@Configuration` public class MainConfig {  `@Bean` public Service service() { return new Service(infrastructureConfig().database()); }  `@Bean` public OtherService otherService() { return new OtherService(infrastructureConfig().database()); }  `@Bean` public InfrastructureConfig intrastructureConfig() { return new InfrastructureConfig(); }  }  `@Configuration` public class InfrastructureConfig {  `@Bean` public Database database() { return new Database(); }  ... }  When using this technique, the Database is created twice because Spring doesn't seem to consider the `@Configuration` annotation on InfrastructureConfig and debugging shows that InfrastructureConfig is not enhanced by CGLIB. When using `@Import`, it works fine.  I don't want to use `@Import` because I want to mock my InfrastructureConfig like this :  `@Configuration` public class TestConfig extends MainConfig {  `@Override` public InfrastructureConfig infrastructureConfig() { return mock(InfrastructureConfig.class); } }   ---  **Affects:** 3.1.1","closed","in: core,","spring-projects-issues","2012-06-08T09:03:14Z","2019-01-12T16:36:20Z"
"","14309","MySqlEmbeddedDatabaseConfigurer [SPR-9675]","**[Simon E. Silva Lauinger](https://jira.spring.io/secure/ViewProfile.jspa?name=simonsilvalauinger)** opened **[SPR-9675](https://jira.spring.io/browse/SPR-9675?redirect=false)** and commented  Hi Folk, I wrote an EmbeddedDatabaseConfigurer for MySQL. Maybe somebody can take a look on it. I would be glad if this class would be merged into the next release.   ---  **Attachments:** - [MySqlEmbeddedDatabaseConfigurer.java](https://jira.spring.io/secure/attachment/20148/MySqlEmbeddedDatabaseConfigurer.java) (_2.77 kB_)","closed","type: enhancement,","spring-projects-issues","2012-08-08T09:25:32Z","2018-12-28T16:07:50Z"
"","13898","incorrect message in BeanCreationException [SPR-9260]","**[Shriniwas Kulkarni](https://jira.spring.io/secure/ViewProfile.jspa?name=shriniwas.kulkarni@synechron.com)** opened **[SPR-9260](https://jira.spring.io/browse/SPR-9260?redirect=false)** and commented  When creating a static constant through util:constant, I tried assigning it a value instead of a class's static field. This resulted in an exception, but the message read as follows:  ""Error creating bean with name 'myConstant': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: staticField must be a fully qualified class plus method name: e.g. 'example.MyExampleClass.MY_EXAMPLE_FIELD'""  it should instead say ""... static Field must be a fully qualified class plus **static field** name...""   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4653dbe73f3c0d39e361cc514f2bca17c670531f","closed","type: bug,","spring-projects-issues","2012-03-22T07:09:38Z","2012-06-19T03:39:44Z"
"","14426","DefaultConversionService fails to convert String to char[] [SPR-9793]","**[Shevek](https://jira.spring.io/secure/ViewProfile.jspa?name=shevek)** opened **[SPR-9793](https://jira.spring.io/browse/SPR-9793?redirect=false)** and commented      at org.springframework.core.convert.support.StringToArrayConverter.convert(StringToArrayConverter.java:55)  ... this isn't really converting my String to a char[].  It accepted because there's a StringToCharacterConverter. So what I'm going to get is an array wrapped around a single character. Meh. What I want is String.getChars(""UTF-8""), which would be useful.   ---  **Affects:** 3.1.1","closed","status: declined,","spring-projects-issues","2012-09-12T21:42:09Z","2019-01-12T16:25:13Z"
"","14425","Allow TypeDescriptor array construction [SPR-9792]","**[Shevek](https://jira.spring.io/secure/ViewProfile.jspa?name=shevek)** opened **[SPR-9792](https://jira.spring.io/browse/SPR-9792?redirect=false)** and commented  I can create a Java Type for Map[].  I cannot create a TypeDescriptor for a Map[].  TypeDescriptor.collection(Map[].class, TypeDescriptor.map(String,String)) fails because Map[] does not extend collection.  While there seem to be several hooks for class.isArray(), I cannot specify an element type via any constructor which lets me set an array class.  Please unprotect something to make this useful.   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-09-12T21:39:30Z","2013-01-22T15:52:07Z"
"","13986","add support for something like webjars [SPR-9348]","**[Shane Witbeck](https://jira.spring.io/secure/ViewProfile.jspa?name=digitalsanctum)** opened **[SPR-9348](https://jira.spring.io/browse/SPR-9348?redirect=false)** and commented  I read this blog post from James Ward today and thought something like webjars would be a great addition to Spring MVC:  http://www.jamesward.com/2012/04/25/introducing-webjars-web-libraries-as-managed-dependencies  The only bad part about his implementation is that it appears to depend on a third party maven repo hosted on github.  Having the ability to manage static assets in much the same way you would any other maven dependency seems like a worthwhile feature to entertain.  Thoughts?   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-04-26T06:11:34Z","2012-05-01T14:21:59Z"
"","13907","MailSender blocks instead of throwing exception for incorrect parameters [SPR-9269]","**[Shalvika](https://jira.spring.io/secure/ViewProfile.jspa?name=shalvika)** opened **[SPR-9269](https://jira.spring.io/browse/SPR-9269?redirect=false)** and commented  I am using the Grails mail plugin to send emails. If I configure incorrect javaMailProperties or don't provide any properties for a smtp server (using gmail in this case), then the MailSender.send method does not throw any exception. I have modified the plugin to put this code:  MailMessage sendMessage() { //do something try{ mailSender.send(message instanceof MimeMailMessage ? message.mimeMessage : message) }catch(Exception e){ println ""here in exception ""+e.getMessage() } }  Despite this, no exception is caught and instead the thread does not return from this call.  I found a similar issue here : http://www.coderanch.com/t/535326/java/java/javamail-method-blocks-instead-throwing but no solution.   --- No further details from [SPR-9269](https://jira.spring.io/browse/SPR-9269?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-03-27T04:27:53Z","2019-01-12T03:48:49Z"
"","14284","DefaultAopProxyFactory does not handle final classes [SPR-9650]","**[Seyyed Jamaleddin Pishvayi](https://jira.spring.io/secure/ViewProfile.jspa?name=seyyedjamal)** opened **[SPR-9650](https://jira.spring.io/browse/SPR-9650?redirect=false)** and commented  DefaultAopProxyFactory does not handle final classes. Because cglib can not extend target class. I patched two classes of version 3.0.5 to solve the problem by use of JdkDynamicAopProxy for final classes. Patched lines are marked by ""PATCHED"".   ---  **Attachments:** - [proxy_for_final2.zip](https://jira.spring.io/secure/attachment/20138/proxy_for_final2.zip) (_3.79 kB_)","closed","status: bulk-closed,","spring-projects-issues","2012-07-28T06:01:29Z","2019-01-12T02:46:59Z"
"","14500","Unscalable code in Jaxb2Marshaller [SPR-9867]","**[Serkan Kaba](https://jira.spring.io/secure/ViewProfile.jspa?name=serkan)** opened **[SPR-9867](https://jira.spring.io/browse/SPR-9867?redirect=false)** and commented  Jaxb2Marshaller.getJaxbContext() is synchronized and is in code path of both marshal() and unmarshal(). I think this should be synchronized if and only if it's not lazily initialized.   --- No further details from [SPR-9867](https://jira.spring.io/browse/SPR-9867?redirect=false)","closed","type: bug,","spring-projects-issues","2012-10-09T04:21:41Z","2012-11-04T06:54:02Z"
"","14094","CronSequenceGenerator fails to accurately compute earliest next date when using second expression [SPR-9459]","**[sebdotv](https://jira.spring.io/secure/ViewProfile.jspa?name=sebdotv)** opened **[SPR-9459](https://jira.spring.io/browse/SPR-9459?redirect=false)** and commented  If using an expression containing seconds like ""*/15 * 1-4 * * *"", CronSequenceGenerator will compute the following next dates: - from 01-june-2012 9:53:50 -> the next day at 1:00:00, which is correct - from 01-june-2012 9:53:00 -> the next day at 1:00:15, which is not the earliest possible schedule (above)  Corresponding test case attached.  ---  **Affects:** 3.1.1  **Attachments:** - [CronSequenceGeneratorTest.java](https://jira.spring.io/secure/attachment/19788/CronSequenceGeneratorTest.java) (_1.10 kB_)  **Issue Links:** - #11525 Scheduled tasks seem to run twice - #19158 CronSequenceGenerator.next() is not implemented as documented","closed","in: core,","spring-projects-issues","2012-06-01T01:12:47Z","2019-01-11T13:02:30Z"
"","14252","Possibility to use customized MessageFormat subclasses with MessageSource [SPR-9618]","**[Sebastien Lorber](https://jira.spring.io/secure/ViewProfile.jspa?name=sebastienlorber)** opened **[SPR-9618](https://jira.spring.io/browse/SPR-9618?redirect=false)** and commented  Hello,  In the following method: org.springframework.context.support.MessageSourceSupport#createMessageFormat  There is ""new MessageFormat(...)"". This is not cool because we may need to extend the MessageFormat class in some cases (for exemple so that we can format dates in the right timezone).  I think it would be better to have a MessageFormatFactory class that we could set in the MessageSourceSupport and that would allow use to create custom message formats inside spring MessageSource.  Actually the only solution i have to do it is to subclass: org.springframework.context.support.ReloadableResourceBundleMessageSource But as you know composition is better than inheritance.  Tell me if you'are ok with that and i'll do a pull request   ---  **Affects:** 3.2 M1","closed","status: bulk-closed,","spring-projects-issues","2012-07-23T04:06:58Z","2019-01-12T02:47:11Z"
"","14306","Destroy method of session scoped bean cannot access other session scoped bean [SPR-9672]","**[Sebastian Paul](https://jira.spring.io/secure/ViewProfile.jspa?name=sebpaul)** opened **[SPR-9672](https://jira.spring.io/browse/SPR-9672?redirect=false)** and commented  Destroy method of session scoped bean cannot access other session scoped bean:  CommonAnnotationBeanPostProcessor - postProcessBeforeDestruction - Invocation of destroy method failed on bean with name 'scopedTarget.applicationManagerImpl': org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.localizationManagerImpl': Scope 'session' is not active for the current thread; ...  In my concrete case, applicationManagerImpl tries to remove an event listener from localizationManagerImpl. Of course, he only knows about the interface, so he is not aware of the fact that localizationManagerImpl is also session scoped (deregistration of listener is not really necessary).  The problem is caused by the missing HttpServletRequest, which usually carries the session. When sessions expire, no request is active, so the RequestContextHolder has no RequestAttributes      at org.springframework.web.context.request.DestructionCallbackBindingListener.valueUnbound(DestructionCallbackBindingListener.java:51) [spring-web-3.1.2.RELEASE.jar:3.1.2.RELEASE]     at org.apache.catalina.session.StandardSession.removeAttributeInternal(StandardSession.java:1710) [catalina.jar:6.0.35.B]     at org.apache.catalina.session.StandardSession.expire(StandardSession.java:812) [catalina.jar:6.0.35.B]     at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:587) [catalina.jar:6.0.35.B]     at org.apache.catalina.session.ManagerBase.processExpires(ManagerBase.java:714) [catalina.jar:6.0.35.B]     at org.apache.catalina.session.ManagerBase.backgroundProcess(ManagerBase.java:699) [catalina.jar:6.0.35.B]     at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1368) [catalina.jar:6.0.35.B]     at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1653) [catalina.jar:6.0.35.B]     at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1662) [catalina.jar:6.0.35.B]     at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1662) [catalina.jar:6.0.35.B]     at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1642) [catalina.jar:6.0.35.B]  Spring should handle this by setting up a RequestAttributes instance which carries the session which is passed to org.springframework.web.context.request.DestructionCallbackBindingListener.valueUnbound(HttpSessionBindingEvent) Then, referencing session scoped dependencies should still be possible.   ---  **Affects:** 3.1.2  2 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-08-07T07:22:21Z","2019-01-12T02:46:53Z"
"","14548","Interceptors aren't always called in the handler chain. [SPR-9915]","**[Scott Parry](https://jira.spring.io/secure/ViewProfile.jspa?name=sparry)** opened **[SPR-9915](https://jira.spring.io/browse/SPR-9915?redirect=false)** and commented  When an interceptor will match a given URL but no controller perfectly matches the given URL a PageNotFound Warning is logged and a 405 HTTP status code is returned to the browser saying ""Request method 'POST' not supported"" even though the interceptor could have handled the request.   ---  **Affects:** 3.1.2","closed","status: declined,","spring-projects-issues","2012-10-23T12:35:10Z","2019-01-12T16:24:57Z"
"","14073","Improve documentation for validation and data binding [SPR-9437]","**[Scott Frederick](https://jira.spring.io/secure/ViewProfile.jspa?name=scottyfred)** opened **[SPR-9437](https://jira.spring.io/browse/SPR-9437?redirect=false)** and commented  The Spring Framework reference documentation contains two main sections on validation on the ""Validation, Data Binding, and Type Conversion"" page (http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/validation.html). One section has a description and examples of the Validator interface, and another section much further down the page has a description and examples of declarative validation using JSR-303 Bean Validation.  These two sections should be brought together into one cohesive section on validation, including a description of how the two approaches can be used together in the same application.  As time goes on, the distinction between Spring 3 and pre-3 features becomes less important (especially since versions of the documentation for older versions of the framework are easily accessible). It is less important for the documentation to divided along ""historical"" and ""Spring 3"" lines going forward.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a16bad04f0939f04210f937fbff8fb620951fb90  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-05-24T11:31:52Z","2013-01-14T19:03:31Z"
"","14072","Improve support for registering Validator implementations in Spring MVC [SPR-9436]","**[Scott Frederick](https://jira.spring.io/secure/ViewProfile.jspa?name=scottyfred)** opened **[SPR-9436](https://jira.spring.io/browse/SPR-9436?redirect=false)** and commented  There are two ways that Spring MVC supports validation of model objects in a web application - code-based validation using the Spring org.springframework.validation.Validator interface and declarative validation using JSR-303 Bean Validation.  Bean Validation support is enabled by default when MVC features are enabled using the  namespace or the `@EnableWebMvc` configuration annotation.  There currently is not a good way to use Validator implementations and Bean Validation together in the same application. It is also difficult to use more than one discreet Validator implementation in a Controller. A single Validator implementation can be registered in the application context, which effectively disables Bean Validation for the application. A single Validator can be registered for a Controller in an `@InitBinder-annotated` method, which effectively disables Bean Validation for that Controller.  There should be a way to register multiple Validator implementations with the framework and have them invoked along with Bean Validation during the data binding process.  ---  **Affects:** 3.1 GA  **Issue Links:** - #9451 `@Validator`, `@Validate` (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/54c873b4c430a6c13698080fcde99835ca2a541b  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-05-24T11:19:09Z","2019-01-13T07:04:35Z"
"","14178","Expose handler bean in ResourcesBeanDefinitionParser. [SPR-9544]","**[Scott Carlson](https://jira.spring.io/secure/ViewProfile.jspa?name=scarlsonspring)** opened **[SPR-9544](https://jira.spring.io/browse/SPR-9544?redirect=false)** and commented  I attempted to use  to map to some application PDFs.  However, IE8 fails with the settings from preventCaching() (See #14177).  To set the pragma correctly, I had to manually wire up the same logic from ResourcesBeanDefinitionParser.  If the implementation class was an attribute, that defaulted to ResourceHttpRequestHandler.class, it would've been much simpler.  ---  **Affects:** 3.1.1  **Issue Links:** - #14177 Use same pragma settings in WebContentGenerator as in AbstractView","closed","type: enhancement,","spring-projects-issues","2012-06-25T06:17:23Z","2019-01-11T13:07:28Z"
"","14177","Use same pragma settings in WebContentGenerator as in AbstractView [SPR-9543]","**[Scott Carlson](https://jira.spring.io/secure/ViewProfile.jspa?name=scarlsonspring)** opened **[SPR-9543](https://jira.spring.io/browse/SPR-9543?redirect=false)** and commented  I attempted to use  to map to some application PDFs.  However, IE8 fails with the settings from preventCaching().  The fix is already used in AbstractView.generateDownloadContent().  It this was consistent, it would be a benefit.  I was able to get around it, by subclassing ResourceHttpRequestHandler, and wiring up my own beans.  ---  **Affects:** 3.1.1  This issue is a sub-task of #16413  **Issue Links:** - #14178 Expose handler bean in ResourcesBeanDefinitionParser.","closed","type: task,","spring-projects-issues","2012-06-25T06:13:41Z","2019-01-11T13:07:45Z"
"","14336","ExtendedBeanInfo exception - java.beans.IntrospectionException [SPR-9702]","**[Scott Bartram](https://jira.spring.io/secure/ViewProfile.jspa?name=scottb)** opened **[SPR-9702](https://jira.spring.io/browse/SPR-9702?redirect=false)** and commented  After upgrading our existing application from 3.0.5 to 3.1.2, we see java.beans.IntrospectionException on our domain model classes.  It appears to be triggered by interaction with the java.beans code and GC on Weak/Soft Reference objects.  I will create a test sample in github.  ---  **Affects:** 3.1.2  **Issue Links:** - #14663 Overhaul non-void JavaBean write method support (_**""depends on""**_) - #14088 Bean Introspection problem under IBM Java 1.6 with new ExtendedBeanInfo (_**""duplicates""**_) - #14744 Processing java.math.BigDecimal via Spring's ExtendedBeanInfo fails sporadically - #12734 Support injection against setter methods with non-void return types - #14662 Simplify CachedIntrospectionResults caching arrangements","closed","in: core,","spring-projects-issues","2012-08-17T14:38:20Z","2019-01-11T13:31:04Z"
"","14095","Backport ""HttpClientErrorException should provide access to response headers"" [SPR-9460]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-9460](https://jira.spring.io/browse/SPR-9460?redirect=false)** and commented  ---  This issue is a backport sub-task of #12593","closed","","spring-projects-issues","2012-06-01T05:10:38Z","2019-01-11T13:02:24Z"
"","14121","Add SpEL support for float literals [SPR-9486]","**[Satyapal Reddy](https://jira.spring.io/secure/ViewProfile.jspa?name=sreddy)** opened **[SPR-9486](https://jira.spring.io/browse/SPR-9486?redirect=false)** and commented  I have two functions:  ``` public class FunctionsClass {   public int abs(int value) { return Math.abs(value); }   public float abs(float value) { return Math.abs(value); } } } ```  and when I execute the test with following code:  ``` FunctionsClass testObject = new FunctionsClass(); StandardEvaluationContext context = new StandardEvaluationContext(); org.springframework.expression.Expression expression = parser.parseExpression(""abs(-10.2f)""); Number result = expression.getValue(context, testObject, Number.class); ```  it fails with:  ``` Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1033E:(pos 0): Method call of 'abs' is ambiguous, supported type conversions allow multiple variants to match ```  This is due to -10.2f being treated as double, and then they are eligible for type conversions to int and float and hence the ambiguity  ---  **Affects:** 3.1.1  **Attachments:** - [SpELFloatLiteralTest.java](https://jira.spring.io/secure/attachment/19833/SpELFloatLiteralTest.java) (_1.24 kB_)  **Issue Links:** - #13802 Support BigDecimals with SpEL","closed","type: enhancement,","spring-projects-issues","2012-06-08T09:11:32Z","2019-01-11T13:05:08Z"
"","13923","CollectionFactory does not chain exceptions [SPR-9285]","**[Sandu Turcan](https://jira.spring.io/secure/ViewProfile.jspa?name=alex322)** opened **[SPR-9285](https://jira.spring.io/browse/SPR-9285?redirect=false)** and commented  createMap and createCollection do not propagate the original exception if they fail to create an instance. These are the offending lines:  ```java catch (Exception ex) {     throw new IllegalArgumentException(""Could not instantiate Collection type: "" + collectionType.getName()); } ```  and  ```java catch (Exception ex) {     throw new IllegalArgumentException(""Could not instantiate Map type: "" + mapType.getName()); } ```  ---  **Affects:** 3.1.1  **Sub-tasks:** - #14504 Backport ""CollectionFactory does not chain exceptions""  **Issue Links:** - #13922 Allow MapToMap conversion even without a default constructor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5cfe8a2c5c3a48200b56c0e97062f40e8ed9339, https://github.com/spring-projects/spring-framework/commit/2e48656906ebeb18843fe2963fb6478d2edc1018, https://github.com/spring-projects/spring-framework/commit/98075c33c6a39a8c4c57357dbaf65294d9ca77a9","closed","in: core,","spring-projects-issues","2012-03-29T08:32:54Z","2019-01-11T12:48:42Z"
"","13922","Allow MapToMap conversion even without a default constructor [SPR-9284]","**[Sandu Turcan](https://jira.spring.io/secure/ViewProfile.jspa?name=alex322)** opened **[SPR-9284](https://jira.spring.io/browse/SPR-9284?redirect=false)** and commented  We use a thirdparty library which has a class that happens to extend java.util.Properties. When assigning an instance of this class to a property, MapToMapConverter tries to create a new instance, copy all the entries, and if none of the keys or values were converted returns the original value. The problem is that in this particular case the default constructor fails to create the throwaway instance. I changed the convert method to the following:  ```java public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null;     }     boolean copyRequired = !targetType.getType().isInstance(source);     Map sourceMap = (Map) source;     if (!copyRequired && (sourceMap.isEmpty() || targetType.equals(sourceType))) {         return sourceMap;     }     Map targetMap = CollectionFactory.createMap(targetType.getType(), sourceMap.size());     for (Map.Entry entry : sourceMap.entrySet()) {         Object sourceKey = entry.getKey();         Object sourceValue = entry.getValue();         Object targetKey = convertKey(sourceKey, sourceType, targetType.getMapKeyTypeDescriptor());         Object targetValue = convertValue(sourceValue, sourceType, targetType.getMapValueTypeDescriptor());         targetMap.put(targetKey, targetValue);         if (sourceKey != targetKey || sourceValue != targetValue) {             copyRequired = true;         }     }     return (copyRequired ? targetMap : sourceMap); } ```  The actual change:  ```java if (!copyRequired && (sourceMap.isEmpty() || targetType.equals(sourceType))) { ```  ---  **Sub-tasks:** - #14513 Backport ""Allow MapToMap conversion even without a default constructor""  **Issue Links:** - #13923 CollectionFactory does not chain exceptions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f1fb4eeead221ec51c5ef80fac297cb38891580, https://github.com/spring-projects/spring-framework/commit/38c43935922e3673f34b8dcd695e5191ae54c562, https://github.com/spring-projects/spring-framework/commit/e3136e65f46b81aa1ad9cd8aeb5eefb116a7d6d3","closed","in: core,","spring-projects-issues","2012-03-29T08:22:57Z","2019-01-11T12:48:51Z"
"","13914","GenericCollectionTypeResolver.extractTypeFromClass doesn't work for java.util.Properties and descendants [SPR-9276]","**[Sandu Turcan](https://jira.spring.io/secure/ViewProfile.jspa?name=alex322)** opened **[SPR-9276](https://jira.spring.io/browse/SPR-9276?redirect=false)** and commented  While solving a type conversion problem in a larger application, I wrote this simple unit test:  ```java Class mapKeyType = GenericCollectionTypeResolver.getMapKeyType(Properties.class); Class mapValueType = GenericCollectionTypeResolver.getMapValueType(Properties.class);  assert mapKeyType == Object.class; assert mapValueType == Object.class; ```  It doesn't work, both mapKeyType and mapValueType are null. The culprit is the beginning of extractTypeFromClass in GenericCollectionTypeResolver:  ```java if (clazz.getName().startsWith(""java.util."")) {     return null; } ```  , which doesn't account for java.util.Properties. I tried simply commenting these lines out, and the test worked. Is there any reason for having them there?  ---  **Affects:** 3.1.1  **Issue Links:** - #13895 Resolve Collection element types during conversion","closed","status: bulk-closed,","spring-projects-issues","2012-03-28T11:55:51Z","2019-01-12T03:48:46Z"
"","13895","Resolve Collection element types during conversion [SPR-9257]","**[Sandu Turcan](https://jira.spring.io/secure/ViewProfile.jspa?name=alex322)** opened **[SPR-9257](https://jira.spring.io/browse/SPR-9257?redirect=false)** and commented  Between 3.0 and 3.1 the behavior of TypeDescriptor.forObject changed. If the value is a map or a collection then elementTypeDescriptor, mapKeyTypeDescriptor, and mapValueTypeDescriptor remain uninitialized. This in turn precludes conversions from happening.  Our application has a method that accepts a Map where the key is an enum type. In 3.0.x we received a map where keys were enums, in 3.1 the keys are strings.  I'm attaching an updated revision of TypeDescriptor, only the method TypeDescriptor.forObject was changed. It used to be:  ```java  	public static TypeDescriptor forObject(Object source) { 		return (source != null ? valueOf(source.getClass()) : null); 	} ```  I changed it to:  ```java public static TypeDescriptor forObject(Object source) {     if (source == null) {         return null;     }     else if (source instanceof Collection) {         Class elementType = CollectionUtils.findCommonElementType((Collection)source);         return new TypeDescriptor(source.getClass(), elementType==null ? null : new TypeDescriptor(elementType));     }     else if (source instanceof Map) {         Class keyType = CollectionUtils.findCommonElementType(((Map) source).keySet());         Class valueType = CollectionUtils.findCommonElementType(((Map) source).values());         return new TypeDescriptor(source.getClass(),                 keyType==null ? null : new TypeDescriptor(keyType),                  valueType==null ? null : new TypeDescriptor(valueType));     }     else {         return valueOf(source.getClass());     } } ```  ---  **Affects:** 3.1.1  **Attachments:** - [TypeDescriptor.java](https://jira.spring.io/secure/attachment/19540/TypeDescriptor.java) (_27.22 kB_)  **Issue Links:** - #13914 GenericCollectionTypeResolver.extractTypeFromClass doesn't work for java.util.Properties and descendants  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9055a7f810fd2e57b39cec50e73025afa6d85211, https://github.com/spring-projects/spring-framework/commit/5a1f924ac328827c31ced745a65867d4a1feca17  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2012-03-21T12:46:35Z","2019-01-11T12:45:41Z"
"","14444","Fix split package introduced by @EnableSpringConfigured [SPR-9811]","**[Samuel Henault](https://jira.spring.io/secure/ViewProfile.jspa?name=shenault)** opened **[SPR-9811](https://jira.spring.io/browse/SPR-9811?redirect=false)** and commented  Cannot start Spring on Eclipse Virgo Tomcat Server 3.5. The following error appear :  ``` Caused by: org.eclipse.virgo.kernel.osgi.framework.ImportMergeException?: cannot merge imports of package 'org.springframework.context.annotation' from sources 'Import-Library 'org.springframework.spring' version '3.1.2.RELEASE'(Import-Bundle 'org.springframework.aspects' version '3.1.2.RELEASE', Import-Bundle 'org.springframework.context' version '3.1.2.RELEASE')' because of conflicting values 'org.springframework.context', 'org.springframework.aspects' of attribute 'bundle-symbolic-name' ```  http://forum.springsource.org/showthread.php?128203-Spring-Framework-3-1-2-Released!&p=422143#post422143  ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?128203-Spring-Framework-3-1-2-Released!&p=422143#post422143  **Issue Links:** - #14077 Fix package cycle established by `@EnableSpringConfigured`","closed","in: core,","spring-projects-issues","2012-09-19T11:42:15Z","2019-01-13T07:03:05Z"
"","13976","HttpStatusCodeException not serializable [SPR-9370]","**[Samuel Fung](https://jira.spring.io/secure/ViewProfile.jspa?name=psfung)** opened **[SPR-9370](https://jira.spring.io/browse/SPR-9370?redirect=false)** and commented  My app use an exception reporting framework that depends on the fact that all exceptions should be serializable. When org.springframework.web.client.HttpStatusCodeException is thrown in a RestTemplate method, the exception reporting framework complains that a Charset object in the HttpStatusCodeException is not serializable.  ---  **Affects:** 3.1.1  **Issue Links:** - #13911 HttpStatusCodeException cannot be serialized (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-05-03T04:03:46Z","2019-01-11T12:40:18Z"
"","14646","By-name autowiring causes unintended injection of Environment into MBeanProxyFactoryBean [SPR-10012]","**[Samuel EUSTACHI](https://jira.spring.io/secure/ViewProfile.jspa?name=samuel.eustachi)** opened **[SPR-10012](https://jira.spring.io/browse/SPR-10012?redirect=false)** and commented  I am not sure which component is to be blamed. And if the issue is badly named or defined, please let me know :-)  I could narrow the affected version. My webapp starts and runs well with version 3.0.7, and does not start with version 3.1.x and 3.2  I add a bean with the following configuration :  ```xml                            ```  and get the following error :  ``` Caused by: org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'org.springframework.web.context.support.StandardServletEnvironment' to required type 'java.util.Map' for property 'environment'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [org.springframework.web.context.support.StandardServletEnvironment] to required type [java.util.Map] for property 'environment': no matching editors or conversion strategy found 	at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:485) 	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:516) 	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:510) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1406) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1365) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	... 19 more Caused by: java.lang.IllegalStateException: Cannot convert value of type [org.springframework.web.context.support.StandardServletEnvironment] to required type [java.util.Map] for property 'environment': no matching editors or conversion strategy found 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:241) 	at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:470) 	... 25 more   ```  It seems that attribute ""environment"" of MBeanProxyFactoryBean, inherited from MBeanClientInterceptor, cannot be set properly. A StandardServletEnvironment is provided, where a Map is expected   ---  **Affects:** 3.1.1, 3.1.3, 3.2 GA","closed","in: core,","spring-projects-issues","2012-11-21T02:01:57Z","2019-01-12T16:24:48Z"
"","14261","Regression: scoped beans being cached too aggressively [SPR-9627]","**[Samuel Bernet](https://jira.spring.io/secure/ViewProfile.jspa?name=sam_bernet)** opened **[SPR-9627](https://jira.spring.io/browse/SPR-9627?redirect=false)** and commented  The bugfix #13814 ""Scoped-proxy memory leak w/ `@Resource` injection"" leads to bean instances being cached too eagerly in `CommonAnnotationBeanPostProcessor`. Besides the (desired) caching of AOP scoped-proxies to prevent the memory leak the current code also caches custom scoped bean instances that should not be cached. This happens for example if client code uses `AutowireCapableBeanFactory#autowireBean(Object)` to inject dependencies (annotation-based) into a manually created bean. In this case no AOP proxies are involved but the cached instances are still used. The underlying scope is never consulted and can thus never signalize that a new instance is to be created and injected because the context of the scope (e.g. request, session) is different from the first call which resulted in the cached instance.  I attached a Test-Case (JUnit 4 Test, requires JUnit and Spring to run). The test-case illustrates the breaking change: - Runs fine with Spring version 3.1.1 and older (tested with 3.0.5) - Fails with Spring version 3.1.2 and 3.2.M1 - The defect was introduced in the bugfix for #13814 in version 3.2.M1 with commit f779c199ea272cf61781e120b1ab2efc50de0cbb - The defect was back-ported to version 3.1.2 with #14000  I understand this calling pattern is not very common but nevertheless the affected API is public and our framework relies on this to provide service beans to instances of ""visual"" classes (a visual models a single page in a web application). This basically renders custom scoped beans (also being used heavily) unusable for us in releases > 3.1.1, thus my classification as ""major"".  Best regards Samuel Bernet MSc ETH Software Engineering samuel.bernet@raiffeisen.ch  ---  **Affects:** 3.1.2, 3.2 M1  **Attachments:** - [SPR-9176-TestCase.zip](https://jira.spring.io/secure/attachment/20123/SPR-9176-TestCase.zip) (_3.29 kB_)  **Issue Links:** - #14318 `@Resource` injection regression with scope prototype (_**""is duplicated by""**_) - #13814 Scoped-proxy memory leak w/ `@Resource` injection - #14214 Injecting prototypes into tests using `@Resource` appears to be broken - #14000 Backport ""Scoped-proxy memory leak w/ `@Resource` injection"" - #14485 `@Resource` injection of singleton in prototype using AnnotationConfigApplicationContext is not thread-safe  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04af54ad4cd7ac335d275487b19e96ed3335f221, https://github.com/spring-projects/spring-framework/commit/26ee0c4842ca83dec213b5422d0af18ba2e3ce6c, https://github.com/spring-projects/spring-framework/commit/68c5f20bc7891ef9435ffc096e97f626277d27a7, https://github.com/spring-projects/spring-framework/commit/19718700cf5a99e8e10af5d11d8005835838ddba  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-07-24T10:55:22Z","2019-01-13T07:03:41Z"
"","14012","java.sql.SQLTimeoutException not translated to org.springframework.dao.QueryTimeoutException [SPR-9376]","**[Sammy T Stag](https://jira.spring.io/secure/ViewProfile.jspa?name=sammystag)** opened **[SPR-9376](https://jira.spring.io/browse/SPR-9376?redirect=false)** and commented  java.sql.SQLTimeoutException is not translated to org.springframework.dao.QueryTimeoutException.  I think line 74 of https://github.com/SpringSource/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslator.java should be updated to fix this.  I have searched the 3.1.1 codebase and can find no reference to QueryTimeoutException anywhere except in that class itself.  The issue can be reproduced as follows if using an Oracle database  JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource); jdbcTemplate.setQueryTimeout(1); String sql = ""call dbms_lock.sleep(10)""; jdbcTemplate.execute(sql);  The attached unit test reproduces the issue.  I used the oracle ojdbc6 driver version 11.2.0.3 (http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html) and jdk7  ---  **Affects:** 3.1.1  **Attachments:** - [test-data-source-context.xml](https://jira.spring.io/secure/attachment/19632/test-data-source-context.xml) (_1.01 kB_) - [TimeoutTest.java](https://jira.spring.io/secure/attachment/19631/TimeoutTest.java) (_1.19 kB_)  **Issue Links:** - #12336 Add QueryTimeoutException to the DataAccessException hierarchy - #16575 SQLExceptionTranslators do not reliably translate QueryTimeoutException","closed","type: enhancement,","spring-projects-issues","2012-05-04T02:36:37Z","2019-01-11T12:39:59Z"
"","14219","Support wildcard (*) for profile selection [SPR-9585]","**[Sami Nieminen](https://jira.spring.io/secure/ViewProfile.jspa?name=samppa)** opened **[SPR-9585](https://jira.spring.io/browse/SPR-9585?redirect=false)** and commented  When specifying the profiles, which enable certain bean to be registered, it would be handy to allow wildcard \(*) to be used.  For example, we could have a datasource definition which is required by various profiles, that all use the naming convention database-xyz, such as database-oracle, database-sqlserver. Other profiles do not require the datasource bean to be registered.  Therefore, the datasource bean definition now needs this kind of profile-attribute:  ```  ```  Every time when we add support to some new database, which needs datasource bean, a new profile name needs to be added.  Better would be, if we could define the profile as:  ```  ```  No need to change this when new database profiles are added.  The wildcarded profile selection would then register the datasource bean no matter if _-Dspring.profiles.active=database-oracle_ or _-Dspring.profiles.active=database-sqlserver_ is used.   ---  3 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-07-12T03:51:48Z","2019-01-12T02:47:22Z"
"","14588","Introduce bootstrap strategy in the TestContext framework [SPR-9955]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9955](https://jira.spring.io/browse/SPR-9955?redirect=false)** and commented  #### Status Quo  Work done in conjunction with #9917 and #9265 introduced physical package cycles in the `spring-test` module. The work performed in conjunction with #14557 uses reflection to resolve these _physical_ package cycles; however, _logical_ package cycles still remain.  #### Deliverables  1. [x] Introduce a _bootstrap_ strategy in the TestContext framework (TCF) that is responsible for determining and appropriately delegating to or instantiating the following:    - `AbstractDelegatingSmartContextLoader` (i.e., a concrete subclass thereof)    - `MergedContextConfiguration` (or a subclass thereof) 2. [x] Refactor `ContextLoaderUtils` to instantiate and delegate to a _bootstrap_ instance instead of using extensive reflection. 3. [x] Introduce a meta-annotation that can be used to designate the concrete bootstrap strategy to use.    - For example, `@WebAppConfiguration` could be annotated with such a meta-annotation that points to the _web_ bootstrap strategy implementation.  ---  **Affects:** 3.2 RC1  **Issue Links:** - #14700 Relocate web artifacts in the TestContext framework to the web package (_**""depends on""**_) - #16302 Deprecate TestContextManager.getDefaultTestExecutionListenerClasses() (_**""depends on""**_) - #16305 Deprecate support for custom, default ContextLoader class name in the TestContext framework (_**""depends on""**_) - #16074 AnnotationUtils.findAnnotation() should support arbitrary levels of meta-annotations (_**""depends on""**_) - #16306 Document TestContext bootstrap strategy in the reference manual (_**""is depended on by""**_) - #17212 Enable reuse of DefaultActiveProfilesResolver (_**""is depended on by""**_) - #9265 Provide support for session/request scoped beans for integration testing - #9917 Support loading WebApplicationContexts with the TestContext Framework - #14557 Fix package cycles in spring-test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b308659cda79f39f117f59f2d083abdd83f654d5, https://github.com/spring-projects/spring-framework/commit/a281bdbfc528187dcd1214be2d2a97e8482a8a23","closed","type: enhancement,","spring-projects-issues","2012-11-04T14:46:50Z","2019-01-11T14:16:47Z"
"","14587","Prefix distribution archive with 'spring-framework' instead of 'spring' [SPR-9954]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9954](https://jira.spring.io/browse/SPR-9954?redirect=false)** and commented  #### Status Quo  The distribution archive for release 3.2 RC1 is called `spring-3.2.0.RC1-dist.zip`; whereas, all releases prior to 3.2 generated distribution archives called `spring-framework-\*-dist.zip`.  #### Deliverables  1. Modify the Gradle build to produce a distribution archive called `spring-framework-\*-dist.zip`  ---  **Affects:** 3.2 M1  **Issue Links:** - #14232 Prefix reference doc artifacts with 'spring-framework' instead of 'spring'  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a64b04afa49d0610672aef39ee8a05fdb15d9294","closed","type: task,","spring-projects-issues","2012-11-04T14:12:01Z","2019-01-11T14:16:28Z"
"","14586","Honor timeZone property in DateTimeFormatterFactory [SPR-9953]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9953](https://jira.spring.io/browse/SPR-9953?redirect=false)** and commented  #### Status Quo  `DateTimeFormatterFactory` provides a `timeZone` property; however, this property is currently ignored.  This was unfortunately overlooked due to a false positive in the corresponding unit test (i.e., `DateTimeFormatterFactoryTests.shouldGetWithTimeZone()`). Specifically, the author of the test and the Spring CI server happen to reside in the same time zone, thereby masking the problem.  When `DateTimeFormatterFactoryTests.shouldGetWithTimeZone()` is executed in a timezone other than ""-0700"", the test fails. For example, when executed in timezone ""+0200"", the test results in the following error.  ``` java.lang.AssertionError:  Expected: is ""20091021121000 -0700""      but: was ""20091021121000 +0200"" 	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20) 	at org.junit.Assert.assertThat(Assert.java:962) 	at org.junit.Assert.assertThat(Assert.java:924) 	at org.springframework.format.datetime.joda.DateTimeFormatterFactoryTests.shouldGetWithTimeZone(DateTimeFormatterFactoryTests.java:98) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:46) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:43) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:270) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:62) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:52) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:307) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) ```  #### Analysis  The following is the implementation of `DateTimeFormatterFactory.getDateTimeFormatter(DateTimeFormatter)` as of Spring 3.2 RC1.  ``` public DateTimeFormatter getDateTimeFormatter(DateTimeFormatter fallbackFormatter) { 	DateTimeFormatter dateTimeFormatter = createDateTimeFormatter(); 	if(dateTimeFormatter != null && this.timeZone != null) { 		dateTimeFormatter.withZone(DateTimeZone.forTimeZone(this.timeZone)); 	} 	return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter); } ```  So although `withZone()` is invoked, it has no effect. It is therefore assumed that the following was the intended implementation.  ``` public DateTimeFormatter getDateTimeFormatter(DateTimeFormatter fallbackFormatter) { 	DateTimeFormatter dateTimeFormatter = createDateTimeFormatter(); 	if(dateTimeFormatter != null && this.timeZone != null) { 		dateTimeFormatter = dateTimeFormatter.withZone(DateTimeZone.forTimeZone(this.timeZone)); 	} 	return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter); } ```  However, even with the above change, `DateTimeFormatterFactoryTests.shouldGetWithTimeZone()` still fails with the following stack trace.  ``` java.lang.AssertionError:  Expected: is ""20091021121000 -0700""      but: was ""20091021101000 +0000"" 	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20) 	at org.junit.Assert.assertThat(Assert.java:962) 	at org.junit.Assert.assertThat(Assert.java:924) 	at org.springframework.format.datetime.joda.DateTimeFormatterFactoryTests.shouldGetWithTimeZone(DateTimeFormatterFactoryTests.java:98) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:46) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:43) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:270) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:62) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:52) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:307) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) ```  #### Deliverables  1. [x] Honor the `timeZone` property in `DateTimeFormatterFactory.getDateTimeFormatter(DateTimeFormatter)` 2. [x] Rewrite `DateTimeFormatterFactoryTests.shouldGetWithTimeZone()` so that it does not test against the default timezone  ---  **Affects:** 3.2 RC1  **Issue Links:** - #11781 Support for custom global Joda DateTimeFormatters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93c01e071098bb2e07e127c3b091d89ce73de983","closed","in: core,","spring-projects-issues","2012-11-04T09:50:27Z","2019-01-11T14:16:23Z"
"","14574","Document new testing features in the ""New in Spring 3.2"" section of the reference manual [SPR-9941]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9941](https://jira.spring.io/browse/SPR-9941?redirect=false)** and commented  #### Deliverables  Document new testing support features in the ""_New in Spring 3.2_"" section of the reference manual, specifically covering:  1. [x] `ApplicationContextInitializer` support in the TCF 2. [x] Support for loading a `WebApplicationContext` in the TCF 3. [x] Support for testing session- and request-scoped beans in the TCF 4. [x] Updates to mocks for the Servlet API 5. [x] Introduction of _Spring MVC Test_  ---  **Affects:** 3.2 RC1  **Issue Links:** - #14497 Document WebApplicationContext support in the TestContext Framework (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d4c55838ad2bdcc2bda2ef84b365064f980dbe8e","closed","type: documentation,","spring-projects-issues","2012-10-31T12:15:54Z","2019-01-11T14:17:24Z"
"","14536","Backport ""JdbcTestUtils should not interpret comments as a separate statement"" [SPR-9903]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9903](https://jira.spring.io/browse/SPR-9903?redirect=false)** and commented  ---  This issue is a backport sub-task of #14227","closed","in: test,","spring-projects-issues","2012-10-21T21:59:09Z","2019-01-11T14:14:40Z"
"","14497","Document WebApplicationContext support in the TestContext Framework [SPR-9864]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9864](https://jira.spring.io/browse/SPR-9864?redirect=false)** and commented  ---  #### Deliverables  1. [x] Write Javadoc (search for #14497 in the code base) 2. [x] Document WAC integration testing support in the _Testing_ chapter of the reference manual  ---  **Issue Links:** - #9917 Support loading WebApplicationContexts with the TestContext Framework (_**""depends on""**_) - #14574 Document new testing features in the ""New in Spring 3.2"" section of the reference manual (_**""is depended on by""**_)","closed","type: documentation,","spring-projects-issues","2012-10-07T15:49:16Z","2019-01-13T21:05:28Z"
"","14496","Support WebApplicationContext hierarchies in the TestContext Framework [SPR-9863]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9863](https://jira.spring.io/browse/SPR-9863?redirect=false)** and commented  ---  #### Overview  This issue picks up where #9917 left off. Specifically this issue focuses on adding support for `WebApplicationContext` hierarchies within single test classes as well as within test class hierarchies.  Consequently, this issue is heavily dependent on the completion of both #9917 and #10284.  ---  #### Goals  - Ensure that common WAC hierarchies can be configured in integration tests (e.g., _root_ and _dispatcher_ WACs in a parent-child relationship).  ---  #### Deliverables  1. [x] Ensure that hierarchies of WACs can be configured using `@ContextHierarchy` (see #10284) 2. [x] Ensure that the type of the root WAC can differ from that of its parent (e.g., a standard `ApplicationContext` loaded for an EAR) 3. [x] Set a loaded context as the `ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE` in the `MockServletContext` when context hierarchies are used:    - if an `ApplicationContext` has no parent and the context is a WAC, set the context as the root WAC    - if an `ApplicationContext` has a parent that is not a WAC and the context itself is a WAC, set the context as the root WAC  ---  #### Pseudocode Examples  ---  ##### Root WAC & Dispatcher WAC  ``` @WebAppConfiguration // path defaults to ""file:src/main/webapp"" @ContextHierarchy({     @ContextConfiguration(name=""root"", classes = WebAppConfig.class),     @ContextConfiguration(name=""dispatcher"", locations=""/spring/dispatcher-config.xml"") }) public class ControllerIntegrationTests {} ```  ---  ##### Class & Context Hierarchies  ``` @WebAppConfiguration @ContextConfiguration(""file:src/main/webapp/WEB-INF/applicationContext.xml"") public abstract class AbstractWebTests {}  @ContextHierarchy(@ContextConfiguration(""/spring/soap-ws-config.xml"") public class SoapWebServiceTests extends AbstractWebTests {}  @ContextHierarchy(@ContextConfiguration(""/spring/rest-ws-config.xml"") public class RestWebServiceTests extends AbstractWebTests {} ```  ---  ##### Class & Context Hierarchies with Merged and Overridden Configuration  In `ExtendedControllerIntegrationTests` the configuration for the _root_ WAC will be overridden, and the configuration for the _dispatcher_ WAC will be merged.  ``` @WebAppConfiguration // defaults to ""file:src/main/webapp"" @ContextHierarchy({     @ContextConfiguration(name=""root"", classes = WebAppConfig.class),     @ContextConfiguration(name=""dispatcher"", locations=""/spring/user-config.xml"") }) public class ControllerIntegrationTests {}  @ContextHierarchy({     @ContextConfiguration(name=""root"", locations=""/spring/root2.xml"", inheritLocations=false),     @ContextConfiguration(name=""dispatcher"", locations=""/spring/orders-config.xml""), }) public class ExtendedControllerIntegrationTests extends ControllerIntegrationTests {} ```  ---  **Affects:** 2.5 final  **Issue Links:** - #9917 Support loading WebApplicationContexts with the TestContext Framework (_**""depends on""**_) - #10284 Provide support for context hierarchies in the TestContext Framework (_**""depends on""**_) - #14989 Document context hierarchy support in the TestContext framework (_**""is depended on by""**_) - #9309 Load dedicated child ApplicationContext for test instance in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/98074e776262292a9d6fa8d164e6718c5876ed6f  3 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2012-10-07T12:30:45Z","2019-01-13T07:02:45Z"
"","14494","SpEL: static access via the type function fails if the class implements Map [SPR-9861]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9861](https://jira.spring.io/browse/SPR-9861?redirect=false)** and commented  #### Status Quo  When using SpEL's type function `T` to access a static constant, evaluation of the expression fails if the class referenced by the `T` function implements `java.util.Map`.  For example, the following SpEL expression (taken from an excerpt from a project using Spring Integration) fails:  ```xml  ```  ... with the following exception:  ``` Caused by: java.lang.ClassCastException: java.lang.Class cannot be cast to java.util.Map          at org.springframework.context.expression.MapAccessor.canRead(MapAccessor.java:37)          at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:190)          at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:72)          at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:57)          at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:93)          at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:88)          at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:139)          ... 47 more ```  ---  #### Analysis  The reason for the above exception is that Spring Integration's `MessageHeaders` class implements `java.util.Map`. Thus the SpEL `MapAccessor` is added to the list of _candidate_ property accessors to try in `PropertyOrFieldReference.getPropertyAccessorsToTry(Class, ExpressionState)`, and `MapAccessor` ends up in the candidate list **before** `ReflectivePropertyAccessor`.  So, when the expression is evaluated, it fails since the `T()` function returns a class instead of a `Map` instance. In other words, the `MapAccessor` assumes it is being passed an instance of `java.util.Map`, when it in fact receives an instance of `java.lang.Class` (i.e., the class reference returned by the `T()` function).  In summary, `MapAccessor` obviously cannot be used to access static members. Thus the current implementation is completely broken in that the building of the candidate property accessor list does not take into account that the eventual property access may be _static_.  ---  #### Deliverables  1. Ensure that static members (i.e., constants) can be accessed in SpEL expressions using the `T()` function when the class passed to the `T()` function implements `java.util.Map`.  ---  **Affects:** 3.0 GA  **Issue Links:** - #16232 Referencing static field of class that extends Map in expression language causes class cast exception (_**""duplicates""**_)  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","in: core,","spring-projects-issues","2012-10-05T09:35:39Z","2019-01-13T21:05:30Z"
"","14374","Update the release process regarding change log generation [SPR-9740]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9740](https://jira.spring.io/browse/SPR-9740?redirect=false)** and commented  #### Status Quo  Until now the Spring team has manually maintained the `changelog.txt` file for each release. Although this results in a change log that represents the most significant changes in a given release from the point of view of the core developers, this process has proven to be somewhat cumbersome. In addition, this information is duplicated both in JIRA and in GitHub commits.  #### Goal  Automate generation of the change log.  #### Deliverables  The following deliverables were agreed upon recently by the Core Spring developers.  1. Stop manually crafting entries in `changelog.txt` 2. Instead, focus on a well crafted _""What's new in Spring 3.x""_ section in the reference manual 3. Update the release process:    - link to the appropriate _""What's new in Spring 3.x""_ section of the reference manual in `changelog.txt`    - link to the online JIRA change log for the 3.x release in `changelog.txt`    - include a text version of the JIRA change log for the 3.x release in `changelog.txt`    --- No further details from [SPR-9740](https://jira.spring.io/browse/SPR-9740?redirect=false)","closed","type: documentation,","spring-projects-issues","2012-08-29T09:22:37Z","2013-12-11T23:57:21Z"
"","14299","Introduce countRowsInTableWhere() and dropTables() in abstract transactional base classes in the TestContext framework [SPR-9665]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9665](https://jira.spring.io/browse/SPR-9665?redirect=false)** and commented  #### Impetus  Due to the changes introduced in #13873 and #13630, we should introduce `countRowsInTableWhere()` and `dropTables()` convenience methods in the abstract transactional base classes in the TestContext framework  ---  #### Deliverables  1. [x] Introduce `countRowsInTableWhere()` and `dropTables()` convenience methods in:    - `AbstractTransactionalJUnit4SpringContextTests`    - `AbstractTransactionalTestNGSpringContextTests` 2. [x] Update the changelog  ---  **Issue Links:** - #13630 Provide JdbcTemplate in abstract transactional base classes in the TestContext framework (_**""depends on""**_) - #13873 Deprecate SimpleJdbcTestUtils in favor of JdbcTestUtils (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/015086cb9c50fa4eabd47fab064bc1bbdde8caa6","closed","type: enhancement,","spring-projects-issues","2012-08-03T13:16:07Z","2019-01-13T21:05:59Z"
"","14298","Backport ""Deprecate SimpleJdbcTestUtils in favor of JdbcTestUtils"" [SPR-9664]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9664](https://jira.spring.io/browse/SPR-9664?redirect=false)** and commented  ---  This issue is a backport sub-task of #13873  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50df4d08c2e5180eab2eda916a1502f7566cb45f, https://github.com/spring-projects/spring-framework/commit/d7fd70fa08704550bd46d359e96608e265925f8f  3 votes, 2 watchers","closed","in: test,","spring-projects-issues","2012-08-03T12:13:20Z","2019-01-11T12:59:21Z"
"","14286","BeanFactoryAnnotationUtils should throw BeansException [SPR-9652]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9652](https://jira.spring.io/browse/SPR-9652?redirect=false)** and commented  #### Status Quo  Utility methods in `BeanFactoryAnnotationUtils`, which was introduced in Spring 3.1.2, throw `IllegalStateException`; whereas, utility methods in the existing `BeanFactoryUtils` consistently throw specific subclasses of `BeansException`.  This inconsistency between `BeanFactoryAnnotationUtils` and `BeanFactoryUtils` makes it difficult to handle exceptions in a unified manner.  For example, it would be much more suitable for `BeanFactoryAnnotationUtils.qualifiedBeanOfType()` to throw a `NoSuchBeanDefinitionException` rather than an `IllegalStateException`.  #### Deliverables  1. Refactor `BeanFactoryAnnotationUtils` to consistently throw specific subclasses of `BeansException`.    ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ebfd9e6a84037431c41402a4a45d816d1146a93, https://github.com/spring-projects/spring-framework/commit/430db261e79a534dde40ed6e864e18cb301f5e67","closed","in: core,","spring-projects-issues","2012-07-28T09:34:18Z","2012-10-31T11:33:59Z"
"","14279","Support single, unnamed transaction manager bean in the TestContext framework [SPR-9645]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9645](https://jira.spring.io/browse/SPR-9645?redirect=false)** and commented  #### Status Quo  `TransactionalTestExecutionListener`   - in conjunction with `@TransactionConfiguration`   - requires that the `PlatformTransactionManager` be named _""transactionManager""_ by default. Otherwise, the bean name can be overridden via the `transactionManager` attribute of `@TransactionConfiguration` or the `value` attribute of `@Transactional`.  However, if there is only a single `PlatformTransactionManager` in the test's `ApplicationContext`, then the requirement to specify the exact name of that bean (or to name it exactly _""transactionManager""_) is often superfluous.  Furthermore, `TransactionAspectSupport` already implements an algorithm that falls back to looking up the transaction manager _by type_, using the following algorithm from its `determineTransactionManager()` method.  1. return configured transaction manager if set 2. else, look up _by type_ and _qualifier_ (from `@Transactional`) 3. else, look up _by type_ and _explicit name_ 4. else, look up _by type_  #### Goal  In addition to the algorithm already in place, the _Spring TestContext Framework_ should attempt to look up a single, unnamed `PlatformTransactionManager` _by type_ as opposed to _by name_ if an explicit name or qualifier has not been specified.  #### Deliverables  - [x] Refactor the implementation of `beforeTestMethod()` in `TransactionalTestExecutionListener` so that it is comparable to the algorithm for determining the transaction manager used in `TransactionAspectSupport`, using the following steps.   1. look up _by type_ and _qualifier_ (from `@Transactional`)   2. else, look up _by type_ and _explicit name_ (from `@TransactionConfiguration`)   3. else, look up single bean _by type_   4. else, look up _by type_ and _default name_ (from `@TransactionConfiguration`) - [x] Update the Javadoc for `@TransactionalTestExecutionListener`. - [x] Update the Javadoc for `@TransactionConfiguration`. - [x] Update the _Testing_ chapter of the Reference Manual accordingly. - [x] Update the changelog accordingly.  ---  **Affects:** 3.1.2  **Issue Links:** - #14238 Support TransactionManagementConfigurer for determining the transaction manager in the TestContext framework (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f21fe33e74ac3844a5690f71266e07c78ec219dd","closed","type: enhancement,","spring-projects-issues","2012-07-27T01:15:36Z","2019-01-11T13:00:25Z"
"","14255","SpEL MethodFilter registration fails if custom method resolvers have been set [SPR-9621]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9621](https://jira.spring.io/browse/SPR-9621?redirect=false)** and commented  #### Status Quo  Attempting to register a custom `MethodFilter` with a `StandardEvaluationContext` after invoking `setMethodResolvers()` with a custom list of `MethodResolver` instances results in a `NullPointerException`.  ---  #### Analysis  Based on the current documentation in `StandardEvaluationContext` it is unclear what the expected behavior should be, but either the implementation is broken, or the use case is unsupported.  In either case, allowing a `NullPointerException` to be thrown is inappropriate.  ---  #### Steps to Reproduce  In the following code, the call to `registerMethodFilter()` results in a `NullPointerException` since the internal `reflectiveMethodResolver` field within `StandardEvaluationContext` is `null`.  ``` StandardEvaluationContext context = new StandardEvaluationContext();  // Register a custom MethodResolver... List customResolvers = new ArrayList(); customResolvers.add(new CustomMethodResolver()); context.setMethodResolvers(customResolvers);  // or simply... // context.setMethodResolvers(new ArrayList());  // Register a custom MethodFilter... MethodFilter filter = new CustomMethodFilter(); context.registerMethodFilter(String.class, filter); ```  ---  #### Deliverables  - Either refactor the implementation of `StandardEvaluationContext` so that a `NullPointerException` is not thrown for the aforementioned failing use case - Or document that the use case is unsupported and throw a more meaningful exception that contains contextual information in the exception message  ---  **Affects:** 3.0 GA, 3.1.2","closed","in: core,","spring-projects-issues","2012-07-23T06:50:45Z","2019-01-13T21:06:07Z"
"","14254","SpEL fails to parse nested double quotes in expressions [SPR-9620]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9620](https://jira.spring.io/browse/SPR-9620?redirect=false)** and commented  #### Status Quo  The Spring Expression Language currently supports nested single quotes within expressions but not nested double quotes.  For example, `'Wayne''s World'` properly evaluates to _Wayne's World_, but each of the following results in an exception being thrown.  |Expression|Expected|Result| |:---|:---|:---| | ""double quote: """".""   | double quote: "". | `SpelParseException` | | ""double quote: \""\""."" | double quote: "". | `IllegalStateException` |  ---  #### Deliverables  1. Determine if it's appropriate for SpEL to throw an `IllegalStateException` in the second example above 2. Wrap the `IllegalStateException` in a `SpelParseException` if it is determined to be an error to throw the `IllegalStateException` 3. Support nested double quotes within SpEL expressions    - using the syntax from at least one of the aforementioned failing examples, preferably from the first one for consistency with handling of single quotes  ---  **Affects:** 3.0 GA, 3.1.2","closed","in: core,","spring-projects-issues","2012-07-23T05:49:30Z","2019-01-13T21:06:08Z"
"","14253","SpEL should support a unique collection processor [SPR-9619]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9619](https://jira.spring.io/browse/SPR-9619?redirect=false)** and commented  #### Status Quo  Unlike the Spring .NET Expression Language, the Spring Expression Language currently does not provide a means to retrieve unique elements within a collection.  ---  #### Use Case and Work-Around  With raw collection _projection_, the resulting collection may well contain duplicates due to the nature of the data. Some use cases, however, may require that the projection contains unique results.  To solve this problem within a SpEL expression (in Spring 3.0.x and 3.1.x) we can implement a work-around by adding the projected elements to a `Set` that will automatically remove any duplicates (assuming the objects stored in the collection properly implement `equals()`).  In the following example we instantiate a `HashSet`, passing it a list projection, thereby removing duplicates.  ``` // Book contains: List authors; // Author contains: Address address; // Address contains: String country;  // Book book = ... EvaluationContext context = new StandardEvaluationContext(book);  ExpressionParser parser = new SpelExpressionParser();  Expression exp = parser.parseExpression(""new java.util.HashSet(authors.![address.country])"");  Set uniqueCountries = (Set) exp.getValue(context); ```  ---  #### Deliverables  1. Add a `unique()` collection processor to SpEL, analogous to the `distinct()` collection processor from Spring .NET (see _Further Resources_) 2. Consider supporting the remaining 'collection processors and aggregators' from .NET  ---  #### Further Resources  - [Distinct Processor](http://www.springframework.net/doc-latest/reference/html/expressions.html#d4e3398) functionality from the Spring .NET Expression Language  ---  **Affects:** 3.0 GA, 3.1.2","closed","status: bulk-closed,","spring-projects-issues","2012-07-23T05:22:55Z","2019-01-13T21:06:10Z"
"","14248","SpEL should support standard operators for logical AND and logical OR [SPR-9614]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9614](https://jira.spring.io/browse/SPR-9614?redirect=false)** and commented  #### Status Quo  SpEL typically supports logical operators for boolean expressions consistent with standard Java language semantics.  However, the operators for logical `AND` and logical `OR` are only supported as textual operators. In other words, SpEL does not support the use of `&&` and `||` as logical operators.  #### Deliverables  1. Provide support for `&&` as an alias for the logical operator `AND`. 2. Provide support for `||` as an alias for the logical operator `OR`.    ---  **Affects:** 3.0 GA, 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d963a690b71e31412a921b9c67c04d8a6bce194, https://github.com/spring-projects/spring-framework/commit/58e6214b7beeea0f403551d08fdcb1b82a2d4955","closed","type: enhancement,","spring-projects-issues","2012-07-20T16:27:47Z","2012-08-10T09:46:34Z"
"","14247","SpEL should support case-insensitive null literals [SPR-9613]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9613](https://jira.spring.io/browse/SPR-9613?redirect=false)** and commented  #### Status Quo  SpEL supports boolean literal values _true_ and _false_ in a case-insensitive manner; however, _null_ literals must currently be lowercase.  For example, the following code results in a `SpelEvaluationException` instead of `result` equaling `null`.  ``` ExpressionParser parser = new SpelExpressionParser(); Expression exp = parser.parseExpression(""NULL""); Object result = exp.getValue(); ```  #### Deliverables  1. Ensure that null literals are interpreted in a case-insensitive manner, analogous to the current support for boolean literals.  ---  **Affects:** 3.0 GA, 3.1.2  **Issue Links:** - #19462 Accepting null as default value for a property","closed","type: enhancement,","spring-projects-issues","2012-07-20T16:22:07Z","2019-01-11T12:57:18Z"
"","14246","SpEL fails to parse method invocation on an Integer literal [SPR-9612]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9612](https://jira.spring.io/browse/SPR-9612?redirect=false)** and commented  #### Status Quo  When attempting to parse an Integer literal expression such as `42.toString()`, SpEL throws a `SpelParseException` with a message similar to: _EL1041E:(pos 3): After parsing a valid expression, there is still more data in the expression: 'toString'_.  However, SpEL succeeds at parsing an equivalent expression for a Double literal such as `3.14.isInfinite()`.  #### Deliverables  1. Ensure that method invocation on an Integer literal works analogous to the existing support for method invocation on a Double literal.    ---  **Affects:** 3.0 GA, 3.1.2","closed","in: core,","spring-projects-issues","2012-07-20T16:10:49Z","2012-08-03T16:18:03Z"
"","14232","Prefix reference doc artifacts with 'spring-framework' instead of 'spring' [SPR-9598]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9598](https://jira.spring.io/browse/SPR-9598?redirect=false)** and commented  #### Status Quo  The Spring 3.2 M1 distribution archive available from the [SpringSource Community Downloads](http://www.springsource.org/download/community?project=Spring%20Framework) page is inconsistent with archives for previous releases.  ###### Inconsistencies in the 3.2 M1 Distribution  - There is only a single, _with docs_ distribution available: `spring-3.2.0.M1-dist.zip`   - For comparison, the 3.1 M1 release made the following available:     --- _with docs_: `spring-framework-3.1.0.M1-with-docs.zip`     --- _without docs_: `spring-framework-3.1.0.M1.zip` - The archive is named 'spring-3.2.0.M1-dist.zip'; whereas, all previous _with docs_ archives were named 'spring-framework-*-with-docs.zip' - The archive no longer includes the 'projects' folder - The 'changelog.txt' file is now in the 'docs' folder instead of in the root of the archive - The PDF is now called 'spring-reference.pdf' instead of 'spring-framework-reference.pdf' - Various other folders/files have different names/locations  #### Goal  The aforementioned inconsistencies are likely due to the move to a Gradle-based build system; however, in order to maintain consistency, the Gradle build should be modified to produce distribution archives consistent with previous releases.  #### Deliverables  1. [ ] Analyze the differences between `spring-3.2.0.M1-dist.zip` and `spring-framework-3.1.0.M1-with-docs.zip` in terms of:    - naming conventions    - structure (i.e., folders)    - content 2. [ ] Ensure that the Gradle build produces a _with docs_ distribution archive consistent with previous releases (see deliverable #1)    - Use ""spring-framework"" as the prefix for all release archives    - Use ""-with-docs"" as the suffix for the _with docs_ archive    - Include the 'projects' folder in the archive    - Move the `changelog.txt` file from the 'docs' folder to the root of the archive    - Name the PDF `spring-framework-reference.pdf` instead of `spring-reference.pdf`    - etc. 3. [ ] Ensure that the Gradle build produces a _without docs_ distribution archive consistent with previous releases (see deliverable #1)  ---  **Affects:** 3.2 M1  **Issue Links:** - #14587 Prefix distribution archive with 'spring-framework' instead of 'spring'","closed","type: task,","spring-projects-issues","2012-07-16T15:54:55Z","2019-01-11T12:52:41Z"
"","14130","HibernateTransactionManager 'running within' exception message can be misleading [SPR-9496]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9496](https://jira.spring.io/browse/SPR-9496?redirect=false)** and commented  #### Status Quo  If you configure two instances of `HibernateTransactionManager` (A and B) for different `SessionFactory` instances (A and B) -- potentially using the same underlying `DataSource`   - and then a transactional method for A calls a transactional method for B, an `IllegalTransactionStateException` is thrown with the following exception message (hard coded in `HibernateTransactionManager.doBegin()`):  ``` Pre-bound JDBC Connection found! HibernateTransactionManager does not support running within DataSourceTransactionManager if told to manage the DataSource itself. It is recommended to use a single HibernateTransactionManager for all transactions on a single DataSource, no matter whether Hibernate or JDBC access. ```  Granted the configuration described above may be the result of a configuration error, in any case the exception message can be misleading since the `HibernateTransactionManager` might actually be _running within_ a transaction manager that is not a `DataSourceTransactionManager`.  #### Further Resources  - [Spring and ""Pre-bound JDBC Connection found!""](http://doctorjw.wordpress.com/2011/09/22/spring-and-pre-bound-jdbc-connection-found/) blog post  #### Deliverables  1. Verify that the exception message above is generated regardless of the type of the _enclosing_ transaction manager. 2. If the above verification is positive, modify the exception message so that it does not hard code `DataSourceTransactionManager` in the text.    ---  **Affects:** 3.1 GA  4 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2012-06-12T17:12:41Z","2019-03-13T11:00:52Z"
"","14127","Infer return type of parameterized static factory methods [SPR-9493]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9493](https://jira.spring.io/browse/SPR-9493?redirect=false)** and commented  #### Overview  Spring users often run into issues with _autowiring by type_ for beans that are defined in XML configuration using a `factory-method` that is parameterized.  Although this situation arrises frequently when using dynamic mocks to replace production-specific beans in tests, this situation is not particular to tests or mocks. One can also have parameterized factory methods for generating proxies or dynamic implementations of components in production code.  Specifically, if a `factory-method` is parameterized (i.e., the method itself, not the enclosing `class` or `interface`), Spring always _predicts_ the return type to be `Object`, even if the type can be explicitly inferred from the method signature and supplied arguments (which are available in the bean definition).  Note, however, that the order in which beans are defined plays a role here. If the bean created by the factory is instantiated by the Spring container before the _autowired_ dependent, then there is no issue, since the concrete type of the factory-created bean is already known.  Problems arise when the ordering is reversed: if the _autowired_ dependent bean is created before the factory-created bean is created, then the concrete type of the factory-created bean is not yet known (i.e., it will be predicted to be simply `Object`). Consequently, autowiring by type will fail. Similarly, a call to `getBeansOfType(\)` on the `BeanFactory` or `ApplicationContext` will also fail to return the factory-created bean if it has not yet been created.  ---  #### Dynamic Mock Example  Consider a parameterized `factory-method` declaration such as EasyMock's `createMock()` method which has the following signature.  ``` public static  T createMock(Class toMock) ```  Ideally Spring should be able to predict the type `T` before the factory method is invoked. However, as of Spring 3.1, the predicted type is unfortunately `Object` instead of `T`. For details, see the implementation of the `getTypeForFactoryMethod()` method in `AbstractAutowireCapableBeanFactory`. In short, `getTypeForFactoryMethod()` does not infer the return type based on the parameterized type supplied as an argument to the factory method (i.e., `Class toMock` in the EasyMock example). In such cases the return type is simply predicted to be `Object`.  ##### Test Case  The following test case can be used to verify both the current and the proposed behavior.  With the current behavior the test passes _as is_.  If you comment out the three _getBean()_ lines, the test will then fail. With the changes proposed by this issue, the test would no longer fail with those three lines removed.  ``` @Test public void parameterizedFactoryMethod() { 	RootBeanDefinition rbd = new RootBeanDefinition(EasyMock.class); 	rbd.setFactoryMethodName(""createMock""); 	rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class);  	DefaultListableBeanFactory bf = new DefaultListableBeanFactory(); 	bf.registerBeanDefinition(""easyMock"", rbd);  	// NOTE: commenting out the following three lines will prevent the 	// subsequent call to getBeansOfType() from finding the Runnable mock. 	Object mock = bf.getBean(""easyMock""); 	assertNotNull(mock); 	assertTrue(mock instanceof Runnable);  	Map beans = bf.getBeansOfType(Runnable.class); 	assertEquals(1, beans.size()); } ```  ---  #### Alternatives  In testing scenarios, most developers end up implementing their own `FactoryBean` that circumvents the issues outlined above by explicitly returning the mock object's type in `FactoryBean.getObjectType()` (e.g., in a [`MockitoFactoryBean`](http://www.jayway.com/2011/11/30/spring-integration-tests-part-i-creating-mock-objects/), [`EasyMockFactoryBean`](https://jira.springsource.org/browse/SPR-9130), etc.). There is also an open source project called [Springockito](https://bitbucket.org/kubek2k/springockito/) that addresses this issue for Spring and Mockito.  These are viable work-arounds in testing scenarios when you are explicitly overriding a bean definition with a dynamic mock, because in that case your test configuration is decidedly only for tests.  However, these work-arounds do not address the general need for reliable autowiring by type for beans created by a parameterized `factory-method`.  ---  #### Analysis  If a factory method returns `T` and an argument to the factory method is either parameterized with `Class` or of type `T`, then we should have enough information to infer the exact return type from the method metadata and bean definition.  Returning to the EasyMock example, if we pass `java.lang.Runnable` to the `createMock()` method, then in the `getTypeForFactoryMethod()` method in `AbstractAutowireCapableBeanFactory` we actually have access to all of the following information:  |Description|Value| |:---|:---| | **Factory Class**                            | `org.easymock.EasyMock` | | **Factory Method**                           | `createMock` | | **Factory Method Generic Signature**         | `public static  T org.easymock.EasyMock.createMock(java.lang.Class\)` | | **Factory Method Type Parameters**           | `{T}` | | **Factory Method Generic Return Type**       | `T` | | **Factory Method Generic Parameter Types**   | `{java.lang.Class}` | | **Bean Definition Generic Constructor Args** | `\[java.lang.Runnable\]` |  With that information we should be able to reliably predict the return type to be `java.lang.Runnable`.  ---  #### Deliverables  1. [x] Add a new method to `GenericTypeResolver` that can accurately predict the target return type of a parameterized factory method in most use cases. 2. [x] Modify the `getTypeForFactoryMethod()` method in `AbstractAutowireCapableBeanFactory` so that it properly delegates to the method introduced in the previous deliverable, falling back to the current algorithm if the factory method is not parameterized.  ---  **Affects:** 2.5 final, 3.0 GA, 3.1 GA  **Issue Links:** - #13769 Introduce FactoryBean to create mock beans with EasyMock - #15044 Return type prediction for generic factory method fails if type conversion of method arguments is necessary - #13412 `@Autowired` dependencies against bean definitions with type-inspecific factory-methods may fail (_**""supersedes""**_)  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-06-11T11:52:05Z","2019-01-13T21:06:27Z"
"","14126","Introduce MockEnvironment in the spring-test module [SPR-9492]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9492](https://jira.spring.io/browse/SPR-9492?redirect=false)** and commented  #### Status Quo  For legacy reasons, a `MockEnvironment` implementation already exists in multiple places within Spring's test suite. Furthermore, it is not available to the general public.  #### Goal  `MockEnvironment` can be used as a general purpose _stub_ within developer tests (i.e., not just within Spring's own test suite). As such, it should be promoted to a first-class citizen in the `spring-test` module, alongside the existing `MockPropertySource`.  Doing so would eliminate at least the copy of `MockEnvironment` in the base `spring` module. It would also solve the Javadoc warning that `MockEnvironment` is not visible from `MockPropertySource` in the `spring-test` module.  #### Deliverables  1. [x] Move `MockEnvironment` to the `spring-test` module. 2. [x] Delete all other occurrences of `MockEnvironment`, where possible. 3. [ ] Clean up the Gradle build if necessary.    - deemed unnecessary 4. [x] Document the existence of `MockEnvironment` and `MockPropertySource` in the testing chapter of the reference manual.    ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-06-11T10:56:26Z","2012-07-30T09:02:58Z"
"","14061","Document @Bean 'lite' mode and annotated classes in the reference manual [SPR-9425]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9425](https://jira.spring.io/browse/SPR-9425?redirect=false)** and commented  #### Overview  #13690 raised valid concerns about exactly what kinds of classes are supported with `AnnotationConfigApplicationContext`, `AnnotatedBeanDefinitionReader`, `@ContextConfiguration(classes=...)`, etc.  This issue picks up where #14037 left off.  ---  #### Deliverables  The following should be explicitly documented in the [Java-based container configuration](http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#beans-java) section of the reference manual.  1. [ ] What types of classes are included in the term _annotated classes_    - see `@ContextConfiguration` Javadoc below 2. [ ] The semantics for _`@Bean` Lite Mode_    - see talking points and `@Bean` Javadoc below  ---  #### Talking Points  The following is a collection of talking points that can be covered in the reference manual.  > Inter-`@Bean` method calls are not supported in _lite_ mode. Instead, when one `@Bean-method` invokes another local `@Bean-method`, the invocation is a natural Java direct method invocation since Spring does not intercept the invocation. This is analogous to inter-`@Transactional` method calls where in proxy mode, Spring does not intercept them -- Spring does so only in AspectJ mode. >  > `@Bean` _lite_ mode is typically sufficient for straight factory methods that simply do not need any inter-bean references, possibly because they are creating leaf components, possibly because the returned component instances use `@Inject-based` dependency injection themselves anyway. However, Spring does respect the scoping semantics (e.g., `singleton` and `prototype`) for container-driven `@Bean` factory method calls. Furthermore, Spring also respects lifecycle callbacks for a bean created via an `@Bean-method` in _lite_ mode.  The reference manual should not only discuss the above talking points, but it should also mention some of the undesirable side effects that may occur when naïvely using `@Bean-methods` in _lite_ mode -- for example, the issues encountered in #13690.  ---  #### Related Documentation  ###### `@Bean` Javadoc  ``` /**  * {@code @Bean} Lite Mode  *  * {@code @Bean} methods may also be declared within classes that are not  * annotated with {@code @Configuration}. For example, bean methods may be declared  * in a {@code @Component} class or even in a plain old class. In such cases,  * a {@code @Bean} method will get processed in a so-called 'lite' mode.  *  * Bean methods in lite mode will be treated as plain factory  * methods by the container (similar to {@code factory-method} declarations  * in XML), with scoping and lifecycle callbacks properly applied. The containing  * class remains unmodified in this case, and there are no unusual constraints for  * the containing class or the factory methods.  *  * In contrast to the semantics for bean methods in {@code @Configuration} classes,  * 'inter-bean references' are not supported in lite mode. Instead,  * when one {@code @Bean}-method invokes another {@code @Bean}-method in lite  * mode, the invocation is a standard Java method invocation; Spring does not intercept  * the invocation via a CGLIB proxy. This is analogous to inter-{@code @Transactional}  * method calls where in proxy mode, Spring does not intercept the invocation —  * Spring does so only in AspectJ mode.  */ ```  ###### `@ContextConfiguration` Javadoc  ``` /**  * Annotated Classes  *  * The term annotated class can refer to any of the following.  *  *   * A class annotated with {@link Configuration @Configuration}  * A component (i.e., a class annotated with  * {@link org.springframework.stereotype.Component @Component},  * {@link org.springframework.stereotype.Service @Service},  * {@link org.springframework.stereotype.Repository @Repository}, etc.)  * A JSR-330 compliant class that is annotated with {@code javax.inject} annotations  * Any other class that contains {@link Bean @Bean}-methods  *   */ ```  ---  **Affects:** 3.1 GA  **Issue Links:** - #13690 spring-test allows you to reference configuration classes that aren't annotated with `@Configuration` - #14037 Improve documentation for `@Bean` 'lite' mode and annotated class support in the TestContext Framework - #15002 Log warning when using inner-bean referenced without `@Configuration`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5730b8d316e796c0b4a20c7ae51ced84905ff157, https://github.com/spring-projects/spring-framework/commit/5cd6543d8360489f9ecfcd0de63ee4e06d6e6728  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-05-18T14:27:35Z","2019-01-13T07:04:39Z"
"","14057","Fix compile and test classpaths regarding slf4j versions [SPR-9421]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9421](https://jira.spring.io/browse/SPR-9421?redirect=false)** and commented  #### Status Quo  When executing various tests within Eclipse -- using the `.classpath` files generated by the Gradle `import-into-eclipse.sh` script -- you get the following error:  ``` SLF4J: slf4j-api 1.6.x (or later) is incompatible with this binding. SLF4J: Your binding is version 1.5.5 or earlier. SLF4J: Upgrade your binding to version 1.6.x. or 2.0.x ```  Note that if you upgrade all slf4j dependencies to 1.6.x, you will then see similar failures when running the Gradle build as well.  ---  #### Analysis  The core of the problem is that the slf4j API and implementation JARs are out of sync. Specifically, we currently use version 1.6.1 of `slf4j-api` and version 1.5.3 of `slf4j-jcl`.  It appears that the reason for this is that we want to build against Hibernate 3 and Hibernate 4 which require different versions of slf4j. Note as well that the version of Ehcache also plays a role in this game.  ---  #### Example Failing Tests  |Module|Test Class| |:---|:---| | **spring-context** | `EhCacheCacheTests` | | **spring-orm**     | `HibernateTransactionManagerTests` | | **spring-webmvc**  | `RequestResponseBodyMethodProcessorTests` | | **spring-test**    | `HibernateSessionFlushingTests` |  ---  #### Attempted Fixes in the Past  - [Fix transitive dependency issue with slf4j-api](https://github.com/SpringSource/spring-framework/commit/6d5a630c4491f9b2790095cef4d37f6cdd2d7456) - [Upgrade slf4j-api and -log4j12 dependencies to 1.6.1](https://github.com/SpringSource/spring-framework/commit/fdded0768ebd65f040f0e9c970f50a22ee99d005)  ---  #### Deliverables  1. [x] Ensure that versions for the slf4j API and implementation JARs are compatible in **all** modules. 2. [x] Ensure that tests in **all** modules execute without errors, both via the Gradle build and within Eclipse.  ---  This issue is a sub-task of #12770  **Issue Links:** - #14703 Tests in spring-test-mvc fail to execute in Eclipse - #14699 spring-orm should build against the standard Hibernate artifact  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19d7cedcf2e2a4c6ab837fe59d929a0a26c83f4c","closed","type: task,","spring-projects-issues","2012-05-17T17:03:47Z","2019-01-13T21:06:41Z"
"","14051","Backport ""Fix regression in ClassPathResource descriptions"" [SPR-9415]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9415](https://jira.spring.io/browse/SPR-9415?redirect=false)** and commented  ---  **Affects:** 3.0.2  This issue is a backport sub-task of #14049  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42204e5098202fad665727752fff374364dc22cd","closed","in: core,","spring-projects-issues","2012-05-16T07:18:42Z","2019-01-11T12:43:18Z"
"","14049","Fix regression in ClassPathResource descriptions [SPR-9413]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9413](https://jira.spring.io/browse/SPR-9413?redirect=false)** and commented  #### Status Quo  The changes made in conjunction with #11554 introduced a regression in `ClassPathResource.getDescription()`.  Specifically, calls to `getDescription()` on a resource constructed using `ClassPathResource(String, Class)`   - where the supplied path is a fully-qualified (i.e., _absolute_) path -- now contain the fully-qualified path **twice**.  For example, the following code:  ``` System.out.println(new ClassPathResource(""/org/springframework/core/io/file.xml"", ClassPathResource.class).getDescription()); ```  ... prints:  ``` class path resource [org/springframework/core/io//org/springframework/core/io/file.xml] ```  ... when it should instead print:  ``` class path resource [org/springframework/core/io/file.xml] ```  #### Deliverables  1. Ensure that `ClassPathResource.getDescription()` returns consistent, meaningful results for all variants of the `ClassPathResource()` constructors.  ---  **Affects:** 3.0.2  **Sub-tasks:** - #14051 Backport ""Fix regression in ClassPathResource descriptions""  **Issue Links:** - #11554 ClassPathResource-related FileNotFoundExceptions do not contain fully-qualified resource paths when using class literal convenience constructor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b50f6e19a6820a8e735a89dfee1a85077e804ec5, https://github.com/spring-projects/spring-framework/commit/42204e5098202fad665727752fff374364dc22cd","closed","in: core,","spring-projects-issues","2012-05-15T18:56:50Z","2019-01-11T12:43:22Z"
"","14037","Improve documentation for @Bean 'lite' mode and annotated class support in the TestContext Framework [SPR-9401]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9401](https://jira.spring.io/browse/SPR-9401?redirect=false)** and commented  #### Background  #13690 raised valid concerns about exactly what kinds of classes are supported in the TestContext Framework (TCF) with regard to the `classes` attribute in `@ContextConfiguration`.  In addition, the issues that users ran into were partly due to lacking documentation of the so-called _`@Bean` lite mode_.  #### Status Quo  Classes that are declared via `@ContextConfiguration(classes=...)` (either explicitly or implicitly) are required to be what we call _annotated classes_.  _Annotated classes_ include:  - annotated stereotype components (i.e., classes annotated with `@Component`, `@Service`, etc.) - `@Configuration` classes - any class that contains `@Bean` annotated methods   - these are effectively _annotated factory bean methods_ running in _lite_ mode  However, the current documentation typically refers to _configuration classes_ when it should in fact refer to and explain what is meant by _annotated classes_ and _lite_ mode.  ---  #### Deliverables  1. [x] Update the Javadoc for `@Bean` to better explain the semantics of _lite_ mode. 2. [x] Update all Javadoc in the TCF to explain and refer to _annotated classes_ instead of _configuration classes_. 3. [x] Update the Testing chapter in the reference manual to refer to _annotated classes_ instead of _configuration classes_.  ---  **Affects:** 3.1 GA  **Issue Links:** - #14061 Document `@Bean` 'lite' mode and annotated classes in the reference manual - #15002 Log warning when using inner-bean referenced without `@Configuration` - #13690 spring-test allows you to reference configuration classes that aren't annotated with `@Configuration` (_**""supersedes""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-05-11T15:59:16Z","2019-01-13T07:04:44Z"
"","14034","Ensure that both JUnit and TestNG tests are executed in the Gradle build [SPR-9398]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9398](https://jira.spring.io/browse/SPR-9398?redirect=false)** and commented  #### Status Quo  The Spring TestContext Framework integrates directly with JUnit and TestNG. As such it has tests in its test suite that must run against either JUnit or TestNG. For _Spring Build_ we modified the Ant build script for the `spring-test` module to execute the JUnit and TestNG tests separately using a custom macro as follows:  ```xml 	 		 		  			 				 			 			 			 				 				 					 				 				 				 				 					 				 				 				 			  			 			 			 			 				 				 				 			  		 	 ```  Due to the migration to Gradle, now only JUnit based tests are executed during the build.  #### Deliverables  For the `spring-test` module:  1. [x] Ensure that JUnit tests are executed in the Gradle build, potentially using the following patterns:    - includes: ""\*\*/\*Test.class,\*\*/\*Tests.class""    - excludes: ""\*\*/Abstract\*.class,\*\*/\*TestNG\*.class"" 2. [x] Ensure that TestNG tests are executed in the Gradle build, potentially using the following patterns:    - includes: ""\*\*/testng/\*\*/\*Tests.class""    - excludes: ""\*\*/Abstract\*"" 3. [x] Resolve any lingering _TODOs_ in the code base related to this issue    - [x] in all Java classes    - [x] `/spring-test/src/test/java/org/springframework/test/context/testng/SPR-9398.txt`  ---  **Affects:** 3.2 M1  This issue is a sub-task of #12770  **Issue Links:** - #12770 Migrate Spring build system to Gradle - #14707 Re-enable tests that were disabled during the migration to Gradle - #12870 Upgrade to TestNG 6.5.2  1 votes, 4 watchers","closed","type: task,","spring-projects-issues","2012-05-11T09:52:51Z","2019-01-11T12:38:36Z"
"","13915","Upgrade to JUnit 4.10 [SPR-9277]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-9277](https://jira.spring.io/browse/SPR-9277?redirect=false)** and commented  ---  **Issue Links:** - #14678 Upgrade to JUnit 4.11 - #12870 Upgrade to TestNG 6.5.2","closed","type: task,","spring-projects-issues","2012-03-28T16:34:47Z","2019-01-11T12:45:10Z"
"","14678","Upgrade to JUnit 4.11 [SPR-10044]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10044](https://jira.spring.io/browse/SPR-10044?redirect=false)** and commented  #### Status Quo  The JUnit team recently released [JUnit 4.11](https://github.com/KentBeck/junit/blob/master/doc/ReleaseNotes4.11.md).  #### Excerpt from the JUnit 4.11 Release Notes  The following information is applicable to the Spring Framework build, especially with regard to `junit:junit` vs. `junit:junit-dep` and Hamcrest Maven dependencies.  > **Maven artifacts** >  > Up until now there were two Maven artifacts for JUnit: `junit:junit-dep` and `junit:junit`. From a Maven point-of-view only the former made sense because it did not contain the Hamcrest classes but declared a dependency to the Hamcrest Maven artifact. The latter included the Hamcrest classes which was very un-Maven-like. >  > From this release on, you should use `junit:junit` which will be what `junit:junit-dep` used to. If you still reference `junit:junit-dep`, Maven will automatically relocate you to the new `junit:junit` and issue a warning for you to fix.  #### Deliverables  1. [x] Upgrade the dependency on JUnit in the `spring-test` module from 4.10 to 4.11. 2. [x] Update the entire Gradle build to use JUnit 4.11 instead of the 4.11 snapshot build currently in use. 3. [x] Update the changelog.  ---  **Affects:** 3.2 M2  **Issue Links:** - #14573 Spring test module shouldn't pull in hamcrest-all as hard dependency - #11631 spring-test module should depend on 'junit-dep' instead of 'junit' Maven artifact - #14417 Upgrade to JUnit 4.11 snapshot in support of JDK7 - #13915 Upgrade to JUnit 4.10 - #14595 Remove dependency on hamcrest-lib in Spring MVC Test - #14702 Use EasyMock 2.5.2 consistently across the build - #17116 Upgrade to JUnit 4.12 - #14581 Upgrade to JUnit 4.11 GA when it is released (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b4ecfad12ad1be0c5ad28943696601956883ce6","closed","type: task,","spring-projects-issues","2012-11-27T06:54:51Z","2019-01-11T18:39:11Z"
"","13951","MVC Tutorial Needs to be Updated [SPR-9313]","**[Sajal Dutta](https://jira.spring.io/secure/ViewProfile.jspa?name=sajdutt)** opened **[SPR-9313](https://jira.spring.io/browse/SPR-9313?redirect=false)** and commented  This tutorial is very popular and effective - http://static.springsource.org/docs/Spring-MVC-step-by-step/  But this is outdated. This tutorial differes from any other tutorials because for beginners, we don't know when we need different pieces of the puzzle. It doesn't help much reading on different components separately.We need a tutorial that builds a simple system incorporating various spring technologies. The mvc tutorial mentioned above does that. It's the best way to familiarize with different essential components of a framework. So please update it. This tutorial should be updated whenever a new Spring version is released and affects the tutorial.  When a tutorial exists in the site and no warning is diplayed about its version, it's obvious to assume that the tutorial is up to date.   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-04-06T12:05:32Z","2014-09-20T10:11:16Z"
"","14184","Properties in the JDBC URL got stripped out for Mysql connector [SPR-9550]","**[Rui Li](https://jira.spring.io/secure/ViewProfile.jspa?name=dumbird)** opened **[SPR-9550](https://jira.spring.io/browse/SPR-9550?redirect=false)** and commented  Mysql connector allows to specify many properties in the jdbc URL for different purposes. Some features are only available this way. However when a query is performed through Spring jdbcTemplate, the properties set in the URL have no effect.  For example, using ""jdbc:mysql://localhost:3306/mydb?includeThreadNamesAsStatementComment=true"" with 5.1.15 connector can show the Java thread name in the ""show processlist"" output, a great feature for debugging. If jdbc API is used directly the thread name shows up as expected, but not so if the query is made through jdbc template.   ---  **Affects:** 3.1.1  **Attachments:** - [Archive.zip](https://jira.spring.io/secure/attachment/20291/Archive.zip) (_1.88 kB_)","closed","status: invalid,","spring-projects-issues","2012-06-28T16:43:13Z","2019-01-12T05:28:29Z"
"","14659","MVC test support breaks the contract of ServletRequestAttributes.getRequest() [SPR-10025]","**[Rostislav Georgiev Georgiev](https://jira.spring.io/secure/ViewProfile.jspa?name=rgeorgiev)** opened **[SPR-10025](https://jira.spring.io/browse/SPR-10025?redirect=false)** and commented  #### Status Quo  In the new web application test support in the TestContext framework, there is a `ServletTestExecutionListener` which creates and sets a mock request in the `RequestContextHolder` as follows:  ``` MockHttpServletRequest request = new MockHttpServletRequest(mockServletContext); MockHttpServletResponse response = new MockHttpServletResponse(); ServletWebRequest servletWebRequest = new ServletWebRequest(request, response); RequestContextHolder.setRequestAttributes(servletWebRequest); ```  However, the aforementioned mock request is not used when a new test request is made using the new _Spring MVC Test_ support as follows:  ``` mockMvc.perform(...) ```  So everything works if you use the passed request, but it breaks if one tries to get the request from `RequestContextHolder`. This is happening for example when you use `ServletUriComponentsBuilder.fromCurrentRequest()`.  ---  #### Analysis  The issue is that the initial request set by the `ServletTestExecutionListener` is not replaced by the actual request, since the code in `FrameworkServlet` (see below) is checking for class equality (i.e., via `.equals()`), but the actual class of `previousAttributes` is `ServletWebRequest` instead of `ServletRequestAttributes`.  ``` RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes(); ServletRequestAttributes requestAttributes = null; if (previousAttributes == null || previousAttributes.getClass().equals(ServletRequestAttributes.class)) {     requestAttributes = new ServletRequestAttributes(request); } ```  ---  #### Deliverables  1. Refactor `FrameworkServlet.processRequest(...)` to use an ""instance of"" check (instead of `.equals(ServletRequestAttributes.class)`) to determine if the current request is a Servlet request.  ---  **Affects:** 3.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3643d92cb8f8d7ba3bee8d19db300c557e2e85a8  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2012-11-23T09:16:09Z","2019-01-13T21:05:00Z"
"","14658","@RequestBody is not working with parameters of generic types(TypeVariable) defined on a class level. [SPR-10024]","**[Rostislav Georgiev Georgiev](https://jira.spring.io/secure/ViewProfile.jspa?name=rgeorgiev)** opened **[SPR-10024](https://jira.spring.io/browse/SPR-10024?redirect=false)** and commented  In following scenario:  ```java public abstract class AbstractCrudController {     @RequestMapping(method = POST)    @ResponseStatus(CREATED)    @ResponseBody    public T create(@RequestBody T entity) {       return getService().save(entity);    } }     @RequestMapping(""api/tests"") public class EmptyCrudController extends AbstractCrudController { } ```  The request processing fails. The issue is introduced by a change in the RequestResponseBodyMethodProcessor's ""resolveArgument"" method.  Before it was :  ```java Object argument = readWithMessageConverters(webRequest, parameter, parameter.getParameterType()); ```  Now it's changed to :  ```java Object argument = readWithMessageConverters(webRequest, parameter, parameter.getGenericParameterType()); ```  ---  **Affects:** 3.2 RC1  **Issue Links:** - #14598 HttpMessageConverter no longer works for `@ResponseBody` parameters with an extended generic.at the type (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2012-11-23T05:48:08Z","2019-01-13T07:02:03Z"
"","14595","Remove dependency on hamcrest-lib in Spring MVC Test [SPR-9961]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9961](https://jira.spring.io/browse/SPR-9961?redirect=false)** and commented  ---  **Affects:** 3.2 RC1  **Issue Links:** - #14573 Spring test module shouldn't pull in hamcrest-all as hard dependency - #14678 Upgrade to JUnit 4.11  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9e22ac496d684d922bda21acea800e4f0ef88cb1, https://github.com/spring-projects/spring-framework/commit/4812fcccc45094e838087451f3fee227f1023a6d","closed","type: task,","spring-projects-issues","2012-11-06T03:11:52Z","2019-01-11T14:21:59Z"
"","14584","The behavior of returning null for Callable or DeferredResult return values is currently undefined [SPR-9951]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9951](https://jira.spring.io/browse/SPR-9951?redirect=false)** and commented   ---  **Affects:** 3.2 RC1","closed","type: bug,","spring-projects-issues","2012-11-03T09:34:30Z","2012-11-20T12:24:11Z"
"","14568","Allow customization of request mappings [SPR-9935]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9935](https://jira.spring.io/browse/SPR-9935?redirect=false)** and commented  There are cases where it would be useful to be able to customize the value of `@RequestMapping` annotations. This occurs most often in frameworks, like Spring Social and others, that build on Spring MVC where the default path pattern a controller is mapped to by the framework may need to be customized by a user of the framework.  One way to achieve this is to support placeholders in the value of `@RequestMapping` annotations similar to `@ManagedResource` (#12892).  ---  **Affects:** 3.1.2  **Issue Links:** - #10427 Externalized request mapping as a 1st class alternative to `@RequestMapping`","closed","type: enhancement,","spring-projects-issues","2012-10-31T05:06:01Z","2019-01-13T07:02:23Z"
"","14550","Provide option in MockRestServiceServer where an instance of MockMvc is used to obtain the response [SPR-9917]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9917](https://jira.spring.io/browse/SPR-9917?redirect=false)** and commented  Currently `MockRestServiceServer` allows defining expected requests and the stub response that should be returned for each expected request.  In some cases, where tests involve both client- and server-side code, it would be useful if instead of defining stub responses, the responses were obtained by invoking the server-side Spring MVC Test support (i.e. an instance of MockMvc) to obtain a MockHttpServletResponse and adapt it to a client-side response. This would enable tests that span both client and server side code.  This is based on question raised by Jeff Holmes in presentation at SpringOne.   ---  **Affects:** 3.2 M2  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-10-24T11:39:22Z","2012-12-04T13:21:13Z"
"","14519","Document how to add response assertions with Spring MVC Test for Spring HATEOAS links [SPR-9886]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9886](https://jira.spring.io/browse/SPR-9886?redirect=false)** and commented  ---  **Affects:** 3.2 M2  This issue is a sub-task of #14493","closed","type: task,","spring-projects-issues","2012-10-17T08:37:19Z","2019-01-11T13:22:04Z"
"","14493","Add documentation for the Spring MVC Test support [SPR-9860]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9860](https://jira.spring.io/browse/SPR-9860?redirect=false)** and commented  ---  **Affects:** 3.2 RC1  **Sub-tasks:** - #14519 Document how to add response assertions with Spring MVC Test for Spring HATEOAS links  **Issue Links:** - #12606 Add first class support for client-side REST tests - #14492 Add first class support for testing Spring MVC applications","closed","type: task,","spring-projects-issues","2012-10-05T08:57:53Z","2019-01-11T13:19:04Z"
"","14492","Add first class support for testing Spring MVC applications [SPR-9859]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9859](https://jira.spring.io/browse/SPR-9859?redirect=false)** and commented  This is based on the [spring-test-mvc](https://github.com/SpringSource/spring-test-mvc) project that has been available on Github, as a separate project, for over a year. The project provides a fluent API for performing requests and verifying expectations on the resulting responses. It executes requests using an instance of `DispatcherServlet` and passes to it a `MockHttpServletRequest` and `MockHttpServletResponse`, i.e. without the need for a running a Servlet container.  ```java WebApplicationContext wac = ...;  MockMvc mockMvc = webAppContextSetup(wac).configureWarRootDir(""src/main/webapp"", false).build()  mockMvc.perform(get(""/form""))     .andExpect(status().isOk())     .andExpect(content().mimeType(""text/html""))     .andExpect(forwardedUrl(""/WEB-INF/layouts/main.jsp""));  ```  ---  **Affects:** 3.1.2  **Issue Links:** - #9917 Support loading WebApplicationContexts with the TestContext Framework - #12606 Add first class support for client-side REST tests - #14493 Add documentation for the Spring MVC Test support - #13849 Release 1.0 spring-test-mvc","closed","type: enhancement,","spring-projects-issues","2012-10-05T08:33:35Z","2019-01-11T13:19:46Z"
"","14335","Backport ""Flashmap matching logic fails when target params are encoded."" [SPR-9701]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9701](https://jira.spring.io/browse/SPR-9701?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #14291  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8166d615550cd467112d7c6d97e872347fa45f0","closed","in: web,","spring-projects-issues","2012-08-17T14:37:01Z","2019-01-11T13:30:39Z"
"","14333","Backport ""Invalid MIME-type causes a 500 error"" [SPR-9699]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9699](https://jira.spring.io/browse/SPR-9699?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #13781","closed","in: web,","spring-projects-issues","2012-08-17T11:25:00Z","2019-01-11T13:23:28Z"
"","14330","Provide support for Filter registrations in AbstractDispatcherServletInitializer [SPR-9696]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9696](https://jira.spring.io/browse/SPR-9696?redirect=false)** and commented  Besides registering the filter and mapping it to the DispatcherServlet, opportunities to save on boilerplate code include selecting a filter name by convention, setting the asyncSupported flag, and specifying the DispatcherType's the filter is mapped to.  ---  **Affects:** 3.2 M1  This issue is a sub-task of #14035  **Issue Links:** - #13114 Allow MVC interceptors to handle requests for URLs that aren't mapped to any handler  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cb564b287fe36bf5d6840a674d4486f2d0fc91fd","closed","type: task,","spring-projects-issues","2012-08-16T16:07:55Z","2019-01-11T13:23:30Z"
"","14329","Add options to override the default timeout value and task executor for an individual async request [SPR-9695]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9695](https://jira.spring.io/browse/SPR-9695?redirect=false)** and commented  ---  **Affects:** 3.2 M1  This issue is a sub-task of #14035","closed","type: task,","spring-projects-issues","2012-08-16T15:57:06Z","2019-01-11T13:23:38Z"
"","14328","Add Servlet 3 async related options to the MVC namespace and Java config [SPR-9694]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9694](https://jira.spring.io/browse/SPR-9694?redirect=false)** and commented  Allow configuration of default timeout value and default task executor.  ---  **Affects:** 3.2 M1  This issue is a sub-task of #14035  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c8c967caa4062670ac0660db97feee43bf54500","closed","type: task,","spring-projects-issues","2012-08-16T15:55:03Z","2019-01-11T13:23:35Z"
"","14321","Backport ""ErrorsMethodArgumentResolver fails when model attribute is mentioned in the signature of @ModelAttribute-annotated method"" [SPR-9687]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9687](https://jira.spring.io/browse/SPR-9687?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #14014  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4fccd1799a4aa4b21fd7a6909a6fb9d1307d7b07  1 votes, 4 watchers","closed","in: web,","spring-projects-issues","2012-08-14T06:43:41Z","2019-01-11T13:24:04Z"
"","14272","BeanFactory.getType(String) may not return a Proxy class depending on the order of bean declarations [SPR-9638]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9638](https://jira.spring.io/browse/SPR-9638?redirect=false)** and commented  When one bean tries to find the type of another, via `BeanFactory.getType(String)`, from an initialization method (e.g. `InitializingBean`), and when the target bean type is expected to be a JDK dynamic proxy, the actual type returned varies depending on whether the target bean is declared before or after the bean interrogating its type.  This is the mechanism used in Spring MVC to discover and cache `@RequestMapping` methods to invoke. Hence it's necessary to the presence of JDK proxies.  ---  **Affects:** 3.1.2  **Issue Links:** - #14236 BeanFactory.getType() can return inaccurate (non-proxied) type when using AOP (_**""is duplicated by""**_)  2 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-07-26T09:00:20Z","2019-01-12T02:47:02Z"
"","14267","Backport ""When testing controller mappings using AnnotationMethodHandlerAdapter NPE is thrown"" [SPR-9633]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9633](https://jira.spring.io/browse/SPR-9633?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #14263","closed","in: web,","spring-projects-issues","2012-07-25T05:40:46Z","2019-01-11T12:56:39Z"
"","14256","Backport ""Value-oriented return method handling broken in 3.1"" [SPR-9622]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9622](https://jira.spring.io/browse/SPR-9622?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #13856  **Issue Links:** - #14302 Issue/Problem on redirect after migration project on RequestMappingHandlerMapping/RequestMappingHandlerAdapter (_**""is duplicated by""**_)  1 votes, 2 watchers","closed","in: web,","spring-projects-issues","2012-07-23T07:20:04Z","2019-01-11T12:57:04Z"
"","14245","A forward before startAsync is called results in incorrect async request processing [SPR-9611]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9611](https://jira.spring.io/browse/SPR-9611?redirect=false)** and commented  If a forward occurs before async processing starts, the async execution chain can contain extra Callable instances that should no longer be in it. This change should ensure the async execution chain is always in sync with the call stack.   ---  **Affects:** 3.2 M1","closed","type: bug,","spring-projects-issues","2012-07-20T09:46:06Z","2012-07-20T12:06:10Z"
"","14228","MockHttpServletResponse's sendRedirect() method does not set the status code [SPR-9594]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9594](https://jira.spring.io/browse/SPR-9594?redirect=false)** and commented  #### Overview  Currently `MockHttpServletResponse.sendRedirect()` does not set the HTTP response status, but it should.  The Javadoc for `HttpServletResponse.sendRedirect`:  > Sends a temporary redirect response to the client using the specified redirect location URL.  The servlet spec says:  > The sendRedirect method will set the appropriate headers and content body to redirect the client to a different URL.  There is no specific status code mentioned, but ""temporary redirect"" implies 302, a similar comment exists in `RedirectView.sendRedirect()`, and it is what Tomcat returns.  [Originally reported](https://github.com/SpringSource/spring-test-mvc/pull/47) in spring-test-mvc by Rob Winch.  #### Deliverables  1. [x] Set the HTTP response status code in `MockHttpServletResponse.sendRedirect()` to `302` 2. [x] Set the `Location` HTTP response header in `MockHttpServletResponse.sendRedirect()` to the supplied URL    ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/35a423a858c8578500858815cfe35b23fcdf5bb5, https://github.com/spring-projects/spring-framework/commit/59d80ec19e7e6333a2af64b98f68d3efecc58a97","closed","type: bug,","spring-projects-issues","2012-07-13T08:46:07Z","2019-01-11T12:52:48Z"
"","14221","Improve getNamedDispatcher(String) method of MockServletContext [SPR-9587]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9587](https://jira.spring.io/browse/SPR-9587?redirect=false)** and commented  Currently the `getNamedDispatcher(String)` method of `MockServletContext` always returns `null`. However, it could return a `MockRequestDispatcher` for the name ""default"", i.e. one would always expect a default `Servlet` to be present. This is specifically important for web application tests that involve the `DefaultServletHttpRequestHandler`, which attempts to forward to the default `Servlet`.  Additionally, `MockServletContext` could provide a method for registering named `RequestDispatcher` instances.   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37dc211f588eeb296a60c8d9f234c8341506ad49","closed","type: enhancement,","spring-projects-issues","2012-07-12T08:55:55Z","2012-10-07T12:56:43Z"
"","14204","Proper handling of parameterized types for @RequestBody parameters [SPR-9570]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9570](https://jira.spring.io/browse/SPR-9570?redirect=false)** and commented  ---  **Affects:** 3.1.1  **Issue Links:** - #13028 HttpMessageConverter doesn't support typed collections (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2012-07-06T09:01:02Z","2019-01-11T12:53:57Z"
"","14183","Backport ""UriComponentsBuilder.fromUri brakes url encoded query param"" [SPR-9549]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9549](https://jira.spring.io/browse/SPR-9549?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #13955","closed","in: web,","spring-projects-issues","2012-06-27T07:48:52Z","2019-01-11T13:07:53Z"
"","14167","Allow configuring view resolution through the MVC Java config [SPR-9533]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9533](https://jira.spring.io/browse/SPR-9533?redirect=false)** and commented  ---  **Issue Links:** - #11753 Allow configuring view resolution through the MVC Java config and the MVC Namespace (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-06-22T18:39:01Z","2019-01-11T13:08:04Z"
"","14141","Backport ""Use Jackson 2.0 for Jackson based json processing such as MappingJacksonJsonView"" [SPR-9507]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9507](https://jira.spring.io/browse/SPR-9507?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #13940  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc822cdca0b8d62eee848b1a7201bef83a51dbcd, https://github.com/spring-projects/spring-framework/commit/a387d13d5fc99be0b2e9d1994623a8838e571c00, https://github.com/spring-projects/spring-framework/commit/c9a2dbdbfde8e424c34c9b8955ed95fb64d78382","closed","in: web,","spring-projects-issues","2012-06-14T04:37:09Z","2019-01-11T13:06:22Z"
"","14136","Backport ""Unknown status codes (i.e. not in HttpStatus enum) prevent HttpClientErrorException and HttpServerErrorExceptions from being raised"" [SPR-9502]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9502](https://jira.spring.io/browse/SPR-9502?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #14042","closed","in: web,","spring-projects-issues","2012-06-13T05:34:57Z","2019-01-11T13:06:07Z"
"","14068","Backport ""Regression: Incorrect behavior if a @PathVariable has the same name as a @ModelAttribute's object property"" [SPR-9432]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9432](https://jira.spring.io/browse/SPR-9432?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #13987  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1af7575bded873006014792ac853ee492b0eb857","closed","in: web,","spring-projects-issues","2012-05-23T15:52:07Z","2019-01-11T12:42:42Z"
"","14055","Backport ""@PathVariable drops extension"" [SPR-9419]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9419](https://jira.spring.io/browse/SPR-9419?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #13971  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8143d66e4c13fe2b1b8fb04062145a49e4bd4fca  1 votes, 2 watchers","closed","in: web,","spring-projects-issues","2012-05-16T10:25:26Z","2019-01-11T12:43:28Z"
"","14036","Documentation for the Servlet 3, async support [SPR-9400]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9400](https://jira.spring.io/browse/SPR-9400?redirect=false)** and commented  In the mean time see series of [blog posts](http://blog.springsource.org/2012/05/06/spring-mvc-3-2-preview-introducing-servlet-3-async-support/).  Specific items:  * Global config options via MVC namespace and Java config * Per request configuration overrides (timeout and task executor) * New controller return types `DeferredResult`, `Callable`, and `AsyncTask` * `AsyncHandlerInterceptor` as well Filter-related considerations  ---  **Affects:** 3.2 M1  This issue is a sub-task of #13162  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26b1f44ce72705cf355ff7401620371dfa13de7c, https://github.com/spring-projects/spring-framework/commit/e09bdb31cc4d8e77a3157a9ecff3d29750a8614a","closed","type: task,","spring-projects-issues","2012-05-11T13:46:36Z","2019-01-11T12:43:40Z"
"","14035","Add Servlet 3 async support related config options [SPR-9399]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9399](https://jira.spring.io/browse/SPR-9399?redirect=false)** and commented  ---  **Affects:** 3.2 M1  **Sub-tasks:** - #14328 Add Servlet 3 async related options to the MVC namespace and Java config - #14329 Add options to override the default timeout value and task executor for an individual async request - #14330 Provide support for Filter registrations in AbstractDispatcherServletInitializer  **Issue Links:** - #13162 Support for Servlet 3.0/3.1 asynchronous request processing  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cdab04a032f2807d18d5156cf0068caf2b52bedb","closed","type: enhancement,","spring-projects-issues","2012-05-11T13:42:50Z","2019-01-11T12:38:22Z"
"","14033","Backport ""JSON (jackson) @RequestBody marshalling throws java.io.EOFException when body is missing"" [SPR-9397]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9397](https://jira.spring.io/browse/SPR-9397?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a sub-task of #13876  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc822cdca0b8d62eee848b1a7201bef83a51dbcd, https://github.com/spring-projects/spring-framework/commit/a387d13d5fc99be0b2e9d1994623a8838e571c00, https://github.com/spring-projects/spring-framework/commit/e66bc07c37af1879383d2877dc0dd8f113763657","closed","type: task,","spring-projects-issues","2012-05-10T15:42:09Z","2019-01-11T12:38:28Z"
"","14032","Backport ""Cannot amend properties in RequestMappingHandlerMapping (e.g. useSuffixPatternMatch) using a bean post processor as ApplicationContextAwareProcessor always fires first initialising RequestMappingHandlerMapping"" [SPR-9396]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9396](https://jira.spring.io/browse/SPR-9396?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #14007  1 votes, 3 watchers","closed","in: web,","spring-projects-issues","2012-05-10T15:40:49Z","2019-01-11T12:38:43Z"
"","14031","Backport ""Reinstate check for a type-level @RequestMapping annotation to decide if a bean contains @RequestMapping methods"" [SPR-9395]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9395](https://jira.spring.io/browse/SPR-9395?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #14010  **Issue Links:** - #14020 Backport ""Reinstate check for a type-level `@RequestMapping` annotation to decide if a bean contains `@RequestMapping` methods"" (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2012-05-10T15:38:53Z","2019-01-13T07:04:46Z"
"","14020","Backport ""Reinstate check for a type-level @RequestMapping annotation to decide if a bean contains @RequestMapping methods"" [SPR-9384]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9384](https://jira.spring.io/browse/SPR-9384?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #14010  **Issue Links:** - #14031 Backport ""Reinstate check for a type-level `@RequestMapping` annotation to decide if a bean contains `@RequestMapping` methods"" (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2fa0e63e5ab84ac964c55a28000104d3855c886c","closed","in: web,","spring-projects-issues","2012-05-07T10:12:08Z","2019-01-13T07:04:52Z"
"","13994","Support for WebSocket messaging [SPR-9356]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9356](https://jira.spring.io/browse/SPR-9356?redirect=false)** and commented  The [WebSocket protocol](http://tools.ietf.org/html/rfc6455) has been standardized by the IETF and the [WebSocket API](http://www.w3.org/TR/websockets) is almost standardized by the W3C. A number of Java implementations have become available including servlet containers like Jetty and Tomcat. The Servlet 3.1 spec [JSR-340](http://jcp.org/en/jsr/detail?id=340) will likely define the initial WebSocket upgrade request while [JSR-356](http://jcp.org/en/jsr/detail?id=356) will define a Java-based WebSocket API.  WebSockets results in a messaging-style architecture, in contrast to a REST-based HTTP architecture, and is arguably much more usable with some additional protocol like XMPP, AMQP, STOMP, etc. There are plans to support it in [Spring Integration](https://jira.springsource.org/browse/INT-1196) but there is also room for such support in web applications, support on which Spring Integration could potentially build upon.  If you'd like to see such support added please comment on specific uses cases (or experiences) and requirements for using the WebSocket protocol in a web application. Keep in mind the WebSocket protocol is full duplex and support should be usable on both the client and the server side.  ---  **Affects:** 3.1.1  **Sub-tasks:** - #15371 Enable STOMP over WebSocket support - #15372 Create spring-messaging module - #15373 Provide an annotation-based programming model for processing message - #15374 Add support for sending messages through (full-featured) STOMP brokers - #15375 Create STOMP over WebSocket sample application - #15376 Add support for sending direct messages to connected STOMP clients - #15412 Support using the negotiated WebSocket sub-protocol - #15461 Configuration support for WebSocket and STOMP  **Issue Links:** - [INT-1196](https://jira.spring.io/browse/INT-1196) WebSocket adapters (_**""is depended on by""**_) - [SEC-2049](https://jira.spring.io/browse/SEC-2049) WebSockets support - #15741 Add documentation for the WebSocket and STOMP/WebSocket support - [SEC-2179](https://jira.spring.io/browse/SEC-2179) Provide Spring Security WebSocket support  50 votes, 60 watchers","closed","has: votes-jira,","spring-projects-issues","2012-04-30T10:18:31Z","2019-01-11T12:36:53Z"
"","13926","JMX related failures in spring-context tests [SPR-9288]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9288](https://jira.spring.io/browse/SPR-9288?redirect=false)** and commented  The failure occurs when I run all spring-context tests from the command line. It doesn't fail when running the test alone, the tests in the same package, or all tests inside Eclipse.  The test creates an MBeanServer via `javax.management.MBeanServerFactory`, then tries to check if an `MBeanServerFactoryBean` will locate that same instance. The assertSame on line 65 fails because more than one MBeanServer instances were found and the first one returned was not the same instance.  Running gradle in debug mode and using breakpoints in addMBeanServer() and removeMBeanServer() of MBeanServerFactory, I was able to find one case where an MBeanServer is added but not removed. It happens in `AdvisedJRubyScriptFactoryTests` inside JRuby itself when Spring tries to load a script via JRubyScriptFactory. So it looks like a side effect, which explains why the failure doesn't occur when running a single test but not why it doesn't fail inside Eclipse.  I experimented with a tearDown() method in `AdvisedJRubyScriptFactoryTests`, which looks for and releases any MBeanServers it finds but that caused a failure in `JmxUtilsTests.testLocatePlatformMBeanServer`. So clearly not a good fix. Furthermore the fact this is an environment-sensitive issue makes even more hesitant to go any further.  ---  **Affects:** 3.2 M1  **Issue Links:** - #14664 MBeanServerFactoryBeanTests.testWithLocateExistingAndExistingServer failing (_**""is duplicated by""**_) - #14665 JmxUtilsTests.testLocatePlatformMBeanServer failing (_**""is duplicated by""**_)  1 votes, 5 watchers","closed","type: task,","spring-projects-issues","2012-03-30T10:50:27Z","2019-01-11T12:48:15Z"
"","14639","Deprecate pre-3.1 @MVC, Servlet-based infrastructure classes [SPR-10005]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10005](https://jira.spring.io/browse/SPR-10005?redirect=false)** and commented  That includes `DefaultAnnotationHandlerMapping`, `AnotationMethodHandlerAdapter`, and `AnnotationMethodHandlerExceptionResolver`.  See [""New HandlerMethod-based Support Classes For Annotated Controller Processing""](http://static.springsource.org/spring-framework/docs/3.1.3.RELEASE/spring-framework-reference/htmlsingle/spring-framework-reference.html#new-in-3.1-handler-method-controller-processing).   ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77223d7ced49fffd4b9654d5045c5bba0865ef7c","closed","type: task,","spring-projects-issues","2012-11-20T11:46:08Z","2012-11-20T11:59:38Z"
"","13911","HttpStatusCodeException cannot be serialized [SPR-9273]","**[Ronald Dauster](https://jira.spring.io/secure/ViewProfile.jspa?name=r.dauster)** opened **[SPR-9273](https://jira.spring.io/browse/SPR-9273?redirect=false)** and commented  Being a Throwable, org.springframework.web.client.HttpStatusCodeException should be serializable. However, it references a java.nio.charset.Charset, which is not java.io.Serializable, causing an NotSerializableException.  ---  **Affects:** 3.1.1  **Issue Links:** - #13976 HttpStatusCodeException not serializable (_**""is duplicated by""**_) - #12247 HttpStatusCodeException should contain response body  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ff43726be693f32b7bf2a6d237ab65f8ce84ba6","closed","type: regression,","spring-projects-issues","2012-03-28T03:31:10Z","2019-01-11T12:45:19Z"
"","14010","Reinstate check for a type-level @RequestMapping annotation to decide if a bean contains @RequestMapping methods [SPR-9374]","**[Ronald D Kurr](https://jira.spring.io/secure/ViewProfile.jspa?name=kurron)** opened **[SPR-9374](https://jira.spring.io/browse/SPR-9374?redirect=false)** and commented  We have a set of MVC controllers that work fine in Spring 3.0 but break in 3.1.  The issue is that the controller request mappings never get applied so the URLs never get resolved.  I spent some time in the debugger and think I know what the issue is: Spring 3.1 can no longer see annotations on controllers where the annotations are on an interface and not the class.  In our implementation, the controllers are composed of a combination of a Java interface, which has many of the annotations that we use, and a concrete class implementing that interface. We also specify the use of JDK Dynamic Proxies for our proxying implementation, which works just fine since many of the annotations are on the interface.  If you watch the ClassPathScanningCandidateComponentProvider and its use of the AnnotationTypeFilter you will see that it is looking for the `@Controller` annotation on the generated proxy class, which it can't find, so the bean is rejected as not being a controller.  If I move the `@Controller` annotation from the class to the interface so it can be seen by the filter, it gets rejected because the interface is not concrete.  The only work around I've discovered is to have the `@Controller` annotation in both the interface and class, which isn't very DRY.  We use aspects and transactional proxies on our controllers and had issues switching to a CGLIB-based solution.  I was hoping for a drop-in replacement for the 3.0 libraries and will wait until the issue is resolved.  ---  **Affects:** 3.1.1  **Attachments:** - [spring-mvc-bug.txt](https://jira.spring.io/secure/attachment/19629/spring-mvc-bug.txt) (_765 bytes_)  **Sub-tasks:** - #14020 Backport ""Reinstate check for a type-level `@RequestMapping` annotation to decide if a bean contains `@RequestMapping` methods"" - #14031 Backport ""Reinstate check for a type-level `@RequestMapping` annotation to decide if a bean contains `@RequestMapping` methods""","closed","type: bug,","spring-projects-issues","2012-05-03T10:46:07Z","2019-01-13T07:04:58Z"
"","13839","LocalContainerEntityManagerFactoryBean ignores standard JPA 2.0 properties [SPR-9201]","**[Ronak Patel](https://jira.spring.io/secure/ViewProfile.jspa?name=ronak2121)** opened **[SPR-9201](https://jira.spring.io/browse/SPR-9201?redirect=false)** and commented  Spring's LocalContainerEntityManagerFactoryBean seems to ignore standard JPA 2.0 properties to specify database connection attributes.  This is also highlighted in this stackoverflow link:  http://stackoverflow.com/questions/2660485/why-does-hibernate-ignore-the-jpa2-standardized-properties-in-my-persistence-xml   ---  **Affects:** 3.0.7","closed","status: invalid,","spring-projects-issues","2012-03-05T09:58:46Z","2019-01-12T05:28:58Z"
"","14641","org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.StackOverflowError [SPR-10007]","**[rohid dev](https://jira.spring.io/secure/ViewProfile.jspa?name=rohiddev@gmail.com)** opened **[SPR-10007](https://jira.spring.io/browse/SPR-10007?redirect=false)** and commented  Exception thrown : org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.StackOverflowError at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:949) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)  ---  **Affects:** 3.1 RC1  **Issue Links:** - #14640 org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.StackOverflowError (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2012-11-20T13:21:23Z","2020-03-17T21:38:13Z"
"","14640","org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.StackOverflowError [SPR-10006]","**[rohid dev](https://jira.spring.io/secure/ViewProfile.jspa?name=rohiddev@gmail.com)** opened **[SPR-10006](https://jira.spring.io/browse/SPR-10006?redirect=false)** and commented  CWSRV0068E: Uncaught exception thrown in one of the service methods of the servlet: TravelHome_MVC_Dispatcher. Exception thrown : org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.StackOverflowError at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:949) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)      at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:321)     at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1157)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1146)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:592)     at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:526)     at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:90)     at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:764)     at com.ibm.ws.wswebcontainer.WebContainer.handleRequest(WebContainer.java:1478)     at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:133)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:450)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:508)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:296)     at com.ibm.ws.http.channel.inbound.impl.HttpICLReadCallback.complete(HttpICLReadCallback.java:102)     at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:165)     at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217)     at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161)     at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:136)     at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:196)     at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:751)     at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:881)     at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1551)  Caused by: java.lang.StackOverflowError at java.util.regex.Pattern$BitClass.match(Pattern.java:2909) at java.util.regex.Pattern$Sub.match(Pattern.java:5283) at java.util.regex.Pattern$Sub.match(Pattern.java:5283) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$GroupHead.match(Pattern.java:4606) at java.util.regex.Pattern$LazyLoop.match(Pattern.java:4795) at java.util.regex.Pattern$GroupTail.match(Pattern.java:4665) at java.util.regex.Pattern$Sub.match(Pattern.java:5283) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$GroupHead.match(Pattern.java:4606) at java.util.regex.Pattern$LazyLoop.match(Pattern.java:4795) at java.util.regex.Pattern$GroupTail.match(Pattern.java:4665) at java.util.regex.Pattern$Sub.match(Pattern.java:5283) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$GroupHead.match(Pattern.java:4606) at java.util.regex.Pattern$LazyLoop.match(Pattern.java:4795) at java.util.regex.Pattern$GroupTail.match(Pattern.java:4665) at java.util.regex.Pattern$Sub.match(Pattern.java:5283) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$GroupHead.match(Pattern.java:4606) at java.util.regex.Pattern$LazyLoop.match(Pattern.java:4795) at java.util.regex.Pattern$GroupTail.match(Pattern.java:4665) at java.util.regex.Pattern$Sub.match(Pattern.java:5283) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$GroupHead.match(Pattern.java:4606) at java.util.regex.Pattern$LazyLoop.match(Pattern.java:4795) at java.util.regex.Pattern$GroupTail.match(Pattern.java:4665) at java.util.regex.Pattern$Sub.match(Pattern.java:5283) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$GroupHead.match(Pattern.java:4606) at java.util.regex.Pattern$LazyLoop.match(Pattern.java:4795) at java.util.regex.Pattern$GroupTail.match(Pattern.java:4665) at java.util.regex.Pattern$Sub.match(Pattern.java:5283) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$GroupHead.match(Pattern.java:4606) at java.util.regex.Pattern$LazyLoop.matchInit(Pattern.java:4811) at java.util.regex.Pattern$Prolog.match(Pattern.java:4689) at java.util.regex.Pattern$GroupHead.match(Pattern.java:4606) at java.util.regex.Pattern$Single.match(Pattern.java:3350) at java.util.regex.Pattern$Branch.match(Pattern.java:4566) at java.util.regex.Pattern$Start.match(Pattern.java:3055) at java.util.regex.Matcher.search(Matcher.java:1108) at java.util.regex.Matcher.find(Matcher.java:544) at org.springframework.util.AntPathStringMatcher.createPattern(AntPathStringMatcher.java:61) at org.springframework.util.AntPathStringMatcher.\(AntPathStringMatcher.java:54) at org.springframework.util.AntPathMatcher.matchStrings(AntPathMatcher.java:219) at org.springframework.util.AntPathMatcher.doMatch(AntPathMatcher.java:105) at org.springframework.util.AntPathMatcher.match(AntPathMatcher.java:68) at org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getMatchingPattern(PatternsRequestCondition.java:203) at org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getMatchingCondition(PatternsRequestCondition.java:186) at org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(RequestMappingInfo.java:181) at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:64) at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:1) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:248) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:214) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:1) at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:288) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1040) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1025) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:863) ... 2013 more  ---  **Affects:** 3.1 RC1  **Issue Links:** - #14641 org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.StackOverflowError (_**""is duplicated by""**_)","closed","in: web,","spring-projects-issues","2012-11-20T13:14:44Z","2019-01-11T19:02:00Z"
"","13890","MessageSourceResourceBundle sould be acessible in JSP EL [SPR-9252]","**[Rodrigo Coacci](https://jira.spring.io/secure/ViewProfile.jspa?name=rcoacci)** opened **[SPR-9252](https://jira.spring.io/browse/SPR-9252?redirect=false)** and commented  Please expose or document a way to access the MessageSourceResourceBundle injected in the JSTL/JSP views (SpringMVC) via expression language. Basically what I would like to do is something like this, supposing I have a MessageSource properly configured in my Spring:  In application.properties:  org.foo.Text=Hello World!  In JSP:    I know about  and  tags, but what if I want to put the internationalized text in a HTML tag like a \ or some custom tag (e.g. displayTag)? It's not very mantainable to create a variable for each message I want to use in EL also (using  either  or )    ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-03-20T05:49:11Z","2018-12-12T15:55:45Z"
"","14464","Plus signs in url variables not encoded; indistinguishable from spaces [SPR-9831]","**[Robert MacDonald](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.d.macdonald)** opened **[SPR-9831](https://jira.spring.io/browse/SPR-9831?redirect=false)** and commented  As discussed in the end of #10187, when + signs are included in url variables they are not encoded so that when the DispatcherServlet decodes it all pluses and spaces become spaces. The listed workaround for this requires the user to construct their own urls and properly encode them which effectively reproduces a number of classes and methods in Spring with the only effective difference being that plus signs are encoded to %2B during URI creation because Spring does not do this for us. Since the components performing the encoding are deep within Spring we cannot simple configure it differently or extend a class to change this so please fix it in Spring.  ---  **Affects:** 3.1.2  1 votes, 7 watchers","closed","in: web,","spring-projects-issues","2012-09-25T14:51:16Z","2019-06-19T09:21:00Z"
"","14269","MediaType's include method does not check for generalization when using a format extension/suffix [SPR-9635]","**[Robert Gacki](https://jira.spring.io/secure/ViewProfile.jspa?name=gackir)** opened **[SPR-9635](https://jira.spring.io/browse/SPR-9635?redirect=false)** and commented  Lets say I have an annotated handler method:  ``` @RequestMapping public @ResponseBody FooResponse doFoo(@RequestBody FooRequest) { } ```  And I have HttpMessageConverters that can convert various formats like XML and JSON by looking at the format extension of the MediaType's subtype. In the example, this would be:  * `application/vnd.foo-request+xml` and `application/vnd.foo-response+xml` for converting from and to XML * `application/vnd.foo-request+json` and `application/vnd.foo-response+json` for converting from and to XML  I do not want to pollute my handler methods with the format because the format handling is delegated to the HttpMessageConverters:  ``` @RequestMapping(consumes = ""application/vnd.foo-request"", produces = ""application/vnd.foo-response"") public @ResponseBody FooResponse doFoo(@RequestBody FooRequest) { } ```  The MediaType classes' include method does not allow this scenario. It checks whether the subtype without the suffix is a wildcard and therefore matching: `application/*+xml includes application/vnd.foo-response+xml`.  But it does not check the generalization: `application/vnd.foo-response includes application/vnd.foo-response+xml` or `application/soap includes application/vnd.foo-response+json`.  So my method, that does not want to know how about the RequestBody's / ResponseBody's serialized format, can not be found by the HandlerMapping (RequestMappingHandlerMapping).  ---  **Affects:** 3.1.1  **Issue Links:** - #12560 MappingJacksonHttpMessageConverter default media type should include *+json (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-07-25T14:09:39Z","2019-01-13T21:06:04Z"
"","14216","FormHttpMessageConverter uses the payload's charset to decode form parameters and values [SPR-9582]","**[Robert Gacki](https://jira.spring.io/secure/ViewProfile.jspa?name=gackir)** opened **[SPR-9582](https://jira.spring.io/browse/SPR-9582?redirect=false)** and commented  The FormHttpMessageConverter uses the charset the payload was sent with (or the default charset) to decode the parameter names and values. This is wrong. The specification for `application/x-www-form-urlencoded` in itself defines a charset/format to decode and encode the content (http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1).  So if the client sends the payload using `application/x-www-form-urlencoded; charset=foo`, the converter must read the payload as string using 'foo' as character set. But for decoding the parameter names and values, it needs to use US-ASCII and the additional rules für whitespace and CRLF tokens.  This is vice versa for writing the payload.   ---  **Affects:** 3.1.1, 3.2 M1","closed","status: invalid,","spring-projects-issues","2012-07-11T07:23:55Z","2019-01-12T05:28:24Z"
"","14208","HttpMessageConverter's write method should get the HttpHeaders of the HttpInputMessage [SPR-9574]","**[Robert Gacki](https://jira.spring.io/secure/ViewProfile.jspa?name=gackir)** opened **[SPR-9574](https://jira.spring.io/browse/SPR-9574?redirect=false)** and commented  A HttpMessageConverter implementation may have to know about the constraints requested by the client. An obvious constraint is the charset defined by the Accept-Charset header.  So the HttpMessageConverter's write method should get the HttpHeaders of the HttpInputMessage.   ---  **Affects:** 3.1.1  **Attachments:** - [SPR-9574.tar.gz](https://jira.spring.io/secure/attachment/20090/SPR-9574.tar.gz) (_6.23 kB_)  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-07-09T08:11:59Z","2019-01-12T02:47:25Z"
"","13934","Major Performance Problem in ApplicationContext Creation and Prototype Bean Lookup by Type [SPR-9296]","**[Robert Binna](https://jira.spring.io/secure/ViewProfile.jspa?name=speedskater)** opened **[SPR-9296](https://jira.spring.io/browse/SPR-9296?redirect=false)** and commented  In version 3.1.1 of the springframework, the creation of the application context and the lookup of beans by type, in particular the lookup of prototype beans is extremely slow (factor 10). The same creation and lookup process in spring 3.0.6 was significantly faster. The definition of the application context is done through java based bean configuration.  Therefore we created a sample programm which can be used to reproduce the problem (program together with a gradle build file is attached, `gradle run` executes the test). This application uses javasssist to create 100 bean classes. Each bean class has 5 autowired bean properties. The bean properties are generated, such that no cyclic dependencies occur. Finally a configuration class containing the generated beans is constructed and loaded. All beans are created as singletons except one bean which has been created as prototype scope. After the application context is loaded a single bean is looked up from the application context 100 times. In the first case this is done with a bean of scope singleton. In the second case this is done with a bean of scope prototype. The same tests was issued on spring 3.1.1 and spring 3.0.6  The results are as follows:  ==== Spring 3.1.1 ====  SingletonBean:  ---  StopWatch 'SpringPerformanceTest': running time (millis) = 17004; [settingUpApplicationContext] took 15177 = 89%; [retrievingBeans] took 1827 = 11%  PrototypeBean:  ---  StopWatch 'SpringPerformanceTest': running time (millis) = 24400; [settingUpApplicationContext] took 13126 = 54%; [retrievingBeans] took 11274 = 46%  ==== Spring 3.0.6 ====  SingletonBean:  ---  StopWatch 'SpringPerformanceTest': running time (millis) = 3110; [settingUpApplicationContext] took 2654 = 85%; [retrievingBeans] took 456 = 15%  PrototypeBean:  ---  StopWatch 'SpringPerformanceTest': running time (millis) = 3163; [settingUpApplicationContext] took 1790 = 57%; [retrievingBeans] took 1373 = 43%  ---  **Affects:** 3.1.1  **Attachments:** - [benchmark.zip](https://jira.spring.io/secure/attachment/19558/benchmark.zip) (_3.84 kB_)  **Issue Links:** - #11536 Cache by-type lookups in DefaultListableBeanFactory (_**""duplicates""**_)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2012-04-02T03:43:13Z","2019-01-13T21:07:00Z"
"","14528","OncePerRequestFilter executes again on errors [SPR-9895]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-9895](https://jira.spring.io/browse/SPR-9895?redirect=false)** and commented  If OncePerRequestFilter is used and the application sends the request to an error page, then the request is processed twice. This is due to the fact that the request attribute is cleared out at the end of the request.  One might argue that in more modern Servlet containers that this Filter is not really even necessary since the dispatcher element can be specified. However, the issue comes up when using Spring Security due to the fact that a single Filter (DelegatingFilterProxy) is added to the web.xml which composes multiple Filter implementations into FilterChainProxy. If one of those Filters needs to be executed for every request and for errors (SecurityContextPersistenceFilter), then the whole FilterChain needs to be specified for request and errors. This causes problems for Filers like BasicAuthenticationFilter which will attempt to authenticate a user and if that fails, it will invoke response.sendError which incorrectly causes the BasicAuthenticationFilter to be invoked again.  Note that this is a common configuration in order for the error pages to display the logged in user. See [SEC-2054](https://jira.spring.io/browse/SEC-2054) for example of this issue occurring   ---  **Affects:** 3.1.2  **Issue Links:** - [SEC-2054](https://jira.spring.io/browse/SEC-2054) BasicAuthenticationFilter should not invoke on ERROR dispatch (_**""is depended on by""**_)","closed","type: bug,","spring-projects-issues","2012-10-19T15:52:11Z","2012-11-04T06:54:02Z"
"","14491","Include ThrowableAnalyzer from Spring Security [SPR-9858]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-9858](https://jira.spring.io/browse/SPR-9858?redirect=false)** and commented  This is related to [SEC-2064](https://jira.spring.io/browse/SEC-2064) which states:  > It strikes me that [ThrowableAnalyzer](http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/web/util/ThrowableAnalyzer.html) is not only suitable for its current role in Spring Security and is more generally useful. I've found a need for something along the lines of ThrowableAnalyzer in Spring Social, but do not wish to force a dependency on Spring Security. As things stand currently, I must duplicate ThrowableAnalyzer to avoid the otherwise unnecessary dependency on Spring Security. > I wonder if ThrowableAnalyzer might be better suited for Spring Core's org.springframework.util package? I already depend on Spring Core, so I wouldn't have the same dependency concerns there and would be able to get rid of my duplicate ThrowableAnalyzer.  Let me know if this is something that is acceptable and I can put a pull request together.   ---  **Issue Links:** - [SEC-2064](https://jira.spring.io/browse/SEC-2064) Extract ThrowableAnalyzer, perhaps to Spring Core (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2012-10-05T06:18:45Z","2018-12-28T09:31:49Z"
"","14379","MockFilterChain should support Filters and Servlet [SPR-9745]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-9745](https://jira.spring.io/browse/SPR-9745?redirect=false)** and commented  #### Status Quo  The current implementation of `MockFilterChain` does not allow adding `Filter` instances or a `Servlet` to it to be invoked by the `MockFilterChain`.  #### Goal  `MockFilterChain` should be updated to provide support for configuring `Filter` instances and a `Servlet` to be invoked in the chain. This would enable us to add `Filter` support to Spring Test MVC.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c92a06f003c2fac8785b4e3c1382c07e34d5e462","closed","type: enhancement,","spring-projects-issues","2012-08-31T11:05:12Z","2012-09-09T08:09:04Z"
"","14360","Support implicit ports for MockHttpServletRequest.getRequestURL() [SPR-9726]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-9726](https://jira.spring.io/browse/SPR-9726?redirect=false)** and commented  #### Status Quo  `MockHttpServletRequest.getRequestURL()` currently **always** includes the server port number in the reconstructed request URL, even for implicit ports (i.e., 80 and 443) and negative ports.  For example, A URL that looks like `http://example.com/context` (i.e., does not specify the default port 80) will currently be reconstructed as `http://example.com:80/context` even though the port number is superfluous.  ###### Further Resources  The official implementation of `HttpUtils.getRequestURL(HttpServletRequest)` from the Servlet Spec also omitted the inclusion of implicit ports. `HttpUtils` has been deprecated since Servlet API 2.3; however, some (if not all) containers maintain this behavior (e.g., Jetty).  #### Deliverables  1. `MockHttpServletRequest.getRequestURL()` should omit the port number when reconstructing a URL that has an implicit port or a negative port.    ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/86591e5e5aeb7eead1798069d8b6f9c1790f4b9d","closed","type: enhancement,","spring-projects-issues","2012-08-24T11:16:50Z","2013-07-24T10:17:09Z"
"","14358","Make locales in MockHttpServletRequest configurable [SPR-9724]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-9724](https://jira.spring.io/browse/SPR-9724?redirect=false)** and commented  #### Status Quo  The `MockHttpServletRequest` constructor adds `Locale.ENGLISH` as the _preferred locale_.  #### Proposals  It may be nice to default to `Locale.getDefault()` instead `Locale.ENGLISH`.  It would also be nice to support `getLocales()` not returning this hard coded value. One way of doing that is add a setter for the locales. This would make testing edge cases easier.   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/acc8364539035884512e9d232b6e18eac85056a8, https://github.com/spring-projects/spring-framework/commit/591aa017412470f20d6e663ec6416857003c5edf","closed","type: enhancement,","spring-projects-issues","2012-08-24T09:33:21Z","2012-11-04T06:54:01Z"
"","14210","*-sources.jar files should include **/*.aj files [SPR-9576]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-9576](https://jira.spring.io/browse/SPR-9576?redirect=false)** and commented  The [spring-aspects-3.2.M1-sources.jar](http://repo.springsource.org/libs-milestone/org/springframework/spring-aspects/3.2.0.M1/spring-aspects-3.2.0.M1-sources.jar) does not contain the *.aj files in it as was done in previous versions (i.e. [spring-aspects-3.2.1.RELEASE-sources.jar](http://search.maven.org/remotecontent?filepath=org/springframework/spring-aspects/3.1.2.RELEASE/spring-aspects-3.1.2.RELEASE-sources.jar)). Refer to /org/springframework/transaction/aspectj/AnnotationTransactionAspect.aj of the previous links for an example of a missing *aj file.  The *.aj files should be included in the sources jars.   ---  **Affects:** 3.2 M1","closed","type: bug,","spring-projects-issues","2012-07-09T17:10:33Z","2012-07-10T04:29:13Z"
"","14685","Add hook for before concurrent handling [SPR-10052]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10052](https://jira.spring.io/browse/SPR-10052?redirect=false)** and commented  Both CallableProcessingInterceptor and DeferredResultProcessingInterceptor do not have support for capturing the state of the original Thread just prior to processing. This makes it difficult to transfer the state of one Thread (i.e. ThreadLocal) to the Thread used to process.  We should add a new method to CallableProcessingInterceptor and DeferredResultProcessingInterceptor which will be invoked on the original Thread just prior to processing on the new Thread. This means the state of the original Thread can be captured in the new method and transfered to the new Thread in preProcess.   ---  **Affects:** 3.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e62ad8665bb0f4138e140974108d693a20ee287","closed","type: enhancement,","spring-projects-issues","2012-11-28T12:43:00Z","2012-11-30T08:33:40Z"
"","14684","Rename MvcAsyncTask to WebAsyncTask [SPR-10051]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10051](https://jira.spring.io/browse/SPR-10051?redirect=false)** and commented  The name MvcAsyncTask is misleading because the class is part of Spring Web as apposed to Spring MVC. This is also inconsistent with the other async classes which use Web instead of Mvc.   ---  **Affects:** 3.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/157a1d6ee22567fb5915d940605615405164fde3, https://github.com/spring-projects/spring-framework/commit/ad96f8511fe20fa47452e7716bbb00ff84e5fc72","closed","type: enhancement,","spring-projects-issues","2012-11-28T08:41:49Z","2012-11-29T06:55:54Z"
"","14676","Remove spring-test-mvc/ide.gradle workaround [SPR-10042]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10042](https://jira.spring.io/browse/SPR-10042?redirect=false)** and commented  ---  **Affects:** 3.2 RC1  **Issue Links:** - #14290 Eclipse .classpath exports optional and provided dependencies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87f7ecf907042a576cca0ada37780eaee1c9427f","closed","type: task,","spring-projects-issues","2012-11-26T17:22:01Z","2019-01-11T18:39:05Z"
"","14673","Remove reflection usage in orm.hibernate4.* [SPR-10039]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10039](https://jira.spring.io/browse/SPR-10039?redirect=false)** and commented  Prior to updating to Gradle, it was necessary to use reflection to interact with both Hibernate 3 and Hibernate 4 due to non-passive changes made in the Hibernate APIs. Now that Spring builds with Gradle, we can build against both Hibernate 3 and Hibernate 4 using [merge-artifacts](https://github.com/SpringSource/spring-framework/blob/master/gradle/merge-artifacts.gradle). We should eliminate the use of reflection to give users a performance boost, compile time checks, etc.   ---  **Affects:** 3.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d7bf56df497f282399fcfaaec614aa5ea1a28d57","closed","type: enhancement,","spring-projects-issues","2012-11-26T08:55:30Z","2012-11-26T13:48:43Z"
"","13963","Add more details in ResourceAccessException message thrown by doExecute method of RestTemplate [SPR-9325]","**[Ritesh](https://jira.spring.io/secure/ViewProfile.jspa?name=rcrathore)** opened **[SPR-9325](https://jira.spring.io/browse/SPR-9325?redirect=false)** and commented  The RestTemplate is throwing exception message as follows:  throw new ResourceAccessException(""I/O error: "" + ex.getMessage(), ex);  The message can be improved by adding URL and Method passed to doExecute method.  Thanks,  ---  **Affects:** 3.1.1  **Issue Links:** - #18433 ResourceAccessException message could leak sensitive information  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0baa1a56c2f200d0cbd21a1318346670a4fa14d6  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-13T08:27:14Z","2019-01-11T12:38:13Z"
"","13995","I cannot get the value of command object using MultipartFile property.. [SPR-9358]","**[Richard Ryu](https://jira.spring.io/secure/ViewProfile.jspa?name=richardryu)** opened **[SPR-9358](https://jira.spring.io/browse/SPR-9358?redirect=false)** and commented  I try to bind my bean with 3 of input text fields and 1 of file fields. The rest of 3 text input properties get resolved perfectly but the MultipartFile property has no value(null).  What's wrong with me?  I just set up like below :  \    \  [Bean Command] public class ItemBean {        MultipartFile file;  public MultipartFile getFile() {          return file;      }  public void setFile(MultipartFile file) {          this.file = file;      }  ... bla bla (more over text fileds)  [Try]  public String onSubmit(`@ModelAttribute`(""temporary"") Command command, ....){ MultipartFile mFile = command.getFile(); // null }  Please help me anyone can solve this problems...  Thanks   --- No further details from [SPR-9358](https://jira.spring.io/browse/SPR-9358?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-04-16T18:51:01Z","2019-01-12T05:28:43Z"
"","13962","Allow setting custom ClassPathBeanDefinitionScanner on AnnotationConfigWebApplicationContext [SPR-9324]","**[Richard L. Allen](https://jira.spring.io/secure/ViewProfile.jspa?name=richard.allen)** opened **[SPR-9324](https://jira.spring.io/browse/SPR-9324?redirect=false)** and commented  We use a custom `ClassPathBeanDefinitionScanner` along with `AnnotationConfigWebApplicationContext`. To achieve this, we have to extend `AnnotationConfigWebApplicationContext` and override the `loadBeanDefinitions` method to substitute our custom scanner. Would be nice if `AnnotationConfigWebApplicationContext` simply had a set method for the scanner the same as the set methods for the `BeanNameGenerator` and `ScopeMetadataResolver`.   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0230c49a82c750cf2c6aa169b2f10361b185ed23, https://github.com/spring-projects/spring-framework/commit/20beace1bf992e52e5f6403217696d8d45dcd2b8  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-12T06:45:38Z","2015-12-17T09:05:32Z"
"","14606","Performance degradation for after Spring 3 [SPR-9972]","**[Ray](https://jira.spring.io/secure/ViewProfile.jspa?name=runiu@ebay.com)** opened **[SPR-9972](https://jira.spring.io/browse/SPR-9972?redirect=false)** and commented  We found after upgrade to Spring 3.1.1, AOP behavior is changed and more overhead is added. I found method org.springframework.util.ClassUtils.getMostSpecificMethod(Method, Class) is changed and will call Class.getDeclaredMethods instead of Class.getMethod, which will be more expensive.  ---  **Affects:** 3.1.1  **Issue Links:** - #14435 Performance degradation for TransactionInterceptor (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-11-07T17:38:07Z","2019-01-12T16:57:02Z"
"","14435","Performance degradation for TransactionInterceptor [SPR-9802]","**[Ray](https://jira.spring.io/secure/ViewProfile.jspa?name=newry)** opened **[SPR-9802](https://jira.spring.io/browse/SPR-9802?redirect=false)** and commented  We tried to upgrade Spring framework from 2.5.5 to 3.1.1, during performance test we found that TransactionInterceptor will add some performance overhead because introduce of following method: org.springframework.transaction.interceptor.TransactionAspectSupport.methodIdentification(java.lang.reflect.Method,java.lang.Class)  This new method will call Class.getDeclaredMethods() instead of using the method passed in directly.  If there are multiple transaction pointcuts defined and invoked in one call, the performance will be affected badly.  Can we do fallback support as 2.5.5 or add cache support for the method instead of call Class.getDeclaredMethods() each time?  ---  **Affects:** 3.1.1  **Issue Links:** - #14606 Performance degradation for after Spring 3 (_**""is duplicated by""**_) - #11975 Transaction names should use the concrete class name  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/89b365120ad577bd5ad8007044991a2b6742304b, https://github.com/spring-projects/spring-framework/commit/2c8b7fe0935a5934d7b6357086b17f3ac45cb66c, https://github.com/spring-projects/spring-framework/commit/49294c9d008ab63d3b33d708fc48b3f4321785db, https://github.com/spring-projects/spring-framework/commit/bbfc807b0c6e2b064c52368163255fdbd4d256cb  2 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2012-09-15T23:13:59Z","2019-01-11T13:17:56Z"
"","14351","Unable to build spring-framework on Windows platform [SPR-9717]","**[Rastislav Papp](https://jira.spring.io/secure/ViewProfile.jspa?name=rastislav.papp)** opened **[SPR-9717](https://jira.spring.io/browse/SPR-9717?redirect=false)** and commented  It is not possible to build spring-framework on Windows platform, due to test errors. I'm attaching the test results. This was being discussed on spring-contrib mail list - https://groups.google.com/forum/?fromgroups=#!topic/spring-framework-contrib/ccOFObtZ6Uc   ---  **Affects:** 3.2 M2  **Attachments:** - [tests.zip](https://jira.spring.io/secure/attachment/20292/tests.zip) (_240.33 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e7622bb8a6a078d92531b657f105cec953c4166","closed","type: bug,","spring-projects-issues","2012-08-23T02:32:14Z","2012-09-11T06:35:56Z"
"","14446","Option to treat empty string as NULL [SPR-9813]","**[Ram Chidambaram](https://jira.spring.io/secure/ViewProfile.jspa?name=ram_2000)** opened **[SPR-9813](https://jira.spring.io/browse/SPR-9813?redirect=false)** and commented  JSR 303 `@NotNull` annotations don't work, as empty string is always submitted from the forms. Have to rely on Hibernate specific annotations like `@NotEmpty`.  StringTrimmerEditor could be used to transform empty strings to null. But this is not possible with the new conversion service.   ---  **Affects:** 3.1.2  **Reference URL:** https://jira.springsource.org/browse/SPR-7768","closed","status: bulk-closed,","spring-projects-issues","2012-09-20T00:56:10Z","2019-01-12T00:26:14Z"
"","13937","org.springframework.web.multipart.support.StandardServletMultipartResolver.cleanupMultipart causes an IOException on Resin [SPR-9299]","**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-9299](https://jira.spring.io/browse/SPR-9299?redirect=false)** and commented  Testing the StandardServletMultipartResolver on Resin 4.0.27 with this form.  \ \ ... \  The resolver tries to cleanup the parts with the cleanupMultipart method by calling part.delete();  Resin throws this exception  8:08:25.093 [resin-port-8080-19] WARN  o.s.w.m.s.StandardServletMultipartResolver - Failed to perform cleanup of multipart items ava.io.IOException: Part.delete() is not applicable to part 'hiddenParameter':'theHiddenValue' at com.caucho.server.http.AbstractCauchoRequest$PartImpl.delete(AbstractauchoRequest.java:1086) ~[resin.jar:4.0.27]        at org.springframework.web.multipart.support.StandardServletMultipartResolver.cleanupMultipart(StandardServletMultipartResolver.java:65) ~[spring-web-3.1.1.RELEASE.jar:3.1.1.RELEASE]  Not sure why Resin not simply ignores the call to delete() for this kind of parts, as all the other servers (Tomcat, Jetty) do.    ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9fcb5781873417e3e9ce8f2a932d3de4649a26c4, https://github.com/spring-projects/spring-framework/commit/7ea85a959c810c1689fc04b8d0c2bd17e5fe6e08","closed","type: bug,","spring-projects-issues","2012-04-02T23:28:40Z","2012-06-19T03:39:35Z"
"","14325","Method LocalSessionFactoryBean#setfilterDefinitions() is missing in hibernate 4 support [SPR-9691]","**[Ralph Goebel](https://jira.spring.io/secure/ViewProfile.jspa?name=knuwu)** opened **[SPR-9691](https://jira.spring.io/browse/SPR-9691?redirect=false)** and commented  The possibility to pass FilterDefinition objects to the session factory, typically defined as Spring FilterDefinitionFactoryBeans, probably as inner beans within the LocalSessionFactoryBean definition is missing.  Before migration to Hibernate 4 we configured the hibernate eventlisteners and filters with the AnnotationSessionFactoryBean like that:  \ ... \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\ \ \ \ \ \ \ ... \  Both properties and the class AnnotationSessionFactoryBean disappeared with spring hiberante 4 support.  We configure eventlistener now by implementing the Integrator-Interface, but for hibernate filters there is no solution for global filter objects.  Our workaround is to override org.springframework.orm.hibernate4.LocalSessionFactoryBean#buildSessionFactory(LocalSessionFactoryBuilder) and add Filterdefinitions to the LocalSessionFactoryBuilder.  But we would prefer a solution without the need to extend a framework class.   ---  **Affects:** 3.1.2","closed","status: bulk-closed,","spring-projects-issues","2012-08-15T07:29:26Z","2019-01-12T02:46:44Z"
"","14305","Overriding bean definition message does not take parent definition into account [SPR-9671]","**[Radim Kolar](https://jira.spring.io/secure/ViewProfile.jspa?name=hsn)** opened **[SPR-9671](https://jira.spring.io/browse/SPR-9671?redirect=false)** and commented  It seems like this message contains just bean definition values, not real values merged with parent bean definition. It would be more useful if parent bean definition will be merged because for example lazyInit will be different.  2012-08-07 13:51:39,096 INFO [main] org.springframework.beans.factory.support.DefaultListableBeanFactory: Overriding bean definition for bean 'pluginmanager': replacing [Generic bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [nutch/conf/common/pluginmanager.xml]] with [Generic bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [nutch/conf/fetch/pluginmanager.xml]]   ---  **Affects:** 3.1.2  **Attachments:** - [pluginmanager.xml](https://jira.spring.io/secure/attachment/20146/pluginmanager.xml) (_594 bytes_) - [pluginmanager.xml](https://jira.spring.io/secure/attachment/20145/pluginmanager.xml) (_469 bytes_) - [pluginmanager-skeleton.xml](https://jira.spring.io/secure/attachment/20147/pluginmanager-skeleton.xml) (_694 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b13c5b237897ba2e77a9d9aa90b28d12fff89e5f, https://github.com/spring-projects/spring-framework/commit/0ef29b204b94ab2aec9333338a2035a11c8d81fb, https://github.com/spring-projects/spring-framework/commit/bed739ce925d6fd88b5fab55403d523d3a3bc53e  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)","closed","type: enhancement,","spring-projects-issues","2012-08-07T05:22:17Z","2014-05-01T01:36:41Z"
"","14018","Add support for meta tags to annotation based context configuration [SPR-9382]","**[Radim Kolar](https://jira.spring.io/secure/ViewProfile.jspa?name=hsn)** opened **[SPR-9382](https://jira.spring.io/browse/SPR-9382?redirect=false)** and commented  It seems that there is no way to do equivalent of including meta tags in java annotation based container configuration. Our project is using meta tags extensively for example:  ```               ```  and for writing testcases, Java context configuration is preferred over XML configuration.   ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?126082-Meta-tags-in-Annotation-context-configuration","closed","type: enhancement,","spring-projects-issues","2012-05-06T10:16:18Z","2015-09-22T19:51:57Z"
"","14543","LinkedCaseInsensitiveMap not getting garbage collected and creating out of memory server crash in WAS-8 [SPR-9910]","**[pramod p](https://jira.spring.io/secure/ViewProfile.jspa?name=pramod)** opened **[SPR-9910](https://jira.spring.io/browse/SPR-9910?redirect=false)** and commented  Our application was working fine on spring 2.5 and Websphere-6.X .We upgraded to Spring 3.1.1 and WAS-8.X recently.After that we  having server crashed due to out of memory error,due to the LinkedCaseInsensitiveMap  are not getting garbage collected.I mean it not gettin de-referenced even after use.Below is the response from IBM.  After several attempts at analyzing the heapdump, I think I finally succeeded.  There is a 5 million element array containing only org.springframework objects, and it's also holding onto approximately 6 GB of the heap.  ```none ======================================================================== Class_Name@Address  Shallow_Heap  Retained_Heap java.util.ArrayList @ 0x9d503d50 24 5,897,305,288 bytes java.lang.Object[6463408] @ 0x1628fc220 25,853,648 5,897,305,264 bytes   org.springframework.util.LinkedCaseInsensitiveMap @ 0x4d61c968 64 1,152   org.springframework.util.LinkedCaseInsensitiveMap @ 0xf6b8c050 64 1,152   org.springframework.util.LinkedCaseInsensitiveMap @ 0xecfcd938 64 1,152   org.springframework.util.LinkedCaseInsensitiveMap @ 0xdaa35b00 64 1,152   org.springframework.util.LinkedCaseInsensitiveMap @ 0xf1c64ea8 64 1,152 ... ... ... ======================================================================== ```  I'm not familiar with this array or what SpringFramework uses it for, but it's the root cause of the out of memory.  So far looking inside the objects I've found primitive variables as well as hashmaps.  Looking up the API for SpringFramework, it seem this is simply a hashmap that stores String keys and preserves the original order.  The javacores that we have for this PMR does not show direct access to these objects, but I know SpringFramework is being used behind the scenes in your application.  Talk to your application developers or contact your vendor concerning these calls, as something has to release data from this hashmap, but it appears not to be doing that.   ---  **Affects:** 3.1.1","closed","status: invalid,","spring-projects-issues","2012-10-23T00:01:10Z","2019-01-12T05:27:51Z"
"","14525","XML configuration: 'beans' element should be allowed between 'bean' elemebts [SPR-9892]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-9892](https://jira.spring.io/browse/SPR-9892?redirect=false)** and commented  According to [spring-beans.xsd](http://www.springframework.org/schema/beans/spring-beans.xsd):  ```xml                                   ```  If using spring profiles for only some of the beans, that requires to put all those beans at the end of the XML configuration file instead of their natural, or original, position. Thus, the schema forces developers to write less organized files for no obvious gain.  ---  **Affects:** 3.1.2  **Issue Links:** - #12672 Allow nested  elements to be declared anywhere (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-10-19T03:09:39Z","2019-01-12T16:47:38Z"
"","14524","Improve error message when bean initialization fails [SPR-9891]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-9891](https://jira.spring.io/browse/SPR-9891?redirect=false)** and commented  When bean initialization fails due to whatever reason * bean in depends-on is not defined * circular depends-on #12621 * and, in fact, anything else  exception raised should mention bean name in it's message to allow faster problem diagnosis  ---  **Affects:** 3.1.2, 3.2 M2  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-10-19T00:35:34Z","2019-01-12T00:25:51Z"
"","14385","Support for increment (++) operator in SpEL [SPR-9751]","**[Piotr Dyraga](https://jira.spring.io/secure/ViewProfile.jspa?name=p.dyraga)** opened **[SPR-9751](https://jira.spring.io/browse/SPR-9751?redirect=false)** and commented  When I try to use SpEL expression with increment operator I get NullPointerException:  ```              ```  (the example above is from Spring Integration, but it does not actually matter - the problem lays in SpEL implementation)  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.integration.transformer.HeaderEnricher#3': Cannot create inner bean '(inner bean)' of type [org.springframework.integration.transformer.HeaderEnricher$ExpressionEvaluatingHeaderValueMessageProcessor] while setting constructor argument with key [http_requestsCounter]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#17': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.integration.transformer.HeaderEnricher$ExpressionEvaluatingHeaderValueMessageProcessor]: Constructor threw exception; nested exception is java.lang.NullPointerException 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:281) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:125) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedMap(BeanDefinitionValueResolver.java:378) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:161) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:616) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:148) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1003) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:907) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) 	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4205) 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4704) 	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) 	at org.apache.catalina.core.StandardHost.start(StandardHost.java:840) 	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) 	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:463) 	at org.apache.catalina.core.StandardService.start(StandardService.java:525) 	at org.apache.catalina.core.StandardServer.start(StandardServer.java:754) 	at org.apache.catalina.startup.Catalina.start(Catalina.java:595) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) 	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#17': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.integration.transformer.HeaderEnricher$ExpressionEvaluatingHeaderValueMessageProcessor]: Constructor threw exception; nested exception is java.lang.NullPointerException 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:288) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1003) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:907) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:270) 	... 34 more Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.integration.transformer.HeaderEnricher$ExpressionEvaluatingHeaderValueMessageProcessor]: Constructor threw exception; nested exception is java.lang.NullPointerException 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:141) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:108) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:280) 	... 39 more Caused by: java.lang.NullPointerException 	at org.springframework.expression.spel.ast.SpelNodeImpl.(SpelNodeImpl.java:50) 	at org.springframework.expression.spel.ast.Operator.(Operator.java:32) 	at org.springframework.expression.spel.ast.OpPlus.(OpPlus.java:41) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatUnaryExpression(InternalSpelExpressionParser.java:287) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatPowerExpression(InternalSpelExpressionParser.java:269) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatProductExpression(InternalSpelExpressionParser.java:250) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatSumExpression(InternalSpelExpressionParser.java:236) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatRelationalExpression(InternalSpelExpressionParser.java:195) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatLogicalAndExpression(InternalSpelExpressionParser.java:183) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatLogicalOrExpression(InternalSpelExpressionParser.java:171) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatExpression(InternalSpelExpressionParser.java:135) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatExpression(InternalSpelExpressionParser.java:162) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.doParseExpression(InternalSpelExpressionParser.java:116) 	at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:56) 	at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:1) 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:66) 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:56) 	at org.springframework.integration.transformer.HeaderEnricher$ExpressionEvaluatingHeaderValueMessageProcessor.(HeaderEnricher.java:191) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:513) 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:126) 	... 41 more ```  When I construct expression in the following (equivalent) way:  ```              ```  everything works fine.  (note: the header enricher used in the example tries to increment header value by one if it has been already set - if not, header is initialized to 1)  ---  **Affects:** 3.0.5  **Issue Links:** - #15659 PropertyOrFieldReference suffers from potential NullPointerException","closed","type: enhancement,","spring-projects-issues","2012-09-04T05:32:02Z","2019-01-11T13:32:52Z"
"","14009","When injecting HTTPServletRequest to @Controller method, UrlBasedViewResolver no longer resolves the view correctly [SPR-9373]","**[Piotr Blasiak](https://jira.spring.io/secure/ViewProfile.jspa?name=piotrblasiak)** opened **[SPR-9373](https://jira.spring.io/browse/SPR-9373?redirect=false)** and commented  XML config for view resolver & tiles (probably irrelevant):  ```xml                 /WEB-INF/tiles-defs.xml           ```  The Controller method:  ```java @RequestMapping(""recover-account"") public String recoverAccount(final HttpServletResponse response,          final Model model, @RequestParam(""requestUuid"") final UUID requestUuid,          @RequestParam(""code"") final String code) {  } ```  It works perfectly fine without the ""final HttpServletResponse response"", but with it - the logger says a Null ModelAndView as returned, and then nothing shows.   ---  **Affects:** 3.1.1","closed","status: declined,","spring-projects-issues","2012-05-03T10:18:03Z","2019-01-12T16:36:26Z"
"","13967","Headers set on ResponseEntity do not overwrite but get appended previously set headers of the same name [SPR-9329]","**[Piotr Blasiak](https://jira.spring.io/secure/ViewProfile.jspa?name=piotrblasiak)** opened **[SPR-9329](https://jira.spring.io/browse/SPR-9329?redirect=false)** and commented  If for example a processing filter sets, for example the ""Cache-Control"" header before the request reaches a MVC method that returns a ResponseEntity also containing the ""Cache-Control"" header (or any other header), the new value instead of overwriting the old one - appends to it.  The result is something like:  Cache-Control: no-cache, no-store, no-cache, no-store   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/53afb4eeec5a7a487bcd2d06cc56a45497e6a35f","closed","in: web,","spring-projects-issues","2012-04-15T07:10:33Z","2019-01-11T12:38:20Z"
"","14143","Add capabilities to use an overriden ThreadPoolExecutor class instance instead of ThreadPoolExecutor [SPR-9509]","**[Pierre Le Roux](https://jira.spring.io/secure/ViewProfile.jspa?name=pilerou)** opened **[SPR-9509](https://jira.spring.io/browse/SPR-9509?redirect=false)** and commented  ThreadPoolTaskExecutor creates a ThreadPoolExecutor instance in a protected initializeExecutor method. Developers could override this method in a subclass but it's not possible to do it because threadPoolExecutor instance variable is private.  I can imagine 2 ways to use a ThreadPoolExecutor subclass instead : - make protected the ThreadPoolTaskExecutor's threadPoolExecutor instance variable ==> Developers could override ThreadPoolTaskExecutor initializeExecutor method. In subclass initializeExecutor method, developers could create an instance of desired ThreadPoolExecutor subclass. - add a parameter to ThreadPoolTaskExecutor in order to define the ThreadPoolExecutor subclass to use ==> if defined this class would be used instead of ThreadPoolExecutor.    ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2012-06-14T14:23:08Z","2019-01-12T02:47:48Z"
"","13954","caught NullPointerException in AutowiredAnnotationBeanPostProcessor.determineRequiredStatus [SPR-9316]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-9316](https://jira.spring.io/browse/SPR-9316?redirect=false)** and commented  AutowiredAnnotationBeanPostProcessor.determineRequiredStatus uses ReflectionUtils.findMethod to look up a method named ""required"". If there is no such method then ReflectionUtils.findMethod returns null. However AutowiredAnnotationBeanPostProcessor.determineRequiredStatus never checks for null instead it directly passes the method to ReflectionUtils.invokeMethod which throws a NullPointerException which is then caught in a catch (Exception ex) block in AutowiredAnnotationBeanPostProcessor.determineRequiredStatus.  Annoations that don't have a method named ""required"" include `@Inject` `@Value` `@Resource`.  This is not so nice for several reasons: * when you debug one of your own NullPointerExceptions and set an exception breakpoint on NullPointerException you end up in Spring code * it uses NullPointerExceptions and catching them as part of normal control flow * filling in the stack trace of an exception is slow  ---  **Affects:** 3.1.1  **Issue Links:** - #14001 AutowiredAnnotationBeanPostProcessor.determineRequiredStatus(Annotation) throws NullPointerException if method wasnt found. (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26ee0c4842ca83dec213b5422d0af18ba2e3ce6c, https://github.com/spring-projects/spring-framework/commit/2624b909060e0967e16771de7a35261decd5a4a9, https://github.com/spring-projects/spring-framework/commit/46bdb2de077063663f0daae85431ebe5c430edc8","closed","in: core,","spring-projects-issues","2012-04-09T03:47:56Z","2019-01-11T12:51:53Z"
"","13902","Small memory improvements to InjectionMetadata and InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata [SPR-9264]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-9264](https://jira.spring.io/browse/SPR-9264?redirect=false)** and commented  We analysed the memory usage of our application and found a lot of empty LinkedHashSet/Collections.synchronizedSet in the following three cases:  *   ```   ```  org.springframework.beans.factory.annotation.InjectionMetadata.injectedElements  ```  *     ```     ```  org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata.initMethods  ```  *   ```      ```  org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata.destroyMethods  ```  There are two things that can be done to address this: 1. Creating a LinkedHashSet of the ""right"" size, eg. the default capacity is 16 but the exact capacity is known in advance 1. If the argument is empty then we use Collections.emptySet() which is a constant so no additional memory is used. Since it's immutable there is no need for the Collections.synchronizedSet wrapper. ```    ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-03-24T08:20:33Z","2012-06-19T03:39:45Z"
"","14345","AbstractAutoProxyCreator and RequiredAnnotationBeanPostProcessor synchronized HashSet locking bottleneck [SPR-9711]","**[Philippe Lantin](https://jira.spring.io/secure/ViewProfile.jspa?name=phlantin)** opened **[SPR-9711](https://jira.spring.io/browse/SPR-9711?redirect=false)** and commented  In a highly concurrent application with a high rate of bean injection, we observed locking due to synchronized HashSet collections in AbstractAutoProxyCreator and RequiredAnnotationBeanPostProcessor.  We could no longer reproduce the issue when we changed AbstractAutoProxyCreator's targetSourcedBeans, earlyProxyReferences, advisedBeans, nonAdvisedBeans and RequiredAnnotationBeanPostProcessor's validatedBeanNames from:  Collections.synchronizedSet(new HashSet\())  To:  Collections.newSetFromMap(new ConcurrentHashMap())  Collections.newSetFromMap is a jdk6 only method, but an equivalent solution could be used to retain jdk5 compatibility.  Thread traces:  ""[ACTIVE] ExecuteThread: '0' for queue: 'weblogic.kernel.Default (self-tuning)'"" waiting for lock java.util.Collections$SynchronizedSet@39c265bc BLOCKED java.util.Collections$SynchronizedCollection.contains(Collections.java:1563) org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:321) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:407) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1461) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:386)   ""[ACTIVE] ExecuteThread: '47' for queue: 'weblogic.kernel.Default (self-tuning)'"" id=67 idx=0x134 tid=23948 prio=5 alive, blocked, native_blocked, daemon - Blocked trying to get lock: java/util/Collections$SynchronizedSet@0x1c8ad1440[unlocked] at jrockit/vm/Threads.waitForUnblockSignal()V(Native Method) at jrockit/vm/Locks.fatLockBlockOrSpin(Locks.java:1411)[optimized] at jrockit/vm/Locks.lockFat(Locks.java:1512)[optimized] at jrockit/vm/Locks.monitorEnterSecondStageHard(Locks.java:1054)[optimized] at jrockit/vm/Locks.monitorEnterSecondStage(Locks.java:1005)[optimized] at java/util/Collections$SynchronizedCollection.contains(Collections.java:1563)[optimized] at org/springframework/beans/factory/annotation/RequiredAnnotationBeanPostProcessor.postProcessPropertyValues(RequiredAnnotationBeanPostProcessor.java:140)[optimized] at org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106)[inlined] at org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:374)[optimized]    ---  **Affects:** 3.1.1  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-08-21T15:21:52Z","2014-04-28T03:42:50Z"
"","14527","Regression: In an ApplicationContext hierarchy a bean defined in a child context receives the parent's Environment [SPR-9894]","**[Philipp Jardas](https://jira.spring.io/secure/ViewProfile.jspa?name=phjardas)** opened **[SPR-9894](https://jira.spring.io/browse/SPR-9894?redirect=false)** and commented  Given: * `parent` : `ApplicationContext` * `child` : `ApplicationContext` * `bean` : defined in child context with a field `@Autowire Environment`  In Spring 3.1.1 the environment injected into the bean was the **child**'s environment, as expected.  In Spring 3.1.2 however, the **parent**'s environment is injected.  This is especially annoying when nesting a WebApplicationContext in a parent application context, because the servlet properties will not be present in the injected environment.  Attached is a JUnit test case that passes with 3.1.1 and fails with 3.1.2  ---  **Affects:** 3.1.2  **Attachments:** - [EnvironmentHierarchyTest.java](https://jira.spring.io/secure/attachment/20567/EnvironmentHierarchyTest.java) (_1.59 kB_)  **Issue Links:** - #14080 ApplicationContext environment inheritance may causes child context environment property sources to be lost","closed","in: core,","spring-projects-issues","2012-10-19T10:18:57Z","2019-01-12T16:24:59Z"
"","14415","ResourceDatabasePopulator incredibly slow on JDK 1.7.0_06 or newer [SPR-9781]","**[Philipp Hügelmeyer](https://jira.spring.io/secure/ViewProfile.jspa?name=hygl)** opened **[SPR-9781](https://jira.spring.io/browse/SPR-9781?redirect=false)** and commented  I get a signifcant speed regression using the `ResourceDatabasePopulator` to load database scripts, when I switch from oracle JDK 1.7.0_05 to 1.7.0_06 or _07 on Windows XP SP3. With JDK 1.7.0_05 the script loads in 337ms with 1.7.0_06 or newer it takes over 40000ms to load the same script.  According to my tests the regression is located in the `splitSqlScript(script, delimiter, statements)` method.  ---  **Affects:** 3.1.2  **Attachments:** - [mvn_output_jdk1.7.0_05.txt](https://jira.spring.io/secure/attachment/20426/mvn_output_jdk1.7.0_05.txt) (_6.67 kB_) - [mvn_output_jdk1.7.0_07.txt](https://jira.spring.io/secure/attachment/20427/mvn_output_jdk1.7.0_07.txt) (_6.38 kB_)  **Sub-tasks:** - #14418 Backport ""Work around JDK7 String#substring performance regression""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec2df7d2299acee46ff93f510ffe455df266d9c3, https://github.com/spring-projects/spring-framework/commit/92a92b79371dbe85cfea9c6b4a923997893ade6d, https://github.com/spring-projects/spring-framework/commit/86ef22db4908d2b16fceac67a2d06a8b0d4e3f6b, https://github.com/spring-projects/spring-framework/commit/3fb3b7d67a2a0b6990ad17978877a552d03f7b81","closed","type: bug,","spring-projects-issues","2012-09-10T01:30:55Z","2019-01-11T13:36:19Z"
"","14629","Backport ""ReflectivePropertyAccessor should not consider bridge methods"" [SPR-9995]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9995](https://jira.spring.io/browse/SPR-9995?redirect=false)** and commented  ---  This issue is a backport sub-task of #14628  **Issue Links:** - #14795 Consider bridge methods in SpEL properties  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ec41af799a8c32f946e53bc4d220bbbc2ed0a79","closed","in: core,","spring-projects-issues","2012-11-15T17:30:46Z","2019-01-11T14:19:25Z"
"","14628","ReflectivePropertyAccessor should not consider bridge methods [SPR-9994]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9994](https://jira.spring.io/browse/SPR-9994?redirect=false)** and commented  The `ReflectivePropertyAccessor` `findGetterForProperty` and `findSetterForProperty` methods searches all methods for a name based match. If the class being searched implements an interface with generic types it possible that bridge methods will be incorrectly discovered.  As the order of Class.getMethods() is undetermined and JVM specific this issue is not consistently reproducible.  See [SWF-1438](https://jira.spring.io/browse/SWF-1438) for an example that fails on Windows but not Linux.  ---  **Affects:** 3.1.3  **Sub-tasks:** - #14629 Backport ""ReflectivePropertyAccessor should not consider bridge methods""  **Issue Links:** - #14795 Consider bridge methods in SpEL properties  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/107fafbcc5d93284e5098686cc287c41280ee263, https://github.com/spring-projects/spring-framework/commit/2ec41af799a8c32f946e53bc4d220bbbc2ed0a79","closed","in: core,","spring-projects-issues","2012-11-15T16:42:48Z","2019-01-11T14:19:35Z"
"","14618","Segregate long running performance based junit tests [SPR-9984]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9984](https://jira.spring.io/browse/SPR-9984?redirect=false)** and commented  Currently several performance based unit tests are run as part of a regular build.  It would be useful if these could be segregated so that they can be skipped as part of a regular build and only ran with dedicated CI resources.  One possible solution would be some form of annotation.   ---  **Affects:** 3.2 RC1  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2012-11-12T13:01:59Z","2013-01-05T14:15:46Z"
"","14592","Refactor DateTimeFormatterFactory [SPR-9959]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9959](https://jira.spring.io/browse/SPR-9959?redirect=false)** and commented  DateTimeFormatterFactory introduced in 3.2.RC1 is a poor mix of Factory and FactoryBean.  We should refactor to two distinct classes.   ---  **Affects:** 3.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/85ab789f2f52f2b3d159f91076a8bcd1a77c9f27, https://github.com/spring-projects/spring-framework/commit/432c6ebdaec4629c19679b3d8fc1d377bc19181c","closed","in: core,","spring-projects-issues","2012-11-05T10:34:50Z","2012-11-06T17:34:24Z"
"","14585","Document global date time format configuration [SPR-9952]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9952](https://jira.spring.io/browse/SPR-9952?redirect=false)** and commented  Update the reference docs with a section about how to configure global date time formats.  Cover both Joda and non-Joda.  Also add to to whats new about Joda being optional.  ---  **Issue Links:** - #11781 Support for custom global Joda DateTimeFormatters","closed","type: documentation,","spring-projects-issues","2012-11-03T17:15:38Z","2019-01-11T14:16:33Z"
"","14562","Backport ""Allow 'arg-type' matches against element body"" [SPR-9929]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9929](https://jira.spring.io/browse/SPR-9929?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #14445","closed","in: core,","spring-projects-issues","2012-10-27T19:53:43Z","2019-01-11T14:18:57Z"
"","14561","Extend conditional conversion support [SPR-9928]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9928](https://jira.spring.io/browse/SPR-9928?redirect=false)** and commented  Currently the only support for conditional converters is via the `ConditionalGenericConverter` interface.  It would be useful if `Converter` and `ConverterFactory` interfaces could also support conditional conversion.   ---  **Affects:** 3.2 M2","closed","type: enhancement,","spring-projects-issues","2012-10-26T16:47:57Z","2012-11-04T06:54:00Z"
"","14560","Refactor GenericConversionService [SPR-9927]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9927](https://jira.spring.io/browse/SPR-9927?redirect=false)** and commented  Cleanup and refactor the GenericConversionService to better support future enhancements.  ---  **Affects:** 3.2 M2  **Issue Links:** - #14200 Bypass conversion when possible (_**""is depended on by""**_) - #14326 Support conversion from Enum Interface (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/222eec58cde4ac87a6de2cbbf2deb63ef70baea3, https://github.com/spring-projects/spring-framework/commit/4dc289592d0072c7472ab455522362f8db42b4a7","closed","in: core,","spring-projects-issues","2012-10-26T15:30:06Z","2019-01-11T14:18:59Z"
"","14553","Document @Enable* annotations [SPR-9920]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9920](https://jira.spring.io/browse/SPR-9920?redirect=false)** and commented  Document all `@enableXXX` annotations in the Spring reference manual.  Decided where this should go (all in one place, next to the XML equivalents, etc).  ---  **Affects:** 3.2 M2  **Issue Links:** - #14552 Document `@EnableMBeanExport` in reference manual  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59b27004dea31d0dd46465d1d254c5df4de3be0c","closed","type: documentation,","spring-projects-issues","2012-10-25T09:14:18Z","2019-01-13T07:02:29Z"
"","14552","Document @EnableMBeanExport in reference manual [SPR-9919]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9919](https://jira.spring.io/browse/SPR-9919?redirect=false)** and commented  Document the new `@EnableMBeanExport` annotation in the Spring reference manual.  ---  This issue is a sub-task of #13583  **Issue Links:** - #14553 Document `@Enable`* annotations","closed","in: core,","spring-projects-issues","2012-10-25T09:10:51Z","2019-01-13T07:02:31Z"
"","14541","Allow @ManagedResource to be used with @Bean methods [SPR-9908]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9908](https://jira.spring.io/browse/SPR-9908?redirect=false)** and commented  `@ManagedResource` should be allowed on `@Bean` methods in `@Configuration` classes. Otherwise it is not possible to expose a bean via annotations for which you do not have the source for.  ---  **Affects:** 3.1.2  **Issue Links:** - #15922 MBeanExporter should use annotations if `@ManagedResource` present, otherwise use defaults - #17729 Allow the ManagedResource/Attribute/Metric/Operation to be placed on interface","closed","type: enhancement,","spring-projects-issues","2012-10-22T17:38:23Z","2019-01-13T07:02:34Z"
"","14539","Backport ""Close 'beans' tag in MVC namespace documentation"" [SPR-9906]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9906](https://jira.spring.io/browse/SPR-9906?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #14531  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca386c13fc51f410419552ccc95a90a8ef6c76c4","closed","in: web,","spring-projects-issues","2012-10-22T10:06:34Z","2019-01-11T14:14:30Z"
"","14535","Backport ""Prevent memory leaks with @Configuration beans"" [SPR-9902]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9902](https://jira.spring.io/browse/SPR-9902?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #14484","closed","in: core,","spring-projects-issues","2012-10-21T21:38:50Z","2019-01-11T14:14:39Z"
"","14513","Backport ""Allow MapToMap conversion even without a default constructor"" [SPR-9880]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9880](https://jira.spring.io/browse/SPR-9880?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #13922","closed","in: core,","spring-projects-issues","2012-10-12T13:12:36Z","2019-01-11T13:22:36Z"
"","14512","Backport ""SpEL not able to resolve getter method against object of type Class"" [SPR-9879]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9879](https://jira.spring.io/browse/SPR-9879?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #13656","closed","in: core,","spring-projects-issues","2012-10-12T13:03:46Z","2019-01-11T13:18:40Z"
"","14504","Backport ""CollectionFactory does not chain exceptions"" [SPR-9871]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9871](https://jira.spring.io/browse/SPR-9871?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a sub-task of #13923","closed","in: core,","spring-projects-issues","2012-10-10T14:35:47Z","2019-01-11T13:18:30Z"
"","14495","Allow SpEL reserved words in type package names [SPR-9862]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9862](https://jira.spring.io/browse/SPR-9862?redirect=false)** and commented  SPEL reserved tokens ('NE', 'EQ') cannot be used as data attributes withing an object.  This issue was originally raised in #12877 but was reported as still failing by `@wwwreynolds`:  > I'm using Spring 3.1.0 and this still does not work: >  > ``` > #{T(x.le.y.MyClass).MY_CONSTANT} > ``` >  > This expression is thrown: Expression parsing failed; nested exception is org.springframework.expression.spel.SpelParseException: EL1043E:(pos 10): Unexpected token. Expected 'identifier' but was 'le(","closed","type: enhancement,","spring-projects-issues","2012-10-05T10:41:01Z","2019-01-11T13:19:00Z"
"","14449","Backport ""RequestMethodsRequestCondition fails on unsupported method types"" [SPR-9816]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9816](https://jira.spring.io/browse/SPR-9816?redirect=false)** and commented  ---  This issue is a backport sub-task of #14448","closed","status: declined,","spring-projects-issues","2012-09-20T17:49:28Z","2019-01-11T13:17:24Z"
"","14448","RequestMethodsRequestCondition fails on unsupported method types [SPR-9815]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9815](https://jira.spring.io/browse/SPR-9815?redirect=false)** and commented  If the DispatcherServlet sends additional method the Enum.valueOf fails.  ```none java.lang.IllegalArgumentException: No enum const class org.springframework.web.bind.annotation.RequestMethod.PROPFIND 	at java.lang.Enum.valueOf(Enum.java:196) 	at org.springframework.web.bind.annotation.RequestMethod.valueOf(RequestMethod.java:37) 	at org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition.getMatchingCondition(RequestMethodsRequestCondition.java:101) 	at org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(RequestMappingInfo.java:171) 	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:68) 	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:50) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.addMatchingMappings(AbstractHandlerMethodMapping.java:278) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:245) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:212) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:55) 	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:297) 	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1091) 	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1076) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:896) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:915) 	at org.cloudfoundry.practical.demo.ExtendedDispatcherServlet.service(ExtendedDispatcherServlet.java:46) ```  ---  **Affects:** 3.2 M2  **Sub-tasks:** - #14449 Backport ""RequestMethodsRequestCondition fails on unsupported method types""  **Issue Links:** - #9476 Allow  DispatcherServlet/ServletWrappingController to work with the extended WebDAV methods","closed","type: bug,","spring-projects-issues","2012-09-20T17:14:55Z","2019-01-11T13:17:26Z"
"","14447","Delete CopyOfRequestMappingHandlerMapping [SPR-9814]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9814](https://jira.spring.io/browse/SPR-9814?redirect=false)** and commented  Looks like CopyOfRequestMappingHandlerMapping may have been committed by mistake   ---  **Affects:** 3.2 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d1d9e118b7dd52c376c326a40965c47844443a83, https://github.com/spring-projects/spring-framework/commit/4767f44671e60a83fbae2c8a7aea78765f277d21","closed","type: bug,","spring-projects-issues","2012-09-20T17:11:34Z","2012-11-04T06:54:04Z"
"","14429","Develop ConcurrentReferenceHashMap [SPR-9796]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9796](https://jira.spring.io/browse/SPR-9796?redirect=false)** and commented  Several performance issues have been raised against the core Spring framework as well as other Spring projects relating to the use of synchronized WeakHashMaps.  Many of these problems could be reduced by using a concurrent hash map implementation that supports weak or soft references for entries.  Although several implementations of such maps are available in other open source projects [1] [2] adding an additional dependency to the core is not an option.  [1] http://docs.jboss.org/hibernate/validator/5.0/api/org/hibernate/validator/internal/util/ConcurrentReferenceHashMap.html [2] http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/MapMaker.html  ---  **Affects:** 3.2 M2  **Issue Links:** - #12967 Look up of parameter annotations causes deadlock - [SWF-1528](https://jira.spring.io/browse/SWF-1528) Webflow upgrade from 2.0.8 to 2.3.0 - 6% CPU Increase On Websphere - #13804 Cache and late resolve annotations on bean properties to improve performance - [DATACMNS-116](https://jira.spring.io/browse/DATACMNS-116) Synchronisation during performance tests - GenericTypeResolver - #13343 Use concurrent cache to improve performance of GenericTypeResolver","closed","type: enhancement,","spring-projects-issues","2012-09-13T15:59:43Z","2019-01-11T13:35:20Z"
"","14421","PropertyEditorRegistrySupport could lazily create PropertyEditors [SPR-9788]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9788](https://jira.spring.io/browse/SPR-9788?redirect=false)** and commented  During investigations for #14304 it was noticed that PropertyEditorRegistrySupport creates many PropertyEditors internally if createDefaultEditors() is called.  Instead of creating all editors eagerly it may be better to only create them as/when they are needed.  ---  **Affects:** 3.1.2","closed","type: enhancement,","spring-projects-issues","2012-09-11T13:26:33Z","2019-01-11T13:35:33Z"
"","14378","TypeDescriptor getAnnotation method should use generics [SPR-9744]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9744](https://jira.spring.io/browse/SPR-9744?redirect=false)** and commented  It would be better if getAnnotation worked in the same was as the java Method class:  ```java public  T getAnnotation(Class annotationClass) { ```    ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e543ffdfd7070a4b559d724ba4ffa37c58b66bb4, https://github.com/spring-projects/spring-framework/commit/69b380583ae748bdaae12cf0bd372e76f6f2ab5e","closed","type: enhancement,","spring-projects-issues","2012-08-31T10:25:19Z","2012-11-04T06:54:05Z"
"","14364","Introduce ConvertingComparator and InstanceComparator [SPR-9730]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9730](https://jira.spring.io/browse/SPR-9730?redirect=false)** and commented  #14363 has highlighted the need for some additional Comparators that could prove generally useful.  ConvertingComparator - A comparator that can use the new Converter interface introduced in Spring 3.1 in order to convert values before they are converted.  Basically similar to http://commons.apache.org/collections/api-release/org/apache/commons/collections/comparators/TransformingComparator.html  InstanceComparator - A comparator that can sort objects based on their instance type against an ordered list.  In addition some of the existing converters could benefit from additional static methods to reduce the amount of noise from generics:  eg  ```java //Before Comparator c1 = new ComparableComparator(); NullSafeComparator c2 = new NullSafeComparator(c1, false); 		 //After ComparableComparator c3 = ComparableComparator.get(); NullSafeComparator c4 = NullSafeComparator.nullsHigh(); ```  ---  **Affects:** 3.2 M1  **Issue Links:** - #14363 Sort candidate `@AspectJ` methods deterministically (_**""is depended on by""**_) - #19345 Provide static type safe methods like Collections.emptyList() for Comparators","closed","type: enhancement,","spring-projects-issues","2012-08-27T12:24:32Z","2019-01-13T07:03:20Z"
"","14363","Sort candidate @AspectJ methods deterministically [SPR-9729]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9729](https://jira.spring.io/browse/SPR-9729?redirect=false)** and commented  ReflectiveAspectJAdvisorFactoryTests.testFailureWithoutExplicitDeclarePrecedence() can fail on certain JVM implementations.  This is because the test expects an illegal argument exception to be thrown and this is not always the case.  The test works with the following annotated class:  ```java @Aspect public static class NoDeclarePrecedenceShouldFail { 	@Pointcut(""execution(int *.getAge())"") 	public void getAge() { 	}  	@Before(""getAge()"") 	public void blowUpButDoesntMatterBecauseAroundAdviceWontLetThisBeInvoked() { 		throw new IllegalStateException(); 	}  	@Around(""getAge()"") 	public int preventExecution(ProceedingJoinPoint pjp) { 		return 666; 	} } ```  The class seems to imply that the `@Around` advice is always executed before the `@Before` advice and therefore, since the `@Around` advice does not continue, the exception does not matter.  Unfortunately the order of the advice is arbitrary as it depends on the order that methods are returned from ReflectionUtils.doWithMethods().  One possible solution is to modify ReflectiveAspectJAdvisorFactory.getAdvisors() to sort the method list before it is used, giving higher precedence to certain annotations.  ---  **Affects:** 3.1.1  **Sub-tasks:** - #14401 Backport ""Sort candidate `@AspectJ` methods deterministically""  **Issue Links:** - #14364 Introduce ConvertingComparator and InstanceComparator (_**""depends on""**_) - #15038 Consider explicit declaration for AspectJ advice ordering  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77c93219670a789c7b380c85e5b2514c47fb920a","closed","in: core,","spring-projects-issues","2012-08-27T12:08:46Z","2019-01-13T07:03:21Z"
"","14355","Add Windows CI build plan [SPR-9721]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9721](https://jira.spring.io/browse/SPR-9721?redirect=false)** and commented  It would be useful if a Windows CI server were added to test the spring build under a non *nix environment.  This would be particularly useful given how few Spring developers run Windows.  It would also be good to set the server to a different Locale to catch any test failures that assume Locale.US is the default.  ---  This issue is a sub-task of #14349","closed","","spring-projects-issues","2012-08-23T15:28:13Z","2019-01-11T13:34:49Z"
"","14290","Eclipse .classpath exports optional and provided dependencies [SPR-9656]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9656](https://jira.spring.io/browse/SPR-9656?redirect=false)** and commented  Gradle generates eclipse projects with exported=""true"" for all classpath entries, including optional and provided dependencies.  This can make it particularly hard to work with Spring alongside other projects when trying to develop patches.  For example, a maven project can be imported into the same workspace as spring using 'mvn eclipse:eclipse'.  The imported maven project can then be edited to depend on spring project inside the workspace.  At this point the maven project will now include all the exported optional and provided classpath entries of the Spring project.  The build itself also works around this issue with regards to the servlet API [1]  [1] https://github.com/SpringSource/spring-framework/blob/a681e574c3f732d3ac945a1dda4a640ce5514742/build.gradle#L46  ---  **Affects:** 3.2 M1  **Issue Links:** - #14703 Tests in spring-test-mvc fail to execute in Eclipse - #14676 Remove spring-test-mvc/ide.gradle workaround  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0751b2cbeb96697bd377578771e9c7b29b94658a","closed","type: enhancement,","spring-projects-issues","2012-07-30T18:16:27Z","2019-01-11T12:59:53Z"
"","14164","Improve SimpleStreamingClientHttpRequest performance [SPR-9530]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9530](https://jira.spring.io/browse/SPR-9530?redirect=false)** and commented  When using SimpleClientHttpRequestFactory with setBufferRequestBody(false) a SimpleStreamingClientHttpRequest is used internally.  Unfortunately this implementation has very poor performance due to the internal NonClosingOutputStream class.  NonClosingOutputStream extends FilterOutputStream not does not override write(byte b[], int off, int len).  For some reason the JDK implements this method using a for loop so each byte is written one at a time.  The JavaDoc also mentions this:  'Note that this method does not call the \write\ method of its underlying input stream with the same arguments. Subclasses of \FilterOutputStream\ should provide a more efficient implementation of this method.'  The following change fixes the issue for me:  ```     private static class NonClosingOutputStream extends FilterOutputStream {          private NonClosingOutputStream(OutputStream out) {             super(out);         }          @Override         public void close() throws IOException {         }          @Override         public void write(byte[] b, int off, int len) throws IOException {             this.out.write(b, off, len);         }     } ```    ---  **Affects:** 3.1.1, 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8fbfe9b502928605524b47f661813a6d4ef677c8, https://github.com/spring-projects/spring-framework/commit/ecc6a5aed2de7c997046a13a580a56e2fc11ff93","closed","type: enhancement,","spring-projects-issues","2012-06-21T15:44:09Z","2012-10-31T12:06:39Z"
"","14152","Generate eclipse project settings from gradle [SPR-9518]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9518](https://jira.spring.io/browse/SPR-9518?redirect=false)** and commented  Following the migration to Gradle, eclipse source formatter settings are no longer contained in the git repository.  Whilst the eclipse settings cannot fully match the Spring coding style guidelines they often provide a good starting point and help to catch basic errors such as using spaces instead of tabs.   ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/68970b79021f442cc9d42a62044483a1711cca56, https://github.com/spring-projects/spring-framework/commit/2db7a1228836ff7b39047fe137fe43a915f35e94  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-06-19T16:07:32Z","2019-01-11T13:05:59Z"
"","14067","Fix compiler warnings [SPR-9431]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9431](https://jira.spring.io/browse/SPR-9431?redirect=false)** and commented  The current Spring codebase contains numerous compiler warnings, the majority are due to missing generic type information.   ---  **Affects:** 3.1.1","closed","","spring-projects-issues","2012-05-22T09:27:22Z","2019-01-11T12:42:48Z"
"","14006","Add context to StaleAsyncWebRequestException to allow for better exception handling [SPR-9369]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9369](https://jira.spring.io/browse/SPR-9369?redirect=false)** and commented  The StaleAsyncWebRequestException added as part of #13162 is thrown when an async request has gone stale.  Since the exception can be handled using the usual MVC semantics it might be useful to add more context to the exception.  One option might be to add a get getSource() method that could return the Callable or DeferredResult object that was returned from the original `@Controller` method.  An example use case for this might be to send a user to a user an email if a timeout occurs.  ---  **Affects:** 3.1.1  **Issue Links:** - #13162 Support for Servlet 3.0/3.1 asynchronous request processing","closed","status: invalid,","spring-projects-issues","2012-05-02T16:35:05Z","2019-01-12T05:28:40Z"
"","13870","JUnit @Rule executes outside of transaction when using the TransactionalTestExecutionListener [SPR-9232]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-9232](https://jira.spring.io/browse/SPR-9232?redirect=false)** and commented  #### Status Quo  The order in which JUnit _rules_ are run was changed between Spring 3.0 and 3.1 to match JUnit (see #12361). As a side effect of this, `@Rule` callbacks (such as the one developed for #11259) are now executed after the callbacks in `TestExecutionListeners`.  This can be problematic if your rule is running within a transaction as the `TransactionalTestExecutionListener` will perform the rollback before the rule runs. The opposite may also be true: a transaction might not be started before the rule runs.  ###### Current Implementation of `SpringJUnit4ClassRunner.methodBlock()`  ```java Statement statement = methodInvoker(frameworkMethod, testInstance); statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement); statement = withBefores(frameworkMethod, testInstance, statement); statement = withAfters(frameworkMethod, testInstance, statement); statement = withRulesReflectively(frameworkMethod, testInstance, statement); statement = withPotentialRepeat(frameworkMethod, testInstance, statement); statement = withPotentialTimeout(frameworkMethod, testInstance, statement); ```  #### Goals  Ideally, one could argue that in most circumstances the `TransactionalTestExecutionListener` should always be the first and last thing to run.  #### Deliverables  1. Consider changing the `SpringJUnit4ClassRunner.methodBlock()` method to call `TestExecutionListener` callbacks outside of JUnit `@Before` calls, something like:  ```java Statement statement = methodInvoker(frameworkMethod, testInstance); statement = possiblyExpectingExceptions(frameworkMethod, testInstance, statement); statement = withTestExecutionListenerBefores(frameworkMethod, testInstance, statement); statement = withTestExecutionListenerAfters(frameworkMethod, testInstance, statement); statement = withRulesReflectively(frameworkMethod, testInstance, statement); statement = withBefores(frameworkMethod, testInstance, statement); statement = withAfters(frameworkMethod, testInstance, statement); statement = withPotentialRepeat(frameworkMethod, testInstance, statement); statement = withPotentialTimeout(frameworkMethod, testInstance, statement); ```  This would ensure that the _before_ and _after_ callbacks of `TransactionalTestExecutionListener` (and any `TestExecutionListener`) get called around the `@Rule`.  #### Alternatives  Another option would be to introduce a `RuleAwareTestExecutionListener` interface that adds `beforeRules()` and `afterRules()` methods and have `TransactionalTestExecutionListener` implement this interface as well (or possibly instead of) `TestExecutionListener`.  ---  **Affects:** 3.1.1  **Issue Links:** - #12387 Provide `@Rule` alternative to SpringJUnit4ClassRunner (_**""depends on""**_) - #12361 jUnit 4 and `@Rule` execution order  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-12T18:07:28Z","2019-01-13T07:05:46Z"
"","14667","Remove duplicate imageobject items from reference xml [SPR-10033]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10033](https://jira.spring.io/browse/SPR-10033?redirect=false)** and commented  Reference xml includes several duplicate imageobject items (for ""fo"" and ""html"" roles). A single item for both roles should work.   --- No further details from [SPR-10033](https://jira.spring.io/browse/SPR-10033?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-11-25T15:26:13Z","2012-11-25T21:08:21Z"
"","14666","Migrate to docbook 5 [SPR-10032]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10032](https://jira.spring.io/browse/SPR-10032?redirect=false)** and commented  Migrate to well formed docbook 5 markup   ---  **Affects:** 3.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c37080d49d14a49bd6da2104946f5aaf20ab3969","closed","type: enhancement,","spring-projects-issues","2012-11-25T15:09:10Z","2012-11-25T21:08:53Z"
"","14649","Update whats new in 3.2 [SPR-10015]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10015](https://jira.spring.io/browse/SPR-10015?redirect=false)** and commented  Review my changes for 3.2 and update whats new.  At a minimum this should include `@DateTimeFormat` without Joda and global configuration.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e48c789da36f941d2001aef57c2a71437941a0f","closed","type: documentation,","spring-projects-issues","2012-11-21T21:21:18Z","2012-11-25T23:05:14Z"
"","14645","Drop Appendix E. spring-beans-2.0.dtd [SPR-10011]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10011](https://jira.spring.io/browse/SPR-10011?redirect=false)** and commented  Appendix E. spring-beans-2.0.dtd seems a bit pointless these days, should we drop it?   ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3749313d2ff16446632cbf7201b937d323308214","closed","type: enhancement,","spring-projects-issues","2012-11-20T18:03:41Z","2012-11-25T21:09:24Z"
"","14644","Remove xsd versions from reference samples [SPR-10010]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10010](https://jira.spring.io/browse/SPR-10010?redirect=false)** and commented  The current reference docs include a lot of older xsd links. We should probably replace these with 3.2 versions.  ---  **Affects:** 3.1.3  **Issue Links:** - #13562 Update reference documentation regarding 3.1 schema versions (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3f4528905b2c6277d1b169f8570591418c57350, https://github.com/spring-projects/spring-framework/commit/2b6d724faeb493da2d818c91edde66c141efd26c, https://github.com/spring-projects/spring-framework/commit/a52396b342f08144fae8be0d17129f99afe1a3c4","closed","type: enhancement,","spring-projects-issues","2012-11-20T17:57:13Z","2019-01-11T19:00:11Z"
"","14643","Backport ""Documentation update regarding aspectjrt and aspectjweaver jars usage"" [SPR-10009]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10009](https://jira.spring.io/browse/SPR-10009?redirect=false)** and commented  ---  **Affects:** 3.1.3  This issue is a backport sub-task of #13537","closed","type: documentation,","spring-projects-issues","2012-11-20T16:11:01Z","2019-01-11T18:59:59Z"
"","14642","Restore custom reference manual titlepage [SPR-10008]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10008](https://jira.spring.io/browse/SPR-10008?redirect=false)** and commented  The new gradle plugin that generates documentation creates a different title page than version 3.1.  The previous ant build supported a custom `titlepage.xml` file (something like [1]).  The main problem is the large list of authors that dominates the first page. Perhaps removing the `` elements from the docbook source might be another way to fix this?  [1] https://github.com/cwensel/docbook-framework/blob/master/build-docbook.xml#L160   ---  **Attachments:** - [icon_Spring_HighRes.png](https://jira.spring.io/secure/attachment/20705/icon_Spring_HighRes.png) (_45.19 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37b0277a8996d3f1154a40e307f529e45f25b02c","closed","type: enhancement,","spring-projects-issues","2012-11-20T14:24:22Z","2012-11-25T21:10:26Z"
"","14486","Add JDBC exception translation support for Oracle error code ORA-06550 [SPR-9853]","**[Phil Barnes](https://jira.spring.io/secure/ViewProfile.jspa?name=phil)** opened **[SPR-9853](https://jira.spring.io/browse/SPR-9853?redirect=false)** and commented  When I use SimpleJdbcCall class to call DB function (executeFunction()) which doesn't exists (e.g. provde invalid schema name), then I got following message:  > ``` > CallableStatementCallback; uncategorized SQLException for SQL [{? = call My_Procedure_Name SQL state [99999]; error code [17041]; Missing IN or OUT parameter at index:: 1 > ```  This message suggest that something is wrong with parameters which is not the case. When I call a missing DB procedure (execute()) got following message:  > ``` > CallableStatementCallback; bad SQL grammar [{call My_procedure_name}]; nested exception is java.sql.SQLException: ORA-06550: line 1, column 7: > PLS-00201: identifier 'My_procedure_name' must be declared > ```  I test it on Oracle database, so you see here Oracle specific error code (ORA-06550), but this is only an example. Second message is OK - it gives information what's really wrong.   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-10-04T00:47:03Z","2012-11-04T06:54:06Z"
"","13881","Java based configuration - after upgrade to 3.1.1.RELEASE the AOP Proxy session scoped bean is instantiated to find type of bean during dependency resolution [SPR-9243]","**[Petr Sakar](https://jira.spring.io/secure/ViewProfile.jspa?name=saki)** opened **[SPR-9243](https://jira.spring.io/browse/SPR-9243?redirect=false)** and commented  after upgrade from 3.1.0 to 3.1.1 java based context creation fails.  Context used: AnnotationConfigWebApplicationContext.  Relevant parts of stacktrace:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'config': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.jdbc.core.JdbcTemplate  Related cause: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userPreferences' defined in BeanDefinition defined in class path resource [...../Config.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Cannot create scoped proxy for bean 'scopedTarget.userPreferences': Target type could not be determined at the time of proxy creation. at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1356) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:710) at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:519) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:319) at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:185) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:833) at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:790) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:707) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:478) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:284) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:353) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1015) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:911) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.context.support.AbstractApplicationContext.initMessageSource(AbstractApplicationContext.java:773) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:452)  During search for bean of type JdbcTemplate factory tries to instantiate AOP Proxy session scoped bean because it tries to find its type, during the debug I could see the type was something like Proxy instead of actual bean class.  (if it would help, I can try to create test, but have to wait for Monday, as I'm leaving for holidays in few hours, sorry)  after reverting to 3.1.0 version works without problem as before   ---  **Affects:** 3.1.1  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/19534/test.zip) (_9.23 kB_)","closed","in: core,","spring-projects-issues","2012-03-15T04:51:54Z","2012-10-31T11:33:58Z"
"","13980","AnnotationUtils.findAnnotation(Method, Class) fails to find annotation under specific conditions [SPR-9342]","**[Petr Janeček](https://jira.spring.io/secure/ViewProfile.jspa?name=slanec)** opened **[SPR-9342](https://jira.spring.io/browse/SPR-9342?redirect=false)** and commented  The search for method annotation fails if: - the original method does _not_ have the annotation - an abstract superclass does _not_ have an equivalent method declared (therefore cl.getDeclaredMethod() throws NoSuchMethodException which skips the searchOnInterfaces() call) - an interface implemented by the superclass has the method and the annotation - it is not found  SSCCE:  ``` @interface Logged {} interface Foo { 	@Logged 	void doThing(); } abstract class AbstractBar implements Foo { 	// nothing } class Bar extends AbstractBar { 	@Override 	public void doThing() { 		// things 	} } ```  A fix, I think: line 109+:  ``` try { 	Method equivalentMethod = cl.getDeclaredMethod(method.getName(), method.getParameterTypes()); 	annotation = getAnnotation(equivalentMethod, annotationType); 	if (annotation == null) { 		annotation = searchOnInterfaces(method, annotationType, cl.getInterfaces()); 	} } catch (NoSuchMethodException ex) { 	// We're done... } ```  should be:  ``` try { 	Method equivalentMethod = cl.getDeclaredMethod(method.getName(), method.getParameterTypes()); 	annotation = getAnnotation(equivalentMethod, annotationType); } catch (NoSuchMethodException ex) { 	// We're done... } if (annotation == null) { 	annotation = searchOnInterfaces(method, annotationType, cl.getInterfaces()); } ```    ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ef7e728bb85c7dfa4c677deceac6bb2a61f5b9c8, https://github.com/spring-projects/spring-framework/commit/dfd2b77b8a0789f2052f79802b2d7085fc5d186e","closed","in: core,","spring-projects-issues","2012-04-25T04:07:53Z","2012-06-19T03:39:51Z"
"","14166","Spring MVC Ambiguous mapping for unambiguous Class and Method level RequestMapping [SPR-9532]","**[Peter Lunneberg](https://jira.spring.io/secure/ViewProfile.jspa?name=nemesisx00)** opened **[SPR-9532](https://jira.spring.io/browse/SPR-9532?redirect=false)** and commented  I found an interesting issue using the `@RequestMapping` annotations at both class-level and method-level. An ambiguous mapping exception will be thrown if there is a method which maps to empty string and also a method which maps to the same path as the class-level mapping.  Example:  ``` @Controller @RequestMapping(""/test"") public class TestController {     @RequestMapping("""")     public void indexHandler() { }          //Should map to /test/test     @RequestMapping(""/test"")     public void subTestHandler() { } } ```  From the logs in my test server it seems like it finds the class-level mapping when it is attempting to map the subTestHandler(); mapping. This is specific only to using the empty string mapping and also another method mapping which is the same as the class-level mapping.  Granted you could rename the method-level mapping, this doesn't seem like desired functionality.   ---  **Affects:** 3.1.1","closed","status: duplicate,","spring-projects-issues","2012-06-22T09:57:23Z","2019-01-12T16:47:52Z"
"","14347","Infer ""shutdown()"" as destroy method for convenient EHCache setup using @Bean [SPR-9713]","**[Peter Ledbrook](https://jira.spring.io/secure/ViewProfile.jspa?name=pledbrook)** opened **[SPR-9713](https://jira.spring.io/browse/SPR-9713?redirect=false)** and commented  The most convenient way to set up the Ehcache provider is via the `EhCacheManagerFactoryBean` class. But factory beans aren't recommended for Java configuration style, so it would be good to have an alternative, such as a builder, that works well with `@Bean`.  ---  **Affects:** 3.1.1  **Issue Links:** - #20627 Clarify Bean destroyMethod documentation - #16303 EhCacheCacheManager does not close underlying CacheManager  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c823a3f9bf9413eea6b61a8c217eb1efff3e853  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-08-22T01:47:52Z","2019-01-11T13:30:08Z"
"","14113","Test instances should not be proxied in the TestContext framework [SPR-9478]","**[Peter Ertl](https://jira.spring.io/secure/ViewProfile.jspa?name=pertl)** opened **[SPR-9478](https://jira.spring.io/browse/SPR-9478?redirect=false)** and commented  #### Background  In the TestContext framework, the `DependencyInjectionTestExecutionListener` (DITEL) is primarily responsible for performing dependency injection into the current test instance, but DITEL also _initializes_ the test instance using `AutowireCapableBeanFactory.initializeBean()`.  Javadoc for `initializeBean()`:  > Initialize the given raw bean, applying factory callbacks such as `setBeanName` and `setBeanFactory`, also applying all bean post processors (including ones which might wrap the given raw bean). >  > Note that no bean definition of the given name has to exist in the bean factory. The passed-in bean name will simply be used for callbacks but not checked against the registered bean definitions.  The fact that all registered bean post processors are applied to the test instance _as if it were a bean in the ApplicationContext_ leads to unexpected side effects. For example, a CGLIB enhanced version of the test class may be created in order to proxy a transactional test class that does not implement any interfaces. The generated proxy is never actually used by the TestContext framework, and as such its creation is unnecessary and in fact unintentional.  #### Case Study Involving Transactional Tests and CGLIB  With a test class like the following:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration( ... ) @TestExecutionListeners({DependencyInjectionTestExecutionListener.class, TransactionalTestExecutionListener.class}) @Transactional public class TransactionalSpringTest {   // test methods } ```  ... Spring proxies the test class since it discovers the `@Transactional` annotation. This is inappropriate since `@Transactional` is already handled by `TransactionalTestExecutionListener` via reflection. For every test method execution `DependencyInjectionTestExecutionListener` _indirectly_ uses CGLIB to enhance the test class. This results in a potentially large number of instrumented CGLIB classes -- the total = number of transactional tests methods per test * number of tests -- each holding a reference to the data inside the test class which are not released but bound to the current class loader.  In our current project we have several classes (around 50-100) marked transactional which in our case results in a huge memory leak (1GB and more). We worked around this issue by letting the test case implement `org.springframework.aop.Advisor`, which is very dirty but blocks Spring from instrumenting the test class and works fine.  #### Side Note regarding Dynamic Proxies  Note, however, that if the test class implements any interface then a JDK dynamic proxy will be used instead of CGLIB enhancement. This may occur, for example, if the test class implements `ApplicationContextAware` like `AbstractTransactionalJUnit4SpringContextTests` and `AbstractTransactionalTestNGSpringContextTests`.  #### Deliverables  1. [ ] Investigate an alternative for _bean initialization_ of test instances that results in neither CGLIB enhancement of the test instances nor creation of dynamic proxies for test instances.  ---  **Affects:** 3.0 GA  **Issue Links:** - #9309 Load dedicated child ApplicationContext for test instance in the TestContext framework - #10719 Provide mechanism for disabling automatic annotation-driven autowiring in tests - #21674 Java 10: ""Illegal method name"" when test functions in Kotlin contain spaces in name - #16043 Ignore container callback and marker interfaces for auto-proxy decisions  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-06-06T11:22:54Z","2019-01-13T21:06:30Z"
"","14106","always use Enhancer#setUseCache(false) in CglibSubclassingInstantiationStrategy [SPR-9471]","**[Peter Ertl](https://jira.spring.io/secure/ViewProfile.jspa?name=pertl)** opened **[SPR-9471](https://jira.spring.io/browse/SPR-9471?redirect=false)** and commented  please use  Enhancer#setUseCache(false)  in  CglibSubclassingInstantiationStrategy$CglibSubclassCreator#instantiate(..)  since it gives you large huge memory leaks when running tests.  ---  **Affects:** 3.1 GA  **Issue Links:** - #14105 always use Enhancer#setUseCache(false) in Cglib2AopProxy","closed","status: bulk-closed,","spring-projects-issues","2012-06-05T10:56:45Z","2019-01-12T03:48:26Z"
"","14105","always use Enhancer#setUseCache(false) in Cglib2AopProxy [SPR-9470]","**[Peter Ertl](https://jira.spring.io/secure/ViewProfile.jspa?name=pertl)** opened **[SPR-9470](https://jira.spring.io/browse/SPR-9470?redirect=false)** and commented  in Cglib2AopProxy please either use  Enhancer#setUseCache(false)  always (not only when running under a smart class loader which actually seems to be the case when using aspect-j). We have huge memory leaks when running our test suite with ~800 tests.  or provide an easy way to configure that setting from a test case / test runner / test context loader.  ---  **Affects:** 3.1 GA  **Issue Links:** - #14106 always use Enhancer#setUseCache(false) in CglibSubclassingInstantiationStrategy","closed","status: bulk-closed,","spring-projects-issues","2012-06-05T10:51:58Z","2019-01-12T03:48:28Z"
"","14158","Excessive logging if AsyncHandlerInterceptor#getAsyncCallable returns null [SPR-9524]","**[Peter De Wachter](https://jira.spring.io/secure/ViewProfile.jspa?name=pdewacht)** opened **[SPR-9524](https://jira.spring.io/browse/SPR-9524?redirect=false)** and commented  I'm experimenting with the new async servlet support and created an AsyncHandlerInterceptor with a getAsyncCallable method that always returns null. Returning null is allowed according to the JavaDoc.  Now with every request Spring logs the following exception with severity error. The interceptor and the website seem to function normally, but the logging is quite annoying.  2012-06-20 17:52:15,154 ERROR [http-bio-443-exec-22] o.s.w.s.HandlerExecutionChain [HandlerExecutionChain.java:176] HandlerInterceptor.addAsyncCallables threw exception java.lang.IllegalArgumentException: Callable required at org.springframework.util.Assert.notNull(Assert.java:112) ~[spring-core-3.2.0.M1.jar:3.2.0.M1] at org.springframework.web.context.request.async.AsyncExecutionChain.addDelegatingCallable(AsyncExecutionChain.java:130) ~[spring-web-3.2.0.M1.jar:3.2.0.M1] at org.springframework.web.servlet.HandlerExecutionChain.addDelegatingCallables(HandlerExecutionChain.java:173) ~[spring-webmvc-3.2.0.M1.jar:3.2.0.M1] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:944) [spring-webmvc-3.2.0.M1.jar:3.2.0.M1] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:859) [spring-webmvc-3.2.0.M1.jar:3.2.0.M1] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:883) [spring-webmvc-3.2.0.M1.jar:3.2.0.M1] at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:792) [spring-webmvc-3.2.0.M1.jar:3.2.0.M1] [...]   ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e870c9a39251898f0747f9a591595134bbd16278","closed","type: bug,","spring-projects-issues","2012-06-20T09:13:55Z","2012-07-02T15:00:49Z"
"","14432","ApplicationContext fails to load in tests using Java-based config and WebMvcConfigurationSupport [SPR-9799]","**[Per Holmberg](https://jira.spring.io/secure/ViewProfile.jspa?name=pehol)** opened **[SPR-9799](https://jira.spring.io/browse/SPR-9799?redirect=false)** and commented  #### Overview  Test class extends `AbstractTestNGSpringContextTests` and uses `@ContextConfiguration`. It ran fine with XML-based configuration, but when I switched to Java-based configuration (with `WebMvcConfigurationSupport`) it fails.  #### Excerpt from the stacktrace  ``` java.lang.IllegalStateException: Failed to load ApplicationContext ... Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.springframework.web.servlet.HandlerMapping org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.defaultServletHandlerMapping()] threw exception; nested exception is java.lang.IllegalArgumentException: A ServletContext is required to configure default servlet handling ```  #### Analysis  There is no `ServletContext` when running tests. So the message makes sense, but I thought that using `@EnableWebMvc` or `WebMvcConfigurationSupport` was equivalent to using ``, but apparently it is not.  I could extend the `WebMvcConfigurationSupport` and override the `defaultServletHandlerMapping()` method as a work-around, but I don't think that should be necessary.  #### Further References  - See reference URL for another person having the same problem.  ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?123151-Missing-servlet-context-in-spring-tests  **Issue Links:** - #9917 Support loading WebApplicationContexts with the TestContext Framework (_**""is superseded by""**_)  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2012-09-14T02:07:18Z","2019-01-12T16:25:11Z"
"","14683","Example shows deprecated ScheduledTimerTask [SPR-10050]","**[Per Holmberg](https://jira.spring.io/secure/ViewProfile.jspa?name=pehol)** opened **[SPR-10050](https://jira.spring.io/browse/SPR-10050?redirect=false)** and commented  [Spring 3.1 reference manual, section 26.7.1](http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/scheduling.html#scheduling-jdk-timer) shows an example of ScheduledTimerTask, but if you read the [javadoc](http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/scheduling/timer/ScheduledTimerTask.html) of ScheduledTimerTask, this class is deprecated:  > as of Spring 3.0, in favor of the scheduling.concurrent package which is based on Java 5's java.util.concurrent.ExecutorService  Documentation should be updated with an up-to-date example?    ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90fbeb1643f5a8ce21cae2820153eff0072e5f0b, https://github.com/spring-projects/spring-framework/commit/d6b9c6a4755459f3302f42465f0958be500e1f6a  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","in: core,","spring-projects-issues","2012-11-28T01:39:31Z","2012-12-05T10:18:36Z"
"","14157","Specify NumberUtils.parseNumber() trim behavior in the javadoc [SPR-9523]","**[Penny Rohr](https://jira.spring.io/secure/ViewProfile.jspa?name=prohr)** opened **[SPR-9523](https://jira.spring.io/browse/SPR-9523?redirect=false)** and commented  Prior to performing conversion, NumberUtils is removing all whitespace from input string instead of removing only leading/trailing whitespace.  This results in incorrect conversions instead of expected exceptions.  As an example, calling NumberUtils.parseNumber(""2 3"", Double.class) will result in a new Double(""23"").   ---  **Affects:** 3.0.5, 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/78a6429c3295ecdbc35b064f7ebfa568079856df  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2012-06-20T07:52:24Z","2019-01-09T13:06:52Z"
"","14454","Race Condition in ReschedulingRunnable  [SPR-9821]","**[Pedro Ribeiro](https://jira.spring.io/secure/ViewProfile.jspa?name=ribeirux)** opened **[SPR-9821](https://jira.spring.io/browse/SPR-9821?redirect=false)** and commented  I was looking the spring source code, and I think there is a race condition on class ReschedulingRunnable.  The cancel method may have no effect.  For more information, please check the code in attachment.   ---  **Affects:** 3.1.2, 3.2 M2  **Reference URL:** https://github.com/SpringSource/spring-framework/blob/master/spring-context/src/main/java/org/springframework/scheduling/concurrent/ReschedulingRunnable.java  **Attachments:** - [ReschedulingRunnableTest.java](https://jira.spring.io/secure/attachment/20517/ReschedulingRunnableTest.java) (_2.46 kB_)","closed","in: core,","spring-projects-issues","2012-09-22T19:19:35Z","2012-11-04T06:53:59Z"
"","14681","Add HandlerMethod as possible parameter to @ExceptionHandler method [SPR-10047]","**[Pavel Orehov](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.orehov)** opened **[SPR-10047](https://jira.spring.io/browse/SPR-10047?redirect=false)** and commented  Currently the `@ExceptionHandler` method can not contain HandlerMethod as method parameter as it is not passed by spring framework. It could be very helpful for investigating throwing exception method, for example, for custom annotations. The workaround that I found is to create mvc interceptor and pass the MethodHandler via ServletRequest.attributtes.  ---  **Affects:** 3.2 RC2  **Issue Links:** - #17206 Provide access to the target HandlerMethod from `@ExceptionHandler` methods (_**""duplicates""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-11-27T11:16:15Z","2019-01-13T07:01:57Z"
"","14472","Provide more convenient way to enable custom RequestParamMethodArgumentResolver process request parameter with HttpMessageConverter [SPR-9839]","**[Pavel Nemec](https://jira.spring.io/secure/ViewProfile.jspa?name=cert)** opened **[SPR-9839](https://jira.spring.io/browse/SPR-9839?redirect=false)** and commented  Detail description is on forum(see Reference URL)  use case: Custom RequestParamMethodArgumentResolver that would parse and validate serialized object received in request parameter.  found problems: 1)As opposed to default resolvers, custom resolver can't obtain messageConverters in constructor, because it's created before RequestMappingHandlerAdapter that registers custom resolvers and messageConverters.  2)HandlerMethodArgumentResolverComposite doesn't provide any way to place custom resolver before catch-all resolvers.  3)HttpMessageConverter doesn't provide any way to get instructed to read message from parameter instead of request body.  There is a workaround for all issues but one must dig in framework source code to find a solution.   ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?130618-Custom-HandlerMethodArgumentResolver-that-uses-messageConverters","closed","type: enhancement,","spring-projects-issues","2012-09-28T06:49:23Z","2012-10-03T06:00:51Z"
"","13970","SpringValidatorAdapter is incorrectly resolving rejected value for bean based field level constraints [SPR-9332]","**[Pavel Horal](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.horal)** opened **[SPR-9332](https://jira.spring.io/browse/SPR-9332?redirect=false)** and commented  [SpringValidatorAdapter](https://github.com/SpringSource/spring-framework/blob/master/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java) is converting JSR-303 ConstraintViolations to Spring's FieldErrors. This conversion contains a flaw, when the violation occurs on FIELD level constraint, which is validated as bean (e.g. subform).  Consider following example:  ``` public class Address {      private String street;     private String number;      // Getters and Setters  } ```  ``` public class UserForm {      @NotEmpty     private String name;     @AddressValid(/* some parameters */)     private Address contactAddress;     @AddressValid(/* some parameters */)     private Address billingAddress;       // Getters and Setters  } ```  ``` public class AddressValidator implements ConstraintValidator {      // initialize ...      public boolean isValid(Address address, ConstraintValidationContext context) {         // check null, disableDefaultConstraintViolation ...          if (street == null || street.length() == 0) {             context.buildConstraintViolationWithTemplate(""{validation.noStreet}"")                     .addNode(street).addConstraintViolation();             return false;         );         return true;     }  } ```  When submitting empty street the validator above will produce ConstraintValidation with **Address** instance as the **invalidValue** and **UserForm** instance as the **leafBean**. Now consider **current** SpringValidatorAdapter code:  ``` protected void processConstraintViolations(Set violations, Errors errors) { 	for (ConstraintViolation violation : violations) { 		// ... irrelevant part of code 				if (errors instanceof BindingResult) { 					BindingResult bindingResult = (BindingResult) errors; 					String nestedField = bindingResult.getNestedPath() + field; 					if ("""".equals(nestedField)) { 						String[] errorCodes = bindingResult.resolveMessageCodes(errorCode); 						bindingResult.addError(new ObjectError( 								errors.getObjectName(), errorCodes, errorArgs, violation.getMessage())); 					} 					else { 						Object invalidValue = violation.getInvalidValue(); 						// ... THIS IS WHAT IS WRONG - the rejected value is the whole bean Address!!! 						if (!"""".equals(field) && invalidValue == violation.getLeafBean()) { 							// bean constraint with property path: retrieve the actual property value 							invalidValue = bindingResult.getRawFieldValue(field); 						} 						String[] errorCodes = bindingResult.resolveMessageCodes(errorCode, field); 						bindingResult.addError(new FieldError( 								errors.getObjectName(), nestedField, invalidValue, false, 								errorCodes, errorArgs, violation.getMessage())); 					} 				} 		// ... irrelevant part of code 	} } ```  The impact of this behavior is critical - Spring's FORM tags are using rejected values as default values in forms. This means, that the user instead of the rejected value will see result of **toString()** method of the parent bean.  Correct behavior would be to check if the field contains path separator '\*.\*' instead of just checking **invalidValue == violation.getLeafBean()**.  ---  **Affects:** 3.1.1, 3.2 M1  **Attachments:** - [InnerBeanValidationTest.java](https://jira.spring.io/secure/attachment/19607/InnerBeanValidationTest.java) (_3.99 kB_)  **Issue Links:** - #14876 GenericConversionService.convert() throws IllegalArgumentException after updating to Spring 3.2.1 - #19648 Spring validation crashes with Hibernate Validation 5 style list constraint violations - #20725 NumberFormatException caused by property paths from JSR-303 based validation with no index into a collection  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e75eee9b2b35f807fefe9575e59be5e2f4768eb  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2012-04-18T06:37:24Z","2019-07-25T20:23:31Z"
"","13941","Portlet annotation handler mapping does is not working properly because of a flaw in predicate comparison [SPR-9303]","**[Pavel Horal](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.horal)** opened **[SPR-9303](https://jira.spring.io/browse/SPR-9303?redirect=false)** and commented  ## Background  Class `org.springframework.web.portlet.mvc.annotation.DefaultAnnotationHandlerMapping` is using `PortletMappingPredicate`s. These predicates are used to **compare priorities of different mapping** (e.g. mapping with attributes has a higher precedence than the one without parameters) as they support `java.lang.Comparable` interface. When selecting appropriate handler `AbstractMapBasedHandlerMapping#getHandlerInternal` is sorting the predicates (Collections.sort).  ## Example Implementation  I can have handler class as follows:  ``` @RequestMapping(""view"") public class Foo {      @RenderMapping()     public String renderBar() {         // ...     }      @ActionMapping(""xyz"")     public void processXyz() {         // ...     }      @RenderMapping(params=""page=baz"")     public String renderBaz() {         // ...     }  } ```  If I make request with parameter `page=baz`, the `#renderBaz()` method should be invoked. This **might or might not happen** (explanation bellow).  ## Predicate Comparison  Registering the example handler above (in `DefaultAnnotationHandlerMapping`) will result in creating three handler mapping predicates:  1. `RenderMappingPredicate` for `renderBar` without parameters 2. `ActionMappingPredicate` for `processXyz` without parameters 3. `RenderMappingPredicate` for `renderBaz` with parameters  Now what happens in `AbstractMapBasedHandlerMapping#getHandlerInternal` is that the list with these predicates gets sorted and the first one matching the request is picked. The problem is that when they have exactly this order **they are not sorted at all**.  ### Comparison In Detail  This is `compareTo()` method implementation from `RenderMappingPredicate`:  ``` public int compareTo(Object other) {     if (other instanceof TypeLevelMappingPredicate) {         return 1;     }     else if (other instanceof RenderMappingPredicate) {         RenderMappingPredicate otherRender = (RenderMappingPredicate) other;         boolean hasWindowState = """".equals(this.windowState);         boolean otherHasWindowState = """".equals(otherRender.windowState);         if (hasWindowState != otherHasWindowState) {             return (hasWindowState ? -1 : 1);         }         else {             return new Integer(otherRender.params.length).compareTo(this.params.length);         }     }     return (other instanceof SpecialRequestTypePredicate ? 0 : -1); } ```  The code in `ActionMappingPredicate` is almost identical. If you check this code against the predicates from the example you will get following comparisons:  * predicates[0].compareTo(predicates[1]) = 0 (1st RenderMappingPredicate vs ActionMappingPredicate) * predicates[1].compareTo(predicates[2]) = 0 (ActionMappingPredicate vs 2nd RenderMappingPredicate)  **The problem this issue is about is:**  * predicates[0].compareTo(predicates[2]) = 1 (1st RenderMappingPredicate vs 2nd RenderMappingPredicate)  ## Where Is The Issue?  The issue in comparison implementation is simple - parameter length **should be compared first**, regardles of the predicate type (you can see that the current implementation compares parameter length only in case predicates are of the same type).  ---  **Affects:** 3.1.1, 3.1.2  **Attachments:** - [PredicateComparisonTest.java](https://jira.spring.io/secure/attachment/19564/PredicateComparisonTest.java) (_3.33 kB_)  **Issue Links:** - #14239 Wrong compareTo() implementation in Portlet mapping predicates","closed","type: bug,","spring-projects-issues","2012-04-04T03:02:35Z","2019-01-11T12:52:18Z"
"","14630","ContextLoader incorrectly refreshes already refreshed context [SPR-9996]","**[Paul Tomlin](https://jira.spring.io/secure/ViewProfile.jspa?name=ptomli)** opened **[SPR-9996](https://jira.spring.io/browse/SPR-9996?redirect=false)** and commented  Referring to org.springframework.web.context.ContextLoader  JavaDocs for ContextLoader#ContextLoader(WebApplicationContext) state:  > The context may or may not yet be refreshed. If it (a) is an implementation of ConfigurableWebApplicationContext and (b) has not already been refreshed (the recommended approach), then the following will occur: >  > * If the given context has not already been assigned an id, one will be assigned to it > * ServletContext and ServletConfig objects will be delegated to the application context > * customizeContext(javax.servlet.ServletContext, org.springframework.web.context.ConfigurableWebApplicationContext) will be called > * Any ApplicationContextInitializers specified through the ""contextInitializerClasses"" init-param will be applied. > * refresh() will be called >  > If the context has already been refreshed or does not implement ConfigurableWebApplicationContext, none of the above will occur under the assumption that the user has performed these actions (or not) per his or her specific needs.  However, it appears that a context provided to the constructor which has already been refreshed, is again refreshed.  [ContextLoader#initWebApplicationContext(ServletContext)](https://github.com/SpringSource/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java#L262) checks [if the context is a ConfigurableWebApplicationContext](https://github.com/SpringSource/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java#L282) but no check appears to be made for ConfigurableApplicationContext#isActive(), or Lifecycle#isRunning()  ---  **Affects:** 3.1.3  **Issue Links:** - #14225 WebApplicationInitializer with AnnotationConfigWebApplicationContext parent gets reset to null by ContextLoaderListener  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/701c5f11100b56c4809d61bcb889294a1cb3eb3e, https://github.com/spring-projects/spring-framework/commit/b720804c6de7c3e92e0817d7b1198c5ba60bad4b  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2012-11-16T03:16:30Z","2019-01-11T14:19:29Z"
"","14408","Sybase @@Identity not working when moving from 3.0.5  to 3.1.2   [SPR-9774]","**[Paul Remtema ](https://jira.spring.io/secure/ViewProfile.jspa?name=premtema)** opened **[SPR-9774](https://jira.spring.io/browse/SPR-9774?redirect=false)** and commented  We upgraded to 3.1.2.  Selects on Sybase @`@Identity` are now returning incorrect results when using Spring JDBC.  See attachment.   ---  **Affects:** 3.1.2  **Attachments:** - [Spring Core issue with Sybase.docx](https://jira.spring.io/secure/attachment/20424/Spring+Core+issue+with+Sybase.docx) (_16.68 kB_)","closed","in: core,","spring-projects-issues","2012-09-07T13:01:17Z","2019-01-12T05:28:05Z"
"","14390","Register environment in all bean factories in a hierarchy [SPR-9756]","**[Patrick Schultz](https://jira.spring.io/secure/ViewProfile.jspa?name=schultz.patrick@gmail.com)** opened **[SPR-9756](https://jira.spring.io/browse/SPR-9756?redirect=false)** and commented  Attached maven project to demonstrate bug.  Properties files that are scanned are not used in the resolution of key lookup later in the application lifecycle. The property file is missing from the list of available property sources.  Bug is limited to 3.1.2 (code functions as expected in 3.1.1) and to those projects that use the ContextLoaderListener (removing it from the web.xml causes the value to be found in the properties file).  I have yet to find the exact root cause or a workaround (removing the ContextLoaderListener is not an option).  ---  **Affects:** 3.1.2  **Attachments:** - [propertysource-web-bug.zip](https://jira.spring.io/secure/attachment/20418/propertysource-web-bug.zip) (_13.95 kB_)  **Sub-tasks:** - #14398 Backport ""Register environment in all bean factories in a hierarchy""","closed","in: core,","spring-projects-issues","2012-09-05T00:54:11Z","2019-01-11T13:32:47Z"
"","14490","LoadTimeWeaving not working properly in Websphere [SPR-9857]","**[Patrick McCabe](https://jira.spring.io/secure/ViewProfile.jspa?name=pmccabe)** opened **[SPR-9857](https://jira.spring.io/browse/SPR-9857?redirect=false)** and commented  ---  **Affects:** 3.1.2  **Issue Links:** - #13167 `@Entity` objects are not enhanced by the load time weaver in certain situations","closed","in: core,","spring-projects-issues","2012-10-04T10:47:28Z","2019-01-13T07:02:48Z"
"","14383","Avoid per-request Pattern.compile() calls. [SPR-9749]","**[Patrick Linskey](https://jira.spring.io/secure/ViewProfile.jspa?name=pcl)** opened **[SPR-9749](https://jira.spring.io/browse/SPR-9749?redirect=false)** and commented  ---  **Affects:** 3.1.1, 3.1.2, 3.2 M2  **Issue Links:** - #15429 MemoryLeak in AntPathMatcher during caching AntPathStringMatcher instances","closed","type: enhancement,","spring-projects-issues","2012-09-03T10:44:57Z","2019-01-11T13:33:43Z"
"","14382","Share MethodParameter cache between HandlerMethods [SPR-9748]","**[Patrick Linskey](https://jira.spring.io/secure/ViewProfile.jspa?name=pcl)** opened **[SPR-9748](https://jira.spring.io/browse/SPR-9748?redirect=false)** and commented  RequestMappingHandlerAdapter creates a new HandlerMethod for each request. HandlerMethods cache their MethodParameters to avoid costly reflection calls each time annotation stats are needed, but the per-request copy circumvents this cache. This patch explicitly copies the MethodParameter cache from a HandlerMethod and its request-scoped dependents.  ---  **Affects:** 3.1.1, 3.1.2, 3.2 M2  **Issue Links:** - #13936 monitor contention at org.springframework.core.MethodParameter.getParameterAnnotations() (_**""is duplicated by""**_) - #17058 NPE in org.springframework.core.MethodParameter.getParameterName (possible race condition) - #17429 Thread contention in HandlerMethod due to unnecessary BeanFactory.getType call  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/229537288a721ea1f73d7fee5ce9dd60ec46c23e, https://github.com/spring-projects/spring-framework/commit/0a877afa061aacc67b238be6015bf82a3eecf0eb  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-09-03T10:44:11Z","2019-01-11T13:33:40Z"
"","14381","Get rid of per-instance logger creation [SPR-9747]","**[Patrick Linskey](https://jira.spring.io/secure/ViewProfile.jspa?name=pcl)** opened **[SPR-9747](https://jira.spring.io/browse/SPR-9747?redirect=false)** and commented  The per-instance lookup turns into a call to Class.getClassLoader0() for every HandlerMethod created (which is a per-request proceeding). This patch avoids that while still maintaining compilation-level backward-compatibility. Note that this patch does change the logging semantics a bit -- third-party subclasses that use the logger will start to see their messages in the HandlerMethod namespace, and the InvocableHandlerMethod and ServletInvocableHandlerMethod log statements will be separated into their own distinct channels now. If this is a design choice, it would be possible to still avoid the slow call while preserving the logging behavior by implementing a little class => logger ConcurrentHashMap in HandlerMethod -- this should be a small cache, as it's not expected that there will be many subclasses.   ---  **Affects:** 3.1.1, 3.1.2, 3.2 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a877afa061aacc67b238be6015bf82a3eecf0eb, https://github.com/spring-projects/spring-framework/commit/229537288a721ea1f73d7fee5ce9dd60ec46c23e","closed","type: enhancement,","spring-projects-issues","2012-09-03T10:42:07Z","2019-01-11T13:33:51Z"
"","14044","JavaBeanInfo Link broken [SPR-9408]","**[Patrick Cornelißen](https://jira.spring.io/secure/ViewProfile.jspa?name=pcornelissen)** opened **[SPR-9408](https://jira.spring.io/browse/SPR-9408?redirect=false)** and commented  On the page: http://static.springsource.org/spring/docs/current/spring-framework-reference/html/validation.html  The link ""in not-amazing-detail here"" linking to: http://java.sun.com/docs/books/tutorial/javabeans/customization/index.html (which redirects internally to http://docs.oracle.com/javase/tutorial/javabeans/customization/index.html ) is broken. It leads to a 404 on the oracle server.   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c223c178055829c778fc28a5082fa0338a68ca1","closed","in: core,","spring-projects-issues","2012-05-15T01:29:53Z","2012-06-19T03:39:06Z"
"","14430","Spring fails to locate jar files defined with jar-file tag in persistence.xml [SPR-9797]","**[Panu Bloigu](https://jira.spring.io/secure/ViewProfile.jspa?name=donjoe)** opened **[SPR-9797](https://jira.spring.io/browse/SPR-9797?redirect=false)** and commented  I have a JPA2 persistence.xml containing the following jar file definition for a persistence unit:  \lib/common-domain-1.2.0-SNAPSHOT.jar\  My application (MyApp) is a standard ear running in WebSphere 8. The persistence.xml is located in MyApp.ear/MyApp.war/WEB-INF/classes/META-INF as the JPA2 specification requires.  The common-domain-1.2.0-SNAPSHOT.jar is located in MyApp.ear/MyApp.war/WEB-INF/lib.  This setup is in line with the JPA2 specification section 8.2.1.6.3. There is even an example (Example 5) specifically showing this situation.  When Spring reads in the persistence unit configuration, it fails with the exception:  java.io.FileNotFoundException: ServletContext resource [/lib/common-domain-1.2.0-SNAPSHOT.jar] cannot be resolved to URL because it does not exist at org.springframework.web.context.support.ServletContextResource.getURL(ServletContextResource.java:154) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.parseJarFiles(PersistenceUnitReader.java:329) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.parsePersistenceUnitInfo(PersistenceUnitReader.java:281) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.parseDocument(PersistenceUnitReader.java:179) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.readPersistenceUnitInfos(PersistenceUnitReader.java:132)  As you can see, there is an additional path separator in front of the path, so to me this is clearly a bug. This setup should work as per the JPA2 specification. There is a forum post also about this: http://forum.springsource.org/showthread.php?78109-jar-file-tag-can-not-locate-the-classpath-in-persistence-xml   ---  **Affects:** 3.1.2","closed","type: bug,","spring-projects-issues","2012-09-14T01:04:55Z","2012-11-04T06:54:04Z"
"","13851","Fetch size property in NamedParameterJdbcTemplate [SPR-9213]","**[Pankaj Dwivedi](https://jira.spring.io/secure/ViewProfile.jspa?name=pankytechie)** opened **[SPR-9213](https://jira.spring.io/browse/SPR-9213?redirect=false)** and commented  We are working on spring 2.5.6 version.I am using NamedParameterJdbcTemplate as well as JdbcTemplate in different modules in our project. JdbcTemplate is having property ""fetchSize"" where we can set connection fetch size for our requirement. But this is not available for NamedParameterJdbcTemplate though.  We have instantiated NamedParameterJdbcTemplate object with dataSource as constructor arg. Later we found that there is another constructor which accept JdbcTemplate, so we used that to leverage fetch size property attribute. But then we started getting other issues as mentioned at this link: http://stackoverflow.com/questions/9411493/namedparameterjdbctemplate-setting-connection-fetch-size-property  Suggestion here is to provide ""fetchSize"" property in NamedParameterJdbcTemplate class.  It will be appreciated if someone can also tell the reason behind the issue mentioned in above link.   --- No further details from [SPR-9213](https://jira.spring.io/browse/SPR-9213?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-03-09T06:34:51Z","2015-09-22T16:55:21Z"
"","14604","UnsupportedOperationException when accessing Environment with active SecurityManager [SPR-9970]","**[Pan Luo](https://jira.spring.io/secure/ViewProfile.jspa?name=compass)** opened **[SPR-9970](https://jira.spring.io/browse/SPR-9970?redirect=false)** and commented  When deploying the webapp to tomcat, I got ""java.lang.UnsupportedOperationException"" (see the stack trace below). I managed to trace back to the commit 20f87ab98da8a813c0251979286286e5e3776435 and found out the cause of the property name are ""spring.profiles.default"" and ""spring.profile.active"". I don't have those properties defined anywhere.  The workaround is to define those two properties in the web.xml files. The value can be anything.  Stack trace: INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.ReadOnlySystemAttributesMap.keySet(ReadOnlySystemAttributesMap.java:88) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.MapPropertySource.getPropertyNames(MapPropertySource.java:41) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.EnumerablePropertySource.containsProperty(EnumerablePropertySource.java:70) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.SystemEnvironmentPropertySource.resolvePropertyName(SystemEnvironmentPropertySource.java:109) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.SystemEnvironmentPropertySource.getProperty(SystemEnvironmentPropertySource.java:90) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:73) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:59) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.AbstractEnvironment.getProperty(AbstractEnvironment.java:419) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.AbstractEnvironment.doGetDefaultProfiles(AbstractEnvironment.java:277) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.AbstractEnvironment.getDefaultProfiles(AbstractEnvironment.java:260) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.core.env.AbstractEnvironment.merge(AbstractEnvironment.java:402) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.context.support.AbstractApplicationContext.setParent(AbstractApplicationContext.java:392) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:585) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at javax.servlet.GenericServlet.init(GenericServlet.java:212) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at java.lang.reflect.Method.invoke(Method.java:597) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:270) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:269) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at java.security.AccessController.doPrivileged(Native Method) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at javax.security.auth.Subject.doAsPrivileged(Subject.java:517) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:302) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:163) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:117) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1200) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1026) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4421) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4734) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:799) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.core.ContainerBase.access$000(ContainerBase.java:124) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run(ContainerBase.java:146) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at java.security.AccessController.doPrivileged(Native Method) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:777) INFO   | jvm 1    | 2012/11/07 12:38:09 | 	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:601)  ---  **Affects:** 3.1 GA  **Issue Links:** - #14952 Remove unnecessary null check in SystemEnvironmentPropertySource  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a6727cb1645ab27b85360ff5ea217d98a638300, https://github.com/spring-projects/spring-framework/commit/39c00c489e47c2737cea45df3157e719900699c1  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2012-11-07T13:51:56Z","2019-01-11T14:21:14Z"
"","14384","Problem with the @Scheduled Annotation [SPR-9750]","**[Oussama Zoghlami](https://jira.spring.io/secure/ViewProfile.jspa?name=oussama.zoghlami)** opened **[SPR-9750](https://jira.spring.io/browse/SPR-9750?redirect=false)** and commented  Hi all,  When i try to schedule my batch job from the spring batch admin context, using the `@Scheduled` annotation (for example every minute), it's runned twice !!!  Here is my configuration :  --- Scheduler.java `@Scheduled`(cron = ""0 * * * * 1-5"") public void testCron(){ logger.debug(""Testing the cron ...""); }  --- applicationContext-scheduling.xml  \ \        PS: When i use an XML based configuration (by using ), i have not this problem.    ---  **Affects:** 3.1.2","closed","in: core,","spring-projects-issues","2012-09-04T03:05:32Z","2019-01-12T05:28:07Z"
"","14239","Wrong compareTo() implementation in Portlet mapping predicates [SPR-9605]","**[Ondřej Životský](https://jira.spring.io/secure/ViewProfile.jspa?name=ondra)** opened **[SPR-9605](https://jira.spring.io/browse/SPR-9605?redirect=false)** and commented  I have 3 controllers for one portlet:  ``` @Controller @RequestMapping(value=""VIEW"") public class ControllerX {...} @Controller @RequestMapping(value=""VIEW"", params={""myParamMode=1""}) public class Controller1 {...} @Controller @RequestMapping(value=""VIEW"", params={""myParamMode=2""}) public class Controller2 {...} ```  If I deploy application to localhost (Win7, Java7, Liferay 6.1 on Tomcat7) everything works fine. If I deploy application to my TEST server (CentOS, Java6, Liferay 6.1 on Tomcat7) all requests are forwarded to ControllerX (""myParamMode"" parameter is ignored).  I debugged org.springframework.web.portlet.mvc.annotation.DefaultAnnotationHandlerMapping and I thing the problem is **compareTo()** methods in **TypeLevelMappingPredicate**, **RenderMappingPredicate**, **ResourceMappingPredicate**, ... The predicates are sorted in org.springframework.web.portlet.handler.AbstractMapBasedHandlerMapping.getHandlerInternal(): **Collections.sort(predicates);**  The sorting is called in this order (my TEST server):  ``` renderPredicate.compareTo(resPredicate1) returns *0* resPredicate1.compareTo(resPredicate2) returns *0* resPredicate2.compareTo(tlPredicate1) returns *-1* tlPredicate1.compareTo(tlPredicate2) returns *0* ```  So, sorting result is:  ``` DefaultAnnotationHandlerMapping$RenderMappingPredicate DefaultAnnotationHandlerMapping$ResourceMappingPredicate1 DefaultAnnotationHandlerMapping$ResourceMappingPredicate2 DefaultAnnotationHandlerMapping$TypeLevelMappingPredicate1 DefaultAnnotationHandlerMapping$TypeLevelMappingPredicate2 ```  I expected order:  ``` DefaultAnnotationHandlerMapping$ResourceMappingPredicate1 DefaultAnnotationHandlerMapping$ResourceMappingPredicate2 DefaultAnnotationHandlerMapping$TypeLevelMappingPredicate1 DefaultAnnotationHandlerMapping$TypeLevelMappingPredicate2 DefaultAnnotationHandlerMapping$RenderMappingPredicate ```  because RenderMappingPredicate (my class ControllerX) match all requests.  ---  **Affects:** 3.1.1  **Issue Links:** - #13941 Portlet annotation handler mapping does is not working properly because of a flaw in predicate comparison","closed","type: bug,","spring-projects-issues","2012-07-19T04:35:22Z","2019-01-11T12:57:51Z"
"","14599","Autowiring of generic types [SPR-9965]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9965](https://jira.spring.io/browse/SPR-9965?redirect=false)** and commented  Currently the container considers `List` and `Map` types being injected as special injection points and uses generics inspection to inject the appropriate Spring beans. However, there's no general support for injecting generic types in a type safe way.  Assuming we have a generic interface:  ``` interface MyGenericType { ... } ```  and two Spring beans:  ``` class IntegerType extends MyGenericType { ... }  class StringType extends MyGenericType { ... } ```  A client trying to get a special instance of the generic type looking like this:  ``` class MyClient {    @Autowired   private List dependencies; } ```  currently not only gets injected the `IntegerType` bean but the `StringType` as well which will cause exceptions at runtime. The core reason this is the case is that the `BeanFactory` currently uses `Class` based type information that does not carry the generics information on injection time and selectvely inspects the generics for injection of special types like `List` and `Map`.  The Spring Data Commons project has a `TypeInformation` abstraction that allows to lazily resolve generics information as it keeps the generics information around when traversing types, property, method parameter and method return types. It could serve as foundation for an improvement of the `BeanFactory`.  ---  **Issue Links:** - #15601 Introduce ResolvableType Class (_**""depends on""**_) - #15621 Generic autowiring should support wiring of components with unresolved type variables - #10217 autowiring doesn't match generics - #16761 Add generics / parameterized type support to ListableBeanFactory getBeanNamesForType/getBeansOfType methods  5 votes, 13 watchers","closed","type: enhancement,","spring-projects-issues","2012-11-06T23:47:12Z","2019-01-11T14:21:41Z"
"","14573","Spring test module shouldn't pull in hamcrest-all as hard dependency [SPR-9940]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9940](https://jira.spring.io/browse/SPR-9940?redirect=false)** and commented  Trying to upgrade Spring Data JPA from 3.1.2.RELEASE to 3.2.0.BUILD-SNAPSHOT  broke my dependency setup as the test module apparently has hamcrest-all as hard dependency in a really ancient version (1.1 (2007), current is 1.3).  The reason this broke is that my project depends on hamcrest-library only, so that my local declaration of the 1.3 version does not get preferred. I fear we might break quite a few projects with that move as setting up JUnit and Hamcrest to work reasonably is quite a dance anyway and it's not really obvious why tests suddenly don't compile anymore.  Can we make Hamcrest an optional dependency? If not, do we really need the broad hamcrest-all or is hamcrest-library enough as it contains all the `Matcher` implementations (see http://code.google.com/p/hamcrest/wiki/HamcrestDistributables for details). If not, could we at least refer to the latest version (1.3).  ---  **Affects:** 3.2 M2  **Issue Links:** - #11631 spring-test module should depend on 'junit-dep' instead of 'junit' Maven artifact - #14678 Upgrade to JUnit 4.11 - #14595 Remove dependency on hamcrest-lib in Spring MVC Test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de38c033e4f2196a481f88329703e32730bf1ab7, https://github.com/spring-projects/spring-framework/commit/242bf7c4e303ce6d51ba7c0a3943b0b815d685c8","closed","type: bug,","spring-projects-issues","2012-10-31T11:58:26Z","2019-01-11T14:17:22Z"
"","14572","Backport fix for multiple invocations of ImportBeanDefinitionRegistrars [SPR-9939]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9939](https://jira.spring.io/browse/SPR-9939?redirect=false)** and commented  I think this is a reasonable backport candidate as with Spring Data we don't want to force users on to 3.2 abruptly and the logs for the overridden bean definitions might lead users into thinking they're setting up their application context invalidly. Furthermore, even if the duplicate invocation doesn't cause any issues with our `ImportBeanDefinitionRegistrar` it will for implementations which use auto-generated bean names as they'll accidentally register two bean instances which might break autowiring by type as no unique bean then can be found.  ---  This issue is a backport sub-task of #14558  **Issue Links:** - #15876 `@Enable` registrars invoked with subclass for annotation placed on superclass (3.2.x)  **Referenced from:** commits https://github.com/spring-projects/spring-hateoas/commit/48b039aa7f30e378e73fdb4ad039134e65189b00, https://github.com/spring-projects/spring-hateoas/commit/3976ae168b82de6a10f8277ac1351e2be32e230a","closed","in: core,","spring-projects-issues","2012-10-31T11:37:33Z","2019-01-13T07:02:21Z"
"","14558","Prevent duplicate @Import processing and ImportBeanDefinitionRegistrar invocation [SPR-9925]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9925](https://jira.spring.io/browse/SPR-9925?redirect=false)** and commented  When implementing custom `@Enable` annotations using `ImportBeanDefinitionRegistrar` instances, the implementation gets called twice. Chris and I could debug this down into `ConfigurationClassParser.findAllAnnotationAttributes(…)` where the config class is scanned for annotation attributes. It does an explicit check against meta-annotation attributes (explicitly excluding the annotation type while iterating over the local annotations) and against local annotation attributes right after that.  The crucial issue here is that the local attribute metadata inspected already contains the entire attribute hierarchy. Seems like it has already been resolved against meta annotations at that place. The net effect is that the `@Import` annotation is found twice - first, through the explicit meta-annotation lookup in my `@Enable` annotation and second during inspecting the local attributes.  We essentially have to decide to drop the explicit meta-annotation lookup as we seem to be able to find all necessary information through the local scanning already. The other option is to let the attributes only contain local attributes in the first place but this probably has wider implications.  ---  **Affects:** 3.1.2, 3.2 M2  **Sub-tasks:** - #14572 Backport fix for multiple invocations of ImportBeanDefinitionRegistrars  **Issue Links:** - #15876 `@Enable` registrars invoked with subclass for annotation placed on superclass (3.2.x) - #14977 ConfigurationClassParser needs to load annotations through source class loader","closed","in: core,","spring-projects-issues","2012-10-26T06:05:24Z","2019-01-13T07:02:25Z"
"","14523","Allow usage of injection annotations (@Autowired, @Value) as meta-annotations [SPR-9890]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9890](https://jira.spring.io/browse/SPR-9890?redirect=false)** and commented  Assuming libraries expose primitive values as Spring beans under well-defined names like `foo.bar`. They couldbe used by clients using `@Value`(""foo.bar""), which is reasonable but error- prone. It would be cool if you could use `@Value` as follows:  ``` @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) @Value(""foo.bar"") public @interface MySpecialValue { } ```  This allows clients to use `@MySpecialValue` for injection and thus prevent potential typos. Implementing the same for `@Autowired` would naturally complete the meta-annotation usage of `@Qualifier` as you can go from:  ``` @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) @Qualifier(""myQualifier"") public @interface MyQualifier { } ```  and  ``` @Autowired @MyQualifier Dependency dependency; ```  to  ``` @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) @Qualifier(""myQualifier"") @Autowired public @interface MyQualifiedAutowire { } ```  and  ``` @MyQualifiedAutowiring Dependency dependency ```    --- No further details from [SPR-9890](https://jira.spring.io/browse/SPR-9890?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-10-18T20:07:21Z","2012-11-05T06:38:21Z"
"","14441","Document which functionality gets implicitly activated by  [SPR-9808]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9808](https://jira.spring.io/browse/SPR-9808?redirect=false)** and commented  Currently the reference documentation does not explicitly mention that `` gets activated when `` is used. As the latter enables quite a few annotation based functionality ( such as `@PersistenceContext`, `@Required` etc.) the link is quite an important one I'd argue.   ---  **Reference URL:** http://stackoverflow.com/questions/12471019/is-persistenceannotationbeanpostprocessor-of-any-use-at-all  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6a6b441ffdf88a4c8b837f19728f596a57baf296","closed","type: documentation,","spring-projects-issues","2012-09-19T05:18:41Z","2012-12-11T21:41:08Z"
"","14418","Backport ""Work around JDK7 String#substring performance regression"" [SPR-9784]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9784](https://jira.spring.io/browse/SPR-9784?redirect=false)** and commented  ---  This issue is a backport sub-task of #14415  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92a92b79371dbe85cfea9c6b4a923997893ade6d, https://github.com/spring-projects/spring-framework/commit/86ef22db4908d2b16fceac67a2d06a8b0d4e3f6b","closed","in: data,","spring-projects-issues","2012-09-11T03:57:57Z","2019-01-11T13:35:48Z"
"","14348","HttpEntity and ResponseEntity value objects do not implement equals(…)/hashCode() [SPR-9714]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9714](https://jira.spring.io/browse/SPR-9714?redirect=false)** and commented  Currently it's not possible to semantically compare `HttpEntity` / `ResponseEntity` objects as they do not implement `equals(…)` / `hashCode()` appropriately.   ---  **Affects:** 3.1.2, 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a49851d5ebcb5d3c65e324f279f3a8c33f4db16f","closed","type: enhancement,","spring-projects-issues","2012-08-22T02:31:04Z","2012-08-28T14:29:37Z"
"","14314","package-info.class is missing from 3.2 snapshot artifacts [SPR-9680]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9680](https://jira.spring.io/browse/SPR-9680?redirect=false)** and commented   ---  **Affects:** 3.2 M1","closed","status: declined,","spring-projects-issues","2012-08-12T03:11:05Z","2019-01-12T16:36:06Z"
"","14266","spring-orm dependency on spring-web should be optional [SPR-9632]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9632](https://jira.spring.io/browse/SPR-9632?redirect=false)** and commented  The `pom.xml` of `spring-orm` states the following:  ```xml    org.springframework   spring-web   3.2.0.M1   compile               persistence-api       javax.persistence          ```  Is this by intention? Beyond that there seems to be a new policy on when to mark a dependency as optional. Could you please explain that a bit as well?   ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d986585be8c0b02f64a8952c8d6811bd704330d0","closed","type: bug,","spring-projects-issues","2012-07-25T03:53:56Z","2012-08-13T04:59:55Z"
"","14220","Support base package inference for @ComponentScan [SPR-9586]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9586](https://jira.spring.io/browse/SPR-9586?redirect=false)** and commented  A common pattern when using `@ComponentScan` annotation is to point it to a class to pick up packages to scan for components. This pattern can be extended to put the actual configuration class into the root package of your app and let the config class be the marker class at the same time. Currently this leads to the following configuration code:  ```java @Configuration @ComponentScan(basePackageClasses = ApplicationConfig.class) class ApplicationConfig { … } ```  It would be cool if the `@ComponentScan` annotation would simply use the package of the class it is annotated if neither `value`, `basePackage` or `basePackageClasses` are given. This essentially translates to ""do component scanning from right here"".  ```java @Configuration @ComponentScan class ApplicationConfig { … } ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73832f8c6e51eb305b88dfc11815801d18b4d567","closed","type: enhancement,","spring-projects-issues","2012-07-12T05:43:03Z","2012-09-11T08:02:17Z"
"","14202","Support Aware interfaces for ImportBeanDefinitionRegistrar [SPR-9568]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9568](https://jira.spring.io/browse/SPR-9568?redirect=false)** and commented  Implementations of `ImportBeanDefinitionRegistrar` might need access to a `ResourceLoader` in case they want to do things like component scanning or the like. The nicest way to get access to it is implementing `ResourceLoaderAware` I think.  ---  **Issue Links:** - #15160 Support *Aware ImportSelectors - #19250 Consistent *Aware callbacks for TypeFilters, ImportSelectors and ImportBeanDefinitionRegistrars","closed","type: enhancement,","spring-projects-issues","2012-07-06T05:56:24Z","2019-01-11T12:54:01Z"
"","14092","DatabasePopulatorUtils uses non-transactional connection [SPR-9457]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9457](https://jira.spring.io/browse/SPR-9457?redirect=false)** and commented  I've just been trying to populate a `DataSource` with some SQL in an `@Before` method in a transactional JUnit test. I've used the following code:  ```java ...   @Autowired   DataSource dataSource;      @Before   public void populateDatabase() throws SQLException {      ResourceDatabasePopulator populator = new ResourceDatabasePopulator();     populator.addScript(new ClassPathResource(""data.sql""));     DatabasePopulatorUtils.execute(populator, dataSource);   } ... ```  As methods annotated with `@Before` are expected to run within the transaction I wondered why the second test case always failed with an `IntegrityViolationException` inserting the same data twice as I would have expected the inserts contained in `data.sql` being rolled back.  Unfortunately `DatasourcePopulatorUtils` uses a plain `dataSource.getConnection()` call instead of `DataSourceUtils.getConnection(dataSource)` which would actually make sure we get the connection that's bound to the current transaction.  I now fell back to manually execute the populator as follows:  ```java Connection connection = null;  try {   connection = DataSourceUtils.getConnection(dataSource);   populator.populate(connection); } finally {   if (connection != null) {     DataSourceUtils.releaseConnection(connection, dataSource);   } } ```  which seems to be quite a step back from the approach above in terms of conciseness. Is there a reason `DatabasePopulatorUtils` does not aquire the connection through `DataSourceUtils`. If not I'd be happy to provide a pull request with the lookup fixed.  ---  **Affects:** 3.1.1, 3.2 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/19797/mylyn-context.zip) (_6.04 kB_)  **Sub-tasks:** - #14100 Backport ""DatabasePopulatorUtils uses non-transactional connection""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0769d53a6a00ecca77b8019333dc11ffe3f35ac1, https://github.com/spring-projects/spring-framework/commit/67d5a1238fea63f6f8f4eceebd25861b0dd7c50d, https://github.com/spring-projects/spring-framework/commit/49c9a2a9157861bad53ec47b67c8d821b0b4655a","closed","in: core,","spring-projects-issues","2012-05-31T05:45:18Z","2019-01-11T13:02:37Z"
"","13984","Add missing section ids in reference documentation [SPR-9346]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9346](https://jira.spring.io/browse/SPR-9346?redirect=false)** and commented  The sections in the transaction documentation have auto-generated anchor ids (see [this as example](http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/transaction.html#d0e20593). This can cause the links to break if something in the overall document structure changes. The sections should get Docbook ids assigned.  ---  **Sub-tasks:** - #14046 Backport ""Add missing section ids in reference documentation""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a75c57d3c4a295e677c54a987425525e9cef0ed, https://github.com/spring-projects/spring-framework/commit/347e8dfc86fc568e3579a7fb3b86cc44fe3c4ca1, https://github.com/spring-projects/spring-framework/commit/9ca407d55eb55b3c59737ba4635c359b51e19a8e","closed","type: enhancement,","spring-projects-issues","2012-04-26T00:48:56Z","2019-01-11T12:37:16Z"
"","13892","Provide means to configure multithreaded access for cache abstraction [SPR-9254]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9254](https://jira.spring.io/browse/SPR-9254?redirect=false)** and commented  Imagine the following usage of the cache abstraction:  ```java class MyComponent implements Component {    @Cacheable(""myCache"")   public Object myMethod(String key) {    } } ```  Now assume the execution of `myMethod(...)` takes a huge amount of time (hence the caching in the first place). Now futher assume we access the method concurrently with two threads. With the current implementation of the cache interceptor works as follows:  * thread 1 triggers the interceptor, we don't find a value for the key in the cache and thus invoke the method. * Now while the method invocation in thread 1 runs, thread 2 enters the interceptor with the same key, we don't find a value and **re-trigger the method** call  This is unfortunate as the second invocation is entirely obsolete as the second thread could just wait for the first invocation to succeed and use the value returned. Beyond that we might face this scenario in extended version as while the first thread calculates the value pretty much all threads invoking the method with the same key would re-trigger the calculation. So the longer the value calculation takes the more likely we will run into unnecessary duplicate invocations of the method.  So what I am suggesting is that we should keep track of actual method invocations by key and block all concurrent accesses to that cache value until the first thread calculating it has finished and let the other threads use that value then. The [`CacheBuilder` API](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/cache/CacheBuilder.html) of the Google Guava project actually implements this out of the box.  ---  **Affects:** 3.1.1  **Issue Links:** - #13942 Provide some synchronization between `@Cacheable` and `@CacheEvict` annotated methods - [DATAREDIS-443](https://jira.spring.io/browse/DATAREDIS-443) Support of synchronized mode introduced in Spring 4.3 - #16165 Support of ehcache's BlockingCache - #18383 Better synchronization in ConcurrentMapCache - #18804 Allow `@Cacheable` method to return java.util.Optional variant of cached value  **Referenced from:** commits https://github.com/spring-projects/spring-data-redis/commit/1f97623a7ca52b9706488efa86e817983214c305, https://github.com/spring-projects/spring-data-redis/commit/ceccafb6706a137713f376425a826c203a947814, https://github.com/spring-projects/spring-data-redis/commit/5cc5da919937625f21cb03141e92aa0ed3bbca50, https://github.com/spring-projects/spring-data-redis/commit/a03c4442988b22a2d3a28196828e04a7daf9427d  17 votes, 25 watchers","closed","has: votes-jira,","spring-projects-issues","2012-03-21T04:14:19Z","2019-01-13T07:05:36Z"
"","14672","Introduce AnnotationAwareOrderComparator#INSTANCE constant [SPR-10038]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10038](https://jira.spring.io/browse/SPR-10038?redirect=false)** and commented  `AnnotationAwareOrderComparator` inherits an `INSTANCE` variable from it's superclass `OrderComparator` which is highly misleading as `AnnotationAwareOrderComparator.INSTANCE` is **not** an `AnnotationAwareOrderComparator` but an `OrderComparator` only. Thus, if you reference the variable you're essentially not getting what you think you get.  `AnnotationAwareOrderComparator` should define a static `INSTANCE` variable itself.   ---  **Affects:** 3.1.3, 3.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e40e2b7cae444af5e91a67b5123a9cb7cde839ae, https://github.com/spring-projects/spring-framework/commit/40e8d3f1a9de57db591d523eea70212d6fd283b8","closed","type: enhancement,","spring-projects-issues","2012-11-26T07:28:15Z","2012-11-26T09:20:30Z"
"","14064","spring-expression: null values in (boolean) expressions won't be converted [SPR-9445]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-9445](https://jira.spring.io/browse/SPR-9445?redirect=false)** and commented  The `GenericConversionService` has a method 	 `protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType)` that may be overridden to provide special conversions for null values into other types. In my use case I want to treat `null` the same as the boolean value `false` when used in a SpEL expression.  However, there are several pitfalls that prevent this conversion. The first one is in `ExpressionUtils.convertTypedValue()` where the shortcut `ClassUtils.isAssignableValue` prevents a conversion (because `null` is assignable to every reference type). The second one is in the implementations of the boolean operators (`OpAnd`, `OpOr`, and `OperatorNot`) where a `null` value immediately causes an exception before a conversion will be tried.  The solution is to pass `null` always to the converter.  ---  **Affects:** 3.1.1  **Issue Links:** - #19462 Accepting null as default value for a property  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/759c9b35cd4d74aff7b912324751b334bf598f47","closed","type: enhancement,","spring-projects-issues","2012-05-26T04:21:26Z","2019-01-11T13:03:17Z"
"","13833","Implement FileSystemResource constructor directory-aware [SPR-9195]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-9195](https://jira.spring.io/browse/SPR-9195?redirect=false)** and commented  I used to work with `URLResource` instances, but then decided to switch to `FileSystemResource` since my resource are actually just files. However, after that `createRelative()` didn't work any more as expected.  This is a simple test case:  ``` @Test public void testRelativeResource() throws Exception {     File file = new File(""/tmp/dummy"");     file.mkdir();     file.deleteOnExit();      Resource resource1 = new FileSystemResource(file);     Resource resource2 = new UrlResource(file.toURI());              Resource relative1 = resource1.createRelative(""rel"");     Resource relative2 = resource2.createRelative(""rel"");              Assert.assertEquals(relative1.getURI(), relative2.getURI()); } ```  The point is that `file.toURI()` adds a trailing slash to the path if `file` is a directory. It would be great if the FileSystemResource(File) constructor could do the same.   --- No further details from [SPR-9195](https://jira.spring.io/browse/SPR-9195?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-03-02T08:31:07Z","2019-01-12T03:48:59Z"
"","13832","SpEL: OpEQ should use equals() [SPR-9194]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-9194](https://jira.spring.io/browse/SPR-9194?redirect=false)** and commented  The implementation of the SpEL == operator in org.springframework.expression.spel.ast.OpEQ does some special handling for Number types and Comparables, but finally uses left == right. I think it should always call left.equals(right) - or for null-safety left == null ? right == null : left.equals(right) This would be consistent with Scala or Groovy, for example.  As for the number types: a float 1.2 would be equal to a short 1 (see also https://jira.springsource.org/browse/SPR-9164)  ---  **Affects:** 3.1.1  **Issue Links:** - #16330 ClassCastException when evaluating the eq/ne operator in the EL - #19429 SpEL: Compiled OpNE should favor equals() to != - #13802 Support BigDecimals with SpEL  2 votes, 6 watchers","closed","in: core,","spring-projects-issues","2012-03-02T08:14:57Z","2019-01-11T22:14:55Z"
"","14263","When testing controller mappings using AnnotationMethodHandlerAdapter NPE is thrown [SPR-9629]","**[Oleksiy Rezchykov](https://jira.spring.io/secure/ViewProfile.jspa?name=orezchykov)** opened **[SPR-9629](https://jira.spring.io/browse/SPR-9629?redirect=false)** and commented  When using AnnotationMethodHandlerAdapter with Mock request and response to test controller mappings and controller under test has class- and method-level `@RequestMapping` annotation - receiving an NPE. I have to manually put some attribute to the request. Please see the test from URL for details. The bug root case is null unsafe useTypeLevelMapping method at AMHA. I propose to change the return to something which is close to useSuffixPattern method return. Like "" Object value = request.getAttribute(HandlerMapping.INTROSPECT_TYPE_LEVEL_MAPPING); return (value != null) ? (Boolean) value : Boolean.TRUE; ""  ---  **Affects:** 3.1.2  **Reference URL:** https://github.com/springbyexample/spring-by-example/blob/master/spring-by-example-2/src/test/java/ua/com/springbyexample/controller/EmployeeControllerTest.java  **Sub-tasks:** - #14267 Backport ""When testing controller mappings using AnnotationMethodHandlerAdapter NPE is thrown""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a7e229743287d4b17b4778adc231fd92900aef94, https://github.com/spring-projects/spring-framework/commit/914557b9753d2822f79b7be9d33a1258895a69e9","closed","type: bug,","spring-projects-issues","2012-07-24T13:12:39Z","2019-01-11T12:57:08Z"
"","14282","Allow consumer caching for Temporary Channels [SPR-9648]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=oleg.zhurakousky@springsource.com)** opened **[SPR-9648](https://jira.spring.io/browse/SPR-9648?redirect=false)** and commented  For now its just a placeholder. Will follow up with more details shortly   ---  **Issue Links:** - [INT-2683](https://jira.spring.io/browse/INT-2683) Enable cachability of consumers for reply-side of JmsOutboundGateway","closed","","spring-projects-issues","2012-07-27T05:04:44Z","2019-01-11T13:00:58Z"
"","14019","JdkVersion doesn't detect correctly JDK 1.7.0_04 [SPR-9383]","**[Oleg Poleshuk](https://jira.spring.io/secure/ViewProfile.jspa?name=relgames)** opened **[SPR-9383](https://jira.spring.io/browse/SPR-9383?redirect=false)** and commented      javaVersion = System.getProperty(""java.version"");     // version String should look like ""1.4.2_10""     if (javaVersion.indexOf(""1.7."") != -1) {          majorJavaVersion = JAVA_17;     }  Looks like Oracle made a change and now System.getProperty(""java.version"") returns just ""1.7"" so indexOf(""1.7."") fails as there is no dot anymore.    ---  **Affects:** 3.1.1","closed","in: core,","spring-projects-issues","2012-05-07T03:47:12Z","2019-01-12T05:28:38Z"
"","14612","LocalDataSourceConnectionProvider closes connection instead of releasing it [SPR-9978]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-9978](https://jira.spring.io/browse/SPR-9978?redirect=false)** and commented  LocalDataSourceConnectionProvider closes connection directly in closeConnection() method instead of releasing it using DataSourceUtils.releaseConnection(), i.e. without consulting with SmartDataSource. As result, we can't use SingleConnectionDataSource with suppressClose == false together with Hibernate code. SingleConnectionDataSource is useful in tests, but not only - we found it really useful in production code for command line tools working with a DB from one thread - it's actually the fastest approach. When suppressClose == true SingleConnectionDataSource performs quite slowly, probably because of dynamic proxy. And we found no way to override ConnectionProvider implementation in Spring (we use AnnotationSessionFactoryBean).   ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a8be690998f43a9253305e09f96ad83058ef540, https://github.com/spring-projects/spring-framework/commit/0ee12563b038797a137ac67b13e5dd6d3d918a7f, https://github.com/spring-projects/spring-framework/commit/d6e1a4a26a4bb583f2da3e20c5eda30ec995b5fb","closed","type: bug,","spring-projects-issues","2012-11-08T11:21:18Z","2012-11-08T14:36:58Z"
"","13853","Load-time weaving not applying to beans defined by Configuration classes [SPR-9215]","**[Noodle](https://jira.spring.io/secure/ViewProfile.jspa?name=noodle)** opened **[SPR-9215](https://jira.spring.io/browse/SPR-9215?redirect=false)** and commented  When use Java Configuration, aspectj weaver cannot see spring beans with `@Component`, `@Service` `@Repository` annotations.   ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?124055-XML-vs-Java-Config-for-aspectj-transaction  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/55ed933a53d007662883bf8a63c27570165507ef, https://github.com/spring-projects/spring-framework-issues/commit/8a412ec9fa1ef7de87a7ec697fc80cc56c466077  7 votes, 13 watchers","open","type: enhancement,","spring-projects-issues","2012-03-09T09:56:41Z","2021-03-29T07:58:44Z"
"","13936","monitor contention at org.springframework.core.MethodParameter.getParameterAnnotations() [SPR-9298]","**[Nikita Tovstoles](https://jira.spring.io/secure/ViewProfile.jspa?name=nikita.tovstoles)** opened **[SPR-9298](https://jira.spring.io/browse/SPR-9298?redirect=false)** and commented  On each web request, RequestMappingHandlerAdapter.invokeHandlerMethod() indirectly calls MethodParameter.getParameterAnnotations(), which calls into JRE lib method causing monitor contention. See screen shots & [YourKit snapshot](http://ecorebates-misc.s3.amazonaws.com/CLP-895/clp-895-init.snapshot). Most likely will need to patch spring (caching results of calls to java.lang.reflect.Method.getParameterAnnotations())  Looking at Spring's MethodParameter:  ``` public Annotation[] getParameterAnnotations() {      if (this.parameterAnnotations == null) {           Annotation[][] annotationArray = (this.method != null ?                         this.method.getParameterAnnotations() : this.constructor.getParameterAnnotations());           if (this.parameterIndex >= 0 && this.parameterIndex < annotationArray.length) {                this.parameterAnnotations = annotationArray[this.parameterIndex];           }           else {                this.parameterAnnotations = new Annotation[0];           }      }      return this.parameterAnnotations; } ```  results of calls on Method & Constructor:  ``` Annotation[][] annotationArray = (this.method != null ?               this.method.getParameterAnnotations() : this.constructor.getParameterAnnotations()); ```  should be cached in two static Maps (since MethodParameter object is recreated per request)  ---  **Affects:** 3.1 GA  **Attachments:** - [screenshot-1.jpg](https://jira.spring.io/secure/attachment/19560/screenshot-1.jpg) (_224.28 kB_) - [screenshot-2.jpg](https://jira.spring.io/secure/attachment/19561/screenshot-2.jpg) (_291.28 kB_)  **Issue Links:** - #14382 Share MethodParameter cache between HandlerMethods (_**""duplicates""**_) - #12967 Look up of parameter annotations causes deadlock (_**""is duplicated by""**_) - #13379 annotations need to be cached (jvm concurrency issue) (_**""is duplicated by""**_)  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-02T16:45:45Z","2019-01-11T12:47:34Z"
"","13883","I would like  to expose waitForTasksToCompleteOnShutdown and threadNamePrefixSet [SPR-9245]","**[Nigel Watson](https://jira.spring.io/secure/ViewProfile.jspa?name=nigel.d.watson)** opened **[SPR-9245](https://jira.spring.io/browse/SPR-9245?redirect=false)** and commented  I want to be able to say:   Rather than: \ \ \ \ \ \ \  ---  **Affects:** 3.1.1  **Issue Links:** - #10060 ThreadPoolExecutor waitForTasksToCompleteOnShutdown doesn't work as expected  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-15T07:59:27Z","2019-01-11T12:46:28Z"
"","14271","@DateTimeFormat does not work with @Value [SPR-9637]","**[Nicu Marasoiu](https://jira.spring.io/secure/ViewProfile.jspa?name=nmarasoi)** opened **[SPR-9637](https://jira.spring.io/browse/SPR-9637?redirect=false)** and commented  #### Overview  When you have annotation based injection:  ``` @Value(""${propertyName}"") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) private Date globalStartDate; ```  and you have in context.xml the conversionService set to:  ```  ```  then the conditional converter that works with `@DateTimeFormat`, although properly registered in context, decides it cannot apply to the globalStartDate, because the TypeDescriptor associated with globalStartDate does not have the annotations anymore. This is because convertIfNecessary(String,Class) is called.  If you go without `@Value`, and inject by xml, it goes fine, using BeanWrapper, and creating a proper TypeDescriptor from the BeanPropertyDescriptor.  #### Stack Traces  ##### Stack Trace for `@Value` Scenario  ``` java.lang.Exception 	at org.springframework.core.convert.TypeDescriptor.(TypeDescriptor.java:461) 	at org.springframework.core.convert.TypeDescriptor.(TypeDescriptor.java:472) 	at org.springframework.core.convert.TypeDescriptor.valueOf(TypeDescriptor.java:112) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:93) 	at org.springframework.beans.SimpleTypeConverter.convertIfNecessary(SimpleTypeConverter.java:49) 	at org.springframework.beans.SimpleTypeConverter.convertIfNecessary(SimpleTypeConverter.java:43) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:750) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:735) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:478) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:284) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:591) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:469) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:103) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) 	at org.springframework.test.context.support.DelegatingSmartContextLoader.loadContext(DelegatingSmartContextLoader.java:228) 	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:124) 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:148) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:290) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41) 	at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:220) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:182) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:62) ```  ##### Stack Trace for XML-based String Injection  ``` java.lang.Exception 	at org.springframework.core.convert.TypeDescriptor.(TypeDescriptor.java:461) 	at org.springframework.core.convert.TypeDescriptor.(TypeDescriptor.java:99) 	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:516) 	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:510) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1406) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1365) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:591) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:469) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:103) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) 	at org.springframework.test.context.support.DelegatingSmartContextLoader.loadContext(DelegatingSmartContextLoader.java:228) 	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:124) 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:148) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:290) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41) 	at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:220) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:182) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:62) ```    ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e904589bd1f910b095acdd1fb760a76ab84e8e54","closed","type: enhancement,","spring-projects-issues","2012-07-26T06:38:58Z","2012-09-04T13:36:27Z"
"","14652","Allow to use constructor-arg as bean attribute for simple case [SPR-10018]","**[Nicolas Labrot](https://jira.spring.io/secure/ViewProfile.jspa?name=nithril)** opened **[SPR-10018](https://jira.spring.io/browse/SPR-10018?redirect=false)** and commented  For example I use an immutable Pair class.  I construct the class with constructor-arg :  ```xml            ```  For simple case it may be interesting to set constructor arg with attributes  ```xml  ```  ```xml  ```  With support to spel to ""cast"" and infere type  ---  **Issue Links:** - #12128 c: (constructor) namespace  (_**""duplicates""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2012-11-22T08:00:25Z","2019-01-11T18:40:17Z"
"","14038","NullPointerException when using MessageSourceResourceBundle containsKey and keySet methods [SPR-9402]","**[Nicolas Krier](https://jira.spring.io/secure/ViewProfile.jspa?name=nicolas.krier)** opened **[SPR-9402](https://jira.spring.io/browse/SPR-9402?redirect=false)** and commented  You get a NullPointerException when using MessageSourceResourceBundle containsKey and keySet methods. These methods call the ResourceBundle protected method handleKeySet that call getKeys method that is null for the MessageSourceResourceBundle.   ---  **Affects:** 3.1.1","closed","status: invalid,","spring-projects-issues","2012-05-12T09:09:18Z","2019-01-12T05:28:37Z"
"","14414","AbstractBeanFactory#markBeanAsCreated performance issue due to lock contention [SPR-9780]","**[Nicko Cadell](https://jira.spring.io/secure/ViewProfile.jspa?name=springsource@thebap.org)** opened **[SPR-9780](https://jira.spring.io/browse/SPR-9780?redirect=false)** and commented  We are calling `getBean` frequently (perhaps too often), but we have noticed that we get some lock contention where the bean name is added to the `alreadyCreated` set. This is a synchronized set created in the `AbstractBeanFactory`.  The call stack is typically something like this:  ``` at java.util.Collections$SynchronizedCollection.add(Collections.java:1577) at org.springframework.beans.factory.support.AbstractBeanFactory.markBeanAsCreated(AbstractBeanFactory.java:1363) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:271) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibSubclassCreator$LookupOverrideMethodInterceptor.intercept(CglibSubclassingInstantiationStrategy.java:160) ```  When the `markBeanAsCreated` method is typically called the `beanName` already exists in the `alreadyCreated` set.  A couple of different options come to mind:  The first option would be to change the locking on the `alreadyCreated` set from a mutex to a reader/writer lock. Change the `markBeanAsCreated` method to acquire a read lock, then check if the set already contains the bean name, only if it does not contain it, upgrade the read lock to a write lock and add the bean name to the set. This could be slightly more work when a bean is created for the first time but allows for greater concurrency once the beans have been created.  The second option is that the factory is actually a `DefaultListableBeanFactory` and the `configurationFrozen` flag is set to TRUE. This means that the `isBeanEligibleForMetadataCaching` method is overridden to always return TRUE. I believe that the `isBeanEligibleForMetadataCaching` method in `AbstractBeanFactory` is the only place that cares about the contents of the `alreadyCreated` set. So it seems like a waste of time to populate the `alreadyCreated` set if the `configurationFrozen` flag is set to TRUE. So the `DefaultListableBeanFactory` should override the `markBeanAsCreated` method and do nothing if the `configurationFrozen` flag is set to TRUE.  ---  **Affects:** 3.1.1  **Issue Links:** - #14452 Non-singleton beans performance issue - #16864 Further locking optimizations for the retrieval of non-singleton beans","closed","in: core,","spring-projects-issues","2012-09-09T17:40:13Z","2019-01-11T13:36:17Z"
"","14428","Can't component scan for @Component and exclude @Controller (a.k.a., excludeFilters should take precedence over includeFilters) [SPR-9795]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-9795](https://jira.spring.io/browse/SPR-9795?redirect=false)** and commented  Like many, I wanted my services, repositories and the like managed by the application context and my controllers by the framework servlet. So, for my application context configuration class I used the following annotation:  ``` @ComponentScan(basePackageClasses={         com.package.Marker.class }, useDefaultFilters=true, includeFilters={         @ComponentScan.Filter(Aspect.class) }, excludeFilters={         @ComponentScan.Filter(Controller.class) }) ```  And for my framework servlet configuration I used:  ``` @ComponentScan(basePackageClasses={         com.package.Marker.class }, useDefaultFilters=false, includeFilters={         @ComponentScan.Filter(Controller.class) }) ```  However, my controllers were getting instantiated twice: once in the application context and once in the framework servlet. So I tried the following iterations of my application context config class annotation:  ``` @ComponentScan(basePackageClasses={         com.package.Marker.class }, useDefaultFilters=false, includeFilters={         @ComponentScan.Filter(Aspect.class), @ComponentScan.Filter(Component.class),         @ComponentScan.Filter(Repository.class), @ComponentScan.Filter(Service.class) }) ```  ``` @ComponentScan(basePackageClasses={         com.package.Marker.class }, useDefaultFilters=false, includeFilters={         @ComponentScan.Filter(Aspect.class), @ComponentScan.Filter(Component.class),         @ComponentScan.Filter(Repository.class), @ComponentScan.Filter(Service.class) }, excludeFilters={         @ComponentScan.Filter(Controller.class) }) ```  Neither of those worked. Controllers were instantiated twice. I figured this is because the `@Controller` annotation is itself annotated with `@Component`. So, with that, THIS worked:  ``` @ComponentScan(basePackageClasses={         com.package.Marker.class }, useDefaultFilters=false, includeFilters={         @ComponentScan.Filter(Aspect.class), @ComponentScan.Filter(Repository.class),         @ComponentScan.Filter(Service.class) }) ```  However, that doesn't achieve what I want, because I want classes marked `@Component` to be instantiated, I just don't want classes marked `@Controller` to be instantiated.  In short, it seems to me that if I explicitly say ""exclude classes matching these filters from component scanning,"" that should take precedence over all else. Especially important: if I say ""use default filters"" and then provide exclusions, those exclusions should NOT be ignored.  I do not know whether this same problem exists with XML configuration. Presumable it does, but I'm not in a position to test that at the moment.   ---  **Affects:** 3.1.2  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-09-13T15:36:14Z","2019-01-11T13:35:17Z"
"","14312","Add  subtag for  [SPR-9678]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-9678](https://jira.spring.io/browse/SPR-9678?redirect=false)** and commented  The JSTL tag  can contain parameter placeholders in its value, and nested  tags supply values for those placeholders. Likewise the  tag can contain parameter placeholders in its value, and nested  tags supply values for those placeholders.  However, things differ for i18n. , like , uses nested  tags to replace message parameters. However,  does not. It instead has a flat attribute that expects a comma-(by default)-separated LIST of arguments, and contains an optional attribute for specifying a different delimiter.  This is an onerous way to use this feature. If I have a parameter in a message that can contain any number of typical delimiters (for example, I'm displaying an error message), I have to go to extreme lengths to display this properly without worrying about improper splitting:  ```  ```  This would make much more sense, and match not only the JSTL but also other Spring tags (like ):  ```  ```  I believe this is a much-needed improvement for this tag, and the existing arguments and argumentSeparator attributes could be left in place for backwards compatibility.  Would love to see this in 3.2.x... :-)   ---  **Affects:** 3.0.1, 3.0.7, 3.1.1, 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66cfe9f0e64aff1fe75b95d8445944f5284a0496, https://github.com/spring-projects/spring-framework/commit/f9b17a708f14869074b3ab4e86e46be56d24c0bd  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-08-09T08:33:57Z","2019-01-11T12:58:05Z"
"","14473","Support JSR 303 @Valid on @PathVariable [SPR-9840]","**[Neil Laurance](https://jira.spring.io/secure/ViewProfile.jspa?name=toolkit)** opened **[SPR-9840](https://jira.spring.io/browse/SPR-9840?redirect=false)** and commented  Similar to #11041.  I have a controller with the following:  ```java @Controller public class BookController {     @RequestMapping(""/books/{isbn}"")    public @ResponseBody Book getBook(@Valid @PathVariable(""isbn"") Isbn isbn) {       return bookService.getBook(isbn);    }     // thrown when validation fails    @ExceptionHandler(BindException.class)     @ResponseStatus(value = HttpStatus.BAD_REQUEST)    public void bindException() {} } ```  Where I have registered a custom converter:  ```xml                                                             ```  When I run this, my validation code annotation is ignored.  However, if I remove `@PathVariable`, then the code still works, although my IDE warns that 'URI template variable ""isbn"" is not defined'.  http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#validation-mvc-triggering suggests this **should** work.  ---  **Affects:** 3.1.1  **Issue Links:** - #11041 Support for javax.validation annotations on `@PathVariable`, `@RequestHeader`, `@RequestParam`","closed","in: web,","spring-projects-issues","2012-09-28T07:27:25Z","2019-01-13T07:02:54Z"
"","14170","XStreamMarshaller should convert XStream StreamException to Spring exception in case of unmarshalling an empty stream [SPR-9536]","**[Neil Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=brownn)** opened **[SPR-9536](https://jira.spring.io/browse/SPR-9536?redirect=false)** and commented  The constructor for an XStream XppReader can throw an XStream StreamException, e.g. in the case where it is constructed from an empty stream. (This can occur if an attempt is made to unmarshall an empty HTTP request).  For consistency, the Spring XStreamMarshaller should catch this occurrence of a StreamException, and convert (wrap and rethrow) it to a Spring UnmarshallingFailureException as it does in other cases.  TestCase follows -  ``` import java.io.StringReader;  import javax.xml.transform.stream.StreamSource;  import org.junit.Before; import org.junit.Test; import org.springframework.oxm.UnmarshallingFailureException; import org.springframework.oxm.xstream.XStreamMarshaller;  import com.thoughtworks.xstream.io.StreamException; import com.thoughtworks.xstream.io.xml.XppReader;  /**  * Unit tests for {@link XStreamMarshaller}.  */ public class XStreamMarshallerTest {      private XStreamMarshaller uut;    /**    * Set-up test fixtures.    */   @Before   public void setUp() {     this.uut = new XStreamMarshaller();   }    /**    * Tests {@link org.springframework.oxm.xstream.XStreamMarshaller#unmarshalReader(java.io.Reader)} in the case    * where the input stream is empty, and the marshaller is not configured to use a supplied stream driver, and so     * creates a new instance of {@link XppReader}.    *     * In this scenario {@link XppReader#XppReader(java.io.Reader, com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)}     * throws a {@link StreamException} when {@link XppReader#moveDown()} is invoked on the empty stream. The     * {@link XStreamMarshaller} should convert the {@link StreamException} to a generic Spring     * {@link UnmarshallingFailureException}.    *     * @throws Exception If an unexpected error occurs on execution of this test.    */   @Test(expected=UnmarshallingFailureException.class)   public final void testUnmarshalReader() throws Exception {     this.uut.unmarshal(new StreamSource(new StringReader("""")));   } } ```  ---  **Affects:** 3.1.1  **Sub-tasks:** - #14174 Backport XStreamMarshaller should convert XStream StreamException to Spring exception in case of unmarshalling an empty stream","closed","type: enhancement,","spring-projects-issues","2012-06-23T07:14:16Z","2019-01-11T13:08:02Z"
"","14168","Improve exception handling of @RequestMapping(produces=""..."", consumes=""..."") to support classifying invalid format media types as client errors [SPR-9534]","**[Neil Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=brownn)** opened **[SPR-9534](https://jira.spring.io/browse/SPR-9534?redirect=false)** and commented  If an invalid format (string without a ""/"") media type is specified in an Accept or Content-Type HTTP request header, or if the Content-Type header is not specified or empty, handler methods annotated with `@RequestMapping`(produces=""..."") or `@RequestMapping`(consumes=""..."") currently throw a very generic IllegalArgumentException:  e.g. for `@RequestMapping`(produces=""..."") - java.lang.IllegalArgumentException: ""foo"" does not contain '/' at org.springframework.http.MediaType.parseMediaType(MediaType.java: 648) at org.springframework.http.MediaType.parseMediaTypes(MediaType.java: 691) at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getAcceptedMediaTypes( ProducesRequestCondition.java: 214) at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.access$4( ProducesRequestCondition.java: 211) at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition$ProduceMediaTypeExpression. matchMediaType(ProducesRequestCondition.java: 283) at org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression.match( AbstractMediaTypeExpression.java: 63) at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getMatchingCondition( ProducesRequestCondition.java: 163) at org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition( RequestMappingInfo.java: 175) at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping( RequestMappingInfoHandlerMapping.java: 64) at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping( RequestMappingInfoHandlerMapping.java: 1) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.addMatchingMappings( AbstractHandlerMethodMapping.java: 284) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod( AbstractHandlerMethodMapping.java: 251) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal( AbstractHandlerMethodMapping.java: 216) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal( AbstractHandlerMethodMapping.java: 1) at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java: 288) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java: 1063)  e.g. for `@RequestMapping`(consumes=""..."") with an invalid format Content-Type header (e.g. ""foo"") - java.lang.IllegalArgumentException: ""foo"" does not contain '/' at org.springframework.http.MediaType.parseMediaType(MediaType.java: 648) at org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition$ConsumeMediaTypeExpression. matchMediaType(ConsumesRequestCondition.java: 215) at org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression.match( AbstractMediaTypeExpression.java: 63) at org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.getMatchingCondition( ConsumesRequestCondition.java: 165) at org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition( RequestMappingInfo.java: 174) at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping( RequestMappingInfoHandlerMapping.java: 64) at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping( RequestMappingInfoHandlerMapping.java: 1) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.addMatchingMappings( AbstractHandlerMethodMapping.java: 284) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod( AbstractHandlerMethodMapping.java: 251) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal( AbstractHandlerMethodMapping.java: 216) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal( AbstractHandlerMethodMapping.java: 1) at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java: 288) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java: 1063) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java: 1048)  e.g. for `@RequestMapping`(consumes=""..."") with a missing or empty Content-Type header - java.lang.IllegalArgumentException: 'mediaType' must not be empty at org.springframework.util.Assert.hasLength(Assert.java: 136) at org.springframework.http.MediaType.parseMediaType(MediaType.java: 638) at org.springframework.http.HttpHeaders.getContentType(HttpHeaders.java: 290) at org.springframework.http.server.ServletServerHttpRequest.getHeaders(ServletServerHttpRequest.java: 106) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver. readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java: 109) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver. readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java: 91) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument( RequestResponseBodyMethodProcessor.java: 71) at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument( HandlerMethodArgumentResolverComposite.java: 75) at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues( InvocableHandlerMethod.java: 156) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java: 117) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle( ServletInvocableHandlerMethod.java: 96) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod( RequestMappingHandlerAdapter.java: 617) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal( RequestMappingHandlerAdapter.java: 578) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle( AbstractHandlerMethodAdapter.java: 80) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java: 923)  This makes it very difficult for Spring MVC apps to classify this as a client originating error and return an appropriate HTTP response status code, e.g. 406 Not Acceptable, or 415 Unsupported Media Type.  Requests with invalid format media-types don't happen often, but they can occur for public APIs. Because the exception is thrown early in request dispatching, before the handler is mapped, you can't work around it by writing your own media-type validating interceptor.  Please could either MediaType.parseMediaType() be modified to throw a more specific class of exception (e.g. InvalidMediaTypeException), and/or the classes that use it (ProducesRequestCondition and ConsumesRequestCondition) be enhanced to wrap and re-throw the exception as an HttpMediaTypeNotAcceptableException or HttpMediaTypeNotSupportedException.  Thanks in advance. And thanks for all the recent and scheduled improvements to Spring MVC 3.x.   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-06-23T04:23:56Z","2019-01-11T13:08:06Z"
"","14411","Search bar animation in javadoc is distracting [SPR-9777]","**[Nathan Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=nlwillia)** opened **[SPR-9777](https://jira.spring.io/browse/SPR-9777?redirect=false)** and commented  The API reference documentation features a search bar at the bottom of the main content area that initially fills the width of the screen, but after a brief delay collapses to a minimized version in the lower right.  This animation occurs on every page refresh and becomes a needless distraction after the first time.  The problem is compounded by the fact that the search bar does not load inline with the rest of the page.  The delayed pop in followed by an animation adds up to a frustrating amount of peripheral visual noise.  It's calling out for attention without contributing anything the user really needs to know.  This behavior is particularly unwelcome in reference documentation where the developer is just trying to understand specifics of the API and not seeking further distraction.  The problem is mitigated somewhat by the fact that the user can forcibly expand the collapsed search bar which sets a cookie that will disable the collapse/animation for a while; but this behavior is something users must discover for themselves, and the bar still distracts by popping in asynchronously.  It also consumes screen real estate needlessly if it isn't being used.  It would be preferable if the floating search bar in its unpinned state would skip the animation after the first page view and render directly into the collapsed state.  This would reduce the asynchronous load concern by minimizing the area of the screen affected by the late addition.  The initial ad display is already suppressed after first view with a cookie, so similar behavior for the search bar display seems like it would be a simple change.   ---  **Affects:** 3.1.2  **Reference URL:** http://static.springsource.org/spring/docs/3.1.x/javadoc-api/  1 votes, 4 watchers","closed","","spring-projects-issues","2012-09-08T10:18:15Z","2019-01-11T13:36:24Z"
"","14615","Explicitly notify when a bean initialized using factory bean paradigm also implements FactoryBean [SPR-9981]","**[Mukarram Baig](https://jira.spring.io/secure/ViewProfile.jspa?name=kilokahn)** opened **[SPR-9981](https://jira.spring.io/browse/SPR-9981?redirect=false)** and commented  When upgrading from 3.1.0 to 3.1.1, we noticed that a few factory bean definitions using the static method paradigm started to fail with a org.springframework.beans.factory.BeanIsNotAFactoryException: Bean named 'fooFactoryBean' must be of type [org.springframework.beans.factory.FactoryBean], but was actually of type [com.kilo.SpecialObject]. On further inspection, it turned out that the class itself was also implementing FactoryBean and hence the container was getting confused. Leveraging on the FactoryBean approach alone or not implementing the FactoryBean interface alone also solved the problems and it made sense, since I cannot think of a reason why someone may want two ways of getting a bean from it. However, since it used to work fine (by fine I mean without throwing any errors) upto 3.1.0, maybe it is a good idea to detect such a bean definition and flag it explicitly so that the clients can fix their code easily. Attaching a sample maven project where we can see the error in action. I searched through the release notes of 3.1.1 where I could find the changed behavior.  Thanks in advance!   ---  **Affects:** 3.1.1  **Reference URL:** http://stackoverflow.com/questions/13309921/spring-factorybean-error-in-spring-3-1-1-but-not-in-3-1-0  **Attachments:** - [spring-factorybean-tester.7z](https://jira.spring.io/secure/attachment/20610/spring-factorybean-tester.7z) (_3.75 kB_)","closed","in: core,","spring-projects-issues","2012-11-11T19:51:36Z","2019-01-12T05:27:46Z"
"","14182","Avoid repeated attempts to load failing ApplicationContext in the TestContext framework [SPR-9548]","**[Mukarram Baig](https://jira.spring.io/secure/ViewProfile.jspa?name=kilokahn)** opened **[SPR-9548](https://jira.spring.io/browse/SPR-9548?redirect=false)** and commented  Lets say I have a test class called `ServiceTest` with three test methods `test1`, `test2`, and `test3`. All three methods use some resources which are provided by Spring. In the current state of affairs, if there is a problem with the loading of the spring context, the context load is retried for each test method.  Is there a way that I can have it aborted on the first failure itself with existing hook-ins?  There might be good reasons behind it - but I fail to appreciate it. Any pointers would be helpful.  The real problem is that the context load takes a few minutes, and it is useless to keep reattempting to load the context if it has already failed for the first time and only seeks to prolong the time that the CI server takes to report failures.  I was thinking of having an `attemptMap` in `ContextCache` that the `TestContext` modifies when it encounters a failed `ApplicationContext`. A repeated load will be (on an opt-in flag set) disallowed via an exception. I have attached a rudimentary patch to indicate what I meant. Sorry that I haven't tested it (don't have gradle installed or an IDE plugin that can do it for me - am still a maven boy :))   ---  **Affects:** 3.1 GA  **Reference URL:** http://stackoverflow.com/questions/11202535/ability-to-avoid-repeated-load-of-application-context-in-spring-testcontext-via  **Attachments:** - [spring-test.patch](https://jira.spring.io/secure/attachment/20002/spring-test.patch) (_3.72 kB_)  6 votes, 8 watchers","open","type: enhancement,","spring-projects-issues","2012-06-27T04:10:28Z","2022-07-14T13:35:58Z"
"","14070","Support multiple @RequestBody [SPR-9434]","**[Moshe Elisha](https://jira.spring.io/secure/ViewProfile.jspa?name=mosheelisha)** opened **[SPR-9434](https://jira.spring.io/browse/SPR-9434?redirect=false)** and commented  Please add support for multiple parameters annotated with `@RequestBody` in a `@RequestMapping` method.  ``` @RequestMapping(value = ""/create"") public void create(@RequestBody requestBody, @RequestBody MyJsonObject myJsonObject) throws Exception {            // ... } ```  I want my request body as a JSON object but I must have it as string as the authentication mechanism (AuthHMAC) requires me to MD5 the body and use it to the calculate the authorization signature.  My workaround is to receive the request body only as String and convert it to JSON myself.  I know that the request input stream can be read once. I think it is OK to assume that if someone uses multiple `@RequestBody` annotations he knows that the response is read once into a temporary location and than converted into the multiple parameters.    ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-05-24T05:30:09Z","2012-05-29T08:57:19Z"
"","13847","AnnoationMethodHandlerExceptionResolver identifies wrong exception handler [SPR-9209]","**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[SPR-9209](https://jira.spring.io/browse/SPR-9209?redirect=false)** and commented  Opening this issue as a response to Rossen's comment in  #12638:  We keep seeing exceptions in the logs seemingly caused by the AnnoationMethodHandlerExceptionResolver. Here's a snapshot from the logs  ``` [DEBUG] [2012.02.27 11:15:19] (T0tXt1BbKEcAAD4WCUcAAAAP) Resolving exception from handler [com.mycompany.FooController@36be9ce9]: java.lang.NullPointerException []  at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:132) [ERROR] [2012.02.27 11:15:19] (T0tXt1BbKEcAAD4WCUcAAAAP) Invoking request method resulted in exception : public java.lang.String com.mycompany.AbstractFooController.handleMissingRequestParameterException(org.springframework.web.bind.MissingServletRequestParameterException,javax.servlet.http.HttpServletRequest) []  at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.doResolveException(AnnotationMethodHandlerExceptionResolver.java:143) java.lang.IllegalStateException: Unsupported argument [org.springframework.web.bind.MissingServletRequestParameterException] for @ExceptionHandler method: public java.lang.String com.mycompany.AbstractFooController.handleMissingRequestParameterException(org.springframework.web.bind.MissingServletRequestParameterException,javax.servlet.http.HttpServletRequest) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.resolveHandlerArguments(AnnotationMethodHandlerExceptionResolver.java:264) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.doResolveException(AnnotationMethodHandlerExceptionResolver.java:135) at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:136) at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1120) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:944) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) ```  The first debug statement is from the same request as the next log statement (the ERROR). So, a NPE is the cause. We have a `@ExceptionHandler` method specified to handle MissingServletRequestParameterException. This should not be invoked, but seems to be invoked for some reason. The ERROR-log statement is saying that XX is a Unsupported argument for a method taking XX. There seem to be something seriously wrong with the matching algorithme. I haven't been able to pin-point what it is though, as I haven't been able to reproduce in a controlled environment (it is typically seen between 1 and 10 times each day in the production logs). This fact alone makes me suspect that it stems from a concurrency issue, one has already been identified in #13777  ---  **Affects:** 3.1.2  **Issue Links:** - #12638 `@ExceptionHandler` complains about unsupported argument for argument that is supported  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/d6405adcc75240b858d16b18d01ddc8ac7d1ce91, https://github.com/spring-projects/spring-framework-issues/commit/1bedd7ca0842c6401ecd937aff43d133b8a58336  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2012-03-08T06:26:54Z","2019-01-13T07:05:52Z"
"","14270","@Required Annotation does not work in annotation only configuration [SPR-9636]","**[moonumi](https://jira.spring.io/secure/ViewProfile.jspa?name=numi)** opened **[SPR-9636](https://jira.spring.io/browse/SPR-9636?redirect=false)** and commented  `@Require` annotation does not work in only Annotation base configuration environment.(AppConfig.class style)  08:27:55,493 DEBUG main support.DefaultListableBeanFactory:245 - Returning cached instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' 08:27:55,493 DEBUG main support.DefaultListableBeanFactory:245 - Returning cached instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor' 08:27:55,493 DEBUG main support.DefaultListableBeanFactory:245 - Returning cached instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor' 08:27:55,494 DEBUG main support.DefaultListableBeanFactory:245 - Returning cached instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'  `@Required` annotation not work.  but `@Autowired` annotation work fine.  I do attach my testProject that Intellij project (v11.1.2)  it's My mistake?    ---  **Affects:** 3.1.2  **Attachments:** - [beanFactory.zip](https://jira.spring.io/secure/attachment/20128/beanFactory.zip) (_7.16 kB_)","closed","in: core,","spring-projects-issues","2012-07-25T16:48:48Z","2019-01-12T05:28:20Z"
"","14540","UnexecptedRollbackException: setGlobalRollbackOnParticipationFailure should be documented in Transaction chapter of Spring reference [SPR-9907]","**[Mitsu Hadeishi](https://jira.spring.io/secure/ViewProfile.jspa?name=syntheticzero)** opened **[SPR-9907](https://jira.spring.io/browse/SPR-9907?redirect=false)** and commented  In reference to #8135, I believe the discussion in the ticket is incomplete, and the documentation in the Transaction chapter is incomplete.  The standard way Spring handles transactions is that a `@Transactional` annotation causes a ""logical transaction"" to be set up, even if the propagation mode is set to PROPAGATION_REQUIRED. This is based on the assumption that every `@Transactional` annotation is designed to wrap around a carefully-selected unit of work, and a RuntimeException getting thrown inside an inner transaction boundary should cause the entire surrounding transaction to roll back.  However, there are many reasons why a developer might not want these semantics. For example, you may have a layer with many points of entry; let's say one of them is Method A and the other is Method B. Let's say a controller may call either Method A or Method B, directly, and both of them are wrapped in `@Transactional` annotations, with PROPAGATION_REQUIRED, but Method A also calls Method B as part of a longer, multi-step process. Let's additionally say that Method A ""knows"" that it is okay with a catastrophic failure of Method B, where a RuntimeException was thrown, and the developer decides to catch specific unchecked exceptions, to do something appropriate (log, warn the user, etc.), but does not want to totally shut down all processing --- but instead wants to proceed with additional steps, to improve the robustness of the overall process.  Using the default semantics, the only way to do this is to change the `@Transactional` annotation on Method B so it doesn't roll back on RuntimeException. However, this means that EVERY caller of Method B will lose that default behavior; so if a controller called Method B and it fails with a RuntimeException, it won't roll back the transaction as expected.  The problem here is that this violates the usual expected behavior of exception handling, which is that the caller gets to decide whether they want to catch and swallow or log or otherwise handle an exception, but this doesn't change what happens for every other client of the called service. You are forced to choose whether to remove the safety valve for all clients of the method in question, or to do something awkward like pass in a parameter to the method so it can decide what to do on a RuntimeException, and so forth (provided you have access to the source code for that class).  An alternate policy would be to let the calling context decide. If the calling context wants to roll back on RuntimeExceptions, it can do so, or it can catch the exception and handle it. After Googling on this issue I discovered that Juergen had added a flag to the transaction manager, setGlobalRollbackOnParticipationFailure, to allow for this very policy change. This flag, it seems to me, is rather important. It ought to be made available to programmers to decide what policy suits their application design best.  For applications where all the transactional pieces are carefully designed to be true units of work, the default behavior may make sense. But there may be applications where you want more blanket protection for every public method of a service layer facade, without worrying too much about the exact boundaries of the transaction layers, and you expect PROPAGATION_REQUIRED to literally do nothing in the event that there is already a transaction present (rather than to create a ""virtual"" transaction context). Since this interface already exists, I believe the documentation ought to be updated to make reference to it.  ---  **Affects:** 3.2 M2  **Reference URL:** https://jira.springsource.org/browse/SPR-3452","closed","status: bulk-closed,","spring-projects-issues","2012-10-22T10:07:54Z","2019-01-12T00:25:48Z"
"","13871","Reduce log level for message re: missing annotation [SPR-9233]","**[Minas Manthos](https://jira.spring.io/secure/ViewProfile.jspa?name=manthos)** opened **[SPR-9233](https://jira.spring.io/browse/SPR-9233?redirect=false)** and commented  Since 3.1.1 the AbstractRecursiveAnnotationVisitor logs a warning when annotation class could not be loaded (see AbstractRecursiveAnnotationVisitor#logNonFatalException). Until 3.1.0 any Exception was catched without any message. I agree to log this but IMO this should be a debug log message. Annotations (even if RetentionPolicy.RUNTIME) may or may not be available at run-time. See also Java Language Specification:  > 9.6.1.2 Retention >  > Annotations may be present only in the source code, or they may be present in the binary form of a class or interface. **An annotation that is present in the binary may or may not be available at run-time via the reflective libraries of the Java platform.** > ...  So there is nothing wrong about getting a ClassNotFoundException regarding annotations.  I suggest to change the log level to debug or (IMO better) to catch ClassNotFoundException -> logger.debug(...) because it's legitimate and any other Exception -> logger.warn(...).  Background: We currently use jsr305 with `@javax`.annotation.Nonnull and `@javax`.annotation.Nullable doing some code analyses during builds. At run-time these annotations are no longer available/needed and we get tons of warnings ??""Failed to classload type while reading annotation metadata. This is a non-fatal error, but certain annotation metadata may be unavailable.""??. Of course, it's not a problem to workaround this: we can include jsr305 or change log level in config of this logger but IMO I should not get a warning when everything is like expected and JLS-compliant.  ---  **Affects:** 3.1.1  **Sub-tasks:** - #14082 Backport ""Reduce log level for message re: missing annotation""  **Issue Links:** - #13670 `@ComponentScan` with includeFilters on `@Import-ed` context does not work  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c25a1bcb606392266de172f360ac5d33c88f3f00, https://github.com/spring-projects/spring-framework/commit/f55a4a1ac5a202f00dc427ba0f94d5123ec7b2de  6 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-13T06:55:12Z","2019-01-13T07:05:45Z"
"","14370","petclinic; deletePet method in EditPetForm should not throw ObjectRetrievalFailureException [SPR-9736]","**[Milos Gligoric](https://jira.spring.io/secure/ViewProfile.jspa?name=milos.gligoric)** opened **[SPR-9736](https://jira.spring.io/browse/SPR-9736?redirect=false)** and commented  deletePet method can be invoked concurrently by multiple users/threads with the same argument/pet.  In this case no user should see ObjectRetrievalFailureException, which is what happens in the current version.  In the attached class there are two test cases.  First, originally constructed to closely mimic actual use of the application (can be repeated in browsers), runs two threads that try to remove the same pet.  Note that only certain schedules may lead to the exception.  Second test case is simply invocation of deletePet twice with the same argument, which leads to the exception, but it looks less like actually use case.   ---  **Attachments:** - [SimpleJdbcClinicTests.java](https://jira.spring.io/secure/attachment/20388/SimpleJdbcClinicTests.java) (_2.32 kB_)","closed","status: invalid,","spring-projects-issues","2012-08-28T13:11:46Z","2019-01-12T05:28:08Z"
"","13879","BeanWrapperImpl could handle autogrowing for Sets [SPR-9241]","**[Milano Gadelha Carvalho](https://jira.spring.io/secure/ViewProfile.jspa?name=milanogc)** opened **[SPR-9241](https://jira.spring.io/browse/SPR-9241?redirect=false)** and commented  It is easy to do so, instead of throwing an exception, call growCollectionIfNecessary, as it is done for Lists. I wonder why this is not implemented this way... Performance?   --- No further details from [SPR-9241](https://jira.spring.io/browse/SPR-9241?redirect=false)","closed","in: core,","spring-projects-issues","2012-03-14T14:40:58Z","2019-01-12T05:28:54Z"
"","13960","Inconsistent dependency injection of proxied bean [SPR-9322]","**[Milan Skuhra](https://jira.spring.io/secure/ViewProfile.jspa?name=profiprog)** opened **[SPR-9322](https://jira.spring.io/browse/SPR-9322?redirect=false)** and commented  I tried to inject collection of beans (services) twice, into two beans (registers); and every register has injected different count of services. Proxied bean was missing in second injection. It happend when first injection occurs and injecting proxied bean isn't created yet.  I debug it and found that method org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(..) has critical role in decision process if proxied bean will be injected or not. If first injection occurs and proxied bean is not created yet, then method isTypeMatch(..) check injection suitability according to bean definition. Of course the proxied bean must be created to complete injection but apparently nothing check if type criteria is still matching after creation. When second injection occurs instance is already available and method isTypeMatch(..) check injection suitability according to instance - because it's a proxy it can return different result (as was in my case).  I attached simple project with one test case where this specific case is simulated. Of course there are many possibilities to fix it, but when somebody else accidentally configure something like this, it can be really hard to find where is the problem.  I suggest to duplicate condition (about suitability of bean to be injected) also after its creation. If condition changes, exclude it from candidates and log some warning message.   ---  **Affects:** 3.1.1  **Attachments:** - [dependency-feature.tgz](https://jira.spring.io/secure/attachment/19578/dependency-feature.tgz) (_3.34 kB_)  2 votes, 2 watchers","closed","status: invalid,","spring-projects-issues","2012-04-11T14:29:52Z","2019-01-12T05:28:45Z"
"","14353","TypeUtils.isAssignable does not recognize TypeVariable types [SPR-9719]","**[Mikołaj Gierulski](https://jira.spring.io/secure/ViewProfile.jspa?name=moia)** opened **[SPR-9719](https://jira.spring.io/browse/SPR-9719?redirect=false)** and commented  TypeUtils does not pass the following test, but I think it should:  ``` import java.io.Serializable; import java.lang.reflect.Method; import java.lang.reflect.Type;  import org.junit.Assert; import org.junit.Test; import org.springframework.util.TypeUtils;  public class GenericTest {     private  void typeTestMethod(T arg) {}          @Test     public void shouldRecognizeVariableType() throws NoSuchMethodException, SecurityException {         Method[] declaredMethods = GenericTest.class.getDeclaredMethods();         Method testMethod = GenericTest.class.getDeclaredMethod(""typeTestMethod"", Serializable.class);         Type[] paramTypes = testMethod.getGenericParameterTypes();         Assert.assertTrue(""TypeUtils does not work properly for TypeVariables"", TypeUtils.isAssignable(Serializable.class, paramTypes[0]));     }     } ```  It seems that TypeUtils.isAssignable does not recognize TypeVariable types, only ParameterizedType.  Best regards, Mikolaj   ---  **Affects:** 3.1.1  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-08-23T13:05:32Z","2019-01-12T03:47:37Z"
"","14521","Improved support for 'containerless' web application architectures [SPR-9888]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-9888](https://jira.spring.io/browse/SPR-9888?redirect=false)** and commented  As the enterprise development landscape grows more diverse the simpler the application framework the more likely developers are to adopt the framework.  Developers with existing knowledge of previously common frameworks like the Servlet container are becoming more rare.  Spring's dependence on frameworks and containers outside of Spring's component model increases the learning curve of new developers attempting to create and maintain spring web applications.  Traditionally Spring web applications have been embedded in a servlet container.  This was useful in the past when the majority of enterprise applications ran in and depended on the servlet container for deployment and configuration.  However, a servlet container comes with learning curve that we cannot assume new developers will have already overcome.  The learning curve includes things such as: * web.xml and other Servlet oriented configuration concepts * .war directory structure * Container implementation specific items (e.g. ports, thread pools, etc.) * Complex Classloading hierarchies * Monitoring and management facilities configured outside of the application * Logging facilities * Configuration of application context roots * So forth  All of the above items are configured in inconsistent non-unified ways requiring a development team to learn these for the container their using in addition to Spring's own configuration model.  I think that Spring's web application architecture can be significantly simplified if it were to provided tools and a reference architecture that leveraged the Spring component and configuration model from top to bottom.  Embedding and unifying the configuration of those common web container services within a Spring Container bootstrapped from a simple main() method.  Though there are many frameworks and platforms today that no longer require a container I think inspiration can be drawn most from DropWizard  (http://dropwizard.codahale.com/).  Another project I've seen inspired by DropWizard but leveraging Spring is HalfPipe (https://github.com/32degrees/halfpipe).  Though I don't think HalfPipe goes far enough.  I think to truly provide simplification the entire architecture, wherever reasonable, must be embedded within the Spring container rather than without.  Though it does have several other interesting ideas.  I believe that a Spring driven containerless web application architecture could provide benefits like: * Provide a single unified component model requiring no knowledge of the Servlet Component models. * Unified configuration of everything allowing developers to only have to learn one Spring configuration model for both component and app configuration. * Execution from a void main will simplify application startup and shutdown. * A much simpler pure java classloading hierarchy. * Simpler development tooling.  Instead of needing a complex IDE to construct a war and deploy it to a dev container simply execute the applications Main class.  For such an architecture to be successful this architecture will also need new and simple ways to configure common Spring tools, such as Spring MVC and Spring Security, that have traditionally been configured through the servlet container.  To accomplish this simplification I don't think Spring would need to create a brand new http engine.  It could simply utilize an embedded servlet container like Jetty.  Though it would need to abstract away as much configuration as possible.  I think a reference app would also be unnecessary to set an example of how to structure, develop and configure such an application in a pure spring manner.  ---  **Sub-tasks:** - #15014 Support embedded servlet containers  **Issue Links:** - #14522 Add Grails like BootStrap functionality  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2012-10-17T19:43:35Z","2019-01-11T13:21:55Z"
"","14024","Regression: javax.inject.Provider resolution too agressive [SPR-9388]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-9388](https://jira.spring.io/browse/SPR-9388?redirect=false)** and commented  It appears something changed between 3.1.0 and 3.1.1 with regards to Provider resolution.  * I have a request scoped bean injected into a singleton using a Provider. * When multiple instance of my singleton are created I get the exception below.  This code works fine in 3.1.0.Final.  Fails when I upgrade to 3.1.1.  I've included a test case based on the STS MVC project template.  To duplicate: 1. Import project into STS 2. Deploy with Tomcat 7. 3. Notice Error. 4. Change spring version in pom.xml to 3.1.0 5. Restart.  Notice No Error.  ``` ERROR: org.springframework.web.servlet.DispatcherServlet - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'someSingleton2': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: javax.inject.Provider com.test.provider.SomeSingleton.someRequestBean; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'someRequestBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request. 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:287) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:631) 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:588) 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645) 	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508) 	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449) 	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133) 	at javax.servlet.GenericServlet.init(GenericServlet.java:160) 	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1266) 	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1185) 	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1080) 	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:5015) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5302) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	at org.apache.catalina.core.StandardContext.reload(StandardContext.java:3908) 	at org.apache.catalina.loader.WebappLoader.backgroundProcess(WebappLoader.java:426) 	at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1350) 	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1537) 	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1547) 	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1547) 	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1526) 	at java.lang.Thread.run(Thread.java:722) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: javax.inject.Provider com.test.provider.SomeSingleton.someRequestBean; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'someRequestBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request. 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:506) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:284) 	... 31 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'someRequestBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request. 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:342) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:848) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:790) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:707) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.resolvedCachedArgument(AutowiredAnnotationBeanPostProcessor.java:439) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.access$0(AutowiredAnnotationBeanPostProcessor.java:435) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:472) 	... 33 more Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request. 	at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131) 	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:40) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:328) 	... 40 more ```  ---  **Affects:** 3.1.1  **Attachments:** - [testRequestProvider.zip](https://jira.spring.io/secure/attachment/19643/testRequestProvider.zip) (_6.92 kB_)  **Issue Links:** - #13819 `@Inject` Provider or `@Autowired` ObjectFactory issue with session scoped bean (_**""duplicates""**_)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2012-05-08T16:36:49Z","2019-01-13T07:04:48Z"
"","14611","Possibility to disable WebApplicationInitializer [SPR-9977]","**[Mike Wiesner](https://jira.spring.io/secure/ViewProfile.jspa?name=mikewiesner)** opened **[SPR-9977](https://jira.spring.io/browse/SPR-9977?redirect=false)** and commented  In a Servlet 3.0 environment, there is no possibility to disable the ServletContainerInitializer and therefore also no way to disable the Spring WebApplicationInitializer.  The metadata-complete flag in the web.xml has no effect, as this only disables the scanning for annotated classes, but the container will still inspect the META-INF directories for ServletContainerInitializer declarations.  This means, that everyone who has the spring-web.jar in his classpath will trigger a probably unneeded scanning of the whole classpath. And there is no easy way to disable it.  One workaround right now, is to use the 2.5 Schema in the web.xml, which will disable the SCIs.  There should be a way to disable that scanning. I already discussed that shortly during the W-JAX conference with Juergen.  ---  **Affects:** 3.1.3, 3.2 RC1  **Issue Links:** - #14829 SpringServletContainerInitializer do annotation scan even if metadata-complete=""true"" in web.xml (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2012-11-08T08:57:22Z","2019-01-11T14:21:24Z"
"","14380","@Transactional(readOnly = true, noRollbackFor = ...) doesn't get along  [SPR-9746]","**[MIhalcea Vlad](https://jira.spring.io/secure/ViewProfile.jspa?name=mih_vlad)** opened **[SPR-9746](https://jira.spring.io/browse/SPR-9746?redirect=false)** and commented  It seems that those two attributes don't get along to well, since noRollBackFor will be ignored, and the current transaction will be rollback anyway, if we also have the readOnly=true flag too.  The current workaround is to remove the readOnly flag.   ---  **Affects:** 3.1.1","closed","","spring-projects-issues","2012-09-03T00:00:03Z","2019-01-11T13:33:48Z"
"","14169","@ComponentScan don't work in console application [SPR-9535]","**[Miguel Goncalves](https://jira.spring.io/secure/ViewProfile.jspa?name=mgvv)** opened **[SPR-9535](https://jira.spring.io/browse/SPR-9535?redirect=false)** and commented  Project work's in Eclipse, but don't work in command line.  Stack trace:  Jun 23, 2012 1:49:00 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh INFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@670655dd: startup date [Sat Jun 23 13:49:00 WEST 2012]; root of context hierarchy Jun 23, 2012 1:49:00 PM org.springframework.core.io.support.PathMatchingResourcePatternResolver doFindPathMatchingFileResources WARNING: Cannot search for matching files underneath URL [rsrc:tests/] because it does not correspond to a directory in the file system java.io.FileNotFoundException: URL [rsrc:tests/] cannot be resolved to absolute file path because it does not reside in the file system: rsrc:tests/ at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:205) at org.springframework.core.io.AbstractFileResolvingResource.getFile(AbstractFileResolvingResource.java:52) at org.springframework.core.io.UrlResource.getFile(UrlResource.java:169) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingFileResources(PathMatchingResourcePatternResolver.java:526) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:347) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:266) at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:1245) at org.springframework.context.support.GenericApplicationContext.getResources(GenericApplicationContext.java:226) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:228) at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:242) at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:124) at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:214) at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:149) at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:135) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:260) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:203) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:617) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:446) at org.springframework.context.annotation.AnnotationConfigApplicationContext.\(AnnotationConfigApplicationContext.java:73) at tests.controller.MainCtrl.main(MainCtrl.java:20) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58) Jun 23, 2012 1:49:00 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1d2940b3: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,springConfig,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0]; root of factory hierarchy Exception in thread ""main"" java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58) Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [tests.controller.MainCtrl] is defined: expected single bean but found 0: at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:271) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1101) at tests.controller.MainCtrl.main(MainCtrl.java:23) ... 5 more   ---  **Affects:** 3.1.1  **Attachments:** - [componentscan.jar](https://jira.spring.io/secure/attachment/19888/componentscan.jar) (_3.98 kB_)","closed","in: core,","spring-projects-issues","2012-06-23T05:54:46Z","2019-01-11T13:07:58Z"
"","14621","Cannot create session scoped hibernate interceptors in Hibernate4 [SPR-9987]","**[Miguel Almeida](https://jira.spring.io/secure/ViewProfile.jspa?name=mmalmeida)** opened **[SPR-9987](https://jira.spring.io/browse/SPR-9987?redirect=false)** and commented  Hibernate can be attached to the SessionFactory (if they're stateless) or to the Session (see http://docs.jboss.org/hibernate/orm/4.0/manual/en-US/html/events.html)  In hibernate 3 the way to attach an interceptor to the session is by declaring it at the transaction level:           	     	       However, in class org.springframework.orm.hibernate4.HibernateTransactionManager the entityInterceptor property does not exist, making it impossible to use a state interceptor.    ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?122268-How-to-configure-EntityInterceptor-for-Hibernate-4  2 votes, 7 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-11-13T08:54:15Z","2019-01-12T00:25:34Z"
"","14564","Provide a way to disable nested resolution of property placeholders [SPR-9931]","**[Mickaël LEDUQUE](https://jira.spring.io/secure/ViewProfile.jspa?name=mleduque)** opened **[SPR-9931](https://jira.spring.io/browse/SPR-9931?redirect=false)** and commented  There should be a way to use `` to bind a value without trying to evaluate nested values.  For example, I'd like to bind a value that contains a `MessageFormat` pattern like this one:  ``` my.property={0}#{1} ```  (very simple case that shows the problem)  This `#` is a **separator** between the first argument `{0}` and the second one, `{1}`. Of course, `#{1}` have no value in my context.  Then, I do :  ```xml         ```  I need the property evaluation to not to try to be smart and just replace `${my.property}` with it's value.  Instead it blows up, replacing `#{1}` by its value `""""`.  ---  **Affects:** 3.1.2","closed","type: enhancement,","spring-projects-issues","2012-10-30T06:32:12Z","2019-01-13T21:05:16Z"
"","13877","@RequestBody should have a required parameter to allow a request body to be optional [SPR-9239]","**[Michel Zanini](https://jira.spring.io/secure/ViewProfile.jspa?name=michelz)** opened **[SPR-9239](https://jira.spring.io/browse/SPR-9239?redirect=false)** and commented  `@RequestBody` should have a required parameter to allow a request body to be optional, if the body is empty my object is null, otherwise it is parsed using a http message converter.  At the moment I am using a Jackson (JSON) converter and if I use it as bellow:  `@RequestMapping`(method = RequestMethod.POST, value = ""/url"") public String method(`@RequestBody` MyBody myBody) { ... }  Then, if I send an empty body it will throw an java.io.EOFException. In this case I would like to receive null in myBody and execute my method anyway.  This issue maybe related to https://jira.springsource.org/browse/SPR-9238.  ---  **Affects:** 3.1.1  **Issue Links:** - #16447 Contract of `@RequestBody`(required=true) not obeyed - #13876 JSON (jackson) `@RequestBody` marshalling throws java.io.EOFException when body is missing - #14575 HttpMessageNotReadableException when `@RequestBody`(required=false) - #19574 Support for java.util.Optional as a `@RequestBody`  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/208a6cbb5e878306c6c0b30e2d6d8d2b5ae061d0  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-14T13:04:17Z","2019-01-13T07:05:40Z"
"","13876","JSON (jackson) @RequestBody marshalling throws java.io.EOFException when body is missing [SPR-9238]","**[Michel Zanini](https://jira.spring.io/secure/ViewProfile.jspa?name=michelz)** opened **[SPR-9238](https://jira.spring.io/browse/SPR-9238?redirect=false)** and commented  In the case that the message body is missing a java.io.EOFException is thrown. An org.springframework.http.converter.HttpMessageNotReadableException is more appropriate in this case.  This issue is related to: https://jira.springsource.org/browse/SPR-7439  ---  **Affects:** 3.1.1  **Sub-tasks:** - #14033 Backport ""JSON (jackson) `@RequestBody` marshalling throws java.io.EOFException when body is missing""  **Issue Links:** - #13877 `@RequestBody` should have a required parameter to allow a request body to be optional - #12097 JSON (jackson) `@RequestBody` marshalling throws awkward exception","closed","type: bug,","spring-projects-issues","2012-03-14T12:56:16Z","2019-01-13T07:05:42Z"
"","13875","Map ""no default value for field"" MySQL error code to DataIntegrityViolationException [SPR-9237]","**[Michel Zanini](https://jira.spring.io/secure/ViewProfile.jspa?name=michelz)** opened **[SPR-9237](https://jira.spring.io/browse/SPR-9237?redirect=false)** and commented  As it can be seen in MySQL documentation (http://dev.mysql.com/doc/refman/5.5/en/error-messages-server.html) the error code 1364 (ER_NO_DEFAULT_FOR_FIELD) can be mapped to DataIntegrityViolationException.  This error will occur if you try to execute an insert SQL without defining a value for a non-null column (that has no default value). This is not in sql-error-codes.xml so it is trowing UncategorizedSQLException. Please add it to sql-error-codes.xml as DataIntegrityViolationException.   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0dcc0f2227c2c5442124c7b58d17bcfa993821b5","closed","type: enhancement,","spring-projects-issues","2012-03-14T12:30:16Z","2013-01-23T05:32:46Z"
"","13874","SimpleJdbcInsert does not quote table and column names [SPR-9236]","**[Michel Zanini](https://jira.spring.io/secure/ViewProfile.jspa?name=michelz)** opened **[SPR-9236](https://jira.spring.io/browse/SPR-9236?redirect=false)** and commented  If you have table or column names that are reserved SQL words, like ""varchar"", ""values"", ""integer"", etc... the generated insert SQL must have escaping.  For example, now `SimpleJdbcInsert` is generating this SQL:  ```sql INSERT INTO crud (text, integer, char, datetime, decimal, varchar) VALUES(?, ?, ?, ?, ?, ?) ```  but it should be generating this:  ```sql INSERT INTO `crud` (`text`, `integer`, `char`, `datetime`, `decimal`, `varchar`) VALUES(?, ?, ?, ?, ?, ?) ```  As a workaround I am able to make it work adding the escape char ""`"" to the column names like this:  ```java simpleJdbcInsert.withTableName(""`"" + tableName + ""`""); simpleJdbcInsert.usingColumns(""`"" + column1 + ""`"", ""`"" + column2 + ""`"", ""`"" + column3 + ""`""); ```  but I believe `SimpleJdbcInsert` should support this out of the box. For example, it could have a boolean property like this:  ```java simpleJdbcInsert.withTableName(tableName); simpleJdbcInsert.usingColumns(column1, column2, column3); simpleJdbcInsert.usingEscaping(true); ```  and then `SimpleJdbcInsert` would do the escaping for me.   ---  **Affects:** 3.1.1  4 votes, 6 watchers","open","type: enhancement,","spring-projects-issues","2012-03-14T12:21:34Z","2019-04-14T10:31:51Z"
"","13873","Deprecate SimpleJdbcTestUtils in favor of JdbcTestUtils [SPR-9235]","**[Michel Zanini](https://jira.spring.io/secure/ViewProfile.jspa?name=michelz)** opened **[SPR-9235](https://jira.spring.io/browse/SPR-9235?redirect=false)** and commented  #### Overview  Since `SimpleJdbcTemplate` is now deprecated, `SimpleJdbcTestUtils` should also be deprecated, and its methods could be moved to `JdbcTestUtils`, changing them to use `JdbcTemplate` instead.  #### Proposed Solution  The file attached is a patch where I did this. Also, I added two methods that are very useful for database testing:  - `dropTables()`: this method is similar to `deleteFromTables()` but instead of removing all rows, it will drop the tables. - `countRowsInTable()`: `countRowsInTable()` already exists, but I added this overloaded method that takes a `whereClause` to augment the query.  ---  **Affects:** 3.1.1  **Attachments:** - [JdbcTestUtils.java](https://jira.spring.io/secure/attachment/19513/JdbcTestUtils.java) (_9.91 kB_)  **Sub-tasks:** - #14298 Backport ""Deprecate SimpleJdbcTestUtils in favor of JdbcTestUtils""  **Issue Links:** - #14299 Introduce countRowsInTableWhere() and dropTables() in abstract transactional base classes in the TestContext framework (_**""is depended on by""**_) - #13630 Provide JdbcTemplate in abstract transactional base classes in the TestContext framework (_**""is depended on by""**_) - #14227 JdbcTestUtils should not interpret comments as a separate statement - #13983 Reference Guide still recommends SimpleJdbcTemplate, which is now deprecated - #11587 Deprecate SimpleJdbcTemplate in favor of JdbcTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d7fd70fa08704550bd46d359e96608e265925f8f, https://github.com/spring-projects/spring-framework/commit/a7d43773e870fc7bf4106d34f42e8f3c0337b7b7, https://github.com/spring-projects/spring-framework/commit/bd0c4b4d9974b4a54f4ebc79d1f419f46a1e5b2a  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-14T12:12:02Z","2019-01-11T12:44:02Z"
"","14392","An implementation of AbstractJaxb2HttpMessageConverter that can work with EclipseLink MOXy external binding definitions [SPR-9758]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-9758](https://jira.spring.io/browse/SPR-9758?redirect=false)** and commented  EclipseLink MOXy supports defining the bindings in an external definitions file instead of using annotations. The currently available Jaxb2RootElementHttpMessageConverter cannot be used when this feature is used, for two reasons: 1. the JAXB context is created by the converter using the JAXBContext.newInstance(Class...) method. To use the external definition files with MOXy a context property must be specified using the newInstance variant taking a map; 2. the converter decides if it can read/write an object by looking for an `@XmlRootElement` annotation, which will be absent for bindings defined completely externally.  A variant of the converter that eg. lets the user provide ready JAXB contexts for certain classes and assumes these classes are thus supported no matter what the annotations say could solve both problems.  ---  **Affects:** 3.1 GA  **Issue Links:** - #14391 Allow Jaxb2Marshaller to work with EclipseLink MOXy when using external binding definitions","closed","type: enhancement,","spring-projects-issues","2012-09-05T02:52:43Z","2019-01-11T13:33:06Z"
"","14391","Allow Jaxb2Marshaller to work with EclipseLink MOXy when using external binding definitions [SPR-9757]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-9757](https://jira.spring.io/browse/SPR-9757?redirect=false)** and commented  EclipseLink MOXy supports defining the bindings in an external definitions file instead of using annotations. Currently the Jaxb2Marshaller cannot be used to marshal objects when the binding is defined completely externally, because it checks for the `@XmlRootElement` annotation. It would be useful to support this case in Jaxb2Marshaller or possibly a separate marshaller.  ---  **Affects:** 3.1 GA  **Issue Links:** - #14392 An implementation of AbstractJaxb2HttpMessageConverter that can work with EclipseLink MOXy external binding definitions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/682b0f2c63791f2cfe2aa0fd2978f11d97ea545b, https://github.com/spring-projects/spring-framework/commit/bd018fc9d7f872d1dde46ee528cc2742216ae428","closed","type: enhancement,","spring-projects-issues","2012-09-05T02:10:23Z","2019-01-11T13:32:59Z"
"","14332","Support autowiring in SpringBeanJobFactory  [SPR-9698]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-9698](https://jira.spring.io/browse/SPR-9698?redirect=false)** and commented  It would be useful if SpringBeanJobFactory optionally allowed injection of `@Autowired` properties from the application context in the created Job bean.   ---  **Affects:** 3.1 GA  2 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-08-17T07:17:31Z","2019-01-12T02:46:41Z"
"","14406","@Scheduled  randomDelay [SPR-9772]","**[Michał Minicki](https://jira.spring.io/secure/ViewProfile.jspa?name=martel)** opened **[SPR-9772](https://jira.spring.io/browse/SPR-9772?redirect=false)** and commented  Would be great if scheduling (or in fact `@Scheduled` annotation) would support random delay as an alternative to fixedDelay to reduce contention in case of multiple servers hitting the same data source:  ``` public @interface Scheduled {  	/** 	 * Execute the annotated method with a fixed period between the end 	 * of the last invocation and the start of the next. 	 * @return the delay in milliseconds 	 */ 	long fixedDelay() default -1;  	/** 	 * Execute the annotated method with a random period between the end 	 * of the last invocation and the start of the next. 	 * @return maximum delay in milliseconds 	 */ 	long randomDelay() default -1;  } ```    ---  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-09-07T02:41:15Z","2018-12-28T10:07:02Z"
"","14001","AutowiredAnnotationBeanPostProcessor.determineRequiredStatus(Annotation) throws NullPointerException if method wasnt found. [SPR-9364]","**[Michal Troicki](https://jira.spring.io/secure/ViewProfile.jspa?name=michal.troicki)** opened **[SPR-9364](https://jira.spring.io/browse/SPR-9364?redirect=false)** and commented  If ReflectionUtils.findMethod return null we should return true instead invocation of the method fail with NullPointerException.  ``` protected boolean determineRequiredStatus(Annotation annotation) { 		try { 			Method method = ReflectionUtils.findMethod(annotation.annotationType(), this.requiredParameterName); 			return (this.requiredParameterValue == (Boolean) ReflectionUtils.invokeMethod(method, annotation)); 		} 		catch (Exception ex) { 			// required by default 			return true; 		} 	} ```  ---  **Issue Links:** - #13954 caught NullPointerException in AutowiredAnnotationBeanPostProcessor.determineRequiredStatus (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-05-02T02:46:07Z","2019-01-11T12:40:36Z"
"","14074","Mixed ordering of @Before and @After advices does not work [SPR-9438]","**[Michal Moravcik](https://jira.spring.io/secure/ViewProfile.jspa?name=miso.moravcik)** opened **[SPR-9438](https://jira.spring.io/browse/SPR-9438?redirect=false)** and commented  Ordering is not applied when there are in place both `@After` and `@Before` advices.  In this case the order number is silently ignored because of this extra code: https://github.com/SpringSource/spring-framework/blob/master/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJPrecedenceComparator.java#L93  Is this error or intention?  Such limitation is not mentioned in the documentation: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-ataspectj-advice-ordering  I have a real situation (simplified in attached example) when I have a `@Before` advice, which is able to throw an Exception, preventing the target method to be called. I also have one `@After` advice which needs to be called with no matter if the Exception was thrown by `@Before` advice or not. So I need to set ordering of aspects: higher precedence for the `@After` advice and lower precedence for the `@Before` advice. But here comes the problem - ordering is ignored for mixed `@After` and `@Before` advices.  Please see the attached demo project which demonstrates the problem.   ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?126500-Mixed-ordering-of-Before-and-After-advices-does-not-work&p=412893#post412893  **Attachments:** - [aop-ordering.jpg](https://jira.spring.io/secure/attachment/19847/aop-ordering.jpg) (_15.01 kB_) - [aop-ordering-test.zip](https://jira.spring.io/secure/attachment/19696/aop-ordering-test.zip) (_7.02 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3969de101e018515b715f32e1e189a8fabda97c, https://github.com/spring-projects/spring-framework/commit/2aaa66f86b10e8146bae9518e4139dd33913b1f7  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-05-24T14:24:14Z","2013-03-18T06:10:40Z"
"","14142","Support XML-like bean overriding semantics for component-scanning [SPR-9508]","**[Michael Wiles](https://jira.spring.io/secure/ViewProfile.jspa?name=michaelwiles@gmail.com)** opened **[SPR-9508](https://jira.spring.io/browse/SPR-9508?redirect=false)** and commented  The following works in xml when profile 'a' is active:  ```xml         ```  However, the equivalent when defined with annotations does not work:  ``` @Service(""foo"") public class X { ... }  @Service(""foo"") @Profile(""a"") public class Y { ... } ```  It fails on startup with the following exception:  ``` stack trace: Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'foo' for bean class [aaa.bbb.X] conflicts with existing, non-compatible bean definition of same name and class [aaa.bbb.Y] 	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.checkCandidate(ClassPathBeanDefinitionScanner.java:312) 	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:253) 	at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:84) 	at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1419) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1409) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:184) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:111) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) 	... 36 more ```  ---  **Affects:** 3.1 GA  **Issue Links:** - #12684 I want to use the ""bean profiling"" with XML based component-scanning.","closed","type: enhancement,","spring-projects-issues","2012-06-14T06:50:11Z","2019-01-11T13:06:16Z"
"","14647","SpringBeanAutowiringInterceptor not closing ApplicationContext after EJB initialisation exception [SPR-10013]","**[Michael Rippon](https://jira.spring.io/secure/ViewProfile.jspa?name=mrippon)** opened **[SPR-10013](https://jira.spring.io/browse/SPR-10013?redirect=false)** and commented  SpringBeanAutowiringInterceptor by default uses SingletonBeanFactoryLocator, which keeps an internal counter of references to the SpringContext. This is incremented on `@PostConstruct`, and decremented on `@PreDestroy`, however, according to the EJB spec:  The following scenarios result in the PreDestroy lifecycle callback interceptor method(s) not being called for an instance: ... • A system exception thrown from the instance’s method to the container.  This means that if an exception is thrown during EJB initialisation, the `@PreDestroy` method is never called, the reference count in SingletonBeanFactoryLocator is never decremented, and the application context is therefore never closed.  This has implications (for example), with the MBean exporter, where MBeans are never unregistered, and the next application deployment fails as the previous MBean instances already exist.  I suggest that in the case where an exception is thrown during the `@PostConstruct` phase, the beanFactoryReference should be released. Ie:  doAutowireBean(invocationContext.getTarget()); try { invocationContext.proceed(); } catch { ... doReleaseBean(invocationContext.getTarget()); }   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb492ed5839fd9c4af98b88722e4c7715c5442cc, https://github.com/spring-projects/spring-framework/commit/721fa9db6a3416f805350b0ae2fba538cdf8e0e6  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","in: core,","spring-projects-issues","2012-11-21T04:03:29Z","2013-01-18T05:10:31Z"
"","14614","Make @RequestMapping inject the negotiated MediaType [SPR-9980]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-9980](https://jira.spring.io/browse/SPR-9980?redirect=false)** and commented  I have a use caes where I do return a suitable object according for the negotiated content type. In my case I accept JSON and XML. When JSON is returned to the client I produce a Map, when XML is returned I produce a custom object.  There is no way to determine easily which content type will be written out to the client. With examining the Accept header and iterating over registered message converters.  I have a work around which looks like this:  ``` @RequestMapping(value = ""/{project:[A-Z0-9_+\\.\\(\\)=\\-]+}"", method = RequestMethod.GET,    produces = { MediaType.APPLICATION_XML_VALUE })   public ResponseEntity lookupProjectAsXml(@PathVariable String project,       @RequestParam(value = ""fields"", required = false) String fields) {      String[] fieldsArray = StringUtils.split(fields, ',');      return lookup(project, fieldsArray, false, MediaType.APPLICATION_XML);   } ```  and  ```  @RequestMapping(value = ""/{project:[A-Z0-9_+\\.\\(\\)=\\-]+}"", method = RequestMethod.GET,    produces = { MediaType.APPLICATION_JSON_VALUE })   public ResponseEntity lookupProjectAsJson(@PathVariable String project,       @RequestParam(value = ""fields"", required = false) String fields,       @RequestParam(value = ""asList"", required = false, defaultValue = ""false"") boolean asList) {      String[] fieldsArray = StringUtils.split(fields, ',');      return lookup(project, fieldsArray, asList, MediaType.APPLICATION_JSON);   } ```  I would rather have:  ``` @RequestMapping(value = ""/{project:[A-Z0-9_+\\.\\(\\)=\\-]+}"", method = RequestMethod.GET,    produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE })   public ResponseEntity lookupProject(@PathVariable String project,       @RequestParam(value = ""fields"", required = false) String fields,       @RequestParam(value = ""asList"", required = false, defaultValue = ""false"") boolean asList,       MediaType mediaType) {      // Process request...          Object body;     if (mediaType.equals(MediaType.APPLICATION_JSON)) {       body = projectValues;     } else if (mediaType.equals(MediaType.APPLICATION_XML)) {       body = new Project(projectValues);     } else {       throw new NotImplementedException(""Project lookup is not implemented for media type '"" + mediaType + ""'"");     }        return new ResponseEntity(body, HttpStatus.OK);   } ```  ---  **Affects:** 3.1.3  **Reference URL:** http://stackoverflow.com/q/13272443/696632  **Issue Links:** - #13864 Response is committed before Interceptor postHandle invoked","closed","type: enhancement,","spring-projects-issues","2012-11-09T07:25:28Z","2019-01-11T14:20:38Z"
"","14601","Improve @RequestParam defaultValue's value JavaDoc [SPR-9967]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-9967](https://jira.spring.io/browse/SPR-9967?redirect=false)** and commented  The JavaDocs shows Default: ""\n\t\t\n\t\t\n\ue000\ue001\ue002\n\t\t\t\t\n""  which seems to be a bug in the first place but if you open up the source code you see ValueConstants.DEFAULT_NONE. This static final value has a decent comment. Please link this to the annotation. It caused confusion in my case and probably in others.   ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26326fb40b8d680688155a182fbcd999338478d1","closed","type: enhancement,","spring-projects-issues","2012-11-07T01:36:05Z","2014-10-01T03:11:49Z"
"","14657","Make XStreamMarshaller write the XML prolog/process instruction [SPR-10023]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10023](https://jira.spring.io/browse/SPR-10023?redirect=false)** and commented  XStreams itself does neither handle char encoding nor does it write an XML PI at the top. See the [XStream FAQ](http://xstream.codehaus.org/faq.html#XML). Write the PI with the `{encoding`} field value to the writer before XStream marshals.  Though UTF-8 and UTF-16 should be detected automatically by an XML reader, there is no guarantee that when the encoding is changed the consumer is able to read correctly.   ---  **Affects:** 3.1.3","closed","status: bulk-closed,","spring-projects-issues","2012-11-23T05:18:06Z","2019-01-12T00:25:22Z"
"","14656","MappingJacksonHttpMessageConverter character encoding not propagated to the response [SPR-10022]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10022](https://jira.spring.io/browse/SPR-10022?redirect=false)** and commented  The JSON converter defines UTF-8 as default character encoding. The client can override that in the Accept header and with that value chars are converted to bytes with  ```java JsonEncoding encoding = getJsonEncoding(outputMessage.getHeaders().getContentType()); JsonGenerator jsonGenerator =           this.objectMapper.getJsonFactory().createJsonGenerator(outputMessage.getBody(), encoding); try {      if (this.prefixJson) {           jsonGenerator.writeRaw(""{} && "");      }      this.objectMapper.writeValue(jsonGenerator, object); } catch (IOException ex) {      throw new HttpMessageNotWritableException(""Could not write JSON: "" + ex.getMessage(), ex); } ```  Consider that the client sends ""Accept: application/json"". The message converter uses UTF-8 by default but the AbstractHttpMessageConverter does not set that in the responded content type. The client does not know in which encoding the output will be. Such a case has been attached with Firebug.  Sample code:  ```java @ExceptionHandler(TypeMismatchException.class) 	public ResponseEntity handleException(TypeMismatchException e, HttpServletResponse response) { 		RestError error = new RestError(""invalid_parameters"", 				""Die übergebenen Parameter sind fehlerhaft und entsprechen nicht der Spezifiktion"", 				ExceptionUtils.getMessage(e)); 		return new ResponseEntity(error, HttpStatus.BAD_REQUEST); 	} ```  The ü is mangled in Firebug. A workaround is to add 		response.setCharacterEncoding(""UTF-8""); before the return. See another screenshot. This task should be done by the abstract message converters for text-based output.   ---  **Affects:** 3.1.3  **Attachments:** - [explicit char encoding.png](https://jira.spring.io/secure/attachment/20711/explicit+char+encoding.png) (_66.71 kB_) - [no char encoding.png](https://jira.spring.io/secure/attachment/20712/no+char+encoding.png) (_74.48 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/262eb0ca2575d793bfdcba2400142b6830d1ee6b, https://github.com/spring-projects/spring-framework-issues/commit/d463302312d6658aff8d033b3edfec1c258290b1","closed","status: declined,","spring-projects-issues","2012-11-23T04:42:13Z","2019-01-12T16:24:46Z"
"","14653","Add ability to process all @Autowired fields in InjectionMetadata.inject instead of failing on the first error [SPR-10019]","**[Michael O'Cleirigh](https://jira.spring.io/secure/ViewProfile.jspa?name=mocleirigh)** opened **[SPR-10019](https://jira.spring.io/browse/SPR-10019?redirect=false)** and commented  I have written a custom **BeanPostProcessor** for resolving `@Autowired` and `@Resource` annotations using some application specific rules.  But these rules only apply to some of the usages of `@Autowired` so I delegate to the stock **AutowiredAnnotationBeanPostProcessor** to wire up the other usages.  The problem is that the existing InjectionMetadata will fail fast on the first field encountered that can't be resolved.  My **BeanPostProcessor** can resolve multiple implementations of the same interface for example (with local application knowledge) which fails on the normal processor.  What I need is a way for InjectionMetadata to process all injectable fields in a bean even if errors are encountered.  What I am proposing is a toggle be added to AutowiredAnnotationBeanPostProcessor so that I can switch on this fail at end behaviour.    ---  **Affects:** 3.1.3  **Attachments:** - [0001-SPR-10019-Add-ability-to-process-all-injectable-fiel.patch](https://jira.spring.io/secure/attachment/20708/0001-SPR-10019-Add-ability-to-process-all-injectable-fiel.patch) (_4.04 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f9f1ed2533110081c4a62b20d2b5658c8a68496","closed","status: bulk-closed,","spring-projects-issues","2012-11-22T08:51:08Z","2019-01-12T00:25:26Z"
"","14162","Use BufferedInputStream in SimpleMetaDataReader to double performance [SPR-9528]","**[Michael Hunger](https://jira.spring.io/secure/ViewProfile.jspa?name=mhunger)** opened **[SPR-9528](https://jira.spring.io/browse/SPR-9528?redirect=false)** and commented  We have a customer who generated a lot of Spring Data Repositories, the startup time of his application was very long due to that (40 seconds).  When profiling I saw that most of the time was spent in ASM reading the files. As I know ASM to be very fast I looked into the issue and saw that `SimpleMetadataReader` doesn't wrap the input stream in a `BufferedInputStream`. So I tried it in a copy of `SimpleMetadataReader` and startup time halved from 40s to 20s.  {CODE} SimpleMetadataReader(Resource resource, ClassLoader classLoader) throws IOException { InputStream is = new BufferedInputStream(resource.getInputStream()); {CODE}  ---  **Sub-tasks:** - #14188 Backport ""Use BufferedInputStream in SimpleMetaDataReader to double performance""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/556c6a79c519139d3acb166ea803eb9eda94f48a, https://github.com/spring-projects/spring-framework/commit/fdb9de1445c92e3b80f64c57215713ef9ccb689b","closed","type: enhancement,","spring-projects-issues","2012-06-21T00:55:11Z","2019-01-11T13:08:36Z"
"","14163","Refactor PropertySourcesPropertyResolver#containsString for consistency [SPR-9529]","**[Mauro Molinari](https://jira.spring.io/secure/ViewProfile.jspa?name=mauromol)** opened **[SPR-9529](https://jira.spring.io/browse/SPR-9529?redirect=false)** and commented  To ensure maximum performance and consistency, shouldn't `org.springframework.core.env.PropertySourcesPropertyResolver.containsProperty(String)` be implemented as such?  ``` public boolean containsProperty(String key) {   for (PropertySource propertySource : this.propertySources) {     if (propertySource.containsProperty(key)) {       return true;     }   }   return false; } ```    ---  **Affects:** 3.1 GA, 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/35055fd866baadefeec2e2f47d1d94454763b452","closed","in: core,","spring-projects-issues","2012-06-21T02:34:29Z","2012-06-21T04:00:42Z"
"","14576","IntrospectionException: type mismatch between indexed and non-indexed methods [SPR-9943]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-9943](https://jira.spring.io/browse/SPR-9943?redirect=false)** and commented  The application fails to create beans of type com.amazonaws.ClientConfiguration due to  ``` [...] Caused by: org.springframework.beans.FatalBeanException: Failed to obtain BeanInfo for class [com.amazonaws.ClientConfiguration]; nested exception is java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods: socketBufferSizeHints 	at org.springframework.beans.CachedIntrospectionResults.(CachedIntrospectionResults.java:262) 	at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:149) 	at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:324) 	at org.springframework.beans.BeanWrapperImpl.getPropertyDescriptors(BeanWrapperImpl.java:331) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1242) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1101) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	... 43 more Caused by: java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods: socketBufferSizeHints 	at java.beans.IndexedPropertyDescriptor.findIndexedPropertyType(IndexedPropertyDescriptor.java:395) 	at java.beans.IndexedPropertyDescriptor.setIndexedWriteMethod(IndexedPropertyDescriptor.java:292) 	at org.springframework.beans.ExtendedBeanInfo.addOrUpdatePropertyDescriptor(ExtendedBeanInfo.java:314) 	at org.springframework.beans.ExtendedBeanInfo.(ExtendedBeanInfo.java:170) 	at org.springframework.beans.CachedIntrospectionResults.(CachedIntrospectionResults.java:224) ```  The error does not occur in release 3.1.2 or earlier versions.  ---  **Affects:** 3.1.3  **Attachments:** - [BeanCreationTest.java](https://jira.spring.io/secure/attachment/20598/BeanCreationTest.java) (_649 bytes_) - [config.xml](https://jira.spring.io/secure/attachment/20597/config.xml) (_402 bytes_) - [pom.xml](https://jira.spring.io/secure/attachment/20596/pom.xml) (_2.03 kB_)  **Issue Links:** - #14663 Overhaul non-void JavaBean write method support (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/8c7a4adbb96606a0eee17ff0e88c452534e0c0b3, https://github.com/spring-projects/spring-framework-issues/commit/792ed0ec7535a09c9b213cae5acf0403890150a0","closed","in: core,","spring-projects-issues","2012-11-01T00:35:49Z","2019-01-11T14:17:15Z"
"","14465","Erroneous ""0"" returned where empty string expected in call through the RestTemplate [SPR-9832]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-9832](https://jira.spring.io/browse/SPR-9832?redirect=false)** and commented  The RestTemplate erroneously infers ""0"" for an empty string values.  1. Execute the attached test RestTemplateTest using the attached pom.xml file. 2. The test fails, the response from the RestTemplate is {""lhs"":""1 U.S. dollar"",""rhs"":""1 U.S. dollar"",""error"":""0"",""icc"":true}  For comparison, change the spring version to any 3.0.x version, or perform a request to http://www.google.com/ig/calculator?q=1USD=?EUR from a browser. The response is {lhs: ""1 U.S. dollar"",rhs: ""0.774833411 Euros"",error: """",icc: true}  ---  **Affects:** 3.1 RC1, 3.1.2  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/20524/pom.xml) (_2.74 kB_) - [RestTemplateTest.java](https://jira.spring.io/secure/attachment/20525/RestTemplateTest.java) (_1.02 kB_)  **Issue Links:** - #14603 UriComponentsBuilder incorrectly disallows ""="" as query parameter value (_**""is duplicated by""**_) - #14424 RestTemplate fails to correctly parse some HTTP URI parameters (_**""is duplicated by""**_) - #14109 UriComponentsBuilder.query(String) does not always match properly the query (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0721146b14e3df3bde3e6e8f2a871bb0b995ef4f, https://github.com/spring-projects/spring-framework/commit/88906d271bc25105d303c4de839aac5422617ab1","closed","type: bug,","spring-projects-issues","2012-09-26T01:41:47Z","2019-01-11T13:15:49Z"
"","14147","Update javadoc of HttpMediaTypeException constructor [SPR-9513]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-9513](https://jira.spring.io/browse/SPR-9513?redirect=false)** and commented  The javadoc of one of the constructors of [HttpMediaTypeException](http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/HttpMediaTypeException.html#HttpMediaTypeException(java.lang.String, java.util.List)) should be updated, because it describes the creation of a different exception:  ``` public abstract class HttpMediaTypeException extends ServletException {      // ...          /**      * Create a new HttpMediaTypeNotSupportedException.      * @param supportedMediaTypes the list of supported media types      */     protected HttpMediaTypeException(String message, List supportedMediaTypes) {         // ...      } ```    ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/277a115f8bbb2e6c9a4da19b9acd8f40743cbf84","closed","type: enhancement,","spring-projects-issues","2012-06-16T11:23:33Z","2012-06-18T03:31:45Z"
"","14125","DefaultHandlerExceptionResolver should not add supported media types to response header  [SPR-9491]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-9491](https://jira.spring.io/browse/SPR-9491?redirect=false)** and commented  The description of the HTTP status code 415, Unsupported Media Type, in the [HTTP 1.1 spec](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16) states that  > 415 Unsupported Media Type >  > The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method.  Regrettably, it does not state the server should respond with the _supported_ media types in any way. Specifically, it does not state that it should respond by setting the `Accept` header in the response. Consequently, the `handleHttpRequestMethodNotSupported()` method in the  [DefaultHandlerExceptionResolver](https://github.com/SpringSource/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java) should not assign the `Accept` header either, i.e. these few lines should be deleted and the javadoc should be updated accordingly.  Side note: A web app was developed and debugged, both using a remote debugger on Tomcat 7.0.27 as well as using jetty-maven-plugin 8.0.4.v20111024. A break point was set to verify that the `response.setHeader(""Accept"", MediaType.toString(mediaTypes))` was executed, which it was during both tests. However, the information was lost somewhere, in neither case was the `Accept` header present in the response that the client received after issuing a request with an unsupported media type.    ---  **Affects:** 3.1.1","closed","status: declined,","spring-projects-issues","2012-06-11T09:53:03Z","2019-01-12T16:36:19Z"
"","14648","Allow ""Any"" arguments for AbstractMethodMockingControl expectations [SPR-10014]","**[Mattia Tommasone](https://jira.spring.io/secure/ViewProfile.jspa?name=raibaz)** opened **[SPR-10014](https://jira.spring.io/browse/SPR-10014?redirect=false)** and commented  Currently AbstractMethodMockingControl requires mocked method arguments to be known in advance when setting the expectations, e.g. with AnnotationDrivenStaticEntityMockingControl.expectReturn, because AbstractMethodMockingControl runs an equals() on every argument and throws an IllegalArgumentException when equals() fails.  However, the arguments may not be known in advance or may not be relevant for testing purposes, so some kind of generic matcher that allows to perform the expected behavior regardless of the argument may be useful.  To further clarify, i'm thinking of something like Mockito's any* matchers, that allow to verify expectations regardless of the values of the arguments: http://mockito.googlecode.com/svn-history/r896/branches/1.6/javadoc/org/mockito/Matchers.html  ---  **Affects:** 3.1.1  **Issue Links:** - #19054 Drop mock.staticmock package from spring-aspects (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2012-11-21T07:38:03Z","2019-01-11T19:00:30Z"
"","13919","Add ability to specify whether a bean profile is active by default [SPR-9281]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-9281](https://jira.spring.io/browse/SPR-9281?redirect=false)** and commented  I've found a case where the ability to specify that certain bean profiles are active by default is extremely convenient.  We are migrating from one environment to another (from pure Hibernate to JPA) in an evolutionary fashion.  When not specifying any active bean profiles, the legacy environment is intended for backward compatibility reasons; when the new environment is desired, only then would the user wish to set the system property ""spring.profiles.active"" and specify that he wanted to use the ""new stuff"" (JPA in this case).  As an alternative to #12852, the choice could be explicitly made by the author of the application context by adding an attribute called ""default-profile-activation"" similar to the \ element.  This would serve to remove any magic.  If ""default-profile-activation"" were an enumerated value, it would make the behavior explicit.  Values I'd recommend are the following.  * ""inactive-by-default"":  The profile being described is inactive by default and activated only explicitly.  This is the default value if a ""profile"" attribute is given.  It could be a warning if this value is provided and a nonempty ""profile"" attribute value were given.  * ""active-unless-specified"":  The profile being described is active by default, unless other means of explicit activation are provided, like via the ""spring.profiles.active"" system property.  * ""active-always"":  The profile being described is always active, regardless of explicit profile activations.  This value is intended for backward compatibility with the \ element when it has an empty or no ""profile"" attribute.  It could be a warning if users provided both a ""profile"" attribute and a ""default-profile-activation"" value of ""active-always"".  Consider the following file.  ---  \ \ \ \  \ \ \ \  \ \ \  \ \ \ \  \ \ \ \  ---  If the profile ""pure-hibernate"" or no profiles were explicitly activated, then the beans defined would be [a, c, d].  If the profile ""jpa"" were activated, then the beans defined would be [a, b, d, e].  If the profile ""foobar"", which is not mentioned in the example, were activated, then the beans defined would be [a, d].  ---  **Affects:** 3.1.1  **Issue Links:** - #15881 Add explanation of `@Profile`(""default"") to reference documentation  (_**""is depended on by""**_) - #12852 Introduce a reserved default profile name (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-03-29T06:34:27Z","2019-01-13T07:05:24Z"
"","14343","Meta annotations are superseded by @Transactional annotation on superclass [SPR-9709]","**[matthew inger](https://jira.spring.io/secure/ViewProfile.jspa?name=mattinger)** opened **[SPR-9709](https://jira.spring.io/browse/SPR-9709?redirect=false)** and commented  If I create a meta annotation, it is ignored if a superclass has an `@Transactional` annotation.  ``` @Target({ElementType.METHOD, ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Inherited @Transactional(""baz"") public @interface BazTx {     } @Transactional(""foo"") public static class Foo {     public Long getById(Long value) { return value; } } @BazTx public static class Baz extends Foo {             public List getSome() { return null; }; } ```  When the transaction attribute is retrieved for the `getSome()` method, it comes back with attributes from the `@Transactional(""foo"")` annotation on the base class.  It seems that meta-annotations are superseded by the _inherited_ nature of the `@Transactional` annotation.  Not sure what, if anything could be done about this, but it does not seem to be a logical result.   --- No further details from [SPR-9709](https://jira.spring.io/browse/SPR-9709?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-08-20T06:52:51Z","2019-01-12T02:46:35Z"
"","14295","@Transactional with txManager name is cumbersome with base dao classes [SPR-9661]","**[matthew inger](https://jira.spring.io/secure/ViewProfile.jspa?name=mattinger)** opened **[SPR-9661](https://jira.spring.io/browse/SPR-9661?redirect=false)** and commented  By embedding the transaction manager name in the `@Transactional` anotations, using base dao classes is cumbersome.  Example:  `@Transactional` public class GenericDao { protected Class\ mappedClass; protected SessionFactory sessionFactory;      public GenericDao(Class mappedClass, SessionFactory sessionFactory) {         this.mappedClass = mappedClass;         this.sessionFactory = sessionFactory;     }          @Transactional(readOnly=false)     public E getById(K key) {         return sessionFactory.getCurrentSession().get(mappedClass, key);     }          public E merge(E entity) {         return sessionFactory.getCurrentSession().merge(entity);     }  }  Now we have two subclasses, each of which will use different sessionfactory, and transaction manager (we don't need jta).  `@Transactional`(""fooTxManager"") public class FooDao extends GenericDao { ... }  `@Transactional`(""barTxManager"") public class FooDao extends GenericDao { ... }  The problem is that we'd have to override the getById() method otherwise that method will use the default transaction manager.  Not a big deal with 1 method, but it is a big deal when there's a bunch of methods.  `@Transactional`(""barTxManager"") public class FooDao extends GenericDao { `@Override` `@Transactional`(""barTxManager"") public Foo getById(Long key) { return super.getById(key); } ... }  I think a better approach would be to either:  a) Allow the transaction manager name, when left blank, to fallback to the annotation at the class level. b) Separate the transaction semantics from the manager name with a new annotation:  `@TransactionManager`(""barTxManager"")   ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2012-08-01T08:26:10Z","2020-01-03T18:21:43Z"
"","14145","Cannot reference FactoryBean in a SpEL expression [SPR-9511]","**[matthew inger](https://jira.spring.io/secure/ViewProfile.jspa?name=mattinger)** opened **[SPR-9511](https://jira.spring.io/browse/SPR-9511?redirect=false)** and commented  #### Status Quo  Currently, if you try to reference a `FactoryBean` in a SpEL expression using standard syntax, you get an error as follows.  ``` Caused by: org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is java.lang.IllegalStateException: Cannot handle (38) '&' 	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:142) 	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1299) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:224) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:311) 	... 45 more Caused by: java.lang.IllegalStateException: Cannot handle (38) '&' 	at org.springframework.expression.spel.standard.Tokenizer.process(Tokenizer.java:193) 	at org.springframework.expression.spel.standard.Tokenizer.(Tokenizer.java:47) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.doParseExpression(InternalSpelExpressionParser.java:110) 	at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:56) 	at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:1) 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpressions(TemplateAwareExpressionParser.java:128) 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseTemplate(TemplateAwareExpressionParser.java:74) 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:64) 	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:119) 	... 48 more ```  #### Work-Around  I can work around this by injecting the `AnnotationSessionFactoryBean` into my initializer, but that will break when I move to Hibernate 4. Alternatively, I could use a `BeanReferenceFactoryBean` and get the `BeanFactory` to retrieve a named bean and then use SpEL from there. Either seems like a hack, and SpEL should support this IMHO.  #### Example Code  Here's the relevant XML configuration:  ```xml                 ...                	     	      ```  And the java code for the initializer class:  ``` public class EntityCallbackHandlerInitializer {    private Configuration configuration;    private EntityCallbackHandler entityCallbackHandler;      public void setConfiguration(Configuration configuration) {       this.configuration = configuration;   }    public void setEntityCallbackHandler(EntityCallbackHandler entityCallbackHandler) {       this.entityCallbackHandler = entityCallbackHandler;   }    @PostConstruct   public void init() throws ClassNotFoundException {       final ReflectionManager reflectionManager = configuration.getReflectionManager();       final Iterator classMappings = configuration.getClassMappings();       while (classMappings.hasNext()) {           entityCallbackHandler.add(                   reflectionManager.classForName(classMappings.next().getClassName(), this.getClass()),                   reflectionManager);       }   } } ```  ---  **Issue Links:** - #12308 SpEl does not support conjunction (&&) and disjunction (||) logic","closed","type: enhancement,","spring-projects-issues","2012-06-15T10:49:10Z","2019-01-11T13:05:55Z"
"","14186","Respect 'merge' attribute of  and  elements in conjunction with nested property paths [SPR-9552]","**[Matt Wuertz](https://jira.spring.io/secure/ViewProfile.jspa?name=mwuertz)** opened **[SPR-9552](https://jira.spring.io/browse/SPR-9552?redirect=false)** and commented  I work on the Kuali Rice project.  When I try to use a map merge with nested properties, it doesn't function correctly.  For example:  ```xml                                                                                        ```  My hope is to get X and C in the child map. When I do this, however, all I get is C.  I have asked for guidance on the forums but did have any responses, which leads me to believe that this is a bug.  Please let me know if there is any additional information I can provide.  I placed the priority as Major because I don't have a workaround for this.  ---  **Affects:** 3.1 GA  **Issue Links:** - #11189 Introduce 'merge' attribute for util namespace collection elements  0 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2012-06-30T08:30:15Z","2019-01-11T13:07:04Z"
"","14458","Download page down [SPR-9825]","**[Mathieu Larchet](https://jira.spring.io/secure/ViewProfile.jspa?name=mlarchet)** opened **[SPR-9825](https://jira.spring.io/browse/SPR-9825?redirect=false)** and commented  Community Download page, as well as SpringSource Tool Suite download page are unavailable for more than a month.  If you try to submit the form, or click on the 'Take me to the download page' link redirects you to the same page...   ---  **Reference URL:** http://www.springsource.org/spring-community-download","closed","","spring-projects-issues","2012-09-24T06:41:14Z","2019-01-11T13:16:58Z"
"","14453","Request scoped bean (Hibernate entity) gets saved with null values [SPR-9820]","**[Mateusz Radziszewski](https://jira.spring.io/secure/ViewProfile.jspa?name=bladositto)** opened **[SPR-9820](https://jira.spring.io/browse/SPR-9820?redirect=false)** and commented  I'm am trying to persist hibernate entity declared in context as request scoped bean. I know that I have to use org.springframework.orm.hibernate3.support.ScopedBeanInterceptor and I'm using it. Entity gets persisted without any exceptions, but in database there are all null fields in newest record. I used Log4J to get SQL statement and parameters bound to it from Hibernate and it seems that Hibernate is binding null parameters to the statement. Of course when using save() method from HibernateTemplate class on my entity there are non-null values set in it.  Hibernate version: 3.6.0 Database: HSQLDB   ---  **Affects:** 3.1.2  **Reference URL:** http://stackoverflow.com/questions/12236012/persisting-cglib-proxy-entity-with-hibernatetemplate","closed","status: bulk-closed,","spring-projects-issues","2012-09-22T05:34:48Z","2019-01-12T00:26:11Z"
"","14262","high memory consumption on 64-bit JVMs when managing swing-components [SPR-9628]","**[mat rium](https://jira.spring.io/secure/ViewProfile.jspa?name=matrium)** opened **[SPR-9628](https://jira.spring.io/browse/SPR-9628?redirect=false)** and commented  Hi,  i have been using spring for managing a swing-based client-application recently for the first time, and noticed some strange behaviour: On 64-Bit JVMs the application seems to eat up a lot more memory than expected (about 10 times the memory it uses on 32-Bit JVMs).  My application, which consists out of only 11 swing-components that are wired together with spring easily eats up 400MB memory. Even the most basic application (one JFrame and one JPanel that gets injected into that Frame) use up more than 150MB already. I will attach a simple test-project (just that 2 classes + applicationContext.xml + required libraries), so you can see for yourself.  In a memory dump you can see that a lot of java.lang.reflect.Method objects are created, maybe because JFrame (and other Swing Components) inherits like 100 methods or so? See the following answer on stackoverflow: http://stackoverflow.com/a/11620952/1164797 (forget/ignore the question itself though, initially i thought this is related to AnnotationConfigApplicationContext, which i now know is not the case).  I am not sure, maybe this is just expected because of the number of methods JFrame has? So this might not be a bug at all.. Still, 150MBs for 2 beans seems just unreasonable, doesn't it?   ---  **Affects:** 3.1.2  **Attachments:** - [testProject.zip](https://jira.spring.io/secure/attachment/20124/testProject.zip) (_1.84 MB_)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2012-07-24T11:05:39Z","2019-01-12T16:36:13Z"
"","14375","Default PersistenceUnit is configured with wrong name, resulting in duplicates & causes RTE. [SPR-9741]","**[Marty Pitt](https://jira.spring.io/secure/ViewProfile.jspa?name=martypitt)** opened **[SPR-9741](https://jira.spring.io/browse/SPR-9741?redirect=false)** and commented  When specifying the name of a persistence unit to use for LocalContainerEntityManagerFactoryBean (ie., assuming there are multiple persistence units defined in persistence.xml), this name is now applied to the persistence unit from scanned pacakges.  In 3.1.0, the name applied to the generated package was 'default'.  However, now, the name applied is the one defined in the entityManager configuration.  This results in an exception ""Conflicting persistence unit definitions for name 'xxx'"".  This is a breaking change in behaviour from 3.1.0 to 3.1.2.  The change is caused by new setter behaviour introduced in LocalContainerEntityManagerFactoryBean in 3.1.2, specifically this code:  {{ `@Override` public void setPersistenceUnitName(String persistenceUnitName) { super.setPersistenceUnitName(persistenceUnitName); this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName); } }}  This changes the internal defaultPersistenceUnitName from `default`.  Later, when `DefaultPersistenceUnit.buildDefaultPersistenceUnitInfo()` is called, a new persistence unit is generated using this name:  {{ private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() { SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo(); scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName); scannedUnit.setExcludeUnlistedClasses(true); }}  This then results in an exception being thrown.  As an example, here's the defined `Persistence.xml`, which contains both a prod config, and a test config:  {{  \  \ \ \  \ \ \ \ \org.hibernate.ejb.HibernatePersistence\ \ \ \ \ \ }}  Then, the appropriate config is selected in the EntityManager configration:  {{ \ \ \ \ \aa.bb.cc\ \ \ \ \ \ \ \ \ \ \ \ }}  This causes the exception.    ---  **Affects:** 3.1.2  **Reference URL:** http://stackoverflow.com/questions/12189921/conflicting-persistence-unit-definitions-when-testing  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cf4a2626bae8707a324aef1f0e62b06a80c2ab8, https://github.com/spring-projects/spring-framework/commit/f32e4077fae1ce986ca565c73b1703f74dd6ba31","closed","type: bug,","spring-projects-issues","2012-08-30T00:25:15Z","2012-10-31T11:34:00Z"
"","14289","HttpHeaders.getAccept() does not return all accept headers for Iplanet WebServer 7 [SPR-9655]","**[Marty Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=martyjones)** opened **[SPR-9655](https://jira.spring.io/browse/SPR-9655?redirect=false)** and commented  The HttpHeaders.getAccept() method is supposed to return a list of ""accept"" header MediaTypes that were on the servlet request.  I noticed that only the first accept header was being returned when invoking this method.  I debugged the code and found that getAccept() method invokes the getFirst() method and then splits the comma delimited string to get the list of MediaTypes.  This works fine on tomcat because tomcat returns the request accept headers as a single comma separated string.  However Oracle Iplanet Webserver returns each request accept header as a separate header entry so it will only ever return the first accept header.  I ran into this problem when I was invoking a controller that returned a json object.  If I invoked the controller directly from the browser url I would get the string representation of the json object when running in a tomcat server.  However when I ran the same code in a Iplanet WebServer I would get ""org.springframework.web.HttpMediaTypeNotAcceptableException: Could not find acceptable representation"".  I started digging into the code and that is where I found that the AnnotationMethodHandlerAdapter.writeWithMessageConverters() method is calling the inputMessage.getHeaders().getAccept() method which when run inside a tomcat server would return 4 accept headers, one of which was ""\*/\*"".  When ran in Iplanet WebServer it only ever returned ""text/html"".  This would cause the error since the MappingJacksonHttpMessageConverter only accepts ""application/json"".  Basically the HttpHeaders.getAccept() method needs to take into account that not all servlet containers return all the header values as a single comma separated string.  You should be able to just check the length of the returned list of strings when getting the accept headers and if the length is 1 then parse it.  It if has more than one entry then just concatenate the string list together as a comma separated string.  ---  **Affects:** 3.0.7  **Issue Links:** - #19075 HeaderContentNegotiationStrategy does not support multiple Accept headers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2d7d663b4f75f27c71928ea8cf8923380aee244, https://github.com/spring-projects/spring-framework/commit/2e1a68893dc6d28a3fc6169eed075ce837c153b4","closed","type: enhancement,","spring-projects-issues","2012-07-30T11:31:20Z","2019-01-11T13:00:06Z"
"","13997","Add Error Tag support for current Form Input Tags [SPR-9360]","**[Marty Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=martyjones)** opened **[SPR-9360](https://jira.spring.io/browse/SPR-9360?redirect=false)** and commented  I find myself always have to write a separate error tag for every form input field.  It should would be nice if you could specify the error information on the input field itself.  That way you don't have to write a second error tag for every input field that you have in a form.  Here is an example.  - Original Form Elements --   \ \ \First Name:\ \ \ \ \ \ \ \Last Name:\ \ \ \ \ \ \ \  - Proposed Form Elements --   \ \ \First Name:\ \ \ \ \ \ \Last Name:\ \ \ \ \ \ \   --- No further details from [SPR-9360](https://jira.spring.io/browse/SPR-9360?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-05-01T06:00:02Z","2019-01-12T03:48:40Z"
"","13955","UriComponentsBuilder.fromUri brakes url encoded query param [SPR-9317]","**[Martin Tilma](https://jira.spring.io/secure/ViewProfile.jspa?name=martintilma)** opened **[SPR-9317](https://jira.spring.io/browse/SPR-9317?redirect=false)** and commented  When using UriComponentsBuilder.fromUri with an uri that contains a encoded query param the getQueryparam returns a broken param.  in the code a uri.getQuery is used. But I think the uri.getRawQuery should fix the problem.  See the attached testcase: UriComponentBuilderTest.java  Workarround for now is to use the: UriComponentsBuilder.fromUriString(uri.toString())  ---  **Affects:** 3.1.1  **Attachments:** - [UriComponentBuilderTest.java](https://jira.spring.io/secure/attachment/19572/UriComponentBuilderTest.java) (_818 bytes_)  **Sub-tasks:** - #14183 Backport ""UriComponentsBuilder.fromUri brakes url encoded query param""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a33fe6fa0a0b58f97ff5dd7f9d9767ffdc202af1, https://github.com/spring-projects/spring-framework/commit/e8deba291574b3c8dcabcb00b7141a51ce9f16b6","closed","type: bug,","spring-projects-issues","2012-04-10T07:23:28Z","2019-01-11T12:52:04Z"
"","14609","provide exact source location for live beans information [SPR-9975]","**[Martin Lippert](https://jira.spring.io/secure/ViewProfile.jspa?name=mlippert)** opened **[SPR-9975](https://jira.spring.io/browse/SPR-9975?redirect=false)** and commented  To improve the tooling experience around the live beans graph, it would be great to have exact source location information for bean definitions in the live beans information. That would allow us to highlight and navigate directly to the exact position in the source code (or the XML definition) without guessing where it is.   ---  **Affects:** 3.2 RC1","open","type: enhancement,","spring-projects-issues","2012-11-08T01:58:48Z","2016-06-02T08:46:54Z"
"","14281","Forwarding sets locale and character encoding. [SPR-9647]","**[Martin Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=mgbckr)** opened **[SPR-9647](https://jira.spring.io/browse/SPR-9647?redirect=false)** and commented  Hi everyone,  so I was having trouble with the character encoding of a JSON object returned by a REST interface implemented in Spring MVC.  Accessing the interface using a forwarded URL (the forwarding was also done via Spring's forwarding capabilities, i.e. return ""forward:url"") would always set a wrong character encoding, i.e., ISO-8859-1 (VS setting no character encoding when accessed directly).  Example: **/some/forwarded/url** would return this header  ``` HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Set-Cookie: JSESSIONID=57F7A6ECFDDEA925D2565E67A4B718CD; Path=/servlet-root/; HttpOnly Pragma: no-cache Cache-Control: no-cache,no-store Expires: Wed, 31 Dec 1969 23:59:59 GMT Last-Modified: Thu, 01 Jan 1970 00:00:00 GMT Content-Type: application/json;charset=ISO-8859-1 Content-Language: en-US Transfer-Encoding: chunked Date: Wed, 25 Jul 2012 13:58:45 GMT ```  while **/the/original/url** would return this header  ``` HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Set-Cookie: JSESSIONID=FC01F1AABA8DD80A420BE0C70E2B422C; Path=/ubicon-webapp/; HttpOnly Pragma: no-cache Cache-Control: no-cache,no-store Expires: Wed, 31 Dec 1969 23:59:59 GMT Last-Modified: Thu, 01 Jan 1970 00:00:00 GMT Content-Type: application/json Transfer-Encoding: chunked Date: Wed, 25 Jul 2012 14:18:47 GMT ```  The redirect happens in a controller like this:  ``` @RequestMapping(""/some/forwarded/url"") public String handle() {   return ""forward:/the/original/url""; } ```  The ""problem"" lies with in the forwarding handler returning a view to render. Rendering the DispatcherServlet will assign a locale which on the other hand assigns a character encoding. For details and workarounds, please see http://fstyle.de/hp_fstyle/wordpress/2012/07/22/spring-3-0-5-responsebody-and-json/  I would consider this unexpected behaviour. Please correct me if I am wrong.   ---  **Affects:** 3.0.5  **Reference URL:** http://fstyle.de/hp_fstyle/wordpress/2012/07/22/spring-3-0-5-responsebody-and-json/","closed","status: declined,","spring-projects-issues","2012-07-27T02:49:23Z","2019-01-12T16:36:09Z"
"","14542","Allow setting WSDL document as a Resource on LocalJaxWsServiceFactory [SPR-9909]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-9909](https://jira.spring.io/browse/SPR-9909?redirect=false)** and commented  Currently the JaxWsPortProxyFactoryBean (actually the LocalJaxWsServiceFactory) only supports setting the wslDocumentUrl it would be nice if it could also be set as a Resource. We needed this or a project which included the WSDL/XSD files in the META-INF/wsdl directory instead of a URL (due to some constraints using an ESB).   ---  **Affects:** 3.0.7, 3.1.2","closed","type: enhancement,","spring-projects-issues","2012-10-22T23:27:08Z","2012-11-04T06:53:59Z"
"","14457","Add documentation for cache and jdbc namespaces [SPR-9824]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-9824](https://jira.spring.io/browse/SPR-9824?redirect=false)** and commented  It appears that the new cache namespace is missing from the reference guide, the same seems to be true for the jdbc namespace. Would be nice if those where added .   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e2904b71a96342d855109559ae0e67d454c5939","closed","type: enhancement,","spring-projects-issues","2012-09-24T06:40:57Z","2012-11-20T18:27:26Z"
"","14400","AnnotationTransactionAspect only supports @Transactional [SPR-9766]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-9766](https://jira.spring.io/browse/SPR-9766?redirect=false)** and commented  For a project we are using loadtime weaving and we wanted to use as many standard annotations as possible. However the AnnotationTransactionAspect only supports `@Transactional` and we use `@TransactionAttribute` to mark transactional methods/classes.  It would be nice if the aspect would also support the `@TransactionAttribute` annotation.   ---  **Affects:** 3.1.2","closed","status: bulk-closed,","spring-projects-issues","2012-09-06T02:38:04Z","2019-01-12T00:26:23Z"
"","14215","Support for javax.ejb.Schedule annotation [SPR-9581]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-9581](https://jira.spring.io/browse/SPR-9581?redirect=false)** and commented  It would be great if spring could support the `@Schedule` annotation next to their own `@Scheduled` annotation. This would allow for the use of more standard annotations.  It would be even greater if it could be implemented according to the EJB specification.   ---  **Affects:** 3.2 M1  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-07-11T02:51:43Z","2016-12-04T14:37:57Z"
"","14198","Provide mocks for the JavaServer Faces API [SPR-9564]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-9564](https://jira.spring.io/browse/SPR-9564?redirect=false)** and commented  It would be nice if Spring Test provided mock implementations for JSF environment components such as `FacesContext`, `ExternalContext`, etc.  This could integrate with the existing mock support for the Servlet API.   --- No further details from [SPR-9564](https://jira.spring.io/browse/SPR-9564?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-07-05T01:10:42Z","2018-05-24T15:23:01Z"
"","13932","StandardServletMultipartResolver should support MaxUploadSizeExceededException against common servers [SPR-9294]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-9294](https://jira.spring.io/browse/SPR-9294?redirect=false)** and commented  Currently all exceptions thrown by the standard multipart support lead to the generic `MultipartException`. It would be nice if, like the `CommonsMultipartResolver`, there could be differentiated between a general exception or a `MaxUploadSizeExceededException`.  Probably not an easy task as it depends on the container how it is handled and which exception is thrown.  For tomcat it is:  ``` org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException. ```  ---  **Affects:** 3.1.1  **Issue Links:** - #19180 CommonsMultipartFile.getOriginalFilename() should be able to preserve header-specified filename as-is - #19204 CommonsMultipartResolver should explicitly convert FileSizeLimitExceededException next to SizeLimitExceededException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1922f03d24247001571e38e38ecea497c274b51f","closed","type: enhancement,","spring-projects-issues","2012-04-01T14:36:33Z","2019-01-11T12:47:59Z"
"","14030","Documentation concerning Quartz support is out of date [SPR-9394]","**[Marrache Mickael](https://jira.spring.io/secure/ViewProfile.jspa?name=miko95)** opened **[SPR-9394](https://jira.spring.io/browse/SPR-9394?redirect=false)** and commented  The documentation concerning Quartz support is out of date. It still indicates to use JobDetailBean instead of the new factory class JobDetailFactoryBean, and that's the same for some other classes. Using the old classes doesn't work with newer versions of Quartz (2.x). Following the documentation, I get this error:  java.lang.IncompatibleClassChangeError: class org.springframework.scheduling.quartz.JobDetailBean has interface org.quartz.JobDetail as super class  ---  **Affects:** 3.1 GA  **Issue Links:** - #12923 Support Quartz 2.0.x - #14842 Update documentation examples for scheduling to use SimpleTriggerFactoryBean instead of SimpleTriggerBean (_**""is superseded by""**_)","closed","","spring-projects-issues","2012-05-10T04:45:04Z","2019-01-11T12:38:48Z"
"","14315","Sybase lock wait timeout error code missing [SPR-9681]","**[Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=cinquero)** opened **[SPR-9681](https://jira.spring.io/browse/SPR-9681?redirect=false)** and commented  see:  https://github.com/SpringSource/spring-framework/pull/119/files   ---  **Affects:** 3.1.2, 3.2 M1","closed","type: enhancement,","spring-projects-issues","2012-08-12T09:12:54Z","2012-10-31T11:33:58Z"
"","14190","Add support for Hive JDBC ErrorCodes in sql-error-codes.xml [SPR-9556]","**[Mark Pollack](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.pollack)** opened **[SPR-9556](https://jira.spring.io/browse/SPR-9556?redirect=false)** and commented  Hive's JDBC driver now supports error codes that can be mapped into Spring's DAO abstraction  See https://issues.apache.org/jira/browse/HIVE-3001 for information on the error codes.   --- No further details from [SPR-9556](https://jira.spring.io/browse/SPR-9556?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-07-02T21:24:33Z","2018-06-05T16:15:00Z"
"","14259","AnnotationAwareOrderComparator.sort has very misleading syntax [SPR-9625]","**[Mark Miller](https://jira.spring.io/secure/ViewProfile.jspa?name=m120miller)** opened **[SPR-9625](https://jira.spring.io/browse/SPR-9625?redirect=false)** and commented  Calling AnnotationAwareOrderComparator.sort(myArrayList); Does not result in the expected behavior.  We expected this to sort the list myArrayList using an AnnotationAwareOrderComparator, but instead it sorts it using the base class OrderComparator.  This is because sort is a static method on OrderComparator and is not defined on AnnotationAwareOrderComparator.  The implementation of sort on OrderComparator then uses the OrderComparator.INSTANCE variable which is an OrderComparator and not a AnnotationAwareOrderComparator.  I have also seen code samples that do this: Collections.sort(myArrayList, AnnotationAwareOrderComparator.INSTANCE); but it has a similar issue that INSTANCE is not defined on AnnotationAwareOrderComparator so it ends up using OrderComparator.INSTANCE which is a OrderComparator and not an AnnotationAwareOrderComparator.  Recommend redefining the static INSTANCE field and sort methods on AnnotationAwareOrderComparator so the static methods on OrderComparator are not inadvertently called.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dae4485155096c1b9db1389fc90058c48d8e7906","closed","type: enhancement,","spring-projects-issues","2012-07-23T11:47:30Z","2013-01-16T04:53:42Z"
"","14288","Revisit AbstractEnvironment constructor invocation of protected #customizePropertySources [SPR-9654]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-9654](https://jira.spring.io/browse/SPR-9654?redirect=false)** and commented  This can lead to an implicit ""escaping"" of the yet-to-be-initialized instance. It's more subtle than an explicit escape of a ""this"" reference, but it still allows the instance to be used before it is fully initialized (e.g. any explicit or implicit ""this"" references within the overridden method).  This is a decent explanation of the potential consequences: https://www.securecoding.cert.org/confluence/display/java/MET05-J.+Ensure+that+constructors+do+not+call+overridable+methods  I discovered this while trying to create a custom Environment subclass that initializes a couple of its own final instance varirables within its constructor and then attempts to use those in its overriding implementation of customizePropertySources(..).  ---  **Affects:** 3.1.2  **Issue Links:** - #13652 AbstractEnvironment should not call overridable method from constructor (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-07-30T09:23:25Z","2019-01-11T13:00:02Z"
"","13969","Support HTTP status code 306 [SPR-9331]","**[Mariusz Mscichowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mm5100)** opened **[SPR-9331](https://jira.spring.io/browse/SPR-9331?redirect=false)** and commented  HTTP Status code 306 is not supported by org.springframework.http.HttpStatus  Should be (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)  2012-04-18 14:03:29,184 [http-8080-1] DEBUG org.springframework.web.servlet.handler.SimpleMappingExceptionResolver - Resolving exception from handler [com.hurra.shop.mashup.web.httpStatusTest@4976d6]: java.lang.IllegalArgumentException: No matching constant for [306] 2012-04-18 14:03:29,184 [http-8080-1] DEBUG org.springframework.web.servlet.handler.SimpleMappingExceptionResolver - Resolving to default view 'uncaughtException' for exception of type [java.lang.IllegalArgumentException] 2012-04-18 14:03:29,184 [http-8080-1] DEBUG org.springframework.web.servlet.handler.SimpleMappingExceptionResolver - Exposing Exception as model attribute 'exception' 2012-04-18 14:03:29,184 [http-8080-1] DEBUG org.springframework.web.servlet.DispatcherServlet - Handler execution resulted in exception - forwarding to resolved error view: ModelAndView: reference to view with name 'uncaughtException'; model is {exception=java.lang.IllegalArgumentException: No matching constant for [306]} java.lang.IllegalArgumentException: No matching constant for [306] at org.springframework.http.HttpStatus.valueOf(HttpStatus.java:369) at com.hurra.proxy.integration.IntegrationPreparationChain.resolveHttpStatus(IntegrationPreparationChain.java:169) at com.hurra.proxy.integration.IntegrationPreparationChain.doProcess(IntegrationPreparationChain.java:132) at com.hurra.proxy.integration.AbstractRequestPreparationChain.processInternal(AbstractRequestPreparationChain.java:77) at com.hurra.proxy.integration.AbstractRequestPreparationChain.prepare(AbstractRequestPreparationChain.java:50) at com.hurra.proxy.integration.HttpInboundForwardingGateway.handleRequest(HttpInboundForwardingGateway.java:50) at com.hurra.shop.mashup.web.AbstractForwardingController.handleRequest(AbstractForwardingController.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:176) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:426) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:414) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) at java.lang.Thread.run(Thread.java:662)   ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2012-04-18T05:18:18Z","2019-01-12T16:36:31Z"
"","13942","Provide some synchronization between @Cacheable and @CacheEvict annotated methods [SPR-9304]","**[Mario Philipps](https://jira.spring.io/secure/ViewProfile.jspa?name=mph)** opened **[SPR-9304](https://jira.spring.io/browse/SPR-9304?redirect=false)** and commented  In many cases, `@Cacheable` annotated methods will read a given resource (such as a database table), and `@CacheEvict` annotated methods will update this resource. Unfortunately, there is a race condition that can lead to outdated cache contents. Consider the following schedule, with thread A reading the resource, thread B updating it:  A: entering `@Cacheable` A: reading resource in state 1 B: entering `@CacheEvict` B: updating resource to state 2 B: leaving `@CacheEvict`, invalidating the cache A: leaving `@Cacheable`, writing state 1 to the cache  Now the resource is in state 2, the cache in state 1, but marked valid.  It would be great if there was some (optional) synchronization between the two cache annotations, that prevents such a race condition, if possible even in multi-node configurations.  ---  **Affects:** 3.1.1  **Issue Links:** - #13892 Provide means to configure multithreaded access for cache abstraction - #14226 `@CacheRefresh` to request a refresh of a stale object in the cache - #16165 Support of ehcache's BlockingCache  5 votes, 14 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-04T14:13:18Z","2019-01-13T07:05:19Z"
"","13988","Possibility of creating multiple custom @RequestConditions [SPR-9350]","**[Marek Sebera](https://jira.spring.io/secure/ViewProfile.jspa?name=marek.sebera)** opened **[SPR-9350](https://jira.spring.io/browse/SPR-9350?redirect=false)** and commented  Inspired on this link: https://github.com/rstoyanchev/spring-mvc-31-demo I made my custom implementation of `@RequestCondition` can be seen on this link: http://stackoverflow.com/a/10336769/492624  As of now, we have to use subclass of `RequestMappingHandlerMapping`. Used `@Override` functions are `getCustomTypeCondition`, `getCustomMethodCondition`.  But both of these are designed to handle only single RequestCondition  ```java     @Override     protected RequestCondition getCustomMethodCondition(Method method) { ... }      @Override     protected RequestCondition getCustomTypeCondition(Class handlerType) { ... } ```  This should be changed so, that it can map multiple `@RequestCondition` classes.   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-04-26T08:59:34Z","2012-06-19T03:39:41Z"
"","13982","Update documentation with regards to overrid RequestMappingHandlerMapping and RequestMappingHandlerAdapter when using the MVC namespace [SPR-9344]","**[Marek Sebera](https://jira.spring.io/secure/ViewProfile.jspa?name=marek.sebera)** opened **[SPR-9344](https://jira.spring.io/browse/SPR-9344?redirect=false)** and commented  When using `mvc:annotation-driven` automagic, there must be an option to override default beans of RequestMappingHandlerMapping and RequestMappingHandlerAdapter.  https://github.com/rstoyanchev/spring-mvc-31-demo/issues/4#issuecomment-5338158  On the link above, we fell to problem, that even if we instantiate our own subclass of RequestMappingHandlerMapping, and put it in right order, before the processing of default bean instance, we're not able to override it, nor configure it. Which is causing problems for example to implement `@RequestCondition`.  In XML, there should be possibility to ref our own implementation of these beans:  1. RequestMappingHandlerMapping 2. RequestMappingHandlerAdapter 3. ExceptionHandlerExceptionResolver  Not forcing us to use BeansPostProcessor, as an ugly solution to reconfigure default given beans.   ---  **Affects:** 3.0 GA, 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3f0b6e2d664bf232e3468acac2eba0e39dab4ab","closed","type: enhancement,","spring-projects-issues","2012-04-25T23:24:06Z","2012-09-10T18:15:25Z"
"","14173","Bridge methods in @Configuration classes ""randomly"" leads to infinite recursion during context [SPR-9539]","**[Marcus Schulte](https://jira.spring.io/secure/ViewProfile.jspa?name=mschulte)** opened **[SPR-9539](https://jira.spring.io/browse/SPR-9539?redirect=false)** and commented  The following code runs fine on some JRE versions, but regularly (not always) fails on others, among them JDK 1.7.0_05. It works always fine iff the covariant override of `Number x()` is avoided.  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(loader = AnnotationConfigContextLoader.class) public class BugTest {     @Autowired     Number z;      @Test     public void doNothingInParticular() {         Assert.assertThat( z, CoreMatchers.equalTo(new Long(13)));     }      public interface I {         Number x();         String y();     }      @Configuration     public static class C implements I {         @Override @Bean         public Long x() {             return 13L;         }          @Override @Bean         public String y() {             return ""17"";         }     } } ```  I've traced it down to an apparent failure of cglib's `MethodProxy.invokeSuper()` method. It seems to randomly mix-up indexes of methods it is using in the FastClass thingy whenever bridge-methods are involved. I've tried different versions of cglib, including 2.2.2.   ---  **Affects:** 3.1.1  **Attachments:** - [threads_report.txt](https://jira.spring.io/secure/attachment/19989/threads_report.txt) (_683.25 kB_)","closed","in: core,","spring-projects-issues","2012-06-24T12:47:44Z","2019-01-12T05:28:30Z"
"","14195","Documentation for AbstractResource.getFilename() says 'throws IllegalAccessException' when in fact it returns null [SPR-9561]","**[Marco Ellwanger](https://jira.spring.io/secure/ViewProfile.jspa?name=mellster2012)** opened **[SPR-9561](https://jira.spring.io/browse/SPR-9561?redirect=false)** and commented  Documentation for AbstractResource.getFilename() says 'throws IllegalAccessException' when in fact it returns null.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b488ae60091ec8e270aa63f70cc97b97505d9a0a, https://github.com/spring-projects/spring-framework/commit/8bd1fd3715c3693e4445f40360d41125ea8a4431","closed","in: core,","spring-projects-issues","2012-07-03T20:50:10Z","2012-07-04T14:32:38Z"
"","13835","HTTP response code 308 [SPR-9197]","**[Marcin Kamionowski](https://jira.spring.io/secure/ViewProfile.jspa?name=kamionowski)** opened **[SPR-9197](https://jira.spring.io/browse/SPR-9197?redirect=false)** and commented  RestTemplate cannot return HTTP response code 308 because it's not defined in the HttpStatus enumeration. It's required for resumable POST/PUT HTTP requests in HTTP/1.0 (http://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal)  ---  **Issue Links:** - #13626 Add the ability to Scan Packages for JAXB Marshalling (java example provided) (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2012-03-04T03:13:44Z","2019-01-12T16:48:10Z"
"","14356","Default values in property placeholder hierarchy applied too early [SPR-9722]","**[Marcel Stör](https://jira.spring.io/secure/ViewProfile.jspa?name=marcelstoer)** opened **[SPR-9722](https://jira.spring.io/browse/SPR-9722?redirect=false)** and commented  With #9462 support for default values was added.  However, I observed that they are applied too early if you have a hierarchy or cascade of property placeholder configurers: - Spring loops through the prioritized list of configurers - if property X is not found in the first configurer the default value is returned   --> the whole list should be processed first before the default value is used  ---  **Affects:** 3.1.1  **Issue Links:** - #14292 `@Value` assigns the default property value (if specified) before all property locations are examined, resulting in assigning a default to a property which is defined in a properties file. (_**""is duplicated by""**_)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2012-08-24T01:01:54Z","2019-01-13T07:03:24Z"
"","13979","@Scheduled Tasks keep JVM hanging when standalone program wants to exit, JVM needs to be killed [SPR-9341]","**[Marcel Sauer](https://jira.spring.io/secure/ViewProfile.jspa?name=niesfisch)** opened **[SPR-9341](https://jira.spring.io/browse/SPR-9341?redirect=false)** and commented  take the following steps to recreate the bug (see sample.zip attached). tried with 3.1.1.RELEASE and 3.0.3.RELEASE. seems to be a smilier problem to #11890  1. sample.xml  ---  \  \                  \ 2. Showcase.java  ---  import org.springframework.context.support.ClassPathXmlApplicationContext;  public class Showcase {      public static void main (String[] args) {     	System.out.println(""starting"");     	ClassPathXmlApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(""sample.xml"");     	classPathXmlApplicationContext.registerShutdownHook();     	System.out.println(""registered shutdown hook"");     	System.out.println(""done"");                 // classPathXmlApplicationContext.close(); // THIS WOULD FIX THE PROBLEM, but according to the docs is is not needed, 3.6.1.6 Shutting down the Spring IoC container gracefully in non-web applications     }  }  3. SampleTask.java  ---  package sample;  import org.springframework.scheduling.annotation.Scheduled; import org.springframework.stereotype.Component;  `@Component` public class SampleTask {      @Scheduled(fixedRate = 3000)     public void sampleTask () {     	System.out.println(""task run ...."");     }  }  4. run the Showcase.java  ---  expected behavior: JVM shuts down actual behavior: JVM and task keep running even after method ""main"" is left. (when deleting the ""`@Scheduled`"" annotation JVM correctly shuts down)  starting Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@378f6235: startup date [Tue Apr 24 16:22:22 CEST 2012]; root of context hierarchy Loading XML bean definitions from class path resource [sample.xml] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@7174d93a: defining beans [sampleTask,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,org.springframework.context.annotation.internalAsyncAnnotationProcessor,org.springframework.context.annotation.internalScheduledAnnotationProcessor,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0]; root of factory hierarchy registered shutdown hook done task run .... task run .... task run .... task run ....  ---  **Affects:** 3.0.3, 3.1.1  **Attachments:** - [sample.zip](https://jira.spring.io/secure/attachment/19611/sample.zip) (_25.23 kB_)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2012-04-24T07:42:41Z","2019-01-13T07:05:06Z"
"","14566","Avoid NullPointerException in ObjectToObjectConverter [SPR-9933]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9933](https://jira.spring.io/browse/SPR-9933?redirect=false)** and commented  I'm seeing the below conversion error with the latest 3.2.0.BUILD-SNAPSHOT. With the same code this is not happening on 3.2.0.M2.  The code is only adding a basic model attribute (which is JPA entity with JSR303 annotations) and the particular view is using the  tag to print errors if any.  ``` 15:07:27,935 ERROR [org.springframework.web.servlet.tags.form.ErrorsTag] - Failed to convert from type @org.hibernate.validator.constraints.NotBlank @org.hibernate.validator.constraints.Length java.lang.String to type java.lang.String for value 'null'; nested exception is java.lang.NullPointerException org.springframework.core.convert.ConversionFailedException: Failed to convert from type @org.hibernate.validator.constraints.NotBlank @org.hibernate.validator.constraints.Length java.lang.String to type java.lang.String for value 'null'; nested exception is java.lang.NullPointerException 	at org.springframework.core.convert.support.ObjectToObjectConverter.convert(ObjectToObjectConverter.java:71) 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:166) 	at org.springframework.validation.AbstractPropertyBindingResult.formatFieldValue(AbstractPropertyBindingResult.java:125) 	at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:222) 	at org.springframework.web.servlet.support.BindStatus.(BindStatus.java:120) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:178) 	at org.springframework.web.servlet.tags.form.ErrorsTag.shouldRender(ErrorsTag.java:140) 	at org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(AbstractHtmlElementBodyTag.java:47) 	at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:102) 	at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:79) 	at org.apache.jsp.WEB_002dINF.views.user.form_jsp._jspService(form_jsp.java:166) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377) 	at org.apache.jasper.servlet.JspServlet._serviceJspFile(JspServlet.java:313) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260) 	at com.google.appengine.tools.development.PrivilegedJspServlet.access$101(PrivilegedJspServlet.java:23) 	at com.google.appengine.tools.development.PrivilegedJspServlet$2.run(PrivilegedJspServlet.java:59) 	at java.security.AccessController.doPrivileged(Native Method) 	at com.google.appengine.tools.development.PrivilegedJspServlet.service(PrivilegedJspServlet.java:57) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) 	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390) 	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) 	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) 	at org.mortbay.jetty.handler.ContextHandler.__handle(ContextHandler.java:765) 	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java) 	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) 	at com.google.appengine.tools.development.DevAppEngineWebAppContext.handle(DevAppEngineWebAppContext.java:94) 	at org.mortbay.jetty.servlet.Dispatcher.include(Dispatcher.java:192) 	at org.apache.taglibs.standard.tag.common.core.ImportSupport.acquireString(ImportSupport.java:296) 	at org.apache.taglibs.standard.tag.common.core.ImportSupport.doEndTag(ImportSupport.java:161) 	at org.apache.jsp.WEB_002dINF.views.user.create_jsp._jspx_meth_c_005fimport_005f0(create_jsp.java:166) 	at org.apache.jsp.WEB_002dINF.views.user.create_jsp._jspx_meth_form_005fform_005f0(create_jsp.java:130) 	at org.apache.jsp.WEB_002dINF.views.user.create_jsp._jspService(create_jsp.java:81) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377) 	at org.apache.jasper.servlet.JspServlet._serviceJspFile(JspServlet.java:313) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260) 	at com.google.appengine.tools.development.PrivilegedJspServlet.access$101(PrivilegedJspServlet.java:23) 	at com.google.appengine.tools.development.PrivilegedJspServlet$2.run(PrivilegedJspServlet.java:59) 	at java.security.AccessController.doPrivileged(Native Method) 	at com.google.appengine.tools.development.PrivilegedJspServlet.service(PrivilegedJspServlet.java:57) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166) 	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129) 	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.appengine.tools.development.BackendServersFilter.doFilter(BackendServersFilter.java:97) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388) 	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) 	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) 	at org.mortbay.jetty.handler.ContextHandler.__handle(ContextHandler.java:765) 	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java) 	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) 	at com.google.appengine.tools.development.DevAppEngineWebAppContext.handle(DevAppEngineWebAppContext.java:94) 	at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:327) 	at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:126) 	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238) 	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:264) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1208) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:992) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:911) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:807) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:792) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166) 	at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:180) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:150) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:183) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:259) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.appengine.api.socket.dev.DevSocketFilter.doFilter(DevSocketFilter.java:74) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.appengine.tools.development.ResponseRewriterFilter.doFilter(ResponseRewriterFilter.java:123) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.appengine.tools.development.HeaderVerificationFilter.doFilter(HeaderVerificationFilter.java:34) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.appengine.api.blobstore.dev.ServeBlobFilter.doFilter(ServeBlobFilter.java:61) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.appengine.tools.development.StaticFileFilter.doFilter(StaticFileFilter.java:125) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at com.google.appengine.tools.development.BackendServersFilter.doFilter(BackendServersFilter.java:97) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388) 	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) 	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) 	at org.mortbay.jetty.handler.ContextHandler.__handle(ContextHandler.java:765) 	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java) 	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) 	at com.google.appengine.tools.development.DevAppEngineWebAppContext.handle(DevAppEngineWebAppContext.java:94) 	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) 	at com.google.appengine.tools.development.JettyContainerService$ApiProxyHandler.handle(JettyContainerService.java:383) 	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) 	at org.mortbay.jetty.Server.handle(Server.java:326) 	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542) 	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923) 	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:547) 	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) 	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) 	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) 	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582) Caused by: java.lang.NullPointerException 	at java.lang.String.(String.java:147) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:513) 	at com.google.appengine.tools.development.agent.runtime.Runtime.newInstance_(Runtime.java:127) 	at com.google.appengine.tools.development.agent.runtime.Runtime.newInstance(Runtime.java:135) 	at org.springframework.core.convert.support.ObjectToObjectConverter.convert(ObjectToObjectConverter.java:66) 	... 144 more ```  ---  **Affects:** 3.2 RC1  **Issue Links:** - #14341 Support flexible formatting for resolved message codes (_**""is depended on by""**_)","closed","type: bug,","spring-projects-issues","2012-10-30T07:14:42Z","2019-01-11T14:18:42Z"
"","14522","Add Grails like BootStrap functionality [SPR-9889]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9889](https://jira.spring.io/browse/SPR-9889?redirect=false)** and commented  It would be very nice to have simple BootStrap functionality [like Grails](http://grails.org/Bootstrap+Classes) available:  ``` class BootStrap {  	def init = { servletContext -> 	}  	def destroy = { 	} } ```  It would be nice to configure such classes in AppConfig or maybe just an annotation would be enough?  ---  **Issue Links:** - #14521 Improved support for 'containerless' web application architectures","closed","type: enhancement,","spring-projects-issues","2012-10-18T03:30:47Z","2019-01-11T13:22:32Z"
"","14451","@ControllerAdvice throws java.lang.IllegalStateException: DataBinder is already initialized - call setAutoGrowNestedPaths before other configuration methods [SPR-9818]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9818](https://jira.spring.io/browse/SPR-9818?redirect=false)** and commented  I'm trying to change the 'AutoGrowNestedPaths' globally using a `@ControllerAdvice` as:  ``` import org.springframework.web.bind.WebDataBinder; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.InitBinder;  @ControllerAdvice public class DisableAutoGrowNestedPaths {  	@InitBinder 	public void initBinder(WebDataBinder binder) { 		binder.setAutoGrowNestedPaths(false); 	} } ```  but I get this exception:  ``` ava.lang.IllegalStateException: DataBinder is already initialized - call setAutoGrowNestedPaths before other configuration methods at org.springframework.util.Assert.state(Assert.java:384) at org.springframework.validation.DataBinder.setAutoGrowNestedPaths(DataBinder.java:196) at org.mycom.web.DisableAutoGrowNestedPaths.initBinder(GlobalTest.java:13) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:219) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) at org.springframework.web.method.annotation.InitBinderDataBinderFactory.initBinder(InitBinderDataBinderFactory.java:62) at org.springframework.web.bind.support.DefaultDataBinderFactory.createBinder(DefaultDataBinderFactory.java:52) at org.springframework.web.method.annotation.ModelFactory.updateBindingResult(ModelFactory.java:222) at org.springframework.web.method.annotation.ModelFactory.updateModel(ModelFactory.java:206) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.getModelAndView(RequestMappingHandlerAdapter.java:814) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:723) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:660) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:915) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:804) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:789) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:170) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:90) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:90) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:90) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:602) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) at java.lang.Thread.run(Thread.java:680) 500.jsp ```  Note that when I move this `@InitBinder` to a controller I get the same exception.  I'm using a Java config setup using WebMvcConfigurerAdapter with only basic configurations.  On a related note I wonder if there is a better way to set the 'AutoGrowNestedPaths' globally, e.g. in my WebConfig.java WebMvcConfigurerAdapter?   ---  **Affects:** 3.2 M2, 4.0 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/7b8508d8df4975ffaae2f0fb88da4b8cc8eae8cc  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2012-09-21T14:13:20Z","2019-01-12T16:25:07Z"
"","14433","Please add Entity classes to the ObjectToStringConverter [SPR-9800]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9800](https://jira.spring.io/browse/SPR-9800?redirect=false)** and commented  Please add Entity classes to the ObjectToStringConverter.  In most cases Entity classes provide a meaningful toString implementation, so I think it's ok to add them to the ObjectToStringConverter.  Currently I'm using relying on  for all my outputs, but in case of  this won't work unless you hace provide a custom converter.   ---  **Affects:** 3.2 M2  **Attachments:** - [EntityToStringConverter.java](https://jira.spring.io/secure/attachment/20513/EntityToStringConverter.java) (_773 bytes_)","closed","type: enhancement,","spring-projects-issues","2012-09-14T05:40:20Z","2013-01-11T12:41:17Z"
"","14354","Add addCustomArgumentResolvers to WebMvcConfigurerAdapter [SPR-9720]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9720](https://jira.spring.io/browse/SPR-9720?redirect=false)** and commented  When using Java config there is no way to add custom argument resolvers.  What I'm trying to achieve is:  ```                          ```  As workaround I tried something like below in my WebConfig:  ``` @Bean public AnnotationMethodHandlerAdapter annotationMethodHandlerAdapter() {      AnnotationMethodHandlerAdapter bean = new AnnotationMethodHandlerAdapter();      bean.setCustomArgumentResolver(new PageableArgumentResolver());      return bean; } ```  but it didn't worked.   ---  **Affects:** 3.1.2","closed","type: enhancement,","spring-projects-issues","2012-08-23T13:16:01Z","2012-08-30T07:42:38Z"
"","14341","Support flexible formatting for resolved message codes [SPR-9707]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9707](https://jira.spring.io/browse/SPR-9707?redirect=false)** and commented  Maybe it would be a nice idea to enhance the current DefaultMessageCodesResolver with an option of a 'reversed' code resolving.  The current DefaultMessageCodesResolver uses e.g. 1.: code + ""."" + object name + ""."" + field 2.: code + ""."" + field 3.: code + ""."" + field type 4.: code  which would result in messages.properties like: product.code.label=Code # used for form label; not related to validation! NotBlank.product.code=May not be null MaxSize.product.code=To long  E.g. using new option of DefaultMessageCodesResolver we could e.g. force it to use: 1.: object name + ""."" + field + ""."" + code 2.: field + ""."" + code 3.: field type + ""."" + code 4.: code  which would result in messages.properties like: product.code.label=Code # used for form label; not related to validation! product.code.NotBlank=May not be null product.code.MaxSize=To long  This 'looks' more consistent and convienient in message.properties.  ---  **Affects:** 3.1.2  **Issue Links:** - #14566 Avoid NullPointerException in ObjectToObjectConverter (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/21760a8b6b030233d4a82d8026bc9910e0a93ea5, https://github.com/spring-projects/spring-framework/commit/38bfb2bd893f062a9d90d3cfd14a2b0d619a4b5a, https://github.com/spring-projects/spring-framework/commit/7c399d795e7521f8b178ca72a798da92b6b7e9c1","closed","type: enhancement,","spring-projects-issues","2012-08-19T00:39:59Z","2019-01-11T13:30:52Z"
"","14016","Resolving ${} system properties in @PropertySource annotation does not work anymore [SPR-9380]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9380](https://jira.spring.io/browse/SPR-9380?redirect=false)** and commented  I have the blow AppConfig class in my project:  ``` @Configuration @ComponentScan(basePackages = { ""my.project"" }) @PropertySource({ ""classpath:/META-INF/config.properties"", ""classpath:/META-INF/config-${my.runtime.environment}.properties"" }) public class AppConfig {  	private static Log LOG = LogFactory.getLog(AppConfig.class);  	@Bean 	public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() { 		return new PropertySourcesPlaceholderConfigurer(); 	} ```  Resolving the ${my.runtime.environment} in the `@PropertySource` does not work anymore in Spring 3.1.1 while I was just upgrading from 3.1.0. The same code works fine in 3.1.0 but gives this error in 3.1.1:  ``` Failed to load bean class: mt.project.config.AppConfig; nested exception is java.io.FileNotFoundException: class path resource [META-INF/config-${my.runtime.environment}.properties] cannot be opened because it does not exist ```  The config file exists and the system property is set (I logged that as well), and just to mention it again. In 3.1.0 this works fine.  ---  **Affects:** 3.1.1  **Issue Links:** - #13772 Fix regression in `@PropertySource` placeholder resolution (_**""duplicates""**_) - #13766 `@PropertySource` annotation with multiple values and a name fails to register all property sources (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2012-05-05T12:54:22Z","2019-01-13T07:04:54Z"
"","13859","Extend  with something like errorElement [SPR-9221]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9221](https://jira.spring.io/browse/SPR-9221?redirect=false)** and commented  It would be nice to add more flexibility to the  tag. E.g. to render something like  \ \error1\ \error2\ \  With element=""ul"" a part can be implemented but the \ element is not possible. The delimiter attribute just outputs it content after eacht error.  Maybe the  tag can be extended with something like errorElement or itemElement indicating a wrapper element for the each error.  Something like this:    ---  **Affects:** 3.1.1  **Issue Links:** - #8073 Better error handling from the  tag (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-03-10T11:47:25Z","2019-01-11T12:44:28Z"
"","13850","Add  tag to form taglib [SPR-9212]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9212](https://jira.spring.io/browse/SPR-9212?redirect=false)** and commented  Just ass something like  ``` Product Group: ```  a equivalent  ``` Product Groep: ```  would be very useful.  Let me explain by the below example:  ```  	Gender:      	      	Male      	      	Female  ```  Note the use of the legend element to semantically show the 'label'/legend for the group of radiobuttons. A ordinary label (instead of the legend) is semantically incorrect as both inputs basically form the element and already have their own labels.  The above example can be translated to Spring form tags easily except the legend tag.  Summarizing, something like:  ``` Gender: should do the trick. ```  (Note that above code snippet is based on jQuery Mobile's code exmaples)   ---  **Reference URL:** http://forum.springsource.org/showthread.php?124005-How-to-check-if-particular-has-an-error-(in-jsp)&p=404712#post404712","closed","status: bulk-closed,","spring-projects-issues","2012-03-09T05:26:52Z","2019-01-12T03:48:57Z"
"","13843","Add feature to WebMvcConfigurerAdapter to add Controllers programatically [SPR-9205]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9205](https://jira.spring.io/browse/SPR-9205?redirect=false)** and commented  Sometime component scanning is not an option. E.g. when deploying to app engine it is sometimes better to define the application beans explicitly to reduce startup times.  In my case I wanted to define the Controller calsses explicitly in a easy way but did not found it.  I was thinking adding something like  ```java @Override public void addControllers(ControllerRegistry registry) {     registry.addController(MyController.class); } ```  to WebMvcConfigurerAdapter would be usefull.  This is also in line with  ```java @Override public void addViewControllers(ViewControllerRegistry registry) {     registry.addViewController(""/someView""); } ```    ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/shrogrowthread.php?123920-Adding-Controllers-pamatically&highlight=postProcessBeanDefinitionRegistry+controller  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-06T05:10:14Z","2012-09-11T02:24:30Z"
"","14369","StackOverflowError when expression calls method which is a Collection of itself [SPR-9735]","**[Marc Wielansky](https://jira.spring.io/secure/ViewProfile.jspa?name=mwielansky)** opened **[SPR-9735](https://jira.spring.io/browse/SPR-9735?redirect=false)** and commented  StackOverflowError results from ReflectiveMethodExecutor.execute(EvaluationContext, Object, Object...) line: 69	when returned object is a collection of itself.  Example:  expression: ""manager.getItem()"" method: public Item getItem() { return item; } class: public class Item implements List\ - this object has properties, but also is a list of items of the same type  ---  **Affects:** 3.1.1, 3.2.8  **Attachments:** - [Item.java](https://jira.spring.io/secure/attachment/22349/Item.java) (_2.30 kB_) - [ReflectiveMethodExecutorTest.java](https://jira.spring.io/secure/attachment/22348/ReflectiveMethodExecutorTest.java) (_878 bytes_)  **Issue Links:** - #15622 util:map does not recognize the attribute of value-type","closed","in: core,","spring-projects-issues","2012-08-28T12:49:02Z","2019-01-11T13:34:37Z"
"","13868","Elvis operator order of operations [SPR-9230]","**[Marc Wielansky](https://jira.spring.io/secure/ViewProfile.jspa?name=mwielansky)** opened **[SPR-9230](https://jira.spring.io/browse/SPR-9230?redirect=false)** and commented  These two operations do not return the same value: ""foo?:false and bar?:false"" ""(foo?:false) and (bar?:false)"" when foo=true and bar=false    --- No further details from [SPR-9230](https://jira.spring.io/browse/SPR-9230?redirect=false)","closed","in: core,","spring-projects-issues","2012-03-12T15:15:20Z","2019-01-12T16:36:37Z"
"","13867","SpringEL Elvis operator fails with SpelEvaluationException when Property/Field is not found [SPR-9229]","**[Marc Wielansky](https://jira.spring.io/secure/ViewProfile.jspa?name=mwielansky)** opened **[SPR-9229](https://jira.spring.io/browse/SPR-9229?redirect=false)*** and commented  Elvis operator does not work as expected when a property is not accessible. I would expect this scenario to treat a value as null when not found rather than throw an exception.  ``` org.springframework.expression.spel.SpelEvaluationException: EL1008E:(pos 0): Field or property 'xxx' cannot be found on object of type 'xxxxx' 	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:208) 	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:72) 	at org.springframework.expression.spel.ast.Elvis.getValueInternal(Elvis.java:44) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97) 	at org.springframework.binding.expression.spel.SpringELExpression.getValue(SpringELExpression.java:84) 	... 49 more ```    ---  **Affects:** 3.0.5  4 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-03-12T15:02:28Z","2019-01-12T16:36:38Z"
"","14307","Memory Leak Quartz Hibernate [SPR-9673]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-9673](https://jira.spring.io/browse/SPR-9673?redirect=false)** and commented  A while back I ran into some memory leak problems identified through profiling. They were ultimately resolved by the answer at the reference url.  Basically, if a Hibernate Session was used within a method called through Quartz, the Hibernate Session would not clear it's session and retain more and more. I just ran into the issue again and I thought I would report it. The reference url provides a thorough explanation of the why and how.   ---  **Affects:** 3.1.1  **Reference URL:** http://stackoverflow.com/questions/1071631/trying-to-track-down-a-memory-leak-garbage-collection-problem-in-java","closed","status: bulk-closed,","spring-projects-issues","2012-08-07T11:09:49Z","2019-01-12T02:46:50Z"
"","14172","Optionally improve memory use by sharing Cache Elements across Cache keys [SPR-9538]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-9538](https://jira.spring.io/browse/SPR-9538?redirect=false)** and commented  When you Cache a Collection of elements, you are caching the entire collection as an entry.  The underlying elements can also be part of other `@Cacheable` entries, leading to duplicates and unnecessary memory consumption. Let's take the scenario of a Facebook Wall where a WallPost can be shared across hundreds of Walls with each Wall being a different collection of elements. Caching each collection would quickly become impossible or inefficient with high memory use and high numbers of cache refreshes.  If the item to be cached is a collection, it could be considered to cache each individual element separately and cache the collection as a collection of references to the individual entries.  EhCache supports this with the putAll method.  Ideally you should be able to configure this so that the following `@Cacheable` methods  mgr.getItem(Long id); mgr.getItems(); mgr.getItems(Long userId);  all take their items from the same pool.  When a collection requests items that are not available in the pool, even more ideally, a dao request would be made for the missing items.  ---  **Affects:** 3.1.1  **Issue Links:** - #17326 Caching strategy (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-06-24T09:23:10Z","2019-01-11T13:08:24Z"
"","14054","Integrate RedirectAttributes with ModelMap [SPR-9418]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-9418](https://jira.spring.io/browse/SPR-9418?redirect=false)** and commented  I have been playing around with RedirectAttributes and although I like the FlashAttribute function, I don't really like the way it has been implemented. For me, FlashAttributes come into play in the GET/POST/Redirect/displayStatus chain. What I don't like is that FlashAttributes aren't a transparent part of the ModelMap but instead separated through RedirectAttributes. I would prefer to say  model.addFlashAttribute(...) in stead of having the specify RedirectAttributes separately redirectAttributes.addFlashAttribute(...).  Also, when I add a FlashAttribute to a Model/RedirectAttributes and I don't redirect, I expect the FlashAttribute to be treated as a normal model attribute. and because they are separate, it isn't.  In the flow of a Controller, whether one redirects often depends on the context. And because RedirectAttributes are separate from ModelAttributes (when they are conceptually the same), I find myself having to duplicate certain actions, which is exactly what I want to avoid.  ``` if(!member.isActive()){    redirectAttributes.addFlashAttribute(""status"",""Denied"",RequestUtils.getLocale(request)));    model.addAttribute(""status"",""Denied"",RequestUtils.getLocale(request))); }  if(group.isHiddenToNonMembers()){    return ""empty""; }else{    return ""redirect:"" + URLUtils.getGroupUrl(group, request); } ```  What I would expect is to have a single action against the ModelMap model.addFlashAttribute(...) if the controller redirects, it is treated as a flash attribute if the controller doesn't redirect, it treated as a model attribute   --- No further details from [SPR-9418](https://jira.spring.io/browse/SPR-9418?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-05-16T09:55:48Z","2019-01-11T12:43:26Z"
"","14003","Ambiguous handler mapping exception for unambiguous mappings [SPR-9366]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-9366](https://jira.spring.io/browse/SPR-9366?redirect=false)** and commented  ``` @Controller @RequestMapping(""/my"") public class MyController extends ExtendedController  @RequestMapping(method = RequestMethod.POST, value = ""/post/"") 	public String post( 		@ModelAttribute(""vo"") MyVO vo, 	        BindingResult result, 	        ModelMap model, 	        NativeWebRequest request) throws Exception{ [...]  @Controller @RequestMapping(""/my/extend"") public class MyController extends ExtendedController  @RequestMapping(method = RequestMethod.POST, value = ""/post/"") 	public String extendPost( 		@ModelAttribute(""vo"") MyVO vo, 	        BindingResult result, 	        ModelMap model, 	        NativeWebRequest request) throws Exception{  ```  This leads to  ``` java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP path '/my/extend/post/': {public java.lang.String nlproject.controller.MyExtendController.extendPost(nl.project.VO.MyVO,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap,org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception, public java.lang.String nl.project.controller.MyController.post(nl.project.VO.MyVO,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap,org.springframework.web.context.request.NativeWebRequest)}. If you intend to handle the same path in multiple methods, then factor them out into a dedicated handler class with that path mapped at the type level! 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodResolver.resolveHandlerMethod(AnnotationMethodHandlerAdapter.java:642) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:431) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:424) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:923) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:789) ```  The exception suggests that the paths are identical, which they are not. Apparently, Spring checks for path uniqueness at the method level without taking into account the base mapping at the classlevel.  ---  **Issue Links:** - #13891 Controller extension doesn't allow extending REST Urls (_**""is duplicated by""**_)","closed","status: declined,","spring-projects-issues","2012-05-02T05:50:48Z","2019-01-12T16:36:27Z"
"","13989","Apostrophe in MessageSource text leads to {0} not being replaced [SPR-9351]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-9351](https://jira.spring.io/browse/SPR-9351?redirect=false)** and commented  ``` messages.getMessage(""error.accountnotactivated"", new Object[] {getNewActivationLinkUrl(user)}, locale) ```  ``` Your account hasn't been activated yet. Please activate it by clicking on the registration email you received. If you do not have the registration email (anymore), click here. ```  ``` Your account has not been activated yet. Please activate it by clicking on the registration email you received. If you do not have the registration email (anymore), click here. ```  In the first case, the {0} will **not** be replaced by the url you had in mind for it. In the second case, it will be.  An absolute nightmare. Imagine developing a multilingual site and you have to make sure nobody ever accidently uses an apostrophe in a text with a {0}. And in English there is an alternative ""hasn't has not"". Lots of under language don't offer this option. And it's not exactly the easiest thing to debug either.  Not the first issue with an apostrophe in the text.  ---  **Affects:** 3.1.1  **Issue Links:** - #13807 Apostrophe not being displayed correctly in MessageSource  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-04-27T14:39:14Z","2019-01-12T03:48:41Z"
"","13930","MissingServletRequestParameterException should report class and method [SPR-9292]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-9292](https://jira.spring.io/browse/SPR-9292?redirect=false)** and commented  I sometimes see these kinds of errors in the production log appearing  ``` ERROR [2012-03-31 15:12:30,480] MySimpleExceptionResolver.doResolveException(40) | org.springframework.web.bind.MissingServletRequestParameterException: Required Integer  parameter 'sze' is not present org.springframework.web.bind.MissingServletRequestParameterException: Required Integer parameter 'sze' is not present         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.raiseMissingParameterException(AnnotationMethodHandlerAdap ter.java:766)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveRequestParam(HandlerMethodInvoker.java:509)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:348)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:171)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:436)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:424)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:923)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)  ```  Sometimes, the parameter name is unique and I will be able to find the method in question quickly. But often times, this is not the case. An error like this should report the Class plus the Method that created this error so that we can investigate the issue without guessing   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-03-31T08:59:04Z","2012-08-20T08:34:55Z"
"","13891","Controller extension doesn't allow extending REST Urls [SPR-9253]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-9253](https://jira.spring.io/browse/SPR-9253?redirect=false)** and commented  This is best explained by an example  ```java @Controller  @RequestMapping(""/base"") public class MyController{  	@RequestMapping(method = RequestMethod.GET, value = ""/start.html"") 	public String doSomething( 			ModelMap model, 			NativeWebRequest request) throws Exception { [...]  	@RequestMapping(method = RequestMethod.POST, value = ""/start.html"") 	public String doSomething( 			@ModelAttribute(""vo"") MyVO vo, 			BindingResult result, 			ModelMap model, 			NativeWebRequest request) throws Exception { [...] } ```  ```java @Controller  @RequestMapping(""/base/extend"") public class MyExtendedController extends MyController{  	@RequestMapping(method = RequestMethod.GET, value = ""/start.html"") 	public String doSomething( 			ModelMap model, 			NativeWebRequest request) throws Exception { [...]  	@RequestMapping(method = RequestMethod.POST, value = ""/start.html"") 	public String doSomething( 			@ModelAttribute(""vo"") MyVO vo, 			BindingResult result, 			ModelMap model, 			NativeWebRequest request) throws Exception { [...] } ```  This will make Spring think start.html occurs twice in the same controller and throw and IllegalStateException.  The reason to want to extend controllers is to be able to use common methods.  AFAIK, the only way to extend controllers is to use RequestMapping at the Controller level. It is not possible to just use RequestMappings at the method level in this scenario. I consider it very inelegant, especially in the context of REST, that the urlpath has to be unique at an endpoint level (""/start.html""). It should be unique taken into account the entire requestmapping (""/base/start.html"", ""/base/extend/start.html"".  ---  **Issue Links:** - #14003 Ambiguous handler mapping exception for unambiguous mappings (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2012-03-20T08:32:25Z","2019-01-12T16:48:04Z"
"","14058","memory leak [SPR-9422]","**[MaoWei](https://jira.spring.io/secure/ViewProfile.jspa?name=zsmszsms)** opened **[SPR-9422](https://jira.spring.io/browse/SPR-9422?redirect=false)** and commented  12 instance count for ...CMASettingsServiceImpl$$EnhancerByCGLIB$$94cc319a$$FastClassByCGLIB$$a1e7cbf3  11 instance count for ...AccountDataServiceImpl$$EnhancerByCGLIB$$5649b21b$$FastClassByCGLIB$$22974216  8 instance count for ...CMASettingsServiceImpl$$FastClassByCGLIB$$aab04ab4  These should be memory leak, right? how can I handle these?   ---  **Affects:** 2.5.5  **Attachments:** - [memoryleak.png](https://jira.spring.io/secure/attachment/19653/memoryleak.png) (_174.35 kB_)","closed","in: core,","spring-projects-issues","2012-05-18T02:18:20Z","2019-01-11T12:43:08Z"
"","14570","Error in ""13.4.3 Batch operations with multiple batches"" documentation [SPR-9937]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-9937](https://jira.spring.io/browse/SPR-9937?redirect=false)** and commented  In the sample code shown in the section ""13.4.3 Batch operations with multiple batches"", exists an extra loop without a reason to exists   ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?131488-Possible-error-in-quot-13-4-3-Batch-operations-with-multiple-batches-quot-documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/583819ca5f8771507fae70f2ce9a2417fac0c5b1","closed","type: bug,","spring-projects-issues","2012-10-31T06:43:02Z","2012-11-05T18:14:17Z"
"","14015","Broken external link in AbstractWireFeedHttpMessageConverter API [SPR-9379]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-9379](https://jira.spring.io/browse/SPR-9379?redirect=false)** and commented  The javadoc/API for AbstractWireFeedHttpMessageConverter does a reference to a broken link about Rome   ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?126121-Minor-Error-in-AbstractWireFeedHttpMessageConverter-API","closed","in: core,","spring-projects-issues","2012-05-04T17:34:58Z","2012-06-19T03:39:49Z"
"","13952","FreeMarkerConfigurer should allow setting a FreeMarker ObjectWrapper instance directly [SPR-9314]","**[Manish](https://jira.spring.io/secure/ViewProfile.jspa?name=manish.in.java)** opened **[SPR-9314](https://jira.spring.io/browse/SPR-9314?redirect=false)** and commented  org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer does not allow setting a FreeMarker ObjectWrapper instance directly (via a direct setter).  This forces developers to pass a custom freemarker.template.Configuration instance to org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.  Setting up a freemarker.template.Configuration can be very cumbersome, especially if teams use multiple template paths that are relative to the root web directory.  For example, we use freemarker.ext.beans.BeansWrapper in our applications and set exposeFields property on BeansWrapper to true.  It will be very useful if org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer allowed setting a FreeMarker ObjectWrapper instance directly.   ---  **Affects:** 3.1.1  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-07T09:38:06Z","2014-09-19T14:26:48Z"
"","14651","Implementation class used in MailSender send [SPR-10017]","**[Manfred Quasten](https://jira.spring.io/secure/ViewProfile.jspa?name=mquasten)** opened **[SPR-10017](https://jira.spring.io/browse/SPR-10017?redirect=false)** and commented  The Interface uses the Implementation SimpleMailMessage instead of the Interface MailMessage.  I remember that I've learned (a long time ago) that  interfaces should be used. When I do it in this way I must used ugly casts to be able to send my messages ...  final  MailMessage  mailMessage =  mailMessageFactory.create(); ... mailSender.send((SimpleMailMessage) mailMessage);    --- No further details from [SPR-10017](https://jira.spring.io/browse/SPR-10017?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-11-22T07:50:20Z","2019-01-12T00:25:29Z"
"","14556","Getting NullPointerException while opening Application Server [SPR-9923]","**[Manasa T M](https://jira.spring.io/secure/ViewProfile.jspa?name=manasa)** opened **[SPR-9923](https://jira.spring.io/browse/SPR-9923?redirect=false)** and commented  Hi All,  We are facing issue in accessing Application server after migrating the server from WAS 6.0 to WAS 8.0  [10/25/12 5:46:32:819 CDT] 00000028 webapp        E com.ibm.ws.webcontainer.webapp.WebApp logServletError SRVE0293E: [Servlet Error]-[SchedulerServlet]: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'queueConnectionFactory': Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)  .......... Caused by: java.lang.NullPointerException at org.springframework.core.GenericTypeResolver.getTypeVariableMap(GenericTypeResolver.java:144) at org.springframework.core.GenericTypeResolver.resolveReturnType(GenericTypeResolver.java:93) at org.springframework.beans.GenericTypeAwarePropertyDescriptor.getPropertyType(GenericTypeAwarePropertyDescriptor.java:58) at java.beans.PropertyDescriptor.setWriteMethod(PropertyDescriptor.java:111) at java.beans.PropertyDescriptor.\(PropertyDescriptor.java:77) at org.springframework.beans.GenericTypeAwarePropertyDescriptor.\(GenericTypeAwarePropertyDescriptor.java:47) at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:250) at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:144) at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:252) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:380) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1287) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1248) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1008) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 43 more  ---  We are using Maven to build and deploy our application to websphere server.  Please help me on this.  Thanks & Regards, Manasa T M  ---  **Affects:** 2.5.3  **Reference URL:** http://forum.springsource.org/showthread.php?34920-Problems-injecting-the-ConnectionFactory-and-Queue-into-DefaultMessageListenerContain","closed","status: invalid,","spring-projects-issues","2012-10-26T00:13:39Z","2019-01-13T21:05:18Z"
"","14479","Hibernate 4 class loading issue on JBoss 7 when hibernate & spring classes loaded by different classloaders [SPR-9846]","**[Maksym Gryevtsov](https://jira.spring.io/secure/ViewProfile.jspa?name=maksymg)** opened **[SPR-9846](https://jira.spring.io/browse/SPR-9846?redirect=false)** and commented  If you try to deploy the application on JBoss 7 using the built-in hibernate, you got this stack trace: 15:32:46,919 ERROR [org.hibernate.internal.SessionFactoryImpl] (MSC service thread 1-1) HHH000302: Unable to construct current session context [org.springframework.orm.hibernate4.SpringSessionContext]: org.hibernate.service.classloading.spi.ClassLoadingException: Unable to load class [org.springframework.orm.hibernate4.SpringSessionContext] at org.hibernate.service.classloading.internal.ClassLoaderServiceImpl.classForName(ClassLoaderServiceImpl.java:141) [hibernate-core-4.1.6.Final.jar:4.1.6.Final] at org.hibernate.internal.SessionFactoryImpl.buildCurrentSessionContext(SessionFactoryImpl.java:1491) [hibernate-core-4.1.6.Final.jar:4.1.6.Final] at org.hibernate.internal.SessionFactoryImpl.\(SessionFactoryImpl.java:502) [hibernate-core-4.1.6.Final.jar:4.1.6.Final] at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1746) [hibernate-core-4.1.6.Final.jar:4.1.6.Final] at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1784) [hibernate-core-4.1.6.Final.jar:4.1.6.Final] at org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:242) [spring-orm-3.1.2.RELEASE.jar:3.1.2.RELEASE] at org.springframework.orm.hibernate4.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:372) [spring-orm-3.1.2.RELEASE.jar:3.1.2.RELEASE] at org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:357) [spring-orm-3.1.2.RELEASE.jar:3.1.2.RELEASE]  After digging the code it looks like that the spring initialized hibernate in a way that ""hibernate.classLoader.application"" property is not used. As result hibernate try to use local classloader for loading class defined in ""hibernate.current_session_context_class""  ---  **Affects:** 3.1.2  **Issue Links:** - #15993 java.security.AccessControlException: Access denied (java.lang.RuntimePermission createClassLoader)","closed","type: bug,","spring-projects-issues","2012-10-01T15:41:54Z","2019-01-11T13:20:20Z"
"","13885","Missing TypeDescriptor.NULL when upgrading from Spring 3.0.x to 3.1.x -> Eclipse Gemini Blueprint cannot be upgraded [SPR-9247]","**[Magnus Jungsbluth](https://jira.spring.io/secure/ViewProfile.jspa?name=mjungsbluth)** opened **[SPR-9247](https://jira.spring.io/browse/SPR-9247?redirect=false)** and commented  This issue is similar to #13438 but in this case it affects external components (Eclipse Gemini Blueprint / former Spring DM)  When upgrading Spring from 3.0.x to 3.1.x with Gemini Blueprint in an OSGi environment, the system cannot be started:  java.lang.NoSuchFieldError: NULL	at org.eclipse.gemini.blueprint.blueprint.container.SpringBlueprintConverterService.convert(SpringBlueprintConverterService.java:93)  The problem is that SpringBlueprintConverterService accesses TypeDescriptor.NULL which has been removed in Spring 3.1. I haven't found any hints on why this was changed and how to replace code that relied on TypeDescriptor.NULL. I filed this as bug since it breaks API compatibility.  references: - http://www.eclipse.org/forums/index.php/t/305586/ - http://forum.springsource.org/showthread.php?123564-Upgrade-Issues-for-Spring-3-0-3-RELEASE-to-3-1-0-RELEASE  ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?123564-Upgrade-Issues-for-Spring-3-0-3-RELEASE-to-3-1-0-RELEASE  **Issue Links:** - #13438 NoSuchFieldError: org/springframework/core/convert/TypeDescriptor.NULL","closed","status: declined,","spring-projects-issues","2012-03-15T15:45:12Z","2019-01-12T16:58:57Z"
"","14517","AbstractJdbcInsert/SimpleJdbcInsert inserts nulls into columns with database defaults. [SPR-9884]","**[Magnus Jason](https://jira.spring.io/secure/ViewProfile.jspa?name=magnusj)** opened **[SPR-9884](https://jira.spring.io/browse/SPR-9884?redirect=false)** and commented  When AbstractJdbcInsert performs an insert, it will use every column in the table as retrieved from the table metadata. It will insert null values into every column that does not have a specified value(except for generatedKeyColumns).  AbstractJdbcInsert should only insert null values when they are specified. When a map is used it should insert nulls only if a null valued entry exists with a matching key. When a SqlParameterSource is used it should only insert a null if hasValue is true and getValue is false.  I have hacked in a patch that allows you to toggle this behavior with a boolean. I think it should be default behavior to not insert nulls.  I realize I can specify the columns to use , but I think that should be unnecessary.   ---  **Affects:** 3.1.1, 3.1.2, 3.2 M2","closed","in: core,","spring-projects-issues","2012-10-17T03:50:36Z","2019-01-12T16:25:00Z"
"","14316","ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForModelMethod should take into account the allowBeanDefinitionOverride settings [SPR-9682]","**[László Váradi](https://jira.spring.io/secure/ViewProfile.jspa?name=vazul)** opened **[SPR-9682](https://jira.spring.io/browse/SPR-9682?redirect=false)** and commented  The ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForModelMethod contains the following:      // has this already been overridden (e.g. via XML)?     if (this.registry.containsBeanDefinition(beanName)) {          BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);          // is the existing bean definition one that was created from a configuration class?          if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {               // no -> then it's an external override, probably XML               // overriding is legal, return immediately               if (logger.isDebugEnabled()) {                    logger.debug(String.format(""Skipping loading bean definition for %s: a definition for bean "" +                                      ""'%s' already exists. This is likely due to an override in XML."", beanMethod, beanName));               }               return;          }     }  But it is not true (""overriding is legal"") if the application context (AbstractRefreshableApplicationContext) is set to disallow it by setAllowBeanDefinitionOverriding(true).  I think the bean definition should be registered, and let the application context decide whether the override is legal or not. And if it is legal, which bean should be active?  In our case, classpath scanning have found the bean, and the bean definition in a `@Configuration` class with the same name (but with more specific configuration) was not created, causing some problem.  ---  **Affects:** 3.1.2  **Issue Links:** - #15421 Cannot use `@Primary` to override `@ComponentScan-ed` beans - #14201 Beans defined by `@ComponentScan` are skipped in `@Configuration` override  6 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2012-08-13T01:06:40Z","2019-01-13T07:03:30Z"
"","13906","TransactionAspectSupport should be aware of CallbackPreferringPlatformTransactionManager to better support WebSphere, more specifically REQUIRES_NEW and NOT_SUPPORTED propagation [SPR-9268]","**[László Váradi](https://jira.spring.io/secure/ViewProfile.jspa?name=vazul)** opened **[SPR-9268](https://jira.spring.io/browse/SPR-9268?redirect=false)** and commented  TransactionAspectSupport uses the ""getTransaction"" style for setting up transaction environment for the actual method. However, in this style transaction suspension is not supported by WebSphereUowTransactionManager, as it is said in the javadoc of it.  TransactionAspectSupport should be refactored to be able to handle CallbackPreferringPlatformTransactionManager transaction managers. However, the ""execute"" style needs refactoring in the AbstractTransactionAspect aspect, as this style can be supported only with around advice, but not with before + after advises.   ---  **Affects:** 3.0.7  **Attachments:** - [callback-supporting-tx-aspects-sources.zip](https://jira.spring.io/secure/attachment/20930/callback-supporting-tx-aspects-sources.zip) (_2.90 kB_)  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2012-03-27T02:12:34Z","2014-02-24T03:53:12Z"
"","14249","Tag support for minimal escaping of XML content [SPR-9615]","**[Luke Stevens](https://jira.spring.io/secure/ViewProfile.jspa?name=nosuchluke)** opened **[SPR-9615](https://jira.spring.io/browse/SPR-9615?redirect=false)** and commented  We have htmlEscape and javaScriptEscape in Spring, as well as escapeXml in JSTL, but there is one more edge case I'd like to see supported, which isn't anywhere AFAIK. That is to escape for XML **content** rather than **attribute values**, the difference being that single and double quotes should not be escaped.  Maybe it could be called xmlContentEscape.  Although it may seem like a harmless difference, it is not. A very, very common use case is in initializing a JavaScript variable with some JSON. For example,  ```  var x = ;  ```  The result ends up like:  ```  var x = {""foo"":""bar""};  ```  If you try executing that, you will get an error, at least in current versions of Firefox and IE that I've tried. (BTW, the error goes away if you serve it as XHTML, but that's another set of issues.) I suspect that's contrary to spec, but that's how it is.  A fringe benefit is that quote-heavy text such as JSON is rendered in significantly fewer characters, when only the necessary escaping of ampersands and angle brackets is applied.   ---  **Reference URL:** http://stackoverflow.com/questions/11589967/","closed","type: enhancement,","spring-projects-issues","2012-07-21T21:40:41Z","2012-07-24T08:50:55Z"
"","14161","DefaultListableBeanFactory.getBeanNamesForType initialises beans when allowEagerInit is false [SPR-9527]","**[Luke Stephenson](https://jira.spring.io/secure/ViewProfile.jspa?name=lukestephenson)** opened **[SPR-9527](https://jira.spring.io/browse/SPR-9527?redirect=false)** and commented  org.springframework.context.support.AbstractApplicationContext.getBeansOfType(Class\, boolean, boolean) is causing lazy-init beans to be initialised, even when allowEagerInit is false.  Initially discovered when adding a MBeanExporter caused additional beans to be initialised (which resulted in an exception as those beans were not needed and configuration had not been setup for them correctly).  MBeanExporter calls this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit);  The following failing test case demonstrates.  ``` import static org.junit.Assert.assertEquals;  import org.junit.Test; import org.springframework.context.support.ClassPathXmlApplicationContext;  public class AllowEagerInitTest {      @Test     public void shouldHaveCreatedOnlyOneInstanceOfTestManagedBean() throws InterruptedException {         ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(""/test-config.xml"");         boolean includeNonSingletons = false;         boolean allowEagerInit = false;         context.getBeansOfType(TestManagedBean.class, includeNonSingletons, allowEagerInit);         assertEquals(""Should have been created once"", 1, TestManagedBean.INSTANCE_COUNTER.get());     }  }  ```  ``` import java.util.concurrent.atomic.AtomicInteger;  import org.springframework.beans.factory.InitializingBean; import org.springframework.jmx.export.annotation.ManagedResource;  @ManagedResource public class TestManagedBean implements InitializingBean {     public static final AtomicInteger INSTANCE_COUNTER = new AtomicInteger();      @Override     public void afterPropertiesSet() throws Exception {         INSTANCE_COUNTER.incrementAndGet();         System.out.println(""TestManagedBean created"");     } } ```  ```                             ```    ---  **Affects:** 3.0.7, 3.1.1  2 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-06-20T20:48:58Z","2019-08-26T12:01:13Z"
"","13846","application context created within java web start application triggers many http requests for non existing resorces  [SPR-9208]","**[Lukasz Rozek](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas_)** opened **[SPR-9208](https://jira.spring.io/browse/SPR-9208?redirect=false)** and commented  Desktop application (swing client) is executed via web start. While application context is instantiated application performs many (122 times) http get requests for resources which don't exist. This of course has huge impact on time that is needed to application startup based on you network connection.  Here is a sample of access log (each entry is requested multiple times which in total for one time application execution gives 122 requests to the server): 127.0.0.1 - - [07/Mar/2012:15:07:24 +0100] ""GET /neo-web/webstart/org.springframework.aspects.jar HTTP/1.1"" 404 952 ""-"" ""Java/1.7.0_03"" 127.0.0.1 - - [07/Mar/2012:15:07:28 +0100] ""GET /neo-web/webstart/org.springframework.beans.jar HTTP/1.1"" 404 952 ""-"" ""Java/1.7.0_03"" 127.0.0.1 - - [07/Mar/2012:15:07:31 +0100] ""GET /neo-web/webstart/org.springframework.core.jar HTTP/1.1"" 404 952 ""-"" ""Java/1.7.0_03"" 127.0.0.1 - - [07/Mar/2012:15:07:36 +0100] ""GET /neo-web/webstart/org.springframework.aspects.jar HTTP/1.1"" 404 952 ""-"" ""Java/1.7.0_03"" 127.0.0.1 - - [07/Mar/2012:15:07:42 +0100] ""GET /neo-web/webstart/org.springframework.web.jar HTTP/1.1"" 404 952 ""-"" ""Java/1.7.0_03"" 127.0.0.1 - - [07/Mar/2012:15:07:51 +0100] ""GET /neo-web/webstart/org.springframework.context.jar HTTP/1.1"" 404 952 ""-"" ""Java/1.7.0_03""  This is reproducible every time application is executed via webstart (javaws http://localhost:8080/neo-web/webstart/launch.jnlp). It can be reproduced only in java web start environment because there is JNLPClassLoader involved which indirectly causes jars lookup on the backend server.  I enclosed stacktraces on which you can see class lookups and then calls to the servers. In stacktrace2 - stacktrace3 I noted parameter which was used in method invocation JNLPClassLoader JNLPClassLoader(ClassLoader).loadClass(String) line: 356	  The stacktrace1 is different than stacktraces 2-5 as the source of class loading is different. The latter (2-5) are pretty the same for most calls to the server (they differ only with different classes to be loaded)  ---  **Affects:** 3.1.1  **Attachments:** - [stacktrace1](https://jira.spring.io/secure/attachment/19481/stacktrace1) (_5.07 kB_) - [stacktrace2](https://jira.spring.io/secure/attachment/19482/stacktrace2) (_5.15 kB_) - [stacktrace3](https://jira.spring.io/secure/attachment/19483/stacktrace3) (_5.31 kB_) - [stacktrace4](https://jira.spring.io/secure/attachment/19484/stacktrace4) (_5.65 kB_) - [stacktrace5](https://jira.spring.io/secure/attachment/19485/stacktrace5) (_5.30 kB_)  **Issue Links:** - #11049 INDEX.LIST uses incorrect jar names (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2fe74a4ef0cb8f667c4fa342e649bc75da4d8a6a  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2012-03-07T07:59:21Z","2019-01-12T16:48:07Z"
"","13899","Improve comment handling in ResourceDatabasePopulator [SPR-9261]","**[Lukas Kuster](https://jira.spring.io/secure/ViewProfile.jspa?name=koschder)** opened **[SPR-9261](https://jira.spring.io/browse/SPR-9261?redirect=false)** and commented  The ResourceDatabasePopulator currently strips comments from an SQL file, but only if they start at the beginning of the line. If they are indented, or if they are placed on the same line after an SQL statement, they are left in the script and can be wrapped in with the following SQL statement, depending on the statement separator used. E.g. in the following script, the comments at lines 2 and 3 would both be wrapped in with the insert statement on line 4, causing it to not be executed properly.  ```sql -- leading comment insert into T_TEST (NAME) values ('Keith'); -- comment at EOL 	-- indented comment insert into T_TEST (NAME) values ('Dave'); ```  With the attached patch the ResourceDatabasePopulator removes all comments from an SQL file. A unit test illustrating the behaviour is included.  ---  **Affects:** 3.1.1  **Attachments:** - [ResourceDatabasePopulator.patch](https://jira.spring.io/secure/attachment/19541/ResourceDatabasePopulator.patch) (_4.36 kB_)  **Issue Links:** - #13866 Spring JDBC: provide a simple utility API for loading parameterizable SQL strings from externalized Resources - #14964 JdbcTestUtils readScript fails to see commented lines with tabs (_**""is superseded by""**_) - #14227 JdbcTestUtils should not interpret comments as a separate statement (_**""is superseded by""**_) - #14616 Support comments within SQL statements in JdbcTestUtils (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2012-03-22T07:35:36Z","2019-01-11T12:45:35Z"
"","14339","org.springframework.beans.DirectFieldAccessor fails to go through field paths recursively [SPR-9705]","**[Lukas Kalinski](https://jira.spring.io/secure/ViewProfile.jspa?name=sfish)** opened **[SPR-9705](https://jira.spring.io/browse/SPR-9705?redirect=false)** and commented  Shortly put: having the WebDataBinder to call initDirectFieldAccess() will result in failure of resolving nested paths (i.e., if class A has a member of type/class B, then referencing that member will throw a NotReadablePropertyException).  I would suggest that you visit the following page for a detailed explanation of the problem.  http://forum.springsource.org/showthread.php?112464-Direct-Field-Access-Probelm  Both me and the poster in the link above have noticed that in org.springframework.beans.DirectFieldAccessor, no recursive calls to get properties of properties are made, and therefore it's not very surprising (anymore) that this just don't work.  I've set the priority to ""critical"" (even if it in fact is kind of a blocker for me, as I refuse to use property access).  Anyway, thank you for a great framework!  Kind regards, Lukas, Sweden  ---  **Affects:** 3.1.2  **Issue Links:** - #15251 JSR-303 validation doesn't work with nested properties in case of direct field access - #17402 Make initDirectFieldAccess work with array, List and Map - #13334 DirectFieldBindingResult should support autoGrowNestedPaths  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8221c9abc5b5215bbf88e512f6f8060a9afd3ad3  10 votes, 11 watchers","closed","has: votes-jira,","spring-projects-issues","2012-08-18T16:03:21Z","2019-01-11T13:30:54Z"
"","13959","Documentation Typo [SPR-9321]","**[Luis Medina](https://jira.spring.io/secure/ViewProfile.jspa?name=lmedina)** opened **[SPR-9321](https://jira.spring.io/browse/SPR-9321?redirect=false)** and commented  Signature of ApplicationContext.getBean method in documentation is wrong...  Documentation says: ""T getBean(Stringname, Class\ requiredType)"" It should be ""T getBean(String name, Class\ requiredType)""   ---  **Affects:** 3.0 GA, 3.1 GA  **Reference URL:** http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/beans.html#beans-factory-instantiation","closed","type: enhancement,","spring-projects-issues","2012-04-10T22:39:51Z","2012-06-19T03:39:37Z"
"","13958","Published 3.0.x PDF documentation is missing images [SPR-9320]","**[Luis Medina](https://jira.spring.io/secure/ViewProfile.jspa?name=lmedina)** opened **[SPR-9320](https://jira.spring.io/browse/SPR-9320?redirect=false)** and commented  PDF of spring-framework-reference (http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/pdf/spring-framework-reference.pdf) is not showing images... An example is page 25.   ---  **Affects:** 3.0 GA  **Reference URL:** http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/pdf/spring-framework-reference.pdf","closed","in: core,","spring-projects-issues","2012-04-10T22:32:38Z","2019-01-11T12:38:16Z"
"","14153","Add ability to lookup JNDI entry in SystemPropertyUtils [SPR-9519]","**[Lou Sacco](https://jira.spring.io/secure/ViewProfile.jspa?name=loumeister)** opened **[SPR-9519](https://jira.spring.io/browse/SPR-9519?redirect=false)** and commented  The SystemPropertyUtils class would benefit from including support for JNDI support as well. Currently, there is support for ""System"" properties, but in a Java EE environment it is often necessary to grab such variables from JNDI. Case and point is your Log4jWebConfigurer class uses SystemPropertiesUtils for certain system variables. However, we had to override this class in order for it to support derivation of the which log4j file to use based on the environment we are in. Using JNDI, we can set which environment we are in.  We've been waiting patiently for several releases to consider this type of functionality.   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-06-19T16:40:38Z","2012-10-12T13:03:01Z"
"","14661","Spring 3.2 Long polling causing spring security context to be cleared [SPR-10027]","**[liran yogev](https://jira.spring.io/secure/ViewProfile.jspa?name=lirany)** opened **[SPR-10027](https://jira.spring.io/browse/SPR-10027?redirect=false)** and commented  A completed/timed out deferredresult async request is causing a clearance of the spring security from the session, making it equivalent to a logout.  Getting this in logs: HttpSessionSecurityContextRepository:269 - SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.  The problem was found and explained by forum user nvrs:  After the DefferedResult is set the method flush() of org.springframework.security.web.context.SaveConte xtOnUpdateOrErrorResponseWrapper gets called which via a proxy calls saveContext() of org.springframework.security.web.context.HttpSessi onSecurityContextRepository.  Since the authentication object is null (due to the fact that the spring security context has been cleared) the line httpSession.removeAttribute(springSecurityContextK ey) removes the SPRING_SECURITY_CONTEXT from the session and the next request that the user makes results in a session with no security context and thus user is redirected to login.  The workaround I'm using right now in my application is to bypass security on async requests: \  Please look in the forum for further details: http://forum.springsource.org/showthread.php?129823-Spring-3-2-Long-polling-causing-spring-security-context-to-be-cleared   ---  **Affects:** 3.2 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?129823-Spring-3-2-Long-polling-causing-spring-security-context-to-be-cleared","closed","status: invalid,","spring-projects-issues","2012-11-25T00:48:37Z","2019-01-12T05:27:45Z"
"","13837","Deadlock on the beanDefinitionMap and singletonObjects [SPR-9199]","**[LiangFei](https://jira.spring.io/secure/ViewProfile.jspa?name=liangfei0201)** opened **[SPR-9199](https://jira.spring.io/browse/SPR-9199?redirect=false)** and commented  1. init BeanX (a RPC bean) 2. RPC -> BeanX -> getBean() // get bean thread 3. init BeanY // init context thread  The ""get bean thread"" and the ""init context thread"" deadlock.  1. get bean thread:    (a) DefaultSingletonBeanRegistry.getSingleton(): synchronized(singletonObjects)    (b) -> getObject() -> DefaultListableBeanFactory.getBeanNames(): synchronized(beanDefinitionMap)  2. init context thread:    (a) DefaultListableBeanFactory.preInstantiateSingletons(): synchronized(beanDefinitionMap)    (b) -> getBean() -> DefaultSingletonBeanRegistry.getSingleton(): synchronized(singletonObjects)  ---  **Affects:** 2.5.6  **Attachments:** - [lock-get-bean.jpg](https://jira.spring.io/secure/attachment/19475/lock-get-bean.jpg) (_107.23 kB_) - [lock-init-context.jpg](https://jira.spring.io/secure/attachment/19474/lock-init-context.jpg) (_38.31 kB_)  **Issue Links:** - #13117 Performance bottleneck and potential thread deadlock in DefaultSingletonBeanRegistry (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-03-05T04:48:41Z","2019-01-12T16:48:09Z"
"","14650","PropertyAccessException stacktrace truncation [SPR-10016]","**[Liam Knox](https://jira.spring.io/secure/ViewProfile.jspa?name=liamknox)** opened **[SPR-10016](https://jira.spring.io/browse/SPR-10016?redirect=false)** and commented  Seems if there is an exception thrown on a property set the underlying stack trace is not dispayed and hence omits line number of the actual failure.  Example stderr output of the attached code/config  EXPECTED STACK java.lang.IllegalArgumentException: bar at spring.SpringHideStackTrace$HideWhatWentWrong.setBar(SpringHideStackTrace.java:10) at spring.SpringHideStackTrace.main(SpringHideStackTrace.java:16)  ACTUAL STACK org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'HideWhatWentWrong' defined in class path resource [spring/SpringHideStackTrace-context.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are: PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'bar' threw exception; nested exception is java.lang.IllegalArgumentException: bar at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1361) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) at spring.SpringHideStackTrace.main(SpringHideStackTrace.java:23) Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are: PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'bar' threw exception; nested exception is java.lang.IllegalArgumentException: bar at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:102) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1358) ... 13 more   ---  **Affects:** 3.0.5  **Attachments:** - [SpringHideStackTrace.java](https://jira.spring.io/secure/attachment/20703/SpringHideStackTrace.java) (_925 bytes_) - [SpringHideStackTrace-context.xml](https://jira.spring.io/secure/attachment/20702/SpringHideStackTrace-context.xml) (_1.05 kB_)","closed","in: core,","spring-projects-issues","2012-11-21T22:31:26Z","2019-01-12T16:24:47Z"
"","13855","spring mvc In ie error on, but in the firefox will not error occurs [SPR-9217]","**[li](https://jira.spring.io/secure/ViewProfile.jspa?name=shmily2038)** opened **[SPR-9217](https://jira.spring.io/browse/SPR-9217?redirect=false)** and commented  严重: Servlet.service() for servlet [spring] in context with path [/valentine] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: ""undefined"" does not contain '/'] with root cause java.lang.IllegalArgumentException: ""undefined"" does not contain '/' at org.springframework.http.MediaType.parseMediaType(MediaType.java:548) at org.springframework.http.MediaType.parseMediaTypes(MediaType.java:589) at org.springframework.http.HttpHeaders.getAccept(HttpHeaders.java:149) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.writeWithMessageConverters(AnnotationMethodHandlerAdapter.java:922) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.handleResponseBody(AnnotationMethodHandlerAdapter.java:898) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.getModelAndView(AnnotationMethodHandlerAdapter.java:843) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:423) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:409) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560) at javax.servlet.http.HttpServlet.service(HttpServlet.java:641) at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579) at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1805) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)   ---  **Affects:** 3.0.2","closed","in: web,","spring-projects-issues","2012-03-09T17:04:35Z","2019-01-12T16:48:06Z"
"","14085","BlockJUnit4ClassRunner not found when using the TestContext framework from Eclipse user library [SPR-9450]","**[leehom](https://jira.spring.io/secure/ViewProfile.jspa?name=sslhj)** opened **[SPR-9450](https://jira.spring.io/browse/SPR-9450?redirect=false)** and commented  In my test project I use the Spring TestContext Framework and JUnit 4.  When I refer to my jars as an Eclipse _user library_, the following exception is thrown when I launch a test configured with `@RunWith(SpringJUnit4ClassRunner.class)`.  ``` java.lang.TypeNotPresentException: Type [unknown] not present 	at sun.reflect.annotation.TypeNotPresentExceptionProxy.generateException(TypeNotPresentExceptionProxy.java:27) 	at sun.reflect.annotation.AnnotationInvocationHandler.invoke(AnnotationInvocationHandler.java:56) 	at $Proxy4.value(Unknown Source) 	at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:24) 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:57) 	at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:29) 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:57) 	at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:24) 	at org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:33) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.(JUnit4TestReference.java:32) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestMethodReference.(JUnit4TestMethodReference.java:25) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:42) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:31) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:452) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: java.lang.NoClassDefFoundError: org/junit/runners/BlockJUnit4ClassRunner 	at java.lang.ClassLoader.findBootstrapClass(Native Method) 	at java.lang.ClassLoader.findBootstrapClass0(ClassLoader.java:892) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:302) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:300) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:252) 	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320) 	at java.lang.Class.forName0(Native Method) 	at java.lang.Class.forName(Class.java:247) 	at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:95) 	at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:107) 	at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:31) 	at sun.reflect.annotation.AnnotationParser.parseSig(AnnotationParser.java:370) 	at sun.reflect.annotation.AnnotationParser.parseClassValue(AnnotationParser.java:351) 	at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:280) 	at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:222) 	at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:69) 	at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:52) 	at java.lang.Class.initAnnotationsIfNecessary(Class.java:3072) 	at java.lang.Class.getAnnotation(Class.java:3029) 	at org.junit.internal.builders.IgnoredBuilder.runnerForClass(IgnoredBuilder.java:13) 	... 13 more ```    --- No further details from [SPR-9450](https://jira.spring.io/browse/SPR-9450?redirect=false)","closed","in: test,","spring-projects-issues","2012-05-27T21:59:47Z","2021-08-19T19:39:09Z"
"","13961","WebSphere compatibility: NPE in AbstractFileResolvingResource.exists when testing existence of a non-existing WebSphere specific wsjar URL [SPR-9323]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-9323](https://jira.spring.io/browse/SPR-9323?redirect=false)** and commented  Grails 2 fails on WebSphere 6.1.0.29 because of this ""bug"" in Spring. This is the Grails bug report: http://jira.grails.org/browse/GRAILS-8791  I've debugged the problem and noticed that in WebSphere a URLConnection instance com.ibm.ws.classloader.Handler$ClassLoaderURLConnection returns null when getInputStream() is called for a non-existing URL. (This can be considered as a bug in WebSphere instead...)  This corner-case should be handled in UrlResource.getInputStream to throw FileNotFoundException if the returned InputStream is null.  One way to fix this problem:  ``` 	public InputStream getInputStream() throws IOException { 		URLConnection con = this.url.openConnection(); 		con.setUseCaches(false); 		try { 			InputStream is=con.getInputStream(); 			if (is == null) { 				throw new FileNotFoundException(""Could not open "" + getDescription()); 			} 			return is; 		} 		catch (IOException ex) { 			// Close the HTTP connection (if applicable). 			if (con instanceof HttpURLConnection) { 				((HttpURLConnection) con).disconnect(); 			} 			throw ex; 		} 	}  ```    ---  **Affects:** 3.1 GA","closed","status: declined,","spring-projects-issues","2012-04-12T06:28:14Z","2019-01-12T16:36:32Z"
"","14438","DefaultPersistenceUnitManager not working with xml-less LocalContainerEntityManagerFactoryBean [SPR-9805]","**[Lando Orellana](https://jira.spring.io/secure/ViewProfile.jspa?name=lando)** opened **[SPR-9805](https://jira.spring.io/browse/SPR-9805?redirect=false)** and commented  When using a LocalContainerEntityManagerFactoryBean configured all through code (i.e. no persistence.xml), if you assing it to a DefaultPersistenceUnitManager and then try to obtain a native EMF it will throw an exception saying ""No persistence unit with name 'xxx' found"":  //emf being a LocalContainerEntityManagerFactoryBean emf.setPersistenceProviderClass(Provider.class); emf.setPersistenceUnitManager(pum); emf.setPackagesToScan(""org.etc""); emf.setPersistenceUnitName(""pu_name""); emf.set... //set all properties EntityManagerFactory emf = emf.createNativeEntityManagerFactory();  This also happens even when not trying to access the native emf directly, but letting the spring context do all the management for you.  The cause of this seems to be that when calling the createNativeEntityManagerFactory() method* it makes a call to pum.obtainPersistenceUnitInfo(getPersistenceUnitName()); inside the DefaultPersistenceUnitManager class, which in turn searches for the pu name, but this class only configures the names of the PU's read from the xml files.  Proposed solutions:  change the LocalContainerEntityManagerFactoryBean.setPersistenceManager method and the DefaultPersistenceManager class so when you assing the PUM to the EMB, this EMB gets registered in the DPM, and then when the DPM is reading the persistence files (in the preparePersistenceUnitInfos method), also takes into account the programatically passed information, especially when no info is found in the files.   ---  **Affects:** 3.2 M2","closed","status: declined,","spring-projects-issues","2012-09-17T18:57:14Z","2019-01-12T16:25:09Z"
"","14109","UriComponentsBuilder.query(String) does not always match properly the query [SPR-9474]","**[Lachezar Kozhuharov](https://jira.spring.io/secure/ViewProfile.jspa?name=ziezi)** opened **[SPR-9474](https://jira.spring.io/browse/SPR-9474?redirect=false)** and commented  I would expect the matching pattern not to partially enforce the query structure. Expected behavior is to fully enforce it or not to enforce it at all. This would be useful when for example building a RESTful service client. A query like ""a=b&filter=c==d"" is not properly processed and results in URI change.  ---  **Affects:** 3.1 RC2  **Issue Links:** - #14465 Erroneous ""0"" returned where empty string expected in call through the RestTemplate (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2965df6bee12638e3e1a1208c382679fe3d46751","closed","type: enhancement,","spring-projects-issues","2012-06-06T01:37:32Z","2019-01-13T21:06:32Z"
"","13894","Concurrent retrieval of prototype-scoped beans may result in null @Autowired fields [SPR-9256]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-9256](https://jira.spring.io/browse/SPR-9256?redirect=false)** and commented  I am hesitant to put it here because it is so hard to believe. But basically we have a prototype bean (marked through `@Scope` annotation) with a  {{ private transient SomeService service;  `@Autowired` public void setSomeService() { ... } }}  Several of such beans are concurrently retrieved from the application context. And sporadically, but reproducibly (!), for one of them _service_ would be **null**. I have removed _transient_ modifier and I cannot reproduce it anymore...  It would be interesting to hear Juergen's comment on this. Is this even in the realm of possibility that a _transient_ modifier could matter???  ---  **Affects:** 3.1 GA  **Issue Links:** - #13901 Threading issue in InjectionMetadata.InjectedElement","closed","in: core,","spring-projects-issues","2012-03-21T10:58:42Z","2019-01-12T16:36:35Z"
"","14529","ResourcePropertySource cannot load JDK 5 properties xml [SPR-9896]","**[KwonNam Son](https://jira.spring.io/secure/ViewProfile.jspa?name=kwon37xi)** opened **[SPR-9896](https://jira.spring.io/browse/SPR-9896?redirect=false)** and commented  ResourcePropertySource cannot load JDK 5 properties XML.  I think that `ResourcePropertySource#loadPropertiesForResource` method's `props.load(is)` line has to be like the following:  ``` String filename = resource.getFilename(); if (filename != null && filename.toLowerCase().endsWith("".xml"")) { 	props.loadFromXML(is); } else { 	props.load(is); } ```  —  or just use `PropertiesLoaderSupport` class for loading properties.   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d5cad15e28a261e4d18f1b832a59534ce39ef424, https://github.com/spring-projects/spring-framework/commit/3a626f93197d7f0fd4266d9877550a8d330017e5, https://github.com/spring-projects/spring-framework/commit/a420e845918a45078dc4a6bfba9872297bb90bff  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: enhancement,","spring-projects-issues","2012-10-20T03:40:07Z","2013-01-22T05:23:00Z"
"","14069","Unable to render view returned as Callable by async servlet when running in Jetty 8 [SPR-9433]","**[Kwong Lai](https://jira.spring.io/secure/ViewProfile.jspa?name=kwong.lai)** opened **[SPR-9433](https://jira.spring.io/browse/SPR-9433?redirect=false)** and commented  When running the spring-mvc-async branch of the spring-mvc-showcase project in Jetty 8, the async servlet render view demo throws an exception and fails to render the view correctly.  ``` 21:25:52 [qtp4697408-18] DispatcherServlet - DispatcherServlet with name 'appServlet' processing GET request for [/spring-mvc-showcase/views/html] 21:25:52 [qtp4697408-18] RequestMappingHandlerMapping - Looking up handler method for path /views/html 21:25:52 [qtp4697408-18] RequestMappingHandlerMapping - Returning handler method [public java.util.concurrent.Callable org.springframework.samples.mvc.views.ViewsController.prepare(org.springframework.ui.Model)] 21:25:52 [qtp4697408-18] DispatcherServlet - Last-Modified value for [/spring-mvc-showcase/views/html] is: -1 21:25:52 [qtp4697408-18] DispatcherServlet - Exiting request thread and leaving the response open 21:25:52 [SimpleAsyncTaskExecutor-1] DispatcherServlet - Resuming asynchronous processing of GET request for [/spring-mvc-showcase/views/html] 21:25:55 [SimpleAsyncTaskExecutor-1] DispatcherServlet - Rendering view [org.springframework.web.servlet.view.JstlView: name 'views/html'; URL [/WEB-INF/views/views/html.jsp]] in DispatcherServlet with name 'appServlet' 21:25:55 [SimpleAsyncTaskExecutor-1] JstlView - Added model object 'fruit' of type [java.lang.String] to request in view with name 'views/html' 21:25:55 [SimpleAsyncTaskExecutor-1] JstlView - Added model object 'foo' of type [java.lang.String] to request in view with name 'views/html' 21:25:55 [SimpleAsyncTaskExecutor-1] DispatcherServlet - Could not complete request javax.servlet.ServletException: Could not get RequestDispatcher for [/WEB-INF/views/views/html.jsp]: Check that the corresponding file exists within your web application archive! 	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:219) 	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1265) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1016) 	at org.springframework.web.servlet.DispatcherServlet.access$300(DispatcherServlet.java:141) 	at org.springframework.web.servlet.DispatcherServlet$2.call(DispatcherServlet.java:1054) 	at org.springframework.web.servlet.DispatcherServlet$1.call(DispatcherServlet.java:884) 	at org.springframework.web.servlet.FrameworkServlet$1.call(FrameworkServlet.java:991) 	at org.springframework.web.context.request.async.AsyncExecutionChainRunnable.run(AsyncExecutionChainRunnable.java:64) 	at java.lang.Thread.run(Thread.java:722) 21:25:55 [SimpleAsyncTaskExecutor-1] AsyncExecutionChainRunnable - Completing async request processing ```  To reproduce:  1. Checkout the spring-mvc-async branch from https://github.com/SpringSource/spring-mvc-showcase/tree/spring-mvc-async 2. Run the web app using Jetty 8 (I'm running the latest stable build, jetty-distribution-8.1.3.v20120416) 3. Go to http://localhost:8080/spring-mvc-showcase/#views 4. Click on the ""HTML generated by JSP template"" link 5. The above exception occurs  The same web app works fine in Glassfish v3.   ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4f55518290885a4a20ba892b23c4fe00e582f0a8, https://github.com/spring-projects/spring-framework/commit/529e62921d3aca4499689fcf7c7e2bbeb7ad221e","closed","type: bug,","spring-projects-issues","2012-05-24T04:38:26Z","2012-08-14T14:46:24Z"
"","13860","HibernateTransactionManager does not support multi tenancy, Hibernate 4.1 [SPR-9222]","**[Krzysztof Dworakowski](https://jira.spring.io/secure/ViewProfile.jspa?name=zlooo)** opened **[SPR-9222](https://jira.spring.io/browse/SPR-9222?redirect=false)** and commented  HibernateTransactionManager always opens new session by invoking sessionFactory.openSession(). However with multi tenancy session should be opened by sessionFactory.withOptions().tenantIdentifier(tenantIdentifier).openSession().  I managed to get it working with a few local modifications 1)adding new property to HibernateTransactionManager, implementation of org.hibernate.context.spi.CurrentTenantIdentifierResolver 2)using new property if present to open session in multi tenant way 3)modification of key used to bind session to thread TransactionSynchronizationManager.bindResource(new MultiKey(sessionFactory,tenantIdentifierFromResolverOrNull), txObject.getSessionHolder()); 4)modification of key used by SpringSessionContext to retrive earlier created session when callin sessionFactory.getCurrentSession() in my app code  Unfortunately this is not very neat solution to the problem and probably has some negative, unforeseen by me consequences.   ---  **Affects:** 3.1.1  5 votes, 7 watchers","closed","status: invalid,","spring-projects-issues","2012-03-10T13:19:43Z","2019-01-12T05:28:56Z"
"","13973","Unsafe fallback pointcut construction in AspectJExpressionPointcut [SPR-9335]","**[Krzysiek Kasprzyk](https://jira.spring.io/secure/ViewProfile.jspa?name=krzysztof.kasprzyk)** opened **[SPR-9335](https://jira.spring.io/browse/SPR-9335?redirect=false)** and commented  Hi,  I have a Java EE application consisting of multiple OSGi bundles running within Apache Felix container on Weblogic 10.3. Spring DM Extender is responsible for loading application contexts of my Spring-powered bundles.  After switch from Spring 3.0.5.RELEASE to Spring 3.1.1.RELEASE the following error arised in a couple of bundles:  ``` Caused by: java.lang.IllegalArgumentException: warning no match for this type name: pl.some.package.SomeClass [Xlint:invalidAbsoluteTypeName]         at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:302)         at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:207)         at org.springframework.aop.aspectj.AspectJExpressionPointcut.getFallbackPointcutExpression(AspectJExpressionPointcut.java:358)         at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:409)         at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:272)         at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:225)         at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:263)         at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:295)         at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:117)         at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:87)         at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:68)         at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:359)         at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:322)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:407)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean(AbstractAutowireCapableBeanFactory.java:1598) ```  It prevents some bundles from starting successfully. I did some debugging and found out that this exception is thrown while `AspectJAwareAdvisorAutoProxyCreator` is trying to match  ``` target(pl.some.package.SomeClass) && @annotation(pl.some.package.SomeAnnotation) ```  pointcut against a bean which is actually an object retrieved from Weblogic JNDI registry (`weblogic.jdbc.common.internal.RmiDataSource` data source to be precise). `pl.some.package.SomeClass` is my bundle's internal class that is visible only to classloader dedicated to this bundle. On the other hand bundle's classloader is unable to load Weblogic's `weblogic.jdbc.common.internal.RmiDataSource` class.  After a small investigation i discovered that the following change in `org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch()` method is responsible for mentioned error:  ``` if (shadowMatch == null) { 	try { 		shadowMatch = this.pointcutExpression.matchesMethodExecution(targetMethod); 	} 	catch (ReflectionWorld.ReflectionWorldException ex) { 		// Failed to introspect target method, probably because it has been loaded 		// in a special ClassLoader. Let's try the original method instead... 		if (targetMethod == originalMethod) { 			shadowMatch = new ShadowMatchImpl(org.aspectj.util.FuzzyBoolean.NO, null, null, null); 		} 		else { 			try { 				shadowMatch = this.pointcutExpression.matchesMethodExecution(originalMethod); 			} 			catch (ReflectionWorld.ReflectionWorldException ex2) { 				// Could neither introspect the target class nor the proxy class -> 				// let's simply consider this method as non-matching. 				shadowMatch = new ShadowMatchImpl(org.aspectj.util.FuzzyBoolean.NO, null, null, null); 			} 		} 	} 	this.shadowMatchCache.put(targetMethod, shadowMatch); } ```  versus  ``` if (shadowMatch == null) { 	try { 		shadowMatch = this.pointcutExpression.matchesMethodExecution(targetMethod); 	} 	catch (ReflectionWorld.ReflectionWorldException ex) { 		// Failed to introspect target method, probably because it has been loaded 		// in a special ClassLoader. Let's try the original method instead... 		try { 			fallbackPointcutExpression = getFallbackPointcutExpression(methodToMatch.getDeclaringClass()); 			shadowMatch = fallbackPointcutExpression.matchesMethodExecution(methodToMatch); 		} catch (ReflectionWorld.ReflectionWorldException e) { 			if (targetMethod == originalMethod) { 				shadowMatch = new ShadowMatchImpl(org.aspectj.util.FuzzyBoolean.NO, null, null, null); 			} 			else { 				try { 					shadowMatch = this.pointcutExpression.matchesMethodExecution(originalMethod); 				} 				catch (ReflectionWorld.ReflectionWorldException ex2) { 					// Could neither introspect the target class nor the proxy class -> 				        // let's simply consider this method as non-matching. 					methodToMatch = originalMethod; 					fallbackPointcutExpression = getFallbackPointcutExpression(methodToMatch.getDeclaringClass()); 					try { 						shadowMatch = fallbackPointcutExpression.matchesMethodExecution(methodToMatch); 					} catch (ReflectionWorld.ReflectionWorldException e2) { 						shadowMatch = new ShadowMatchImpl(org.aspectj.util.FuzzyBoolean.NO, null, null, null); 					} 				} 			} 		} 	} 	if (shadowMatch.maybeMatches() && fallbackPointcutExpression!=null) { 		shadowMatch = new DefensiveShadowMatch(shadowMatch, 			fallbackPointcutExpression.matchesMethodExecution(methodToMatch)); 	} 	this.shadowMatchCache.put(targetMethod, shadowMatch); } ```  Normally `AspectJExpressionPointcut` builds `PointcutExpression` using AspectJ's `PointcutParser` and classloader fetched via `Thread.currentThread().getContextClassLoader()` method. Spring DM Extender ensures that at this point of context creation provided classloader delegates to bundle's internal classloader. Thanks to that creation of `AspectJExpressionPointcut.pointcutExpression` (equal to parsing pointcut expression by AspectJ classes) works fine. Unfortunately `PointcutExpression` that uses  bundle's classloader cant't match `weblogic.jdbc.common.internal.RmiDataSource.getConnection()` method of the problematic bean. `ReflectionWorldException` exception is thrown and Spring tries to construct `fallbackPointcutExpression` using classloader that loaded `weblogic.jdbc.common.internal.RmiDataSource` class:  ``` private PointcutExpression getFallbackPointcutExpression(Class targetClass) { 	ClassLoader classLoader = targetClass.getClassLoader(); 	return classLoader == null ? this.pointcutExpression : buildPointcutExpression(classLoader); } ```  Parsing pointcut expression using such classloader fails because this classloader doesn't see `pl.some.package.SomeClass`. AspectJ's `PointcutParser` throws `IllegalArgumentException` in this case:  ``` public PointcutExpression parsePointcutExpression(String expression, Class inScope, PointcutParameter[] formalParameters)       throws UnsupportedPointcutPrimitiveException, IllegalArgumentException { 	PointcutExpressionImpl pcExpr = null; 	try { 		Pointcut pc = resolvePointcutExpression(expression, inScope, formalParameters); 		pc = concretizePointcutExpression(pc, inScope, formalParameters); 		validateAgainstSupportedPrimitives(pc, expression); // again, because we have now followed any ref'd pcuts 		pcExpr = new PointcutExpressionImpl(pc, expression, formalParameters, getWorld()); 	} catch (ParserException pEx) { 		throw new IllegalArgumentException(buildUserMessageFromParserException(expression, pEx)); 	} catch (ReflectionWorld.ReflectionWorldException rwEx) { 		throw new IllegalArgumentException(rwEx.getMessage()); 	} 	return pcExpr; } ```  However Spring is not prepared for `IllegalArgumentException` in this place (only for `ReflectionWorldException`):  ``` try { 	fallbackPointcutExpression = getFallbackPointcutExpression(methodToMatch.getDeclaringClass()); 	shadowMatch = fallbackPointcutExpression.matchesMethodExecution(methodToMatch); } catch (ReflectionWorld.ReflectionWorldException e) { 	if (targetMethod == originalMethod) { 		shadowMatch = new ShadowMatchImpl(org.aspectj.util.FuzzyBoolean.NO, null, null, null);					} ```  Finally `IllegalArgumentException` is propagated through the call stack and in the end initialization of application context fails. From my point of view this is undesirable behaviour so i report this as a bug.  Note: i can probably workaround this issue by excluding `RmiDataSource` bean from autoproxing but this is fragile IMHO.  ---  **Affects:** 3.1.1  **Issue Links:** - #19586 Pointcut evaluation fails against AbstractHandlerMethodMapping$MappingRegistry with AspectJ 1.8.10 - #17693 When use a `@args` as pointcut, there is case that occur a NPE at calling the unrelated method  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/89398b0811701f6907c59e092e6f6db98606f71e, https://github.com/spring-projects/spring-framework/commit/228a586efbd6a57eee128312b3689bc27a822da4, https://github.com/spring-projects/spring-framework/commit/ce4912b627b4ac9be2d6bff43ef2089dc5817d67  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)  5 votes, 9 watchers","closed","in: core,","spring-projects-issues","2012-04-19T08:03:59Z","2019-01-13T07:05:10Z"
"","14115","Hibernate 4 smart flushing does not work unless CMTTransactionFactory is being specified [SPR-9480]","**[Koen Serneels](https://jira.spring.io/secure/ViewProfile.jspa?name=koen.serneels)** opened **[SPR-9480](https://jira.spring.io/browse/SPR-9480?redirect=false)** and commented  #### Overview  There seems yet again another issue when using the Spring 3.1 - Hibernate4(.1.3) integration.  This issue pops up so late since it only occurs in special circumstances: it has to do with the hibernate ""smart"" flushing which is not working.  Hibernate guarantees that every modification you make (CUD) is flushed to the database prior any other operation that can possibly be related to the outstanding queries. This is to ensure that you don't work with stale data within the same transaction.  For example:  1. Save an entity 2. Update the property of an entity 3. Query the entity using the value of the property changed in the previous step in the where clause  Hibernate will make sure that the changes by step2 (and possibly also the insert of step1 - if not done already) are flushed before step3 is executed (smart flush). If this didn't happen we would never be able to retrieve the entity in step3.  The problem is that this smart flushing is not happening any more, since Hibernate does not detect that it is in a transaction.  Taken from `SessionImpl` L1178:  ``` protected boolean autoFlushIfRequired(Set querySpaces) throws HibernateException { 		errorIfClosed(); 		if ( ! isTransactionInProgress() ) { 			// do not auto-flush while outside a transaction 			return false; 		} 		AutoFlushEvent event = new AutoFlushEvent( querySpaces, this ); 		for ( AutoFlushEventListener listener : listeners( EventType.AUTO_FLUSH ) ) { 			listener.onAutoFlush( event ); 		} 		return event.isFlushRequired(); 	} ```  What happens is before step3 is excecuted 'autoFlushIfRequired' is called (good). However isTransactionInProgress() will returns false. If you drill down in the code, you will see that it will call: `transactionCoordinator.isTransactionInProgress()` which will then call `getTransaction().isActive()`, which delegates to `JtaTransaction` L237:  ``` 	@Override 	public boolean isActive() throws HibernateException { 		if ( getLocalStatus() != LocalStatus.ACTIVE ) { 			return false; 		}  		final int status; 		try { 			status = userTransaction.getStatus(); 		} 		catch ( SystemException se ) { 			throw new TransactionException( ""Could not determine transaction status: "", se ); 		} 		return JtaStatusHelper.isActive( status ); 	} ```  The LocalStatus will be ""NOT_ACTIVE"" and the userTransaction is null. Why? Because no one called ""begin"" on the JtaTransaction.  In case of the HibernateTransactionManager it will call begin() once a transaction is started (in that case it will be JdbcTransaction rather then JtaTransaction).  So while there is a transaction started and everything is working nicely there is still a part of Hibernate which is unaware that a transaction is indeed active, which results in strange behavior like illustrated here. Note that everything else is working OK, the  session will get flushed before transaction completion and everything will be in the database.  However, within the transactions we now have a stale data problem. AFAIK this is a bug in the integration, since there are no more secret properties we can use to fix this one on hibernate level.  ---  #### Examples  I supplied again 2 sample applications, one with hibernate3 and the same with hibernate4 to illustrate the issue.  You can deploy the apps under context root hibernate3/hibernate4 and then point the browser to `http://:/hibernate3/Persist` or `http://:/hibernate4/Persist`.  The Servlet looks up a bean from the application context. It will then call two transactional methods on the bean.  ###### Method 1  - Start transaction 1 - Save an entity of type 'TestEntity' - Change the property 'value' to literal 'SomeValue' on the saved entity - Perform a query which selects all entities of type 'TestEntity' where their 'value' property matches 'SomeValue' - return result - display result - End transaction 1  ###### Method 2  - Start transaction 2 - Perform a query which selects all entities of type 'TestEntity' where their 'value' property matches 'SomeValue' - return result - display result - End transaction 2  With hibernate3 you will see this output:  ``` Saving... Done.  Result from read in TX: 1 Value:SomeValue  Read from table in separate TX: 1 Value:SomeValue  ```  Which means that both in the same transaction and in the new transaction the data was found in database after saving/updating.  In hibernate4 however:  ``` Saving... Done.  Result from read in TX:  Read from table in separate TX: 1 Value:SomeValue  ```  You see that in the same transaction the query did not return any results in the second output line. This is because the save of the entity and/or the update of the property where not flushed to database prior executing the query.  Note: in the output we show two properties of the 'TestEntity'.  - The value '1' in the output is the value of the 'id' property which is the PK of the entity and auto-increment. - 'SomeValue' is the literal value we assigned to the 'value' property of the entity after we saved the entity.  ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?126363-Session-not-flushed-with-Hibernate-4-1-3-JTA-and-Spring-transaction-management-integ&highlight=koen+serneels  **Attachments:** - [hibernate3.zip](https://jira.spring.io/secure/attachment/19824/hibernate3.zip) (_7.31 kB_) - [hibernate4.zip](https://jira.spring.io/secure/attachment/19823/hibernate4.zip) (_7.36 kB_)  **Issue Links:** - #14040 Session not flushed with Hibernate 4.1.3, JTA and Spring transaction management integration (_**""is duplicated by""**_) - #18421 Hibernate 4 Autoflush does not work with Spring OpenSessionInViewInterceptor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/efabc6bf18f791b050ed2e082040aa4ce3bb1aa6, https://github.com/spring-projects/spring-framework/commit/dda3197c77a0b66576ebccd629c5076c0403eaf5  5 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2012-06-07T02:53:32Z","2019-01-13T07:04:22Z"
"","14040","Session not flushed with Hibernate 4.1.3, JTA and Spring transaction management integration [SPR-9404]","**[Koen Serneels](https://jira.spring.io/secure/ViewProfile.jspa?name=koen.serneels)** opened **[SPR-9404](https://jira.spring.io/browse/SPR-9404?redirect=false)** and commented  I have been migrating from hibernate 3.3.x to hibernate 4.1.3-final using Spring 3.1.1-release. Besides the hibernate specific refactorings (due to API changes) I thought the only changes for the Spring integration were changing packages names:  - Use the LocalSessionFactoryBean from the hibernate4 package - Use the HibernateTransactionManger (which we only use for testing) from the hibernate4 package.  As it turned out the migration when smooth and everything was working on a local tomcat. However, once we ran our app on glassfish with the JtaTransactionManager (I tested it on GF3.1.2) we got a ""No Session found for current thread"" when obtaining sessionFactory.currentSession(). After checking SpringSessionContext, we learned that if TransactionSynchronizationManager does not return a existing session or SessionHolder, a check is performed for a jtaSessionContext, which was null. The fact that no SessionHolder is registered made also sense as this done by the HibernateTransactionManager and we are using the JtaTransactionManager.  So then learned that in case of JTA you have to specify manually how the tx manager/user transaction can be found. This was done automatically for you in the hibernate3 LocalSessionFactoryBean, but no longer in the hibernate4 LocalSessionFactoryBean. So to solve this we configured:  hibernate.transaction.jta.platform and set it to SunOneJtaPlatform.  This resolved the ""No Session found for current thread"" as it initialized the jtaSessionContext with the txmanager provided by the configured JtaPlatform.  However, now it turns out that the hibernate session is not flushed before the transaction is commited and hence no modifications are written to database. In the supplied sample we have a basic hibernate setup with H2. Next we have a JtaTransactionManager and a transactional facade. Next we have a test entity having a single property. The facade has two methods, one to store the entity and one to retrieve the entity. They both marked as `@Transactional` and if called will run in there own transaction. The trigger is a plain JEE servlet which retrieves the facade from application context. First the store method is called (tx1) then the retrieve method is called (tx2). As you will see with the Spring hibernate4 integration there was nothing saved. With the hibernate3 integration everything works as expected and the record is saved (it can be retrieved by the subsequent retrieval transaction)  What is also bizarre is that in hibernate3 modus everything goes via the Spring TransactionSynchronizationManager (even in JTA mode). Also the current session is bound via a thread local referenced via the synchronization. This is bound using a SpringSessionSynchronization which will call flush before transaction completion.  All of this is gone with the hibernate4 integration from the moment a JTA environment is detected. As of then everything goes via the JTA transaction manager, as there where no Spring Transacion management involved. This could be normal to a certain extend, but it feels odd compared to the way is was done with hibernate3.  I supplied two samples:  - hibernate3.zip : this is the working one, deploy it on GF and goto ""http://localhost:8080/hibernate3/Persist""   You will see that it stores a record and is able to retrieve it again  - hibernate4.zip : the exact same sample as above, but now with hibernate4 and using LocalSessionFactoryBean from the hibernate4 package and the hibernate.transaction.jta.platform set.   You will see that it stores a record and is NOT able to retrieve it.  Both samples have a POM so it should be trivial to build them.  ---  **Affects:** 3.1.1  **Attachments:** - [hibernate3.zip](https://jira.spring.io/secure/attachment/19646/hibernate3.zip) (_7.33 kB_) - [hibernate4.zip](https://jira.spring.io/secure/attachment/19647/hibernate4.zip) (_7.35 kB_)  **Issue Links:** - #14115 Hibernate 4 smart flushing does not work unless CMTTransactionFactory is being specified (_**""duplicates""**_) - #12571 util:map support for key-types other than String not working (_**""is duplicated by""**_) - #14060 Spring JtaTransactionManager is not flushing during before completion phase when using Hibernate 4 or Hibernate 3 (_**""is duplicated by""**_)  5 votes, 4 watchers","closed","in: core,","spring-projects-issues","2012-05-13T13:22:30Z","2019-01-12T16:47:58Z"
"","14238","Support TransactionManagementConfigurer for determining the transaction manager in the TestContext framework [SPR-9604]","**[Kirk Rasmussen](https://jira.spring.io/secure/ViewProfile.jspa?name=blackbeltdev)** opened **[SPR-9604](https://jira.spring.io/browse/SPR-9604?redirect=false)** and commented  #### Status Quo  Since Spring 2.5, the _Spring TestContext Framework_   - specifically the   `TransactionalTestExecutionListener`   - looks up the `PlatformTransactionManager` by a bean named _""transactionManager""_ by default. The exact name of the bean can be overridden via `@TransactionConfiguration` or `@Transactional`; however, the bean will always be looked up _by name_.  The `TransactionManagementConfigurer` interface that was introduced in Spring 3.1 provides a programmatic approach to specifying the `PlatformTransactionManager` bean to be used for annotation-driven transaction management, and that bean is not required to be named _""transactionManager""_.  However, as of Spring 3.1.2, using the `TransactionManagementConfigurer` on a `@Configuration` class has no effect on how the TestContext framework looks up the transaction manager. Consequently, if an explicit name or qualifier has not been specified, the bean must be named ""_transactionManager_"" in order for a transactional integration test to work.  #### Deliverables  1. [x] Refactor the implementation of `beforeTestMethod()` in `TransactionalTestExecutionListener` so that it honors the presence of a `TransactionManagementConfigurer` bean if an explicit name or qualifier has not been specified. 2. [x] Update the Javadoc for `@TransactionalTestExecutionListener`. 3. [x] Update the Javadoc for `@TransactionConfiguration`. 4. [x] Update the _Testing_ chapter of the Reference Manual accordingly. 5. [x] Update the changelog accordingly.  ---  **Affects:** 3.1.2  **Issue Links:** - #14279 Support single, unnamed transaction manager bean in the TestContext framework (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b7a62906891b7a936412894f9ab78cdb69dc378","closed","type: enhancement,","spring-projects-issues","2012-07-18T20:38:24Z","2019-01-11T12:58:00Z"
"","14225","WebApplicationInitializer with AnnotationConfigWebApplicationContext parent gets reset to null by ContextLoaderListener [SPR-9591]","**[Kirk Rasmussen](https://jira.spring.io/secure/ViewProfile.jspa?name=blackbeltdev)** opened **[SPR-9591](https://jira.spring.io/browse/SPR-9591?redirect=false)** and commented  org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext)  The following code ignores that the parent was already set previously and ends up setting the parent to null.  ``` 		// Determine parent for root web application context, if any. 		ApplicationContext parent = loadParentContext(sc);  		wac.setParent(parent); ```  The documentation for org.springframework.web.context.ContextLoaderListener.ContextLoaderListener(WebApplicationContext) doesn't match the implementation for condition (b)  > The context may or may not yet be refreshed. If it (a) is an implementation of ConfigurableWebApplicationContext and (b) has not already been refreshed (the recommended approach), then the following will occur:  It appears that refresh is ALWAYS called:  org.springframework.web.context.ContextLoader.initWebApplicationContext(ServletContext)  ``` 			if (this.context instanceof ConfigurableWebApplicationContext) { 				configureAndRefreshWebApplicationContext((ConfigurableWebApplicationContext)this.context, servletContext);  ```  ---  **Issue Links:** - #14630 ContextLoader incorrectly refreshes already refreshed context  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: enhancement,","spring-projects-issues","2012-07-12T16:19:01Z","2019-01-11T12:52:51Z"
"","14264","Injection of Provider fails for prototype-scoped beans [SPR-9630]","**[Kilian Matt](https://jira.spring.io/secure/ViewProfile.jspa?name=mattk)** opened **[SPR-9630](https://jira.spring.io/browse/SPR-9630?redirect=false)** and commented  I tried to migrate an existing spring application from 3.0.5 to 3.1.2 and I've noticed a strange bug, that the injection of a provider works the first time but passes subsequent times.  It seems due the call of DependencyDescriptor.increaseNestingLevel() in the constructor of DependencyObjectFactory. Since the Descriptor is cached, the subsequent calls to BeanFactory.resolveDependency no longer return a Provider, but a reference to the bean.  I've attached a testcase, which reproduces the problem. The bug seems to be introduced in 3.1.1, according to my tests.  ---  **Affects:** 3.1.1  **Attachments:** - [ProviderInjectionTest.java](https://jira.spring.io/secure/attachment/20125/ProviderInjectionTest.java) (_1.82 kB_)  **Issue Links:** - #13819 `@Inject` Provider or `@Autowired` ObjectFactory issue with session scoped bean (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65743936ffd87d0e621722c414692c3fe9652717, https://github.com/spring-projects/spring-framework/commit/d7825586dc1793da9ebfec4430356e73d428e7bd  2 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2012-07-24T15:02:59Z","2019-01-13T07:03:39Z"
"","14359","Log4jConfigurer initLogging(location) should throw FileNotFoundException for file URL as well [SPR-9725]","**[Kevin Wiskia](https://jira.spring.io/secure/ViewProfile.jspa?name=kwiskia)** opened **[SPR-9725](https://jira.spring.io/browse/SPR-9725?redirect=false)** and commented  org.springframework.util.Log4jConfigurer.initLogging(String location) method does not throw a FileNotFoundException if the specified file is not found.  The javadoc explicitly states that it does.  If you look at org.springframework.util.Log4jConfigurer.initLogging(String location, long refreshInterval) you can see that it correctly implements the file check and throws an exception.   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06632822e9bb7e4555a0060f0c75f4514f69a3e4","closed","type: enhancement,","spring-projects-issues","2012-08-24T09:36:24Z","2014-11-17T06:42:30Z"
"","14304","Poor Performance with lots of Prototype Scoped Beans [SPR-9670]","**[Kevin Mudrick](https://jira.spring.io/secure/ViewProfile.jspa?name=kmudrick)** opened **[SPR-9670](https://jira.spring.io/browse/SPR-9670?redirect=false)** and commented  We are seeing a pretty substantial performance hit with the creation of large quantities of prototype-scoped beans in the 3.1.x branch versus 3.0.x (and 2.5.6)  In our example, we have call context.getBean() with a bean consisting of 2 levels of nested bean referenced, in a pretty large loop.  3.0.7: 40604ms 3.1.2: 685150ms  The only difference between these runs is the version of the spring dependencies.  After profiling using YourKit, I found the hotspots in 3.1.x to be in the following places:  org.springframework.beans.TypeConverterDelegate: This seems to be the bigger problem.   The changes introduced in 3.1 (specifically, in commit https://github.com/SpringSource/spring-framework/commit/6f146737f475828b6d765784017773378c2c4922) to findDefaultEditor() end up (expensively) initializing an editor registry every time this is called.  Since we get here each time we apply a property on every bean creation, this really adds up.  Previously, the commented-out code ended up shortcutting this.  I found that replacing the commented out code (the part that relied on the now-removed PropertyTypeDescriptor/PropertyDescriptor with static use of PropertyEditorManager.findEditor(), cuts down on the slowness considerably, at the expense of relying on java.beans - which a few commit comments seem to indicate is something to be avoided for better platform compatibility.  org.springframework.core.convert.Property: This also seems to be a problem. The overhead of the annotation parsing via reflection is already noted in #13981 - but that issue doesn't seem to mention this example.  My profiling is showing that this is being constructed for every property found on every bean being created.  With lots of prototype beans - this comes to light pretty quickly.  Perhaps if ReflectionUtils used a similar caching strategy to apache commons-beanutils PropertyUtilsBean for annotations, this performance hit could be mitigated.  ---  **Affects:** 3.1.2  **Issue Links:** - #13981 org.springframework.core.convert.Property class performs expensive operations in its constructor (_**""is duplicated by""**_) - #12081 Concurrent prototype creation causes NullPointerException - #13109 TypeConverterDelegate contains commented out code  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2012-08-07T03:28:31Z","2019-01-13T21:05:58Z"
"","14243","Typo in ApplicationContextAware and BeanNameAware section [SPR-9609]","**[Kengkaj S.](https://jira.spring.io/secure/ViewProfile.jspa?name=kengkaj.s)** opened **[SPR-9609](https://jira.spring.io/browse/SPR-9609?redirect=false)** and commented  In 4.6.2 ApplicationContextAware and BeanNameAware: ""If you do, the ApplicationFactory is autowired into a field, constructor argument, or method parameter that is expecting the BeanFactory type"" should be ""If you do, the ApplicationContext is autowired into a field, constructor argument, or method parameter that is expecting the ApplicationContext type"".   ---  **Reference URL:** http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/beans.html#beans-factory-aware","closed","type: documentation,","spring-projects-issues","2012-07-20T00:27:10Z","2012-10-31T11:33:59Z"
"","14230","Fix typo in new-in-3.1.html page [SPR-9596]","**[Kengkaj S.](https://jira.spring.io/secure/ViewProfile.jspa?name=kengkaj.s)** opened **[SPR-9596](https://jira.spring.io/browse/SPR-9596?redirect=false)** and commented  In section 3.1.19 UriComponentsBuilder and UriComponents, ""A nenw UriComponentsBuilder class"" should be ""A new UriComponentsBuilder class"".  http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/new-in-3.1.html   ---  **Affects:** 3.1 GA","closed","type: documentation,","spring-projects-issues","2012-07-16T00:39:10Z","2012-10-31T11:33:57Z"
"","14209","Issue with @Async in version 3.1.2 linking to the task executor it is assigned to (instead of the default) [SPR-9575]","**[Ken Young](https://jira.spring.io/secure/ViewProfile.jspa?name=kenyoung@solutionary.com)** opened **[SPR-9575](https://jira.spring.io/browse/SPR-9575?redirect=false)** and commented  Issue with `@Async` in version 3.1.2 linking to the task executor it is assigned to (instead of the default)  ---  **Affects:** 3.1.2  **Issue Links:** - #11513 Enable Executor qualification with `@Async` - #14079 Backport ""Enable Executor qualification with `@Async`""  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-07-09T14:17:43Z","2019-01-13T07:03:55Z"
"","13978","Support for constructing an immutable key object from PathVariables [SPR-9339]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9339](https://jira.spring.io/browse/SPR-9339?redirect=false)** and commented  It would be useful if composite key values included as path elements in a URL could be mapped to an immutable value object during request data binding. For example, consider the following:  ``` @RequestMapping(value=""/leagues/{league}/seasons/{season}/teams/{team}"", method=RequestMethod.GET) public ResponseEntity team(TeamKey teamKey) {     return teamRepository.findTeam(teamKey);         } ```  TeamKey would be constructed by the binding framework as new TeamKey(league, season, team).  As it is, I need to either declare each `@PathVariable` individually, replace the immutable nature of TeamKey with setters, or declare a intermediate form object JavaBean that constructs an immutable TeamKey.  ---  **Affects:** 3.1.1  **Issue Links:** - #13927 Support binding `@PathVariable`(s) to a Map  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-23T14:30:11Z","2019-01-13T07:05:07Z"
"","13950","DefaultHandlerExceptionResolver doesn't provide a reason when sending error responses [SPR-9312]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9312](https://jira.spring.io/browse/SPR-9312?redirect=false)** and commented  For example, when a required `@RequestParam` is missing from the request a 400 status is sent but no error message is sent. This results in a REST API returning something like:  ``` HTTP/1.1 400 Bad Request {""message"":""""} ```  or no message at all.  It would be helpful if a general reason was at least provided e.g. ""missing required query parameter"". This wouldn't hurt anything while improving debugging ability for developers.   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06d95915a01ec0944347fabd86f6dd2cd4c2e2da  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-06T09:36:53Z","2012-08-21T09:36:44Z"
"","13948","DefaultHandlerExceptionResolver doesn't handle BindException but does handled other data binding related exceptions [SPR-9310]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9310](https://jira.spring.io/browse/SPR-9310?redirect=false)** and commented  ServletRequestDataBindingException, ConversionNotSupportedException, and TypeMismatchException are all handled by default but the more common `@Valid` triggered bulk-binding result exception BindException is not. This requires the user implementing a REST API to implement a custom exception handler that sends a 400 error when a BindException occurs.  ---  **Affects:** 3.1.1  **Issue Links:** - #13053 Create separate handler stereotype for RESTful web services - #13921 Improved support for REST API error reporting  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1b7a314c1645018c5c2088775fd1a9bd282ee14  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-05T12:22:25Z","2019-01-11T12:51:59Z"
"","13928","Spring MVC: Guidance on reporting un-handled errors as data when implementing a REST API [SPR-9290]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9290](https://jira.spring.io/browse/SPR-9290?redirect=false)** and commented  HttpServletResponse#sendError's default behavior for reporting unrecoverable errors such as 404, 405, 406, and 500 sends HTML back to the client, which is not appropriate for REST APIs where responses should be in the form of data (usually JSON, alternatively XML). Spring MVC currently doesn't provide any guidance on how to deal with this issue e.g. should the developer customize the sendError behavior by defining custom error page JSPs that return JSON? Do they instead configure something in Spring MVC itself? It'd be helpful to provide application developer guidance here.  This was a useful resource: http://blog.newsplore.com/2010/08/04/restful-error-handling-with-tomcat-springmvc  ---  **Affects:** 3.1.1  **Issue Links:** - #13053 Create separate handler stereotype for RESTful web services - #13921 Improved support for REST API error reporting","closed","in: web,","spring-projects-issues","2012-03-30T12:31:35Z","2019-01-11T12:48:07Z"
"","13927","Support binding @PathVariable(s) to a Map [SPR-9289]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9289](https://jira.spring.io/browse/SPR-9289?redirect=false)** and commented  You can bind all request params to a Map but not path variables e.g. this works:  ``` @RequestParam Map params ```  This doesn't:  ``` @PathVariable Map vars ```  For consistency it'd be good to support `@PathVariable` Map binding as well.  ---  **Affects:** 3.1.1  **Issue Links:** - #13978 Support for constructing an immutable key object from PathVariables  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f5fa44d321dbcc154b51a766f49d49ed6a72b18, https://github.com/spring-projects/spring-framework/commit/1d0e484eacd28a2193a68a4e574bae80b85484c5, https://github.com/spring-projects/spring-framework/commit/7dff02b2c145a94ff47da3e8931d34d05f05f331","closed","type: enhancement,","spring-projects-issues","2012-03-30T11:19:27Z","2019-01-11T12:48:11Z"
"","13921","Improved support for REST API error reporting [SPR-9283]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9283](https://jira.spring.io/browse/SPR-9283?redirect=false)** and commented  When implementing a REST API, Spring MVC provides full control over what ResponseEntity is returned to a client, which includes full support for setting custom HTTP status codes, response headers, and the response body. This is great and very flexible; however, the error reporting support in Spring MVC for common cases could be made more convenient.  Specifically, there is no way to auto-map an application business exception to a error response that contains all of the following bits of information: 1. an appropriate HTTP status code, and 2. a custom ErrorBody consisting of an application-specific error message and code. Yes, I know you can annotate an Exception with `@ResponseStatus` to specify which HTTP status code should be returned when that Exception is thrown. However, there is no ability to specify error data that should be returned in the body (message, code, etc) along with that. You can set a ""reason"" String, but unfortunately that is just passed off to HttpServletResponse#sendError(int, String) which isn't easily customized & by default generates a HTML response (not what you want with machine-to-machine communication--you typically want a JSON error body).  Facebook is an example of a REST API that returns a error body along with appropriate HTTP status codes in their API error responses e.g.:  ``` https://graph.facebook.com/me {    ""error"": {       ""message"": ""An active access token must be used to query information about the current user."",       ""type"": ""OAuthException"",       ""code"": 2500    } } ```  ``` {   ""error"": {     ""message"": ""(#803) Some of the aliases you requested do not exist: whatever"",      ""type"": ""OAuthException"",      ""code"": 803   } } ```  It would be useful if Spring MVC had a documented way of throwing a business exception that automatically resulted in a error response with an appropriate HTTP status code plus a application/json response body containing a application-specific error message and error code.  Related, if a `@Valid` object validation failure could also be auto-mapped to an appropriate error structure (e.g. a 400 error status plus a body containing the field(s) in error along with messages and codes for each field error), that would be quite useful as well.  ---  **Affects:** 3.1.1  **Issue Links:** - #13928 Spring MVC: Guidance on reporting un-handled errors as data when implementing a REST API - #13948 DefaultHandlerExceptionResolver doesn't handle BindException but does handled other data binding related exceptions  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-29T07:39:12Z","2019-01-11T12:48:47Z"
"","13916","CORS support [SPR-9278]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9278](https://jira.spring.io/browse/SPR-9278?redirect=false)** and commented  Cross origin resource sharing (CORS) is a relevant spec these days with the emergence of HTML5 & JS clients that consume data via REST APIs. For a given app, in many cases the host that serves the JS (e.g. foo.com) is different than the host that serves the data (e.g. api.foo.com). In this case, CORS can enable the cross-domain communication.  It would be useful if Spring MVC provided code & guidance on how to configure CORS when implementing a Java-backed REST API consumed by JS clients located in other domains. Prior work exists that would be a candidate for integration.  See the resources below: CORS Spec: http://www.w3.org/TR/cors/ Basic example of a CorsFilter implementation: https://gist.github.com/2232095 What appears to be a full-featured CorsFilter implementation: https://bitbucket.org/jsumners/corsfilter  ---  **Affects:** 3.1.1  **Sub-tasks:** - #17483 DefaultCorsProcessor relies on Servlet 3 specific methods - #17523 Invalid CORS requests should not been rejected - #17524 CorsConfiguration should not be registered for handler methods without `@CrossOrigin` - #17526 Add global CORS configuration capabilities  **Issue Links:** - [DATAREST-333](https://jira.spring.io/browse/DATAREST-333) Handle OPTIONS request for CORS - #16063 Undocumented auto CORS for websocket endpoint breaking existing CORS code - [SEC-2273](https://jira.spring.io/browse/SEC-2273) CORS Suport - #16921 Comprehensive strategy for securing Origins in web transports  26 votes, 34 watchers","closed","has: votes-jira,","spring-projects-issues","2012-03-28T18:35:36Z","2019-01-13T07:05:26Z"
"","13903","Confusion around binding request parameters to Maps using Spring MVC [SPR-9265]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9265](https://jira.spring.io/browse/SPR-9265?redirect=false)** and commented  I'm trying to access HTTP query parameters as a java.util.Map Controller method argument.  This doesn't work but doesn't fail (the map appears to be always empty):  ``` @RequestMapping(value=""/{organization}/{league}/{season}/teams"", method=RequestMethod.POST, produces=""application/json"") public ResponseEntity","closed","type: enhancement,","spring-projects-issues","2012-03-24T20:10:33Z","2012-06-19T03:39:07Z"
"","13889","Unable to edit JIRA issue description after creation [SPR-9251]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9251](https://jira.spring.io/browse/SPR-9251?redirect=false)** and commented  Typos are common and SpringSource can't be expected to fix them all. It seems the ability for community members to edit a issue description after issue creation has been lost since switching to an agile issue management scheme.  ---  **Issue Links:** - #13250 Improve bug reporting experience (_**""duplicates""**_)","closed","type: task,","spring-projects-issues","2012-03-19T18:56:15Z","2019-01-11T12:46:16Z"
"","13888","A RowMapper for auto-mapping JDBC ResultSet columns to Jackson ObjectNode fields [SPR-9250]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9250](https://jira.spring.io/browse/SPR-9250?redirect=false)** and commented  Similar in spirit to the existing BeanPropertyRowMapper, but instead of mapping ResultSet columns to POJOs, we would map directly to Jackson ObjectNode instances.  The main use case is JSON serialization as part of a REST API implementation. In many cases mapping to a JavaBeans model just to write JSON is overkill. It can be a lot simpler to simply convert a JDBC ResultSet to a ObjectNode or List of ObjectNodes. This can be done at present by hand (see (1) below), but this could be automated in many scenarios with a built-in JsonNodeRowMapper implementation that is similar in spirit to BeanPropertyRowMapper.  (1) Manual ResultSet-to-JsonNode mapping example  ```      @RequestMapping(value=""/me/franchises"", method=RequestMethod.GET, params=""league"", produces=""application/json"")     public ResponseEntity","closed","type: enhancement,","spring-projects-issues","2012-03-19T18:53:05Z","2015-09-22T19:37:57Z"
"","13882","Support for form submissions with field names that follow JavaScript object notation [SPR-9244]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9244](https://jira.spring.io/browse/SPR-9244?redirect=false)** and commented  JavaScript/Ajax frameworks such as jQuery serialize Javascript Objects as form parameters using indexed object notation (because in JavaScript, every object acts like a map).  For example, the following JS object:  ``` var object = {   connection : {     provider: 'facebook',     user_id: 1256789,     access_token: 'foo'   } } ```  Gets serialized as form parameters:  ``` connection[provider]=facebook&connection[user_id]=1256789&connection[access_token]=foo ```  It would be helpful if this format could auto-bind to the root form object's 'connection' property of type JavaBean, which would have nested properties 'provider', 'userId', and 'accessToken'. JSR303 validation could then be easily run against that nested bean's properties for example. BeanWrapper can only map the above to a loosely typed Map now--I have to convert to a strongly typed JavaBean manually.  ---  **Affects:** 3.1.1  **Issue Links:** - #13880 Provide a way to customize the names of JavaBean properties when they're read and written for data binding purposes  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/4810d5b2236714c7dcd9a7bdd8d9f95b6356568f, https://github.com/spring-projects/spring-framework-issues/commit/4b7474b7365271312c5b86023537281bc65580b4, https://github.com/spring-projects/spring-framework-issues/commit/4c4b3ef7646778e04340e37bacf21daf92da6134","closed","type: enhancement,","spring-projects-issues","2012-03-15T07:51:45Z","2019-01-11T12:46:34Z"
"","13880","Provide a way to customize the names of JavaBean properties when they're read and written for data binding purposes [SPR-9242]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9242](https://jira.spring.io/browse/SPR-9242?redirect=false)** and commented  It's becoming more and more common in a HTTP environment for REST APIs to define fields using underscore notation e.g. (access_token) vs. camelCase notation (e.g. accessToken). Facebook and Twitter APIs, for example, use underscores throughout their field names for space separators and do not use camel case except in a few legacy compatibility scenarios.  I am interested in being consistent with what the others are doing--for this reason I prefer underscore_naming for my public REST API that can be accessed by different clients written in different languages. Unfortunately, Spring's data binding framework doesn't AFIK provide a feature where a custom bind field name e.g (POST resource?access_token=?) can be mapped onto a bean property (e.g. Resource#get/setAccessToken(...)). Defining properties like getAccess_token() is less than ideal since it doesn't match local Java coding conventions.  Jackson has a `@JsonProperty` annotation that provides such a feature for JSON reading and writing, but this doesn't cover the POST form parameter binding case. We could provide something similar e.g. `@Property`. Alternatively, we could just support mapping underscore style naming onto camelCase naming.  Another environment where this could be helpful would be in the use of Postgres databases. Postgres column names are case insensitive by default so underscore is by far the most common convention there.  ---  **Affects:** 3.1.1  **Issue Links:** - #14816 Customizable parameter name when binding an object - #13882 Support for form submissions with field names that follow JavaScript object notation - #18012 Add `@FormAttribute` attributes to customize x-www-form-urlencoded  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-14T16:02:28Z","2019-01-13T07:05:39Z"
"","13866","Spring JDBC: provide a simple utility API for loading parameterizable SQL strings from externalized Resources [SPR-9228]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9228](https://jira.spring.io/browse/SPR-9228?redirect=false)** and commented  It's much easier to maintain non-trivial SQL like the example below(1) when it is externalized into a separate file. It wouldn't take much to provide basic support in Spring JDBC for loading SQL from externalized resources. I don't want to bring in another tool like MyBatis just for this. I rolled my own implementation based on some code from ResourceDatabasePopulator(2).  (1)  ``` SELECT o.id as organization_id, o.name as organization_name, o.logo as organization_logo, u.username as organization_username,        l.id as league_id, l.slug as league_slug, l.sport as league_sport, l.format as league_format, l.nature as league_nature,        s.number as season_number, s.name as season_name, s.picture as season_picture, s.start_date as season_start_date,        v.venue_id, v.venue_name, v.venue_latitude, v.venue_longitude   FROM seasons s     INNER JOIN leagues l ON s.league = l.id     INNER JOIN organizations o ON l.organization = o.id     INNER JOIN (SELECT l.league, l.venue as venue_id, v.name as venue_name, v.latitude as venue_latitude, v.longitude as venue_longitude                   FROM league_venues l                     INNER JOIN venues v ON l.venue = v.id                   WHERE l.primary_venue = true) v ON l.id = v.league     LEFT OUTER JOIN usernames u ON o.id = u.organization   WHERE s.status = 'o' ```  (2) https://gist.github.com/2018152  ---  **Affects:** 3.1.1  **Reference URL:** http://stackoverflow.com/a/835323  **Issue Links:** - #13899 Improve comment handling in ResourceDatabasePopulator  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-12T07:42:54Z","2019-01-11T12:44:14Z"
"","13858","RestTemplate support for URL elements that can contain { } characters [SPR-9220]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9220](https://jira.spring.io/browse/SPR-9220?redirect=false)** and commented  The following issue was observed when working with Apache Solr, which has a query function syntax of query parameter values declared within bracket {} delimiters. For example:  http://localhost:8983/solr/select?wt=json&indent=true&fl=**&q=**:*&fq={!geofilt}&sfield=venue_location&pt=28.0674,-80.5595&d=25.  Calling restTemplate.getForObject(String, Class\) and manually escaping { and } with %7B and %7D doesn't work because the escaping gets applied twice. Leaving the { } characters as-is doesn't work as the parameter value is treated as a URI variable.  Present workaround seems to construct a URI instead of passing in a url String. Wanted to submit this issue for documentation and see if it's possible to add enhanced support for cases like this.   ---  **Affects:** 3.1.1  **Reference URL:** http://stackoverflow.com/questions/3417654/stop-uritemplate-expansion-when-using-spring-resttemplate  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-10T08:37:18Z","2019-01-13T21:07:10Z"
"","13857","RestTemplate Jackson integration using deprecated API [SPR-9219]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9219](https://jira.spring.io/browse/SPR-9219?redirect=false)** and commented  MappingJacksonHttpMessageConverter's use of TypeFactory on line 168 has been deprecated since Jackson 1.8.   ---  **Affects:** 3.1.1","closed","in: core,","spring-projects-issues","2012-03-10T08:28:40Z","2019-01-11T12:44:43Z"
"","14638","Bug in org.springframework.web.servlet-3.1.0.RELEASE.jar [SPR-10004]","**[Karthi Obuli](https://jira.spring.io/secure/ViewProfile.jspa?name=karthio)** opened **[SPR-10004](https://jira.spring.io/browse/SPR-10004?redirect=false)** and commented  I am using org.springframework.web.servlet-3.1.0.RELEASE.jar as part of spring MVC with jquery for mobile applications. Here the problem is, if my URL from the client is something like http://localhost:8008/myapp/service/login/validate/\/\  and in spring controller am using `@PathVariable` to receive input parameters.I am getting  \ as it is. But \ is truncated if has # or .  Because of this issue, if any password has these kind of characters my validation fails. resulting that the user not able to login to application.  example for password: abc#12345, in this am getting only abc. I hope I cannot  use spring 3.2 version as its not file extension.  Even i tried with 3.1.3 version also, but same problem  Please help me to resolve this as I need to deliver this fix ASAP. Awaiting for your response.   ---  **Affects:** 3.1.3","closed","status: declined,","spring-projects-issues","2012-11-20T11:13:48Z","2019-01-12T16:24:49Z"
"","14531","Close 'beans' tag in MVC namespace documentation [SPR-9898]","**[Karl Bennett](https://jira.spring.io/secure/ViewProfile.jspa?name=karlbennett)** opened **[SPR-9898](https://jira.spring.io/browse/SPR-9898?redirect=false)** and commented  The Spring MVC XML namespace example does not close the bean tag correctly.  ```xml           ```  The XML should be:  ```xml           ```  ---  **Affects:** 3.1.2  **Reference URL:** http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-config-enable  **Sub-tasks:** - #14539 Backport ""Close 'beans' tag in MVC namespace documentation""","closed","type: bug,","spring-projects-issues","2012-10-20T15:59:31Z","2019-01-11T13:21:17Z"
"","14091","Better handling of illegal locale values in LocaleChangeInterceptor [SPR-9456]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-9456](https://jira.spring.io/browse/SPR-9456?redirect=false)** and commented  When url contains illegal values for locale in the lang parameter like  ``` http://www.myhost.com/index.html?lang=en- ```  LocaleChangeInterceptor throws an exception:  ``` java.lang.IllegalArgumentException: Locale value ""no-"" contains invalid characters         at org.springframework.util.StringUtils.parseLocaleString(StringUtils.java:671)         at org.springframework.web.servlet.i18n.LocaleChangeInterceptor.preHandle(LocaleChangeInterceptor.java:73)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:781)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:669)         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:574)         at javax.servlet.http.HttpServlet.doHead(HttpServlet.java:238)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:117) ```  Maybe a better solution is to catch this exception in LocaleChangeInterceptor and just write a logmessage.  ---  **Affects:** 3.1 GA  **Issue Links:** - #17624 LocaleChangeInterceptor not protected against CSRF - #17865 BCP 47 compatible Locale support  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-05-31T02:21:19Z","2019-01-11T13:02:32Z"
"","14026","ContentNegotiationViewResolver should not decode Request-URI while fetching requested Media-Types [SPR-9390]","**[Kai Moritz](https://jira.spring.io/secure/ViewProfile.jspa?name=kai.moritz)** opened **[SPR-9390](https://jira.spring.io/browse/SPR-9390?redirect=false)** and commented  Description:  ---  If favorPathExtension is set, the ContentNegotiationViewResolver analyzes the URI of the request and adds a MediaType according to the path-extension.  While doing this, it uses the helper-function UrlPathHelper.getLookupPathForRequest(HttpRequest) to retrieve the URI. This leads to errors, when the URI contains correctly encoded reserved characters, becaus this helper-function decodes the URI!  Consider the URI ""/quo%20vadis%3f.html"". UrlPathHelper.getLookupPathForRequest(HttpRequest) decodes this to ""/quo vadis?.html"". And because of the ""?"" the ContentNegotiationViewResolver thinks, that the URI is ""/quo vadis"" and adds the MediaType ""\*/\*"", which may lead to unexpected content negotiation results.  Fix:  ---  Replace ""urlPathHelper.getLookupPathForRequest(request)"" with ""request.getRequestURI()"". I have addes a patch, which does just this and fixes the problem for me.  ---  **Affects:** 3.1.1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/19644/patch.txt) (_848 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e04b322110cd31fa3ae2df063e4b9cf39ad40f0b","closed","type: bug,","spring-projects-issues","2012-05-09T03:46:38Z","2019-01-13T21:06:47Z"
"","13840","BeanWrapper should not AutoGrow NestedPaths when setting null property value [SPR-9202]","**[jyothi mudhagouni](https://jira.spring.io/secure/ViewProfile.jspa?name=jyothipalle)** opened **[SPR-9202](https://jira.spring.io/browse/SPR-9202?redirect=false)** and commented  see attched gist for test case : https://gist.github.com/1980200  When using beanwrapper.setPropertyValue  to set null on a path, it would be helpful if beanwrapper would not autogrow nested paths, even when autogrow is set to true.   ---  **Affects:** 3.1.1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-05T10:36:45Z","2018-12-27T11:46:27Z"
"","14419","JAX-WS and SpringBeanAutowiringSupport don't work on Tomcat 7 [SPR-9786]","**[Jurica Krizanic](https://jira.spring.io/secure/ViewProfile.jspa?name=jkrizanic)** opened **[SPR-9786](https://jira.spring.io/browse/SPR-9786?redirect=false)** and commented  Hi, I am having the problem with SpringBeanAutowiringSupport, I think it is the same as the issue #10323 which is marked as resolved.  I am getting the message below in the log file, and dependencies of AdminWS are not injected, so I am getting NullPointerException. I am using `@Autowired` annotation to incject the dependecies.  2012-09-11 14:32:46,248 DEBUG SpringBeanAutowiringSupport:89 - Current WebApplicationContext is not available for processing of AdminWS: Make sure this class gets constructed in a Spring web application. Proceeding without injection.  It won't work with combination Spring 3.1.2 + Tomcat 7.0.30.  It works fine with Tomcat 6.0.35.  Can anyone provide help?  Thank you in advance!  Best regards, Jurica Krizanic  ---  **Affects:** 3.1.2  6 votes, 15 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-09-11T08:01:34Z","2019-01-12T00:26:17Z"
"","14484","Prevent memory leaks with @Configuration beans [SPR-9851]","**[Juraj Misur](https://jira.spring.io/secure/ViewProfile.jspa?name=jmisur)** opened **[SPR-9851](https://jira.spring.io/browse/SPR-9851?redirect=false)** and commented  I have an app where I create many spring contexts for 3rd party classes, so they can autowire some resources, work in restricted environment, basically some ""plugin system"". These contexts are created and destroyed dynamically, sometimes in rapid pace.  Since I added support for custom javaconfig style context configuration, app started to produce PermGen errors. I traced it to the root of the problem, shown in this simple test:  ``` package springctx;  import org.springframework.context.annotation.AnnotationConfigApplicationContext;  public class SpringCtxTest {  	public static void main(String[] args) { 		while (true) { 			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfigClass.class); 			ctx.destroy(); 		} 	}  } ```  Config class:  ``` package springctx;  import org.springframework.context.annotation.Configuration;  @Configuration public class MyConfigClass {  } ```  When I run this, I can see clearly in VisualVM that PermGen is heading to the sky. Heapdump revealed gazillion of springctx.MyConfigClass$$EnhancerByCGLIB$$5d91109e entries in CachedIntrospectionResults  When I run it without `@Configuration` annotation, everything is OK.  ---  **Affects:** 3.1.1  **Sub-tasks:** - #14535 Backport ""Prevent memory leaks with `@Configuration` beans""  **Issue Links:** - #12663 MemoryLeak in Cglib2AopProxy.ProxyCallbackFilter - #14941 Concurrent creation of the same Configuration class in different contexts is not thread-safe  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27c83710b013e4ffb8758b8c1f9ae4d204558391, https://github.com/spring-projects/spring-framework/commit/ced6bb4569af81ea86850a4d028d11088488ef1e, https://github.com/spring-projects/spring-framework/commit/c8061393fbe3aa20bb51606c60d01a772d3df536","closed","in: core,","spring-projects-issues","2012-10-03T13:44:02Z","2019-01-13T07:02:50Z"
"","14389","Spring's ReloadableResourceBundleMessageSource not finding properties file [SPR-9755]","**[Julien Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=balteo)** opened **[SPR-9755](https://jira.spring.io/browse/SPR-9755?redirect=false)** and commented  The issue is described in the above URL. Several people have encountered this issue before me and most have chosen to circumvent it by placing their resource in the classpath.  Wouldn't there be a way of providing a different message? A WARNING would be more appropriate than a DEBUG when a resource cannot be resolved?   ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?129901-Spring-s-ReloadableResourceBundleMessageSource-not-finding-properties-file","closed","status: bulk-closed,","spring-projects-issues","2012-09-04T13:25:40Z","2019-01-12T00:26:29Z"
"","14308","Spring Select tag sometime unpopulated until page is refreshed. [SPR-9674]","**[Julie Cronin](https://jira.spring.io/secure/ViewProfile.jspa?name=jcronin)** opened **[SPR-9674](https://jira.spring.io/browse/SPR-9674?redirect=false)** and commented  I have a sporadic issue where a page containing a Spring form prepopulates all fields with the exception of the Spring select tag. When this sporadically occurs the user must refresh the page to see the options populated. I am using a session variable to pass in the options, and the option which matches the path attribute of the select will be pre-selected by the Spring select tag. My theory is that sometimes the select tag doesn't have time to finish loading the options from the session attribute and pre-selecting the appropiate option based on path attribute's current value. The way I get around this, is to call a javascript funcation after onload event occurs in the Body tag. The javascript function checks if the select tag has options, if not than an automated page refresh occurs. This seems to resolve the issue, but I was wondering if anyone else had this issue with the select tag, and if this tag can be optimized to load faster. Below are snippets of codes from what I discussed above.  \       \ \.....\ \function checkForRefresh(){ var hasOptions = document.getElementById(""Foo"").options.length; if(hasOptions == 1) { window.location.reload(); } }   ---  **Affects:** 3.0.5","closed","status: bulk-closed,","spring-projects-issues","2012-08-08T06:13:27Z","2019-01-12T02:46:47Z"
"","14680","When a @RequestMapping Returns a Sublclass of ResponseEntity It Is Returning Header and StatusCode Along with the Body [SPR-10046]","**[Julian Builes](https://jira.spring.io/secure/ViewProfile.jspa?name=jlnbuiles)** opened **[SPR-10046](https://jira.spring.io/browse/SPR-10046?redirect=false)** and commented  When subclassing ResponseEntity that returns a JSON response, the body in the resulting response is also including 'headers' and 'statusCode fields.  ```         class MyClass {                   public String field;                         public MyClass(String field1) {                 this.field = field1;             }         }                  class MyClassResponse extends ResponseEntity {             public MyClassResponse(MyClass body, HttpHeaders headers, HttpStatus statusCode) {                 super(body, headers, statusCode);             }         }                  @RequestMapping(value = ""aaa"", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)         @ResponseBody         public ResponseEntity dummy() {              HttpHeaders headers = new HttpHeaders();             headers.add(""some-header"", ""some header value"");             headers.add(""another-header"", ""another header value"");              return new MyClassResponse(new MyClass(""this is the response body""), headers, HttpStatus.CREATED);         } ```  Is returning:  ``` { ""headers"": { ""some-header"": [(1) ""some header value"" ],- ""another-header"": [(1) ""another header value"" ]- },- ""body"": { ""field"": ""this is the response body"" },- ""statusCode"": ""CREATED"" } ```  Considerations: * This appears to be a regression introduced between 3.1.2 and 3.1.3. * We are using Jackson to convert the JSON    ---  **Affects:** 3.1.3  1 votes, 4 watchers","closed","status: invalid,","spring-projects-issues","2012-11-27T11:01:44Z","2019-01-12T05:27:44Z"
"","14212","Using Spring beans as a part of key in cache annotations (@Cacheable etc.) doesn't work [SPR-9578]","**[Juha Syrjälä](https://jira.spring.io/secure/ViewProfile.jspa?name=jsyrjala)** opened **[SPR-9578](https://jira.spring.io/browse/SPR-9578?redirect=false)** and commented  I am trying to use a result of method call to a spring bean as a part of the cache key, but that doesn't seem to work.  `@Inject` private KeyCreatorBean keyCreatorBean;  `@Cacheable`(value = ""cacheName"", key = ""{`@keyCreatorBean`.createKey, #p0}"") `@Override` public List\ getExamples(ExampleId exampleId) {  Results in this kind of stack trace:  org.springframework.expression.spel.SpelEvaluationException: EL1008E:(pos 1): Field or property 'keyCreatorBean' cannot be found on object of type 'org.springframework.cache.interceptor.CacheExpressionRootObject' at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:208) at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:72) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:52) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:93) at org.springframework.expression.spel.ast.InlineList.getValueInternal(InlineList.java:86) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:93) at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:88) at org.springframework.cache.interceptor.ExpressionEvaluator.key(ExpressionEvaluator.java:80) at org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.generateKey(CacheAspectSupport.java:464)  ---  **Reference URL:** http://stackoverflow.com/q/11396911/1431  **Issue Links:** - #18385 Cacheable condition SpEL cannot invoke bean methods (_**""duplicates""**_) - #13512 `@Cachable` condition should allow referencing return value - #18804 Allow `@Cacheable` method to return java.util.Optional variant of cached value  10 votes, 12 watchers","closed","has: votes-jira,","spring-projects-issues","2012-07-10T03:59:33Z","2019-01-13T07:03:53Z"
"","14515","Annotation-driven JMS endpoints [SPR-9882]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9882](https://jira.spring.io/browse/SPR-9882?redirect=false)** and commented  `@JmsListener`(destination=""myQueue"", selector=""..."") public void handleMessage(String payload)  Activated through , possibly underneath a  element. Creating and registering DefaultMessageListenerContainer beans underneath the covers, just like for  entries.  ---  **Issue Links:** - #12846 Support JMS 2.0 (JSR-343) - #15500 Applying the spring-messaging module to JMS - #16585 Support JMS 2.0's shared consumers in message listener containers - #16655 JmsListener/ScheduledAnnotationBeanPostProcessor should use SmartInitializingSingleton instead of ContextRefreshedEvent - #19609 Backward compatibility: initDefaultStrategies() is no longer invoked on subclasses of ""MessageListenerAdapter""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6aa16b745fe2490d3790cd9745a04fabd41733cc, https://github.com/spring-projects/spring-framework/commit/713dd60fa74843ba8d27c1c459dc9e7beb9dac19, https://github.com/spring-projects/spring-framework/commit/50c5cc0bd203bcd30cd915629725cc14b4d527d8, https://github.com/spring-projects/spring-framework/commit/a9100c427cd2a775541642c32a09e19f056324f5  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-10-14T14:36:46Z","2019-01-11T13:22:24Z"
"","14278","Evaluate Java 8 concurrency enhancements [SPR-9644]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9644](https://jira.spring.io/browse/SPR-9644?redirect=false)** and commented  http://openjdk.java.net/jeps/155  ---  This issue is a sub-task of #14273  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2012-07-26T10:22:27Z","2019-01-11T13:00:34Z"
"","14277","Java 8 parameter name discovery for methods and constructors [SPR-9643]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9643](https://jira.spring.io/browse/SPR-9643?redirect=false)** and commented  http://openjdk.java.net/jeps/118  ---  This issue is a sub-task of #14273  0 votes, 7 watchers","closed","type: task,","spring-projects-issues","2012-07-26T10:21:30Z","2019-01-11T13:00:30Z"
"","14276","Support NIO-based HTTP client API [SPR-9642]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9642](https://jira.spring.io/browse/SPR-9642?redirect=false)** and commented  http://openjdk.java.net/jeps/110  ---  This issue is a sub-task of #14273","closed","status: declined,","spring-projects-issues","2012-07-26T10:20:33Z","2019-01-11T13:00:41Z"
"","14275","Support Date and Time API (JSR-310) [SPR-9641]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9641](https://jira.spring.io/browse/SPR-9641?redirect=false)** and commented  http://openjdk.java.net/jeps/150  ---  This issue is a sub-task of #14273  **Issue Links:** - #15884 Add Converter implementations that convert legacy Date instances into JDK 8 date/time types  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2012-07-26T10:19:16Z","2019-01-11T13:00:39Z"
"","14274","API compatibility with lambda expressions [SPR-9640]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9640](https://jira.spring.io/browse/SPR-9640?redirect=false)** and commented  http://openjdk.java.net/jeps/126  Consider marking all applicable Spring callback interfaces with Java 8's `@FunctionalInterface`. Even if that marker basically just works as a compiler assertion along the lines of `@Override`, it might still be worth using it consistently as a formal documentation measure. Applicable Spring interfaces can then by found by that marker and will be documented as such in javadoc.  ---  This issue is a sub-task of #14273  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2012-07-26T10:18:04Z","2019-01-11T13:00:43Z"
"","14273","Comprehensive support for Java 8 / OpenJDK 8 [SPR-9639]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9639](https://jira.spring.io/browse/SPR-9639?redirect=false)** and commented  ---  **Sub-tasks:** - #14274 API compatibility with lambda expressions - #14275 Support Date and Time API (JSR-310) - #14276 Support NIO-based HTTP client API - #14277 Java 8 parameter name discovery for methods and constructors - #14278 Evaluate Java 8 concurrency enhancements - #15162 Evaluate Java 8 repeatable annotations  0 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2012-07-26T10:12:37Z","2019-01-11T12:56:53Z"
"","14197","Backport ""Quartz 2.x scheduler support (SimpleTriggerFactoryBean) ignores repeatCount attribute"" [SPR-9563]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9563](https://jira.spring.io/browse/SPR-9563?redirect=false)** and commented  ---  This issue is a backport sub-task of #14155","closed","","spring-projects-issues","2012-07-04T14:20:14Z","2019-01-11T12:54:25Z"
"","14189","Backport ""DispatcherPortlet shouldn't call exposeActionException during event processing"" [SPR-9555]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9555](https://jira.spring.io/browse/SPR-9555?redirect=false)** and commented  ---  This issue is a backport sub-task of #13925","closed","","spring-projects-issues","2012-07-02T14:40:57Z","2019-01-11T13:06:51Z"
"","14188","Backport ""Use BufferedInputStream in SimpleMetaDataReader to double performance"" [SPR-9554]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9554](https://jira.spring.io/browse/SPR-9554?redirect=false)** and commented  ---  This issue is a backport sub-task of #14162","closed","","spring-projects-issues","2012-07-02T13:04:41Z","2019-01-11T13:06:59Z"
"","14662","Simplify CachedIntrospectionResults caching arrangements [SPR-10028]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-10028](https://jira.spring.io/browse/SPR-10028?redirect=false)** and commented  Spring's CachedIntrospectionResults class traditionally comes with three different modes of static caching, primarily for defensiveness in terms of ClassLoader leaks. These three modes can be simplified to two: basically traditional ClassLoader layouts (with embedded Spring jars within the application) and non-traditional layouts (with the Spring jars higher up the hierarchy or in a different node of the ClassLoader tree altogether).  ---  **Issue Links:** - #14336 ExtendedBeanInfo exception - java.beans.IntrospectionException - #16486 Revisit class cache in CachedIntrospectionResults - #14663 Overhaul non-void JavaBean write method support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bed2134736d00690c27f7330a135cfc771c70ec8, https://github.com/spring-projects/spring-framework/commit/0ee12563b038797a137ac67b13e5dd6d3d918a7f, https://github.com/spring-projects/spring-framework/commit/c368068c0c17b77377ee2dc2314a10541c41daab, https://github.com/spring-projects/spring-framework/commit/4a8be690998f43a9253305e09f96ad83058ef540","closed","type: enhancement,","spring-projects-issues","2012-11-25T02:38:42Z","2019-01-11T18:41:11Z"
"","14404","DelegatingDataSource incorrectly implements java.sql.Wrapper [SPR-9770]","**[Juan M. Tula](https://jira.spring.io/secure/ViewProfile.jspa?name=juan_tula)** opened **[SPR-9770](https://jira.spring.io/browse/SPR-9770?redirect=false)** and commented  #### Status Quo  Spring's `DelegatingDataSource` does not correctly implement the `java.sql.Wrapper` interface.  #### Analysis  According to the documentation for the `unwrap()` and `isWrapper()` methods, if the receiver implements the received interface, it should return itself, something like this:  ``` public  T unwrap(Class iface) throws SQLException { 	T result; 	if(iface.isInstance(this)) { 		result = iface.cast(this); 	} else { 		result = getTargetDataSource().unwrap(iface); 	} 	return result; } ```  But the implementation is currently this:  ``` public  T unwrap(Class iface) throws SQLException { 	return getTargetDataSource().unwrap(iface); } ```  So, a call to `new DelegatingDataSource().unwrap(DelegatingDataSource.class)` will fail instead of returning itself.  ---  **Affects:** 3.1 GA  **Reference URL:** http://docs.oracle.com/javase/6/docs/api/java/sql/Wrapper.html?is-external=true  **Issue Links:** - #14489 AbstractRoutingDataSource does not allow to unwrap the underlying datasource  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2012-09-06T17:17:06Z","2019-01-11T13:37:02Z"
"","13981","org.springframework.core.convert.Property class performs expensive operations in its constructor [SPR-9343]","**[jsl1](https://jira.spring.io/secure/ViewProfile.jspa?name=jsl1)** opened **[SPR-9343](https://jira.spring.io/browse/SPR-9343?redirect=false)** and commented  org.springframework.core.convert.Property class performs expensive operations in its constructor such as resolveAnnotations() method.  The annotations could be lazy loaded instead (when calling getAnnotations()) I noticed that while profiling an application using BeanWrapperImpl to set java bean properties values (see screenshot attached).  ---  **Affects:** 3.1.1  **Attachments:** - [spring_bug.png](https://jira.spring.io/secure/attachment/19614/spring_bug.png) (_26.25 kB_)  **Issue Links:** - #14304 Poor Performance with lots of Prototype Scoped Beans (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-04-25T07:15:55Z","2019-01-11T12:37:28Z"
"","14387","Override toString() in out-of-the-box implementations of SqlParameterSource [SPR-9753]","**[João Loureiro](https://jira.spring.io/secure/ViewProfile.jspa?name=jloureiro)** opened **[SPR-9753](https://jira.spring.io/browse/SPR-9753?redirect=false)** and commented  MapSqlParameterSource and BeanPropertySqlParameterSource should override toString() appropriately, that is, the returned string should represent the object in terms of the parameter values it contains (at least; optionally, the types as well). The returned string can use a Map-like representation.   ---  **Affects:** 3.2 M1  **Reference URL:** http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/jdbc/core/namedparam/SqlParameterSource.html  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/2080","closed","type: enhancement,","spring-projects-issues","2012-09-04T08:50:52Z","2019-04-23T05:29:28Z"
"","14518","MockHttpServletResponse.getHeaderNames is incompatible with Servlet 3.0 [SPR-9885]","**[Joshua Spiewak](https://jira.spring.io/secure/ViewProfile.jspa?name=jspiewak)** opened **[SPR-9885](https://jira.spring.io/browse/SPR-9885?redirect=false)** and commented  HttpServletResponse defines getHeaderNames as returning Collection\, while MockHttpServletResponse defines it as returning Set\. Use of the interface with a concrete instance of the mock yields an AbstractMethodError. Attached are a Maven pom.xml and Java class that compiles but when run yields the exception:  ``` Exception in thread ""main"" java.lang.AbstractMethodError: org.springframework.mock.web.MockHttpServletResponse.getHeaderNames()Ljava/util/Collection; 	at Example.main(Example.java:9) ```  The closest existing issue that I could find is #13173 which covered getHeaders but not getHeaderNames.  ---  **Affects:** 3.1.2  **Attachments:** - [Example.java](https://jira.spring.io/secure/attachment/20560/Example.java) (_406 bytes_) - [pom.xml](https://jira.spring.io/secure/attachment/20559/pom.xml) (_1014 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9bb4b3b80b1b1d2ea65278bdeab28438e6d7be4, https://github.com/spring-projects/spring-framework/commit/5a773b771d2b300888df33128f6c3993e2bd50b9  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2012-10-17T06:34:15Z","2019-01-11T13:22:00Z"
"","14463","Websphere Grails Classloader issues [SPR-9830]","**[Joseph Wood](https://jira.spring.io/secure/ViewProfile.jspa?name=dedraelos)** opened **[SPR-9830](https://jira.spring.io/browse/SPR-9830?redirect=false)** and commented  IBM suggested we open a ticket with the Spring Foundation on our issue. We are developing an application using Grails with Spring running on Websphere Application Server ND. To quickly summarize, our problem is this. When we initially install our application via the Websphere Console, we have no problems. When we update our application (via the console), also no problems. Yet, when we update our application via the wsadmin tool, we encounter errors preventing startup. IBM's belief is that when the application update does it's shutdown procedure, there are classes retaining reference objects not being cleaned up properly causing a classloader leak. Is there any way I might be able to request assistance diagnosing this issue.  We have a large number of logs/trace files available that we've provided for IBM, if I can provide any of use let me know and I'll provide them.   --- No further details from [SPR-9830](https://jira.spring.io/browse/SPR-9830?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-09-25T12:36:15Z","2019-01-12T05:28:00Z"
"","14636","Changing the default behaviour of DeferredResult when the timeout is triggered [SPR-10002]","**[Joseph Vartuli](https://jira.spring.io/secure/ViewProfile.jspa?name=joevartuli)** opened **[SPR-10002](https://jira.spring.io/browse/SPR-10002?redirect=false)** and commented  As of Spring Web 3.2.0.RC1 when the DeferredResult constructor is called without a timeoutResult object and the timeout period is reached, Spring Web will respond with a HTTP Status Code of 200 with a java.lang.Object being returned. It could be considered more appropriate if the timeout period has been reached that an exception is thrown with a HTTP Error Status 408 Request timeout returned to the client.   ---  **Affects:** 3.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e3681c107dab0e5a136241069bd833087d2df76e","closed","type: enhancement,","spring-projects-issues","2012-11-19T13:35:12Z","2012-11-22T12:47:46Z"
"","14011","@Transactional annotation does not work with inheritance and qualifiers [SPR-9375]","**[Jose Ignacio Gil Jaldo](https://jira.spring.io/secure/ViewProfile.jspa?name=nachogil)** opened **[SPR-9375](https://jira.spring.io/browse/SPR-9375?redirect=false)** and commented  I am not sure if it is intended to be a new feature or it is a bug, but since the `@Transactional` annotation is annotated as well as `@Inherited`, I would say it's more like a bug.  The situation is the following:  - Interface I - Class A (abstract has JPA implementation methods, implements I). - Class B (concrete and extending the class A) wants to take advantage of those methods.  There are more than 1 TransactionManager (one per module).  If I annotate the class B with `@Transactional` and try to use qualifier (to specify which transaction manager I want to use), it does not work. The problem seems to be in the class: AbstractFallbackTransactionAttributeSource in this snippet to be more specific:  ```java // Second try is the transaction attribute on the target class. txAtt = findTransactionAttribute(specificMethod.getDeclaringClass()); if (txAtt != null) { 	return txAtt; } ```  there are 2 options, the comment is wrong or the code is wrong. specificMethod.getDeclaringClass() is not the target class in my situation, is my abstract class A (because that one implements the methods).  A solution would be adding:  ```java // Second try is the transaction attribute on the target class. txAtt = findTransactionAttribute(userClass); if (txAtt != null) { 	return txAtt; } ```  Because that one would search in both userClass and specificMethod.getClass() since the annotation is `@Inherited`. It should be backwards compatible (except on the strange case of someone setting an annotation on both parent and child and expecting the one of the parent to be used, so the child one's would be 100% useless).   ---  **Affects:** 3.1 GA  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/106  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-05-04T00:32:59Z","2020-01-03T18:24:58Z"
"","13869","ScheduledTaskRegistrar shouldn't use InitializingBean#afterPropertiesSet to start scheduled tasks [SPR-9231]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-9231](https://jira.spring.io/browse/SPR-9231?redirect=false)** and commented  The ScheduledTasksBeanDefinitionParser creates a ScheduledTaskRegistrar. Because ScheduledTaskRegistrar schedules task using InitializingBean#afterPropertiesSet these tasks start running while the ApplicationContext hasn't fully initialized yet. When those tasks in turn interact with the ApplicationContext, this can lead to problems (in my case a deadlock as some initializing bean was trying to obtain a lock on an AMQP Connection already in use by my scheduled task). The ScheduledAnnotationBeanPostProcessor implements ApplicationListener\ to create that ScheduledTaskRegistrar in onApplicationEvent and to call afterPropertiesSet itself from there, so it doesn't suffer from this problem.  I would think that when using the task namespace Spring should still guarantee that tasks aren't scheduled until the ApplicationContext is completely initialized, so the ScheduledTaskRegistrar should probably implement ApplicationListener\ itself.  See https://jira.springsource.org/browse/AMQP-218 for background info.   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0efdd3d5668115b5463c119392e93dc830c9de60  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2012-03-12T16:40:51Z","2013-01-22T13:06:05Z"
"","14616","Support comments within SQL statements in JdbcTestUtils [SPR-9982]","**[Joram Agten](https://jira.spring.io/secure/ViewProfile.jspa?name=joram.agten)** opened **[SPR-9982](https://jira.spring.io/browse/SPR-9982?redirect=false)** and commented  #### Status Quo  Executing an SQL script via `JdbcTestUtils.executeSqlScript()` with the following content fails.  ```sql INSERT INTO persons( person_id                    , name) VALUES( 1      -- person_id       , 'Name' --name ); ```  ``` org.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [INSERT INTO persons( person_id                   , name)VALUES( 1      - person_id      , 'Name' --name)]; nested exception is java.sql.SQLSyntaxErrorException: ORA-00917: missing comma ```  #### Proposed Solutions  1. keep the carriage returns after each line when building statements (line 388 389) 2. strip all characters (per line) after the DEFAULT_COMMENT_PREFIX (including the prefix)  I think solution 1 is preferred, since 2 might become db dependent.  #### Deliverables  1. [x] Ensure that multi-line statements which contain comments can be executed.  ---  **Affects:** 3.1.3  **Issue Links:** - #14227 JdbcTestUtils should not interpret comments as a separate statement - #14964 JdbcTestUtils readScript fails to see commented lines with tabs - #14708 Support comments within SQL statements in ResourceDatabasePopulator - #14165 Support multi-line SQL comments in ResourceDatabasePopulator and JdbcTestUtils - #13899 Improve comment handling in ResourceDatabasePopulator (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a422f48c658b8574ed36a9232e8de53c576ea48, https://github.com/spring-projects/spring-framework/commit/d0f687f028eef881cf034fa8741a96a5239ef193","closed","type: enhancement,","spring-projects-issues","2012-11-12T04:01:27Z","2019-01-11T14:20:34Z"
"","14455","3.1.x RestTemplate documentation refers to the depredated CommonsClientHttpRequestFactory [SPR-9822]","**[Jonathan Fullam](https://jira.spring.io/secure/ViewProfile.jspa?name=jonathanfullam)** opened **[SPR-9822](https://jira.spring.io/browse/SPR-9822?redirect=false)** and commented  The 3.1.x documentation (20.9.1 RestTemplate) refers to the use of CommonsClientHttpRequestFactory which is deprecated and should be replaced with HttpComponentsClientHttpRequestFactory when wanting to use the Apache HTTPClient implementation with RestTemplate.   ---  **Affects:** 3.1.2  **Reference URL:** http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/remoting.html#rest-resttemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f504dda3a8fe682f2ca789955818c9a5609f19e","closed","type: task,","spring-projects-issues","2012-09-23T08:00:00Z","2012-11-04T06:54:03Z"
"","14617","o.s.web.util.JavaScriptUtils.javaScriptEscape insufficiently escapes some characters [SPR-9983]","**[Jon Passki](https://jira.spring.io/secure/ViewProfile.jspa?name=jonpasski)** opened **[SPR-9983](https://jira.spring.io/browse/SPR-9983?redirect=false)** and commented  JavaScriptUtils.javaScriptEscape() currently does not escape all characters that are sensitive within either a JS single quoted string, JS double quoted string, or HTML script data context.  ECMAScript 5.1 (ECMA 262) [1] defines a line terminator as either U+000A (LF), U+000D (CR), U+2028 (PS), or U+2029 (LS). Line terminators are disallowed in either string context. Their inclusion ought to result in a parse error if inserted without escaping. The javaScriptEscape() method currently escapes U+000A and removes U+000D.  HTML 5's Tokenizer defines different states that can occur within a \ tag [2]. If the value ""","closed","type: enhancement,","spring-projects-issues","2012-11-12T12:22:25Z","2013-12-05T09:21:38Z"
"","14104","Add support for  in addition to  for   [SPR-9469]","**[Jon Kranes](https://jira.spring.io/secure/ViewProfile.jspa?name=jkranes)** opened **[SPR-9469](https://jira.spring.io/browse/SPR-9469?redirect=false)** and commented  Allow  as well as \ for , in order to allow configuration using existing beans.  This capability already exists for .   ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-06-05T09:37:35Z","2012-11-13T18:49:55Z"
"","14579","SQL Server error code 209 should map to BadSqlGrammarException [SPR-9946]","**[Jon Freedman](https://jira.spring.io/secure/ViewProfile.jspa?name=jfreedman)** opened **[SPR-9946](https://jira.spring.io/browse/SPR-9946?redirect=false)** and commented  Executing the following statement currently throws a TransientDataAccessResourceException but should throw a BadSqlGrammarException  ``` SELECT x.foo x, y.foo y FROM (     SELECT 'x' foo ) x JOIN (     SELECT 'x' foo ) y ON y.foo = x.foo ORDER BY foo ```  There's nothing transient about this error   --- No further details from [SPR-9946](https://jira.spring.io/browse/SPR-9946?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-11-02T03:42:07Z","2012-11-04T06:54:07Z"
"","14334","Fine-grained configuration of Converters on method parameters [SPR-9700]","**[Jon Brisbin](https://jira.spring.io/secure/ViewProfile.jspa?name=jbrisbin)** opened **[SPR-9700](https://jira.spring.io/browse/SPR-9700?redirect=false)** and commented  In Spring Data REST we came across a situation where I might want to configure a specific Converter on a method parameter to allow the user to specifically configure that parameter to use a given Converter.  For example, I can specify a generic String[] -> List\ converter that will take all instances of String[] (from a query string, for example) and convert it to a List\ which I use as the parameter value for a reflected method invocation. But it may be that, for a given parameter, I don't want to use that generic Converter but I want to use a specific Converter that splits a list of values from a single, comma-delimited String, for example.  Currently, I see no real way to configure a method parameter to use a specific Converter. I created a `@ConvertWith` annotation that had a Class\> property on it that the user could use like this:  public List\ findById(`@Param`(""ids"") `@ConvertWith`(StringToListOfLongsConverter.class) List\ ids);  Ideally, what I'd like is a MethodParameterConverter that could take a reflected method parameter and figure out, given the target type, whether it should use a generic or a specific, user-defined Converter.   ---  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-08-17T14:11:31Z","2015-09-25T16:35:57Z"
"","14205","ReflectionTestUtils.setField() should not call toString() on the target [SPR-9571]","**[John Richardson](https://jira.spring.io/secure/ViewProfile.jspa?name=barooo)** opened **[SPR-9571](https://jira.spring.io/browse/SPR-9571?redirect=false)** and commented  `ReflectionTestUtils.setField()` is implicitly calling `toString()` on the target when arguments for a call to `Assert.notNull()` are built, which can have side effects, specifically (line 107):  ``` Field field = ReflectionUtils.findField(target.getClass(), name, type); Assert.notNull(field, ""Could not find field ["" + name + ""] on target ["" + target + ""]""); ```  For example, a lot of our database models have a `toString()` which dumps properties, which can try and hit the database. If the connection is null a new one is created.  I am unable to inject a mock connection into the model with `setField()` from 3.1+ because during injection a call to `toString()` happens which will trigger initialization and try and use a real connection instead of using my mock.  In 3.0.6, the `toString()` was wrapped in a null check so it only happened on error instead of when the arguments to `Assert.notNull()` are built.  You could argue that `toString()` shouldn't have side effects, but `ReflectionTestUtils` is often used on questionable, legacy code to make it testable.  I've reverted to spring-test 3.0.6 in the meantime.  ---  **Affects:** 3.1.1  **Issue Links:** - #18934 Upgrade build to Gradle 2.14.1 - #18935 ReflectionTestUtils should defensively invoke toString() on target objects","closed","type: bug,","spring-projects-issues","2012-07-06T14:02:11Z","2019-01-11T12:53:52Z"
"","13991","Simplify integration between Spring and Struts 1.X (Please refer to Description field) [SPR-9353]","**[John Hao](https://jira.spring.io/secure/ViewProfile.jspa?name=haohaijiao518@163.com)** opened **[SPR-9353](https://jira.spring.io/browse/SPR-9353?redirect=false)** and commented  When we configure struts action bean into Spring, we have to move action configuration sentences from Struts_configure.xml into Spring xml. I have an ideal to simplify this step as below described.  1. Add a new Name space xmlns:struts=http://www.springframework.org/schema/struts  2. Add a new command into Spring configuration      Resource: Location Struts configuration file and support Ant file Pattern.  3. Add a new schema resolver handle into spring.handlers under META-INF  http\://www.springframework.org/schema/struts=org.springframework.web.struts.beans.factory.xml.StrutsNamespaceHandler  4. StrutsNamespaceHandler is implemented to parse struts configuration xml and put bean definition into bean factory IOC container.  Bean name: action path Bean class: action type    --- No further details from [SPR-9353](https://jira.spring.io/browse/SPR-9353?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-04-27T22:33:44Z","2012-05-26T19:46:06Z"
"","13990","Simplify integration between Spring and Struts 1.X (Please refer to Description field) [SPR-9352]","**[John Hao](https://jira.spring.io/secure/ViewProfile.jspa?name=haohaijiao518@163.com)** opened **[SPR-9352](https://jira.spring.io/browse/SPR-9352?redirect=false)** and commented   --- No further details from [SPR-9352](https://jira.spring.io/browse/SPR-9352?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-04-27T22:08:50Z","2019-01-11T12:37:03Z"
"","17051","iBatis 3.x & Spring Integration Issue (Properties Placeholder Issue) [SPR-12446]","**[John Hao](https://jira.spring.io/secure/ViewProfile.jspa?name=haohaijiao518@163.com)** opened **[SPR-12446](https://jira.spring.io/browse/SPR-12446?redirect=false)** and commented  Pre-condition:  When we use dynamic parameter to configure datasource like the below code  ```xml                           ```  Issue Occurred we use `org.mybatis.spring.mapper.MapperScannerConfigurer` to auto scan all mapper and generate mapper bean by CGLIB and registry into Beanfactory of spring. the dynamic keys like `${XX}` cannot be replaced.  Anaylsis  `MapperScannerConfigurer` works before all post processors like `PropertyPlaceholderConfigurer` ``, hence dynamic keys cannot be replaced due to there is no properties loading.  Resolve  Firstly, I know this is not a bug in Spring framework, but because Spring framework is the greatest success project in the Java community, this bug would become it more unconvenient to use MapperScannerConfigurer provided by myBatis team.  I have tried to modify it by below code changed, it seems to work well. But I am not able to verify whether such modification would make potential issue or risk. please help suggest or if your team would help fix it from high system perspective.  ```java org.springframework.context.support.AbstractApplicationContext  @override protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {  		Map prcs = beanFactory.getBeansOfType(PropertyResourceConfigurer.class);  		if (!prcs.isEmpty()) {  			for (PropertyResourceConfigurer prc : prcs.values()) {  				prc.postProcessBeanFactory(beanFactory); 			}  		}  	} ```  ---  No further details from [SPR-12446](https://jira.spring.io/browse/SPR-12446?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-05-26T01:13:31Z","2019-01-13T20:58:07Z"
"","14090","JavaDoc of AbstractRefreshableConfigApplicationContext.resolvePath out of date [SPR-9455]","**[Johannes Scharf](https://jira.spring.io/secure/ViewProfile.jspa?name=scharfj)** opened **[SPR-9455](https://jira.spring.io/browse/SPR-9455?redirect=false)** and commented  The JavaDoc of AbstractRefreshableConfigApplicationContext.resolvePath doesn't reflect the latest changes regarding the introduction of the environment abstraction. It says ""...replacing placeholders with corresponding system property values if necessary."" - But it should point out that underneath the environment is used to resolve placeholders.   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ede9d535ea89b15e58efb11dfa4136659e6adf3c","closed","in: core,","spring-projects-issues","2012-05-30T11:45:35Z","2013-01-23T07:09:31Z"
"","14227","JdbcTestUtils should not interpret comments as a separate statement [SPR-9593]","**[Johannes Odland](https://jira.spring.io/secure/ViewProfile.jspa?name=mrodland)** opened **[SPR-9593](https://jira.spring.io/browse/SPR-9593?redirect=false)** and commented  #### Overview  The `splitSqlScripts()` method in `JdbcTestUtils` splits scripts at a given delimiter, often ';'. If the script has a trailing comment this will be returned as a separate statement. When executing the statements an exception will be thrown.  #### Steps to Reproduce  If you call `SimpleJdbcTestUtils.executeSqlScript()` on the following script, the trailing comment will be detected as a separate statement and executed, resulting in a `BadSqlGrammarException`.  ```sql CREATE SQEUENCE HIBERNATE_SEQUENCE; -- End of script ```  ---  **Affects:** 3.1.2  **Sub-tasks:** - #14536 Backport ""JdbcTestUtils should not interpret comments as a separate statement""  **Issue Links:** - #13873 Deprecate SimpleJdbcTestUtils in favor of JdbcTestUtils - #14616 Support comments within SQL statements in JdbcTestUtils - #13899 Improve comment handling in ResourceDatabasePopulator (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/397d20b55a623fb3eb3655047334c957e66504c2, https://github.com/spring-projects/spring-framework/commit/4aaf014cc6bed8bdeea375556b1022066359e79d, https://github.com/spring-projects/spring-framework/commit/d8dc4a257afa2aad9575e4d17a283935735f949e","closed","type: bug,","spring-projects-issues","2012-07-13T03:02:58Z","2019-01-11T12:52:45Z"
"","14623","Using multiple PropertyPlaceholderConfigurer breaks @Value default value behavior [SPR-9989]","**[Johann Vanackere](https://jira.spring.io/secure/ViewProfile.jspa?name=vanackej)** opened **[SPR-9989](https://jira.spring.io/browse/SPR-9989?redirect=false)** and commented  When using multiple `PropertyPlaceholderConfigurer` in conjunction with `@Value` annotation and default value for placeholders syntax (ie `${key:defaultValue}`), only the first `PropertyPlaceholderConfigurer` is used. If this configurer does not contain the desired value, it falls back to `@Value` default even if the second `PropertyPlaceholderConfigurer` contains the value.  You'll find attached a JUnit test case with Spring xml context to reproduce the issue.  ---  **Affects:** 3.1.3  **Attachments:** - [PropertyPlaceholderDefaultValueTest.java](https://jira.spring.io/secure/attachment/20689/PropertyPlaceholderDefaultValueTest.java) (_1010 bytes_) - [propertyPlaceholder-test.xml](https://jira.spring.io/secure/attachment/20688/propertyPlaceholder-test.xml) (_1.31 kB_) - [test-spring-placeholder.zip](https://jira.spring.io/secure/attachment/21949/test-spring-placeholder.zip) (_4.84 kB_)  **Issue Links:** - #15247 Default resolved property value is not working properly (_**""is duplicated by""**_) - #14873 Multiple PropertySourcesPlaceholderConfigurers do not work with placeholder defaults (_**""is duplicated by""**_) - #15282 Improve property placeholder resolution when multiple configurers are declared (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/0017731fd9ebce43eaf304cfa0353ff54232cd23  41 votes, 43 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-11-14T02:59:29Z","2022-07-13T05:38:10Z"
"","14052","AbstractWizardFormController does not change page when redirectAction set to true [SPR-9416]","**[Johann Langloys](https://jira.spring.io/secure/ViewProfile.jspa?name=jolangloys)** opened **[SPR-9416](https://jira.spring.io/browse/SPR-9416?redirect=false)** and commented  I use the Portlet version of the `AbstractWizardFormController`.  When setting `redirectAction` to `true`, only the first page of the wizard is displayed; the other one can never be reached.  This is due to the fact that the render parameter ""form-submit"" is not populated any more even when the controller isn't in the finish phase.  I used a fix by overriding the `setPageRenderParameter()` method:  ``` @Override protected void setPageRenderParameter(ActionResponse response, int page) { 	response.setRenderParameter(""form-submit"", ""true""); 	super.setPageRenderParameter(response, page); } ```    ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2012-05-16T07:58:24Z","2019-01-12T16:36:22Z"
"","14532","Add JSONP support to MappingJackson2MessageConverter [SPR-9899]","**[Johan Sjöberg](https://jira.spring.io/secure/ViewProfile.jspa?name=toxic)** opened **[SPR-9899](https://jira.spring.io/browse/SPR-9899?redirect=false)** and commented  To implement a JSONP (padded json) HttpMessageConverter a parameter from the Servlet request map is necessary (e.g., ?callback=foo) which affects the produced JSON output.  E.g., if a regular JSON response is {json}, then JSONP for value foo is  foo({json});  One option would be the add the HttpServletRequest or similar to:  HttpMesageConverter.write(T t, MediaType contentType, HttpOutputMessage outputMessage)  ---  **Affects:** 4.0.5  **Issue Links:** - #15486 Provide better intercepting model for controllers returning `@ResponseBody` (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2012-10-20T16:02:08Z","2019-01-13T07:02:38Z"
"","14501","NullPointerException in AbstractMessageConvertorMethodProcessor [SPR-9868]","**[Joeri Moreno](https://jira.spring.io/secure/ViewProfile.jspa?name=djoewie)** opened **[SPR-9868](https://jira.spring.io/browse/SPR-9868?redirect=false)** and commented  in the class ""AbstractMessageConverterMethodProcessor""  on line 133 the following can be found  selectedMediaType = selectedMediaType.removeQualityValue();  if (selectedMediaType != null) {  if selectedMediaType is null when trying to removeQualityValue(), there is a nullpointer exception  this problem can be removed by reversing the order of line 133 and 135   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0047200b9838f5df8192886607ee06aade0ac0ea, https://github.com/spring-projects/spring-framework/commit/d4fa5c0331e5a8008dae2f6f0ba157bdddaf122d","closed","type: bug,","spring-projects-issues","2012-10-09T22:49:45Z","2012-11-04T06:54:06Z"
"","13856","Value-oriented return method handling broken in 3.1 [SPR-9218]","**[Jiří Vypědřík](https://jira.spring.io/secure/ViewProfile.jspa?name=vypedrik)** opened **[SPR-9218](https://jira.spring.io/browse/SPR-9218?redirect=false)** and commented  I've noticed a significant difference in processing of controller methods introduced in 3.1, what stops me from migration from 3.0.  In 3.0, method return values were observed to determine the appropriate handler. Using this feature, it was possible to define the method as returning Object and return anything appropriate for particular case: String with view name, concrete View instance, Custom object serialized to JSON, etc.  Starting from 3.1, not the method return value but rather the declared method return type is taken into account, thus killing such a beautiful feature. According to the handler matching chain, for the Object return value, only the fallback handler for binding return values to model attributes is triggered.  Please get this feature back!!!  ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?124126-Spring-3-1-breaks-usual-return-value-handling-scheme&p=404866#post404866  **Sub-tasks:** - #14256 Backport ""Value-oriented return method handling broken in 3.1""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/229537288a721ea1f73d7fee5ce9dd60ec46c23e, https://github.com/spring-projects/spring-framework/commit/cfe2af76906039e42b12dc24cf4fca7b91c9b910  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-10T02:12:11Z","2019-01-11T12:44:40Z"
"","14258","@ResponseBody is throwing exception on new release e.g. 3.1.2 RELEASE [SPR-9624]","**[Jitender Saini](https://jira.spring.io/secure/ViewProfile.jspa?name=saini.jitender@gmail.com)** opened **[SPR-9624](https://jira.spring.io/browse/SPR-9624?redirect=false)** and commented  Switching from 3.1.1 RELEASE to 3.1.2 RELEASE, `@ResponseBody` is throwing below mentioned exception on my SpringController method. I'm using maven build. The code is working very fine on 3.1.1 RELEASE and earlier version.  java.lang.NoSuchMethodError: org.springframework.http.MediaType.copyQualityValue(Lorg/springframework/http/MediaType;)Lorg/springframework/http/MediaType; at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.getMostSpecificMediaType(AbstractMessageConverterMethodProcessor.java:196) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:110) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:80) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:94) at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:73) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:617) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:578) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:923) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:789) at javax.servlet.http.HttpServlet.service(HttpServlet.java:641) at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:311) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:101) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:150) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:91) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at com.expense.security.captcha.CaptchaVerifierFilter.doFilterInternal(CaptchaVerifierFilter.java:85) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:182) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at com.expense.security.captcha.CaptchaCaptureFilter.doFilterInternal(CaptchaCaptureFilter.java:43) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:173) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:259) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:225) at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:169) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.__invoke(StandardHostValve.java:168) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:999) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:565) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1620) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722)   --- No further details from [SPR-9624](https://jira.spring.io/browse/SPR-9624?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-07-23T11:04:13Z","2019-01-12T05:28:21Z"
"","14538","On async request, ServletRequestAttributes are being completed before the request is really completed [SPR-9905]","**[Jesus Alonso](https://jira.spring.io/secure/ViewProfile.jspa?name=jalogar)** opened **[SPR-9905](https://jira.spring.io/browse/SPR-9905?redirect=false)** and commented  FrameworkServlet is always completing the associated ServletRequestAttributes even when a controller returns a ReferredResult.  Line 933 should be replaced with:  if (!asyncManager.isConcurrentHandlingStarted()) { requestAttributes.requestCompleted(); }  The ServletRequestAttributes is correctly completed when the async response is processed in DispacherServlet:934   ---  **Affects:** 3.2 M2  **Attachments:** - [FrameworkServlet.java](https://jira.spring.io/secure/attachment/20569/FrameworkServlet.java) (_41.92 kB_)","closed","status: declined,","spring-projects-issues","2012-10-22T04:30:41Z","2019-01-12T16:24:58Z"
"","13845","ViewRenderer in Portlet tries to access LocaleResolver object from different webapp classloader -> ClassCastException [SPR-9207]","**[Jerome Waibel](https://jira.spring.io/secure/ViewProfile.jspa?name=schrom)** opened **[SPR-9207](https://jira.spring.io/browse/SPR-9207?redirect=false)** and commented  I have written a portal-driver that uses the OpenPortal container to access portlets. The portal-driver is a `@Controller` and called by the DispatcherServlet. The portlet itself uses spring-webmvc-portlet and is called by the DispatcherPortlet.  When the request is first processed by the DispatcherServlet this servlet adds an org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver object to the request as an attribute using the DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE key. As this object is created within the portal-driver context it belongs to that classloader.  When the request is forwarded into the portlet view/render the portlet returns a jsp view which should be processed by the usual ViewRenderServlet-InternalResourceViewResolver-JstlView chain.  Now the JstlView, agnostic of being inside a portlet, tries to get the LocaleResolver attribute from the request. As this attribute does not exists in the PortletRequest the getAttribute() falls back into the original Request and finds the AcceptHeaderLocaleResolver set by the _DispatcherServlet_ from the portal driver. But as we are now in the portlet context and the portlet context webapp classloader is in effect this object cannot be casted.  In my opinion the _DispatcherPortlet_ should set its own LocaleResolver inside the PortletRequest to prevent the JstlView getting this object from alien classloaders.  Workaround for me: Do a ``` portletRequest.setAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE, new AcceptHeaderLocaleResolver());  ```before every portlet request (HandlerInterceptor).   This is the stacktrace, the AcceptHeaderLocaleResolver instance is read from the request and is bound to the portal driver webapp classloader, the LocaleResolver interface is bound to the portlets webapp classloader => ClassCastException.  ```  Caused by: org.springframework.web.util.NestedServletException: View rendering failed; nested exception is java.lang.ClassCastException: org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver cannot be cast to org.springframework.web.servlet.LocaleResolver at org.springframework.web.servlet.ViewRendererServlet.processRequest(ViewRendererServlet.java:95) at org.springframework.web.servlet.ViewRendererServlet.doGet(ViewRendererServlet.java:66) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646) at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:551) at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:488) at com.sun.portal.portletcontainer.portlet.impl.PortletRequestDispatcherImpl.dispatch(PortletRequestDispatcherImpl.java:250) ... 46 more Caused by: java.lang.ClassCastException: org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver cannot be cast to org.springframework.web.servlet.LocaleResolver at org.springframework.web.servlet.support.RequestContextUtils.getLocaleResolver(RequestContextUtils.java:97) at org.springframework.web.servlet.support.RequestContext.initContext(RequestContext.java:211) at org.springframework.web.servlet.support.RequestContext.\(RequestContext.java:139) at org.springframework.web.servlet.view.JstlView.exposeHelpers(JstlView.java:135) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:211) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:262) at org.springframework.web.servlet.ViewRendererServlet.renderView(ViewRendererServlet.java:114) at org.springframework.web.servlet.ViewRendererServlet.processRequest(ViewRendererServlet.java:86) ... 55 more  ``` ```    ---  **Affects:** 3.1.1  1 votes, 0 watchers","closed","status: declined,","spring-projects-issues","2012-03-07T05:21:33Z","2019-01-12T16:36:39Z"
"","14352","LocalContainerEntityManagerFactoryBean and AbstractRoutingDataSource never close jdbc connection [SPR-9718]","**[Jerome Preli](https://jira.spring.io/secure/ViewProfile.jspa?name=jerome.preli)** opened **[SPR-9718](https://jira.spring.io/browse/SPR-9718?redirect=false)** and commented  Using Spring 3.1.2 and Hibernate 3.6.10  I have set up a routing datasource with a master and a slave database based on the the following blog: http://blog.springsource.org/2007/01/23/dynamic-datasource-routing/  I use this routing datasource in a LocalContainerEntityManagerFactoryBean with HibernateJpaVendorAdapter  It seems to works fine so I have deploy the web app in prod and everything is going fine but my number of opened JDBC connection keeps growing!  So I had a deeper look and actually even if Hibernate succeffully release the JDBC connection before releasing the EntityManager the JDBC connection never closes.  Do you have any workaround or can you fix this?  Please find attached the main files of my webapp linked to this issue.  Thank you very much   ---  **Affects:** 3.1.2  **Attachments:** - [Routing datasource and entiny manager.zip](https://jira.spring.io/secure/attachment/20295/Routing+datasource+and+entiny+manager.zip) (_5.29 kB_)  1 votes, 3 watchers","closed","status: invalid,","spring-projects-issues","2012-08-23T10:37:42Z","2019-01-12T05:28:11Z"
"","13946","autowiring of a prototype scoped bean to ObjectFactory fails [SPR-9308]","**[Jeffrey Damick](https://jira.spring.io/secure/ViewProfile.jspa?name=jdamick)** opened **[SPR-9308](https://jira.spring.io/browse/SPR-9308?redirect=false)** and commented  Autowiring of a prototype scoped bean into an ObjectFactory now fails with 3.1.1, however it works on 3.0.x & 3.1.0.  For example we something like:  ``` @Component @Scope(""prototype"") public class SomePrototypeBean { }  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration({ ""/test-context.xml"" }) public class SomeTest {  	@Autowired 	ObjectFactory prototypeBeanFactory;          @Test         public void test() { SomePrototypeBean b = prototypeBeanFactory.getObject(); assertNotNull(b); } } ```  Below is a real stack from our unit tests:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'statelessZoneDAOImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.beans.factory.ObjectFactory biz.neustar.ultra.model.rdb.dao.hibernate.stateless.ZoneDAOImpl.zriDAOFactory; nested exception is java.lang.IllegalArgumentException: Can not set org.springframework.beans.factory.ObjectFactory field biz.neustar.ultra.model.rdb.dao.hibernate.stateless.ZoneDAOImpl.zriDAOFactory to biz.neustar.ultra.model.rdb.dao.hibernate.stateless.ZoneRestrictIpDAOImpl 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:287) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:848) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:790) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory.getObject(DefaultListableBeanFactory.java:1010) 	at biz.neustar.ultra.model.persistence.DbWriterImpl.writeVersionedStyle(DbWriterImpl.java:169) 	at biz.neustar.ultra.model.persistence.ChunkOperationsImplTest.blowChunks(ChunkOperationsImplTest.java:83) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.beans.factory.ObjectFactory biz.neustar.ultra.model.rdb.dao.hibernate.stateless.ZoneDAOImpl.zriDAOFactory; nested exception is java.lang.IllegalArgumentException: Can not set org.springframework.beans.factory.ObjectFactory field biz.neustar.ultra.model.rdb.dao.hibernate.stateless.ZoneDAOImpl.zriDAOFactory to biz.neustar.ultra.model.rdb.dao.hibernate.stateless.ZoneRestrictIpDAOImpl 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:506) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:284) Caused by: java.lang.IllegalArgumentException: Can not set org.springframework.beans.factory.ObjectFactory field biz.neustar.ultra.model.rdb.dao.hibernate.stateless.ZoneDAOImpl.zriDAOFactory to biz.neustar.ultra.model.rdb.dao.hibernate.stateless.ZoneRestrictIpDAOImpl 	at java.lang.reflect.Field.set(Field.java:657) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:502) ```    ---  **Affects:** 3.1.1","closed","","spring-projects-issues","2012-04-05T09:46:52Z","2019-01-11T12:52:22Z"
"","14470","A Java Thread deadlock has occured [SPR-9837]","**[Jeff Sanders](https://jira.spring.io/secure/ViewProfile.jspa?name=stullsanders)** opened **[SPR-9837](https://jira.spring.io/browse/SPR-9837?redirect=false)** and commented  ""http-0.0.0.0-8080-7"":at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:184) - waiting to lock  (a java.util.concurrent.ConcurrentHashMap@1b245ded ) which is held by http-0.0.0.0-8080-4  The above error happens a few times and stops the Web App from processing. We have to restart JBoss to get the app back up and processing requests.  ---  **Affects:** 3.2 M1, 3.2 M2  **Attachments:** - [deadlock info Document1.txt](https://jira.spring.io/secure/attachment/20528/deadlock+info+Document1.txt) (_1.94 kB_)  **Issue Links:** - #13117 Performance bottleneck and potential thread deadlock in DefaultSingletonBeanRegistry (_**""duplicates""**_)  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-09-27T12:28:29Z","2019-01-12T16:47:42Z"
"","14160","Ignore duplicated import files or property-placeholder files [SPR-9526]","**[Jay Blanton](https://jira.spring.io/secure/ViewProfile.jspa?name=jaybytez)** opened **[SPR-9526](https://jira.spring.io/browse/SPR-9526?redirect=false)** and commented  We have a web service architecture where any service (API - Int/Impl) could be exposed as a web service.  Because of this we have very granular deployment artifacts where each service builds down to a JAR.  That way we can pick and chose what JARs create a web service implementation (into a WAR).  Because of this we have duplicated property file imports and context file imports, but we know it is going to happen because each individual service needs to be buildable, runnable, and testable...and then it might be composed into a larger service.  The example from this thread: http://forum.springsource.org/showthread.php?36482-Preventing-Spring-Context-to-be-loaded-more-than-once&highlight=duplicate+context+files  Is a perfect example: http://piotrga.wordpress.com/2007/03/21/preventing-spring-context-to-be-loaded-more-than-once/  We might Service B (which is it's own WAR), Service C (which is it's own WAR), and also a Service A (which has dependencies on Service B/C) and therefore pulls in duplicate import statements for the same context file.  The following is a post that I made, without a response, describing the same issue with the property-placeholder. http://stackoverflow.com/questions/8949174/does-spring-ignore-duplicate-property-placeholder-files  Since we are aware of the duplicates, we don't want to have exceptions thrown when encountering duplicate bean ids.  We don't receive these errors/issues, but we can see that the duplicate files are loaded and override each other.  It would be beneficial if both the import and property-placeholder had the capability to ignore-duplicate-files, or via a property in a custom ApplicationContext (like we extend XmlWebApplicationContext) which would allow the ignore-duplicate-files for properties or bean context files.  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?36482-Preventing-Spring-Context-to-be-loaded-more-than-once&highlight=duplicate+context+files  **Issue Links:** - #16379 Multiple bean instances are created when no id is specified (_**""is duplicated by""**_) - #5845 Load files in  only once  10 votes, 7 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-06-20T15:08:44Z","2019-01-12T02:47:37Z"
"","14087","JasperReportsMultiFormatView, define headers in a properties file and override it at execution time [SPR-9452]","**[Javier Molina](https://jira.spring.io/secure/ViewProfile.jspa?name=phoboss)** opened **[SPR-9452](https://jira.spring.io/browse/SPR-9452?redirect=false)** and commented  I'm using JasperReportsMultiFormatView for rendering a report. I've a views.properties file: report.(class)=org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatView report.url=/WEB-INF/reports/report.jrxml report.reportDataKey=dataKey report.headers=Content-Disposition = attachment; filename=report  On the controller method, i have an instruction to override the default filename: `@RequestMapping`(""/merchant/transaction/report/{format}"") public String showTransactionList(long merchantId, HttpServletResponse response, Model model) { response.setHeader(""Content-Disposition"", ""attachment; filename=""+new SimpleDateFormat(""yyyy/MM/dd-HH:mm:ss"").format(new Date())+""report.pdf""); }  After doing this, in the populateHeaders method (AbstractJasperReportsView) all the headers of the views.properties will be set, even if they are in the response. This could make a conflict, because in my case i'll get a header with two content-disposition values.   --- No further details from [SPR-9452](https://jira.spring.io/browse/SPR-9452?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-05-29T08:36:52Z","2019-01-12T03:48:29Z"
"","14434","Migration to gradle build lost OSGi headers [SPR-9801]","**[Jason Day](https://jira.spring.io/secure/ViewProfile.jspa?name=jpd9808)** opened **[SPR-9801](https://jira.spring.io/browse/SPR-9801?redirect=false)** and commented  It appears the migration of the [build to use Gradle](https://jira.springsource.org/browse/SPR-8116) dropped the OSGi manifest headers from getting added.  ---  **Affects:** 3.2 M1, 3.2 M2  **Issue Links:** - #13543 Users of the SpringSource EBR need Spring framework bundles to continue to be published there for Spring 3.2 (_**""duplicates""**_)  3 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2012-09-15T10:10:04Z","2019-01-12T16:25:10Z"
"","14403","isFormContentType in org.springframework.web.filter.HttpPutFormContentFilter should return false on an illegal argument exception [SPR-9769]","**[Jasdeep Hundal](https://jira.spring.io/secure/ViewProfile.jspa?name=jasdeep-hundal)** opened **[SPR-9769](https://jira.spring.io/browse/SPR-9769?redirect=false)** and commented  In the following section, I believe if parseMediaType throws an IllegalArgumentException, it should be caught and isFormContentType should return false:  ```java private boolean isFormContentType(HttpServletRequest request) {   String contentType = request.getContentType();   if (contentType != null) {      MediaType mediaType = MediaType.parseMediaType(contentType);     return (MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType));    }   else {      return false;    } } ```    ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ff3d53962c1249dccfb493eb46f12e30612de05","closed","type: bug,","spring-projects-issues","2012-09-06T11:07:20Z","2012-09-10T17:11:48Z"
"","14450","FlashAttributes are not working properly when application deployed on a clustered environment. [SPR-9817]","**[Japan Trivedi](https://jira.spring.io/secure/ViewProfile.jspa?name=japan.trivedi)** opened **[SPR-9817](https://jira.spring.io/browse/SPR-9817?redirect=false)** and commented  I have used the FlashAttributes to pass on success or failure messages to the redirect view to show the message one time only. Which is working fine in normal deployment. But when I confires a clustered environment with same instance of the application, the FlashAttributes are not working properly. Sometimes it come up on the page, sometimes not. Sometime it apprears on the redirected page after coming back to the redirected view from other pages.  I really don't know what is wrong. Please look into this issue. Thanks.   ---  **Affects:** 3.1 GA  **Reference URL:** http://stackoverflow.com/questions/12489603/flashattributes-are-not-working-properly-when-application-deployed-on-a-clustere","closed","status: invalid,","spring-projects-issues","2012-09-21T00:59:16Z","2019-01-12T05:28:02Z"
"","14631","WebMvcConfigurationSupport is not properly initializing ExceptionHandlerExceptionResolver [SPR-9997]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-9997](https://jira.spring.io/browse/SPR-9997?redirect=false)** and commented  In the class WebMvcConfigurationSupport the method  addDefaultHandlerExceptionResolvers(..) is creating an ExceptionHandlerExceptionResolver and tries to initialize it by calling afterPropertiesSet() on ExceptionHandlerExceptionResolver.  The method afterPropertiesSet() on ExceptionHandlerExceptionResolver calls initExceptionHandlerAdviceCache() on ExceptionHandlerExceptionResolver which depends on an ApplicationContext.  This applicationContext is not given by the time afterPropertiesSet is called.  Result: The ExceptionHandlerExceptionResolver is not initialized correctly.  Possible fix:  make HandlerExceptionResolverComposite an InitalizingBean and delegate to list of resolvers in afterPropertiesSet()    ---  **Affects:** 3.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d8bacace71a30e33a1d582a83b981b8629b867b","closed","type: bug,","spring-projects-issues","2012-11-16T06:56:19Z","2012-11-23T12:15:56Z"
"","13947","RestTemplate data security issue in DEBUG logging [SPR-9309]","**[Janet Moyer](https://jira.spring.io/secure/ViewProfile.jspa?name=easternwahoo)** opened **[SPR-9309](https://jira.spring.io/browse/SPR-9309?redirect=false)** and commented  I want to use RestTemplate.postForEntity() in application with high security requirements. When debug logging is enabled, HttpEntityRequestCallback.doWithRequest() logs the content of the request being posted.  This violates data security requirements by providing a logging back door to be able to view secure content.  A workaround is to use RestTemplate.execute(), and supply a custom RequestCallback; this means recoding a lot of useful functionality provided  HttpEntityRequestCallback, and requires strict governance to restrict developers from using all other RestTemplate methods.  The suggested improvement is to either dial back debug logging in HttpEntityRequestCallback.doWithRequest so as not to display the request body at all, or provide a configurable option which would turn off this logging.   ---  **Affects:** 3.0.7  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-05T09:58:20Z","2014-01-31T13:20:54Z"
"","14175","Provide PersistenceExceptionTranslator for EclipseLink exceptions [SPR-9541]","**[Jan Stamer](https://jira.spring.io/secure/ViewProfile.jspa?name=remast)** opened **[SPR-9541](https://jira.spring.io/browse/SPR-9541?redirect=false)** and commented  For Hibernate there is an implementation of the interface PersistenceExceptionTranslator to translate Hibernate exceptions to Spring DataAccess exceptions. This would also be good for EclipseLink.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e18308851d3b9a3208d4394f3dfb9ff3b872f780, https://github.com/spring-projects/spring-framework/commit/371e3a7ac0ef88e4da7f7a5dbdf845e66bbe0864","closed","type: enhancement,","spring-projects-issues","2012-06-25T03:49:49Z","2015-09-22T20:03:57Z"
"","14577","AbstractEnvironment addActiveProfile ignores profiles activated with properties [SPR-9944]","**[Jan Kronquist](https://jira.spring.io/secure/ViewProfile.jspa?name=jankronquist)** opened **[SPR-9944](https://jira.spring.io/browse/SPR-9944?redirect=false)** and commented  addActiveProfile does not check if profiles are initiated using a property. This means that you have to call getActiveProfiles() before calling addActiveProfile!  See code below:  ``` protected Set doGetActiveProfiles() { 	if (this.activeProfiles.isEmpty()) { 		String profiles = this.getProperty(ACTIVE_PROFILES_PROPERTY_NAME); 		if (StringUtils.hasText(profiles)) { 			setActiveProfiles(commaDelimitedListToStringArray(trimAllWhitespace(profiles))); 		} 	} 	return this.activeProfiles; }  public void addActiveProfile(String profile) { 	if (this.logger.isDebugEnabled()) { 		this.logger.debug(format(""Activating profile '%s'"", profile)); 	} 	this.validateProfile(profile); 	this.activeProfiles.add(profile); } ```    ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c94bc2e709ab00b154fdedc613b92b093dc0d029","closed","in: core,","spring-projects-issues","2012-11-01T07:57:33Z","2012-11-04T06:54:06Z"
"","13831","ExceptionHandlerExceptionResolver: premature null value check [SPR-9193]","**[Jan Dudek](https://jira.spring.io/secure/ViewProfile.jspa?name=lfty)** opened **[SPR-9193](https://jira.spring.io/browse/SPR-9193?redirect=false)** and commented  This is `doResolveHandlerMethodException` method from `ExceptionHandlerExceptionResolver` class:  ``` @Override protected ModelAndView doResolveHandlerMethodException(HttpServletRequest request,                                                         HttpServletResponse response,                                                        HandlerMethod handlerMethod,                                                         Exception exception) {     if (handlerMethod == null) {         return null;     } 	     ServletInvocableHandlerMethod exceptionHandlerMethod = getExceptionHandlerMethod(handlerMethod, exception);     if (exceptionHandlerMethod == null) {         return null;     }      exceptionHandlerMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);     exceptionHandlerMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);      ServletWebRequest webRequest = new ServletWebRequest(request, response);     ModelAndViewContainer mavContainer = new ModelAndViewContainer();      try {         if (logger.isDebugEnabled()) {             logger.debug(""Invoking @ExceptionHandler method: "" + exceptionHandlerMethod);         }         exceptionHandlerMethod.invokeAndHandle(webRequest, mavContainer, exception);     }     catch (Exception invocationEx) {         logger.error(""Failed to invoke @ExceptionHandler method: "" + exceptionHandlerMethod, invocationEx);         return null;     } 		     if (mavContainer.isRequestHandled()) {         return new ModelAndView();     }     else {         ModelAndView mav = new ModelAndView().addAllObjects(mavContainer.getModel());         mav.setViewName(mavContainer.getViewName());         if (!mavContainer.isViewReference()) {             mav.setView((View) mavContainer.getView());         }         return mav;				     } } ```  What bothers me is the first `if` condition:  ``` if (handlerMethod == null) {     return null; } ```  The `handlerMethod` variable is then used in the protected `getExceptionHandlerMethod(handlerMethod, exception)` method only so I believe the null check should be inside the `getExceptionHandlerMethod` method.  We developed an `ExceptionHandlerExceptionResolver` extension which just overrides the `getExceptionHandlerMethod(handlerMethod, exception`. This method works even for null `handlerMethod` values (which happens when there is no suitable handler method available), unfortunatelly the processing flow never reaches it because of the 'premature' null check. Moving the null check to the more appropriate place would help us a lot.  ---  **Affects:** 3.1 GA  **Issue Links:** - #13750 Support `@MVC` methods that can apply to any `@Controller`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97c22fc08e1c9587307fec2e25a90345f8cf6de4","closed","type: task,","spring-projects-issues","2012-03-02T07:58:13Z","2019-01-13T07:05:56Z"
"","14526","Cache setting on annotation driven controller configuration together with @SessionAttributes [SPR-9893]","**[Jan Christian Haddorp](https://jira.spring.io/secure/ViewProfile.jspa?name=haddorp)** opened **[SPR-9893](https://jira.spring.io/browse/SPR-9893?redirect=false)** and commented  In some cases (e.g. when using `@SessionAttributes`) the cache configuration is buggy or tricky. WebContentGenerator sets ""cacheSeconds"" per default to -1 which avoids setting cache/pragma headers (pragma header can cause trouble with IE 7/8). These default cache settings are not used for controllers with `@SessionAttributes` as in this case the newly added property ""cacheSecondsForSessionAttributeHandlers"" is used. But in this case with default 0. Means pragma header will be set.  To avoid this a bean with type AnnotationMethodHandlerAdapter can be added to the context. Now the tricky point...  This configuration only work if adding AnnotationMethodHandlerAdapter bean before enabeling annotation-driven controller config. It is quite hard to find this solution.  So, perhaps initialize ""cacheSecondsForSessionAttributeHandlers"" with -1 as done for ""cacheSeconds"" or throw a warning in case of mismatched configuration order.   ---  **Affects:** 3.0.7, 3.1.2  1 votes, 4 watchers","closed","status: invalid,","spring-projects-issues","2012-10-19T06:03:31Z","2019-01-12T05:27:56Z"
"","14498","TypeConverterDelegate falls back to deprecated Date constructor when first converter failed [SPR-9865]","**[James Roper](https://jira.spring.io/secure/ViewProfile.jspa?name=jroper2)** opened **[SPR-9865](https://jira.spring.io/browse/SPR-9865?redirect=false)** and commented  I've just upgraded from Spring 3.0.7 to Spring 3.1.2.  I have a test that ensures that when I try to bind String data to a date field in a bean using a particular date format, and I provide a date in the wrong format, it should produce an error.  This test started failing when I upgraded to Spring 3.1.2, because it seems to have introduced functionality where if the first converter fails, TypeConverterDelegate falls back to using a constructor that accepts an argument of the initial type for the destination type.  This is probably a good feature in most cases, except in the case of java.util.Date, where that constructor has been deprecated since Java 1.1, is locale dependent, and probably should never ever be used in any circumstance.   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff7dcec5f7d2b54324476bd617af74de9cbd56ec, https://github.com/spring-projects/spring-framework/commit/9862fbfc01f6e93cf26951b8487151d300527814","closed","type: bug,","spring-projects-issues","2012-10-07T23:35:17Z","2012-11-04T06:54:00Z"
"","14344","Property Editor called with wong type [SPR-9710]","**[James Odeen](https://jira.spring.io/secure/ViewProfile.jspa?name=jodeen)** opened **[SPR-9710](https://jira.spring.io/browse/SPR-9710?redirect=false)** and commented  I have an editor defined for an object and registered on the controller using `@InitBinder`.  The object just has a (Long) id and a (String) name.   On screen I use the `form:select` tag to display a select list of those objects with the id field as the value and the name field as the label.  When the screen gets rendered, calls are made to the `getAsText` on the editor both with the value as a `Long`. It appears that it's trying to use the editor to convert the id (a long) to a string value.  Here's the editor  ```java public class FooEditor extends PropertyEditorSupport {      @Override     public String getAsText() {         if (getValue() == null) {             return """";         }         if (this.getValue() instanceof Foo) {             return String.valueOf(((Foo)this.getValue()).getId());         } else {             System.out.println(""Unexpected object type: "" + this.getValue().getClass().toString()                     );             new Exception().printStackTrace();             return null;         }             }      @Override     public void setAsText(String id) throws IllegalArgumentException {         if (id == null || id.isEmpty()) {             this.setValue(null);             return;         }         this.setValue(Foo.getById(Long.parseLong(id)));     } ```  Attached is a maven web project showing what's happening.   ---  **Affects:** 3.1.2  **Attachments:** - [editortest.zip](https://jira.spring.io/secure/attachment/20290/editortest.zip) (_9.44 kB_)","closed","status: invalid,","spring-projects-issues","2012-08-21T10:43:26Z","2019-01-12T05:28:12Z"
"","14483","Beans specified using  cannot be retrieved using their id from the bean context [SPR-9850]","**[James Kavanagh](https://jira.spring.io/secure/ViewProfile.jspa?name=jamezk)** opened **[SPR-9850](https://jira.spring.io/browse/SPR-9850?redirect=false)** and commented  If you attempt to obtain an aspect from the bean context using its id it cannot be found. Example  ```                      ```  I'm attempting to obtain this bean and use it as advice in conjunction with ProxyFactoryBean as follows:  ``` public Object injectIntoContext(ProceedingJoinPoint pjp) throws Throwable {     Object bob = pjp.proceed();     ProxyFactoryBean bean = new ProxyFactoryBean();     bean.setBeanFactory(context);     bean.setTarget(bob);     bean.setInterceptorNames(new String[]{""myadvice""});     return bean.getObject(); } ```  Executing this code results in an exception being thrown:  ``` Exception in thread ""main"" org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'myadvice' is defined 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:527) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1083) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:274) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1075) 	at org.springframework.aop.framework.ProxyFactoryBean.initializeAdvisorChain(ProxyFactoryBean.java:454) 	at org.springframework.aop.framework.ProxyFactoryBean.getObject(ProxyFactoryBean.java:240) 	at com.scansafe.prototype.ThingammyCaptureAdvice.injectIntoContext(ThingammyCaptureAdvice.java:20) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:621) 	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:610) 	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:65) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) 	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) 	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:621) . . .  ```    ---  **Affects:** 3.1.2  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-10-03T05:37:56Z","2019-01-12T00:25:57Z"
"","14292","@Value assigns the default property value (if specified) before all property locations are examined, resulting in assigning a default to a property which is defined in a properties file. [SPR-9658]","**[jacek szafranski](https://jira.spring.io/secure/ViewProfile.jspa?name=js888)** opened **[SPR-9658](https://jira.spring.io/browse/SPR-9658?redirect=false)** and commented  If a default is specified for `@Value-annotated` field or attribute, PropertyPlaceholderHelper.parseStringValue assigns the default property value just after the search for the property fails with the first location but before all property locations are examined. As a result, the the field ends up with the default value instead of the value defined in a properties file.  How to reproduce:  \ \ \ \classpath:file1.properties\ ...  \ \ \ \classpath:file2.properties\ ...  file1.properties: property ""prop"" undefined  file2.properties: prop=value of prop  public class PropHolder {  `@Value`(""${prop:defaultValue}"") private String propValue;  // ...  }  If propertyConfigurer1 is looked up first, the property ""prop"" is not found in ""file1.properties"" file, resulting in immediately assigning the default ""defaultValue"" to the propValue instance variable. Spring then looks up propertyConfigurer2. However, it's not going to read the prop value which is defined in its location(s), because it already has the default value and uses it as a key for further search.  It looks like the following resolution order for `@Value` is more sane:  1. look up all locations in all property placeholders 2. use the default specified in the annotation only when look-up in all locations fails  ---  **Affects:** 3.0.3  **Issue Links:** - #14356 Default values in property placeholder hierarchy applied too early (_**""duplicates""**_)  5 votes, 3 watchers","closed","in: core,","spring-projects-issues","2012-08-01T00:21:23Z","2019-01-12T16:47:48Z"
"","14488","ServletConfigAware-related exception is not thrown as expected [SPR-9855]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-9855](https://jira.spring.io/browse/SPR-9855?redirect=false)** and commented  From the ServletConfigAware javadoc:  Only satisfied if actually running within a Servlet-specific WebApplicationContext. If this callback interface is encountered elsewhere, an exception will be thrown on bean creation  But I have not been able to reproduce exception throwing and I have not found it in the source. E.g. this code illustrates that ServletConfigAware interface does not work and exception is not thrown:  ``` package com.sopovs.moradanen;  import javax.servlet.ServletConfig;  import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Configuration; import org.springframework.mock.web.MockServletConfig; import org.springframework.stereotype.Component; import org.springframework.web.context.ServletConfigAware; import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;  @Configuration public class ServletConfigAwareTest {  	public static void main(String[] args) { 		System.out.println(new AnnotationConfigApplicationContext( 				""com.sopovs.moradanen"").getBean(Foo.class).hashCode());  		AnnotationConfigWebApplicationContext webContext = new AnnotationConfigWebApplicationContext(); 		webContext.scan(""com.sopovs.moradanen""); 		webContext.setServletConfig(new MockServletConfig()); 		webContext.afterPropertiesSet(); 		System.out.println(webContext.getBean(Foo.class).hashCode());  		// where is my exception? 	}  	@Component 	public static class Foo implements ServletConfigAware {  		public void setServletConfig(ServletConfig servletConfig) { 			System.out.println(""Bingo!""); 		}  	}  } ```    ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7fdb637df0e00fe7b8a59c75d55889f1c50d3188, https://github.com/spring-projects/spring-framework/commit/03c3dc3daed80ffce1bba2bced9572555de858d9","closed","type: bug,","spring-projects-issues","2012-10-04T02:58:30Z","2012-11-04T06:54:03Z"
"","14478","Automatically created java.inject.Provider cannot be injected into session scoped beans [SPR-9845]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-9845](https://jira.spring.io/browse/SPR-9845?redirect=false)** and commented  If I inject javax.inject.Provider for creating prototype scoped beans into session scoped beans it fails when creating second session:  2012-10-01 18:45:50.113:WARN::/pins/default org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionBeanWithDefaultProvider': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.inject.Provider com.sopovs.moradanen.SessionBeanWithDefaultProvider.prototypePojoProvider; nested exception is java.lang.IllegalArgumentException: Can not set javax.inject.Provider field com.sopovs.moradanen.SessionBeanWithDefaultProvider.prototypePojoProvider to com.sopovs.moradanen.PrototypeBean at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:287) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$2.getObject(AbstractBeanFactory.java:332) at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:43) at org.springframework.web.context.request.SessionScope.get(SessionScope.java:92) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:328) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:876) at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:818) at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory.getObject(DefaultListableBeanFactory.java:1040) at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProvider.get(DefaultListableBeanFactory.java:1056) at com.sopovs.moradanen.DefaultProviderController.sayHello(DefaultProviderController.java:19) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)...  I have created sample project reproducing the issue and published it on github: https://github.com/isopov/provider-in-session-with-spring  ---  **Affects:** 3.1.2  **Reference URL:** https://github.com/isopov/provider-in-session-with-spring  **Issue Links:** - #13819 `@Inject` Provider or `@Autowired` ObjectFactory issue with session scoped bean (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-10-01T09:10:24Z","2019-01-13T07:02:52Z"
"","13848","spring-context-3.1.0.RELEASE.jar cannot be opened by JRockit 6 [SPR-9210]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-9210](https://jira.spring.io/browse/SPR-9210?redirect=false)** and commented  1. spring-context-3.1.0.RELEASE.jar cannot be opened with JRockit6 2. It can be opened by my file manager with unzip plugin. 3. It can be opened with Oracle Jdk7 4. spring-context-3.0.5.RELEASE.jar is usable with both Oracle Jdk7 and JRockit6.  Exception from the simple console program: Exception in thread ""Main Thread"" java.lang.InternalError: jzentry == 0, jzfile = 140386186737856, total = 755, name = /home/isopov/.m2/repository/org/springframework/spring-context/3.1.0.RELEASE/spring-context-3.1.0.RELEASE.jar, i = 1, message = null at java.util.zip.ZipFile$2.nextElement(ZipFile.java:322) at java.util.zip.ZipFile$2.nextElement(ZipFile.java:304)  Exception from the Eclipse trying to show the context of the jar: java.util.zip.ZipException: invalid LOC header (bad signature) at java.util.zip.ZipFile.read(Native Method) at java.util.zip.ZipFile.access$1400(ZipFile.java:56) at java.util.zip.ZipFile$ZipFileInputStream.read(ZipFile.java:677) at java.util.zip.ZipFile$ZipFileInflaterInputStream.fill(ZipFile.java:413) at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:158) at java.io.BufferedInputStream.fill(BufferedInputStream.java:235) at java.io.BufferedInputStream.read1(BufferedInputStream.java:275) at java.io.BufferedInputStream.read(BufferedInputStream.java:334) at org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsByteArray(Util.java:523) at org.eclipse.jdt.internal.compiler.util.Util.getZipEntryByteContent(Util.java:689) at org.eclipse.jdt.internal.core.ClassFile.getJarBinaryTypeInfo(ClassFile.java:347)...  The same issue is with spring-core, spring-beans, spring-aop.  There is no such issue with spring-webmvc, spring-asm, spring-expression, spring-web.   ---  **Affects:** 3.1 GA","closed","status: invalid,","spring-projects-issues","2012-03-08T12:36:46Z","2019-01-12T05:28:57Z"
"","13993","Problems with eclipselink after upgrading from Spring 3.1.0 to 3.1.1 [SPR-9355]","**[Ilya Skorik](https://jira.spring.io/secure/ViewProfile.jspa?name=ilyaskorik)** opened **[SPR-9355](https://jira.spring.io/browse/SPR-9355?redirect=false)** and commented  java.lang.IllegalArgumentException: No [EntityType] was found for the key class [***.core.authentication.model.MemberSession] in the Metamodel - please verify that the [Entity] class was referenced in persistence.xml using a specific \***.core.authentication.model.MemberSession\ property or a global \false\ element. at org.eclipse.persistence.internal.jpa.metamodel.MetamodelImpl.entityEmbeddableManagedTypeNotFound(MetamodelImpl.java:174) at org.eclipse.persistence.internal.jpa.metamodel.MetamodelImpl.entity(MetamodelImpl.java:194) at org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.\(JpaMetamodelEntityInformation.java:52) at org.springframework.data.jpa.repository.support.JpaEntityInformationSupport.getMetadata(JpaEntityInformationSupport.java:61) at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getEntityInformation(JpaRepositoryFactory.java:145) at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:83) at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:66) at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:146) at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:120) at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject(RepositoryFactoryBeanSupport.java:39) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:102) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1442) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:269) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:848) at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:790) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:707) at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:795) at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:723) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:196) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1035) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:939) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:848) at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:790) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:707) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:478) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:284) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:631) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:588) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133) at javax.servlet.GenericServlet.init(GenericServlet.java:244) at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:492) at org.eclipse.jetty.servlet.ServletHolder.doStart(ServletHolder.java:312) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:59) at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:778) at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:258) at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1221) at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:699) at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:454) at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:59) at org.eclipse.jetty.deploy.ContextDeployer.deploy(ContextDeployer.java:354) at org.eclipse.jetty.deploy.ContextDeployer.access$000(ContextDeployer.java:77) at org.eclipse.jetty.deploy.ContextDeployer$ScannerListener.fileAdded(ContextDeployer.java:102) at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:604) at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:535) at org.eclipse.jetty.util.Scanner.scan(Scanner.java:398) at org.eclipse.jetty.util.Scanner$1.run(Scanner.java:348) at java.util.TimerThread.mainLoop(Timer.java:555) at java.util.TimerThread.run(Timer.java:505) [2012-04-30 02:50:42,587] Artifact ***:war exploded: Artifact is deployed successfully   ---  **Affects:** 3.1.1","closed","","spring-projects-issues","2012-04-30T03:54:43Z","2019-01-11T12:36:49Z"
"","14287","MVC: Put exception in PageContext before sending error [SPR-9653]","**[Ilya Kazakevich](https://jira.spring.io/secure/ViewProfile.jspa?name=ilka)** opened **[SPR-9653](https://jira.spring.io/browse/SPR-9653?redirect=false)** and commented  According to Servlet API there should be exception in pageContext to display on 500 error page.  But spring simply calls ""sendError"", and there is no exception in pageContext, and there is no way to display it.  See ""DefaultHandlerExceptionResolver"":  ```  	protected ModelAndView handleConversionNotSupported(ConversionNotSupportedException ex, 			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {  		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); 		return new ModelAndView(); 	}  ```    ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/48b963aaa5e122d8e21967c363233df245755d7e","closed","type: enhancement,","spring-projects-issues","2012-07-28T21:57:33Z","2012-09-10T15:32:01Z"
"","14302","Issue/Problem on redirect after migration project on RequestMappingHandlerMapping/RequestMappingHandlerAdapter [SPR-9668]","**[Ihor Mysak](https://jira.spring.io/secure/ViewProfile.jspa?name=imysak)** opened **[SPR-9668](https://jira.spring.io/browse/SPR-9668?redirect=false)** and commented  our old methods with signature like: `@RequestMapping`(value = ""/write-review"", method = RequestMethod.POST) public Object writeReview(..... was successfully works with response: return ""redirect:/some-url""; on old DefaultAnnotationHandlerMapping/AnnotationMethodHandlerAdapter  but after migration on RequestMappingHandlerMapping/RequestMappingHandlerAdapter this method was broken.  We fix it just rename return-type from Object to String. But we waste a lot of time to find the problem. Will be great to fix it, or at least to document this behavior.  ---  **Affects:** 3.1.1  **Issue Links:** - #14256 Backport ""Value-oriented return method handling broken in 3.1"" (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2012-08-06T10:02:28Z","2019-01-12T16:47:47Z"
"","14368","Allow parsing of media types with single-quotes [SPR-9734]","**[Igor Mihalik](https://jira.spring.io/secure/ViewProfile.jspa?name=imihalik)** opened **[SPR-9734](https://jira.spring.io/browse/SPR-9734?redirect=false)** and commented  MediaType can only parse double-quoted parameters without raising an IllegalArgumentException. This is based on comments in #13557  ---  **Affects:** 3.1.2  **Reference URL:** https://github.com/SpringSource/spring-framework/commit/7cdc53487d729c5ddbd23cde0b2d448db9faafae  **Issue Links:** - #13557 Accept header with quoted parameter causes IllegalArgumentException in HttpHeaders.getContentType for the outputMessage (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8b09b52720486e051fe3551785b437cae698ce0e  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-08-28T07:59:26Z","2019-01-11T13:34:12Z"
"","14165","Support multi-line SQL comments in ResourceDatabasePopulator and JdbcTestUtils [SPR-9531]","**[Ian Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=iwright)** opened **[SPR-9531](https://jira.spring.io/browse/SPR-9531?redirect=false)** and commented  #### Overview  When executing SQL scripts using `ResourceDatabasePopulator` or `JdbcTestUtils` errors may occur if there are block comments in the file. In general multi-line comments using the `/* ... */` syntax are not explicitly supported.  #### Notes  Proper support for standard SQL comments (i.e., any text beginning with two hyphens and extending to the end of the line) was introduced in #14616 and #14708. However, neither `ResourceDatabasePopulator` nor `JdbcTestUtils` contains _explicit_ support for multi-line SQL comments.  #### Deliverables  1. [x] Extract common functionality related to script parsing from `ResourceDatabasePopulator` and `JdbcTestUtils` into a new `public` component or utility in the `org.springframework.jdbc.datasource.init` package in the `spring-jdbc` module. 2. [x] Support multi-line SQL comments in the component extracted in the previous deliverable. 3. [x] Make the start and end delimiters for block comments configurable.  ---  **Affects:** 3.1.1  **Issue Links:** - #16310 Support EOF as statement separator in SQL scripts (_**""is depended on by""**_) - #16184 SQL Scripts with newline separators no longer work - #14616 Support comments within SQL statements in JdbcTestUtils - #14708 Support comments within SQL statements in ResourceDatabasePopulator - #20450 H2 aliases are not supported in SQL ScriptUtils - #16144 Support custom comment prefix in JdbcTestUtils.executeSqlScript() - #16188 Introduce SQL script exception hierarchy  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01b2f67f11207c5007164518a83fcfb546b36837, https://github.com/spring-projects/spring-framework/commit/7853e74e786efda8aea70a5a0e79385a0c5d5cc9, https://github.com/spring-projects/spring-framework/commit/9230b38aea41316d78dc2f1bb206ce7a92b9ca56, https://github.com/spring-projects/spring-framework/commit/cc0ae3a881dde5910ecc340fa20c2365dd7474fa, https://github.com/spring-projects/spring-framework/commit/fbd25467c47fcda1e4d500e1cc3ede3d8ca7f61e, https://github.com/spring-projects/spring-framework/commit/bb67cd4657ee288d9a0a80c8e81f24308a6b1c0a, https://github.com/spring-projects/spring-framework/commit/2bfd6ddcf4de600942a7564a43a338febd4267f2, https://github.com/spring-projects/spring-framework/commit/e5c17560db71996157f52baada68c8a294c95d10  2 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2012-06-22T06:46:54Z","2019-01-13T07:04:03Z"
"","14211","Documentation for section 4.8.1, BeanPostProcessors and AOP auto-proxying [SPR-9577]","**[Ian Sollars](https://jira.spring.io/secure/ViewProfile.jspa?name=ianso)** opened **[SPR-9577](https://jira.spring.io/browse/SPR-9577?redirect=false)** and commented  Hi there,  This is a request to add an extra bit of information to the documentation that I think will be useful to people in future.  What happened: I created two custom BeanPostProcessor implementations that each linked to another bean using the `@Resource` annotation on a private field. The first one ""A"" worked as expected, however the second one ""B"", when added to the beans XML file, triggered the info message below for a whole series of beans that weren't dependencies graph of that BeanPostProcessor implementation B or the bean it linked to using `@Resource`:  ""Bean 'xxx' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)""  After some fiddling it became apparent that the only difference between B and A was that A linked to a bean using `@Resource` and had a field name identical to the bean ID in the XML config file, while BeanPostProcessor B linked to a bean using `@Resource` and a field name different from the bean ID.  This triggered the info message above.  My suggestion: I suggest adding an extra note under the heading ""BeanPostProcessors and AOP auto-proxying"" that says something like this:  ""Note that if you have beans wired into your BeanPostProcessor using autowiring or `@Resource` (which can fall back to autowiring behaviour), Spring might pre-load beans you do not expect when trying to resolve auto-wired beans in search for dependency candidates, and therefore make them ineligible for auto-proxying or post-processing. For example, if you have a `@Resource` or `@Autowired` dependency where the field name or setter name does not directly correspond to the declared name of a bean, and no hints or 'name' attribute is used, then Spring may load other bean declarations when looking for this dependency.""  The sentence construction above is quite tortured but I think it's more or less clear? I've looked on Stack Overflow & the forums and I think I've found several instances of people seeing this error message and being puzzled by it - this could be an explanation that might be helpful.    ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c4194ee1755e5f2a90df3839a5dc687aee10653f","closed","type: documentation,","spring-projects-issues","2012-07-10T00:12:16Z","2013-02-10T14:03:32Z"
"","13900","alias cycle reference [SPR-9262]","**[hongfu.li](https://jira.spring.io/secure/ViewProfile.jspa?name=tony.li.fly@gmail.com)** opened **[SPR-9262](https://jira.spring.io/browse/SPR-9262?redirect=false)** and commented  config alias in the applicationContext.xml:     then call beanFactory.getAlias(""b"") result in dead cycle   ---  **Affects:** 3.1.1","closed","status: invalid,","spring-projects-issues","2012-03-22T18:04:08Z","2019-01-12T05:28:52Z"
"","14062","The URLs for some of the Spring xsd files are not accessible [SPR-9427]","**[Himanshu Vijay](https://jira.spring.io/secure/ViewProfile.jspa?name=himanshuvj@hotmail.com)** opened **[SPR-9427](https://jira.spring.io/browse/SPR-9427?redirect=false)** and commented  **This is a problem with the springframework Apache web server/website hosting *.xsd files.  Cause of the problem:  ---  Spring xsd files are not accessible. Can't access following URLs:  http://www.springframework.org/schema/beans/ http://www.springframework.org/schema/context/ http://www.springframework.org/schema/jee/ http://www.springframework.org/schema/lang/ http://www.springframework.org/schema/task/ http://www.springframework.org/schema/tool/  This is preventing applications from loading spring config. We have done manual fix but it took lot of time.  My spring config xml:  ---  \  \ : :  ---  This causes following error:  ---  12/05/20 09:15:00 INFO support.ClassPathXmlApplicationContext: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@6833f0de: startup date [Sun May 20 09:15:00 PDT 2012]; root of context hierarchy 12/05/20 09:15:00 INFO xml.XmlBeanDefinitionReader: Loading XML bean definitions from class path resource[spring/applicationContext.xml] 12/05/20 09:15:01 WARN xml.XmlBeanDefinitionReader: Ignored XML validation warning org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'http://www.springframework.org/schema/beans/spring-beans.xsd' because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not . at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source) at org.apache.xerces.util.ErrorHandlerWrapper.warning(Unknown Source) at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source) at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source) at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source) at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaWarning(Unknown Source) at org.apache.xerces.impl.xs.traversers.XSDHandler.getSchemaDocument(Unknown Source) at org.apache.xerces.impl.xs.traversers.XSDHandler.parseSchema(Unknown Source) at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(Unknown Source) at org.apache.xerces.impl.xs.XMLSchemaValidator.findSchemaGrammar(Unknown Source) at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source) at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source) at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source) at org.apache.xerces.impl.XMLNSDocumentScannerImpl$NSContentDispatcher.scanRootElementHook(Unknown Source) at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source) at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source) at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source) at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source) at org.apache.xerces.parsers.XMLParser.parse(Unknown Source) at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:388) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)  ---  **Issue Links:** - #14754 spring-oxm-1.5.xsd is no longer available online  14 votes, 12 watchers","closed","has: votes-jira,","spring-projects-issues","2012-05-20T13:51:10Z","2019-01-13T21:06:39Z"
"","14489","AbstractRoutingDataSource does not allow to unwrap the underlying datasource [SPR-9856]","**[Hernan J. Gonzalez](https://jira.spring.io/secure/ViewProfile.jspa?name=leonbloy)** opened **[SPR-9856](https://jira.spring.io/browse/SPR-9856?redirect=false)** and commented  #14404 fixed a faulty implementation of `java.sql.Wrapper` in `DelegatingDataSource`.  Now, `AbstractRoutingDataSource` does not override  `isWrapper()` `unwrap()` methods. I think it should override them, so that the `isInstance()` matching is done, not with respect to the class itself (perhaps _also_ with the class itself?) but also with the currently routed datasource.  Case in point: I have a `RoutingDataSource` than can either route to a `org.apache.commons.dbcp.BasicDataSource` pool or a plain jdbc datasource. I wanted to call `myRoutingDataSource.isWrapperFor(org.apache.commons.dbcp.BasicDataSource.class)` to check I'm using the pooled data source, and call `unwrap()` to retrieve the wrapped dbcp object (for debugging purposes). Currently, I have no way of doing that, AFAIK.  As an alternative, if this is not deemed correct for the semantics of `java.sql.Wrapper` (it might be debatable if the Wrapper interface was intented to have a inmutable behaviour, i'd say no), a public accesor to the underlying datasource should be provided.  ---  **Affects:** 3.1 GA  **Issue Links:** - #14404 DelegatingDataSource incorrectly implements java.sql.Wrapper  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ff640a95db22d2bba2c25595a94cc18cc330fcf, https://github.com/spring-projects/spring-framework/commit/da8e2d6736ede80781830c3d28aca68bf728f409","closed","type: enhancement,","spring-projects-issues","2012-10-03T14:52:38Z","2019-01-14T05:23:42Z"
"","14042","Unknown status codes (i.e. not in HttpStatus enum) prevent HttpClientErrorException and HttpServerErrorExceptions from being raised [SPR-9406]","**[harish](https://jira.spring.io/secure/ViewProfile.jspa?name=harish)** opened **[SPR-9406](https://jira.spring.io/browse/SPR-9406?redirect=false)** and commented  RestTemplates HTTP status codes to only the ones that have associated messages. All 1xx,2xx,3xx,4xx,5xx are legal and valid response codes. RestTempllate should treat them as legal and not throw IllegalArgumentException or ignore message body when any of them are passed. Both code and body should be preserved and passed to caller as such. That would help services and clients make use of flexibility provided by HTTP specifications in using existing status codes and adding their own if no suitable status exists for their needs. This is preventing us from using RestTemplate.  ---  **Affects:** 3.1.1  **Sub-tasks:** - #14136 Backport ""Unknown status codes (i.e. not in HttpStatus enum) prevent HttpClientErrorException and HttpServerErrorExceptions from being raised""  **Issue Links:** - #11418 RestTemplate throws IllegalArgumentException when HTTP status is not in the HttpStatus enum - #20529 RestTemplate doesn't consistently tolerate unknown HTTP status codes","closed","type: bug,","spring-projects-issues","2012-05-14T10:28:19Z","2019-01-11T12:43:49Z"
"","13949","In order to handle non standard HTTP Status codes returned by services in RestTemplate, I would like to add support for handling non standard status codes and passing on responses for these responses to callers [SPR-9311]","**[harish](https://jira.spring.io/secure/ViewProfile.jspa?name=harish)** opened **[SPR-9311](https://jira.spring.io/browse/SPR-9311?redirect=false)** and commented  Currently Resttemplate uses an enum of 'standard' HTTP status codes, that is subset of all legally possible HTTP status codes that services can return. When a non standard HTTP status code is returned by services, an IllegalArgumentException is thrown and all response body is ignored. We call services that use custom code 450 for user validation errors along with an xml containing list of messages codes and message text. Unfortunately we get only an illegal argument exception and response body is lost. I think it would be helpful if say all 4xx, 1xx, 2xx, 5xx are treated as legal responses and their response bodies are preserved and passed to the caller. At the least a hook could be provided to extend the enum used by Resttemplate to add additional HTTP codes that caller might expect.  ---  **Issue Links:** - #11418 RestTemplate throws IllegalArgumentException when HTTP status is not in the HttpStatus enum  (_**""duplicates""**_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-05T13:29:13Z","2019-01-11T12:51:57Z"
"","13912","Java config FactoryBean proxy causes class loader leak [SPR-9274]","**[Harald Wellmann](https://jira.spring.io/secure/ViewProfile.jspa?name=hwellmann)** opened **[SPR-9274](https://jira.spring.io/browse/SPR-9274?redirect=false)** and commented  Redeploying my web application in Tomcat a couple of times in a row, I had a PermGen space OutOfMemoryError. A heap dump revealed the cause to be a net.sf.cglib.proxy.Callback stored in thread-local memory, so that the associated class loader could not get garbage collected.  The callback holds a reference to ConfigurationClassEnhancer.GetObjectMethodInterceptor, which brought me closer to the root cause of the problem.  After changing my Spring Configuration from  ```     @Bean     public PlatformTransactionManager transactionManager() {         return new JpaTransactionManager(myEntityManagerFactory().getObject());     }      @Bean     public AbstractEntityManagerFactoryBean myEntityManagerFactory() {         LocalContainerEntityManagerFactoryBean bean = new LocalContainerEntityManagerFactoryBean();         bean.setDataSource(myDataSource);         bean.setPersistenceProvider(new HibernatePersistence());         bean.setPersistenceUnitName(""myPU"");         return bean;     } ```  to  ```     @Bean     public PlatformTransactionManager transactionManager() {         return new JpaTransactionManager(myEntityManagerFactory());     }      @Bean     public EntityManagerFactory tcmEntityManagerFactory() {         LocalContainerEntityManagerFactoryBean bean = new LocalContainerEntityManagerFactoryBean();         bean.setDataSource(myDataSource);         bean.setPersistenceProvider(new HibernatePersistence());         bean.setPersistenceUnitName(""myPU"");         bean.afterPropertiesSet();         return bean.getObject();     } ```  I can redeploy my application without memory leaks.  I suspect the problem would disappear if ConfigurationClassEnhancer.enhanceFactoryBean() called Enhancer.registerStaticCallbacks() instead of Enhancer.registerCallbacks() (see #10601).  ---  **Affects:** 3.1 GA, 3.2.8  **Issue Links:** - #14941 Concurrent creation of the same Configuration class in different contexts is not thread-safe - #10601 Singleton-scoped `@Bean` methods behave like prototypes in a Spring DM environment  **Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)  5 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-03-28T08:41:05Z","2019-01-13T07:05:29Z"
"","14460","Provide a way to map exceptions thrown from @RequestMapping method to HTTP response status code [SPR-9827]","**[Hao Hu](https://jira.spring.io/secure/ViewProfile.jspa?name=shaketbaby)** opened **[SPR-9827](https://jira.spring.io/browse/SPR-9827?redirect=false)** and commented  At the moment, there is a `@ResponseStatus` that can be used on Exception classes or ExceptionHandler method to map an exception to a specified response status code. But that means for any given exception, it can only be mapped to one response code in a single controller.  For example, assuming there are two `@RequestMapping` methods in a `@Controller`, methodOne() and methodTwo(), an exception SomeException. it is not possible to say, set response code to 400 when SomeException is thrown from methodOne; while if it is thrown from methodTwo, set response code to 500.  It would be good if there is a way to do this, something like:      @RequestMapping(value = ""/some/mapping"", method = GET)     @ResponseBody     @ExceptionStatusCode(statusCode = 400, exceptions = SomeException.class)     public Object someMethod() {     }    --- No further details from [SPR-9827](https://jira.spring.io/browse/SPR-9827?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-09-25T00:07:14Z","2018-12-13T15:23:24Z"
"","14021","Cacheable: Typos of parameternames in @Cacheable.key should cause an exception [SPR-9385]","**[Hans-Peter Störr](https://jira.spring.io/secure/ViewProfile.jspa?name=hpstoerr)** opened **[SPR-9385](https://jira.spring.io/browse/SPR-9385?redirect=false)** and commented  If there are typos in the parameter / variable names in `@Cacheable`.key an exception should be thrown. Currently this is silently ignored. For example:  ``` @Cacheable(value = { ""webservice"" } key = ""{#root.method.toString(), #firstname, #lastname}"" ) public List findPersonsByName(String firstName, String lastName, String sessionidforlogging) { ... } ```  silently caches everything with the same cache key {'findPersonsByName', null, null}. A situation like that can easily happen without you noticing when refactoring code.  Unforunately, this might need changes in SPEL as well, since the StandardEvaluationContext does not seem to support checking whether a variable is actually declared. :-(   ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2012-05-08T03:23:11Z","2019-01-12T03:48:34Z"
"","14637","State depreciation reasons for Struts1 support beans [SPR-10003]","**[Hans-Peter Störr](https://jira.spring.io/secure/ViewProfile.jspa?name=hpstoerr)** opened **[SPR-10003](https://jira.spring.io/browse/SPR-10003?redirect=false)** and commented  It seems all the classes usable for Struts-1 support are depreciated (for instance ContextLoaderPlugIn, DelegatingActionProxy, AutowiringTilesRequestProcessor and so forth), but in the javadoc it just says * `@deprecated` as of Spring 3.0   and in the Reference this is not even mentioned. As it is, this depreciation is just confusing and useless, since it does not mention the reason and what to use instead. Is this because Struts 1 support will be discontinued at some point? Is there a better replacement? Something else?  Generally, could you please state the depreciation reason and the replacement in depreciation comments?   ---  **Affects:** 3.0 GA","closed","in: web,","spring-projects-issues","2012-11-20T05:19:54Z","2019-01-11T19:01:42Z"
"","14112","Eager loading of XSLT stylesheet in the XsltView throws an IOException [SPR-9477]","**[Hamed Asghari](https://jira.spring.io/secure/ViewProfile.jspa?name=hasghari)** opened **[SPR-9477](https://jira.spring.io/browse/SPR-9477?redirect=false)** and commented  When the `XsltViewResolver` is not the only `ViewResolver` used in conjunction with the `ContentNegotiatingViewResolver`, an exception can be thrown if `cacheTemplates == true`.  I've tracked down the issue to following block of code:  ``` protected void initApplicationContext() throws BeansException {     this.transformerFactory = newTransformerFactory(this.transformerFactoryClass);     this.transformerFactory.setErrorListener(this.errorListener);     if (this.uriResolver != null) {         this.transformerFactory.setURIResolver(this.uriResolver);     }     if (this.cacheTemplates) {         this.cachedTemplates = loadTemplates();     } } ```  The `XsltView` will try to eagerly load the template and an `IOException` will be thrown if the template does not exist.  I have attached the patch to fix this issue.   ---  **Affects:** 3.1 GA  **Attachments:** - [XsltView.patch](https://jira.spring.io/secure/attachment/19808/XsltView.patch) (_1.04 kB_)","closed","status: bulk-closed,","spring-projects-issues","2012-06-06T10:00:32Z","2019-01-12T02:48:00Z"
"","14626","SpEL should provide possibility to quote operators [SPR-9992]","**[Gábor Lipták](https://jira.spring.io/secure/ViewProfile.jspa?name=gabor.liptak)** opened **[SPR-9992](https://jira.spring.io/browse/SPR-9992?redirect=false)** and commented  I wanted to produce a Google Guava predicate (not) with SpEL. And it seems, that it is handled as an SpEL operator, since the method is called ""not"". I did not found reference in the documentation if it is possible to quote such operators.  ---  **Affects:** 3.0.5  **Reference URL:** http://stackoverflow.com/a/13399589/337621  **Issue Links:** - #14495 Allow SpEL reserved words in type package names (_**""duplicates""**_)  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2012-11-15T07:05:49Z","2019-01-12T16:47:31Z"
"","13908","Generic factory method and constructor-arg in Spring DI (xml) [SPR-9270]","**[Grzegorz Rozniecki](https://jira.spring.io/secure/ViewProfile.jspa?name=grozniecki)** opened **[SPR-9270](https://jira.spring.io/browse/SPR-9270?redirect=false)** and commented  Using Spring IoC container and XML beans I've found bug - `factory-method` used on generic static method combined with `` and `value=""""` attribute doesn't create bean. On the other hand if I use `` element instead, it does the job.  This bean works:  ```         someValue     ```  but this doesn't (with or without `index=""0""`):  ```      ```  Instead an Exception is thrown:  ``` org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'brokenSupplier' defined in class path resource [brokenContext.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [java.lang.Object]: Ambiguous factory method argument types - did you specify the correct bean references as factory method arguments? 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:716) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:461) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1015) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:911) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83) 	at org.springframework.test.AppTest.testBroken(AppTest.java:19) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:300) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) ```  Issue described [on Stackoverflow](http://stackoverflow.com/questions/9820966/generic-factory-method-in-spring-di). Originally I use [Google Guava library](http://code.google.com/p/guava-libraries/) and its `Supplier` interface, but the bug can be reproduced on any generic static factory method.  Maven project with tests is attached.   ---  **Affects:** 3.0.7, 3.1.1  **Attachments:** - [spring-bug-test.tgz](https://jira.spring.io/secure/attachment/19546/spring-bug-test.tgz) (_12.51 kB_) - [spring-bug-test-v2.tgz](https://jira.spring.io/secure/attachment/19549/spring-bug-test-v2.tgz) (_15.62 kB_)  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-03-27T10:51:45Z","2019-01-12T03:48:47Z"
"","13918","Clarify @EnableScheduling javadoc re ExecutorService shutdown [SPR-9280]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-9280](https://jira.spring.io/browse/SPR-9280?redirect=false)** and commented  Javadoc for `@EnableScheduling` has the following code example:  ```java  @Configuration  @EnableScheduling  public class AppConfig implements SchedulingConfigurer {      @Override      public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {          taskRegistrar.setScheduler(taskExecutor());      }       @Bean      public Executor taskExecutor() {          return Executors.newScheduledThreadPool(100);      }  } ```  With such `@Bean` definition (taskExecutor), the returned bean cannot be properly destroyed while closing the appcontext - returned TaskSheduler have ""shutdown"" method, but it cannot be invoked using ""(inferred)"" mechanism. So with e.g., web application it causes memory leaks.  Please either * change ""taskExecutor"" definition to return org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler, or * use `@Bean(destroyMethod = ""shutdown"")`  one more thing - I have strange issues with:  ```java @Bean(destroyMethod = ""shutdown"") public Executor springTaskScheduler() {   return Executors.newScheduledThreadPool(10); } ```  because although `shutdown()` is called, some classes from Spring (in heap dump) appear to have been on ""native stack"" (e.g., `org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator`) - more on this on Spring Forum (soon)  regards Grzegorz Grzybek   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a856c09f322b8ae821ff5e6a86dc0b0aeaf618d, https://github.com/spring-projects/spring-framework/commit/1380d053c473711d59aa91fd6346734ffd24f0e2","closed","type: enhancement,","spring-projects-issues","2012-03-29T02:46:46Z","2012-06-19T03:39:39Z"
"","14679","Update JdbcOperations [SPR-10045]","**[Gregory bonk](https://jira.spring.io/secure/ViewProfile.jspa?name=gbonk)** opened **[SPR-10045](https://jira.spring.io/browse/SPR-10045?redirect=false)** and commented  I would like a ""query"" operation that returns a type \ and will take a RowMapper\ implementation.  The idea here is that I need an operation that will return a single object when found and null when not.  Where queryForObject is great when I expect a row to be returned, so too should there be  'query' call when it's acceptable to not 'find' a row in the database, when I'm expecting only one and not a list from 'query' which I have to inturn check further.  Unfortunately the method signature is already taken, i believe.   ---  **Affects:** 3.1.3  **Reference URL:** http://forum.springsource.org/showthread.php?132762-frustrated-with-EmptyResultDataAccessException","closed","status: bulk-closed,","spring-projects-issues","2012-11-27T08:13:56Z","2019-01-12T00:25:16Z"
"","14084","@ResponseStatus does not return ""reason"" text [SPR-9449]","**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[SPR-9449](https://jira.spring.io/browse/SPR-9449?redirect=false)** and commented  The ""reason"" argument of `@ExceptionHandler` is not returned with the text from the annotated controller method.  Given:  ``` @RequestMapping(""/test"") public void listWithException() {     throw new DataRetrievalFailureException(""Hello Error""); }  @ExceptionHandler(DataRetrievalFailureException.class) @ResponseStatus(value = HttpStatus.NOT_FOUND, reason = ""Hello Error Too"") public void handleEmptyResult(HttpServletRequest request, HttpServletResponse response) {     logger.debug(""********** In Error Handler!!!   **********""); } ```  Invoke the `@RequestMapping`:  ``` @Test(expected = HttpClientErrorException.class) public void testRestErrorResponseCode() {     RestTemplate restTemplate = new RestTemplate();     HttpHeaders headers = restTemplate.headForHeaders(URL);     logger.debug(""****** Headers {}"", headers); } ```  Same behavior using non-test scenario, with GET request.   ---  **Affects:** 3.1.1","closed","status: declined,","spring-projects-issues","2012-05-27T18:00:29Z","2019-01-12T16:36:21Z"
"","14624","Detect split packages at build time [SPR-9990]","**[Glyn Normington](https://jira.spring.io/secure/ViewProfile.jspa?name=glyn)** opened **[SPR-9990](https://jira.spring.io/browse/SPR-9990?redirect=false)** and commented  Split packages are a well-known anti-pattern for OSGi and a blocker for Eclipse Virgo which prevents split packages being accessed via its Import-Library construct.  Split packages are also unhelpful with a linear classpath as a split package name does not uniquely identify the Spring framework JAR from which it came, thus complicating problem diagnosis and maintenance.  Split packages have crept into Spring framework twice in recent months - see #14444 and #14622. Currently, they are only detected once the Spring framework has been converted to OSGi bundles and these bundles have been tested with Eclipse Virgo.  The proposal is to add a build-time check for split packages to the Spring framework build.  ---  **Affects:** 3.2 GA  **Issue Links:** - #14783 Package org.springframework.instrument.classloading is split between spring-context and spring-instrument-tomcat","closed","type: enhancement,","spring-projects-issues","2012-11-14T03:10:44Z","2019-01-11T14:20:14Z"
"","14622","Package org.springframework.asm split across core and asm JARs [SPR-9988]","**[Glyn Normington](https://jira.spring.io/secure/ViewProfile.jspa?name=glyn)** opened **[SPR-9988](https://jira.spring.io/browse/SPR-9988?redirect=false)** and commented  This was found while testing Spring framework 3.2.0.M1 converted to OSGi bundles on Eclipse Virgo.  The diagnostics show the bug:  org.eclipse.virgo.kernel.osgi.framework.ImportMergeException: cannot merge imports of package 'org.springframework.asm' from sources 'Import-Library 'org.springframework.spring' version '3.2.0.M1'(Import-Bundle 'org.springframework.asm' version '3.2.0.M1', Import-Bundle 'org.springframework.core' version '3.2.0.M1')' because of conflicting values 'org.springframework.core', 'org.springframework.asm' of attribute 'bundle-symbolic-name'   ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/00a86c37222d92b1477f2480b7bdfaebd12c2d1a","closed","in: core,","spring-projects-issues","2012-11-14T01:59:32Z","2012-11-14T12:44:58Z"
"","14654","Deadlock in DefaultListableBeanFactory/DefaultSingletonBeanRegistry [SPR-10020]","**[Glyn Normington](https://jira.spring.io/secure/ViewProfile.jspa?name=glyn)** opened **[SPR-10020](https://jira.spring.io/browse/SPR-10020?redirect=false)** and commented  A user of Gemini Blueprint (nee Spring DM) has raised a bug ([1]) about a deadlock which appears to be caused by the combination of DefaultListableBeanFactory and DefaultSingletonBeanRegistry. I'm not sure which version of Spring framework they were using, but I checked the code at HEAD and the deadlock still appears to be possible.  The deadlock is easy to see in the bug description and involves two threads.  1. The thread ""EclipseGeminiBlueprintExtenderThread-20"" has synchronised on ConcurrentHashMap@3b38bbfa in DefaultListableBeanFactory.resetBeanDefinition while calling destroySingleton which then blocks waiting for LinkedHashMap@9c772ae.  2. The thread ""Gemini Blueprint context shutdown thread"" has synchronised on LinkedHashMap@9c772ae in DefaultSingletonBeanRegistry.destroySingletons while calling destroySingleton which results in a call to removeSingleton which then blocks waiting for ConcurrentHashMap@3b38bbfa.  [1] https://bugs.eclipse.org/bugs/show_bug.cgi?id=384080  ---  **Affects:** 3.1.3, 3.2 RC1  **Reference URL:** https://bugs.eclipse.org/bugs/show_bug.cgi?id=384080  **Issue Links:** - #13117 Performance bottleneck and potential thread deadlock in DefaultSingletonBeanRegistry","closed","in: core,","spring-projects-issues","2012-11-23T02:30:36Z","2019-01-11T18:40:27Z"
"","14669","SpEL performance [SPR-10035]","**[Giovanni Dall'Oglio Risso](https://jira.spring.io/secure/ViewProfile.jspa?name=giovanni.dalloglio)** opened **[SPR-10035](https://jira.spring.io/browse/SPR-10035?redirect=false)** and commented  The extraction of  > someList[3565] > is quite expensive, due to the internal iteration of `Indexer.CollectionIndexingValueRef` class.  We found this issue using jVisualvm.  We use this evaluation in a Spring Batch Processor (this means that the small performance gap is amplified by the million processed items in that batch).    ---  **Affects:** 3.1.3, 3.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e080af8d859be43321ddccc16ad3dbb22952ed7e","closed","type: enhancement,","spring-projects-issues","2012-11-26T03:44:03Z","2012-12-12T15:34:25Z"
"","14466","HttpComponentsHttpInvokerRequestExecutor does not explicitly release connection [SPR-9833]","**[Gerrit Brehmer](https://jira.spring.io/secure/ViewProfile.jspa?name=gbrehmer)** opened **[SPR-9833](https://jira.spring.io/browse/SPR-9833?redirect=false)** and commented  We are using HttpComponentsHttpInvokerRequestExecutor with HttpClient v4.2.1 with PoolingClientConnectionManager. We notice in our live environment, that in case of an error, the connection is not gracefully released. I have attached a TestCase. The first one consumes the entity at the end (by default there are callback handler registered, which releases the connection after consuming the entity). Otherwise explicitly releasing connection is also possible to fix the problem. But currently the HttpComponentsHttpInvokerRequestExecutor does not consume the entity after an HTTP error (or releasing connection explicitly) so the connection is not released and not available for other requests.  ---  **Affects:** 3.1.2  **Attachments:** - [HttpClientTest.java](https://jira.spring.io/secure/attachment/20527/HttpClientTest.java) (_2.80 kB_)  **Issue Links:** - #14110 Upgrade commons-httpclient from version 4.1  to version 4.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6ed589d94b20627278561437376348417856a21e, https://github.com/spring-projects/spring-framework/commit/93aa411886dd8f9d1b48b782b4a8e90e31b85419","closed","type: bug,","spring-projects-issues","2012-09-26T12:30:46Z","2019-01-11T13:15:53Z"
"","14563","When SimpleMessageListenerContainer could not connect, it throws a NullPointerException in shutdown() [SPR-9930]","**[Geert Pante](https://jira.spring.io/secure/ViewProfile.jspa?name=greyfairer)** opened **[SPR-9930](https://jira.spring.io/browse/SPR-9930?redirect=false)** and commented  When I start a simpleMessageListenerContainer while the ActiveMQ server is down, I get:  ``` to perform GET on: http://localhost:22012 as response was: Connection to http://localhost:22012 refused         at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:35)         at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:295)         at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:239)         at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:185)         at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184)         at org.springframework.jms.listener.AbstractJmsListeningContainer.createSharedConnection(AbstractJmsListeningContainer.java:403)         at org.springframework.jms.listener.AbstractJmsListeningContainer.establishSharedConnection(AbstractJmsListeningContainer.java:371)         at org.springframework.jms.listener.SimpleMessageListenerContainer.doInitialize(SimpleMessageListenerContainer.java:187)          at org.springframework.jms.listener.AbstractJmsListeningContainer.initialize(AbstractJmsListeningContainer.java:193)         ... 10 more ```  I can catch this exception, and the container will keep retrying, which is a good thing.  If I want to shut it down, I do  ```java try {     if (jmsContainer.isRunning())     {         jmsContainer.stop();     }     jmsContainer.destroy();     jmsContainer = null; } catch (JmsException e) {     log.warn(""Exception stopping listener: "", e); } ```  But here I get a NullPointerException from the destroy():  ``` Caused by: java.lang.NullPointerException         at org.springframework.jms.listener.SimpleMessageListenerContainer.doShutdown(SimpleMessageListenerContainer.java:325)         at org.springframework.jms.listener.AbstractJmsListeningContainer.shutdown(AbstractJmsListeningContainer.java:231)         at org.springframework.jms.listener.AbstractJmsListeningContainer.destroy(AbstractJmsListeningContainer.java:172) ```  Apparently, this.consumers and this.sessions are null, while you try to iterate over them.   ---  **Affects:** 3.0.7","closed","type: bug,","spring-projects-issues","2012-10-30T06:08:07Z","2012-11-04T06:54:03Z"
"","14200","Bypass conversion when possible [SPR-9566]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-9566](https://jira.spring.io/browse/SPR-9566?redirect=false)** and commented  1. A Map\ that doesn't need conversion and does not have a no-arg constructor causes execution failure (works in 3.0). ([INT-2630](https://jira.spring.io/browse/INT-2630)) 2. A large byte[] is unnecessarily copied, causing high cpu utilization (not copied in 3.0). ([INT-2650](https://jira.spring.io/browse/INT-2650)).  A simple example showing #2 is provided in spring-framework-issues is shown here (to-be-supplied).  The parameter 'argumentsRequiringConversion' to ReflectionUtils.convertArguments is completely ignored.  Before reading #13163, I tried ""fixing"" this method, as shown here (to-be-supplied). This fixed the problem, but broke ExpressionTestsUsingCoreConversionService.testConvert, because the logic in ReflectiveMethodResolver.resolve, for the test case that fails (with my patch to ReflectionHelper), considers ""Collection\ foos"" a ""close match"" to the parameter in the method      public void setFoos(Collection foos)  which results in argumentsRequiringConversion being null. Seems to me this shouldn't be a CLOSE match, but a REQUIRES_CONVERSION match, in which case my suggested fix to ReflectionUtils would work.  We can work around these issues in Spring Integration, but the core issue remains.  ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?127694-TCP-Endpoint-binary-incoming-transfer-high-cpu-load  **Issue Links:** - #14560 Refactor GenericConversionService (_**""depends on""**_) - [INT-2650](https://jira.spring.io/browse/INT-2650) TCP Endpoint - using SpEL in Spring 3.1 to convert byte[] to byte[] - high cpu load and handle time delay - [INT-2630](https://jira.spring.io/browse/INT-2630) Unable to convert MessageHistory, MessageHeaders via bundled converters.","closed","type: enhancement,","spring-projects-issues","2012-07-05T06:51:56Z","2019-01-11T12:54:11Z"
"","14093","Missing 'Premain-Class' manifest entry in spring-instrument jar [SPR-9458]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-9458](https://jira.spring.io/browse/SPR-9458?redirect=false)** and commented  Via email from `@grussell`  > the [spring-instrument 3.2.0.]M1 manifest doesn't have a Premain-class entry so it can't be used as a javaagent. >  > 3.1.1 has >  > ``` > Premain-Class: org.springframework.instrument.InstrumentationSavingAge >  nt > ```    ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/706da4f7c2b93648f91981cbd7cacbf81cc9c362","closed","type: regression,","spring-projects-issues","2012-06-01T00:56:35Z","2012-06-01T01:04:46Z"
"","13887","Improve Support for Maps of Mixed Types [SPR-9249]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-9249](https://jira.spring.io/browse/SPR-9249?redirect=false)** and commented  Currently, if you want to define a map of mixed value types, you can use syntax such as...  ```  	100   ```  It would be more succinct if we could do something like  ```   ```  See [AMQP-198](https://jira.spring.io/browse/AMQP-198)  ---  **Sub-tasks:** - #14059 Backport ""Improve Support for Maps of Mixed Types""  **Issue Links:** - [AMQP-198](https://jira.spring.io/browse/AMQP-198) Unable to declaring queue arguments with spring-rabbit-1.0.0.RELEASE","closed","type: enhancement,","spring-projects-issues","2012-03-19T09:53:08Z","2019-01-11T12:46:18Z"
"","13838","Improve Javadocs for DMLC Regarding JmsTransactionManager [SPR-9200]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-9200](https://jira.spring.io/browse/SPR-9200?redirect=false)** and commented  A number of errors have crept into the DMLC Javadocs.  For example:  - setCachLevel() says that while the default is CACHE_NONE with an external txManager, it can be overridden. This is not the case because a new connection is obtained for each poll and bound to the thread. - setTransactionManager refers to AMLC class Javadocs, which in turn imply that for downstream JmsTemplate within an `@Transacted` method needs the LC to have an external JmsTransactionManager.  ``` ""* The effect is similar to ""sessionTransacted"" set  * to ""true"", the difference being that this external transaction management  * will also affect independent JMS access code within the service layer  * (e.g. based on {@link org.springframework.jms.core.JmsTemplate} or  * {@link org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy}),  * not just direct JMS Session usage in a {@link SessionAwareMessageListener}."" ```  In fact, even with sessionTransacted=true the session is bound to the thread via a LocallyExposedJmsResourceHolder and no external txManager is required and, if provided, precludes caching in the DMLC (CCF is needed).  It is now generally recommended that an external txManager only be provided if JTA is needed.  Suggest a thorough review of all Listener Container documentation regarding the use of JmsTransactionManager.  ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?123631-JMS-DMLC-not-caching-connection-when-using-TX-despite-cacheLevel-CACHE_CONSUMER  **Issue Links:** - #12536 Better abstraction for transactional configuration in DMLC (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/674bad4cfa21f40f9d8103ce729c54c2092a9f93","closed","type: enhancement,","spring-projects-issues","2012-03-05T06:08:41Z","2019-01-11T12:44:50Z"
"","14394","Getting HttpMessageNotReadableException while using XStream 1.3.1 with Spring 3.0.2 [SPR-9760]","**[Ganesh Kandisa](https://jira.spring.io/secure/ViewProfile.jspa?name=ganeshkandisa)** opened **[SPR-9760](https://jira.spring.io/browse/SPR-9760?redirect=false)** and commented  Recently facing an issue with XStream which i'm using with Spring. We have a REST application where we are using XStream for marshalling & unmarshalling XML. We have configured as shown below,  ```xml        	 com.repobjects.OfflineOrderRepresentation            ```  And this XStreamMarshaller is configured to HttpMessageconverter as shown,  ```xml       	         	 	               	                                 	        ```  The issue here is when i post proper XML it should match to it's corresponding XStream annotated class ""OfflineOrderRepresentation"", but that is happening randomly, some times i'm getting syntactically incorrect message, and issue is getting fixed randomly if i restart the server.  Below is the error logs i'm getting,  ``` [org.springframework.http.converter.xml.MarshallingHttpMessageConverter@712625b0]    [org.springframework.web.bind.annotation.support.HandlerMethodInvoker]         Reading [com.repobjects.OfflineOrderRepresentation]               [org.springframework.http.converter.xml.MarshallingHttpMessageConverter@712625b0]                 [org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver]                            [controllers.OrderController@799a92d1]:                                org.springframework.http.converter.HttpMessageNotReadableException: Could not read [class com.repobjects.OfflineOrderRepresentation];   ```    ---  **Affects:** 3.0.2  **Reference URL:** http://stackoverflow.com/questions/12285393/spring-xstreammarshaller-is-failing-to-identify-the-java-class-for-mapping-to","closed","status: bulk-closed,","spring-projects-issues","2012-09-05T09:15:48Z","2019-01-12T00:26:26Z"
"","13917","Hibernate Envers does not work in Spring 3.1 [SPR-9279]","**[Gabriele Del Prete](https://jira.spring.io/secure/ViewProfile.jspa?name=gdelprete)** opened **[SPR-9279](https://jira.spring.io/browse/SPR-9279?redirect=false)** and commented  I cannot have Hibernate Envers work under Spring 3.1.1.  Specifically, it seems Envers do not persist entity revisions.  This is happening both when using Hibernate 3.6.x and using Hibernate 4.1.1. We do have a similar setup in one of our projects, using Spring 3.0.6, and it works correctly.  I'm attaching an example project showing the problem. Just run it with mvn test. The project is configured for Hibernate 4.1.1, but you can run it using Hibernate 3.6.8 by uncommenting a property in the POM and by changing the ContextConfiguration annotation in EnversTest so that it loads the correct context.    ---  **Affects:** 3.1.1  **Attachments:** - [spring31hib41.tar.gz](https://jira.spring.io/secure/attachment/19550/spring31hib41.tar.gz) (_7.12 kB_)","closed","in: core,","spring-projects-issues","2012-03-29T01:59:45Z","2019-01-12T05:28:51Z"
"","13861","Allow configuration of a custom MessageCodesResolver in WebMvcConfigurer [SPR-9223]","**[Gabriel Sueiro](https://jira.spring.io/secure/ViewProfile.jspa?name=gsueiro)** opened **[SPR-9223](https://jira.spring.io/browse/SPR-9223?redirect=false)** and commented  A custom MessageCodesResolver can be provided using the property ""message-codes-resolver"" of . But there is no equivalent way to do it when using `@Configuration` and implementing WebMvcConfigurer (or extending  WebMvcConfigurerAdapter). There should be a method getMessageCodesResolver() in WebMvcConfigurerAdapter.  ``` interface WebMvcConfigurer {   ...   MessageCodesResolver getMessageCodesResolver();   ... } ```  WebMvcConfigurationSupport should also have some method to override.  ``` public class WebMvcConfigurationSupport {   ...   @Bean   public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {     ConfigurableWebBindingInitializer webBindingInitializer = new ConfigurableWebBindingInitializer();     webBindingInitializer.setMessageCodesResolver(getMessageCodesResolver());     ...     RequestMappingHandlerAdapter adapter = new RequestMappingHandlerAdapter();     adapter.setWebBindingInitializer(webBindingInitializer);     ...     return adapter;   }   ...   protected MessageCodesResolver getMessageCodesResolver(){     return new DefaultMessageCodesResolver();   }   ... } ```    ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2af294ab26b670c7f997054ab11ecf7402fee6ed","closed","type: enhancement,","spring-projects-issues","2012-03-11T07:24:03Z","2012-06-19T03:39:22Z"
"","14156","ResourceBundleMessageSource doesn't work with Local.ENGLISH but does work with Local.US or Locale.UK [SPR-9522]","**[Gabriel Rossetti](https://jira.spring.io/secure/ViewProfile.jspa?name=grossetti)** opened **[SPR-9522](https://jira.spring.io/browse/SPR-9522?redirect=false)** and commented  Hi everyone,  I have a properties file (message_en.properties) in src/main/resources/i18n/. I configured my ResourceBundleMessageSource like this:  ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource(); messageSource.setBasename(""i18n/messages"");  and try to to access it like this (all this from my unit test code):  String msg = messageSource.getMessage(""user.value.error"", null, Locale.ENGLISH);  This always gives me the following error:  org.springframework.context.NoSuchMessageException: No message found under code 'user.value.error' for locale 'en'.  (and I do have that key in the file). If I try this instead (same file, same place):  String msg = messageSource.getMessage(""user.value.error"", null, Locale.US);  or  String msg = messageSource.getMessage(""user.value.error"", null, Locale.UK);  it works. I read the Java ResourceBundle lookup rules here: http://docs.oracle.com/javase/1.3/docs/api/java/util/ResourceBundle.html  and specifying Locale.ENGLISH should work, especially since I had also added a copy of that file and named it ""messages.properties"". It is at the bottom of the lookup order and thus should always be found (and it wasn't).  This looks like a bug to me.  Thanks, Gabriel   ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2012-06-20T07:31:32Z","2019-01-12T02:47:43Z"
"","14088","Bean Introspection problem under IBM Java 1.6 with new ExtendedBeanInfo [SPR-9453]","**[Friedrich Messner](https://jira.spring.io/secure/ViewProfile.jspa?name=fmessner)** opened **[SPR-9453](https://jira.spring.io/browse/SPR-9453?redirect=false)** and commented  We're using Spring's BeanWrapper to access a bean via reflection. For one bean's property  * which has a generic type * which is read-only (no setter) * whose getter implements an interface  we're getting a `org.springframework.beans.NotReadablePropertyException` since Spring 3.1. I tracked it a little bit and found out that it is related to the `ExtendedBeanInfo` class introduced with Spring 3.1. The following example demonstrates this:  ``` package org.springframework.beans;  import static org.junit.Assert.assertEquals;  import java.beans.BeanInfo; import java.beans.IntrospectionException; import java.beans.Introspector;  import org.junit.Test;  public class BeanInfoTest {      public interface Interface {         T getProp();     }      public final class Bean implements Interface prop;         public Class getProp() { return prop; }     }      @Test     public void testWithPlainBeanInfo() throws IntrospectionException {         BeanInfo info = Introspector.getBeanInfo(Bean.class);         assertEquals(2, info.getPropertyDescriptors().length);     }      @Test     public void testWithExtendedBeanInfo() throws IntrospectionException {         ExtendedBeanInfo extendedInfo = new ExtendedBeanInfo(                 Introspector.getBeanInfo(Bean.class));         assertEquals(2, extendedInfo.getPropertyDescriptors().length);     } } ```  While the first test passes, the second fails on IBM JVM 1.6.  If we do any of  * add a setter * remove the interface * change the type to non-generic (e.g. String) * run it under Sun JVM 1.6  it works.  It seems that ExtendedBeanInfo has a problem with the covariant return types coming from the bridge method for the generic property.  ---  **Affects:** 3.1.1  **Attachments:** - [introspect.tgz](https://jira.spring.io/secure/attachment/20018/introspect.tgz) (_1.74 kB_)  **Issue Links:** - #14336 ExtendedBeanInfo exception - java.beans.IntrospectionException (_**""is duplicated by""**_) - #14663 Overhaul non-void JavaBean write method support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b50bb5071ac353e77e9d38c72f888de3add923b2, https://github.com/spring-projects/spring-framework/commit/0ee12563b038797a137ac67b13e5dd6d3d918a7f, https://github.com/spring-projects/spring-framework/commit/30d0bd309cfb707813537751db431a3f56212d2b, https://github.com/spring-projects/spring-framework/commit/4a8be690998f43a9253305e09f96ad83058ef540  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-05-29T09:33:37Z","2019-01-11T13:02:56Z"
"","14117","BeanWrapper should allow reading of Boolean properties accessible via 'is' methods [SPR-9482]","**[Fried Hoeben](https://jira.spring.io/secure/ViewProfile.jspa?name=fhoeben)** opened **[SPR-9482](https://jira.spring.io/browse/SPR-9482?redirect=false)** and commented  When accessing bean properties via a BeanWrapper Boolean properties whose getter method uses an 'is' prefix rather than a 'get' prefix are not seen as readable. If the type of the property is boolean (i.e. primitive) it is readable.  Please also allow reading of Boolean properties using the 'is' prefix.  As a workaround we created our own getValue() implementation, but that is not really what we would like:  ```     private static Object getValue(BeanWrapper wrapper, String propertyName) {         Object result = null;         if (wrapper.isReadableProperty(propertyName)) {             result = wrapper.getPropertyValue(propertyName);         } else {             PropertyDescriptor propertyDescriptor = wrapper.getPropertyDescriptor(propertyName);             Class propertyType = propertyDescriptor.getPropertyType();             if (Boolean.class.equals(propertyType)) {                 String name = StringUtils.capitalize(propertyName);                 Object expected = wrapper.getWrappedInstance();                 Method m = ReflectionUtils.findMethod(expected.getClass(), ""is"" + name);                 if (m != null && m.getReturnType().equals(Boolean.class)) {                     result = ReflectionUtils.invokeMethod(m, expected);                 } else {                     throw new IllegalArgumentException(createErrorMsg(wrapper, propertyName));                 }             } else {                 throw new IllegalArgumentException(createErrorMsg(wrapper, propertyName));             }         }         return result;     }      private static String createErrorMsg(BeanWrapper wrapper, String propertyName) {         return propertyName + "" can not be read on: "" + wrapper.getWrappedClass();     } ```    ---  **Affects:** 3.1.1  **Attachments:** - [IsPropertyTest.java](https://jira.spring.io/secure/attachment/19826/IsPropertyTest.java) (_3.33 kB_)  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-06-07T04:55:05Z","2019-01-12T02:47:54Z"
"","14603","UriComponentsBuilder incorrectly disallows ""="" as query parameter value [SPR-9969]","**[Frans Flippo](https://jira.spring.io/secure/ViewProfile.jspa?name=fransflippo)** opened **[SPR-9969](https://jira.spring.io/browse/SPR-9969?redirect=false)** and commented  In UriComponentsBuilder, a regular expression QUERY_PARAM_PATTERN is used to split the query part of the URL into its separate query components. QUERY_PARAM_PATTERN is defined as:  ``` private static final Pattern QUERY_PARAM_PATTERN = Pattern.compile(""([^&=]+)=?([^&=]+)?""); ```  The last part of the regular expression dictates that the part after the first ""="" is not allowed to contain further ""="" signs. In other words, the query string  ?query=title=Spring&operation=search  would be split up into three parts: - query=title - Spring - operation=search  This can be circumvented by URL encoding the ""="" as %3D. However, in my case this all is being called from UriTemplate which RestTemplate's HttpUrlTemplate extends, and the UriTemplate constructor calls build() on the UrlComponentsBuilder which then URL encodes all the query parameter values, turning the %3D into %253D.  In the end, the easiest solution would be to change the regular expression for QUERY_PARAM_PATTERN to  ``` ([^&=]+)=?([^&]+)? ```  ---  **Affects:** 3.1.2  **Issue Links:** - #14465 Erroneous ""0"" returned where empty string expected in call through the RestTemplate (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2012-11-07T06:21:51Z","2019-01-12T16:47:33Z"
"","14185","spring-test-mvc: Cannot override useSuffixPatternMatch on StandaloneMockMVCBuilder [SPR-9551]","**[Frans Flippo](https://jira.spring.io/secure/ViewProfile.jspa?name=fransflippo)** opened **[SPR-9551](https://jira.spring.io/browse/SPR-9551?redirect=false)** and commented  (Using spring-test-mvc-1.0 snapshot).  My controller needs useSuffixPatternMatch to be false, so I'd like to be able to unit test my controller with MockMVC. However, MockMVC creates a StaticRequestMappingHandlerMapping which has useSuffixPatternMatch set to true.  I can make a StandaloneMockMVCBuilder subclass and override the extendRequestMappingHandlerMapping() method to set the useSuffixPatternMatch property on the handler mapping, but that's already too late: StandaloneMockMVCBuilder calls its WebMvcConfig.requestHandlerMapping() to create the handler mapping first, and all the method mappings, including the patterns based on useSuffixPatternMatch, are all already initialized then. Then it calls extendRequestMappingHandlerMapping().  Overriding all that as well is difficult due to the private inner classes and member variables.  I would propose a useSuffixPatternMatch property on the StandaloneMockMVCBuilder itself which it would then propagate to the StaticRequestMappingHandlerMapping right after creating it.  I can submit a patch if that helps.   ---  **Affects:** 3.1.1","closed","in: test,","spring-projects-issues","2012-06-29T13:14:25Z","2019-01-11T13:07:02Z"
"","14610","Support for stateful ""per method"" Advisors [SPR-9976]","**[Frank Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=maverick1601)** opened **[SPR-9976](https://jira.spring.io/browse/SPR-9976?redirect=false)** and commented  Within Spring AOP it is not possible to create stateful per-method advisors during context initialization. This, however, is needed if you want those advisors to contain state, such as a bean reference declared within a specific method annotation. Right now, all advisors apply at the bean (instance) level, which only allows for a single stateless Advisor/Advice instance to be registered per bean, no matter how many method pointcuts actually match.  In our project we have written an Interceptor similar to the TransactionInterceptor applied by `@Transactional`, which allows a PlatformTransactionManager (in fact a bean reference) to be defined within the annotation. Neither is there a chance to validate during context initialization, that this bean reference is valid, nor can this bean reference be ""stored"" statefully within the Advisor. In our case, we were using an additional BeanPostProcessor, just to make sure that all methods that were originally matched by our Pointcut, had a valid/existing bean name defined. Otherwise, you will run into errors during runtime lately.  I think, the main point here is, that as far as I looked at the framework, the Pointcut is used differently during proxy initialization as compared to runtime. In fact, during initialization the method matching is out of interest, so no matter which pointcut matches the bean in question, exactly one Advisor is put into the chain. The advisor himself never gets to see the matches pointcut, so there is no way of extracting the information from the annotation, as needed.   --- No further details from [SPR-9976](https://jira.spring.io/browse/SPR-9976?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-11-08T04:18:47Z","2018-12-26T15:54:34Z"
"","14608","Support for property validation during context initialization [SPR-9974]","**[Frank Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=maverick1601)** opened **[SPR-9974](https://jira.spring.io/browse/SPR-9974?redirect=false)** and commented  There is sometimes the need for property value validation during context startup, which cannot be done within the scope of a single bean instance, i.e. there may be two property values distributed throughout the context which, however, must be configured properly with respect to each other. In that case, one cannot use `@PostConstruct` of afterPropertiesSet() to ensure the two values are properly set.  Accordingly, there should be a possibility to have access to all the property values early during context initialization, in order to be able to verify they are correctly set, which may not be the case if overridden by system or environment variables. The PropertySourcesPlaceholderConfigurer itself provides no suitable extension for doing this, so the only way of achieving this seems to be writing a BeanFactoryPostProcessor for this. However, this is a little dirty, since no post-processing is actually done and the processor relies on the ordering with respect to the afore mentioned PropertySourcesPlaceholderConfigurer. An extension hook, e.g. template method, for PropertySourcesPlaceholderConfigurer might overcome this.   --- No further details from [SPR-9974](https://jira.spring.io/browse/SPR-9974?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-11-07T22:53:44Z","2018-12-28T09:46:11Z"
"","14097","@Transactional won't be proper resolved to AspectJ Join point with Glassfish 3.1.2 [SPR-9462]","**[Frank Pollak](https://jira.spring.io/secure/ViewProfile.jspa?name=fp07)** opened **[SPR-9462](https://jira.spring.io/browse/SPR-9462?redirect=false)** and commented  Very strange problem with Glassfish 3.1.2. I have a small web application with Spring transaction management. The application has 3 service classes where the transactions starts. I use LTW with annotated transactions (). The application works FLAWLESS in Glassfish 3.1 After I upgraded the Glassfish server with the updatetool to version 3.1.2 the LTW transaction creation works only in 2 of the 3 service classes! All application config files and the source code are still the same. The service classes are all created as Spring beans in the same container environment. I upgraded the Spring Framework to 3.1.1 and AspectJ to 1.7.0 but the problem still exists. Than I enabled -showWaeveInfo in the AspectJ aop.xml file and in the log I can see how the Join Points are generated:  [#|2012-06-01T17:58:12.592+0200|SEVERE|glassfish3.1.2|javax.enterprise.system.std.com.sun.enterprise.server.logging|_ThreadID=17;_ThreadName=Thread-2;|[WebappClassLoader@f0c11e] weaveinfo Join point 'method-execution(void security.dbservice.GlobalConfigSettingsService.createGlobalConfigSettings())' in Type 'security.dbservice.GlobalConfigSettingsService' (GlobalConfigSettingsService.java:58) advised by after advice from 'org.springframework.transaction.aspectj.AnnotationTransactionAspect' (AbstractTransactionAspect.aj:82)  This Join Point advice from Spring to AspcetJ is missing in Glassfish 3.1.2 for one of the 3 service classes and this is the issue I have. As mentioned with Glassfish 3.1 it works perfect and there I see the Join Point advices of all 3 service classes. It looks like that Spring has a problem to recognize the `@Transactional` annotation in one of the service classes in the Glassfish 3.1.2 environment, but I couldn't drill it down why.  As work a round the transaction LTW works if I use the declarative AOP approach for the service class that won't work properly with `@Transactional`.  I double checked all config files and reread the Spring documentation about AOP and Transactions, but I couldn't find any misconfiguration in my setup. So for me it looks like a bug.   ---  **Affects:** 3.0.6, 3.1.1","closed","in: core,","spring-projects-issues","2012-06-02T01:10:18Z","2019-01-11T13:02:20Z"
"","14123","Add Gson HttpMessageConverter [SPR-9488]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-9488](https://jira.spring.io/browse/SPR-9488?redirect=false)** and commented  Gson is very useful also out of Android environment. We have Jackson by default in full Spring web, but it would be useful to be able to use the GsonHttpMessageConverter instead in Spring Web.  ---  **Affects:** 3.1.1, 3.2 M1  **Issue Links:** - #16086 Include GsonHttpMessageConverter in Spring MVC - #17831 AllEncompassingFormHttpMessageConverter does not prefer Jackson2 over JAXB for XML marshalling  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/22a38d4547aa8b227b768ee4d8bb489ae1b1d9d6, https://github.com/spring-projects/spring-framework/commit/64bb3087635227239f2be535b1892f09d5b2e3e0, https://github.com/spring-projects/spring-framework/commit/e3a6fce403901499c18b8a794be02e7b46af268b, https://github.com/spring-projects/spring-framework/commit/811330f5c86d45c9bae2834045f25963b986fe47  3 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2012-06-10T02:34:38Z","2019-01-11T13:05:03Z"
"","14122","Backport constructor accepting Charset in StringHttpMessageConverter, from Spring for Android to Spring Web. [SPR-9487]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-9487](https://jira.spring.io/browse/SPR-9487?redirect=false)** and commented  Spring for Android 's StringHttpMessageConverter has a very useful constructor which allows to specify a default charset different from ISO-8859-1:  ```java /**  * Create a new StringHttpMessageConverter instance with a default {@link Charset},  * and default list of available {@link Charset}'s from {@link Charset#availableCharsets()}.  * @param defaultCharset the Charset to use   */ public StringHttpMessageConverter(Charset defaultCharset) { 	this(defaultCharset, new ArrayList(Charset.availableCharsets().values())); } ```  Could this be backported to full Spring's StringHttpMessageConverter  ---  **Affects:** 3.1.1, 3.2 M1  **Issue Links:** - #13132 StringHttpMessageConverter doesn't work under UTF-8 (_**""is duplicated by""**_) - #12559 Setting default charset in StringHttpMessageConverter (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9aa43fcef6e4cc20104b89cc974f553bb6d77b67, https://github.com/spring-projects/spring-framework/commit/98b281ea45aeee2f7ea8fcf941d7cac1f671c419, https://github.com/spring-projects/spring-framework/commit/a4240d28643f5d6f7b435ce4512d240efc6db7b9","closed","type: enhancement,","spring-projects-issues","2012-06-10T02:31:43Z","2019-01-11T13:04:58Z"
"","14207","Dependency mismatch with scheduling task and context with 3.1.2.RELEASE  [SPR-9573]","**[Francisco Collao](https://jira.spring.io/secure/ViewProfile.jspa?name=pcollaog)** opened **[SPR-9573](https://jira.spring.io/browse/SPR-9573?redirect=false)** and commented  I have this exception in my app: with spring version 3.1.1.RELEASE works I just change version to new one (3.1.2.RELEASE).  Any ideas?  I'm using quartz 2.1.5  2012-07-07 19:42:58.606:WARN::Nested in org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.annotation.internalAsyncAnnotationProcessor': Invocation of init method failed; nested exception is java.lang.NoSuchMethodError: org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor.setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V: java.lang.NoSuchMethodError: org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor.setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V at org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.delegateBeanFactory(AsyncAnnotationAdvisor.java:101) at org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setTaskExecutor(AsyncAnnotationAdvisor.java:110) at org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.\(AsyncAnnotationAdvisor.java:87) at org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.\(AsyncAnnotationAdvisor.java:68) at org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor.afterPropertiesSet(AsyncAnnotationBeanPostProcessor.java:110) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:733) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:454) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:383) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:549) at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1282) at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:518) at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:499) at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:115) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at org.mortbay.jetty.plugin.AbstractJettyRunMojo.restartWebApp(AbstractJettyRunMojo.java:458) at org.mortbay.jetty.plugin.AbstractJettyRunMojo$1.filesChanged(AbstractJettyRunMojo.java:419) at org.mortbay.util.Scanner.reportBulkChanges(Scanner.java:486) at org.mortbay.util.Scanner.reportDifferences(Scanner.java:352) at org.mortbay.util.Scanner.scan(Scanner.java:280) at org.mortbay.util.Scanner$1.run(Scanner.java:232) at java.util.TimerThread.mainLoop(Timer.java:512) at java.util.TimerThread.run(Timer.java:462)   ---  **Affects:** 3.1.2  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2012-07-07T16:58:17Z","2012-10-31T11:33:58Z"
"","13904","Spring DelegatingFilterProxy synchronization in multi-threading [SPR-9266]","**[Floyd](https://jira.spring.io/secure/ViewProfile.jspa?name=gdfloyd)** opened **[SPR-9266](https://jira.spring.io/browse/SPR-9266?redirect=false)** and commented  I am not sure if any one has raised this concern before.  I saw this in StackOverflow : http://stackoverflow.com/questions/8417232/spring-delegatingfilterproxy-multi-threading-concerns  Running in high load, the ""synchronized (this.delegateMonitor)"" in the ""doFilter"" method may be a bottleneck. it could be better synchronization is placed in the double null check.  ---  **Affects:** 3.1.1  **Issue Links:** - #15046 Unnecessary blocking in DelegatingFilterProxy (_**""duplicates""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-25T06:22:45Z","2019-01-11T12:45:29Z"
"","14436","Update JavaDoc of WebApplicationInitializer [SPR-9803]","**[Fernando Ribeiro](https://jira.spring.io/secure/ViewProfile.jspa?name=fribeiro)** opened **[SPR-9803](https://jira.spring.io/browse/SPR-9803?redirect=false)** and commented  The Javadoc of the WebApplicationInitializer interface should mention that mapping to ""/"" in embedded mode only works in Tomcat 7.0.31 when it is released at Apache.   ---  **Affects:** 3.1.2","closed","status: declined,","spring-projects-issues","2012-09-16T18:40:56Z","2018-12-28T09:34:08Z"
"","14569","all documentation pages are lost [SPR-9936]","**[Fernandez Ludovic](https://jira.spring.io/secure/ViewProfile.jspa?name=dez)** opened **[SPR-9936](https://jira.spring.io/browse/SPR-9936?redirect=false)** and commented  all documentation pages are lost.  Generate 404 error: Not Found The requested URL /spring/docs/ was not found on this server.   ---  **Affects:** 2.0 final, 2.5 final, 3.0.7, 3.1.2, 3.2 M2  **Reference URL:** http://static.springsource.org/spring/docs/","closed","","spring-projects-issues","2012-10-31T06:11:47Z","2019-01-11T14:18:39Z"
"","14440","ContentNegotiatingViewResolver does not support wildcards in contentType [SPR-9807]","**[Felix Barnsteiner](https://jira.spring.io/secure/ViewProfile.jspa?name=axe-felix)** opened **[SPR-9807](https://jira.spring.io/browse/SPR-9807?redirect=false)** and commented  The following configuration won't work for accept headers containing e.g. application/vnd.foo.user+json (see also http://stackoverflow.com/questions/11880359/spring-mvc-3-1-1-contentnegotiatingviewresolver-how-to-use-wildcard-characters):  ```                                                                                                                  ```  The reason is a wrong comparison in ContentNegotiatingViewResolver#getBestView:  Current:  ``` for (MediaType mediaType : requestedMediaTypes) {     for (View candidateView : candidateViews) {         if (StringUtils.hasText(candidateView.getContentType())) {             MediaType candidateContentType = MediaType.parseMediaType(candidateView.getContentType());             if (mediaType.includes(candidateContentType)) {                 if (logger.isDebugEnabled()) {                     logger.debug(""Returning ["" + candidateView + ""] based on requested media type '""                             + mediaType + ""'"");                 }                 return candidateView;             }         }     } } ```  The problem is application/vnd.foo.user+json does not include application/*+json, the opposite is true.  Expected:  ``` if (candidateContentType.includes(mediaType)) { ```  ---  **Affects:** 3.1.2  **Reference URL:** http://stackoverflow.com/questions/11880359/spring-mvc-3-1-1-contentnegotiatingviewresolver-how-to-use-wildcard-characters  **Issue Links:** - #12560 MappingJacksonHttpMessageConverter default media type should include *+json  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7e7e80a3ae9f6b4ed7f2d99fe321c2e12550d7b","closed","type: enhancement,","spring-projects-issues","2012-09-19T02:47:44Z","2019-01-11T13:17:46Z"
"","14420","ServiceLoaderFactoryBean.beanClassLoader being incorrectly overwritten [SPR-9787]","**[Farrukh Najmi](https://jira.spring.io/secure/ViewProfile.jspa?name=farrukh_najmi)** opened **[SPR-9787](https://jira.spring.io/browse/SPR-9787?redirect=false)** and commented  Details are described in the forum. See reference url.   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?129669-ServiceLoaderFactoryBean-beanClassLoader-being-incorrectly-overwritten  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2012-09-11T08:39:54Z","2019-01-12T16:25:14Z"
"","13909","Prevent NPE on AnnotationUtils#getValue(Annotation,String) [SPR-9271]","**[Fabrice Daugan](https://jira.spring.io/secure/ViewProfile.jspa?name=fabdouglas)** opened **[SPR-9271](https://jira.spring.io/browse/SPR-9271?redirect=false)** and commented  JpaQueryMethod#getAnnotatedQuery() (of spring data) call AnnotationUtils#getValue(Annotation,String) for all method. However, some of thme does not contains the possible ""org.springframework.data.jpa.repository.Query"" annotation.  This way, a null value parameter is given to AnnotationUtils#getValue(Annotation,String) causing the NPE. Indeed the SpringJPA ""could"" check the annotation instance before calling the AnnotationUtils#getValue(Annotation,String) but AnnotationUtils's method contains some ugly ""catch (Exception ex)"". Even if this catch stay there, the NPEs should be prevented.   ---  **Affects:** 3.1.1","closed","in: core,","spring-projects-issues","2012-03-28T00:27:48Z","2019-01-12T16:36:34Z"
"","13999","Memory leak SimpleHttpInvokerServiceExporter [SPR-9362]","**[Evgeny Terentev ](https://jira.spring.io/secure/ViewProfile.jspa?name=terentev)** opened **[SPR-9362](https://jira.spring.io/browse/SPR-9362?redirect=false)** and commented  this code - memory leak on sun.net.httpserver.ServerImpl - allConnections and for test run with -Xmx32m while [ 1 -gt 0 ]; do  curl  http://localhost:8080/remoting/AccountService ; done          Closeable b = new Closeable() {             @Override             public void close() throws IOException {                 p(""s"");             }         };              SimpleHttpInvokerServiceExporter a = new SimpleHttpInvokerServiceExporter();         a.setService(b);         a.setServiceInterface(Closeable.class);              SimpleHttpServerFactoryBean x = new SimpleHttpServerFactoryBean();         x.setContexts((Map) (Map) Collections.singletonMap(""/remoting/AccountService"", a));         x.setPort(8080);         x.afterPropertiesSet();  some hack i found if modify      public void handle(HttpExchange exchange) throws IOException {     	try {     		RemoteInvocation invocation = readRemoteInvocation(exchange);     		RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy());     		writeRemoteInvocationResult(exchange, result);     		exchange.close();     	}     	catch (ClassNotFoundException ex) {     		exchange.sendResponseHeaders(500, -1);     		logger.error(""Class not found during deserialization"", ex);     	}     }  to      try {         RemoteInvocation invocation = readRemoteInvocation(exchange);         RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy());         writeRemoteInvocationResult(exchange, result);     } catch (ClassNotFoundException ex) {         exchange.sendResponseHeaders(500, -1);         logger.error(""Class not found during deserialization"", ex);     } catch (Throwable e) {         exchange.sendResponseHeaders(500, -1); //without it memory leak     } finally {         exchange.close();     }  memory leak disappear   ---  **Affects:** 3.1.1","closed","status: invalid,","spring-projects-issues","2012-05-01T21:20:06Z","2019-01-12T05:28:42Z"
"","13957","Not synchronized access FreeMarkerView  [SPR-9319]","**[Evgeny Terentev ](https://jira.spring.io/secure/ViewProfile.jspa?name=terentev)** opened **[SPR-9319](https://jira.spring.io/browse/SPR-9319?redirect=false)** and commented  freemarker configuration class NOT synchronized  ```java FreeMarkerView   	protected Template getTemplate(String name, Locale locale) throws IOException { 		return (getEncoding() != null ? 				getConfiguration().getTemplate(name, locale, getEncoding()) : 				getConfiguration().getTemplate(name, locale)); 	} ```  in method getTemplate(name, locale)  --> getEncoding(locale) --> encodingMap  encodingMap - may be accessed multiple threads  temp solution is set encoding (getEncoding() != null)    ---  **Affects:** 3.1.1","closed","in: web,","spring-projects-issues","2012-04-10T15:38:00Z","2019-01-11T12:52:02Z"
"","14482","Incorrect resolution of handler mappings - the Allow header has wrong values [SPR-9849]","**[Eugen Paraschiv](https://jira.spring.io/secure/ViewProfile.jspa?name=eugenparaschiv)** opened **[SPR-9849](https://jira.spring.io/browse/SPR-9849?redirect=false)** and commented  Sending an OPTIONS request to:  ``` /api/myobject/count ```  The controller defines the following methods:  ``` @RequestMapping(value = ""/{id}"", method = RequestMethod.DELETE) @ResponseStatus(HttpStatus.NO_CONTENT) public Privilege deleteOneById{...}  @RequestMapping(method = RequestMethod.GET, value = ""/count"") @ResponseBody @ResponseStatus(value = HttpStatus.OK) public long count() {...} ```  The DispatcherServlet - getHandler logic will fail to find a match (since OPTIONS is not mapped) but when calculating the Allow header - both of these 2 methods will be considered a match, and the value of that header will be:  ``` Allow: GET, DELETE ```  When it should just be:  ``` Allow: GET ```  This leads to additional and incorrect values for the Allow header.   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/b721141745632eb2506decb03e26cb3d1407ea87  2 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-10-03T04:58:23Z","2019-01-13T21:05:34Z"
"","14424","RestTemplate fails to correctly parse some HTTP URI parameters [SPR-9791]","**[Eugen Paraschiv](https://jira.spring.io/secure/ViewProfile.jspa?name=eugenparaschiv)** opened **[SPR-9791](https://jira.spring.io/browse/SPR-9791?redirect=false)** and commented  For the following (non-standard but not prohibited) usage of parameters in an URI: `http://localhost:8080/rest-sec/api/privilege?q=name=value` Where the parameter should be (and indeed, both the browser as well as other libraries to parse it correctly like this): name = `q` value = `name=jDiedXRD`  Instead of identifying the one parameter, `RestTemplate` incorrectly identifies two: `q=name` `value=null` This happens regardless of the fact that there isn't even a `&` delimiter in the entire URI.  This is because HttpUrlTemplate is used to parse the URI into `UriComponents`: `UriComponentsBuilder.fromUriString(uriTemplate).build();` This essentially fails to properly break out the parameter the regex.  Note: escaping the `=` character before using the template doesn't work either - the template escapes the entire URI again - which results in an invalid URI)  ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?129138-Possible-bug-in-RestTemplate-double-checking-before-opening-a-JIRA&p=421494  **Issue Links:** - #14465 Erroneous ""0"" returned where empty string expected in call through the RestTemplate (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2012-09-12T15:13:35Z","2019-01-11T13:35:27Z"
"","13977","Support @ActiveProfiles at method level [SPR-9338]","**[Eugen Paraschiv](https://jira.spring.io/secure/ViewProfile.jspa?name=eugenparaschiv)** opened **[SPR-9338](https://jira.spring.io/browse/SPR-9338?redirect=false)** and commented  It would be extremely useful if `@ActiveProfiles` were supported for both methods as well as entire classes; this would enable much more granular support for switching between profiles (without needing to create an new test class) which is useful for some specific use cases of profiles (where this kind of granularity makes perfect sense).  ---  **Affects:** 3.1 GA  **Issue Links:** - #16647 Support `@ContextConfiguration` at method level - #18951 Support `@TestPropertySource` at method level","open","type: enhancement,","spring-projects-issues","2012-04-23T13:54:23Z","2020-08-24T17:39:26Z"
"","14322","Provide access to method/parameter annotations in HttpMessageConverter [SPR-9688]","**[Eugen Cepoi](https://jira.spring.io/secure/ViewProfile.jspa?name=eugen.cepoi)** opened **[SPR-9688](https://jira.spring.io/browse/SPR-9688?redirect=false)** and commented  Problem: When you write a custom HttpMessageConverter there is no way to get method and parameter annotations. This prevents from being able to use runtime configuration via annotations. The only solution would be to extend AbstractMessageConverterMethodProcessor but we would loose all the benefits that come with the standard mechanism. For example we can not handle this case: public `@Exclude`({""adress""}) `@ResponseBody` Person getPerson() {...}  Improvement: Add an additional argument Annotation[] annotations to HttpMessageConverter write and read methods.  Thanks Eugen   --- No further details from [SPR-9688](https://jira.spring.io/browse/SPR-9688?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-08-14T16:07:01Z","2012-08-15T04:09:00Z"
"","14600","@Cacheable should participate in transactions [SPR-9966]","**[Etienne Studer](https://jira.spring.io/secure/ViewProfile.jspa?name=etiennestuder)** opened **[SPR-9966](https://jira.spring.io/browse/SPR-9966?redirect=false)** and commented  As discussed with Jürgen this morning at W-JAX, if a `@Cacheable` method is called from within a `@Transactional` method and the transaction fails, the item is not removed from the cache for non-XA cache managers.  Basically, the item should not be added to the cache until the transaction has succeeded.  Alternatively, the item could be added immediately but removed if the transaction fails -> this would allow to get the cached item during the transaction, which helps if the item needs is accessed multiple times.   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2f418ab4c31f02ec4fac7ca7b60aac0efc4c55c","closed","type: enhancement,","spring-projects-issues","2012-11-07T01:27:09Z","2012-11-25T12:53:49Z"
"","14283","Allow @Scheduled to externalize all annotation values [SPR-9649]","**[Erik Kis](https://jira.spring.io/secure/ViewProfile.jspa?name=erik.kis)** opened **[SPR-9649](https://jira.spring.io/browse/SPR-9649?redirect=false)** and commented  We should really allow all `@Scheduled` annotation values to be easily externalizable - at the moment, they are not, since fixedDelay and fixedRate properties are of type long, what prevents the using of Spring's StringValueResolver in ScheduledAnnotationBeanPostProcessor.  In the attached URL there is a small user story and related discussion with proposed solution.  Full code is attached for review and possible inclusion/adaptation.  Is there any profound reason why this externalization isn't/can't be supported out of the box?   ---  **Affects:** 3.1.1  **Reference URL:** http://stackoverflow.com/questions/11608531/injecting-externalized-value-into-spring-annotation  **Attachments:** - [CustomScheduled.java](https://jira.spring.io/secure/attachment/20131/CustomScheduled.java) (_1.41 kB_) - [CustomScheduledAnnotationBeanPostProcessor.java](https://jira.spring.io/secure/attachment/20132/CustomScheduledAnnotationBeanPostProcessor.java) (_12.80 kB_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-07-27T05:58:33Z","2018-12-27T12:31:40Z"
"","14474","Upgrade spring mvc app to 3.1.2 causes content-type to be returned as 'application/*+xml' [SPR-9841]","**[Eric Vuillermet](https://jira.spring.io/secure/ViewProfile.jspa?name=vuillee)** opened **[SPR-9841](https://jira.spring.io/browse/SPR-9841?redirect=false)** and commented  I have a Spring mvc app that uses Spring 3.1.1. After upgrading to 3.1.2, this app now returns responses with content-type of 'application/*+xml', whereas previously it would return a content-type of 'application/xml' (nothing else changed).  In both cases, the request contains the same Accept header of 'application/xhtml+xml'.  Here is an example below: $ curl -H 'Accept: application/xhtml+xml' -v http://localhost:9000/hello/world * About to connect() to localhost port 9000 * Trying 127.0.0.1... connected * Connected to localhost (127.0.0.1) port 9000  > GET /hello/world HTTP/1.1 > User-Agent: curl/7.15.5 (x86_64-redhat-linux-gnu) libcurl/7.15.5 OpenSSL/0.9.8b zlib/1.2.3 libidn/0.6.5 > Host: localhost:9000 > Accept: application/xhtml+xml  < HTTP/1.1 200 OK < Date: Fri, 28 Sep 2012 22:50:16 GMT < Content-Type: application/*+xml < Transfer-Encoding: chunked < Server: Jetty(7.6.3.v20120416) * Connection #0 to host localhost left intact * Closing connection #0  \\ Attached is a zip file containing a sample app exposing this problem.   ---  **Affects:** 3.1.2  **Attachments:** - [content-type.zip](https://jira.spring.io/secure/attachment/20530/content-type.zip) (_5.79 kB_)","closed","type: bug,","spring-projects-issues","2012-09-28T15:57:51Z","2012-11-04T06:54:01Z"
"","14509","DispatcherPortlet should forward to view for ResourceRequest [SPR-9876]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-9876](https://jira.spring.io/browse/SPR-9876?redirect=false)** and commented  The portlet specification allows for most of the interesting HttpServletResponse.set* methods to be mapped back to the corresponding ResourceResponse methods but ONLY if the portlet uses PortletRequestDisptacher.forward. If include is used the HttpServletResponse.set* methods are ignored.  This is especially important when using special views such as Jackson or CSV where a specific content-type or other headers need to be set.  ---  **Affects:** 3.1.2  **Issue Links:** - #15417 In spring MVC portlet, `@resourceMapping` doesn't work.","closed","type: bug,","spring-projects-issues","2012-10-11T13:33:56Z","2019-01-13T07:02:43Z"
"","14507","Portlet mapping predicate compareTo is not transitive [SPR-9874]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-9874](https://jira.spring.io/browse/SPR-9874?redirect=false)** and commented  While the obvious part of the problem where the wrong handler is found has been fixed by #13941 and #14239 the compareTo implementation of the ActionMappingPredicate, EventMappingPredicate, RenderMappingPredicate, and ResourceMappingPredicate is still incorrect.  The compareTo javadoc states The implementor must also ensure that the relation is transitive: (x.compareTo(y)>0 && y.compareTo(z)>0) implies x.compareTo(z)>0  The problem here is any two predicates of different types that both implement SpecialRequestTypePredicate are treated as equal.  For example with three predicates defined as: A = RenderMappingPredicate(windowState=null, params=[]) B = ResourceMappingPredicate(resourceId=""b""); C = RenderMappingPredicate(windowState=null, params=[""c=c""])  If they are placed in an array as [A, B, C] then comparing them A.compareTo(B) == 0 and B.compareTo(C) == 0 happens when sorting and the list is ""sorted"" and implies that A.compareTo(C) == 0 even though A.compareTo(C) == -1  I believe the solution is that when comparing SpecialRequestTypePredicates that are different concrete classes the returned value should be the result of ""this.getClass().getName().compareTo(other.getClass().getName())"". This will result in predicates of the same types being grouped together and then being sorted by the type specific comparison logic. It should also completely fulfill the compareTo contract.  While there isn't currently a demonstrable bug with the code due to the change in the mapping resolution logic made for #13941 fixing compareTo will result help protect against potential future bugs where someone assumes a correctly implemented compareTo method.  ---  **Affects:** 3.1.3, 3.2 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8f8e517c0d81dfdfdc53aa053353ce5b4a9cee7e, https://github.com/spring-projects/spring-framework/commit/a6bcda25c25b284845e014dfe58ecd3008fed8f2","closed","type: bug,","spring-projects-issues","2012-10-11T12:52:11Z","2019-01-11T13:18:19Z"
"","13943","StaxEventContentHandler.setDocumentLocator leaks references [SPR-9305]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-9305](https://jira.spring.io/browse/SPR-9305?redirect=false)** and commented  When StaxEventContentHandler.setDocumentLocator is called an anonymous inner class implementation of javax.xml.stream.Location is used to wrap the org.xml.sax.Locator. This causes a problem if any of the STaX events generated by the handler are cached. The events generally retain a reference to the javax.xml.stream.Location and in this implementation the Location has a this$0 reference to the StaxEventContentHandler.  StaxEventContentHandler has references to XMLEventFactory, XMLEventConsumer, and SimpleNamespaceContext objects and so is a fairly heavy-weight object to retain a reference to.  The fix is to change the following method:  ```java 	public void setDocumentLocator(final Locator locator) { 		if (locator != null) { 			eventFactory.setLocation(new Location() {  				public int getLineNumber() { 					return locator.getLineNumber(); 				}  				public int getColumnNumber() { 					return locator.getColumnNumber(); 				}  				public int getCharacterOffset() { 					return -1; 				}  				public String getPublicId() { 					return locator.getPublicId(); 				}  				public String getSystemId() { 					return locator.getSystemId(); 				} 			}); 		} 	} ```  To:  ```java     public void setDocumentLocator(final Locator locator) {         if (locator != null) {             eventFactory.setLocation(new LocatorLocation(locator));         }     }          private static final class LocatorLocation implements Location {         private final Locator locator;          private LocatorLocation(Locator locator) {             this.locator = locator;         }          public int getLineNumber() {             return locator.getLineNumber();         }          public int getColumnNumber() {             return locator.getColumnNumber();         }          public int getCharacterOffset() {             return -1;         }          public String getPublicId() {             return locator.getPublicId();         }          public String getSystemId() {             return locator.getSystemId();         }     } ```  The use of a static inner class prevents the this$0 reference leak.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30de87a51e5977545846225b9c64072f50103477, https://github.com/spring-projects/spring-framework/commit/576f6fd25c7bfee703b582b16972773fd96e2215  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2012-04-05T08:17:41Z","2012-10-31T11:33:58Z"
"","13925","DispatcherPortlet shouldn't call exposeActionException during event processing [SPR-9287]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-9287](https://jira.spring.io/browse/SPR-9287?redirect=false)** and commented  DispatcherPortlet.doEventService calls exposeActionException if an exception is thrown during event processing. The intent is to show the exception the next time the portlet renders.  The problem is a portlet that is handling an event may never render again. This approach of swallowing the exception results in the exception being hidden from the portlet container and no mention of the exception appearing anywhere unless DEBUG logging is enabled in the afflicted portlet.  I believe that exposeActionException should be removed for event requests and made optional for action requests to allow portlets to rely on the container provided exception handling.  ---  **Affects:** 3.0.7, 3.1.1  **Sub-tasks:** - #14189 Backport ""DispatcherPortlet shouldn't call exposeActionException during event processing""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/596571059e389b0e7728e0c4a3b9aae2d727a57b, https://github.com/spring-projects/spring-framework/commit/79b86a7e3ad31143b16a3e2ed3ec1bc5568b4df6  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2012-03-29T21:48:13Z","2019-01-11T12:48:13Z"
"","14103","Reference Documentation needs a chapter on using Gemfire as a CacheManager [SPR-9468]","**[Emil A. Siemes](https://jira.spring.io/secure/ViewProfile.jspa?name=digitalemil)** opened **[SPR-9468](https://jira.spring.io/browse/SPR-9468?redirect=false)** and commented  The current framework documentation only shows how to setup JDK and EHcache based caches (chapter 28.5.1 and 28.5.2) but we need a chapter on setting up GemfireCacheManager as well.  This is already done in the Spring Gemfire reference documentation therefore I suggest a minor change in the Spring Reference Documentation: Move 28.5.3 to 28.5.4 Add 28.5.3: 28.5.3 GemFire based Cache GemFire is a memory-oriented/disk-backed, elastically scalable, continuously available, active (with built-in pattern-based subscription notifications), globally replicated database, and providing fully-featured edge-caching. For further information on how to use GemFire as CacheManager (and more) please refer to the Spring Gemfire reference documentation (Chapter 3.3) http://static.springsource.org/spring-gemfire/docs/1.1.x/reference/apis.html.    ---  **Affects:** 3.1.1, 3.2 M1","closed","type: enhancement,","spring-projects-issues","2012-06-05T05:34:27Z","2013-02-10T14:23:51Z"
"","14340","Theme does not work [SPR-9706]","**[Emerio Emertana](https://jira.spring.io/secure/ViewProfile.jspa?name=emertana)** opened **[SPR-9706](https://jira.spring.io/browse/SPR-9706?redirect=false)** and commented  Hi,  I have a home.jsp in project1/src/main/webapp/WEB-INF/views/home.jsp  \  and in servlet-context.xml I have     but it ran into this error >> WARN : org.springframework.context.support.ResourceBundleMessageSource - ResourceBundle [them-theme] not found for MessageSource: Can't find bundle for base name them-theme, locale en_US  please help me Thanks   --- No further details from [SPR-9706](https://jira.spring.io/browse/SPR-9706?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-08-18T21:51:36Z","2019-01-12T02:46:38Z"
"","14338","webservice client [SPR-9704]","**[Emerio Emertana](https://jira.spring.io/secure/ViewProfile.jspa?name=emertana)** opened **[SPR-9704](https://jira.spring.io/browse/SPR-9704?redirect=false)** and commented  Hi,  I am new to Spring web services. I am going to create an xml request, and send it as a SOAP request to a web service and receive the response.I read different documents but still confused as I could not find a working sample yet.  I know that I should use WebServiceTemplate and WebServiceMessageSender, SaajSoapmessageFactory (please let me know if I am wrong) but not sure how to use them.  Do I need WSDL? if yes why?  If you have any sample code please send me to get clear on it.  Thanks   --- No further details from [SPR-9704](https://jira.spring.io/browse/SPR-9704?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-08-18T01:18:34Z","2019-01-12T05:28:13Z"
"","14337","RequestMapping annotation does not work please help [SPR-9703]","**[Emerio Emertana](https://jira.spring.io/secure/ViewProfile.jspa?name=emertana)** opened **[SPR-9703](https://jira.spring.io/browse/SPR-9703?redirect=false)** and commented  Hi I am trying to use Requestmapping but it does not work,  **HelloController.java**      package com.project.springapp;          import org.springframework.stereotype.Controller;     import org.springframework.web.bind.annotation.RequestMapping;     import org.springframework.web.bind.annotation.RequestMethod;          @Controller     @RequestMapping(""/Springapp/hello"")     public class HelloController {          @RequestMapping(method = RequestMethod.GET)     public String Hello(){     	return ""hello"";     }          }  **servlet-context.xml**                                                                                          	     	                            **Web.xml**                               	contextConfigLocation     	/WEB-INF/spring/root-context.xml                         	org.springframework.web.context.ContextLoaderListener                         	appServlet     	org.springframework.web.servlet.DispatcherServlet     	     		contextConfigLocation     		/WEB-INF/spring/appServlet/servlet-context.xml     	     	1          	          	appServlet     	/                 After running the code it shows this warning in console ""WARNING: [SetContextPropertiesRule]{Context} Setting property 'source' to 'org.eclipse.jst.jee.server:Springapp' did not find a matching property.""  then goes to first page but when I enter this URl ""http://localhost:8080/Springapp/hello"" it shows this message in console, WARN : ""org.springframework.web.servlet.PageNotFound - No mapping found for HTTP request with URI [/Springapp/hello] in DispatcherServlet with name 'appServlet'""  Thanks.   ---  **Affects:** 3.1.2","closed","status: invalid,","spring-projects-issues","2012-08-18T01:13:51Z","2019-01-12T05:28:14Z"
"","14237","RequestMappingInfoHandlerMapping.handleNoMatch throws HttpRequestMethodNotSupportedException incorrectly [SPR-9603]","**[elliot barlas](https://jira.spring.io/secure/ViewProfile.jspa?name=ebarlas)** opened **[SPR-9603](https://jira.spring.io/browse/SPR-9603?redirect=false)** and commented  The handleNoMatch method of the RequestMappingInfoHandlerMapping class incorrectly throws HttpRequestMethodNotSupportedException if:  * A request handler method exists that matches the path and methods but not produce/consume expression * Another request handler method exists that matches the path but not the method  In this case, the handleNoMatch method finds the request handler method that matches the path but not the method, resulting in a HttpRequestMethodNotSupportedException (line 135).  Example:  Request sent for ""/users"" with ""Accept: application/xml""  ```java @RequestMapping(value = ""/users"", method = GET, produces = ""application/json"") public void foo() {...}  @RequestMapping(value = ""/users"", method = PUT) public void bar() {...} ```  Expected exception HttpMediaTypeNotAcceptableException, observed exception HttpRequestMethodNotSupportedException.  ---  **Affects:** 3.1 GA  **Issue Links:** - #18969 RequestMappingInfoHandlerMapping.handleNoMatch throws 415 when it should throw 406  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/473de081b8afe2caf8b0a6b533feebc97afa0667, https://github.com/spring-projects/spring-framework/commit/f78bef906d1f79a2949da11b2d170ee3a2551f88","closed","in: core,","spring-projects-issues","2012-07-18T13:15:08Z","2019-01-11T12:57:56Z"
"","14218","CachedIntrospectionResults Not Thread Safe [SPR-9584]","**[elliot barlas](https://jira.spring.io/secure/ViewProfile.jspa?name=ebarlas)** opened **[SPR-9584](https://jira.spring.io/browse/SPR-9584?redirect=false)** and commented  My Spring web application invokes org.springframework.beans.BeanUtils.getPropertyDescriptors in a multi-threaded context.  After recent code refactoring, I started noticing something strange: the call occasionally returns an incomplete set of property descriptors.  The code change must have produced paths that randomly execute getPropertyDescriptors at exactly the same time.  I have written a targeted Java app to demonstrate the problem.  Attached is Main.java, a simple Java app that lines up threads and then invokes getPropertyDescriptors in parallel.  The beans are modeled after my application beans.  When I run the app continuously, failures eventually occur: for i in {1..1000}; do java -cp \ test.Main 50; done Fail: 8 Fail: 3 Fail: 8 ...  I haven't yet taken the time to identify the thread-safety issue.  ---  **Affects:** 3.1 GA  **Attachments:** - [Main.java](https://jira.spring.io/secure/attachment/20092/Main.java) (_1005 bytes_) - [One.java](https://jira.spring.io/secure/attachment/20093/One.java) (_253 bytes_) - [Three.java](https://jira.spring.io/secure/attachment/20094/Three.java) (_440 bytes_) - [Two.java](https://jira.spring.io/secure/attachment/20095/Two.java) (_848 bytes_)  **Issue Links:** - #14663 Overhaul non-void JavaBean write method support  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/96899febdd9a26a311a68c686835de51ce05586d, https://github.com/spring-projects/spring-framework-issues/commit/16d97dcaffc0e2a8757da85998311e6e98f89a94  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2012-07-11T15:32:41Z","2019-01-12T16:36:17Z"
"","14217","context:component-scan does not heed annotation-config=""false"" [SPR-9583]","**[Eirik Larsen](https://jira.spring.io/secure/ViewProfile.jspa?name=eirirlar)** opened **[SPR-9583](https://jira.spring.io/browse/SPR-9583?redirect=false)** and commented  applicationContext.xml:     \ \ \  a bean in package xxx: `@Controller` `@Scope`(""session"") public class TheBean {  `@Autowired` private String setTheString(String theString) { System.out.println(""this one is NOT supposed to be called when annotation-config=""false""); } }  This is all wired together in a JSF app running on Jetty. Is this a bug or expected behaviour?   ---  **Affects:** 3.1.2","closed","in: core,","spring-projects-issues","2012-07-11T11:58:00Z","2019-01-12T05:28:22Z"
"","14250","Support for JSR-107 caching annotations [SPR-9616]","**[Edwin Stang](https://jira.spring.io/secure/ViewProfile.jspa?name=subes)** opened **[SPR-9616](https://jira.spring.io/browse/SPR-9616?redirect=false)** and commented  #### Background  Support for JCache (JSR-107) was added to Spring in conjunction with #13417.  #### Status Quo  Right now, I am successfully using JCache with the Spring cache annotations (`org.springframework.cache.annotation.*`) with AspectJ.  #### Goals  To be more specification conform, I would like to switch to the JCache annotations (`javax.cache.annotation.*`), but `AnnotationCacheAspect` in the `spring-aspects` module does not support this.  Would it be possible to have this included in Spring 3.2?  ---  **Affects:** 3.2 M2  **Issue Links:** - #13417 Support for JCache (JSR-107) - #16115 Apply CacheResolver to Spring's caching abstraction  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-07-22T11:04:11Z","2019-01-11T12:57:29Z"
"","14310","SimpleJdbcInsert batchInsert fails after delete [SPR-9676]","**[Eduardo Alberto Magdalena Aguin](https://jira.spring.io/secure/ViewProfile.jspa?name=gotilio)** opened **[SPR-9676](https://jira.spring.io/browse/SPR-9676?redirect=false)** and commented  I have a DAO class which have an ""update"" operation consisting on deleting current record and inserting it again as a part of a batchInsert which is done is later but fails. those are the symptoms:  1. I delete the record with    getJdbcTemplate().update(""DELETE "" + table + "" WHERE "" + pkName + ""="" + pkValue + getRelPKCriteria(table, params));  If debugging, I check in Oracle and the record is no longer there.  2. Afterwards, the insertion batch is excuted when is ready by SimpleJdbcInsert:  try{ getInsert(currentBatchTable).executeBatch(insertBatch.toArray(BATCH)); } catch(DuplicateKeyException e){ /* One by one we try to insert them and warn about the wrong ones */ log.warn(""Batch inserting failed, trying to do one by one insert...""); stepByStepInsert(); }  It fails without inserting anything, but just in case to know whose is the responsible We ""step by step"" insert every of them:  private void stepByStepInsert(){ SimpleJdbcInsert insert = new SimpleJdbcInsert(dataSource); insert.setTableName(currentBatchTable);  for(Map map : insertBatch){ try{ insert.execute(map); }catch(DuplicateKeyException e){ log.error(""Unexpected duplicated record: "" + map); } } }  But the result is even more strange, all the insert operations throw DuplicateKeyException and the one being originaly deleted also gets inserted with the new values (despite of throwing the claimed exception).  The database is Oracle 11g  The Driver is ojdbc6.jar  And this is how the driver is configured:  \ 		\ 		\ 		\ 		\ 		\ 		\ 		\ 		\ 		\ 		\ 		\ 		\ 	\ If the cause is ignorance on my part please excuse me any troubles caused.   ---  **Affects:** 3.1.2","closed","status: invalid,","spring-projects-issues","2012-08-08T11:06:38Z","2019-01-12T05:28:18Z"
"","13863","HTTP 404 in Jetty8 with Servlet 3.0 [SPR-9225]","**[Edgar Espina](https://jira.spring.io/secure/ViewProfile.jspa?name=edgarespina)** opened **[SPR-9225](https://jira.spring.io/browse/SPR-9225?redirect=false)** and commented  Hello,  I'm getting a HTTP 404 and the DispatchServlet seems to not be working in Jetty-8 using the Servlet-3.0 API with the WebApplicationInitializer class. I'm attaching a simple maven project that demonstrate the problem. For example, running: mvn jetty:run give me:  > 2012-03-11 22:16:39.150:INFO:oejs.Server:jetty-8.1.2.v20120308 > 2012-03-11 22:16:39.713:INFO:oejpw.PlusConfiguration:No Transaction manager found - if your webapp requires one, please configure one. > 2012-03-11 22:16:41.376:INFO:/jetty8:Spring WebApplicationInitializers detected on classpath: [org.knowhow.Main@ada795] > 2012-03-11 22:16:42.046:INFO:oejsh.ContextHandler:started o.m.j.p.JettyWebAppContext{/jetty8,file:/home/edgar/workspaces/jwt/jetty8/src/main/webapp/},file:/home/edgar/workspaces/jwt/jetty8/src/main/webapp/ > 2012-03-11 22:16:42.047:INFO:oejsh.ContextHandler:started o.m.j.p.JettyWebAppContext{/jetty8,file:/home/edgar/workspaces/jwt/jetty8/src/main/webapp/},file:/home/edgar/workspaces/jwt/jetty8/src/main/webapp/ > 2012-03-11 22:16:42.047:INFO:oejsh.ContextHandler:started o.m.j.p.JettyWebAppContext{/jetty8,file:/home/edgar/workspaces/jwt/jetty8/src/main/webapp/},file:/home/edgar/workspaces/jwt/jetty8/src/main/webapp/ > 2012-03-11 22:16:42.047:INFO:/jetty8:Initializing Spring root WebApplicationContext > 22:16:42.050 [main] INFO org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization started > 22:16:42.066 [main] INFO org.springframework.web.context.support.AnnotationConfigWebApplicationContext - Refreshing Root WebApplicationContext: startup date [Sun Mar 11 22:16:42 ART 2012]; root of context hierarchy > 22:16:42.132 [main] INFO org.springframework.context.annotation.ClassPathBeanDefinitionScanner - JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning > 22:16:42.134 [main] INFO org.springframework.context.annotation.ClassPathBeanDefinitionScanner - JSR-330 'javax.inject.Named' annotation found and supported for component scanning > 22:16:42.182 [main] INFO org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring > 22:16:42.190 [main] INFO org.springframework.beans.factory.support.DefaultListableBeanFactory - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@a06d25: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0]; root of factory hierarchy > 22:16:42.193 [main] INFO org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 131 ms > 2012-03-11 22:16:42.193:INFO:oejsh.ContextHandler:started o.m.j.p.JettyWebAppContext{/jetty8,file:/home/edgar/workspaces/jwt/jetty8/src/main/webapp/},file:/home/edgar/workspaces/jwt/jetty8/src/main/webapp/ > 2012-03-11 22:16:42.223:INFO:/jetty8:Initializing Spring FrameworkServlet 'dispatcher' > 22:16:42.223 [main] INFO org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcher': initialization started > 22:16:42.224 [main] INFO org.springframework.web.context.support.AnnotationConfigWebApplicationContext - Refreshing WebApplicationContext for namespace 'dispatcher-servlet': startup date [Sun Mar 11 22:16:42 ART 2012]; parent: Root WebApplicationContext > 22:16:42.226 [main] INFO org.springframework.context.annotation.ClassPathBeanDefinitionScanner - JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning > 22:16:42.226 [main] INFO org.springframework.context.annotation.ClassPathBeanDefinitionScanner - JSR-330 'javax.inject.Named' annotation found and supported for component scanning > 22:16:42.226 [main] INFO org.springframework.web.context.support.AnnotationConfigWebApplicationContext - Registering annotated classes: [class org.knowhow.app.AppModule] > 22:16:42.497 [main] INFO org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor - JSR-330 'javax.inject.Inject' annotation found and supported for autowiring > 22:16:42.505 [main] INFO org.springframework.beans.factory.support.DefaultListableBeanFactory - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@feb215: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,appModule,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0,delegatingWebMvcConfiguration,requestMappingHandlerMapping,viewControllerHandlerMapping,beanNameHandlerMapping,resourceHandlerMapping,defaultServletHandlerMapping,requestMappingHandlerAdapter,mvcConversionService,mvcValidator,httpRequestHandlerAdapter,simpleControllerHandlerAdapter,handlerExceptionResolver,events]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@a06d25 > 22:16:42.634 [main] INFO org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping - Mapped ""{[/events],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.util.List org.knowhow.app.Events.list() > 22:16:43.130 [main] INFO org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcher': initialization completed in 907 ms > 2012-03-11 22:16:43.151:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080[INFO] Started Jetty Server  As you can see the application start-up normally without any obvious error. But if I try to call: http://localhost:8080/jetty8/events I get a HTTP-404. Finally, the same project works perfectly in Tomcat 7.0.26.  Thanks.   ---  **Affects:** 3.1.1  **Attachments:** - [jetty8.zip](https://jira.spring.io/secure/attachment/19494/jetty8.zip) (_9.60 kB_)","closed","in: web,","spring-projects-issues","2012-03-11T18:22:47Z","2019-01-11T12:44:16Z"
"","14251","Transparent authentication fails when POSTing to Kerberos web service using the Simple HTTP Client [SPR-9617]","**[Ed Sherington](https://jira.spring.io/secure/ViewProfile.jspa?name=sherington)** opened **[SPR-9617](https://jira.spring.io/browse/SPR-9617?redirect=false)** and commented  We have a suite of Kerberos-authenticated web services running with Spring 3.0.x without any problems.  We upgraded those web services to run with Spring 3.1.1 and encountered one change in Spring's HTTP client behavior that causes us a failure.  The one change is related only to POST requests and their interaction with our Kerberos implementation.  Ordinarily when we invoke a web service we expect this behavior:  1. We send the initial request to the server; 2. The server responds with a standard 401 Not Authorized response; 3. The server sets an ""authenticate"" header on the response; 4. The client receives the 401 and the authenticate header response, and transparently retries the request but this time it also sends the required Kerberos ticket; 5. The server now authenticates the ticket and the web service call succeeds.  These steps all worked just fine for us with Spring 3.0.x, and these steps **mostly** work for us with Spring 3.1.x.  What we see with Spring 3.1.x is that a POST request will never get authenticated and will consequently always fail. Tracing the HTTP requests and responses shows that the transparent retry and authentication never occurs -- we only see the first 401 response.  I believe the problem is related to the implementation of this class, which is a refactoring of a class from 3.0.x:  ``` final class SimpleBufferingClientHttpRequest extends AbstractBufferingClientHttpRequest {  	@Override 	protected ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput) throws IOException { 		for (Map.Entry entry : headers.entrySet()) { 			String headerName = entry.getKey(); 			for (String headerValue : entry.getValue()) { 				this.connection.addRequestProperty(headerName, headerValue); 			} 		}  		if (this.connection.getDoOutput()) { 			this.connection.setFixedLengthStreamingMode(bufferedOutput.length); 		} 		this.connection.connect(); 		if (this.connection.getDoOutput()) { 			FileCopyUtils.copy(bufferedOutput, this.connection.getOutputStream()); 		}  		return new SimpleClientHttpResponse(this.connection); 	}  } ```  In particular this part:  ``` if (this.connection.getDoOutput()) { 	this.connection.setFixedLengthStreamingMode(bufferedOutput.length); } ```  In our case of POST, `getDoOutput()` is `true`, and then I think setting the connection into fixed length streaming mode is preventing the transparent authentication that we need.  Our solution is to provide our own implementation of `ClientHttpRequestFactory` and associated request/response implementations that restores the old behavior in Spring 3.0.x.  So we do have a workaround, but we'd rather use unchanged core classes of course.   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92ad66bf10b570dde25af44d8ff3f958dfec2a9d  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2012-07-22T23:28:10Z","2013-03-06T11:29:53Z"
"","14510","DMLC throw exception ""Could not establish shared JMS Connection - leaving it up to   asynchronous invokers to establish a Connection as soon as possible javax.jms.JMSException: MQJCA1026:Invalid operation for a domain specific object."" [SPR-9877]","**[dzmonkey](https://jira.spring.io/secure/ViewProfile.jspa?name=dzmonkey)** opened **[SPR-9877](https://jira.spring.io/browse/SPR-9877?redirect=false)** and commented  We will retrive/send jms message via spring jms support, the jms provider is jboss middleware, the destination MQ is IBM WebSphereMQ.  env:  Spring 3.0.5 + JBoss eap 5.0 + WebSphere MQ v6.0  1. Firstly, copy the resource adapter ""wmq.jmsra.rar""(retrived from wmq6.0 client) to jboss's ""deploy"" directory, and write *-ds.xml to register the connectioFactory and  queue via jndi name.  2. In Spring, a DMLC bean is registerd:     \ 		\ 		\ 	\      		                    	     	     	     	     	     	     	       3. When jboss is starting, we confirm that the JNDI is bounded successfully! But when spring attempt to create connection, the exception is thrown as below:  2012-10-09 13:28:49,564 DEBUG [org.springframework.jms.listener.DefaultMessageListenerContainer] (main) Could not establish shared JMS Connection - leaving it up to  asynchronous invokers to establish a Connection as soon as possible javax.jms.JMSException: MQJCA1026:Invalid operation for a domain specific object. at com.ibm.mq.connector.services.JCAExceptionBuilder.buildException(JCAExceptionBuilder.java:113) at com.ibm.mq.connector.services.JCAExceptionBuilder.buildException(JCAExceptionBuilder.java:78) at com.ibm.mq.connector.outbound.QueueConnectionFactoryImpl.createConnection(QueueConnectionFactoryImpl.java:75) at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184) at org.springframework.jms.listener.AbstractJmsListeningContainer.createSharedConnection(AbstractJmsListeningContainer.java:403) at org.springframework.jms.listener.AbstractJmsListeningContainer.establishSharedConnection(AbstractJmsListeningContainer.java:371) at org.springframework.jms.listener.DefaultMessageListenerContainer.establishSharedConnection(DefaultMessageListenerContainer.java:749) at org.springframework.jms.listener.AbstractJmsListeningContainer.doStart(AbstractJmsListeningContainer.java:278) at org.springframework.jms.listener.AbstractJmsListeningContainer.start(AbstractJmsListeningContainer.java:263) at org.springframework.jms.listener.DefaultMessageListenerContainer.start(DefaultMessageListenerContainer.java:555) at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:166) at org.springframework.context.support.DefaultLifecycleProcessor.access$1(DefaultLifecycleProcessor.java:154) at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:335) at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:143) at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:108) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:908) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3910) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4389) at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeployInternal(TomcatDeployment.java:310) at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeploy(TomcatDeployment.java:142) at org.jboss.web.deployers.AbstractWarDeployment.start(AbstractWarDeployment.java:461) at org.jboss.web.deployers.WebModule.startModule(WebModule.java:118) at org.jboss.web.deployers.WebModule.start(WebModule.java:97) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:157) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:96) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:668) at org.jboss.system.microcontainer.ServiceProxy.invoke(ServiceProxy.java:206) at $Proxy38.start(Unknown Source) at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:42) at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:37) at org.jboss.dependency.plugins.action.SimpleControllerContextAction.simpleInstallAction(SimpleControllerContextAction.java:62) at org.jboss.dependency.plugins.action.AccessControllerContextAction.install(AccessControllerContextAction.java:71) at org.jboss.dependency.plugins.AbstractControllerContextActions.install(AbstractControllerContextActions.java:51) at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) at org.jboss.system.microcontainer.ServiceControllerContext.install(ServiceControllerContext.java:297) at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1633) at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:935) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1083) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:985) at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:823) at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:553) at org.jboss.system.ServiceController.doChange(ServiceController.java:688) at org.jboss.system.ServiceController.start(ServiceController.java:460) at org.jboss.system.deployers.ServiceDeployer.start(ServiceDeployer.java:163) at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:99) at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:46) at org.jboss.deployers.spi.deployer.helpers.AbstractSimpleRealDeployer.internalDeploy(AbstractSimpleRealDeployer.java:62) at org.jboss.deployers.spi.deployer.helpers.AbstractRealDeployer.deploy(AbstractRealDeployer.java:50) at org.jboss.deployers.plugins.deployers.DeployerWrapper.deploy(DeployerWrapper.java:171) at org.jboss.deployers.plugins.deployers.DeployersImpl.doDeploy(DeployersImpl.java:1440) at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1158) at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1179) at org.jboss.deployers.plugins.deployers.DeployersImpl.install(DeployersImpl.java:1099) at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1633) at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:935) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1083) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:985) at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:823) at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:553) at org.jboss.deployers.plugins.deployers.DeployersImpl.process(DeployersImpl.java:782) at org.jboss.deployers.plugins.main.MainDeployerImpl.process(MainDeployerImpl.java:702) at org.jboss.system.server.profileservice.repository.MainDeployerAdapter.process(MainDeployerAdapter.java:117) at org.jboss.system.server.profileservice.repository.ProfileDeployAction.install(ProfileDeployAction.java:70) at org.jboss.system.server.profileservice.repository.AbstractProfileAction.install(AbstractProfileAction.java:53) at org.jboss.system.server.profileservice.repository.AbstractProfileService.install(AbstractProfileService.java:403) at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1633) at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:935) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1083) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:985) at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:775) at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:540) at org.jboss.system.server.profileservice.repository.AbstractProfileService.registerProfile(AbstractProfileService.java:308) at org.jboss.system.server.profileservice.ProfileServiceBootstrap.start(ProfileServiceBootstrap.java:256) at org.jboss.bootstrap.AbstractServerImpl.start(AbstractServerImpl.java:461) at org.jboss.Main.boot(Main.java:221) at org.jboss.Main$1.run(Main.java:556) at java.lang.Thread.run(Thread.java:662)  and then Spring attempt to refresh connections repeatly:  2012-10-09 13:28:54,732 WARN  [org.springframework.jms.listener.DefaultMessageListenerContainer] (listenerContainer-1) Could not refresh JMS Connection for destination  'queue://QM_TUMS/QL_PUBSUB_OUT_ESPEED' - retrying in 5000 ms. Cause: MQJCA1026:Invalid operation for a domain specific object. javax.jms.JMSException: MQJCA1026:Invalid operation for a domain specific object. .......  ps-1: We debug spring DMLC and related classes, we find that Spring always getConnectionFactory() from the container, and invoke createConnection() mehtod to create a  single or share connection. But the wmq's connector in mqconnector.jar in ""wmq.jmsra.rar"", we recompile the connector classes (sorry to IBM), find:  QueueConnectionFactoryImpl.class  public Connection createConnection() throws JMSException { throw ((JMSException)JCAExceptionBuilder.buildException(3, ""MQJCA1026"")); }  So we think THAT is the reason for the exceptions above.  ps-2: We don't know wmq's connector's behaivor about createConnection() method, maybe it's available for JMS 1.0.2 only, not JMS 1.1?  So we update wmq's connector, using  ""wmq.jmsra.rar"" retrived from WebSphere MQ v7.5, but the error reoccurs:  2012-10-12 10:00:59,382 WARN  [org.springframework.jms.listener.DefaultMessageListenerContainer] (listenerContainer-1) Could not refresh JMS Connection for destination  'queue://QM_TUMS/QL_PUBSUB_OUT_ESPEED' - retrying in 5000 ms. Cause: MQJCA1026: 对特定于域的对象的操作无效。 com.ibm.msg.client.jms.DetailedJMSException: MQJCA1026: 对特定于域的对象的操作无效。 JMS 应用程序试图对特定于域的对象执行操作，但该操作仅对跨域对象或在其他消息传递域中有效。 确保应用程序使用的 JMS 对象与所需的消息传递域相关。 at com.ibm.mq.connector.services.JCAExceptionBuilder.buildException(JCAExceptionBuilder.java:146) at com.ibm.mq.connector.services.JCAExceptionBuilder.buildException(JCAExceptionBuilder.java:91) at com.ibm.mq.connector.outbound.QueueConnectionFactoryImpl.createConnection(QueueConnectionFactoryImpl.java:119) at com.ibm.mq.connector.outbound.QueueConnectionFactoryImpl.createConnection(QueueConnectionFactoryImpl.java:98) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:196) at $Proxy148.createConnection(Unknown Source) at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184) at org.springframework.jms.listener.AbstractJmsListeningContainer.createSharedConnection(AbstractJmsListeningContainer.java:403) at org.springframework.jms.listener.AbstractJmsListeningContainer.refreshSharedConnection(AbstractJmsListeningContainer.java:388) at org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:856) at org.springframework.jms.listener.DefaultMessageListenerContainer.recoverAfterListenerSetupFailure(DefaultMessageListenerContainer.java:838) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:969) at java.lang.Thread.run(Thread.java:662)  We recompile the connector classes com.ibm.mq.connector.jar (same as mqconnector.jar)(sorry to IBM), find:  QueueConnectionFactoryImpl.class  public Connection createConnection() throws JMSException { return createConnection(null, null); }  public Connection createConnection(String username, String password) throws JMSException { if (ResourceAdapterImpl.getJCARuntimeHelper().getEnvironment() != 1) { return createQueueConnection(username, password); }      throw ((JMSException)JCAExceptionBuilder.buildException(3, ""MQJCA1026""));  }  But how we can make ""ResourceAdapterImpl.getJCARuntimeHelper().getEnvironment() != 1""?  If you run the application in WAS container, it will not be 1! My God, that is the  reason why I play the application successfully in WAS v6.0 but NOT in JBoss or any other containers, faint!  ps-3: Now we try to use DMLC102 to test because DMLC102 explicitly invoke createQueueConnection() method but createConnection() for generic JMS 1.1 spec. It worked. But XX102 is deprecated by spring...  Can Spring make the createConnection() or createQueueConnection() compatible?  or resolve the wmq connector's incompatible?   ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2012-10-12T00:04:31Z","2019-01-12T16:25:04Z"
"","13983","Reference Guide still recommends SimpleJdbcTemplate, which is now deprecated [SPR-9345]","**[Dominic John North](https://jira.spring.io/secure/ViewProfile.jspa?name=dnorth)** opened **[SPR-9345](https://jira.spring.io/browse/SPR-9345?redirect=false)** and commented  Spring reference guide 13.2.3 still recommends use of SimpleJdbcTemplate, even though the latter has now been deprecated.  ---  **Affects:** 3.1.1  **Issue Links:** - #13873 Deprecate SimpleJdbcTestUtils in favor of JdbcTestUtils - #13630 Provide JdbcTemplate in abstract transactional base classes in the TestContext framework - #14951 Replace examples using deprecated SimpleJdbcTemplate (_**""is superseded by""**_)","closed","status: duplicate,","spring-projects-issues","2012-04-26T00:28:00Z","2019-01-11T12:37:24Z"
"","14620","Spring JDBC - add additional KeyHolder method [SPR-9986]","**[DMM](https://jira.spring.io/secure/ViewProfile.jspa?name=sam2011)** opened **[SPR-9986](https://jira.spring.io/browse/SPR-9986?redirect=false)** and commented  Hi. I would like to propose an additonal update() method be added to the JDBCTemplate. I would really like the opportunity to add this method myself and would appreciate your thoughts / input.  At present the interface org.springframework.jdbc.core.JdbcOperations and it's implementor org.springframework.jdbc.core.JdbcTemplate expose a number of update() methods including:  public int update(final PreparedStatementCreator psc, final KeyHolder generatedKeyHolder) - where new DB keys created by the update are made available to the calling application through the KeyHolder parameter.  and  public int update(String sql, Object... args) - where the sql parameter is used to construct a PreparedStatement and the args parameter contains the arguments to the PreparedStatement.  I'd like to implement another update() method that combines both these methods. It's signature would look similar to this:  public int update(final String sql, final KeyHolder generatedKeyHolder, String[] columnNames, Object... args)  where the sql parameter is used to create the PreparedStatement, the generatedKeyHolder parameter will contain the keys once the method has completed, the columnNames contains the DB column names whose value we want to return and the args parameter contains the arguments to the PreparedStatement.  As far as I can see, this can be implemented under the covers using existing methods. It would mean that a developer does not have to use the PreparedStatementCreator everytime he wants to use the KeyHolder class.  Let me know your thoughts. I would love the opportunity to get involved in contributing to this project.   ---  **Affects:** 3.2 RC1  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-11-13T08:48:57Z","2018-12-27T13:48:37Z"
"","14546","SpEL's arithmetic operations should explicitly detect BigInteger/Short/Byte and fall back to double handling for unknown Number subtypes [SPR-9913]","**[Dmitry Paltchoun](https://jira.spring.io/secure/ViewProfile.jspa?name=dip239)** opened **[SPR-9913](https://jira.spring.io/browse/SPR-9913?redirect=false)** and commented  OpDivide.getValueInternal(ExpressionState) line: 48	 performs Integer division on custom Number types even with precision loss.  Case: I have a CustomFloat class derived from Number and should operate like a float in SPeL expressions. SPeL performs integer division even the TypeConverter is sets und converts CustomFloat Instances to float.  ---  **Affects:** 3.1.1, 3.1.2  **Issue Links:** - #13802 Support BigDecimals with SpEL  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92ad02ae8fd461cda2e61ecae8933e7a8d3cff2d, https://github.com/spring-projects/spring-framework/commit/d8160b3c0994deae6e33247a43cdd2c8c0528b02","closed","type: enhancement,","spring-projects-issues","2012-10-23T09:06:47Z","2019-01-11T14:13:44Z"
"","14138","@Configuration bean with different scope [SPR-9504]","**[Dmitry Noskov](https://jira.spring.io/secure/ViewProfile.jspa?name=noskov.d)** opened **[SPR-9504](https://jira.spring.io/browse/SPR-9504?redirect=false)** and commented  I have the following problem with migration to Spring 3.1.1 (with Spring 3.0 all fine):  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'gridStrategies' defined in class path resource [com/.../StrategyFactory.class]: No matching factory method found: factory bean 'strategyFactory'; factory method 'staticGridStrategies()'. Check that a method with the specified name exists and that it is non-static. ```  where:  ``` @Configuration public class PipelineStrategyFactory {          @Bean(name = ""gridStrategies"")     public Map staticGridStrategies() {         Map map = new HashMap(3);                  map.put(PLANNED_VIEW_MODE, separateGridStrategy());                  return map;     }          @Bean     @Scope(SCOPE_PROTOTYPE)     public SeparateGridStrategy separateGridStrategy() {         return new SeparateGridStrategy();     } } ```  and I have class/bean (define via XML):  ``` public class GridPrepareStrategy {          @Resource(name = ""gridStrategies"")     private Map strategies; } ```  ---  **Affects:** 3.1.1  **Issue Links:** - #14137 Problem with autowire `@Configuration` bean","closed","in: core,","spring-projects-issues","2012-06-13T06:47:40Z","2019-01-13T07:04:13Z"
"","14137","Problem with autowire @Configuration bean [SPR-9503]","**[Dmitry Noskov](https://jira.spring.io/secure/ViewProfile.jspa?name=noskov.d)** opened **[SPR-9503](https://jira.spring.io/browse/SPR-9503?redirect=false)** and commented  I have the following problem when start to move to Spring 3.1 (with Spring 3.0 all fine): Can not set com...StrategyFactory field com...ServiceImpl.strategyFactory to $Proxy78  where:  `@Configuration` public class StrategyFactory { ... }  `@Service` public class ServiceImpl { `@Autowired` private PipelineStrategyFactory strategyFactory; }  ---  **Affects:** 3.1.1  **Issue Links:** - #14138 `@Configuration` bean with different scope","closed","in: core,","spring-projects-issues","2012-06-13T06:38:44Z","2019-01-13T07:04:15Z"
"","13968","BridgeMethodResolver throws exception when trying to find bridged method if method is declired in interface or it is abstract [SPR-9330]","**[Dmitry Kudinov](https://jira.spring.io/secure/ViewProfile.jspa?name=dkudinov)** opened **[SPR-9330](https://jira.spring.io/browse/SPR-9330?redirect=false)** and commented  In combination of Scala Collection and Spring Security with annotations enabled BridgeMethodResolver failed to find bridged method for Scala's method ""public abstract java.lang.Object scala.collection.TraversableLike.$plus$plus(scala.collection.TraversableOnce,scala.collection.generic.CanBuildFrom)""  Exception thrown: java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:308) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:220) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:301) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:303) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'someItems' defined in class path resource [test-spring-and-scala-collection-context.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: Class must not be null at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) ... 24 more Caused by: java.lang.IllegalArgumentException: Class must not be null at org.springframework.util.Assert.notNull(Assert.java:112) at org.springframework.util.ReflectionUtils.findMethod(ReflectionUtils.java:145) at org.springframework.core.BridgeMethodResolver.searchForMatch(BridgeMethodResolver.java:210) at org.springframework.core.BridgeMethodResolver.findGenericDeclaration(BridgeMethodResolver.java:148) at org.springframework.core.BridgeMethodResolver.isBridgeMethodFor(BridgeMethodResolver.java:135) at org.springframework.core.BridgeMethodResolver.searchCandidates(BridgeMethodResolver.java:103) at org.springframework.core.BridgeMethodResolver.findBridgedMethod(BridgeMethodResolver.java:77) at org.springframework.core.annotation.AnnotationUtils.getAnnotation(AnnotationUtils.java:77) at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:99) at org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.findAttributes(SecuredAnnotationSecurityMetadataSource.java:42) at org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource.getAttributes(AbstractFallbackMethodSecurityMetadataSource.java:47) at org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.getAttributes(DelegatingMethodSecurityMetadataSource.java:53) at org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor$MethodSecurityMetadataSourcePointcut.matches(MethodSecurityMetadataSourceAdvisor.java:129) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:217) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:254) at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:286) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:117) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:87) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:68) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:359) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:322) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:407) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1426) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ... 36 more  In attachment there is Maven-based project with single test and all required dependencies configured.  Issue in BridgeMethodResolver#findGenericDeclaration(Method bridgeMethod) method: ... Class superclass = bridgeMethod.getDeclaringClass().getSuperclass(); while (!Object.class.equals(superclass)) { ... for method, defined in interface, call to ""getDeclaringClass().getSuperclass()"" returns null  Fix can be something like while (superclass != null && !Object.class.equals(superclass)) {    ---  **Affects:** 3.0.7  **Attachments:** - [spring-security-scala-collection.zip](https://jira.spring.io/secure/attachment/19593/spring-security-scala-collection.zip) (_2.99 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c9383da7c9ce02408c4e22eb8b6fdc07043582d, https://github.com/spring-projects/spring-framework/commit/1e888706d39fdc2609f0a80ffb3a7bbf833af9a3  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2012-04-16T06:50:37Z","2013-01-18T06:00:38Z"
"","14373","Implement support of Jackson2 for JacksonObjectMapperBeanFactory [SPR-9739]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-9739](https://jira.spring.io/browse/SPR-9739?redirect=false)** and commented  As current implementation (JacksonObjectMapperBeanFactory) should be backward-compatible with Jackson 1.4, new features will be added to Jackson2 port of this class.   ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e54fb60180f628c61f6d8ab5b5022ebb9c7e3380, https://github.com/spring-projects/spring-framework/commit/950786a8cc1a83dde6e590f59958f9ada8699288","closed","type: enhancement,","spring-projects-issues","2012-08-29T04:40:41Z","2012-11-04T06:54:07Z"
"","14372","Implement HttpMessageConverter that can use a ConversionService to convert String content to some Object type [SPR-9738]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-9738](https://jira.spring.io/browse/SPR-9738?redirect=false)** and commented  Currently if MVC controller function returns a number, conversion to plain/text is not possible, as there is no appropriate convertor.   ---  **Affects:** 3.1.2, 3.2 M1","closed","type: enhancement,","spring-projects-issues","2012-08-29T04:36:31Z","2012-11-04T06:54:00Z"
"","14582","org.springframework.http.MediaType.SPECIFICITY_COMPARATOR [SPR-9949]","**[Dmitriy Milashenko](https://jira.spring.io/secure/ViewProfile.jspa?name=milashenko)** opened **[SPR-9949](https://jira.spring.io/browse/SPR-9949?redirect=false)** and commented  As the result of [application/json, text/javascript, text/plain;charset=ISO-8859-1, */*;q=0.01, application/json;charset=UTF-8] MediaType collection sorting we have [application/json, text/javascript, text/plain;charset=ISO-8859-1, application/json;charset=UTF-8, */*;q=0.01] but should have [text/plain;charset=ISO-8859-1, application/json;charset=UTF-8, application/json, text/javascript, */*;q=0.01] since at least ""application/json;charset=UTF-8"" is more specific than ""application/json""   ---  **Affects:** 3.1.3, 3.2 M2","closed","status: declined,","spring-projects-issues","2012-11-02T10:37:04Z","2019-01-12T16:24:53Z"
"","14242","org.springframework.core.Constants fail with NPE dispite method documentations say that it accepts null values [SPR-9608]","**[Diogo Quintela](https://jira.spring.io/secure/ViewProfile.jspa?name=dquintela)** opened **[SPR-9608](https://jira.spring.io/browse/SPR-9608?redirect=false)** and commented  Hello,  org.springframework.core.Constants  toCodeForSuffix and toCode methods declare that they accept null as ""suffix"" and ""prefix"" yet they fail to guard it use into String#startsWith and it gloriosly fail.  I've been using the empty string and not the null string to achieve the same the constants resolution happily - after 2 or 3 years after finding the small bug only today managed to create this issue (two in a row, that's why).  Best regards Diogo Quintela    --- No further details from [SPR-9608](https://jira.spring.io/browse/SPR-9608?redirect=false)","closed","in: core,","spring-projects-issues","2012-07-19T15:52:49Z","2018-12-08T13:05:48Z"
"","14241","MessageSourceSupport and StaticMessageSource uses invalid caches for MessageFormat [SPR-9607]","**[Diogo Quintela](https://jira.spring.io/secure/ViewProfile.jspa?name=dquintela)** opened **[SPR-9607](https://jira.spring.io/browse/SPR-9607?redirect=false)** and commented  Hello,  org.springframework.context.support.MessageSourceSupport and org.springframework.context.support.StaticMessageSource  maintains a map to cache MessageFormat instances:  Map cachedMessageFormats = new HashMap();  The problem is that MessageFormat are created with locale information and the caches don't honor that.  I propose that it should be used instead.  Map cachedMessageFormats = new HashMap();  btw, since spring is now only Java5 why not replace all maps and synchronized blocks with ConcurrentMap and Lock's ?  Best regards Diogo Quintela   ---  **Affects:** 3.1.2","closed","in: core,","spring-projects-issues","2012-07-19T15:44:05Z","2012-10-31T11:33:59Z"
"","13931","Greek characters and htmlEscape() [SPR-9293]","**[Dimitris Zavaliadis](https://jira.spring.io/secure/ViewProfile.jspa?name=dimzava)** opened **[SPR-9293](https://jira.spring.io/browse/SPR-9293?redirect=false)** and commented  In two words, the problem is that [HtmlUtils#htmlEscape](https://github.com/SpringSource/spring-framework/blob/3.1.x/org.springframework.web/src/main/java/org/springframework/web/util/HtmlUtils.java#L47) treats Greek characters as special ones turning them to HTML entity references, despite that this might not be desirable in most of the cases. For example, in my UTF-8 encoded application using `HtmlUtils#htmlEscape` on this sentence:  ``` Μερικοί Ελληνικοί ""χαρακτήρες"" ```  would result in the following:  ``` Μερικοί Ελληνικοί ""χαρακτήρες"" ```  As you understand, this is not the expected way of representing regural text in the Greek language. The expected behavior would be to only escape the quotes:  ``` Μερικοί Ελληνικοί ""χαρακτήρες""  ```  This claim is also supported by the HTML4 character entity references documentation on which the implementation of `HtmlUtils#htmlEscape` is based, since it is clearly stated that the Greek entities should be used **[only in special cases](http://www.w3.org/TR/html4/sgml/entities.html#h-24.3)**:  > **When to use Greek entities.** ... The entities defined here are not intended for the representation of modern Greek text and would not be an efficient representation; rather, they are intended for occasional Greek letters used in technical and mathematical works.  (an extract from the paragraph in green in the link provided above)  Any thoughts on the above?  Please note, that this ""problem"" was originally discovered in Grails (not Spring per se) which under the hood uses Spring's `HtmlUtils#htmlEscape` for its own HTML escaping features. See here for details: http://grails.1312388.n4.nabble.com/Improve-encodeAsHtml-td4502263.html  ---  **Issue Links:** - #16955 Allow for using the response encoding when escaping HTML characters  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-01T05:54:46Z","2019-01-11T12:48:05Z"
"","14613","Spring MVC - Jasper integration - JasperReportsXlsView should be able to set the Jasper report's attributes [SPR-9979]","**[DevNYCQuestion](https://jira.spring.io/secure/ViewProfile.jspa?name=devnycquestion)** opened **[SPR-9979](https://jira.spring.io/browse/SPR-9979?redirect=false)** and commented  I am creating Jasper reports in a Spring application using the Spring/Jasper built-in view configuration.  org.springframework.web.servlet.view.jasperreports.JasperReportsXlsView  All of my report configurations and exporterParameters are set in the views.xml  For the configs, I'm limited by the options in net.sf.jasperreports.engine.export.JRXlsExporterParameter.  However, I need to set some of the report export configurations that are listed here; http://jasperreports.sourceforge.net/config.reference.html  I am specifically trying to set the print header/footer and the freeze panes.  Is it possible to add an enhancement to the Jasper/Spring configuration so that we can set the report's attributes in the view configuration?  Or would it be possible to add the view configurations to the ModelAndView object in a viewMap?  Thank you.   ---  **Reference URL:** http://jasperreports.sourceforge.net/config.reference.html","closed","status: bulk-closed,","spring-projects-issues","2012-11-08T22:53:51Z","2019-01-12T00:25:37Z"
"","14236","BeanFactory.getType() can return inaccurate (non-proxied) type when using AOP [SPR-9602]","**[Derek Beauregard](https://jira.spring.io/secure/ViewProfile.jspa?name=dbeauregard)** opened **[SPR-9602](https://jira.spring.io/browse/SPR-9602?redirect=false)** and commented  The javadoc for BeanFactory.getType() specifies that it will ""Determine the type of the bean with the given name. More specifically, determine the type of object that getBean(java.lang.String) would return for the given name.""  However, when using AOP, there are cases where this will not hold true.  We have demonstrated two cases: 1) when using the lazy-init=""true"" attribute on a bean which will have an AOP proxy, and 2) when a bean using ApplicationContextAware calls getType(), for a bean which will have an AOP proxy, in it's init-method.  In both cases getType(\) can return a different type than getBean(\).class().  More specifically getType() will return the base class of the bean and not the proxy, which getBean().class() will return.  After calling getBean(), future calls to getType() will return the correct type, the proxy.  We have ran into issues with the second case when using Mule + Spring.  I have attached a sample Maven project demonstrating the first case, with lazy-init.  -Derek  ---  **Affects:** 3.1 GA  **Attachments:** - [SpringLifecycle.zip](https://jira.spring.io/secure/attachment/20111/SpringLifecycle.zip) (_9.18 kB_)  **Issue Links:** - #14272 BeanFactory.getType(String) may not return a Proxy class depending on the order of bean declarations (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-07-18T12:43:14Z","2019-01-12T16:47:49Z"
"","14675","Make form method accessible to RequestDataValueProcessor  [SPR-10041]","**[Dennis Homann](https://jira.spring.io/secure/ViewProfile.jspa?name=dhomann)** opened **[SPR-10041](https://jira.spring.io/browse/SPR-10041?redirect=false)** and commented  In addition to the form action, a RequestDataValueProcessor should have access to the form method as its behavior may depend on it.  One of the suggested use cases for RequestDataValueProcessor is adding a hidden anti-CSRF token field to a form. The [OWASP CSRF Prevention Cheat Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Disclosure_of_Token_in_URL) explains why such tokens should not be included in URLs (as they will if such hidden fields are included in forms with method=""GET""). In summary:  > Many implementations of this control include the challenge token in GET (URL) requests as well as POST requests. This often implemented as a result of sensitive server-side operations being invoked as a result of embedded links in the page or other general design patterns. These patterns are often implemented without knowledge of CSRF and an understanding of CSRF prevention design strategies. > [...] > The ideal solution is to only include the CSRF token in POST requests and modify server-side actions that have state changing affect to only respond to POST requests.  In order to implement an anti-CSRF RequestDataValueProcessor following these recommendations, the implementation should be able to access the form method value.  ---  **Affects:** 3.1.2  **Reference URL:** https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Disclosure_of_Token_in_URL  **Issue Links:** - [SEC-2272](https://jira.spring.io/browse/SEC-2272) CsrfRequestDataValueProcessor should support Spring 4.2.0M2+ - #15280 Allow getExtraHiddenFields method of RequestDataValueProcessor to know request method of form  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b22558a06d7033e7ef3ed4f3122a4913b045c5c  5 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2012-11-26T13:58:42Z","2019-01-11T18:39:02Z"
"","14677","Spring AOP: If source method has annotation autoproxy create proxy method without annotation [SPR-10043]","**[Denis Sklyarov](https://jira.spring.io/secure/ViewProfile.jspa?name=dsklyarov)** opened **[SPR-10043](https://jira.spring.io/browse/SPR-10043?redirect=false)** and commented  Spring AOP with  directive in context.xml ignore annotations when generates proxy for class which contains methods with annotations. As result is a proxy class with same methods but without annotations.  Example code attached. See main method comments.   ---  **Affects:** 3.1 M2  **Attachments:** - [SpringAnnotIssue.zip](https://jira.spring.io/secure/attachment/20721/SpringAnnotIssue.zip) (_5.19 MB_)","closed","status: bulk-closed,","spring-projects-issues","2012-11-27T01:50:51Z","2019-01-12T00:25:19Z"
"","14565","Spring  default profile, choose configuration depending on class name  [SPR-9932]","**[Denis Mitin](https://jira.spring.io/secure/ViewProfile.jspa?name=dmitin)** opened **[SPR-9932](https://jira.spring.io/browse/SPR-9932?redirect=false)** and commented  I described problem enough in gitHub ReadMe, in general :  when use `@Configuration` annotation without `@Profile`, choosing appropriate confuguration depends on class name (class path) - which may cause errors in application!   ---  **Affects:** 3.1.2  **Reference URL:** https://github.com/dMitin/spring-def-profile-error","closed","in: core,","spring-projects-issues","2012-10-30T06:34:12Z","2019-01-12T16:24:54Z"
"","14199","ConfigurationClassPostProcessor is not Ordered [SPR-9565]","**[Dejan Predovic](https://jira.spring.io/secure/ViewProfile.jspa?name=dpredovic)** opened **[SPR-9565](https://jira.spring.io/browse/SPR-9565?redirect=false)** and commented  ConfigurationClassPostProcessor does not implement Ordered, so it's basically impossible to implement any other BeanDefinitionRegistryPostProcessor so that it is applied after the ConfigurationClassPostProcessor. That means that no BeanDefinitionRegistryPostProcessor can see beans declared via `@Bean`.   ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2012-07-05T03:37:58Z","2019-01-12T02:47:28Z"
"","14399","List @PathVariable not converted correctly in @Controller [SPR-9765]","**[Deejay](https://jira.spring.io/secure/ViewProfile.jspa?name=deejay)** opened **[SPR-9765](https://jira.spring.io/browse/SPR-9765?redirect=false)** and commented  In a Spring MVC controller a `@PathVariable Long... ids` get resolved fine when passed input like `1,2,3`.  If the parameter is declared as `@PathVariable UUID... ids` then the comma-separation doesn't work: a 400 response is returned. The same is true if `List` is used as the parameter type.  Conversion to a single `UUID` works fine. As mentioned in the linked Stack Overflow post, `org.springframework.beans.propertyeditors.UUIDEditor` exists and works for single values. However, the only workaround for lists of UUIDs is to define one's own implementation of `Converter`. The curious part about this is that the converter implementation itself doesn't need to know about lists, but I'm guessing that's because the part of the Spring framework that does the converter lookup handles splitting the input string itself _if_ it can find a converter.   ---  **Affects:** 3.2 M1  **Reference URL:** http://stackoverflow.com/questions/12280408/pathvariable-listuuid-in-spring-mvc/12282576#comment16476766_12282576  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6adb49b7a928b9f611693ddcde601215583381cf  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-09-06T01:41:49Z","2012-11-04T06:54:04Z"
"","14445","allow replaced-method 'arg-type' matches against element body as well as 'match' attribute [SPR-9812]","**[Debabrata Patnaik](https://jira.spring.io/secure/ViewProfile.jspa?name=debu999)** opened **[SPR-9812](https://jira.spring.io/browse/SPR-9812?redirect=false)** and commented  Hi I had been trying to figure out the actual working of the messageReplacer in Spring. It seems the configuration file \int\  is not having any impact on providing restriction for the replacement. All the methods gets replaced instead of specific method with the argument type matching the datatype mentioned in \int\.  ReplacementTarget.java  package com.doogle.spring.chapter4.mi;  ``` /**  * @author DOOGLE  *  */  public class ReplacementTarget {  public int formatMessage(int a)  {  return 100000 + a + 100000;  }  public String formatMessage(String msg)  {  return """" + msg + """";  }  }  ```  FormatMessageReplacer.java  ``` package com.doogle.spring.chapter4.mi;   import java.lang.reflect.Method;   import org.springframework.beans.factory.support.MethodReplacer;   /**  * @author DOOGLE  *  */	 public class FormatMessageReplacer implements MethodReplacer{  public Object reimplement (Object arg0,Method method,Object [] args) throws Throwable  {  if(method.getReturnType() == int.class)  {  return (int)(Integer)args[0];  }  else if (method.getReturnType() == String.class)  {  return (String)args[0];  }  else  return ""NA"";  /*  As expected, the output from the replacementTarget bean reflects the overridden implementation  that the MethodReplacer provides. Interestingly, though, the dynamically replaced method is more than  three times slower than the statically defined method. Removing the check for a valid method in the  MethodReplacer made a negligible difference across a number of executions, so we can conclude that  most of the overhead is in the CGLIB subclass   */  }  }  ```  replacement.xml  ```xml             int           ```  MethodReplacementExample.java  ``` /**  *  */  package com.doogle.spring.chapter4.mi;   import org.springframework.context.support.GenericXmlApplicationContext;  import org.springframework.util.StopWatch;   /**  * @author DOOGLE  *  */  public class MethodReplacementExample {  public static void main(String[] args) {  GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();  ctx.load(""classpath:replacement.xml"");  ctx.refresh();  ReplacementTarget replacementTarget = (ReplacementTarget)ctx.getBean(""replacementTarget"");  ReplacementTarget standardTarget = (ReplacementTarget)ctx.getBean(""standardTarget"");  displayInfo(replacementTarget);  displayInfo(standardTarget);  }  private static void displayInfo(ReplacementTarget replacementTarget)  {  System.out.println(replacementTarget.formatMessage(2));  System.out.println(replacementTarget.formatMessage(""2""));  //	 System.out.println(replacementTarget.formatMessage(""Formating message and checking for message replacement""));  StopWatch stopWatch = new StopWatch();  stopWatch.start(""perfTesting"");  //	 Object obj = new Object();  for(int i=0;i","closed","type: enhancement,","spring-projects-issues","2012-09-20T00:00:11Z","2019-01-11T13:17:28Z"
"","14313","Site missing links to STS JIRA in multiple places, making the JIRA site hard to find [SPR-9679]","**[David](https://jira.spring.io/secure/ViewProfile.jspa?name=davidbiesack)** opened **[SPR-9679](https://jira.spring.io/browse/SPR-9679?redirect=false)** and commented  https://jira.springsource.org/secure/Dashboard.jspa does not include the SpringSource Tool Suite issue tracker  https://issuetracker.springsource.com/browse/STS  The STS home page  http://www.springsource.org/sts  does not link to it either; it links to https://jira.springsource.org/secure/Dashboard.jspa instead (via the standard footer)  I had to do a Google search to find http://www.springsource.org/sts/welcome  My suggested site improvements:  1) the main https://jira.springsource.org/secure/Dashboard.jspa should include the STS issue tracker site in the projects navigation bar on the left  2) The STS home page http://www.springsource.org/sts should link (""Issue Tracker"" and the bottom) should link to https://issuetracker.springsource.com/browse/STS or http://www.springsource.org/sts/welcome in a prominent location    --- No further details from [SPR-9679](https://jira.spring.io/browse/SPR-9679?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-08-10T06:31:11Z","2019-01-12T05:28:17Z"
"","14118","Javadoc for RequestMapping consumes, produces format is misleading, incomplete [SPR-9483]","**[David](https://jira.spring.io/secure/ViewProfile.jspa?name=davidbiesack)** opened **[SPR-9483](https://jira.spring.io/browse/SPR-9483?redirect=false)** and commented  The Javadoc for RequestMapping:consumes is incorrect and incomplete.  http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html#consumes()  says  'The format is a sequence of media types (""text/plain"", ""application/*), with ...'  1) The close quote is missing on ""application/*""  2) This notation - the use of parentheses - is misleading. This is a String[] parameter, so the format should be  consumes = {""text/plain"", ""application/*"" }  Almost all examples/tutorials show the singular use consumes=""..."", so the doc should be clearer on specifying the array (so users don't try to encode the list inside the double quotes), and use { } not ()  3) a single value is also allowed but not documented  consumes=""text/plain""  Same is true for produces:  http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html#produces()   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7cd0b16403e267a458178f376aa054b1483469e6","closed","type: enhancement,","spring-projects-issues","2012-06-07T08:24:02Z","2012-06-18T04:30:46Z"
"","14416","ClassNotFoundException: org.springframework.osgi.extender.internal.activator.ListListenerAdapter [SPR-9782]","**[David](https://jira.spring.io/secure/ViewProfile.jspa?name=david8754)** opened **[SPR-9782](https://jira.spring.io/browse/SPR-9782?redirect=false)** and commented  Hi,  The book ""Spring DM in Action"" shows how override the default osgi application context in bundle: \ \ \ \ \ \ \ \  But it doesn't work because the class ListListenerAdapter isn't export. It seems logical because the class is in the internal package.  So, what is the solution to add custom processes on events of the application context (creation, refresh, destroy)?  My environment : Spring 3.0.3.RELEASE, servicemix 4.3.1, Java 1.6  Regards,  David   --- No further details from [SPR-9782](https://jira.spring.io/browse/SPR-9782?redirect=false)","closed","status: declined,","spring-projects-issues","2012-09-10T08:36:41Z","2019-01-13T21:05:44Z"
"","14291","Flashmap matching logic fails when target params are encoded. [SPR-9657]","**[David Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=dvb123)** opened **[SPR-9657](https://jira.spring.io/browse/SPR-9657?redirect=false)** and commented  In our app we handle some request parameters which contain unicode characters. Our web.xml has the familiar `org.springframework.web.filter.CharacterEncodingFilter` enabled to encode using UTF-8.  One of our handler methods in a controller class redirects on success - and we add a success alert message to the flashmap in `RedirectAttributes`.  We also add a couple of attributes to the _""redirect model_"".   This ends up with an encoded parameter in 'targetParams' - which fails to match to the relevant request via isFlashMapForRequest() in `AbstractFlashMapManager`.  Will try to add more useful detail - but am on limit of my knowledge here, and been banging head against this for a day now.  The impact is that within our app the 'XXX successfully complete' flash message in the UI does not appear - due to not matching the flashmap - for encoded parameters.  Fortunately these are in the minority - but its quite odd when the message mostly appears - and then sometimes doesn't.  :-)  ---  **Affects:** 3.1 GA  **Sub-tasks:** - #14335 Backport ""Flashmap matching logic fails when target params are encoded.""  **Issue Links:** - #16129 Unable to retrieve FlashMap when target parameters are encoded - #17170 Flash attributes not working with spaces in query parameters","closed","type: bug,","spring-projects-issues","2012-07-31T15:01:17Z","2019-01-11T12:59:57Z"
"","13849","Release 1.0 spring-test-mvc [SPR-9211]","**[David Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=dvb1213)** opened **[SPR-9211](https://jira.spring.io/browse/SPR-9211?redirect=false)** and commented  Spring 3.2 seems like a long ways out. Spring-test-mvc is very useful, but milestone releases are a tough sell in a lot of enterprise projects. Is there any chance this will get versioned and released stand-alone before 3.2?  ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?122254-Spring-Test-MVC-release-date  **Issue Links:** - #9917 Support loading WebApplicationContexts with the TestContext Framework - #12606 Add first class support for client-side REST tests - #14492 Add first class support for testing Spring MVC applications  10 votes, 11 watchers","closed","has: votes-jira,","spring-projects-issues","2012-03-09T03:18:11Z","2019-01-11T12:44:39Z"
"","14111","@DependsOn inheritence appears not to function as defined [SPR-9476]","**[David Thexton](https://jira.spring.io/secure/ViewProfile.jspa?name=david@consultants.co.nz)** opened **[SPR-9476](https://jira.spring.io/browse/SPR-9476?redirect=false)** and commented  The `@DependsOn` annotation states ""Note: This attribute will not be inherited by child bean definitions, hence it needs to be specified per concrete bean definition."" yet it appears that the attribute is inherited and it is not possible to define the attribute in any concrete bean definition.  I'm not sure if the definition is wrong, if I have interpreted the definition incorrectly or if the implementation is at fault.  I have added two unit additional unit tests to BeanAnnotationAttributePropagationTests that test the definition as I understand it which both fail.  The first test, ""dependsOnInheritedMetadataIsNotPropogated"", tests that ""This attribute will not be inherited by child bean definitions"".  It should result in the overriden (child?) definition for the bean ""foo"" not depending on any beans, despite it's parent definition depending on a bean ""ni"".  The test fails showing the dependency is in fact inherited.  ``` @Test public void dependsOnInheritedMetadataIsNotPropogated() { 	@Configuration class ConfigA { 		@Bean() @DependsOn(""nigh"") Object foo() { return null; } 	}  	@Configuration class ConfigB extends ConfigA { 		@Bean() @Override Object foo() { return null; } 	}  	assertArrayEquals(""dependsOn inherited metadata was propagated"", 			new String[] {}, beanDef(ConfigB.class).getDependsOn()); } ```  The second test ""dependsOnConcreteDefinitionMetadataIsPropogated"" tests that ""This attribute ... needs to be specified per concrete bean definition."".  It should result in the dependency being recognised for the overriden (concrete?) definition of ""foo"".  The test fails showing the dependency is not in fact recognised.  ``` @Test public void dependsOnConcreteDefinitionMetadataIsPropogated() { 	@Configuration class ConfigA { 		@Bean() Object foo() { return null; } 		}  	@Configuration class ConfigB extends ConfigA { 		@Bean() @DependsOn({""bar"", ""baz""}) @Override Object foo() { return null; } 	}  	assertArrayEquals(""dependsOn metadata of concrete definition was not propagated"", 			new String[] {""bar"", ""baz""}, beanDef(ConfigB.class).getDependsOn()); } ```  Please clarify my understanding.  If the implementation should be amended I may be able to assist.  If not then perhaps better clarity in the documentation would be helpful.  ---  **Affects:** 3.1.2  **Issue Links:** - #14223 inherited `@Lazy` annotation not picked up for scanned `@Components`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87b7e3d8cff3db9d225485c26437f1eacfb0651e","closed","in: core,","spring-projects-issues","2012-06-06T08:07:51Z","2019-01-13T07:04:26Z"
"","14041","JdbcTemplate parameter and result logging [SPR-9405]","**[David Thexton](https://jira.spring.io/secure/ViewProfile.jspa?name=david@consultants.co.nz)** opened **[SPR-9405](https://jira.spring.io/browse/SPR-9405?redirect=false)** and commented  I noted when trying to diagnose [BATCH-1852](https://jira.spring.io/browse/BATCH-1852) (which was making use of JdbcTemplate) that there were no options to enable logging JDBC query parameters or query results.  I recalled this was possible for Hibernate (see http://www.seamframework.org/Documentation/EnablingJDBCBindParameterLoggingWithHibernateAndLog4j) and wanted the same feature for Spring JdbcTemplate.  I could have used P6Spy (see http://sourceforge.net/projects/p6spy/), although that approach seemed inconvenient.  As this logging can be very verbose I used separate classes (and thus loggers).  Continue to set logger ""org.springframework.jdbc.core.JdbcTemplate"" to debug to see the queries being executed and simple results.  Additionally set logger ""org.springframework.jdbc.core.PreparedStatementValueLogger"" to debug for query parameter logging and logger ""org.springframework.jdbc.core.PreparedStatementResultLogger"" to debug for further query result logging.  I've implemented the change in a style that will hopefully be seen to fit and I'll issue a pull request as soon as I've completed testing and committed to my spring-framework fork.  I'm happy to make further changes for this issue if necessary.  Please let me know.  ---  **Affects:** 3.2 M1  **Issue Links:** - #12438 Logging of SQL Params and Query when using JdbcTemplate (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-05-14T06:10:07Z","2019-01-11T12:43:48Z"
"","14575","HttpMessageNotReadableException when @RequestBody(required=false) [SPR-9942]","**[David Roberts](https://jira.spring.io/secure/ViewProfile.jspa?name=dleerob)** opened **[SPR-9942](https://jira.spring.io/browse/SPR-9942?redirect=false)** and commented  I've tested #13877 on 3.2M2 and set `@RequestBody`(required=false), and it is still throwing org.springframework.http.converter.HttpMessageNotReadableException when I send it a null body from a test client. I would expect my body object parameter to be sent through as null, as per the comments on the `@RequestBody`.required() method.  Any suggestions?  ---  **Affects:** 3.2 M2  **Issue Links:** - #13877 `@RequestBody` should have a required parameter to allow a request body to be optional - #16447 Contract of `@RequestBody`(required=true) not obeyed - #17996 Regression: `@RequestBody`(required = false) not respected  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e3aa0eec4b604957d5206257396616a93d1c7c3","closed","type: bug,","spring-projects-issues","2012-10-31T17:59:17Z","2019-01-13T07:02:19Z"
"","14007","Cannot amend properties in RequestMappingHandlerMapping (e.g. useSuffixPatternMatch) using a bean post processor as ApplicationContextAwareProcessor always fires first initialising RequestMappingHandlerMapping [SPR-9371]","**[David Melia](https://jira.spring.io/secure/ViewProfile.jspa?name=mzz6wh)** opened **[SPR-9371](https://jira.spring.io/browse/SPR-9371?redirect=false)** and commented  Hi,  I want to change the behaviour of RequestMappingHandlerMapping.useSuffixPatternMatch from true to false and keep the neat mvc xml namespace configuration.  In the Spring document (Section 16.14.9 Advanced Customizations with the MVC Namespace) it states I can do this using a bean post processor however I don't believe this is the case.  The following is my post processor  ``` public class MvcConfigurationPostProcessor implements BeanPostProcessor, PriorityOrdered {     @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {       if (bean instanceof RequestMappingHandlerMapping) {          ((RequestMappingHandlerMapping) bean).setUseSuffixPatternMatch(false);       }       return bean;    }     @Override    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {       return bean;    }     @Override    public int getOrder() {       return PriorityOrdered.HIGHEST_PRECEDENCE;    }  } ```  and my simple spring config  ```   	 	 	   ```  and my test  ``` package com.beanprocbug.melia;  import org.junit.Test; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;  @ContextConfiguration(locations = { ""/spring-test.xml"" }) public class BugTest extends AbstractJUnit4SpringContextTests {     @Test    public void test() {       // ApplicationContextAwareProcessor gets fired first    }  }  ```  and the problem appears to be because ApplicationContextAwareProcessor always has high priority (which makes sense) then initApplicationContext in the RequestMappingHandlerMapping parent class causes some eager initialisation which uses the flag useSuffixPatternMatch before my bean post processor gets change to change it.  I believe the only way I can get around this is ditch the mvc xml configuration and use WebMvcConfigurationSupport however this is undesireable and the documentation does suggest I should be able to use a Bean post processor.  Many Thanks  David Melia  ---  **Affects:** 3.1.1  **Sub-tasks:** - #14032 Backport ""Cannot amend properties in RequestMappingHandlerMapping (e.g. useSuffixPatternMatch) using a bean post processor as ApplicationContextAwareProcessor always fires first initialising RequestMappingHandlerMapping""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e7b44e015a0216c37de184a605b522361723b52a, https://github.com/spring-projects/spring-framework/commit/3b4210fa6f6e9e9417307cd3020747608e597fae, https://github.com/spring-projects/spring-framework/commit/5e4f3b310817b7fa0d03f29696641b99dd90b965, https://github.com/spring-projects/spring-framework/commit/d7efc0db80b52ce645d132d117bf64c17e5deaf0, https://github.com/spring-projects/spring-framework/commit/23fe1e2934336351615556f243de694e06b5e553","closed","type: bug,","spring-projects-issues","2012-05-03T04:15:40Z","2019-01-11T12:40:12Z"
"","13852","Form:select and form:options no longer work as they used to in 3.0.5 for enums [SPR-9214]","**[David Kerwick](https://jira.spring.io/secure/ViewProfile.jspa?name=david%20kerwick)** opened **[SPR-9214](https://jira.spring.io/browse/SPR-9214?redirect=false)** and commented  For 3.1.0 and 3.1.1 this https://jira.springsource.org/browse/SPR-3389 no longer works for the values part of the enum.  For example if you have this   Select a country    And the model has an enum for country  In 3.0.5 this would call the toString method of the enum to get the item label. With 3.1.1 this call is no longer made and the name of the enum is entered for both the name and label  Thanks David   ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2012-03-09T08:20:04Z","2019-01-12T03:48:55Z"
"","14376","Jaxb2Marshaller should support JaxbElement [SPR-9742]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-9742](https://jira.spring.io/browse/SPR-9742?redirect=false)** and commented  ``` private boolean supportsInternal(Class clazz, boolean checkForXmlRootElement) { ```  requires elements with `@XmlRootElement` - it should check for JaxbElement/support instances too, which carry the QName which provides the same info as a XmlRootElement.  ---  **Affects:** 3.0.7  **Issue Links:** - #12586 Checking for `@XmlRootElement` annotation should be made optional in Jaxb2Marshaller  (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2012-08-30T03:05:37Z","2019-01-13T07:03:16Z"
"","14442","ShallowEtagResponseWrapper not found [SPR-9809]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-9809](https://jira.spring.io/browse/SPR-9809?redirect=false)** and commented  Hi,  Recently upgraded form M1 to M2 of Spring 3.2. Since then, I am now getting this stack trace coming out:  [java] 13:51:34.177 [mpowa-web] WARN  [org.eclipse.jetty.servlet.ServletHandler] [517 ] - /api/login/token [java] java.lang.IllegalArgumentException: ShallowEtagResponseWrapper not found [java] 	at org.springframework.util.Assert.notNull(Assert.java:112) ~[spring-core-3.2.0.M2.jar:3.2.0.M2] [java] 	at org.springframework.web.filter.ShallowEtagHeaderFilter.updateResponse(ShallowEtagHeaderFilter.java:85) ~[spring-web-3.2.0.M2.jar:3.2.0.M2] [java] 	at org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:78) ~[spring-web-3.2.0.M2.jar:3.2.0.M2] [java] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:90) ~[spring-web-3.2.0.M2.jar:3.2.0.M2]  I'm using Async (my handler methods return Callable\).   ---  **Affects:** 3.2 M2","closed","status: declined,","spring-projects-issues","2012-09-19T06:06:52Z","2019-01-12T16:25:08Z"
"","14028","Exposure of setStatisticsEnabled/setSampledStatisticsEnabled causes cache not initialized exception when chaches are defined as spring beans. [SPR-9392]","**[David G](https://jira.spring.io/secure/ViewProfile.jspa?name=djgraff209)** opened **[SPR-9392](https://jira.spring.io/browse/SPR-9392?redirect=false)** and commented  The enhancement provided with #13497 causes an unintended side-effect during initialization of the cache via the factory.  When creating a cache by the factory bean, the method create cache attempts to set the properties statistics, sampledStatistics, and disabled before returning the cache. At the time this occurs the cache has not been registered with the cache manager and has not as yet been initialized. This is not a problem for disabled, but statistics & sampledStatistics both check to see if the cache has been initialized.  Would it be possible to move the code for the statistics & sampledStatistic up to afterPropertiesSet just before attempting to decorate the cache?  Obvious workaround would be to define the cache in the ehcache.xml configuration.  This unfortunately is not workable for my current project.  I have emailed Jeurgen Hoeller with regard to this as well.  ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?126252-EhCacheFactoryBean-amp-statistics-enablement  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dcb44264adc296522a5b8a010bcbf97fab971ee1, https://github.com/spring-projects/spring-framework/commit/08784f3ba932bb5dc754efd2e3e586a3b615fa3e","closed","in: core,","spring-projects-issues","2012-05-09T12:52:21Z","2019-01-11T12:38:55Z"
"","14625","AdvisorAdapterRegistrationTests fails intermittently under Java 7 [SPR-9991]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-9991](https://jira.spring.io/browse/SPR-9991?redirect=false)** and commented  #### Overview  Building with Maven under Java 6, the `testAdvisorAdapterRegistrationManagerNotPresentInContext()` method in `AdvisorAdapterRegistrationTests` consistently passes.  Building under Java 7 (e.g., JDK 1.7.0_06), it sometimes passes but most of the time throws the error detailed below. The failure is due to the test **running** under Java 7 and has nothing to do with the compilation.  #### Steps to recreate  Please note that to recreate the issue you **must** run at least both the tests in `AdvisorAdapterRegistrationTests` **together**. The problem has something to do with the interaction between the two tests. If you just run the `testAdvisorAdapterRegistrationManagerNotPresentInContext()` method on its own (in Eclipse) then it'll pass every time.  * In Eclipse select the `AdvisorAdapterRegistrationTests` class and say ""run as JUnit test"". You'll see it succeed. * Go to the _Run Configuration_ menu and under the JRE tab select an Alternate JRE of a Java 7 runtime. * Repeat the run using your updated run configuration. You'll see a test failure. * If you run it 10 times, you'll probably see it succeed one or two times.  #### ERROR Details  ``` java.lang.AssertionError: Should throw UnknownAdviceTypeException 	at org.junit.Assert.fail(Assert.java:93) 	at org.springframework.aop.framework.adapter.AdvisorAdapterRegistrationTests.testAdvisorAdapterRegistrationManagerNotPresentInContext(AdvisorAdapterRegistrationTests.java:49) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:601) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:292) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) ```  ---  **Affects:** 3.1.3  **Issue Links:** - #14413 Fix non-deterministic build failures under JDK 7 (_**""duplicates""**_) - #14413 Fix non-deterministic build failures under JDK 7","closed","in: core,","spring-projects-issues","2012-11-15T03:54:08Z","2019-01-12T16:47:32Z"
"","14619","Use parameter names during MBeanInfo assembly [SPR-9985]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-9985](https://jira.spring.io/browse/SPR-9985?redirect=false)** and commented  The behaviour of AbstractReflectiveMBeanInfoAssembler.getOperationParameters(method, beanKey) could be updated to use a org.springframework.core.LocalVariableTableParameterNameDiscoverer instead of returning the parameter names as p0, p1 etc.  I would imagine that the majority of internal corporate and open source applications typically compiled with class debug information available. Making use of this information would mean that JConsole would display meaningful method attribute names without the bother of using a `@ManagedAttribute` annotation.  ---  **Affects:** 3.1.3  **Issue Links:** - [INT-3110](https://jira.spring.io/browse/INT-3110) Message Bus Broken with SF 3.2.3 - #14849 Use parameter names during MBeanInfo assembly for MBean interfaces as well as `@ManagedOperation`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4dde7c4c160a5512dc474a230e3093e8d32354c9","closed","type: enhancement,","spring-projects-issues","2012-11-13T08:11:06Z","2019-01-13T07:02:11Z"
"","14231","container-type and other NMTOKEN attributes declared in spring-jms-3.1.xsd - consider using string pattern to allow for property placeholders [SPR-9597]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-9597](https://jira.spring.io/browse/SPR-9597?redirect=false)** and commented  The  tag's container-type attribute is declared in the XML schema as an NMTOKEN with allowable values of simple, default.  If I try to use a placeholder for the container-type attribute's value I get: cvc-datatype-valid.1.2.1: '${jmsListenerContainerTypeOverride}' is not a valid value for 'NMTOKEN'.  I have to either omit the value (defaults to ""default"") or specify the hardcoded string simple or default. Unfortunately, my use case is that I want to dynamically switch between the two depending on whether I'm running production code or JUnit tests. I'm using the MockRunner utility as a ""fake"" JMS provider within JUnit tests, and I want the message flow to occur in the main thread. I therefore do not want an execution thread pool in the JUnit test environment.  The workaround I'm using is to drop back to using a \ definition. I'd obviously prefer to use the jms namespace wherever possible.  Are there any disadvantages of swapping the datatype in the XSD to be a string or token and providing a pattern for validation? This would cause the validation to be done after the property placeholder had an opportunity to do its work.  ---  **Affects:** 3.1.2  **Issue Links:** - #15363 container-type enumeration attribute declared in spring-jms-3.2.xsd - consider removing the enumeration constraint to allow for property placeholders  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-07-16T08:14:37Z","2019-01-11T12:52:39Z"
"","14050","Java 7 only - PropertyPathFactoryBean requires a bean setter in version 3.1.1.RELEASE. Works fine under Java 6. [SPR-9414]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-9414](https://jira.spring.io/browse/SPR-9414?redirect=false)** and commented  Exactly the same example specified in issue #13589 now works fine in Java 6 (after the bug fix) but does not work under Java 7, specifically tested under Oracle JDK 1.7.0_04.  The workaround is also available in issue #13589.  ---  **Affects:** 3.1.1  **Sub-tasks:** - #14412 Backport ""Address various ExtendedBeanInfo bugs""  **Issue Links:** - #14663 Overhaul non-void JavaBean write method support  13 votes, 10 watchers","closed","has: votes-jira,","spring-projects-issues","2012-05-16T05:32:36Z","2019-01-11T12:43:16Z"
"","14530","YamlPropertiesFactoryBean and YamlMapFactoryBean [SPR-9897]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-9897](https://jira.spring.io/browse/SPR-9897?redirect=false)** and commented  Yaml is a nice human friendly way to specify maps and configuration externalizations (e.g. as an alternative to properties files).  the easiest way to consume it in Java would be as a Map (like a JSON object) or as Properties.  ---  **Issue Links:** - #16389 Move Spring Boot's YAML properties into the core framework. (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/580e52372f61e67d1fd627f544189646dcc18f48  11 votes, 10 watchers","closed","has: votes-jira,","spring-projects-issues","2012-10-20T04:36:59Z","2019-01-11T13:21:25Z"
"","14244","Initialize ServletContext and ServletConfig property sources eagerly in FrameworkServlet [SPR-9610]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-9610](https://jira.spring.io/browse/SPR-9610?redirect=false)** and commented  ServletContext and ServletConfig properties are added too late in FrameworkServlet initializer.  I wanted to use the Environment in an ApplicationContextInitializer including the property sources from web.xml (as advertised in StandardServletEnvironment), but StandardServletEnvironment isn't initialized until the refresh starts.  The workaround is easy - just call  ``` WebApplicationContextUtils.initServletPropertySources(     applicationContext.getEnvironment().getPropertySources(),     servletContext, applicationContext.getServletConfig() ); ```  in the ApplicationContextInitializer, for example: https://github.com/cloudfoundry/uaa/blob/master/common/src/main/java/org/cloudfoundry/identity/uaa/config/YamlServletProfileInitializer.java#L58  ---  **Affects:** 3.1.2  **Issue Links:** - #14075 Eliminate package cycle between ContextLoader and WebApplicationContextUtils","closed","type: bug,","spring-projects-issues","2012-07-20T08:09:01Z","2019-01-11T12:57:22Z"
"","14139","Environment (if provided by an ApplicationContext) should be able to convert String->Resource [SPR-9505]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-9505](https://jira.spring.io/browse/SPR-9505?redirect=false)** and commented  Environment (if provided by an ApplicationContext) should be able to convert String->Resource.  Example, today I have to inject a ResourceLoader explicitly:  ``` public class ExampleConfiguration { 	 	@Autowired 	private Environment environment; 	 	@Autowired 	private ResourceLoader resourceLoader; 	 	@PostConstruct 	protected void initialize() { 		ResourceDatabasePopulator populator = new ResourceDatabasePopulator(); 		populator.addScript(resourceLoader.getResource(environment.getProperty(""batch.schema.script""))); 		DatabasePopulatorUtils.execute(populator , dataSource()); 	} ... ```  It would be better to be able to do this  ``` public class ExampleConfiguration { 	 	@Autowired 	private Environment environment; 	 	@PostConstruct 	protected void initialize() { 		ResourceDatabasePopulator populator = new ResourceDatabasePopulator(); 		populator.addScript(environment.getProperty(""batch.schema.script"", Resource.class)); 		DatabasePopulatorUtils.execute(populator , dataSource()); 	} ... ```    ---  **Affects:** 3.1.1  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-06-13T08:24:15Z","2015-09-09T12:16:00Z"
"","14135","aopalliance jar is not really optional for most use case involving spring-aop [SPR-9501]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-9501](https://jira.spring.io/browse/SPR-9501?redirect=false)** and commented  aopalliance jar is not really optional for most use case involving spring-aop, but it has been marked optional in the aop pom.xml.  All I was trying to do was use  and it doesn't seem fair to simple use cases like that to have to pull in aopalliance explicitly (plus this is a big change from previous versions).   ---  **Affects:** 3.2 M1","closed","in: core,","spring-projects-issues","2012-06-13T03:45:33Z","2012-06-13T05:01:55Z"
"","14134","Cannot create application context with web components when Servlet 3.0 is not present on classpath [SPR-9500]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-9500](https://jira.spring.io/browse/SPR-9500?redirect=false)** and commented  Create a new web template project from the spring-framework-issues repo, and try and launch it in Tomcat 6.  Or alternatively try and create an application context in a test case:  ``` new GenericXmlApplicationContext(""file:./src/main/webapp/WEB-INF/spring/servlet-context.xml""); ```  Stacktrace:  ``` java.lang.NoClassDefFoundError: javax/servlet/AsyncListener         at java.lang.ClassLoader.defineClass1(Native Method)         at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631)         at java.lang.ClassLoader.defineClass(ClassLoader.java:615)         at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)         at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)         at java.net.URLClassLoader.access$000(URLClassLoader.java:58)         at java.net.URLClassLoader$1.run(URLClassLoader.java:197)         at java.security.AccessController.doPrivileged(Native Method)         at java.net.URLClassLoader.findClass(URLClassLoader.java:190)         at java.lang.ClassLoader.loadClass(ClassLoader.java:306)         at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)         at java.lang.ClassLoader.loadClass(ClassLoader.java:247)         at java.lang.Class.getDeclaredMethods0(Native Method)         at java.lang.Class.privateGetDeclaredMethods(Class.java:2427)         at java.lang.Class.getDeclaredMethods(Class.java:1791)         at org.springframework.core.type.StandardAnnotationMetadata.hasAnnotatedMethods(StandardAnnotationMetadata.java:159)         at org.springframework.context.annotation.ConfigurationClassUtils.isLiteConfigurationCandidate(ConfigurationClassUtils.java:104)         at org.springfram ... ```    ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3d00696a4607606fec254a84faf13566421c2fd","closed","type: bug,","spring-projects-issues","2012-06-13T03:11:57Z","2012-07-18T10:17:48Z"
"","14133","MapToMapConverter cannot distinguish MultiValueMap in target [SPR-9499]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-9499](https://jira.spring.io/browse/SPR-9499?redirect=false)** and commented  It seems that MapToMapConverter cannot distinguish MultiValueMap in target, so it, or one of its converter helpers, will use add() and pass in a List to a map value (which is a List itself) instead of using addAll() (or the equivalent).  ---  **Affects:** 3.1.1  **Issue Links:** - #15601 Introduce ResolvableType Class (_**""depends on""**_) - #16903 Provider declaration for `@Value` method argument fails with TypeMismatchException - #15634 TypeDescriptor can no longer be programatically created with null generics","closed","in: core,","spring-projects-issues","2012-06-13T02:12:16Z","2019-01-13T07:04:17Z"
"","14132","CollectionFactory should be aware of MultiValueMap [SPR-9498]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-9498](https://jira.spring.io/browse/SPR-9498?redirect=false)** and commented  CollectionFactory is used internally in type conversion, and it makes a guess about the type of map to create if it is asked to create an instance of an interface.  Spring's own MultiValueMap is not covered, so you can get a ""map interface not supported"" exception during bean creation (which so far I have only personally seen heavily masked by BeanCreationException or UnsatisfiedDependencyException, but I have seen a stack trace from a user that has the right message - see [SECOAUTH-277](https://jira.spring.io/browse/SECOAUTH-277)).   ---  **Affects:** 3.1.1  **Reference URL:** https://github.com/SpringSource/spring-framework/pull/94","closed","in: core,","spring-projects-issues","2012-06-13T02:08:15Z","2012-10-31T11:34:00Z"
"","14129","MethodResolver results are cached in SpEL expressions, so changing the context at evaluation time has no effect [SPR-9495]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-9495](https://jira.spring.io/browse/SPR-9495?redirect=false)** and commented  MethodResolver results are cached in SpEL expressions, so changing the context has no effect.  It's nice that there is some control over MethodResolver in StandardEvaluationContext, but because the results are cached in the expression itself (deep in MethodReference so no options I can see to override), they only have an effect once.  Users are confused because they set a MethodResolver which apparently is ignored when passed into an expression at evaluation time:  ``` Expression expression = parser.parseExpression(""...""); StandardEvaluationContext context = new StandardEvaluationContext(); context.addMethodResolver(new SpiffyMethodResolver()); assertTrue(expression.getValue(context, Boolean.class)); context = new StandardEvaluationContext(); context.addMethodResolver(new CrappyMethodResolver()); assertFalse(expression.getValue(context, Boolean.class)); // FAIL! (it's using the result from the old resolver) ```  ---  **Affects:** 3.1.1  **Issue Links:** - #15085 SPEL and Enum variable resolution using wrong cachedExecutor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c5aa0d12b04f92feeebafa111d3ac98797d26fb0, https://github.com/spring-projects/spring-framework/commit/b7ff26aafb76ebf73f9330f64b7636336a99d814, https://github.com/spring-projects/spring-framework/commit/baa698eddfa5d5cb842a52b9fe183bbde8eb3f29, https://github.com/spring-projects/spring-framework/commit/6de67cc2df9fc888ba00980b5f80b0019e38764c","closed","in: core,","spring-projects-issues","2012-06-12T07:31:23Z","2019-01-11T13:04:39Z"
"","14004","Update reference documentation on handling 401 response in the RestTemplate [SPR-9367]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-9367](https://jira.spring.io/browse/SPR-9367?redirect=false)** and commented  It is very difficult (impossible) to handle a 401 response in the RestTemplate with default settings (Documentation?).  In fact it is possible, but you have to supply an error handler **and** a request factory.  The error handler was obvious, but the problem is that the default request factory uses java.net which can throw HttpRetryException when you try to look at the status code of the response (despite it being obviously available).  The solution is to use HttpComponentsClientHttpRequestFactory.  E.g.  ``` template.setRequestFactory(new HttpComponentsClientHttpRequestFactory()); template.setErrorHandler(new DefaultResponseErrorHandler() { 	public boolean hasError(ClientHttpResponse response) throws IOException { 		HttpStatus statusCode = response.getStatusCode(); 		return statusCode.series() == HttpStatus.Series.SERVER_ERROR; 	} }); ```  With these settings then a 401 JSON response will be extracted and converted nicely if you just use `template.exchange()` expecting a JSON response in the 200 case.  This is not exactly clear from the user guide, and HttpComponentsClientHttpRequestFactory isn't even mentioned - the deprecated CommonsClientHttpRequestFactory is (I'm looking at http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html).  ---  **Affects:** 3.1.1  **Issue Links:** - #21321 RestTemplate - providing custom ResponseErrorHandler does not prevent an error with http 401 responses (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/24ffa5a706d1b8538ff1359c635905f0f9af9fb5","closed","type: enhancement,","spring-projects-issues","2012-05-02T07:15:50Z","2019-01-11T12:40:32Z"
"","14386","AcceptHeaderRequestCallback ignores charset [SPR-9752]","**[Daniel Mitterdorfer](https://jira.spring.io/secure/ViewProfile.jspa?name=dmitter)** opened **[SPR-9752](https://jira.spring.io/browse/SPR-9752?redirect=false)** and commented  The current implementation AcceptHeaderRequestCallback#doWithRequest(ClientHttpRequest) checks the   ---  **Affects:** 3.1 GA  1 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2012-09-04T06:00:57Z","2019-01-12T16:25:16Z"
"","14235","IllegalArgumentException when RequestMappingHandlerAdapter invokes a method on a proxied bean [SPR-9601]","**[Daniel Gredler](https://jira.spring.io/secure/ViewProfile.jspa?name=gredler2)** opened **[SPR-9601](https://jira.spring.io/browse/SPR-9601?redirect=false)** and commented  As a result of the changes [1] made to RequestMappingHandlerMapping.isHandler(Class) to make it detect both Controller and RequestMapping annotations (see #14010), one of our HttpRequestHandler implementations that was working in 3.1.1 no longer works in 3.1.2:  ``` @RequestMapping(""/console"") @Transactional public class ConsoleHandler implements HttpRequestHandler, ApplicationContextAware {      ...      @RequestMapping(method = RequestMethod.GET)     public void handleRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {         ...     }      ... } ```  In 3.1.1, this handler was mapped by the DefaultAnnotationHandlerMapping, which was able to forward HTTP requests to this handler. However, because of the above change, in 3.1.2 this handler is mapped by the RequestMappingHandlerMapping, which throws the following exception when it tries to actually handle an HTTP request:  ``` java.lang.IllegalArgumentException: object is not an instance of declaring class HandlerMethod details:  Controller [$Proxy109] Method [public void com.dpgm.connect.framework.server.remoting.ConsoleHandler.handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException,java.io.IOException] Resolved arguments:  [0] [type=org.eclipse.jetty.server.Request] [value=(GET /misc/console)@10144214 org.eclipse.jetty.server.Request@9ac9d6] [1] [type=org.eclipse.jetty.server.Response] [value=HTTP/1.1 200  ]       at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:217)       at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:126)       at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:96)       at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:617)       at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:578)       at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)       at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:923)       at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852)       at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)       at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)       at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)       at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)       at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:558)       at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:488)       at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)       at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:520)       at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:233)       at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:973)       at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:417)       at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:192)       at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:907)       at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)       at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:47)       at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)       at org.eclipse.jetty.server.Server.handle(Server.java:350)       at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:442)       at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:924)       at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:582)       at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:218)       at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:51)       at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:586)       at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:44)       at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:598)       at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:533)       at java.lang.Thread.run(Unknown Source) Caused by: java.lang.IllegalArgumentException: object is not an instance of declaring class       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)       at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)       at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)       at java.lang.reflect.Method.invoke(Unknown Source)       at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:213)       ... 34 more ```  I'm attaching the debug logs of the server startup + one HTTP request, one log file using Spring 3.1.1 and one log file using Spring 3.1.2. I've massaged the logs a little bit (removed most timestamps, normalized the hashcodes in the toStrings) so that it's easier to see the differences if you diff the files.  [1] https://github.com/SpringSource/spring-framework/commit/2fa0e63e5ab84ac964c55a28000104d3855c886c  ---  **Affects:** 3.1.2  **Attachments:** - [console-out-3.1.1.txt](https://jira.spring.io/secure/attachment/20110/console-out-3.1.1.txt) (_675.28 kB_) - [console-out-3.1.2.txt](https://jira.spring.io/secure/attachment/20109/console-out-3.1.2.txt) (_687.57 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7c6a1a1bf0db6b428344ec6797a9152c5f4f6d30","closed","status: declined,","spring-projects-issues","2012-07-18T12:12:35Z","2019-01-13T07:03:47Z"
"","13944","Fail to parse date format with timezone name [SPR-9306]","**[Dan Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=dd_lpg)** opened **[SPR-9306](https://jira.spring.io/browse/SPR-9306?redirect=false)** and commented  I think this issue is similar with #11176. In a Spring MVC's environment, creating a form backing object that contains a java.util.Date and a java.util.Calendar fields annotated with `@DateTimeFormat`(style=""FF""),The corresponding JSP can be a standard input element, as  and can display the date and time correctly. But submiting the form will result the following error:  ```none Field error in object 'person' on field 'birthDate': rejected value [Thursday, April 5, 2012 11:17:51 PM +08:00]; codes [typeMismatch.person.birthDate,typeMismatch.birthDate,typeMismatch.java.util.Date,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [person.birthDate,birthDate]; arguments []; default message [birthDate]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Date' for property 'birthDate'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""Thursday, April 5, 2012 11:17:51 PM +08:00"" from type 'java.lang.String' to type 'java.util.Date'; nested exception is java.lang.IllegalArgumentException: Invalid format: ""Thursday, April 5, 2012 11:17:51 PM +08:00"" is malformed at ""+08:00""] Field error in object 'person' on field 'hireDate': rejected value [Thursday, April 5, 2012 11:17:51 PM +08:00]; codes [typeMismatch.person.hireDate,typeMismatch.hireDate,typeMismatch.java.util.Calendar,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [person.hireDate,hireDate]; arguments []; default message [hireDate]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Calendar' for property 'hireDate'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""Thursday, April 5, 2012 11:17:51 PM +08:00"" from type 'java.lang.String' to type 'java.util.Calendar'; nested exception is java.lang.IllegalArgumentException: Invalid format: ""Thursday, April 5, 2012 11:17:51 PM +08:00"" is malformed at ""+08:00""] ```  ---  **Affects:** 3.0.5","closed","status: bulk-closed,","spring-projects-issues","2012-04-05T08:31:33Z","2019-01-12T03:48:44Z"
"","14388","LinkedCaseInsensitiveMap duplicate element with put() [SPR-9754]","**[Dan Iele](https://jira.spring.io/secure/ViewProfile.jspa?name=dani_bs)** opened **[SPR-9754](https://jira.spring.io/browse/SPR-9754?redirect=false)** and commented  I try to use LinkedCaseInsensitiveMap and I expected that using put() method only one element will be created, but it is not true:  public static void main(String[] args) { LinkedCaseInsensitiveMap\ map = new LinkedCaseInsensitiveMap\(); map.put(""aa"", ""a1""); map.put(""Aa"", ""a2""); map.put(""aA"", ""a3""); map.put(""AA"", ""a4""); System.out.println(map); }  Output: {aa=a1, Aa=a2, aA=a3, AA=a4}","closed","in: core,","spring-projects-issues","2012-09-04T13:02:12Z","2012-10-31T11:33:59Z"
"","14327","IllegalArgumentException parsing several Accept header variations [SPR-9693]","**[Dan Checkoway](https://jira.spring.io/secure/ViewProfile.jspa?name=dcheckoway)** opened **[SPR-9693](https://jira.spring.io/browse/SPR-9693?redirect=false)** and commented  Attached is a file containing several variations of Accept header values that cause Spring to break.  There was a prior ticket open for this, which dealt with single-quoted ""profile"" URLs in Accept headers.  That is apparently fixed in 3.2.  But these other variations are still broken.  The test cases attached are all actual Accept headers we have seen ""in the wild"" coming from mobile devices.  Here are some examples of the types of exceptions we're seeing:  ``` java.lang.IllegalArgumentException: 'mediaType' must not be empty         at org.springframework.util.Assert.hasLength(Assert.java:136)         at org.springframework.http.MediaType.parseMediaType(MediaType.java:638)         at org.springframework.http.MediaType.parseMediaTypes(MediaType.java:691)         at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getAcceptedMediaTypes(ProducesRequestCondition.java:214)         at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.access$4(ProducesRequestCondition.java:211)         at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition$ProduceMediaTypeExpression.matchMediaType(ProducesRequestCondition.java:283)         at org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression.match(AbstractMediaTypeExpression.java:63)         at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getMatchingCondition(ProducesRequestCondition.java:163)         at org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(RequestMappingInfo.java:175)         at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:64)         at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:1)         at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.addMatchingMappings(AbstractHandlerMethodMapping.java:284)         at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:251)         at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:216)         at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:1)         at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:288)         at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1063)         at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1048)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:886)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) ```  Or...  ``` java.lang.IllegalArgumentException: "";q=0.5"" does not contain '/'         at org.springframework.http.MediaType.parseMediaType(MediaType.java:648)         at org.springframework.http.MediaType.parseMediaTypes(MediaType.java:691)         at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getAcceptedMediaTypes(ProducesRequestCondition.java:214)         at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.access$4(ProducesRequestCondition.java:211)         at org.springframework.web.servlet.mvc.condition.ProducesRequestCondition$ProduceMediaTypeExpression.matchMediaType(ProducesRequestCondition.java:283) ... ```  ---  **Affects:** 3.1.1  **Attachments:** - [accept-header-test-cases.txt](https://jira.spring.io/secure/attachment/20202/accept-header-test-cases.txt) (_6.45 kB_)  **Issue Links:** - #13781 Invalid MIME-type causes a 500 error  0 votes, 5 watchers","closed","in: web,","spring-projects-issues","2012-08-16T07:44:56Z","2019-01-12T16:47:44Z"
"","14116","DataBinder's setAutoGrowNestedPaths throws an ArrayIndexOutOfBounds exception when an array needs to be created [SPR-9481]","**[Dale Peakall](https://jira.spring.io/secure/ViewProfile.jspa?name=dale_peakall)** opened **[SPR-9481](https://jira.spring.io/browse/SPR-9481?redirect=false)** and commented  The documentation for DataBinder suggests that it can ""auto-grow"" arrays and collections as well as other beans.  However, when expected to ""auto-grow"" an array, instead an ArrayIndexOutOfBounds exception is thrown.  See example below.  ```java  (see next comment) ```    ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2012-06-07T04:00:19Z","2019-01-12T02:47:58Z"
"","14499","Incomplete initialization of FactoryBean within @Bean method [SPR-9866]","**[D.T.Rajendra Prasad](https://jira.spring.io/secure/ViewProfile.jspa?name=dtrprasad)** opened **[SPR-9866](https://jira.spring.io/browse/SPR-9866?redirect=false)** and commented  I have  ``` @Configuration @PropertySource(""classpath:jdbc.properties"") public class AppOrmConfig {   @Autowired   Environment env;      /* @Bean     public WishesDAO wishService() {      return new WishesDAO(sessionFactory());     }        */           @Bean     public SessionFactory sessionFactory() {     // wire up a session factory     AnnotationSessionFactoryBean asFactoryBean =                      new AnnotationSessionFactoryBean();     asFactoryBean.setDataSource(dataSource());     Properties props = new Properties();     props.put(""hibernate.dialect"",""org.hibernate.dialect.Oracle10gDialect"");     props.put(""hibernate.cglib.use_reflection_optimizer"",""true"");     props.put(""hibernate.format_sql"", ""true"");     asFactoryBean.setPackagesToScan(new String[]{""com.htc.spring3.orm.annons""});     asFactoryBean.setHibernateProperties(props);          asFactoryBean.setSchemaUpdate(true);     System.out.println(""HHH""+asFactoryBean);          SessionFactory sf = asFactoryBean.getObject();          System.out.println(""%%%%%%""+sf);     return sf;     }               @Bean     public DataSource dataSource() {      DriverManagerDataSource ds =              new DriverManagerDataSource();      ds.setDriverClassName(env.getProperty(""driver""));      ds.setUrl(env.getProperty(""url""));      ds.setUsername(env.getProperty(""username""));      ds.setPassword(env.getProperty(""password""));      System.out.println(""***""+ds);      return ds;     }          /* @Bean     public HibernateTransactionManager transactionManager() {         return new HibernateTransactionManager(sessionFactory());     }   @Bean     public PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor() {         return new PersistenceExceptionTranslationPostProcessor();     }    */      } ```  my client is  ``` ApplicationContext factory =       new AnnotationConfigApplicationContext(AppOrmConfig.class);         SessionFactory sf =              (SessionFactory)factory.getBean(org.hibernate.SessionFactory.class); ```  output is `null`  ``` 0    [main] INFO  org.springframework.context.annotation.AnnotationConfigApplicationContext  - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@97b7b1: startup date [Tue Oct 09 07:35:06 IST 2012]; root of context hierarchy 1109 [main] INFO  org.springframework.beans.factory.support.DefaultListableBeanFactory  - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@96a680: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,appOrmConfig,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0,dataSource,sessionFactory]; root of factory hierarchy 1344 [main] INFO  org.springframework.jdbc.datasource.DriverManagerDataSource  - Loaded JDBC driver: oracle.jdbc.driver.OracleDriver ***org.springframework.jdbc.datasource.DriverManagerDataSource@bf8935 HHHorg.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean@860dab %%%%%%null ```  please look into this   ---  **Affects:** 3.2 M2","closed","status: invalid,","spring-projects-issues","2012-10-08T19:06:09Z","2019-01-12T05:27:59Z"
"","13985","Java 1.7 Locale serialization fails with Hessian [SPR-9347]","**[Cédric Laruelle](https://jira.spring.io/secure/ViewProfile.jspa?name=chtig)** opened **[SPR-9347](https://jira.spring.io/browse/SPR-9347?redirect=false)** and commented  I opened a bug at caucho also (http://bugs.caucho.com/view.php?id=5046), but I'm not sure it's the right place and I'm not sure they are handled. When upgrading jvm to 1.7.0 (on both sides at the same time, client and server), we have crashes on Locale object serialization/deserialization in Hessian. We use Hessian 4.0.7 (last version). The root cause of the exception is Caused by: java.lang.NullPointerException at java.util.Locale.readResolve(Locale.java:2096) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at com.caucho.hessian.io.UnsafeDeserializer.resolve(UnsafeDeserializer.java:291) at com.caucho.hessian.io.UnsafeDeserializer.readMap(UnsafeDeserializer.java:217)   ---  **Affects:** 3.1 GA","closed","status: invalid,","spring-projects-issues","2012-04-26T03:31:44Z","2019-01-12T05:28:44Z"
"","14459","PathExtensionContentNegotiationStrategy depends on Servlet 3 specific method [SPR-9826]","**[Craig Walls](https://jira.spring.io/secure/ViewProfile.jspa?name=habuma)** opened **[SPR-9826](https://jira.spring.io/browse/SPR-9826?redirect=false)** and commented  Just discovered a strange compatibility issue with Spring 3.2. Specifically, the new PathExtensionContentNegotiationStrategy calls getServletContext() on the servlet request. That method is new in Servlet 3.0. Consequently, that won't work on servlet containers that aren't Servlet 3.0 compatible yet.  The way we found this is that I bumped up Greenhouse (which is currently running on an older, pre-Servlet 3.0 version of tcServer) to depend on Spring 3.2 (for different reasons) and discovered that resource mapping isn't working right. When requesting a CSS or anything else mapped under /resources (using ), the server sends an HTTP 500 and the stack trace includes the following:  ``` java.lang.NoSuchMethodError: javax.servlet.http.HttpServletRequest.getServletContext()Ljavax/servlet/ServletContext; org.springframework.web.accept.PathExtensionContentNegotiationStrategy.handleNoMatch(PathExtensionContentNegotiationStrategy.java:118) org.springframework.web.accept.AbstractMappingContentNegotiationStrategy.resolveMediaTypes(AbstractMappingContentNegotiationStrategy.java:53) org.springframework.web.accept.ContentNegotiationManager.resolveMediaTypes(ContentNegotiationManager.java:102) org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getAcceptedMediaTypes(ProducesRequestCondition.java:238) org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.access$000(ProducesRequestCondition.java:47) org.springframework.web.servlet.mvc.condition.ProducesRequestCondition$ProduceMediaTypeExpression.matchMediaType(ProducesRequestCondition.java:305) org.springframework.web.servlet.mvc.condition.AbstractMediaTypeExpression.match(AbstractMediaTypeExpression.java:69) org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getMatchingCondition(ProducesRequestCondition.java:185) org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(RequestMappingInfo.java:175) org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:68) org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:50) org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.addMatchingMappings(AbstractHandlerMethodMapping.java:278) org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:245) org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:212) org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:55) org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:297) org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1091) org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1076) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:896) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:915) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:804) ```    ---  **Affects:** 3.2 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b30ffd5222e41f703b9b48b30f562cca7a8f5cd","closed","type: bug,","spring-projects-issues","2012-09-24T11:35:49Z","2012-11-04T06:54:07Z"
"","13929","location param shoud support SpEL [SPR-9291]","**[Corrado Alesso](https://jira.spring.io/secure/ViewProfile.jspa?name=namero999)** opened **[SPR-9291](https://jira.spring.io/browse/SPR-9291?redirect=false)** and commented   location parameter is not configurable with an expression like    This will result in a location value of ""file:#{settings['resPath']}"" when instead #{settings['resPath']} should be substitued with the related value.  ---  **Affects:** 3.1.1  **Issue Links:** - #13378  is not configurable by  - #14481 Support SpEL in mvc:mapping tags  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-30T15:53:02Z","2019-01-11T12:48:09Z"
"","13829","Multipart request not supported on WebSphere 8.0 [SPR-9191]","**[Condor](https://jira.spring.io/secure/ViewProfile.jspa?name=condor)** opened **[SPR-9191](https://jira.spring.io/browse/SPR-9191?redirect=false)** and commented  WebSphere 8.0 doesn't seem to support multipart requests as long as the DispatcherServlet is not marked with `@MultipartConfig`.  I always get the following error:  [2-3-12 10:06:23:087 CET] 00000033 servlet       E com.ibm.ws.webcontainer.servlet.ServletWrapper service SRVE0014E: Uncaught service() exception root cause DispatcherServlet: org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.lang.UnsupportedOperationException: SRVE8020E: Servlet does not accept multipart requests at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:894) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:789) at javax.servlet.http.HttpServlet.service(HttpServlet.java:595) at javax.servlet.http.HttpServlet.service(HttpServlet.java:668) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1188) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:763) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:454) at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1020) at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:87) at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:895) at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1662) at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:195) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:452) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:511) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:305) at com.ibm.ws.http.channel.inbound.impl.HttpICLReadCallback.complete(HttpICLReadCallback.java:83) at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:165) at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217) at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161) at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138) at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204) at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775) at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1659) Caused by: org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.lang.UnsupportedOperationException: SRVE8020E: Servlet does not accept multipart requests at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.\(StandardMultipartHttpServletRequest.java:68) at org.springframework.web.multipart.support.StandardServletMultipartResolver.resolveMultipart(StandardServletMultipartResolver.java:58) at org.springframework.web.servlet.DispatcherServlet.checkMultipart(DispatcherServlet.java:1020) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:883) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:852) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) ... 24 more Caused by: java.lang.UnsupportedOperationException: SRVE8020E: Servlet does not accept multipart requests at com.ibm.ws.webcontainer.srt.SRTServletRequest.prepareMultipart(SRTServletRequest.java:3425) at com.ibm.ws.webcontainer.srt.SRTServletRequest.getParts(SRTServletRequest.java:3408) at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.\(StandardMultipartHttpServletRequest.java:57) ... 29 more  (replacing StandardServletMultipartResolver with CommonsMultipartResolver doesn't have any effect)  As a workaround I created a DispatcherServlet descendant with a `@MultipartConfig` annotation, which worked correctly.   ---  **Affects:** 3.0.7, 3.1.1","closed","status: declined,","spring-projects-issues","2012-03-02T01:21:47Z","2019-01-12T16:36:43Z"
"","14602","DeferredResult should permit being set from within the original request thread [SPR-9968]","**[Christopher Hunt](https://jira.spring.io/secure/ViewProfile.jspa?name=huntc)** opened **[SPR-9968](https://jira.spring.io/browse/SPR-9968?redirect=false)** and commented  DeferredResult does not permit a value being set prior to the DeferredResult being returned by the controller's method.  This can be a problem given that some api can behave synchronously or asynchronously, and it is unknown whether the synchronous behaviour will occur. For example:  ``` final DeferredResult r = new DeferredResult(); doSomeApi(new Runnable() {   public void run() {     // This could be called within the calling thread or by another thread.     r.setResult(""someresult"");   } } return r; ```  My recommendation is to retain any results processed by DeferredResult and act upon them once a result handler is associated.   ---  **Affects:** 3.2 M2","closed","in: web,","spring-projects-issues","2012-11-07T02:29:28Z","2019-01-12T16:47:35Z"
"","14260","Async support [SPR-9626]","**[Christopher Hunt](https://jira.spring.io/secure/ViewProfile.jspa?name=huntc)** opened **[SPR-9626](https://jira.spring.io/browse/SPR-9626?redirect=false)** and commented  Spring Test MVC should support the new async functionality offerred via returning Callable and DeferredResult   ---  **Affects:** 3.2 M1","closed","type: enhancement,","spring-projects-issues","2012-07-23T14:16:07Z","2012-07-23T14:33:56Z"
"","13884","Changes in the DefaultPersistenceUnitManager from 3.0 to 3.1 make it impossible to extend it [SPR-9246]","**[Christofer Dutz](https://jira.spring.io/secure/ViewProfile.jspa?name=chrisdutz)** opened **[SPR-9246](https://jira.spring.io/browse/SPR-9246?redirect=false)** and commented  I implemented a custom PersistenceUnitManager to allow easy merging of persistence-contexts. Unfortunately I cannot use this with Spring 3.1 anymore. Unfortunately the class is implemented in a way, that makes it impossible to extend it in a sensible way.  Here a link to my custom implementation and it's description: https://dev.c-ware.de/confluence/display/PUBLIC/Multiple+persistence.xml+in+a+multi-module+application  The problem is that the method: preparePersistenceUnitInfos is throwing an IllegalStateException because of multiple persistence-contexts with the same name. Because persistenceUnitInfoNames and persistenceUnitInfos are private, I have no way of overriding the functionality of that class without cloning the entire class, which would be really ugly.  ---  **Affects:** 3.1 GA  **Issue Links:** - #13565 DefaultPersistenceUnitManager must not reject multiple PersistenceUnits with the same name eagerly (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-03-15T08:08:42Z","2019-01-11T12:46:32Z"
"","14559","Performance of multiple consecutive calls to HttpInvoker is considerably slower with JDK 7 and calls seem delayed [SPR-9926]","**[Christian Ziegner](https://jira.spring.io/secure/ViewProfile.jspa?name=christianziegner)** opened **[SPR-9926](https://jira.spring.io/browse/SPR-9926?redirect=false)** and commented  Hi there,  I noticed a strange behavior of HttpInvoker calls when upgrading our application from JDK 6 update 27 to JDK 7 update 4 with an otherwise unchanged system.  Consecutive calls to the HttpInvoker server seem to be delayed by almost exactly one second. The first call is answered within several milliseconds and all following calls take about 1015 ms in the minimalistic example I attached. Running the example on JDK 6 is blazing fast and no delay is visible.  Usage:  The example consists of a server and a client component and can be build using ""mvn install"" from the top level directory ""httpinvoker"". Thus, executable Jars in the target directories of server and client are generated as well to be able to run the example standalone.  server: java -jar httpinvoker.server-1.0.0-SNAPSHOT-jar-with-dependencies.jar client: java -jar httpinvoker.client-1.0.0-SNAPSHOT-jar-with-dependencies.jar  A colleague of mine mentioned this problem in http://stackoverflow.com/questions/12968281/spring-http-invoker-waits-one-second-before-processing-next-request  Cheers, Christian   ---  **Affects:** 3.0.7, 3.1.2  **Attachments:** - [httpinvoker.zip](https://jira.spring.io/secure/attachment/20591/httpinvoker.zip) (_7.46 kB_)  1 votes, 3 watchers","closed","status: invalid,","spring-projects-issues","2012-10-26T06:22:43Z","2019-01-12T05:27:48Z"
"","14505","MBeanExporter should be able to convert all return types to Strings [SPR-9872]","**[Christian Spriegel](https://jira.spring.io/secure/ViewProfile.jspa?name=horschi)** opened **[SPR-9872](https://jira.spring.io/browse/SPR-9872?redirect=false)** and commented  I'm exposing many internal functions via a Simple ManagedOperation annotation, which is quite convenient. Unfortunetaly many of these functions return types which are only available on my server application, but not in my JConsole.  It would be nice if MBeanExporter would have a flag that enables it to call toString on all return types.  I implemented this locally by changing: - MBeanExporter: made createModelMBean() always a SpringModelMBean - MBeanExporter: hand over exposeManagedResourceClassLoader and returnTypeToStringEnabled (new property) to SpringModelMBean - SpringModelMBean: changed invoke to this:  ```     public Object invoke(final String opName, final Object[] opArgs, final String[] sig) throws MBeanException, ReflectionException {         Object retobj;         if (this.exposeManagedResourceClassLoader) { // exposeManagedResourceClassLoader from MBeanExporter             final ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();             try {                 Thread.currentThread().setContextClassLoader(this.managedResourceClassLoader);                 retobj = super.invoke(opName, opArgs, sig);             }             finally { 				Thread.currentThread().setContextClassLoader(currentClassLoader);             }         }         else             retobj = super.invoke(opName, opArgs, sig);  		if(returnTypeToStringEnabled) { // new option from MBeanExporter 		    final StringBuilder sb = new StringBuilder(); 		    toString(retobj, sb); // some toString that prints stuff nicely 		    return sb.toString(); 		} 		else { 			return retobj; 		}     } ```  I could prepare a proper patch if the proposal sounds reasonable to you.   --- No further details from [SPR-9872](https://jira.spring.io/browse/SPR-9872?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-10-10T15:22:04Z","2013-02-04T17:03:00Z"
"","14149","Spring 3.x dependency org.hibernate#com.springsource.org.hibernate.validator;4.1.0.GA: not found [SPR-9515]","**[christian ruffy](https://jira.spring.io/secure/ViewProfile.jspa?name=cjruffy)** opened **[SPR-9515](https://jira.spring.io/browse/SPR-9515?redirect=false)** and commented  Using Ivy I am trying to resolve Spring 3.0.6 for use with Camel 2.9.1, however Spring will not resolve becuase of the missing dependency org.hibernate#com.springsource.org.hibernate.validator;4.1.0.GA: not found. This dependency is listed in the mvnrepository but if you go to download manually the link cannot be found.  [ivy:resolve] [ivy:resolve] :: problems summary :: [ivy:resolve] :::: WARNINGS [ivy:resolve] 		module not found: org.hibernate#com.springsource.org.hibernate.validator;4.1.0.GA [ivy:resolve] 	==== libraries: tried [ivy:resolve]   - artifact org.hibernate#com.springsource.org.hibernate.validator;4.1.0.GA!com.springsource.org.hibernate.validator.jar: [ivy:resolve] 	  C:\WINDOWS\system32\config\systemprofile\.hudson\jobs\BankFusionIntegrationWeb\workspace/repository/com.springsource.org.hibernate.validator-4.1.0.GA.jar [ivy:resolve] 	==== ibiblio: tried [ivy:resolve] 	  http://repo1.maven.org/maven2/org/hibernate/com.springsource.org.hibernate.validator/4.1.0.GA/com.springsource.org.hibernate.validator-4.1.0.GA.pom [ivy:resolve]   - artifact org.hibernate#com.springsource.org.hibernate.validator;4.1.0.GA!com.springsource.org.hibernate.validator.jar: [ivy:resolve] 	  http://repo1.maven.org/maven2/org/hibernate/com.springsource.org.hibernate.validator/4.1.0.GA/com.springsource.org.hibernate.validator-4.1.0.GA.jar [ivy:resolve] 		:::::::::::::::::::::::::::::::::::::::::::::: [ivy:resolve] 		::          UNRESOLVED DEPENDENCIES         :: [ivy:resolve] 		:::::::::::::::::::::::::::::::::::::::::::::: [ivy:resolve] 		:: org.hibernate#com.springsource.org.hibernate.validator;4.1.0.GA: not found [ivy:resolve] 		:::::::::::::::::::::::::::::::::::::::::::::: [ivy:resolve]    ---  **Affects:** 3.0.1, 3.0.5, 3.0.6, 3.0.7","closed","status: invalid,","spring-projects-issues","2012-06-18T03:24:57Z","2019-01-12T05:28:34Z"
"","13913","Cache Abstraction Exception Handling [SPR-9275]","**[Chris Bonham](https://jira.spring.io/secure/ViewProfile.jspa?name=bonhamcm)** opened **[SPR-9275](https://jira.spring.io/browse/SPR-9275?redirect=false)** and commented  Currently there is no explicit exception handling in the cache abstraction.  For example, when an external cache server is not available, the exceptions are just sent back to the calling class.  I propose changing the caching abstraction to catch the exception and then invoke the underlying method.  ---  **Affects:** 3.1.1  **Issue Links:** - #13933 Add `@Cacheable` implementation support for exception handling allowing the service method to be called instead of letting the provider exception to break the service (_**""is duplicated by""**_) - #16165 Support of ehcache's BlockingCache  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05e96ee44817d40c7a60734bd4b8ec577d6e5194  9 votes, 14 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-28T11:54:05Z","2022-03-15T07:50:24Z"
"","14594","Backport ""Ensure LineNumberReader is always closed in ResourceDatabasePopulator"" [SPR-9960]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9960](https://jira.spring.io/browse/SPR-9960?redirect=false)** and commented  ---  **Affects:** 3.1.3  This issue is a backport sub-task of #14545  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb2436555643179797c4615afecf9c8169923010  1 votes, 4 watchers","closed","in: data,","spring-projects-issues","2012-11-05T15:49:21Z","2019-01-11T14:21:57Z"
"","14591","Analyze structure for cycles in preparation for 3.2 RC2 [SPR-9958]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9958](https://jira.spring.io/browse/SPR-9958?redirect=false)** and commented  Use Structure101 to ensure no cycles or other architecture violations have crept in.  ---  **Attachments:** - [d4cba14ec5a147bbfd7339255df6fcdc.png](https://jira.spring.io/secure/attachment/20719/d4cba14ec5a147bbfd7339255df6fcdc.png) (_366.69 kB_)  **Issue Links:** - #14655 Eliminate package cycle introduced by SPR-8244 - #14590 Analyze Spring Framework 3.2 backward compatibility with JDiff","closed","type: task,","spring-projects-issues","2012-11-05T04:50:37Z","2019-01-11T14:16:39Z"
"","14590","Analyze Spring Framework 3.2 backward compatibility with JDiff [SPR-9957]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9957](https://jira.spring.io/browse/SPR-9957?redirect=false)** and commented  Phil, would you be interested in doing the CLIRR analysis this time around (as done for 3.1 in #12767)?  The purpose here is twofold: 1. to help us make sure we haven't introduced any unintended public API compatibility issues 2. to serve as a resource linkable from the 3.2 migration guide to give users a detailed view of what's changed at the API level.  Attached are what few notes I took on how I generated the report previously, hopefully they are of some help.  Also, any ideas you have about streamlining or automating this process are welcome. It's not highly important as we typically need do this only once per major release, but would of course be nice.  ---  **Attachments:** - [clirr-howto.txt](https://jira.spring.io/secure/attachment/20600/clirr-howto.txt) (_2.36 kB_)  **Issue Links:** - #14591 Analyze structure for cycles in preparation for 3.2 RC2 - #12767 Analyze Spring Framework 3.1 backward compatibility with CLIRR  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/631f24bb3284883f79cfde3d14676e5706a3ccfa","closed","type: task,","spring-projects-issues","2012-11-05T02:56:07Z","2019-01-11T14:16:37Z"
"","14581","Upgrade to JUnit 4.11 GA when it is released [SPR-9948]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9948](https://jira.spring.io/browse/SPR-9948?redirect=false)** and commented  #14417 upgraded our test-time dependency on JUnit to a 4.11 snapshot. Keep an eye on the progress toward 4.11 GA and upgrade when it is released. (currently in beta1 at time of this writing)  ---  **Reference URL:** https://github.com/KentBeck/junit/downloads  **Issue Links:** - #14417 Upgrade to JUnit 4.11 snapshot in support of JDK7 - #14678 Upgrade to JUnit 4.11 (_**""is superseded by""**_)","closed","type: task,","spring-projects-issues","2012-11-02T09:09:22Z","2019-01-11T14:17:31Z"
"","14567","Update Javadoc for @EnableAsync to clarify when #asyncTaskExecutor requires use of @Bean annotation [SPR-9934]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9934](https://jira.spring.io/browse/SPR-9934?redirect=false)** and commented  Phil, see the comment thread in the PR linked above. We just need to provide the user with a little bit more guidance on when `@Bean` is necessary and when it's not wrt to `@EnableAsync`.  It's in the general backlog for now, but schedule and fix as you see fit.   ---  **Affects:** 3.1.2, 3.2 M2  **Reference URL:** https://github.com/SpringSource/spring-framework/pull/145","closed","in: core,","spring-projects-issues","2012-10-31T03:05:45Z","2012-11-19T10:43:38Z"
"","14557","Fix package cycles in spring-test [SPR-9924]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9924](https://jira.spring.io/browse/SPR-9924?redirect=false)** and commented  [Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen), see attached screenshots from Structure 101 - it looks like a couple package cycles crept in during recent changes to spring-test. /cc [Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)  ---  **Affects:** 3.2 RC1  **Attachments:** - [Screen Shot 2012-10-26 at 2.20.23 PM.png](https://jira.spring.io/secure/attachment/20588/Screen+Shot+2012-10-26+at+2.20.23+PM.png) (_49.87 kB_) - [Screen Shot 2012-10-26 at 2.20.47 PM.png](https://jira.spring.io/secure/attachment/20589/Screen+Shot+2012-10-26+at+2.20.47+PM.png) (_53.95 kB_) - [Screen Shot 2012-10-27 at 9.12.33 PM.png](https://jira.spring.io/secure/attachment/20593/Screen+Shot+2012-10-27+at+9.12.33+PM.png) (_118.38 kB_)  **Issue Links:** - #14588 Introduce bootstrap strategy in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/461d99af29e8c358ff80ff9ff58a8ea63fe7b670, https://github.com/spring-projects/spring-framework/commit/90c5f226b62503b492167bcd87361842f73d18b1, https://github.com/spring-projects/spring-framework/commit/a281bdbfc528187dcd1214be2d2a97e8482a8a23","closed","type: task,","spring-projects-issues","2012-10-26T05:22:02Z","2019-01-11T14:19:05Z"
"","14544","Refactor AnnotationAttributes convenience methods [SPR-9911]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9911](https://jira.spring.io/browse/SPR-9911?redirect=false)** and commented  Suggestion: move methods currently within the package-private `MetadataUtils` into AnnotationAttributes, eg:  ``` AnnotationAttributes.fromMetadata(importMetadata, SomeAnnotation.class); ```    ---  **Affects:** 3.1.1","closed","status: declined,","spring-projects-issues","2012-10-23T03:11:41Z","2012-10-23T03:25:45Z"
"","14423","Upgrade to Gradle 1.2 [SPR-9790]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9790](https://jira.spring.io/browse/SPR-9790?redirect=false)** and commented   ---  **Reference URL:** http://forums.gradle.org/gradle/topics/gradle_1_2_released  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3a1dd20de9c416eac858792d6f75acf43cf5b09f","closed","type: task,","spring-projects-issues","2012-09-12T08:13:42Z","2012-11-04T06:54:00Z"
"","14422","Un-@Ignore SpringRunnerContextCacheTests and fix order-dependent issues under JDK7 [SPR-9789]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9789](https://jira.spring.io/browse/SPR-9789?redirect=false)** and commented  `SpringRunnerContextCacheTests` suffers from JDK7-related non-determinism in values returned from `Class#getDeclaredMethods`, which in turn affects JUnit and its execution of `@Test` methods.  This has been remedied for other affected tests in the framework (a) by fixing order-dependent test methods or (b) through the upgrade to JUnit 4.11 snapshot, which includes support for predictable test method ordering in JUnit.  However, because `spring-test` has a compile-time dependency on JUnit 4.10, I believe the predictability introduced in 4.11 is not kicking in here.  In any case, to fix this problem, please un-`@Ignore` `SpringRunnerContextCacheTests` and run the tests under JDK7. Note that these tests succeed for me under OSX JDK1.7.0_08-ea-b03, but do consistently fail under JDK1.7.0_05 on the CI server.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/300d41840b09dba9a0e1bba32d9060916f80bcf9, https://github.com/spring-projects/spring-framework/commit/c4aa14f34330a3bcb09e3d25fb5960be18263995","closed","type: task,","spring-projects-issues","2012-09-11T16:14:15Z","2012-11-04T06:54:02Z"
"","14417","Upgrade to JUnit 4.11 snapshot in support of JDK7 [SPR-9783]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9783](https://jira.spring.io/browse/SPR-9783?redirect=false)** and commented  ---  **Issue Links:** - #14350 Build against JDK 7, test against JDK 6+7 (_**""is depended on by""**_) - #14413 Fix non-deterministic build failures under JDK 7 (_**""is depended on by""**_) - [INT-2914](https://jira.spring.io/browse/INT-2914) Add Support for JDK 7 - #14678 Upgrade to JUnit 4.11 - #14581 Upgrade to JUnit 4.11 GA when it is released  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dfe05305e2de1c68add84ef66b615958744b520a","closed","type: task,","spring-projects-issues","2012-09-11T02:28:49Z","2019-01-11T13:35:57Z"
"","14413","Fix non-deterministic build failures under JDK 7 [SPR-9779]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9779](https://jira.spring.io/browse/SPR-9779?redirect=false)** and commented  Per email.  ---  This issue is a sub-task of #14349  **Issue Links:** - #14417 Upgrade to JUnit 4.11 snapshot in support of JDK7 (_**""depends on""**_) - #14350 Build against JDK 7, test against JDK 6+7 (_**""is depended on by""**_) - #14625 AdvisorAdapterRegistrationTests fails intermittently under Java 7 (_**""is duplicated by""**_) - #14625 AdvisorAdapterRegistrationTests fails intermittently under Java 7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a9a90cabadfe8059bbae595645108c739362bc80","closed","type: task,","spring-projects-issues","2012-09-09T08:30:37Z","2019-01-11T13:36:58Z"
"","14412","Backport ""Address various ExtendedBeanInfo bugs"" [SPR-9778]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9778](https://jira.spring.io/browse/SPR-9778?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #14050  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30d0bd309cfb707813537751db431a3f56212d2b  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2012-09-09T07:59:57Z","2019-01-11T13:36:30Z"
"","14401","Backport ""Sort candidate @AspectJ methods deterministically"" [SPR-9767]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9767](https://jira.spring.io/browse/SPR-9767?redirect=false)** and commented  ---  This issue is a backport sub-task of #14363","closed","in: core,","spring-projects-issues","2012-09-06T07:09:49Z","2019-01-11T13:37:13Z"
"","14398","Backport ""Register environment in all bean factories in a hierarchy"" [SPR-9764]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9764](https://jira.spring.io/browse/SPR-9764?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #14390  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b2fce2f2543009dba95c745aad4204f25e51f64e, https://github.com/spring-projects/spring-framework/commit/014f7f02428615b500acbe24f2044f2af3a62f73","closed","in: core,","spring-projects-issues","2012-09-05T13:47:22Z","2019-01-11T13:37:15Z"
"","14397","Refactor to lazy Environment creation where possible [SPR-9763]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9763](https://jira.spring.io/browse/SPR-9763?redirect=false)** and commented  ---  **Issue Links:** - #14771 HttpServletBean requires overly narrow Environment type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3cdb866bda078a24d3fccb36b08a449a970a524f, https://github.com/spring-projects/spring-framework/commit/6517517ca9867be846112edd17b7da907a2d04de","closed","in: core,","spring-projects-issues","2012-09-05T13:34:42Z","2019-01-11T13:37:25Z"
"","14396","Backport ""Remove default profile during environment merge"" [SPR-9762]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9762](https://jira.spring.io/browse/SPR-9762?redirect=false)** and commented  ---  **Affects:** 3.1.2  This issue is a backport sub-task of #14395","closed","in: core,","spring-projects-issues","2012-09-05T13:32:27Z","2019-01-11T13:37:23Z"
"","14395","Remove default profile during environment merge [SPR-9761]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9761](https://jira.spring.io/browse/SPR-9761?redirect=false)** and commented  ---  **Affects:** 3.1.2, 3.2 M1  **Sub-tasks:** - #14396 Backport ""Remove default profile during environment merge""  **Issue Links:** - #14080 ApplicationContext environment inheritance may causes child context environment property sources to be lost  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f8d219146a789698a60bf5e98df35ddf6374fb2, https://github.com/spring-projects/spring-framework/commit/84b3f7106d85ea0e7517e37b5923a66c1c6cf1c4, https://github.com/spring-projects/spring-framework/commit/fd10e149f6e7bf94f79159c13755985730f46dca","closed","in: core,","spring-projects-issues","2012-09-05T13:30:59Z","2019-01-11T13:37:33Z"
"","14357","Use ExtendedBeanInfo on an as-needed basis only [SPR-9723]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9723](https://jira.spring.io/browse/SPR-9723?redirect=false)** and commented  Create an `ExtendedBeanInfoFactory` that inspects a given bean class, determining whether that bean class is a candidate for EBI's functionality. i.e. does the bean class have non-void returning setter methods?  If so, handle the class and return an `ExtendedBeanInfo`.  If not, return `false` from from `ExtendedBeanInfo#supports(Class)` and have `CachedIntrospectionResults` fall back to the default `Introspector#getBeanInfo`.  This will resolve a number of open issues that are essentially regressions due to the introduction of `ExtendedBeanInfo`. The issues with `ExtendedBeanInfo` should of course also be fixed, but getting `EBI` out of the execution path for classes that don't need it means better performance and lower risk of bugs in the future.  An open question is whether the `ExtendedBeanInfoFactory` should be discovered via the `META-INF/spring.beanInfoFactories` mechanism, or simply hard-coded. In either case, it will always be picked up. Hard coding it means explicitness, type safety, etc.  Discovery via META-INF means that there is a prominent example of the mechanism that others can look to without digging into tests.  ---  **Issue Links:** - #14311 Introduce strategy for BeanInfo creation (_**""depends on""**_) - #12734 Support injection against setter methods with non-void return types - #14663 Overhaul non-void JavaBean write method support  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/114ca5c44c934fd0ce55474f8c26af8f8f75ff78","closed","type: enhancement,","spring-projects-issues","2012-08-24T02:40:55Z","2019-01-11T13:34:47Z"
"","14350","Build against JDK 7, test against JDK 6+7 [SPR-9716]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9716](https://jira.spring.io/browse/SPR-9716?redirect=false)** and commented  ---  This issue is a sub-task of #14349  **Issue Links:** - #14413 Fix non-deterministic build failures under JDK 7 (_**""depends on""**_) - #14417 Upgrade to JUnit 4.11 snapshot in support of JDK7 (_**""depends on""**_) - [INT-2914](https://jira.spring.io/browse/INT-2914) Add Support for JDK 7","closed","","spring-projects-issues","2012-08-22T03:02:23Z","2019-01-11T13:30:05Z"
"","14349","Verify JDK 7 compatibility [SPR-9715]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9715](https://jira.spring.io/browse/SPR-9715?redirect=false)** and commented  ---  **Sub-tasks:** - #14350 Build against JDK 7, test against JDK 6+7 - #14355 Add Windows CI build plan - #14413 Fix non-deterministic build failures under JDK 7","closed","type: task,","spring-projects-issues","2012-08-22T03:01:18Z","2019-01-11T13:30:02Z"
"","14317","Add optional AspectJ dependencies where appropriate [SPR-9683]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9683](https://jira.spring.io/browse/SPR-9683?redirect=false)** and commented   ---  **Affects:** 3.2 M1","closed","type: task,","spring-projects-issues","2012-08-13T06:27:07Z","2012-08-13T06:28:10Z"
"","14303","Upgrade to ASM 4.0 and CGLIB 3.0 [SPR-9669]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9669](https://jira.spring.io/browse/SPR-9669?redirect=false)** and commented  ASM 4.0 was released in Oct 2011 to address Java 7 bytecode compatibility, particularly with regard to invokedynamic [1].  Certain public API changes were made in the process.  Upgrade Spring's own internal repackaging of ASM to ensure users don't run into problems with Java 7 classes.  This is most likely to cause problems in conjunction with Spring's component-scanning functionality, so this is high priority.  The repackaged `org.springframework.asm` classes are currently based on ASM 2.2.3, which is now several generations behind.  Here are the differences between APIs across those generations:  `2.2.3-> 3.2`: http://asm.ow2.org/jdiff223to32/changes.html `3.2  -> 3.3`: http://asm.ow2.org/jdiff32to33/changes.html `3.3  -> 3.4`: http://asm.ow2.org/jdiff33to40/changes.html  CGLIB 3.0 was released on May 25th, 2012 [2] in order to upgrade its dependency on ASM to 4.0.  This also involved some API changes.  Upgrade Spring's dependency on CGLIB (currently at 2.2) to 3.0.  Impact may or may not be significant, but should not have external impact at the API level (because we do not expose CGLIB APIs).  It will be important to advise users as to whether CGLIB 3.0 is the new lower bound supported by Spring as of 3.2 GA, or if 2.2 is still supported (with caveats about Java 7 support).  This depends again on the extent of internal API changes necessary to support the upgrade.  [1]: http://mail.ow2.org/wws/arc/asm/2011-10/msg00025.html [2]: http://cglib.cvs.sourceforge.net/viewvc/cglib/cglib/build.xml?revision=1.56&view=markup  ---  **Issue Links:** - #12142 `@Configuration` with AspectJ instead of CGLIB","closed","type: enhancement,","spring-projects-issues","2012-08-07T01:46:00Z","2019-01-13T07:03:33Z"
"","14296","Provide runtime access to Spring container and bean graph metadata [SPR-9662]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9662](https://jira.spring.io/browse/SPR-9662?redirect=false)** and commented  In support of the upcoming STS 3.1 release and its runtime bean graph visualization feature [1], provide access at runtime to information about live Spring container(s) within a given application (JVM) including information about Spring beans and the dependencies between them, currently active profiles, etc.  Current plan is to expose this information via a JMX bean, registered by the Spring container against the platform default MBean server, having a minimal read-only API outputting JSON.  [1]: https://issuetracker.springsource.com/browse/STS-2810    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c557bfbc36564af11805970c07a6d35b6d229f6, https://github.com/spring-projects/spring-framework/commit/e5f3669804248a22f860a9580058d41d80a86932  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-08-02T07:15:39Z","2013-05-31T03:59:23Z"
"","14294","Upgrade to Gradle 1.1 GA [SPR-9660]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9660](https://jira.spring.io/browse/SPR-9660?redirect=false)** and commented  See http://www.gradle.org/docs/1.1/release-notes   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6249539426e8cc99930279f71482f441068a8851","closed","type: enhancement,","spring-projects-issues","2012-08-01T06:48:36Z","2012-08-07T23:58:25Z"
"","14203","Allow PropertyResolver implementations to ignore unresolvable ${placeholders} [SPR-9569]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9569](https://jira.spring.io/browse/SPR-9569?redirect=false)** and commented  ---  **Affects:** 3.1 GA  **Issue Links:** - #14108 Resolve nested ${..} placeholders via PropertyResolver/Environment (_**""depends on""**_) - #15180 Spring3.2 bug context:property-placeholder nested search property appear java.lang.StackOverflowError","closed","type: enhancement,","spring-projects-issues","2012-07-06T06:39:51Z","2019-01-11T12:54:04Z"
"","14128","Upgrade to Gradle 1.0 GA [SPR-9494]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9494](https://jira.spring.io/browse/SPR-9494?redirect=false)** and commented   ---  **Reference URL:** http://gradle.org/docs/1.0/release-notes.html","closed","type: task,","spring-projects-issues","2012-06-12T02:15:09Z","2012-06-12T02:24:21Z"
"","14100","Backport ""DatabasePopulatorUtils uses non-transactional connection"" [SPR-9465]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9465](https://jira.spring.io/browse/SPR-9465?redirect=false)** and commented  ---  This issue is a backport sub-task of #14092","closed","in: core,","spring-projects-issues","2012-06-04T10:41:34Z","2019-01-11T13:02:00Z"
"","14083","Backport ""Cache by-type lookups in DefaultListableBeanFactory"" [SPR-9448]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9448](https://jira.spring.io/browse/SPR-9448?redirect=false)** and commented  ---  **Affects:** 2.5.6  This issue is a backport sub-task of #11536  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2012-05-27T09:04:28Z","2019-01-11T13:03:13Z"
"","14082","Backport ""Reduce log level for message re: missing annotation"" [SPR-9447]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9447](https://jira.spring.io/browse/SPR-9447?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #13871","closed","in: core,","spring-projects-issues","2012-05-27T03:44:57Z","2019-01-11T13:03:10Z"
"","14081","Backport ""ApplicationContext environment inheritance may causes child context environment property sources to be lost"" [SPR-9446]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9446](https://jira.spring.io/browse/SPR-9446?redirect=false)** and commented  ---  This issue is a backport sub-task of #14080  **Issue Links:** - #14076 Backport ""Eliminate package cycle between ContextLoader and WebApplicationContextUtils"" (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc822cdca0b8d62eee848b1a7201bef83a51dbcd, https://github.com/spring-projects/spring-framework/commit/a387d13d5fc99be0b2e9d1994623a8838e571c00, https://github.com/spring-projects/spring-framework/commit/20f87ab98da8a813c0251979286286e5e3776435","closed","","spring-projects-issues","2012-05-26T04:42:29Z","2019-01-11T13:03:21Z"
"","14080","ApplicationContext environment inheritance may causes child context environment property sources to be lost [SPR-9444]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9444](https://jira.spring.io/browse/SPR-9444?redirect=false)** and commented  ---  **Sub-tasks:** - #14081 Backport ""ApplicationContext environment inheritance may causes child context environment property sources to be lost""  **Issue Links:** - #14075 Eliminate package cycle between ContextLoader and WebApplicationContextUtils (_**""is depended on by""**_) - #14527 Regression: In an ApplicationContext hierarchy a bean defined in a child context receives the parent's Environment - #14395 Remove default profile during environment merge","closed","type: bug,","spring-projects-issues","2012-05-26T04:12:43Z","2019-01-11T13:03:29Z"
"","14079","Backport ""Enable Executor qualification with @Async"" [SPR-9443]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9443](https://jira.spring.io/browse/SPR-9443?redirect=false)** and commented  ---  This issue is a backport sub-task of #11513  **Issue Links:** - #14209 Issue with `@Async` in version 3.1.2 linking to the task executor it is assigned to (instead of the default)  3 votes, 3 watchers","closed","in: core,","spring-projects-issues","2012-05-25T15:41:23Z","2019-01-13T07:04:32Z"
"","14078","Backport ""Fix package cycle established by @EnableSpringConfigured"" [SPR-9442]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9442](https://jira.spring.io/browse/SPR-9442?redirect=false)** and commented  ---  This issue is a backport sub-task of #14077  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6263c9abf950692c15b5bc5edd854b3949b10b19","closed","","spring-projects-issues","2012-05-25T13:35:12Z","2019-01-11T13:03:36Z"
"","14077","Fix package cycle established by @EnableSpringConfigured [SPR-9441]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9441](https://jira.spring.io/browse/SPR-9441?redirect=false)** and commented  `@EnableSpringConfigured` and its underlying `SpringConfiguredConfiguration` `@Configuration` class accidentally established a package cycle between `beans.factory.aspectj` and `context.annotation` due to the `SpringConfiguredConfiguration`'s dependency on annotations such as `@Configuration`, `@Bean` and `@Role`.  ---  **Sub-tasks:** - #14078 Backport ""Fix package cycle established by `@EnableSpringConfigured`""  **Issue Links:** - #14444 Fix split package introduced by `@EnableSpringConfigured`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2cfd15899d94be7f201c634e877abec6db6bfbfb, https://github.com/spring-projects/spring-framework/commit/54db7387de861273a1faa4ed2f3c30052999ddea, https://github.com/spring-projects/spring-framework/commit/5327a7a37d25b67ee2ae7d1ead2a3db6847767c0, https://github.com/spring-projects/spring-framework/commit/6263c9abf950692c15b5bc5edd854b3949b10b19","closed","type: bug,","spring-projects-issues","2012-05-25T13:17:11Z","2019-01-13T07:04:33Z"
"","14076","Backport ""Eliminate package cycle between ContextLoader and WebApplicationContextUtils"" [SPR-9440]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9440](https://jira.spring.io/browse/SPR-9440?redirect=false)** and commented  ---  This issue is a backport sub-task of #14075  **Issue Links:** - #14081 Backport ""ApplicationContext environment inheritance may causes child context environment property sources to be lost"" (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1eb50297ad8ec9bb33a5a9681b3d0ef552bb70bb","closed","","spring-projects-issues","2012-05-25T13:04:05Z","2019-01-11T13:03:44Z"
"","14075","Eliminate package cycle between ContextLoader and WebApplicationContextUtils [SPR-9439]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9439](https://jira.spring.io/browse/SPR-9439?redirect=false)** and commented  Changes introduced in Spring 3.1 for `Environment` support inadvertently established a cyclic dependency between `org.springframework.web.context` and `org.springframework.web.context.support`, specifically through `ContextLoader` invocation of `WebApplicationContextUtils#initServletPropertySources`.  ---  **Sub-tasks:** - #14076 Backport ""Eliminate package cycle between ContextLoader and WebApplicationContextUtils""  **Issue Links:** - #14080 ApplicationContext environment inheritance may causes child context environment property sources to be lost (_**""depends on""**_) - #14771 HttpServletBean requires overly narrow Environment type - #14244 Initialize ServletContext and ServletConfig property sources eagerly in FrameworkServlet","closed","type: task,","spring-projects-issues","2012-05-25T13:02:25Z","2019-01-11T12:42:53Z"
"","14059","Backport ""Improve Support for Maps of Mixed Types"" [SPR-9423]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9423](https://jira.spring.io/browse/SPR-9423?redirect=false)** and commented  ---  This issue is a backport sub-task of #13887","closed","in: core,","spring-projects-issues","2012-05-18T04:52:48Z","2019-01-11T12:42:59Z"
"","14047","Upgrade to Gradle 1.0-rc-3 [SPR-9411]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9411](https://jira.spring.io/browse/SPR-9411?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/283c1b9c53efd3388ea656fb934ad0b32c4a9986","closed","type: task,","spring-projects-issues","2012-05-15T05:09:45Z","2012-06-19T03:39:32Z"
"","14046","Backport ""Add missing section ids in reference documentation"" [SPR-9410]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9410](https://jira.spring.io/browse/SPR-9410?redirect=false)** and commented  ---  This issue is a backport sub-task of #13984  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ca407d55eb55b3c59737ba4635c359b51e19a8e","closed","type: documentation,","spring-projects-issues","2012-05-15T03:43:35Z","2019-01-11T12:43:24Z"
"","14017","Unable to register hibernate event listeners against orm.hibernate4's LocalSessionFactoryBean [SPR-9381]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9381](https://jira.spring.io/browse/SPR-9381?redirect=false)** and commented  See the discussion in #13580 for context.  ---  **Affects:** 3.1 GA  **Issue Links:** - #13580 How can Spring 3.1 support hibernate 4 such as support Hibernate 3?  16 votes, 18 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-05-05T23:58:26Z","2019-01-12T03:48:37Z"
"","14000","Backport ""Scoped-proxy memory leak w/ @Resource injection"" [SPR-9363]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9363](https://jira.spring.io/browse/SPR-9363?redirect=false)** and commented  ---  This issue is a backport sub-task of #13814  **Issue Links:** - #14261 Regression: scoped beans being cached too aggressively  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eed090e5f55c1287273fd8eef81326738e6486d0  1 votes, 1 watchers","closed","in: web,","spring-projects-issues","2012-05-02T02:12:50Z","2019-01-11T12:40:43Z"
"","13965","Upgrade to Gradle 1.0-rc-1 [SPR-9327]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9327](https://jira.spring.io/browse/SPR-9327?redirect=false)** and commented  http://forums.gradle.org/gradle/topics/gradle_1_0_rc_1_now_available http://wiki.gradle.org/display/GRADLE/Gradle+1.0-rc-1+Migration+Guide http://wiki.gradle.org/display/GRADLE/Gradle+1.0-rc-1+Release+Notes   --- No further details from [SPR-9327](https://jira.spring.io/browse/SPR-9327?redirect=false)","closed","type: task,","spring-projects-issues","2012-04-14T02:48:35Z","2012-06-19T03:39:40Z"
"","14670","Update reference docs to a more modern CSS style [SPR-10036]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10036](https://jira.spring.io/browse/SPR-10036?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1394050ed27e237d2b62e03b68a809ccac1024f9","closed","type: enhancement,","spring-projects-issues","2012-11-26T04:45:06Z","2012-11-26T05:18:56Z"
"","14663","Overhaul non-void JavaBean write method support [SPR-10029]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10029](https://jira.spring.io/browse/SPR-10029?redirect=false)** and commented  ---  **Issue Links:** - #14336 ExtendedBeanInfo exception - java.beans.IntrospectionException (_**""is depended on by""**_) - #14576 IntrospectionException: type mismatch between indexed and non-indexed methods (_**""is depended on by""**_) - #12734 Support injection against setter methods with non-void return types - #14662 Simplify CachedIntrospectionResults caching arrangements - #13698 Concurrent problem with BeanWrapperImpl.getPropertyValue - #14088 Bean Introspection problem under IBM Java 1.6 with new ExtendedBeanInfo - #14218 CachedIntrospectionResults Not Thread Safe - #13137 Regression - Introspection with BeanUtils started failing for java.awt.Component derived classes - #13577 java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods:  - #14050 Java 7 only - PropertyPathFactoryBean requires a bean setter in version 3.1.1.RELEASE. Works fine under Java 6. - #12826 ExtendedBeanInfo Passes Empty Property Name to PropertyDescriptor Causing IntrospectionException: bad property name - #13078 Regression in support for property write method return type covariance - #13166 Annotation based bean creation fails with GsonBuilder - #13448 ExtendedBeanInfo raises 'type mismatch' error with covariant property types - #13571 Regression - Introspection with BeanUtils started failing for java.math.BigDecimal - #13589 PropertyPathFactoryBean requires a bean setter in version 3.1.0.RELEASE. It didn't in 3.0.6.RELEASE - #14311 Introduce strategy for BeanInfo creation - #12734 Support injection against setter methods with non-void return types - #12995 Review ExtendedBeanInfo implementation - #14357 Use ExtendedBeanInfo on an as-needed basis only - #14176 ExtendedBeanInfo is extremely slow processing beans derived from java.awt.Component - #13646 Couple of ExtendedBeanInfoTests failing on Java 7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3161632dd71920efb769b3a80555e89949b7695, https://github.com/spring-projects/spring-framework/commit/0ee12563b038797a137ac67b13e5dd6d3d918a7f, https://github.com/spring-projects/spring-framework/commit/4a8be690998f43a9253305e09f96ad83058ef540","closed","in: core,","spring-projects-issues","2012-11-25T03:28:01Z","2019-01-11T18:39:37Z"
"","14655","Eliminate package cycle introduced by SPR-8244 [SPR-10021]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10021](https://jira.spring.io/browse/SPR-10021?redirect=false)** and commented  #12892's introduction of a dependency on `EmbeddedValueResolverAware` establishes a cycle between the `.jmx.export.annotation` and `.context` packages.  ---  **Affects:** 3.2 RC1  **Attachments:** - [Screen Shot 2012-11-23 at 11.29.46 AM.png](https://jira.spring.io/secure/attachment/20710/Screen+Shot+2012-11-23+at+11.29.46+AM.png) (_37.09 kB_)  This issue is a sub-task of #12892  **Issue Links:** - #14591 Analyze structure for cycles in preparation for 3.2 RC2","closed","type: task,","spring-projects-issues","2012-11-23T02:33:01Z","2019-01-11T18:40:31Z"
"","14467","Exceptionorg.springframework.dao.InvalidDataAccessApiUsageException: Transaction already active; nested exception is java.lang.IllegalStateException: Transaction already active” [SPR-9834]","**[Chirag Shah](https://jira.spring.io/secure/ViewProfile.jspa?name=cnavnit)** opened **[SPR-9834](https://jira.spring.io/browse/SPR-9834?redirect=false)** and commented  We are in the process of deploying application based on Spring framework using entity manager in the production. But during testing, we are seeing following exception and then Weblogic application server goes in warning state. All further operations fails with the exception:  ERROR [com.vodafone.service.userservice.UserProfileServiceImpl] Error occurred :: save user :: Exceptionorg.springframework.dao.InvalidDataAccessApiUsageException: Transaction already active; nested exception is java.lang.IllegalStateException: Transaction already active”   --- No further details from [SPR-9834](https://jira.spring.io/browse/SPR-9834?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-09-27T08:14:43Z","2019-01-12T00:26:06Z"
"","14089","Slow JSP render for OptionTag [SPR-9454]","**[Chapman](https://jira.spring.io/secure/ViewProfile.jspa?name=chapman)** opened **[SPR-9454](https://jira.spring.io/browse/SPR-9454?redirect=false)** and commented  Spring version 3.1.0.RELEASE.  A page display 2 dropdown boxes, each of them contained over 100 values. There are two problems: 1. Render JSP is slow, over 2 seconds to display a simple page. 2. After running for a few days, the response time is slower, over 5 seconds to display the same page.  Verify GC log in Tomcat, there is no memory leak. Is there any problem in OptionTag.renderOption method?  From other forumn, it also mentioned  has performance issue. http://stackoverflow.com/questions/5246685/spring-web-mvc-huge-performance-issues-when-rendering-view  ---  **Affects:** 3.1 GA  **Issue Links:** - #17078 SelectedValueComparator triggering a lot of database lookups with DomainClassConverter (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2012-05-30T04:11:52Z","2019-01-12T16:47:56Z"
"","13924","If i use RequestMapping email regex {email:.*} return not working [SPR-9286]","**[celee](https://jira.spring.io/secure/ViewProfile.jspa?name=archmagece)** opened **[SPR-9286](https://jira.spring.io/browse/SPR-9286?redirect=false)** and commented  Here's my code  ```java @Controller @RequestMapping(""/user"") public class UserController {  ........  @RequestMapping(value =	{"""", ""/{email:.*}""}, method = RequestMethod.GET) public ModelAndView manageUpdateView(@ModelAttribute User user, HttpServletRequest request, HttpServletResponse response) throws Exception { 	User userNew = userService.get(user); 	System.out.println(user); 	System.out.println(userNew); 		if (userNew == null) { 		  return new ModelAndView(""redirect:/auth/login""); 		} else { 			//It's Work 			/*RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/views/user/myPage.jsp""); 			request.setAttribute(""user"", userNew); 			request.setAttribute(""msg"", ""Hello~""); 			rd.forward(request, response); 			return null;*/ 			 			//Exception occured 			return new ModelAndView(""/user/myPage"", ""user"", userNew); 		} 	} .... } ```  When I access ""localhost:8080/user/bbb@bbb.com"" eclipse show this error message [Could not resolve view with name '/user/myPage' in servlet with name 'appServlet'] with root cause  If i remove this code ""/{email:.*}"" it work nice...  I guess it's ""`@RequestMapping`"" error   ---  **Affects:** 3.1.1","closed","status: invalid,","spring-projects-issues","2012-03-29T10:15:16Z","2019-01-12T05:28:49Z"
"","13920","RequestMapping [SPR-9282]","**[celee](https://jira.spring.io/secure/ViewProfile.jspa?name=archmagece)** opened **[SPR-9282](https://jira.spring.io/browse/SPR-9282?redirect=false)** and commented   --- No further details from [SPR-9282](https://jira.spring.io/browse/SPR-9282?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-03-29T06:51:03Z","2019-01-12T05:28:50Z"
"","14320","MockHttpSession does not implement invalidate() properly [SPR-9686]","**[Carl Holmes](https://jira.spring.io/secure/ViewProfile.jspa?name=carlholmes)** opened **[SPR-9686](https://jira.spring.io/browse/SPR-9686?redirect=false)** and commented  #### Status Quo  The `invalidate()` method in `MockHttpSession` is implemented incorrectly, according to the contract of the method:  > Throws: java.lang.IllegalStateException if this method is called on an already invalidated session  However, invoking `invalidate()` on the same `MockHttpSession` instance twice does not do this.  #### Proposal  This can be fixed easily by including a check on the `invalid` field, and throwing an `IllegalStateException` if it is `true` before setting it to `true` for the first time.  ---  **Affects:** 3.1.2  **Issue Links:** - #12315 MockHttpSession methods should throw IllegalStateException if invalid","closed","type: enhancement,","spring-projects-issues","2012-08-09T16:54:37Z","2019-01-11T13:24:26Z"
"","14393","Inject request attributes to params [SPR-9759]","**[Caio Cunha](https://jira.spring.io/secure/ViewProfile.jspa?name=caiotoon)** opened **[SPR-9759](https://jira.spring.io/browse/SPR-9759?redirect=false)** and commented  There is not a convenient way to inject ServletRequest attributes to the method as there is `@CookieValue` or `@RequestParam`.  It would be useful to have a `@RequestAttribute` working the same way as these others.   --- No further details from [SPR-9759](https://jira.spring.io/browse/SPR-9759?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-09-05T05:52:32Z","2012-09-10T16:45:06Z"
"","14285","Dot separated match are not case-insensitive [SPR-9651]","**[Caio Cunha](https://jira.spring.io/secure/ViewProfile.jspa?name=caiotoon)** opened **[SPR-9651](https://jira.spring.io/browse/SPR-9651?redirect=false)** and commented  **`@RequestMapping`** with variable path ending with file extension (dot-separated pattern) is not mapping correctly.  Consider the following map:  ``` @RequestMapping(""/{something}.png"") public @ResponseBody String getTest(@PathVariable String something) {   return ""Something: ""+something; } ```  It will match against /test.png, but not against /test.PnG, issuing a 404 error.   ---  **Affects:** 3.1.2","closed","status: declined,","spring-projects-issues","2012-07-28T07:59:17Z","2019-01-12T16:36:08Z"
"","14462","Websphere 7 ResponseEntity [SPR-9829]","**[Bryan Ruddy](https://jira.spring.io/secure/ViewProfile.jspa?name=bruddy@us.ibm.com)** opened **[SPR-9829](https://jira.spring.io/browse/SPR-9829?redirect=false)** and commented  When trying to consume a webservice using the following code I get a java.lang.nullpointerexception.  On other servers this works without any issue.  Websphere seems to have issues with this part of the Spring Framework  ResponseEntity\ result = restTemplate.exchange(""http://sit-stgpwline2.lexington.ibm.com:9089/SearchServices/GPPDuplicates/App/Software: WebSphere - Other App Servers"", HttpMethod.GET, entity, duplicatesList.class);   ---  **Affects:** 3.1 GA","closed","in: core,","spring-projects-issues","2012-09-25T11:55:18Z","2019-01-12T05:28:01Z"
"","13972","Support for Jackson 2.X [SPR-9334]","**[Bruno Hansen](https://jira.spring.io/secure/ViewProfile.jspa?name=brunohansen)** opened **[SPR-9334](https://jira.spring.io/browse/SPR-9334?redirect=false)** and commented  New support for Jackson 2.X because of changing of packages:  Jackson reference: http://wiki.fasterxml.com/JacksonRelease20#Changing_Java_packages  Spring forum reference: http://forum.springsource.org/showthread.php?125213-Support-for-Jackson-2-0&p=408474#post408474  ---  **Affects:** 3.2 M1, 3.2 M2  **Reference URL:** http://forum.springsource.org/showthread.php?125213-Support-for-Jackson-2-0&p=408474#post408474  **Issue Links:** - #13940 Use Jackson 2.0 for Jackson based json processing such as MappingJacksonJsonView  (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-04-19T04:43:07Z","2019-01-11T12:37:57Z"
"","13945","Transient fields not initialized for Subclassed Entities [SPR-9307]","**[Bruce Edge](https://jira.spring.io/secure/ViewProfile.jspa?name=bedge)** opened **[SPR-9307](https://jira.spring.io/browse/SPR-9307?redirect=false)** and commented  This was reported originally as an eclipselink problem, but it's the exact behavior we're seeing.  From the above elcipselink bug, here's their example, which exactly matches our case:  `@MappedSuperclass` public abstract class AbstractEntity {      protected transient org.slf4j.Logger log =  org.slf4j.LoggerFactory.getLogger(this.getClass());  }  `@Entity`() public class SomeEntity extends AbstractEntity {  }  SomeEntity result = em.find(SomeEntity.class, 1L); result.callSomeMethodWhichUsesLogger(); Result: NPE because transient field log is null   ---  **Affects:** 3.0.5  **Reference URL:** https://bugs.eclipse.org/bugs/show_bug.cgi?id=292385","closed","in: core,","spring-projects-issues","2012-04-05T09:10:13Z","2019-01-12T05:28:48Z"
"","14171","Models as a method parameter marked with @Validated in a @Controller will only validate on the Default group [SPR-9537]","**[Brian Reindel](https://jira.spring.io/secure/ViewProfile.jspa?name=hal10001)** opened **[SPR-9537](https://jira.spring.io/browse/SPR-9537?redirect=false)** and commented  I am using Hibernate 4.2.0 and Spring 3.1.1.RELEASE.  Consider the following handler in a `@Controller`:  ``` @RequestMapping(value = ""/register"", method = RequestMethod.POST) public ModelAndView submit(@Validated(value={Default.class, RegisterFormSecondaryChecks.class}) RegisterForm registerForm) 		throws ControllerException { 	/* Implementation... */ } ```  Now consider the following form bean:  ``` public class RegisterForm {      @NotEmpty(groups = {Default.class})     @Email(groups = {RegisterFormSecondaryChecks.class})     private String emailAddress;      public void setEmailAddress(String emailAddress) {         this.emailAddress = emailAddress;     }      public String getEmailAddress() {         return emailAddress;     }          @NotEmpty(groups = {Default.class})     @Length(min = 6, max = 16, groups = {RegisterFormSecondaryChecks.class})     private String password;      public void setPassword(String password) {         this.password = password;     }      public String getPassword() {         return password;     }          @NotEmpty(groups = {RegisterFormSecondaryChecks.class})     private String reEnterPassword;      public void setReEnterPassword(String reEnterPassword) {         this.reEnterPassword = reEnterPassword;     }      public String getReEnterPassword() {         return reEnterPassword;     } } ```  According to my understanding of the JSR 303 specification, the Default group should be validated. If it passes validation, then the RegisterFormSecondaryChecks validation group will be validated. However, if it doesn't pass validation, then the RegisterFormSecondaryChecks validation group will not be validated. In the scenario above, however, Spring is only validating the Default group. If I add the Default group to all constraints, then they will be validated (as a whole group). Only the Default group appears to be recognized.   ---  **Affects:** 3.1.1","closed","in: web,","spring-projects-issues","2012-06-23T19:56:07Z","2019-01-11T13:08:22Z"
"","14131","301 old documentation links to the new ones [SPR-9497]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-9497](https://jira.spring.io/browse/SPR-9497?redirect=false)** and commented  The other day I got a few comments on my spring answers in stackoverflow, saying that the links are not working. It was indeed the case, and it seems spring documentation got a new URL structure:  Before: http://static.springsource.org/spring/docs/3.0.x/reference/aop.html#aop-aj-configure After: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-aj-configure  I can't be sure when this has happened, but the links have worked in the past and now they don't. I think the best thing to do is add 301 redirect to the new structure. As a side-note, it would be good to have a ""/latest/"" documentation, so that links don't refer to versions that are too old   --- No further details from [SPR-9497](https://jira.spring.io/browse/SPR-9497?redirect=false)","closed","","spring-projects-issues","2012-06-12T23:28:46Z","2019-01-11T13:04:33Z"
"","13956","@Async groups [SPR-9318]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-9318](https://jira.spring.io/browse/SPR-9318?redirect=false)** and commented  Currently all `@Async` methods are executed using the same thread pool. But often you need different groups of related async operations and you don't want them to share the same pool. For example, a scheduled job may want to asynchronously invoke a method multiple times, but if it uses `@Async` it will consume all the threads that are supposed to be used by other processes.  That's why I suggest to add an async group. `@Async`(group=""main""), `@Async`(group=""calculations""), etc. Each of them will have a separate pool.     (or a nested \)  ---  **Affects:** 3.1.1  **Issue Links:** - #11513 Enable Executor qualification with `@Async` (_**""duplicates""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-10T10:24:01Z","2019-01-13T07:05:16Z"
"","14593","Make JdbcTemplate work by simply supplying a connection [SPR-10049]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-10049](https://jira.spring.io/browse/SPR-10049?redirect=false)** and commented  JdbcTemplate is nice, but it requires a DataSource, and operates with the TransactionSynchronizationManager.  In some cases (e.g. hibernate's doWork(..)) you need to reuse an existing transaction and simply perform JDBC operations with a given connection.  Currently JdbcTemplate does not allow that - it uses static access to DataSourceUtils and TransactionSynchronizationManager, which in turn breaks the existing transaction somehow.  Currently my workaround is to extend JdbcTemplate and copy-paste the execute(..) methods, and get rid of the static code that obtains a connection to use. But possibly, this could be allowed in the original implementation - to let it use a simple connection without additional complexity.   ---  **Affects:** 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2012-11-28T01:00:54Z","2019-01-12T00:25:40Z"
"","14480","java.io.NotSerializableException: org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl for session-scoped bean when stopping Tomcat [SPR-9847]","**[Boris Romashov](https://jira.spring.io/secure/ViewProfile.jspa?name=boraldo)** opened **[SPR-9847](https://jira.spring.io/browse/SPR-9847?redirect=false)** and commented  Here is my controller (it is Serializable).  ``` @Scope (WebApplicationContext.SCOPE_SESSION) @Controller public class Some implements Serializable {  	@RequestMapping (""/go"") 	@ResponseBody 	public String go() 	{ 		return ""!!!""; 	}   	@PostConstruct 	public void init() 	{ 		System.out.println(""Some.init""); 	}  	@PreDestroy 	public void beforeDestroy() 	{ 		System.out.println(""Some.beforeDestroy""); 	}  } ```  When I stop a server I see the following stacktrace.  ``` 02.10.2012 19:32:02 org.apache.catalina.session.StandardSession writeObject WARNING: Cannot serialize session attribute some for session 0DBD895D2086D2E121AD199A63D33DF2 java.io.NotSerializableException: org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1156) 	at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1338) 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1146) 	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) 	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) 	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) 	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) 	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) 	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) 	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) 	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) 	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) 	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) 	at org.apache.catalina.session.StandardSession.writeObject(StandardSession.java:1585) 	at org.apache.catalina.session.StandardSession.writeObjectData(StandardSession.java:1015) 	at org.apache.catalina.session.StandardManager.doUnload(StandardManager.java:528) 	at org.apache.catalina.session.StandardManager.unload(StandardManager.java:469) 	at org.apache.catalina.session.StandardManager.stop(StandardManager.java:678) 	at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4882) 	at org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:936) 	at org.apache.catalina.startup.HostConfig.undeployApps(HostConfig.java:1359) 	at org.apache.catalina.startup.HostConfig.stop(HostConfig.java:1330) 	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:326) 	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:142) 	at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1098) 	at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1110) 	at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:468) 	at org.apache.catalina.core.StandardService.stop(StandardService.java:604) 	at org.apache.catalina.core.StandardServer.stop(StandardServer.java:788) 	at org.apache.catalina.startup.Catalina.stop(Catalina.java:662) 	at org.apache.catalina.startup.Catalina.start(Catalina.java:629) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) 	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) ```    ---  **Affects:** 3.1.1  5 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-10-02T08:48:20Z","2019-01-11T13:20:11Z"
"","14485","@Resource injection of singleton in prototype using AnnotationConfigApplicationContext is not thread-safe [SPR-9852]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-9852](https://jira.spring.io/browse/SPR-9852?redirect=false)** and commented  The attached test case demonstrates that `@Resource` of injection of singleton in prototype using AnnotationConfigApplicationContext is not thread-safe. However, changing `@Resource` to `@Autowired` seems to resolve the issue.  Please see http://stackoverflow.com/questions/12700239/thread-safety-of-calling-bean-methods-from-returned-annonymous-inner-classes/12700284#comment17146235_12700284 for more details  ```java  import java.util.ArrayList; import java.util.List; import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; import java.util.concurrent.TimeUnit;  import javax.annotation.Resource;  import org.junit.Test; import org.junit.runner.RunWith; import org.pentaho.di.core.util.Assert; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Scope; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.test.context.support.AnnotationConfigContextLoader;  import com.oanda.bi.rm.test.AnnotationCallableConfigTest.Config;  /**  * @see http://stackoverflow.com/questions/12700239/thread-safety-of-calling-bean-methods-from-returned-annonymous-inner-classes/12700284#comment17146235_12700284  * @see http://forum.springsource.org/showthread.php?130731-Thread-safety-of-calling-Bean-methods-from-returned-annonymous-inner-classes&p=426403#post426403  * @author btiernay  */ @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = { Config.class }, loader = AnnotationConfigContextLoader.class) public class AnnotationCallableConfigTest {      @Autowired     Callable callable;      @Test     public void test() throws InterruptedException, ExecutionException {         final int threads = 10;         ExecutorService service = Executors.newFixedThreadPool( threads );          List futures = new ArrayList();         for ( int i = 0; i < threads; i++ ) {             futures.add( service.submit( callable ) );         }          service.shutdown();         service.awaitTermination( 1, TimeUnit.MINUTES );          for ( Future future : futures ) {             final Holder holder = future.get();             Assert.assertNotNull( holder.value );         }     }      public static class Holder {         // Changing this to @Autowired makes the test pass         @Resource(name = ""singleton"")         protected Integer value;     }      @Configuration     public static class Config {          @Bean         public Integer singleton() {             return 1;         }          @Bean         @Scope(""prototype"")         public Holder prototype() {             return new Holder();         }          @Bean         public Callable function() {             return new Callable() {                 @Override                 public Holder call() {                     return prototype();                 }             };         }      } }  ```  ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?130731-Thread-safety-of-calling-Bean-methods-from-returned-annonymous-inner-classes&p=426403#post426403  **Issue Links:** - #14439 Autowired properties can remain unset during concurrent instantiation of prototype-beans - #14261 Regression: scoped beans being cached too aggressively","closed","in: core,","spring-projects-issues","2012-10-03T14:08:11Z","2019-01-11T13:19:30Z"
"","13992","@ModelAttribute detached object binding from  tag has a problem [SPR-9354]","**[Bilguun Bayarmagnai](https://jira.spring.io/secure/ViewProfile.jspa?name=beku)** opened **[SPR-9354](https://jira.spring.io/browse/SPR-9354?redirect=false)** and commented  After migrating to spring 3.1.0 from spring 3.0.5 hibernate save method is encountering problem with detached object - when trying to save new object with saveOrUpdate(Object obj) method where obj has no id.  Class A has Set of Class B. when trying to save new instance of class B from  and via `@ModelAttribute`(""b"") it's overriding all the previous set of b's (Set\) from class A. Unit testing has no issues, so it  could be webmvc issue. It used work perfectly fine with 3.0.5  http://forum.springsource.org/showthread.php?125940 refer to this forum thread for detailed information.   ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?125940","closed","in: core,","spring-projects-issues","2012-04-30T03:25:15Z","2019-01-12T16:36:28Z"
"","14039","Hibernate, using JndiObjectFactoryBean works for 3.0.6 but not for 3.1.1 [SPR-9403]","**[Bernd Götz](https://jira.spring.io/secure/ViewProfile.jspa?name=bernd)** opened **[SPR-9403](https://jira.spring.io/browse/SPR-9403?redirect=false)** and commented  Hello,  With Spring 3.0.6.RELEASE, the following configuration works:  ``` @Bean public AnnotationSessionFactoryBean sessionFactory(DataSource dataSource) { 	AnnotationSessionFactoryBean factory = new AnnotationSessionFactoryBean(); 	factory.setDataSource(dataSource); 	factory.setPackagesToScan(new String[] { ""com.company.abc"" }); 	factory.setHibernateProperties(hibernateProperties()); 	factory.setSchemaUpdate(false); 	return factory; } @Bean public JndiObjectFactoryBean dataSource() { 	JndiObjectFactoryBean dataSourceFactory = new JndiObjectFactoryBean(); 	dataSourceFactory.setJndiName(""jdbc/ABC""); 	dataSourceFactory.setResourceRef(true); 	dataSourceFactory.setCache(true); 	dataSourceFactory.setProxyInterface(DataSource.class); 	dataSourceFactory.setLookupOnStartup(false); 	return dataSourceFactory; } ```  When I switch to 3.1.1.RELEASE, I get the following error with the configuration above:  ``` Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [javax.sql.DataSource] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {} ```  I then change the configuration as follows, but I'm not sure if this is the way it's supposed to work:  ``` @Bean public AnnotationSessionFactoryBean sessionFactory() { 	AnnotationSessionFactoryBean factory = new AnnotationSessionFactoryBean(); 	factory.setDataSource((DataSource)dataSource().getObject()); 	factory.setPackagesToScan(new String[] { ""com.company.abc"" }); 	factory.setHibernateProperties(hibernateProperties()); 	factory.setSchemaUpdate(false); 	return factory; }   @Bean public JndiObjectFactoryBean dataSource() { 	JndiObjectFactoryBean dataSource = new JndiObjectFactoryBean(); 	dataSource.setJndiName(""jdbc/ABC""); 	dataSource.setResourceRef(true); 	dataSource.setCache(true); 	dataSource.setProxyInterface(DataSource.class); 	dataSource.setExpectedType(DataSource.class); 	dataSource.setLookupOnStartup(false); 	return dataSource; } ```    --- No further details from [SPR-9403](https://jira.spring.io/browse/SPR-9403?redirect=false)","closed","in: core,","spring-projects-issues","2012-05-12T12:21:46Z","2019-01-11T12:43:30Z"
"","14297","XStreamMarshaller + BinaryStreamDriver [SPR-9663]","**[Benny Goemans](https://jira.spring.io/secure/ViewProfile.jspa?name=malavon)** opened **[SPR-9663](https://jira.spring.io/browse/SPR-9663?redirect=false)** and commented  It seems that XStreamMarshaller can't cope with BinaryStreamDriver (XStream class).  Details: BinaryStreamDriver does not allow Reader/Writer configuration and requires InputStream/OutputStream. XStreamMarshaller on the other hand wraps OutputStream inside a OutputStreamWriter and passes that on the the StreamDriver implementation, resulting in a UnsupportedOperationException.   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7187a2435e66d11298048eba63a15cc5ddf5a505","closed","type: enhancement,","spring-projects-issues","2012-08-03T00:43:14Z","2012-08-13T04:54:08Z"
"","14107","Spel Implicit Map [SPR-9472]","**[Ben Hubbard](https://jira.spring.io/secure/ViewProfile.jspa?name=hubbaba)** opened **[SPR-9472](https://jira.spring.io/browse/SPR-9472?redirect=false)** and commented  It doesn't appear possible to define an implicit map using spel.  It would be nice to have a map syntax similar to groovy but using the curly braces like spel already uses for implicit lists.  Something like this:  {'key1': 'value1', 'key2': 'value2'} or {key1: 'value1', key2: 'value2'}    ---  **Affects:** 3.1.1  **Reference URL:** http://stackoverflow.com/questions/24799046/creating-setting-a-map-into-context-through-springel","closed","type: enhancement,","spring-projects-issues","2012-06-05T23:38:42Z","2014-08-15T01:52:39Z"
"","14506","Adding pointcut which matches @Configuration class breaks the Application Context [SPR-9873]","**[Baruch Sadogursky](https://jira.spring.io/secure/ViewProfile.jspa?name=jbaruch)** opened **[SPR-9873](https://jira.spring.io/browse/SPR-9873?redirect=false)** and commented  If bean factory has an Aspect which pointcuts on `@Configuration` class, it fails to create beans properly.   ---  **Affects:** 3.2 M2","closed","in: core,","spring-projects-issues","2012-10-11T01:52:20Z","2019-01-12T05:27:57Z"
"","14439","Autowired properties can remain unset during concurrent instantiation of prototype-beans [SPR-9806]","**[Barnabas Bodnar](https://jira.spring.io/secure/ViewProfile.jspa?name=bbodnar)** opened **[SPR-9806](https://jira.spring.io/browse/SPR-9806?redirect=false)** and commented  Autowired properties of prototype-beans referencing singletons can remain unset, if ApplicationContext.getBean(...) is called for the prototype-bean concurrently. Neither the initialization-type of the singleton, nor the fact, whether the singleton already exists or not, plays a role (i.e. the error occurs even if the singleton is already initialized).  The error is reproducible even with low concurrency-rates (2 threads).  ---  **Affects:** 3.1.2  **Attachments:** - [concurrent-getbean-with-autowiring.zip](https://jira.spring.io/secure/attachment/20504/concurrent-getbean-with-autowiring.zip) (_4.51 kB_)  **Issue Links:** - #13901 Threading issue in InjectionMetadata.InjectedElement (_**""is duplicated by""**_) - #14485 `@Resource` injection of singleton in prototype using AnnotationConfigApplicationContext is not thread-safe  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b79260a01731c3539ab6a0f29996d06a8f93b1dd, https://github.com/spring-projects/spring-framework/commit/7fc16298e68c58ab918cb331462658e99216ad2b","closed","in: core,","spring-projects-issues","2012-09-18T05:36:11Z","2019-01-13T07:03:07Z"
"","14597","Documentation inconsistency vs implementation - scoped-proxy beans [SPR-9963]","**[Aurel Medvegy](https://jira.spring.io/secure/ViewProfile.jspa?name=medvegy)** opened **[SPR-9963](https://jira.spring.io/browse/SPR-9963?redirect=false)** and commented  Documentation 4.5.4.5 Scoped beans as dependencies says:  ""Note: You do not need to use the `` in conjunction with beans that are scoped as singletons or prototypes. If you try to create a scoped proxy for a singleton bean, the `BeanCreationException` is raised.""  but implementation for example:  ```xml            ```  doesn't raise any exception. So what's correct?  ---  **Affects:** 3.1.1  **Reference URL:** http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html#beans-factory-scopes-other-injection  **Issue Links:** - #12595 Update documentation regarding scoped-proxy and singleton beans (_**""duplicates""**_)  1 votes, 3 watchers","closed","status: duplicate,","spring-projects-issues","2012-11-06T06:46:34Z","2019-01-12T16:47:36Z"
"","14002","Doc: Spring 3.x and Hibernate 4 are not compatible. Unable to use HibernateTemplate. [SPR-9365]","**[Augustine Parthinathan](https://jira.spring.io/secure/ViewProfile.jspa?name=augustinejuly)** opened **[SPR-9365](https://jira.spring.io/browse/SPR-9365?redirect=false)** and commented  While using Spring HibernateTemplate with the combination of Spring 3.1 and Hibernate 4, we are getting the following exception.  ``` java.lang.ClassCastException: org.springframework.orm.hibernate4.SessionHolder cannot be cast to org.springframework.orm.hibernate3.SessionHolder 	at org.springframework.orm.hibernate3.SessionFactoryUtils.doGetSession(SessionFactoryUtils.java:287) 	at org.springframework.orm.hibernate3.SessionFactoryUtils.getSession(SessionFactoryUtils.java:233) 	at org.springframework.orm.hibernate3.HibernateTemplate.getSession(HibernateTemplate.java:457) 	at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:393) 	at org.springframework.orm.hibernate3.HibernateTemplate.executeWithNativeSession(HibernateTemplate.java:374) 	at org.springframework.orm.hibernate3.HibernateTemplate.loadAll(HibernateTemplate.java:584) ```  ---  **Issue Links:** - #15915 Re-consider including HibernateTemplate and related classes for Hibernate 4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8cf61c595e05e9c24f0ad340f835ded570d9c7eb, https://github.com/spring-projects/spring-framework/commit/be606f4169ce8a79f88ca0bfd02233095a3cff40  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)  1 votes, 3 watchers","closed","type: task,","spring-projects-issues","2012-04-28T09:27:22Z","2019-01-11T12:40:39Z"
"","14331","DefaultAnnotationHandlerMapping is not able to find correct handler [SPR-9697]","**[Arun Kumar Kandregula](https://jira.spring.io/secure/ViewProfile.jspa?name=arun7it)** opened **[SPR-9697](https://jira.spring.io/browse/SPR-9697?redirect=false)** and commented  Background: I am developing a Portlet using Spring MVC framework deployed in liferay 5.x server. Currently I am using 3.0.0.RELEASE. Everything is working fine as expected. That is, when I use annotations like  `@RenderMapping`(params=""myaction=editFolderForm"") `@RenderMapping`(params=""myaction=editEntryForm"") `@RenderMapping`   `@ActionMapping`(params=""myaction=editEntry"") etc.  DefaultAnnotationHandlerMapping is working as expected in finding a handler for every request.  But, for some valid reason, I have to use more latest version which is 3.1.2.RELEASE instead of 3.0.0.RELEASE.  I observed that DefaultAnnotationHandlerMapping IS NOT WORKING as expected in finding a handler for every request. I figured out what is the problem by debugging the internals of Spring framework. I want to explain it clearly so that someone can tell me if this is a Bug.  In the parent class of DefaultAnnotationHandlerMapping which is AbstractMapBasedHandlerMapping  :      package org.springframework.web.portlet.handler;     public abstract class AbstractMapBasedHandlerMapping extends AbstractHandlerMapping {     ....     ....           /**      * Determines a handler for the computed lookup key for the given request.      * @see #getLookupKey      */     @Override     @SuppressWarnings(""unchecked"")     protected Object getHandlerInternal(PortletRequest request) throws Exception {     	K lookupKey = getLookupKey(request);     	Object handler = this.handlerMap.get(lookupKey);     	if (handler != null && logger.isDebugEnabled()) {     		logger.debug(""Key ["" + lookupKey + ""] -> handler ["" + handler + ""]"");     	}     	if (handler instanceof Map) {     		Map predicateMap =     				(Map) handler;     		List predicates =     				new LinkedList(predicateMap.keySet());               	LINE 81:	Collections.sort(predicates); ///////////////// PROBLEM                         		for (PortletRequestMappingPredicate predicate : predicates) {     			if (predicate.match(request)) {     				predicate.validate(request);     				return predicateMap.get(predicate);     			}     		}     		return null;     	}     	return handler;     }     ....     ....     }  This sorting is screwed up in Spring 3.1.2 and is working perfectly well in Spring 3.0.0. In next two sections I ll tell you why sorting matters and how it is screwed up in Spring 3.1.2.  > **why sorting matters ?**  This HandlerMapping is searching a sorted linked list node by node till it finds  match for a particular handler. In my code base, I have multiple Controllers whose methods are mapped with following annotations like  `@RenderMapping`  --- > default  `@RenderMapping`(params=""myaction=editEntryController"")  `@RenderMapping`(params=""myaction=editFolderController"")  etc.  The Collections.sort() depends on compareTo(..) method of each XXXPredicate class.  when a request comes first it should be checked if myaction parameter is equal to ""editEntryController"", ""editFolderController"", ...and finally if nothing matches, thn only default controller which is annotated with `@RenderMapping` annotation should be matched.  With Spring 3.0.0, its working exactly like that as expected. Where as wth Spring 3.2.1, its not behaving like that.  With both the versions, before sorting, the list is the same.      myaction=editEntry,      myaction=editEntryForm,      org.springframework.web.portlet.mvc.annotation.DefaultAnnotationHandlerMapping$ResourceMappingPredicate@123bea8a,     myaction=REDIRECT_TO_DEFAULT_PAGE,       ,      ---------------------------------> This empty string corrsponds to the default @RenderMapping      myaction=selectFolderEntries,       myaction=searchResults,       myaction=addEntry,       myaction=addEntryForm,       myaction=showMyEntries,       myaction=showRecentEntries,       org.springframework.web.portlet.mvc.annotation.DefaultAnnotationHandlerMapping$ResourceMappingPredicate@4f1e9e2d,       myaction=editFolder,       myaction=editFolderForm,      myaction=addFolder,       myaction=addFolderForm  After sorting,  With Spring 3.0.0,      org.springframework.web.portlet.mvc.annotation.DefaultAnnotationHandlerMapping$ResourceMappingPredicate@123bea8a,      org.springframework.web.portlet.mvc.annotation.DefaultAnnotationHandlerMapping$ResourceMappingPredicate@4f1e9e2d,      myaction=editEntry,      myaction=editEntryForm,      myaction=REDIRECT_TO_DEFAULT_PAGE,      myaction=selectFolderEntries,      myaction=searchResults,      myaction=addEntry,      myaction=addEntryForm,      myaction=showMyEntries,      myaction=showRecentEntries,      myaction=editFolder,      myaction=editFolderForm,      myaction=addFolder,      myaction=addFolderForm,                  ---------------> Default mapping i.e. @RenderMapping  With Spring 3.1.2 ( ignore things like [ ] ),      [myaction=editEntry]     [myaction=editEntryForm]     deleteFolder     [myaction=REDIRECT_TO_DEFAULT_PAGE]     []        --------------------------> this is wrongly placed in middle.     [myaction=selectFolderEntries]     [myaction=searchResults]     [myaction=addEntry]     [myaction=addEntryForm]     [myaction=showMyEntries]     [myaction=showRecentEntries]     deleteEntry     [myaction=editFolder]     [myaction=editFolderForm]     [myaction=addFolder]     [myaction=addFolderForm]     null  This is a linked list. And each mapping is checked from the first node. When ever the default [] i.e. an empty mapping is found in the middle of the list, true is being returned as if that is the right handler and rest of the handlers are not checked.  So is this a bug in Spring framework 3.2.1 ?    ---  **Affects:** 3.1.1, 3.1.2, 3.2 M1  **Reference URL:** http://stackoverflow.com/questions/11996771/is-this-a-bug-in-spring-3-1-2-specifically-spring-portlet-mvcs  1 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2012-08-16T16:19:53Z","2019-01-12T16:36:03Z"
"","14014","ErrorsMethodArgumentResolver fails when model attribute is mentioned in the signature of @ModelAttribute-annotated method [SPR-9378]","**[Artem Troitskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=axtavt)** opened **[SPR-9378](https://jira.spring.io/browse/SPR-9378?redirect=false)** and commented  `ErrorsMethodArgumentResolver` throws  > An Errors/BindingResult argument is expected to be immediately after the model attribute argument in the controller method signature  in the following case  ``` @RequestMapping(...) public String foo(@ModelAttribute(""foo"") Foo foo, BindingResult errors) { ... }  @ModelAttribute(""bar"") public Bar bar(@ModelAttribute(""foo"") Foo foo) { ... } ```  Currently `ErrorsMethodArgumentResolver` resolves `BindingResult` as follows:  > It is resolved by expecting the last two attributes added to the model to be the model attribute and its BindingResult  However, in the case described above this assumption is wrong, because model attribute and its `BindingResult` are added to the model during processing of `@ModelAttribute`-annotated method. Although `ModelAttributeMethodProcessor` reinserts them into the model during processing of the handler method signature, it doesn't change their positions in the model because reinsertion doesn't affect order of `LinkedHashMap`, therefore they are not the last attributes.  ---  **Affects:** 3.1 GA, 3.1.1  **Sub-tasks:** - #14321 Backport ""ErrorsMethodArgumentResolver fails when model attribute is mentioned in the signature of `@ModelAttribute-annotated` method""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c499df231555db46453f245a6190ef8d816ada29, https://github.com/spring-projects/spring-framework/commit/4fccd1799a4aa4b21fd7a6909a6fb9d1307d7b07  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2012-05-04T08:55:09Z","2019-01-13T07:04:56Z"
"","14437","Backport ""Support opaque URIs in UriComponentsBuilder"" [SPR-9804]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-9804](https://jira.spring.io/browse/SPR-9804?redirect=false)** and commented  ---  This issue is a backport sub-task of #14431  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9eeb6f15e5e187469d266b733e037b53f405704b, https://github.com/spring-projects/spring-framework/commit/be2c2e9a86bde59f10eeb6540aede70b49ae0ba9  1 votes, 3 watchers","closed","in: web,","spring-projects-issues","2012-09-17T01:58:50Z","2019-01-11T13:17:51Z"
"","14431","Support opaque URIs in UriComponentsBuilder [SPR-9798]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-9798](https://jira.spring.io/browse/SPR-9798?redirect=false)** and commented  UriComponentsBuilder is only capable of handling hierarchical URIs, not opaque URIs. Hence, the following test fails:  ``` UriComponentsBuilder builder = UriComponentsBuilder.newInstance(); builder.scheme(""mailto""); // Using path here, as there is no way to directly specify a scheme-specific part. builder.path(""foo@bar.com""); // should have been builder.schemeSpecificPart(""foo@bar.com""); UriComponents result = builder.build();  assertEquals(""mailto:foo@bar.com"", result.toUriString()); // result is mailto:/foo@bar.com ```  ---  **Sub-tasks:** - #14437 Backport ""Support opaque URIs in UriComponentsBuilder""  **Issue Links:** - [INT-2720](https://jira.spring.io/browse/INT-2720) Add support for Uri Templating to the  for all transports supported by Spring WS (_**""is depended on by""**_) - [SWS-795](https://jira.spring.io/browse/SWS-795) Allow for MessageSenders to use URI as result of UriTemplate","closed","type: enhancement,","spring-projects-issues","2012-09-14T01:28:55Z","2019-01-11T13:35:12Z"
"","14311","Introduce strategy for BeanInfo creation [SPR-9677]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-9677](https://jira.spring.io/browse/SPR-9677?redirect=false)** and commented  Currently, the `CachedIntrospectionResults` is hard-wired to create `ExtendedBeanInfo` instances. For obvious reasons, these bean infos support the JavaBeans property contract only.  To support different bean info contracts within Spring, it makes sense to have some sort of strategy instead.  ---  **Issue Links:** - #14357 Use ExtendedBeanInfo on an as-needed basis only (_**""is depended on by""**_) - #14663 Overhaul non-void JavaBean write method support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca017a488056701a07673b872e8faa40667cd32e, https://github.com/spring-projects/spring-framework/commit/4a8be690998f43a9253305e09f96ad83058ef540, https://github.com/spring-projects/spring-framework/commit/a3161632dd71920efb769b3a80555e89949b7695, https://github.com/spring-projects/spring-framework/commit/0ee12563b038797a137ac67b13e5dd6d3d918a7f, https://github.com/spring-projects/spring-framework/commit/29613f1c21fa102790a7e4094feb7cfcea2c7514, https://github.com/spring-projects/spring-framework/commit/5bcf68e25a0c5a4e33772cbbd5c8885b7dcfabaf","closed","type: enhancement,","spring-projects-issues","2012-08-09T01:43:19Z","2019-01-11T12:58:18Z"
"","14174","Backport XStreamMarshaller should convert XStream StreamException to Spring exception in case of unmarshalling an empty stream [SPR-9540]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-9540](https://jira.spring.io/browse/SPR-9540?redirect=false)** and commented  ---  This issue is a backport sub-task of #14170","closed","","spring-projects-issues","2012-06-25T01:38:30Z","2019-01-11T13:07:47Z"
"","14154","Backport ""RestTemplate.headForHeaders throws ""IllegalArgumentException: No InputStream specified"" on server resource which status code are 4xx"" [SPR-9520]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-9520](https://jira.spring.io/browse/SPR-9520?redirect=false)** and commented  ---  This issue is a backport sub-task of #13524","closed","status: declined,","spring-projects-issues","2012-06-20T02:46:20Z","2019-01-11T13:08:30Z"
"","14066","Document abstract WebApplicationInitializers [SPR-9430]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-9430](https://jira.spring.io/browse/SPR-9430?redirect=false)** and commented  We should document the new abstract WebApplicationInitializers in the reference docs (AbstractContextLoaderInitializer, AbstractDispatcherServletInitializer, and AbstractAnnotationConfigDispatcherServletInitializer).  ---  This issue is a sub-task of #13938","closed","in: web,","spring-projects-issues","2012-05-22T02:51:27Z","2019-01-11T12:42:46Z"
"","13938","Add convenient WebApplicationInitializer base classes [SPR-9300]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-9300](https://jira.spring.io/browse/SPR-9300?redirect=false)** and commented  It would be useful if we provide some default implementations of WebApplicationInitializer, setting up the root/parent context for the ContextLoaderListener, and possibly the DispatcherServlet context as well.  ---  **Sub-tasks:** - #14066 Document abstract WebApplicationInitializers","closed","type: enhancement,","spring-projects-issues","2012-04-03T00:23:01Z","2019-01-11T12:52:20Z"
"","14056","StringUtils.parseLocaleString incorrectly parses when language and country are the same and lowercase ""de_de"" parses to ""de_DE_de"" [SPR-9420]","**[Arian Maleki](https://jira.spring.io/secure/ViewProfile.jspa?name=amaleki)** opened **[SPR-9420](https://jira.spring.io/browse/SPR-9420?redirect=false)** and commented  We have noticed an issue with the LocaleChangeInterceptor when a request parameter is set to ""de_de"" the LocaleChangeInterceptor creates locale ""de_DE_de"".  With other locales like ""en_us"" it returns ""en_US"" correctly.  We have isolated this issue to any lowercase locale with same language and country parameter for example, de_de, nl_nl, etc.  Here is a complete list of affected locales  ``` bg_bg Bulgaria hr_hr Crotia de_de Germany fi_fi Finland fr_fr France nl_nl Netherland hu_hu Hungary is_is iceland it_it Italy lv_lv Latvia lt_lt Lithuania mk_mk Macedonia mt_mt Malta no_no Norway pl_pl Poland pt_pt Portugal ru_ru Russia sk_sk Slovakia th_th Thaliand tr_tr Turkey ```  Issue is with the org.springframework.util.StringUtils.parseLocaleString method.  When the localeString is parsed it incorrectly detects the endindex of the country code since the language and country are the same ""de"" it gets the first index of de which is actually the language.  End result is it thinks the country is a variant.  By changing localeString.indexOf to localeString.lastIndexOf it corrects the issue.  ``` public static Locale parseLocaleString(String localeString) { 		String[] parts = tokenizeToStringArray(localeString, ""_ "", false, false); 		System.out.println(parts.length); 		String language = (parts.length > 0 ? parts[0] : """"); 		String country = (parts.length > 1 ? parts[1] : """"); 		String variant = """"; 		if (parts.length >= 2) { 			// There is definitely a variant, and it is everything after the country 			// code sans the separator between the country code and the variant. 			int endIndexOfCountryCode = localeString.lastIndexOf(country) + country.length();  //@FIX change ""localeString.indexOf"" to localeString.lastIndexOf"" 			// Strip off any leading '_' and whitespace, what's left is the variant. 			variant = trimLeadingWhitespace(localeString.substring(endIndexOfCountryCode)); 			if (variant.startsWith(""_"")) { 				variant = trimLeadingCharacter(variant, '_'); 			} 		} 		System.out.println(language + "":"" + country + "":"" + variant); 		return (language.length() > 0 ? new Locale(language, country, variant) : null); 	} ```    ---  **Affects:** 2.5.6, 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f1246a43175dc040584140c9792beb5dce521e9b","closed","in: core,","spring-projects-issues","2012-05-16T16:52:02Z","2012-06-19T03:39:19Z"
"","14476","Add migration instructions regarding component-scanning against ""org"" base package [SPR-9843]","**[Architect](https://jira.spring.io/secure/ViewProfile.jspa?name=architect)** opened **[SPR-9843](https://jira.spring.io/browse/SPR-9843?redirect=false)** and commented  Convert to spring version 3.2 M1. Got the below exception during deployment, Application Server : Weblogic 10.3.2 , 10.3.5  ```none Oct 1, 2012 12:07:32 PM org.springframework.web.servlet.FrameworkServlet initServletBean INFO: FrameworkServlet 'spring': initialization started Oct 1, 2012 12:07:32 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh INFO: Refreshing WebApplicationContext for namespace 'spring-servlet': startup date [Mon Oct 01 12:07:32 IST 2012]; root of context hierarchy Oct 1, 2012 12:07:32 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from ServletContext resource [/WEB-INF/spring-servlet.xml] Oct 1, 2012 12:07:45 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from ServletContext resource [/WEB-INF/common-context.xml] Oct 1, 2012 12:07:46 PM org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker postProcessAfterInitialization INFO: Bean 'schedulingConfiguration' of type [class org.springframework.scheduling.annotation.SchedulingConfiguration$$EnhancerByCGLIB$$109c4520] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) Oct 1, 2012 12:07:46 PM org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker postProcessAfterInitialization INFO: Bean 'proxyAsyncConfiguration' of type [class org.springframework.scheduling.annotation.ProxyAsyncConfiguration$$EnhancerByCGLIB$$2b16986] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) Oct 1, 2012 12:07:46 PM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1041110: defining beans [proxyCachingConfiguration,loadTimeWeavingConfiguration,schedulingConfiguration,proxyAsyncConfiguration,proxyTransactionManagementConfiguration,delegatingWebMvcConfiguration,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.view.InternalResourceViewResolver#0,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0,org.springframework.cache.config.internalCacheAdvisor,cacheOperationSource,cacheInterceptor,loadTimeWeaver,org.springframework.context.annotation.internalScheduledAnnotationProcessor,org.springframework.context.annotation.internalAsyncAnnotationProcessor,org.springframework.transaction.config.internalTransactionAdvisor,transactionAttributeSource,transactionInterceptor,requestMappingHandlerMapping,viewControllerHandlerMapping,beanNameHandlerMapping,resourceHandlerMapping,defaultServletHandlerMapping,requestMappingHandlerAdapter,mvcConversionService,mvcValidator,httpRequestHandlerAdapter,simpleControllerHandlerAdapter,handlerExceptionResolver]; root of factory hierarchy Oct 1, 2012 12:07:46 PM org.springframework.web.servlet.FrameworkServlet initServletBean SEVERE: Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.annotation.internalAsyncAnnotationProcessor' defined in class path resource [org/springframework/scheduling/annotation/ProxyAsyncConfiguration.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor org.springframework.scheduling.annotation.ProxyAsyncConfiguration.asyncAdvisor()] threw exception; nested exception is java.lang.IllegalArgumentException: @EnableAsync annotation metadata was not injected 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:581) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1015) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:911) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:733) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:454) 	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:634) 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:591) 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:648) 	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:511) 	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:452) 	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133) 	at javax.servlet.GenericServlet.init(GenericServlet.java:241) 	at weblogic.servlet.internal.StubSecurityHelper$ServletInitAction.run(StubSecurityHelper.java:283) 	at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) 	at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:120) 	at weblogic.servlet.internal.StubSecurityHelper.createServlet(StubSecurityHelper.java:64) 	at weblogic.servlet.internal.StubLifecycleHelper.createOneInstance(StubLifecycleHelper.java:58) 	at weblogic.servlet.internal.StubLifecycleHelper.(StubLifecycleHelper.java:48) 	at weblogic.servlet.internal.ServletStubImpl.prepareServlet(ServletStubImpl.java:539) 	at weblogic.servlet.internal.WebAppServletContext.preloadServlet(WebAppServletContext.java:1985) 	at weblogic.servlet.internal.WebAppServletContext.loadServletsOnStartup(WebAppServletContext.java:1959) 	at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:1878) 	at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletContext.java:3153) 	at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.java:1508) 	at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:482) 	at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:425) 	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:52) 	at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:119) 	at weblogic.application.internal.flow.ScopedModuleDriver.start(ScopedModuleDriver.java:200) 	at weblogic.application.internal.flow.ModuleListenerInvoker.start(ModuleListenerInvoker.java:247) 	at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:425) 	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:52) 	at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:119) 	at weblogic.application.internal.flow.StartModulesFlow.activate(StartModulesFlow.java:27) 	at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.java:636) 	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:52) 	at weblogic.application.internal.BaseDeployment.activate(BaseDeployment.java:205) 	at weblogic.application.internal.SingleModuleDeployment.activate(SingleModuleDeployment.java:43) 	at weblogic.application.internal.DeploymentStateChecker.activate(DeploymentStateChecker.java:161) 	at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(AppContainerInvoker.java:79) 	at weblogic.deploy.internal.targetserver.operations.AbstractOperation.activate(AbstractOperation.java:569) 	at weblogic.deploy.internal.targetserver.operations.ActivateOperation.activateDeployment(ActivateOperation.java:150) 	at weblogic.deploy.internal.targetserver.operations.ActivateOperation.doCommit(ActivateOperation.java:116) 	at weblogic.deploy.internal.targetserver.operations.AbstractOperation.commit(AbstractOperation.java:323) 	at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploymentCommit(DeploymentManager.java:844) 	at weblogic.deploy.internal.targetserver.DeploymentManager.activateDeploymentList(DeploymentManager.java:1253) 	at weblogic.deploy.internal.targetserver.DeploymentManager.handleCommit(DeploymentManager.java:440) 	at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.commit(DeploymentServiceDispatcher.java:163) 	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.doCommitCallback(DeploymentReceiverCallbackDeliverer.java:195) 	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.access$100(DeploymentReceiverCallbackDeliverer.java:13) 	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer$2.run(DeploymentReceiverCallbackDeliverer.java:68) 	at weblogic.work.SelfTuningWorkManagerImpl$WorkAdapterImpl.run(SelfTuningWorkManagerImpl.java:528) 	at weblogic.work.ExecuteThread.execute(ExecuteThread.java:209) 	at weblogic.work.ExecuteThread.run(ExecuteThread.java:178) Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor org.springframework.scheduling.annotation.ProxyAsyncConfiguration.asyncAdvisor()] threw exception; nested exception is java.lang.IllegalArgumentException: @EnableAsync annotation metadata was not injected 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:169) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:570) 	... 59 more Caused by: java.lang.IllegalArgumentException: @EnableAsync annotation metadata was not injected 	at org.springframework.util.Assert.notNull(Assert.java:112) 	at org.springframework.scheduling.annotation.ProxyAsyncConfiguration.asyncAdvisor(ProxyAsyncConfiguration.java:45) 	at org.springframework.scheduling.annotation.ProxyAsyncConfiguration$$EnhancerByCGLIB$$2b16986.CGLIB$asyncAdvisor$0() 	at org.springframework.scheduling.annotation.ProxyAsyncConfiguration$$EnhancerByCGLIB$$2b16986$$FastClassByCGLIB$$477b5c38.invoke() 	at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:215) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:280) 	at org.springframework.scheduling.annotation.ProxyAsyncConfiguration$$EnhancerByCGLIB$$2b16986.asyncAdvisor() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:149) 	... 60 more                               ```  Even created simple web project with no controllers just simple spring configuration file with 3.2M1 jars , still get same error during deployment   ---  **Affects:** 3.1 GA  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)  0 votes, 5 watchers","closed","type: regression,","spring-projects-issues","2012-10-01T00:03:18Z","2015-06-02T11:00:48Z"
"","14475","DefaultListableBeanFactory memory leak spring version 3.0.5 [SPR-9842]","**[Architect](https://jira.spring.io/secure/ViewProfile.jspa?name=architect)** opened **[SPR-9842](https://jira.spring.io/browse/SPR-9842?redirect=false)** and commented  My project using spring version 3.0.5 and i can see huge memory leakage in DefaultListableBeanFactory. We are not using any ConcurrentHashMap, But it looks like spring defaultListableBeanFactory using internally and is not getting garbage collected  Please let me know, how to fix this issue and it would be really helpful   ---  **Affects:** 3.0.5, 3.2.13  **Attachments:** - [mat_spring_version_4_1_2.jpg](https://jira.spring.io/secure/attachment/22725/mat_spring_version_4_1_2.jpg) (_243.02 kB_) - [memory lekage.jpg](https://jira.spring.io/secure/attachment/20534/memory+lekage.jpg) (_19.66 kB_)  8 votes, 11 watchers","closed","","spring-projects-issues","2012-09-30T23:14:07Z","2019-01-11T13:19:58Z"
"","14402","JibxMarshaller deletes comments when Result is an XMLEventWriter [SPR-9768]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-9768](https://jira.spring.io/browse/SPR-9768?redirect=false)** and commented  If a `Result` created from an `XMLEventWriter` is passed to a `JibxMarshaller` for marshalling, then the following happens: * `AbstractMarshaller.marshal()` delegates to `AbstractMarshaller.marshalStaxResult()` * `AbstractMarshaller.marshalStaxResult()` delegates to `JibxMarshaller.marshalXmlEventWriter()` * `JibxMarshaller.marshalXmlEventWriter()` creates a `ContentHandler` from the `XMLEventWriter` and then proceeds.  The problem here is that the `ContentHandler` is a ""logical view"" API, not a ""document view"" API and (for example) does not support comments.  So if you marshal a document containing comments, they are silently deleted.  This is a bug: it is not appropriate to assume that comments are discardable.  ---  **Affects:** 3.1.2  **Attachments:** - [SPR-9768.tgz](https://jira.spring.io/secure/attachment/20423/SPR-9768.tgz) (_80.00 kB_)  **Issue Links:** - #14747 JibxMarshaller does not indent when Result is an XMLEventWriter","closed","type: bug,","spring-projects-issues","2012-09-06T08:07:23Z","2019-01-11T13:37:40Z"
"","14371","Support setting threadNamePrefix in the  XML tag [SPR-9737]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-9737](https://jira.spring.io/browse/SPR-9737?redirect=false)** and commented  The `` XML element automatically sets the thread name prefix to `foo-`.  This is usually sufficient, but I have a need to set a different thread name prefix from the bean name.  Request support for e.g. `` which would set the thread name prefix to `bar-` for that executor.    ---  **Affects:** 3.1.2","closed","status: feedback-provided,","spring-projects-issues","2012-08-28T19:16:18Z","2022-03-30T08:41:24Z"
"","14146","Shut down task executor beans first during factory destruction [SPR-9512]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-9512](https://jira.spring.io/browse/SPR-9512?redirect=false)** and commented  I have a bean factory with this:  ```                 ```  and I'm occasionally seeing this exception on bean factory shutdown:  ``` org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'transactionManager':     Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean     from a BeanFactory in a destroy method implementation!)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:212)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)         at org.springframework.transaction.interceptor.TransactionAspectSupport.determineTransactionManager(TransactionAspectSupport.java:248)         at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:272)         at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$before$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96c(AbstractTransactionAspect.aj:63)         at com.foobar.DefaultQueueProcessor.runQueue(DefaultQueueProcessor.java:50)         at sun.reflect.GeneratedMethodAccessor59.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)         at java.lang.reflect.Method.invoke(Method.java:597)         at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:64)         at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:53)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)         at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)         at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)         at java.lang.Thread.run(Thread.java:680) ```  A scheduled task is starting and then dying because the bean factory is shutting down.  It seems like an improvement would be: before shutting down a bean factory, find all beans that perform scheduled tasks and stop them, so they don't generate new activity during bean factory destruction.   ---  **Affects:** 3.1.1  9 votes, 12 watchers","open","type: enhancement,","spring-projects-issues","2012-06-15T12:52:54Z","2021-02-05T14:58:48Z"
"","14027","Support DisposableBean on prototype and @Configurable beans using weak references [SPR-9391]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-9391](https://jira.spring.io/browse/SPR-9391?redirect=false)** and commented  Spring has some very counter-intuitive behavior when handling prototype scoped and `@Configurable` beans, or more generally, beans whose lifecycles are ""smaller"" than the lifecycle of the overall application context (e.g., that of singleton beans).  The issue is that initialization activity occurs for these beans (e.g., `InitializingBean`) but destruction activity does not (e.g., `DisposableBean`). For just one example, #11326 complains about this.  Related to this is the non-intuitive behavior that `ApplicationListener` doesn't work at all for prototype and `@Configurable` beans, presumably because there's no way for the application context to know when to **un**register the listener (e.g., see the code quoted in #14023).  This contributes to much confusion about Spring. But even worse, the typical result for unaware programmers is memory leaks. This is due to destruction activity that never occurs, such as listeners that don't get unregistered, etc. In a servlet container environment, this can then cause class loader leaks on web application restart, etc.  All of these problems can be solved easily: have the application context maintain weak references to these beans, along with a corresponding reference queue, and invoke all of the destruction callbacks whenever any bean appears on the reference queue. In addition, when the application context itself is shutdown, since there can still be ""live"" prototype and `@Configurable` beans, we need to find and destruct them; but these beans will exist as uncleared weak references, which can then be iteratively destructed (presumably we are discarding the weak references after destructing the corresponding bean, so at any given time the weak references we maintain represent only the ""live"" beans).  To avoid having to create a new thread to poll the reference queue, the application context can poll the reference queue every time a new prototype or `@Configurable` bean is instantiated, etc. This ensures that there can be no memory leak caused by the maintenance of the references themselves. Regarding the behavior of destructor timing, in the worst case, beans will be always be destructed on application context shutdown, but typically much sooner. Better late than never!  FYI, this idea was originally mentioned in #9922; I'm just elaborating on it.  ---  **Affects:** 3.1.1  **Issue Links:** - #14023 Add new method ConfigurableApplicationContext.removeApplicationListener() - #11326 Disallow destroy-method when scope is prototype - #9922 Prototype application context event listeners are not notified within the events  2 votes, 4 watchers","open","status: bulk-closed,","spring-projects-issues","2012-05-09T08:23:33Z","2022-06-14T20:45:02Z"
"","14023","Introduce removeApplicationListener in ConfigurableApplicationContext","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-9387](https://jira.spring.io/browse/SPR-9387?redirect=false)** and commented  I have some object which need to receive some `ApplicationEvents` that are sent around in my application.  However, these objects have a lifecycle that does not match with the lifecycle of normal beans in the application context (their lifecycle is shorter).  Therefore, I have these beans marked `@Configurable`, and they are `ApplicationContextAware` so they can get a reference to the application context (which is assumed to be a `ConfigurableApplicationContext`.  Then, when they ""start"" they register as listeners for application events via `ConfigurableApplicationContext.addApplicationListener()`. However, when they ""stop"" there is no way for them to unregister themselves as listeners, because there is no corresponding method `ConfigurableApplicationContext.removeApplicationListener()`.  So this request is simply to add `ConfigurableApplicationContext.removeApplicationListener()`.  If there is some more elegant way to do what I'm trying to do please let me know. But just from the face of it, it seems weirdly asymmetrical to have a public `addFooListener()` method without a corresponding `removeFooListener()` method.  Thanks.  ---  **Affects:** 3.1.1  **Issue Links:** - #14027 Support DisposableBean on prototype and `@Configurable` beans using weak references  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-05-08T15:49:26Z","2022-07-12T17:49:45Z"
"","14634","Exception during context refresh swallowed by subsequent LifecycleProcessor exception handling [SPR-10000]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-10000](https://jira.spring.io/browse/SPR-10000?redirect=false)** and commented  My application had a bug causing an exception to be thrown during construction of a bean.  This caused the application context refresh operation to be aborted. However, in the process of aborting the refresh, an additional exception was thrown by `AbstractApplicationContext.getLifecycleProcessor()`.  This second exception got logged to the error log, but the first exception never did.  As a result, it was very difficult to debug what the actual problem was.  The error logs, including the second exception that did get logged, are here (edited for brevity):  ``` 2012-11-15 17:27:29,067 [localhost-startStop-1] INFO : Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@7dbafc22: defining beans [...]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@5697c78b 2012-11-15 17:27:29,551 [localhost-startStop-1] INFO : Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@7dbafc22: defining beans [...]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@5697c78b 2012-11-15 17:27:29,595 [localhost-startStop-1] INFO : Closing Root WebApplicationContext: startup date [Thu Nov 15 17:27:08 CST 2012]; root of context hierarchy 2012-11-15 17:27:29,607 [localhost-startStop-1] WARN : Exception thrown from LifecycleProcessor on context close java.lang.IllegalStateException: LifecycleProcessor not initialized - call 'refresh' before invoking lifecycle methods via the context: Root WebApplicationContext: startup date [Thu Nov 15 17:27:08 CST 2012]; root of context hierarchy         at org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor(AbstractApplicationContext.java:350)         at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1038)         at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:993)         at org.springframework.context.support.AbstractApplicationContext.destroy(AbstractApplicationContext.java:981)         at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:498)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:474)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:509)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:474)         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:300)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:609)         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:469)         at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:383)         at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283)         at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)         at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4791)         at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)         at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)         at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)         at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)         at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:618)         at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1100)         at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1618)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)         at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)         at java.util.concurrent.FutureTask.run(FutureTask.java:166)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)         at java.lang.Thread.run(Thread.java:722) ```  It appears that the following snippet of code in `AbstractBeanFactory` (visible in the above stack trace) may be contributing to the problem (but I haven't verified that for sure). Note how the second exception occurs during the call to `destroySingleton()`.  ```              // Create bean instance.             if (mbd.isSingleton()) {                 sharedInstance = getSingleton(beanName, new ObjectFactory() {                     public Object getObject() throws BeansException {                         try {                             return createBean(beanName, mbd, args);                         }                         catch (BeansException ex) {                             // Explicitly remove instance from singleton cache: It might have been put there                             // eagerly by the creation process, to allow for circular reference resolution.                             // Also remove any beans that received a temporary reference to the bean.                             destroySingleton(beanName);                             throw ex;                         }                     }                 });                 bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);             } ```  Possibly relevant: I have a slightly unusual setup where an outer application context contains a bean which is itself an inner application context:  ```                            classpath:updates.xml                            false                          ```  The `applicationContextBean` is a bean that exposes the containing application context. It is set as the parent of the nested context. Note the `refresh` constructor parameter is `false`, so the inner application context is not refreshed until `afterPropertiesSet()`.  Bottom line: ideally, secondary exceptions should never occur; but if they do, they should never prevent a primary exception from being logged.  ---  **Affects:** 3.1.2  **Attachments:** - [SPR-10000.tgz](https://jira.spring.io/secure/attachment/20908/SPR-10000.tgz) (_12.27 kB_)  **Issue Links:** - #16626 Exceptions thrown during AbstractApplicationContext.refresh() not being logged right when they are caught  **Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","in: core,","spring-projects-issues","2012-11-16T10:39:22Z","2019-01-11T19:01:27Z"
"","14110","Upgrade commons-httpclient from version 4.1  to version 4.2 [SPR-9475]","**[Anvar Karimson](https://jira.spring.io/secure/ViewProfile.jspa?name=anvar)** opened **[SPR-9475](https://jira.spring.io/browse/SPR-9475?redirect=false)** and commented  HttpClient 4.2 has deprecated ThreadSafeClientConnManager and replaced it with PoolingClientConnectionManager which amongst other things provides much better support for connection pool statistics.  ---  **Issue Links:** - #14466 HttpComponentsHttpInvokerRequestExecutor does not explicitly release connection - #11605 Apache HttpClient 4.1 pooled coonection manager support in Spring Web  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6445f09c36f3e5effe29ac676608bd0e4155cafe  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-06-06T02:26:15Z","2019-01-11T13:01:32Z"
"","14511","Allow Overriding of Content-Type for an Error Response [SPR-9878]","**[Antonio W. Lagnada](https://jira.spring.io/secure/ViewProfile.jspa?name=lagnada)** opened **[SPR-9878](https://jira.spring.io/browse/SPR-9878?redirect=false)** and commented  Allow Overriding of Content-Type for an Error Response  I have a controller that serves up an image and the type content-type requested is controlled via Accept header as it should be. I believe the BufferedImageHttpMessageConverter defaults to image/png if the Accept header is not set. The supported types are image/png, image/gif, and image/jpg.  MessageConverter config:  ```                      ```  Example Request:  ``` GET /account/{accountId}/qrcode Accept: image/png Response Body: 	Content-Type: image/png 	[binary content]  Errors Thrown: 400 Bad Request 	Content-Type: application/json 404 NOT FOUND ```  I currently have this code for generating an error response:  ``` @ResponseBody @ExceptionHandler(BusinessRuleViolation.class) @ResponseStatus(value = HttpStatus.BAD_REQUEST) public ResponseEntity handleBusinessRuleViolation2(BusinessRuleViolation e) {     ErrorResponse errorResponse = new ErrorResponse();     errorResponse.setCode(VALIDATION);     errorResponse.setFieldErrors(new ArrayList());     String message = e.getMessage();     if (!hasText(message)) {         // Get the message from validationMessages.properties         message = getMessage(e.getCode(), new Object[]{e.getField()});     }     FieldErrorResponse fieldErrorResponse = new FieldErrorResponse(e.getField(), e.getCode(), message);     errorResponse.addFieldError(fieldErrorResponse);     HttpHeaders headers = new HttpHeaders();     headers.setContentType(MediaType.APPLICATION_JSON);     return new ResponseEntity(errorResponse, headers, HttpStatus.BAD_REQUEST); } ```  The issue I am having is that the MessageConverters are not honoring the Content-Type being set above. I know that the client negotiated for an image/[png|jpg|gif] content but in an error case I would like to override the Content-Type to application/json or application/xml to communicate with the API caller what has gone wrong.  The only workaround I could do to make this work is to return a ResponseEntity\ and call the JSON/XML MessageConverter manually and I would rather not do that.  ---  **Affects:** 3.1.2  **Issue Links:** - #16802 Exception handling accept behaviour  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/3832bb236443ee346a4afc8421c3b92e799dabec  3 votes, 7 watchers","closed","status: declined,","spring-projects-issues","2012-10-12T08:23:39Z","2019-01-12T16:25:03Z"
"","14206","ConcurrentMapCache throws NullPointerException when allowNullValues it true [SPR-9572]","**[Anton Oparin](https://jira.spring.io/secure/ViewProfile.jspa?name=mavarazy)** opened **[SPR-9572](https://jira.spring.io/browse/SPR-9572?redirect=false)** and commented  I am trying to improve performance of my application, by using `@Cacheable` for DB heavy loaded operations: The procedure is following. 1. Retrieve value from DB for the key 2. If value is not present, calculate the value and put it to DB for further use.    After adding `@Cacheable` annotation and configuring ConcurrentMapCache I am receiving NullPointerExceptions on get operations for new values which are not present in DB.  java.lang.NullPointerException at java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:881) at org.springframework.cache.concurrent.ConcurrentMapCache.put(ConcurrentMapCache.java:103)  Cache should not add any new errors, from my point of view.   --- No further details from [SPR-9572](https://jira.spring.io/browse/SPR-9572?redirect=false)","closed","in: core,","spring-projects-issues","2012-07-07T03:58:35Z","2019-01-11T12:53:54Z"
"","14045","MappingJacksonHttpMessageConverter does not decode string properly [SPR-9409]","**[Anton Oparin](https://jira.spring.io/secure/ViewProfile.jspa?name=mavarazy)** opened **[SPR-9409](https://jira.spring.io/browse/SPR-9409?redirect=false)** and commented  RESTTemplate receives JSON response in ISO-8859-1 encoding, and forwards it to MappingJacksonHttpMessageConverter, which can process only UTF-8 encoding.  Looking at other MessageConverters they use encoding from HttpRequest, which should also be done in MappingJacksonHttpMessageConverter.  From my point of view this should be a part of generic logic, and not to be duplicated in every HttpMessageConverter.   ---  **Affects:** 3.1.1","closed","status: declined,","spring-projects-issues","2012-05-15T02:52:38Z","2019-01-12T16:36:23Z"
"","13966","TypeDescriptor should make a better use of caching [SPR-9328]","**[Anton Oparin](https://jira.spring.io/secure/ViewProfile.jspa?name=mavarazy)** opened **[SPR-9328](https://jira.spring.io/browse/SPR-9328?redirect=false)** and commented  TypeDescriptor has initial cache initialized with primitive data types, when using in general service ConversionService it creates descriptor for every invocation of ConversionService. Caching could improve this.   --- No further details from [SPR-9328](https://jira.spring.io/browse/SPR-9328?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-04-14T04:27:43Z","2019-01-12T03:48:43Z"
"","13896","MimeMessageHelper does not handle attachment file name encoding [SPR-9258]","**[Anton Kuzmin](https://jira.spring.io/secure/ViewProfile.jspa?name=thehappycoder)** opened **[SPR-9258](https://jira.spring.io/browse/SPR-9258?redirect=false)** and commented  MimeMessageHelper.addAttachment should encode file name according to RFC 822. As MimeBodyPart javadoc says: A note on RFC 822 and MIME headers RFC 822 header fields must contain only US-ASCII characters. MIME allows non ASCII characters to be present in certain portions of certain headers, by encoding those characters. RFC 2047 specifies the rules for doing this. The MimeUtility class provided in this package can be used to to achieve this. Callers of the setHeader, addHeader, and addHeaderLine methods are responsible for enforcing the MIME requirements for the specified headers. In addition, these header fields must be folded (wrapped) before being sent if they exceed the line length limitation for the transport (1000 bytes for SMTP). Received headers may have been folded. The application is responsible for folding and unfolding headers as appropriate.  Workaround is instead of calling MimeMessageHelper.addAttachment do this: ByteArrayDataSource content = new ByteArrayDataSource(attachment.getContent()); // helper.addAttachment(attachment.getFileName(), content); Assert.notNull(fileName, ""Attachment filename must not be null""); Assert.notNull(content, ""DataSource must not be null""); MimeBodyPart mimeBodyPart = new MimeBodyPart(); mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT);          String fileName = null;         try {           fileName = MimeUtility.encodeText(fileName);         } catch (UnsupportedEncodingException e) {           throw new RuntimeException(e);         }              mimeBodyPart.setFileName(fileName);         mimeBodyPart.setDataHandler(new DataHandler(content));         helper.getRootMimeMultipart().addBodyPart(mimeBodyPart);    ---  **Affects:** 2.5.6  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2012-03-22T03:30:31Z","2013-01-16T04:53:41Z"
"","13987","Regression: Incorrect behavior if a @PathVariable has the same name as a @ModelAttribute's object property [SPR-9349]","**[Anthony Horne](https://jira.spring.io/secure/ViewProfile.jspa?name=ahorne)** opened **[SPR-9349](https://jira.spring.io/browse/SPR-9349?redirect=false)** and commented  Take the example MVC Controller method:  `@RequestMapping`(""/entity/{entityId}"") public String showEntityScreen(`@PathVariable`(""entityId"") long entityId, `@ModelAttribute`(""entityModel"") Entity entity)  Assume that the ""Entity"" object above has an ""entityId"" property.  Spring is mapping the path variable value to the model object's property, for example: Request URL: /entity/5 entityId Form Value: 20 The ModelAttribute's entityId property is being set as 5 instead of the correct value of 20.  Changing the `@RequestMapping` and `@PathVariable` to use a different name (""entityId_pv"", for example) fixes the issue, as does reverting back to 3.0.3.RELEASE. We have verified that the form data is being submitted correctly.  ---  **Affects:** 3.1.1  **Sub-tasks:** - #14068 Backport ""Regression: Incorrect behavior if a `@PathVariable` has the same name as a `@ModelAttribute`'s object property""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4027b389031273955ffe343732eac50b8b5c0d25, https://github.com/spring-projects/spring-framework/commit/1af7575bded873006014792ac853ee492b0eb857","closed","type: bug,","spring-projects-issues","2012-04-26T07:42:27Z","2019-01-13T07:05:03Z"
"","14477","Setting a complex object as value in setAttribute for a RedirectAttributes instance, causes a suppressed exception - ConversionCannotBeSupportedEx [SPR-9844]","**[anirban majumdar](https://jira.spring.io/secure/ViewProfile.jspa?name=anirvan)** opened **[SPR-9844](https://jira.spring.io/browse/SPR-9844?redirect=false)** and commented  Hello,  I was trying to figure out the difference b/w addFlashAttribute & addAttribute for an instance of RedirectAttribute, when I stumbled across this strange behaviour. What made it seem strange was that there was no sign of an exception anywhere. On further investigation I found that setting a complex object as a parameter for the addAttribute method caused a nested exception -> (InvocationTargetException(ConversionCannotBeSupportedException)). The exception message read - ""Failed to convert type \ to String"".  The strangest thing is that the InvocationTargetEx is suppressed. So there's no way for a developer to know what happened. I'm not sure whether this is a conscious design decision. I was also wondering that if the ""addAttribute"" method expects to convert everything to String, then why not have the parameter itself be ""String"" instead of ""Object""?  Do let me know if there's anything else I can provide.   ---  **Affects:** 3.1 GA","closed","status: declined,","spring-projects-issues","2012-10-01T07:39:31Z","2019-01-12T16:25:05Z"
"","13893","Intermittent BeanCurrentlyInCreationException when using @Autowired on a FactoryBean or anywhere in its dependency graph [SPR-9255]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-9255](https://jira.spring.io/browse/SPR-9255?redirect=false)** and commented  I've been bitten in the past by an intermittent `BeanCurrentlyInCreationException` when I've `@Autowired` a `FactoryBean` implementation. I believe that this is considered to be a no-no, but occassionally I forget and lose hours to diagnosing the problem until the penny drops. An example can be seen in https://issuetracker.springsource.com/browse/VMS-604. Today, I've been bitten by a variation of this same problem.  This time, rather than having an `@Autowired` `FactoryBean` I've got an `@Autowired` class that's a dependency of the `FactoryBean`. I believe this means that to avoid a possible `BeanCurrentlyInCreationException` I need to avoid using `@Autowired` on a `FactoryBean` and also on anything in the `FactoryBean`'s dependency graph.  The main problem here is the intermittent nature of the failure. There appears to be something non-deterministic in the code that finds all of the candidates for a dependency. This, I'm guessing, is what makes the failure intermittent which, in turn, makes it harder to diagnose. I'm also wondering how Spring guarantees that there's only one possible candidate for the dependency if it, apparently, doesn't always need to initialise the `FactoryBean` to satisfy the dependency. Is there a risk that it might miss the fact that there are multiple candidates, or is there something about one ordering which means that it can successfully initialise the `FactoryBean` to check the type that it will produce without also triggering a `BeanCurrentlyInCreationException`?  Ideally, dependency resolution would be deterministic so that this problem happen none of the time or all of the time. Right now it's dangerous as the problem can be lurking for days or weeks until it occurs. If deterministic dependency resolution isn't possible, I'd love to see some improved diagnostics for this problem. Something that pointed out the dangerous use of `@Autowired` on a `FactoryBean` or one of its dependencies would be a big help.  ---  **Affects:** 3.1 GA  **Issue Links:** - #13346 Doc: `@Autowired` properties not reliably set in FactoryBean before getObject (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/6fa97fa4564a189069382bd126e69c8d666ab50e, https://github.com/spring-projects/spring-framework-issues/commit/189ba5b80dfcb65bf6821d11da80f6616ca8115c  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-03-21T07:24:00Z","2019-01-13T07:05:34Z"
"","14443","MVC variables are not being mapped correctly to their variables - BeanWrapperImpl is not thread-safe [SPR-9810]","**[Andy Hurst](https://jira.spring.io/secure/ViewProfile.jspa?name=dilbert789)** opened **[SPR-9810](https://jira.spring.io/browse/SPR-9810?redirect=false)** and commented  We're having an issue where the values that we take in via `@PathVariable` or via binding under moderate load are getting assigned to the wrong variables.  For doing these tests we're always hitting the same URL's.  Hitting the URL's slowly produce the correct results every time.  We're using Spring 3.0.5.RELEASE but have tired up to 3.1.2.RELEASE and still have the issue.  We can't see anything else that's changed lately and we've had these services in production for over a year now and they seem to have just recently started throwing these.  Code Example for Binding:       @RequestMapping(value = ""config/selectItem"")     public ModelAndView selectItem(@Valid selectItemCommand command, BindingResult bindResults) {        if (!""test"".equals(command.getName())        {          //Fails into here          int i =0;                  }         }  Code Example for Path Variables:      @RequestMapping(value = ""config/selectItem/{name}"",method = RequestMethod.GET)     public ModelAndView selectItem(@PathVariable(""name"") String name)     {       if (!""test"".equals(name))       {         //Fails into here         int i = 0;       }     }  I added a HttpServletRequest object to the parameter list and the URL that it shows has the correct values.  This is happening in our production environment and locally on our dev boxes.  I'm able to easily reproduce the issue with as few as 10 users on the site so it's not taking a lot of load. When a variable value is not correct it seems to either be the value of a different parameter, or null.  It doesn't happen every time either.   ---  **Affects:** 3.0.5, 3.0.6, 3.1.2  **Reference URL:** http://stackoverflow.com/questions/12495869/spring-is-not-mapping-pathvariables-correctly-to-the-correct-variables","closed","status: invalid,","spring-projects-issues","2012-09-19T11:09:19Z","2019-01-12T05:28:04Z"
"","13975","pointcuts used by transactional aspects can misbehave when ITDs are used [SPR-9337]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-9337](https://jira.spring.io/browse/SPR-9337?redirect=false)** and commented  Full discussion in here: https://jira.springsource.org/browse/ROO-3076  Basically, the problem is that one of the pointcuts for the transaction aspect (AnnotationTransactionAspect) is:  ``` private pointcut executionOfAnyPublicMethodInAtTransactionalType() :      execution(public * ((@Transactional *)+).*(..)) && within(@Transactional *); ```  The within(`@Transactional` *) piece will not match methods in this kind of situation: (which comes up in Roo)  ``` class Foo { }  aspect Azpect {   declare @type: Foo: @Transactional;   public void Foo.someMethod() {} } ```  because within() matches based on lexical scope of the declaration.  someMethod() is declared in Azpect and Azpect does not have the `@Transactional` annotation.  The workarounds right now are either to annotate the aspect or to annotate the ITD.  However, the reason a within() was included in the original spring aspect was no doubt performance because it helped quickly eliminate many candidate types that did not have the annotation.  But since that was done AspectJ has implemented fast match for the execution pointcut, so we could probably remove the within() component of this pointcut.  The remaining execution() piece will do the right thing for regular methods and ITDs.  But we would need a bit of testing to confirm there is definetly no adverse performance impact.   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-04-20T10:43:42Z","2018-12-27T12:30:06Z"
"","13841","SpEL: support references to arrays in the T() construct [SPR-9203]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-9203](https://jira.spring.io/browse/SPR-9203?redirect=false)** and commented  Reported via http://stackoverflow.com/questions/9073447/spring-expression-language-spel-for-array-method-parameters  SpEL does not allow T(foo.Bar[]) - i.e. it will not accept the array notation there, resulting in the need to do something like this: new foo.Bar[0].class    ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4cee691d095f5b91618ec939bb9ef54c8bd0b46d, https://github.com/spring-projects/spring-framework/commit/e68b563626147120e84e164704969b83df7ad35d, https://github.com/spring-projects/spring-framework/commit/916e9d6efa390faf8511942c0ab40dadf5da8382  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-05T13:22:00Z","2012-06-19T03:39:33Z"
"","14481","Support SpEL in mvc:mapping tags [SPR-9848]","**[Andy Chang](https://jira.spring.io/secure/ViewProfile.jspa?name=achang)** opened **[SPR-9848](https://jira.spring.io/browse/SPR-9848?redirect=false)** and commented  It seems that the Spring Expression inside  in the interceptor configuration is not being evaluated. Please add support for SpEL in mvc:mapping tags.  \    \\   \    ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?130554-Mixing-XML-Configuration-and-WebMvcConfigurationSupport  **Issue Links:** - #13929  location param shoud support SpEL  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62f2858f7f6da9eb84366b3c5f4f693838d159f3","closed","type: enhancement,","spring-projects-issues","2012-10-02T10:53:12Z","2019-01-11T13:20:15Z"
"","14224","Allow SpEL to support nested expressions [SPR-9590]","**[André-John](https://jira.spring.io/secure/ViewProfile.jspa?name=ajmas)** opened **[SPR-9590](https://jira.spring.io/browse/SPR-9590?redirect=false)** and commented  It would be handy if SpEL supported nested expressions such as:  ``` #{ #{3+3} + 3 } ```  Unless there is another way, the reason this is useful becomes clear when you try to define values in a property file as follows, for example:  ``` 1. note SERVER evaluates to myhost:port apache.port = #{ systemProperties['SERVER'].split("":"")[0] } childa.port = #{ ${apache.port} + 1 } ```  Once partial evaluation happens then the result is a nested SpEL block, rather than the first part's evaluated value being inserted.  I have tested this in both Spring 3.0.0 and 3.1.1. Neither support this, which poses an unfortunate limitation.   ---  **Affects:** 3.1.1  2 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-07-12T14:50:15Z","2019-01-12T02:47:19Z"
"","14108","Resolve nested ${..} placeholders via PropertyResolver/Environment [SPR-9473]","**[André Berenguel](https://jira.spring.io/secure/ViewProfile.jspa?name=andre.berenguel)** opened **[SPR-9473](https://jira.spring.io/browse/SPR-9473?redirect=false)** and commented  The following code does not resolve the property `${database.url}` correctly.  ```java @Configuration @PropertySource(""classpath:/myapp.properties"") public class ApplicationConfig {      @Autowired     private Environment env;      ...      @Bean(destroyMethod = ""close"")     public DataSource dataSource() {          ...         dataSource.setJdbcUrl(env.getProperty(""database.url""));         ...     } ```  When the file `myapp.properties` is like  ``` database.host=localhost database.port=3306 database.base=mybase  database.url=jdbc:mysql://${database.host}:${database.port}/${database.base}?autoReconnect=true ```  The property is being resolved as it is declared: `jdbc:mysql://${database.host}:${database.port}/${database.base}?autoReconnect=true` I expected it was resolved as `jdbc:mysql://localhost:3306/mybase?autoReconnect=true`  ---  **Affects:** 3.1 GA  **Issue Links:** - #14203 Allow PropertyResolver implementations to ignore unresolvable ${placeholders} (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2012-06-05T23:44:00Z","2019-01-13T21:06:33Z"
"","14635","Confusing behaviour of declaring two  [SPR-10001]","**[Andrzej Wisłowski](https://jira.spring.io/secure/ViewProfile.jspa?name=awislowski)** opened **[SPR-10001](https://jira.spring.io/browse/SPR-10001?redirect=false)** and commented  If the xml configuration we have two tags defined  we do not get any exception.  Obviously it makes no sense to have two, but I couldn't find this bug for long (the first one had other inner definition), because Spring silently accepts the second declaration.  My proposition is to throw Exception if we have an other definition of    ---  **Affects:** 3.1.2","closed","type: enhancement,","spring-projects-issues","2012-11-17T09:29:04Z","2015-09-22T20:44:28Z"
"","13872","java.util.ConcurrentModificationException in org.springframework.web.portlet.handler.AbstractMapBasedHandlerMapping [SPR-9234]","**[Andrus Salumets](https://jira.spring.io/secure/ViewProfile.jspa?name=animussensual)** opened **[SPR-9234](https://jira.spring.io/browse/SPR-9234?redirect=false)** and commented  Portlet on page creates ajax resource requests to Controller, two request might happen simultaneously. Get errors quite often(at least 1 per hour).  Caused by: java.util.ConcurrentModificationException at java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:373) at java.util.LinkedHashMap$KeyIterator.next(LinkedHashMap.java:384) at java.util.AbstractCollection.toArray(AbstractCollection.java:124) at java.util.LinkedList.addAll(LinkedList.java:269) at java.util.LinkedList.addAll(LinkedList.java:247) at java.util.LinkedList.\(LinkedList.java:98) at org.springframework.web.portlet.handler.AbstractMapBasedHandlerMapping.getHandlerInternal(AbstractMapBasedHandlerMapping.java:80) at org.springframework.web.portlet.mvc.annotation.DefaultAnnotationHandlerMapping.getHandlerInternal(DefaultAnnotationHandlerMapping.java) at org.springframework.web.portlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:207) at org.springframework.web.portlet.DispatcherPortlet.getHandler(DispatcherPortlet.java:975) at org.springframework.web.portlet.DispatcherPortlet.doResourceService(DispatcherPortlet.java:804) at org.springframework.web.portlet.FrameworkPortlet.processRequest(FrameworkPortlet.java:525)   ---  **Affects:** 3.0.5","closed","status: invalid,","spring-projects-issues","2012-03-14T03:48:17Z","2019-01-12T05:28:55Z"
"","14452","Non-singleton beans performance issue  [SPR-9819]","**[Andriy Rosa](https://jira.spring.io/secure/ViewProfile.jspa?name=andriyrosa)** opened **[SPR-9819](https://jira.spring.io/browse/SPR-9819?redirect=false)** and commented  For each method invocation for not-singleton scope bean Interceptor got bean from bean-factory by using AbstractBeanFactory.getBean  But before getting required bean inside method getBean we have cheeking  Object sharedInstance = getSingleton(beanName); if (sharedInstance != null && args == null) {  Inside getSingleton we have synchronized blocks.  considering that in high-load project we can have a lot of scoped-beans methods invocations, getSingleton lock all threads, and performance gone to very poor.  I'm not very good in spring-core architecture, however by my mean the most obvious solution - it push into args argument of getBean method specific arg, which will show, that we request not singleton bean for sure  P.S.: Take my apologies for my bad English.  ---  **Affects:** 3.1.1  **Issue Links:** - #10033 Threads bottlenecking in DefaultSingletonBeanRegistry when using Wicket's `@SpringBean` annotation for injection (_**""is duplicated by""**_) - #13117 Performance bottleneck and potential thread deadlock in DefaultSingletonBeanRegistry - #14414 AbstractBeanFactory#markBeanAsCreated performance issue due to lock contention - #15302 DefaultSingletonBeanRegistry::getSingleton(String beanName) attempts to create bean when it shouldn't - #16864 Further locking optimizations for the retrieval of non-singleton beans  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-09-22T01:35:49Z","2019-01-13T07:03:00Z"
"","14234","Deadlock between destroy connection and createSession against ActiveMQ [SPR-9600]","**[Andrey](https://jira.spring.io/secure/ViewProfile.jspa?name=dernasherbrezon)** opened **[SPR-9600](https://jira.spring.io/browse/SPR-9600?redirect=false)** and commented  Some background of events: * implementation of MessageListener sends jms messages back using the same jms.Connection (SingleConnectionFactory used) * ""main"" thread stops spring context, closes MessageListener and jms.Connection  ActiveMQ version: 5.3.1  Here is thread dump from jstack:  ``` Found one Java-level deadlock: ============================= ""ActiveMQ Session Task"":   waiting to lock monitor 0x0000000004aa1940 (object 0x00000000f22e3ba0, a java.util.LinkedList),   which is held by ""main"" ""main"":   waiting to lock monitor 0x00007f3040bf5510 (object 0x00000000f22e4f08, a java.lang.Object),   which is held by ""ActiveMQ Session Task""  Java stack information for the threads listed above: =================================================== ""ActiveMQ Session Task"":         at org.springframework.jms.connection.CachingConnectionFactory.getSession(CachingConnectionFactory.java:214)         - waiting to lock  (a java.util.LinkedList)         at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:534)         at $Proxy14.createSession(Unknown Source)         at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:196)         at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:457)         at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:534)         at .onMessage(CommandRequestReceiver.java:71)         at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1204)         - locked  (a java.lang.Object)         at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131)         at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202)         at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)         at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)         at java.lang.Thread.run(Thread.java:679) ""main"":         at org.apache.activemq.MessageDispatchChannel.close(MessageDispatchChannel.java:122)         - waiting to lock  (a java.lang.Object)         at org.apache.activemq.ActiveMQMessageConsumer.dispose(ActiveMQMessageConsumer.java:755)         at org.apache.activemq.ActiveMQMessageConsumer.doClose(ActiveMQMessageConsumer.java:651)         at org.apache.activemq.ActiveMQMessageConsumer.close(ActiveMQMessageConsumer.java:645)         at org.springframework.jms.connection.CachingConnectionFactory$CachedSessionInvocationHandler.physicalClose(CachingConnectionFactory.java:430)         at org.springframework.jms.connection.CachingConnectionFactory$CachedSessionInvocationHandler.invoke(CachingConnectionFactory.java:305)         at $Proxy15.close(Unknown Source)         at org.springframework.jms.connection.CachingConnectionFactory.resetConnection(CachingConnectionFactory.java:184)         - locked  (a java.util.LinkedList)         - locked  (a java.util.HashMap)         at org.springframework.jms.connection.SingleConnectionFactory.destroy(SingleConnectionFactory.java:312)         at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:184)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:487)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:463)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:431)         - locked  (a java.util.LinkedHashMap) ```    ---  **Affects:** 3.0.5, 4.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/59e3cf92ba939b43d64a4df52683bd63ec736c56, https://github.com/spring-projects/spring-framework-issues/commit/b4ad3b6cb4deb2d2c68f1bd88ecbf4fe60609001","closed","status: declined,","spring-projects-issues","2012-07-18T10:34:49Z","2019-01-12T16:36:16Z"
"","14537","@Enable-style annotation is desired for automatic registration of PropertySourcesPlaceholderConfigurer [SPR-9904]","**[Andrey Rubtsov](https://jira.spring.io/secure/ViewProfile.jspa?name=andrii.rubtsov)** opened **[SPR-9904](https://jira.spring.io/browse/SPR-9904?redirect=false)** and commented  This issue is a continuation of #13183. Long story short, Environment is advertised to be used in new Spring projects. However, in those cases when using PSPC is still wanted instead of declaring it as a `@Bean` it would be nice to have `@Enable-style` annotation instead for it. The main argument so far is probably that PSPC `@Bean` looks slightly unnatural among app specific beans because it is related to Spring internals rather than carrying application bean semantics.  ---  **Issue Links:** - #18712 Placeholder resolution for annotation attributes is not active by default - #16395 `@Value`(""${someProperty}"") should work without having to specify a PropertySourcesPlaceholderConfigurer bean. - #13183 automatic registration of PSPC when `@PropertySource` is used  16 votes, 26 watchers","closed","has: votes-jira,","spring-projects-issues","2012-10-22T01:02:51Z","2019-01-13T07:02:36Z"
"","14043","Support for better schemaName auto-detection in the OracleCallMetaDataProvider [SPR-9407]","**[Andrey Moiseenko](https://jira.spring.io/secure/ViewProfile.jspa?name=m.andrew)** opened **[SPR-9407](https://jira.spring.io/browse/SPR-9407?redirect=false)** and commented  OracleCallMetaDataProvider isn't correctly detecting schema name when we are using alter session set current schema=... Issue similar to #12918 but affects SimpleJdbcCall class. In OracleCallMetaDataProvider.metaDataSchemaNameToUse instead of calling getUserName() when schemaName==null, following SQL can be used ""select sys_context('USERENV', 'CURRENT_SCHEMA') CURRENT_SCHEMA from dual;""  ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-05-14T22:14:45Z","2019-01-11T12:43:42Z"
"","14013","org.springframework.cache.interceptor.DefaultKeyGenerator has too weak hashing functionality [SPR-9377]","**[Andrey Karandey](https://jira.spring.io/secure/ViewProfile.jspa?name=macromaniac)** opened **[SPR-9377](https://jira.spring.io/browse/SPR-9377?redirect=false)** and commented  Key generating has a weak hashing function. Next results are equal:  generate( object1,method1,new Integer( 109 ),new Integer( 434))); generate( object1,method1,new Integer( 110 ),new Integer( 403)));  It was pity to catch it on production...  ---  **Affects:** 3.1.1  **Issue Links:** - #14870 Cacheable key collision with DefaultKeyGenerator (_**""duplicates""**_) - #13675 Improve DefaultKeyGenerator - #14870 Cacheable key collision with DefaultKeyGenerator  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-05-04T02:43:52Z","2019-01-11T12:39:50Z"
"","14365","Allow MappingJacksonHttpMessageConverter to read request headers [SPR-9731]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-9731](https://jira.spring.io/browse/SPR-9731?redirect=false)** and commented  Currently, `MappingJacksonHttpMessageConverter` only reads from the request body. It would be useful in some cases to also be able to set an object's fields based on values in the request's headers.  Attached are a class and unit test demonstrating how this could be done; this code could be added to Spring as-is or used as a basis for enhancing `MappingJacksonHttpMessageConverter` in a backward-compatible way (in which case the behaviour would need to be changed slightly so that values in the body took precedence over values in the header, in cases of duplication).   ---  **Affects:** 3.1.2  **Attachments:** - [HeaderAwareMappingJacksonHttpMessageConverter.java](https://jira.spring.io/secure/attachment/20299/HeaderAwareMappingJacksonHttpMessageConverter.java) (_3.14 kB_) - [HeaderAwareMappingJacksonHttpMessageConverterTest.java](https://jira.spring.io/secure/attachment/20300/HeaderAwareMappingJacksonHttpMessageConverterTest.java) (_2.57 kB_)","closed","type: enhancement,","spring-projects-issues","2012-08-27T23:56:45Z","2014-01-31T14:26:07Z"
"","14265","Allow MutablePropertySources to be constructed with arbitrary list of PropertySource instances [SPR-9631]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-9631](https://jira.spring.io/browse/SPR-9631?redirect=false)** and commented  Unless I'm missing something, there's no easy way to construct an `o.s.core.env.MutablePropertySources` from an arbitrary list of `PropertySource` instances. This makes it hard (impossible?) to write a Spring XML file that builds a `MutablePropertySources` bean from a custom set of `PropertySource` beans.  This is easily fixed by adding a constructor similar to the following:  ``` public MutablePropertySources(final Iterable propertySource : propertySources) {             addLast(propertySource);         }     } } ```  With the above constructor in place, it would be possible to wire up any desired PropertySources from the XML:  ```                	     	                 ... 	       ```  If this change is deemed desirable, I'm happy to submit a patch and/or pull request.   ---  **Affects:** 3.1.2  5 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-07-24T21:28:39Z","2019-01-12T02:47:05Z"
"","13935","MappingJacksonJsonView: Recognize Jackson Annotations (ex @JsonSerialize) when returning objects from methods annotated with @ResponseBody [SPR-9297]","**[Andrew Muraco](https://jira.spring.io/secure/ViewProfile.jspa?name=amuraco)** opened **[SPR-9297](https://jira.spring.io/browse/SPR-9297?redirect=false)** and commented  Currently when using MappingJacksonJsonView and the `@ResponseBody` annotation, there isn't a usage-specific way to customize the generated JSON, Jackson allows Mixin and hints for the serializer that influence how Jackson will generate the output. Ideally I want to use these features of Jackson rather then have to reinvent them or do extra glue code to be able to utilize them.  ```java public class FooBar implements Foo,Bar { //Implements String getFoo() from interface Foo //Implements String getBar() from interface Bar } ```  ```java @Controller public class FooController { 	@RequestMapping(""/foo"") 	@ResponseBody @JsonSerialize(as=Foo.class) 	public Foo getFooObject() { return new FooBar(); 	} } ```  Ideally, I would get  ``` {""foo"":""TestFooString""} ```  Currently, since the MappingJacksonJsonView doesn't recongize the `@JsonSerialize` annotation I get  ``` {""bar"":""TestBarString"",""foo"":""TestFooString""} ```  ---  **Affects:** 3.1 GA  **Issue Links:** - #17953 Allow `@JsonSerialize` to be used on `@Controller` methods  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-02T11:10:03Z","2019-01-13T07:05:21Z"
"","14196","(validation) Random error order in BindingResult object  [SPR-9562]","**[Andrei](https://jira.spring.io/secure/ViewProfile.jspa?name=bkandrei)** opened **[SPR-9562](https://jira.spring.io/browse/SPR-9562?redirect=false)** and commented  We seem to be getting errors in random order in the BindingResult object when using more than one validation annotation.  `@NotEmpty`(message = ""lore ipsum"") `@Pattern`(regexp = ""\\d*"", message = ""lore ipsum"") `@Length`(max = 4, message = ""lore ipsum"")  If the input is empty we'll have the 3 messages in the BindingResult but the order is never the same.   ---  **Affects:** 3.1.1  3 votes, 7 watchers","closed","status: invalid,","spring-projects-issues","2012-07-04T10:49:39Z","2019-01-12T05:28:26Z"
"","14187","Relax jms:listener-container xsd:int attributes to xsd:string in order to allow for SpEL expressions [SPR-9553]","**[Andrei Tuzhilin](https://jira.spring.io/secure/ViewProfile.jspa?name=astorath)** opened **[SPR-9553](https://jira.spring.io/browse/SPR-9553?redirect=false)** and commented  Spring JMS **listener-container** element has attributes _prefetch_ and _receive-timeout_ declared of type _xsd:int_.  This prohibits the use of SPEL expressions in the element declaration.  ---  **Affects:** 3.1.1, 3.2 M1  **Issue Links:** - #16162 relay-port type in xsd should be string  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d55877ccf2d050af4c4194c7983ffaac9db88aea","closed","type: enhancement,","spring-projects-issues","2012-07-02T12:56:57Z","2019-01-11T13:06:54Z"
"","14155","Quartz 2.x scheduler support (SimpleTriggerFactoryBean) ignores repeatCount attribute [SPR-9521]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-9521](https://jira.spring.io/browse/SPR-9521?redirect=false)** and commented  In case of Spring 3.1.x and Quartz 2.0/2.1 the use of SimpleTriggerBean is not possible anymore. Documentation suggests the use of SimpleTriggerFactoryBean which seems to ignore the possibility of setting the repeatCount attribute on a [SimpleTrigger](http://quartz-scheduler.org/api/2.0.0/org/quartz/SimpleTrigger.html), or more specifically on [SimpleTriggerImpl](http://quartz-scheduler.org/api/2.0.0/org/quartz/impl/triggers/SimpleTriggerImpl.html#setRepeatCount(int)).  Has this been intentionally left out?  ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?127606-Spring-3-1-Quartz-2-0-repeatCount  **Sub-tasks:** - #14197 Backport ""Quartz 2.x scheduler support (SimpleTriggerFactoryBean) ignores repeatCount attribute""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aeef8c87f6fbfc73125a2d44f0fd211dce1d7139, https://github.com/spring-projects/spring-framework/commit/5a7b3f65ec244088583cf822d5478cf1d1632d38  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-06-20T03:46:04Z","2019-01-11T13:08:34Z"
"","13910","Update AspectJ to the latest 1.6.12 [SPR-9272]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-9272](https://jira.spring.io/browse/SPR-9272?redirect=false)** and commented  Spring 3.1.1 uses AspectJ 1.6.8; please, consider updating AspectJ to the latest 1.6.x version.  ---  **Affects:** 3.1.1  **Issue Links:** - #12644 Using -enableassertions and AspectJ >= 1.6.10 may cause AssertionError in org.aspectj.weaver.UnresolvedType (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ab9e9a0c64a252fb8d8590bc302e82b8c8926c6  2 votes, 2 watchers","closed","in: core,","spring-projects-issues","2012-03-28T01:56:40Z","2019-01-11T12:45:17Z"
"","13830","new method 'createThreadPoolExecutor' in ThreadPoolTaskExecutor [SPR-9192]","**[Andreas Lichtenstein](https://jira.spring.io/secure/ViewProfile.jspa?name=anlichte)** opened **[SPR-9192](https://jira.spring.io/browse/SPR-9192?redirect=false)** and commented  Hello,  i need the possibility to override the creation of ThreadPoolExecutor in initialize(). here my recommendation:  \ /** * Creates the BlockingQueue and the ThreadPoolExecutor. * * `@see` #createQueue */ public void initialize() { if (logger.isInfoEnabled()) { logger.info(""Initializing ThreadPoolExecutor"" + (this.beanName != null ? "" '"" + this.beanName + ""'"" : """")); }      	if (!this.threadNamePrefixSet && this.beanName != null)     	{     		setThreadNamePrefix(this.beanName + ""-"");     	}     	     	this.threadPoolExecutor = createThreadPoolExecutor(this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS, createQueue(this.queueCapacity), this.threadFactory, this.rejectedExecutionHandler);     	     	if (this.allowCoreThreadTimeOut)     	{     		this.threadPoolExecutor.allowCoreThreadTimeOut(true);     	}     }          protected ThreadPoolExecutor createThreadPoolExecutor(int corePoolSize, int maxPoolSize, long keepAliveSeconds, TimeUnit timeUnit, BlockingQueue queue, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler)     {     	return new ThreadPoolExecutor(corePoolSize, maxPoolSize, keepAliveSeconds, timeUnit, queue, threadFactory, rejectedExecutionHandler);     }  \ thx  ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2012-03-02T07:10:06Z","2019-01-13T07:05:58Z"
"","14367","Remove INDEX.LIST from spring-asm jar [SPR-9733]","**[Andreas Kuhtz](https://jira.spring.io/secure/ViewProfile.jspa?name=akuhtz)** opened **[SPR-9733](https://jira.spring.io/browse/SPR-9733?redirect=false)** and commented  The spring jars no longer contain the INDEX.LIST file (see https://jira.springsource.org/browse/SPR-6383) but it's still in spring-asm jar.   ---  **Affects:** 3.1.2","closed","in: core,","spring-projects-issues","2012-08-28T07:34:14Z","2019-01-12T05:28:10Z"
"","14366","util:properties -- Allow multiple location entries separated by comma [SPR-9732]","**[Andreas Kuhtz](https://jira.spring.io/secure/ViewProfile.jspa?name=akuhtz)** opened **[SPR-9732](https://jira.spring.io/browse/SPR-9732?redirect=false)** and commented  Allow multiple location entries separated by comma in  like in .   ---  **Affects:** 3.1.2  **Attachments:** - [0071-Allow-multiple-location-entries-separated-by-comma-l.patch](https://jira.spring.io/secure/attachment/20302/0071-Allow-multiple-location-entries-separated-by-comma-l.patch) (_1.28 kB_)  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-08-28T06:29:18Z","2019-01-12T00:26:34Z"
"","14181","ResourceUtils.useCachesIfNecessary() not correct handle JNLP connections [SPR-9547]","**[Andreas Kuhtz](https://jira.spring.io/secure/ViewProfile.jspa?name=akuhtz)** opened **[SPR-9547](https://jira.spring.io/browse/SPR-9547?redirect=false)** and commented  The following code should check if the connection is a JNLP connection.  ``` /**  * Set the {@link URLConnection#setUseCaches ""useCaches""} flag on the  * given connection, preferring false but leaving the  * flag at true for JNLP based resources.  * @param con the URLConnection to set the flag on  */ public static void useCachesIfNecessary(URLConnection con) {    con.setUseCaches(con.getClass().getName().startsWith(""JNLP"")); } ```  I've debugged the code and the getName() of the connection returns the name with packages prefixed in case of using the Oracle JDK (as expected) what prevents the flag set to true. I think this call should use ClassUtils.getShortName() instead of getClass().getName().  ``` /**  * Set the {@link URLConnection#setUseCaches ""useCaches""} flag on the  * given connection, preferring false but leaving the  * flag at true for JNLP based resources.  * @param con the URLConnection to set the flag on  */ public static void useCachesIfNecessary(URLConnection con) {    con.setUseCaches(ClassUtils.getShortName(con.getClass()).startsWith(""JNLP"")); } ```    ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?127798-ResourceUtils-and-JNLP","closed","in: core,","spring-projects-issues","2012-06-26T08:32:36Z","2012-10-31T11:33:58Z"
"","14086","MBeanExporter#destroy logs warnings about explicitly unregistered mbeans [SPR-9451]","**[Andreas Hubold](https://jira.spring.io/secure/ViewProfile.jspa?name=ahubold)** opened **[SPR-9451](https://jira.spring.io/browse/SPR-9451?redirect=false)** and commented  Method #destroy of org.springframework.jmx.export.MBeanExporter unregisters all beans that have been registered before. It however also tries to unregister beans that have already been unregistered via org.springframework.jmx.export.MBeanExporter#unregisterManagedResource. The MBeanExporter logs a warning for each such bean:  ``` WARN  o.s.jmx.export.MBeanExporter - Could not unregister MBean [...] as said MBean is not registered (perhaps already unregistered by an external process) ```  The bean was not unregistered by an external process but by the MBeanExporter itself when #unregisterManagedResource was called.  Please do not log this as warning. Administrators get nervous and keep asking what this message means.  ---  **Affects:** 3.1.1  **Issue Links:** - #15585 MBeanExporter/MBeanRegistrationSupport leaks ObjectNames in registeredBeans  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)  10 votes, 3 watchers","closed","has: votes-jira,","spring-projects-issues","2012-05-29T07:22:51Z","2019-01-11T13:03:06Z"
"","13836","Don't  throw MismatchException on non required Parameters in MVC [SPR-9198]","**[Andreas Etzlstorfer](https://jira.spring.io/secure/ViewProfile.jspa?name=kingetzl)** opened **[SPR-9198](https://jira.spring.io/browse/SPR-9198?redirect=false)** and commented  Consider the following MVC Controller method:  ``` @RequestMapping(value = ""someurl.htm"")   public String handleContent(@RequestParam(value = ""page"", required = false) Integer page,... ```  I'am getting a TypeMismatchException when I access a url like this:  http://localhost:8080/someurl.htm?page=5x  In my opinion the parameter **page** should be NULL instead of throwing an Exception. (By setting the defaultParam I am getting the same error)   ---  **Affects:** 3.0.3  **Attachments:** - [mvc_controller_method.PNG](https://jira.spring.io/secure/attachment/19469/mvc_controller_method.PNG) (_5.60 kB_)","closed","status: declined,","spring-projects-issues","2012-03-05T00:29:01Z","2019-01-12T16:36:41Z"
"","14324","Make DeferredResult testable [SPR-9690]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-9690](https://jira.spring.io/browse/SPR-9690?redirect=false)** and commented  To facilitate mocking during unit testing, DeferredResult should be an interface, not a class.   ---  **Affects:** 3.2 M1","closed","type: enhancement,","spring-projects-issues","2012-08-15T06:18:28Z","2012-08-17T11:10:34Z"
"","14323","DeferredResult/async provides no (obvious) way to handle exceptions [SPR-9689]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-9689](https://jira.spring.io/browse/SPR-9689?redirect=false)** and commented  This is related to #14213.  When processing an async request using DeferredResult (where we do our own processing as opposed to having Spring run a Callable on our behalf), there seems to be no way to propagate an Exception such that the appropriate `@ExceptionHandler` method is invoked.  ---  **Affects:** 3.2 M1  **Issue Links:** - #14213 org.springframework.web.context.request.async.DeferredResult should have parameter type","closed","type: enhancement,","spring-projects-issues","2012-08-14T16:28:18Z","2019-01-11T13:23:58Z"
"","14213","org.springframework.web.context.request.async.DeferredResult should have parameter type [SPR-9579]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-9579](https://jira.spring.io/browse/SPR-9579?redirect=false)** and commented  DeferredResult should be type-parameterized so that switching to this style of async processing doesn't lose information about the return type in `@Controller` methods.  ---  **Affects:** 3.2 M1  **Issue Links:** - #14323 DeferredResult/async provides no (obvious) way to handle exceptions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eab6e1d1348f0f3984fb387adde7d875540f0071","closed","type: enhancement,","spring-projects-issues","2012-07-10T13:14:21Z","2019-01-11T12:53:31Z"
"","14065","LocalVariableTableParameterNameDiscoverer doesn't support bridged methods [SPR-9429]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-9429](https://jira.spring.io/browse/SPR-9429?redirect=false)** and commented  LocalVariableTableParameterNameDiscoverer doesn't support finding parameter names in bridged methods.  Either it (or its callers) should (or need to) call BridgeMethodResolver.findBridgedMethod    ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1bca2c01fda13ca86022a8cf4afec11f89d0a617, https://github.com/spring-projects/spring-framework/commit/ed952ccba1118af716747eb183ea95b5beef8421  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2012-05-21T15:55:13Z","2013-01-18T05:51:58Z"
"","13901","Threading issue in InjectionMetadata.InjectedElement [SPR-9263]","**[Anders Kobberup](https://jira.spring.io/secure/ViewProfile.jspa?name=andersk)** opened **[SPR-9263](https://jira.spring.io/browse/SPR-9263?redirect=false)** and commented  We are having a rising amount of issues where the symptom is that random properties that have been autowired into our beans (via `@autowired` setter methods) turns our null, without any exceptions during start up. This means that we have no way of knowing whether our production setup is actually functioning as expected, or if it will encounter nullpointers as the diferent parts of the platform is used. Also the only way to ""fix"" any such nullpointer is to restart the application, which obviously is not good.  I have traced the problem down to what i believe is a concurrency flaw in checkPropertySkipping in InjectionMetadata.InjectedElement.  ``` 172: protected boolean checkPropertySkipping(PropertyValues pvs) { 173: 	if (this.skip == null) { 174: 		if (pvs != null) { 175: 			synchronized (pvs) { 176: 				if (this.skip == null) { 177: 					if (this.pd != null) { 178: 						if (pvs.contains(this.pd.getName())) { 179: 							// Explicit value provided as part of the bean definition. 180: 							this.skip = true; 181: 							return true; 182: 						} 183: 						else if (pvs instanceof MutablePropertyValues) { 184: 							((MutablePropertyValues) pvs).registerProcessedProperty(this.pd.getName()); 185: 						} 186: 					} 187: 				} 188: 			} 189: 		} 190: 		this.skip = false; 191: 	} 192: 	return this.skip; 193: } ```  Consider the scenario where at least two threads are creating an instance of a given bean, which have autowired properties. Both of these threads will enter the 'Inject(...)' method, and from here go to checkPropertySkipping (the argument for both threads are the same PropertyValues object).  Thread A will enter the synchronized block, while Thread B will be halted before this block. Thread A will proceed to the inside of the synchronized block, and enter the 'else if' block, and register the propertyname in the PropertyValues object as processed (line 184). As soon as Thread A exits the synchronized block, the java scheduler halts Thread A and resumes Thread B which will enter the synch block and, as Thread A has been halted and thus not having set 'this.skip = false' (line 190), the 'if(this.skip == null)' statement (line 176) will return true. After this, thread A may continue running (the object that it is creating will be created correctly).  Thread B will evaluate the 'if (pvs.contains(this.pd.getName()))' statement, which will return true, as Thread A has registered the property name as processed, and as a result Thread B will set 'this.skip = true' (line 180) and return.  As 'skip' has been set to true on this InjectedElement, every later invocation of checkPropertySkipping after this will return true, and thus every later object that is instantiated will not have this dependency injected.  The obvious solution is to ensure that 'this.skip = false' is also set within the synchronized block (add a line containing 'this.skip = false;' after line 187), thus ensuring that any threads that are awaiting the monitor will evaluate the if statement at line  176, to false and thus not setting 'this.skip = true'.  In order to see if this is more than just a theoretical posibility that multiple threads will enter this code, i have created a small test class that can simulate this method being invoked by multiple threads. The test i have run, show that it will happen.  ``` import java.util.ArrayList; import java.util.concurrent.Callable; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicInteger;  public class SynchTest {  	private final Object mutex = new Object(); 	private Boolean finished; 	private AtomicInteger numberOfCompletions = new AtomicInteger( 0 ); 	private int testNumber;  	public SynchTest( int TestNumber ) { 		this.testNumber = TestNumber; 	}  	public Runn getRunn() { 		return new Runn(); 	}  	void gotThrough() { 		final int nCount = numberOfCompletions.incrementAndGet(); 		if ( nCount > 1 ) { 			//woops - this is not good!! 			System.out.println( ""In test "" + testNumber + "", "" + nCount + "" got into the synch block!!"" ); 		} 	}  	private class Runn implements Callable {  		@Override 		public Object call() throws Exception { 			if ( finished == null ) { 					synchronized ( mutex ) { 						if ( finished == null ) { 							gotThrough(); 						} 					} 				finished = false; 			} 			return null; 		} 	}  	public static void main( String[] args ) throws InterruptedException { 		ExecutorService cThreadPool = Executors.newFixedThreadPool( 5 ); 		ArrayList cRunnables = new ArrayList(); 		for ( int i = 0 ; i < 1000 ; i++ ) { 			SynchTest cTest = new SynchTest( i ); 			for ( int j = 0 ; j < 5 ; j++ ) { 				cRunnables.add( cTest.getRunn() ); 			}  		} 		System.out.println( ""Invoking ""+cRunnables.size()+"" tasks"" ); 		cThreadPool.invokeAll( cRunnables ); 		cThreadPool.shutdown(); 		cThreadPool.awaitTermination( 5, TimeUnit.DAYS ); 	} } ```  Heres the result of just one run:  Invoking 5000 tasks In test 695, 2 got into the synch block!! In test 765, 2 got into the synch block!! In test 824, 2 got into the synch block!! In test 872, 2 got into the synch block!! In test 981, 2 got into the synch block!!  ---  **Affects:** 3.1.1  **Issue Links:** - #14439 Autowired properties can remain unset during concurrent instantiation of prototype-beans (_**""duplicates""**_) - #13894 Concurrent retrieval of prototype-scoped beans may result in null `@Autowired` fields","closed","in: core,","spring-projects-issues","2012-03-23T01:25:15Z","2019-01-13T07:05:32Z"
"","14193","I have following error how to solve it [SPR-9559]","**[Anbazhagan](https://jira.spring.io/secure/ViewProfile.jspa?name=anbazhagan)** opened **[SPR-9559](https://jira.spring.io/browse/SPR-9559?redirect=false)** and commented  java.lang.NoSuchMethodError: org.springframework.core.OrderComparator.sort(Ljava/util/List;)V at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:598) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:398) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:261) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:192) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:549) at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1282) at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:518) at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:499) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130) at org.mortbay.jetty.Server.doStart(Server.java:224) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at runjettyrun.Bootstrap.main(Bootstrap.java:97) 2012-07-03 20:22:15.508:INFO::Started SelectChannelConnector@0.0.0.0:8080  ---  **Issue Links:** - #14192 I have following error how to solve it (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2012-07-03T07:59:23Z","2019-01-12T16:47:50Z"
"","14192","I have following error how to solve it [SPR-9558]","**[Anbazhagan](https://jira.spring.io/secure/ViewProfile.jspa?name=anbazhagan)** opened **[SPR-9558](https://jira.spring.io/browse/SPR-9558?redirect=false)** and commented  java.lang.NoSuchMethodError: org.springframework.core.OrderComparator.sort(Ljava/util/List;)V 2012-07-03 19:44:58.935:WARN::Error starting handlers java.lang.NoSuchMethodError: org.springframework.core.OrderComparator.sort(Ljava/util/List;)V at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:598) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:398) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:261) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:192) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:549) at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1282) at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:518) at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:499) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130) at org.mortbay.jetty.Server.doStart(Server.java:224) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at runjettyrun.Bootstrap.main(Bootstrap.java:97) 2012-07-03 19:44:58.963:INFO::Started SelectChannelConnector@0.0.0.0:8080  ---  **Issue Links:** - #14193 I have following error how to solve it (_**""is duplicated by""**_)","closed","status: invalid,","spring-projects-issues","2012-07-03T07:30:19Z","2019-01-12T05:28:27Z"
"","14191","java.lang.NoSuchMethodError [SPR-9557]","**[Anbazhagan](https://jira.spring.io/secure/ViewProfile.jspa?name=anbazhagan)** opened **[SPR-9557](https://jira.spring.io/browse/SPR-9557?redirect=false)** and commented  012-07-03 19:44:58.935:WARN::failed org.mortbay.jetty.webapp.WebAppContext@2c78bc3b{/ClubCloud,/home/e0000032/Anbazhagan/Tapestry/ClubCloud/src/main/webapp}: java.lang.NoSuchMethodError: org.springframework.core.OrderComparator.sort(Ljava/util/List;)V 2012-07-03 19:44:58.935:WARN::Error starting handlers java.lang.NoSuchMethodError: org.springframework.core.OrderComparator.sort(Ljava/util/List;)V at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:598) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:398) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:261) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:192) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:549) at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1282) at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:518) at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:499) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130) at org.mortbay.jetty.Server.doStart(Server.java:224) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at runjettyrun.Bootstrap.main(Bootstrap.java:97) 2012-07-03 19:44:58.963:INFO::Started SelectChannelConnector@0.0.0.0:8080   --- No further details from [SPR-9557](https://jira.spring.io/browse/SPR-9557?redirect=false)","closed","","spring-projects-issues","2012-07-03T07:24:21Z","2019-01-11T13:06:46Z"
"","14589","Add support for jackson 2.0 message converters MappingJacksonHttpMessageConverter refers to the older ObjectMapper package and methods [SPR-9956]","**[Anadi Misra](https://jira.spring.io/secure/ViewProfile.jspa?name=anadimisra)** opened **[SPR-9956](https://jira.spring.io/browse/SPR-9956?redirect=false)** and commented  The current MapnpingJacksonHttpMessageConverter uses older packages (pre - 2.0) for jackson apis, to provide full support for new features in jackson 2.0 (like hibernate module etc) we could have a jackson 2.0 compliant message converter. the gist above is a hack I used to get jackson 2.1 running with spring 3.1.0-RELEASE.  ---  **Reference URL:** https://gist.github.com/4015843  **Issue Links:** - #13940 Use Jackson 2.0 for Jackson based json processing such as MappingJacksonJsonView  (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-11-04T23:49:09Z","2019-01-11T14:16:51Z"
"","13834","Provide namespace for embedded HTTP Server [SPR-9196]","**[Amol Nayak](https://jira.spring.io/secure/ViewProfile.jspa?name=amolnayak.spring)** opened **[SPR-9196](https://jira.spring.io/browse/SPR-9196?redirect=false)** and commented  Provide support for namespace embedded http server in spring so something like  ```          ..configs like port no, SSL support etc, can assume reasonable defaults.            .. Can specify explicity mapping of servlet to url-pattern, path to war file or webapp base dir             .         .         .         ...      ```    ---  **Issue Links:** - [INT-2671](https://jira.spring.io/browse/INT-2671) Add Ability to expose HTTP Endpoints using an Embedded Tomcat Instance  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2012-03-03T04:01:47Z","2015-09-22T19:34:34Z"
"","13953","AspectJ seems to not work with JBOSS AS 7 [SPR-9315]","**[Amit Maheshwari](https://jira.spring.io/secure/ViewProfile.jspa?name=miks.hi)** opened **[SPR-9315](https://jira.spring.io/browse/SPR-9315?redirect=false)** and commented  Hi, I am trying implement AspectJ in my Spring MVC project. The aspect that I am applying is correctly getting applied as seen through eclipse. But when i try deploying it into JBOSS server I get below mentioned error-- ClassLoader [org.jboss.modules.ModuleClassLoader] does NOT provide an 'addTransformer(ClassFileTransformer)' method. Specify a custom LoadTimeWeaver or start your Java virtual machine with Spring's agent: -javaagent:org.springframework.instrument.jar  I have written  in my servlet-context.xml  Please let me know what i need to do?    --- No further details from [SPR-9315](https://jira.spring.io/browse/SPR-9315?redirect=false)","closed","in: core,","spring-projects-issues","2012-04-08T11:05:41Z","2019-01-12T05:28:47Z"
"","14060","Spring JtaTransactionManager is not flushing during before completion phase when using Hibernate 4 or Hibernate 3 [SPR-9424]","**[Alysson Rodrigues](https://jira.spring.io/secure/ViewProfile.jspa?name=alysson.rodrigues)** opened **[SPR-9424](https://jira.spring.io/browse/SPR-9424?redirect=false)** and commented  Hibernate 4.1.0.Final isn´t auto flushing during before completion phase when using JTA (CMT) under Spring 3.1.1.RELEASE and JBoss AS 7.1.  I´ve set hibernate.transaction.factory_class to org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory and hibernate.transaction.jta.platform to org.hibernate.service.jta.platform.internal.JBossAppServerJtaPlatform. My transaction manager bean is a org.springframework.transaction.jta.JtaTransactionManager configured bean.  Then, logging (TRACE mode) shows me the following info:  15:23:58,555 TRACE [org.springframework.transaction.interceptor.TransactionInterceptor] (http--127.0.0.1-8080-1) Completing transaction for...  15:23:58,557 TRACE [org.springframework.transaction.jta.JtaTransactionManager] (http--127.0.0.1-8080-1) Triggering beforeCommit synchronization 15:23:58,558 TRACE [org.springframework.transaction.jta.JtaTransactionManager] (http--127.0.0.1-8080-1) Triggering beforeCompletion synchronization 15:23:58,559 DEBUG [org.springframework.orm.jpa.EntityManagerFactoryUtils] (http--127.0.0.1-8080-1) Closing JPA EntityManager 15:23:58,560 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (http--127.0.0.1-8080-1) Initiating transaction commit 15:23:58,561 TRACE [org.hibernate.engine.transaction.synchronization.internal.RegisteredSynchronization] (http--127.0.0.1-8080-1) JTA sync : beforeCompletion() 15:23:58,562 TRACE [org.hibernate.engine.transaction.synchronization.internal.SynchronizationCallbackCoordinatorImpl] (http--127.0.0.1-8080-1) Transaction before completion callback 15:23:58,564 TRACE [org.hibernate.internal.SessionImpl] (http--127.0.0.1-8080-1) before transaction completion 15:23:58,566 TRACE [org.hibernate.engine.transaction.synchronization.internal.RegisteredSynchronization] (http--127.0.0.1-8080-1) JTA sync : afterCompletion(3) 15:23:58,567 TRACE [org.hibernate.engine.transaction.synchronization.internal.SynchronizationCallbackCoordinatorImpl] (http--127.0.0.1-8080-1) Transaction after completion callback [status=3] 15:23:58,568 TRACE [org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl] (http--127.0.0.1-8080-1) after transaction completion 15:23:58,569 DEBUG [org.hibernate.engine.jdbc.internal.LogicalConnectionImpl] (http--127.0.0.1-8080-1) Aggressively releasing JDBC connection 15:23:58,570 TRACE [org.hibernate.internal.SessionImpl] (http--127.0.0.1-8080-1) after transaction completion 15:23:58,571 DEBUG [org.hibernate.ejb.EntityManagerImpl] (http--127.0.0.1-8080-1) Closing entity manager after transaction completion 15:23:58,572 TRACE [org.hibernate.internal.SessionImpl] (http--127.0.0.1-8080-1) Closing session 15:23:58,573 TRACE [org.hibernate.engine.jdbc.internal.LogicalConnectionImpl] (http--127.0.0.1-8080-1) Closing logical connection 15:23:58,574 TRACE [org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler] (http--127.0.0.1-8080-1) Handling invocation of connection method [close] 15:23:58,575 TRACE [org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler] (http--127.0.0.1-8080-1) Invalidating connection handle 15:23:58,576 TRACE [org.hibernate.engine.jdbc.internal.JdbcResourceRegistryImpl] (http--127.0.0.1-8080-1) Closing JDBC container [org.hibernate.engine.jdbc.internal.JdbcResourceRegistryImpl@17072bf] ...  HOWEVER, IF I use org.springframework.orm.jpa.JpaTransactionManager, instead of JtaTransactionManager, adjusting the configurations above, logging shows me:  16:40:36,014 TRACE [org.springframework.transaction.interceptor.TransactionInterceptor] (http--127.0.0.1-8080-1) Completing transaction for...  16:40:36,015 TRACE [org.springframework.orm.jpa.JpaTransactionManager] (http--127.0.0.1-8080-1) Triggering beforeCommit synchronization 16:40:36,015 TRACE [org.springframework.orm.jpa.JpaTransactionManager] (http--127.0.0.1-8080-1) Triggering beforeCompletion synchronization 16:40:36,016 DEBUG [org.springframework.orm.jpa.JpaTransactionManager] (http--127.0.0.1-8080-1) Initiating transaction commit 16:40:36,016 DEBUG [org.springframework.orm.jpa.JpaTransactionManager] (http--127.0.0.1-8080-1) Committing JPA transaction on EntityManager [org.hibernate.ejb.EntityManagerImpl@2d885a] 16:40:36,017 DEBUG [org.hibernate.engine.transaction.spi.AbstractTransactionImpl] (http--127.0.0.1-8080-1) committing 16:40:36,017 TRACE [org.hibernate.internal.SessionImpl] (http--127.0.0.1-8080-1) Automatically flushing session 16:40:36,017 TRACE [org.hibernate.event.internal.AbstractFlushingEventListener] (http--127.0.0.1-8080-1) Flushing session 16:40:36,018 DEBUG [org.hibernate.event.internal.AbstractFlushingEventListener] (http--127.0.0.1-8080-1) Processing flush-time cascades 16:40:36,018 TRACE [org.hibernate.engine.internal.Cascade] (http--127.0.0.1-8080-1) Processing cascade ACTION_PERSIST_ON_FLUSH for: br.gov.tcu.sgos.modelo.entidade.ordemservico.OrdemServico 16:40:36,019 TRACE [org.hibernate.engine.spi.CascadingAction] (http--127.0.0.1-8080-1) Cascading to persist on flush: br.gov.tcu.sgos.modelo.entidade.contrato.Contrato 16:40:36,020 TRACE [org.hibernate.engine.internal.Cascade] (http--127.0.0.1-8080-1) Done processing cascade ACTION_PERSIST_ON_FLUSH for: br.gov.tcu.sgos.modelo.entidade.ordemservico.OrdemServico 16:40:36,021 DEBUG [org.hibernate.event.internal.AbstractFlushingEventListener] (http--127.0.0.1-8080-1) Dirty checking collections 16:40:36,021 TRACE [org.hibernate.event.internal.AbstractFlushingEventListener] (http--127.0.0.1-8080-1) Flushing entities and processing referenced collections 16:40:36,022 TRACE [org.hibernate.persister.entity.AbstractEntityPersister] (http--127.0.0.1-8080-1) br.gov.tcu.sgos.modelo.entidade.ordemservico.OrdemServico.descricao is dirty 16:40:36,022 TRACE [org.hibernate.event.internal.DefaultFlushEntityEventListener] (http--127.0.0.1-8080-1) Found dirty properties [[br.gov.tcu.sgos.modelo.entidade.ordemservico.OrdemServico#5]] : [Ljava.lang.String;`@1882506` 16:40:36,023 TRACE [org.hibernate.event.internal.DefaultFlushEntityEventListener] (http--127.0.0.1-8080-1) Updating entity: [br.gov.tcu.sgos.modelo.entidade.ordemservico.OrdemServico#5] 16:40:36,024 TRACE [org.hibernate.engine.internal.Versioning] (http--127.0.0.1-8080-1) Incrementing: 2 to 3 16:40:36,026 TRACE [org.hibernate.event.internal.AbstractFlushingEventListener] (http--127.0.0.1-8080-1) Processing unreferenced collections 16:40:36,026 TRACE [org.hibernate.event.internal.AbstractFlushingEventListener] (http--127.0.0.1-8080-1) Scheduling collection removes/(re)creates/updates 16:40:36,027 DEBUG [org.hibernate.event.internal.AbstractFlushingEventListener] (http--127.0.0.1-8080-1) Flushed: 0 insertions, 1 updates, 0 deletions to 1 objects  SO, is something missing? Some additional configuration? Using JpaTransactionaManager everything works as expected, but when using JtaTransactionManager there is no auto flush during the before completion phase.  Could you please help me?  I´m looking forward to hearing good news from you.  Thank you.  ---  **Affects:** 3.1.1  **Issue Links:** - #14040 Session not flushed with Hibernate 4.1.3, JTA and Spring transaction management integration (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2012-05-18T07:25:53Z","2019-01-12T16:47:57Z"
"","13974","com.sun.syndication.feed.rss.Channel/Feed should be rendered by RssChannelHttpMessageConverter/AtomFeedHttpMessageConverter by default [SPR-9336]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-9336](https://jira.spring.io/browse/SPR-9336?redirect=false)** and commented  I've got this simple controller with rss method:  ```java @RequestMapping(value = ""/rss"", method = RequestMethod.GET) @ResponseBody public Channel rss() { 	... 	return channel ; } ```  currently in this situation spring will converted channel to json. I think, it is not quite right and intuitive.   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-04-20T10:04:20Z","2012-07-10T16:16:30Z"
"","14545","Ensure LineNumberReader is always closed in ResourceDatabasePopulator [SPR-9912]","**[Aliaksandr Sazonenka](https://jira.spring.io/secure/ViewProfile.jspa?name=sazonenka)** opened **[SPR-9912](https://jira.spring.io/browse/SPR-9912?redirect=false)** and commented  ResourceDatabasePopulator.readScript() creates an instance of LineNumberReader to read SQL statements from EncodedResource.  It seems to me that this reader should be closed before the method ends.  ---  **Affects:** 3.1.2  **Sub-tasks:** - #14594 Backport ""Ensure LineNumberReader is always closed in ResourceDatabasePopulator""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb2436555643179797c4615afecf9c8169923010, https://github.com/spring-projects/spring-framework/commit/33abee2db2c9a5eefa686c3afa8b7d10e9e5fb15","closed","type: bug,","spring-projects-issues","2012-10-23T04:25:32Z","2019-01-11T14:13:46Z"
"","14233","@Transactional annotation doesn't work with Hibernate 4 with EntityManagerConfiguration [SPR-9599]","**[Alexey Vashchenkov](https://jira.spring.io/secure/ViewProfile.jspa?name=gubber)** opened **[SPR-9599](https://jira.spring.io/browse/SPR-9599?redirect=false)** and commented  I migrate from Hibernate 3 to Hibernate 4. I have configuared Spring and Hibernate to work with SessionFactory at first. And everything works ok. But when I configure context to work with EntityManagerFactory, the transaction is always null. And I must manipulate with transactions manually. Just run Tests in module core.   ---  **Affects:** 3.1.2  **Attachments:** - [positionary.zip](https://jira.spring.io/secure/attachment/20108/positionary.zip) (_37.02 kB_)","closed","status: bulk-closed,","spring-projects-issues","2012-07-17T21:53:32Z","2019-01-12T02:47:16Z"
"","14461","Modify org.springframework.util.Assert.* methods so that they will return checked values [SPR-9828]","**[Alexander Shabanov](https://jira.spring.io/secure/ViewProfile.jspa?name=alex_sv)** opened **[SPR-9828](https://jira.spring.io/browse/SPR-9828?redirect=false)** and commented  The proposed improvement is to modify signature for each org.springframework.util.Assert.* method so that it will return the checked value to let programmer to make check and assignment in ""one turn"".  This would improve readability of the initializers that uses spring's Assert and minimize the code, e.g. instead of having to write  notNull(foo, ""Foo can't be null""); // static import omitted for clarity hasText(bar, ""Bar can't be empty""); this.foo = foo; this.bar = bar;  someone can write  this.foo = notNull(foo, ""Foo can't be null""); this.bar = hasText(bar, ""Bar can't be empty"");  ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?130499-Assert-*-methods-that-return-values&p=425647  **Issue Links:** - #12473 Make Assert.something() return value checked instead of ""void"", allow to chain the assert call (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2012-09-25T05:34:56Z","2019-01-11T13:16:56Z"
"","14410","SimpleTriggerBean is not compatible with Quartz 2.1+ [SPR-9776]","**[Alexander Radzin](https://jira.spring.io/secure/ViewProfile.jspa?name=alexander_radzin)** opened **[SPR-9776](https://jira.spring.io/browse/SPR-9776?redirect=false)** and commented  Quartz made some changes in their API that are not backwards compatible. For example former class org.springframework.scheduling.quartz.SimpleTriggerBean became interface. This causes application that used org.springframework.scheduling.quartz.SimpleTriggerBean to fail because this class **extends** SimpleTriggerBean that became interface, so the declaration (and implementation of SimpleTriggerBean) must be changed.  The new version of quartz was released at May, 2, 2012, so other people have not complained yet.  Here is the relevant stack trace fragment:  Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Error loading class [org.springframework.scheduling.quartz.SimpleTriggerBean] for bean with name 'circuitCacheInitialLoadingTrigger' defined in URL [file:/C:/proj/trunk/main/measurments/collector/target/test-classes/com/panpwr/measurements/collector/persistence/test-collector.appcontext.xml]: problem with class file or dependent class; nested exception is java.lang.IncompatibleClassChangeError: class org.springframework.scheduling.quartz.SimpleTriggerBean has interface org.quartz.SimpleTrigger as super class at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1265) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:433) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322)    ---  **Attachments:** - [CronTriggerBean.java](https://jira.spring.io/secure/attachment/19650/CronTriggerBean.java) (_5.52 kB_) - [SimpleTriggerBean.java](https://jira.spring.io/secure/attachment/19651/SimpleTriggerBean.java) (_6.36 kB_)","closed","status: declined,","spring-projects-issues","2012-05-15T09:25:53Z","2013-01-22T10:00:03Z"
"","14179","Annotation that can control the HTTP response headers [SPR-9545]","**[Alexander Radzin](https://jira.spring.io/secure/ViewProfile.jspa?name=alexander_radzin)** opened **[SPR-9545](https://jira.spring.io/browse/SPR-9545?redirect=false)** and commented  Annotations from package 'org.springframework.web.bind.annotation' help to connect between HTTP world and service parameters.  Annotation `@HttpStatus` helps to set the HTTP response status. Unfortunately is it impossible to set HTTP response headers that sometimes is very useful. Although some headers can be added globally using custom HTTP filter but ability to do this on controller level will be very helpful.  I would suggest the following design.  Implement annotation `@ResponseHeader` that can be targeted on TYPE or METHOD with 2 fields: name and value:  ```java @ResponseHeader(""myheader"", ""myvalue"") ```  Other annotation `@ResponseHeaders` will be able to contain other `@ResponseHeader` annotations:  ```java public @interface ResponseHeaders {     ResponseHeader[] value(); } ```  So, application programmer could mark controller or separate method with single header or multiple headers.  Class ServletInvocableHandlerMethod should be able to handle these annotations together with already existing `@ResponseStatus`.  ---  **Affects:** 3.1.1  **Issue Links:** - #17964 Create new annotation to set ""Link"" HTTP header for resource hints  3 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2012-05-09T09:00:18Z","2019-01-11T13:07:32Z"
"","14605","short lived objects not correctly build on first attempt [SPR-9971]","**[Alexander Knöller](https://jira.spring.io/secure/ViewProfile.jspa?name=aknoeller)** opened **[SPR-9971](https://jira.spring.io/browse/SPR-9971?redirect=false)** and commented  Hello.  We use short lived beans based on Annotations. `@Configurable` (loadtime weaving) or `@Component`/`@Scope` (request session). spring should inject the required injections (annotated with `@Resource`) correctly. What we encounter is, that those objects are not constructed completely with their injections, when they are used the first time at all. In those cases the short lived objects do not have all (or all?) injections -> that causes NPEs.  One problem is, that the effect is not deterministic and seems to occur much more frequently when hit first time by our selenium-tests which run in parallel, than if it is hit by a first single request. Non-deterministic behaviour implies a concurrency bug?  We first had this problem with `@Configurable-annotated` Classes. After we ""dummy""-instantiated all `@Configurable-classes` (one instance for each class) just after the context-refresh-event, we had no NPEs on them any more on first requests.  But instead we now have the NPEs on first usage of annotated request-scope or httpsession-scope beans. As a workaround we will try if translating them from annotated to an XML-Definition. And if that will not help, we will try to ""dummy""-load them from the application-context like we did with the `@Configurable-Beans`  But of course we would prefer if spring would build completely injected beans right on first usage.  Special Regards Alex   ---  **Affects:** 3.1.2","closed","in: core,","spring-projects-issues","2012-11-07T14:27:46Z","2019-01-11T14:21:08Z"
"","14580","applicationContext misconstructed by spring due to a call to applicationContext.getBeansOfType(...) during initialization [SPR-9947]","**[Alexander Knöller](https://jira.spring.io/secure/ViewProfile.jspa?name=aknoeller)** opened **[SPR-9947](https://jira.spring.io/browse/SPR-9947?redirect=false)** and commented  The post-construction method (init-method) of a singleton bean accidentally  called applicationContext.getBeansOfType(...) (I say ""accidentally"", because it is obvious, that this is a potentially not deterministic behaviour during context initialization.)  The result (for a long time unnoticed) were multiple instances of singleton beans, some not even constructed correctly. Different versions of singleton beans were injected in different other beans. It took some time to detect this, since the app-Context just seemed to start correctly all the time and for some time there were no visible effects for the application.  When those finally occurred, putting spring in debug mode showed, that the specific init-method which did the call to the applicationContext failed with an exception, but spring would not detect this kind of recursion to stop the whole initilization.  It would help a lot, if spring would detect calls like the above during initialization and stop initialization to detect this kind of mistakes immediately?  Special Regards Alex   ---  **Affects:** 3.1.2","closed","status: bulk-closed,","spring-projects-issues","2012-11-02T03:47:01Z","2019-01-12T00:25:43Z"
"","14578","loadtime weaving has bottleneck on java.lang.Class.getAnnotations() [SPR-9945]","**[Alexander Knöller](https://jira.spring.io/secure/ViewProfile.jspa?name=aknoeller)** opened **[SPR-9945](https://jira.spring.io/browse/SPR-9945?redirect=false)** and commented  Hello spring developers.  We are using `LoadTimeWeaving` with spring 3.1.2 an JAVA 6u27 on CentOS-Linux for a high performance WebSite (14 boxes with up to 24 cores each) After we used the `@Configurable-Annotation` on often instantiated classes, we stumbled over a synchronized bottleneck at  ```none java.lang.Class.initAnnotationsIfNecessary ( Class.java:3067 ) java.lang.Class.getAnnotations ( Class.java:3050 ) org.springframework.core.annotation.AnnotationUtil s.findAnnotation ( AnnotationUtils.java:211 ) ...... ```  We had to step back and build some own infrastructure without synchronization. Now we have to decide if we get rid of LTW completely again because our heavily multicored servers need to rely on the parallelization, and we can not risk to step into that trap again, just because some objects are constructed more frequently after an application update. There seem to be two possibilities two avoid this bottleneck a) The code in `java.lang.Class` looks like it could avoid a huge amount of the locking by using double-checked locking, since redefinition of classes (needing to clear the cache) should be a rare event? - We also made bugreports at sunjdk and openjdk but a fix for this with double-checked locking might take a long time or for ever.  b) it might be possible to do some caching in the spring-Code of the LTW, although I am not sure how this caching can (or should) account for class-redefinitions?  How probable is a fast performance fix at that point by spring?  Thanks for answers   ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?131551-loadtime-weaving-causes-bottleneck-on-java-lang-Class-getAnnotations%28%29","closed","status: bulk-closed,","spring-projects-issues","2012-11-02T02:42:59Z","2019-01-12T00:25:45Z"
"","14201","Beans defined by @ComponentScan are skipped in @Configuration override [SPR-9567]","**[Alexander Glass](https://jira.spring.io/secure/ViewProfile.jspa?name=dcompiled)** opened **[SPR-9567](https://jira.spring.io/browse/SPR-9567?redirect=false)** and commented  Use case: I have my container configured via classpath scanning `@ComponentScan`. For my test configuration I need the ability to mock specific beans.  Due to the order of loading, beans loaded via classpath scan are not overriding properly when using `@Configuration`. The following code samples demonstrate the problem. BaseExample.java shows how it is possible to override beans via configuration. ScanExample.java shows that overriding a bean that was loaded via `@ComponentScan` is skipped.  From the logs:  21:21 DEBUG | o.s.c.a.ConfigurationClassBeanDefinitionReader     | Skipping loading bean definition for [BeanMethod:name=accountDao,declaringClass=com.glassworks.demo.ScanExample$OverrideConfig]: a definition for bean 'accountDao' already exists. This is likely due to an override in XML.  The attached zipfile contains a maven project with sample code to illustrate.  ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?128123-Overriding-Bean-Configuration-with-annotations  **Attachments:** - [spring-override-bug.zip](https://jira.spring.io/secure/attachment/20020/spring-override-bug.zip) (_6.12 kB_)  **Issue Links:** - #14316 ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForModelMethod should take into account the allowBeanDefinitionOverride settings - #15421 Cannot use `@Primary` to override `@ComponentScan-ed` beans - #20360 Beans defined by XML are skipped in `@Configuration` override - #16345 `@Configuration` imported via `@ImportResource` is not processed  9 votes, 17 watchers","closed","type: enhancement,","spring-projects-issues","2012-07-05T18:22:53Z","2019-01-13T07:03:58Z"
"","14071","Consistency between scheduling/concurrent factory beans, resulting in inheritance improvement [SPR-9435]","**[Alexander Franken](https://jira.spring.io/secure/ViewProfile.jspa?name=afranken11)** opened **[SPR-9435](https://jira.spring.io/browse/SPR-9435?redirect=false)** and commented  Spring scheduling/concurrent FactoryBeans aren't consistent : ScheduledExecutorFactoryBean and ThreadPoolExecutorFactoryBean both have protected initializeExecutor methods which set private immutable executor instances. ScheduledExecutorFactoryBean delegates creation of the executor to another protected method (createExecutor). This allows a subclass to specify the executor implementation.  ThreadPoolExecutorFactoryBean does not follow this pattern and instead instantiates the executor within initializeExecutor. This prevents successful extension for the intent of supplying a different ThreadPoolExecutor implementation. This appears to still be the case with the latest code, as of this writing: https://github.com/SpringSource/spring-framework/blob/master/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBean.java.  ``` protected ExecutorService initializeExecutor(                 ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {         ScheduledExecutorService executor =                         createExecutor(this.poolSize, threadFactory, rejectedExecutionHandler);         // Register specified ScheduledExecutorTasks, if necessary.         if (!ObjectUtils.isEmpty(this.scheduledExecutorTasks)) {                 registerTasks(this.scheduledExecutorTasks, executor);         }         // Wrap executor with an unconfigurable decorator.         this.exposedExecutor = (this.exposeUnconfigurableExecutor ?                         Executors.unconfigurableScheduledExecutorService(executor) : executor);         return executor; } /**  * Create a new {@link ScheduledExecutorService} instance.  * The default implementation creates a {@link ScheduledThreadPoolExecutor}.  * Can be overridden in subclasses to provide custom {@link ScheduledExecutorService} instances.  * @param poolSize the specified pool size  * @param threadFactory the ThreadFactory to use  * @param rejectedExecutionHandler the RejectedExecutionHandler to use  * @return a new ScheduledExecutorService instance  * @see #afterPropertiesSet()  * @see java.util.concurrent.ScheduledThreadPoolExecutor  */ protected ScheduledExecutorService createExecutor(                 int poolSize, ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {         return new ScheduledThreadPoolExecutor(poolSize, threadFactory, rejectedExecutionHandler); } ```  vs.  ``` protected ExecutorService initializeExecutor(                 ThreadFactory threadFactory, RejectedExecutionHandler rejectedExecutionHandler) {         BlockingQueue queue = createQueue(this.queueCapacity);         ThreadPoolExecutor executor  = new ThreadPoolExecutor(                         this.corePoolSize, this.maxPoolSize, this.keepAliveSeconds, TimeUnit.SECONDS,                         queue, threadFactory, rejectedExecutionHandler);         if (this.allowCoreThreadTimeOut) {                 executor.allowCoreThreadTimeOut(true);         }         // Wrap executor with an unconfigurable decorator.         this.exposedExecutor = (this.exposeUnconfigurableExecutor ?                         Executors.unconfigurableExecutorService(executor) : executor);         return executor; } ```    ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a425d717b798356e14dd92ee7c88b13739f6e158","closed","type: enhancement,","spring-projects-issues","2012-05-24T10:51:59Z","2019-01-11T12:42:40Z"
"","14671","Concurrent Consumers Not Allowed for Durable Subscription [SPR-10037]","**[Ales Bukovsky](https://jira.spring.io/secure/ViewProfile.jspa?name=alesbukovsky)** opened **[SPR-10037](https://jira.spring.io/browse/SPR-10037?redirect=false)** and commented  While using DefaultMessageListenerContainer for durable subscription listener within Grails 2.1.1 application, the exception is thrown if number of concurrent consumers is increased above 1. This is described in documentation and makes sense in ""vanilla"" JMS configuration.  Most JMS providers however account one way or another for high-availability solution where multiple listeners share the same subscription. For example: ActiveMQ provides concept of virtual destinations and Weblogic has sharable connection factory for this very purpose. Since the solution for shared access to a single subscription is in these cases provided by lower level (vendor-specific) implementation, concurrent consumer restrictions on teh container level effectively prevents the application from using it.  The simplest solution appears to be the container class extension that bypasses/consumes the corresponding exception. The problem is that a generic invalid argument error is being thrown and the only way to ensure it is the correct one is to actually parse exception message (which is not a good design).  It would be greatly appreciated if the container class actually provides a simple and clean way to suppress the concurrent consumer restriction should the developer explicitly wish so.   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4058f693e56d149c33f85b69a60d924e3275ff60, https://github.com/spring-projects/spring-framework/commit/0933734fbb5dae4c523b3bc0fcfb30a927ddc209  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: enhancement,","spring-projects-issues","2012-11-26T07:11:40Z","2012-12-12T06:19:57Z"
"","14048","expose ServletHandlerMethodResolver AnnotationMethodHandlerAdapter.getMethodResolver(Object handler) to application code [SPR-9412]","**[Alceu Medeiros](https://jira.spring.io/secure/ViewProfile.jspa?name=alceu)** opened **[SPR-9412](https://jira.spring.io/browse/SPR-9412?redirect=false)** and commented  Hi,  As I described in my super-task comment, I just need to know the method that will handle the request to get from it some custom annotations I did. My suggestion is to make ServletHandlerMethodResolver AnnotationMethodHandlerAdapter.getMethodResolver(Object handler) protected, so we can extend the class and get the method.  Turning invokeHandlerMethod(HttpServletRequest request, HttpServletResponse response, Object handler) to protected didn't solve the issue for me. Or, if have another way to get the handler method, please let me know.  Thanks in advance. Best regards.  ---  **Affects:** 3.0.6  **Reference URL:** http://forum.springsource.org/showthread.php?126255-How-to-get-a-handler-method-of-a-request-from-the-AnnotationMethodHandlerAdapter  This issue is a sub-task of #9760","closed","status: declined,","spring-projects-issues","2012-05-15T09:36:25Z","2019-01-11T12:43:20Z"
"","14022","Not mapped URL of @RequestMapping methods of controllers catched by any @Around method and implementing any interface [SPR-9386]","**[Alceu Medeiros](https://jira.spring.io/secure/ViewProfile.jspa?name=alceu)** opened **[SPR-9386](https://jira.spring.io/browse/SPR-9386?redirect=false)** and commented  I have a controller not working like this:  ```java @Controller @RequestMapping(""/notWorking"") public class NotWorkingTestController implements AnyDumbInterface {      @RequestMapping(method = RequestMethod.GET, value = ""/hi"")     public @ResponseBody     String hi() {         return ""You'll not see this, but HI!"";     }  } ```  ... This implemented interface:  ```java public interface AnyDumbInterface {  } ```  ... This controller working because it doesn't implement any interface:  ```java @Controller @RequestMapping(""/working"") public class WorkingTestController {      @RequestMapping(method = RequestMethod.GET, value = ""/hi"")     public @ResponseBody     String hi() {         return ""Hi there! I'm glad you can see it."";     }  } ```  ... And this class where I put a dumb aspect programming:  ```java @Aspect public class ClassAspectThings {      @Around(""within(@org.springframework.stereotype.Controller *)"")     //@Around(""within(@org.springframework.stereotype.Controller *) && execution(@ACustomAnnotation public * *(..))"")     public Object doBasicProfiling(ProceedingJoinPoint pjp) throws Throwable {         final Object realResult = pjp.proceed();         return realResult;     } } ```  When I run the application in Eclipse with Tomcat, I can see it in log:  ``` (...) 2012-05-08 17:37:59,370 [main] DEBUG [DefaultAnnotationHandlerMapping] -  (...) 2012-05-08 17:37:59,378 [main] DEBUG [DefaultListableBeanFactory] -  2012-05-08 17:37:59,381 [main] INFO [DefaultAnnotationHandlerMapping] -  (...) ```  Debugging I can see that, what the method DefaultAnnotationHandlerMapping.determineUrlsForHandler(String beanName)  gets when invoke context.getType(beanName) is variating: is the object class itself, when doesn't implement an interface; is a proxy, when does it implement an interface.  Must have both conditions to get the error: implement an interface and be catch by the `@Around`. I made a custom annotation that I originally used to be catch by the `@Around` and is over there commented in the method. If I change to this and put the annotation in the NotWorkingTestController I can even make WorkingTestController implement the AnyDumbInterface interface and it will still work fine.  I'll wait for responses. Best regards. (And sorry about my bad english)   ---  **Affects:** 3.0.6","closed","in: core,","spring-projects-issues","2012-05-08T14:36:15Z","2019-01-12T16:36:25Z"
"","14503","Better document the use of @Async annotation when used in an Interface vs an implementation or the interface. [SPR-9870]","**[AL](https://jira.spring.io/secure/ViewProfile.jspa?name=cal5101)** opened **[SPR-9870](https://jira.spring.io/browse/SPR-9870?redirect=false)** and commented  Nowhere in the Spring documentation does it state that the `@Async` annotation applied on an interface will correctly generate a JDK proxy and execute the method asynchronously on the concrete class.  I was going over some code with an interface that has a method annotated with `@Async` and was not sure how it was working properly. I had to step through the debugger to determine what Spring was doing.  I'm not certain if this applies to all Spring annotations, but it would be helpful to know the differences on annotating an interface vs an implementation of the interface.    ---  **Affects:** 3.0.5  **Attachments:** - [async_matcher.gif](https://jira.spring.io/secure/attachment/20557/async_matcher.gif) (_170.26 kB_)","closed","status: bulk-closed,","spring-projects-issues","2012-10-10T13:39:04Z","2019-01-12T00:25:54Z"
"","13865","NoSuchMethodException when invoking local EJB 2.1 using  in Spring [SPR-9227]","**[AJAY SINGH](https://jira.spring.io/secure/ViewProfile.jspa?name=ajayhwip)** opened **[SPR-9227](https://jira.spring.io/browse/SPR-9227?redirect=false)** and commented  I have a spring controller (Spring MVC) that is exposed as REST service, the actual work being done within these methods being delegated to some existing Local EJBs 2.1.  Here is how the frontend controller looks like ->  ```java @Controller  @RequestMapping(value=""/orderService"",...)   public class MyController {..      @Autowired     MyLocalEJBInterface myLocalEJBBean;    //XML version   @RequestMapping(..)   public @ResponseBody OrderDTO createOrder(@RequestBody OrderDTO orderDTO) throws Exception {        	  //delegate to the current SLSBs (EJB2.1) 	  OrderDTO orderDTONew = myLocalEJBBean.createOrder(orderDTO);	   	  return orderDTONew;   } ```  the EJB is defined in the spring context as :  ```xml   ```  While this REST service is invoked following error occurs when the call is actually delegated to Local interface of EJB =>  ``` Caused by: java.lang.NoSuchMethodException: com.xxx.yyy.EJSLocalStatelessEquitiesMyLocalEJBInterface_09f56dca.createOrder(OrderDTO) 	at java.lang.Class.throwNoSuchMethodException(Class.java:274) 	at java.lang.Class.getMethod(Class.java:821) 	at org.springframework.ejb.access.LocalSlsbInvokerInterceptor.invokeInContext(LocalSlsbInvokerInterceptor.java:75) 	at org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.invoke(AbstractSlsbInvokerInterceptor.java:189) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) 	... 47 more ```  When I checked the actual WAS 6.1 generated stub, EJSLocalStatelessEquitiesMyLocalEJBInterface_09f56dca, the method that it complains about exists in expected form (it indeed has createOrder(OrderDTO) method with proper signature).  I tried to do the very same thing with a Remote interface, and that too gave the same problem, but when I serached for that issue I came across a resolution that said that while defining the Remote spring aware EJB, home-interface should be defined => So, this works for Remote case =>  ```xml   ```xml  ```  Also, some information on how the application is packaged, not sure if this could be causing any issue here => this layer (Spring MVC + REST) is expected to be kept in a separate EAR (lets call it newRESTServices.EAR, its WEB-INF/lib contains all the EJB client jars for the EJBs that it is expected to delgetae to), other than the EAR which contains the Local EJBs (lets call it existingLocalEJBs.EAR, so basically what we are trying to do is to make the Local EJB calls across the EAR boundaries (with both the EARs being deployed in the same WAS/JVM, they co-exist).  (wrt the above code => MyController  is part of newRESTServices.EAR and the EJB Bean is part of existingLocalEJBs.EAR,  all the needed EJB client jars are packaged properly with newRESTServices.EAR).    ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2012-03-12T06:41:47Z","2019-01-12T03:48:54Z"
"","13933","Add @Cacheable implementation support for exception handling allowing the service method to be called instead of letting the provider exception to break the service [SPR-9295]","**[Adriano Andrulis](https://jira.spring.io/secure/ViewProfile.jspa?name=aandrulis)** opened **[SPR-9295](https://jira.spring.io/browse/SPR-9295?redirect=false)** and commented  Make `@Cacheable` implementation to support exception handling allowing the service method to be called instead of letting the provider exception to break the service. If the cache is down we should still return the non cached response.  A new parameter i.e. ignoreCacheProviderExceptions parameter could be used to let the developers to decide if they want the behaviour or not.  ---  **Affects:** 3.1.1  **Issue Links:** - #13913 Cache Abstraction Exception Handling (_**""duplicates""**_)  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-04-02T01:57:09Z","2019-01-11T12:48:03Z"
"","13878","TransactionAwareDataSourceProxy better usability [SPR-9240]","**[Adrian Tarau](https://jira.spring.io/secure/ViewProfile.jspa?name=adrian.tarau)** opened **[SPR-9240](https://jira.spring.io/browse/SPR-9240?redirect=false)** and commented   ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2012-03-14T14:00:31Z","2019-01-12T03:48:52Z"
"","14516","Inconsistent behavior for LocalContainerEntityManagerFactoryBean for using/not using persistence.xml, with Hibernate4 [SPR-9883]","**[Adrian Shum](https://jira.spring.io/secure/ViewProfile.jspa?name=adrianshum)** opened **[SPR-9883](https://jira.spring.io/browse/SPR-9883?redirect=false)** and commented  The finding is triggered by the transaction/auto-flushing problem I encountered and discussed in the reference URL.  I am using Spring 3.1.2, Hibernate 4.1.6, WebSphere 8  The symptoms is: If I use LocalContainerEntityManagerFactoryBean (Lemme call it LCEMFB) without persistence.xml, when I am performing transactional actions (e.g. flushing the entity manager (em) ), it complains for no transaction in progress (It seems to me that Hibernate is unable to lookup the transaction).  However if I use the traditional way to have a persistence.xml which contains almost identical settings, it works without problem.  ---  Here is the non-persistence.xml config:  snippet in app context xml:  ```xml                                                                                                                                                   ```  (No META-INF/persistence.xml)  Such way to config LCEMFB give me problem of ""no transaction in progress"", or failed ""auto-flushing"" (please refer to reference URL for different behavior with different jpaPropertyMap combination)  ---  However, if I switch the whole setting to  ```xml               ```  ```xml                 org.hibernate.ejb.HibernatePersistence         jdbc/fooDs          com.foo.FooModel                                                                                            ```  ---  Though the configuration is almost identical, the ""no persistence.xml"" way is not giving result as expected.  ---  **Affects:** 3.1.2  **Reference URL:** http://forum.springsource.org/showthread.php?131051-Auto-Flush-not-working-for-Spring-3-1-LocalEntityManagerFactoryBean-Hibernate-4-JTA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ff765446e6951ee57efd7d99ec81fa976b4ee09, https://github.com/spring-projects/spring-framework/commit/7702fb8513c1b1f5f658eed220941ee55e58e045  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2012-10-16T20:19:40Z","2019-01-13T21:05:25Z"
"","14005","ConfigurationClassPostProcessor misbehaves on (static) factory methods [SPR-9368]","**[Adrian Moos](https://jira.spring.io/secure/ViewProfile.jspa?name=bedag-moo)** opened **[SPR-9368](https://jira.spring.io/browse/SPR-9368?redirect=false)** and commented  ConfigurationClassPostProcessor.processConfigBeanDefinitions assumes that bd.getBeanClassName() is the runtime type of that bean definition. This assumption doesn't appear to hold if the bean definition in question is a factory method (at least for a static factory method, bd.getBeanClassName() appears to hold the class containing the factory method, not its return type).  As a consequence, trying to use the configuration class  ``` @Configuration public class Application {          @Bean      DataAccessLayer dataAccessLayer() {         return new DataAccessLayer();     }          @Bean     ServiceLayer serviceLayer() {         return new ServiceLayer(dataAccessLayer());     }          @Bean     PresentationLayer presentationLayer() {         return new PresentationLayer(serviceLayer());     }          @Bean     static ConfigurationClassPostProcessor configurationClassPostProcessor() {         return new ConfigurationClassPostProcessor();     } } ```  results in  ``` Information: Refreshing Root WebApplicationContext: startup date [Wed May 02 22:49:25 CEST 2012]; root of context hierarchy Mai 02, 2012 10:49:25 PM org.springframework.web.context.support.AnnotationConfigWebApplicationContext loadBeanDefinitions Information: Successfully resolved class for [ch.bedag.xyz.myapp.config.Application] Mai 02, 2012 10:49:25 PM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition Information: Overriding bean definition for bean 'dataAccessLayer': replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=application; factoryMethodName=dataAccessLayer; initMethodName=null; destroyMethodName=(inferred); defined in class ch.bedag.xyz.myapp.config.Application] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=configurationClassPostProcessor; factoryMethodName=dataAccessLayer; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [ch/bedag/xyz/myapp/config/Application.class]] Mai 02, 2012 10:49:25 PM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition Information: Overriding bean definition for bean 'serviceLayer': replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=application; factoryMethodName=serviceLayer; initMethodName=null; destroyMethodName=(inferred); defined in class ch.bedag.xyz.myapp.config.Application] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=configurationClassPostProcessor; factoryMethodName=serviceLayer; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [ch/bedag/xyz/myapp/config/Application.class]] Mai 02, 2012 10:49:25 PM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition Information: Overriding bean definition for bean 'presentationLayer': replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=application; factoryMethodName=presentationLayer; initMethodName=null; destroyMethodName=(inferred); defined in class ch.bedag.xyz.myapp.config.Application] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=configurationClassPostProcessor; factoryMethodName=presentationLayer; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [ch/bedag/xyz/myapp/config/Application.class]] Mai 02, 2012 10:49:25 PM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition Information: Overriding bean definition for bean 'configurationClassPostProcessor': replacing [Root bean: class [ch.bedag.xyz.myapp.config.Application]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=configurationClassPostProcessor; initMethodName=null; destroyMethodName=(inferred); defined in class ch.bedag.xyz.myapp.config.Application] with [Root bean: class [ch.bedag.xyz.myapp.config.Application]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=configurationClassPostProcessor; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [ch/bedag/xyz/myapp/config/Application.class]] Mai 02, 2012 10:49:25 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons Information: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@eb9101: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,application,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0,configurationClassPostProcessor,serviceLayer,dataAccessLayer,presentationLayer]; root of factory hierarchy Mai 02, 2012 10:49:25 PM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons Information: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@eb9101: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,application,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0,configurationClassPostProcessor,serviceLayer,dataAccessLayer,presentationLayer]; root of factory hierarchy Mai 02, 2012 10:49:25 PM org.springframework.web.context.ContextLoader initWebApplicationContext Schwerwiegend: Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serviceLayer' defined in class path resource [ch/bedag/xyz/myapp/config/Application.class]: No matching factory method found: factory bean 'configurationClassPostProcessor'; factory method 'serviceLayer()'. Check that a method with the specified name exists and that it is non-static. 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:528) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1015) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:911) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:385) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:284) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4779) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5273) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1566) 	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1556) 	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) 	at java.util.concurrent.FutureTask.run(FutureTask.java:166) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) 	at java.lang.Thread.run(Thread.java:722) ```  The post-processor's inability to cope with factory methods also prevents it from enhancing DataAccessLayer and friends, which was why I configured the PostProcessor in the first place ... I guess I should fall back to Component Scanning to discover the configuration classes, and use `@Autowired` to wire them up.   ---  **Affects:** 3.1.1","closed","in: core,","spring-projects-issues","2012-05-02T14:02:55Z","2019-01-12T05:28:41Z"
"","14571","Support configuration of load-time weaving in the TestContext Framework [SPR-9938]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-9938](https://jira.spring.io/browse/SPR-9938?redirect=false)** and commented  #### Status Quo  When executing integration tests with a Spring `ApplicationContext` that uses load-time weaving, each test must be passed a command-line argument referencing the location of the Spring load-time weaving agent, for example:  ``` -javaagent:jars/org.springframework.instrument-3.1.2.RELEASE.jar ```  The Spring Tomcat LTW configuration does not require any command-line arguments, because it uses a transforming class loader.  #### Proposal  If the _Spring TestContext Framework_ (TCF) can be configured to use a transforming class loader like the one that already ships for Tomcat, then running an integration test would be much easier.  Perhaps an `@LoadTimeWeaving` annotation can be introduced to instruct the TCF to automatically configure the transforming class loader for load-time weaving when the `ApplicationContext` is created for the test.   ---  **Affects:** 3.1 GA  1 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2012-10-31T09:04:41Z","2012-10-31T10:19:15Z"
"","14549","Support table truncation teardown in the TestContext framework [SPR-9916]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-9916](https://jira.spring.io/browse/SPR-9916?redirect=false)** and commented  #### Overview  Currently the _Spring TestContext Framework_ implements the _Transaction rollback tear down_ for integration tests that touch the database. Another standard pattern for database tear down is the _Table truncation tear down_, discussed on page 661 in the xUnit Test Patterns Book.  There are many situations where the test needs to span multiple `@Transactional` service methods with many different propagation settings. Therefore running the whole integration test within a single `@Transactional` test method with transaction rollback is not enough. Right now this means doing some sort of cleanup of the work that the transactions did. The transaction cleanup code can be problematic to write and keep in sync with how the tests modify the database making test code brittle. Dropping and recreating the schema can be overkill because you have to rebuild some tables which are essentially immutable for the duration of the test, for example we might have tables with application usernames, passwords, preferences ... etc, that are essentially immutable for a vast majority of integration tests.  #### Proposal  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration @ActiveProfiles({ ""development"", ""standalone"" })  // the truncate annotation should cause the spring test runner to  // truncate all tables in the test schema other than test.users and  // test.roles // // The runner can scan the schema using jdbc metadata to find out all  // the table names and then can use the configuration information in the  // annotation to figure what tables to truncate or remove  // // A class level @Truncate should truncate the tables after every test  // method, but place @Truncate on a method can give fine grained control  // over which tables to truncate after every test method. // // An alternative to @Truncate could be a truncate method in the Base  // transactional test classes for junit and testng. the method could have  // a signature along the lines  // // public void truncate(String schema, String truncateTablesRegex, String keepTablesRegex) //    // One can play around with whether a single regex should be used to identify // tables and schema or whether those should be separate setting.  @Truncate(schema=""test"", tables=""*"", keep={""users"", ""roles""}) public class Test {     // ... } ```  Implementing the _Table truncation tear down_ as discussed in xUnit test patterns on page 661 can make integration testing with Spring much more powerful than it is today.   ---  **Affects:** 2.5 final","open","type: enhancement,","spring-projects-issues","2012-10-23T13:14:36Z","2019-01-15T11:42:30Z"
"","14520","Parallelize Component Scanning to Improve Spring Startup Time [SPR-9887]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-9887](https://jira.spring.io/browse/SPR-9887?redirect=false)** and commented  As my application is growing in size spring start-up time is increasing and starting to be quite annoying  during development. The application is setup to use component scanning, and JPA so there are a lot of `@Entity` ,`@Service`, `@Controller`, `@Repository`, `@Autowired`  programming with the annotations is very productive, but start-up time of spring is starting to suffer. The app is still fairly small but growing here are some stats about the app:  628 classes in the application  279 beans with class level annotations  * 80 `@Service` beans * 35 `@Component` beans * 47 `@Controller` beans * 15 `@Repository` beans * 52 `@Entity` JPA classes (Using Hibernate configured to scanning using spring) * 50 `@MappedSupperClass` JPA classes (there contain various named queries so hibernate has to scan them)  489 beans with field and method declaration annotations  * 300 `@Autowired` annotations * 146 `@Transactional` methods * 43  `@PersistenceContext` * 28  `@PostConstruct` * 156 `@Valid` annotations * 280 `@RequestMapping` annotations  None of the `@PostConstruct` do anything that requires network, or disk access, they are simple just computing and initializing objects in memory, or doing basic validation they can't possibly be causing the slow downs I see.  This application takes about 20 seconds to launch on high End Late 2011 MacBook Pro 2.5 GHz core i7 8GB RAM 256GB SSD running Java 7u9 and tomcat 7.0.29 on a machine that is a couple of years old with a mechanical drive or a slower cpu the startup time becomes a slow 90 to 180 seconds.  Class-path: * Hibernate 4.1.7 * Spring 3.1.2 * Spring Security 3.1.3 * Hibernate Validator 4.3 * Tomcat 7.0.29 * AspectJ LTW 1.7.1  Here are the times to start-up the various parts of the applications, as seen in a typical run of the application from within STS 3.1.  * 17342 ms - Full server startup time * 11098 ms - Root WebApplicationContext as printed by spring to the log file * 1636 ms - Dispatcher servlet as printed by spring to the log file  total spring contexts initialization time 12734 ms out of 17342 ms reported by tomcat for application startup time or 73% of startup time  For the WebApplication context here are the main times of the non spring bits computed by looking at timestamp data in the log file  * 2013 ms - AspectJ load time weaving * 567  ms - Flyway schema migration involves opening a connection to the db and checking one directory in the class for new .sql files * 2762 ms - hibernate startup time  total 5342 ms for aspectj + flway + hibernate to do the initialization of the application context  Spring Web Context + Dispatches Servlets accounts for 7068 ms or 40% of total startup time  I have not taken a profiler to find out where that time is spent, my guess is that scanning of the classpath is a major part of this process, It would be great if spring can do the component scanning using multiple threads, to speed up the startup process.  20 seconds might seem pretty fast for a Java app but every week as code gets added that 20 seconds goes up. Also no complied stacks like nodeJS, and others really have very little startup time, I think Spring has always been the standard bearer in the java world for developer productivity, parallelizing startup will make a big difference for developers working on large application.  ---  **Affects:** 3.1 GA  **Issue Links:** - #13410 Parallel bean initialization during startup (_**""duplicates""**_) - #13410 Parallel bean initialization during startup  6 votes, 13 watchers","closed","type: enhancement,","spring-projects-issues","2012-10-17T18:08:37Z","2019-01-11T13:21:52Z"
"","14456","Add annotations for HTML sanitization to Spring MVC [SPR-9823]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-9823](https://jira.spring.io/browse/SPR-9823?redirect=false)** and commented  Protecting against XSS attacks when building restful web services in Spring MVC is important. Currently as of version 3.1 this has to be done manually. It would be highly useful to have a set of annotations that can be put onto objects that are the result of message convertors which will cause the string in those objects to go through a standard HTML sanitizer framework such as, http://code.google.com/p/owasp-java-html-sanitizer/  I propose something along the lines of.  ```   @RequestMapping(... etc) public @ResponseBody @HtmlSanitize ResponseJson post(@RequestBody @HtmlSanitize RequestJosn) {    // method code  } {/noformat}  Integration of XSS sanitization into SpringMVC would benifit everyone that uses SpringMVC. Spring MVC can create some sort of plug-gable solution so that the solution is not tied to a single sanitization framework or a single data format.    ```    ---  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-09-23T11:06:48Z","2021-07-13T19:09:00Z"
"","14229","Provide Aplicity to use URI templates in Interceptor Definitons [SPR-9595]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-9595](https://jira.spring.io/browse/SPR-9595?redirect=false)** and commented  There does not seem to be a way to define interceptors that understand URI templates, which makes it very hard to perform common operations when using annotation driven controllers.    ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-07-14T12:16:50Z","2012-09-13T23:46:48Z"
"","14226","@CacheRefresh to request a refresh of a stale object in the cache [SPR-9592]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-9592](https://jira.spring.io/browse/SPR-9592?redirect=false)** and commented  It would be nice to have an `@RefreshCache` annotation this would indicate to the cache abstraction that it should not evict the element in the cache but should replace it with the returned value of a method marked with `@RefreshCache` annotation.  Ideally the `@RefreshCache` should have an option to indicate that calls to `@Cacheable` methods should block unit the refresh is complete, or should see stale data until refresh is complete.  ---  **Affects:** 3.1 GA  **Issue Links:** - #13942 Provide some synchronization between `@Cacheable` and `@CacheEvict` annotated methods  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-07-12T20:53:52Z","2019-01-13T07:03:49Z"
"","14222","Documentation does not explain how @Cacheable and @CacheEvict behave in a multi-threaded environment [SPR-9588]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-9588](https://jira.spring.io/browse/SPR-9588?redirect=false)** and commented  The current documentation for the caching abstraction does not talk about how these abstractions behave in a multi threaded scenario. Given that most caches are likely to accessed by multiple threads and the impact that stale caches can have on correctness of application using stale data, the documentation should clearly explain the multi threaded behaviour of the spring caching abstraction.  The following issues #13892 and #13942 are examples of multi threading behaviour that should be documented to help potential users avoid difficult to find bugs.  Some one with really deep knowledge of how he caching abstractions handles multiple threads should write these docs.  ---  **Affects:** 3.1.2  **Issue Links:** - #16165 Support of ehcache's BlockingCache  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d100eef8296f0c354c7b9916ee746fa1a2637035  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-07-12T09:45:02Z","2019-01-11T12:53:05Z"
"","14240","Issue with unchecked checkboxes bound to Booleans as values in a Map [SPR-9606]","**[Adam Rozen](https://jira.spring.io/secure/ViewProfile.jspa?name=grayedog)** opened **[SPR-9606](https://jira.spring.io/browse/SPR-9606?redirect=false)** and commented  I am having an issue with the way in which Spring handles submission of unchecked checkboxes bound to Booleans as part of a map.  I have a Map that I am able to bind to a  tag using path=""myMap['mapKey']. The binding to the page works successfully, in that the checkbox is checked or not based on the key value in the backing object's map. I also have successful results when checking a checkbox bound to a key in this map, but not when leaving them unchecked.  Additionally, I have also made sure that all of the keys bound to the checkboxes on the page are pre-inserted into the map with false values.  The rendered HTML on the page includes both an \ as well as the","closed","status: bulk-closed,","spring-projects-issues","2012-07-19T08:28:11Z","2019-01-12T02:47:14Z"
"","14029","API to generate xml configuration from modified applicationContext [SPR-9393]","**[Abhishek Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=gupabhi)** opened **[SPR-9393](https://jira.spring.io/browse/SPR-9393?redirect=false)** and commented  I'm writing a generic framework which a large number of application will make use of. I have a use-case where my BeanFactoryPostProcessor modifies beanDefinions depending on the environment in which an application is run. Application developers will have this BFPP as part of their spring config (say through an import). This BFPP would even add new bean definitions to the context, depending on the environment in which its run. Needless to say, there's a lot of dynamic configuration being created based on environment, etc. It get very difficult to verify that the application was correctly configured or debug the application unless one can see what the configuration finally looks like. Hence post running a BFPP, it will be extremely beneficial to have a way to dump the xml config of the modified BeanFactory/AppContext. The input to the API would be a modified appContext and output would be the spring xml configuration.  I'm happy to provide any more information you might require.  Thanks, Abhi   ---  **Affects:** 3.1.1","closed","type: enhancement,","spring-projects-issues","2012-05-09T14:54:48Z","2012-05-11T04:31:18Z"
"","14598","HttpMessageConverter no longer works for @ResponseBody parameters with an extended generic.at the type [SPR-9964]","**[Aaron Harshbarger](https://jira.spring.io/secure/ViewProfile.jspa?name=aharshbarger)** opened **[SPR-9964](https://jira.spring.io/browse/SPR-9964?redirect=false)** and commented  Since upgrading to 3.2.0 RC1, a base controller no longer works for any method parameters of `@ReponseBody` that utilizes a generic that extends anything.  For example, the following abstract controller fails in 3.2.0 RC1  ```java public abstract class AbstractTestController {   @RequestMapping(value = ""/test"", method = RequestMethod.POST)   public @ResponseBody DTO test(@RequestBody DTO dto)  {     // this method does not work with Spring 3.2     return dto;   }    @RequestMapping(value = ""/testList"", method = RequestMethod.POST)   public @ResponseBody List test(@RequestBody List dtoList)  {     // this method does work with Spring 3.2     return dtoList;   } } ```  The following example below where the DTO generic doesn't extend another works OK in 3.2.0 RC1.  ```java public abstract class AbstractTestController {   @RequestMapping(value = ""/test"", method = RequestMethod.POST)   public @ResponseBody DTO test(@RequestBody DTO dto)  {     // this method does work with Spring 3.2     return dto;   } } ```  It looks like there was a fix put in the 3.2.0 M2 release #13028 that may be where the existing functionality broke.  I've also narrowed it down to org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor class Line 95 (parameter.getGenericParameterType()). Is there something we need to do different?  I'm uploading some test controllers, etc that can be used to recreate the  issue.  ---  **Affects:** 3.2 RC1  **Reference URL:** https://jira.springsource.org/browse/SPR-8381  **Attachments:** - [test_examples.zip](https://jira.spring.io/secure/attachment/20605/test_examples.zip) (_2.84 kB_)  **Issue Links:** - #14658 `@RequestBody` is not working with parameters of generic types(TypeVariable) defined on a class level. (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2012-11-06T11:34:57Z","2019-01-13T07:02:15Z"
"","108","Fix minor issue in MockHttpServletRequest","# A few points of discussion: - This changes the behavior of getRedirectedUrl since if someone adds the Location header it is now updated. I think this is correct behavior but it could be preferable to do this in another JIRA. I did it in this one because I thought it was weird keeping the state in two distinct locations. Please let me know if you would like this changed. - [SPR-9594](https://jira.springsource.org/browse/SPR-9594) points out the spec states ""Sends a temporary redirect response ..."" Interestingly enough there is a constant named [SC_TEMPORARY_REDIRECT](http://docs.oracle.com/cd/E17802_01/products/products/servlet/2.3/javadoc/javax/servlet/http/HttpServletResponse.html#SC_TEMPORARY_REDIRECT) that is equal to 307 (not 302 as we believe the status should be). I still think 302 is the correct status, but thought I would point this out. There are two constants for a 302 ([SC_MOVED_TEMPORARILY](http://docs.oracle.com/cd/E17802_01/products/products/servlet/2.3/javadoc/javax/servlet/http/HttpServletResponse.html#SC_MOVED_TEMPORARILY) and [SC_FOUND](http://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/HttpServletResponse.html#SC_FOUND)) that have documentation stating it should be used for temporarily moved. The reason I brought up SC_TEMPORARY_REDIRECT is that it is an exact match of the spec. # Changes  Previously MockHttpServletRequest#sendRedirect did not set the HTTP status or the Location header. This does not conform to the HttpServletRequest interface.  MockHttpServletRequest will now: - Set the HTTP status to 302 on sendRedirect - Set the Location header on sendRedirect - Ensure the Location header and getRedirectedUrl are kept in synch  Issue: SPR-9594","closed","","rwinch","2012-07-13T21:48:53Z","2014-06-19T06:01:09Z"
"","182","aa","","closed","","zhouzhonghua","2012-11-13T04:32:33Z","2012-11-13T07:28:12Z"
"","141","Fix non-deterministic build failures under JDK 7","","closed","","philwebb","2012-09-09T17:32:29Z","2012-10-10T22:21:15Z"
"","140","Tests for DelegatingDataSource Wrappers","","closed","","philwebb","2012-09-07T20:33:00Z","2014-06-18T05:11:36Z"
"","131","Performace improvements for SPR-9670","","closed","","philwebb","2012-08-30T18:54:56Z","2014-07-11T03:48:47Z"
"","125","GRAILS-4995 - Improve the handling of List and Map ctor args","","closed","","jeffbrown","2012-08-27T21:40:28Z","2012-08-28T12:33:06Z"
"","100","SPR-9528 Use BufferedInputStream in SimpleMetadataReader to increase performance","","closed","","jexp","2012-06-21T11:26:01Z","2012-07-05T11:10:07Z"
"","94","SPR-9498: relax logic detecting successful property editor after conversion exception","","closed","","dsyer","2012-06-14T11:06:18Z","2012-09-04T15:54:02Z"
"","55","fixed wrong @linkplain command in Javadoc","","closed","","Abdull","2012-03-08T00:42:13Z","2014-08-15T10:18:13Z"
"","52","Suggested Implementation for SPR-9202","","closed","","jyothim","2012-03-05T18:53:33Z","2012-05-16T14:26:06Z"
"","51","Suggested Implementation for SPR-9202","","closed","","jyothim","2012-03-05T18:51:15Z","2012-03-05T18:51:15Z"