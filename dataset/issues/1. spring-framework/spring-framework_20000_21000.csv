"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","10832","a Uri Value is incorrectly extracted if it contains '.'. [SPR-6164]","**[Zhou Wu](https://jira.spring.io/secure/ViewProfile.jspa?name=zwu_ca)** opened **[SPR-6164](https://jira.spring.io/browse/SPR-6164?redirect=false)** and commented  Suppose we have the controller request mapping as the following  `@RequestMapping`(value = ""/my/{vari}"", method = RequestMethod.GET) `@ResponseBody` public String getVari(`@PathVariable` String vari) { System.out.println(""vari="" + vari); return vari; }  If a request such as  ""http://localhost/myapp/my/abc.mycontroller.com"" is submitted, the actually value of 'vari' obtained by Spring API only returns 'abc.mycontroller'.  Further investigation turns out the issue is at line 564 in https://src.springframework.org/svn/spring-framework/tags/spring-framework-3.0.0.RC1/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java. The pattern generated by the line results in ""{vari}.**"". With  the 'pathMatcher' (the matcher used at line 565) object created by AntPathStringMatcher(""{vari}.**"", ""abc.mycontroller.com"", map), the value of 'vari' will be 'abc.mycontroller' in the 'map' variable after executing line 566.  ---  **Affects:** 3.0 M4, 3.0 RC1  **Attachments:** - [MyController.java](https://jira.spring.io/secure/attachment/15751/MyController.java) (_950 bytes_)  **Issue Links:** - #10899 RESTful URLs with path variables containing dots are incorrectly mapped (_**""is duplicated by""**_) - #14660 Spring eats `@PathVariable` part after last dot (_**""is duplicated by""**_) - #19242 `@PathVariable` will cut off the last point (_**""is duplicated by""**_) - #12288 Allow valid file extension paths for content negotiation to be specified - #10208 ReSTful URLs with content type extension do not work properly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8292491a53e37a02800938edba2ea2847c5fad84, https://github.com/spring-projects/spring-framework/commit/e24e76805479a3a8ab3b4b2a73b8c272afa36baa  2 votes, 11 watchers","closed","type: bug,","spring-projects-issues","2009-09-29T08:12:07Z","2019-01-13T07:58:14Z"
"","10076","MissingServletRequestParameterExceptions thrown from AnnotationMethodHandlerAdapter should include class and method [SPR-5403]","**[Zach Bailey](https://jira.spring.io/secure/ViewProfile.jspa?name=znbailey)** opened **[SPR-5403](https://jira.spring.io/browse/SPR-5403?redirect=false)** and commented  We have controllers that are generally centered around a single entity/model/domain object. In this case, something we call an Initiative. We have many `@RequestMapping` methods in this `@Controller` class and most of them require a common parameter: the id of the Initiative (the primary key). This seems like a very common pattern.  Sometimes, someone forgets to append the initiativeId parameter to links and this leads to MissingServletRequestParameterException being thrown - as expected.  However, unless you know exactly what link you clicked on (easy to do in a simple application, but not so much in a very dynamic/AJAX/etc application where the id may be forgotten because of some buggy JS), you may not know what method it was trying to invoke with the missing parameter.  Additionally, we have some models for which we have multiple controllers (some for CRUD, some for reporting, etc). Then it gets REALLY confusing when you're trying to figure out exactly what URL was being accessed without the proper parameters.  My request would be to push down or pass along the MethodParameter available/present in HandlerMethodInvoker#resolveRequestParam to the raiseMissingParameterException method, so it can get included in the MissingServletRequestParameterException thrown by this method. The MissingServletRequestParameterException should also be modified to print the class name and method as part of the stack trace.  Thanks for all your work!   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-08T06:15:18Z","2012-06-19T09:36:26Z"
"","9896","SqlInOutParameter  [SPR-5222]","**[Yu Liu](https://jira.spring.io/secure/ViewProfile.jspa?name=yuliu)** opened **[SPR-5222](https://jira.spring.io/browse/SPR-5222?redirect=false)** and commented  We are seeing the following issue when using Spring's StoredProcedure class.  Given the sample procedure and code below we get and Arithmetic overflow error if the total_rows parameter is defaulted and the proc returns >= 10 for total_rows. It appears that the default value can influence the scale of what can be returned. For example you can increase the default in factors of ten or set it to null and the below scenario works. This behaviour does not seem correct to us.  CODE SNIPPET ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  import java.sql.Types; import java.util.HashMap; import java.util.Map;  import javax.sql.DataSource;  import org.springframework.jdbc.core.SqlInOutParameter; import org.springframework.jdbc.object.StoredProcedure;  /** * `@author` knoxl on Oct 14, 2008 @ 6:15:58 PM * `@version` $Revision:$, submitted by $Author:$   */   public class TestOutParamSet extends TestCase {  private DataSource dataSource;  protected void setUp() throws Exception { super.setUp(); dataSource = getDataSource(""""); // NOTE Need to provide your own somehow }  public void test() { SetId s = new SetId(dataSource);  Map m = new HashMap(); m.put(""total_rows"", 0l); // NOTE null would work Map r = s.execute(m); System.out.println(r); }  private class SetId extends StoredProcedure { private static final String SQL = ""test_set_id"";  public SetId(DataSource ds) { super(ds, SQL); declareParams(); compile(); }  private void declareParams() { declareParameter(new SqlInOutParameter(""total_rows"", Types.NUMERIC)); } } }  PROC ////////////////////////////////////////////////////////////////////////////////////////////////////  CREATE PROC dbo.test_set_id ( `@total_rows`   numeric(10) = 0 OUTPUT  ) AS BEGIN SELECT  `@total_rows` = 10 END  ERROR //////////////////////////////////////////////////////////////////////////////////////////////////////  org.springframework.jdbc.UncategorizedSQLException: CallableStatementCallback; uncategorized SQLException for SQL [{call test_set_id(?)}]; SQL state [ZZZZZ]; error code [247]; Arithmetic overflow during implicit conversion of NUMERIC value '10' to a NUMERIC field . ; nested exception is com.sybase.jdbc3.jdbc.SybSQLException: Arithmetic overflow during implicit conversion of NUMERIC value '10' to a NUMERIC field .  at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.translate(SQLStateSQLExceptionTranslator.java:124) at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:322) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:949) at org.springframework.jdbc.core.JdbcTemplate.call(JdbcTemplate.java:982) at org.springframework.jdbc.object.StoredProcedure.execute(StoredProcedure.java:113) at magnet.persistence.proc.TestOutParamSet.test(TestOutParamSet.java:39) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:168) at junit.framework.TestCase.runBare(TestCase.java:134) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: com.sybase.jdbc3.jdbc.SybSQLException: Arithmetic overflow during implicit conversion of NUMERIC value '10' to a NUMERIC field .   ---  **Affects:** 2.5.5","closed","status: declined,","spring-projects-issues","2008-10-17T05:17:41Z","2019-01-12T16:27:51Z"
"","10306","AbstractJdbcInsert doesn't use insertTypes in doExecuteAndReturnKey() [SPR-5635]","**[Yaroslav Gnatyuk](https://jira.spring.io/secure/ViewProfile.jspa?name=yar)** opened **[SPR-5635](https://jira.spring.io/browse/SPR-5635?redirect=false)** and commented  When calling SimpleJdbcInsert.executeAndReturnKey(Map), Spring doesn't use table metadata in setParameterValues() method to determine column types. For MSSQL Server it results in a weird exception ""Cannot convert varchar to varbinary"" when the null value is passed to nullable varbinary column.   --- No further details from [SPR-5635](https://jira.spring.io/browse/SPR-5635?redirect=false)","closed","type: bug,","spring-projects-issues","2009-03-30T16:15:56Z","2012-06-19T03:46:49Z"
"","10219","Quartz: support org.springframework.core.io.Resource location support for SchedulerAccessor [SPR-5548]","**[Yann CÃ©bron](https://jira.spring.io/secure/ViewProfile.jspa?name=yann)** opened **[SPR-5548](https://jira.spring.io/browse/SPR-5548?redirect=false)** and commented  It would be convenient for the following usecases: * using classpath: prefix * using ANT-style pattern matching  The current workaround is to subclass SchedulerFactoryBean and resolve the Resources in afterPropertiesSet() into jobSchedulingDataLocations   ---  **Affects:** 3.0 M2  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2009-03-06T02:34:48Z","2019-01-12T02:37:49Z"
"","10692","provide a extension for customize org.springframework.web.context.request.RequestContextHolder [SPR-6023]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-6023](https://jira.spring.io/browse/SPR-6023?redirect=false)** and commented  sometimes we need wrap request for session management  using filter. currently spring use a listener org.springframework.web.context.request.RequestContextListener to listen create/destroy event,and capture request and set into RequestContextHolder,so the object in RequestContextHolder is original object create by the servlet container not my own wrapped object I hope spring provide a extension,so I can reuse ServletActionContext.getRequest()  in struts2   --- No further details from [SPR-6023](https://jira.spring.io/browse/SPR-6023?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-08-18T17:01:10Z","2012-06-19T09:36:14Z"
"","10019","Build failure with maven : can't find the parent module org.springframework.parent [SPR-5346]","**[Yang Gu](https://jira.spring.io/secure/ViewProfile.jspa?name=hyysguyang)** opened **[SPR-5346](https://jira.spring.io/browse/SPR-5346?redirect=false)** and commented  Can't find the parent module org.springframework.parent when build each module with maven2.  The scenario is described as below:  I check out the trunk of spring-framework 3.0 and walking all the pom.xml of each module,but I can't find the org.springframework.org.springframework.parent-3.0-M1-SNAPSHOT module which is defined in the pom.xml. e.g. Describes in the pom.xml of the org.springframework.core module is  \ \ \ 	    \org.springframework\ 	    \org.springframework.parent\ 	    \3.0-M1-SNAPSHOT\ \ 	\4.0.0\ 	\org.springframework.core\ 	\jar\ \Spring Framework: Core\ ......  Then I build the core module from the command line with maven and I got the failure information:  [INFO] Scanning for projects... Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/org/springframework/org.springframework.parent/3.0-M1-SNAPSHOT/org.springframework.parent-3.0-M1-SNAPSHOT.pom Downloading: http://people.apache.org/repo/m2-snapshot-repository//org/springframework/org.springframework.parent/3.0-M1-SNAPSHOT/org.springframework.parent-3.0-M1-SNAPSHOT.pom Downloading: http://snapshots.repository.codehaus.org/org/springframework/org.springframework.parent/3.0-M1-SNAPSHOT/org.springframework.parent-3.0-M1-SNAPSHOT.pom Downloading: http://snapshots.jboss.org/maven2/org/springframework/org.springframework.parent/3.0-M1-SNAPSHOT/org.springframework.parent-3.0-M1-SNAPSHOT.pom [INFO] ------------------------------------------------------------------------ [ERROR] FATAL ERROR [INFO] ------------------------------------------------------------------------ [INFO] Error building POM (may not be this project's POM).  Project ID: null:org.springframework.core:jar:null  Reason: Cannot find parent: org.springframework:org.springframework.parent for project: null:org.springframework.core:jar:null for project null:org.springframework.core:jar:null  [INFO] ------------------------------------------------------------------------ [INFO] Trace org.apache.maven.reactor.MavenExecutionException: Cannot find parent: org.springframework:org.springframework.parent for project: null:org.springframework.core:jar:null for project null:org.springframework.core:jar:null at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:378) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:292) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129) at org.apache.maven.cli.MavenCli.main(MavenCli.java:287) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315) at org.codehaus.classworlds.Launcher.launch(Launcher.java:255) at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430) at org.codehaus.classworlds.Launcher.main(Launcher.java:375) Caused by: org.apache.maven.project.ProjectBuildingException: Cannot find parent: org.springframework:org.springframework.parent for project: null:org.springframework.core:jar:null for project null:org.springframework.core:jar:null at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(DefaultMavenProjectBuilder.java:1370) at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:821) at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFileInternal(DefaultMavenProjectBuilder.java:506) at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java:198) at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:583) at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:461) at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:365) ... 11 more Caused by: org.apache.maven.project.ProjectBuildingException: POM 'org.springframework:org.springframework.parent' not found in repository: Unable to download the artifact from any repository  org.springframework:org.springframework.parent:pom:3.0-M1-SNAPSHOT  from the specified remote repositories: jboss.org (http://repository.jboss.org/maven2), codehaus.snapshots (http://snapshots.repository.codehaus.org), jboss-snapshot (http://snapshots.jboss.org/maven2), apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository/), jboss.com (http://repository.jboss.com/maven2), maven2.mirrors.ibiblio.org (http://mirrors.ibiblio.org/pub/mirrors/maven2), maven.central (http://repo1.maven.org/maven2), codehaus.central (http://repository.codehaus.org), central (http://repo1.maven.org/maven2) for project org.springframework:org.springframework.parent at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepository(DefaultMavenProjectBuilder.java:603) at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(DefaultMavenProjectBuilder.java:1366) ... 17 more Caused by: org.apache.maven.artifact.resolver.ArtifactNotFoundException: Unable to download the artifact from any repository  org.springframework:org.springframework.parent:pom:3.0-M1-SNAPSHOT  from the specified remote repositories: jboss.org (http://repository.jboss.org/maven2), codehaus.snapshots (http://snapshots.repository.codehaus.org), jboss-snapshot (http://snapshots.jboss.org/maven2), apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository/), jboss.com (http://repository.jboss.com/maven2), maven2.mirrors.ibiblio.org (http://mirrors.ibiblio.org/pub/mirrors/maven2), maven.central (http://repo1.maven.org/maven2), codehaus.central (http://repository.codehaus.org), central (http://repo1.maven.org/maven2)      at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:212)     at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:74)     at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepository(DefaultMavenProjectBuilder.java:556)     ... 18 more  Caused by: org.apache.maven.wagon.ResourceDoesNotExistException: Unable to download the artifact from any repository at org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:331) at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:200) ... 20 more [INFO] ------------------------------------------------------------------------ [INFO] Total time: 6 seconds [INFO] Finished at: Sun Dec 07 19:51:36 CST 2008 [INFO] Final Memory: 1M/254M [INFO] ------------------------------------------------------------------------  Obviously,this is because miss the parent module 'org.springframework.parent-3.0-M1-SNAPSHOT'. The parent module should be included in the source in the svn so that anyone can build successful from sources with maven.   ---  **Affects:** 3.0 M1, 3.0 M2  3 votes, 5 watchers","closed","in: core,","spring-projects-issues","2008-12-09T04:04:02Z","2019-01-12T05:33:53Z"
"","10193","Improvement to ConstructorResolver [SPR-5522]","**[Yan Pujante](https://jira.spring.io/secure/ViewProfile.jspa?name=frenchyan)** opened **[SPR-5522](https://jira.spring.io/browse/SPR-5522?redirect=false)** and commented  When an exception is thrown in ClassConstructor it bubles up the chain and is getting caught in a different class thus reporting the wrong bean being causing the problem. Here is how I 'fixed' it for now to see the real bean causing the problem:  // line 165+ // Take specified constructors, if any. // #YP modified // Constructor[] candidates = // (chosenCtors != null ? chosenCtors : mbd.getBeanClass().getDeclaredConstructors()); Constructor[] candidates; try { candidates = (chosenCtors != null ? chosenCtors : mbd.getBeanClass().getDeclaredConstructors()); } catch(NoClassDefFoundError e) { throw new RuntimeException(""NoClassDefFoundError for bean "" + beanName + "" while getting declared constructors of class "" + mbd.getBeanClassName() + "" using class loader "" + mbd.getBeanClass().getClassLoader(), e); }  It should be wrapped in an exception of some sort with a clear message showing which bean is causing the issue. It is even more problematic in OSGi where this kind of issue happens all the time.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/092de0107cd876d7f8207da7a9fc9ba163cfadfe","closed","type: enhancement,","spring-projects-issues","2009-02-23T22:36:34Z","2012-06-19T03:47:36Z"
"","10378","Cannot wrap JFrame for AOP [SPR-5708]","**[Wolfgang Wagner](https://jira.spring.io/secure/ViewProfile.jspa?name=wwagner4)** opened **[SPR-5708](https://jira.spring.io/browse/SPR-5708?redirect=false)** and commented  Hi. I do have to wrap a JFrame but get the following exception.  Exception in thread ""main"" java.lang.IllegalAccessError: class javax.swing.$Proxy0 cannot access its superinterface javax.swing.TransferHandler$HasGetTransferHandler at java.lang.reflect.Proxy.defineClass0(Native Method) at java.lang.reflect.Proxy.getProxyClass(Proxy.java:5 04) at java.lang.reflect.Proxy.newProxyInstance(Proxy.jav a:581) at org.springframework.aop.framework.JdkDynamicAopPro xy.getProxy(JdkDynamicAopProxy.java:117) at org.springframework.aop.framework.JdkDynamicAopPro xy.getProxy(JdkDynamicAopProxy.java:108) at org.springframework.aop.framework.ProxyFactory.get Proxy(ProxyFactory.java:97) at at.sozvers.Runner.main(Runner.java:20)  Here the code that caused the Error.  JFrame frame = new JFrame(); ProxyFactory proxyFactory = new ProxyFactory(frame); proxyFactory.getProxy();    ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=70859","closed","type: enhancement,","spring-projects-issues","2009-05-01T17:43:01Z","2010-12-01T22:43:21Z"
"","10500","Embedded derby got ClassNotFoundException because EmbeddedDatabaseFactory is hardcoded to HSQL in default constructor [SPR-5830]","**[Wirianto Djunaidi](https://jira.spring.io/secure/ViewProfile.jspa?name=wirianto)** opened **[SPR-5830](https://jira.spring.io/browse/SPR-5830?redirect=false)** and commented  EmbeddedDatabaseFactory constructor has hardcoded values for the configuration, so it will throw ClassNotFoundException when we do not have HSQL driver in classpath.   ---  **Affects:** 3.0 M3","closed","in: core,","spring-projects-issues","2009-06-16T16:01:20Z","2012-06-19T03:43:54Z"
"","10508","XstreamMarshaller does not support field aliasing [SPR-5838]","**[Winarto](https://jira.spring.io/secure/ViewProfile.jspa?name=winarto)** opened **[SPR-5838](https://jira.spring.io/browse/SPR-5838?redirect=false)** and commented  Spring-oxm-1.5.6 only support class aliasing. Is it possible to add field aliasing as well?  Example:  ``` public class Task {     private String previousOwner;      public void setPreviousOwner(String previousOwner) {         this.previousOwner = previousOwner;     }      public String getPreviousOwner() {         return this.previousOwner;     } } ```  With the current version of XstreamMarshaller, I could only achieve xml like this:  ```xml  ```  I need to convert attribute name previousOwner to prevOwner so it will become like this:  ```xml  ```  I know this feature is already supported by Xstream 1.3.1, hence I believe it's just a matter of adding get/set in XStreamMarshaller and call aliasField method in the actual xstream object.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c2e65baa702c38fdd0a45eb27f6fd354b1b006b1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-05-01T16:42:56Z","2012-06-19T03:43:18Z"
"","10075","NullPointerException in JmsException [SPR-5402]","**[Wim Deblauwe](https://jira.spring.io/secure/ViewProfile.jspa?name=wim.deblauwe)** opened **[SPR-5402](https://jira.spring.io/browse/SPR-5402?redirect=false)** and commented  I saw a NullPointerException in the logs of my tomcat (started using maven cargo):  ``` [INFO] [talledLocalContainer] java.lang.NullPointerException [INFO] [talledLocalContainer] 	at java.lang.String.indexOf(String.java:1734) [INFO] [talledLocalContainer] 	at java.lang.String.indexOf(String.java:1716) [INFO] [talledLocalContainer] 	at org.springframework.jms.JmsException.getMessage(JmsException.java:87) [INFO] [talledLocalContainer] 	at java.lang.Throwable.getLocalizedMessage(Throwable.java:267) [INFO] [talledLocalContainer] 	at java.lang.Throwable.toString(Throwable.java:343) [INFO] [talledLocalContainer] 	at java.lang.String.valueOf(String.java:2827) [INFO] [talledLocalContainer] 	at java.io.PrintWriter.println(PrintWriter.java:710) [INFO] [talledLocalContainer] 	at java.lang.Throwable.printStackTrace(Throwable.java:509) [INFO] [talledLocalContainer] 	at org.apache.log4j.spi.ThrowableInformation.getThrowableStrRep(ThrowableInformation.java:76) [INFO] [talledLocalContainer] 	at org.apache.log4j.spi.LoggingEvent.getThrowableStrRep(LoggingEvent.java:407) [INFO] [talledLocalContainer] 	at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:305) [INFO] [talledLocalContainer] 	at org.apache.log4j.WriterAppender.append(WriterAppender.java:160) [INFO] [talledLocalContainer] 	at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251) [INFO] [talledLocalContainer] 	at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66) [INFO] [talledLocalContainer] 	at org.apache.log4j.Category.callAppenders(Category.java:206) [INFO] [talledLocalContainer] 	at org.apache.log4j.Category.forcedLog(Category.java:391) [INFO] [talledLocalContainer] 	at org.apache.log4j.Category.error(Category.java:322) ```  The problem can be seen by looking at the code of JmsMessage.java:  ``` public String getMessage() {      String message = super.getMessage();      Throwable cause = getCause();      if (cause instanceof JMSException) {           Exception linkedEx = ((JMSException) cause).getLinkedException();           if (linkedEx != null && cause.getMessage().indexOf(linkedEx.getMessage()) == -1) {                message = message + ""; nested exception is "" + linkedEx;           }      }      return message; } ```  The line that does the `indexOf()` can give a NPE if `linkedEx.getMessage()` returns `null`  ---  **Affects:** 2.5.6  **Issue Links:** - #9948 JmsUtils.buildExceptionMessage throws NPE if the linked exception doesn't have a message (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2009-01-07T20:49:56Z","2019-01-12T16:50:33Z"
"","10658","p namespace isn't working on inner beans [SPR-5990]","**[Willie Wheeler](https://jira.spring.io/secure/ViewProfile.jspa?name=wwheeler)** opened **[SPR-5990](https://jira.spring.io/browse/SPR-5990?redirect=false)** and commented  Not sure if this is an issue with core or with Spring Integration, but I'm guessing core.  I'm using the Spring Integration namespace (SI 1.0.3) so I can use \, \ and such in the app context config.  Some of these elements allow inner beans and in particular \ does.  This works:           	     		     		     		     	       but this (my preference) does not:           	         ---  **Affects:** 2.5.6  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2009-08-09T08:17:57Z","2019-01-12T05:33:15Z"
"","10761","MVC Annotation Inheritance [SPR-6093]","**[William Ashley](https://jira.spring.io/secure/ViewProfile.jspa?name=washley)** opened **[SPR-6093](https://jira.spring.io/browse/SPR-6093?redirect=false)** and commented  I currently run a patched M4 build to work around problems with `@ExceptionHandler` methods (and `@ResponseStatus` on them) not functioning with overridden methods (in my case it's due to `@Transactional` CGlib proxies). While patching these issues, I also changed handling of some other annotations which were being queried using Method.getAnnotation/Method.isAnnotationPresent as opposed to AnnotationUtils.findAnnotation.  I have attached my patch as a starting point. I believe I found all instances where AnnotationUtils.findAnnotation was not being used and fixed them. However, I only updated the tests for AnnotationMethodHandlerExceptionResolver. I did not feel confident with the amount of time I had to update the tests for AnnotationMethodHandlerAdapter.  I think these changes are in line with a recent checkin (revision 1852) related to inheritance of JMX annotations (#8316 #9714 and #10483).  ---  **Affects:** 3.0 M4  **Attachments:** - [mvc-annotation-inheritance.patch](https://jira.spring.io/secure/attachment/15703/mvc-annotation-inheritance.patch) (_7.99 kB_)  **Issue Links:** - #10627 `@ExceptionHandler` on CGLib-proxied controller is ineffectual (_**""is duplicated by""**_) - #10604 `@Controller` marked class cannot implements Comparator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04fa5d4b99989d96a478fd788b0e821aba9f32d6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-09T05:23:10Z","2019-01-13T07:58:32Z"
"","10677","@ExceptionHandler methods are still expected to return a ModelAndView, even when consuming a ServletResponse/OutputStream/Writer [SPR-6009]","**[William Ashley](https://jira.spring.io/secure/ViewProfile.jspa?name=washley)** opened **[SPR-6009](https://jira.spring.io/browse/SPR-6009?redirect=false)** and commented  `@RequestMapping` handlers are considered to have written the response themselves if they take a ServletResponse/OutputStream/Writer argument. This isn't the case with `@ExceptionHandler` methods.  Controller:  ``` package com.test;  import java.io.PrintWriter;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RequestMapping;  @Controller public class Test { 	@ExceptionHandler 	public void exception( Throwable t, PrintWriter out ) 	{ 		out.println( ""Oops"" ); //		out.close(); 	} 	 	@RequestMapping( ""/busted"" ) 	public void get( PrintWriter out ) 	{ 		throw new RuntimeException( ""foo"" ); 	} 	 	@RequestMapping( ""/works"" ) 	public void works( PrintWriter out ) 	{ 		out.println( ""Works!"" ); 	} } ```  Works correctly with a `@RequestMapping`  ``` $ curl -i ""http://localhost/test/works"" HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Length: 8 Date: Fri, 14 Aug 2009 19:51:11 GMT  Works! ```  But does not with an `@ExceptionHandler`  ``` $ curl -i ""http://localhost/test/busted"" HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Length: 2940 Date: Fri, 14 Aug 2009 19:52:03 GMT Connection: close  Apache Tomcat/6.0.18 - Error report HTTP Status 500 - type Exception reportmessage description The server encountered an internal error () that prevented it from fulfilling this request.exception org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.RuntimeException: foo         org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:625)         org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:525)         javax.servlet.http.HttpServlet.service(HttpServlet.java:617)         javax.servlet.http.HttpServlet.service(HttpServlet.java:717) root cause java.lang.RuntimeException: foo         com.test.Test.get(Test.java:22)         sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)         sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)         java.lang.reflect.Method.invoke(Method.java:597)         org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doInvokeMethod(HandlerMethodInvoker.java:626)         org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:150)         org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:354)         org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:342)         org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:763)         org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:709)         org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:613)         org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:525)         javax.servlet.http.HttpServlet.service(HttpServlet.java:617)         javax.servlet.http.HttpServlet.service(HttpServlet.java:717) note The full stack trace of the root cause is available in the Apache Tomcat/6.0.18 logs.Apache Tomcat/6.0.18 ```  Note: If you uncomment the out.close() on the exception handler, the correct response is written only because the container is no longer able to reset the response and do whatever it normally does for uncaught exceptions (The exception is still thrown in the same manner and logged by the container).    ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d7d3cff1b4de85ca08977676fa3601b5ee588fe","closed","type: bug,","spring-projects-issues","2009-08-14T06:53:22Z","2012-06-19T03:42:54Z"
"","10676","@ResponseStatus on @ExceptionHandler method is ignored [SPR-6008]","**[William Ashley](https://jira.spring.io/secure/ViewProfile.jspa?name=washley)** opened **[SPR-6008](https://jira.spring.io/browse/SPR-6008?redirect=false)** and commented  `@ResponseStatus` annotations have no effect when used on `@ExceptionHandler` methods  Controller:  ``` package com.test;  import java.io.PrintWriter;  import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.ModelAndView;  @Controller public class Test { 	@ExceptionHandler 	@ResponseStatus( value=HttpStatus.NOT_ACCEPTABLE ) 	public ModelAndView exception( Throwable t, PrintWriter out ) 	{ 		out.println( ""Should be a 406"" ); 		return new ModelAndView(); 	} 	 	@RequestMapping( ""/busted"" ) 	public void get( PrintWriter out ) 	{ 		throw new RuntimeException( ""foo"" ); 	} 	 	@RequestMapping( ""/works"" ) 	@ResponseStatus( value=HttpStatus.ACCEPTED ) 	public void works( PrintWriter out ) 	{ 		out.println( ""Should be a 202"" ); 	} } ```  Note: I am returning an empty ModelAndView to work around another issue that I will open next.  Everything is fine on the `@RequestMapping`  ``` $ curl -i ""http://localhost/test/works"" HTTP/1.1 202 Accepted Server: Apache-Coyote/1.1 Content-Length: 17 Date: Fri, 14 Aug 2009 19:27:11 GMT  Should be a 202 ```  But not so on the `@ExceptionHandler`  ``` $ curl -i ""http://localhost/test/busted"" HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Length: 17 Date: Fri, 14 Aug 2009 19:27:16 GMT  Should be a 406 ```  ---  **Affects:** 3.0 M3  **Issue Links:** - #11626 `@ResponseStatus` does not work with `@ExceptionHandler` (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3b7691d52521992081b888cba003699532b3481f","closed","type: bug,","spring-projects-issues","2009-08-14T06:42:10Z","2019-01-13T07:58:50Z"
"","10675","@ResponseStatus on @ExceptionHandler method is ignored [SPR-6007]","**[William Ashley](https://jira.spring.io/secure/ViewProfile.jspa?name=washley)** opened **[SPR-6007](https://jira.spring.io/browse/SPR-6007?redirect=false)** and commented  Here is a condensed example of the problem I'm encountering:  Controller:  ``` package com.test;  import java.io.PrintWriter;  import org.springframework.stereotype.Controller; import org.springframework.transaction.annotation.Transactional; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RequestMapping;  @Controller @Transactional( readOnly=true ) public class Test { 	@ExceptionHandler 	public void exception( Throwable t ) 	{ 		System.out.println( ""In exception handler"" ); 	} 	 	@RequestMapping( ""/"" ) 	public void get() 	{ 		throw new RuntimeException( ""foo"" ); 	} } ```  Dispatcher servlet config:  ```   	 	 	 	 	 	  ```  web.xml  ```   	 	 		action 		org.springframework.web.servlet.DispatcherServlet 		1 	 	 		action 		/* 	 	  ```  The exception handler is never invoked when the controller is proxied by CGLib (removing `@Transactional` removes the proxy and restores the exception handler). A little digging led me to org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver  where there is this iteration over methods of the controller  ``` 		ReflectionUtils.doWithMethods(handlerType, new ReflectionUtils.MethodCallback() { 			public void doWith(Method method) { 				method = ClassUtils.getMostSpecificMethod(method, handlerType); [snip] 			} 		}); ```  which does arrive eventually at the proper exception handler method of my controller class, but because of the call to ClassUtils.getMostSpecificMethod() it winds up back at the overridden method on the CGLib-generated class (which from what I noticed it had already visited). I haven't researched enough to say this is the problem though.  `@RequestMapping` annotations appear to work normally through a proxied controller (and the `@Transactional` annotation does function correctly), so I'm hoping this can be fixed.   ---  **Affects:** 3.0 M3","closed","in: web,","spring-projects-issues","2009-08-14T06:32:31Z","2019-01-12T16:50:17Z"
"","10627","@ExceptionHandler on CGLib-proxied controller is ineffectual [SPR-5959]","**[William Ashley](https://jira.spring.io/secure/ViewProfile.jspa?name=washley)** opened **[SPR-5959](https://jira.spring.io/browse/SPR-5959?redirect=false)** and commented  Here is a condensed example of the problem I'm encountering:  Controller:  ``` package com.test;  import java.io.PrintWriter;  import org.springframework.stereotype.Controller; import org.springframework.transaction.annotation.Transactional; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RequestMapping;  @Controller @Transactional( readOnly=true ) public class Test { 	@ExceptionHandler 	public void exception( Throwable t ) 	{ 		System.out.println( ""In exception handler"" ); 	} 	 	@RequestMapping( ""/"" ) 	public void get() 	{ 		throw new RuntimeException( ""foo"" ); 	} } ```  Dispatcher servlet config:  ```   	 	 	 	 	 	  ```  web.xml  ```   	 	 		action 		org.springframework.web.servlet.DispatcherServlet 		1 	 	 		action 		/* 	 	  ```  The exception handler is never invoked when the controller is proxied by CGLib (removing `@Transactional` removes the proxy and restores the exception handler). A little digging led me to org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver  where there is this iteration over methods of the controller  ``` 		ReflectionUtils.doWithMethods(handlerType, new ReflectionUtils.MethodCallback() { 			public void doWith(Method method) { 				method = ClassUtils.getMostSpecificMethod(method, handlerType); [snip] 			} 		}); ```  which does arrive eventually at the proper exception handler method of my controller class, but because of the call to ClassUtils.getMostSpecificMethod() it winds up back at the overridden method on the CGLib-generated class (which from what I noticed it had already visited). I haven't researched enough to say this is the problem though.  `@RequestMapping` annotations appear to work normally through a proxied controller (and the `@Transactional` annotation does function correctly), so I'm hoping this can be fixed.  ---  **Affects:** 3.0 M3  **Issue Links:** - #10761 MVC Annotation Inheritance (_**""duplicates""**_) - #11996 `@ExceptionHandler` doesn't work on CGLib-proxied controller in Portlet MVC  1 votes, 2 watchers","closed","in: web,","spring-projects-issues","2009-07-27T09:42:38Z","2019-01-13T07:59:00Z"
"","10246","AntPathMatcher.extractPathWithinPattern() does not work correct for multi directory matches [SPR-5575]","**[wh](https://jira.spring.io/secure/ViewProfile.jspa?name=wh1337)** opened **[SPR-5575](https://jira.spring.io/browse/SPR-5575?redirect=false)** and commented  Matching ""/ab/ac/example.html"" with ""/**/example.html"" results in ""ab/example.html"", but I would expect ""ab/ac/"".   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-03-16T12:09:03Z","2019-01-12T05:33:38Z"
"","10135","PermGen leak in GenericTypeResolver's typeVariableCache [SPR-5462]","**[Wesley Hartford](https://jira.spring.io/secure/ViewProfile.jspa?name=cutterslade)** opened **[SPR-5462](https://jira.spring.io/browse/SPR-5462?redirect=false)** and commented  I have a class `SimpleXPathQueryCriteriaQueryGenerator extends AbstractSimpleCriteriaQueryGenerator implements XPathQueryCriteriaQueryGenerator`.  All four of these classes are loaded by the same `URLClassLoader`, which should be discarded at some point, all of spring is loaded by the parent `ClassLoader`, which stays around for a long time.  As far as I can tell, the `org.springframework.core.GenericTypeResolver` keeps a static `WeakHashMap` containing the `SimpleXPathQueryCriteriaQueryGenerator` as the key, and the `XPathQuery` contained in a map withing the value.  The `XPathQuery` in the value results in a hard reference path back to the key of the `WeakHashMap`.   ---  **Affects:** 2.5.5","closed","type: bug,","spring-projects-issues","2009-02-04T02:42:29Z","2012-06-19T03:47:10Z"
"","10615","Spring documentation should include section for Netbeans IDE. [SPR-5946]","**[Vyas Sanzgiri](https://jira.spring.io/secure/ViewProfile.jspa?name=ejvyas)** opened **[SPR-5946](https://jira.spring.io/browse/SPR-5946?redirect=false)** and commented  Netbeans IDE is very popular and widely used. It also has good Spring support. There should be a section for Netbeans in this documentation : http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/apas03.html   --- No further details from [SPR-5946](https://jira.spring.io/browse/SPR-5946?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-07-21T01:12:17Z","2012-06-19T09:36:19Z"
"","10291","Problem with integrating Spring MVC 3.0.0 M2 and Spring Web Flow 2.0.6 on a Portlet 2.0 container [SPR-5620]","**[Vladimir Y. Sheyko](https://jira.spring.io/secure/ViewProfile.jspa?name=kapitonuch)** opened **[SPR-5620](https://jira.spring.io/browse/SPR-5620?redirect=false)** and commented  When portlet renders I have an exception below. Will it be corrected in Web Flow 3.0.0M1?  ``` 2009-03-26 17:12:07,366 ERROR [org.springframework.web.portlet.DispatcherPortlet] -  javax.portlet.PortletException: Error occured during request processing: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V 	at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:783) 	at org.springframework.web.portlet.FrameworkPortlet.processRequest(FrameworkPortlet.java:517) 	at org.springframework.web.portlet.FrameworkPortlet.doDispatch(FrameworkPortlet.java:468) 	at javax.portlet.GenericPortlet.render(GenericPortlet.java:233) 	at com.sun.portal.portletcontainer.appengine.filter.FilterChainImpl.doFilter(FilterChainImpl.java:126) 	at com.liferay.portal.kernel.portlet.PortletFilterUtil.doFilter(PortletFilterUtil.java:69) 	at com.liferay.portal.kernel.servlet.PortletServlet.service(PortletServlet.java:100) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portlet.InvokerPortletImpl.invoke(InvokerPortletImpl.java:616) 	at com.liferay.portlet.InvokerPortletImpl.invokeRender(InvokerPortletImpl.java:698) 	at com.liferay.portlet.InvokerPortletImpl.render(InvokerPortletImpl.java:417) 	at org.apache.jsp.html.portal.render_005fportlet_jsp._jspService(render_005fportlet_jsp.java:1414) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portal.util.PortalImpl.renderPortlet(PortalImpl.java:2839) 	at com.liferay.portal.util.PortalImpl.renderPortlet(PortalImpl.java:2761) 	at com.liferay.portal.util.PortalUtil.renderPortlet(PortalUtil.java:846) 	at com.liferay.portal.action.RenderPortletAction.execute(RenderPortletAction.java:96) 	at com.liferay.portal.action.UpdateLayoutAction.addPortlet(UpdateLayoutAction.java:260) 	at com.liferay.portal.action.UpdateLayoutAction.execute(UpdateLayoutAction.java:211) 	at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:431) 	at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:236) 	at com.liferay.portal.struts.PortalRequestProcessor.process(PortalRequestProcessor.java:159) 	at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1196) 	at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:432) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) 	at com.liferay.portal.servlet.MainServlet.callParentService(MainServlet.java:505) 	at com.liferay.portal.servlet.MainServlet.service(MainServlet.java:732) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.strip.StripFilter.processFilter(StripFilter.java:142) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.gzip.GZipFilter.processFilter(GZipFilter.java:140) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.secure.SecureFilter.processFilter(SecureFilter.java:282) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.sharepoint.SharepointFilter.processFilter(SharepointFilter.java:193) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.virtualhost.VirtualHostFilter.doFilter(VirtualHostFilter.java:188) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:94) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:738) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:433) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845) 	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) 	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) 	at java.lang.Thread.run(Unknown Source) Caused by: java.lang.NoSuchMethodError: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V 	at org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.handleRender(FlowHandlerAdapter.java:117) 	at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:742) 	... 86 more 17:12:07,366 ERROR [PortletServlet:104] javax.portlet.PortletException: Error occured during request processing: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V javax.portlet.PortletException: Error occured during request processing: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V 	at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:783) 	at org.springframework.web.portlet.FrameworkPortlet.processRequest(FrameworkPortlet.java:517) 	at org.springframework.web.portlet.FrameworkPortlet.doDispatch(FrameworkPortlet.java:468) 	at javax.portlet.GenericPortlet.render(GenericPortlet.java:233) 	at com.sun.portal.portletcontainer.appengine.filter.FilterChainImpl.doFilter(FilterChainImpl.java:126) 	at com.liferay.portal.kernel.portlet.PortletFilterUtil.doFilter(PortletFilterUtil.java:69) 	at com.liferay.portal.kernel.servlet.PortletServlet.service(PortletServlet.java:100) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portlet.InvokerPortletImpl.invoke(InvokerPortletImpl.java:616) 	at com.liferay.portlet.InvokerPortletImpl.invokeRender(InvokerPortletImpl.java:698) 	at com.liferay.portlet.InvokerPortletImpl.render(InvokerPortletImpl.java:417) 	at org.apache.jsp.html.portal.render_005fportlet_jsp._jspService(render_005fportlet_jsp.java:1414) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portal.util.PortalImpl.renderPortlet(PortalImpl.java:2839) 	at com.liferay.portal.util.PortalImpl.renderPortlet(PortalImpl.java:2761) 	at com.liferay.portal.util.PortalUtil.renderPortlet(PortalUtil.java:846) 	at com.liferay.portal.action.RenderPortletAction.execute(RenderPortletAction.java:96) 	at com.liferay.portal.action.UpdateLayoutAction.addPortlet(UpdateLayoutAction.java:260) 	at com.liferay.portal.action.UpdateLayoutAction.execute(UpdateLayoutAction.java:211) 	at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:431) 	at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:236) 	at com.liferay.portal.struts.PortalRequestProcessor.process(PortalRequestProcessor.java:159) 	at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1196) 	at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:432) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) 	at com.liferay.portal.servlet.MainServlet.callParentService(MainServlet.java:505) 	at com.liferay.portal.servlet.MainServlet.service(MainServlet.java:732) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.strip.StripFilter.processFilter(StripFilter.java:142) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.gzip.GZipFilter.processFilter(GZipFilter.java:140) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.secure.SecureFilter.processFilter(SecureFilter.java:282) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.sharepoint.SharepointFilter.processFilter(SharepointFilter.java:193) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.virtualhost.VirtualHostFilter.doFilter(VirtualHostFilter.java:188) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:94) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:738) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:433) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845) 	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) 	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) 	at java.lang.Thread.run(Unknown Source) Caused by: java.lang.NoSuchMethodError: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V 	at org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.handleRender(FlowHandlerAdapter.java:117) 	at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:742) 	... 86 more 17:12:07,382 ERROR [jsp:165] java.lang.NoSuchMethodError: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V 	at javax.portlet.GenericPortlet.render(GenericPortlet.java:233) 	at com.sun.portal.portletcontainer.appengine.filter.FilterChainImpl.doFilter(FilterChainImpl.java:126) 	at com.liferay.portal.kernel.portlet.PortletFilterUtil.doFilter(PortletFilterUtil.java:69) 	at com.liferay.portal.kernel.servlet.PortletServlet.service(PortletServlet.java:100) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portlet.InvokerPortletImpl.invoke(InvokerPortletImpl.java:616) 	at com.liferay.portlet.InvokerPortletImpl.invokeRender(InvokerPortletImpl.java:698) 	at com.liferay.portlet.InvokerPortletImpl.render(InvokerPortletImpl.java:417) 	at org.apache.jsp.html.portal.render_005fportlet_jsp._jspService(render_005fportlet_jsp.java:1414) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)  2009-03-26 17:12:07,554 DEBUG [org.springframework.web.portlet.DispatcherPortlet] -  2009-03-26 17:12:07,554 DEBUG [org.springframework.web.portlet.DispatcherPortlet] -  2009-03-26 17:12:07,554 DEBUG [org.springframework.web.portlet.handler.PortletModeHandlerMapping] -  handler [com.rosnedra.rndr.ViewFlowHandler@1342445]> 2009-03-26 17:12:07,554 DEBUG [org.springframework.web.portlet.DispatcherPortlet] -  2009-03-26 17:12:07,554 ERROR [org.springframework.web.portlet.DispatcherPortlet] -  javax.portlet.PortletException: Error occured during request processing: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V 	at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:783) 	at org.springframework.web.portlet.FrameworkPortlet.processRequest(FrameworkPortlet.java:517) 	at org.springframework.web.portlet.FrameworkPortlet.doDispatch(FrameworkPortlet.java:468) 	at javax.portlet.GenericPortlet.render(GenericPortlet.java:233) 	at com.sun.portal.portletcontainer.appengine.filter.FilterChainImpl.doFilter(FilterChainImpl.java:126) 	at com.liferay.portal.kernel.portlet.PortletFilterUtil.doFilter(PortletFilterUtil.java:69) 	at com.liferay.portal.kernel.servlet.PortletServlet.service(PortletServlet.java:100) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portlet.InvokerPortletImpl.invoke(InvokerPortletImpl.java:616) 	at com.liferay.portlet.InvokerPortletImpl.invokeRender(InvokerPortletImpl.java:698) 	at com.liferay.portlet.InvokerPortletImpl.render(InvokerPortletImpl.java:417) 	at org.apache.jsp.html.portal.render_005fportlet_jsp._jspService(render_005fportlet_jsp.java:1414) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portal.util.PortalImpl.renderPortlet(PortalImpl.java:2801) 	at com.liferay.portal.util.PortalUtil.renderPortlet(PortalUtil.java:858) 	at com.liferay.portlet.layoutconfiguration.util.RuntimePortletUtil.processPortlet(RuntimePortletUtil.java:170) 	at com.liferay.portlet.layoutconfiguration.util.RuntimePortletUtil.processPortlet(RuntimePortletUtil.java:103) 	at com.liferay.portlet.layoutconfiguration.util.RuntimePortletUtil.processTemplate(RuntimePortletUtil.java:281) 	at com.liferay.portlet.layoutconfiguration.util.RuntimePortletUtil.processTemplate(RuntimePortletUtil.java:190) 	at org.apache.jsp.html.portal.layout.view.portlet_jsp._jspService(portlet_jsp.java:824) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portal.action.LayoutAction.includeLayoutContent(LayoutAction.java:294) 	at com.liferay.portal.action.LayoutAction.processLayout(LayoutAction.java:466) 	at com.liferay.portal.action.LayoutAction.execute(LayoutAction.java:195) 	at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:431) 	at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:236) 	at com.liferay.portal.struts.PortalRequestProcessor.process(PortalRequestProcessor.java:159) 	at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1196) 	at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:414) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	at com.liferay.portal.servlet.MainServlet.callParentService(MainServlet.java:505) 	at com.liferay.portal.servlet.MainServlet.service(MainServlet.java:732) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:436) 	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:374) 	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:302) 	at com.liferay.portal.servlet.FriendlyURLServlet.service(FriendlyURLServlet.java:143) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.strip.StripFilter.processFilter(StripFilter.java:142) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.gzip.GZipFilter.processFilter(GZipFilter.java:140) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.secure.SecureFilter.processFilter(SecureFilter.java:282) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:94) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.cache.CacheFilter.processFilter(CacheFilter.java:417) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.autologin.AutoLoginFilter.processFilter(AutoLoginFilter.java:244) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.sso.opensso.OpenSSOFilter.processFilter(OpenSSOFilter.java:73) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.sharepoint.SharepointFilter.processFilter(SharepointFilter.java:193) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.virtualhost.VirtualHostFilter.doFilter(VirtualHostFilter.java:188) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:94) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:738) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:433) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845) 	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) 	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) 	at java.lang.Thread.run(Unknown Source) Caused by: java.lang.NoSuchMethodError: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V 	at org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.handleRender(FlowHandlerAdapter.java:117) 	at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:742) 	... 128 more 17:12:07,554 ERROR [PortletServlet:104] javax.portlet.PortletException: Error occured during request processing: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V javax.portlet.PortletException: Error occured during request processing: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V 	at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:783) 	at org.springframework.web.portlet.FrameworkPortlet.processRequest(FrameworkPortlet.java:517) 	at org.springframework.web.portlet.FrameworkPortlet.doDispatch(FrameworkPortlet.java:468) 	at javax.portlet.GenericPortlet.render(GenericPortlet.java:233) 	at com.sun.portal.portletcontainer.appengine.filter.FilterChainImpl.doFilter(FilterChainImpl.java:126) 	at com.liferay.portal.kernel.portlet.PortletFilterUtil.doFilter(PortletFilterUtil.java:69) 	at com.liferay.portal.kernel.servlet.PortletServlet.service(PortletServlet.java:100) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portlet.InvokerPortletImpl.invoke(InvokerPortletImpl.java:616) 	at com.liferay.portlet.InvokerPortletImpl.invokeRender(InvokerPortletImpl.java:698) 	at com.liferay.portlet.InvokerPortletImpl.render(InvokerPortletImpl.java:417) 	at org.apache.jsp.html.portal.render_005fportlet_jsp._jspService(render_005fportlet_jsp.java:1414) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portal.util.PortalImpl.renderPortlet(PortalImpl.java:2801) 	at com.liferay.portal.util.PortalUtil.renderPortlet(PortalUtil.java:858) 	at com.liferay.portlet.layoutconfiguration.util.RuntimePortletUtil.processPortlet(RuntimePortletUtil.java:170) 	at com.liferay.portlet.layoutconfiguration.util.RuntimePortletUtil.processPortlet(RuntimePortletUtil.java:103) 	at com.liferay.portlet.layoutconfiguration.util.RuntimePortletUtil.processTemplate(RuntimePortletUtil.java:281) 	at com.liferay.portlet.layoutconfiguration.util.RuntimePortletUtil.processTemplate(RuntimePortletUtil.java:190) 	at org.apache.jsp.html.portal.layout.view.portlet_jsp._jspService(portlet_jsp.java:824) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portal.action.LayoutAction.includeLayoutContent(LayoutAction.java:294) 	at com.liferay.portal.action.LayoutAction.processLayout(LayoutAction.java:466) 	at com.liferay.portal.action.LayoutAction.execute(LayoutAction.java:195) 	at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:431) 	at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:236) 	at com.liferay.portal.struts.PortalRequestProcessor.process(PortalRequestProcessor.java:159) 	at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1196) 	at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:414) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	at com.liferay.portal.servlet.MainServlet.callParentService(MainServlet.java:505) 	at com.liferay.portal.servlet.MainServlet.service(MainServlet.java:732) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:436) 	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:374) 	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:302) 	at com.liferay.portal.servlet.FriendlyURLServlet.service(FriendlyURLServlet.java:143) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.strip.StripFilter.processFilter(StripFilter.java:142) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.gzip.GZipFilter.processFilter(GZipFilter.java:140) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.secure.SecureFilter.processFilter(SecureFilter.java:282) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:94) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.cache.CacheFilter.processFilter(CacheFilter.java:417) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.autologin.AutoLoginFilter.processFilter(AutoLoginFilter.java:244) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.sso.opensso.OpenSSOFilter.processFilter(OpenSSOFilter.java:73) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.sharepoint.SharepointFilter.processFilter(SharepointFilter.java:193) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.servlet.filters.virtualhost.VirtualHostFilter.doFilter(VirtualHostFilter.java:188) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.liferay.portal.kernel.servlet.BaseFilter.processFilter(BaseFilter.java:154) 	at com.liferay.portal.kernel.servlet.BaseFilter.doFilter(BaseFilter.java:94) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:738) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:433) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845) 	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) 	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) 	at java.lang.Thread.run(Unknown Source) Caused by: java.lang.NoSuchMethodError: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V 	at org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.handleRender(FlowHandlerAdapter.java:117) 	at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:742) 	... 128 more 17:12:07,569 ERROR [jsp:165] java.lang.NoSuchMethodError: org.springframework.webflow.mvc.portlet.FlowHandlerAdapter.checkAndPrepare(Ljavax/portlet/RenderRequest;Ljavax/portlet/RenderResponse;)V 	at javax.portlet.GenericPortlet.render(GenericPortlet.java:233) 	at com.sun.portal.portletcontainer.appengine.filter.FilterChainImpl.doFilter(FilterChainImpl.java:126) 	at com.liferay.portal.kernel.portlet.PortletFilterUtil.doFilter(PortletFilterUtil.java:69) 	at com.liferay.portal.kernel.servlet.PortletServlet.service(PortletServlet.java:100) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:630) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:535) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:472) 	at com.liferay.portlet.InvokerPortletImpl.invoke(InvokerPortletImpl.java:616) 	at com.liferay.portlet.InvokerPortletImpl.invokeRender(InvokerPortletImpl.java:698) 	at com.liferay.portlet.InvokerPortletImpl.render(InvokerPortletImpl.java:417) 	at org.apache.jsp.html.portal.render_005fportlet_jsp._jspService(render_005fportlet_jsp.java:1414) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) ```    ---  **Affects:** 3.0 M2  7 votes, 7 watchers","closed","status: invalid,","spring-projects-issues","2009-03-26T04:04:54Z","2019-01-12T05:33:35Z"
"","10780","@Autowired methods and inheritance [SPR-6112]","**[Vladimir Piskarev](https://jira.spring.io/secure/ViewProfile.jspa?name=pisv)** opened **[SPR-6112](https://jira.spring.io/browse/SPR-6112?redirect=false)** and commented  Let's assume a class B extends a class A. Further, the class A declares a method m() annotated with `@Autowired` and the class B overrides the method m(), but declares it with no `@Autowired` annotation. Then, the method m() should not be called for dependency injection. And it won't be called, but only if the method B.m()  is declared as public. Otherwise, the current Spring implementation will call it.  The source of the bug is the ClassUtils.getMostSpecificMethod implementation which can handle correctly only public methods. It gets called from AutowireAnnotationBeanPostProcessor.findAutowiringMetadata.   ---  **Affects:** 2.5.6, 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fd81aa205d88f62c82a86b4537556bbbf7fc24f5","closed","in: core,","spring-projects-issues","2009-09-14T23:06:02Z","2012-06-19T03:42:53Z"
"","10560","Ability to control context start up order for context:component-scan and tx:annotation-driven as they relate to other BeanFactoryPostProcessor that implement Ordered interface [SPR-5891]","**[Vlad](https://jira.spring.io/secure/ViewProfile.jspa?name=vgomelsk)** opened **[SPR-5891](https://jira.spring.io/browse/SPR-5891?redirect=false)** and commented  I would like to be able to set ""order"" property for  and for  which would be treated the same way as Ordered interface for BeanFactoryPostProcessor implementations.  Note, for  it's different than current order property for determining the order of aspects.  Use case: I have a custom BeanFactoryPostProcessor that registers many DAO bean definitions (same impl class).  I also have another BeanFactoryPostProcessor that registers services as observers for some DAO instances.  The order of loading is very important: first need to apply transactional aspects, then register dao definitions, then scan for services, then register observers, etc.  I'm sure there are many other cases when one would want to control the order of custom factory post processors as it relates to component scans or transactional advices.   --- No further details from [SPR-5891](https://jira.spring.io/browse/SPR-5891?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-07-02T09:14:40Z","2012-06-19T09:36:28Z"
"","10567","AnnotationBeanNameGenerator doesn't follow bean name convention [SPR-5898]","**[Vitaliy Morarian](https://jira.spring.io/secure/ViewProfile.jspa?name=vmorarian)** opened **[SPR-5898](https://jira.spring.io/browse/SPR-5898?redirect=false)** and commented  According to bean name convention, and javadoc of AnnotationBeanNameGenerator name of the bean has to start with lower case. But, ""protected String buildDefaultBeanName(BeanDefinition definition)"" uses ""Introspector.decapitalize"". But, as mentioned in javadoc of Introspector.decapitalize, exists unusual cases, when class starts with more than characters in upper level. As result, bean name starts with upper case.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-07-06T00:49:43Z","2012-06-18T12:44:36Z"
"","10523","Method lookup facility doesn't work properly with scope defined in parent bean [SPR-5854]","**[Vitaliy Morarian](https://jira.spring.io/secure/ViewProfile.jspa?name=vmorarian)** opened **[SPR-5854](https://jira.spring.io/browse/SPR-5854?redirect=false)** and commented  I have an abstract bean which used as a template. This bean has scope=prototype. Children declarations are real beans which are injected (as method lookup). The problem is, that this  scope=prototype is ignore (beans are created only once). Found solution -- declare scope=prototype for each 'real' bean.  ``` 	 		 		 		 		 		 		 		 		 		 		 		 		 	            	 		 		 		 		 			 				 					 						classpath:/fonts/ 						classpath:/com/uwiss/hr/report/ 					 				 				 			 		 	                  	 		 		 	  ```  ---  **Affects:** 2.5.6  **Issue Links:** - #8225 scope (& similar attributes) on abstract beans should be inherited in child beans, or not permitted (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2009-06-22T01:24:06Z","2019-01-12T16:50:21Z"
"","10322","Add Client Certificate support (Mutual Authentication) for HttpInvoker client... [SPR-5651]","**[Viral Patel](https://jira.spring.io/secure/ViewProfile.jspa?name=viralpatel79)** opened **[SPR-5651](https://jira.spring.io/browse/SPR-5651?redirect=false)** and commented  I have extended couple of classes like ""HttpInvokerProxyFactoryBean"" and ""CommonsHttpInvokerRequestExecutor"" to add the support for Mutual Authentication for HttpInvoker client.  This functionality adds following features to HttpInvoker's client side beans.  1) It lets HttpInvoker's client side beans to supply Client Certificate to  Server side HttpInvoker Bean  is implemented ..for Mutual Authentication ( X509 - p12 file or JKS keystore). (Requires jre 1.6 for .p12 support) 2) It allows client to specify JKS Trust Store to validate server certificate on client side.( JKS Trust store for client). 3) It also allows client to by pass server certificate validation. (If someone does not want to make authentication much complicated. Not recommanded).  No changes needed for HttpInvoker's server side code since app server (or web server like tomcat) can be setup to use SSL with Mutual Authentication.  I would like to contribute this code to the spring distribution. I am not sure why this support is not present in Http remoting  distribution at present ...but, If  this feature is something that is not required or apropriate to go with Spring distribution ..I am completely fine with it.  :)  If this seems like a good feature to have..please let me know how / where can I submit my work.  Thanks, Viral   ---  **Affects:** 2.5.6  4 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-04T19:44:54Z","2012-06-19T09:36:13Z"
"","10685","JaxWsPortProxyFactoryBean doesn't seem to work under Java 5 without running apt [SPR-6016]","**[Vinny Carpenter](https://jira.spring.io/secure/ViewProfile.jspa?name=vscarpenter)** opened **[SPR-6016](https://jira.spring.io/browse/SPR-6016?redirect=false)** and commented  Hi there.  I am using JaxWsPortProxyFactoryBean  from Spring 2.5.6.SEC01 and connecting to a JAX-WS web service that is deployed under WebLogic 10.3.  If I create a Spring bean using JaxWsPortProxyFactoryBean under JDK 1.6, then I am able to create the proxy to the web service and consume the service.  When I try to do the same thing using Java 1.5, I get the following error:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tradingService' defined in URL [file:/C:/APLP-Java/APLP-SpringWSWLS9/web/WEB-INF/applicationContext.xml]: Invocation of init method failed; nested exception is com.sun.xml.ws.model.RuntimeModelerException: runtime modeler error: Wrapper class com.vinny.trading.common.jaxws.GetAllocations is not found. Have you run APT to generate them? 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1338) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) 	at java.security.AccessController.doPrivileged(Native Method) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:423) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380) 	at org.springframework.test.AbstractSingleSpringContextTests.createApplicationContext(AbstractSingleSpringContextTests.java:213) 	at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:189) 	at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:169) 	at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:140) 	at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:98) 	at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90) Caused by: com.sun.xml.ws.model.RuntimeModelerException: runtime modeler error: Wrapper class com.vinny.trading.common.jaxws.GetAllocations is not found. Have you run APT to generate them? 	at com.sun.xml.ws.model.RuntimeModeler.getClass(RuntimeModeler.java:249) 	at com.sun.xml.ws.model.RuntimeModeler.processDocWrappedMethod(RuntimeModeler.java:545) 	at com.sun.xml.ws.model.RuntimeModeler.processMethod(RuntimeModeler.java:492) 	at com.sun.xml.ws.model.RuntimeModeler.processClass(RuntimeModeler.java:334) 	at com.sun.xml.ws.model.RuntimeModeler.buildRuntimeModel(RuntimeModeler.java:220) 	at com.sun.xml.ws.client.WSServiceDelegate.addSEI(WSServiceDelegate.java:588) 	at com.sun.xml.ws.client.WSServiceDelegate.getPort(WSServiceDelegate.java:291) 	at com.sun.xml.ws.client.WSServiceDelegate.getPort(WSServiceDelegate.java:274) 	at com.sun.xml.ws.client.WSServiceDelegate.getPort(WSServiceDelegate.java:267) 	at javax.xml.ws.Service.getPort(Service.java:92) 	at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.prepare(JaxWsPortClientInterceptor.java:291) 	at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.afterPropertiesSet(JaxWsPortClientInterceptor.java:278) 	at org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean.afterPropertiesSet(JaxWsPortProxyFactoryBean.java:49) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335) 	... 36 more ```  My Spring configuration is fairly simple here:  ```                                                                                        ```  I've added endpointAddress, lookupServiceOnStartup and a few other properties to see if I can figure out a combination that would work.  My understanding from the documentation was the JaxWsPortProxyFactoryBean would act as a client-less proxy and generate the client upon setup of the bean and I would not need the apt-generated classes.  That appears to be the case when I am using Java 1.6 but not when I am using Java 1.5 with JAX-WS classes in the classpath.  Am I missing something here or is this an issue?  Thank you.  --Vinny    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-08-17T07:22:26Z","2015-09-22T17:34:38Z"
"","10484","JPATransactionManager calls commit() on programmatically rolled back transactions. [SPR-5814]","**[Vincent GiguÃ¨re](https://jira.spring.io/secure/ViewProfile.jspa?name=vgiguere)** opened **[SPR-5814](https://jira.spring.io/browse/SPR-5814?redirect=false)** and commented  I need to be able to programatically rollback a transaction without throwing an exception.  Reading through the _TransactionInterceptor.invoke(final MethodInvocation invocation)_ method, it seems that the interceptor delegates to the TransactionManager the responsibility to look if the transaction has been programatically rolled back  ```java 103	try { 104		// This is an around advice: Invoke the next interceptor in the chain. 105		// This will normally result in a target object being invoked. 106		retVal = invocation.proceed(); 107	} 108	catch (Throwable ex) { 109		// target invocation exception 110		completeTransactionAfterThrowing(txInfo, ex); 111		throw ex; 112	} 113	finally { 114		cleanupTransactionInfo(txInfo); 115	} 116	commitTransactionAfterReturning(txInfo); ```  However, contrarily to the JTATransactionManager, the JPATransactionManager does not interrogate the transaction (EntityTransaction) to see if it is marked as rolled back.  ```java 454	try { 455			EntityTransaction tx = txObject.getEntityManagerHolder().getEntityManager().getTransaction(); 456			tx.commit(); 457		} 458		catch (RollbackException ex) { ```  I would suggest to modify the code to something like:  ```java if(tx.getRollbackOnly()){ 	tx.rollback() }else{ 	tx.commit() } ```  If I am missing something, please let me know.  Vincent GiguÃ¨re   ---  **Affects:** 2.5.6  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-08T07:24:30Z","2012-06-18T12:45:02Z"
"","10063","TypeUtils.isAssignable should return true for ParametrizedType assignable to Object [SPR-5390]","**[Vincent De Rijcke](https://jira.spring.io/secure/ViewProfile.jspa?name=gutnor)** opened **[SPR-5390](https://jira.spring.io/browse/SPR-5390?redirect=false)** and commented  isAssignable( Object.class, /* parametrizedtype or genericarraytype */ ) should be true  Test case: public class SpringTypeUtilsTest { private static final List\ LIST_LONG = null; private static final List\[] LIST_LONG_ARRAY = null;      private Type getFieldType(String fieldName) {         try {             return SpringTypeUtilsTest.class.getDeclaredField(fieldName).getGenericType();         } catch (NoSuchFieldException e) {             throw new RuntimeException(""Field does not exist"", e);         }     }          @Test     public void testParametrizedTypeAssignableToObject() {         Object o = (List) null;  // fine in java - so assignable should return true                   assertTrue(TypeUtils.isAssignable(Object.class, getFieldType(""LIST_LONG"")));     }          @Test     public void testGenericArrayTypeAssignableToObject() {         // Note that java use a GenericArrayType for an Array used as a Wildcard boundaries or ParametrizedTypeArgument,        // instead of using the Array class object         Object o = (List[]) null;  // fine in java - so assignable should return true                   assertTrue(TypeUtils.isAssignable(Object.class, getFieldType(""LIST_LONG_ARRAY"")));     }  }  Proposed fix of TypeUtils.java:  //UPDATE isAssignable(Type lhsType, Type rhsType) public static boolean isAssignable(Type lhsType, Type rhsType) { if (lhsType == null) { throw new IllegalArgumentException(""Left-hand side type must not be null""); } if (rhsType == null) { throw new IllegalArgumentException(""Right-hand side type must not be null""); }      if (lhsType.equals(rhsType)) {         return true;     }     if (lhsType instanceof Class && rhsType instanceof Class) {         return isAssignable((Class) lhsType, (Class) rhsType);     }  // ADDED if (lhsType == Object.class && ( rhsType instanceof ParameterizedType || rhsType instanceof GenericArrayType)) { return true; } // END ADDED if (lhsType instanceof ParameterizedType && rhsType instanceof ParameterizedType) { return isAssignable((ParameterizedType) lhsType, (ParameterizedType) rhsType); } if (lhsType instanceof WildcardType) { return isAssignable((WildcardType) lhsType, rhsType); } return false; }   ---  **Affects:** 2.5.6, 3.0 M1","closed","type: enhancement,","spring-projects-issues","2009-01-04T21:18:55Z","2012-06-19T03:47:25Z"
"","10062","TypeUtils.isAssignable does not support GenericArrayType [SPR-5389]","**[Vincent De Rijcke](https://jira.spring.io/secure/ViewProfile.jspa?name=gutnor)** opened **[SPR-5389](https://jira.spring.io/browse/SPR-5389?redirect=false)** and commented  TypeUtils.isAssignable does not support GenericTypeArray. GenericArray are used, for example, in the following types: List[] List[] LIST_ANY_ARRAY = null; private static final List\[] LIST_LONG_ARRAY = null;      private static final List LIST_LONGARRAY = null;     private static final List[] o = (List[]) null;  // fine in java - so assignable should return true                   assertTrue(TypeUtils.isAssignable(getFieldType(""LIST_ANY_ARRAY""), getFieldType(""LIST_LONG_ARRAY"")));     }          @Test     public void testListLongArrayAssignableToListExtendsLongArray() {         // Note that java use a GenericArrayType for an Array used as a Wildcard boundaries or ParametrizedTypeArgument,        // instead of using the Array class object         List","closed","type: enhancement,","spring-projects-issues","2009-01-04T21:08:49Z","2018-12-28T10:12:15Z"
"","10427","Externalized request mapping as a 1st class alternative to @RequestMapping [SPR-5757]","**[Vijay Natarajan](https://jira.spring.io/secure/ViewProfile.jspa?name=vijayn)** opened **[SPR-5757](https://jira.spring.io/browse/SPR-5757?redirect=false)** and commented  While I am not averse to having the controllers use annotation based configuration, I would love to see a functionally equivalent XML based routing configuration, for those who would rather not use it. The current model, IMHO, has the following problems:  1. URL mapping is scattered all over the place. If I have 15 controllers, with 10 methods each (and note that there's the issue of each method potentially having a completely different URL that it can match), a newbie would have to look at 150 potential places to map a given URL to the controller action it resolves to. Admittedly, having good conventions and oversight will alleviate this problem, but seems too easy to have things go awry.  2. any changes to the mapping requires a recompile.  3. The same controller method cannot be mapped to multiple urls (or at least I can't figure out how to do it :( ), allowing different views to be driven by the same controller.  4. A somewhat minor thing. There is now way to write a controller w/o Spring dependencies.  Btw, It would be nice to have mappings that are pattern based, such as, a way to map /somepath/{method} to handler SomePathController, method {method}.  http://blog.springsource.com/2009/03/08/rest-in-spring-3-mvc/  ---  **Affects:** 3.0.5  **Attachments:** - [ShowRequestMappings.png](https://jira.spring.io/secure/attachment/17896/ShowRequestMappings.png) (_34.90 kB_)  **Issue Links:** - #14568 Allow customization of request mappings - #10449 Allow links to `@Controller` methods from views without hardcoding URLs - #12310 Overloaded `@PathVariable` based handler methods fail with ambiguity when URL mapping is specified in XML (_**""supersedes""**_)  12 votes, 21 watchers","closed","has: votes-jira,","spring-projects-issues","2009-05-14T08:33:47Z","2019-01-13T07:59:41Z"
"","10426","ContentNegotiatingViewResolver is not interacting well with @RequestMapping with trailing path variable [SPR-5756]","**[Vijay Natarajan](https://jira.spring.io/secure/ViewProfile.jspa?name=vijayn)** opened **[SPR-5756](https://jira.spring.io/browse/SPR-5756?redirect=false)** and commented  Hi all,  I have another problem. I am using the new PathVariable support in addition to the above. So, say I have the following  `@RequestMapping`( value=""/blogs/{username}""...)  Now say I want to use ContentNegotiation to support HTML, Atom and RSS views of this user's blog.  I extract userid as a PathVariable and use it to look up the user by username. But here's the problem. If I then request /blogs/vijay.atom, things blow up. Why? because my extracted username is now vijay.atom!! Obviously, I can deal w/ it in the controller code, but that's ugly. Is there a more appropriate way to handle this?  thanks, Vijay   ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=71257","closed","type: enhancement,","spring-projects-issues","2009-05-14T08:19:25Z","2009-09-16T04:28:36Z"
"","10424","ContentNegotiatingViewResolver is not interacting well with @RequestMapping with trailing path variable [SPR-5754]","**[Vijay Natarajan](https://jira.spring.io/secure/ViewProfile.jspa?name=vijayn)** opened **[SPR-5754](https://jira.spring.io/browse/SPR-5754?redirect=false)** and commented  I've been testing the ContentNegotiatingViewResolver and came across an issue which leads to inconsistent behaviour across browsers with no way to change it. I was trying to get my site to display xml if the url had a file extension of xml and to display html if the extension was missing or html.  I turned on debug logging and it seems that if the Accept media type header was being used (no extension was provided) content types with the same quality valye are ordered by the ContentNegotiatingViewResolver in the order the browser provided them, which isn't consistent across browsers. Here snipits from the logs, both requests were for the the url: http://localhost:8080/url :  Safari 4:  [DEBUG] ContentNegotiatingViewResolver - Requested media types are [application/xml, application/xhtml+xml, text/html;q=0.9, text/plain;q=0.8, image/png, */*;q=0.5] (based on Accept header) [DEBUG] ContentNegotiatingViewResolver - Returning [org.springframework.web.servlet.view.xml.MarshallingView: name 'result'] based on requested media type 'application/xml'  Firefox:  [DEBUG] ContentNegotiatingViewResolver - Requested media types are [text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8] (based on Accept header) [DEBUG] ContentNegotiatingViewResolver - Returning [org.springframework.web.servlet.view.JstlView: name 'result'; URL [/WEB-INF/ui/result.jsp]] based on requested media type 'text/html'  I think the default behaviour needs to be consistent so that the same view is returned on all browsers and I really think it would be nice to be able to influence which the application wants to display by default.   ---  **Affects:** 3.0 M2","closed","status: invalid,","spring-projects-issues","2009-05-14T08:03:43Z","2019-01-12T05:33:33Z"
"","10531","cssClass attribute is useless - itemCssClass attribute required instead [SPR-5862]","**[Viczai GÃ¡bor](https://jira.spring.io/secure/ViewProfile.jspa?name=gviczai)** opened **[SPR-5862](https://jira.spring.io/browse/SPR-5862?redirect=false)** and commented  The cssClass attribute is set to the same value for all options rendered. This is unnecessary 'cause one can easily define a css rule that customizes all options tag under a classed select tag. Eg:  \ select.apple option { color: red; } \ \ \1\ \2\ \ In other ways an itemCssClass would be nice, which should set the class property of individual options like the itemValue sets the values.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-06-24T08:02:57Z","2012-06-19T09:36:23Z"
"","10499","SimpleJdbcCall - Problem calling function returning a ResultSet [SPR-5829]","**[Victor Lindberg](https://jira.spring.io/secure/ViewProfile.jspa?name=lindberg713)** opened **[SPR-5829](https://jira.spring.io/browse/SPR-5829?redirect=false)** and commented  IÂ´m using SimpleJdbcCall for call function returning a Resultset. I'm having problems when the result is a Resultset. The error is:  SEVERE: Unable to determine the correct call signature - multiple procedures/functions/signatures for SF_CONSOLIDACAO_C found [PC_DEB_FACADE_CADASTRO.ADMDEB001.SF_CONSOLIDACAO_C, PC_DEB_FACADE_CADASTRO.ADMDEB001.SF_CONSOLIDACAO_C]  The signature function is:  FUNCTION SF_CONSOLIDACAO_C ( pNUM_INSCRICAO          IN  NUMBER, pCod_grupo_debito       IN  deb_debito_grupo.cod_grupo%TYPE, pCod_tipo_consolidacao  IN  deb_tipo_consolid.tip_consolid%TYPE) RETURN CS_CONSOLIDACOES IS RCS_CONSOLIDACOESS  CS_CONSOLIDACOES;  I am calling the following:  public List\ listarConsolidacoes(PessoaVO devedor, GrupoDebitoVO grupoDebito, TipoConsolidacaoVO tipoConsolidacao){ Map params = new HashMap(); params.put(""pNUM_INSCRICAO"", devedor.getNumDoc()); params.put(""pCod_grupo_debito"", grupoDebito.getCodGrupo()); params.put(""pCod_tipo_consolidacao"", tipoConsolidacao.getTipo()); //the callFunction method is bellow return callFunction(ConsolidacaoVO.class, ""admdeb001"", ""pc_deb_facade_cadastro"", ""SF_CONSOLIDACAO_C"",params , new ParameterizedRowMapper\(){ public ConsolidacaoVO mapRow(ResultSet rs, int rowNum) throws SQLException { return new ConsolidacaoVO(); } }, new SqlParameter(""pSEQ_CONSOLIDACAO"", Types.NUMERIC), new SqlParameter(""pCod_grupo_debito"", Types.NUMERIC), new SqlParameter(""pCod_tipo_consolidacao"", Types.NUMERIC));      }  public \ List\ callFunction(Class\ tipoRetorno, String schema, String pacote, String nomeFunction, Map paramsValues,ParameterizedRowMapper\ rm, SqlParameter... paramsDeclarados) { SimpleJdbcCallOperations call = new SimpleJdbcCall(jdbcTemplate).withSchemaName(schema).withCatalogName(pacote) .withProcedureName(nomeFunction) .declareParameters(paramsDeclarados) .returningResultSet(""result"", rm);      	return (List) call.executeFunction(tipoRetorno, paramsValues);     }  thanks!   ---  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2009-06-16T00:23:08Z","2012-06-19T09:36:15Z"
"","10768","Using a proxied SessionFactory creates multiple transactions within the same method marked @Transactional [SPR-6100]","**[Varun Mehta](https://jira.spring.io/secure/ViewProfile.jspa?name=varunmehta)** opened **[SPR-6100](https://jira.spring.io/browse/SPR-6100?redirect=false)** and commented  When using a proxied instance of sessionFactory, it registers multiple transactions within the same method marked `@Transactional`.  example:  `@Transactional` public void doSomething() { create(); processObject(); update(); }  should run in the same transaction, and if any of them fails, the whole thing should revert; but this does not happen. There are actually 3 transactions going on. whereas you would expect 1 due to the transactional testcase.  The first transaction started from the testcase is bound to the SessionFactory proxy. The other 2 transactions are started/bound to the actual implementation and act just like they would in a the normal world. Being 2 separate transactions, because the first create is already called and committed it cannot be rolledback.  I went ahead and modified SessionFactoryUtils & HibernateTransactionManager, while calling TransactionSynchronizationManager getResource(xx) & bindResource to ""getSessionFactory().toString()"" as the key, instead of the SessionFactory object.      if (txObject.isNewSessionHolder()) {       TransactionSynchronizationManager.bindResource(getSessionFactory().toString(), txObject.getSessionHolder());     }  and      SessionHolder sessionHolder = (SessionHolder) TransactionSynchronizationManager.getResource(getSessionFactory().toString());  When chancing the actual key to the toString everything runs in the transaction started from the testcase. Because the toString method is executed against the actual underlying instance of the sessionfactory.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=77395","closed","in: data,","spring-projects-issues","2009-09-11T04:05:15Z","2019-01-11T14:07:17Z"
"","10413","AbstractUrlHandlerMapping registerHandler does not register REST url paths if configured in global web.xml contextConfigLocation param instead of DispatcherServlet init-param [SPR-5743]","**[Ussama Baggili](https://jira.spring.io/secure/ViewProfile.jspa?name=ubaggili)** opened **[SPR-5743](https://jira.spring.io/browse/SPR-5743?redirect=false)** and commented  In web.xml, using the following fails to register all the mappings:  \ \contextConfigLocation\ \ /WEB-INF/applicationContext*.xml \ \ \ \org.springframework.web.context.ContextLoaderListener\ \ \ \security-ws\ \org.springframework.web.servlet.DispatcherServlet\ \ \contextConfigLocation\ \\      \","closed","in: web,","spring-projects-issues","2009-05-11T01:59:17Z","2019-01-13T07:59:46Z"
"","10450","TransactionAwareDataSourceProxy leaks connections  [SPR-5780]","**[Urs Keller](https://jira.spring.io/secure/ViewProfile.jspa?name=ukeller@gmail.com)** opened **[SPR-5780](https://jira.spring.io/browse/SPR-5780?redirect=false)** and commented  In TransactionAwareDataSourceProxy  isClosed() is not specially handled, under some circumstances the call to this method will create a connection, which is then leaked, since callers are using isClosed() in a finally clause when releasing resources.  We experienced this problem with a connection pool when bounding the number of connections and under high load when the pool becomes exhausted. Under these circumstances the connections are leaking.  If we assume a pool with 1 connection and we are using TransactionAwareDataSourceProxy. Thread 1) gets the connection and holds it. Thread 2) tries to get a connection, but since 1) holds it it has a timeout. We have a context switch to 1) which releases the connection. We have a context switch to 2). Since it holds a TransactionAwareDataSourceProxy Connection, it will still try to close it. In particular the isCosed method is called and since the target connection is null a new connection is created, which is then leaked.  I tentatively fixed this problem by handling the isClosed when target is null. This passes the tests with which I could reproduce the problem. I'm not sure if there are unwanted side effects, though.  Patch below:      1. Eclipse Workspace Patch 1.0  #P spring-2-5-6-SEC01 Index: src/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java  ---  --- src/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java	(revision 17121) +++ src/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java	(working copy) @@ -201,6 +201,12 @@ this.closed = true; return null; } +      // prevent isClosed from opening new connections.  +         // since isClosed is usually called in finally blocks  +         // this would cause connections to leak.  +         else if  (method.getName().equals(""isClosed"") && this.target==null) {  +         return true;  +           	}                	if (this.target == null) {         		if (this.closed) {  ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d46c1f600a97e41307e96225223d780b0e9c49f7  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2009-05-23T06:48:16Z","2019-01-13T21:49:53Z"
"","10570","Change log levels when logging exceptions [SPR-5901]","**[umesha balasubramaniam](https://jira.spring.io/secure/ViewProfile.jspa?name=umeshajb)** opened **[SPR-5901](https://jira.spring.io/browse/SPR-5901?redirect=false)** and commented  The handleListenerSetupFailure method in  org.springframework.jms.listener.DefaultMessageListenerContainer logs exceptions at the info level. Shouldn't this be logged at the error level? This would give more visibility into if an error occurred.      protected void handleListenerSetupFailure(Throwable ex, boolean alreadyRecovered) {     	if (ex instanceof JMSException) {     		invokeExceptionListener((JMSException) ex);     	}     	if (ex instanceof SharedConnectionNotInitializedException) {     		if (!alreadyRecovered) {     			logger.error(""JMS message listener invoker needs to establish shared Connection"");     		}     	}     	else {     		// Recovery during active operation..     		if (alreadyRecovered) {     			logger.error(""Setup of JMS message listener invoker failed - already recovered by other invoker"", ex);     		}     		else {     			StringBuffer msg = new StringBuffer();     			msg.append(""Setup of JMS message listener invoker failed for destination '"");     			msg.append(getDestinationDescription()).append(""' - trying to recover. Cause: "");     			msg.append(ex instanceof JMSException ? JmsUtils.buildExceptionMessage((JMSException) ex) : ex.getMessage());     			logger.error(msg, ex);     		}     	}     }     ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-07-06T05:28:45Z","2012-06-19T09:36:31Z"
"","10337","SimpleThrowawayClassLoader and Log4J [SPR-5666]","**[U. Kkm](https://jira.spring.io/secure/ViewProfile.jspa?name=ukkm)** opened **[SPR-5666](https://jira.spring.io/browse/SPR-5666?redirect=false)** and commented  In my small JPA project I switched from Hibernate-JPA to EclipseLink. This requires to work with the Spring agent. But now I get an Log4J error caused on a class loader issue. This results in ths uncomely fact that the logging doesn't work. Here the error log:  [Parser] Running: E:\Projects\KKM\PROTT_JSF\trunk\projects\ProttTest\temp-testng-customsuite.xml  [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [ENV] Extension directories (java.ext.dir): null [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [ENV] Application classpath (java.class.path): /E:/Programme/Eclipse Ganymede/eclipse/plugins/org.testng.eclipse_5.9.0.2/eclipse-testng.jar;/E:/Programme/Eclipse Ganymede/eclipse/plugins/org.testng.eclipse_5.9.0.2/lib/testng-jdk15.jar;V:\lib\eclipselink-1.1.0.jar;V:\lib\javax.persistence_1.99.0.jar;V:\lib\aopalliance.jar;V:\lib\aspectjweaver.jar;V:\lib\spring-aop-2.5.6.jar;V:\lib\spring-beans-2.5.6.jar;V:\lib\spring-context-2.5.6.jar;V:\lib\spring-context-support-2.5.6.jar;V:\lib\spring-core-2.5.6.jar;V:\lib\spring-jdbc-2.5.6.jar;V:\lib\spring-orm-2.5.6.jar;V:\lib\spring-test-2.5.6.jar;V:\lib\spring-tx-2.5.6.jar;V:\lib\testng-5.8-jdk15.jar;V:\lib\hsqldb-1.8.0.9.jar;V:\lib\log4j-1.2.15.jar;V:\lib\commons-logging-1.1.1.jar;V:\lib\commons-lang-2.3.jar;V:\lib\commons-collections-3.2.jar;E:\Projects\KKM\PROTT_JSF\trunk\projects\ProttCommon\classes;E:\Programme\apache-tomcat-6.0.18\lib\annotations-api.jar;E:\Programme\apache-tomcat-6.0.18\lib\catalina-ant.jar;E:\Programme\apache-tomcat-6.0.18\lib\catalina-ha.jar;E:\Programme\apache-tomcat-6.0.18\lib\catalina-tribes.jar;E:\Programme\apache-tomcat-6.0.18\lib\catalina.jar;E:\Programme\apache-tomcat-6.0.18\lib\el-api.jar;E:\Programme\apache-tomcat-6.0.18\lib\jasper-el.jar;E:\Programme\apache-tomcat-6.0.18\lib\jasper-jdt.jar;E:\Programme\apache-tomcat-6.0.18\lib\jasper.jar;E:\Programme\apache-tomcat-6.0.18\lib\jsp-api.jar;E:\Programme\apache-tomcat-6.0.18\lib\servlet-api.jar;E:\Programme\apache-tomcat-6.0.18\lib\tomcat-coyote.jar;E:\Programme\apache-tomcat-6.0.18\lib\tomcat-dbcp.jar;E:\Programme\apache-tomcat-6.0.18\lib\tomcat-i18n-es.jar;E:\Programme\apache-tomcat-6.0.18\lib\tomcat-i18n-fr.jar;E:\Programme\apache-tomcat-6.0.18\lib\tomcat-i18n-ja.jar;V:\lib\derbyLocale_de_DE.jar;V:\lib\derby.jar;E:\Projects\KKM\PROTT_JSF\trunk\projects\ProttJPA\build\classes;E:\Projects\KKM\PROTT_JSF\trunk\projects\ProttTest\classes;V:/lib/spring-agent-2.5.6.jar [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [ENV] Class org.apache.commons.logging.LogFactory was loaded via classloader sun.misc.Launcher$AppClassLoader@19972507 [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [ENV] Ancestry of classloader which loaded org.apache.commons.logging.LogFactory is sun.misc.Launcher$AppClassLoader@19972507 == 'sun.misc.Launcher$AppClassLoader@130c19b' [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [ENV] Ancestry of classloader which loaded org.apache.commons.logging.LogFactory is ClassLoader tree:sun.misc.Launcher$AppClassLoader@19972507 (SYSTEM)  --> sun.misc.Launcher$ExtClassLoader@32942009 --> BOOT [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] BOOTSTRAP COMPLETED [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [LOOKUP] LogFactory implementation requested for the first time for context classloader sun.misc.Launcher$AppClassLoader@19972507 [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [LOOKUP] sun.misc.Launcher$AppClassLoader@19972507 == 'sun.misc.Launcher$AppClassLoader@130c19b' [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [LOOKUP] ClassLoader tree:sun.misc.Launcher$AppClassLoader@19972507 (SYSTEM)  --> sun.misc.Launcher$ExtClassLoader@32942009 --> BOOT [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [LOOKUP] Properties file found at 'file:/E:/Projects/KKM/PROTT_JSF/trunk/projects/ProttJPA/build/classes/commons-logging.properties' with priority 1.0 [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [LOOKUP] Properties file of name 'commons-logging.properties' found at 'file:/E:/Projects/KKM/PROTT_JSF/trunk/projects/ProttJPA/build/classes/commons-logging.properties"" [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [LOOKUP] Looking for system property [org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use... [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [LOOKUP] No system property [org.apache.commons.logging.LogFactory] defined. [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [LOOKUP] Looking for a resource file of name [META-INF/services/org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use... [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] [LOOKUP]  Creating an instance of LogFactory class org.apache.commons.logging.impl.LogFactoryImpl as specified by file 'META-INF/services/org.apache.commons.logging.LogFactory' which was present in the path of the context classloader. [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] Loaded class org.apache.commons.logging.impl.LogFactoryImpl from classloader sun.misc.Launcher$AppClassLoader@19972507 [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] Instance created. [LogFactory from sun.misc.Launcher$AppClassLoader@19972507] Created object org.apache.commons.logging.impl.LogFactoryImpl@20688146 to manage classloader sun.misc.Launcher$AppClassLoader@19972507 [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] Discovering a Log implementation... [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] Trying to get configuration for item org.apache.commons.logging.Log.allowFlawedContext [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] No LogFactory attribute found for org.apache.commons.logging.Log.allowFlawedContext [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] No system property found for property org.apache.commons.logging.Log.allowFlawedContext [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] No configuration defined for item org.apache.commons.logging.Log.allowFlawedContext [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] Trying to get configuration for item org.apache.commons.logging.Log.allowFlawedDiscovery [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] No LogFactory attribute found for org.apache.commons.logging.Log.allowFlawedDiscovery [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] No system property found for property org.apache.commons.logging.Log.allowFlawedDiscovery [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] No configuration defined for item org.apache.commons.logging.Log.allowFlawedDiscovery [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] Trying to get configuration for item org.apache.commons.logging.Log.allowFlawedHierarchy [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] No LogFactory attribute found for org.apache.commons.logging.Log.allowFlawedHierarchy [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] No system property found for property org.apache.commons.logging.Log.allowFlawedHierarchy [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [ENV] No configuration defined for item org.apache.commons.logging.Log.allowFlawedHierarchy [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] Trying to get log class from attribute 'org.apache.commons.logging.Log' [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] Attempting to load user-specified log class 'org.apache.commons.logging.impl.Log4JLogger'... [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] Attempting to instantiate 'org.apache.commons.logging.impl.Log4JLogger' [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] Trying to load 'org.apache.commons.logging.impl.Log4JLogger' from classloader sun.misc.Launcher$AppClassLoader@19972507 [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] Class 'org.apache.commons.logging.impl.Log4JLogger' was found at 'jar:file:/V:/lib/commons-logging-1.1.1.jar!/org/apache/commons/logging/impl/Log4JLogger.class' log4j: reset attribute= ""false"". log4j: Threshold =""null"". log4j: Retreiving an instance of org.apache.log4j.Logger. log4j: Setting [org] additivity to [true]. log4j: Level value for org is  [warn]. log4j: org level set to WARN log4j: Retreiving an instance of org.apache.log4j.Logger. log4j: Setting [org.hibernate] additivity to [true]. log4j: Level value for org.hibernate is  [debug]. log4j: org.hibernate level set to DEBUG log4j: Level value for root is  [debug]. log4j: root level set to DEBUG log4j: Class name: [org.apache.log4j.RollingFileAppender] log4j: Setting property [maxFileSize] to [5MB]. log4j: Setting property [maxBackupIndex] to [2]. log4j: Setting property [file] to [W:\log/SystemOut.log]. log4j: Setting property [append] to [true]. log4j: Parsing layout of class: ""org.apache.log4j.PatternLayout"" log4j: Setting property [conversionPattern] to [%d [%t] %-5p %c.%m%n]. log4j: setFile called: W:\log/SystemOut.log, true log4j: setFile ended log4j: Adding appender named [logFile] to category [root]. [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] [INFO] 'org.apache.commons.logging.impl.Log4JLogger' from classloader sun.misc.Launcher$AppClassLoader@19972507 does not declare optional method setLogFactory(LogFactory) [LogFactoryImpl@20688146 from sun.misc.Launcher$AppClassLoader@19972507] Log adapter 'org.apache.commons.logging.impl.Log4JLogger' from classloader sun.misc.Launcher$AppClassLoader@19972507 has been selected for use. [EL Config]: 2009-04-10 18:01:19.64--ServerSession(9744175)--Thread(Thread[main,5,main])--The access type for the persistent class [class de.kkm.prott.jpa.model.Contract] is set to [FIELD]. [EL Config]: 2009-04-10 18:01:19.656--ServerSession(9744175)--Thread(Thread[main,5,main])--The alias name for the entity class [class de.kkm.prott.jpa.model.Contract] is being defaulted to: Contract. [EL Config]: 2009-04-10 18:01:19.812--ServerSession(9744175)--Thread(Thread[main,5,main])--The access type for the persistent class [class de.kkm.prott.jpa.model.Project] is set to [FIELD]. [EL Config]: 2009-04-10 18:01:19.812--ServerSession(9744175)--Thread(Thread[main,5,main])--The alias name for the entity class [class de.kkm.prott.jpa.model.Project] is being defaulted to: Project. [EL Config]: 2009-04-10 18:01:19.812--ServerSession(9744175)--Thread(Thread[main,5,main])--The access type for the persistent class [class de.kkm.prott.jpa.model.ProjectActivity] is set to [FIELD]. [EL Config]: 2009-04-10 18:01:19.812--ServerSession(9744175)--Thread(Thread[main,5,main])--The alias name for the entity class [class de.kkm.prott.jpa.model.ProjectActivity] is being defaulted to: ProjectActivity. [EL Config]: 2009-04-10 18:01:19.828--ServerSession(9744175)--Thread(Thread[main,5,main])--The access type for the persistent class [class de.kkm.prott.jpa.model.Budget] is set to [FIELD]. [EL Config]: 2009-04-10 18:01:19.828--ServerSession(9744175)--Thread(Thread[main,5,main])--The alias name for the entity class [class de.kkm.prott.jpa.model.Budget] is being defaulted to: Budget. [EL Config]: 2009-04-10 18:01:19.843--ServerSession(9744175)--Thread(Thread[main,5,main])--The access type for the persistent class [class de.kkm.prott.jpa.model.Partner] is set to [FIELD]. [EL Config]: 2009-04-10 18:01:19.843--ServerSession(9744175)--Thread(Thread[main,5,main])--The alias name for the entity class [class de.kkm.prott.jpa.model.Partner] is being defaulted to: Partner. [EL Config]: 2009-04-10 18:01:19.843--ServerSession(9744175)--Thread(Thread[main,5,main])--The access type for the persistent class [class de.kkm.prott.jpa.model.User] is set to [FIELD]. [EL Config]: 2009-04-10 18:01:19.843--ServerSession(9744175)--Thread(Thread[main,5,main])--The alias name for the entity class [class de.kkm.prott.jpa.model.User] is being defaulted to: User. [EL Config]: 2009-04-10 18:01:19.859--ServerSession(9744175)--Thread(Thread[main,5,main])--The access type for the persistent class [class de.kkm.prott.jpa.model.WorkingTime] is set to [FIELD]. [EL Config]: 2009-04-10 18:01:19.859--ServerSession(9744175)--Thread(Thread[main,5,main])--The alias name for the entity class [class de.kkm.prott.jpa.model.WorkingTime] is being defaulted to: WorkingTime. [EL Config]: 2009-04-10 18:01:19.875--ServerSession(9744175)--Thread(Thread[main,5,main])--The access type for the persistent class [class de.kkm.prott.jpa.model.ContractProlongation] is set to [FIELD]. [EL Config]: 2009-04-10 18:01:19.875--ServerSession(9744175)--Thread(Thread[main,5,main])--The alias name for the entity class [class de.kkm.prott.jpa.model.ContractProlongation] is being defaulted to: ContractProlongation. [EL Config]: 2009-04-10 18:01:19.89--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the many to one mapping element [private de.kkm.prott.jpa.model.Contract de.kkm.prott.jpa.model.Budget.contract] is being defaulted to: class de.kkm.prott.jpa.model.Contract. [EL Config]: 2009-04-10 18:01:19.937--ServerSession(9744175)--Thread(Thread[main,5,main])--The primary key column name for the mapping element [private de.kkm.prott.jpa.model.Contract de.kkm.prott.jpa.model.Budget.contract] is being defaulted to: CONTRACT_ID. [EL Config]: 2009-04-10 18:01:19.937--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the one to many mapping element [private java.util.Set de.kkm.prott.jpa.model.Project.projectActivities] is being defaulted to: class de.kkm.prott.jpa.model.ProjectActivity. [EL Config]: 2009-04-10 18:01:19.984--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the many to one mapping element [private de.kkm.prott.jpa.model.Project de.kkm.prott.jpa.model.ProjectActivity.project] is being defaulted to: class de.kkm.prott.jpa.model.Project. [EL Config]: 2009-04-10 18:01:19.984--ServerSession(9744175)--Thread(Thread[main,5,main])--The primary key column name for the mapping element [private de.kkm.prott.jpa.model.Project de.kkm.prott.jpa.model.ProjectActivity.project] is being defaulted to: PROJECT_ID. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the one to one mapping element [private de.kkm.prott.jpa.model.Contract de.kkm.prott.jpa.model.Project.contract] is being defaulted to: class de.kkm.prott.jpa.model.Contract. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The primary key column name for the mapping element [private de.kkm.prott.jpa.model.Contract de.kkm.prott.jpa.model.Project.contract] is being defaulted to: CONTRACT_ID. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the one to many mapping element [private java.util.List de.kkm.prott.jpa.model.User.workingTimes] is being defaulted to: class de.kkm.prott.jpa.model.WorkingTime. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the many to one mapping element [private de.kkm.prott.jpa.model.User de.kkm.prott.jpa.model.WorkingTime.user] is being defaulted to: class de.kkm.prott.jpa.model.User. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The primary key column name for the mapping element [private de.kkm.prott.jpa.model.User de.kkm.prott.jpa.model.WorkingTime.user] is being defaulted to: USER_ID. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the one to many mapping element [private java.util.List de.kkm.prott.jpa.model.User.partners] is being defaulted to: class de.kkm.prott.jpa.model.Partner. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the many to one mapping element [private de.kkm.prott.jpa.model.User de.kkm.prott.jpa.model.Partner.user] is being defaulted to: class de.kkm.prott.jpa.model.User. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The primary key column name for the mapping element [private de.kkm.prott.jpa.model.User de.kkm.prott.jpa.model.Partner.user] is being defaulted to: USER_ID. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the one to many mapping element [private java.util.List de.kkm.prott.jpa.model.User.contracts] is being defaulted to: class de.kkm.prott.jpa.model.Contract. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the many to one mapping element [private de.kkm.prott.jpa.model.User de.kkm.prott.jpa.model.Contract.user] is being defaulted to: class de.kkm.prott.jpa.model.User. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The primary key column name for the mapping element [private de.kkm.prott.jpa.model.User de.kkm.prott.jpa.model.Contract.user] is being defaulted to: USER_ID. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the many to one mapping element [private de.kkm.prott.jpa.model.Contract de.kkm.prott.jpa.model.ContractProlongation.contract] is being defaulted to: class de.kkm.prott.jpa.model.Contract. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The primary key column name for the mapping element [private de.kkm.prott.jpa.model.Contract de.kkm.prott.jpa.model.ContractProlongation.contract] is being defaulted to: CONTRACT_ID. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the one to one mapping element [private de.kkm.prott.jpa.model.Project de.kkm.prott.jpa.model.Contract.project] is being defaulted to: class de.kkm.prott.jpa.model.Project. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the one to many mapping element [private java.util.Set de.kkm.prott.jpa.model.Contract.prolongations] is being defaulted to: class de.kkm.prott.jpa.model.ContractProlongation. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the one to one mapping element [private de.kkm.prott.jpa.model.Partner de.kkm.prott.jpa.model.Contract.client] is being defaulted to: class de.kkm.prott.jpa.model.Partner. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The primary key column name for the mapping element [private de.kkm.prott.jpa.model.Partner de.kkm.prott.jpa.model.Contract.client] is being defaulted to: PARTNER_ID. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the one to one mapping element [private de.kkm.prott.jpa.model.Partner de.kkm.prott.jpa.model.Contract.partner] is being defaulted to: class de.kkm.prott.jpa.model.Partner. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The primary key column name for the mapping element [private de.kkm.prott.jpa.model.Partner de.kkm.prott.jpa.model.Contract.partner] is being defaulted to: PARTNER_ID. [EL Config]: 2009-04-10 18:01:20.0--ServerSession(9744175)--Thread(Thread[main,5,main])--The target entity (reference) class for the one to many mapping element [private java.util.Set de.kkm.prott.jpa.model.Contract.budgets] is being defaulted to: class de.kkm.prott.jpa.model.Budget. [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] Extension directories (java.ext.dir): null [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] Application classpath (java.class.path): /E:/Programme/Eclipse Ganymede/eclipse/plugins/org.testng.eclipse_5.9.0.2/eclipse-testng.jar;/E:/Programme/Eclipse Ganymede/eclipse/plugins/org.testng.eclipse_5.9.0.2/lib/testng-jdk15.jar;V:\lib\eclipselink-1.1.0.jar;V:\lib\javax.persistence_1.99.0.jar;V:\lib\aopalliance.jar;V:\lib\aspectjweaver.jar;V:\lib\spring-aop-2.5.6.jar;V:\lib\spring-beans-2.5.6.jar;V:\lib\spring-context-2.5.6.jar;V:\lib\spring-context-support-2.5.6.jar;V:\lib\spring-core-2.5.6.jar;V:\lib\spring-jdbc-2.5.6.jar;V:\lib\spring-orm-2.5.6.jar;V:\lib\spring-test-2.5.6.jar;V:\lib\spring-tx-2.5.6.jar;V:\lib\testng-5.8-jdk15.jar;V:\lib\hsqldb-1.8.0.9.jar;V:\lib\log4j-1.2.15.jar;V:\lib\commons-logging-1.1.1.jar;V:\lib\commons-lang-2.3.jar;V:\lib\commons-collections-3.2.jar;E:\Projects\KKM\PROTT_JSF\trunk\projects\ProttCommon\classes;E:\Programme\apache-tomcat-6.0.18\lib\annotations-api.jar;E:\Programme\apache-tomcat-6.0.18\lib\catalina-ant.jar;E:\Programme\apache-tomcat-6.0.18\lib\catalina-ha.jar;E:\Programme\apache-tomcat-6.0.18\lib\catalina-tribes.jar;E:\Programme\apache-tomcat-6.0.18\lib\catalina.jar;E:\Programme\apache-tomcat-6.0.18\lib\el-api.jar;E:\Programme\apache-tomcat-6.0.18\lib\jasper-el.jar;E:\Programme\apache-tomcat-6.0.18\lib\jasper-jdt.jar;E:\Programme\apache-tomcat-6.0.18\lib\jasper.jar;E:\Programme\apache-tomcat-6.0.18\lib\jsp-api.jar;E:\Programme\apache-tomcat-6.0.18\lib\servlet-api.jar;E:\Programme\apache-tomcat-6.0.18\lib\tomcat-coyote.jar;E:\Programme\apache-tomcat-6.0.18\lib\tomcat-dbcp.jar;E:\Programme\apache-tomcat-6.0.18\lib\tomcat-i18n-es.jar;E:\Programme\apache-tomcat-6.0.18\lib\tomcat-i18n-fr.jar;E:\Programme\apache-tomcat-6.0.18\lib\tomcat-i18n-ja.jar;V:\lib\derbyLocale_de_DE.jar;V:\lib\derby.jar;E:\Projects\KKM\PROTT_JSF\trunk\projects\ProttJPA\build\classes;E:\Projects\KKM\PROTT_JSF\trunk\projects\ProttTest\classes;V:/lib/spring-agent-2.5.6.jar [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] Class org.apache.commons.logging.LogFactory was loaded via classloader org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927 [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] Ancestry of classloader which loaded org.apache.commons.logging.LogFactory is org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927 == 'org.springframework.instrument.classloading.SimpleThrowawayClassLoader@94257f' [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] Ancestry of classloader which loaded org.apache.commons.logging.LogFactory is ClassLoader tree:org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927 --> sun.misc.Launcher$AppClassLoader@19972507 (SYSTEM)  --> sun.misc.Launcher$ExtClassLoader@32942009 --> BOOT [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] BOOTSTRAP COMPLETED [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [LOOKUP] LogFactory implementation requested for the first time for context classloader sun.misc.Launcher$AppClassLoader@19972507 [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [LOOKUP] sun.misc.Launcher$AppClassLoader@19972507 == 'sun.misc.Launcher$AppClassLoader@130c19b' [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [LOOKUP] ClassLoader tree:sun.misc.Launcher$AppClassLoader@19972507 (SYSTEM)  --> sun.misc.Launcher$ExtClassLoader@32942009 --> BOOT [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [LOOKUP] Properties file found at 'file:/E:/Projects/KKM/PROTT_JSF/trunk/projects/ProttJPA/build/classes/commons-logging.properties' with priority 1.0 [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [LOOKUP] Properties file of name 'commons-logging.properties' found at 'file:/E:/Projects/KKM/PROTT_JSF/trunk/projects/ProttJPA/build/classes/commons-logging.properties"" [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [LOOKUP] Looking for system property [org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use... [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [LOOKUP] No system property [org.apache.commons.logging.LogFactory] defined. [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [LOOKUP] Looking for a resource file of name [META-INF/services/org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use... [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [LOOKUP]  Creating an instance of LogFactory class org.apache.commons.logging.impl.LogFactoryImpl as specified by file 'META-INF/services/org.apache.commons.logging.LogFactory' which was present in the path of the context classloader. [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Factory class org.apache.commons.logging.impl.LogFactoryImpl loaded from classloader sun.misc.Launcher$AppClassLoader@19972507 does not extend 'org.apache.commons.logging.LogFactory' as loaded by this classloader. [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [BAD CL TREE] sun.misc.Launcher$AppClassLoader@19972507 == 'sun.misc.Launcher$AppClassLoader@130c19b' [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [BAD CL TREE] ClassLoader tree:sun.misc.Launcher$AppClassLoader@19972507 (SYSTEM)  --> sun.misc.Launcher$ExtClassLoader@32942009 --> BOOT [LogFactoryImpl@11513418 from sun.misc.Launcher$AppClassLoader@19972507] Instance created. [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Unable to load factory class via classloader sun.misc.Launcher$AppClassLoader@19972507 - trying the classloader associated with this LogFactory. [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Instance created. [LogFactory from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Created object org.apache.commons.logging.impl.LogFactoryImpl@31168594 to manage classloader sun.misc.Launcher$AppClassLoader@19972507 [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Discovering a Log implementation... [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] Trying to get configuration for item org.apache.commons.logging.Log.allowFlawedContext [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] No LogFactory attribute found for org.apache.commons.logging.Log.allowFlawedContext [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] No system property found for property org.apache.commons.logging.Log.allowFlawedContext [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] No configuration defined for item org.apache.commons.logging.Log.allowFlawedContext [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] Trying to get configuration for item org.apache.commons.logging.Log.allowFlawedDiscovery [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] No LogFactory attribute found for org.apache.commons.logging.Log.allowFlawedDiscovery [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] No system property found for property org.apache.commons.logging.Log.allowFlawedDiscovery [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] No configuration defined for item org.apache.commons.logging.Log.allowFlawedDiscovery [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] Trying to get configuration for item org.apache.commons.logging.Log.allowFlawedHierarchy [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] No LogFactory attribute found for org.apache.commons.logging.Log.allowFlawedHierarchy [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] No system property found for property org.apache.commons.logging.Log.allowFlawedHierarchy [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [ENV] No configuration defined for item org.apache.commons.logging.Log.allowFlawedHierarchy [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Trying to get log class from attribute 'org.apache.commons.logging.Log' [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Attempting to load user-specified log class 'org.apache.commons.logging.impl.Log4JLogger'... [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Attempting to instantiate 'org.apache.commons.logging.impl.Log4JLogger' [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly. [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Trying to load 'org.apache.commons.logging.impl.Log4JLogger' from classloader org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927 [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Class 'org.apache.commons.logging.impl.Log4JLogger' was found at 'jar:file:/V:/lib/commons-logging-1.1.1.jar!/org/apache/commons/logging/impl/Log4JLogger.class' [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] [INFO] 'org.apache.commons.logging.impl.Log4JLogger' from classloader org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927 does not declare optional method setLogFactory(LogFactory) [LogFactoryImpl@31168594 from org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927] Log adapter 'org.apache.commons.logging.impl.Log4JLogger' from classloader org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9708927 has been selected for use. log4j:ERROR A ""org.apache.log4j.xml.DOMConfigurator"" object is not assignable to a ""org.apache.log4j.spi.Configurator"" variable. log4j:ERROR The class ""org.apache.log4j.spi.Configurator"" was loaded by log4j:ERROR [org.springframework.instrument.classloading.SimpleThrowawayClassLoader@94257f] whereas object of type log4j:ERROR ""org.apache.log4j.xml.DOMConfigurator"" was loaded by [sun.misc.Launcher$AppClassLoader@130c19b]. log4j:ERROR Could not instantiate configurator [org.apache.log4j.xml.DOMConfigurator]. [EL Info]: 2009-04-10 18:01:21.109--ServerSession(9744175)--Thread(Thread[main,5,main])--EclipseLink, version: Eclipse Persistence Services - 1.1.0.r3634   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=70235  1 votes, 1 watchers","closed","in: data,","spring-projects-issues","2009-04-10T03:29:28Z","2019-01-11T16:33:11Z"
"","10775","MethodInvoker style factoryMethodName handling for BeanDefinition  [SPR-6107]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-6107](https://jira.spring.io/browse/SPR-6107?redirect=false)** and commented  In order to define bean using factory method from other than bean class itself requires currently using of a registered factory bean. Registered factory bean feels quite useless when implementing factory method pattern. In worst case bean count duplicates if bean name of factory bean has to be generated on the fly.  MethodInvokingFactoryBean (with help of MethodInvoker) allows static class as prefix of factory method name and can therefore be used as registered factory bean but incorporating of this logic directly to org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod (and possibly to some other places than I've overlooked) would omit the need of factory bean altogether in these cases. Using MethodInvoker might also be beneficial since it already contains logic to handle illegal state scenarios which would be possible with this addition.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-09-14T01:51:10Z","2012-06-19T09:36:19Z"
"","10686","Support parsing without namespace awareness in BeanDefinitionParserDelegate and DefaultBeanDefinitionDocumentReader  [SPR-6017]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-6017](https://jira.spring.io/browse/SPR-6017?redirect=false)** and commented  BeanDefinitionParserDelegate and DefaultBeanDefinitionDocumentReader currently use node.getNamespaceURI & getLocalName() without considering that namespace awareness might be turned off (or DOM 1 is in use) leading these methods to return null values. The code is robust enough to avoid NPE:s but all elements belong to default namespace when namespace awareness is off since isDefaultNamespace(String) method will always receive null.  By providing middle-man methods getNamespaceURI(Node) and getLocalName(Node)  in delegate as public methods (or alternatively as protected with additional public isDefaultNamespace(Node)) would solve the problem when namespace awareness is turned off (or DOM 1 is used). These methods could be overridden to provide means other means to solve namespace and localname while Spring could by default still stick with DOM 2 implementations.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/320f08ac79bcca9cf9080570c2fac95159822814, https://github.com/spring-projects/spring-framework/commit/7835e66abb21932e67c1a6d2a2992d6bee43a67c, https://github.com/spring-projects/spring-framework/commit/7d37c92e4f2e924a033a619e4c80f9e79120a779, https://github.com/spring-projects/spring-framework/commit/019c3c253af174a331117d74cd73d864a71a8e27","closed","type: enhancement,","spring-projects-issues","2009-08-17T18:54:18Z","2012-06-19T03:43:36Z"
"","10678","Overriding DocumentDefaultsDefinitions retrieval from root element attributes [SPR-6010]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-6010](https://jira.spring.io/browse/SPR-6010?redirect=false)** and commented  Currently DocumentDefaultsDefinition initialization seeks always the given root element attributes for default values. Overriding of the behavior requires creation and initialization of the DocumentDefaultsDefinition which is lazily created at BeanDefinitionParserDelegate.initDefaults(Element) method. Manual creation is impossible without reflection because the field where the default are held is private.  I propose that this field is made protected and/or construction of the default implementation is made along field the field declaration to help out overriding of the initDefaults method.      protected DocumentDefaultsDefinition defaults = new DocumentDefaultsDefinition();  More radical change would be altering the behaviour is binding the initialization to happen only when delegate.isDefaultNamespace(Element root) is true but this might have impact on custom implementations already out there so I guess this is completely out of the question.    ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8058193603a4f2793937386d3a139281b7c51f7","closed","type: enhancement,","spring-projects-issues","2009-08-16T20:43:35Z","2019-01-13T21:49:22Z"
"","10526","Make use of source object given to ProblemReporter [SPR-5857]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-5857](https://jira.spring.io/browse/SPR-5857?redirect=false)** and commented  FailFastProblemReporterwhich is the default implementation doesn't make use of possible source object which can be obtained from location of the problem. When source is extracted (to for instance xpath in case of a node) it would be great that this information would be present in the thrown exception and logged message.  This location information could easily be included If the source would be printed out along with other information at Problem.toString()   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-06-22T22:57:31Z","2012-06-19T09:36:29Z"
"","10497","Regression: AnnotationMetadataReadingVisitor doesn't consider annotation method returning classes (SPR-5477)  [SPR-5827]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-5827](https://jira.spring.io/browse/SPR-5827?redirect=false)** and commented  AnnotationAttributesReadingVisitor doesn't convert ASM Type to Class as it used to in 3.0.0M2 after #10150 fix. Annotation attributes returning classes (such as javax.xml.bind.annotation.XmlType#factoryClass) do not function anymore as they used to because revision from AnnotationMetadataReadingVisitor:1033 to AnnotationAttributesReadingVisitor:1061 left (intentionally?) classLoader part behind.  AnnotationMetadataReadingVisitor 1033  76 	                        public void visit(String name, Object value) { 77 	                                // Explicitly defined annotation attribute value. 78 	                                Object valueToUse = value; 79 	                                if (value instanceof Type) { 80 	                                        try { 81 	                                                valueToUse = classLoader.loadClass(((Type) value).getClassName()); 82 	                                        } 83 	                                        catch (ClassNotFoundException ex) { 84 	                                                // Class not found - can't resolve class reference in annotation attribute. 85 	                                        } 86 	                                } 87 	                                attributes.put(name, valueToUse); 88 	                        }  AnnotationAttributesReadingVisitor:1061  64  	         public void visit(String name, Object value) { 65 	                Object valueToUse = value; 66 	                if (valueToUse instanceof Type) { 67 	                        valueToUse = ((Type) value).getClassName(); 68 	                } 69 	                this.attributes.put(name, valueToUse); 70 	        }  What makes the change interesting visitEnum() that still uses the classLoader in similar manner what visit() did.  ---  **Affects:** 3.0 M3  **Issue Links:** - #10152 Component scanning doesn't find enums in annotations - #10150 AnnotationMetadataReadingVisitor doesn't consider annotation method returning classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a06adf7203a5f95fc77aab58fb1ef39f3e2251b7, https://github.com/spring-projects/spring-framework/commit/bbd7fb3969b7fd93c814380209d8f28e2a9c6714","closed","in: core,","spring-projects-issues","2009-06-14T22:59:25Z","2019-01-11T17:14:16Z"
"","10216","ASM based SimpleMetadataReader returns also annotations on members [SPR-5545]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-5545](https://jira.spring.io/browse/SPR-5545?redirect=false)** and commented  SimpleMetadataReader annotation metadata is inconsistent compared to StandardAnnotationMetadata because it not only contains class level annotation but also member as well.   ---  **Affects:** 2.5.6  **Attachments:** - [SimpleMetadataReaderTest.java](https://jira.spring.io/secure/attachment/15179/SimpleMetadataReaderTest.java) (_1.54 kB_)","closed","in: core,","spring-projects-issues","2009-03-04T23:26:01Z","2012-06-19T03:46:53Z"
"","10150","AnnotationMetadataReadingVisitor doesn't consider annotation method returning classes [SPR-5477]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-5477](https://jira.spring.io/browse/SPR-5477?redirect=false)** and commented  javax.xml.bind.annotation.XmlType#factoryClass return type is class but when scanned AnnotationMetadataReadingVisitor returns the value as org.springframework.asm.Type if factoryClass isn't default value.  One possible solution would be use classloader.loadClass(((Type)object).getClassName()) in visit() method for such types just like when handling the defaults.  ---  **Affects:** 2.5.6  **Issue Links:** - #10497 Regression: AnnotationMetadataReadingVisitor doesn't consider annotation method returning classes (SPR-5477)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/213b528ffe5b3624139d3f92e00acef01f35d8a5","closed","in: core,","spring-projects-issues","2009-02-12T04:33:20Z","2019-01-11T15:45:43Z"
"","10044","Preserve previously set field values when processing @Resource and @Autowired annotations [SPR-5371]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-5371](https://jira.spring.io/browse/SPR-5371?redirect=false)** and commented  Both already `@Resource` and `@Autowired` preserve previously registered property values for methods but fields do not have this capability since injection metadata isn't even supposed to consider fields as properties (InjectionMetadata.injectFields() -> InjectionMetadata.InjectedElement.inject()).  * * *  Considering fields as properties would be currently impossible because respective post processors inject fields after instantiation instead of while processing property values. Using of the property accessor interface (DirectFieldAccessor for fields) would transform injection into a member agnostic process moving the decision whether or not to treat fields as properties back to post processor itself. Resource annotation target declares methods prior fields and Autowired vice versa witch might be used as guideline to treat ambiguities that would appear by execution order.  While this proposition is technically quite easy it will include a quite radical post processing hook change so as a downside a switch is required to enable it.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-12-18T19:17:17Z","2012-06-19T09:36:14Z"
"","10017","Collection type resolver considering only lower bound of wildcard [SPR-5344]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-5344](https://jira.spring.io/browse/SPR-5344?redirect=false)** and commented  GenericCollectionTypeResolver.extractTypeFromParameterizedType seems to be returning lower bound of the wildcard. Hence DependencyDescriptor.getCollectionType for field List","closed","type: enhancement,","spring-projects-issues","2008-12-08T20:07:29Z","2012-06-19T03:47:24Z"
"","9965","Add support for parameterized JUnit 4 tests in the Spring TestContext Framework [SPR-5292]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-5292](https://jira.spring.io/browse/SPR-5292?redirect=false)** and commented  SpringJUnit4ClassRunner is unaware of `@Parameters` annotation that normally is processed with JUnit's own Parameterized runner.  ---  **Affects:** 2.5.6  **Attachments:** - [ConstructorArgFromSpringConfigTestRunner.java](https://jira.spring.io/secure/attachment/21218/ConstructorArgFromSpringConfigTestRunner.java) (_3.71 kB_) - [junit4_SpringParameterizedRunner.java](https://jira.spring.io/secure/attachment/17241/junit4_SpringParameterizedRunner.java) (_5.60 kB_) - [ParameterizedDirtiesContext.java](https://jira.spring.io/secure/attachment/21380/ParameterizedDirtiesContext.java) (_5.29 kB_) - [SpringJUnit4ParameterizedClassRunner.java](https://jira.spring.io/secure/attachment/19038/SpringJUnit4ParameterizedClassRunner.java) (_22.37 kB_) - [SpringJUnit4ParameterizedClassRunner.java.v2](https://jira.spring.io/secure/attachment/21116/SpringJUnit4ParameterizedClassRunner.java.v2) (_3.20 kB_) - [SpringParameterizedRunner.java](https://jira.spring.io/secure/attachment/15689/SpringParameterizedRunner.java) (_5.03 kB_)  **Issue Links:** - #12387 Provide `@Rule` alternative to SpringJUnit4ClassRunner - #7791 Junit4 support  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/b9c8f104c6f2db8c8462334e1ccfa172932fd51e, https://github.com/spring-projects/spring-framework-issues/commit/239b3fe58d5cdeca374e2013993134eb3088327e  42 votes, 46 watchers","closed","has: votes-jira,","spring-projects-issues","2008-11-12T21:05:17Z","2020-07-29T13:01:03Z"
"","10538","exposeAccessContext doesn't resolve the issues with secure JMS and WebLogic. [SPR-5869]","**[Troy Harris](https://jira.spring.io/secure/ViewProfile.jspa?name=tlh1005)** opened **[SPR-5869](https://jira.spring.io/browse/SPR-5869?redirect=false)** and commented  Has the addition of exposeAccessContext been tested and verified with WebLogic?  I have tested this with the different installation and also have seen one post in the Spring Forums where this is not working either.  I get one of two failures based on what I pass in using the jndiName property tag used to do the look-up.  If I used the real JNDI name then I get:  Cannot resolve reference to bean 'queueConnectionFactory' while setting bean prope rty 'connectionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with n ame 'queueConnectionFactory' defined in ServletContext resource [/WEB-INF/spring-config/infrastructure-config.xml]: Invocation o f init method failed; nested exception is java.lang.IllegalAccessError: class weblogic.jms.client.$Proxy235 cannot access its su perinterface weblogic.jms.client.Reconnectable.  If I use the JNDI name based on the res-ref then I get ""access denied"", and authentication failure on the send from WebLogic, so the required credentials have still been lost along the way.  Here is my config:  \ \ \ \simple\ \jmsuser\ \jmspassword\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  ---  **Affects:** 2.5.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=63338  This issue is a sub-task of #9397  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59b8a139d72463fbf324e851a9e6daf918fe1b22  1 votes, 5 watchers","closed","type: task,","spring-projects-issues","2009-06-25T07:14:40Z","2019-01-11T17:15:25Z"
"","10458","Wrong MSSQL Exception Translation - BadSqlGrammarException [SPR-5788]","**[Troy Campano](https://jira.spring.io/secure/ViewProfile.jspa?name=campano)** opened **[SPR-5788](https://jira.spring.io/browse/SPR-5788?redirect=false)** and commented  It appears we're getting an incorrect translation of this MSSQL JDBC Exception: microsoft.sqlserver.jdbc.SQLServerException: Cannot open database ""ABC"" requested by the login. The login failed.  which is translated to: org.springframework.jdbc.BadSqlGrammarException: SqlMapClient operation; bad SQL grammar []; nested exception is com.ibatis.common.jdbc.exception.NestedSQLException:    --- The error occurred in com/foo/app/Map.xml --- The error occurred while executing query...  Assuming this is related to #6526. If that's the case, the MSSQL SQL State for this exception is: S0001  ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1a790688f4bd2475a74b981a9c28ea0af8028e84","closed","type: bug,","spring-projects-issues","2009-05-27T02:30:22Z","2019-01-11T17:32:53Z"
"","10528","ManagedOperation can not be used on getter [SPR-5859]","**[tomliliu](https://jira.spring.io/secure/ViewProfile.jspa?name=tomliliu)** opened **[SPR-5859](https://jira.spring.io/browse/SPR-5859?redirect=false)** and commented  Hi,  I'd like to understand why `@ManagedOperation` can not be used on getter.  I want some expensive metrics not exposed as attribute but retrieved by explicitly invoking the getter operation. Ideally, I'd like to put `@ManagedOperation` on top of the getter method to do that.  Here is a use case:  `@ManagedResource` public class Resource { `@ManagedOperation` public ExpensiveMetric getExpensiveMetric() { //collecting the expensive metrics .... return ...; } }  Because the computation is expensive, we want to avoid unnecessary computations. If we expose it as ManagedAttribute then a lot of unnecessary compuations will happen because visualvm will retrieve all attribute values even if the user is not interested in the expensive metrics at that moment. So that's the reason why we want to expose getExpensiveMetric as operation instead of attribute. And also, I am reluctant to change api only for the sake of exposing it as operation.  Thanks, Tom  ---  **Affects:** 2.5.6  **Issue Links:** - #10695 Spring Reference Documentation is missing documentation of restrictions of ManagedAttribute and ManagedOperation (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aa08c11976766ecb752302d651d79deb599d971d","closed","type: enhancement,","spring-projects-issues","2009-06-23T14:33:34Z","2019-01-11T17:16:01Z"
"","10284","Provide support for context hierarchies in the TestContext Framework [SPR-5613]","**[Tomasz Wysocki](https://jira.spring.io/secure/ViewProfile.jspa?name=tawek)** opened **[SPR-5613](https://jira.spring.io/browse/SPR-5613?redirect=false)** and commented  #### Status Quo  Currently the TestContext framework supports creating only _flat_, non-hierarchical contexts. There is no easy way to create contexts with parent-child relationships.  ---  #### Goals  - Add support for creating a test context with a parent context. - Configuration in the TestContext framework should allow for any number of levels in the context hierarchy. - Different levels in the context hierarchy may have different types of contexts (e.g., XML or annotation classes).  ###### Example Hierarchies  - Root `WebApplicationContext`","closed","has: votes-jira,","spring-projects-issues","2009-03-25T21:11:22Z","2019-01-13T21:50:26Z"
"","10657","closeResources method in JdbcUtils [SPR-5989]","**[Tomasz Pik](https://jira.spring.io/secure/ViewProfile.jspa?name=pikus)** opened **[SPR-5989](https://jira.spring.io/browse/SPR-5989?redirect=false)** and commented  Please, add one more utility method to JdbcUtils, maybe 'closeResources', with three arguments: Connection, Statement, ResultSet. That will allow developers to reduce number of calls to currently existing 'closeXxx' methods.   --- No further details from [SPR-5989](https://jira.spring.io/browse/SPR-5989?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-08-06T21:42:48Z","2012-06-19T09:36:16Z"
"","10652","Invalid reference to spring version in MultipartResolver javadocs [SPR-5984]","**[Tomasz Pik](https://jira.spring.io/secure/ViewProfile.jspa?name=pikus)** opened **[SPR-5984](https://jira.spring.io/browse/SPR-5984?redirect=false)** and commented  Javadocs for MultipartResolver interface (http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/multipart/MultipartResolver.html) referencing 'current version of spring' as 2.5 ('There is only one concrete implementation included in Spring, as of Spring 2.5: '). It should be updated to 3.0.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c8332a6c4e9fef73d7bf0e01480f75b0b83af6f, https://github.com/spring-projects/spring-framework/commit/104f13e43ff2588e438e00f7ecf758b1846b1a4f  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2009-08-05T19:03:06Z","2012-06-19T03:44:16Z"
"","10651","Outdated reference to COS upload in documentation [SPR-5983]","**[Tomasz Pik](https://jira.spring.io/secure/ViewProfile.jspa?name=pikus)** opened **[SPR-5983](https://jira.spring.io/browse/SPR-5983?redirect=false)** and commented  There's a sample of XML configuration for COS upload in reference manual for upload: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch16s08.html But it looks that COS upload is no longer supported by spring - class CosMultipartResolver  is not included in spring 3.0.0M3 (as well as in spring 2.5.x). Please, update reference manual by removing references to COS.   ---  **Affects:** 3.0 M3","closed","type: task,","spring-projects-issues","2009-08-05T19:00:18Z","2010-09-09T04:19:38Z"
"","10565","Add support for multiple TransactionManagers using @Transactional annotation [SPR-5896]","**[Tom Spencer](https://jira.spring.io/secure/ViewProfile.jspa?name=fiznool)** opened **[SPR-5896](https://jira.spring.io/browse/SPR-5896?redirect=false)** and commented  It would be great to have support for using the `@Transactional` annotation in a multipe TransactionManager environment, providing declarative transaction demarcation support for multiple SessionFactories. One idea suggested in the forum link is to create the multiple TransactionManager beans in the Application Context XML file, and give them unique names - then add a field to the `@Transactional` annotation, so we could then reference the TransactionManager by name in the Service method.  For example:  ```xml                                     ```  Then, in the application code:  ``` @Transactional(name=""txManager1"") public String getFoo() {     return dao.find(""foo""); } ```  ``` @Transactional(name=""txManager2"") public String getBar() {     return dao.find(""bar""); } ```    ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=27754","closed","type: enhancement,","spring-projects-issues","2009-07-03T20:55:25Z","2012-06-19T03:42:58Z"
"","10618","Weaving spring-aspects corrupts class causing bad class file, bad signature on compilation of unwoven sub-classes. [SPR-5949]","**[Tom Denley](https://jira.spring.io/secure/ViewProfile.jspa?name=scarytom)** opened **[SPR-5949](https://jira.spring.io/browse/SPR-5949?redirect=false)** and commented  I am having an issue compiling a class that extends an `@Configurable` class from a jar that I have woven with spring-aspects using aspectjweaver. Compilation fails with: [javac] C:\Eclipse\workspaces\madrid2\AspectJSandPit\unwovensrc\unwoven\FancyDomainLogicImpl.java:7: cannot access woven.FancyDomainLogic [javac] bad class file: C:\Eclipse\workspaces\madrid2\AspectJSandPit\build\jar\Woven.jar(woven/FancyDomainLogic.class) [javac] bad signature: Pwoven/Dom [javac] Please remove or make sure it appears in the correct subdirectory of the classpath. [javac] import woven.FancyDomainLogic; [javac]              ^ [javac] 1 error This bug did not occur using aspectjweaver version 1.6.3, but does in 1.6.4 and 1.6.5. I've tried versions 2.5.5, 2.5.6 and 3.0M3 of Spring and they all exhibit the fault.  I believe the problem to be connected to the use of generics in my classes. I have reduced this down to a four-class test case, which I will attempt to detail below.  public class DomainObject\ { } public class DomainLogic { } `@Configurable` public class FancyDomainLogic extends DomainLogic { }  I compile and Jar up these three empty classes, then weave the jar to add the spring aspects. I then compile the following class against the woven jar:  public class FancyDomainLogicImpl  extends FancyDomainLogic { }  This last step gives the described compilation failure.   ---  **Affects:** 2.5.5, 2.5.6, 3.0 M3","closed","in: core,","spring-projects-issues","2009-07-21T20:06:33Z","2012-06-19T03:43:42Z"
"","10232","Incorrect injection type, when setting a generic parameterized property [SPR-5561]","**[Timo Rumland](https://jira.spring.io/secure/ViewProfile.jspa?name=patb)** opened **[SPR-5561](https://jira.spring.io/browse/SPR-5561?redirect=false)** and commented  Problem with injecting a generic property. Spring should detect the correct type of the class attribute, but it only injects a String. Problem can be reproduced with this two simple classes:  ``` public class GenericInjectTest {   private Ship< Integer > ship = new Ship< Integer >();    private void beanInit() {     System.out.println( ship.getData() );     System.out.println( ship.getData().getClass() );   }    public Ship< Integer > getShip() {     return ship;   }    public void setShip( Ship< Integer > ship ) {     this.ship = ship;   } } ```  (the beanInit method gets called by Spring, it is defined as the default bean init method).  ``` public class Ship< T > {   private T data;    public T getData() {     return data;   }    public void setData( T data ) {     this.data = data;   } } ```  Here is the (important part of the) Spring context configuration:  ```xml      ```  Looking at the bean definition, we can see that I want to set the property ""ship.data"" to ""123"". Since ship is parameterized with ""Integer"" in the GenericInjectTest class, I would think that Spring is able to detect the correct runtime type, which is Integer, and would convert the ""123"" to a real Integer.  But this is not the case. When I run the program, the line  ``` System.out.println( ship.getData() ); ```  prints ""123"". But the next line  ``` System.out.println( ship.getData().getClass() ); ```  throws the exception  ``` java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer ```  So Spring has injected a String for the property ""ship.data"", not an Integer.   ---  **Affects:** 2.5.4, 2.5.5, 2.5.6  **Reference URL:** http://forum.springframework.org/showthread.php?p=230821  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-10T10:47:34Z","2015-09-22T17:34:33Z"
"","10029","break circular dependency of optional import package org.springframework.orm.support in context [SPR-5356]","**[Tim Diekmann](https://jira.spring.io/secure/ViewProfile.jspa?name=tdiekmann)** opened **[SPR-5356](https://jira.spring.io/browse/SPR-5356?redirect=false)** and commented  The spring-context.jar distribution file has an optional dependency on org.springframework.orm.support. spring-orm.jar provides this package and depends on spring-tx for dao. spring-tx.jar depends on org.springframework.context through an optional dependency.  I don't understand how and why it builds in Maven, but it is broken for other build environments. Can you simply remove the orm reference from spring-context.jar to break the cycle?   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2008-12-11T15:23:08Z","2019-01-12T05:33:50Z"
"","10728","Support late detection of ApplicationListener interface in objects returned from @Bean methods [SPR-6060]","**[Thomas](https://jira.spring.io/secure/ViewProfile.jspa?name=tweise)** opened **[SPR-6060](https://jira.spring.io/browse/SPR-6060?redirect=false)*** and commented  Issue attempting to directly implement multiple unrelated interfaces (business interface plus ApplicationListener) in a JavaConfig managed bean (****JavaConfig 1.0.0.M4****).  Either the generated proxy and or behavior of the container with regard to ApplicationListener support are not as expected.  Attached is a single class test case to demonstrate the issue. Switch return type in configuration and observe the change in behavior:  * For return type EchoService, JdkDynamicAopProxy exposed will implement ApplicationListener but bean not receive events (wrong?!). * For return type EchoServiceImpl, JdkDynamicAopProxy is returned instead (wrong?!), and the bean receives events!    ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=76853  **Attachments:** - [aop-config.xml](https://jira.spring.io/secure/attachment/15903/aop-config.xml) (_499 bytes_) - [JavaConfigMultipleInterfaces.java](https://jira.spring.io/secure/attachment/15661/JavaConfigMultipleInterfaces.java) (_4.05 kB_) - [MultipleInterfacesRepro.java](https://jira.spring.io/secure/attachment/15900/MultipleInterfacesRepro.java) (_3.35 kB_) - [SPR6060Tests.java](https://jira.spring.io/secure/attachment/15902/SPR6060Tests.java) (_2.27 kB_) - [TestContext.xml](https://jira.spring.io/secure/attachment/15901/TestContext.xml) (_669 bytes_)","closed","type: enhancement,","spring-projects-issues","2009-09-01T09:13:13Z","2012-06-19T03:44:01Z"
"","10598","Revise reference manual coverage for SimpleJdbcCall and the use of default parameter values [SPR-5929]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-5929](https://jira.spring.io/browse/SPR-5929?redirect=false)** and commented  Clarify refrerence manual with regards to SimpleJdbcCall and the use of withoutProcedureColumnMetaDataAccess, useInParameterNames and default values for some in parameters.   ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showpost.php?p=250652&postcount=5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aeee120431985106376dffb190769fb7e1ca1261","closed","type: enhancement,","spring-projects-issues","2009-07-15T01:32:07Z","2012-06-19T03:43:25Z"
"","10475","Enhance BeanPropertyRowMapper to map Collection type properties with data provided in arrays or result sets [SPR-5805]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-5805](https://jira.spring.io/browse/SPR-5805?redirect=false)** and commented  Currently the mapper handles single value properties. It would be nice if Collection\ could be automatically mapped as well. This would include data returned as arrays or as result-sets.   ---  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-05T02:29:36Z","2015-09-22T16:55:21Z"
"","10404","JavaDocs are hard to read with fully qualified names for java.lang, java.util and other non-Spring classes [SPR-5734]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-5734](https://jira.spring.io/browse/SPR-5734?redirect=false)** and commented  JavaDocs are hard to read with fully qualified names for java.lang, java.util and other non-Spring classes   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/54c768de5d469a320ca0d07302bbfdbf3b8eed8f","closed","type: enhancement,","spring-projects-issues","2009-05-08T10:36:00Z","2012-06-19T03:44:08Z"
"","10241","Change MapSqlParameterSource to SqlParameterSource in executeFunction and executeObject methods [SPR-5570]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-5570](https://jira.spring.io/browse/SPR-5570?redirect=false)** and commented  Change MapSqlParameterSource to SqlParameterSource in executeFunction and executeObject methods - see http://forum.springframework.org/showthread.php?t=68846   ---  **Affects:** 2.5.6, 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4dc4ce32758d916a51a5953563be56a21531c9f2","closed","type: enhancement,","spring-projects-issues","2009-03-12T14:47:50Z","2012-06-19T03:47:14Z"
"","10109","SimpleJdbcCall doesn't retrieve out value from function call for MS SQLServer [SPR-5435]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-5435](https://jira.spring.io/browse/SPR-5435?redirect=false)** and commented  SimpleJdbcCall doesn't retrieve out value from function call for MS SQLServer using the following code:  create function dbo.f_calculate() returns varchar(20) begin return 'world' end      Object out = new SimpleJdbcCall(ds)             .withFunctionName(""f_calculate"")             .withSchemaName(""dbo"")             .executeFunction(String.class, Collections.emptyMap());     System.out.println("">> "" + out);    ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springframework.org/showthread.php?t=66427  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b1c6ae99c4380433f06bfebcccfce72b5f15d3b4","closed","type: bug,","spring-projects-issues","2009-01-27T05:03:49Z","2012-06-19T03:46:50Z"
"","9877","SqlInOutParameter needs a constructor accepting scale  [SPR-5204]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-5204](https://jira.spring.io/browse/SPR-5204?redirect=false)** and commented  SqlParameter and SqlOutParameter has a constructor accepting a scale argument.  This is also needed for SqlInOutParameter.  We should add an SqlInOutParameter(String name, int sqlType, int scale)  constructor.  ---  **Affects:** 2.5.5  **Issue Links:** - #8397 SqlOutParameter should support scale","closed","type: enhancement,","spring-projects-issues","2008-10-08T02:25:10Z","2019-01-11T15:23:16Z"
"","10039","@RequestMapping is not resolved with springsource dm-server-ee-1.0.1 [SPR-5366]","**[Thomas Koeppen](https://jira.spring.io/secure/ViewProfile.jspa?name=tkoeppen)** opened **[SPR-5366](https://jira.spring.io/browse/SPR-5366?redirect=false)** and commented  we have the following configuration, that works fine with dm-server 1.0.1 (spring 2.5.6), but fails with dm-server-ee-1.0.1 (imported lib org.springframework.spring.instrumented)  application-web.xml  ```      ```  ``` class com.foo.api.FooController  @Controller(""fooController"") public class FooController extends MultiActionController implements HandlerExceptionResolver {  @RequestMapping(""/name"") 	public ModelAndView listTags(@RequestParam(required=false, value=""aVar"") String aVar) { .... ```  /name was not resolved  > [2008-12-16 18:54:50.351] TP-Processor2                        org.springframework.web.servlet.PageNotFound.unknown W No mapping found for HTTP request with URI [/name] in DispatcherServlet with name 'foo-DispatcherServlet'  currently i am uncertain, if it is false configuration on our side, a dm-server bug or springframework issue, so creating this issue here first   ---  **Affects:** 2.5.6","closed","in: web,","spring-projects-issues","2008-12-16T03:57:19Z","2019-01-11T16:23:56Z"
"","10843","Prototype bean instantiation error on repeated instantiations [SPR-6175]","**[Thomas Biskup](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.biskup@quinscape.de)** opened **[SPR-6175](https://jira.spring.io/browse/SPR-6175?redirect=false)** and commented  I happened to stumble upon a strange prototype instantiation behaviour which I could narrow down to the following example:  AppContext:  \  \           	       \  Example class:  package test.appcontext;  import org.springframework.context.support.ClassPathXmlApplicationContext;  public class ClassPathAppContextMain {      public static void main(String[] args) {     	ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(""test/appcontext/string-prototype.xml"");     	String n1 = (String) context.getBean(""name"");     	String n2 = (String) context.getBean(""name"");     }  }  Starting the example leads to the following crash:  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'name' defined in class path resource [test/appcontext/string-prototype.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [java.lang.String]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:254) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:925) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:823) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:283) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:880) at test.appcontext.ClassPathAppContextMain.main(ClassPathAppContextMain.java:10) Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [java.lang.String]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:111) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:248) ... 11 more Caused by: java.lang.IllegalArgumentException: argument type mismatch at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:513) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100) ... 13 more  When you remove the 'scope=""prototype""' attribute in the app context definition, the sample works. What is the problem with the prototype scope and constructor based instantiation?   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-10-01T16:18:58Z","2019-01-12T16:39:00Z"
"","10717","CronTriggerBean.afterPropertiesSet method throws a ParseException, should be an Exception, like in InitializingBean interface. [SPR-6048]","**[Theo GÃ¼lcher](https://jira.spring.io/secure/ViewProfile.jspa?name=gulcher)** opened **[SPR-6048](https://jira.spring.io/browse/SPR-6048?redirect=false)** and commented  org.springframework.scheduling.quartz.CronTriggerBean implements InitializingBean  In the method afterPropertiesSet it changes the throws Exception of InitializingBean into an ParseException.  I made an ConfigurableCronTriggerBean which extends org.springframework.scheduling.quartz.CronTriggerBean. In the afterPropertiesSet, I can only throw a ParseException and not my own Exception class.  I think this is a bug.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/414d6633eab662b877c2c8fb2006d2c02e94d194","closed","type: enhancement,","spring-projects-issues","2009-08-27T22:58:49Z","2012-06-19T03:43:04Z"
"","10763","Wrong class name in the O/X Mapping exception hierarchy diagram [SPR-6095]","**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[SPR-6095](https://jira.spring.io/browse/SPR-6095?redirect=false)** and commented  Reference doc, page 370 (as of M4). The O/X Mapping exception hierarchy class diagram shows a class called GenericMarshallingFailureException. The real name of this class is simply MarshallinException.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8303d4945e63d2df4f2ed5c632b630facc187580","closed","type: bug,","spring-projects-issues","2009-09-10T00:32:56Z","2012-06-19T03:44:15Z"
"","10395","Typos in Spring REST documentation [SPR-5725]","**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[SPR-5725](https://jira.spring.io/browse/SPR-5725?redirect=false)** and commented  In the reference doc, Spring REST section, there are two typos: * page 463 ""for converting for converting"" * pages 469 ""`@ExceptionHandling`"" should be ""`@ExceptionHandler`""    ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/51f539b0ad4d1e7af9c9c3a4ace5ba1756e4fe2e","closed","type: bug,","spring-projects-issues","2009-05-07T05:06:55Z","2012-06-19T03:43:43Z"
"","10187","RestTemplate should encode the url variables [SPR-5516]","**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[SPR-5516](https://jira.spring.io/browse/SPR-5516?redirect=false)** and commented  The RestTemplate does not encode the url variables. The following line:  ``` template.postForLocation(""http://twitter.com/statuses/update.xml?status={status}"", """", ""Ho Ho""); ```  Results in an exception:  ``` Exception in thread ""main"" java.lang.IllegalArgumentException 	at java.net.URI.create(URI.java:842) 	at org.springframework.web.util.UriTemplate.expand(UriTemplate.java:140) 	at org.springframework.web.client.core.RestTemplate.execute(RestTemplate.java:266) 	at org.springframework.web.client.core.RestTemplate.postForLocation(RestTemplate.java:203) 	at test.RestClientTest.main(RestClientTest.java:30) Caused by: java.net.URISyntaxException: Illegal character in query at index 48: http://twitter.com/statuses/update.xml?status=Ho Ho 	at java.net.URI$Parser.fail(URI.java:2809) 	at java.net.URI$Parser.checkChars(URI.java:2982) 	at java.net.URI$Parser.parseHierarchical(URI.java:3072) 	at java.net.URI$Parser.parse(URI.java:3014) 	at java.net.URI.(URI.java:578) 	at java.net.URI.create(URI.java:840) 	... 4 more ```  ---  **Affects:** 3.0 M2  **Issue Links:** - #16441 Unable to retrieve FlashMap when contains ""+""(half-space) in the request parameters - #10957 UrlPathHelper is too aggressive decoding URLs - #10962 Spring:url tag should not use application/x-www-form-urlencoded encoding  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2009-02-23T00:54:41Z","2019-01-11T16:46:27Z"
"","10186","NPE when passing null as a request to RestTemplate.postForLocation [SPR-5515]","**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[SPR-5515](https://jira.spring.io/browse/SPR-5515?redirect=false)** and commented  The following line of code produces a NPE (template is a RestTemplate):  ``` template.postForLocation(""http://..."", null); ```  ``` Exception in thread ""main"" java.lang.NullPointerException 	at org.springframework.web.client.core.RestTemplate.postForLocation(RestTemplate.java:201) ```    ---  **Affects:** 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c0edc2b9ddbc8c65cf2aab7cc05b71593b6daf4","closed","type: bug,","spring-projects-issues","2009-02-23T00:47:54Z","2012-06-19T03:47:06Z"
"","10117","Add a getter for simpleJdbcTemplate in AbstractTransactionalJUnit4SpringContextTests & AbstractTransactionalTestNGSpringContextTests [SPR-5443]","**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[SPR-5443](https://jira.spring.io/browse/SPR-5443?redirect=false)** and commented  Access to the simpleJdbcTemplate field from an inner class of a transactional SpringContextTest looks something like this now:  ``` MyTestClass.this.simpleJdbcTemplate.query.... ```  It would be more readable to replace the above with a call to a getter:  ``` getSimpleJdbcTemplate().query... ```  I ran into this while writing JBehave scenarios that extend SpringContextTest transactional support classes. In this case, it's quite natural to write the scenario  Steps as an inner class as they bear no meaning outside the scope of the test.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-29T18:13:27Z","2012-06-19T02:28:28Z"
"","10206","typo: AntPatchStringMatcher [SPR-5535]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-5535](https://jira.spring.io/browse/SPR-5535?redirect=false)** and commented  Seems there's an superfluous ""c"" in the name..   ---  **Affects:** 3.0 M2  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2009-03-01T06:04:51Z","2012-06-19T03:47:42Z"
"","10253","TransactionAwareInvocationHandler#toString is not returning generated string [SPR-5582]","**[Tadaya Tsuyukubo](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaya)** opened **[SPR-5582](https://jira.spring.io/browse/SPR-5582?redirect=false)** and commented  TransactionAwareInvocationHandler class treats toString method special by indicating proxy class is called. Currently it is generating a message but not returning it. Atached is a patch to just return generated string for toString method call.   ---  **Affects:** 3.0 M1, 3.0 M2  **Attachments:** - [TransactionAwareDataSourceProxy.patch](https://jira.spring.io/secure/attachment/15225/TransactionAwareDataSourceProxy.patch) (_734 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a70f525d4e94674a28d36888aa8cb5ac400630eb","closed","in: core,","spring-projects-issues","2009-03-18T04:43:27Z","2012-06-19T03:47:11Z"
"","10556","tiles2's AbstractSpringPreparerFactory's logic is wrong [SPR-5886]","**[Szabolcs Zsiros](https://jira.spring.io/secure/ViewProfile.jspa?name=zsszabolcs)** opened **[SPR-5886](https://jira.spring.io/browse/SPR-5886?redirect=false)** and commented  Here is a part of the org.springframework.web.servlet.view.tiles2.AbstractSpringPreparerFactory's code:      if (servletRequest == null && tilesApplicationContext == null) {          throw new IllegalStateException(""SpringBeanPreparerFactory requires either a "" +                    ""ServletRequest or a ServletTilesApplicationContext to operate on"");     }     WebApplicationContext webApplicationContext = RequestContextUtils.getWebApplicationContext(               servletRequest, tilesApplicationContext.getServletContext());  What if servletRequest is not null, but tilesApplicationContext is? It throws a NullPointerException, although it should work properly, right? It needs an additional if or so... For example:      WebApplicationContext webApplicationContext = RequestContextUtils.getWebApplicationContext(               servletRequest, tilesApplicationContext == null ? null : tilesApplicationContext.getServletContext());    ---  **Affects:** 2.5.6","closed","type: bug,","spring-projects-issues","2009-07-01T23:17:34Z","2012-06-19T03:43:08Z"
"","10578","Allow MBeanServerFactoryBean to specify PlatformMBeanServer explicitly [SPR-5909]","**[Support Tech](https://jira.spring.io/secure/ViewProfile.jspa?name=support)** opened **[SPR-5909](https://jira.spring.io/browse/SPR-5909?redirect=false)** and commented  Added on behalf of customer:  Add functionality to MBeanServerFactoryBean to be able to specify that the platform manager returned by MBeanServer (ManagementFactory.getPlatformMBeanServer()) be returned when a constant agent id such as ""platform"" is used rather than creating a new server or returning one based on an agent id.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0bb838259a9ff85fb5286233c76b95826469a5c  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-07-08T03:09:53Z","2012-06-19T03:44:01Z"
"","10081","Usage of  special characters as part of form element name. [SPR-5408]","**[Sunil Mudigonda](https://jira.spring.io/secure/ViewProfile.jspa?name=sunil.msk)** opened **[SPR-5408](https://jira.spring.io/browse/SPR-5408?redirect=false)** and commented  Currently we have a problem using a "":"" as part of the name attribute of a form element, for example: . We are required to keep the colon there.  We have configured Spring to map this form element to a bean property, but can't figure out how to do this. The mapping from abc:def to bean properties is direct, so our bean setter would have to be called ""setAbc:def()"", which is ofcourse not valid Java.  We need a way to influence the name somewhere along the line to match the form element name to the bean property.   ---  **Affects:** 2.5.5  **Reference URL:** http://forum.springframework.org/showthread.php?t=65921","closed","status: declined,","spring-projects-issues","2009-01-13T20:24:37Z","2019-01-12T16:27:30Z"
"","10671","Improve CastorMarshaller support for loading class descriptors [SPR-6003]","**[Stevo SlaviÄ](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-6003](https://jira.spring.io/browse/SPR-6003?redirect=false)** and commented  Spring framework's CastorMarshaller currently supports specifying class descriptors only via mapping XML files or by defining a single class. Please extend support for specifying multiple classes via packages (string array) and possibly via classes (class array) too.  OXM is regularly used in context of developing web services. With contract first approach, and Castor's (directly or via castor-maven-plugin) support for generating DTO classes and their descriptor classes from XSD's, using mapping xml files is no longer needed. In fact it is advised to use descriptor classes instead of mapping XML because of value added through better support for validation, etc. It would be good if Spring OXM would come bundled with this workflow supported.  See following related castor mailing list discussion for more details: http://www.mail-archive.com/user@castor.codehaus.org/msg07593.html   ---  **Affects:** 2.5.6, 3.0 M3  **Attachments:** - [org.springframework.oxm-EnhancedCastorSupport.patch](https://jira.spring.io/secure/attachment/15621/org.springframework.oxm-EnhancedCastorSupport.patch) (_26.74 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/157a87e9103642ec49bc07dff2bcc15df4049009  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-12T02:49:48Z","2012-06-19T03:42:48Z"
"","10569","Support limiting matching to join points where the parameters have annotations of the given type(s) [SPR-5900]","**[Stevo SlaviÄ](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-5900](https://jira.spring.io/browse/SPR-5900?redirect=false)** and commented  Please support limiting matching to join points where the parameters have annotations of the given type(s). So it should be somewhat similar to `@args` but it's supposed not to look for actual argument type annotations but parameter annotations instead, e.g. to allow matching controller methods which have `@ModelAttribute` annotated parameter.  Here is the reference to a blog entry (see the comments too) with an example where this would be useful: http://uberwolf.blogspot.com/2009/07/aspectj-validation-for-spring-annotated.html   ---  **Affects:** 2.5.6  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-07-06T04:04:16Z","2012-06-19T09:36:32Z"
"","10517","Include license info in project artifacts pom [SPR-5848]","**[Stevo SlaviÄ](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-5848](https://jira.spring.io/browse/SPR-5848?redirect=false)** and commented  Please include license info in the project maven artifacts pom. Since project is licensed under Apache License 2.0 adding following to the pom should do:           	     		The Apache Software License, Version 2.0     		http://www.apache.org/licenses/LICENSE-2.0.txt     		repo     	       All this will improve how dependency to this project artifacts is treated by all sorts of maven plug-ins and tools, like project info dependency report plugin, maven jboss license plugin, etc.  This should be applied to all sub-frameworks of spring framework as well. Maybe a spring parent module could be created for reuse, or org.apache:apache could be set as parent.   ---  **Affects:** 3.0 M3","closed","status: invalid,","spring-projects-issues","2009-06-20T21:46:23Z","2019-01-12T05:33:24Z"
"","10425","Add support for user home path ""~:"" pseudo URL [SPR-5755]","**[Stevo SlaviÄ](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-5755](https://jira.spring.io/browse/SPR-5755?redirect=false)** and commented  Please add support for referencing resources in user home via ""~:"" pseudo URL.   ---  **Affects:** 3.0 M3  **Attachments:** - [spring-core-userhomepathpseudourl.patch](https://jira.spring.io/secure/attachment/15390/spring-core-userhomepathpseudourl.patch) (_3.22 kB_)","closed","type: enhancement,","spring-projects-issues","2009-05-14T08:12:22Z","2018-12-28T11:54:31Z"
"","9892","Provide accessor for LocaleChangeInterceptor paramName [SPR-5219]","**[Stevo SlaviÄ](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-5219](https://jira.spring.io/browse/SPR-5219?redirect=false)** and commented  Please provide accessor for LocaleChangeInterceptor paramName property. If a different than default value is configured in application context file, then there is no means for acquiring that value other than hard coding it on one more place which makes maintenance harder.  If there was paramName accessor, when preparing data for view, e.g. in a spring bean component which implements org.apache.tiles.preparer.ViewPreparer with autowired LocaleChangeInterceptor, one could access paramName value and provide it to a view used for changing locale so that view can specify appropriate name of locale parameter.   ---  **Affects:** 2.5.5  **Attachments:** - [LocaleChangeInterceptor-patch.txt](https://jira.spring.io/secure/attachment/14772/LocaleChangeInterceptor-patch.txt) (_986 bytes_)","closed","type: enhancement,","spring-projects-issues","2008-10-16T19:42:46Z","2012-06-19T03:47:06Z"
"","10707","HSQLDB+Quarz using data source causes ""Unexpected token: FOR in statement "" exception [SPR-6038]","**[steveneo](https://jira.spring.io/secure/ViewProfile.jspa?name=steveneo)** opened **[SPR-6038](https://jira.spring.io/browse/SPR-6038?redirect=false)** and commented  When system start up, it throw Unexpected token: FOR in statement "" exception.  More detail at  http://forums.opensymphony.com/thread.jspa?threadID=5193&messageID=18002#18002  The configuration looks like:  ```  	 		applicationContext  		 	 		 			org.springframework.scheduling.quartz.LocalDataSourceJobStore 			org.quartz.impl.jdbcjobstore.HSQLDBDelegate 			QRTZ_ 		 	 	 		 	  ```    ---  **Affects:** 2.5.5  **Reference URL:** http://forums.opensymphony.com/thread.jspa?threadID=5193&messageID=18002#18002","closed","type: enhancement,","spring-projects-issues","2009-08-24T15:16:16Z","2012-06-19T03:43:19Z"
"","10104","Spring MVC views.properties uses xl.(class) syntax [SPR-5430]","**[Steven Libonati](https://jira.spring.io/secure/ViewProfile.jspa?name=sjlib)** opened **[SPR-5430](https://jira.spring.io/browse/SPR-5430?redirect=false)** and commented  the docs give the following example :  home.class=xslt.HomePage home.stylesheetLocation=/WEB-INF/xsl/home.xslt home.root=words  xl.class=excel.HomePage  pdf.class=pdf.HomePage  But .class apparently has been deprecated in favor of .(class)  ---  **Affects:** 3.0 M1  **Reference URL:** http://forum.springsource.org/showthread.php?t=65023  **Issue Links:** - #10892 correct reference documentation for ResourceBundleViewResolver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d293c2248c1be2b4c0283c5d1161f0fb8c713fcc","closed","type: enhancement,","spring-projects-issues","2009-01-23T07:03:08Z","2019-01-11T15:43:01Z"
"","10650","Generic getObjectType on FactoryBean should not be generic [SPR-5982]","**[Stephen Solka](https://jira.spring.io/secure/ViewProfile.jspa?name=trashhalo)** opened **[SPR-5982](https://jira.spring.io/browse/SPR-5982?redirect=false)** and commented  The method signature for getObjectType on factoryBean is: java.lang.Class","closed","type: enhancement,","spring-projects-issues","2009-08-05T06:04:42Z","2019-01-11T18:13:46Z"
"","10203","ReleasingDataSource: smarter alternative to SmartDataSource [SPR-5532]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-5532](https://jira.spring.io/browse/SPR-5532?redirect=false)** and commented  Please, provide  ``` interface ReleasingDataSource extends DataSource {   void release(Connection connection); } ```  If DataSource is ReleasingDataSource, JdbcTemplate should call rds.release(connection) instead of connection.close().  ReleasingDataSource, for example, allows connection pool implementation to return unwrapped connection.  ReleasingDataSource supersedes SmartDataSource: SingleConnectionDataSource should implement ReleasingDataSource to do nothing on release().  ReleasingDataSource allows framework users to easily add hooks on connection close events, without wrapping Connection.   ---  **Affects:** 3.0 M2","closed","type: enhancement,","spring-projects-issues","2009-02-28T12:19:33Z","2018-12-26T17:14:37Z"
"","10756","Integration of JSON mappers should be pluggable - similar to OXM [SPR-6088]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-6088](https://jira.spring.io/browse/SPR-6088?redirect=false)** and commented  At the moment the only JSON mapper supported in Spring 3.0.0.M4 is Jackson. This does however not support cyclic dependencies which are quite common in OO languages like Java. It would be great if we can make JSON support pluggable (like we have done with OXM) and add support for JSON tools (http://jsontools.berlios.de)  -Stefan   ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-09-07T19:06:27Z","2012-06-19T02:28:18Z"
"","10664","@Configurable BeanCurrentlyInCreationException thrown when not using DEBUG logging [SPR-5996]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-5996](https://jira.spring.io/browse/SPR-5996?redirect=false)** and commented  Currently a BeanCreationException is thrown if the log level is not set to DEBUG (as per code snippet below). However, the exception should never be thrown if beanFactory.isCurrentlyInCreation is true. It should log the message when in DEBUG mode, otherwise do nothing.  This issue was caused by a change made to address #10422 in Spring Framework 3.0.0.M4 committed in revision 1327.  Current code in BeanConfigurerSupport (line 152 - 162):  if (rootCause instanceof BeanCurrentlyInCreationException) { BeanCreationException bce = (BeanCreationException) rootCause; if (logger.isDebugEnabled() && this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) { logger.debug(""Failed to create target bean '"" + bce.getBeanName() + ""' while configuring object of type ["" + beanInstance.getClass().getName() + 			""] - probably due to a circular reference. This is a common startup situation "" + ""and usually not fatal. Proceeding without injection. Original exception: "" + ex); return; } } throw ex;  This should be changed to:  if (rootCause instanceof BeanCurrentlyInCreationException) { BeanCreationException bce = (BeanCreationException) rootCause; if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) { if (logger.isDebugEnabled()) { logger.debug(""Failed to create target bean '"" + bce.getBeanName() + ""' while configuring object of type ["" + beanInstance.getClass().getName() + 			       ""] - probably due to a circular reference. This is a common startup situation "" + ""and usually not fatal. Proceeding without injection. Original exception: "" + ex); } return; } } throw ex;  ---  No further details from [SPR-5996](https://jira.spring.io/browse/SPR-5996?redirect=false)","closed","in: core,","spring-projects-issues","2009-08-10T15:28:02Z","2019-01-11T18:13:33Z"
"","10460","AbstractBeanFactory.getBean(String name, Object [] args) produces inconsistent behavior [SPR-5790]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-5790](https://jira.spring.io/browse/SPR-5790?redirect=false)** and commented  AbstractBeanFactory.getBean(String name, Object [] args) does not work in conjunction with AbstractBeanFactory.getBean(String name).  Steps to replicate:  public class Test {      public Test() {         System.out.println(""default constructor called"");     }          public Test(String test) {         System.out.println(""custom constructor called "" + test);     }  }  \  public class Main { public static void main(String[] args) {       ApplicationContext applicationContext = new ClassPathXmlApplicationContext(""classpath:applicationContext.xml"");          System.out.println(applicationContext.getBean(""test"", new Object[]{""test 1""}));             //comment this out and it will perform as expected, move it one line up and the argument constructor is never called         System.out.println(applicationContext.getBean(""test""));              System.out.println(applicationContext.getBean(""test"", new Object[]{""test 2""}));  } }  output:  custom constructor called test 1 Test@1bbd23f default constructor called Test@1e845c2 default constructor called Test@3c0007  So I am getting different objects for every bean instantiated as expected for scope=""prototype"" but somehow the third call to get bean does not use the custom constructor but the default constructor instead.  It seems like there is some caching somewhere and that causes this behavior.   ---  **Affects:** 2.0.9, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3","closed","in: core,","spring-projects-issues","2009-05-27T10:38:06Z","2012-06-19T03:43:45Z"
"","10432","XML bean definition ""import"" directive doesn't work with custom resource loader [SPR-5762]","**[Stefan Podkowinski](https://jira.spring.io/secure/ViewProfile.jspa?name=spod)** opened **[SPR-5762](https://jira.spring.io/browse/SPR-5762?redirect=false)** and commented  I've written a custom resource loader that is supposed to handle protocol ""hdfs://"" and registered the loader with the XmlBeanDefinitionReader as follows:  XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context); reader.setResourceLoader(resourceLoader);  Within my application, resolving resources with the ""hdfs://"" prefix is working perfectly fine. So I was rather surprised to see the following import directive fail:  \ \ \  The following exception will occur:  Exception in thread ""main"" org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Failed to import bean definitions from relative location [hdfs:///meta/schemes/common.xml] Offending resource: file [/home/test/workspace/test/application-context.xml]; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from file [/home/test/workspace/test/hdfs:/meta/schemes/common.xml]; nested exception is java.io.FileNotFoundException: /home/test/workspace/test/hdfs:/meta/schemes/common.xml (No such file or directory) at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:76) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:201) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:147) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:132) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:475)  The problem here is that the DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource() method will use ResourcePatternUtils.isUrl() to determine if the path is relative or not. Finally if the path is a valid url or not will be based on the outcome of valuating new URL(resourceLocation). In case a MalformedUrlException is thrown, it will return false and a relative path is build in importBeanDefinitionResource().  The thing to note here is that a MalformedUrlException thrown in the java.lang.net.URL constructor will **not** indicate a syntactically incorrect url, but only an unkown protocol.  ---  **Affects:** 3.0 M3  **Attachments:** - [SPR-5762.ZIP](https://jira.spring.io/secure/attachment/15919/SPR-5762.ZIP) (_2.78 kB_)  **Issue Links:** - #11032 Cannot import bean definitions using classpath*: resource location (_**""is duplicated by""**_) - #10998 location parsing might incorrectly rely on the URL API  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bcc6413ef75b563e93bf815153babe730da64918","closed","in: core,","spring-projects-issues","2009-05-15T02:16:37Z","2019-01-11T17:33:36Z"
"","10399","Converter throws NPE when accessing property values through SEL expression [SPR-5729]","**[Stefan Podkowinski](https://jira.spring.io/secure/ViewProfile.jspa?name=spod)** opened **[SPR-5729](https://jira.spring.io/browse/SPR-5729?redirect=false)** and commented  For some reasons I'm unable to access any property values as shown in the ref. manual example. Please see stack trace and test case below.  Caused by: java.lang.NullPointerException at org.springframework.core.convert.service.GenericConversionService.findSuperConverter(GenericConversionService.java:409) at org.springframework.core.convert.service.GenericConversionService.findRegisteredSuperConverter(GenericConversionService.java:384) at org.springframework.core.convert.service.GenericConversionService.getConversionExecutor(GenericConversionService.java:217) at org.springframework.core.convert.service.GenericConversionService.executeConversion(GenericConversionService.java:172) at org.springframework.expression.spel.support.StandardTypeConverter.convertValue(StandardTypeConverter.java:55) at org.springframework.expression.spel.ExpressionState.convertValue(ExpressionState.java:119) at org.springframework.expression.spel.ast.Indexer.getValueInternal(Indexer.java:56) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:54) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:51) at org.springframework.expression.spel.SpelExpression.getValue(SpelExpression.java:66) at org.springframework.expression.common.CompositeStringExpression.getValue(CompositeStringExpression.java:68) at org.springframework.expression.common.CompositeStringExpression.getValue(CompositeStringExpression.java:1) at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:125) ... 29 more  Simple Test Case:  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration`() public class ELPropertyResourceTest {      @Value(""file://#{systemProperties['user.home']}"")     //@Value(""file:///home/spodkowinski"")  //","closed","in: core,","spring-projects-issues","2009-05-07T20:52:27Z","2012-06-19T03:43:14Z"
"","10695","Spring Reference Documentation is missing documentation of restrictions of ManagedAttribute and ManagedOperation [SPR-6026]","**[Stefan Fleiter](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan%20fleiter)** opened **[SPR-6026](https://jira.spring.io/browse/SPR-6026?redirect=false)** and commented  The Javadoc of ManagedAttribute (http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/jmx/export/annotation/ManagedAttribute.html) states ""Only valid when used on a JavaBean getter or setter "".  The Javadoc of ManagedOperation (http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/jmx/export/annotation/ManagedOperation.html) states ""Only valid when used on a method that is not a JavaBean getter or setter"".  Both facts are not part of the spring reference documentation at http://static.springsource.org/spring/docs/2.5.x/reference/jmx.html. Took some time for me to find out. Please add it to the documentation or remove the restrictions.  Also see #10528.  ---  **Affects:** 2.5.6  **Issue Links:** - #10528 ManagedOperation can not be used on getter (_**""depends on""**_)","closed","type: documentation,","spring-projects-issues","2009-08-19T03:54:49Z","2019-01-11T14:23:34Z"
"","10213","An option to allow overriding behavior in case of scanned beans [SPR-5542]","**[Srinivas Narayanan](https://jira.spring.io/secure/ViewProfile.jspa?name=srininara)** opened **[SPR-5542](https://jira.spring.io/browse/SPR-5542?redirect=false)** and commented  You are explicitly detecting conflicting bean names among scanned beans and throwing an exception. In specific scenarios (like I have in my application), I would want overriding behavior even in the case of scanned beans. Is it possible to explicitly allow this? It could be turned on by an explicit attribute definition within component-scan definition. Can it be planned to incorporated or is it already done? If you are not planning to do this can you let me know why we don't want to do it?  Thanks, nacnez  ---  **Affects:** 2.5.6  This issue is a sub-task of #9419","closed","in: core,","spring-projects-issues","2009-03-03T22:50:32Z","2019-01-11T17:00:21Z"
"","10797","Check for forwarded exception from action phase in the resource phase ?  [SPR-6129]","**[Srinivas Chmarthi](https://jira.spring.io/secure/ViewProfile.jspa?name=chamarts)** opened **[SPR-6129](https://jira.spring.io/browse/SPR-6129?redirect=false)** and commented  The doResourceService method checks for forwarded Exception thrown in Action phase. Is this really required ?  I can understand the samething in Redender Phase because of two phase.  Does the same applicable to Resource phase as well ?    ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=77780  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f75eb4f445152d7e8a07029e2c1f4810cda075e","closed","type: bug,","spring-projects-issues","2009-09-18T17:06:51Z","2012-06-19T03:43:33Z"
"","10351","No value for key [com.ibm.ws.rsadapter.jdbc.WSJdbcDataSource@2875af69] bound to thread  [SPR-5680]","**[Sri](https://jira.spring.io/secure/ViewProfile.jspa?name=schevuru)** opened **[SPR-5680](https://jira.spring.io/browse/SPR-5680?redirect=false)*** and commented  We are using IBM Websphere 7 with Spring 2.5.6 and Java 6. When we login to our application we get the following error. With Spring 2.5.2 and WAS 6, we do not get this error.  Any help appreciated.  ---  java.lang.IllegalStateException: No value for key [com.ibm.ws.rsadapter.jdbc.WSJdbcDataSource@2875af69] bound to thread [WebContainer : 0]: No value for key [com.ibm.ws.rsadapter.jdbc.WSJdbcDataSource@2875af69] bound to thread [WebContainer : 0] at com.freedomgroup.global.security.service.TFGGlobalSecurityServiceBean.login(TFGGlobalSecurityServiceBean.java:357) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:45) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:599) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.transaction.interceptor.TransactionInterceptor$1.doInTransaction(TransactionInterceptor.java:128) at org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter.run(WebSphereUowTransactionManager.java:306) at com.ibm.ws.uow.UOWManagerImpl.runUnderNewUOW(UOWManagerImpl.java:1065) at com.ibm.ws.uow.UOWManagerImpl.runUnderUOW(UOWManagerImpl.java:626) at org.springframework.transaction.jta.WebSphereUowTransactionManager.execute(WebSphereUowTransactionManager.java:252) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:123) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:160) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy28.login(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:45) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:599) at com.freedomgroup.common.servlets.TFGHttpServlet.processRequest(TFGHttpServlet.java:503)	... 21 more Caused by: java.lang.IllegalStateException: No value for key [com.ibm.ws.rsadapter.jdbc.WSJdbcDataSource@2875af69] bound to thread [WebContainer : 0] at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(TransactionSynchronizationManager.java:202) at org.springframework.jdbc.datasource.DataSourceUtils$ConnectionSynchronization.suspend(DataSourceUtils.java:400) at rg.springframework.transaction.support.AbstractPlatformTransactionManager.doSuspendSynchronizationAbstractPlatformTransactionManager.java:643) at org.springframework.transaction.support.AbstractPlatformTransactionManager.suspend(AbstractPlatformTransactionManager.java:547) at org.springframework.transaction.jta.WebSphereUowTransactionManager.execute(WebSphereUowTransactionManager.java:242) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:123) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy27.getNextID(Unknown Source) at com.freedomgroup.global.security.service.TFGGlobalSecurityServiceBean.login(TFGGlobalSecurityServiceBean.java:242)  ---  **Affects:** 2.5.6  4 votes, 5 watchers","closed","in: data,","spring-projects-issues","2009-04-16T04:24:38Z","2019-01-13T21:50:13Z"
"","10463","CLONE -Create a MultiActionFormController [SPR-5793]","**[SPH](https://jira.spring.io/secure/ViewProfile.jspa?name=sphjava)** opened **[SPR-5793](https://jira.spring.io/browse/SPR-5793?redirect=false)** and commented  Currently, form controllers (SimpleFormController, etc.) and MultiActionController belong to different inheritance hierarchies, and therefore one cannot easily use the functionality of both (which is a pretty common need.)   It would be great to have a MultiActionFormController class that would combine the features of both.   ---  **Affects:** 1.2.6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-05-28T20:43:09Z","2012-06-18T12:44:54Z"
"","10846","Using defaultContentType property in ContentNegotiatingViewResolver throws java.lang.UnsupportedOperationException [SPR-6178]","**[Sorin Jucovschi](https://jira.spring.io/secure/ViewProfile.jspa?name=jucosorin)** opened **[SPR-6178](https://jira.spring.io/browse/SPR-6178?redirect=false)** and commented  In my application I have a ContentNegotiatingViewResolver set to handle **html** , **xml** and **json**. Following is the beans declaration: \\  ```xml                                                                                                                                                            ```  //  As seen in the code I turned off **acceptHeader** and want to have a default content type of **application/xml**. When I access the page without an explicit extension I get a java.lang.UnsupportedOperationException:  java.lang.UnsupportedOperationException at java.util.AbstractList.set(AbstractList.java:115) at java.util.AbstractList$ListItr.set(AbstractList.java:412) at java.util.Collections.sort(Collections.java:121) at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:344) at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1105) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1052) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:808) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:726) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:636) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:545) ...  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10831 Using ignoreAcceptHeader and defaultContentType together causes problems. (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2009-10-02T03:51:56Z","2019-01-12T16:50:10Z"
"","10823","AbstractWizardFormController got error when name of String[] fields start with ""target"" in the form [SPR-6155]","**[Simon Lo](https://jira.spring.io/secure/ViewProfile.jspa?name=simongalaxy)** opened **[SPR-6155](https://jira.spring.io/browse/SPR-6155?redirect=false)** and commented  I built a form with AbstractWizardFormController and all the configurations are XML based. I had a String[] property named ""targetPortals"" in the form. When I clicked on ""Next"" button, a NumberFormatExpcetion was thrown for string inputs ""Portals"". I could not find any solution about this, however, when I changed the property name to other name without ""target"" as the prefix, the problem was gone. However, this limit my development to provide an easy to understand name in my HTML form. Furthermore, I cannot understand why this would be happened.  I had got other String properties start with ""target"", but only the String[] one was affected.   ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2009-09-27T20:39:51Z","2019-01-12T16:39:04Z"
"","10084","TilesConfigurer class no longer works with Tiles 2.1.1 [SPR-5411]","**[Simon Barbey](https://jira.spring.io/secure/ViewProfile.jspa?name=spydesk)** opened **[SPR-5411](https://jira.spring.io/browse/SPR-5411?redirect=false)** and commented  After upgrading Apache Tiles from version 2.1.0 to 2.1.1, the integration with Spring no longer works.  The class TilesConfigurer fails to initialize properly the Tiles environment, as visible in the stack trace :  java.lang.UnsupportedOperationException: Class org.apache.tiles.web.util.ServletContextAdapter not recognized a TilesApplicationContext at org.apache.tiles.factory.TilesContainerFactory.createContainer(TilesContainerFactory.java:219) at org.springframework.web.servlet.view.tiles2.TilesConfigurer.createTilesContainer(TilesConfigurer.java:214) at org.springframework.web.servlet.view.tiles2.TilesConfigurer.afterPropertiesSet(TilesConfigurer.java:201) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:402) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:316) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:282) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:126) at javax.servlet.GenericServlet.init(GenericServlet.java:69) at com.caucho.server.dispatch.ServletConfigImpl.createServletImpl(ServletConfigImpl.java:646) at com.caucho.server.dispatch.ServletConfigImpl.createServlet(ServletConfigImpl.java:587) at com.caucho.server.dispatch.ServletManager.init(ServletManager.java:154) at com.caucho.server.webapp.Application.start(Application.java:1654) at com.caucho.server.deploy.DeployController.startImpl(DeployController.java:621) at com.caucho.server.deploy.DeployController.restartImpl(DeployController.java:584) at com.caucho.server.deploy.StartAutoRedeployAutoStrategy.request(StartAutoRedeployAutoStrategy.java:125) at com.caucho.server.deploy.DeployController.request(DeployController.java:554) at com.caucho.server.webapp.ApplicationContainer.getApplication(ApplicationContainer.java:885) at com.caucho.server.webapp.ApplicationContainer.buildInvocation(ApplicationContainer.java:725) at com.caucho.server.host.Host.buildInvocation(Host.java:459) at com.caucho.server.host.HostContainer.buildInvocation(HostContainer.java:353) at com.caucho.server.resin.ServletServer.buildInvocation(ServletServer.java:653) at com.caucho.server.dispatch.DispatchServer.buildInvocation(DispatchServer.java:198) at com.caucho.server.hmux.HmuxRequest.handleRequest(HmuxRequest.java:415) at com.caucho.server.port.TcpConnection.run(TcpConnection.java:514) at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:520)  ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=65907  **Attachments:** - [CustomSpringTilesConfigurer.java](https://jira.spring.io/secure/attachment/15966/CustomSpringTilesConfigurer.java) (_4.97 kB_) - [CustomSpringTilesConfigurer.java](https://jira.spring.io/secure/attachment/15321/CustomSpringTilesConfigurer.java) (_3.85 kB_) - [CustomSpringTilesConfigurer.java](https://jira.spring.io/secure/attachment/15282/CustomSpringTilesConfigurer.java) (_2.86 kB_) - [CustomTilesContainerFactory.java](https://jira.spring.io/secure/attachment/15967/CustomTilesContainerFactory.java) (_9.96 kB_) - [CustomTilesContainerFactory.java](https://jira.spring.io/secure/attachment/15322/CustomTilesContainerFactory.java) (_8.42 kB_) - [CustomTilesContainerFactory.java](https://jira.spring.io/secure/attachment/15283/CustomTilesContainerFactory.java) (_6.51 kB_) - [CustomTilesListener.java](https://jira.spring.io/secure/attachment/15284/CustomTilesListener.java) (_1.64 kB_) - [CustomVelocityTilesView.java](https://jira.spring.io/secure/attachment/15968/CustomVelocityTilesView.java) (_1.79 kB_) - [SpringTilesConfigurer.java](https://jira.spring.io/secure/attachment/15238/SpringTilesConfigurer.java) (_10.97 kB_) - [TilesConfigurer.java](https://jira.spring.io/secure/attachment/15212/TilesConfigurer.java) (_10.63 kB_)  **Issue Links:** - #10280 Support Tiles 2.2 for Velocity and FreeMarker purposes - [SWF-1077](https://jira.spring.io/browse/SWF-1077) Infinite loop when using SWF + Ajax (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b13afd8917603577218576315f68a8cc2132772  11 votes, 21 watchers","closed","has: votes-jira,","spring-projects-issues","2009-01-14T02:41:29Z","2019-01-11T15:44:10Z"
"","9991","PropertyPlaceholderConfigurer always tries to replace maps due to incorrect modification check in BeanDefinitionVisitor [SPR-5318]","**[Sid Fischer](https://jira.spring.io/secure/ViewProfile.jspa?name=sid)** opened **[SPR-5318](https://jira.spring.io/browse/SPR-5318?redirect=false)** and commented  I'm programmatically creating bean definitions. One bean definition has a property value of type Map. The map keys don't contain placeholders. PropertyPlaceholderConfigurer nevertheless tries to replace the map entries because under the hood BeanDefinitionVisitor's modification check for the map keys (in visitMap()) uses an identity check and the resolveStringValue() method returns a different instance of the same string. Thus the original map is cleared and refilled with its entries despite neither the keys nor the values really changed. This is not only unnecessary, but can also lead to exceptions, e.g. when you intentionally use an unmodifiable Map implementation this will lead to the following error:  java.util.Collections$UnmodifiableMap.clear(Collections.java:1294) org.springframework.beans.factory.config.BeanDefinitionVisitor.visitMap(BeanDefinitionVisitor.java:250) org.springframework.beans.factory.config.BeanDefinitionVisitor.resolveValue(BeanDefinitionVisitor.java:192) org.springframework.beans.factory.config.BeanDefinitionVisitor.visitPropertyValues(BeanDefinitionVisitor.java:142) org.springframework.beans.factory.config.BeanDefinitionVisitor.visitBeanDefinition(BeanDefinitionVisitor.java:82) org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:265) org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:75) org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:553)   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb1631f458a822fa4da7b51ea44388344bc55d6c","closed","type: bug,","spring-projects-issues","2008-11-24T20:22:37Z","2012-06-19T03:47:02Z"
"","10857","LocalValidatorFactoryBean doesn't implement org.springframework.validation.Validator [SPR-6189]","**[Sebastian Staudt](https://jira.spring.io/secure/ViewProfile.jspa?name=koraktor)** opened **[SPR-6189](https://jira.spring.io/browse/SPR-6189?redirect=false)** and commented  LocalValidatorFactoryBean does not implement the org.springframework.validation.Validator interface. The validation configuration as described in Section [5.7.4.3](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch05s07.html#validation.mvc.jsr303) thus results in the following error on startup:  ``` Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'validator' of bean class [org.springframework.web.bind.support.ConfigurableWebBindingInitializer]: Bean property 'validator' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?         at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:850)         at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:701)         at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:78)         at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:60)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1330)         ... 52 more ```  Using the same configuration as in the example:  ```xml                                              ```  Hibernate Validator is in the classpath.   ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1","closed","","spring-projects-issues","2009-10-04T17:23:10Z","2019-01-13T07:58:05Z"
"","10099","provide class type properties for application context [SPR-5425]","**[Sebastian Dietrich](https://jira.spring.io/secure/ViewProfile.jspa?name=sebastian.dietrich)** opened **[SPR-5425](https://jira.spring.io/browse/SPR-5425?redirect=false)** and commented  Setting of class type properties is currently not possible. I'd love to see something like:  \ \ \ \com.mycompany.MyOtherClass\ \ \  for class MyClass { private class myTypeProperty;  public setMyTypeProperty(Class type) { myTypeProperty = type; } }   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-21T02:32:08Z","2012-06-19T09:36:26Z"
"","10446","Pluggable EntityResolver for iBATIS SqlMapConfigParser and SqlMapParser [SPR-5776]","**[Sean Laurent](https://jira.spring.io/secure/ViewProfile.jspa?name=organicveggie)** opened **[SPR-5776](https://jira.spring.io/browse/SPR-5776?redirect=false)** and commented  Provide the ability to plug in a different XML EntityResolver within the iBATIS SqlMapConfigParser and SqlMapParser.  Depends on the resolution of [iBATIS JIRA #602](https://issues.apache.org/jira/browse/IBATIS-602), the acceptance of that patch and a new iBATIS release.   ---  **Affects:** 2.5.6  **Attachments:** - [spring-2.5.6-entityresolver.txt](https://jira.spring.io/secure/attachment/15405/spring-2.5.6-entityresolver.txt) (_1.95 kB_)","closed","type: enhancement,","spring-projects-issues","2009-05-20T09:18:11Z","2012-06-19T09:36:29Z"
"","9929","TestContext testException is null if the Exception is thrown in the test's @Before method. [SPR-5255]","**[Scott Woods](https://jira.spring.io/secure/ViewProfile.jspa?name=swoods1)** opened **[SPR-5255](https://jira.spring.io/browse/SPR-5255?redirect=false)** and commented  In the below scenario the testException is null in the afterMethod of MyTestListener.  If the exception is throw in test method itself then testException is populated properly.  `@RunWith`(SpringJUnit4ClassRunner.class) `@TestExecutionListeners`( { MyTestListener.class }) public TestClass {  public void `@Before` public void setUp()  throws Exception { throw new Exception(); }  `@Test` public void someTest() throws Exception{ ... } }   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-10-30T03:09:25Z","2009-06-13T08:40:00Z"
"","10301","Extend Multiple @PathVariable Selection to allow delimeters other than / [SPR-5630]","**[Scott Murphy](https://jira.spring.io/secure/ViewProfile.jspa?name=scottland)** opened **[SPR-5630](https://jira.spring.io/browse/SPR-5630?redirect=false)** and commented  Currently this is not possible:  `@RequestMapping`(""{param1}-{param2}-{param3}"")  but this is: `@RequestMapping`(""{param1}/{param2}/{param3}"")  Please provide a mechanism for doing the preceding because for SEO purposes the more /'s in your URL, the more your ranking is punished.  Considering a parameter could contain a -, providing a regular expression for parameter selection could be more powerful then just specifying a delimiter.  ---  **Affects:** 3.0 M2  **Issue Links:** - #10208 ReSTful URLs with content type extension do not work properly","closed","type: enhancement,","spring-projects-issues","2009-03-29T13:39:59Z","2019-01-11T16:29:39Z"
"","10226","@PathVariable does not work when SimpleUrlHandlerMapping is used. [SPR-5555]","**[Scott Murphy](https://jira.spring.io/secure/ViewProfile.jspa?name=scottland)** opened **[SPR-5555](https://jira.spring.io/browse/SPR-5555?redirect=false)** and commented  app-servlet.xml {{ \ \ \ /find**=searchController			 \ \		 \ }}  SearchController.java {{ `@RequestMapping`(value = ""/find-{typeRegion}"") }}  {{ Exception: SEVERE: Servlet.service() for servlet directory threw exception java.lang.IllegalStateException: Could not find `@PathVariable` [typeRegion] in `@RequestMapping` at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.resolvePathVariable(AnnotationMethodHandlerAdapter.java:651) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolvePathVariable(HandlerMethodInvoker.java:461) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:245) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:135) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:336) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:323) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:824) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:769) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:613) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:525) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:619) }}   ---  **Affects:** 3.0 M2  3 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2009-03-09T10:09:42Z","2019-01-12T16:27:15Z"
"","10141","Modify RedirectView to allow 301 Permanent Redirects [SPR-5468]","**[Scott Murphy](https://jira.spring.io/secure/ViewProfile.jspa?name=scottland)** opened **[SPR-5468](https://jira.spring.io/browse/SPR-5468?redirect=false)** and commented  There are numerous occasions where I need to use a redirect view to permanently redirect traffic based on an old url.  For SEO purposes, a permanent redirect is preferred over a temporary one for transferring pagerank to the new url.  (See: http://www.mcanerin.com/EN/articles/301-redirect-scripting.asp)  Please provide a way to specify the type of redirection (permanent vs temporary) via constructor argument .  Temporary should still be used for form submissions, while permanent can be used for SEO purposes.  The need for this feature will be greater with the introduction of REST-style urls in 3.0.  ---  **Affects:** 3.0 M1  **Issue Links:** - #10812 `@ResponseStatus` annotation is ignored in an `@Controller` redirect (RedirectView)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b12503c477a99eaddb25710a8b3a88d00e1c552  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-09T08:26:32Z","2019-01-13T08:01:12Z"
"","10050","@SessionParam or @SessionAttribute Annotation for passing a Session Attribute to a Controller [SPR-5377]","**[Scott Murphy](https://jira.spring.io/secure/ViewProfile.jspa?name=scottland)** opened **[SPR-5377](https://jira.spring.io/browse/SPR-5377?redirect=false)** and commented  Add an additional Annotation for passing objects in the session to a function.  Currently it is a little cumbersome to do this because you have to pass the HttpServletRequest object to your function even if that is all you use it for.  For example:  ```java @RequestMapping(""/myController.do"") public String doGet(HttpServletRequest request) {     MyObject object = (MyObject) WebUtils.getSessionAttribute(request, ""myObject"");     return ""MyJSP""; } ```  Should be replaced with:  ```java @RequestMapping(""/myController.do"") public String doGet(@SessionParam(""myObject"") MyObject myObject) {     return ""MyJSP""; } ```  If the object is not in the session, null is passed.  Furthermore, an additional boolean parameter can be supplied to initialize the object and put it in the Session if it is not already there: e.g.:  ```java @RequestMapping(""/myController.do"") public String doGet(@SessionParam(value=""myObject"", initialize=true) MyObject myObject) {     return ""MyJSP""; } ```  If myObject is not in the session, a MyObject object will be created and placed in the Session.  ---  **Affects:** 3.0 M1  **Issue Links:** - #16171 Provide `@ModelAttribute`(required=""false"") for session attributes - #18468 Convenient access to session and request attributes in controller methods (_**""is superseded by""**_)  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-12-26T05:35:07Z","2019-01-13T08:01:43Z"
"","10028","@Qualifier no longer works in 3.0 [SPR-5355]","**[Scott Murphy](https://jira.spring.io/secure/ViewProfile.jspa?name=scottland)** opened **[SPR-5355](https://jira.spring.io/browse/SPR-5355?redirect=false)** and commented  The following code works with Spring 2.5.x but does not work with 3.0 M1  Xml:   Java Code:      @Autowired     public DirectoryDaoJdbc(@Qualifier(""v3DataSource"")javax.sql.DataSource v3DataSource, @Qualifier(""v3photoDataSource"")javax.sql.DataSource v3photoDataSource, EventDao eventDao, @Qualifier(""clientProperties"") Properties clientProperties) {     v3SimpleJdbcTemplate = new LoggingSimpleJdbcTemplate(v3DataSource);     v3photoSimpleJdbcTemplate = new LoggingSimpleJdbcTemplate(v3photoDataSource);     this.eventDao = eventDao;     this.clientProperties = clientProperties;     }  Exception:  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'directoryService' defined in file [C:\Users\smurphy\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\photographer\WEB-INF\classes\com\pictage\directory\bus\DirectoryService.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [com.pictage.directory.dao.DirectoryDao]: : Error creating bean with name 'directoryDaoJdbc' defined in file [C:\Users\smurphy\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\photographer\WEB-INF\classes\com\pictage\directory\dao\jdbc\DirectoryDaoJdbc.class]: Unsatisfied dependency expressed through constructor argument with index 3 of type [java.util.Properties]: : No unique bean of type [java.util.Properties] is defined: expected single matching bean but found 2: [clientProperties, systemProperties]; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [java.util.Properties] is defined: expected single matching bean but found 2: [clientProperties, systemProperties]; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'directoryDaoJdbc' defined in file [C:\Users\smurphy\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\photographer\WEB-INF\classes\com\pictage\directory\dao\jdbc\DirectoryDaoJdbc.class]: Unsatisfied dependency expressed through constructor argument with index 3 of type [java.util.Properties]: : No unique bean of type [java.util.Properties] is defined: expected single matching bean but found 2: [clientProperties, systemProperties]; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [java.util.Properties] is defined: expected single matching bean but found 2: [clientProperties, systemProperties] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:582) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:922) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:833) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:442) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:411) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:382) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:271) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:268) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:470) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:719) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:378) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:254) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:198) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3843) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4342) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardHost.start(StandardHost.java:719) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:516) at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) at org.apache.catalina.startup.Catalina.start(Catalina.java:578) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413) Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'directoryDaoJdbc' defined in file [C:\Users\smurphy\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\photographer\WEB-INF\classes\com\pictage\directory\dao\jdbc\DirectoryDaoJdbc.class]: Unsatisfied dependency expressed through constructor argument with index 3 of type [java.util.Properties]: : No unique bean of type [java.util.Properties] is defined: expected single matching bean but found 2: [clientProperties, systemProperties]; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [java.util.Properties] is defined: expected single matching bean but found 2: [clientProperties, systemProperties] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:582) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:922) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:833) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:442) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:411) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:382) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:271) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:268) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:721) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:660) at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:612) at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:575) ... 32 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [java.util.Properties] is defined: expected single matching bean but found 2: [clientProperties, systemProperties] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:671) at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:612) at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:575) ... 47 more   ---  **Affects:** 3.0 M1  **Attachments:** - [qualifiertest.zip](https://jira.spring.io/secure/attachment/14968/qualifiertest.zip) (_7.71 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5a04ed502b80e7340b71967d01b6034c131bd9b4","closed","in: core,","spring-projects-issues","2008-12-11T10:57:45Z","2012-06-19T03:47:01Z"
"","10217","autowiring doesn't match generics [SPR-5546]","**[Scott Battaglia](https://jira.spring.io/secure/ViewProfile.jspa?name=sbattaglia)** opened **[SPR-5546](https://jira.spring.io/browse/SPR-5546?redirect=false)** and commented  I've created my own PersonFactory class that implements ObjectFactory\ and its labeled with `@Component`.  I have a controller that has a property ""private ObjectFactory\"" with autowired=true  There is only one ObjectFactory\.  During bootstrap Spring can't seem to match the two up.  It complains there is more than one ObjectFactory.  ---  **Affects:** 3.0 M2  **Issue Links:** - #14599 Autowiring of generic types","closed","in: core,","spring-projects-issues","2009-03-05T05:01:52Z","2019-01-12T05:33:43Z"
"","10083","RequestParam can't properly parse an optional boolean parameter [SPR-5410]","**[Scott Battaglia](https://jira.spring.io/secure/ViewProfile.jspa?name=sbattaglia)** opened **[SPR-5410](https://jira.spring.io/browse/SPR-5410?redirect=false)** and commented  I'm using the Spring MVC's annotation-based support and specified a method signature as follows:  public void validateCas10Request(`@RequestParam`(value=""renew"",required=false) final boolean renew, `@RequestParam`(value=""service"",required=true) final String service, `@RequestParam`(value=""ticket"",required=true) final String ticket, final Writer writer) {  If I do not have a renew request parameter the following error is thrown: java.lang.IllegalStateException: Optional boolean parameter 'renew' is not present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.  Is there a reason that a null parameter is not converted to false, as per the JavaDoc's parseBoolean method for Boolean? http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Boolean.html#parseBoolean(java.lang.String)    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-14T02:32:49Z","2012-06-19T03:47:34Z"
"","9996","@CookieValue annotation similar to the @RequestParam annotation for populating method parameters with cookie values [SPR-5323]","**[Scott Battaglia](https://jira.spring.io/secure/ViewProfile.jspa?name=sbattaglia)** opened **[SPR-5323](https://jira.spring.io/browse/SPR-5323?redirect=false)** and commented  Currently, Spring's MVC Controller annotations support providing method parameters via Request Parameters.  It would be useful to be able to automatically retrieve cookie values and populate method parameters from them.  If this would be considered useful I could prototype something up over the holiday break.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-11-26T03:51:34Z","2012-06-19T09:36:14Z"
"","10584","@RequestParam defaultValue should accept an Object instead of String [SPR-5915]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5915](https://jira.spring.io/browse/SPR-5915?redirect=false)** and commented  The defaultValue attribute of `@RequestParam` currently accepts a String value to use when the named param is not present in the request.  It would be nice if this value could accept Objects instead.  The new type conversion system can convert types if needed.  For example, this is not possible today: `@RequestMapping`(value = ""foo"", required = false, defaultValue = 32) Integer foo  At the moment, you must pass the String representation `@RequestMapping`(value = ""foo"", required = false, defaultValue = ""32"") Integer foo   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-07-10T00:57:13Z","2009-08-25T22:03:25Z"
"","10482","Custom regex matching for @PathVariable [SPR-5812]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5812](https://jira.spring.io/browse/SPR-5812?redirect=false)** and commented  The pattern for matching `@PathVariable` values in a URI is currently fixed.  This makes it impossible for the request dispatcher to pick the intended mapping for complex mappings.  For example, the current infrastructure cannot distinguish between these two mappings:  ``` {symbolicName}-{version}.jar {symbolicName}-sources-{version}.jar ```  The ""symbolicName"" path variable is greedy, and the first mapping is selected for both values:  ``` com.example-1.0.0.jar com.example-sources-1.0.0.jar ```  The value of {symbolicName} will be ""com.example"" or ""com.example-sources"" respectively.  By specifying a custom regex pattern for the variable, a user can restrict the greediness of the first variable to the indented segment of the URI.  ``` {symbolicName:[\w\.]+}-{version:[\w\.]+}.jar {symbolicName:[\w\.]+}-sources-{version:[\w\.]+}.jar ```  It may be desirable to locate the regex in the `@PathVariable` annotation instead of in the `@RequestMapping` value.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed98bf06683cdc3e855b8e029bf07c77392a9d20","closed","type: enhancement,","spring-projects-issues","2009-06-08T02:22:24Z","2012-06-19T03:43:21Z"
"","10346","template.mf contains invalid range for org.hibernate.ejb [SPR-5685]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5685](https://jira.spring.io/browse/SPR-5685?redirect=false)** and commented  The template.mf for the org.springframework.orm bundle contains an invalid version range for org.hibernate.ejb.  It currently reads: org.hibernate.ejb;version=""[4.0.0.ga, 3.4.0)"";resolution:=optional  4.0.0.ga is greater then 3.4.0.   --- No further details from [SPR-5685](https://jira.spring.io/browse/SPR-5685?redirect=false)","closed","in: core,","spring-projects-issues","2009-04-18T04:32:26Z","2012-06-19T03:42:50Z"
"","10276","spring:url tag should use htmlEscape instead of escapeXml for entity encoding [SPR-5605]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5605](https://jira.spring.io/browse/SPR-5605?redirect=false)** and commented  The spring:url tag currently uses 'escapeXml' as a tag attribute to indicate the value should be XML entity encoded.  Other spring and form tags use 'htmlEscape' instead.  This property can be set locally or page wide.  Also consider supporting 'javaScriptEscape'.   ---  **Affects:** 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/99fa91d56e221fdcd8b55243d10e6905aef06ac4","closed","type: enhancement,","spring-projects-issues","2009-03-24T02:43:41Z","2012-06-19T03:47:03Z"
"","10103","Update Pet Clinic to use HSQL as an embedded database [SPR-5429]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5429](https://jira.spring.io/browse/SPR-5429?redirect=false)** and commented  The Pet Clinic sample application currently uses an external HSQL or MySQL database.  An embedded HQSL database is much easier for users to get up an running.  The old data source configurations can remain commented for those still wishing to use an external database.  ---  **Affects:** 3.0 M1  This issue is a sub-task of #10156  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7dcb3b5841ee5dec13b64cfd038c2134174a6a49, https://github.com/spring-projects/spring-framework/commit/16c939106973ea4ce688494bfce250e78e9b323b, https://github.com/spring-projects/spring-framework/commit/300e4d72842dbd4fffc3abb2685a06f7701e2936","closed","type: documentation,","spring-projects-issues","2009-01-23T04:32:42Z","2019-01-11T15:43:54Z"
"","10040","PathVariable mappings are greedy over hard coded mappings [SPR-5367]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5367](https://jira.spring.io/browse/SPR-5367?redirect=false)** and commented  Hard coded request mapping values should take precedence over path variables.  Wild card patterns in a path are currently inferior to explicit values.  Path variables should be applied after explicit paths and before wild cards.  For example:  `@RequestMapping`(value = ""/resources/new/"", method = RequestMethod.GET) is currently trumped by `@RequestMapping`(value = ""/resources/{resourceName}/"", method = RequestMethod.GET)  `@RequestMapping`(value = ""/resources/new/"", method = RequestMethod.GET) currently trumps `@RequestMapping`(value = ""/resources/*/"", method = RequestMethod.GET)  `@RequestMapping`(value = ""/resources/new/"", method = RequestMethod.GET) should trump `@RequestMapping`(value = ""/resources/{resourceName}/"", method = RequestMethod.GET) should trump `@RequestMapping`(value = ""/resources/*/"", method = RequestMethod.GET)  ---  **Affects:** 3.0 M1  **Issue Links:** - #10035 `@RequestMapping` best match gives wrong Controller method when using wildcards (_**""is duplicated by""**_) - #10401 `@Controller` method order effects `@RequestMapping` behavior in ways not expected - #10593 REOPENED -PathVariable mappings are greedy over hard coded mappings - #12183 Synchronization in AnnotationMethodHandlerAdapter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4108927b28a00d4918e2852f09c8bde10c3fd0bb, https://github.com/spring-projects/spring-framework/commit/c7d1d3ccb87cb46f718424a2d71c28d5fa4b004c","closed","type: bug,","spring-projects-issues","2008-12-16T06:57:03Z","2019-01-13T08:01:48Z"
"","10038","@PathVariable is unable to match trailing end of a URL [SPR-5365]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5365](https://jira.spring.io/browse/SPR-5365?redirect=false)** and commented  The `@PathVariable` cannot match variables in the last segment of a URL unless it is terminated with a slash.  For example:  `@RequestMapping`(value = ""/{eid}"", method = RequestMethod.GET) public String index(Model model, `@PathVariable`(""eid"") String eid)  results in  java.lang.IllegalStateException: Could not find `@PathVariable` [eid] in `@RequestMapping` org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.resolvePathVariable(AnnotationMethodHandlerAdapter.java:672) org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:246) org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:134) org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:331) org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:318) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:861) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:793) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:578) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:503) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)    ---  **Affects:** 3.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b738309872ccc4b6afbc2e5ce534662e6c0de1b  3 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2008-12-16T03:15:49Z","2012-06-19T03:47:12Z"
"","9977","form:form tag should support URI templates similar to spring:url tag [SPR-5304]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5304](https://jira.spring.io/browse/SPR-5304?redirect=false)** and commented  The spring form:form tag does not currently support URI templates.  It should support URI templates for the action attribute in the same manor that the spring:url tag does.   --- No further details from [SPR-5304](https://jira.spring.io/browse/SPR-5304?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-11-17T01:44:03Z","2012-06-19T02:28:22Z"
"","9972","TLDs must be located under META-INF [SPR-5299]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5299](https://jira.spring.io/browse/SPR-5299?redirect=false)** and commented  The TLDs for Spring Web Servlet must be located under META-INF in the compiled JAR.  The TLDs are currently located at org/springframework/web/servlet/tags/spring.tld and org/springframework/web/servlet/tags/form/spring-form.tld.  The TLD files will not be automatically discovered unless they are located under META-INF.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1faaad9fa8718611a4c361a9376c8a61fcfbcaf","closed","type: bug,","spring-projects-issues","2008-11-16T06:51:38Z","2012-06-19T03:46:44Z"
"","9971","JSP tag for building URLs with URI templates [SPR-5298]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5298](https://jira.spring.io/browse/SPR-5298?redirect=false)** and commented  The JSTL c:url tag does not support URI template variables.  The closest option is to apply EL expressions inside the c:url value, however, the template values will not be URL encoded.  We should create a new url tag modeled after JSTL c:url that that supports URI template variables and properly URL encodes them.  The new tag should be a drop in replacement for c:url users.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/912c1234cdc6c451b6d029c32715a84bc95a7b03","closed","type: enhancement,","spring-projects-issues","2008-11-16T06:36:41Z","2012-06-19T03:47:31Z"
"","9962","inconsistent Resource types returned from XmlWebApplicationContext getResources [SPR-5289]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5289](https://jira.spring.io/browse/SPR-5289?redirect=false)** and commented  XmlWebApplicationContext returns difference types of resources from getResources(String) depending on the value of the location pattern.  When requesting 'classpath:' resources, if the pattern contains a wild card FileSystemResource resources are returned, if it does not contain a wildcard ClassPathResource resources are returned.  XmlWebApplicationContex resourceLoader; resourceLoader.getResources(""classpath:org/springframework/webflow/**/*-flow.xml"");  // FileSystemResource resourceLoader.getResources(""classpath:org/springframework/webflow/hotels/booking/booking-flow.xml"");  // ClassPathResource  It would seem both these calls, with the same context, should return the same type of Resource, in this case a ClassPathResource.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-11-11T02:42:05Z","2011-03-15T13:03:26Z"
"","9944","Support composite parameters in @MVC [SPR-5271]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5271](https://jira.spring.io/browse/SPR-5271?redirect=false)** and commented  `@MVC` is currently only capable of one-to-one parameter mappings.  Some values are split into multiple parameters on the client.  These parameters all all apart of the same property of the server and have no real meaning independent of each other.  For example, a date can be split into month, day and year fields for a client.  They need to be recombined into a Date on the server.  The basic method signature would look like: `@RequestMapping`({""day"", ""month"", ""year""}) Map dob  This becomes more valuable with the spring-binding conversion server where the Map can be converted to any other target type.  So the ideal method signature could become: `@RequestMapping`({""day"", ""month"", ""year""}) Date dob  Implicitly the MapToDate converter would be called, or a named converted could be requested: `@RequestMapping`(value = {""day"", ""month"", ""year""}, converter = ""stringDayMonthYearToDate"") Date dob  This may be appropriate for the 3.0 timeframe.    --- No further details from [SPR-5271](https://jira.spring.io/browse/SPR-5271?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-11-04T07:27:45Z","2012-06-19T09:36:23Z"
"","10006","PersistenceAnnotationBeanPostProcessor loads all ""lazy"" beans also [SPR-5333]","**[Sathya Sekar](https://jira.spring.io/secure/ViewProfile.jspa?name=imsathya)** opened **[SPR-5333](https://jira.spring.io/browse/SPR-5333?redirect=false)** and commented  I have two beans defined as below:  \    \   \ \  The two beans above are in separate jar files. Depending on the mode (local DB or remote WS), the respective beans will be used. User is not required to add both jars to the classpath, just the one he is interested in. We use property files to create the bean references - I am illustrating the consumer below a little more simply for illustration:  \ \ \ \  Since I have enabled lazy initialization on both local and remote services, they should not get loaded till referenced by the sampleConsumer. This worked perfectly fine - till I added in the PersistenceAnnotationBeanPostProcessor bean for JPA operations. Once I add in the below definition:        the beans marked as lazy also appear to getting eagerly loaded and throw the exception:  Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [com.mytest.home.webservice.RemoteHomeServiceProvider] for bean with name 'remote.homeServiceProvider' defined in URL [file:/C:/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/Dhanasekar1Node02Cell/CommonUI-1_2_0_6_war.ear/CommonUI-1.2.0.6.war/WEB-INF/classes/spring-context.xml]; nested exception is java.lang.ClassNotFoundException: com.mytest.home.webservice.RemoteHomeServiceProvider at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1138) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:524) at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1174) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:222) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:202) at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:143) at org.springframework.orm.jpa.EntityManagerFactoryUtils.findEntityManagerFactory(EntityManagerFactoryUtils.java:96) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findNamedEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:488) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:470) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:584) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:575) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:192) at org.springframework.beans.factory.annotation.InjectionMetadata.injectMethods(InjectionMetadata.java:117) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:321) ... 178 more  I do not want the Remote service to be loaded at all because user has marked it to be a local mode of data service.  On going through the relevant code, in DefaultListableBeanFactory.java:      public String[] getBeanNamesForType(Class type) {     	return getBeanNamesForType(type, true, true);     }          public String[] getBeanNamesForType(Class type, boolean includeNonSingletons, boolean allowEagerInit) {           .....     				if (!mbd.isAbstract() &&     						(allowEagerInit || ((mbd.hasBeanClass() || !mbd.isLazyInit() || this.allowEagerClassLoading)) &&     								!requiresEagerInitForType(mbd.getFactoryBeanName()))) {  ....  I believe that since allowEagerInit  is passed in as true always, the lazy init is getting overridden. Not sure - just hazarding a wild guess.  Pl verify.    ---  **Affects:** 2.5.5","closed","status: declined,","spring-projects-issues","2008-12-01T19:49:06Z","2019-01-12T16:27:40Z"
"","10696","PropertyPlaceHolder with in-xml default value [SPR-6027]","**[Santiago Urrizola](https://jira.spring.io/secure/ViewProfile.jspa?name=surrizola)** opened **[SPR-6027](https://jira.spring.io/browse/SPR-6027?redirect=false)** and commented  i implement  a new feature for the PropertyPlaceHolderConfigurer. With this customization we can define a default value for a non existing property in the place holder configurer. We use this feature for itnernal components values. And example use of this could be  A PlaceHolderConfigurer using a properties file \ \ \ A bean resolving properties \ \ \ \  the content of the file application-values-properties is this  property.example1 = example value  When the default place holder try to resolve the property ""non.existing.property"" fails. So, with this implementation yo can define a default value for that property inside the xml file, and you can override the value in another. A usefull example is the distribution of a component with a set of default values, this values contained in an xml file can be overrided by an external properties.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=255928  **Attachments:** - [application-values.properties](https://jira.spring.io/secure/attachment/15625/application-values.properties) (_100 bytes_) - [place-holder-with-default.xml](https://jira.spring.io/secure/attachment/15626/place-holder-with-default.xml) (_1.29 kB_) - [PropertyPlaceHolderWithDefault.java](https://jira.spring.io/secure/attachment/15624/PropertyPlaceHolderWithDefault.java) (_867 bytes_)","closed","type: enhancement,","spring-projects-issues","2009-08-19T09:26:04Z","2012-06-19T09:36:15Z"
"","9899","Url based Tilename Controller [SPR-5225]","**[Sandeep Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=sangupta)** opened **[SPR-5225](https://jira.spring.io/browse/SPR-5225?redirect=false)** and commented  Add a new Url based Tilename controller that would resolve the incoming URI request to a Tile view name. In case the uri has '/' character, it would be resolved to a '.' (DOT) character. This is particularly useful for static websites which have a lot of pages and you want to have a single controller without creating additional mappings.  The code for the same is attached herewith.   ---  **Attachments:** - [UrlTilenameViewController.java](https://jira.spring.io/secure/attachment/14781/UrlTilenameViewController.java) (_4.03 kB_)","closed","type: enhancement,","spring-projects-issues","2008-10-21T03:42:06Z","2012-06-13T18:57:14Z"
"","10856","UriTemplate: Insufficient handling of characters that need to be escaped. [SPR-6188]","**[Sam Zurcher](https://jira.spring.io/secure/ViewProfile.jspa?name=sam.zurcher)** opened **[SPR-6188](https://jira.spring.io/browse/SPR-6188?redirect=false)** and commented  The class UriTemplate (using the method expand(..)) has, according to my understanding, problems with URL parameters that contain e.g. German umlauts, or more general, characters that need to be escaped. E.g. the URL http://www.google.com/?q=zÃ¼rich is not translated at all - which is ok because you could argue that it is the responsibility of the API user to escape the query parameter ('zÃ¼rich') properly. BUT the URL http://www.google.com/?q=z%C3%BCrich is transformed into http://www.google.com/?q=z%25C3%25BCrich (= the percentage sign is encoded).  Attached you can find a unit test that describes the behavior in detail. Some of the tests fail describing my expectation.   ---  **Affects:** 3.0 RC1  **Attachments:** - [UriTemplateTest.java](https://jira.spring.io/secure/attachment/15763/UriTemplateTest.java) (_2.80 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/60d2fdfcea4e46ded5760581bcc440aa7d1a01d6","closed","type: bug,","spring-projects-issues","2009-10-04T17:10:05Z","2012-06-19T03:43:08Z"
"","10851","integration-tests should not be included in the packaged distribution [SPR-6183]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6183](https://jira.spring.io/browse/SPR-6183?redirect=false)** and commented  The following are currently included in the packaged distribution:  - dist/org.springframework.integration-tests-3.0.0.RC1.jar - src/org.springframework.integration-tests-sources-3.0.0.RC1.jar  The build should be modified to omit these from the packaged distribution.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/523dba7285163c96934030387817a0a7ff290fb2","closed","type: bug,","spring-projects-issues","2009-10-03T21:25:28Z","2012-06-19T03:43:03Z"
"","10842","Use var-args instead of String[] to set allowed, disallowed, and required fields in DataBinder [SPR-6174]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6174](https://jira.spring.io/browse/SPR-6174?redirect=false)** and commented   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c055ed6dd07193c8fbc7c6c3da78af13133754c, https://github.com/spring-projects/spring-framework/commit/0860f3bb8ccd9132b4b5c8cd8d1704068485e971","closed","type: enhancement,","spring-projects-issues","2009-10-01T10:27:12Z","2012-06-19T03:43:34Z"
"","10839","""Registering field-specific Formatters"" section is not in sync with the codebase [SPR-6171]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6171](https://jira.spring.io/browse/SPR-6171?redirect=false)** and commented  WebDataBinder does not have a registerFormatter(String, Formatter) method.  DataBinder does have a getFormatterRegistry() method, but FormatterRegistry does not appear to provide functionality for ""registering field-specific formatters.""  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10737 No way to register Formatter instances by field on DataBinder - #10684 Add Formatter support to DataBinder","closed","type: bug,","spring-projects-issues","2009-10-01T09:51:22Z","2019-01-11T14:40:12Z"
"","10772","Add listeners alias for @TestExecutionListeners' value attribute [SPR-6104]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6104](https://jira.spring.io/browse/SPR-6104?redirect=false)** and commented  Status quo:  ``` @TestExecutionListeners(value = MyTestExecutionListener.class, inheritListeners = false) public class ExampleTests extends BaseTests { } ```  Goal:  ``` @TestExecutionListeners(listeners = MyTestExecutionListener.class, inheritListeners = false) public class ExampleTests extends BaseTests { } ```  Obviously, support for the configuration style using _value_ must be maintained.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f1bfcf0d25fb73061301a86bed35af559d8f1c6b","closed","type: enhancement,","spring-projects-issues","2009-09-13T00:49:51Z","2012-06-19T03:42:50Z"
"","10719","Provide mechanism for disabling automatic annotation-driven autowiring in tests [SPR-6050]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6050](https://jira.spring.io/browse/SPR-6050?redirect=false)** and commented  In the Spring TestContext Framework (i.e., specifically in AbstractGenericContextLoader), annotation-driven autowiring is automatically enabled. In other words, all ApplicationContexts created by subclasses of AbstractGenericContextLoader (e.g., GenericXmlContextLoader) are automatically configured to process annotations.  If you explicitly wish that annotation processing not be enabled for the configuration files you specify -- for example, if some of the beans are annotated with `@Autowired`, etc. but you do not want those beans to be autowired -- you are at a loss: there is currently no way to disable this.  As indirectly suggested in the forum, it would be nice if Spring provided a mechanism for disabling automatic annotation-driven autowiring in tests.  ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=74298  **Issue Links:** - #9309 Load dedicated child ApplicationContext for test instance in the TestContext framework - #14113 Test instances should not be proxied in the TestContext framework  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-28T03:14:53Z","2019-01-11T13:39:12Z"
"","10712","Deprecate @NotTransactional [SPR-6043]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6043](https://jira.spring.io/browse/SPR-6043?redirect=false)** and commented  In Spring 2.0 **`@NotTransactional`** was introduced to allow developers to override class-level transactional semantics on a per-test-method basis. This made sense in the _legacy_ JUnit 3.8 class hierarchy.  In the context of the Spring TestContext Framework which doesn't rely on a magically _transactional_ base class anymore but rather just on common **`@Transactional`** conventions combined with support for **`@BeforeTransaction`** and **`@AfterTransaction`**, there is no longer a compelling need for continued support of **`@NotTransactional`**.  Going forward, instead of using **`@NotTransactional`** the Spring team recommends that developers either:  - move the non-transactional test method to a separate (non-transactional) test class, or - move the non-transactional code to a **`@BeforeTransaction`** or **`@AfterTransaction`** method.    ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a07da0d950811d0186e0600a6257046592fc3c56","closed","type: task,","spring-projects-issues","2009-08-25T22:57:31Z","2012-06-19T03:42:59Z"
"","10689","EmbeddedDatabaseBuilder should load data.sql instead of test-data.sql by default [SPR-6020]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-6020](https://jira.spring.io/browse/SPR-6020?redirect=false)** and commented  The embedded database support in the new jdbc XML namespace is intended to be generic (i.e., not specific to testing), and as such, it resides in the org.springframework.jdbc bundle instead of the test bundle.  By default (i.e., in EmbeddedDatabaseBuilder.buildDefault()), the DDL script is loaded from schema.xml. In contrast, the default name of the DML script is test-data.sql. This is inconsistent and misleading. Consider, for example, that an embedded database is used in a simple application which loads an initial data set (e.g., reference data). Calling this file test-data.sql in such a scenario would be inappropriate.  My recommendation is to rename the default from test-data.sql to data.sql.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e56aa91bd79df004ad56de69eb9268d9e3503cca, https://github.com/spring-projects/spring-framework/commit/c8022534023136372f9d7d812c79337c9ac6e59c","closed","type: enhancement,","spring-projects-issues","2009-08-17T22:41:20Z","2012-06-19T03:43:59Z"
"","10632","Upgrade the Spring TestContext Framework to TestNG 5.10 [SPR-5964]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5964](https://jira.spring.io/browse/SPR-5964?redirect=false)** and commented  Depends on: https://issuetracker.springsource.com/browse/EBR-436   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/601120979b43b4cdc6f00b588636a81bf81e5f49","closed","type: task,","spring-projects-issues","2009-07-29T07:14:20Z","2012-06-19T03:44:01Z"
"","10631","Upgrade the Spring TestContext Framework to JUnit 4.7 [SPR-5963]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5963](https://jira.spring.io/browse/SPR-5963?redirect=false)** and commented  Depends on: https://issuetracker.springsource.com/browse/EBR-435  ---  **Affects:** 3.0 M4  **Issue Links:** - #10663 JUnit 4.5 support broken  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42638585b5109d58916298a401f9758d9213b3d2","closed","type: task,","spring-projects-issues","2009-07-29T07:11:43Z","2019-01-11T18:15:03Z"
"","10613","Document potential false positives when testing ORM code [SPR-5944]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5944](https://jira.spring.io/browse/SPR-5944?redirect=false)** and commented  As discussed in #9988, failing to manually flush the underlying session of an ORM framework (e.g., JPA or Hibernate) can lead to false positives in test cases: the test may pass, but the same code will throw an exception in a live, production environment.  This should be documented in the Testing chapter of the Spring Reference Manual.  ---  **Affects:** 2.5.6  **Issue Links:** - #10369 Test context framework: flush problems should lead to test exceptions instead of failures - #9988 Test context framework: `@Transactional` does not flush the Hibernate session before rollback  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3f370528665d89e8b5aeda26e33c606029ca170","closed","type: documentation,","spring-projects-issues","2009-07-20T23:08:13Z","2019-01-13T07:59:03Z"
"","10583","ProfileValueUtils should enforce class-level usage of @IfProfileValue to override method-level usage [SPR-5914]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5914](https://jira.spring.io/browse/SPR-5914?redirect=false)** and commented  Support for `@IfProfileValue` is inconsistent across the JUnit 3.8 and JUnit 4.x implementations with regard to class-level overrides. Specifically, the implementation in SpringJUnit4ClassRunner is correct; however, the implementation in AbstractJUnit38SpringContextTests is incorrect due to bugs in the logic in ProfileValueUtils.  ---  **Affects:** 3.0 M3  **Issue Links:** - #16521 Improve documentation for `@IfProfileValue` precedence - #10571 Class-level `@IfProfileValue` overrides method-level `@IfProfileValue` settings  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5054802eb90fb15533788889c371f61b3c3edc9e, https://github.com/spring-projects/spring-framework/commit/696d78c14436bc09d96f3fb271ced7b1c590b96a","closed","type: bug,","spring-projects-issues","2009-07-09T22:42:38Z","2019-01-13T07:59:10Z"
"","10564","Upgrade to EasyMock 2.5.1 [SPR-5895]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5895](https://jira.spring.io/browse/SPR-5895?redirect=false)** and commented   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/620c9b1f96104f391159fb88715c0c901002f20c","closed","type: task,","spring-projects-issues","2009-07-02T20:30:04Z","2012-06-19T03:43:44Z"
"","10558","Include TestNG tests in the automated build process [SPR-5889]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5889](https://jira.spring.io/browse/SPR-5889?redirect=false)** and commented  When the Spring Framework was moved to subversion, split up into multiple projects, and migrated to Spring Build for the 3.x branch, all of the TestNG tests in the code base were  - renamed from *Tests to *Tests_, and - `@Ignored` (using the JUnit annotation)  The end effect is that all TestNG tests are now excluded from the automated build.  We need to add custom support to Spring Build in order to once again include TestNG tests in the build.  ---  **Affects:** 3.0 M3  **Issue Links:** - #10551 Upgrade the Spring TestContext Framework to TestNG 5.9","closed","type: task,","spring-projects-issues","2009-07-02T05:30:32Z","2019-01-11T17:17:47Z"
"","10551","Upgrade the Spring TestContext Framework to TestNG 5.9 [SPR-5888]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5888](https://jira.spring.io/browse/SPR-5888?redirect=false)** and commented  ---  **Affects:** 3.0 M3  **Issue Links:** - #10558 Include TestNG tests in the automated build process  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5d17515dc5d254f448811db613ac838b308eefda, https://github.com/spring-projects/spring-framework/commit/0c2fa5208de102dfd2c45d689458ae9e665f8aed","closed","type: task,","spring-projects-issues","2009-07-01T23:53:12Z","2019-01-11T17:18:02Z"
"","10557","Upgrade the Spring TestContext Framework to JUnit 4.6 [SPR-5887]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5887](https://jira.spring.io/browse/SPR-5887?redirect=false)** and commented  ---  **Affects:** 3.0 M3  **Issue Links:** - #9818 Spring TestContext Framework not compatible with JUnit 4.5","closed","type: task,","spring-projects-issues","2009-07-01T23:51:32Z","2019-01-11T17:17:59Z"
"","10494","Remove references to StandardScopes from the reference manual [SPR-5824]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5824](https://jira.spring.io/browse/SPR-5824?redirect=false)** and commented  The StandardScopes class has been removed. Thus the documentation is now obsolete.  ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=73374  **Issue Links:** - #11487 Remove remaining reference to StandardScopes from the reference manual  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7038e1fa3d0dd672d0d9c4170f8e4936ae3737d6","closed","in: core,","spring-projects-issues","2009-06-12T00:38:14Z","2019-01-11T17:14:21Z"
"","10385","Modify overview.html in all core Spring projects [SPR-5715]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5715](https://jira.spring.io/browse/SPR-5715?redirect=false)** and commented  Most (all?) overview.html files in the root of the classpath currently include the following:  \ The Spring Data Binding framework, an internal library used by Spring Web Flow. \ This text needs to be modified accordingly for each individual project.   ---  **Affects:** 3.0 M3","closed","type: task,","spring-projects-issues","2009-05-05T18:36:04Z","2012-06-19T03:43:17Z"
"","10383","Add value alias for @ContextConfiguration's locations attribute [SPR-5713]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5713](https://jira.spring.io/browse/SPR-5713?redirect=false)** and commented  Status Quo: 'locations' attribute name is required even if you're only specifying the locations.  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration`(locations={""/applicationContext.xml""}) public class MyTest {  Goal: omit attribute name when only configuring locations.  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration`(""/applicationContext.xml"") public class MyTest {    ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/781da89d921b42d03cf8c7d39df4d5b9f19e1b9d, https://github.com/spring-projects/spring-framework/commit/7d4da0085c627aec0d95b06be85650206246f118, https://github.com/spring-projects/spring-framework/commit/9daae23e17c4294af5fdbf9dc10a0ce959534a24","closed","type: enhancement,","spring-projects-issues","2009-05-04T18:34:47Z","2012-06-19T03:44:05Z"
"","10380","Subclasses of SpringJUnit4ClassRunner should be able to configure the default ContextLoader class [SPR-5710]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5710](https://jira.spring.io/browse/SPR-5710?redirect=false)** and commented  Subclasses of SpringJUnit4ClassRunner often address a domain which by default requires an ApplicationContext other than a generic XML based one (e.g., web, OSGi, etc.). Such custom runners therefore need the ability to override the default ContextLoader class to be used by the managed TestContext.  See forum discussion: http://forum.springsource.org/showpost.php?p=206965&postcount=1   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a637912762d5fec976f0eaa50596c1e135cc87d7","closed","type: enhancement,","spring-projects-issues","2009-05-02T10:19:18Z","2012-06-19T03:44:04Z"
"","9894","Spring-created Quartz Scheduler instances should not be automatically shared within the same VM [SPR-5220]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-5220](https://jira.spring.io/browse/SPR-5220?redirect=false)** and commented  Using Spring's SchedulerFactoryBean in a shared library environment (e.g., in OSGi or in a setting such as Tomcat's common lib directory) should not create shared Schedulers among applications which use the same Quartz JAR or OSGi bundle.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-10-17T03:13:28Z","2012-06-19T03:47:03Z"
"","10476","Hessian2 does not work with Spring 3.0.0M3 with Hessian 3.2.1  [SPR-5806]","**[Sakib Mehasanewala](https://jira.spring.io/secure/ViewProfile.jspa?name=msakib)** opened **[SPR-5806](https://jira.spring.io/browse/SPR-5806?redirect=false)** and commented  Hello,  JIRA Issue says that Hessian 2 should work with Hessian 3.2.1. http://jira.springframework.org/browse/SPR-5469 . Are you sure this is working. I upgraded from Spring 3.0.0M2 to 3.0.0M3 and hessian from 3.2.0 to 3.2.1 and all my Hessian 2 calls started failing.  I am filing this issue, because no one responsed to my comments for that issue. I hope this is okay.  My Clients are configured like ...  \ \ \ \ \  The errors I see on the server side are:  java.io.IOException: Expected 'H' (Hessian 2.0) or 'c' (Hessian 1.0) in hessian input at 172 at org.springframework.remoting.caucho.HessianExporter.doInvoke(HessianExporter.java:165) [org.springframework.web-3.0.0.M3.jar:3.0.0.M3] at org.springframework.remoting.caucho.HessianExporter.invoke(HessianExporter.java:119) [org.springframework.web-3.0.0.M3.jar:3.0.0.M3] at org.springframework.remoting.caucho.HessianServiceExporter.handleRequest(HessianServiceExporter.java:66) [org.springframework.web-3.0.0.M3.jar:3.0.0.M3] at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) [org.springframework.web.servlet-3.0.0.M3.jar:3.0.0.M3]   ---  **Affects:** 3.0 M3","closed","type: bug,","spring-projects-issues","2009-06-05T06:42:33Z","2012-06-19T03:42:52Z"
"","10338","Add support for JasperReportsXmlView to existing set of JasperReportsViews [SPR-5667]","**[Ryan Gardner](https://jira.spring.io/secure/ViewProfile.jspa?name=ryangardner)** opened **[SPR-5667](https://jira.spring.io/browse/SPR-5667?redirect=false)** and commented  JapserReports introduced a new exporter in 3.0.0 that is the XmlExporter - it exports the report into an XML format primarily used to render inside a flash viewer that also was released.  ( see http://sourceforge.net/forum/forum.php?forum_id=825194 for the original release notes )  I have created a new JasperReportsXmlView that is a carbon copy of the existing JasperReports View implementations, but using the new XmlExporter. I have also modified the MultiFormatView to support the ""xml"" format type.  It is a very simple change, and I have tested it in my setup and it works fine. Getting this patch into future releases would be great because it would provide an easy way to provide the xml to clients (eg flash etc) that want it without having to use the XmlServlet that JasperReports created.   ---  **Affects:** 2.5.6  **Attachments:** - [JasperReportsXmlView.java](https://jira.spring.io/secure/attachment/15309/JasperReportsXmlView.java) (_1.35 kB_) - [multiformatview.diff](https://jira.spring.io/secure/attachment/15308/multiformatview.diff) (_685 bytes_)","closed","type: enhancement,","spring-projects-issues","2009-04-10T08:58:35Z","2012-06-19T09:36:27Z"
"","10543","form.tld - Add support for custom attributes [SPR-5873]","**[Ryan Chandler](https://jira.spring.io/secure/ViewProfile.jspa?name=rchandler)** opened **[SPR-5873](https://jira.spring.io/browse/SPR-5873?redirect=false)** and commented  It is often useful to add custom attributes to an html element to be used by javascript.  For example:  \  ---  **Issue Links:** - #10600 Allow non-standard attributes in  tags (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-06-26T07:01:30Z","2019-01-11T17:14:48Z"
"","10031","Add adapter classes for all bean post processor interfaces [SPR-5358]","**[Ryan Bohn](https://jira.spring.io/secure/ViewProfile.jspa?name=bohnman)** opened **[SPR-5358](https://jira.spring.io/browse/SPR-5358?redirect=false)** and commented  Why stop at InstantiationAwareBeanPostProcessorAdapter, why not close the loop and add:  - BeanPostProcessorAdapter implements BeanPostProcessor - DestructionAwareBeanPostProcessorAdapter extends BeanPostProcessorAdapter implements DestructionAwareBeanPostProcessor - MergedBeanDefinitionPostProcessorAdapter extends BeanPostProcessorAdapter implements MergedBeanDefinitionPostProcessor  Not only does it provide no-op convenience, it insulates implementers more from API changes.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-12-11T23:56:33Z","2012-06-19T09:36:13Z"
"","10030","Add postProcessAfterDestruction to DestructionAwareBeanPostProcessor [SPR-5357]","**[Ryan Bohn](https://jira.spring.io/secure/ViewProfile.jspa?name=bohnman)** opened **[SPR-5357](https://jira.spring.io/browse/SPR-5357?redirect=false)** and commented  It would be nice to have a postProcessAfterDestruction method in the DestructionAwareBeanPostProcessor.  In our application, we have our own CustomLifecycle interface which looks like the following:  public void init(); public boolean isReady(); public void start(); public boolean isRunning(); public void stop(); public void destroy(); public boolean isDestroyed();  Because there are so many ways to destroy a bean (destroy-method, DisposableBean, `@PreDestroy`), I wanted to check to see if any of those methods called the destroy method and if not, my post processor would call it.  The code would look something like the following:  void postProcessAfterDestruction(Object bean, String beanName) { if (bean instanceof CustomLifecycle) { CustomLifecycle customLifecycle = (CustomLifecycle) bean; if (!customLifecycle.isDestroyed()) customLifecycle.destroy(); } }  As you can see, this is clearly easier that trying to check all the other destroy paths.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-12-11T23:32:47Z","2012-06-19T09:36:22Z"
"","10382","Add support for WebServiceFeature's to JaxWsPortProxyFactoryBean [SPR-5712]","**[Rustam Abdullaev](https://jira.spring.io/secure/ViewProfile.jspa?name=rustamabd)** opened **[SPR-5712](https://jira.spring.io/browse/SPR-5712?redirect=false)** and commented  The current implementation of _JaxWsPortProxyFactoryBean_ does not support specifying any _WebServiceFeature_'s for the client proxy. A Web Service Feature is another way of extending functionality of web services, similar to SOAP handlers (but different).  It seems like _JaxWsPortClientInterceptor.prepare()_ always invokes _Service.getPort(QName portName, Class serviceEndpointInterface)_, there is no way to invoke _Service.getPort(QName portName, Class serviceEndpointInterface, WebServiceFeature... features)_ using Spring at this time.  There should be a way to specify additional web service features while configuring _JaxWsPortProxyFactoryBean_ similar to the way handlers are specified.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4955a7304787ece2e53094f0633a56ffaa0da23c","closed","type: enhancement,","spring-projects-issues","2009-05-03T19:37:27Z","2012-06-19T03:43:27Z"
"","10539","Add support for content negotiation based on a request parameter value [SPR-5870]","**[Rostislav Hristov](https://jira.spring.io/secure/ViewProfile.jspa?name=rostislav.hristov)** opened **[SPR-5870](https://jira.spring.io/browse/SPR-5870?redirect=false)** and commented  Content negotiation based on a request parameter can be a nice addition to the framework. Such a capability is already available in Grails (http://grails.org/doc/1.0.x/guide/single.html#6.8%20Content%20Negotiation). I was able to implement it and use it by extending the ContentNegotiatingViewResolver but it will be great if it can become a part of the framework.  Such a feature is required in a scenario where you have an HTML FORM which allows you to select the format you want to receive after submitting it. The only way to implement such a form unobtrusively (without JavaScript) is to use a SELECT dropdown defining the requested media extension. Without JavaScript you cannot change the FORM action address or the request header. Even with JavaScript support it's much more easier to use a request parameter than any other implementation.  As a result of this improvement the content negotiation will be available in the following scenarious: /book/list.xml /book/list?format=xml /book/list (with proper Accept header)   ---  **Affects:** 3.0 M3  **Attachments:** - [ContentNegotiatingViewResolver.java.patch](https://jira.spring.io/secure/attachment/15508/ContentNegotiatingViewResolver.java.patch) (_6.18 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-26T00:46:38Z","2012-06-19T03:43:42Z"
"","10591","Add support to externalize values for ""defaultValue"" in method parameters. [SPR-5922]","**[Rostislav Georgiev Georgiev](https://jira.spring.io/secure/ViewProfile.jspa?name=rgeorgiev)** opened **[SPR-5922](https://jira.spring.io/browse/SPR-5922?redirect=false)** and commented  Externalizing default values for method parameter specified in `@RequestParam`, `@RequestHeader`, `@CookieValue` , will be a nice addition. So one can specify something like : public void myHandle(`@RequestParam`(value = ""id"", defaultValue = ""${my.foo}"") String id, `@RequestHeader`(defaultValue = ""${my.bar}"") int header); and to have in a property file : my.foo=foo1 my.bar=12   ---  **Affects:** 3.0 M3  **Attachments:** - [org.springframework.web.servlet.patch](https://jira.spring.io/secure/attachment/15534/org.springframework.web.servlet.patch) (_6.68 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb70c9a4c445ad3d47fdcd44c32c51deca98705b  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-07-12T23:26:31Z","2012-06-19T03:43:53Z"
"","10024","add the possibility to specify the custom transactionInterceptor when using  [SPR-5351]","**[Rostislav Georgiev Georgiev](https://jira.spring.io/secure/ViewProfile.jspa?name=rgeorgiev)** opened **[SPR-5351](https://jira.spring.io/browse/SPR-5351?redirect=false)** and commented  It's not possible to specify custom implementation of transactionInterceptor in    ---  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-12-10T20:06:02Z","2012-06-19T09:36:27Z"
"","10592","HttpMessageConverter selection as a result of @ResponseBody should consider the requested content type [SPR-5923]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-5923](https://jira.spring.io/browse/SPR-5923?redirect=false)** and commented  Currently when a method is annotated with `@ResponseBody`, the AnnotationMethodHandlerAdapter loops over a list of registered HttpMessageConverters and asks each one if it supports the type of the returned value. In order to support alternating between different content types for the same resource, the AnnotationMethodHandler should take into consideration the content type requested by the client and try to find a message converter that supports both the type of the returned value as well as the client requested content type.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b11970ed8d3a1ee051ba0cb22d57bce144bd650b","closed","type: enhancement,","spring-projects-issues","2009-07-12T23:52:46Z","2012-06-19T03:43:08Z"
"","10172","Using PathVariable in ModelAttribute method [SPR-5500]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-5500](https://jira.spring.io/browse/SPR-5500?redirect=false)** and commented  A controller with a `@ModelAttribute` method accepting a `@PathVariable` cannot have methods without the path variable. This is problematic because it would make sense to be able to support the following using a single controller:  /carts/new /carts/{cartId}  This issue was raised in a forum thread: http://forum.springframework.org/showthread.php?t=67385  ---  **Affects:** 3.0 M1  **Reference URL:** http://forum.springframework.org/showthread.php?t=67385  **Issue Links:** - #19212 Allow `@PathVariable` to be optional  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-15T09:48:01Z","2022-01-14T14:08:21Z"
"","10245","Autowiring should support ordered collection driven by Order annotation or Ordered interface [SPR-5574]","**[Roman PichlÃ­k](https://jira.spring.io/secure/ViewProfile.jspa?name=dagi)** opened **[SPR-5574](https://jira.spring.io/browse/SPR-5574?redirect=false)** and commented  Let suppose that there are beans of a given type T and these beans are marked by interface Ordered or annotation Order. It does make really sense to preserve their order according to Ordered/Order marker if they are collected. See following code for illustration.  `@Component` `@Order`(value=1) public class BusinessServiceA implements BusinessService{}  `@Component` `@Order`(value=2) public class BusinessServiceB implements BusinessService{}  `@Component` public class ServiceRegistry { `@Autowired` public List\ services; }  assertThat(services.get(0).getClass(), is(BusinessServiceA.class)); assertThat(services.get(1).getClass(), is(BusinessServiceB.class));  ---  **Issue Links:** - #10921 Allow to define autowired collections and array elements order (_**""is duplicated by""**_) - #20761 Document common use cases for `@Order` vs `@Priority` vs `@DependsOn`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a9af233aeba965fa1e9fe0601a34fd42a08c3dc  15 votes, 15 watchers","closed","has: votes-jira,","spring-projects-issues","2009-03-16T06:41:14Z","2019-01-13T08:00:43Z"
"","10234","org.springframework.jca.work.jboss.JBossWorkManagerTaskExecutor doesn't work if the JMX is secured [SPR-5563]","**[Roman PichlÃ­k](https://jira.spring.io/secure/ViewProfile.jspa?name=dagi)** opened **[SPR-5563](https://jira.spring.io/browse/SPR-5563?redirect=false)** and commented  In most production environments is JMX access secured by authentication. In that case org.springframework.jca.work.jboss.JBossWorkManagerTaskExecutor doesn't work, becuase there is no way to pass username/password. In addition JBossWorkManagerTaskExecutor delegates  the WorkManager lookup to org.springframework.jca.work.jboss.JBossWorkManagerUtils, but doesn't make any sense since it is static dependency and JBossWorkManagerUtils cannot be bypassed by configuration e.g. alternative way for lookup.  I propose following change to JBossWorkManagerTaskExecutor: * get rid of hardcoded JBossWorkManagerUtils or replace it by delegation (JBossWorkManagerUtils can be used as the default delegate) * add support for secure JMX  I already did it, see attachement and configuration is following             true                                       admin             Tested on JBoss 4.3 and works well.    ---  **Affects:** 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6  **Attachments:** - [JBossWorkManagerTaskExecutor.java](https://jira.spring.io/secure/attachment/15193/JBossWorkManagerTaskExecutor.java) (_3.99 kB_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-10T22:06:17Z","2013-11-02T10:27:32Z"
"","9993","Create NullFactoryBean and  construct [SPR-5320]","**[Roman Kalukiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=romkal)** opened **[SPR-5320](https://jira.spring.io/browse/SPR-5320?redirect=false)** and commented  Spring already has   and . In some cases it would be useful to have  to define named null beans. It could be good if you have two xml context files and in one you reference some bean by name in the other you define this reference as null. Example: \ \ \  first-context.xml   second-context.xml \ \ \  This way just by loading different set of context files we can have some settings injected, including null values.   ---  20 votes, 13 watchers","closed","status: bulk-closed,","spring-projects-issues","2008-11-25T03:59:21Z","2019-01-12T02:38:12Z"
"","10013","PathMatchingResourcePatternResolver.determineRootDir fails for jar on JBoss [SPR-5340]","**[Rogel Garcia](https://jira.spring.io/secure/ViewProfile.jspa?name=rogelgarcia)** opened **[SPR-5340](https://jira.spring.io/browse/SPR-5340?redirect=false)** and commented  The method determineRootDir in class PathMatchingResourcePatternResolver does not work as espected.  The javadoc says: Will return ""/WEB-INF"" for the pattern ""/WEB-INF/*.xml"", for example.  But /WEB-INF/*.xml acctualy returns /WEB-INF/  When determineRootDir resolves to a directory no problem, but it sometimes can resolve to a JAR file, when it resolves to a JAR file the last / becomes an issue.  rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1;  //removing the + 1 in this line solve the problem but i don't know if it craches elsewhere  ---  **Affects:** 2.5.6  **Issue Links:** - #9793 Spring component scanning does not work within JBoss EJB container  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d10be7443f1f3384fbafff4551eacfad874e51ec  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2008-12-04T13:14:44Z","2019-01-11T16:17:06Z"
"","10397","Patch so that CronTriggerBean can take a start delay [SPR-5727]","**[Robin Bramley](https://jira.spring.io/secure/ViewProfile.jspa?name=rbramley)** opened **[SPR-5727](https://jira.spring.io/browse/SPR-5727?redirect=false)** and commented  The SimpleTriggerBean supports a start delay, this patch adds the same feature to the CronTriggerBean so that you can defer the execution (e.g. to allow the system to stabilise at start-up).   ---  **Affects:** 2.5.6, 3.0 M3  **Attachments:** - [crontrigger_delay.patch](https://jira.spring.io/secure/attachment/15368/crontrigger_delay.patch) (_1.88 kB_)  **Issue Links:** - [SPRNET-1341](https://jira.spring.io/browse/SPRNET-1341) CronTriggerObject start delay support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90652bf8ae0ec68a4756af5e0796fbce61cfed18","closed","type: enhancement,","spring-projects-issues","2009-05-07T07:40:57Z","2012-06-19T03:43:42Z"
"","10026","Can't use aspects around Axis2 service beans [SPR-5353]","**[Roberto Ruiz](https://jira.spring.io/secure/ViewProfile.jspa?name=rober2d2)** opened **[SPR-5353](https://jira.spring.io/browse/SPR-5353?redirect=false)** and commented  I suppose this is more an Axis2 problem that an Spring one, but may be something can be done  I am programming a webservice using Axis2. The bean is provided by Spring:  \org.apache.axis2.extensions.spring.receivers.SpringServletContextObjectSupplier\ \habilitadosWebService\  It works OK, until I try to put an aspect around habilitadosWebService  bean (The aspect is used to control security). When I start the Tomcat server, I recieve the following exception message: Unable to load bytecode for class $Proxy16. I also tried using CGLIB proxies, but the result is the same.  The stack trace is:  [ERROR] 11:54:19,592 The HabilitadosWeb service, which is not valid, caused The following error occurred during schema generation: Unable to load bytecode for class $Proxy16 (ServiceDeployer.java:deploy:96) org.apache.axis2.deployment.DeploymentException: The following error occurred during schema generation: Unable to load bytecode for class $Proxy16 at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:431) at org.apache.axis2.deployment.repository.util.ArchiveReader.buildServiceGroup(ArchiveReader.java:102) at org.apache.axis2.deployment.repository.util.ArchiveReader.processServiceGroup(ArchiveReader.java:179) at org.apache.axis2.deployment.ServiceDeployer.deploy(ServiceDeployer.java:81) at org.apache.axis2.deployment.repository.util.DeploymentFileData.deploy(DeploymentFileData.java:136) at org.apache.axis2.deployment.DeploymentEngine.doDeploy(DeploymentEngine.java:597) at org.apache.axis2.deployment.repository.util.WSInfoList.update(WSInfoList.java:144) at org.apache.axis2.deployment.RepositoryListener.update(RepositoryListener.java:330) at org.apache.axis2.deployment.RepositoryListener.checkServices(RepositoryListener.java:227) at org.apache.axis2.deployment.DeploymentEngine.loadServices(DeploymentEngine.java:131) at org.apache.axis2.deployment.WarBasedAxisConfigurator.loadServices(WarBasedAxisConfigurator.java:284) at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContext(ConfigurationContextFactory.java:82) at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisServlet.java:516) at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:436) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1139) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:966) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3956) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4230) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardHost.start(StandardHost.java:736) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:448) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:552) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433) Caused by: org.apache.axis2.deployment.DeploymentException: The following error occurred during schema generation: Unable to load bytecode for class $Proxy16 at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:394) ... 30 more Caused by: java.io.IOException: Unable to load bytecode for class $Proxy16 at org.apache.axis2.description.java2wsdl.bytecode.ClassReader.getBytes(ClassReader.java:84) at org.apache.axis2.description.java2wsdl.bytecode.ParamReader.\(ParamReader.java:57) at org.apache.axis2.description.java2wsdl.bytecode.ChainedParamReader.\(ChainedParamReader.java:52) at org.apache.axis2.description.java2wsdl.bytecode.MethodTable.\(MethodTable.java:31) at org.apache.axis2.description.java2wsdl.DefaultSchemaGenerator.\(DefaultSchemaGenerator.java:158) at org.apache.axis2.deployment.util.Utils.fillAxisService(Utils.java:524) at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:386) ... 30 more  ---  **Affects:** 2.5.3  **Issue Links:** - #10025 Can't use aspects around Axis2 service beans (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-12-10T21:40:12Z","2019-01-11T16:16:05Z"
"","10025","Can't use aspects around Axis2 service beans [SPR-5352]","**[Roberto Ruiz](https://jira.spring.io/secure/ViewProfile.jspa?name=rober2d2)** opened **[SPR-5352](https://jira.spring.io/browse/SPR-5352?redirect=false)** and commented  I suppose this is more an Axis2 problem that an Spring one, but may be something can be done  I am programming a webservice using Axis2. The bean is provided by Spring:  \org.apache.axis2.extensions.spring.receivers.SpringServletContextObjectSupplier\ \habilitadosWebService\  It works OK, until I try to put an aspect around habilitadosWebService  bean (The aspect is used to control security). When I start the Tomcat server, I recieve the following exception message: Unable to load bytecode for class $Proxy16. I also tried using CGLIB proxies, but the result is the same.  The stack trace is:  [ERROR] 11:54:19,592 The HabilitadosWeb service, which is not valid, caused The following error occurred during schema generation: Unable to load bytecode for class $Proxy16 (ServiceDeployer.java:deploy:96) org.apache.axis2.deployment.DeploymentException: The following error occurred during schema generation: Unable to load bytecode for class $Proxy16 at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:431) at org.apache.axis2.deployment.repository.util.ArchiveReader.buildServiceGroup(ArchiveReader.java:102) at org.apache.axis2.deployment.repository.util.ArchiveReader.processServiceGroup(ArchiveReader.java:179) at org.apache.axis2.deployment.ServiceDeployer.deploy(ServiceDeployer.java:81) at org.apache.axis2.deployment.repository.util.DeploymentFileData.deploy(DeploymentFileData.java:136) at org.apache.axis2.deployment.DeploymentEngine.doDeploy(DeploymentEngine.java:597) at org.apache.axis2.deployment.repository.util.WSInfoList.update(WSInfoList.java:144) at org.apache.axis2.deployment.RepositoryListener.update(RepositoryListener.java:330) at org.apache.axis2.deployment.RepositoryListener.checkServices(RepositoryListener.java:227) at org.apache.axis2.deployment.DeploymentEngine.loadServices(DeploymentEngine.java:131) at org.apache.axis2.deployment.WarBasedAxisConfigurator.loadServices(WarBasedAxisConfigurator.java:284) at org.apache.axis2.context.ConfigurationContextFactory.createConfigurationContext(ConfigurationContextFactory.java:82) at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisServlet.java:516) at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:436) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1139) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:966) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3956) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4230) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardHost.start(StandardHost.java:736) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:448) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:552) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433) Caused by: org.apache.axis2.deployment.DeploymentException: The following error occurred during schema generation: Unable to load bytecode for class $Proxy16 at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:394) ... 30 more Caused by: java.io.IOException: Unable to load bytecode for class $Proxy16 at org.apache.axis2.description.java2wsdl.bytecode.ClassReader.getBytes(ClassReader.java:84) at org.apache.axis2.description.java2wsdl.bytecode.ParamReader.\(ParamReader.java:57) at org.apache.axis2.description.java2wsdl.bytecode.ChainedParamReader.\(ChainedParamReader.java:52) at org.apache.axis2.description.java2wsdl.bytecode.MethodTable.\(MethodTable.java:31) at org.apache.axis2.description.java2wsdl.DefaultSchemaGenerator.\(DefaultSchemaGenerator.java:158) at org.apache.axis2.deployment.util.Utils.fillAxisService(Utils.java:524) at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:386) ... 30 more  ---  **Affects:** 2.5.3  **Issue Links:** - #10026 Can't use aspects around Axis2 service beans (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2008-12-10T21:40:10Z","2019-01-12T05:33:51Z"
"","10609","ContextLoaderListener for embedded AS deployment [SPR-5940]","**[Robert Schoening](https://jira.spring.io/secure/ViewProfile.jspa?name=robschoening)** opened **[SPR-5940](https://jira.spring.io/browse/SPR-5940?redirect=false)** and commented  If Spring is being used to start an embedded application server (e.g. jetty) that is serving a non WAR-based web application, there will be no WEB-INF/applicationContext.xml (or equivalent). Instead, one would like to rely on the parent ApplicationContext. However, by default, ContextLoaderListener will initialize a new ApplicationContext with no bean definitions (since there is no WEB-INF) and no relation to the parent ApplicationContext.  \  When using CXF in this manner, this yielded some confusing results. CXF initialized properly as part of the parent ApplicationContext, correctly loading its services. However, when invoking the CXF servlet, it found the webapp ApplicationContext (containing no beans), and did not see the parent ApplicationContext.  This trivial class gets around this problem by ensuring that the webapp ApplicationContext has its parent properly defined. Although there is built-in support for using ContextSingletonBeanFactoryLocator, this is somewhat non-intuitive for an embedded environment and potentially problematic in an OSGi environment.   ---  **Affects:** 2.5.6  **Attachments:** - [EmbeddedContextLoaderListener.java](https://jira.spring.io/secure/attachment/15551/EmbeddedContextLoaderListener.java) (_2.28 kB_)","closed","type: enhancement,","spring-projects-issues","2009-07-19T18:11:28Z","2012-06-19T09:36:14Z"
"","10140","depends-on attribute is not 'inherited' from parent beans [SPR-5467]","**[Robert Munteanu](https://jira.spring.io/secure/ViewProfile.jspa?name=rombert)** opened **[SPR-5467](https://jira.spring.io/browse/SPR-5467?redirect=false)** and commented  I'm trying to plug in a migration bean into our current context, and ideally it would like like this:  ```          	    	  ... lots of child beans with parent=""abstractDao"" ... ```  If I do this, I see that beans which are using the dao childs are being init-ed before the migrations are run.  I know that there are ways to work around this:  * declare the dependency on each child bean ( which we're doing right now ) * declare the dependency on the services using the dao beans ( which I find tedious and incorrect ) * create another bean-in-the-middle between the dataSource and the daos, which I find incorrect as well ( except when using e.g.  hibernate session factory, but we're not )  The intuitive way for we would be to be able to use the depends-on on the parent bean.   ---  **Affects:** 2.5.6  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-08T17:47:13Z","2012-06-19T09:36:15Z"
"","10124","SimpleJDBCTemplate does not take NULL parameters correctly into account [SPR-5451]","**[Robert Munteanu](https://jira.spring.io/secure/ViewProfile.jspa?name=rombert)** opened **[SPR-5451](https://jira.spring.io/browse/SPR-5451?redirect=false)** and commented  I'm using SimpleJdbcTemplate and MapSqlParameterSource in the folowing way:  ```         MapSqlParameterSource parameterSource = new MapSqlParameterSource();         parameterSource.addValue(""typeId"", typeId, Types.BIGINT);          List ids = _jdbcTemplate.query(_selectIdByParameters, new EntityIdRowMapper(), parameterSource); {/code}  When typeId ( which is a Long ) is null, then the query looks in the following way:  ```  SELECT id FROM XXX WHERE typeId = null{/code}  whereas I would expect it to generate  ``` SELECT id FROM XXX WHERE typeId IS NULL{/code} ```    ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2009-02-02T20:06:55Z","2019-01-12T16:27:25Z"
"","10604","@Controller marked class cannot implements Comparator [SPR-5935]","**[Robert Kristofic](https://jira.spring.io/secure/ViewProfile.jspa?name=donroberto)** opened **[SPR-5935](https://jira.spring.io/browse/SPR-5935?redirect=false)** and commented  If you have `@Controller` marked class which implements Comparator.  Exception:  javax.servlet.ServletException: No adapter for handler [plaut.jfos.module.dashboard.web.controller.PartnerDetailController@2f1f479a]: Does your handler implement a supported interface like Controller? org.springframework.web.servlet.DispatcherServlet.getHandlerAdapter (DispatcherServlet.java:1091) org.springframework.web.servlet.DispatcherServlet.doDispatch (DispatcherServlet.java:874) org.springframework.web.servlet.DispatcherServlet.doService (DispatcherServlet.java:809) org.springframework.web.servlet.FrameworkServlet.processRequest (FrameworkServlet.java:571) org.springframework.web.servlet.FrameworkServlet.doPost (FrameworkServlet.java:511) javax.servlet.http.HttpServlet.service(HttpServlet.java:710) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal (CharacterEncodingFilter.java:96) org.springframework.web.filter.OncePerRequestFilter.doFilter (OncePerRequestFilter.java:76) org.springframework.security.util.FilterChainProxy $VirtualFilterChain.doFilter(FilterChainProxy.java:359) org.springframework.security.ui.logout.LogoutFilter.doFilterHttp (LogoutFilter.java:89) org.springframework.security.ui.SpringSecurityFilter.doFilter (SpringSecurityFilter.java:53) org.springframework.security.util.FilterChainProxy $VirtualFilterChain.doFilter(FilterChainProxy.java:371) org.springframework.security.ui.AbstractProcessingFilter.doFilterHttp (AbstractProcessingFilter.java:271) org.springframework.security.ui.SpringSecurityFilter.doFilter (SpringSecurityFilter.java:53) org.springframework.security.util.FilterChainProxy $VirtualFilterChain.doFilter(FilterChainProxy.java:371) org.springframework.security.ui.x509.X509ProcessingFilter.doFilter (X509ProcessingFilter.java:137) org.springframework.security.util.FilterChainProxy $VirtualFilterChain.doFilter(FilterChainProxy.java:371) plaut.jfos.framework.server.JfosContextOUSetterFilter.doFilter (JfosContextOUSetterFilter.java:59) org.springframework.security.util.FilterChainProxy $VirtualFilterChain.doFilter(FilterChainProxy.java:371) org.springframework.security.context.HttpSessionContextIntegrationFilter.doFilterHttp (HttpSessionContextIntegrationFilter.java:235) org.springframework.security.ui.SpringSecurityFilter.doFilter (SpringSecurityFilter.java:53) org.springframework.security.util.FilterChainProxy $VirtualFilterChain.doFilter(FilterChainProxy.java:371) org.springframework.security.util.FilterChainProxy.doFilter (FilterChainProxy.java:174) org.springframework.security.util.FilterToBeanProxy.doFilter (FilterToBeanProxy.java:99)  Controller code (not complete):  `@Controller` public class PartnerDetailController extends AbstractDashboardController implements Comparator\ {      //....          @RequestMapping(value = ""/dashboard/partnerdetail.do"")     public String process(@ModelAttribute(""formData"") PartnerDetailForm formData, HttpSession session) {              formData.setOrganizationUnits(Collections.sort(codeListService.getOrganizationUnits(), this));              return ""/dashboard/partnerdetail.jsp"";     }          // ....          @Override     public int compare(OrganizationUnit o1, OrganizationUnit o2) {         if(o1 == null || o1.getLabel() == null) {             return -1;         }         else if(o2 == null || o2.getLabel() == null) {             return 1;         }         else return o1.getLabel().compareTo(o2.getLabel());     }  }  If you remove Comparator interface and compare, everything is OK.  ---  **Affects:** 2.5.5  **Issue Links:** - #10761 MVC Annotation Inheritance","closed","status: declined,","spring-projects-issues","2009-07-15T23:52:27Z","2019-01-12T16:26:56Z"
"","9912","Fluent Insert Update handling for JDBC templating. [SPR-5238]","**[Robert Alexandersson](https://jira.spring.io/secure/ViewProfile.jspa?name=alero)** opened **[SPR-5238](https://jira.spring.io/browse/SPR-5238?redirect=false)** and commented  An addition to the Templating to use a very simple Templating object handling insert and update handling. The whole idea is to get the name-value pair closer together with minimal effort, removing the name value mismatch problem. I have uploaded the Course code and included the all the code needed, should be possible to include in the course material to test it.  Look in the ""public void updateBeneficiaries(Account account)"" to see an Update beeing performed. Look in the ""public RewardConfirmation confirmReward(AccountContribution contribution, Dining dining)"" to see an Insert beeing performed.  Additions: New class InserUpdater and two added methods to the SimpleJdbcTemlate(and JdbcTemplate).  Left to do: 1. The actual handling(ifs) of the difference between update and insert can be discussed, its is now ""clever"" and looks at the where map. 2. Packaging 3. Naming of the Templating class InsertUpdater.  I am currently at the course Spring Core and talked shortly to Dave Syer about this.   ---  **Attachments:** - [09-jdbc-1.zip](https://jira.spring.io/secure/attachment/14789/09-jdbc-1.zip) (_18.11 kB_)","closed","type: enhancement,","spring-projects-issues","2008-10-23T21:06:55Z","2012-06-19T02:28:09Z"
"","10137","throws clause ignored by pointcut parser [SPR-5464]","**[Robb Samuell](https://jira.spring.io/secure/ViewProfile.jspa?name=rsamuell)** opened **[SPR-5464](https://jira.spring.io/browse/SPR-5464?redirect=false)** and commented  I have a AxisFaultRetryInteceptor that is designed to interecept methods that throw RemoteExceptions.  If a thrown RemoteException is an AxisFault, a retry is attempted up to 2 times.  My problem is that the  expression is not weaving the advice into joinpoints that have throws clause eventhough a throws clause is specified in the pointcut.  If I remove the throws clause from the pointcut expression, it successfully weaves into method signatures without throws clauses, but I need support for the throws clause in order to make this AxisFault interceptor work.  I have included the Java source code and applicationContext.xml fragment below.  ****AxisFaultRetryInterceptor.java****  import org.aopalliance.intercept.MethodInterceptor; import org.aopalliance.intercept.MethodInvocation; import org.apache.axis2.AxisFault;  public class AxisFaultRetryInterceptor implements MethodInterceptor { private static final int DEFAULT_MAX_RETRIES = 2;         private int maxRetries = DEFAULT_MAX_RETRIES;             public void setMaxRetries(int maxRetries) {           this.maxRetries = maxRetries;        }             	/**     	 * @see org.aopalliance.intercept.MethodInterceptor#invoke(org.aopalliance.intercept.MethodInvocation)     	 */        public Object invoke(MethodInvocation invocation) throws Throwable {     	      int numAttempts = 0;     	      AxisFault af;     	      do {     	         numAttempts++;     	         try {      	            return invocation.proceed();     	         }     	         catch(AxisFault ex) {     	            af = ex;     	         }     	      }     	      while(numAttempts","closed","in: core,","spring-projects-issues","2009-02-04T23:44:50Z","2019-01-12T16:27:20Z"
"","10462","PropertyOverrideConfigurer ignores some invalid keys but not others [SPR-5792]","**[Rob Hasselbaum](https://jira.spring.io/secure/ViewProfile.jspa?name=rhasselbaum)** opened **[SPR-5792](https://jira.spring.io/browse/SPR-5792?redirect=false)** and commented  JavaDoc for PropertyOverrideConfigurer.setIgnoreInvalidKeys states: ""If you ignore invalid keys, keys that do not follow the 'beanName.property' format will just be logged as warning. This allows [one] to have arbitrary other keys in a properties file."" This isn't quite complete and accurate, though. Specifically:  (a) Some keys that DO follow the 'beanName.property' format are also ignored. Specifically, if the bean name does not exist, it will be ignored.  (b) If the bean name does exist, but the property doesn't exist or is not writable, an exception is thrown even if ignore invalid keys is set to true. This means you cannot have arbitrary other keys in the properties file.  One could address these points by clarifying the documentation, but I think there's a code problem here, too, because when I set ignore invalid keys to true, I'm expecting the configurer to ignore ALL invalid keys including those that match on the bean name but not on the property. So I propose changing the code to address that case and updating the JavaDoc accordingly.  ---  **Affects:** 2.5.6  **Issue Links:** - #12985 Constructor sets the source incorrectly in org.springframework.beans.PropertyValue  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad492e906e4c9c994cad733d366ec9c30950ed92","closed","type: enhancement,","spring-projects-issues","2009-05-28T07:45:00Z","2019-01-11T17:32:10Z"
"","10324","RestTemplate handles redirects incorrectly [SPR-5653]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-5653](https://jira.spring.io/browse/SPR-5653?redirect=false)** and commented  If I send a redirect (302 or 303) back the RestTemplate it will follow the redirect but the method of the redirected request is not GET. Instead, it is the method of the request that led to the redirect, in my case PUT and DELETE.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e3e79ca2230efbda1b2dda9578cb7627b37fd01","closed","type: bug,","spring-projects-issues","2009-04-06T01:58:59Z","2017-02-21T13:49:07Z"
"","10743","BeanDefinition doesn't contain the name of the bean itself. [SPR-6075]","**[Rob Butler](https://jira.spring.io/secure/ViewProfile.jspa?name=crodster2k)** opened **[SPR-6075](https://jira.spring.io/browse/SPR-6075?redirect=false)** and commented  Related to #10740.  Their is no way within BeanDefinitionVisitor's methods to know the name of the bean that is being worked on.  Modify BeanDefinition to provide the name of the bean.  Inner beans should return null for the name.  This may be as simple as passing the bean name to BDV.visitBeanDefinition, if any beans visited as part of the recursion are always inner beans.  ---  No further details from [SPR-6075](https://jira.spring.io/browse/SPR-6075?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-09-03T08:05:38Z","2019-01-11T13:37:59Z"
"","10740","PropertyPlaceholderConfigurer should allow subclasses to supply a custom BeanDefinitionVisitor [SPR-6072]","**[Rob Butler](https://jira.spring.io/secure/ViewProfile.jspa?name=crodster2k)** opened **[SPR-6072](https://jira.spring.io/browse/SPR-6072?redirect=false)** and commented  Enhancements to PropertyPlaceholderConfigurer often require overriding processProperties for the sole purpose of supplying a custom BeanDefinitionVisitor.  This is problematic, as enhancements to processProperties, like the addition of alias support in 2.5 and annotation support in 3.0 get lost.  A protected method for obtaining the BeanDefinitionVisitor would allow sub-classes to supply a custom BeanDefinitionVisitor w/o having to re-implement all of processProperties, losing functionality in the balance.    ---  **Attachments:** - [PropertyPlaceholderConfigurer.patch](https://jira.spring.io/secure/attachment/15688/PropertyPlaceholderConfigurer.patch) (_1.54 kB_)","closed","type: enhancement,","spring-projects-issues","2009-09-03T03:30:12Z","2012-06-19T09:36:16Z"
"","10620","Session of PersistentSet is null  [SPR-5952]","**[Rik van der Kleij](https://jira.spring.io/secure/ViewProfile.jspa?name=rik)** opened **[SPR-5952](https://jira.spring.io/browse/SPR-5952?redirect=false)** and commented  I'm using OSIV filter in combination with Wicket and Spring.  When I retrieve a persistent entity with lazy associations in the constructor of wicket component and call for example isEmpty() on the lazy association it is working as expected. But when I do the same in the event handler of wicket component (an anonymous class), for example onSubmit(), the session of persistentset  is null so objects can not be retrieved from database and lazyinitialization exception is raised.  I do not understand why the difference in behavior.  It does not matter if I use transactions with dao's or do it directly by getting current session.  Regards, Rik van der Kleij   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-07-22T23:37:24Z","2019-01-12T05:33:16Z"
"","10788","Velocity springFormCheckbox results in checkboxes that are always checked [SPR-6120]","**[Richard Paul](https://jira.spring.io/secure/ViewProfile.jspa?name=rapaul)** opened **[SPR-6120](https://jira.spring.io/browse/SPR-6120?redirect=false)** and commented  In Spring 3.0 the Velocity macro spring.vm introduces springFormCheckbox, a handy macro for generating a checkbox and associated field marker. However there is a bug in the implementation which causes the checkbox to always be checked.  This is due to the way the checked attribute is used in HTML, if a checked attribute is present, regardless of its value, then the checkbox is checked. The macro writes checked=""false"" when the input should not be selected, resulting in the attribute actually being checked.  Currently:   Should be:   ---  **Affects:** 3.0 M4  **Issue Links:** - #9377 Add single checkbox input macro for Velocity and Freemarker  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6420fd303bdae3962d4eab6326811afbca759d05","closed","type: bug,","spring-projects-issues","2009-09-16T20:27:32Z","2019-01-11T14:05:47Z"
"","9878","too restrictive visibility of method in BeanDefinitionParserDelegate [SPR-5205]","**[richard oates](https://jira.spring.io/secure/ViewProfile.jspa?name=rjo67)** opened **[SPR-5205](https://jira.spring.io/browse/SPR-5205?redirect=false)** and commented  In our setup we want to read in many bean definition ""fragments"" and then in a later step allow bean overriding. In BeanDefinitionParserDelegate the method parseBeanDefinitionElement checks for duplicate beans using the method checkNameUniqueness. If this method was protected instead of private, we could simply subclass and override it.  As it is, we're forced to subclass and duplicate the implementation of parseBeanDefinitionElement. Not a major problem, but it would be nice if the visibility of checkNameUniqueness could be changed to protected to enable us to avoid this.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-10-08T19:06:04Z","2012-06-19T03:47:21Z"
"","9916","CustomEditorConfigurer seems to inject beans without appropriate aspect wrappers/proxies [SPR-5242]","**[Richard Friend](https://jira.spring.io/secure/ViewProfile.jspa?name=richardf)** opened **[SPR-5242](https://jira.spring.io/browse/SPR-5242?redirect=false)** and commented  I have the following defined in myapp-infrastructure.xml  \ \ \ \ \ \ \ \ \ \  I also have the perService defined in myapp-service.xml like so  \ \ \  I register my properyties like so  public void registerCustomEditors(PropertyEditorRegistry registry) { registry.registerCustomEditor(Pet.class, new PetPropertyEditor(PetService)); }  Some of my Service methods are annotated with the Transactional annotation. (`@Transactional`)  When I attach a debugger to my application service and view these service methods injected I can see that the service classes are proxied, however when I run the tests the proxies disappear, what I believe is happening is that the CustomEditorConfigurer is being instantiated in my test before the classes are scanned for annotations and because the service is set up as a singleton it just keeps returning me a concrete implementation rather then the proxy. When I set up my service class to be a prototype I still get a concrete class injected into the CustomEditorConfigurer, however my tests have the correct proxied instance injected into them. I have also tried telling CustomEditorConfigurer and customPropertyEditorRegistrar to be lazy beans however so far they refuse.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-10-27T22:47:02Z","2015-09-22T17:34:35Z"
"","10946","Make @Bean optional [SPR-6279]","**[Ricardo Mayerhofer](https://jira.spring.io/secure/ViewProfile.jspa?name=ricardo.ekm)** opened **[SPR-6279](https://jira.spring.io/browse/SPR-6279?redirect=false)** and commented  It would be very interesting if `@Bean` were optional. I guess all public methods in a configuration class are beans.  Let's reduce boiler plate code in java community :)   --- No further details from [SPR-6279](https://jira.spring.io/browse/SPR-6279?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-03-24T10:22:05Z","2019-01-13T07:57:38Z"
"","10612","PackagesToScan and LocalContainerEntityManagerFactoryBean [SPR-5943]","**[Ricardo Mayerhofer](https://jira.spring.io/secure/ViewProfile.jspa?name=ricardo.ekm)** opened **[SPR-5943](https://jira.spring.io/browse/SPR-5943?redirect=false)** and commented  It would be extremely helpful if LocalContainerEntityManagerFactoryBean supports PackagesToScan, similar to AnnotationSessionFactoryBean   ---  5 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-07-20T01:31:56Z","2012-06-19T03:42:55Z"
"","10590","Make clover work with org.springframework.aspects project [SPR-5921]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-5921](https://jira.spring.io/browse/SPR-5921?redirect=false)** and commented  (This is technically a Spring Build bug, but Spring Framework may need to take the lead to fix it and then modify Spring Build accordingly)  Now that the tests have been ported over, the clover instrumentation from Spring Build is failing to instrument code with clover (which doesn't understand the AspectJ syntax).   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b1cb69fcb9ee591bb02449ecc2a3e09615a654f0","closed","type: enhancement,","spring-projects-issues","2009-07-12T09:44:35Z","2014-11-04T03:51:40Z"
"","10589","Simplify domain object dependency injection through use of generics [SPR-5920]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-5920](https://jira.spring.io/browse/SPR-5920?redirect=false)** and commented  Currently, users who extend AbstractInterfaceDrivenDependencyInjectionAspect need to have some knowledge of AspectJ constructs. Specifically, they need to know about the 'declare parents' construct and the pointcut syntax. With the help of generics, we should be able to remove both these issues paving the way for type-safe aspect that requires no/little knowledge of AspectJ.  So instead of: aspect PricingStrategyDependencyInjectionAspect extends AbstractInterfaceDrivenDependencyInjectionAspect { private PricingStrategy pricingStrategy;      	public pointcut inConfigurableBean() : within(PricingStrategyClient+);     	     	public void configureBean(Object bean) {     		((PricingStrategyClient)bean).setPricingStrategy(this.pricingStrategy);     	}     	     	declare parents: PricingStrategyClient implements ConfigurableObject;     	     	public void setPricingStrategy(PricingStrategy pricingStrategy) {     		this.pricingStrategy = pricingStrategy;     	}     }  they can write:      aspect PricingStrategyDependencyInjectionAspect extends GenericInterfaceDrivenDependencyInjectionAspect {     	private PricingStrategy pricingStrategy;     	     	public void configure(PricingStrategyClient bean) {     		bean.setPricingStrategy(pricingStrategy);     	}     	     	public void setPricingStrategy(PricingStrategy pricingStrategy) {     		this.pricingStrategy = pricingStrategy;     	}     }    ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/29139dfd1a7160ec07e68259cebdf4e4ff433302","closed","type: enhancement,","spring-projects-issues","2009-07-11T16:33:28Z","2012-06-19T03:43:16Z"
"","10588","Port tests in the org.springframework.aspects project to JUnit 4 [SPR-5919]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-5919](https://jira.spring.io/browse/SPR-5919?redirect=false)** and commented  Since just ported sources (#10587) use JUnit 3, we need to port those over JUnit 4.  ---  **Affects:** 3.0 M3","closed","in: core,","spring-projects-issues","2009-07-11T15:51:20Z","2019-01-11T18:12:58Z"
"","10587","Port tests to the org.springframework.aspects project [SPR-5918]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-5918](https://jira.spring.io/browse/SPR-5918?redirect=false)** and commented  Currently, the tests from 2.5.x have not been added to the 3.0.x tree for org.springframework.aspects.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7199fcc233dd88800564cdf7fa85b7bc45fa3f08","closed","in: core,","spring-projects-issues","2009-07-11T15:41:31Z","2019-01-11T18:13:03Z"
"","10111","JoinPoint and Singature toString, toShortString, and toLongString don't return useful information [SPR-5437]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-5437](https://jira.spring.io/browse/SPR-5437?redirect=false)** and commented  Furthermore, the method output doesn't match what AspectJ weaving produces making it difficult to migrate from/to Spring AOP and AspectJ weaving.  For example, here is what the current implementation of Spring AOP returns for these methods: - JoinPoint.getSignature().toString()  -- org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl@1c737be - JoinPoint.toString() -- org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: execution(find) - JoinPoint.getSignature().toShortString() -- find - JoinPoint.toShortString() -- execution(find) - JoinPoint.getSignature().toLongString() -- public abstract java.lang.Object com.myco.util.GenericRepository.find(java.lang.Long) - JoinPoint.toLongString() -- org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint: execution:   [ReflectiveMethodInvocation: public abstract java.lang.Object com.mycoutil.GenericRepository.find(java.lang.Long); target is of class [com.myco.repository.impl.JpaProductRepository]]  Basically, toString methods don't provide much useful information, short versions provide too little, and long versions provide too much :-) and not consistent in their output. As a result, these methods are not very useful for tracing, performance monitoring etc.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c8d6c15a05556747318efa7a134d06309bd63208","closed","in: core,","spring-projects-issues","2009-01-27T08:56:39Z","2012-06-19T03:47:01Z"
"","9998","Accessing applicationContext works when deployed but not when in Eclipse/Tomcat [SPR-5325]","**[Ralph Bosson](https://jira.spring.io/secure/ViewProfile.jspa?name=rboss)** opened **[SPR-5325](https://jira.spring.io/browse/SPR-5325?redirect=false)** and commented  Wasn't sure where to go with this so I'll start here.  I have a .war project with Spring Nature mixed with Hibernate.  When deployed to a Tomcat application server  outside of Eclipse (tested on 5.5 and 6.0.18) all works as described.   When the war is deployed to a Tomcat server running in Eclipse/Tomcat 5.5 I am unable to load the applicationContext using the following code: ClassPathXmlApplicationContext  ac = new ClassPathXmlApplicationContext(new String[] {""classpath*:dataSourceContext-hibernate.xml"",""classpath*:applicationContext-hibernate.xml""});  This all worked until I upgrade from Spring 2.1 and still works when deployed to Tomcat outside of Eclipse. It just can't find the ApplicationContext when deployed in Tomcat/Eclipse.  So, debugging which was once a beautiful thing is now non-existent on the server side of the application.  I have no way of knowing if this is an Eclipse issue or Spring.  Thanks Ralph   --- No further details from [SPR-5325](https://jira.spring.io/browse/SPR-5325?redirect=false)","closed","","spring-projects-issues","2008-11-26T07:43:47Z","2019-01-11T16:19:38Z"
"","9959","Add ability in PropertyPlaceholderConfigurer to be able to specify the default value [SPR-5286]","**[Rajneesh](https://jira.spring.io/secure/ViewProfile.jspa?name=rajneeshg)** opened **[SPR-5286](https://jira.spring.io/browse/SPR-5286?redirect=false)** and commented  Right now in spring placeholder there is no way to specify default value for a place holder is property is not configured.   This would be nice feature to be able to specify default value with placeholder separated by some string, which should be configurble.  I have implemented a custom property configurer extending the PropertyPlaceholderConfigurer. Source is attached   ---  **Affects:** 2.5.5  **Attachments:** - [PropertyReplaceConfigurerWithDefaultValue.java](https://jira.spring.io/secure/attachment/14847/PropertyReplaceConfigurerWithDefaultValue.java) (_5.47 kB_)","closed","type: enhancement,","spring-projects-issues","2008-11-10T05:58:48Z","2012-06-19T09:36:25Z"
"","9904","Unable to get messages from Message resources file for keys [SPR-5230]","**[Rajiv Singla](https://jira.spring.io/secure/ViewProfile.jspa?name=rajiv2009)** opened **[SPR-5230](https://jira.spring.io/browse/SPR-5230?redirect=false)** and commented  We have a web app having 3 layers - Action classes, Service or Business Objects and DAOs. BOs and DAOs are accessed thru interfaces. We use spring to inject dependency.  We have defined scope=""session"" for beans corresponding to actions. For BOs and DAOs , no scope is defined. We are using applicationContext xml files to define beans.  Labels and buttons names are picked up from MessageResources.properties file. But on some pages these values are not picked up and labels go missing.  I am new to both Spring and Struts 2 and I am unable to figure that why this is happening. Message resources are loaded in context and it should be available to all.  Please help me resolve this issue.  Thanks in advance,  Rajiv   ---  **Affects:** 2.0.3","closed","","spring-projects-issues","2008-10-22T16:53:23Z","2019-01-11T15:19:39Z"
"","10489","The generated class 'org.springframework.expression.spel.generated.SpringExpressionsParser' has a faulty constructor and throws a java.lang.NoSuchFieldError [SPR-5819]","**[Rajesh Arya](https://jira.spring.io/secure/ViewProfile.jspa?name=raj)** opened **[SPR-5819](https://jira.spring.io/browse/SPR-5819?redirect=false)** and commented  Exception in thread ""main"" java.lang.NoSuchFieldError: ruleMemo at org.springframework.expression.spel.generated.SpringExpressionsParser.\(SpringExpressionsParser.java:102) at org.springframework.expression.spel.antlr.SpringExpressionsParserExtender.\(SpringExpressionsParserExtender.java:37) at org.springframework.expression.spel.antlr.SpelAntlrExpressionParser.\(SpelAntlrExpressionParser.java:52) at org.springframework.context.expression.StandardBeanExpressionResolver.\(StandardBeanExpressionResolver.java:57) at org.springframework.context.support.AbstractApplicationContext.prepareBeanFactory(AbstractApplicationContext.java:440) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:351) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:140) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:94)  The error happens in SpringExpressionParser constructor      public SpringExpressionsParser(TokenStream input) {         super(input);         ruleMemo = new HashMap[40+1];      }  ruleMemo is defined neither in 'org.springframework.expression.spel.generated.SpringExpressionParser', nor in parent class 'org.antlr.runtime.Parser' nor in grandparent class 'org.antlr.runtime.BaseRecognizer'    ---  **Affects:** 3.0 M3","closed","type: bug,","spring-projects-issues","2009-06-10T05:42:53Z","2012-06-19T03:43:47Z"
"","10655","SingleConnectionFactory's resetConnection is causing deadlocks with underlying OracleAQ's JMS connection [SPR-5987]","**[Rajani Chennamaneni](https://jira.spring.io/secure/ViewProfile.jspa?name=chrajanirao)** opened **[SPR-5987](https://jira.spring.io/browse/SPR-5987?redirect=false)** and commented  We had encountered below deadlock using the Spring 2.5.6 jar.  ""DefaultMessageListenerContainer-303263"" prio=10 tid=0x081be000 nid=0x5e74 waiting for monitor entry [0xb0698000..0xb0698ea0] java.lang.Thread.State: BLOCKED (on object monitor) at oracle.jms.AQjmsExceptionListener.resumeExceptionListener(AQjmsExceptionListener.java:235) - waiting to lock  (a oracle.jms.AQjmsExceptionListener)   at oracle.jms.AQjmsConnection.start(AQjmsConnection.java:498) - locked  (a oracle.jms.AQjmsConnection)   at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:514)   at $Proxy29.start(Unknown Source)   at org.springframework.jms.connection.ConnectionFactoryUtils.doGetTransactionalSession(ConnectionFactoryUtils.java:277)   at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:286)   at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:241)   at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)   at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:881)   at java.lang.Thread.run(Thread.java:619)  ""Thread-336"" prio=10 tid=0x0852e800 nid=0x489e waiting for monitor entry [0xaf0b0000..0xaf0b10a0] java.lang.Thread.State: BLOCKED (on object monitor) at oracle.jms.AQjmsConnection.stop(AQjmsConnection.java:520) - waiting to lock  (a oracle.jms.AQjmsConnection)   at org.springframework.jms.connection.SingleConnectionFactory.closeConnection(SingleConnectionFactory.java:423)   at org.springframework.jms.connection.SingleConnectionFactory.resetConnection(SingleConnectionFactory.java:322) - locked  (a java.lang.Object)   at org.springframework.jms.connection.CachingConnectionFactory.resetConnection(CachingConnectionFactory.java:199)   at org.springframework.jms.connection.SingleConnectionFactory.onException(SingleConnectionFactory.java:303)   at org.springframework.jms.connection.ChainedExceptionListener.onException(ChainedExceptionListener.java:60)   at oracle.jms.AQjmsExceptionListener.onException(AQjmsExceptionListener.java:148) - locked  (a oracle.jms.AQjmsExceptionListener)   at oracle.jms.AQjmsExceptionListener.run(AQjmsExceptionListener.java:223)  We then patched SingleConnectionFactory.java for the change made in Revision 1500 (https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java?r2=1500&r1=674) of this class in truck in our project. I will attach the patched file to this issue as well. This patch we did also includes an additional log statement in ""onException"" method to log the JMSException. It would be nice if you can add that log statement for next release.  Even after the patch of moving the ""this.target.start()"" statement inside the synchronized block, we still encountered deadlock as below:  Name: DefaultMessageListenerContainer-43803 State: BLOCKED on oracle.jms.AQjmsExceptionListener@a77e20 owned by: Thread-92 Total blocked: 1  Total waited: 0  Stack trace: oracle.jms.AQjmsExceptionListener.resumeExceptionListener(AQjmsExceptionListener.java:235) oracle.jms.AQjmsConnection.start(AQjmsConnection.java:498) - locked oracle.jms.AQjmsConnection@1c15642   org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:517) - locked java.lang.Object@91d649   $Proxy29.start(Unknown Source)   org.springframework.jms.connection.ConnectionFactoryUtils.doGetTransactionalSession(ConnectionFactoryUtils.java:277)   org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:286)   org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:241)   org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)   org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:881)   java.lang.Thread.run(Thread.java:619)  Name: Thread-92 State: BLOCKED on java.lang.Object@91d649 owned by: DefaultMessageListenerContainer-43803 Total blocked: 1  Total waited: 42  Stack trace: org.springframework.jms.connection.SingleConnectionFactory.resetConnection(SingleConnectionFactory.java:322) org.springframework.jms.connection.CachingConnectionFactory.resetConnection(CachingConnectionFactory.java:199) org.springframework.jms.connection.SingleConnectionFactory.onException(SingleConnectionFactory.java:304) org.springframework.jms.connection.ChainedExceptionListener.onException(ChainedExceptionListener.java:60) oracle.jms.AQjmsExceptionListener.onException(AQjmsExceptionListener.java:148) - locked oracle.jms.AQjmsExceptionListener@a77e20   oracle.jms.AQjmsExceptionListener.run(AQjmsExceptionListener.java:223)  My suggestion is to make the call to target's start method only if it wasn't already started. The code would like below:                  synchronized (connectionMonitor) {          if (!started) { //if condition added to avoid possible deadlocks when trying to reset the target connection                   this.target.start();                   started = true;          }     }  Please look into this and let me know what you think of the change and address it accordingly in the next release.   ---  **Affects:** 2.5.6  **Attachments:** - [SingleConnectionFactory.java](https://jira.spring.io/secure/attachment/15595/SingleConnectionFactory.java) (_21.01 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e25ca817552075db098930f3a960fd5169e65a4, https://github.com/spring-projects/spring-framework/commit/23a1d07fbf0b2da2bd98bc979faf06903f7fe4cf, https://github.com/spring-projects/spring-framework/commit/83bd56c6de077c469da4964cbcb71e6d821e7fa0","closed","type: bug,","spring-projects-issues","2009-08-06T06:15:40Z","2012-06-19T03:43:31Z"
"","10468","Documentation - Reference - Space missing [SPR-5798]","**[Radu Oniga](https://jira.spring.io/secure/ViewProfile.jspa?name=roniga)** opened **[SPR-5798](https://jira.spring.io/browse/SPR-5798?redirect=false)** and commented  In Reference Documentation - 3.0.M3, page 12 in PDF, 2.4 Overview of new features - Core APIs updated for Java 5  In method declaration is missing a space between ""String"" and ""name"":  T getBean(Stringname, Class\ requiredType)   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/755b514468b80d422ca5be03f687b611b39a2cdd","closed","type: bug,","spring-projects-issues","2009-06-01T19:38:42Z","2012-06-19T03:42:46Z"
"","10155","Autowire injection caches values (HttpSession) [SPR-5482]","**[Priit Liivak](https://jira.spring.io/secure/ViewProfile.jspa?name=priit)** opened **[SPR-5482](https://jira.spring.io/browse/SPR-5482?redirect=false)** and commented  AutowiredAnnotationBeanPostProcessor.AutowiredMethodElement caches null value. My target was to inject httpSession but in a way that if dependency is optional then new session would not be created if it doesn't already exist.  Default objectFactory for injecting session does not consider that and always creates new session. So I created my own. Now when I tired the injection everything worked to some level. AutowiredFieldElement and AutowiredMethodElement cached objects and behaved differently. If I remember correctly then AutowiredMethodElement  cached null value. If first injection resulted an object then always new values were injected. AutowiredFieldElement on the other hand cached the first value it obtained from the factory.   ---  **Affects:** 3.0 M1  **Reference URL:** http://forum.springsource.org/showthread.php?t=65624  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2009-02-12T22:12:59Z","2019-01-12T16:27:16Z"
"","10576","Autowiring of fields failed  [SPR-5907]","**[praveen reddy](https://jira.spring.io/secure/ViewProfile.jspa?name=ppalwaik)** opened **[SPR-5907](https://jira.spring.io/browse/SPR-5907?redirect=false)** and commented  Unable to auto wire the datasource to DAO. Its throwing the exception.  Error creating bean with name 'userDaoImpl': Autowiring of methods failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/dao/UncategorizedDataAccessException        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessAfterInstantiation(AutowiredAnnotationBeanPostProcessor.java:259)            at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:961)            at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:475)            at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:412)            at java.security.AccessController.doPrivileged(Native Method)            at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:383)            at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:276)            at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)            at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:273)            at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:175)            at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:485)            at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:716)            at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:377)            at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:427)            at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:341)            at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:307)            at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127)            at javax.servlet.GenericServlet.init(GenericServlet.java:212)    ---  **Affects:** 3.0 M3  **Attachments:** - [UserDao1.java](https://jira.spring.io/secure/attachment/15518/UserDao1.java) (_1.40 kB_)","closed","in: core,","spring-projects-issues","2009-07-07T08:36:36Z","2019-01-12T05:33:21Z"
"","10020","CLONE -CustomEditor getAsText() not called in MultiActionController [SPR-5347]","**[Pravat Kumar Panda](https://jira.spring.io/secure/ViewProfile.jspa?name=pravat_oec)** opened **[SPR-5347](https://jira.spring.io/browse/SPR-5347?redirect=false)** and commented  I have a problem in which when I register a CustomDateEditor in initBinder() method in MultiActionController (Works perfectly in SimpleFormController), when the Date is not converted to the specified String format.  my code is as follows briefly:  protected void initBinder(ServletRequest servletRequest, ServletRequestDataBinder binder) { CustomDateEditor cde = new CustomDateEditor(new SimpleDateFormat ('dd/MM/yyyy'), true); binder.registerCustomEditor(java.util.Date.class, cde); }  and my jsp binding code:      I later tried to test this by writting a method that extends CustomDateEditor and overwrites getAsText() and setAsText() as such:  ... String getAsText(String s){ text = super.getAsText(s); logger.info(""getAsText():"" + text); return text; }  when I tried it out, I found that setAsText() was called when I do a submission. but when I load the page, getAsText() is never called.  To make sure I did not write my code and configuration wrongly, I converted my MultiActionController to SimpleFormController with the essential code intact and it worked perfectly as expected.  another issue thats connected... in the MultiActionController, when I submit a wrongly formatted date, I get shown the exception page with the BindException.  I have this in my message.properties: typeMismatch=Invalid data. typeMismatch.java.util.Date=Invalid date format.  Again, I tried out in SimpleFormController and it works perfectly. I tried out the codes in Spring 1.2.1 and later 1.2.2. Same results.  I looked through the forums and realised a few ppl have the same problems. but nobody did solve their problems. All their final verdict was it should work and nobody really was able to help further and no one solved their problem.  They didn't mention the controllers they are using, so I suppose those who reply should work is using FormControllers while those who encountered problem are using MultiActionController? So I think this may fit the puzzle why some ppl can work and some can't.   ---  **Affects:** 1.2.1, 1.2.2","closed","status: declined,","spring-projects-issues","2008-12-09T19:42:00Z","2019-01-12T16:27:37Z"
"","10819","Suggestions for improving the performance and extensibility of Spring MVC annotations [SPR-6151]","**[Phil Zoio](https://jira.spring.io/secure/ViewProfile.jspa?name=pzoio)** opened **[SPR-6151](https://jira.spring.io/browse/SPR-6151?redirect=false)** and commented  The issues I am describing related to the annotation support in 2.5.x, so if these have already been addressed in 3.0 then apologies in advance.  I have been using Spring MVC recently with the annotation support from 2.5.5.  Part of the application is using Spring MVC annotations, and part of the application is using Struts. I was disappointed to notice that the performance/responsiveness of the Spring MVC part of the application is noticeably slower in this regard.  The big problem is that the annotation handler is doing too much work per request.  Some examples of where this is the case, and how they could be improved:  1. Resolving the method name takes place once for every request. Instead, when a controller class is encountered (when the application context is loaded, for example), the handler methods should be registered so that the framework knows what request URIs will be directed by which methods. At the moment, this appears to be being done with each request in ServletHandlerMethodResolver  2. For a resolved method, the mechanism for extracting information from the request by parameter should be better abstracted and cached  At the moment, in HandlerMethodInvoker.resolveHandlerArguments, each request seems to do the following. For each method parameter, - it figures out whether it has `@RequestParam` or `@ModelAttribute` and applies some special case logic - it then uses registered custom WebArgumentResolvers to try resolve the arguments (mine has quite a few, so this logic will be checked each time) - it then applies some more special case logic to see if the argument is one of the following: ServletRequest, ServletResponse, HttpSession, Principal, etc.  All of this is quite inefficient.  Instead, in my view there should be a single interface, something like this:  RequestArgumentResolver { Object resolverWebArguments(ServletRequest,ServletResponse,ServletContext,Model) }  The first time a handler method is encountered, for each argument a WebArgumentResolver instance should be cached and built up against it. The logic for setting up WebArgumentResolvers would be done once.  Then psuedocode for the request processing would be as follows:  Method method = getRequestMethod(request); Class[] paramTypes = handlerMethod.getParameterTypes(); Object[] args = new Object[paramTypes.length];  for (int i = 0; i < args.length; i++) { MethodParameter methodParam = new MethodParameter(handlerMethod, i);      //simple lookup to get web argument resolver for current method and method parameter     RequestArgumentResolver w = getWebArgumentResolver(methodParam, ...)     Object o = w.resolveArgument(request, response, context, model, ...)     args[i] = o;  }  Then execute the handler method, extract the return type, etc.  On the latter, you could have an interface which represents a similarly abstracted operation for extracting request arguments.  3. The mechanism for custom argument resolvers could be made to fit in with the above. Custom WebArgumentResolver would instead of    resolving request arguments directly, would return a RequestArgumentResolver instance, reading the necessary information for this off a custom annotation.  By the way, I've done a lot of this kind of work before as I wrote an annotation framework for Struts: http://www.strecks.org/ I've thought in the past of updating it to use Spring instead of Struts, but I'm too busy with Impala http://code.google.com/p/impala/ to take on this right now, and it would certainly be better for this work to be done within Spring.I have been using Spring MVC recently with the annotation support from 2.5.5.  Part of the application is using Spring MVC annotations, and part of the application is using Struts. I was disappointed to notice that the performance/responsiveness of the Spring MVC part of the application is noticeably slower in this regard.  I think the big problem is that the annotation handler is doing too much work per request.  Some examples of where this is the case, and how they could be improved:  1. Resolving the method name takes place once for every request. Instead, when a controller class is encountered (when the application context is loaded, for example),    the handler methods should be registered so that the framework knows what request URIs will be directed by which methods. At the moment, this appears to be being done with each request in ServletHandlerMethodResolver  2. For a resolved method, the mechanism for extracting information from the request by parameter should be better abstracted and cached  At the moment, in HandlerMethodInvoker.resolveHandlerArguments, each request seems to do the following. For each method parameter, - it figures out whether it has `@RequestParam` or `@ModelAttribute` and applies some special case logic - it then uses registered custom WebArgumentResolvers to try resolve the arguments (mine has quite a few, so this logic will be checked each time) - it then applies some more special case logic to see if the argument is one of the following: ServletRequest, ServletResponse, HttpSession, Principal, etc.  All of this is quite inefficient.  Instead, in my view there should be a single interface, something like this:  RequestArgumentResolver { Object resolverWebArguments(ServletRequest,ServletResponse,ServletContext,Model) }  The first time a handler method is encountered, for each argument a WebArgumentResolver instance should be cached and built up against it. The logic for setting up WebArgumentResolvers would be done once.  Then psuedocode for the request processing would be as follows:  Method method = getRequestMethod(request); Class[] paramTypes = handlerMethod.getParameterTypes(); Object[] args = new Object[paramTypes.length];  for (int i = 0; i < args.length; i++) { MethodParameter methodParam = new MethodParameter(handlerMethod, i);      //get cached web argument resolver for current method and method parameter     RequestArgumentResolver w = getWebArgumentResolver(methodParam, method, ...)     Object o = w.resolveArgument(request, response, context, model, ...)     args[i] = o;  }  Then execute the handler method, extract the return type, etc.  On the latter, you could have an interface which represents  3. The mechanism for custom argument resolvers could be made to fit in with the above. Custom WebArgumentResolver would instead of    resolving request arguments directly, would return a RequestArgumentResolver instance, reading the necessary information for this off a custom annotation.  By the way, I've done a lot of this kind of work before as I wrote an annotation framework for Struts: http://www.strecks.org/ I've thought in the past of updating it to use Spring instead of Struts, but I'm too busy with Impala http://code.google.com/p/impala/ to take on this right now, and it would certainly be better for this work to be done within Spring core.   ---  **Attachments:** - [mvc-comparison.pdf](https://jira.spring.io/secure/attachment/16321/mvc-comparison.pdf) (_29.07 kB_)  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-25T22:05:34Z","2015-09-22T17:34:35Z"
"","10445","add optional id in component scan representing a list of the added beans [SPR-5775]","**[Peter Weemeeuw](https://jira.spring.io/secure/ViewProfile.jspa?name=pweemeeuw)** opened **[SPR-5775](https://jira.spring.io/browse/SPR-5775?redirect=false)** and commented  I think it could be useful in some circumstances to access the beans that have been added by a component scan as a list. In the following example the plugins added by Spring could be made available as a list with bean id ""imagePlugins"".       --- No further details from [SPR-5775](https://jira.spring.io/browse/SPR-5775?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-05-20T08:16:40Z","2012-06-19T09:36:16Z"
"","9937","PathMatchingResourcePatternResolver(ClassLoader classLoader) [SPR-5264]","**[Peter Rietzler](https://jira.spring.io/secure/ViewProfile.jspa?name=peterrietzler)** opened **[SPR-5264](https://jira.spring.io/browse/SPR-5264?redirect=false)** and commented  The method documentation says:  * `@param` classLoader the ClassLoader to load classpath resources with, * or \null\ for using the thread context class loader   ...   public PathMatchingResourcePatternResolver(ClassLoader classLoader) {  The following code throws a NullPointerException:  new PathMatchingResourcePatternResolver(null).getResources(""*/**"");  java.lang.NullPointerException at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findAllClassPathResources(PathMatchingResourcePatternResolver.java:299) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:267) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:334) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:263) ....    --- No further details from [SPR-5264](https://jira.spring.io/browse/SPR-5264?redirect=false)","closed","in: core,","spring-projects-issues","2008-11-02T23:07:59Z","2012-06-19T03:47:34Z"
"","9893","Race-Condition in RMIServiceExporter [SPR-5263]","**[Peter Rietzler](https://jira.spring.io/secure/ViewProfile.jspa?name=peterrietzler)** opened **[SPR-5263](https://jira.spring.io/browse/SPR-5263?redirect=false)** and commented  RMIServiceExporter can be configured to create it's own RMI registry if there is no RMI registry started. It does so by trying to connect to the RMI registry, if it cannot connect it tries to create it's own registry.  When you start several application contexts asynchronously (such as with Spring-DM) and you try to export services from several application contexts you will enter a race for the creation of the RMI registry. This is pretty good reproducible due to the fact that the registry.list() method blocks.  A workaround for a standard environment is to subclass RMIServiceExporter and synchronize the service registry tests across RMIServiceExporter instances, however, this is not an option in an OSGI-environment since in this case the class loader of the new RMIServiceExporter subclass is used for serialization -> which leads to severe problems!  A fix would be to add cross instance synchronization to RMIServiceExporter.getRegistry, e.g.      protected Registry getRegistry(int registryPort) throws RemoteException {           synchronized(RMIServiceExporter.class) {     	if (this.alwaysCreateRegistry) {     		logger.info(""Creating new RMI registry"");     		return LocateRegistry.createRegistry(registryPort);     	}     	if (logger.isInfoEnabled()) {     		logger.info(""Looking for RMI registry at port '"" + registryPort + ""'"");     	}     	try {     		// Retrieve existing registry.     		Registry reg = LocateRegistry.getRegistry(registryPort);     		testRegistry(reg);     		return reg;     	}     	catch (RemoteException ex) {     		logger.debug(""RMI registry access threw exception"", ex);     		logger.info(""Could not detect RMI registry - creating new one"");     		// Assume no registry found -> create new one.     		return LocateRegistry.createRegistry(registryPort);     	}              }     }    --- No further details from [SPR-5263](https://jira.spring.io/browse/SPR-5263?redirect=false)","closed","type: bug,","spring-projects-issues","2008-11-02T18:16:04Z","2012-06-19T03:47:31Z"
"","9902","Custom Pointcuts matching Annotatiosn on the Implementing Class are hard to add! [SPR-5228]","**[Peter Rietzler](https://jira.spring.io/secure/ViewProfile.jspa?name=peterrietzler)** opened **[SPR-5228](https://jira.spring.io/browse/SPR-5228?redirect=false)** and commented   --- No further details from [SPR-5228](https://jira.spring.io/browse/SPR-5228?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-10-21T21:16:58Z","2012-06-19T09:36:31Z"
"","10723","Dependency on mx.events [SPR-6054]","**[Peter Lorent](https://jira.spring.io/secure/ViewProfile.jspa?name=plorent)** opened **[SPR-6054](https://jira.spring.io/browse/SPR-6054?redirect=false)** and commented  Due to a dependency on mx.events AppSettings cannot be used in a pure AS3 project. It would be nice if we could.   --- No further details from [SPR-6054](https://jira.spring.io/browse/SPR-6054?redirect=false)","closed","status: invalid,","spring-projects-issues","2009-08-31T01:58:54Z","2019-01-12T05:33:08Z"
"","10311","Reload the application context for each test in a class with a class level annotation [SPR-5640]","**[Peter Lappo](https://jira.spring.io/secure/ViewProfile.jspa?name=peterlappo)** opened **[SPR-5640](https://jira.spring.io/browse/SPR-5640?redirect=false)** and commented  Tests can often alter the context state, this can cause subsequent tests to fail. A class level annotion similar to `@DirtiesContext` would allow class level control of reloading contexts. Changing the default at the application level to reload would be possible but somewhat heavy handed and contrary to the current approach of reusing the context. A class level annotation called `@DirtiesClassContext` to force a context reload for each test in the class is proposed.  The attached zip file In the forum contains an implemention `@DirtiesClassContext` that has proven to work. For convenience the classes in the implementation are packaged in the same way as spring-test.  ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=234264#post234264  **Attachments:** - [dirtyclass.zip](https://jira.spring.io/secure/attachment/15276/dirtyclass.zip) (_2.13 kB_)  **Issue Links:** - #10068 ApplicationContext not closed when using `@ContextConfiguration` to implement integration tests - #9379 Support for `@DirtiesContext` at the test class level  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c254f389c068eeff239320f073294d0b7d3492e9, https://github.com/spring-projects/spring-framework/commit/e31d947eb976c3a1715b8dc70185a65a08f930b2, https://github.com/spring-projects/spring-framework/commit/eef6fd3f09543187dd94db7cb0b5ea41d4758c1e","closed","type: enhancement,","spring-projects-issues","2009-03-31T09:40:20Z","2019-01-13T08:00:19Z"
"","10710","Support Hessian 4.0.1 with Spring 3.0 [SPR-6041]","**[Peter Dettman](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.dettman)** opened **[SPR-6041](https://jira.spring.io/browse/SPR-6041?redirect=false)** and commented  The Caucho hessian lib has now stabilised its v2.0 protocol and rounded up several regressions, with the release of v4.0.1 (http://caucho.com/download/hessian-4.0.1.jar).  In 4.0.1, the HessianSkeleton class provides a ready-made invoke method that Spring's HessianExporter can call (instead of duplicating its code). I am attaching a patch that modifies HessianExporter.java to do so. The debugging output part of the code is still duplicated of necessity until some suitable refactoring of HessianSkeleton is done.  As far as backward compatibility is concerned, I believe users should avoid using Hessian 2.0 protocol from previous versions (that may be an overly strict interpretation). Hessian 1.0 protocol should work fine with a v4.0.1 server. I understand that there could be problems if people are using HessianOutput/Hessian2Output or streaming versions directly.  I recommend Caucho's Hessian 4.0.1 be used for Spring 3.0, a fresh start of sorts.  See also: http://maillist.caucho.com/pipermail/hessian-interest/2009-June/000750.html (and surrounding discussion on that list) http://jira.springframework.org/browse/SPR-5469 http://bugs.caucho.com/view.php?id=3646  ---  **Affects:** 3.0 M4  **Attachments:** - [HessianExporter_401.patch](https://jira.spring.io/secure/attachment/15642/HessianExporter_401.patch) (_2.88 kB_)  **Issue Links:** - #10142 Support Hessian 3.2.1  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-25T15:35:34Z","2019-01-11T14:22:45Z"
"","10310","SimpleHessianServiceExporter should use chunked transfer encoding [SPR-5639]","**[Peter Dettman](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.dettman)** opened **[SPR-5639](https://jira.spring.io/browse/SPR-5639?redirect=false)** and commented  The current SimpleHessianServiceExporter implementation buffers the entire output of the Hessian call before sending the response.  Since a Hessian call can return an arbitrary amount of data, the response should be streamed. Patch to follow.    ---  **Affects:** 3.0 M2  **Attachments:** - [SPR-5639.patch](https://jira.spring.io/secure/attachment/15270/SPR-5639.patch) (_3.01 kB_) - [SPR-5639.patch](https://jira.spring.io/secure/attachment/15269/SPR-5639.patch) (_1.14 kB_)","closed","type: enhancement,","spring-projects-issues","2009-03-31T03:53:20Z","2018-12-27T11:11:41Z"
"","10292","Set Content-Type response header for Hessian services [SPR-5621]","**[Peter Dettman](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.dettman)** opened **[SPR-5621](https://jira.spring.io/browse/SPR-5621?redirect=false)** and commented  When using HessianServlet from the caucho hessian implementation, the responses have Content-Type = application/x-hessian. This is not done in HessianServiceExporter (or SImpleHessianServiceExporter).    ---  **Affects:** 2.5.6  **Attachments:** - [SPR-5621.patch](https://jira.spring.io/secure/attachment/15261/SPR-5621.patch) (_2.18 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eabad33aa287fb0a45f7bc88ce32e636307ab094","closed","type: enhancement,","spring-projects-issues","2009-03-26T15:29:21Z","2012-06-19T03:47:13Z"
"","10850","I18n extension for restfull URL support [SPR-6182]","**[Pavla NovÃ¡kovÃ¡](https://jira.spring.io/secure/ViewProfile.jspa?name=pavla)** opened **[SPR-6182](https://jira.spring.io/browse/SPR-6182?redirect=false)** and commented  Consider multilanguage application with user friendly URL:  A] Requirements for user (and search engines) friendly URL:  1) one logical page represented by single ""logical URL""  from developer's view should have different  ""real URLs""  to match user-friendly URL's in different languages 2) one logical page in different languages should always have different URL if search engine optimalization is required  B] Example: Let's have logical page displaying user profile page:  Real URLs for this page should be:  www.i18n.info/my-user-account/my-profile.html (english), www.18n.info/mein-account/mein-profil.html (german), www.i18n.info/muj-ucet/muj-profil.html (czech)  C] Solution From developer's perspective  this should be represented as single logical URL template using  ""i18n tokens""  enclosed by  a delimiter (for example % ):  /%userAccount%/%userProfile%.html  ""I18n tokens"" should be keys to specified resource bundle (message source).  If no key is found in resource bundle, fallback to URL  composed of message keys (/userAccount/userProfile.html).  I've already implemented this functionality for spring 2.5.5 (restfull URL, i18n tokens included) - if you are interested in code and components that had to be customize, I can provide you with it.  I'm not sure how usefull this feature would be for others, but I would definitely invited if this works out of the box.    ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-03T20:43:16Z","2012-06-19T09:36:20Z"
"","10815","Spring complains that it needs to be started with agent when it actually is started that way [SPR-6147]","**[Paul Schifferer](https://jira.spring.io/secure/ViewProfile.jspa?name=pschifferer)** opened **[SPR-6147](https://jira.spring.io/browse/SPR-6147?redirect=false)** and commented  Spring complains that it needs to be started with an agent in order to use the InstrumentationLoadTimeWeaver even when it is, in fact, started with said agent.  [pschifferer@leo ~/Projects/workspaces/apps/torchlight/target/distributions/Torchlight-macosx-1.0.0/Torchlight.app/Contents/Resources/Java] java -Dosgi.requiredJavaVersion=1.5 -Xdock:icon=../torchlight.icns -XstartOnFirstThread -Xms40m -Xmx512m -XX:MaxPermSize=256m -Dorg.eclipse.swt.internal.carbon.smallFonts -javaagent:spring-agent-2.5.6.jar -jar plugins/org.eclipse.equinox.launcher_1.0.100.v20080509-1800.jar log4j:WARN No appenders could be found for logger (org.springframework.osgi.extender.internal.activator.ContextLoaderListener). log4j:WARN Please initialize the log4j system properly. Discovered configurations {config/\*} in bundle [Torchlight Core Application (net.sourceforge.torchlight.core.application;singleton:=true)] Refreshing org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext@23cfcf: display name [OsgiBundleXmlApplicationContext(bundle=net.sourceforge.torchlight.core.application, config=config/*)]; startup date [Thu Apr 09 22:52:01 PDT 2009]; root of context hierarchy Unpublishing application context OSGi service for bundle Torchlight Core Application (net.sourceforge.torchlight.core.application;singleton:=true) Loading XML bean definitions from URL [bundleentry://26/config/core-application-context.xml] Bean factory for application context [org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext@23cfcf]: org.springframework.beans.factory.support.DefaultListableBeanFactory@d3509c Loading properties file from OSGi resource[classpath:torchlight.properties|bnd.id=26|bnd.sym=net.sourceforge.torchlight.core.application] Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=net.sourceforge.torchlight.core.application, config=config/*)) java.lang.IllegalStateException: Must start with Java agent to use InstrumentationLoadTimeWeaver. See Spring documentation.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce800fb45a16bffd860b49abc2f3181e38720cc4","closed","type: bug,","spring-projects-issues","2009-04-09T17:07:59Z","2012-06-19T03:43:38Z"
"","10537","Allow to inject contents of text files [SPR-5868]","**[Paul Pacheco](https://jira.spring.io/secure/ViewProfile.jspa?name=paulpach)** opened **[SPR-5868](https://jira.spring.io/browse/SPR-5868?redirect=false)** and commented  I would like it if there was a built in way to inject the contents of a file as a string or as byte[] into a bean.  Consider this sample code:  ``` class MyDAO {       private String query;       // getter and setters for the query and any other method      ... } ```  Now in a file ""query.sql"" next to this java class, I have this:  ``` select       * from      sometable where      somecondition; ```  I would like to inject the contents of the file ""query.sql"" into my pojo.  This is easy to do by creating a FactoryBean that receives a Resource and returns the the contents of the file as a String. I have done this for my project. But I think this would be useful for other people, and it would be easy to add to","closed","type: enhancement,","spring-projects-issues","2009-06-25T04:12:41Z","2018-12-26T17:20:59Z"
"","9986","handleListenerSetupFailure does not log at error level [SPR-5313]","**[Paul Pacheco](https://jira.spring.io/secure/ViewProfile.jspa?name=paulpach)** opened **[SPR-5313](https://jira.spring.io/browse/SPR-5313?redirect=false)** and commented  According to the javadoc:  http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/jms/listener/DefaultMessageListenerContainer.html#handleListenerSetupFailure(java.lang.Throwable,%20boolean)  the handleListenerSetupFailure will log to error if an exception is not recovered. I quote:  ""The default implementation logs the exception at error level if not recovered yet, and at debug level if already recovered""  But looking at the code, I find this:      StringBuffer msg = new StringBuffer();     msg.append(""Setup of JMS message listener invoker failed for destination '"");     msg.append(getDestinationDescription()).append(""' - trying to recover. Cause: "");     msg.append(ex instanceof JMSException ? JmsUtils.buildExceptionMessage((JMSException) ex) : ex.getMessage());     if (logger.isDebugEnabled()) {          logger.info(msg, ex);     }     else {          logger.info(msg);     }  so it is logging at info level instead of error level.  Please change it to log at the error level.    ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2008-11-19T07:00:43Z","2019-01-12T16:27:43Z"
"","10022","Fetching _eventId throws uncaught ClassCastException if it is not a String [SPR-5349]","**[Paul Chapman](https://jira.spring.io/secure/ViewProfile.jspa?name=paul.chapman)** opened **[SPR-5349](https://jira.spring.io/browse/SPR-5349?redirect=false)** and commented  The code in AbstractMvcView.determineEventId uses WebUtils.findParameterValue to fetch the Webflow _eventId. That code assumes it will be passed a String. If the parameter is not a String a ClassCastException is thrown.  I was supplying the eventId as a hidden field, but had erroneously supplied it twice. Thus _eventId was no longer a String but was actually multi-valued. My error certainly, but it shouldn't break the code.   ---  **Affects:** 2.5.6","closed","type: bug,","spring-projects-issues","2008-11-22T15:52:11Z","2012-06-19T03:47:32Z"
"","10830","Introduce context-level attribute to prevent bean definition overriding [SPR-6162]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-6162](https://jira.spring.io/browse/SPR-6162?redirect=false)** and commented  Our team had two different context files with two bean definitions named the same. Truth be told, one developer didn't know another his other teammate already defined it elsewhere. Because bean definition classes weren't identical, the auto-wiring was failing (for apparently confounding reasons), and it took a while to track down what was going on.  Now \ already has `@default-merge`, but what about a new `@default-override` to stop this kind of ""gotcha""? A duplicate should fail the context load. We found the override message in our log file eventually, but it was at INFO (we think it should be WARN). In any event, the default of `@default-override` should be ""true"" to retain backwards compatibility.   ---  **Affects:** 2.5.6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-29T06:00:18Z","2012-06-19T09:36:17Z"
"","10828","API docs advertise JPA methods that never materialized [SPR-6160]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-6160](https://jira.spring.io/browse/SPR-6160?redirect=false)** and commented  Several classes in org.springframework.orm.jpa advertise ""concrete operations will be added in the Spring 2.5"" Well, that never happened. * EntityManagerFactoryPlusOperations * EntityManagerPlusOperations  Unless you have specific plans, I would simply say ""...will be added in future releases"" or abolish it altogether.   ---  **Affects:** 2.5.6, 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2978a4d0eb2b267b45ff25ae3d5555c73c05ea95","closed","type: documentation,","spring-projects-issues","2009-09-28T20:41:13Z","2012-06-19T03:42:49Z"
"","10757","DocumentDefaultsDefinition typo [SPR-6089]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-6089](https://jira.spring.io/browse/SPR-6089?redirect=false)** and commented  Javadoc says: Simple JavaBean that holds the defaults specified at the %lt;beans>  level in a standard Spring XML bean definition document: default-lazy-init, default-autowire, etc  The % should be an & as to make the tag.   ---  **Affects:** 2.5.6, 3.0 M1","closed","type: bug,","spring-projects-issues","2009-09-08T08:15:34Z","2012-06-19T03:43:09Z"
"","10746","No bean class specified gives error that is not very helpful [SPR-6078]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-6078](https://jira.spring.io/browse/SPR-6078?redirect=false)** and commented  I forgot to put a class attribute on my bean definition. Everything else was there. This was the error: Caused by: java.lang.IllegalStateException: No bean class specified on bean definition at org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClass(AbstractBeanDefinition.java:349)  Two suggestions could be made here: 1) Print out the bean definition (or at least some attributes of it -- maybe the id attribute at least?) 2) Use SourceLocation to pin-point the file and line number, if applicable.    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-09-04T03:55:04Z","2012-06-18T12:45:10Z"
"","10698","Document initializing methods must return back to the container [SPR-6029]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-6029](https://jira.spring.io/browse/SPR-6029?redirect=false)** and commented  The documentation in chapter 3 should explicitly state that Spring beans must return in their initializing methods (like afterPropertiesSet or the init-method) or the whole container initialization is paused. For example, it is a bad idea to create a server and begin listening to sockets in afterPropertiesSet. It's not obvious this restriction exists.  PS: the Spring container may want to enhance itself to either allow (1) asynchronous initialization or (2) timeout interval that fails the bean creation.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-08-20T03:46:45Z","2012-06-19T09:36:14Z"
"","10251","xml-parent vs. No equivalent Annotation [SPR-5580]","**[Paul Bacsik](https://jira.spring.io/secure/ViewProfile.jspa?name=bacsik)** opened **[SPR-5580](https://jira.spring.io/browse/SPR-5580?redirect=false)** and commented  This works: \\.... \ ...  This does not work - setter is not called: \\.... `@Component` public class SubClsExtendsAbstractCls extends AbstractCls { ...  Nice would be: `@Component`(parent=""parentBean"")  ---  **Affects:** 2.5.6  **Sub-tasks:** - #11009 Annotation for xml-parent - Solution  5 votes, 6 watchers","closed","in: core,","spring-projects-issues","2009-03-17T06:04:13Z","2019-01-12T05:33:37Z"
"","10250","@Autowired vs. @Resource [SPR-5579]","**[Paul Bacsik](https://jira.spring.io/secure/ViewProfile.jspa?name=bacsik)** opened **[SPR-5579](https://jira.spring.io/browse/SPR-5579?redirect=false)** and commented  `@Autowired` public void setDataSource(DataSource ds) does not wire when default-autowire=""true"" and there exists more DataSource beans e.g with ids dataSource, someOtherDS1, someOtherDS2.  Declaring `@Resource` public void setDataSource(DataSource ds) works.  It seams `@Autowired` can't resolve the PropertyName, maybe ist searches the parameter name 'ds', but since this is  a Property Setter, this is not the desired behaviour.  ---  **Affects:** 2.5.6  **Issue Links:** - #9825 Use field or parameter name as default value for `@Qualifier`","closed","type: enhancement,","spring-projects-issues","2009-03-17T05:50:54Z","2019-01-13T08:00:40Z"
"","10249","@Autowired vs.","**[Paul Bacsik](https://jira.spring.io/secure/ViewProfile.jspa?name=bacsik)** opened **[SPR-5578](https://jira.spring.io/browse/SPR-5578?redirect=false)** and commented  `@Autowired` is capable to handle private Fields, setting Fields with","closed","in: core,","spring-projects-issues","2009-03-17T05:42:19Z","2019-01-12T16:50:28Z"
"","9879","Spring reference manual: syntax for collections is 'old style' [SPR-5206]","**[Patrick Hancke](https://jira.spring.io/secure/ViewProfile.jspa?name=phancke)** opened **[SPR-5206](https://jira.spring.io/browse/SPR-5206?redirect=false)** and commented  Spring reference manual (version 2.5.5), paragraph 3.3.2.4 (Collections)  The 'old style' is still used for declaring maps, new style is something like this:  \ 	\ 		\ 	\ \   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-10-08T21:49:51Z","2012-06-19T03:47:11Z"
"","10009","Give the ErrorsTag a postfix and prefix that can be wrapped around individual messages [SPR-5336]","**[pas filip](https://jira.spring.io/secure/ViewProfile.jspa?name=pasfilip)** opened **[SPR-5336](https://jira.spring.io/browse/SPR-5336?redirect=false)** and commented  It would be nice if the ErrorsTag from the form tag library were extended so it accepts a prefix and postfix. I'd like to be able to put my error messages within an ul and li tags without need to resort to alternatives. Seems like a fairly common use case. I would suggest to add both attributes to the tag with empty strings as default values. For every message that gets printed simply write the prefix before the message and the postfix after the message. Write the seperator after the postfix and make sure the seperator can be an empty string.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-12-03T20:54:02Z","2012-06-19T09:36:23Z"
"","10875","Exception while configuring ehcache with spring [SPR-6207]","**[Parag Jain](https://jira.spring.io/secure/ViewProfile.jspa?name=jainparag1)** opened **[SPR-6207](https://jira.spring.io/browse/SPR-6207?redirect=false)** and commented  Hi,  I'm getting the following error while configuring the EH Cache in my beans definition xml file.  ******************************************  08-Oct-2009 14:40:52 org.springframework.core.CollectionFactory \ INFO: JDK 1.4+ collections available 08-Oct-2009 14:40:52 org.springframework.core.CollectionFactory \ INFO: Commons Collections 3.x available 08-Oct-2009 14:40:52 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [spring-database.xml] Exception in thread ""main"" org.springframework.beans.factory.BeanDefinitionStoreException: Line 13 in XML document from class path resource [spring-database.xml] is invalid; nested exception is org.xml.sax.SAXParseException: Attribute ""xmlns"" must be declared for element type ""beans"". org.xml.sax.SAXParseException: Attribute ""xmlns"" must be declared for element type ""beans"". at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source) at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(Unknown Source) at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.addDTDDefaultAttrsAndValidate(Unknown Source) at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.handleStartElement(Unknown Source) at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.startElement(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$ContentDispatcher.scanRootElementHook(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(Unknown Source) at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(Unknown Source) at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(Unknown Source) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:222) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:173) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:148) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:129) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:145) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:113) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:81) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:89) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:270) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:87) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:72) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:63) at com.springinaction.database.AppClient.main(AppClient.java:20)  ************************************************************  Here is the snippet of the declaration for ehcache configuration in my xml file......  \ \ \  \  ***********************************  We just started migrating our existing web application to spring and wants to use the EHCache for caching. I'm unable to proceed with caching due to this issue. Kindly look into this issue asap.  Thanks, Parag.   --- No further details from [SPR-6207](https://jira.spring.io/browse/SPR-6207?redirect=false)","closed","status: invalid,","spring-projects-issues","2009-10-07T17:45:02Z","2019-01-12T05:33:02Z"
"","10549","""Unexpected end of file from server"" when adding serializable object to RemoteInvocation [SPR-5880]","**[Papick G. Taboada](https://jira.spring.io/secure/ViewProfile.jspa?name=pgtaboada)** opened **[SPR-5880](https://jira.spring.io/browse/SPR-5880?redirect=false)** and commented  I am adding metadata to a RemoteInvocation (using HttpInvoker).  As soon as I add an instance of  public class SessionInformation implements Serializable { ... }  I get an ""Unexpected end of file from server"".  The class has 3 properties backed by 3 attributes (String, String and int) and a default constructor.   Really no magic at all.  Am I missing someting?   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=248310#post248310","closed","type: bug,","spring-projects-issues","2009-06-29T07:13:09Z","2012-06-19T03:43:28Z"
"","9888","ScriptFactory for JSR-223 [SPR-5215]","**[Papick G. Taboada](https://jira.spring.io/secure/ViewProfile.jspa?name=pgtaboada)** opened **[SPR-5215](https://jira.spring.io/browse/SPR-5215?redirect=false)** and commented  Spring provides some dynamic language support:  http://static.springframework.org/spring/docs/2.5.x/reference/dynamic-language.html  The JSR 223 provides scripting for the Java platform:  http://www.jcp.org/en/jsr/detail?id=223  Wouldn't it be interesting to provide dynamic language support through that API, so we could plug in our favorite dynamic language?  ---  **Affects:** 2.5.5  **Issue Links:** - #16906 Add support for dynamic languages refreshable beans in `@Configuration` classes - #15635 ScriptExecutor for JSR-223 - #17873 Deprecate native JRuby support - #19154 Allow specifying CompilationCustomizer for Groovy based beans - #6626 Add JavaScriptFactory (_**""supersedes""**_) - #12248 Add JavaScript support for Spring dynamic languages (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1722fa667819c3cafc6b5de93d7c93bbd570cd47","closed","type: enhancement,","spring-projects-issues","2008-10-14T20:37:57Z","2019-01-13T08:02:25Z"
"","10428","Handling of spaces and underscores in AbstractBeanPropertyRowMapper [SPR-5758]","**[Pablo Krause](https://jira.spring.io/secure/ViewProfile.jspa?name=krause)** opened **[SPR-5758](https://jira.spring.io/browse/SPR-5758?redirect=false)** and commented  The class AbstractBeanPropertyRowMapper can handle underscores for matching column names to property names in a Bean, but not spaces. I tested with a very simple patch, which consisted of chanching line 109 from:  PersistentField fieldMeta = (PersistentField) this.mappedFields.get(column); to PersistentField fieldMeta = (PersistentField) this.mappedFields.get(column.replaceAll("" |_"", """"));  This simple change allows to match database columns either with underscores or spaces in their names with the corresponding java bean properties. As a matter of fact, this patch makes the use of the underscoreName() method in that same class obsolete, as well as lines 202-205 in which names with and without underscores are set in the mappedFields map (I don't understand why you took this approach instead of stripping the underscores in line 109... perfomance?).  I know this is probably of use to nearly no one, but I am dealing with some legacy stored procedures which return column names with spaces so I decided to try to contribute something back.   ---  **Affects:** 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/80792627053fcd75f649b6085245ceadf6449985","closed","type: enhancement,","spring-projects-issues","2009-05-14T10:19:38Z","2012-06-19T03:42:48Z"
"","9978","Add a setDirty method to AbstractTestNGSpringContextTests [SPR-5305]","**[Oran Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=oranoceallaigh)** opened **[SPR-5305](https://jira.spring.io/browse/SPR-5305?redirect=false)** and commented  When using `AbstractTestNGSpringContextTests` / `AbstractTransactionalTestNGSpringContextTests` it is not possible to programmatically ""dirty"" the application context -- the only way to discard the context is via the `@DirtiesContext` annotation which is at the 'method' level of granularity. As a result it is not (easily) possible to have an application context discarded after all methods in a particular test class have executed.  It would be nice, in a test class that has subclassed `AbstractTestNGSpringContextTests`, to be able to implement a method such as:  ``` @AfterClass public void setContextDirty() {     super.setDirty(); } ```  ... thereby discarding the initialized application context from the TestContextManager's context cache.  ---  **Affects:** 2.5.4  **Reference URL:** http://forum.springframework.org/showthread.php?t=63592  **Issue Links:** - #9379 Support for `@DirtiesContext` at the test class level  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-11-17T01:57:26Z","2019-01-13T08:01:58Z"
"","10534","Aop scoped proxy do not get created when using getBean but only when accessing a specific method of it [SPR-5865]","**[Ora Egozi Barzilai](https://jira.spring.io/secure/ViewProfile.jspa?name=oegozi)** opened **[SPR-5865](https://jira.spring.io/browse/SPR-5865?redirect=false)** and commented  Here are the steps to reproduce: 1. Create a new simple POJO class, e.g:    pckage com.foo    public class MyTest1 {    public MyTest1(){    System.err.println(""**** CTOR MyTest1"");    }    public void init(){    System.err.println(""**** init in MyTest1"");    }    } 2. add it to your beans.xml with a aop scoped proxy e.g:  \ \ \ 3. in your main method call: MyTest1 test2 = (MyTest1) context.getBean(""myAopTest1""); EXPECTED RESULT: the bean should be created and its init method should be called Actual result: the bean is not instantiated 4. access the bean's method (getter/setter/toString()), e.g:    test2.toString();    and ONLY NOW the bean is created.  Note: as you  can see in the spring reference I added, I actually think the behavior should be that the bean is created as soon as a session is created since it is a lazy-init=false, but per the forum I understood this is the original design, may be as part of this bugfix you can consider changing the design so that beans with lazy-init=false in a non-singleton scope will be eagerly instantiated at the begining of the scope (without the need to explicitly call getBean).   ---  **Affects:** 2.5.5  **Reference URL:** http://forum.springsource.org/showthread.php?p=247548&posted=1#post247548  **Attachments:** - [simpleSpringTestApp.zip](https://jira.spring.io/secure/attachment/15501/simpleSpringTestApp.zip) (_3.51 MB_)","closed","in: core,","spring-projects-issues","2009-06-24T17:07:50Z","2019-01-12T16:26:59Z"
"","10175","ReloadableResourceBundleMessageSource doesn't replace dots with slashes [SPR-5503]","**[Ondrej Par](https://jira.spring.io/secure/ViewProfile.jspa?name=ondrej.par)** opened **[SPR-5503](https://jira.spring.io/browse/SPR-5503?redirect=false)** and commented  The standard JDK PropertyResourceBundle is able to accept baseName with dots, and replaces them with slashes when looking up the file (such as, if the basename is ""com.example.project.messages"", it will look for the file ""com/example/project/messages.properties"").  ReloadableResourceBundleMessageSource doesn't do this. As  a result, it may behave differently than ResourceBundleMessageSource with the same configuration.   --- No further details from [SPR-5503](https://jira.spring.io/browse/SPR-5503?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2009-02-18T00:07:14Z","2019-01-12T02:37:58Z"
"","9955","Note in JavaDoc of ibatis.SqlMapClientFactoryBean:setSqlMapClientProperties() that PropertiesFactoryBean should be used. [SPR-5282]","**[Ondra Å½iÅ¾ka](https://jira.spring.io/secure/ViewProfile.jspa?name=pekarna)** opened **[SPR-5282](https://jira.spring.io/browse/SPR-5282?redirect=false)** and commented  We should mention here http://static.springframework.org/spring/docs/2.5.x/reference/orm.html#orm-ibatis-setup that setSqlMapClientProperties() can be used.  We should also mention here http://static.springframework.org/spring/docs/2.5.5/api/org/springframework/orm/ibatis/SqlMapClientFactoryBean.html#setSqlMapClientProperties(java.util.Properties) that since this method takes a Properties as a value, you have to create a PropertiesFactoryBean for it:  \ \ \ \ \ \ \ \  Just a minor thing, but can spare many Spring newcommers even hours of searching.  By the way, shouldn't this method rather take the Resource? Or something that would let people write just the name of file in the value... like \  Thanks, Ondra   ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2008-11-09T09:38:12Z","2012-06-19T02:28:10Z"
"","9954","Make PropertiesLoaderSupport.mergeProperties() public [SPR-5281]","**[Ondra Å½iÅ¾ka](https://jira.spring.io/secure/ViewProfile.jspa?name=pekarna)** opened **[SPR-5281](https://jira.spring.io/browse/SPR-5281?redirect=false)** and commented  With current Spring tools, we can load several properties files to a configurer:  \ \ \ \ \  PropertiesLoaderSupport has a ""mergeProperties()"" method. If it was public, we could do this:  Properties options = applicationContext.getBean(""options"").mergeProperties(); String port = options.getProperty(""jdbc.port"");  ...and use the values outside bean configuration file without much extra effort.  Ondra   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-11-09T03:16:36Z","2011-04-03T22:44:29Z"
"","10781","(netbeans,macosx) no declaration can be found for element 'tx:annotation-driven' [SPR-6113]","**[olivier SAINT-EVE](https://jira.spring.io/secure/ViewProfile.jspa?name=lolveley)** opened **[SPR-6113](https://jira.spring.io/browse/SPR-6113?redirect=false)** and commented  hello,  i'm a newbie in spring, so please be indulgent with me! here is the issue : I'm following a tutorial about netbeans, spring and JEE(here : http://tahe.developpez.com/java/javaee/ , in French ) I use in my project the following spring-config-dao.xml :  *********************************************************************************************************************  \  \  \ \ \ \ \  \ \ \ \  \  \ \ \ \ \ \ \ \  \  \ \ \ \ \ \  \   \ \ \  \  \  \  \  \  *********************************************************************************************************************  here is the persistence.xml:  *********************************************************************************************************************  \ \ \ \org.hibernate.ejb.HibernatePersistence\ \ \ \ \ \ \ \ \ \ \ ********************************************************************************************************************* here is the error message:  *********************************************************************************************************************  ------------- Standard Error ----------------- log4j:WARN No appenders could be found for logger (org.springframework.context.support.ClassPathXmlApplicationContext). log4j:WARN Please initialize the log4j system properly.  ------------- ---------------- ---------------  Testcase: main(dao.InitDB):        Caused an ERROR Line 44 in XML document from class path resource [spring-config-dao.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'tx:annotation-driven'. org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 44 in XML document from class path resource [spring-config-dao.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'tx:annotation-driven'.  *********************************************************************************************************************  the database is running well... Can you help me?  olivier.    ---  **Affects:** 2.5.6","closed","status: invalid,","spring-projects-issues","2009-09-15T07:41:24Z","2019-01-12T05:33:04Z"
"","10840","regression in ClassPathScanningCandidateComponentProvider.findCandidateComponents [SPR-6172]","**[Olivier Lamy](https://jira.spring.io/secure/ViewProfile.jspa?name=olamy)** opened **[SPR-6172](https://jira.spring.io/browse/SPR-6172?redirect=false)** and commented  regression in ClassPathScanningCandidateComponentProvider.findCandidateComponents. Set\ returned by findCandidateComponents doesn't return same value as in 2.5.6 see project test case attached. 2.5.6 : mvn clean test -Dsurefire.useFile=false -> works 3.0.0.RC1 : mvn clean test -Dsurefire.useFile=false -DspringVersion=3.0.0.RC1 -> failed   ---  **Affects:** 3.0 RC1  **Attachments:** - [scanner.zip](https://jira.spring.io/secure/attachment/15757/scanner.zip) (_6.03 kB_)  3 votes, 3 watchers","closed","in: core,","spring-projects-issues","2009-10-01T10:08:59Z","2019-01-12T16:39:03Z"
"","10058","All maven2 artifactIds change (will break a lot of builds for maven users) [SPR-5385]","**[Olivier Lamy](https://jira.spring.io/secure/ViewProfile.jspa?name=olamy)** opened **[SPR-5385](https://jira.spring.io/browse/SPR-5385?redirect=false)** and commented  All artifactIds has changed in 3.0M1. It will be a REAL NIGTHMARE for maven users when upgrading due to all artifactIds change !! This will break a lot of builds for people who wants to upgrade !! Please any chance to revert to this non backward compatible change ????  ---  Olivier Maven PMC  ---  **Affects:** 3.0 M1  **Issue Links:** - #9974 Fix Maven POMs (_**""depends on""**_)  12 votes, 12 watchers","closed","has: votes-jira,","spring-projects-issues","2009-01-01T20:10:15Z","2019-01-13T21:50:55Z"
"","10863","Let StringArrayPropertyEditor trim resulting array values [SPR-6195]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6195](https://jira.spring.io/browse/SPR-6195?redirect=false)** and commented  Currently the by default registered `StringArrayPropertyEditor` does not trim the String parts of the resulting array. This leads to subtle errors, e.g. if you configure the supported HTTP methods on an `WebContentGenerator` as follows:  ``` ..  .. ```  (note the spaces) this does not work, as the comparison with the actual request method is a hard equals. I think trimming the String is a sensible default.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b250c65c45d965f93f995f191494839a81031e24, https://github.com/spring-projects/spring-framework/commit/4be237dd84c37cfa31b8c6c07a2773b77aa8387d","closed","type: enhancement,","spring-projects-issues","2009-10-06T19:38:57Z","2012-06-19T03:43:46Z"
"","10858","Binding Enum values to beans broken in Spring 3 RC1 [SPR-6190]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6190](https://jira.spring.io/browse/SPR-6190?redirect=false)** and commented  Trying to bind simple Enum values by name to beans always fails with a typeMismatch error (Coould not find PropertyEditor). Since RC1 WebRequestDataBinder is used to bind request values, that does not unpack one-elemented Arrays. See the test cases attached.  ---  **Affects:** 3.0 RC1  **Attachments:** - [EnumBindingTest.java](https://jira.spring.io/secure/attachment/15768/EnumBindingTest.java) (_2.08 kB_) - [EnumBindingTest.java](https://jira.spring.io/secure/attachment/15767/EnumBindingTest.java) (_2.23 kB_)  **Issue Links:** - [ROO-254](https://jira.spring.io/browse/ROO-254) enums cannot be entered in web interface (_**""is depended on by""**_) - #10897 Radiobutton/radiobuttons Enum binding fails with IllegalStateException (_**""is duplicated by""**_)  2 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2009-10-05T02:39:42Z","2019-01-11T14:39:47Z"
"","10779","Potential NullPointerException in DefaultBindingErrorProcessor [SPR-6111]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6111](https://jira.spring.io/browse/SPR-6111?redirect=false)** and commented  The method `processPropertyAccessException` in `DefaultBindingErrorProcessor` directly accesses the `PropertyChangeEvent` of the given exception and calls `getPropertyName` and `getNewValue` on it. According to the JavaDocs the event might be `null` which would cause a `NullPointerException` in this case.  Attached a simple test case to demonstrate the issue.   ---  **Affects:** 2.5.6, 3.0 M3  **Attachments:** - [DefaultBindingErrorProcessorUnitTest.java](https://jira.spring.io/secure/attachment/15711/DefaultBindingErrorProcessorUnitTest.java) (_808 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/34357d2b1f4bdc605d2c033200513381007165dd","closed","in: core,","spring-projects-issues","2009-09-14T18:28:00Z","2012-06-19T03:43:09Z"
"","10765","TilesConfigurer does not support the new configuration model of Tiles 2.2 [SPR-6097]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6097](https://jira.spring.io/browse/SPR-6097?redirect=false)** and commented  Using latest Tiles 2.2 with the `TilesConfigurer` a lot of deprecations pop up in the configurer code and tiles logs some warnings it does not support property based configuration anymore. Looks like one has to subclass `BasicTilesContainerFactory` and hand out instances rather than populate Tiles with classnames.  ---  **Affects:** 3.0 M4  **Attachments:** - [SPR-6097.patch](https://jira.spring.io/secure/attachment/16134/SPR-6097.patch) (_15.30 kB_) - [Tiles2_2compatConfigurer.java](https://jira.spring.io/secure/attachment/16158/Tiles2_2compatConfigurer.java) (_16.86 kB_) - [Tiles2_2Configurer.java](https://jira.spring.io/secure/attachment/16159/Tiles2_2Configurer.java) (_5.33 kB_)  **Issue Links:** - #10280 Support Tiles 2.2 for Velocity and FreeMarker purposes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bef30a838cb3c02134b8e8ef4e2f969f49dbb99c  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-10T05:02:49Z","2019-01-11T13:39:23Z"
"","10753","Add support for JodaTime for new UI formatting API [SPR-6085]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6085](https://jira.spring.io/browse/SPR-6085?redirect=false)** and commented  As suggested in the latest documentation preview here are the implementations for JodaTime's `DateTime` as well as `DateMidnight`.   ---  **Attachments:** - [jodatime-formatter.zip](https://jira.spring.io/secure/attachment/15700/jodatime-formatter.zip) (_3.46 kB_) - [jodatime-formatter.zip](https://jira.spring.io/secure/attachment/15698/jodatime-formatter.zip) (_2.35 kB_)","closed","type: enhancement,","spring-projects-issues","2009-09-06T20:35:01Z","2012-06-19T03:44:18Z"
"","10732","Extend JdbcTemplate (or provide subclass) to allow execution of SQL script files [SPR-6064]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6064](https://jira.spring.io/browse/SPR-6064?redirect=false)** and commented  There are a few neat database support classes in the current milestones of Spring 3. One of them is `ResourceDatabasePopulator`. We heavily use it to prepopulate databases prior to test execution. As the `populate` method expects a `Connection` we usually use a `JdbcTemplate` and a `ConnectionCallback` to actually execute population. Thus, it would be handy if one could call `jdbcTemplate.execute(List resources)` directly.  I have attached a patch for `JdbcTemplate` tagged at M4 but I could understand if you'd rather like to have a separate subclass inside the spring test module. The proposed implementation probably breaks allowed package dependencies but IMHO `ResourceDatabasePopulator` should be moved to a different package anyway (as it is not tied to embedded databases only).   ---  **Affects:** 3.0 M4  **Attachments:** - [jdbc-template-extension.patch](https://jira.spring.io/secure/attachment/15680/jdbc-template-extension.patch) (_4.27 kB_)","closed","status: bulk-closed,","spring-projects-issues","2009-09-02T00:21:47Z","2019-01-12T03:50:54Z"
"","10725","Incorrect JavaDoc for BeanUtils.instantiate(Class clazz) [SPR-6056]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6056](https://jira.spring.io/browse/SPR-6056?redirect=false)** and commented  The JavaDoc says the method would try to make the constructor accessible but it actually doesn't. The method implementing the mentioned behaviour is `instantiateClass(Class clazz)`. Probably minor mistake by copy & paste.   ---  **Affects:** 3.0 M3","closed","in: core,","spring-projects-issues","2009-08-31T06:49:12Z","2012-06-19T03:43:39Z"
"","10724","Improve method naming in MethodParameter class [SPR-6055]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-6055](https://jira.spring.io/browse/SPR-6055?redirect=false)** and commented  Implementing custom `WebArgumentResolver` s you intensively deal with the `@MethodParameter`@ parameter you get handed in `resolveArgument(..)`. It's API could need some minor improvements to reduce surprises:  1. `getAnnotations()` does **not** return the annotations of the parameter but the annotations of the method. To access the actual parameter annotations you have to call `getParameterAnnotations()`. So I'd suggest to let `getAnnotations()` return the parameter annotations instead, drop `getParameterAnnotations()` and introduce a `getMethodAnnotations()` to return the method's annotations. 2. As in most cases in inspecting parameter annotations you look for a particular type of annotation, it would be cool to be able to simply call some kind of `hasAnnotation(Class","closed","type: enhancement,","spring-projects-issues","2009-08-31T06:48:48Z","2012-06-19T03:43:18Z"
"","10642","SimpleApplicationEventMulticaster does not filter ApplicationEvents correctly [SPR-5974]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5974](https://jira.spring.io/browse/SPR-5974?redirect=false)** and commented  JavaDoc of `ApplicationListener` says:  ""As of Spring 3.0, an ApplicationListener can generically declare the event type that it is interested in. When registered with a Spring ApplicationContext, events will be filtered accordingly, with the listener getting invoked for matching event objects only.""  Despite that, `SimpleApplicationEventMulticaster` notifies all `ApplicationListener`s regardless of the type you paramterized it with (see `multicastEvent(..)`. This leads to `ClasCastExceptions` when declaring a subtype of `ApplicationEvent` as parameter of `ApplicationListener`.  ---  **Affects:** 3.0 M3  **Issue Links:** - #12047 GenericTypeResolver returns Object for parameterized parameters","closed","in: core,","spring-projects-issues","2009-08-02T01:10:55Z","2019-01-11T18:14:25Z"
"","10536","Allow null as modelAttribute on form:form binding [SPR-5867]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5867](https://jira.spring.io/browse/SPR-5867?redirect=false)** and commented  I'd really like to see the HTML form library not insisting on providing a non-null bean as backing object. The use case is the following: I want to use the same JSP for handling creation as well as editing an entity. Besides that I **do not** want to expose a **public** empty constructor for my entity class due to inforcement of constraints (non null properties etc.). To persist the entity (with JPA) and to bind form data to the entity, a private or public empty constructor is enough for the frameworks to deal with. Now suppose the following controller:  ``` @RequestMapping(..) public String showForm(@RequestParam(value=""id"", required=false) Long id, Model model) {    if (null == id) {     model.addAttribute(""user"", new User());   else     model.addAttribute(""user"", userDao.readById(id));    return ""userForm""; } ```  The JSP the states something like:  ```  ..  ```  The key thing to notice here is that I am required to put an empty User instance into the model to render the form correctly. Thus I am required to offer an public empty constructor, which leads the loss of any enforcing restrictions to the internals of that class.  I've already considered two options: 1. Using a separate method with `@ModelAttribute` on it to automagically get the empty instance created by Spring on each controller invocation. As the controller is rather used for an entire module than a single entity, this would cause the method unnecessarily being invoked when accessing other entities forms and thus unnecessarily polluting the model. 2. I could extend the method signature to `public String showForm(@ModelAttribute(""user"") User user, @RequestParam(value=""id"", required = false) Long id, Model model)` to get the empty User instance created by Spring but the signature then is rather verbose unintuitive and contains somewhat redundant parameters.  What I'd actually like to see is something like this:  ``` public String showForm(@RequestParam(value=""id"", required=false) Long id, Model model) {    if (null != id) {     model.addAttribute(""user"", userDao.readById(id));   }    return ""userForm""; } ```  And either the `` tag simply accepting the non available bean or maybe explicitly activating this accepting behaviour by adding `required=""false""` to it. Both versions should then render an empty form for the properties given in the form elements. This would not only lead to more concise code but also getting rid of the technology forcing the design of the entity class **only** for reasons of showing an empty form.  Regards, Ollie  ---  **Issue Links:** - #6554 Null property values in nested paths relating to  tag,  tags, and ServletRequestDataBinder - #7296  tag library should WARN instead of blowup when command missing  6 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-25T03:31:05Z","2019-01-11T17:15:17Z"
"","10491","HTTP cache and conditional requests support in RestTemplate [SPR-5821]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5821](https://jira.spring.io/browse/SPR-5821?redirect=false)** and commented  The main goal is to create a `CachingClientHttpRequestInterceptor` which provides the following:  * Cache the received HTTP responses for further use, if those are marked as cacheable * Cache those response in a `org.springframework.cache.Cache` * if the Cache contains a valid response but its content is stale, then the Interceptor can issue conditional requests to revalidate the cached content * by default, a sane configuration should be provided and the Cache should be backed by a `ConcurrentCacheMap`  This could be used like this:  ```java RestTemplate restTemplate = new RestTemplate(); restTemplate.setInterceptors(Collections.singletonList(new CachingClientHttpRequestInterceptor()));  // this response is cacheable and has appropriate headers ResponseEntity response = restTemplate.getForEntity(""http://example.org/resource"", Book.class); // it is now cached String etag = response.getHeaders().getEtag();  // if the response is still fresh, then no network call should happen and the response should be reused Book book = restTemplate.getForObject(""http://example.org/resource"", Book.class); ```  ---  **Affects:** 3.0 M3  **Attachments:** - [CachingHttpRequestFactory.java](https://jira.spring.io/secure/attachment/15536/CachingHttpRequestFactory.java) (_8.51 kB_) - [ETagCachingRestTemplate.java](https://jira.spring.io/secure/attachment/15535/ETagCachingRestTemplate.java) (_7.98 kB_)  **Issue Links:** - #12152 Introduce interceptors for RestTemplate (_**""depends on""**_) - #16413 Server-side HTTP caching improvements - #11967 Provide high-level cache API in Spring container  10 votes, 15 watchers","closed","status: declined,","spring-projects-issues","2009-06-10T22:35:13Z","2020-03-31T16:37:00Z"
"","10478","Make HttpMessageConverterExtractor top level class [SPR-5808]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5808](https://jira.spring.io/browse/SPR-5808?redirect=false)** and commented  I'm trying to implement ETag based caching with the M3's RestTemplate. Therefore I would like to use the template's default message conversion functionality in case I get a 200 result but rather access an already existing instance on a 304 e.g. Thus it would be cool if I could just subclass HttpMessageConverterExtractor, apply decision logik and trigger cache access or superclass extraction logic.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f7bf6138f830cb7468ccecd9ed1ccce3084268c2, https://github.com/spring-projects/spring-framework/commit/59e41a270d8effb5d879d83ee4849d98a4ba9f78","closed","type: enhancement,","spring-projects-issues","2009-06-05T23:47:57Z","2019-01-11T17:14:41Z"
"","10433","Make ServletHandlerMethodResolver top level type [SPR-5763]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5763](https://jira.spring.io/browse/SPR-5763?redirect=false)** and commented  `AnnotationMethodHandlerAdapter` contains a private class `ServletHandlerMethodResolver` that could be used to tweak URL mappings for custom requirements if one was able to subclass it. Furthermore it would be very cool to use in test cases as you could easily test if you mappings work for certain requests. Currently you have to use `AnnotationMethodHandlerAdapter` directly and thus execute the method entirely.  ---  **Affects:** 3.0 M3  **Issue Links:** - #12109 Make ServletHandlerMethodResolver protected (instead of private) to allow subclassing  7 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-05-15T05:28:38Z","2019-01-11T17:33:46Z"
"","10408","Integrate Derby into embedded database support [SPR-5738]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5738](https://jira.spring.io/browse/SPR-5738?redirect=false)** and commented  Suppiled patch works with version 10.5.1.1 of Apache Derby that introduces real in-memory databases.   ---  **Affects:** 3.0 M3  **Attachments:** - [DerbyEmbeddedDatabaseConfigurer.patch](https://jira.spring.io/secure/attachment/15393/DerbyEmbeddedDatabaseConfigurer.patch) (_2.62 kB_) - [noDerbyLog.patch](https://jira.spring.io/secure/attachment/15394/noDerbyLog.patch) (_1.72 kB_) - [spring-jdbc-derbysupport.patch](https://jira.spring.io/secure/attachment/15373/spring-jdbc-derbysupport.patch) (_9.45 kB_)","closed","type: enhancement,","spring-projects-issues","2009-05-09T20:40:58Z","2019-01-13T21:50:03Z"
"","10407","Add support for H2 databases for embedded database support [SPR-5737]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5737](https://jira.spring.io/browse/SPR-5737?redirect=false)** and commented  I have attached a proposal to get H2 database support for the new embededded database subsystem in Spring JDBC. Have used the Eclipse formatter from SVN but seems comments got wrecked during some minor refactorings. I have extended the namespace accordingly.  I have an implementation for Derby database here locally, too. The issue with it is, that Derby only allows strict in-memory databases from version 1.5.1.1 which unfortunately is not available in any Maven repository. Dont' know how you think about this problem. Using an available version (10.4.2.0 e.g.) has the problem, that the database does not get emptied on shutdown and Derby does not support if-clause in DROP TABLE statements so that you hardly can creat an reproducible setup, that does not fail the second time you start it.  The reason why I mention Derby is its strange shutdown behviour, that requires you create another connection to a specific URL (append ""shutdown=true"" to the original one). To construct the URL a second time in `EmbeddedDatabaseConfigurer.shutdown(..)` you need to get the database name handed over. That's why I already refactored the method to `shutdown(DataSource dataSource, String databaseName)` as Derby support will probably be required and possible as soon as the Maven Repo issue is fixed, or you decide to add it anyway.   ---  **Affects:** 3.0 M3  **Attachments:** - [spring-jdbc-h2support.patch](https://jira.spring.io/secure/attachment/15372/spring-jdbc-h2support.patch) (_17.37 kB_)","closed","in: core,","spring-projects-issues","2009-05-09T00:41:58Z","2019-01-11T17:31:23Z"
"","10406","Set up Maven to build spring-asm correctly [SPR-5736]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5736](https://jira.spring.io/browse/SPR-5736?redirect=false)** and commented  As I tried to build Spring modules with maven, I discovered that Spring Core requires the repackaged ASM libs. Currently they are only repackaged using Ivy. It would be cool if someone configured the Maven pom to do the same. I would not hesitate to get touch on this if repackaging is really going to be required. In the comments to the M2 release blog post JÃ¼rgen was not really sure if this will be the way to go.   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-05-08T22:01:35Z","2012-06-19T02:28:28Z"
"","10405","Correct compiler settings in spring-parent pom.xml to allow build with Maven [SPR-5735]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5735](https://jira.spring.io/browse/SPR-5735?redirect=false)** and commented  Trying to provide some extensions for Spring JDBC I tried to check out the module and integrate it into mavenized Eclipse (m2Eclipse). Currently most modules don't compile correctly due to the Maven compiler plugin being set to work with 1.5. The following settings will let it compile against Java 6:  ```    org.apache.maven.plugins   maven-compiler-plugin        1.6     1.5     true     1.6     ```    ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8364b611f6d888c136199b64ca212264b8dd1171","closed","type: enhancement,","spring-projects-issues","2009-05-08T21:50:29Z","2012-06-19T03:44:07Z"
"","10398","Provide an JDBC Namespace to easily set up embedded database [SPR-5728]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5728](https://jira.spring.io/browse/SPR-5728?redirect=false)** and commented  As already discussed with Keith, I came up with the idea to provide a Spring namespace to ease setting up an instance of `EmbeddedDatabaseFactoryBean`. I've attached a very basic first draft of it.  Regards, Ollie   ---  **Affects:** 3.0 M3  **Attachments:** - [org.springframework.jdbc.config.zip](https://jira.spring.io/secure/attachment/15370/org.springframework.jdbc.config.zip) (_15.13 kB_)","closed","type: enhancement,","spring-projects-issues","2009-05-07T17:34:15Z","2012-06-19T03:43:21Z"
"","10224","Use ${foo} notation instead of {foo} for path templates [SPR-5553]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5553](https://jira.spring.io/browse/SPR-5553?redirect=false)** and commented  This is actually a question which could turn into a change request: What is the rational for using the simple `{foo`} notation in URL templates in `@RequestMapping`? I think most developers would be more familiar with `${foo`} as you know from standard EL. It's not a big deal actually but why introduce yet another convention?  Regards, Ollie   ---  **Affects:** 3.0 M1, 3.0 M2","closed","status: declined,","spring-projects-issues","2009-03-09T05:35:55Z","2009-08-06T00:17:45Z"
"","10069","Provide clean way to handle binding simple @RequestParam [SPR-5396]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-5396](https://jira.spring.io/browse/SPR-5396?redirect=false)** and commented  Annotated controllers can have typed method parameters that carry an `@RequestParam` annotation. This results in automatic conversion of the request parameter via SimpleTypeConverter. Now suppose following scenario:  public void myMethod(`@RequestParam`(""id"") Long id) { }  If now somebody calls this controllermethod with a String as id (?id=foobar) this causes a NumberFormatException, which would not be the problem if there was a way to handle this cleanly. The solution to simply use the declarative exception handling mechanism does not fit for me, as we need to display custom error messages for single controller methods and a NumberFormatException can have to be handled in different scenarios.  Using a custom PropertyEditor to map Exceptions to null could be a possible solution but faces the problem that you cannot register PropertyEditors for a given property path (""id"" in this case) as the evaluation only regards property binded PropertyEditors if you have a real target bean. Unfortunately the implementation a) drops the value in `@RequestParam` entirely and b) is not really nice to customize as the actual implementation (TypeConverterDelegate) is only package visible but (surprisingly) provides protected methods that could do the trick. Actually I have implemented this solution with some chained inner classes as the ServletRequestDataBinder gets the `@RequestParams` value injected as objectName in its constructor. Not really elegant but at least it works. Nevertheless the PropertyEditor does not seem that profound to me as you cannot ""really"" abort the request, displaying an error message or something like that.  What I would feel more comfortable with is an Errors instance that the Exceptions gets translated to.  public void myMethod(`@RequestParam`(""id"") Long id, Errors errors) { if (errors.hasFieldErrors(""id"")) { // display error message } }  This would somehow be similar to the validation model you work with in annotated controllers. Leaving the Errors instance away could result in the original exception being thrown.   ---  **Affects:** 2.5.6  7 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-01-05T04:46:26Z","2015-09-22T17:34:30Z"
"","10869","TypeDescriptor.getAnnotations() is broken [SPR-6201]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6201](https://jira.spring.io/browse/SPR-6201?redirect=false)** and commented  The method getAnnotations() in TypeDescriptor always returns an empty Annotation array if its member variables field and methodParameter are both null. Exactly this happens if the TypeDescriptor has been constructed with a Class parameter, which in turn happens for the Formatted annotation. The result is that the Formatted annotation has no effect with the GenericFormatterRegistry.    ---  **Affects:** 3.0 RC1","closed","in: core,","spring-projects-issues","2009-10-06T23:50:46Z","2019-01-12T16:38:58Z"
"","10868","GenericFormatterRegistry: unable to use custom ConversionService [SPR-6200]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6200](https://jira.spring.io/browse/SPR-6200?redirect=false)** and commented  The GenericFormatterRegistry tries to use a custom ConversionService bean that has been deployed into the ApplicationContext (see setApplicationContext). However, since the code first checks that this.conversionService == null which in turn will never be true as this.conversionService will be initialized upon object construction, this code simply doesn't work.   ---  **Affects:** 3.0 RC1","closed","in: core,","spring-projects-issues","2009-10-06T23:45:26Z","2012-06-19T03:44:11Z"
"","10867","GenericFormatterRegistry: unable to register formatters for primitive types [SPR-6199]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6199](https://jira.spring.io/browse/SPR-6199?redirect=false)** and commented  A registered formatter for a wrapper type (e.g. Boolean) does not apply for its primitive type (e.g. boolean).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2fe600392323c8775f7c157c9c2a7e5b9654bf8f","closed","type: bug,","spring-projects-issues","2009-10-06T23:27:06Z","2012-06-19T03:44:09Z"
"","10866","GenericConversionService: unable to register converters for primitive types [SPR-6198]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6198](https://jira.spring.io/browse/SPR-6198?redirect=false)** and commented  A registered converter for a wrapper type (e.g. Boolean) does not apply for its primitive type (e.g. boolean). This works in M4.   ---  **Affects:** 3.0 RC1","closed","in: core,","spring-projects-issues","2009-10-06T23:27:00Z","2019-01-11T14:39:44Z"
"","10865","NPE in GenericConversionService.findConverterByClassPair(Class, Class) [SPR-6197]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6197](https://jira.spring.io/browse/SPR-6197?redirect=false)** and commented  The method findConverterByClassPair(Class, Class) in the GenericConversionService will throw a NullPointerException if the passed arguments are null. This can happen for example with raw collection types when TypeDescriptor.getObjectType() returns null.   ---  **Affects:** 3.0 RC1","closed","in: core,","spring-projects-issues","2009-10-06T23:20:43Z","2012-06-19T03:43:36Z"
"","10864","GenericConversionService: unable to autowire list types [SPR-6196]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6196](https://jira.spring.io/browse/SPR-6196?redirect=false)** and commented  Consider the following example:  class Foo {  `@Autowired` private List\ myBars;  // ... }  In case the GenericConversionService has been deployed into the application context the property myBars cannot be converted because the conversion service resolves the ObjectToCollectionGenericConverter instead of the CollectionToCollectionGenericConverter. This happens because of the super class resolving in method getConverter(Map, Class) which fails to properly consider the List interface. In case of an array type the conversion works without problems.   ---  **Affects:** 3.0 RC1","closed","in: core,","spring-projects-issues","2009-10-06T23:14:02Z","2012-06-19T03:43:19Z"
"","10736","Autowire views created by UrlBasedViewResolver.loadView [SPR-6068]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6068](https://jira.spring.io/browse/SPR-6068?redirect=false)** and commented  The View instances created in org.springframework.web.servlet.view.UrlBasedViewResolver.loadView(String viewName, Locale locale) will be initialized (by invoking initializeBean(..)), however, no autowiring is performed.  Would it be possible to invoke autowireBean(result) as well?  Something like this:  AbstractUrlBasedView view = buildView(viewName); AutowireCapableBeanFactory beanFactory = getApplicationContext().getAutowireCapableBeanFactory(); View result = (View) beanFactory.initializeBean(view, viewName); beanFactory.autowireBean(result); return (view.checkResource(locale) ? result : null);   ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-09-02T07:20:26Z","2018-12-26T17:16:47Z"
"","10735","SPEL: Allow mixins for primitive integers [SPR-6067]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6067](https://jira.spring.io/browse/SPR-6067?redirect=false)** and commented  With the mixin mechanism it is possible to extend even integers. However, currently one has to write  ``` new Integer(5).mixinProperty new Integer(5).mixinMethod() ```  because for expressions like  ``` 5.mixinProperty 5.mixinMethod() ```  The SPEL parser throws an exception:  ``` org.springframework.expression.spel.SpelParseException: EL1041E:(pos 2): After parsing a valid expression, there is still more data in the expression: 'mixinProperty' 	at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:120) 	at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:1) 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpressions(TemplateAwareExpressionParser.java:128) 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseTemplate(TemplateAwareExpressionParser.java:74) 	at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:64) ```  It would be great if this simpler notation could be used as well.   ---  **Affects:** 3.0 M4","closed","status: bulk-closed,","spring-projects-issues","2009-09-02T07:00:34Z","2019-01-12T03:50:52Z"
"","10727","SPEL: Null-safeness of boolean operators [SPR-6059]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6059](https://jira.spring.io/browse/SPR-6059?redirect=false)** and commented  Boolean operators, e.g. OperatorNot, OpAnd, etc are not null-safe.  From OperatorNot:  boolean value = (Boolean)state.convertValue(children[0].getValueInternal(state), BOOLEAN_TYPE_DESCRIPTOR);  The value on the right side might be null, so the assignment to the primitive boolean value will cause a NullPointerException (auto unboxing).  I think it is better to prevent the NPE here and throw instead an EvaluationException in this case. This will help to locate the cause of the exception.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f4460dcbf77e1844870d2e3207f118f25ada79b4, https://github.com/spring-projects/spring-framework/commit/53eb612a68ea184bba3a5daeb6e7dff0761bacff","closed","type: bug,","spring-projects-issues","2009-09-01T08:11:21Z","2012-06-19T03:42:49Z"
"","10679","GenericConversionService incomplete? (conversion from arrays/collections to strings) [SPR-6058]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6058](https://jira.spring.io/browse/SPR-6058?redirect=false)** and commented  We stumbled upon a problem in org.springframework.core.convert.support.GenericConversionService when trying to convert Collection values (an ArrayList in our case) to Strings. The conversion from Collections to Strings is not supported.  However, there is a special if condition that tests for Strings within getConversionExecutor(..):      	if (sourceType.isCollection()) {     		if (targetType.isCollection()) {	     			return new CollectionToCollection(sourceType, targetType, this);     		}     		else if (targetType.isArray()) {     			return new CollectionToArray(sourceType, targetType, this);     		}     		else if (targetType.isMap()) {     			if (sourceType.getElementType().equals(String.class)) {     				return new StringCollectionToMap(sourceType, targetType, this);     			} else {     				// object collection to map     				return null;     			}     		}     		else {                                      /************ HERE ************/          			if (targetType.getType().equals(String.class)) {     				// collection to string;     				return null;     			}     			else {     				// collection to object     				return null;     			}     		}     	}  (the same String test appears for arrays) If both branches of the if-statement return null then why is there a distinction at all? The conversion to String should always be supported, so it seems there is some code missing.   ---  **Affects:** 3.0 M4","closed","in: core,","spring-projects-issues","2009-09-01T07:59:58Z","2012-06-19T03:42:54Z"
"","10672","NPE when handling the empty namespace as a custom namespace [SPR-6004]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-6004](https://jira.spring.io/browse/SPR-6004?redirect=false)** and commented  We are building a framework based on Spring. The XML files to be parsed may use Spring's bean namespace and also custom namespaces. The problem is that we want the empty namespace also to be interpreted as a custom namespace.  To this end we've created a subclass of org.springframework.beans.factory.xml.BeanDefinitionParserDelegate that overrides the public method isDefaultNamespace(String namespaceUri) in a way to return false for the empty (null) namespace.  However, then the private method decorateIfRequired in the same class will throw a NullPointerException because of the test      else if (namespaceUri.startsWith(""http://www.springframework.org/"")) {  in line 1359.  Could you please fix this line by adding a not null check, i.e.      else if (namespaceUri != null && namespaceUri.startsWith(""http://www.springframework.org/"")) {  Thanks a lot!   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05fe67938443b22361d158a5f00443efaa0a85c1","closed","in: core,","spring-projects-issues","2009-08-13T19:04:05Z","2012-06-19T03:42:43Z"
"","10574","SPEL: Accessing inner classes via T(Outer$Inner) throws ParseException [SPR-5905]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5905](https://jira.spring.io/browse/SPR-5905?redirect=false)** and commented  It is not possible to address an inner class from SPEL via T(Outer$Inner) because the SPEL parser throws a ParseException:  org.springframework.expression.ParseException: Parsing problem: EL1050E:(pos 8): Error occurred during expression parse: mismatched input '$' expecting RPAREN at org.springframework.expression.spel.antlr.SpelAntlrExpressionParser.doParseExpression(SpelAntlrExpressionParser.java:74) at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpressions(TemplateAwareExpressionParser.java:128) at org.springframework.expression.common.TemplateAwareExpressionParser.parseTemplate(TemplateAwareExpressionParser.java:74) at org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(TemplateAwareExpressionParser.java:64) ... Caused by: org.springframework.expression.spel.SpelException: EL1050E:(pos 8): Error occurred during expression parse: mismatched input '$' expecting RPAREN at org.springframework.expression.spel.antlr.SpringExpressionsParserExtender.displayRecognitionError(SpringExpressionsParserExtender.java:60) at org.antlr.runtime.BaseRecognizer.reportError(BaseRecognizer.java:144) at org.springframework.expression.spel.generated.SpringExpressionsParser.type(SpringExpressionsParser.java:2937) at org.springframework.expression.spel.generated.SpringExpressionsParser.startNode(SpringExpressionsParser.java:1451) at org.springframework.expression.spel.generated.SpringExpressionsParser.primaryExpression(SpringExpressionsParser.java:1188) at org.springframework.expression.spel.generated.SpringExpressionsParser.unaryExpression(SpringExpressionsParser.java:1136) at org.springframework.expression.spel.generated.SpringExpressionsParser.powerExpr(SpringExpressionsParser.java:954) at org.springframework.expression.spel.generated.SpringExpressionsParser.productExpression(SpringExpressionsParser.java:806) at org.springframework.expression.spel.generated.SpringExpressionsParser.sumExpression(SpringExpressionsParser.java:675) at org.springframework.expression.spel.generated.SpringExpressionsParser.relationalExpression(SpringExpressionsParser.java:593) at org.springframework.expression.spel.generated.SpringExpressionsParser.logicalAndExpression(SpringExpressionsParser.java:505) at org.springframework.expression.spel.generated.SpringExpressionsParser.logicalOrExpression(SpringExpressionsParser.java:417) at org.springframework.expression.spel.generated.SpringExpressionsParser.expression(SpringExpressionsParser.java:207) at org.springframework.expression.spel.generated.SpringExpressionsParser.expr(SpringExpressionsParser.java:140) at org.springframework.expression.spel.antlr.SpelAntlrExpressionParser.doParseExpression(SpelAntlrExpressionParser.java:67) ... 150 more Caused by: MismatchedTokenException(71!=24) at org.antlr.runtime.BaseRecognizer.mismatch(BaseRecognizer.java:117) at org.antlr.runtime.BaseRecognizer.match(BaseRecognizer.java:99) at org.springframework.expression.spel.generated.SpringExpressionsParser.type(SpringExpressionsParser.java:2895) ... 162 more   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2bce8c2a88d5427bdc47d96134ab6942c869dec","closed","type: bug,","spring-projects-issues","2009-07-07T02:50:47Z","2012-06-19T03:43:30Z"
"","10568","SPEL: Unable to pass null values to method calls [SPR-5899]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5899](https://jira.spring.io/browse/SPR-5899?redirect=false)** and commented  This is a follow-up of #10332  The bugfix treats all null values as of type java.lang.Object (line 90 in org.springframework.expression.spel.ast.MethodReference). Unfortunately Spring can't find a matching method in this case, because generally Object can't be converted to any other type.  Simple example:  public class NullMethodParamConverterBug {      public Integer tryToInvokeWithNull(Integer value) {         return value;     }  }  and  #{nullMethodParamConverterBug.tryToInvokeWithNull(null)}  causes  org.springframework.expression.spel.SpelException: EL1003E:(pos 28): Method call: Method tryToInvokeWithNull(java.lang.Object) cannot be found on NullMethodParamConverterBug type at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:130) at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:76) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:54) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:51) at org.springframework.expression.spel.SpelExpression.getValue(SpelExpression.java:66)  ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb69e7574b4cc8b9c49170aedc5e0bbe51c840e2","closed","type: bug,","spring-projects-issues","2009-07-06T03:59:59Z","2019-01-11T17:17:33Z"
"","10474","NullPointerException when using Maps as root objects [SPR-5804]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5804](https://jira.spring.io/browse/SPR-5804?redirect=false)** and commented  We are getting the following NullPointerException when a root object in an evaluation context that is accessed from SPEL is a Map instance (more general: if a Map is **not** resolved via the ReflectivePropertyResolver):  java.lang.NullPointerException at org.springframework.core.convert.service.GenericConversionService.findSuperConverter(GenericConversionService.java:409) at org.springframework.core.convert.service.GenericConversionService.findRegisteredSuperConverter(GenericConversionService.java:384) at org.springframework.core.convert.service.GenericConversionService.getConversionExecutor(GenericConversionService.java:217) at org.springframework.core.convert.service.GenericConversionService.executeConversion(GenericConversionService.java:172) at org.springframework.expression.spel.support.StandardTypeConverter.convertValue(StandardTypeConverter.java:55) at org.springframework.expression.spel.ExpressionState.convertValue(ExpressionState.java:119) at org.springframework.expression.spel.ast.Indexer.getValueInternal(Indexer.java:56) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:54) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:51) at org.springframework.expression.spel.SpelExpression.getValue(SpelExpression.java:66)  This exception is caused by the incomplete implementation of getMayKeyType() in org.springframework.core.convert.TypeDescriptor that simply returns null in the described case.  It would be great if this bug could be fixed as soon as possible. Thanks a lot!   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a4b7ce168c16c499642fdebf09044bdec74c766d","closed","in: core,","spring-projects-issues","2009-06-04T21:53:42Z","2012-06-19T03:42:48Z"
"","10344","SPEL: Projections don't work within templates (ParseException) [SPR-5673]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5673](https://jira.spring.io/browse/SPR-5673?redirect=false)** and commented  Projections (probably as well as selections and other constructs that use curly braces) don't work within templates.  The problem is that templates themselves use curly braces as delimiters. Given for example the template ""#{!{#this == 2}}"", then the method TemplateAwareExpressionParser.parseExpressions will extract the substring ""!{#this == 2"" and pass it afterwards to SpelAntlrExpressionParser.doParseExpression, which in turn will report a ParseException.   ---  **Affects:** 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/338a7ee2de4c507888035dae9d16d0ecf0e7bbeb, https://github.com/spring-projects/spring-framework/commit/4c42597cbcd7b2f0a225a368554198f54224b1c3","closed","type: bug,","spring-projects-issues","2009-04-13T19:11:12Z","2019-01-13T21:50:17Z"
"","10335","SPEL: Introduce a new null-safe access operator for properties [SPR-5664]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5664](https://jira.spring.io/browse/SPR-5664?redirect=false)** and commented  SPEL doesn't have a way to specify whether property accessors should be null safe or not. Currently they are not null safe, i.e. ""foo.bar"" will throw an exception if foo is null. (However, there's an inconsistency here, see #10334)  It would be great if SPEL could introduce an additional operator '?.' (besides the '.' operator) for null-safe access. Thus ""foo.bar"" would still throw an exception, but ""foo?.bar"" would evaluate to null resp. the default value of bar (for primitive types).  There's an interesting blog post about this idea at http://codervirtue.blogspot.com/2009/03/null-safe-invocation-in-java-7.html  ---  **Affects:** 3.0 M2","closed","type: enhancement,","spring-projects-issues","2009-04-08T21:24:14Z","2019-01-11T16:32:50Z"
"","10334","SPEL: Inconsistent implementation of ReflectivePropertyResolver - canRead vs. read for null targets [SPR-5663]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5663](https://jira.spring.io/browse/SPR-5663?redirect=false)** and commented  The method canRead() in org.springframework.expression.spel.support.ReflectivePropertyResolver returns false if target is null. However, the method read() returns null for a null target. According to the contract specified by canRead it should throw an AccessException in this case.    ---  **Affects:** 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d34a2c5d02d7c15534d14d5f1f5649a9bcba0031","closed","type: bug,","spring-projects-issues","2009-04-08T20:59:34Z","2012-06-19T03:46:46Z"
"","10332","SPEL: NullPointerException when passing null values as parameters to method calls [SPR-5661]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5661](https://jira.spring.io/browse/SPR-5661?redirect=false)** and commented  Currently it is not possible to pass a null value as a parameter to a method in SPEL, because Spring tries to determine the class of the passed parameter, which results in a NullPointerException:  java.lang.NullPointerException at org.springframework.expression.spel.ast.MethodReference.getTypes(MethodReference.java:94) at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:76) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:53) at org.springframework.expression.spel.ast.Ternary.getValueInternal(Ternary.java:52) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:51) at org.springframework.expression.spel.SpelExpression.getValue(SpelExpression.java:64)  Of course Spring should be able to handle such values.    ---  **Affects:** 3.0 M2","closed","type: bug,","spring-projects-issues","2009-04-08T07:10:52Z","2012-06-19T03:47:24Z"
"","10198","Please allow empty values for database and databasePlatform in HibernateJpaVendorAdapter [SPR-5527]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5527](https://jira.spring.io/browse/SPR-5527?redirect=false)** and commented  It would be great if HibernateJpaVendorAdapter could treat empty strings for the properties database and databasePlatform the same way as null values.  Background: we use a generic configuration that contains a bean definition like this:           	     	     		     		     	       The referenced property values may be configured individually.  However, since HibernateJpaVendorAdapter tests in getJpaPropertyMap() for null values, a user must specifiy a value for jpa.databasePlatform. We would like to make this propery optional.  To this end the code snippet      if (getDatabasePlatform() != null) {          jpaProperties.put(Environment.DIALECT, getDatabasePlatform());     }     else if (getDatabase() != null) {  should be rewritten like this      if (StringUtils.hasText(getDatabasePlatform())) {          jpaProperties.put(Environment.DIALECT, getDatabasePlatform());     }     else if (StringUtils.hasText(getDatabase())) {    ---  **Affects:** 3.0 M1","closed","type: enhancement,","spring-projects-issues","2009-02-26T21:04:52Z","2018-12-27T11:20:53Z"
"","10189","Spring expression: please provide additional convenience operators for comparisons [SPR-5518]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5518](https://jira.spring.io/browse/SPR-5518?redirect=false)** and commented  The SPEL grammar requires , =, etc for comparisons. Since these operators must be escaped as entity references when used within XML, it would be good to have the following extra operator notations for convenience: lt  for < gt  for > le  for =  as well as eq  for == ne  for !=   ---  **Affects:** 3.0 M1  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-23T02:06:14Z","2012-06-19T03:47:32Z"
"","10139","Spring expression: please improve getValue() in CompositeStringExpression [SPR-5466]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5466](https://jira.spring.io/browse/SPR-5466?redirect=false)** and commented  The current implementation of CompositeStringExpression.getValue() (which simply calls append() on a StringBuffer) inserts ""null"" for null values and ""[I@f34a65"" (or similar) for arrays.  I think it would be better to call ObjectUtils.getDisplayString() for the value to be appended. (Incidentally there is already a TODO in this method)  At least the String ""null"" should be omitted (as in other web frameworks).   ---  **Affects:** 3.0 M1","closed","type: enhancement,","spring-projects-issues","2009-02-07T02:45:46Z","2012-06-19T03:46:36Z"
"","10123","Spring expression: ReflectionUtils don't respect boolean getters starting with 'is' [SPR-5450]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5450](https://jira.spring.io/browse/SPR-5450?redirect=false)** and commented  In org.springframework.expression.spel.reflection.ReflectionUtils#findGetterForProperty() boolean getters will only be found if they start with ""get"", i.e. they will be ignored if they start with ""is"". It would be great if is-getters would be accounted as well.  BTW: is there a special reason that you don't use the functionality provided by the java.beans package?   ---  **Affects:** 3.0 M1","closed","type: enhancement,","spring-projects-issues","2009-01-31T07:18:14Z","2012-06-19T03:47:15Z"
"","10115","Spring expression: NPE in org.springframework.expression.spel.ast.Ternary [SPR-5441]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5441](https://jira.spring.io/browse/SPR-5441?redirect=false)** and commented  The evaluation in getValue of Ternary is not null-safe. Boolean b may evaluate to null, so if (b) will auto-unbox the contained boolean, which throws a NullPointerException in this case.  The code in line 45 should be if (b != null && b.booleanValue()) { ...    ---  **Affects:** 3.0 M1","closed","type: bug,","spring-projects-issues","2009-01-28T20:36:06Z","2012-06-19T03:47:38Z"
"","10112","org.springframework.expression: Bug in TemplateAwareExpressionParser when expressionString contains '}' [SPR-5438]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5438](https://jira.spring.io/browse/SPR-5438?redirect=false)** and commented  I have a scenario where the expressionString that is to be parsed by the TemplateAwareExpressionParserf is a Javascript snippet that contains an expression. This script especially has closing braces after the expression  Something like ""{ var val = '${foo.bar}'; }""  The final method parseExpressions() has this part in it      } else {          // another expression exists after this one in the expression string          suffixIndex = expressionString.lastIndexOf(suffix, nextPrefixIndex);     }  (suffix is context.getExpressionSuffix() and evaluates to ""}"")  Apparently, when the expressionString contains a single } which does not belong to the expression, then the parser identifies the wrong substring as the expression to be parsed (in this case the part ""foo.bar}'; ""), so the following expression parsing in doParseExpression() throws an exception.   ---  **Affects:** 3.0 M1","closed","type: bug,","spring-projects-issues","2009-01-27T18:46:29Z","2012-06-19T03:46:54Z"
"","10110","Please provide a hook in DispatcherServlet to build custom ServletRequestAttributes [SPR-5436]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-5436](https://jira.spring.io/browse/SPR-5436?redirect=false)** and commented  The DispatcherServlet creates in doDispatch() a new instance of ServletRequestAttributes by using the new operator (line 839 in the head CVS version). That means it is not possible to use an extended ServletRequestAttributes class.  Please provide a protected hook method buildServletRequestAttributes(request) that may be overridden in subclasses by returning an instance of a subclass of ServletRequestAttributes. We need this to extend the set of scopes (beyong request and session) in our application.   ---  **Affects:** 3.0 M1","closed","type: enhancement,","spring-projects-issues","2009-01-27T07:53:25Z","2018-12-26T16:37:54Z"
"","10511","Volatile JobDetailBean works improperly with clustered Quartz [SPR-5841]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-5841](https://jira.spring.io/browse/SPR-5841?redirect=false)** and commented  I have a following job detail bean in the Spring context (as you may see it is volatile)                                                                                          and following entries in the  quartz properties  org.quartz.jobStore.misfireThreshold=60000 org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate org.quartz.jobStore.useProperties=true org.quartz.jobStore.clusterCheckinInterval=30000 1. Crucial !!!    org.quartz.jobStore.isClustered=true  All is running smoothly. But if I change value of jobClass property in the bean definition above and restart application (or the whole Tomcat) change is not reflected and old class is used to execute job. I set  org.quartz.jobStore.isClustered=false all works as it should, change jobClassName is picked up on application restart.    ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2009-06-19T02:46:16Z","2019-01-12T16:27:03Z"
"","10321","Mismatch between Javadoc and method signture BeanWrapper.getPropertyDescriptor(String) - throws clause [SPR-5650]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-5650](https://jira.spring.io/browse/SPR-5650?redirect=false)** and commented      /**      * Obtain the property descriptor for a specific property      * of the wrapped object.      * @param propertyName the property to obtain the descriptor for      * (may be a nested path, but no indexed/mapped property)      * @return the property descriptor for the specified property      * @throws  InvalidPropertyException if there is no such property       */     PropertyDescriptor getPropertyDescriptor(String propertyName) throws  BeansException ;    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-04-03T01:11:41Z","2012-06-19T03:47:30Z"
"","10464","Composing synthetic converters from concrete converters [SPR-5794]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=oleg.zhurakousky@springsource.com)** opened **[SPR-5794](https://jira.spring.io/browse/SPR-5794?redirect=false)** and commented  Here is the summary of the design as well as the list of core features I am proposing with this implementation: (Patches are attached)  - Similar to the DefaultTypeConverter I've implemented   ComposingConverterService which extends GenericTypeConverter - ComposingConverterService provides all the functionality of the   DefaultTypeConverter as well as ability (as it is also implementation   of the ConverterRegistry) to have synthetic Converters composed from   the set of concrete Converters. For example: Providing two concrete   converters AtoB and BtoC the resulting converter map will actually   have 3 converters AtoB, BtoC and AtoC (synthetic converter composed   from sequential chain of AtoB and BtoC) - Prevents the creation of circular synthetic converters. For example:   Having AtoB BtoC and CtoA could result in the creation of synthetic   converter AtoA (via AtoB->BtoC->CtoA). Special hook is implemented to   prevent this from happening and test was created to verify it. - Calculation of the most optimal routes for composition of the   synthetic converters. For example: Let's say you have AtoB, BtoC, CtoD   and BtoD concrete converters. This could result in two strategies for   synthetic converter AtoD. One strategy would be composed via (AtoB,   BtoC, CtoD) while another strategy would use different and more   optimal route (AtoB and BtoD). Special hook is implemented to pick the   latest conversion strategy as the most optimal one. Also, these   conversion routes are recalculated and optimized in real time as new   concrete converters are registered and could result in potential for   more optimal route. Appropriate test cases were created to verify it. - Synthetic converters are created during initialization of the   Converter service so during the usage phase no search and/or   calculation is needed to find the appropriate conversion strategy as   it is implemented in other frameworks (e.g., Tapestry) which i believe will affect (in a good   way) a performance and quality of the conversion routines. - and other minor features  I have tested this service vs all the existing test cases as well as created an additional test case and had a green bar across the screen.  ---  **Affects:** 3.0 RC3  **Attachments:** - [ComposingConverterService.txt](https://jira.spring.io/secure/attachment/15431/ComposingConverterService.txt) (_11.40 kB_) - [ComposingConverterService.txt](https://jira.spring.io/secure/attachment/15427/ComposingConverterService.txt) (_11.35 kB_) - [ComposingConverterServiceTest.txt](https://jira.spring.io/secure/attachment/15430/ComposingConverterServiceTest.txt) (_11.39 kB_) - [ConversionPlan.txt](https://jira.spring.io/secure/attachment/15428/ConversionPlan.txt) (_10.26 kB_) - [ConversionPLanDefinition.txt](https://jira.spring.io/secure/attachment/15429/ConversionPLanDefinition.txt) (_2.00 kB_)  **Issue Links:** - #11047 Need more flexibility around conversion strategies and how to bootstrap different conversion strategies.  (_**""is depended on by""**_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-05-28T20:45:12Z","2019-01-11T17:31:58Z"
"","10212","MVC BindStatus does not interact with Web Flow's BindingModel [SPR-5541]","**[Oleg Soloviov](https://jira.spring.io/secure/ViewProfile.jspa?name=soleg)** opened **[SPR-5541](https://jira.spring.io/browse/SPR-5541?redirect=false)** and commented  1) do some entries into the HTML form 2) do submit the form 3) do some changes to the form's entries on the server side 4) the changes are not displayed to the user, old unchanged entries remind in the form  Probably the bug is here:  in the Constructor of the org.springframework.web.servlet.support.BindStatus it is => ... this.errors = requestContext.getErrors(beanName, false); if (this.errors != null) { ... } else { ... } } => the requestContext.getErrors returns errors Object that is not null but empty so (this.errors.hasErrors() is false) the else block is NEVER EXECUTED !!!  The solution could be: => if (this.errors != null && this.errors.hasErrors()) { ... } else { ... } } =>  SEE ALSO: http://jira.springframework.org/browse/SPR-5528  ---  **Affects:** 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=68273  **Issue Links:** - #10199 BindStatus interprets the RequestContext.getErrors(String name, boolean htmlEscape) wrong (_**""is duplicated by""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-03T02:02:33Z","2019-01-11T17:00:16Z"
"","10199","BindStatus interprets the RequestContext.getErrors(String name, boolean htmlEscape) wrong [SPR-5528]","**[Oleg Soloviov](https://jira.spring.io/secure/ViewProfile.jspa?name=soleg)** opened **[SPR-5528](https://jira.spring.io/browse/SPR-5528?redirect=false)** and commented  1) You do some entries into the HTML form 2) submits the form 3) you do some changes to the form's entries on the server side 4) the changes are not displayed to the user, old entries remind in the form  Probably the bug is here:  in the Constructor of the org.springframework.web.servlet.support.BindStatus it is => ... this.errors = requestContext.getErrors(beanName, false); if (this.errors != null) { ... } else { ... } => the requestContext.getErrors returns errors Object that is not null but empty so (this.errors.hasErrors() is false) the else block is NEVER EXECUTED !!!  The solution could be: => if (this.errors != null && this.errors.hasErrors()) { ... } else { ... } =>  ---  **Affects:** 2.5.6  **Issue Links:** - #10212 MVC BindStatus does not interact with Web Flow's BindingModel (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2009-02-26T22:48:49Z","2019-01-12T16:50:30Z"
"","10848","Upgrade Apache HttpClient to version 4.0 [SPR-6180]","**[Oleg Kalnichevski](https://jira.spring.io/secure/ViewProfile.jspa?name=olegk)** opened **[SPR-6180](https://jira.spring.io/browse/SPR-6180?redirect=false)** and commented  Folks,  Please consider upgrading HttpClient to version 4.0 which is the latest stable (GA) version of the library. Commons HttpClient 3.1 is very likely to be deprecated / officially declared end of life very soon (3 - 6 months). There have been no bug fixes in the 3.x branch for over a year.  Patch attached. Unfortunately I was unable to fix the Ivy build which I am not very familiar with.  Oleg  ---  **Affects:** 3.0 RC1  **Attachments:** - [spring-httpclient-4.0.patch](https://jira.spring.io/secure/attachment/15761/spring-httpclient-4.0.patch) (_27.24 kB_)  **Issue Links:** - #12301 Provide support for Http Client 4 now that it is available (_**""is duplicated by""**_) - #11385 CommonsClientHttpRequestFactory getHttpClient() returns HttpClient from Commons HttpClient 3.x which has been EOL'd (_**""is duplicated by""**_) - #15356 Request streaming for HttpComponentsClientHttpRequestFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3690002dce069729e24bb67386df3cbd7655708c, https://github.com/spring-projects/spring-framework/commit/54bbcf3a42ab2be10ebb27b7ff8965dcdf7a5254  17 votes, 20 watchers","closed","has: votes-jira,","spring-projects-issues","2009-10-02T22:33:04Z","2019-01-11T14:40:06Z"
"","10540","Spring 3.0.0 M3 Build Fails on Fedora 11 [SPR-5875]","**[Ole Ersoy](https://jira.spring.io/secure/ViewProfile.jspa?name=ole.ersoy)** opened **[SPR-5875](https://jira.spring.io/browse/SPR-5875?redirect=false)** and commented  See forum reference.   ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?p=247999#post247999","closed","in: core,","spring-projects-issues","2009-06-26T14:08:32Z","2012-06-19T03:44:04Z"
"","10004","DestructionCallbackBindingListener is Serializable but contains potential non-serializable state [SPR-5331]","**[Olaf Otto](https://jira.spring.io/secure/ViewProfile.jspa?name=olaf)** opened **[SPR-5331](https://jira.spring.io/browse/SPR-5331?redirect=false)** and commented  The static inner class DestructionCallbackBindingListener of ServletRequestAttributes implements Serializable but has a potential non-serializable state (a Runnable reference). This may lead to unwanted serialization attempts of the runnable objects.  I believe this might actually not be a bug but a desired behaviour, since DestructionCallbackBindingListener is supposed to survive graceful web-app restarts. If so, this fact should probably be documented or serializability should be enforced by other means.  org.springframework.web.context.request.ServletRequestAttributes#registerDestructionCallback(String name, Runnable callback, int scope) lacks API documentation so far.  ---  **Affects:** 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6  **Issue Links:** - #13733 DestructionCallbackBindingListener is Serializable but contains non-serializable Runnable reference","closed","type: task,","spring-projects-issues","2008-11-30T23:58:06Z","2019-01-11T16:17:56Z"
"","10409","'util' namespace should support collection types that need to be constructed with arguments [SPR-5739]","**[Ofer Ron](https://jira.spring.io/secure/ViewProfile.jspa?name=oferron)** opened **[SPR-5739](https://jira.spring.io/browse/SPR-5739?redirect=false)** and commented  'util' name space curently only supports using collection implementation with default constructors. This means that EnumMap and TreeMap with custom comparator can not be configured directly through Spring.   --- No further details from [SPR-5739](https://jira.spring.io/browse/SPR-5739?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-05-09T23:21:52Z","2012-06-19T09:36:33Z"
"","10503","JdbcTemplate.update(String sql, Object[] args) does not return when args parameter has ""hash"" as one of the values [SPR-5833]","**[Nuno Viana](https://jira.spring.io/secure/ViewProfile.jspa?name=gizmo)** opened **[SPR-5833](https://jira.spring.io/browse/SPR-5833?redirect=false)** and commented  There's something strange with org.springframework.jdbc.core.JdbcTemplate.update(String sql, Object[] args) method.  When using the JdbcTemplate.update(String sql, Object[] args) where args contains a value with the string ""hash"" (which corresponds to a reserved keyword), this method never returns and blocks the application execution.   ---  **Affects:** 2.5.6","closed","status: invalid,","spring-projects-issues","2009-06-17T00:05:17Z","2019-01-12T05:33:27Z"
"","10195","SimpleRemoteStatelessSessionProxyFactoryBean reconnect issue in OC4J [SPR-5524]","**[Norm Deane](https://jira.spring.io/secure/ViewProfile.jspa?name=deanen)** opened **[SPR-5524](https://jira.spring.io/browse/SPR-5524?redirect=false)** and commented  I'm fairly certain this is not a Spring bug but rather some issue with OC4J and its implementation of the EJB spec. Never the less I'm hoping that someone can take a look at this and help me understand the issue a little better and possibly even suggest a fix or work around.  From my Spring forum post... ""We're using Spring's SimpleRemoteStatelessSessionProxyFactoryBean in an OC4J (10.1.3.2) environment and it seems to be working great with one significant exception... If we restart the EJB application, redeploy the EJB application, or restart the container that the EJB application is running in without restarting the EJB client application then the EJB client is unable to reconnect.""  I've spent several hours debugging the code and have posted the issue and my attempts at solving it in the Spring forums. It seems that by either disabling caching of the home interface OR by changing the ""isConnectFailure"" logic (as shown in the forum post) I'm able to fix two of the three scenarios (EJB application redeploy and EJB container restart) but have yet to find a solution that allows the client to reconnect when the EJB application has been restarted.  Any insight or help would be greatly appreciated.  Thanks,  Norm   ---  **Affects:** 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6  **Reference URL:** http://forum.springframework.org/showthread.php?t=67655","closed","type: enhancement,","spring-projects-issues","2009-02-25T00:54:41Z","2012-06-19T09:36:29Z"
"","10668","StatementCreatorUtils.setNull throws exception in Derby Client driver [SPR-6000]","**[Norbert Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=norbertschneider)** opened **[SPR-6000](https://jira.spring.io/browse/SPR-6000?redirect=false)** and commented  If JdbcTemplate.update is executed with a null value it throws an exception in the Derby Client driver:  org.apache.derby.client.am.SqlException: Es wurde versucht, einen Datenwert des Typs '\' aus einem Datenwert des Typs 'BIGINT' abzurufen. org.apache.derby.client.am.PreparedStatement$PossibleTypes.throw22005Exception(Unknown Source) org.apache.derby.client.am.PreparedStatement.setNull(Unknown Source) org.springframework.jdbc.core.StatementCreatorUtils.setNull(StatementCreatorUtils.java:247) org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:214) org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:145) org.springframework.jdbc.core.ArgPreparedStatementSetter.setValues(ArgPreparedStatementSetter.java:51) org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:796) org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:591) org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:792) org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:850) org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:858) org.springframework.security.acls.jdbc.JdbcMutableAclService.updateObjectIdentity(JdbcMutableAclService.java:376) org.springframework.security.acls.jdbc.JdbcMutableAclService.updateAcl(JdbcMutableAclService.java:334)  In org.springframework.jdbc.core.StatementCreatorUtils.setNull, the current driver name get compared against some predefined names and the null value is set appropriately. There is already a comparison against ""Apache Derby Embedded"". I suggest changing it to ""Apache Derby"", this works fine in my case.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/84c1b56e35b4369680bb89cf32542e0171c22cd0","closed","in: core,","spring-projects-issues","2009-08-11T19:28:26Z","2012-06-19T03:43:32Z"
"","10680","@Timed seems not to measure total time when used with @Repeat [SPR-6011]","**[Nils Wloka](https://jira.spring.io/secure/ViewProfile.jspa?name=nwloka)** opened **[SPR-6011](https://jira.spring.io/browse/SPR-6011?redirect=false)** and commented  Given the following component:  ``` @Component public class VerySlowKnowledgeBase implements KnowlegdeBase {      public Iterable findAnswersFor(Topic topic) {         try {             Thread.sleep(500);         } catch (InterruptedException e) {             // Nothing to do here         }         return null;     } } ```  the following test fails as expected:  ``` @Test @Timed(millis = 100) public void popular_queries_should_yield_results_within_100_millis() {     Topic topic = new SearchPhraseBasedTopic(""Declarative Caching with Spring"");     Iterable result = knowledgeBase.findAnswersFor(topic); } ```  whereas this test passed even though it takes more than a second to do so:  ``` @Repeat(10) @Test @Timed(millis = 1000) public void popular_queries_should_yield_results_within_100_millis() {     Topic topic = new SearchPhraseBasedTopic(""Declarative Caching with Spring"");     Iterable result = knowledgeBase.findAnswersFor(topic); } ```  Also,  ``` @Test @Timed(millis = 400) @Repeat(4) public void popular_queries_should_yield_results_within_100_millis() {     Topic topic = new SearchPhraseBasedTopic(""Declarative Caching with Spring"");     Iterable result = knowledgeBase.findAnswersFor(topic); } ```  leads to  ``` INFO: Repetition 1 of test SelectByTopicTest#popular_queries_should_yield_results_within_100_millis() ... java.util.concurrent.TimeoutException: Test took 501 ms; limit was 400 ms. ```  which indicates that `@Timed` doesn't measure total execution time (as stated in the reference documentation).   ---  **Affects:** 3.0 M3, 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a45d1dec653cb01bc11c21127a976bcc9b1f8f90, https://github.com/spring-projects/spring-framework/commit/984504735ef90342291380f7adeae76038c4fcbf","closed","type: bug,","spring-projects-issues","2009-08-16T22:20:57Z","2012-06-19T03:43:03Z"
"","10149","ReloadableResourceBundleMessageSource performance issue when using many resource files [SPR-5476]","**[Nikos Beis](https://jira.spring.io/secure/ViewProfile.jspa?name=nibe01)** opened **[SPR-5476](https://jira.spring.io/browse/SPR-5476?redirect=false)** and commented  When using many property files and a cacheSeconds value of bigger than 0 the lookup time increases rapidly. I saw a 15% performance boost in my application when putting all my properties in the same file. The problem is the nested for loops in resolveCode and resolveCodeWithoutArguments.  ---  **Issue Links:** - #15133 ReloadableResourceBundleMessageSource locks properties hashmap and fails under load. (_**""duplicates""**_) - #14948 Allow adding resources to ReloadableResourceBundleMessageSource  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-12T02:12:45Z","2019-01-13T21:50:42Z"
"","10357","SPR-5668 introduced occasional ConcurrentModificationException in callees of AspectJExpressionPointcut.getShadowMatch() [SPR-5687]","**[Nikita Tovstoles](https://jira.spring.io/secure/ViewProfile.jspa?name=dukehoops)** opened **[SPR-5687](https://jira.spring.io/browse/SPR-5687?redirect=false)** and commented  I ported the fix for #10339 to spring-aop 2.5.6 and now I periodically see the following under concurrent load:  ``` java.util.ConcurrentModificationException 	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793) 	at java.util.HashMap$KeyIterator.next(HashMap.java:828) 	at org.aspectj.apache.bcel.util.NonCachingClassLoaderRepository$SoftHashMap.clear(NonCachingClassLoaderRepository.java:143) 	at org.aspectj.apache.bcel.util.NonCachingClassLoaderRepository.clear(NonCachingClassLoaderRepository.java:243) 	at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:240) 	at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations(ReflectionBasedResolvedMemberImpl.java:213) 	at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation(ReflectionBasedResolvedMemberImpl.java:169) 	at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:108) 	at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:94) 	at org.aspectj.weaver.patterns.AnnotationPointcut.matchInternal(AnnotationPointcut.java:157) 	at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146) 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.getShadowMatch(PointcutExpressionImpl.java:235) 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:101) 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:92) 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:354) 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:247) 	at org.springframework.aop.support.MethodMatchers.matches(MethodMatchers.java:93) 	at org.springframework.aop.framework.DefaultAdvisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(DefaultAdvisorChainFactory.java:63) 	at org.springframework.aop.framework.AdvisedSupport.getInterceptorsAndDynamicInterceptionAdvice(AdvisedSupport.java:481) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:190) 	at $Proxy95.getCustomSpacesInfoByOwner(Unknown Source) ```  it appears that PointcutExpressionImpl.matchesMethodExecution() isn't thread-safe and should be called from a synchronized block  ---  **Affects:** 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b9b513820b62e0bee9c3048bd4fd03e4c885745","closed","type: bug,","spring-projects-issues","2009-04-19T02:20:07Z","2019-01-11T16:39:05Z"
"","10339","avoid synchronization when AspectJExpressionPointcut.getShadowMatch hits cache [SPR-5668]","**[Nikita Tovstoles](https://jira.spring.io/secure/ViewProfile.jspa?name=dukehoops)** opened **[SPR-5668](https://jira.spring.io/browse/SPR-5668?redirect=false)** and commented  After we've added app-level cache to our app AspectJExpressionPointcut.getShadowMatch became a bottleneck on concurrent reads. In certain load tests, our system spends 6x more time blocked in getShadowMatch than in overall Runnable time. Happy to provide a JProfiler snapshot illustrating the problem (if needed).  Given that once an entry some targetMethod key is added to shadowMapCache it is never updated or evicted, there should be a way to avoid synchronization either altogether or when shadowMapCache returns a value on get. Please see the forum post for further details.  ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=235994  **Attachments:** - [ETS-9983-readsOnly.jps](https://jira.spring.io/secure/attachment/15311/ETS-9983-readsOnly.jps) (_2.73 MB_)  **Issue Links:** - #18814 Deadlock possible with AspectJ aspects and multi-threading  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/56a48272e61ecc506741fe8bbbcafeb0d199dda9","closed","type: enhancement,","spring-projects-issues","2009-04-12T03:41:30Z","2019-01-11T16:33:27Z"
"","10505","CookieGenerator default max age value leads to expiration date back in 1977 [SPR-5835]","**[Nicolas Romanetti](https://jira.spring.io/secure/ViewProfile.jspa?name=nicolas)** opened **[SPR-5835](https://jira.spring.io/browse/SPR-5835?redirect=false)** and commented  The default max age value is set as follow:  public static final int DEFAULT_COOKIE_MAX_AGE = Integer.MAX_VALUE;  This default value leads to cookie expiring in year 1977 ...  I think default value should be null (use Integer instead of int) and the max age should be set on the cookie only if it is != null  ---  **Affects:** 2.5.6  **Issue Links:** - #10943 CookieGenerator.DEFAULT_COOKIE_MAX_AGE is no longer available. Not backwards compatible  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13c3c577eb930898de85937cee56b16397229f36","closed","type: bug,","spring-projects-issues","2009-06-17T20:40:15Z","2019-01-11T17:14:04Z"
"","10514","AOP proxies with empty interfaces [SPR-5845]","**[Nicolas LE BAS](https://jira.spring.io/secure/ViewProfile.jspa?name=nlebas)** opened **[SPR-5845](https://jira.spring.io/browse/SPR-5845?redirect=false)** and commented  When a proxy is required for AOP, unless proxy-target-class=""true"", Spring looks for the interfaces of the target class and uses JDK proxy if any interface is found, CGLIB otherwise. When the only interface is empty, the proxy is unusable.  For instance: declaring an aop:pointcut on this class breaks the expected behaviour by hiding the getter :  `@Scope`(""session"") `@Component`(""example"") public class Example implements Serializable { private static final long serialVersionUID = 1L; public String getValue() { return ""example value""; } }  I suggest one of two actions: - ignore empty interfaces like Serializable (which should indeed be annotations, but...), - when CGLIB is available, use it by default (i.e. proxy-target-class=""true"")    ---  **Affects:** 2.5.6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-20T20:29:45Z","2012-06-19T09:36:26Z"
"","10327","Support placeholders in @Resource annotation configurations [SPR-5656]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-5656](https://jira.spring.io/browse/SPR-5656?redirect=false)** and commented  Using `@Resource` is a nice option to get dependency injection. You just can't get support for propertyPlaceholder. For example, getting some configuration URL I'd like to write :  `@Resource`( name=""${my.server.URL}"" ) private URL serverUrl;    ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/859497b171aefb3cf6c8688f96214905aff7f053","closed","type: enhancement,","spring-projects-issues","2009-04-07T02:06:08Z","2012-06-19T03:47:50Z"
"","9900","support custom MessageListenerAdapter class in  [SPR-5226]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-5226](https://jira.spring.io/browse/SPR-5226?redirect=false)** and commented  Using  with a Pojo MDB, the response message is sent on the JmsReplyTo queue. The MessageListenerAdapter class has a dedicated hook ""postProcessProducer"" to customize the message producer. In my case I have to set the message persistence and expire properties to override the destination queue default configuration.  The  (or  ?) could either - allow to set a custom Adapter class to use - accept child bean implementing a dedicated `MessageProducerPostProcessor` interface and allow to register it (using some new  tag ?)    ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-10-21T17:56:06Z","2015-09-22T17:34:34Z"
"","10711","AnnotationSessionFactoryBean packagesToScan in a OSGi environment [SPR-6042]","**[Nicolas Cornaglia](https://jira.spring.io/secure/ViewProfile.jspa?name=ncornag)** opened **[SPR-6042](https://jira.spring.io/browse/SPR-6042?redirect=false)** and commented  The code  ``` String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +     ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN; ```  in the _AnnotationSessionFactoryBean.scanPackages()_ method resolves the pattern to scan to **classpath**:com/mycompany**/**.class** for a packagesToScan=""com/mycompany"", but it fails to get the resources. I think a slash is missing to obtain **classpath**:com/mycompany/**/**.class**, like the one in _ClassPathScanningCandidateComponentProvider.findCandidateComponents()_:  ``` String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +     resolveBasePackage(basePackage) + ""/"" + this.resourcePattern; ```  or at least a setResourcePattern() like ClassPathScanningCandidateComponentProvider.  ---  **Affects:** 2.5.6  **Issue Links:** - #9997 AnnotationSessionFactoryBean.scanPackages() creates scanning pattern incorrectly (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2009-08-25T21:25:50Z","2019-01-12T16:50:15Z"
"","10002","New annotation syntax for sheduling [SPR-5329]","**[Nickolay Mazurkin](https://jira.spring.io/secure/ViewProfile.jspa?name=nickmz)** opened **[SPR-5329](https://jira.spring.io/browse/SPR-5329?redirect=false)** and commented  I like the new way the Spring Framework 2.5 configures beans with context configuration files.  I am busied with a project with scheduling this week and I have an idea how to make scheduling simpler for new Spring users. The idea is to make a special annotation with name ""`@Scheduled`"" there one could point the cron time definition, concurrence control and  other schedule settings. It could look like this - for example I have a service bean SchedulerService  public class SchedulerService implements Initializing Bean {  `@Scheduled`(""* * 1 * * ?"") public void doSomething1(ScheduleContext context) { }  `@Scheduled`(""* * */4 * * ?"") public void doSomething2() { }  }  And so on. The other thing we should implement - it a special unified facade interface to schedule engines such as Quartz and others.   --- No further details from [SPR-5329](https://jira.spring.io/browse/SPR-5329?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-11-28T16:46:46Z","2012-06-19T03:46:50Z"
"","10621","Allow SimpleMappingExceptionResolver to Resolve HTTP Status Codes [SPR-5953]","**[Nick Padgett](https://jira.spring.io/secure/ViewProfile.jspa?name=npadgett)** opened **[SPR-5953](https://jira.spring.io/browse/SPR-5953?redirect=false)** and commented  It would be nice if SimpleMappingExceptionResolver had the ability to resolve HTTP status codes as well.  Currently, I have the following class:  ``` public class StatusCodeMappingExceptionResolver extends         SimpleMappingExceptionResolver {     private Map statusCodeMappings;      @Override     protected Integer determineStatusCode(final HttpServletRequest request,             final String viewName) {         Integer statusCode = null;         // Check for specific status code mappings.         if (null != this.statusCodeMappings) {             statusCode = this.statusCodeMappings.get(viewName);         }         // Return default status code else, if defined.         if (null == statusCode) {             statusCode = super.determineStatusCode(request, viewName);         }         return statusCode;     }      public void setStatusCodeMappings(Map statusCodeMappings) {         this.statusCodeMappings = statusCodeMappings;     } } ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12e43ff92dbaaf6606305c675ca0ab983d2e9b58  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-07-23T04:18:30Z","2012-06-19T03:44:11Z"
"","10331","ServletRequestDataBinder is not Extensible [SPR-5660]","**[Nick Padgett](https://jira.spring.io/secure/ViewProfile.jspa?name=npadgett)** opened **[SPR-5660](https://jira.spring.io/browse/SPR-5660?redirect=false)** and commented  I am currently ingesting JSON through the servlet request body.  In order to take advantage of Spring's data binding, I extend ServletRequestDataBinder and override bind(ServletRequest).  The problem with ServletRequestDataBinder is that I cannot call super.bind(ServletRequest) and still do something useful.  Instead, I am forced to duplicate the code from super.bind(ServletRequest).  See JacksonJsonServletRequestDataBinder.java.  Please add a method similar to extensibleBind(ServletRequest) to ServletRequestDataBinder.  Or, allow me to register a custom class that can resolve MutablePropertyValues.  This second approach would alleviate the need for me to additionally extend AnnotationMethodHandlerAdapter to register a custom ServletRequestDataBinder.  See JacksonJsonAnnotationMethodHandlerAdapter.java. \\ \\  ``` public class JacksonJsonServletRequestDataBinder extends         ServletRequestDataBinder {  	public JacksonJsonServletRequestDataBinder(Object target, String objectName) { 		super(target, objectName); 	}  	@Override 	public void bind(ServletRequest request) { 		MutablePropertyValues mpvs = new ServletRequestParameterPropertyValues(request); 		if (request instanceof MultipartHttpServletRequest) { 			MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request; 			bindMultipartFiles(multipartRequest.getFileMap(), mpvs); 		} 		extensibleBind(request); 		doBind(mpvs); 	}  	protected void extensibleBind(ServletRequest request) { 		// parseJsonObject(request, mpvs); 	} } ```  ``` @Component public class JacksonJsonAnnotationMethodHandlerAdapter extends         AnnotationMethodHandlerAdapter {     @Override     protected ServletRequestDataBinder createBinder(HttpServletRequest request,             Object target, String objectName) {         return new JacksonJsonServletRequestDataBinder(target, objectName);     } } ```    --- No further details from [SPR-5660](https://jira.spring.io/browse/SPR-5660?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-04-08T06:31:55Z","2012-06-19T03:46:47Z"
"","10023","Very misleading error message when wrong type of Object assigned to a generic list [SPR-5350]","**[Nick Lothian](https://jira.spring.io/secure/ViewProfile.jspa?name=nlothian)** opened **[SPR-5350](https://jira.spring.io/browse/SPR-5350?redirect=false)** and commented  public abstract class AbstractUpdateMiniFeedService { ... private List\ feedEntryListeners = new ArrayList\();      public void setFeedEntryListeners(List feedEntryListeners) {     	this.feedEntryListeners = feedEntryListeners;     }  ... }  \ ... 		\ 			\ 				\	\ 			\			 		\ ... \  Gives:  org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.util.ArrayList] to required type [java.util.List] for property 'feedEntryListeners'; nested exception is java.lang.IllegalArgumentException: No matching editors or conversion strategy found Caused by: java.lang.IllegalArgumentException: No matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:212)  The error message given (Failed to convert property value of type [java.util.ArrayList] to required type [java.util.List] ) had me looking for AOP stuff and proxied lists and (very!) weird classloader behavior instead of a simple mistyping.  Yes, it was a stupid error on my part but I do expect Spring to provide much better error messages.   ---  **Affects:** 2.0.9","closed","type: bug,","spring-projects-issues","2008-12-10T14:57:57Z","2012-06-19T03:46:43Z"
"","10525","Using RuntimeBeanNameReferences to programmatically add a factory-produced bean to an application context fails [SPR-5856]","**[Nicholas White](https://jira.spring.io/secure/ViewProfile.jspa?name=n.j.white)** opened **[SPR-5856](https://jira.spring.io/browse/SPR-5856?redirect=false)** and commented  I'm trying to add a bean definition to an application context programmatically. The bean definition should be created by calling a factory method. My code is:  // my class (used in the code below) Prototype, ResultSetSource and Pair are classes defined elsewhere (and are irrelevant for this bug report) public static class MakeContributionSet { public static Set make(List contributions, Prototype prototype) { Set ret = Sets.newHashSet(); for(List contribution : contributions) { ret.add(Pair.pair(new ResultSetSource(contribution), prototype)); } return ret; } }         // programmatically creating the application context. This code uses the factory method of the static class above         AbstractApplicationContext ret = new ClassPathXmlApplicationContext(new String[] { ""my spring configs go here..."" }) {             @Override             protected ConfigurableListableBeanFactory obtainFreshBeanFactory() {                 ConfigurableListableBeanFactory beanFactory = super.obtainFreshBeanFactory();                      // add the raw contributions                 beanFactory.registerSingleton(RAW_CONTRIBUTIONS_BEAN_NAME, contributions);                      // make the 'contributors' Set bean                 RootBeanDefinition bean = new RootBeanDefinition(MakeContributionSet.class);                 bean.setFactoryMethodName(""make"");                      // make the arguments                 ConstructorArgumentValues args = new ConstructorArgumentValues();                 args.addIndexedArgumentValue(0, new RuntimeBeanNameReferenceMY_LIST_BEAN_NAME));                 args.addIndexedArgumentValue(1, new RuntimeBeanNameReference(MY_PROTOTYPE_BEAN_NAME));                 bean.setConstructorArgumentValues(args);                 ((DefaultListableBeanFactory) beanFactory).registerBeanDefinition(""contributors"", bean);                      return beanFactory;             }         };  The problem (I believe) comes from these lines in public Object org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(Object argName, Object value) . If a RuntimeBeanReference is given to this function, the code resolves the bean and returns the bean:      if (value instanceof RuntimeBeanReference) {          RuntimeBeanReference ref = (RuntimeBeanReference) value;          return resolveReference(argName, ref);     }  However, if (as in my case) a RuntimeBeanNameReference is given the **bean name as a string** is returned. This is useless, and causes an UnsatisfiedDependencyException a few tens of lines later in execution:      else if (value instanceof RuntimeBeanNameReference) {          String ref = ((RuntimeBeanNameReference) value).getBeanName();          if (!this.beanFactory.containsBean(ref)) {               throw new BeanDefinitionStoreException(                             ""Invalid bean name '"" + ref + ""' in bean reference for "" + argName);          }          return ref;     }  I believe a fix would look something like:      else if (value instanceof RuntimeBeanNameReference) {          String ref = ((RuntimeBeanNameReference) value).getBeanName();          if (!this.beanFactory.containsBean(ref)) {               throw new BeanDefinitionStoreException(                             ""Invalid bean name '"" + ref + ""' in bean reference for "" + argName);          }          return resolveReference(argName, new RuntimeBeanReference(ref));     }    ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-06-22T19:46:18Z","2019-01-12T16:27:02Z"
"","10738","Differing types for getter/setter of CookieGenerator.cookieMaxAge causes configuring to fail. [SPR-6070]","**[Nicholas Daley (at Firecrest)](https://jira.spring.io/secure/ViewProfile.jspa?name=nicholas.daley)** opened **[SPR-6070](https://jira.spring.io/browse/SPR-6070?redirect=false)** and commented  CookieGenerator.cookieMaxAge's setter uses the primitive type 'int', but the getter uses 'Integer'.  This seems to stop this property from being configured through the spring configuration xml file. If it's important, I'm actually using a subclass of CookieGenerator.  Somebody in the forums had a similar problem: http://forum.springsource.org/showthread.php?p=254675  Partial stacktrace:  ``` Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'cookieMaxAge' of bean class [org.jasig.cas.web.support.CookieRetrievingCookieGenerator]: Bean property 'cookieMaxAge' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:850) 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:701) 	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:78) 	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:60) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1330) 	... 55 more ```  ---  **Affects:** 3.0 M4  **Issue Links:** - #10750 cookieMaxAge field fails in org.springframework.web.servlet.i18n.CookieLocaleResolver (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0c8545d9bf4b97c47d257b445cfe0a2ed09db88","closed","type: bug,","spring-projects-issues","2009-09-02T21:04:28Z","2019-01-11T13:38:14Z"
"","10624","Commons Logging should not be ""compile"" scope in Maven POMs  [SPR-5956]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-5956](https://jira.spring.io/browse/SPR-5956?redirect=false)** and commented  Spring 2.5 and 3.0Mx import Apache Commons-Logging as follows:             org.apache.commons       com.springsource.org.apache.commons.logging       1.1.1       compile       And not just in one place.  This is bloomin' awkward, as anyone wanting to use SLF4J to replace Commons-Logging has to write a dependency exclusion for every component using it.  Far simpler would be to just compile against Commons Logging, and then allow the runtime to provide those APIs by changing the entries to:             org.apache.commons       com.springsource.org.apache.commons.logging       1.1.1       provided       Naturally, it would be cleaner to switch to SLF4J anyway, but at least making space for us to use the SLF4J implementations of Log4J, JCL and ACL would be good enough.   ---  **Affects:** 2.0.9, 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c6cd1a528e8acc657c4419c1a4b68e632703b802  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2009-07-27T00:13:20Z","2012-06-19T03:42:49Z"
"","10089","springmodules project is dead [SPR-5415]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-5415](https://jira.spring.io/browse/SPR-5415?redirect=false)** and commented  SM 0.9 has been released, but no one can use it because springmodules.org hasn't got the .xsd files on it, and Colin Yates has a stack of MOD bugs against his name and nothing is happening.  Can someone please help the community out.... we're trying to help you, but it really doesn't work when a significant project goes dead, and that reflects badly on the whole Spring Source ecosystem!   ---  **Affects:** 2.5.6, 3.0 M1","closed","in: core,","spring-projects-issues","2009-01-17T01:55:58Z","2011-01-18T11:48:36Z"
"","9928","The parameter type of the setter should not need to match the return type of the getter [SPR-5254]","**[Nazin Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=nazin)** opened **[SPR-5254](https://jira.spring.io/browse/SPR-5254?redirect=false)** and commented  public abstract class A { private Object service;  public void setService(Object service) { this.service = service; }  public Object getService() { return service; }  }  public class B extends A{  `@Override` public MyService getService() { return (MyService) super.getService(); } }  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \exceptionIntercepter\ \ \ \ \ When load application error: Bean property 'service' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?  ---  **Affects:** 2.5.5  **Issue Links:** - #7415 Dealing with covariant properties in CachedIntrospectionResults (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-10-30T01:31:04Z","2019-01-11T15:25:16Z"
"","10122","org.springframework.beans.factory.BeanCreationException [SPR-5448]","**[Naveen Indurti](https://jira.spring.io/secure/ViewProfile.jspa?name=c0indna)** opened **[SPR-5448](https://jira.spring.io/browse/SPR-5448?redirect=false)** and commented  Hello We have recently upgraded from WebLogic 8.1 SP5 to SP6... When we deploy the code on the server we get the following error. The ear we deploy automatically gets undeployed from the server. Could you help  fix this. This is showstopper for us.  2009 Jan 30 16:52:12 [ExecuteThread: '1' for queue: 'weblogic.kernel.System'] ERROR org.springframework.web.context.ContextLoader  - Context initialization f ailed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'poConnectionFactory' defined in ServletContext resource [/WEB-INF/cla sses/com/vzw/mybiz/commerce/queue/applicationContext-queue.xml]: Invocation of init method failed; nested exception is javax.naming.NameNotFoundException: Wh ile trying to lookup 'vzw.po.poProcessingQCF' didn't find subcontext 'po' Resolved vzw [Root exception is javax.naming.NameNotFoundException: While trying to lookup 'vzw.po.poProcessingQCF' didn't find subcontext 'po' Resolved vzw]; remaining name 'po/poProcessingQCF' at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1337) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:423) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at weblogic.servlet.internal.WebAppServletContext$FireContextListenerAction.run(WebAppServletContext.java:7117) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.WebAppServletContext.notifyCreated(WebAppServletContext.java:1757) at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:3378) at weblogic.servlet.internal.WebAppServletContext.setStarted(WebAppServletContext.java:6269) at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:892) at weblogic.j2ee.J2EEApplicationContainer.start(J2EEApplicationContainer.java:2181) at weblogic.j2ee.J2EEApplicationContainer.activate(J2EEApplicationContainer.java:2222) at weblogic.management.deploy.slave.SlaveDeployer$ComponentActivateTask.activateContainer(SlaveDeployer.java:2521) at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.doCommit(SlaveDeployer.java:2439) at weblogic.management.deploy.slave.SlaveDeployer$Task.commit(SlaveDeployer.java:2156) at weblogic.management.deploy.slave.SlaveDeployer.commitUpdate(SlaveDeployer.java:682) at weblogic.drs.internal.SlaveCallbackHandler$2.execute(SlaveCallbackHandler.java:35) at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:224) at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:183) Caused by: javax.naming.NameNotFoundException: While trying to lookup 'vzw.po.poProcessingQCF' didn't find subcontext 'po' Resolved vzw [Root exception is ja vax.naming.NameNotFoundException: While trying to lookup 'vzw.po.poProcessingQCF' didn't find subcontext 'po' Resolved vzw]; remaining name 'po/poProcessingQ CF' at weblogic.rjvm.BasicOutboundRequest.sendReceive(BasicOutboundRequest.java:108) at weblogic.rmi.cluster.ReplicaAwareRemoteRef.invoke(ReplicaAwareRemoteRef.java:290) at weblogic.rmi.cluster.ReplicaAwareRemoteRef.invoke(ReplicaAwareRemoteRef.java:248) at weblogic.jndi.internal.ServerNamingNode_816_WLStub.lookup(Unknown Source) at weblogic.jndi.internal.WLContextImpl.lookup(WLContextImpl.java:375) at weblogic.jndi.internal.WLContextImpl.lookup(WLContextImpl.java:363) at javax.naming.InitialContext.lookup(InitialContext.java:347) at org.springframework.jndi.JndiTemplate$1.doInContext(JndiTemplate.java:155) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:88) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:153) at org.springframework.jndi.JndiObjectFactoryBean.lookupWithFallback(JndiObjectFactoryBean.java:200) at org.springframework.jndi.JndiObjectFactoryBean.afterPropertiesSet(JndiObjectFactoryBean.java:186) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1368) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1334) ... 31 more Caused by: javax.naming.NameNotFoundException: While trying to lookup 'vzw.po.poProcessingQCF' didn't find subcontext 'po' Resolved vzw at weblogic.jndi.internal.BasicNamingNode.newNameNotFoundException(BasicNamingNode.java:924) at weblogic.jndi.internal.BasicNamingNode.lookupHere(BasicNamingNode.java:225) at weblogic.jndi.internal.ServerNamingNode.lookupHere(ServerNamingNode.java:154) at weblogic.jndi.internal.BasicNamingNode.lookup(BasicNamingNode.java:188) at weblogic.jndi.internal.BasicNamingNode.lookup(BasicNamingNode.java:196) at weblogic.jndi.internal.RootNamingNode_WLSkel.invoke(Unknown Source) at weblogic.rmi.internal.BasicServerRef.invoke(BasicServerRef.java:491) at weblogic.rmi.cluster.ReplicaAwareServerRef.invoke(ReplicaAwareServerRef.java:120) at weblogic.rmi.internal.BasicServerRef$1.run(BasicServerRef.java:434) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:363) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:147) at weblogic.rmi.internal.BasicServerRef.handleRequest(BasicServerRef.java:429) at weblogic.rmi.internal.BasicExecuteRequest.execute(BasicExecuteRequest.java:35) ... 2 more  \ \ \   \ \ \  [weblogic@lobster:/log/weblogic/mbscmDOM]    --- No further details from [SPR-5448](https://jira.spring.io/browse/SPR-5448?redirect=false)","closed","status: invalid,","spring-projects-issues","2009-01-30T11:31:33Z","2019-01-12T05:33:46Z"
"","10097","Spring TX unsupport lazy transaction enlistment of JBoss JCA [SPR-5423]","**[Nattapong T](https://jira.spring.io/secure/ViewProfile.jspa?name=tilek)** opened **[SPR-5423](https://jira.spring.io/browse/SPR-5423?redirect=false)** and commented  I use spring aop to manage a JTA transaction on JBoss application server but I got an ""IllegalStateException: Trying to change transaction [...] in enlist"" exception when I try to create an inner transactional.  The scenario is : 1. Begin outer transaction by spring aop(REQUIRE_NEW). 2. Get connection, the connection is enlisted to outer transaction. 3. Begin inner transaction by spring aop(REQUIRE_NEW). It throw an exception ""Trying to change transaction [...] in enlist"".  I found that exception is throw from CCM(CachedConnectionManager) JBoss component because with the lazy enlistment feature, it try to enlist the same connection to the inner transaction again.  It seem that springTX should do more work on JBoss only to notify CCM about the inner transactional.   ---  **Affects:** 2.5.1","closed","status: declined,","spring-projects-issues","2009-01-20T21:05:12Z","2019-01-12T16:27:28Z"
"","10874","When looking up methods with @RequestMapping annotation, unannotated bridge methods are included [SPR-6206]","**[Nathan Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=nwsmith@gmail.com)** opened **[SPR-6206](https://jira.spring.io/browse/SPR-6206?redirect=false)** and commented  When implementing an generic interface method in a controller, spring mistakenly thinks that the compiler-created bridge method is an annotated request method, causing the following error (from attached test case:)  java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP path '/method': {public org.springframework.web.servlet.ModelAndViewAnnotationMethodHandlerAdapterTest$TestControllerImpl.method(AnnotationMethodHandlerAdapterTest$TestEntity), public org.springframework.web.servlet.ModelAndView AnnotationMethodHandlerAdapterTest$TestControllerImpl.method(java.lang.Object)}. If you intend to handle the same path in multiple methods, then factor them out into a dedicated handler class with that path mapped at the type level!  The issue is that with something like the following:  ``` public interface TestController {     public ModelAndView method(T object); }  @Controller public interface TestControllerImpl {     @RequestMapping(""/method"")     public ModelAndView method(MyEntity object) {         return new ModelAndView();     } } ```  the compiler built bridge method is detected as being annotated, causing the ambiguity.  The bug appears to have been committed here:  https://fisheye.springsource.org/rdiff/spring-framework/trunk/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodResolver.java?r1=1665&r2=1737&u&N  When isHandlerMethod was changed to use findAnnotation (which will look through bridge methods and return true if the bridged method is annotated) from isAnnotationPresent on the method itself (which will show the bridged method as not annotated)  I've attached a patch to restore the previous behaviour, as unannotated methods should never show us as matches.  ---  **Affects:** 3.0 RC1  **Attachments:** - [AnnotationMethodHandlerError.zip](https://jira.spring.io/secure/attachment/15776/AnnotationMethodHandlerError.zip) (_2.64 MB_) - [SPR6206.patch](https://jira.spring.io/secure/attachment/15777/SPR6206.patch) (_761 bytes_)  **Issue Links:** - #11168 Broken `@RequestMapping` inheritance  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/17d5b31af3d81d664d556ba90c1d1753d5821b10","closed","type: bug,","spring-projects-issues","2009-10-07T08:31:28Z","2019-01-13T07:58:01Z"
"","10579","Slight Improvement for Main JavaDoc in RedirectView [SPR-5910]","**[Nathan Hook](https://jira.spring.io/secure/ViewProfile.jspa?name=hooknc)** opened **[SPR-5910](https://jira.spring.io/browse/SPR-5910?redirect=false)** and commented  http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/web/servlet/view/RedirectView.html  Currently (as of Spring Framework API 2.5) a reader of the RedirectView JavaDoc is lead to believe that ""... by default exposing all model attributes as HTTP query parameters.""  I read that to mean that all values in the passed model regardless of its object type are added as query parameters.  HOWEVER, is is not the case.  A user of the RedirectView has to also read the JavaDoc for the protected method, isEligibleProperty(String key, Object value), which states:  ""... The default implementation considers Strings and primitives as eligible, and also arrays and Collections/Iterables with corresponding elements. ...""  to figure out that no, not all attributes are added, only Strings and primitives are added as query parameters.  It might be inappropriate to force a reader to read a protected method's JavaDoc to figure out important behavior of a class.  It would be nice if the main JavaDoc of the class clearly states that NOT ALL model attributes are added as query parameters, but only model attributes that are: Strings, primitive, and primitive wrappers.  Thank you for your time.   ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/501a1ea9afcd739b0145f47b137b5199c9cd4c61","closed","type: enhancement,","spring-projects-issues","2009-07-08T06:05:17Z","2012-06-19T03:43:38Z"
"","10419","AspectJ pointcut advisors are not working with Groovy script beans [SPR-5749]","**[Naresh Narayana](https://jira.spring.io/secure/ViewProfile.jspa?name=nvnaresh)** opened **[SPR-5749](https://jira.spring.io/browse/SPR-5749?redirect=false)*** and commented  It seems that AOP is not working for Groovy beans.  ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=71389  **Attachments:** - [testProject.zip](https://jira.spring.io/secure/attachment/15381/testProject.zip) (_10.75 kB_)  **Issue Links:** - #10935 Annotated Groovy controllers don't work properly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bd0f68d095ba881621b8499925334de38a6b1051  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2009-05-12T04:21:22Z","2019-01-11T17:30:59Z"
"","10340","mergePropertiesIntoMap only works with String [SPR-5669]","**[Nanda Firdausi Muhammad](https://jira.spring.io/secure/ViewProfile.jspa?name=enefem)** opened **[SPR-5669](https://jira.spring.io/browse/SPR-5669?redirect=false)** and commented  mergePropertiesIntoMap only works well with String. If the value of the properties is non-String, the returned value is always null.  The problem is that this method is also used for a non-String value, for example in org.springframework.web.servlet.handler.SimpleUrlHandlerMapping.setMappings(Properties)  Check with this test:         public void testMergePropertiesIntoMap2() {     	Object obj1 = new Object();     	Object obj2 = new Object();     	Object obj3 = new Object();     	Properties defaults = new Properties();     	defaults.put(""prop1"", obj1);     	Properties props = new Properties(defaults);     	props.put(""prop2"", obj2);          	Map map = new HashMap();     	map.put(""prop3"", obj3);          	CollectionUtils.mergePropertiesIntoMap(props, map);     	assertEquals(obj1, map.get(""prop1""));     	assertEquals(obj2, map.get(""prop2""));     	assertEquals(obj3, map.get(""prop3""));     }  ---  **Affects:** 3.0 M2  **Issue Links:** - #19303 YAML + PropertyPlaceholderConfigurer needs to process non-String values as well  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8ee03637767e41c15af1772c4eed733940359327","closed","type: enhancement,","spring-projects-issues","2009-04-12T19:14:21Z","2019-01-11T16:32:57Z"
"","9976","global-lazy-init instaed of file-level-lazy-init [SPR-5303]","**[myself chris](https://jira.spring.io/secure/ViewProfile.jspa?name=cfrank)** opened **[SPR-5303](https://jira.spring.io/browse/SPR-5303?redirect=false)** and commented  Currently there is no opportunity to set a global setting for lazy initialization of Spring beans. Currently, this setting exists on 2 different levels - bean level () - file level ()   I think that the file level setting makes no sense in most projects, because you multiple spring context files are used. Instead of that (or additionally), you need a possibility to switch on a central place, something like:  ctx = new ClasspathXmlApplicationContext(myContextFileArray, ""true"".equals(System.getProperty(LAZY_LOADING));   ---  **Affects:** 2.5.5  2 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2008-11-17T01:24:29Z","2012-06-19T09:36:28Z"
"","10860","Jasper Reports [SPR-6192]","**[Muhammad Asad Ullah Bhatti](https://jira.spring.io/secure/ViewProfile.jspa?name=asadullahpk)** opened **[SPR-6192](https://jira.spring.io/browse/SPR-6192?redirect=false)** and commented  Hi!  Is their any built-in facility available in Spring for JasperReports, using which, Export, Navigation, Filter etc controls/functionality can be added to the report view without any extra coding?  Thanks & Best Regards.   --- No further details from [SPR-6192](https://jira.spring.io/browse/SPR-6192?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-10-05T20:56:28Z","2012-06-19T09:36:25Z"
"","10547","SpringBeanAutowiringInterceptor.autowireBean() has wrong signature - needs fix in 2.5 [SPR-5878]","**[Morten Knudsen](https://jira.spring.io/secure/ViewProfile.jspa?name=mortenk)** opened **[SPR-5878](https://jira.spring.io/browse/SPR-5878?redirect=false)** and commented  This is a serious issue for websphere users, and needs to be fixed in the 2.5 branch  ---  **Affects:** 2.5.6  This issue is a sub-task of #10085  1 votes, 0 watchers","closed","status: declined,","spring-projects-issues","2009-06-28T20:48:21Z","2019-01-11T17:14:51Z"
"","10120","Change exception message in exception thrown when placeholder is unresolvable from PropertyPlaceholderConfigurer to include beanName [SPR-5446]","**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[SPR-5446](https://jira.spring.io/browse/SPR-5446?redirect=false)** and commented  I have been in many projects where multiple PropertyPlaceholderConfigurers have been used (I know, I know, asking for trouble...). When ignoreUnresolvable=false (default), the PPC will fail. However, it is not easy to figure out which PPC is actually failing. This would be easier if the exception thrown from PropertyPlaceholderConfigurer.PlaceholderResolvingStringValueResolver.resolveStringValue() would include the beanName set by the BeanNameAware interface.  I know that one should not really be in the situation where you have too many PPCs, but the fact is that I often stumble across code where PPCs are scattered around. The solution is often use the debugger  to see the beanName.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2009-01-30T00:48:25Z","2012-06-19T09:36:33Z"
"","10666","Memory Leak in Oracle LOB Reading?? [SPR-5998]","**[Mohan](https://jira.spring.io/secure/ViewProfile.jspa?name=kumarmmohan)** opened **[SPR-5998](https://jira.spring.io/browse/SPR-5998?redirect=false)** and commented  As per the advise, we have carried out few testings.  Finally found that BLOB reading causes the problem (not the writing as mentioned here, that was a wrong assumption).  Oracle uses the so called 'outBuffer of oracle.jdbc.driver.T4C8TTIBlob' when we read blob data from the db, that is not cleared ever after closing the connection object. The connection is cached by the Connection pool provider(Unable to reproduce the bug with Spring Driver manager data source, because that doesn't cache the connection object.), so the outbuffer also stays with it. I got the same results with all the connection pool providers like DBCP,C3P0 and WebSphere.  When is it populated??  ---  There is a call 'blob.getBytes(1, (int) blob.length())' in 'OracleLobHandler.getBlobAsBytes', which uses the outbuffer.  How to clear the buffer??  ---  Wrapping the getBytes call with open and close methods (like blob writing) make sure the buffer is cleared once the job is done.  oracle.sql.BLOB oraBlob = (oracle.sql.BLOB)blob; oraBlob.open(BLOB.MODE_READONLY); data = oraBlob.getBytes(1, (int)b.length()); oraBlob.close();  I am not sure about this solution. I posted the same in Oracle forum and waiting for a reply.  More info available here, http://forums.oracle.com/forums/thread.jspa?messageID=3672154#3672154  As a temporary work around, i have overridden the 'OracleLobHandler.getBlobAsBytes' in our custom oracle lob handler class and applied these changes in to it.  Is our understanding correct?? If correct then Should Spring OracleLobHandler be modified??  ---  **Affects:** 2.5 final  **Reference URL:** http://forum.springsource.org/showthread.php?p=242802  **Issue Links:** - #10877 OracleLobHandler: Temporary LOBs don't get freed and eat TEMP tablespace  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5a158fb76f8d0cbf79b358de5a82bf3b60248a42","closed","type: task,","spring-projects-issues","2009-08-11T07:38:31Z","2019-01-13T21:49:25Z"
"","10328","Build fails with class not found org.springframework.aws.ivy.S3Resolver [SPR-5657]","**[Mirko Zeibig](https://jira.spring.io/secure/ViewProfile.jspa?name=mzeibig)** opened **[SPR-5657](https://jira.spring.io/browse/SPR-5657?redirect=false)** and commented  If the ant/lib directory already contains an 'ivy-2.0.0.jar' the build fails with this error:  BUILD FAILED X:\spring-framework-3.0.0.M2\projects\spring-build\multi-bundle\artifact.xml:45: The following error occurred while executing this line: X:\spring-framework-3.0.0.M2\projects\spring-build\multi-bundle\common.xml:71: The following error occurred while executing this line: X:\spring-framework-3.0.0.M2\projects\spring-build\common\common.xml:81: impossible to configure ivy:settings with given file: X:\spring-framework-3.0.0.M2\projects\spring-build\common\ivysettings.xml : java.text.ParseException: failed to load settings from file:/X:/spring-framework-3.0.0.M2/projects/spring-build/common/ivysettings.xml: impossible to define new type: class not found: org.springframework.aws.ivy.S3Resolver in [] nor Ivy classloader  The workaround is to use a clean ant installation.   ---  **Affects:** 3.0 M2","closed","status: declined,","spring-projects-issues","2009-04-07T18:53:24Z","2019-01-12T16:27:13Z"
"","10835","WebSphereUowTransactionManager doesn't suspend synchronizations correctly [SPR-6167]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6167](https://jira.spring.io/browse/SPR-6167?redirect=false)** and commented  We are using WebSphereUowTransactionManager with Hibernate JPA with Transaction scoped EntityManagers.  When I have a transaction with REQURIES_NEW.  My transaction synchronizations aren't getting suspended for the new nested Transaction.  This causes my interactions with JPA while in the new transaction to throw TransactionRequiredExceptions because the EntityManager isn't joined with the new transaction.  If I'm using Atomikos as my JTA provider everything seems to work fine.  I can create a test case if needed.  But looking at the code the problem appears to be with this line 242:  SuspendedResourcesHolder suspendedResources = (existingTx && !joinTx ? suspend(null) : null);  If I change the code to:  SuspendedResourcesHolder suspendedResources = (newSynch && !joinTx ? suspend(null) : null);  Everything appears to work fine.  I'm hoping you can recognize this as a simple coding mistake.  Seems weird that ""newSynch"" wouldn't factor into determining if the synchronizations are suspended or not.  If you need a test case let me know and I'll see what I can come up with.  Mike   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90f8e5dcf85051604cb46ad148ebf502a360bcbe  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2009-09-30T14:35:50Z","2012-06-19T03:43:46Z"
"","10769","Make the context:component-scan schema definition more reusable [SPR-6101]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6101](https://jira.spring.io/browse/SPR-6101?redirect=false)** and commented  I'm attempting to create my own component-scan Parser.  In order to maintain the same element definition for context:component-scan I'm having to copy the entire context:component-scan element into my custom handler schema.  It would be nice of context:component-scan's schema definition were a bit more reusable by custom component-scan Parser implementations.  Even if the meat of component-scan were simply moved to a named complexType that I could reference then that would be sufficient for my needs.   ---  **Affects:** 3.0 M4","closed","in: core,","spring-projects-issues","2009-09-11T09:20:43Z","2018-12-26T17:34:07Z"
"","10766","Move FrameworkServlet to spring-web module. [SPR-6098]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6098](https://jira.spring.io/browse/SPR-6098?redirect=false)** and commented  I'm attempting to make a CXF function similar to DispatchServlet with it's own child context, etc similar to what spring-ws has done with MessageDispatcherServlet by extending FrameworkServlet.  However, I don't want to add a dependency on spring-mvc since we don't use spring-mvc for this project.  I think FrameworkServlet and supporting classes is a generally useful outside of spring-mvc as seen with spring-ws's use and others.  So, I would like to request that FrameworkServlet and its supporting classes should be moved to spring-web.  This may allow spring-ws to not depend upon spring-mvc as well as help my problem.    ---  **Affects:** 3.0 M4  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2009-09-10T09:38:08Z","2014-09-19T14:43:05Z"
"","10748","Create a Unified EL implementation with Spring EL [SPR-6080]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6080](https://jira.spring.io/browse/SPR-6080?redirect=false)** and commented  Spring EL is superior to unified EL in a number of ways.  It would be nice if a Unified EL implementation could be created with Spring EL so that Spring EL could be used directly in .jsps and JSF.  ---  **Affects:** 3.0 M4  **Issue Links:** - #11493 Allow SpEl expressions to be evaluated from JSPs (_**""is depended on by""**_) - #11411 SpEL does not expose field-level annotations when setting bean properties  40 votes, 37 watchers","closed","has: votes-jira,","spring-projects-issues","2009-09-04T08:45:14Z","2019-01-11T13:37:55Z"
"","10747","Provide support for javax.inject.Provider  style injection for @Value and @Autowired [SPR-6079]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6079](https://jira.spring.io/browse/SPR-6079?redirect=false)** and commented  Sometimes for `@EL` and `@Autowired` injection points the developer may not want the expression or the dependency evaluated at the time of injection but instead at a later point when the developer chooses to evaluate the injection.  This is extremely useful for a number of reasons.  Some of which are detailed in the javax.inject.Provider javadocs here.  http://atinject.googlecode.com/svn/trunk/javadoc/javax/inject/Provider.html  With the added desire that the injected Provider be Serializable.  It would be nice if specifically this portion of the javax.inject functionality could be included in Spring 3.0 since it is so valuable especially when coupled with `@Value`.  I would be happy to provide an initial patch if there were a chance for this to make it into Spring 3.0.  ---  **Affects:** 3.0 M4  **Issue Links:** - #16903 Provider declaration for `@Value` method argument fails with TypeMismatchException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/209f43bee7a848dcf4fe48113d8620822c591319","closed","type: enhancement,","spring-projects-issues","2009-09-04T08:01:00Z","2019-01-13T07:58:36Z"
"","10715","Regression: Spring JDBC can cause Map based arguments to appear as Object...args arguments [SPR-6046]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6046](https://jira.spring.io/browse/SPR-6046?redirect=false)** and commented  I'm calling jdbcTemplate.query() with a Map of named parameters.  The following worked fine in Spring 2.5 but fails in Spring 3:  jdbcTemplate.query(query, rowMapper, Collections.singletonMap(""petIds"", new Long(1)));  to work in Spring 3 it has to be changed to the following:  jdbcTemplate.query(query, rowMapper, Collections.singletonMap(""petIds"", (Object)new Long(1)));  //note the explicit cast to ""Object"".  otherwise the Object...args overload of the method is called instead of the Map args override.  I'm not too good at generics so I don't know if it is possible to fix this or not perhaps the signature should be changed to:  public \ List\ query(String sql, RowMapper\ rm, Map args)  Mike   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/773bdcded5df628d2127991fb155e2850301d4cd","closed","type: bug,","spring-projects-issues","2009-08-26T10:41:46Z","2012-06-19T03:43:09Z"
"","10713","Make ResponseStatusExceptionResolver handling of @ResponseStatus.reason internationalizable  [SPR-6044]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-6044](https://jira.spring.io/browse/SPR-6044?redirect=false)** and commented  It would be nice if the ResponseStatus could be internationalized by using the ApplicationContext's MessageSource perhaps?  If no message is found then the raw reason can be used???   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9dc7b5feef01272af0dc563248a5e60e6ada9be3  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-26T04:48:36Z","2013-01-14T19:05:11Z"
"","10630","InitDestroyAnnotationBeanPostProcessor should have static logger because it's Serializable [SPR-5962]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-5962](https://jira.spring.io/browse/SPR-5962?redirect=false)** and commented  We are using Commons Logger over SLF4J.  Commons Logger over SLF4J doesn't appear to serialize its Log implementation correctly.  That has exposed the NPE bellow when our app runs in a clustered environment.  Although I will log an issue with SLF4J I also thought I would log an issue here as well as I believe a static Log reference would serve InitDestroyAnnotationBeanPostProcessor better than a member variable to help reduce serialized size.  [7/28/09 0:14:32:226 MDT] 0000005a SystemErr R java.lang.NullPointerException [7/28/09 0:14:32:226 MDT] 0000005a SystemErr R at org.apache.commons.logging.impl.SLF4JLocationAwareLog.isDebugEnabled(SLF4JLocationAwareLog.java:59) [7/28/09 0:14:32:226 MDT] 0000005a SystemErr R at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.buildLifecycleMetadata(InitDestroyAnnotationBeanPostProcessor.java:201) [7/28/09 0:14:32:226 MDT] 0000005a SystemErr R at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.findLifecycleMetadata(InitDestroyAnnotationBeanPostProcessor.java:182) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:160) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:140) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:134) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at org.springframework.web.context.request.ServletRequestAttributes$DestructionCallbackBindingListener.valueUnbound(ServletRequestAttributes.java:269) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.webcontainer.httpsession.SessionData.processListeners(SessionData.java:924) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.webcontainer.httpsession.SessionData.checkSwappableListeners(SessionData.java:564) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.webcontainer.httpsession.DatabaseSessionData.checkSwappableListeners(DatabaseSessionData.java:331) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.webcontainer.httpsession.SessionData.sessionUnbound(SessionData.java:997) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.webcontainer.httpsession.SessionContext.notifySessionInvalidated(SessionContext.java:1100) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.webcontainer.httpsession.SessionData.invalidate(SessionData.java:621) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.webcontainer.httpsession.SessionData.internalInvalidate(SessionData.java:586) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.webcontainer.httpsession.DRSSessionData.internalInvalidate(DRSSessionData.java:252) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.webcontainer.httpsession.HttpSessDRSCacheMsgListener.response(HttpSessDRSCacheMsgListener.java:524) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.drs.stack.DRSClientCallback.processRcvMessage(DRSClientCallback.java:393) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.drs.stack.DRSStack.processRcvMessage(DRSStack.java:295) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.drs.DRSDomain.messageReceived(DRSDomain.java:536) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.drs.ha.DRSAgentClassEvents$1.run(DRSAgentClassEvents.java:714) [7/28/09 0:14:32:227 MDT] 0000005a SystemErr R at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1469)   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9508f41a91782afec3f88cdbd87aad3f4b8d6a13","closed","type: enhancement,","spring-projects-issues","2009-07-28T08:52:40Z","2012-06-19T03:43:28Z"
"","10105","Allow BeanDefinitionDecorator to not create an beans if it chooses [SPR-5431]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-5431](https://jira.spring.io/browse/SPR-5431?redirect=false)** and commented  It would be nice if a BeanDefinitionDecorator could choose not to create/register a bean.  This could be done perhaps by returning ""null"" from the decorate method.  Currently if you return null from ""decorate"" you get a NPE.  Caused by: java.lang.NullPointerException at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.registerBeanDefinition(BeanDefinitionReaderUtils.java:173) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.processBeanDefinition(DefaultBeanDefinitionDocumentReader.java:244) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:153) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:132) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398) ... 51 more   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-26T02:09:08Z","2012-06-19T09:36:11Z"
"","10032","Collection (List) backed form fields bound via  or   generate invalid HTML id attribute [SPR-5359]","**[Mike Rokitka](https://jira.spring.io/secure/ViewProfile.jspa?name=mrokitka)** opened **[SPR-5359](https://jira.spring.io/browse/SPR-5359?redirect=false)** and commented  HTML code generated via Spring's form tag library for checkboxes and radiobuttons is generating invalid HTML id attributes (square brackets to represent array).  This appears to work fine for the other form input types, but the HTML is incorrect for checkboxes and radiobuttons.  Sample code:  ---    \ \ \ \  ---  Generates the following HTML for the checkbox:  \\  Changing the form:checkbox tag to a form:hidden tag renders valid HTML:  \ This appears to be related to this issue: http://jira.springframework.org/browse/SPR-2380?  ---  **Affects:** 2.5.6","closed","in: web,","spring-projects-issues","2008-12-12T00:30:31Z","2019-01-13T21:50:59Z"
"","10381","Extract explicit ParentContext interface [SPR-5711]","**[Mike Rettig](https://jira.spring.io/secure/ViewProfile.jspa?name=mrettig)** opened **[SPR-5711](https://jira.spring.io/browse/SPR-5711?redirect=false)** and commented  Parents for contexts are of type ApplicationContext. This interface is circular and far too broad.  A context child uses a subset of the features found on the parent context.  The attached patch creates a ParentContext interface that breaks this dependency.  A slimmed down interface makes it easier to create more advanced context hierarchies.  For example:  * http://jira.springframework.org/browse/SPR-2355 - Could be solved with a composite parent implementation * http://jira.springframework.org/browse/SPR-369 - Could be solved with a visibility limiting decorator * Simple integration with other DI frameworks such as pico or guice by creating ParentContext adapters  Trying to implement these features with the ApplicationContext interface is far too complicated and unmaintainable.  The patch still needs some work, but I'm posting it here to get feedback.   ---  **Affects:** 3.0 M3  **Attachments:** - [spring.parentcontext.patch](https://jira.spring.io/secure/attachment/15362/spring.parentcontext.patch) (_9.59 kB_)","closed","type: enhancement,","spring-projects-issues","2009-05-03T04:54:55Z","2018-12-27T11:25:40Z"
"","10688","url handler ""bundle://"" fails in PathMatchingResourcePatternResolver when using Apache Felix 1.4.1 [SPR-6019]","**[Mike Meessen](https://jira.spring.io/secure/ViewProfile.jspa?name=mike.meessen)** opened **[SPR-6019](https://jira.spring.io/browse/SPR-6019?redirect=false)** and commented  The class org.springframework.core.io.support.PathMatchingResourcePatternResolver fails in the Apache Felix 1.4.1 OSGi container when trying to resolve wildcard resources.  We are porting a standalone application to Felix. That application searches Spring ApplicationContexts within the classpath using: \  However, we found that Spring doesn't find the applicationContexts (although they're definitely in the classpath) when running in Apache Felix 1.4.1.  After hunting down the source of the issue, we found that the aforementioned Spring class comes with a special behavior for ""bundle://"" url handlers when using equinox but not when using felix.  Please see the following places within the PathMatchingResourcePatternResolver code (Spring 2.5.6.SEC01) for details: - The static initializer: Detects whether running inside equinox - The resolveRootDirResource(Resource original) method: resolves the OSGi ""bundle://"" url, but only when using equinox.  Since we use Felix, the url is not being resolved and the subsequent call to doFindPathMatchingFileResources(...) fails and returns an empty set.   ---  **Affects:** 2.5.6  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-17T22:10:23Z","2015-09-22T17:34:30Z"
"","10480","Spring Portlet MVC: ActionResponse with Event and RenderParameters shows unexpected behaviour [SPR-5810]","**[Mike Jesmiatka](https://jira.spring.io/secure/ViewProfile.jspa?name=jesmiatka)** opened **[SPR-5810](https://jira.spring.io/browse/SPR-5810?redirect=false)** and commented  When an action method returns an event and render parameters, the event will be thrown and the render parameters will (sometimes) be ignored by the current portlet.  response.setEvent(""foo"", ""bar""); response.setRenderParameter(""bar"", ""foo"");  I expect that the current portlet will pick the render parameters over the thrown event, if the render parameters set.   ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=73026","closed","status: declined,","spring-projects-issues","2009-06-07T19:45:34Z","2019-01-12T16:27:04Z"
"","10594","Unit tests fail for org.springframework.aop.aspectj.annotation.ArgumentBindingTests [SPR-5925]","**[Mike Brosnan](https://jira.spring.io/secure/ViewProfile.jspa?name=mjbros)** opened **[SPR-5925](https://jira.spring.io/browse/SPR-5925?redirect=false)** and commented  Unit tests fail when building spring 2.5.6 from source.      [junit] Running org.springframework.aop.aspectj.annotation.ArgumentBindingTests     [junit] Testsuite: org.springframework.aop.aspectj.annotation.ArgumentBindingTests     [junit] Tests run: 3, Failures: 0, Errors: 1, Time elapsed: 0.337 sec     [junit] Tests run: 3, Failures: 0, Errors: 1, Time elapsed: 0.337 sec     [junit] ------------- Standard Output ---------------     [junit] Invoked with transaction @org.springframework.transaction.annotation.Transactional(noRollbackFor=[], rollbackFor=[], readOnly=false, noRollbackForClassName=[], rollbackForClassName=[], isolation=DEFAULT, propagation=REQUIRED, timeout=-1)     [junit] ------------- ---------------- ---------------     [junit]     [junit] Testcase: testBindingInPointcutUsedByAdvice took 0.185 sec     [junit]     Caused an ERROR     [junit] Required parameter names not available when parsing pointcut pointcutWithArgs in type org.springframework.aop.aspectj.annotation.NamedPointcutWithArgs     [junit] java.lang.IllegalStateException: Required parameter names not available when parsing pointcut pointcutWithArgs in type org.springframework.aop.aspectj.annotation.NamedPointcutWithArgs     [junit]     at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredPointcuts(Java15ReflectionBasedReferenceTypeDelegate.java:312)     [junit]     at org.aspectj.weaver.ReferenceType.getDeclaredPointcuts(ReferenceType.java:587)     [junit]     at org.aspectj.weaver.ResolvedType$7.get(ResolvedType.java:524)     [junit]     at org.aspectj.weaver.Iterators$3$1.hasNext(Iterators.java:125)     [junit]     at org.aspectj.weaver.Iterators$3.hasNext(Iterators.java:141)     [junit]     at org.aspectj.weaver.ResolvedType.findPointcut(ResolvedType.java:534)     [junit]     at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:152)     [junit]     at org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:196)     [junit]     at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression(PointcutParser.java:332)     [junit]     at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:310)     [junit]     at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:206)     [junit]     at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:193)     [junit]     at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:174)     [junit]     at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:195)     [junit]     at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:250)     [junit]     at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:284)     [junit]     at org.springframework.aop.aspectj.annotation.AspectJProxyFactory.addAdvisorsFromAspectInstanceFactory(AspectJProxyFactory.java:120)     [junit]     at org.springframework.aop.aspectj.annotation.AspectJProxyFactory.addAspect(AspectJProxyFactory.java:109)     [junit]     at org.springframework.aop.aspectj.annotation.ArgumentBindingTests.testBindingInPointcutUsedByAdvice(Unknown Source)     [junit]     [junit] Testcase: testAnnotationArgumentNameBinding took 0.123 sec     [junit] Testcase: testParameterNameDiscoverWithReferencePointcut took 0.001 sec  BUILD FAILED /vobs_opensrc/spring/build_base.xml:1514: Tests failed  Total time: 9 minutes 21 seconds   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-07-13T00:40:35Z","2019-01-12T05:33:20Z"
"","10085","SpringBeanAutowiringInterceptor.autowireBean() has wrong signature [SPR-5412]","**[Michal Fijas](https://jira.spring.io/secure/ViewProfile.jspa?name=michalf)** opened **[SPR-5412](https://jira.spring.io/browse/SPR-5412?redirect=false)*** and commented  SpringBeanAutowiringInterceptor.autowireBean() should rethrow caught exceptions wrapped in EJBException and it shouldn't have any application exceptions declared.  Part of logs from websphere 6.1 with EJB3 feature pack:  WSVR0068E: Attempt to start EnterpriseBean TestEAR#TestEJB.jar#MyBean failed with exception: com.ibm.ejs.container.EJBConfigurationException: PostConstruct interceptor ""public void org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor.autowireBean(javax.interceptor.InvocationContext) throws java.lang.Exception"" must not throw application exceptions. at com.ibm.ws.metadata.ejb.InterceptorMetaDataHelper.validateLifeCycleSignatureExceptParameters(InterceptorMetaDataHelper.java:1306) at com.ibm.ws.metadata.ejb.InterceptorMetaDataHelper.validateLifeCycleSignature(InterceptorMetaDataHelper.java:1389) at com.ibm.ws.metadata.ejb.InterceptorMetaDataFactory.addInterceptorProxies(InterceptorMetaDataFactory.java:2160) [...]  ---  **Affects:** 2.5.6  **Sub-tasks:** - #10547 SpringBeanAutowiringInterceptor.autowireBean() has wrong signature - needs fix in 2.5  2 votes, 2 watchers","closed","in: core,","spring-projects-issues","2009-01-14T03:26:47Z","2019-01-11T15:44:20Z"
"","9943","WebsphereUowTransactionManager and UOWManager wrap checked exceptions if declared to roll back [SPR-5270]","**[Michael Zilske](https://jira.spring.io/secure/ViewProfile.jspa?name=michaelzilske)** opened **[SPR-5270](https://jira.spring.io/browse/SPR-5270?redirect=false)** and commented  In the stack trace below, LockingException is a user defined, non-RuntimeException. The transformAndAllocateArrangements method is annotated `@Transactional`(rollbackFor=LockingException.class).  If transformAndAllocateArrangements throws a LockingException.class, its immediate caller does not receive it, but receives a TransactionSystemException, as seen below.  If I remove the rollbackFor declaration, the LockingException is received as expected, but the transaction does not roll back (as expected, but not as desired).  See also the archived forum thread: http://forum.springframework.org/archive/index.php/t-47557.html  Thanks for any help.  [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R org.springframework.transaction.TransactionSystemException: UOWManager transaction processing failed; nested exception is com.ibm.wsspi.uow.UOWException: de.ivu.mb.rcl.trafo.LockingException [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at org.springframework.transaction.jta.WebSphereUowTransactionManager.execute(WebSphereUowTransactionManager.java:259) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:123) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at $Proxy308.transformAndAllocateArrangements(Unknown Source) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at de.ivu.mb.rcl.trafo.PersonnelTransformatorBean.refreshPerson(PersonnelTransformatorBean.java:156) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at java.lang.reflect.Method.invoke(Method.java:618) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:310) [04.11.08 21:06:40:950 CET] 0000004b SystemErr     R 	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at org.springframework.transaction.interceptor.TransactionInterceptor$1.doInTransaction(TransactionInterceptor.java:128) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter.run(WebSphereUowTransactionManager.java:306) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.uow.UOWManagerImpl.runUnderCurrentUOW(UOWManagerImpl.java:1141) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.uow.UOWManagerImpl.runUnderUOW(UOWManagerImpl.java:511) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at org.springframework.transaction.jta.WebSphereUowTransactionManager.execute(WebSphereUowTransactionManager.java:252) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:123) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at $Proxy310.refreshPerson(Unknown Source) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at de.ivu.mb.rcl.trafo.TransformatorBean.refreshPerson(TransformatorBean.java:217) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at java.lang.reflect.Method.invoke(Method.java:618) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:310) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:198) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at $Proxy312.refreshPerson(Unknown Source) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at de.ivu.mb.rcl.trafo.ejb.TransformatorFacadeEJB.refreshPerson(TransformatorFacadeEJB.java:62) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at de.ivu.mb.rcl.trafo.ejb.EJSRemoteStatelessTransformatorFacade_8a534f1a.refreshPerson(EJSRemoteStatelessTransformatorFacade_8a534f1a.java:189) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at java.lang.reflect.Method.invoke(Method.java:618) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.rmi.util.ProxyUtil$4.run(ProxyUtil.java:727) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at java.security.AccessController.doPrivileged(AccessController.java:246) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.rmi.util.ProxyUtil.invokeWithClassLoaders(ProxyUtil.java:725) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.CORBA.iiop.ClientDelegate.invoke(ClientDelegate.java:1155) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at $Proxy4.refreshPerson(Unknown Source) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at de.ivu.mb.rcl.trafo.ejb._TransformatorFacade_Stub.refreshPerson(_TransformatorFacade_Stub.java:431) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at java.lang.reflect.Method.invoke(Method.java:618) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.etools.utc.model.ReflectionMethodModel.invoke(ReflectionMethodModel.java:65) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.etools.utc.servlet.InvokeServlet.invoke(InvokeServlet.java:113) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.etools.utc.servlet.InvokeServlet.doPost(InvokeServlet.java:369) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:763) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:856) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:989) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:501) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:464) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:90) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:744) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.wswebcontainer.WebContainer.handleRequest(WebContainer.java:1455) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:113) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:454) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewInformation(HttpInboundLink.java:383) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:263) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:165) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:136) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:195) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:743) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:873) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R 	at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1469) [04.11.08 21:06:40:965 CET] 0000004b SystemErr     R Caused by: com.ibm.wsspi.uow.UOWException: de.ivu.mb.rcl.trafo.LockingException at com.ibm.ws.uow.UOWManagerImpl.runUnderCurrentUOW(UOWManagerImpl.java:1147) at com.ibm.ws.uow.UOWManagerImpl.runUnderUOW(UOWManagerImpl.java:511) at org.springframework.transaction.jta.WebSphereUowTransactionManager.execute(WebSphereUowTransactionManager.java:252) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:123) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy308.transformAndAllocateArrangements(Unknown Source) at de.ivu.mb.rcl.trafo.PersonnelTransformatorBean.refreshPerson(PersonnelTransformatorBean.java:156) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:310) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.transaction.interceptor.TransactionInterceptor$1.doInTransaction(TransactionInterceptor.java:128) at org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter.run(WebSphereUowTransactionManager.java:306) at com.ibm.ws.uow.UOWManagerImpl.runUnderCurrentUOW(UOWManagerImpl.java:1141) at com.ibm.ws.uow.UOWManagerImpl.runUnderUOW(UOWManagerImpl.java:511) at org.springframework.transaction.jta.WebSphereUowTransactionManager.execute(WebSphereUowTransactionManager.java:252) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:123) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy310.refreshPerson(Unknown Source) at de.ivu.mb.rcl.trafo.TransformatorBean.refreshPerson(TransformatorBean.java:217) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:310) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:198) at $Proxy312.refreshPerson(Unknown Source) at de.ivu.mb.rcl.trafo.ejb.TransformatorFacadeEJB.refreshPerson(TransformatorFacadeEJB.java:62) at de.ivu.mb.rcl.trafo.ejb.EJSRemoteStatelessTransformatorFacade_8a534f1a.refreshPerson(EJSRemoteStatelessTransformatorFacade_8a534f1a.java:189) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at com.ibm.rmi.util.ProxyUtil$4.run(ProxyUtil.java:727) at java.security.AccessController.doPrivileged(AccessController.java:246) at com.ibm.rmi.util.ProxyUtil.invokeWithClassLoaders(ProxyUtil.java:725) at com.ibm.CORBA.iiop.ClientDelegate.invoke(ClientDelegate.java:1155) at $Proxy4.refreshPerson(Unknown Source) at de.ivu.mb.rcl.trafo.ejb._TransformatorFacade_Stub.refreshPerson(_TransformatorFacade_Stub.java:431) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at com.ibm.etools.utc.model.ReflectionMethodModel.invoke(ReflectionMethodModel.java:65) at com.ibm.etools.utc.servlet.InvokeServlet.invoke(InvokeServlet.java:113) at com.ibm.etools.utc.servlet.InvokeServlet.doPost(InvokeServlet.java:369) at javax.servlet.http.HttpServlet.service(HttpServlet.java:763) at javax.servlet.http.HttpServlet.service(HttpServlet.java:856) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:989) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:501) at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:464) at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:90) at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:744) at com.ibm.ws.wswebcontainer.WebContainer.handleRequest(WebContainer.java:1455) at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:113) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:454) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewInformation(HttpInboundLink.java:383) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:263) at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214) at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113) at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:165) at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217) at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161) at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:136) at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:195) at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:743) at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:873) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1469) Caused by: de.ivu.mb.rcl.trafo.LockingException at org.springframework.transaction.interceptor.TransactionInterceptor$1.doInTransaction(TransactionInterceptor.java:137) at org.springframework.transaction.jta.WebSphereUowTransactionManager$UOWActionAdapter.run(WebSphereUowTransactionManager.java:306) at com.ibm.ws.uow.UOWManagerImpl.runUnderCurrentUOW(UOWManagerImpl.java:1141) ... 72 more   ---  **Affects:** 2.5.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a25e24f37ee46595ce30045c6fb9efdb692b7386","closed","type: bug,","spring-projects-issues","2008-11-04T06:19:55Z","2012-06-19T03:47:39Z"
"","10527","Proxied JPA Query from non-transactional EM can not be cast to OpenJPA vendor interface [SPR-5858]","**[Michael Vorburger](https://jira.spring.io/secure/ViewProfile.jspa?name=vorburger)** opened **[SPR-5858](https://jira.spring.io/browse/SPR-5858?redirect=false)** and commented  As discussed with JÃ¼rgen during lunch at Jazoon in Zurich today. (Please let me know if you need more information, test case, or anything else.)   --- No further details from [SPR-5858](https://jira.spring.io/browse/SPR-5858?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-06-22T23:55:34Z","2012-06-19T09:36:18Z"
"","9963","spring-context manifest import-package of javax.annotation;version=""[1.  0.0, 2.0.0)"" conflicts with provided system bundle javax.annotation; version=""0.0.0"" [SPR-5290]","**[Michael Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=msmith)** opened **[SPR-5290](https://jira.spring.io/browse/SPR-5290?redirect=false)** and commented  While trying to use the `@PostConstruct` annotation, the InitDestroyAnnotationBeanPostProcessor.buildLifecycleMetadata(Class) method attempts to compare an annotation on a method with the initAnnotationType. Since the bundle that uses the `@PostConstruct` annotation is using the system bundle javax.annotation; version 0.0.0, it never compares as equal to the PostConstruct type in spring-context bundle (javax.annotation; version 1.0.0)   ---  **Affects:** 2.5.6  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2008-11-12T08:05:32Z","2012-06-19T03:47:39Z"
"","9964","spring-test-2.5.6.jar incompatible with junit distribution from SpringSource Enterprise Bundle Repository [SPR-5291]","**[Michael Pilquist](https://jira.spring.io/secure/ViewProfile.jspa?name=mpilquist)** opened **[SPR-5291](https://jira.spring.io/browse/SPR-5291?redirect=false)** and commented  spring-test-2.5.6's import package statement for junit.framework looks like this:  junit.framework.*;version=""[3.8.2, 4.0.0)"";resolution:=optional,  This is problematic, because JUnit still includes the junit.framework package in current distributions.  Without any clear guidance from the JUnit folks on versions of the various packages, I think the version constraint should either be 3.8.2 or should be changed to [3.8.2, 5.0.0).  Note that the JUnit 4.x bundles provided by the SpringSource Bundle Repository export junit.* packages as the version of the containing JUnit JAR (e.g., 4.4.0 or 4.5.0).  http://www.springsource.com/repository/app/bundle/version/detail?name=com.springsource.org.junit&version=4.5.0&searchType=bundlesByPackage&searchQuery=junit.framework   ---  **Affects:** 2.5.6","closed","type: bug,","spring-projects-issues","2008-11-12T12:40:42Z","2012-06-19T03:47:25Z"
"","10799","Pre-compute MVC annotated dispatcher parameters for DefaultAnnotationHandlerMapping [SPR-6131]","**[Michael Maraist](https://jira.spring.io/secure/ViewProfile.jspa?name=maraist)** opened **[SPR-6131](https://jira.spring.io/browse/SPR-6131?redirect=false)** and commented  I LOVE the `@RequestMapping` style controllers, but looking under the hood, I fear for the performance of my apps.. Having controllers with a dozen methods and two dozen 'lazily loaded' ModelAttributes along with several InitBinders seems to have quite a bit of overhead.  Separately, I also like several of the spring 3.0 enhancements, and was impatient.  The result was my creation of an alternate version of DefaultAnnotationHandlerMapping called SpringAnnotatedHandlerMapping.  I wanted to share some of the techniques in hopes that they may be accepted into the spring-mvcweb.  I think that with a few exceptions (slf4j instead of commons-logging, my transaction re-processor (makes ConcurrentModificationException handling work as it's supposed to), my `@JsonView` (similar to `@ResponseBody`), and my optimized but less feature-rich URL-mapper builder) these can easily be incorporated into the existing DefaultAnnotationHandlerMapping.  The main idea is that we perform all the analysis we normally would at dispatch time instead at afterPropertiesSet time.  We build out a 'Handler' which contains a model-attribute builder, an invoker-Object[] builder, and an invoker-result processor which builds a ModelAndView.  Thus the runtime dispatcher primitively runs a series of filters both before after the invocation.  My alternate URL-mapper also takes into account parameter name-value-pairs (though I haven't incorporated the 3.0 header NVPs as that doubled the complexity. :( .  Thus the selection of the method-specific handler is much faster.  Also it resolves an issue I've had where multiple Controllers own the same URL..  As with:  MyEntity.html?action=XXX  Where action=XXX is the method selector.  It's difficult to have a single controller that uses several `@ModelAttribute`'s, because obviously not all are used in every request, and not all 'required' parameters (for the ModelAttribute builders) are always going to be there.  So in otherwise trivial CRUD controllers, I have all these annoying if-statements around instantiators and validators.  But obviously if you match the URL to a bean THEN filter the method against the parameters, you can't accomplish this.. Hense my consolidated 'optimized' mapper.  Note I COULD have used the UrlPathHelper in the first part, but my particular algorithm didn't have a good way of storing diverse results, so I just use exact-match and prefixed/suffix matching.  (Attachment to follow)   ---  **Affects:** 2.5.6, 3.0 M4  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-19T06:30:53Z","2018-12-25T10:48:34Z"
"","9968","Cascade default exposeModelAttributes setting in UrlBasedViewResolver  [SPR-5295]","**[Michael Maraist](https://jira.spring.io/secure/ViewProfile.jspa?name=maraist)** opened **[SPR-5295](https://jira.spring.io/browse/SPR-5295?redirect=false)** and commented  RedirectView has the ability to enable/disable exposeModelAttributes, but for applications where this functionality is not desired, we should have the UrlBasedViewResolver pass an alternate default.  I've included a patch.   ---  **Affects:** 2.5.6  **Attachments:** - [UrlBasedViewResolver.java.patch](https://jira.spring.io/secure/attachment/14868/UrlBasedViewResolver.java.patch) (_1.96 kB_)  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2008-11-14T06:35:21Z","2012-06-19T09:36:22Z"
"","10700","Improve the tx namespace regarding aspectJ expressions [SPR-6031]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-6031](https://jira.spring.io/browse/SPR-6031?redirect=false)** and commented  Currently, it's pretty tidious to do declarative transactions in xml. The main reason for that is that you need to use 2 different namespaces as follows:  ```xml             ```  ```xml                  ```  We could improve the tx namespace so we don't need to rely on the aop namespace anymore. It would be similar to what has been done for Spring Security:  ```xml        ```  ---  PROPOSED SOLUTION  ---  Case 1 (simple): applies the same policy to all methods  ```xml       ```  Case 2 (more advanced): applies specific policies for each method template  ```xml                          ```  Case 3: declares a transactionManager  ```xml                          ```  ---  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-23T20:10:39Z","2019-01-13T21:49:18Z"
"","10660","referencing a pointcut from an external class [SPR-5992]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-5992](https://jira.spring.io/browse/SPR-5992?redirect=false)** and commented  In many cases, it is considered as a best practice that pointcuts should be externalized into a dedicated class. This is not so easy to do because we always need to specify the package path.  Please consider the following example.  ```java @Before(""com.springsource.aspects.example.PoincutHolder.serviceMethod() || com.springsource.aspects.example.PoincutHolder.repositoryMethod()"" )     public void monitor() {        //...     } } ```  It would be much easier if we could reference PointcutHolder inside the configuration so we only need to specify the name of the pointcut itself. I was thinking of something like this: Xml config:  ```xml                ```  And then it could be called in that way:  ```java @Before(""serviceMethod() || repositoryMethod()"" )     public void monitor() {        //...     } } ```  This would be much easier to understand. ps: of course, if 2 PoincutHolders hold some poincuts with the same names, we would just throw an exception at startup.   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-08-09T20:02:39Z","2015-09-22T16:01:30Z"
"","10453","[Documentation][Add documentation on proxy generation in Spring AOP] [SPR-5783]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-5783](https://jira.spring.io/browse/SPR-5783?redirect=false)** and commented  The Spring reference doc does not go into much details regarding the way that proxies are generated. Let's say that I've got 2 advices, one for logging and one for transactions. At runtime, they both target a method called clientService.updateClient(...). In that case, only one proxy will be generated whereas a lot of people think that there will be 2 of them (one for logging and one for transactions). It would be nice to specify that in the reference documentation.   --- No further details from [SPR-5783](https://jira.spring.io/browse/SPR-5783?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-05-25T00:03:04Z","2012-06-19T09:36:28Z"
"","10128","Write documentation for Spring 3.0 new annotations [SPR-5455]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-5455](https://jira.spring.io/browse/SPR-5455?redirect=false)** and commented  Create documentation for `@PathVariable`, `@RequestHeader`, `@CookieValue`   --- No further details from [SPR-5455](https://jira.spring.io/browse/SPR-5455?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-02-03T01:29:08Z","2012-06-19T03:47:31Z"
"","9949","outdated URL inside Core-Spring documentation [SPR-5276]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-5276](https://jira.spring.io/browse/SPR-5276?redirect=false)** and commented  I have noticed that there is an outdated link inside the Hessian/Burlap chapter of the documentation. It can be found here: http://static.springframework.org/spring/docs/2.5.x/reference/remoting.html#remoting-caucho-protocols-burlap  There is a note mentionning acegisecurity as follows:  Of course, this example doesn't show a flexible kind of security infrastructure. For more options as far as security is concerned, have a look at the Acegi Security System for Spring, to be found at http://acegisecurity.sourceforge.net.  IMHO, It should be instead: Of course, this example doesn't show a flexible kind of security infrastructure. For more options as far as security is concerned, have a look at Spring Security, to be found at http://static.springsource.org/spring-security/site/.   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2008-11-06T15:09:57Z","2012-06-19T03:47:37Z"
"","10790","Create new branch in subversion to start committing / working on the conversation management for Spring 3.1 [SPR-6122]","**[Micha Kiener](https://jira.spring.io/secure/ViewProfile.jspa?name=micha.kiener)** opened **[SPR-6122](https://jira.spring.io/browse/SPR-6122?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/35a8aaa11aa7a36917d52e3c3ee1fa10f50c02dc","closed","in: core,","spring-projects-issues","2009-09-17T20:24:27Z","2019-01-11T14:05:58Z"
"","10177","ModelAndView.getModel method garbages wasCleared state [SPR-5505]","**[miceuz](https://jira.spring.io/secure/ViewProfile.jspa?name=miceuz)** opened **[SPR-5505](https://jira.spring.io/browse/SPR-5505?redirect=false)** and commented  I have two interceptors in my HandlerMapping:  OpenSessionInViewInterceptor and legacy xt ajax interceptor that utilizes postHandle method and uses ModelAndView returned from controller to get command object - i.e. i can't return null from controller, i need modelAndView in interceptor.  the problem is that i get ""javax.servlet.ServletException: ModelAndView [ModelAndView: materialized View is [null]; model is {}] neither contains a view name nor a View object"" exceotion in DispatcherServlet after ajax submit event.  My ajax interceptor prepares the response and clears ModelAndView, but WebRequestHandlerInterceptorAdapter, which wraps OpenSessionInViewInterceptor calls getModel() on my modelAndView object. This creates an empty model map in modelNadView:  public ModelMap getModelMap() { if (this.model == null) { this.model = new ModelMap(); } return this.model; }  and modelAndView.wasCleared() is no longer true.   ---  **Affects:** 2.5.6","closed","type: bug,","spring-projects-issues","2009-02-18T19:40:50Z","2012-06-19T03:47:49Z"
"","10127","Connection released too early [SPR-5454]","**[Mauro Molinari](https://jira.spring.io/secure/ViewProfile.jspa?name=mauromol)** opened **[SPR-5454](https://jira.spring.io/browse/SPR-5454?redirect=false)** and commented  The whole system described under ""Environment"" is working fine.  However, there's a situation in which we're encountering a problem. Actually, it seems that it is possible for one connection to be released (i.e.: returned to the pool) before the transaction it is bound to has actually been committed/rolled back. This means that if another thread that is working on another transaction is asking the pool for a connection AND the pool gives it the same connection, an error occurs because JBossTS says that the given connection is still bounded to the first transaction (that is not yet terminated).  In other words:  - transaction1 is started in thread1 (T1) - T1 asks the pool for a connection and gets connection1 (C1) - T1 does some SQL stuff - (meanwhile) transaction2 is started in thread2 (T2) - T1 tries to commit   => before actually committing, T1 releases C1 - (meanwhile) T2 asks the pool for a connection and gets C1 - T2 tries to do some SQL stuff (while transaction1 is still in progress!)   => EXCEPTION because C1 is still bounded to transaction1!  By debugging our code we discovered that the responsible of the release of C1 before transaction1 is completed is org.springframework.jdbc.datasource.DataSourceUtils.ConnectionSynchronization: in its beforeCompletion() the connection is released if the ""connection holder"" is not open. The comment says:  // Release Connection early if the holder is not open anymore // (that is, not used by another resource like a Hibernate Session // that has its own cleanup via transaction synchronization), // to avoid issues with strict JTA implementations that expect // the close call before transaction completion.  However, in our case this clearly exposes the system to the concurrency problem described above, because it is Spring that is managing the whole association between connections and transactions (thanks to the TransactionAwareDataSourceProxy), so DBCP does nothing about it and it is allowed to lend the same connection to another thread if that connection has been previously returned to it.  The only solution we found is to extend DBCP to implement SmartDataSource: its shouldClose(Connection) method checks if there's any transaction in progress: if so, the connection is not closed, otherwise it is. In the former case, the connection is registered on an object that extends TransactionSynchronizationAdapter and that closes all the connections after transaction completion.  This is the relevant code:  public class MyDataSource extends BasicDataSource implements SmartDataSource { private volatile static MyTransactionSynchronization transactionSynchronization = null;  // ...  public boolean shouldClose(final Connection con) { if(TransactionSynchronizationManager.isSynchronizationActive() && TransactionSynchronizationManager.isActualTransactionActive()) { if(transactionSynchronization == null) { synchronized(CardinisTransactionSynchronization.class) { // double checked locking if(transactionSynchronization == null) transactionSynchronization = new CardinisTransactionSynchronization(); } } transactionSynchronization.registerConnection(con); return false; } else return true; }  // transaction synchronization class private static class MyTransactionSynchronization extends TransactionSynchronizationAdapter { private final ThreadLocal openConnections = new ThreadLocal();      @Override     public void afterCompletion(final int status)     {       // close all the registered connections       final Set set = openConnections.get();       if(set != null)       try       {         for(final Connection connection : set)           connection.close();       }       catch(final SQLException e)       {         throw new RuntimeException(""could not close connection after transaction completion"", e);       }       finally       {         openConnections.remove();       }     }          // register a connection to be closed after transaction completion     public void registerConnection(final Connection connection)     {       Set set = openConnections.get();       if(set == null)       {         set = new HashSet();         openConnections.set(set);         // lazy registration for transaction synchronization         if(!TransactionSynchronizationManager.getSynchronizations().contains(this))           TransactionSynchronizationManager.registerSynchronization(this);       }       set.add(connection);     }  } }  This workaround seems to work fine, however we would like to hear your opinion on this issue.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springframework.org/showthread.php?p=224756","closed","status: declined,","spring-projects-issues","2009-02-03T00:56:00Z","2019-01-12T16:27:22Z"
"","10329","Race condition in AutowiredAnnotationBeanPostProcessor.AutowiredMethodElement.inject()? [SPR-5658]","**[Mattias Nissler](https://jira.spring.io/secure/ViewProfile.jspa?name=saittam)** opened **[SPR-5658](https://jira.spring.io/browse/SPR-5658?redirect=false)** and commented  At work, we've hit a bug in an application that:  a) I have only seen once, so cannot reproduce b) I'm quite sure is caused by an `@Autowired` setter called with a null argument (which should be impossible)  When analyzing the problem, we found that three instances of the bean being autowired were instantiated in rapid succession (i.e. concurrently). This made us think of checking whether there maybe concurrency issues within Springs bean initialization code. Ultimately I looked at the code in AutowiredAnnotationBeanPostProcessor.AutowiredMethodElement.inject() and I think I came up with a race condition scenario that does explain the injected null reference:  Consider AutowiredAnnotationBeanPostProcessor.AutowiredMethodElement.inject():  Let's say there are 3 Threads: t1, t2, t3 and the AutowiredMethodElement is in the state cached == false, cachedMethodArguments == null. This means that there probably hasn't been any call to inject() before and checking our log files, we indeed found that we didn't instantiate a bean of this type before. Now what I guess could have happened is:  1. t1 enters, finds cached == false, steps into else block and is interrupted 2. t2 enters, finds cached == false, steps into else block and is interrupted 3. t1 continues, fills in cachedMethodArguments, sets cached = true 4. t3 enters, finds cached == true, steps into if block and is interrupted 5. t2 continues, executes cachedMethodArguments = new Object[...] and is interrupted (chachedMethodArguments contains null references now!) 6. t3 continues, copies cachedMethodArguments[i] to arguments[i] (all null) 7. t3 invokes `@Autowired` annotated method, thereby injecting the null value  Have I missed any synchronization mechanism that prevents this? If not, it's probably a bug that needs fixing ;-)   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2fdb68a0b3fbbcd9d4aca012739ad53ec02585e","closed","in: core,","spring-projects-issues","2009-04-07T23:56:33Z","2019-01-11T16:34:13Z"
"","9901","StringUtils.delete goes into eternal loop [SPR-5227]","**[Mattias Hellborg Arthursson](https://jira.spring.io/secure/ViewProfile.jspa?name=marthursson)** opened **[SPR-5227](https://jira.spring.io/browse/SPR-5227?redirect=false)** and commented  Passing an empty String to StringUtils.delete causes an eternal loop. Sending an empty String as input doesn't really make sense, but there is a possibility it might happen accidentally (hey - it happened to me :))  Test case verifying the bug: `@Test` public void verfiyDeleteWithEmptyStringWillCauseEternalLoop(){ String result = StringUtils.delete(""Some string"", """"); // We never get here - stuck in eternal loop above. assertEquals(""Some string"", result); }   ---  **Affects:** 2.0.8, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-10-21T18:37:30Z","2012-06-19T03:47:43Z"
"","10639","CustomEditorConfigurer functionality regression in 3.0 [SPR-5971]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-5971](https://jira.spring.io/browse/SPR-5971?redirect=false)** and commented  The CustomEditorConfigurer functions differently in Spring 3 than in earlier versions of Spring.  The change may have been intentional or may have been accidental.  Either way the reference document no longer matches the actual behavior of the class, so either the class needs to change or the reference document needs to change.  Here is the section of the reference document:  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch06s04.html#beans-beans-conversion-customeditor-registration  Here is the advertised usage pattern (and how it used to work before Spring 3):  ```                                                              ```  Here is how it works in Spring 3:  ```                          ```  Related bugs: 5773, 5860  ---  **Affects:** 3.0 M3  **Issue Links:** - #10529 CustomEditorConfigurer needs way to register Property Editor instances - #10825 XFire 1.2.6 not compatible with Spring 3.0's CustomEditorConfigurer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6ffb75017113e69281e89e74052d9a33cb4499a0","closed","in: core,","spring-projects-issues","2009-07-30T07:32:04Z","2019-01-11T18:14:05Z"
"","10600","Allow non-standard attributes in  tags [SPR-5931]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-5931](https://jira.spring.io/browse/SPR-5931?redirect=false)** and commented  The dojo framework creates form widgets using a syntax like this","closed","type: enhancement,","spring-projects-issues","2009-07-15T04:46:42Z","2019-01-11T18:12:48Z"
"","10096","spring-jee-2.5.xsd on springframework.org does not specify new expose-access-context attribute for jee:remote-slsb [SPR-5422]","**[Matt Plaxton](https://jira.spring.io/secure/ViewProfile.jspa?name=mplaxton)** opened **[SPR-5422](https://jira.spring.io/browse/SPR-5422?redirect=false)** and commented  The spring-beans-2.5.xsd on SpringFramework does not reflect the change made under #6206 for expose-access-context.  ---  **Affects:** 2.5.5, 2.5.6","closed","in: messaging,","spring-projects-issues","2009-01-20T20:56:07Z","2019-01-11T15:43:45Z"
"","10759","AbstractRefreshableConfigApplicationContext configLocation problem [SPR-6091]","**[Mateusz Kruszyk](https://jira.spring.io/secure/ViewProfile.jspa?name=waglik)** opened **[SPR-6091](https://jira.spring.io/browse/SPR-6091?redirect=false)** and commented  method body looks like this:  public void setConfigLocation(String location) { setConfigLocations(StringUtils.tokenizeToStringArray(location, CONFIG_LOCATION_DELIMITERS)); }  if you are unlucky enough to work on windows and even more unlucky to have config location in ""c:\documents and settings\zyx\..."" tokenizer will cut your string into c:\documents , and , settings\zyx.....  then when you try to refresh() your application context it will crash reporting c:\documents does not exist....  to reproduce :  FileSystemXmlApplicationContext ac= new FileSystemXmlApplicationContext(""C:\\Documents and settings\\xyz\\contex.xml""); ac.refresh();   ---  **Affects:** 2.5.6, 3.0 M4","closed","in: core,","spring-projects-issues","2009-09-08T17:24:51Z","2019-01-12T16:39:07Z"
"","10467","@Transactional not working properly if service class is exported as flex remoting destination [SPR-5797]","**[Massimo Barabino](https://jira.spring.io/secure/ViewProfile.jspa?name=msmbrb)** opened **[SPR-5797](https://jira.spring.io/browse/SPR-5797?redirect=false)** and commented  `@Transactional` annotation seems to only work if used within the service INTERFACE and not within the concrete service CLASS for a flex-exported bean.  Here is a simple example I use to reproduce the behaviour.  ```  public interface UserRegistrationService { 	 	public List findEnabledUsernames(); 	 } ```  ```  public class UserRegistrationServiceImpl implements UserRegistrationService {  private UserHome userRepository;  	public UserHome getUserRepository() { 	return userRepository; }  	public void setUserRepository(UserHome userRepository) { 		this.userRepository = userRepository; 	} 	 	@Transactional(propagation=Propagation.SUPPORTS, readOnly=true) 	public List findEnabledUsernames() { 		 		return userRepository.findEnabled();  	} }  ```  UserHome is a hibernate DAO class as follows  ```  public class UserHome implements  UserDao{ 	 	private SessionFactory sessionFactory;  	 	public SessionFactory getSessionFactory() { 		return sessionFactory; 	}  	public void setSessionFactory(SessionFactory sessionFactory) { 		this.sessionFactory = sessionFactory; 	}          public List findEnabled(){ 		try {                         Query q =  sessionFactory.getCurrentSession().createQuery(""from User where enabled=true""); 			List results = q.list();                          return results;  		} catch (RuntimeException re) { 			log.error(""find by enabled failed"", re); 			throw re; 		} 	}  } ```  If I use `@Transactional` annotation on the service CLASS method (as shown) I get a Hibernate exception. This doesn't happen if i put the annotation in the INTERFACE.  ```  No Hibernate Session bound to thread, and configuration does not allow creation of non-transactional one here at org.springframework.orm.hibernate3.SpringSessionContext.currentSession(SpringSessionContext.java:63) at org.hibernate.impl.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:574) at com.flextest.domain.UserHome.findEnabled(UserHome.java:179) at com.movereg.business.UserRegistrationServiceImpl.findEnabledUsernames(UserRegistrationServiceImpl.java:30) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:66) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy131.findEnabledUsernames(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at flex.messaging.services.remoting.adapters.JavaAdapter.invoke(JavaAdapter.java:421) at flex.messaging.services.RemotingService.serviceMessage(RemotingService.java:183) at flex.messaging.MessageBroker.routeMessageToService(MessageBroker.java:1503) at flex.messaging.endpoints.AbstractEndpoint.serviceMessage(AbstractEndpoint.java:884) at flex.messaging.endpoints.AbstractEndpoint$$FastClassByCGLIB$$1a3ef066.invoke() at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:191) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:700) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.flex.core.MessageInterceptionAdvice.invoke(MessageInterceptionAdvice.java:59) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.adapter.ThrowsAdviceInterceptor.invoke(ThrowsAdviceInterceptor.java:126) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.Cglib2AopProxy$FixedChainStaticTargetInterceptor.intercept(Cglib2AopProxy.java:582) at flex.messaging.endpoints.AMFEndpoint$$EnhancerByCGLIB$$a57f8d15.serviceMessage() at flex.messaging.endpoints.amf.MessageBrokerFilter.invoke(MessageBrokerFilter.java:121) at flex.messaging.endpoints.amf.LegacyFilter.invoke(LegacyFilter.java:158) at flex.messaging.endpoints.amf.SessionFilter.invoke(SessionFilter.java:44) at flex.messaging.endpoints.amf.BatchProcessFilter.invoke(BatchProcessFilter.java:67) at flex.messaging.endpoints.amf.SerializationFilter.invoke(SerializationFilter.java:146) at flex.messaging.endpoints.BaseHTTPEndpoint.service(BaseHTTPEndpoint.java:278) at flex.messaging.endpoints.AMFEndpoint$$EnhancerByCGLIB$$a57f8d15.service() at org.springframework.flex.servlet.MessageBrokerHandlerAdapter.handle(MessageBrokerHandlerAdapter.java:101) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:807) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:511) at javax.servlet.http.HttpServlet.service(HttpServlet.java:754) at javax.servlet.http.HttpServlet.service(HttpServlet.java:847) at org.apache.catalina.core.ApplicationFilterChain.servletService(ApplicationFilterChain.java:427) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:315) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:287) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:218) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:648) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:593) at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:94) at com.sun.enterprise.web.PESessionLockingStandardPipeline.invoke(PESessionLockingStandardPipeline.java:98) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:222) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:648) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:593) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:587) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1096) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:166) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:648) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:593) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:587) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1096) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:288) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.invokeAdapter(DefaultProcessorTask.java:647) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.doProcess(DefaultProcessorTask.java:579) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.process(DefaultProcessorTask.java:831) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.executeProcessorTask(DefaultReadTask.java:341) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.doTask(DefaultReadTask.java:263) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.doTask(DefaultReadTask.java:214) at com.sun.enterprise.web.connector.grizzly.TaskBase.run(TaskBase.java:265) at com.sun.enterprise.web.connector.grizzly.ssl.SSLWorkerThread.run(SSLWorkerThread.java:106)  ```  Here is the context config relevant part  ```   	     		 			 				${hibernate.dialect} 				true 			 		     		 		 	   		 		 		 		 		 		 	   	     ```  By writing on the forum I found out that this could be a double proxy-related behaviour  Thanks in advance   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=72784  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-01T19:16:19Z","2012-06-18T12:45:20Z"
"","9886","Class cast exception in AbstractBeanDefinition.getBeanClassName(AbstractBeanDefinition.java:305) [SPR-5213]","**[Marvel](https://jira.spring.io/secure/ViewProfile.jspa?name=marvel_ss)** opened **[SPR-5213](https://jira.spring.io/browse/SPR-5213?redirect=false)** and commented  I saw a similar issue raised out by Jasper Rosenberg   (#8738 ).  I would like to share my understanding on this , code snippet below is using the non-thread safe variable beanClass, which may cause issue in multiple thread environment.                     private Object beanClass          public String getBeanClassName() {     	if (this.beanClass instanceof Class) {     		return ((Class) this.beanClass).getName();     	}     	else {     		return (String) this.beanClass;     	}     }                    public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {                      //This may cause issue related to synchronized                                        if (this.beanClass == null) {     		return null;     	}     	Class resolvedClass = ClassUtils.forName(getBeanClassName(), classLoader);     	this.beanClass = resolvedClass;     	return resolvedClass;     }  Please let me know if this is fixed in higher version of Spring.  ---  **Affects:** 2.0.3  **Attachments:** - [issue.bmp](https://jira.spring.io/secure/attachment/14768/issue.bmp) (_8.67 kB_)  **Issue Links:** - #9885 Class cast exception in AbstractBeanDefinition.getBeanClassName(AbstractBeanDefinition.java:305) (_**""is duplicated by""**_)  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","in: core,","spring-projects-issues","2008-10-12T23:33:13Z","2019-01-11T15:22:01Z"
"","9885","Class cast exception in AbstractBeanDefinition.getBeanClassName(AbstractBeanDefinition.java:305) [SPR-5212]","**[Marvel](https://jira.spring.io/secure/ViewProfile.jspa?name=marvel_ss)** opened **[SPR-5212](https://jira.spring.io/browse/SPR-5212?redirect=false)** and commented  This is the worst possible kind of bug report, and so I apologize in advance, but it has only appeared once in production and was not reproducible.   On top of that, the actual case that generates the error seems to be pretty much impossible.  The cast exception you see below, is in this Spring code:      /**      * Return the class name of the wrapped bean.      */     public String getBeanClassName() {     	if (this.beanClass instanceof Class) {     		return ((Class) this.beanClass).getName();     	}     	else {     		return (String) this.beanClass;     	}     }  As you can see the method checks if the field is a Class, and casts to it if it is.  However, in this case below, for some reason, it tried to cast it to a String even though it was a Class.   I don't know if this is some strange classloading issue, a JVM bug, or what, but I figured you would want to at least see it.  Stack trace:  ---  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityModel' defined in class path resource [applicationContext-siteresources.xml]: Initialization of bean failed; nested exception is java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.String Caused by: java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.String at org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClassName(AbstractBeanDefinition.java:311) at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:327) at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1066) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:349) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:270) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:881) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:829) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:424) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:270) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:229) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:733) at com.cargurus.site.interceptor.ModelInterceptor.intercept(ModelInterceptor.java:75)  ---  **Affects:** 2.0.5  **Issue Links:** - #9886 Class cast exception in AbstractBeanDefinition.getBeanClassName(AbstractBeanDefinition.java:305) (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-10-12T22:38:49Z","2019-01-13T21:51:19Z"
"","10313","SimpleHttpServerFactoryBean for the HttpsServer [SPR-5642]","**[Martti von Hertzen](https://jira.spring.io/secure/ViewProfile.jspa?name=hertzen)** opened **[SPR-5642](https://jira.spring.io/browse/SPR-5642?redirect=false)** and commented  Hi,  I'd need a version of the org.springframework.remoting.support.SimpleHttpServerFactoryBean but for the HttpsServer that comes with Sun's JRE 1.6. I'm including an implementation that extends a slightly modified version of SimpleHttpServerFactoryBean.   ---  **Affects:** 2.5.6  **Attachments:** - [SimpleHttpServerFactoryBean.jar](https://jira.spring.io/secure/attachment/15278/SimpleHttpServerFactoryBean.jar) (_4.02 kB_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-31T17:58:54Z","2015-09-22T17:34:34Z"
"","10230","Jaxb2Marshaller schema initialization via XsdSchema [SPR-5559]","**[Martin Vanek](https://jira.spring.io/secure/ViewProfile.jspa?name=anthavio)** opened **[SPR-5559](https://jira.spring.io/browse/SPR-5559?redirect=false)** and commented  Hi, I got more than one place for schema to use.  One is PayloadValidatingInterceptor, that can be initialized from org.springframework.xml.xsd.XsdSchema. Now Jaxb2Marshaller schema can be only initialized from Resource which means (expensive) xsd load. Improvement is really easy. Thanks, Martin   --- No further details from [SPR-5559](https://jira.spring.io/browse/SPR-5559?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-03-10T05:21:59Z","2012-06-19T02:28:14Z"
"","10374","Jaxb2Marshaller should support validating of schema defined inline in a WSDL as well as imported schema in a WSDL [SPR-5704]","**[Martin OConnor](https://jira.spring.io/secure/ViewProfile.jspa?name=martinoconnor)** opened **[SPR-5704](https://jira.spring.io/browse/SPR-5704?redirect=false)** and commented  Jaxb2Marshaller should support validating of schema defined inline in a WSDL as well as imported schema in a WSDL  Since the JAXB 2 RI schema compiler supports compiling schema with the -wsdl flag, Jaxb2Marshaller should support validation of schema defined within or referenced from a WSDL   --- No further details from [SPR-5704](https://jira.spring.io/browse/SPR-5704?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-04-29T09:16:00Z","2015-09-22T18:55:03Z"
"","10354","Instantiation of advisor fails with overloaded advice method [SPR-5683]","**[Martin Ahrer](https://jira.spring.io/secure/ViewProfile.jspa?name=martinahrer)** opened **[SPR-5683](https://jira.spring.io/browse/SPR-5683?redirect=false)** and commented  I have an AOP before advice that is configured to call a method `startProcess` at its joinpoint. {{      }} The signature of this method is `public void startProcess(JoinPoint joinPoint, StartProcess startProcessAnnotation)` But the advice class implementing this method has another equally named method with the signature ` private void startProcess(String processName) `  During runtime the AOP proxying process fails with: {{ Caused by: java.lang.IllegalArgumentException: error Type referred to is not an annotation type: startProcessAnnotation at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:315) at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:205) at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:192) at org.springframework.aop.aspectj.AspectJExpressionPointcut.getMethodMatcher(AspectJExpressionPointcut.java:178) at org.springframework.aop.aspectj.AbstractAspectJAdvice.buildSafePointcut(AbstractAspectJAdvice.java:189) at org.springframework.aop.aspectj.AspectJPointcutAdvisor.\(AspectJPointcutAdvisor.java:51) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100) }}  Since I am the owner of the code I can get around by renaming the private method e.g. as doStartProcess. But this approach would possibly fail if I needed to proxy a class that only is provided as a class file/jar, etc. So the question: is it possible to handle this in a better way, I mean Spring AOP should know what the signature of the advice method should be an select the proper method.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=70279","closed","type: enhancement,","spring-projects-issues","2009-04-17T18:45:10Z","2009-11-09T05:18:26Z"
"","9910","HibernateJpaDialect.getSession casting to HibernateEntityManager [SPR-5236]","**[Martin Ahrer](https://jira.spring.io/secure/ViewProfile.jspa?name=martinahrer)** opened **[SPR-5236](https://jira.spring.io/browse/SPR-5236?redirect=false)** and commented  org.springframework.orm.jpa.vendor.HibernateJpaDialect.getSession should not try to cast directly to HibernateEntityManager since there is a chance that the entity manager passed in is just a proxy for the EntityManager interface!      protected Session getSession(EntityManager em) {     	return ((HibernateEntityManager) em).getSession();     }  This cast can be avoided (see below)      protected Session getSession(EntityManager em) {     	return (Session) em.getDelegate();     }  I'm facing this problem while I'm trying to integrate Seam with Spring. Seam is in charge of managing the life time of the entity manager and passing it on to Spring using org.jboss.seam.ioc.spring.SeamManagedEntityManagerFactoryBean.  Currently a work around is to subclass HibernateJpaDialect and implement getSession as shown!  ---  **Affects:** 2.5.5  **Issue Links:** - #9909 HibernateJpaDialect.getSession casting to HibernateEntityManager (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2008-10-22T21:34:31Z","2019-01-12T16:50:39Z"
"","9909","HibernateJpaDialect.getSession casting to HibernateEntityManager [SPR-5235]","**[Martin Ahrer](https://jira.spring.io/secure/ViewProfile.jspa?name=martinahrer)** opened **[SPR-5235](https://jira.spring.io/browse/SPR-5235?redirect=false)** and commented  org.springframework.orm.jpa.vendor.HibernateJpaDialect.getSession should not try to cast directly to HibernateEntityManager since there is a chance that the entity manager passed in is just a proxy for the EntityManager interface!      protected Session getSession(EntityManager em) {     	return ((HibernateEntityManager) em).getSession();     }  This cast can be avoided (see below)      protected Session getSession(EntityManager em) {     	return (Session) em.getDelegate();     }  I'm facing this problem while I'm trying to integrate Seam with Spring. Seam is in charge of managing the life time of the entity manager and passing it on to Spring using org.jboss.seam.ioc.spring.SeamManagedEntityManagerFactoryBean.  Currently a work around is to subclass HibernateJpaDialect and implement getSession as shown!  ---  **Affects:** 2.5.5  **Issue Links:** - #9910 HibernateJpaDialect.getSession casting to HibernateEntityManager (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2008-10-22T21:34:30Z","2019-01-11T15:19:28Z"
"","10394","Documentation for RESTful webservice examples slightly incorrect for 3.0.0.M3 [SPR-5724]","**[Martijn Verburg](https://jira.spring.io/secure/ViewProfile.jspa?name=karianna)** opened **[SPR-5724](https://jira.spring.io/browse/SPR-5724?redirect=false)** and commented  The examples that show:  `@RequestMapping`(""/somevalue/{someparamter}""), method=RequestType.GET)  should read:  `@RequestMapping`(value=""/somevalue/{someparamter}""), method=RequestType.GET)  The first way is considered invalid.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8071acd5575c60a09c366b171df5611b7b2b9dc","closed","type: bug,","spring-projects-issues","2009-05-07T03:23:01Z","2012-06-19T03:43:35Z"
"","10817","GenericConversionService calls initGenericConverters from constructor [SPR-6149]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-6149](https://jira.spring.io/browse/SPR-6149?redirect=false)** and commented  This actually arised as a WebFlow issue not sure if I need to register one for that also.  Basically when you need your own ConversionService and you extend the GenericConversionService and you need some depenencies injected those aren't available in the overriden initGenericConverters because it is called from the parents constructor. IMHO it would be more spring like that this method was called after all dependencies where injected so let it implement InitializingBean and implement the afterPropertiesSet method. That way it would work and would be more elegant imho.   ---  **Affects:** 3.0 M4  **Reference URL:** http://forum.springsource.org/showthread.php?t=78098","closed","type: enhancement,","spring-projects-issues","2009-09-24T20:08:34Z","2012-06-19T03:42:42Z"
"","10751","DefaultAdvisorAutoProxyCreator doesn't work with tx:annotation-driven on Cglib classes [SPR-6083]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-6083](https://jira.spring.io/browse/SPR-6083?redirect=false)** and commented  When using tx:annotation-driven and a manually configured DefaultAdvisorAutoProxyCreator the aspects defined in the DAAPC aren't applied. This seems due to the fact that the DAAPC checks the class (bean.getClass() ) to do some lookup on the aspects and annotations. Due to the fact that the InfrastructureAdvisorAutoProxyCreator already created a proxy the advisors/aspects aren't resolved correctly and are basically ignored. Removing the tx:annotation-driven and placing that configuration also in the DAAPC makes it works.  Which makes this look like a case of double proxying a proxy. There seems to be support in the Cglib2AopProxy class to detect proxies but there should be also some detecting going on in the other classes to make it fully work. (There seems also to be an issue regarding flex services and transactions which seems more or less the same as this issue).   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?p=258939  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-06T17:23:46Z","2015-09-22T17:34:32Z"
"","9956","Improve AbstractListenerContainerParser detecting MessageListener [SPR-5283]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-5283](https://jira.spring.io/browse/SPR-5283?redirect=false)** and commented  It would be nice for the AbstractListenerContainerParser to detect if we only supply a ref element on the jms:listener that it would check if it was a MessageListener or just a basic object. Now it wraps the bean always in a MessageListenerAdapter (which swallows exceptions), it would be easier if it detected if something was a MessageListener before wrapping it in a MLA.   ---  **Affects:** 2.0.9, 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-11-09T17:16:14Z","2012-06-19T09:36:20Z"
"","9983","AbstractJpaTests does not use JUnit 4 @Test annotation [SPR-5310]","**[Marshal King](https://jira.spring.io/secure/ViewProfile.jspa?name=marsking)** opened **[SPR-5310](https://jira.spring.io/browse/SPR-5310?redirect=false)** and commented  How to repeat:  ---  Create a Java Application project in Netbeans. Then create a simple class in Test Packages:  import org.junit.Test; import org.springframework.test.jpa.AbstractJpaTests;  public class NewClass extends AbstractJpaTests { `@Test` public void aTest(){ System.out.println(""Good"");      }  }  In Project Properties->Libraries, Add Compile Tests libraries Spring-Framework, JUnit 4 and TopLink Essentials. Then run the file,  Output:  ---  Testsuite: NewClass Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 0.047 sec  Testcase: warning(junit.framework.TestSuite$1):	FAILED No tests found in NewClass junit.framework.AssertionFailedError: No tests found in NewClass  Why the bug is in Spring:  ---  1. Remove Spring-Framework from Compile Tests libraries, it works. So not Netbeans issue.  2. Not Toplink JPA issue as well. You can replace it with Hibernate, still the same.  3. Change the test method name from aTest() to testA(), it works. Comment out `@Test` and also change aTest() to testA(), it still works. So seems spring-test is using junit38 syntax.  ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2008-11-18T14:55:34Z","2019-01-13T08:01:56Z"
"","9979","executeAndReturnKey throws Exception with Derby [SPR-5306]","**[Marshal King](https://jira.spring.io/secure/ViewProfile.jspa?name=marsking)** opened **[SPR-5306](https://jira.spring.io/browse/SPR-5306?redirect=false)** and commented  SimpleJdbcInsert throws exception with derby, claiming it doesn't support getGenerateKey, but I think derby does. For example, if use JDBC directly:  n = stmt.executeUpdate(); ResultSet rs = stmt.getGeneratedKeys();  The generatedKey can actually be returned. Thus I doubt the SimpleJdbcInsert  implementation in Spring 2.5.6.  Code Snippet:  ---  public class JpaDaoTest extends AbstractJpaTests { ... protected void onSetUpInTransaction() { SimpleJdbcInsert sql = new SimpleJdbcInsert(jdbcTemplate).withTableName(""MyTable"").usingGeneratedKeyColumns(""id""); Map params = new HashMap(2); params.put(""Column1"", ""a""); params.put(""Column2"", ""b""); //sql.compile(); returnedId = (Integer) sql.executeAndReturnKey(params);  ...  Result:  ---  org.springframework.dao.InvalidDataAccessResourceUsageException: The getGeneratedKeys feature is not supported by this database at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertAndReturnKeyHolderInternal(AbstractJdbcInsert.java:433) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertAndReturnKeyInternal(AbstractJdbcInsert.java:402) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.doExecuteAndReturnKey(AbstractJdbcInsert.java:356) at org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeAndReturnKey(SimpleJdbcInsert.java:106) at com.example.JpaDaoTest.onSetUpInTransaction(JpaDaoTest.java:59) at org.springframework.test.AbstractTransactionalSpringContextTests.onSetUp(AbstractTransactionalSpringContextTests.java:219) at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:101) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.access$001(AbstractAnnotationAwareTransactionalTests.java:71) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests$1.run(AbstractAnnotationAwareTransactionalTests.java:175) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runTest(AbstractAnnotationAwareTransactionalTests.java:283) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runTestTimed(AbstractAnnotationAwareTransactionalTests.java:254) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runBare(AbstractAnnotationAwareTransactionalTests.java:172) at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:174) at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:255)  Schema:  ---  CREATE TABLE MyTable ( id     		INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, Column1    	VARCHAR(255) NOT NULL, Column2    VARCHAR(255) NOT NULL ); CREATE INDEX IX_Ref ON MyTable (id);  ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2008-11-17T17:39:07Z","2019-01-13T21:51:06Z"
"","9882","Velocity WebappLoader requires ServetContext VelocityEngine attribute [SPR-5209]","**[Markus Kobler](https://jira.spring.io/secure/ViewProfile.jspa?name=markuskobler)** opened **[SPR-5209](https://jira.spring.io/browse/SPR-5209?redirect=false)** and commented  The current spring VelocityCongurator breaks standard velocity behaviour by not setting the ServletContext as a VelocityEngine attribute. This will break the velocity WebappLoader.   ---  **Affects:** 2.0.8, 2.5.5  **Attachments:** - [velocity-servlet-context.patch](https://jira.spring.io/secure/attachment/14760/velocity-servlet-context.patch) (_2.42 kB_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-10-10T23:30:58Z","2012-06-19T03:46:54Z"
"","10015","Make persistence exception translation work with JtaTransactionManager [SPR-5342]","**[marko asplund](https://jira.spring.io/secure/ViewProfile.jspa?name=aspa)** opened **[SPR-5342](https://jira.spring.io/browse/SPR-5342?redirect=false)** and commented  I'm using Spring and Java persistence api in a web application running on WAS 7.0. I've configured PersistenceExceptionTranslationPostProcessor in the bean factory to translate persistence exceptions from the JPA provider exceptions to Springs data access exception hierarchy. Exceptions get translated properly when using JpaTransactionManager but not with WebSphereUowTransactionManager. It appears that in the former case it's actually JpaTransactionManager  that does the translation and not the PersistenceExceptionTranslationInterceptor registered by the post processor. The JtaTransactionManager and its subclasses don't do exception translation directly and when a persistence exception is thrown by the transaction manager implementation, translation interceptor doesn't get a chance to handle this due to the mechanics of the Spring AOP (I'm using Java dynamic proxies). It's typical in many scenarios that JPA implementations only flush the modifications to the database when the transaction ends, so it's likely to be very common that exceptions get thrown from the transaction manager.  I think this could be fixed, at least in part, by making JtaTransactionManager allow a PersistenceExceptionTranslator to be injected. The transaction manager could then use the configured translator (if one exists), for translating the exceptions.   ---  **Affects:** 2.5.6  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-12-07T06:44:32Z","2012-06-19T09:36:16Z"
"","10619","ServletRequestAttributes.updateAccessedSessionAttributes() incorrectly set when unchanged [SPR-5951]","**[Mark Rohan](https://jira.spring.io/secure/ViewProfile.jspa?name=mrohan01)** opened **[SPR-5951](https://jira.spring.io/browse/SPR-5951?redirect=false)** and commented  In the ServletRequestAttributes.updateAccessedSessionAttributes(), line 223, an evaluation is made to determine if the old value and the new value registered to a particular session key are equal, as in ==. If true, then the attribute value is being  reset on the session. This seems counterintuitive in that session attribute values which have actually changed, i.e. are !=, will not be updated on the session.  This is causing a problem for items which implement HttpSessionBindingListener on Websphere, which blindly unbinds the original value and rebinds the same value. Tomcat seems to handle this gracefully by performing its own evaluation to determine if the session bound value has in fact changed and needs to be rebound.  Therefore, it seems that session attribute should only be updated when the values are != rather than ==.   ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2009-07-22T05:36:24Z","2019-01-12T16:39:12Z"
"","10465","Provide a non-@Component-sterotype annotation that tags a bean class to be scanned fro @Bean annotations [SPR-5795]","**[Mark Kralj-Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=mark%20kralj-taylor)** opened **[SPR-5795](https://jira.spring.io/browse/SPR-5795?redirect=false)** and commented  Spring component-scanning discovers `@Component` stereotype annotated classes. One thing that Spring does for these 'components' is to scan the class for `@Bean` annotations.  We have a use-case where we want a bean's class to be scanned for `@Bean` annotations, but without the bean being `@Component` stereotype annotated. - We want Spring to scan for `@Bean` annotations in the class for some beans configured in explicitly (esp in XML config) to Spring.  Please can spring provide a new annotation that: - marks a class so Spring scans it for `@Bean` annotations, when it is used as a Spring bean - without making the class eligible for component-scanning  Our specific use case is where Spring beans have internal components that Spring needs to know about so they can be detected by JMX exporting.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b8c1130eec0732091426908a90db66e4eddeb25c","closed","type: enhancement,","spring-projects-issues","2009-05-29T00:31:00Z","2012-06-19T03:43:48Z"
"","10838","CronSequenceGenerator bug scheduling next date when using day of week [SPR-6170]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6170](https://jira.spring.io/browse/SPR-6170?redirect=false)** and commented  The original description is here: http://jira.springframework.org/browse/INT-816   ---  **Affects:** 3.0 RC1  **Attachments:** - [INT-816.patch](https://jira.spring.io/secure/attachment/15755/INT-816.patch) (_10.16 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc207042d08a660cc595e01cecdb179376dfb2c5","closed","in: core,","spring-projects-issues","2009-10-01T08:25:08Z","2012-06-19T03:43:18Z"
"","10829","Task namespace usage should not require concurrent backport JARs [SPR-6161]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6161](https://jira.spring.io/browse/SPR-6161?redirect=false)** and commented  This should not happen:  java.lang.IllegalStateException: Failed to load ApplicationContext ... Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [...]; nested exception is org.springframework.beans.FatalBeanException: Invalid NamespaceHandler class [org.springframework.scheduling.config.TaskNamespaceHandler] for namespace http://www.springframework.org/schema/task: problem with handler class file or dependent class; nested exception is java.lang.NoClassDefFoundError: edu/emory/mathcs/backport/java/util/concurrent/ThreadPoolExecutor$AbortPolicy  ---  **Affects:** 3.0 RC1  **Issue Links:** - [INT-810](https://jira.spring.io/browse/INT-810) Remove the 'thread-pool-task-executor' element now that Spring 3 provides a ""task"" namespace (_**""is depended on by""**_) - #10918 ExecutorBeanDefinitionParser  must not directly depends on backport concurrent (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2af25b891f295949ff7748908b726985af0920c","closed","in: core,","spring-projects-issues","2009-09-29T03:31:22Z","2019-01-11T14:09:05Z"
"","10810","Add ErrorHandler strategy for MessageListener containers [SPR-6142]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6142](https://jira.spring.io/browse/SPR-6142?redirect=false)** and commented  The ErrorHandler interface was added for TaskScheduler implementations in 3.0. However, the interface itself is completely generic and could also be used for handling uncaught errors (other than JMSExceptions, which are already handled by the JMS ExceptionListener) in a MessageListener container rather than logging only.  First, the ErrorHandler interface should be moved from the 'scheduling' package to 'util'.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/616a48acc2e030ff9503ebfd3fec391ade77e3da, https://github.com/spring-projects/spring-framework/commit/dedecf7ae9b3326b96540f2b72aca465a8e8c85c","closed","type: enhancement,","spring-projects-issues","2009-09-22T07:54:19Z","2012-06-19T03:44:00Z"
"","10720","Add support for arrays in EL Selections and Projections [SPR-6051]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-6051](https://jira.spring.io/browse/SPR-6051?redirect=false)** and commented  Arrays of Object types and primitives should be supported.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/776edbcae3fda64a977b734602fb16b05a164b74","closed","type: enhancement,","spring-projects-issues","2009-08-28T08:20:12Z","2012-06-19T03:43:34Z"
"","10359","Add TilesViewResolver to enable fallback if tiles definition does not exist [SPR-5689]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-5689](https://jira.spring.io/browse/SPR-5689?redirect=false)** and commented  Currently the typical way of integrating Tiles is to use a TilesView as the 'viewClass' for a  UrlBasedViewResolver. Any UrlBasedViewResolver instance will prevent later resolvers in a chain (those with a higher 'order' value) from being invoked at all, because UrlBasedViewResolvers do not return null. In this particular case, the TilesView will be created and returned even if it the 'url' is an invalid tiles definition name.  However, it should be possible to add an earlier check within a TilesViewResolver implementation since the TilesContainer does provide an isValidDefinition(..) method. That way, we could return null and enable fallback to additional ViewResolvers in the chain.  For one thing, this would allow incremental adoption of Tiles within a large application that is currently using JSP via InternalViewResolver (and JstlView).  ---  **Issue Links:** - #10079 Make Tiles 2 easier to configure in Spring MVC  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-21T07:35:11Z","2019-01-11T16:39:07Z"
"","9913","SimpleMessageListenerContainer  and concurrent message handle [SPR-5239]","**[Mariusz W](https://jira.spring.io/secure/ViewProfile.jspa?name=mariuszw)** opened **[SPR-5239](https://jira.spring.io/browse/SPR-5239?redirect=false)** and commented  According to docs in SimpleMessageListenerContainer.setTaskExecutor, SimpleMessageListenerContainer  should handle messages (run listener in different threads when taskExecutor is set). In example attachement I produce messages and in consumer I Thread.sleep for 5 sec. - all messages are send but received sequentially after sleep time when I use taskExecutor. I used java.util.concurrent.ExecutorService to create work task in listener to make it handle messages parallel. ....Or maybe my documentation understanding is wrong?  Regards, mariusz   ---  **Affects:** 2.0.5  **Attachments:** - [SimpleMessageListenerContainer.zip](https://jira.spring.io/secure/attachment/14790/SimpleMessageListenerContainer.zip) (_2.12 kB_)","closed","status: invalid,","spring-projects-issues","2008-10-23T22:08:18Z","2019-01-13T21:51:15Z"
"","10434","Load-Time Weaving does not work in JBoss AS 5 [SPR-5764]","**[Marius Bogoevici](https://jira.spring.io/secure/ViewProfile.jspa?name=mbogoevici)** opened **[SPR-5764](https://jira.spring.io/browse/SPR-5764?redirect=false)** and commented  There are some issues regarding load-time weaving in JBoss AS5 - requiring a special LoadTimeWeaver to be implemented.  The implementation that can be used in JBoss AS5, can be found at: http://anonsvn.jboss.org/repos/jbossas/projects/spring-int/trunk/weaving.  If that can be incorporated in RC1, we also intend to provide a patch for 3.0.  ---  **Affects:** 2.5.6  **Attachments:** - [weaving.patch](https://jira.spring.io/secure/attachment/15420/weaving.patch) (_19.90 kB_)  **Issue Links:** - #10984 Investigate issues around local resource transaction management in JBoss 5.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c2e1f113f58d52b0817fd594f21bf80831162d64, https://github.com/spring-projects/spring-framework/commit/1dc1d5ef9a74a84838a1258f2d255a2268bcc47c, https://github.com/spring-projects/spring-framework/commit/471fbf7ebfcc8085db37d31a9f92e5966665ccde, https://github.com/spring-projects/spring-framework/commit/846c7f60003d4d7912e6a5b9fb54c8e1f26a263e, https://github.com/spring-projects/spring-framework/commit/f91d44691ec4a7dbeea6459786aecd60348a0032","closed","type: enhancement,","spring-projects-issues","2009-05-15T08:26:54Z","2019-01-11T17:34:05Z"
"","10369","Test context framework: flush problems should lead to test exceptions instead of failures [SPR-5699]","**[Marek Kaluzny](https://jira.spring.io/secure/ViewProfile.jspa?name=naff)** opened **[SPR-5699](https://jira.spring.io/browse/SPR-5699?redirect=false)** and commented  Since improvement made for #9988 it is impossible to write a test method with expected exception. For example I've got test which triggers unique constraint violation exception and that violation throw JpaSystemException. Marking test with `@Test`(expected) or `@ExpectedException` doesn't work, because test always ends with failure since org.springframework.test.context.transaction.TransactionalTestExecutionListener.endTransaction called by org.springframework.test.context.junit4.SpringMethodRoadie.runAfters will always try to flush the transaction.  I think that exceptions threw at the end of transaction should be propagated as test execeptions not as failures. I suppose that that was the main idea of ticket #9988.  ---  **Affects:** 3.0 M2  **Issue Links:** - #9988 Test context framework: `@Transactional` does not flush the Hibernate session before rollback - #10613 Document potential false positives when testing ORM code  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ee1938eb74f656225dab8604ea60cfd02191bb17, https://github.com/spring-projects/spring-framework/commit/29327798c11c6631009ab91d1e49d263fd8c7553  4 votes, 9 watchers","closed","type: bug,","spring-projects-issues","2009-04-26T08:48:30Z","2019-01-13T07:59:59Z"
"","10872","Add ConfigSlurperPlaceholderConfigurer [SPR-6204]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-6204](https://jira.spring.io/browse/SPR-6204?redirect=false)** and commented  Subclass of PropertyPlaceholderConfigurer that resolves placeholders from a properties object loaded using a Groovy's ConfigSlurper.  ConfigSlurperPlaceholderConfigurer also supports the concept of per environment configuration via ""environment"" and ""defaultEnvironment"" properties. The ""environment"" property will be typically set using a system property.   ---  **Attachments:** - [ConfigSlurperPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/15780/ConfigSlurperPlaceholderConfigurer.java) (_5.18 kB_) - [ConfigSlurperPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/15779/ConfigSlurperPlaceholderConfigurer.java) (_4.73 kB_) - [ConfigSlurperPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/15778/ConfigSlurperPlaceholderConfigurer.java) (_4.73 kB_) - [ConfigSlurperPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/15774/ConfigSlurperPlaceholderConfigurer.java) (_4.62 kB_)  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-07T07:36:44Z","2012-06-19T09:36:17Z"
"","10789","Dependency injection of @Configurable objects should work across test suites [SPR-6121]","**[Marc Ludwig](https://jira.spring.io/secure/ViewProfile.jspa?name=baronludwig)** opened **[SPR-6121](https://jira.spring.io/browse/SPR-6121?redirect=false)** and commented  #### Overview  We have a large number of unit/integration tests that assert behavior within our system and rely upon injection of dependencies into configurable domain objects.  These tests all work when executed individually; however, when executed within a suite (either through the IDE or Ant) certain tests fail as dependencies have not been injected into the `@Configurable` objects. We have also seen dependencies that were configured for test _X_ being injected into test _Y_ rather than the dependencies for test _Y_; but I have no test case for this.  ---  #### Steps to Reproduce  I have created a set of three tests -- tests 1 and 3 are basically identical. If these are executed in a suite the third test will fail as the dependency is not injected into the `@Configurable` object even though it is available to the test. This only occurs if test 2 is a Spring test.  See attached zip file.  ---  #### Further Resources  - [Spring Test Context Caching + AspectJ @Transactional + Ehcache pain](http://www.javacodegeeks.com/2014/04/spring-test-context-caching-aspectj-transactional-ehcache-pain.html) blog by Java Code Geeks  ---  **Affects:** 2.5.6, 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=77980  **Attachments:** - [springtest.zip](https://jira.spring.io/secure/attachment/15724/springtest.zip) (_3.15 MB_)  **Issue Links:** - #15989 SpringContexts not properly closed after test-class is finished (_**""is duplicated by""**_) - #11019 TestContext framework should support one AspectJ instance per ApplicationContext - #17123 AnnotationTransactionAspect retains reference to JpaTransactionManager from closed context  11 votes, 14 watchers","closed","has: votes-jira,","spring-projects-issues","2009-09-16T22:31:20Z","2020-11-04T16:12:57Z"
"","10309","The xsd http://www.springframework.org/schema/beans/spring-beans-2.5.xsd is broken [SPR-5638]","**[Marc des Garets](https://jira.spring.io/secure/ViewProfile.jspa?name=ttux)** opened **[SPR-5638](https://jira.spring.io/browse/SPR-5638?redirect=false)** and commented  I don't know if someone noticed but the xsd is broken: http://www.springframework.org/schema/beans/spring-beans-2.5.xsd   --- No further details from [SPR-5638](https://jira.spring.io/browse/SPR-5638?redirect=false)","closed","","spring-projects-issues","2009-03-31T02:13:23Z","2019-01-11T16:29:57Z"
"","10825","XFire 1.2.6 not compatible with Spring 3.0's CustomEditorConfigurer [SPR-6157]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-6157](https://jira.spring.io/browse/SPR-6157?redirect=false)** and commented  A code for XFire working with Spring 2.5.6 works fine, with the follow jars  activation-1.1.jar commons-logging-1.0.4.jar jdom-1.0.jar spring.jar","closed","in: core,","spring-projects-issues","2009-09-28T04:53:52Z","2019-01-11T14:09:14Z"
"","10654","Error in pointing links about versions for documentation and content [SPR-5986]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-5986](https://jira.spring.io/browse/SPR-5986?redirect=false)** and commented  In 16.3.3 The MultiActionController documentation http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch16s03.html#mvc-controller-multiaction  Has this information      http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/servlet/mvc/multiaction/MultiActionController.html > 2) in the suggested link has this text (even for 2.5.x) >    Code: >  > public [ModelAndView | Map | void] > against > public (ModelAndView | Map | String | void) > doesn't match >  > and >  > (HttpServletRequest, HttpServletResponse [,HttpSession] [,AnyObject]) > against > (HttpServletRequest request, HttpServletResponse response); > doesn't match    ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=75897  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/33bb81b3ab8b6c45d9f93a9f2605b5e696f4e401","closed","status: declined,","spring-projects-issues","2009-08-06T04:26:34Z","2019-01-12T16:39:11Z"
"","10726","ClassUtils.forName() does not support multi-dimensional arrays [SPR-6057]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-6057](https://jira.spring.io/browse/SPR-6057?redirect=false)** and commented  We've attempted to optimize serialization overhead on remoting by stripping ObjectStreamClass objects and replacing them with simple class name by overriding writeClassDescriptor() on ObjectOutputStreams, and using ClassUtils.forName() when overriding readClassDescriptor() on ObjectInputStreams. Out first attempt actually used Class.forName() but of course this did not support primitives nor arrays.  For a brief instant we thought we had this fixed by using ClassUtils.forName(), however we've found that multi-dimensional arrays are not correctly handled. For instanct, short[][] is internally represented as [[S, while String[][][] is represented as [[[java.lang.String;  We resolved this by relying instead on Apache Commons - their ClassUtils.getClass() implementation works correctly even in these cases. This is not a problem for our project since Commons was already a widely used dependency, but other projects would benefit from Spring having this fixed. Multi-dimensional arrays are particularly prominent in graphics and scientific applications.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a03ca8637219b6479f0063515b11f4a8f0f233db","closed","type: enhancement,","spring-projects-issues","2009-08-31T22:36:47Z","2012-06-19T03:44:06Z"
"","10377","org.springframework.web.servlet.DispatcherServlet noHandlerFound [SPR-5707]","**[Mamatha](https://jira.spring.io/secure/ViewProfile.jspa?name=mk)** opened **[SPR-5707](https://jira.spring.io/browse/SPR-5707?redirect=false)** and commented  I am getting this error org.springframework.web.servlet.DispatcherServlet  noHandlerFound WARNING: No mapping for [/myServlet/services/GetService] in DispatcherServlet with name 'myServlet'  I have tomcat context file context file \  web.xml has  ---  \ \contextConfigLocation\ \/WEB-INF/myServlet-servlet.xml\ \ \ \context\ \org.springframework.web.context.ContextLoaderServlet\ \1\ \ \ \web-sim-frwk\ \org.springframework.web.servlet.DispatcherServlet\ \1\ \ \ \myServlet\ \/services/*\ \  ---  myServlet-servlet.xml  \ \ \ /services/GetService=simulatorController \ \                                                                                                                           \  with this configuration when the browser sends a request http://host:port/myServlet/services/GetService i am getting the above error in log  but if i change URL pattern in web.xml \ \myServlet\ \/services/GetService\ \  it works even if i change myServlet-servlet.xml to  \ \ \ /services/*=simulatorController \ \                                                                                                                           \  I couldn't understand this behaviour. Could someone please explain what's happening here.  Thanks, MK  ---  **Affects:** 2.0.3","closed","status: invalid,","spring-projects-issues","2009-05-01T06:21:22Z","2019-01-13T21:50:09Z"
"","10614","InitDestroyAnnotationBeanPostProcessor @PostConstruct method may not get called [SPR-5945]","**[Magnus Jungsbluth](https://jira.spring.io/secure/ViewProfile.jspa?name=mju)** opened **[SPR-5945](https://jira.spring.io/browse/SPR-5945?redirect=false)** and commented  org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor :  if two classes (class A extends class B) both have a method called ""afterPropertiesSet()"" annotated with `@PostConstruct`, only the most concrete method gets called. This bug only occurs if the methods have an identical name.  To fix this behaviour, change LifecycleElement's hashCode() method to include the declaring class  public int hashCode() { return (this.method.getDeclaringClass().getName() + ""."" + this.method.getName()).hashCode(); }  Change equals() accordingly.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4deef3796e728fa2fc7e4d3c688befdcbf000f29","closed","in: core,","spring-projects-issues","2009-07-20T23:15:12Z","2012-06-19T03:43:17Z"
"","9941","Using Toplink JPA with query.getResultList() provide wrong results. HELP!  [SPR-5268]","**[Macias De La Rosa JesÃºs Gerardo](https://jira.spring.io/secure/ViewProfile.jspa?name=jegnet)** opened **[SPR-5268](https://jira.spring.io/browse/SPR-5268?redirect=false)** and commented  I use the next table ""FOOD"" with the content:  ID   NAME    TEXT                       CODE  --    ---------   ----------------------    -----  0    ONE       SALSA is good      10 1    TWO      CHILI is better        10  /**** In springDispatcher-servlet.xm JPA was configured as: *****/ /**********************************************************************/  \ \ \ \ \ \    /*** Using a class dataDAO.java with a getFoods() function:  \***/ /********************************************************************/  public class locationConceptDAO extends JpaDaoSupport { private List\ lFoods= null;      public List getFoods( final String sText, final Long CODE) {         String  sQuery  = null;                          sQuery = "" model.CODE = :vCODE AND UPPER(model.TEXT) LIKE :vText"";                          final String queryString = ""select model from food model where "" + sQuery;         try {             return getJpaTemplate().executeFind(new JpaCallback() {             public Object doInJpa(EntityManager em) throws PersistenceException {                   Query query = em.createQuery(queryString);                   query.setParameter(""vCODE"", CODE);                   query.setParameter(""vText"", ""%"" + sText.toUpperCase() + ""%"");                   lFoods= query.getResultList();                   return lFoods;                   }             });             } catch (RuntimeException re) {                     logger.error(""Search of Meeting Types failed"", re);                     throw re;             }         }  }  /**************************************************************************************************  When I use the function getFoods() as getFoods( ""sAlsA"", 10); the function query.getResultList() provide a result: ""0....ONE......SALSA is good.....10""  but if I use again this function as: getFoods( ""Chili"", 10); I get the old result ????` ""0....ONE......SALSA is good.....10""  It seems that JPA store one result and for each new SQL i get the same (old) result  IS THIS A BUG! ???? or HAVE I CONFIGURED SOMETHING WRONG IN springDispatcher-servlet.xm! ????  Please, WHO CAN HELP ME? **************************************************************************************************/   ---  **Affects:** 2.0.7, 2.0.8, 2.5.5","closed","status: invalid,","spring-projects-issues","2008-11-04T00:22:15Z","2019-01-12T05:33:56Z"
"","10116","Using InternalResourceView for content types other than text/html [SPR-5442]","**[Luis Montes](https://jira.spring.io/secure/ViewProfile.jspa?name=monteslu)** opened **[SPR-5442](https://jira.spring.io/browse/SPR-5442?redirect=false)** and commented  When using InternalResourceViewResolver and subclasses of InternalResourceView, it is impossible to send the client anything other than ""text/html"" for the content type.  You can return something else in a custom view, set something else on the view resolver, even change the content type in the JSP page, yet none have any affect on the response.    ---  **Affects:** 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6  **Reference URL:** http://forum.springframework.org/showthread.php?p=223959  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-01-29T01:42:55Z","2015-09-22T17:34:38Z"
"","10236","Annotation for exception handling inside annotation based Controllers [SPR-5565]","**[Lorenz Schumann](https://jira.spring.io/secure/ViewProfile.jspa?name=lorenz)** opened **[SPR-5565](https://jira.spring.io/browse/SPR-5565?redirect=false)** and commented  Let a class that is defined as `@Controller` and has `@RequestMapping` methods have one or multiple annotated methods that handle exceptions (e.g. MissingServletRequestParameterException) for that very handler (controller).  Example  `@Controller` public class MyController { `@RequestMapping` public String handleRequest(`@RequestParam`(required=true, value=""id"") Integer id) { return ""example""; }      @ExceptionResolver     public String handleAllExceltions() {         return ""view_for_general_exceptions"";     }               @ExceptionResolver(""org.springframework.web.bind.MissingServletRequestParameterException"")     public String handleParamExceltions() {         return ""view_for_param_exceptions"";     }  }  ---  **Affects:** 2.5.6  **Issue Links:** - #9354 Allow annotated methods on a Controller to be marked as exception handlers (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-03-11T22:20:24Z","2019-01-11T17:04:03Z"
"","9895","@Configureable doesn't work right [SPR-5221]","**[ljc yu](https://jira.spring.io/secure/ViewProfile.jspa?name=ljcyu)** opened **[SPR-5221](https://jira.spring.io/browse/SPR-5221?redirect=false)** and commented  when the main method is in the same class annoted by `@Configurable`, then run this class, `@Configural` doesn't work, there are not any properties being set.  ---  Person.java  import org.springframework.beans.factory.annotation.Configurable; import org.springframework.core.io.\*; import org.springframework.context.support.*; `@Configurable`(""person"") public class Person{ private String name; private int age; public void setName(String name){ System.out.println(""set name by spring""); this.name=name; } public void setAge(int age){ System.out.println(""set age by spring""); this.age=age; } public String toString(){ return name+""@""+age; } public static void main(String[] args){ new ClassPathXmlApplicationContext(""person.xml""); System.out.println(""new Person()""); Person aPerson=new Person(); System.out.println(aPerson); } }  ---  person.xml  \  \   \ \ \ \ \  then run with spring-agent.jar, java Person, the result is error: new Person() null@0  but if the main method is in any other class, the result is right: new Person() spring@12  ---  **Affects:** 2.5.5  **Issue Links:** - #9811 `@Configurable` does not work when type is already loaded due to Java bytecode verification (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-10-17T03:16:31Z","2019-01-13T08:02:22Z"
"","9880","SelectedValueComparator with custom property editor will select every options [SPR-5207]","**[LinWei Cheng](https://jira.spring.io/secure/ViewProfile.jspa?name=chenglinwei)** opened **[SPR-5207](https://jira.spring.io/browse/SPR-5207?redirect=false)** and commented  I am using   The commandObject.workflowModel is binding to the property with interface type looks like:  Interface IReferenceData{ String getCode(); void setCode(String code); String getDescription(); void setDescription(String description); }  the items is binding to a map with type: Map  for the IReferenceData type, I registered PropertyEditor as:  public class FormPropertyEditorRegistrar implements PropertyEditorRegistrar { public void registerCustomEditors(PropertyEditorRegistry registry) { registry.registerCustomEditor(IReferenceData.class, new ReferenceDataPropertyEditor()); } }  And my custom PE is:  public class ReferenceDataPropertyEditor extends PropertyEditorSupport implements PropertyEditor { `@Override` public String getAsText() { IReferenceData ref = (IReferenceData) getValue(); if( ref == null ){ return Constants.NULL_LABEL;  // which is ""---"" } return ref.getCode(); }      @Override     public void setAsText(String text) throws IllegalArgumentException     {         IReferenceData ref = (IReferenceData) getValue();         if( ref == null ){             ref =  createReferenceData();         }         ref.setCode(text);     }      }  But the problem occurred that every options listed in ""modelMap"" are checked. I looked and debugged into SelectedValueComparator, and found there might some bug in handling my usage scenario:  On line 104: if (!selected) { selected = exhaustiveCompare(boundValue, candidateValue, bindStatus.getEditor(), null); }  The very suspicious issue is it get property editor by ""bindStatus.getEditor()"", which get the same editor instance which is being used for the boundValue instance of ReferenceData under examining.  On line 191: else { editor.setAsText(candidateAsString); candidateAsValue = editor.getValue(); if (convertedValueCache != null) { convertedValueCache.put(editor, candidateAsValue); } } if (ObjectUtils.nullSafeEquals(boundValue, candidateAsValue)) { return true; } ""editor.setAsText(cadidateAsString)"" actually changed the boundValue, because the ""editor"" is the same one for the current ""boundValue""! From now on, the boundValue is miss assigned the value by this method call. Then the comparison of ""ObjectUtils.nullSafeEquals(boundValue, candidateAsValue)"" will always be true.  Should we create an new instance of ""editor"" for ""editor.setAsText(candidateAsString)"" so solve this issue?  Thanks a lot,  LinWei   ---  **Affects:** 2.5.5","closed","status: declined,","spring-projects-issues","2008-10-09T10:42:07Z","2019-01-12T16:27:52Z"
"","10803","Add support for iBatis 3 [SPR-6135]","**[libinsong](https://jira.spring.io/secure/ViewProfile.jspa?name=melin)** opened **[SPR-6135](https://jira.spring.io/browse/SPR-6135?redirect=false)** and commented  ---  **Affects:** 3.0 M4  **Issue Links:** - #10659 Add support for iBatis 3 (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-09-20T20:28:51Z","2019-01-11T14:10:27Z"
"","9990","AOP PointCuts: ProceedingJointPoint provides the synthetic(bridge) and not the real method [SPR-5317]","**[Liam Knox](https://jira.spring.io/secure/ViewProfile.jspa?name=liamknox)** opened **[SPR-5317](https://jira.spring.io/browse/SPR-5317?redirect=false)** and commented  I am not sure whether you determine this as a bug, though it seems both counter intuitive and undocumented  If you point cut a certain method you will not always get the underlying method as part of the ProceedingJointPoint, you may instead get the synthetic(bridge) method,  For example  `@CutHere` void myMethod(`@MyParam` param);  Depend on the context of usage ( i.e. Generic )  Method m = ((MethodSignature) pjp.getSignature()).getMethod()  May return a bridge method ( where further introspection would reveal no parameter annotations ) or the real method, where introspection on the method signature would reveal the parameter annotations  The only way I have found around this is via  BridgeMethodResolver.findBridgedMethod(key)  All though more by chance than via documentation  More discussion  http://forum.springsource.org/showthread.php?t=63403&page=1    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-11-24T12:16:08Z","2012-06-19T03:46:48Z"
"","10254","ComponentScanBeanDefinitionParser - enable BeanDefinition factory registration similar to TypeFilter registration [SPR-5583]","**[Les Hazlewood](https://jira.spring.io/secure/ViewProfile.jspa?name=lhazlewood)** opened **[SPR-5583](https://jira.spring.io/browse/SPR-5583?redirect=false)** and commented  I'd like to enable Spring's component scanner () to look for all Interfaces annotated with the `@Service` annotation.  Then for remoting scenarios, the client tier Scanner could find all interfaces annotated with `@Service` and then auto-generate remoting proxy stubs.  The server tier Scanner can find the same annotated interfaces and auto-generate the remoting exporters.  All of this would be really slick and work based on just the `@Service` annotation on one or more interfaces.  The problem currently is that the `@Service` annotation is really expected to be used within Class definitions - not Interfaces (indeed  the ClassPathScanningCandidateComponentProvider#isCandidateComponent(AnnotatedBeanDefinition beanDefinition) method explicitly discards Interfaces by default).  This is an important distinction because in most remoting environments, the actual business implementations of an Interface will not be shipped to the client VM, so annotating the implementation class won't work.  For example, in a business-tier environment using JMS remoting, 2 BeanDefinitions could be registered based on a single discovered `@Service` annotated Interface:  an InvocationListener and a ServiceExporter.  In the client-tier environment, a BeanDefinition that specifies some service ProxyFactoryBean would be registered.  Example config:      Where 'myBeanDefinitionFactory' would implement an interface that has a method that, given a MetadataReader returns a Collection\, i.e.  BeanDefinitionFactory#createBeanDefinitions(MetadataReader metadataReader) : Collection\  Then in ClassPathScanningCandidateComponentProvider (somewhere between lines 190 and 201):  Collection\ created= registeredBeanDefinitionFactory.createBeanDefinitions(locatedMetadataReader); ... candidates.addAll(created);   ---  **Affects:** 2.5.6, 3.0 M1, 3.0 M2","closed","status: bulk-closed,","spring-projects-issues","2009-03-18T09:20:26Z","2019-01-12T02:37:46Z"
"","10319","Please make AbstractApplicationContext#startupShutdownMonitor available to the users [SPR-5648]","**[LeoÅ¡ Bitto](https://jira.spring.io/secure/ViewProfile.jspa?name=leos)** opened **[SPR-5648](https://jira.spring.io/browse/SPR-5648?redirect=false)** and commented  Currently there is startupShutdownMonitor defined in AbstractApplicationContext as ""private final Object startupShutdownMonitor = new Object();"". Please make it available to the users, too. I think that ConfigurableApplicationContext#getStartupShutdownMonitor() would be nice.   ---  **Affects:** 3.0 M2  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-02T18:59:21Z","2018-12-27T11:24:24Z"
"","10298","Order of calling of the hook method postProcessBeforeInstantiation of multiple InstantiationAwareBeanPostProcessors should be made more useful [SPR-5627]","**[LeoÅ¡ Bitto](https://jira.spring.io/secure/ViewProfile.jspa?name=leos)** opened **[SPR-5627](https://jira.spring.io/browse/SPR-5627?redirect=false)** and commented  The fact is that if there are more InstantiationAwareBeanPostProcessors which implement the method postProcessBeforeInstantiation, the first one which returns something else than null from this method wins - its returned object gets used, and the methods postProcessBeforeInstantiation from the other InstantiationAwareBeanPostProcessors are not even called anymore. So that means that for the the most important InstantiationAwareBeanPostProcessors the method postProcessBeforeInstantiation should be called first, and the less important InstantiationAwareBeanPostProcessors it could be called later. Right now the order of calling is the following:  1. the InstantiationAwareBeanPostProcessors added by BeanFactoryPostProcessors, the ones added from the sooner registered BeanFactoryPostProcessors get called first  2. the InstantiationAwareBeanPostProcessors added from the configuration file of the ClassPathXmlApplicationContext (I have not tried other ApplicationContext implementations), the ones appearing closer to the beginning of the file get called first  3. the InstantiationAwareBeanPostProcessors added after the ClassPathXmlApplicationContext has started, by calling applicationContext.getBeanFactory().addBeanPostProcessor(beanPostProcessor), the ones added sooner get called first  I think that it would be more useful if the order of calling of this particular hook method (postProcessBeforeInstantiation) would be changed like this:  1. the InstantiationAwareBeanPostProcessors added after the ClassPathXmlApplicationContext has started, by calling applicationContext.getBeanFactory().addBeanPostProcessor(beanPostProcessor), the ones added later get called first (to allow overriding, since there seems to be no way how to remove a BeanPostProcessor)  2. the InstantiationAwareBeanPostProcessors added by BeanFactoryPostProcessors, the ones added from the later registered BeanFactoryPostProcessors get called first (to allow overriding, since there seems to be no way how to remove BeanFactoryPostProcessor)  3. the InstantiationAwareBeanPostProcessors added from the configuration file of the ClassPathXmlApplicationContext (and other ApplicationContext implementations), the ones appearing further from the beginning of the file get called first (just to make the ordering compliant with the previous two rules)    ---  **Affects:** 3.0 M2","closed","in: core,","spring-projects-issues","2009-03-27T10:39:18Z","2015-09-22T17:34:32Z"
"","10297","The method postProcessBeforeInstantiation of InstantiationAwareBeanPostProcessor should be called before each bean instantiation! [SPR-5626]","**[LeoÅ¡ Bitto](https://jira.spring.io/secure/ViewProfile.jspa?name=leos)** opened **[SPR-5626](https://jira.spring.io/browse/SPR-5626?redirect=false)** and commented  Currently if the user uses an InstantiationAwareBeanPostProcessor which has a method postProcessBeforeInstantiation which returns null, this method is called only when the first instance of a prototype bean is being created. I would need this method to be called before each instantiation of any bean for the purpose of tracking of the dependencies between the bean instances being created.   ---  **Affects:** 2.5.6, 3.0 M2  **Attachments:** - [beforeInstantiationResolved.patch](https://jira.spring.io/secure/attachment/15542/beforeInstantiationResolved.patch) (_2.52 kB_) - [DependencyTracking.java](https://jira.spring.io/secure/attachment/16437/DependencyTracking.java) (_4.00 kB_)","closed","type: enhancement,","spring-projects-issues","2009-03-27T08:16:39Z","2015-09-22T17:34:36Z"
"","10283","Please allow making inner beans as singletons [SPR-5612]","**[LeoÅ¡ Bitto](https://jira.spring.io/secure/ViewProfile.jspa?name=leos)** opened **[SPR-5612](https://jira.spring.io/browse/SPR-5612?redirect=false)** and commented  Currently all inner beans are created as prototypes. I think that it would be useful to allow creating them as singletons, too - simply honour when the user adds the attribute scope=""singleton"" to inner beans. Additionally I think that if the user would not specify any value for the attribute lazy-init with the inner bean singletons, it should default to true, but if the user explicitly specifies lazy-init=""false"" this should be honoured - then the inner bean singletons would be created exactly the same way as the regular outer bean singletons.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-03-25T19:08:35Z","2012-06-19T09:36:23Z"
"","10281","refuse Map and Set with duplicate entries [SPR-5610]","**[LeoÅ¡ Bitto](https://jira.spring.io/secure/ViewProfile.jspa?name=leos)** opened **[SPR-5610](https://jira.spring.io/browse/SPR-5610?redirect=false)** and commented  It would be nice if Spring Framework would reject any Map or Set which contain duplicate entries by throwing some exception. It would be perfect if that could be the default behaviour with the upcoming version 3.0, and optional in the currect versions 2.x (where it could be too disruptive if made default). There are two main reasons: First is that the current behaviour, which tolerates duplicates, can easily cover a configuration mistake (consider especially Map with more entries with the same key and different values). Second is that if the used Map or Set implementation is order-preserving, it is unclear how are the duplicates going to be ordered.   ---  **Affects:** 2.5.6, 3.0 M2  **Reference URL:** http://forum.springsource.org/showthread.php?p=233277","closed","type: enhancement,","spring-projects-issues","2009-03-25T00:34:06Z","2018-12-27T11:25:17Z"
"","10277","Unable to destroy the inner bean instance [SPR-5606]","**[LeoÅ¡ Bitto](https://jira.spring.io/secure/ViewProfile.jspa?name=leos)** opened **[SPR-5606](https://jira.spring.io/browse/SPR-5606?redirect=false)** and commented  In my project I need to be able to destroy the bean instances without destroying the whole BeanFactory. I know that destroying singletons is a bad idea, so I destroy only prototypes. Since all inner beans are prototypes, I would like to be able to destroy the inner beans, too. I use ConfigurableBeanFactory#destroyBean(beanName, beanInstance) to destory the beans, because that is the only suitable method I found. It works perfectly for regular (outer) beans, however it refuses to destroy inner beans, which I consider to be a bug. As a workaround I do not use inner beans, but that leads to a bad-looking configuration files and opens a possibility for an error when anybody uses the inner bean by mistake.   ---  **Affects:** 2.5.6, 3.0 M2  **Reference URL:** http://forum.springsource.org/showthread.php?t=69304","closed","type: enhancement,","spring-projects-issues","2009-03-24T02:56:28Z","2015-09-22T17:34:33Z"
"","10033","Threads bottlenecking in DefaultSingletonBeanRegistry when using Wicket's @SpringBean annotation for injection [SPR-5360]","**[Leo Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=leok)** opened **[SPR-5360](https://jira.spring.io/browse/SPR-5360?redirect=false)** and commented  I actually wrote to the Wicket mailing list initially about this: http://www.nabble.com/SpringBeanLocator-and-%40SpringBean-performance-issue-td20964687.html  and they suggest that this is a deeper Spring issue. Basically, I'm using Wicket's `@SpringBean` annotation to inject beans throughout our webapp. When we load tested the app, we found threads blocking for extended periods at this particular point:  Object blocked: 145.133 ms, Object wait: 0 ms, CPU wait: 2.118 ms, I/O wait: 9.017 ms, CPU: 73.847 ms      * org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton (DefaultSingletonBeanRegistry.java:180, bci=22, server compiler)           o blocked on java.util.concurrent.ConcurrentHashMap (0x000000cd67f9d170)     * org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch (AbstractBeanFactory.java:415, bci=41, server compiler)     * org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType (DefaultListableBeanFactory.java:223, bci=142, server compiler)     * org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType (DefaultListableBeanFactory.java:202, bci=4, server compiler)     * org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType (AbstractApplicationContext.java:933, bci=5, server compiler)     * org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors (BeanFactoryUtils.java:143, bci=8, server compiler)     * org.apache.wicket.spring.SpringBeanLocator.getBeanNameOfClass (SpringBeanLocator.java:104, bci=2, server compiler)     * org.apache.wicket.spring.SpringBeanLocator.getBeanName (SpringBeanLocator.java:192, bci=29, server compiler)     * org.apache.wicket.spring.SpringBeanLocator.isSingletonBean (SpringBeanLocator.java:133, bci=13, server compiler)     * org.apache.wicket.spring.injection.annot.AnnotProxyFieldValueFactory.getFieldValue (AnnotProxyFieldValueFactory.java:90, bci=46, server compiler)     * org.apache.wicket.injection.Injector.inject (Injector.java:108, bci=87, server compiler)     * org.apache.wicket.injection.ConfigurableInjector.inject (ConfigurableInjector.java:39, bci=6, server compiler)     * org.apache.wicket.injection.ComponentInjector.onInstantiation (ComponentInjector.java:52, bci=5, server compiler)     * org.apache.wicket.Application.notifyComponentInstantiationListeners (Application.java:974, bci=20, server compiler)     * org.apache.wicket.Component. (Component.java:873, bci=35, server compiler)     * org.apache.wicket.MarkupContainer. (MarkupContainer.java:105, bci=2, server compiler)     * org.apache.wicket.markup.html.WebMarkupContainer. (WebMarkupContainer.java:39, bci=2, server compiler)     * org.apache.wicket.markup.html.WebMarkupContainerWithAssociatedMarkup. (WebMarkupContainerWithAssociatedMarkup.java:42, bci=2, server compiler)     * org.apache.wicket.markup.html.panel.Panel. (Panel.java:76, bci=2, server compiler)  [...snip...]  We're able to hack around it in our code and avoid this bottleneck, which resulted in us getting 50-75% more requests per second. Looking at some of the Spring 3.0 code, it looks like this class has not changed much so we'll probably run into this problem when we upgrade. Is there a way to make this code path more concurrent? With Spring 3.0 using Java 5, it seems like the use of read/write locks might squeeze more concurrency out of these bean lookups.  ---  **Affects:** 2.5.6  **Attachments:** - [NonBlockingWebApplicationContext.java](https://jira.spring.io/secure/attachment/17089/NonBlockingWebApplicationContext.java) (_4.05 kB_)  **Issue Links:** - #14452 Non-singleton beans performance issue  (_**""duplicates""**_) - #13410 Parallel bean initialization during startup  10 votes, 14 watchers","closed","has: votes-jira,","spring-projects-issues","2008-12-12T03:32:47Z","2019-01-11T16:24:06Z"
"","10509","Adding trim-capability to property configurers [SPR-5839]","**[Laura Arhire](https://jira.spring.io/secure/ViewProfile.jspa?name=larhire)** opened **[SPR-5839](https://jira.spring.io/browse/SPR-5839?redirect=false)** and commented  It would be a good option to have for the PropertyOverrideConfigurer and the PropertyPlaceholderConfigurer being able to turn on trimming of property values. This way if the user adds spaces after properties it would not break functionality  ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=246869  **Issue Links:** - #12450 Add valueSeparator property to context:property-placeholder - #18041 Add 'null-value' attribute to  - #12158 Support bean names containing '.' in PropertyOverrideConfigurer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a7ad49adcfbf9b72f50675dc0da22bcc2075621f  5 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-19T00:44:14Z","2019-08-22T17:00:25Z"
"","10714","Downloads missing: 2.5.x (except for 2.5.0 RC1 and RC2) [SPR-6045]","**[Larry Edelstein](https://jira.spring.io/secure/ViewProfile.jspa?name=ladlestein)** opened **[SPR-6045](https://jira.spring.io/browse/SPR-6045?redirect=false)** and commented  I can't find the other 2.5.x versions of the framework for download.  From this link:  http://www.springsource.com/download/community  one can see 2.5.0 RC1 and 2.5.0 RC2, but nothing from 2.5 final to 2.5.6.   ---  **Affects:** 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6","closed","in: core,","spring-projects-issues","2009-08-26T05:49:03Z","2019-01-12T05:33:10Z"
"","10861","Make it possible to restrict component scanning to certain classloader or classloader level by calling ClassLoader.findResources/findResource by reflection [SPR-6193]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-6193](https://jira.spring.io/browse/SPR-6193?redirect=false)** and commented  Make it possible to restrict component scanning to certain classloader or classloader level. This feature is required for Grails 1.2 and I've been investigating a solution there.  Tomcat's default catalina.sh/catalina.bat includes system CLASSPATH environment variable in the classpath of Tomcat's java process. In development environments this could cause a lot of extra delays when a lot of jar files are scanned (using a path like **/*.class). See Jiras: http://jira.codehaus.org/browse/GRAILS-5034 , http://jira.springframework.org/browse/SPR-6086 .  Technically it's possible to restrict to certain classloader by invoking ""findResources"" and ""findResource"" by reflection. Here's an example I've been testing. I just happened to extend ClassLoader, this could be in a helper class as well since reflection is used for the invocation anyways.  ```     /**      * This ClassLoader is used to restrict getResources & getResource methods only to the       * parent ClassLoader. getResources/getResource usually search all parent level classloaders.      * (look at details in source code of java.lang.ClassLoader.getResources)      *       * @author Lari Hotari      *      */     private static final class ParentOnlyGetResourcesClassLoader extends ClassLoader {     	private static final Method findResourcesMethod=ReflectionUtils.findMethod(ClassLoader.class, ""findResources"", String.class);     	private static final Method findResourceMethod=ReflectionUtils.findMethod(ClassLoader.class, ""findResource"", String.class);     	static {     		ReflectionUtils.makeAccessible(findResourceMethod);     		ReflectionUtils.makeAccessible(findResourcesMethod);     	}     	     	private ClassLoader rootLoader;     	     	public ParentOnlyGetResourcesClassLoader(ClassLoader parent, ClassLoader rootLoader) {     		super(parent);     		this.rootLoader = rootLoader;     	}      	@Override     	public Enumeration getResources(String name) throws IOException {     		if(rootLoader != null) {     			// search all parents up to rootLoader     			Collection urls=new LinkedHashSet();     			findResourcesRecursive(getParent(), name, urls);    			    return Collections.enumeration(urls);     		} else {     			return invokeFindResources(getParent(), name);     		}     	}  		private void findResourcesRecursive(ClassLoader parent, String name, Collection urls) { 			Enumeration result=invokeFindResources(parent, name); 			while(result.hasMoreElements()) { 				urls.add(result.nextElement()); 			} 			if(parent != rootLoader) { 				findResourcesRecursive(parent.getParent(), name, urls); 			} 		}  		@SuppressWarnings(""unchecked"") 		private Enumeration invokeFindResources(ClassLoader parent, String name) { 			return (Enumeration)ReflectionUtils.invokeMethod(findResourcesMethod, parent, name); 		}  		@Override 		public URL getResource(String name) {     		if(rootLoader != null) {     			return findResourceRecursive(getParent(), name);     		} else {     			return  invokeFindResource(getParent(), name);     		} 		}  		private URL findResourceRecursive(ClassLoader parent, String name) { 			URL url = invokeFindResource(parent, name); 			if(url != null) { 				return url; 			} else if(parent != rootLoader) { 				return findResourceRecursive(parent.getParent(), name); 			} else { 				return null; 			} 		} 		 		private URL invokeFindResource(ClassLoader parent, String name) { 			return (URL)ReflectionUtils.invokeMethod(findResourceMethod, parent, name); 		}     } ```    ---  **Affects:** 3.0 RC1  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-06T04:32:35Z","2018-12-26T16:56:17Z"
"","10215","BridgeMethodResolver is unable to locate bridged method for Groovy 1.6 ""@Lazy volatile"" annotated public properties [SPR-5544]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-5544](https://jira.spring.io/browse/SPR-5544?redirect=false)** and commented  I'm using the new `@Lazy` AST transformation available in Groovy 1.6 for creating thread safe lazy loading properties .  `@Lazy` GroovyDoc: http://groovy.codehaus.org/gapi/groovy/lang/Lazy.html , http://groovy.codehaus.org/gapi/org/codehaus/groovy/transform/LazyASTTransformation.html LazyASTTransformation source code: http://fisheye.codehaus.org/browse/groovy/branches/GROOVY_1_6_0/src/main/org/codehaus/groovy/transform/LazyASTTransformation.java?r=13570  My problem is in a Grails 1.1 application which uses Spring's BeanWrapper. I've also reported the problem to Grails JIRA (http://jira.codehaus.org/browse/GRAILS-4192).  Calling BeanWrapperImpl.getPropertyDescriptors() fails with IllegalStateException. (""Unable to locate bridged method for bridge method..."") in BridgeMethodResolver. The problem appears _only_ when ""`@Lazy` volatile"" is used (creates thread safe lazy initialization). A property annotated with `@Lazy` but without volatile succeeds.  Workaround to the problem: I checked the LazyASTTransformation source code (while I was writing this issue) and happened to test adding ""private"" to the `@Lazy` volatile property (private `@Lazy` volatile) and that works.  I've created a simple test case for this problem:  SimpleGroovyBean.groovy:  public class SimpleGroovyBean{ String name `@Lazy` volatile List lazyloaded={ ['some','items','in','the','list'] }() `@Lazy` List lazyloadedNoProblem={ ['no','problem'] }() private `@Lazy` volatile List lazyloadedVolatileNoProblem={ ['no','problem','when','private'] }() }  SimpleGroovyBeanTest.groovy:  import groovy.util.GroovyTestCase import junit.framework.TestCase import org.springframework.beans.BeanWrapperImpl  public class SimpleGroovyBeanTest extends GroovyTestCase { public void testBeanWrapper() { def bean = new SimpleGroovyBean() def beanWrapper = new BeanWrapperImpl(bean) assertNotNull(beanWrapper.getPropertyDescriptors()) } }  Stack trace: java.lang.IllegalStateException: Unable to locate bridged method for bridge method 'public java.util.List SimpleGroovyBean.get$lazyloaded()' at org.springframework.core.BridgeMethodResolver.findBridgedMethod(BridgeMethodResolver.java:77) at org.springframework.beans.GenericTypeAwarePropertyDescriptor.\(GenericTypeAwarePropertyDescriptor.java:58) at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:246) at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:143) at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:251) at org.springframework.beans.BeanWrapperImpl.getPropertyDescriptors(BeanWrapperImpl.java:258) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoCachedMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:229) at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:52) at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:43) at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116) at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:120) at SimpleGroovyBeanTest.testBeanWrapper(SimpleGroovyBeanTest.groovy:9) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:164)  ---  **Affects:** 2.5.6, 3.0 M2  This issue is a sub-task of #10088","closed","in: core,","spring-projects-issues","2009-03-04T16:22:54Z","2019-01-11T17:00:47Z"
"","9960","Connection leak problem when using TransactionSychronizationManager with JMSTemplate [SPR-5287]","**[Lao Shing Kit](https://jira.spring.io/secure/ViewProfile.jspa?name=sklao)** opened **[SPR-5287](https://jira.spring.io/browse/SPR-5287?redirect=false)** and commented  I found that there is a connection leak problem when using TransactionSynchronizationManager with JMSTemplate. The detail scenario is also posted in spring forum: http://forum.springframework.org/showthread.php?t=60176  The program flow is: - Business logic register to listen transaction commit event - Transaction commit - Spring loop the registered object and notify them - Each registered object get notification and call JMS - JMS register to transaction commit event again in order to release resources after committment (","closed","status: declined,","spring-projects-issues","2008-11-10T12:15:22Z","2019-01-12T16:27:47Z"
"","10845","HttpHeadersTests fails with non-english locale [SPR-6177]","**[Kristian Rosenvold](https://jira.spring.io/secure/ViewProfile.jspa?name=krosenvold)** opened **[SPR-6177](https://jira.spring.io/browse/SPR-6177?redirect=false)** and commented  HttpHeadersTests.date (and possibly others) fail for my locale. I'm not sure if the problem is in the test or the code.   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8738fd7b7bd2c3710d15603debf09ddff6a670cf","closed","type: bug,","spring-projects-issues","2009-10-01T22:59:48Z","2012-06-19T03:42:52Z"
"","10649","Possible regression in snapshot build of spring 3.0 [SPR-5981]","**[Kristian Rosenvold](https://jira.spring.io/secure/ViewProfile.jspa?name=krosenvold)** opened **[SPR-5981](https://jira.spring.io/browse/SPR-5981?redirect=false)** and commented  We have been running a CI system building from the spring snapshot repo. At Mon Aug 03 12:49:06 CEST 2009 this build turned red. Inspection of your build system at http://build.springframework.org/build/viewBuildSummary!default.action?buildKey=SPR-TRUNKSNAPSHOT reveals that the snapshot repo build has been running red for something like 4 weeks (!!).  This means the problem/change has been introduced in one of the commits as follows:  svn log -vr1600:1679  The **problem** we are experiencing is a regression wrt 2.5.6, but may be intentional in spring 3.0. There is a slight chance this is an intentional change, so I will describe the problem first:  We have a FactoryBean for interface MYIF, and the FactoryBean is annotated with a Qualifier say `@Qualifier`(""FACTORY""). There exists other implementations of MYIFthat are annotated with `@Qualifier`(""IMPL"").      @Autowired     @Qualifier(""FACTORY"")     private MYIF myIF;  This worked fine under 2.5.6 and prior versions of 3.0, but stopped working at this time. Is this an intended change ?    ---  **Attachments:** - [qualifierFailingTest.patch](https://jira.spring.io/secure/attachment/15590/qualifierFailingTest.patch) (_3.58 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2093a841403eb23aae067aaf08a9004777e8ee9","closed","in: core,","spring-projects-issues","2009-08-04T19:44:31Z","2012-06-19T03:43:19Z"
"","10532","Allow for concurrent test execution in the TestContext framework [SPR-5863]","**[Kristian Rosenvold](https://jira.spring.io/secure/ViewProfile.jspa?name=krosenvold)** opened **[SPR-5863](https://jira.spring.io/browse/SPR-5863?redirect=false)** and commented  #### Status Quo  Newer versions of JUnit support concurrent test execution; however, the _Spring TestContext Framework_ is not designed for concurrency.  #### Proposed Solution  The enclosed fixes sharpen focus on concurrency (including making mutable state much more distinct from immutable state), increasing separation between data for each test method run and the class they are being run on.  The patch consists of a failing test (patch 1) and a fix (patch 2), including several new tests. If you choose to apply the patch with the failing test, you must revert this before applying the fix (failing test is contained in fix patch). The included failing test may not produce concurrency issues (fail) in all cases and on all hardware platforms. They have been known to fail consistently on 3 different machines, usually upon first run.  ##### Details of the Patch  The patch contains minor changes to the `ContextLoader` interface. The most significant changes have been made to the `TestContextManager` and `TestContext` classes.  Additionally upon completing the functionality, I had multiple deadlocks in the JVM when running my real test suite. I solved this by using a Java 5 `ReentrantReadWriteLock` in the `RequestAttributes.getSessionMutex()` method. It really looks to me like the creation of this mutex should be moved to one of the loader filters, since it's always created as of this patch.  Additionally, the patch contains a `MockContextLoader` that transfers attributes between threads. I'd really like you guys to check that code out before accepting it; there may be other smarter ways of doing this. It's only a part of the test code-base, but once it's included it sets a standard.  #### Real-life Tests  The patch has been applied to a local version of Spring 3 that has been running stably with multi-core machines and multi-CPU servers too. We have been running a continuous build using parallel classes, methods, and a combination of both. This is a full-scale build that was adaptable to multi-threaded test execution. The application under test uses lots of web-scopes, etc.  #### Proposed Documentation  > **Parallel Test Execution** >  > From version 3.0, Spring supports parallel test execution in the _Spring TestContext Framework_. Executing builds in parallel with JUnit is only supported in later versions of JUnit, and it is recommended to use at least JUnit 4.6 for this feature. Please also note that there's no guarantee your tests will run properly in parallel; a number of general concurrency issues have to be taken into account when executing tests in parallel. Your runner can usually let you choose between classes, methods, and a combination of both. Classes are usually the easiest to get working; ""a combination of both"" is the hardest. All three modes are supported.  ---  **Affects:** 3.0 M3  **Attachments:** - [1concurrencyFix2051.patch](https://jira.spring.io/secure/attachment/15764/1concurrencyFix2051.patch) (_77.48 kB_) - [2tests2051.patch](https://jira.spring.io/secure/attachment/15765/2tests2051.patch) (_31.53 kB_) - [3428_SPR5863.patch](https://jira.spring.io/secure/attachment/16722/3428_SPR5863.patch) (_53.32 kB_) - [3dirtiesContext2051.patch](https://jira.spring.io/secure/attachment/15766/3dirtiesContext2051.patch) (_34.46 kB_) - [completeFix.patch](https://jira.spring.io/secure/attachment/15500/completeFix.patch) (_189.66 kB_) - [springFailingTest.patch](https://jira.spring.io/secure/attachment/15499/springFailingTest.patch) (_33.11 kB_)  **Issue Links:** - #15263 Debug logging for DependencyInjectionTestExecutionListener breaks injection for parallel tests (_**""is duplicated by""**_) - #18684 Problems running integration tests in parallel using SpringClassRule and SpringMethodRule (_**""is duplicated by""**_) - #19549 using ParallelComputer to test spring test cases got error (_**""is duplicated by""**_) - #17028 Improve thread safety in Spring JUnit integration (_**""is duplicated by""**_) - #13582 Test execution issue: for ""shared"" test contexts in multithreading - #13499 `@DirtiesContext` does not destroy all cached singleton beans - #15166 Do not serialize ApplicationContext creation in the TestContext framework - #12343 Use soft or weak references for context caching in the TestContext framework - #12710 Limit size of context cache in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e822e4cbe87b09b901eb2363bc884a635a96a01e, https://github.com/spring-projects/spring-framework/commit/3dc6f1133c1208d212220777fda585f3371f5cc0, https://github.com/spring-projects/spring-framework/commit/fbfad8695ecc9262f23fd31b0b425eca38b58d01, https://github.com/spring-projects/spring-framework/commit/3e96cab0bb9e2861f9555f81117eb46098674f8e, https://github.com/spring-projects/spring-framework/commit/2699504cb8150d7be3e3a4033215acb8fbf1e851, https://github.com/spring-projects/spring-framework/commit/a10a8e56df80e6855d104d07010e6f1445100a61, https://github.com/spring-projects/spring-framework/commit/ec7aefa8589d2baf0aea28eac6fd8baae1167de6  42 votes, 40 watchers","closed","has: votes-jira,","spring-projects-issues","2009-06-24T09:55:12Z","2019-01-13T07:59:21Z"
"","10005","JmsException.getMessage throws NPE if a cause doesn't have a message [SPR-5332]","**[Konstantin Khrapchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=c0s)** opened **[SPR-5332](https://jira.spring.io/browse/SPR-5332?redirect=false)** and commented  Under some circumstances a JMS Exception may have a message unassigned i.e. its getMessage() returns null. Like in #9948 that fixed JmsUtils.buildExceptionMessage I can propose a fix like public String getMessage() { String message = super.getMessage(); Throwable cause = getCause(); if (cause instanceof JMSException) { Exception linkedEx = ((JMSException) cause).getLinkedException(); if (linkedEx != null && (cause.getMessage() != null && cause.getMessage().indexOf(linkedEx.getMessage()) == -1 || cause.getMessage() == null)) { message = message + ""; nested exception is "" + linkedEx; } } return message; }  ---  **Affects:** 2.5.6  **Issue Links:** - #9948 JmsUtils.buildExceptionMessage throws NPE if the linked exception doesn't have a message (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2008-12-01T02:20:17Z","2019-01-12T16:50:38Z"
"","10572","Allow multiple values be specified in the runtime for tests filtering by @IfProfileValue [SPR-5903]","**[Konstantin Boudnik](https://jira.spring.io/secure/ViewProfile.jspa?name=cos)** opened **[SPR-5903](https://jira.spring.io/browse/SPR-5903?redirect=false)** and commented  It is a typical situation when one might have to run a combination of tests belonging to a different test-groups. E.g. a test method A is a part of 'smoke' and a test method B belongs to 'integration' test group. If I want to execute test methods A and B I have to run two separate JUnit runs: one for 'smoke' and the separate one for 'integration'.  It's be great to have a way to combine together tests from more than one test group in a single test run. E.g.  ``` % ant -Dtest-groups=smoke,integration run-tests  ```  This approach resembles one of TestNG has for its test groups, which is very convenient IMO  ---  **Affects:** 2.5.6  **Issue Links:** - #10571 Class-level `@IfProfileValue` overrides method-level `@IfProfileValue` settings - #8334 Create annotation to group tests - #9538 Introduce strategy for determining if a profile value is enabled for a particular test environment - #9538 Introduce strategy for determining if a profile value is enabled for a particular test environment (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2009-07-06T10:01:18Z","2019-01-13T07:59:12Z"
"","10571","Class-level @IfProfileValue overrides method-level @IfProfileValue settings [SPR-5902]","**[Konstantin Boudnik](https://jira.spring.io/secure/ViewProfile.jspa?name=cos)** opened **[SPR-5902](https://jira.spring.io/browse/SPR-5902?redirect=false)** and commented  It seems that current implementation of `@IfProfileValue` is deficient for the following reasons: - it is possible to create a mutual-lock situation when none of a class' test methods would be executed no matter what values are set in the runtime - current semantic contradicts an existing and documented one of `@IfProfileValue`' values, e.g. OR semantic  The code below clearly demonstrate a situation when no matter which test-group's value is set ('all', 'fast', or 'quick') none of the tests will be executed, because the class belongs to a group 'all', but its test methods are from different test groups.  It seems to be a problem in the SpringJUnit4ClassRunner semantic's implementation that a class level `@IfProfileValue` actually overwrites any method's level `@IfProfileValue`. Should it have same semantic as as `@IfProfileValue`'s 'values', i.e. with OR semantic, the problem won't exist (see the documentation at http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/test/annotation/IfProfileValue.html)  ``` import org.junit.BeforeClass; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.test.annotation.IfProfileValue; import org.springframework.test.context.TestExecutionListeners; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  @RunWith(SpringJUnit4ClassRunner.class) @TestExecutionListeners({}) @IfProfileValue(name = ""test-group"", value = ""all"")  public class MyTests {   @BeforeClass   public static void setUp () {     System.out.println(""test-group is set to: "" + System.getProperty(""test-group""));   }   @Test   @IfProfileValue(name = ""test-group"", values = {""fast"", ""quick""})   public void testOne() {     System.out.println(""testOne(): Quick stuff"");   }    @Test   @IfProfileValue(name = ""test-group"", value = ""fast"")   public void testTwo() {     System.out.println(""testTwo(): Fast stuff"");   } } ```  ---  **Affects:** 2.5.6  **Issue Links:** - #16521 Improve documentation for `@IfProfileValue` precedence - #9203 ProfileValueUtils#isTestEnabledInThisEnvironment should use current test class to determine IfProfileValue annotation - #9718 Annotating an integration test with `@IfProfileValue` at class level still loads the applications contexts even when the profile is not activated - #10583 ProfileValueUtils should enforce class-level usage of `@IfProfileValue` to override method-level usage - #10572 Allow multiple values be specified in the runtime for tests filtering by `@IfProfileValue`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b869d57f2dd0203ef0097da86dd2ea8a7d35372","closed","status: declined,","spring-projects-issues","2009-07-06T06:51:25Z","2019-01-13T07:59:14Z"
"","10146","Multi-dimensional array brakes HTTP invokers remoting [SPR-5473]","**[Konstantin Bakaras](https://jira.spring.io/secure/ViewProfile.jspa?name=kbakaras)** opened **[SPR-5473](https://jira.spring.io/browse/SPR-5473?redirect=false)** and commented  Hi, I am using spring HTTP invokers remoting for my client-server interoperation.  When I was using spring 2.5.0 everything worked perfectly. I decided to upgrade 2.5.0 to 2.5.6. After switching Spring's version there appeared a problem with deserialization of remote call result, if the letter has int[][] objects in its object tree.  I also tried spring 2.5.5 and had same error result with.  The issue is definitely on the client side (if I use 2.5.0 on client side and 2.5.6 on server side then everything's OK). I suspect changes have been made with unmarshalling of remote invocation results. Suspicious new class in 2.5.5 is ConfigurableObjectInputStream.  Sample code to reproduce error:  1. Server side exporter bean:    \    \    \    \  2. Service class:    package ru.glance.test.service;  import org.springframework.stereotype.Service;  import ru.glance.test.client.ITestService;  `@Service` public class TestService implements ITestService {      public int[][] get() {         return new int[][] `1, 2, 3}, {4, 5, 6}, {7, 8, 9`;     }  }  Client bean: \ \ \ \ \ \ \ \   ---  **Affects:** 2.5.5, 2.5.6","closed","type: bug,","spring-projects-issues","2009-02-11T06:12:06Z","2012-06-19T03:46:37Z"
"","10316","Incorrect .classpath file for org.springframework.context [SPR-5645]","**[Klaus Lehner](https://jira.spring.io/secure/ViewProfile.jspa?name=klu2)** opened **[SPR-5645](https://jira.spring.io/browse/SPR-5645?redirect=false)** and commented  I've just checked out the 3.0 trunk of the springframework, built it as described in the spring blog, imported it into eclipse, but there is an error in the .classpath file of the project org.springframework.context, therefore Eclipse cannot build the project  line 33 says:        but correct would be        as it seems the bundle name of org.antlr was changed from 2.7.6 to 3.0.1 from com.springsource.antlr to com.springsource.org.antlr   ---  **Affects:** 3.0 M2","closed","in: core,","spring-projects-issues","2009-04-01T20:37:59Z","2012-06-19T03:47:02Z"
"","10844","Load time weaving does not work for classes in external references (i.e. JARs packaged in EAR's APP-INF/lib folder) [SPR-6176]","**[Klaus Kreuzwieser](https://jira.spring.io/secure/ViewProfile.jspa?name=klaus.kreuzwieser)** opened **[SPR-6176](https://jira.spring.io/browse/SPR-6176?redirect=false)** and commented  We have annotated classes with `@Configurable` and want that all `@Autowired` fields are injected. This works fine if all classes annotated with `@Configurable` are located in the WEB-INF/lib folder (for a web application), but does not work when the classes are in a JAR modules in APP-INF/lib folder.  Consider the following scenario: An EAR consists of several application modules (i.e. WAR files) which have roughly the same dependencies. To prevent the packaging of duplicate JAR files in all WARs, we create ""skinny WAR files"" (see http://maven.apache.org/plugins/maven-war-plugin/examples/skinny-wars.html). The WAR dependecies are packaged in a library folder (i.e. APP-INF/lib) and are referenced via the Class-Path setting in the WAR's META-INF/MANIFEST.MF. All classes annotated with `@Configurable` which are located in the external referenced JAR files are not woven at load time. All classes annotated with `@Configurable` which are packaged into the web application itself (either under WEB-INF/classes or WEB-INF/lib) are correctly woven at load time.  We are using WebLogic 10.3 as J2EE container, but I have found a similar problem (http://forum.springsource.org/showthread.php?t=50778) concerning JBoss - so this problem seems to be container unrelated.  I'l attach 2 zip files for reproduction: ltw-fat works fine, ltw-skinny throws a NullPointerException because the Configurable Conf1 is not woven.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=50778  **Attachments:** - [ltw-fat.zip](https://jira.spring.io/secure/attachment/15759/ltw-fat.zip) (_14.76 kB_) - [ltw-skinny.zip](https://jira.spring.io/secure/attachment/15760/ltw-skinny.zip) (_15.20 kB_)","closed","type: enhancement,","spring-projects-issues","2009-10-01T18:20:18Z","2009-12-14T03:46:55Z"
"","10130","@RequestParam is work inconsistent among differecen platform. [SPR-5457]","**[kiwi ong](https://jira.spring.io/secure/ViewProfile.jspa?name=kiwionly)** opened **[SPR-5457](https://jira.spring.io/browse/SPR-5457?redirect=false)** and commented  hi,  i use window for development and deploy on Lniux.  however, for `@RequestParam`  this work for window      public void doGet(@RequestParam String code, HttpServletResponse response)   but value need to specify in `@RequestParam` to work in Linux,      public void doGet(@RequestParam(""code"") String code, HttpServletResponse response)  else the code will throw exception  java.lang.IllegalStateException: No parameter specified for `@RequestParam` argument of type [java.lang.Integer], and no parameter name information found in class file either. org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:140) .....  I wondering should we make it consisnt for every platform. like make it mandatorry for `@RequestParam` value.  regards, kiwionly  ---  **Affects:** 2.5.6  **Issue Links:** - #10046 `@PathVariable` doesn't always work without the value specified in the use of the annotation","closed","status: declined,","spring-projects-issues","2009-02-03T19:48:16Z","2019-01-13T08:01:14Z"
"","9967","SimpleJdbcTemplate not able retrieve data from Iseries DB2 data base. [SPR-5294]","**[Kishore](https://jira.spring.io/secure/ViewProfile.jspa?name=kishorev)** opened **[SPR-5294](https://jira.spring.io/browse/SPR-5294?redirect=false)** and commented  I have used Spring SimpleJdbcTemplate for data base access layer. It is returning zero row for any query which are having condition based on primary key of table.  Trace is below.  org.springframework.dao.EmptyResultDataAccessException: Incorrect result size: expected 1, actual 0 at org.springframework.dao.support.DataAccessUtils.requiredSingleResult(DataAccessUtils.java:71) at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:722) at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:732) at org.springframework.jdbc.core.simple.SimpleJdbcTemplate.queryForObject(SimpleJdbcTemplate.java:151) at com.twc.ivr.dao.AccountProfileDaoImpl.findAccount(AccountProfileDaoImpl.java:107)   ---  **Affects:** 2.5.5","closed","in: data,","spring-projects-issues","2008-11-14T03:34:29Z","2019-01-11T15:26:38Z"
"","10012","Add JAR index to all JAR artifacts to speedup classloading [SPR-5339]","**[Kirk Rasmussen](https://jira.spring.io/secure/ViewProfile.jspa?name=blackbeltdev)** opened **[SPR-5339](https://jira.spring.io/browse/SPR-5339?redirect=false)** and commented  Since 1.3, JarIndex is introduced to optimize the class searching process of class loaders for network applications, especially applets.  http://java.sun.com/j2se/1.4.2/docs/guide/jar/jar.html#JAR%20Index  This can be accomplished with Ant using:    I'm not sure the if a Maven equivalent exists at the moment.    ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-12-04T06:53:29Z","2015-09-22T18:20:32Z"
"","9951","AbstractWizardFormController: Method validatePage hasn't HttpServletRequest parameter [SPR-5278]","**[Kirill Trofimov](https://jira.spring.io/secure/ViewProfile.jspa?name=sinnus)** opened **[SPR-5278](https://jira.spring.io/browse/SPR-5278?redirect=false)** and commented  During validation HttpSession or HttpServletRequest needed. Please, add HttpServletRequest  parameter to validatePage method.   ---  **Affects:** 2.5.5  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2008-11-06T22:47:25Z","2019-01-12T16:27:48Z"
"","10697","SchedulerFactoryBean does not register manually set triggers when started manually [SPR-6028]","**[Kirill Shepitko](https://jira.spring.io/secure/ViewProfile.jspa?name=yamert)** opened **[SPR-6028](https://jira.spring.io/browse/SPR-6028?redirect=false)** and commented  I have found an issue when one have to start SchedulerFactoryBean manually without any triggers or jobs defined in XML.  I have to load task definitions from database, so I should start SchedulerFactoryBean manually (in app context I defined property autoStartup=false). Then I discovered that setting Trigger array to the bean (setTriggers())before staring it doesn't work as it's described:  Quote: * Register a list of Trigger objects with the Scheduler that * this FactoryBean creates. *   \If the Trigger determines the corresponding JobDetail itself, * the job will be automatically registered with the Scheduler. * Else, the respective JobDetail needs to be registered via the * ""jobDetails"" property of this FactoryBean.  Here's how I am trying to start the scheduler: Trigger[] triggerArray = createMyTriggers(....); schedulerFactoryBean.setTriggers(triggerArray); schedulerFactoryBean.start();  The jobs do not start. It appears that no triggers or jobs are registered in scheduler after I start it (scheduler.getTriggerGroupNames() returns empty array).  I found out where the problem is when I took a look at source code.  It appeared that setTriggers() does not do what it is described to do - it doesn't register anything, it's just a setter. The method that does the real job is registerJobsAndTriggers(). It's not called in start() - it's actually called in afterPropertiesSet() - which is called at bean init time.  The workaround is creating a subclass of SchedulerFactoryBean which overrides start() method with the one that calls registerJobsAndTriggers() before starting the Quartz scheduler.  I think that registerJobsAndTriggers() invocation should be moved to start() method. The current implementation works well only when triggers are defined in context XML.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=73123","closed","type: enhancement,","spring-projects-issues","2009-08-19T20:29:05Z","2012-06-18T12:45:08Z"
"","10602","ShadowingClassLoader loadClass is non thread safe and can so cause java.lang.LinkageError when an already loaded class is attempted to be loaded [SPR-5933]","**[Kieron Edwards](https://jira.spring.io/secure/ViewProfile.jspa?name=kierone)** opened **[SPR-5933](https://jira.spring.io/browse/SPR-5933?redirect=false)** and commented  This is the exception when trying to load org.apache.xml.dtm.ref.DTMManagerDefault from ShadowingClassLoader in a multithreaded environment (I have assigned intensive parsing tasks to multiple threads). I can get around this by subclassing AbstractJpaTests :-      @Override     protected void customizeResourceOverridingShadowingClassLoader(ClassLoader shadowingClassLoader){     	((ShadowingClassLoader)shadowingClassLoader).excludePackage(""org.apache.xml."");     }  but Im wondering if this multi-threaded problem could affect the production environment. Any thoughts, nudges in the right direction would be appreciated, stack trace below ...  java.lang.LinkageError: loader (instance of  org/springframework/test/jpa/OrmXmlOverridingShadowingClassLoader): attempted  duplicate class definition for name: ""org/apache/xml/dtm/ref/DTMManagerDefault"" at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:703) at java.lang.ClassLoader.defineClass(ClassLoader.java:548) at org.springframework.instrument.classloading.ShadowingClassLoader.doLoadClass(ShadowingClassLoader.java:151) at org.springframework.instrument.classloading.ShadowingClassLoader.loadClass(ShadowingClassLoader.java:102) at org.apache.xml.dtm.ObjectFactory.findProviderClass(ObjectFactory.java:508) at org.apache.xml.dtm.ObjectFactory.lookUpFactoryClass(ObjectFactory.java:219) at org.apache.xml.dtm.ObjectFactory.createObject(ObjectFactory.java:133) at org.apache.xml.dtm.ObjectFactory.createObject(ObjectFactory.java:103) at org.apache.xml.dtm.DTMManager.newInstance(DTMManager.java:137) at org.apache.xpath.XPathContext.\(XPathContext.java:102) at org.apache.xpath.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:115)   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-07-15T13:36:59Z","2019-01-12T05:33:18Z"
"","10716","Automatic optimization of circular reference order [SPR-6047]","**[Khasbulatov Denis](https://jira.spring.io/secure/ViewProfile.jspa?name=dkhasbul)** opened **[SPR-6047](https://jira.spring.io/browse/SPR-6047?redirect=false)** and commented  I have three bean:  public class Bean1 {      private Bean2 bean2;          public Bean1(Bean2 bean2){     	this.bean2 = bean2;     }  }  public class Bean2 {      private Bean3 bean3;          public void setBean3(Bean3 bean3){     	this.bean3 = bean3;     }  }  public class Bean3 { private Bean1 bean1;      public void setBean1(Bean1 bean1){     	this.bean1 = bean1;     }  }  And main class  import org.springframework.context.support.FileSystemXmlApplicationContext;  public class Main { public static void main(String[] args) { FileSystemXmlApplicationContext context = new FileSystemXmlApplicationContext(""classpath:spring.xml""); context.getBean(""bean2""); } }  If in spring.xml I have  \  \           	                    	                    	       \ then I can create a bean, but if I will change spring.xml a bit  \  \           	                    	                    	       \ I'm getting exceptions caused by Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'bean1': Requested bean is currently in creation: Is there an unresolvable circular reference? It looks like a bug to me.   ---  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-27T02:01:38Z","2015-09-22T17:34:31Z"
"","10205","Multiple Forms Controller [SPR-5534]","**[Khaled Yousfi](https://jira.spring.io/secure/ViewProfile.jspa?name=yk)** opened **[SPR-5534](https://jira.spring.io/browse/SPR-5534?redirect=false)*** and commented  The multiple forms controller allows developers to create a web page (a JSP) with many forms.  This feature can for instance helps spring users to define a web page with a login+search forms on the top of the page and some other forms on the main page.    ---  **Affects:** 3.0 M1, 3.0 M2  **Attachments:** - [notes.pdf](https://jira.spring.io/secure/attachment/15176/notes.pdf) (_150.37 kB_) - [smfc.zip](https://jira.spring.io/secure/attachment/15170/smfc.zip) (_3.75 MB_) - [smfc.zip](https://jira.spring.io/secure/attachment/15169/smfc.zip) (_3.75 MB_)","closed","type: enhancement,","spring-projects-issues","2009-03-01T04:26:08Z","2018-12-26T10:46:58Z"
"","11930","Jaxb2Marshaller should not require @XmlType [SPR-7271]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7271](https://jira.spring.io/browse/SPR-7271?redirect=false)** and commented  The Jaxb2Marshaller.supportsInternal() method currently requires that the target class has the `@XmlType` annotation. However, I can see no reason for this, Jaxb should work OK without it.  The annotation is automatically generated by XJC, but for hand-written JAXB bindings, `@XmlType` is often omitted, since it's only relevant to the XML Schema, and has no impact on the marshalling behaviour.  Can this check be removed?   ---  2 votes, 2 watchers","closed","in: data,","spring-projects-issues","2009-09-16T00:24:22Z","2019-01-11T14:11:38Z"
"","10827","parseStringValue gone from PropertyPlaceholderConfigurer [SPR-6159]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-6159](https://jira.spring.io/browse/SPR-6159?redirect=false)** and commented  Between 3.0.0 M4 and RC1, the protected parseStrongValue method disappeared from PropertyPlaceholderConfigurer. For custom subclasses, this method was the main entry point into the superclass functionality. Since it had not been deprecated, it seemed like the correct thing to do, but has now been removed, breaking compile-time compatibility between 2.5 and 3.0.  Can the method be reinstated somehow, that perhaps invokes the new methods that do the work? It can then be marked as deprecated.  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10981 parseStringValue gone from PropertyPlaceholderConfigurer (_**""is duplicated by""**_)  2 votes, 2 watchers","closed","in: core,","spring-projects-issues","2009-09-28T20:39:01Z","2019-01-11T14:09:21Z"
"","10611","MarshallingHttpMessageConverter should not require both marshaller and unmarshaller [SPR-5942]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5942](https://jira.spring.io/browse/SPR-5942?redirect=false)** and commented  MarshallingHttpMessageConverter.afterPropertiesSet() asserts that both the marshaller and unmarshaller have been set. However, there are use cases for which only one of these two is required.  I suggest making this check when the marshaller or unmarshaller is first used, rather than at init time.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/307fb0aec8c455d4c24aedb07e54e523bbf09428","closed","type: enhancement,","spring-projects-issues","2009-07-20T00:52:17Z","2012-06-19T03:44:02Z"
"","10541","""primary"" bean definitions in child context should take preference over those in parent context [SPR-5871]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5871](https://jira.spring.io/browse/SPR-5871?redirect=false)** and commented  In general terms, if you have two beans of type A, both defined as primary=""true"", and another bean configured to `@Autowire` a bean of type A, then this will fail, with:  | No unique bean of type [A] is defined: more than one 'primary' bean found among candidates: [...]  This is good. However, imagine now the situation where the first bean of type A is in a parent context, and the second bean of type A is in a child context, with both still marked as primary=""true"". If I have a bean in the child context which `@Autowires` a bean of type A, then it still fails, with the same error.  is it not logical to expect that the primary=""true"" bean in the child context to be selected in preference to the bean in the parent context, even though both are marked as primary=""true""?   ---  **Affects:** 2.5.6  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/15514/test.zip) (_1.51 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-26T03:32:47Z","2012-06-19T03:43:19Z"
"","10448","dot in URL breaks @PathVariable binding [SPR-5778]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5778](https://jira.spring.io/browse/SPR-5778?redirect=false)** and commented  Take the following REST endpoint:  ``` @RequestMapping(""/lat/{latitude}/long/{longitude}"") public void testLatLong(@PathVariable String latitude, @PathVariable String longitude) { 	System.out.println(""Latitude = "" + latitude); 	System.out.println(""Longitude = "" + longitude); } ```  If you hit this with the URL  ``` /lat/123/long/456  ```  it works fine, with both variables binding as expected. If, however, you try  ``` /lat/0.1/long/0.1 ```  you get  ``` Latitude='0.1', longitude='0' ```  The second dot in the URL is causing the trailing 1 to be stripped off somewhere, so that latitude is bound correctly, but longitude isn't.  If you add a trailing slash to the mapping (i.e. ""/lat/{latitude}/long/{longitude}/"") and add a trailing slash to the URL, it works fine.  This may be related to #8317, but that issue looks to have been corrupted somehow (affects M3, fixed for M3?)  ---  **Affects:** 3.0 M3  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2009-05-21T22:15:08Z","2019-01-12T16:27:07Z"
"","10442","Annotation handler method matching doesn't get method/param choice right [SPR-5772]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5772](https://jira.spring.io/browse/SPR-5772?redirect=false)** and commented  Consider the following MVC Controller. When calling a URL with something like ""test/myParam=1"", I'd expect the second handler method to be invoked, whereas in fact the first one gets invoked.  The workaround is to add method=GET on the second method also, since then the param filter works as expected. But shouldn't the param filter take precendence over the method filter?  ``` @Controller @RequestMapping(""/test*"") public class TestController {    @RequestMapping(method = RequestMethod.GET)   public void doStuff(Model model){     ...   }    @RequestMapping(params = ""myParam"")   public void doStuff(@RequestParam(""myParam"") int myParam, Model model){     ...   }  } ```    ---  **Affects:** 2.5.6  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2009-05-19T20:22:46Z","2012-06-19T03:43:31Z"
"","10438","Rearrange logic in ServletHandlerMethodInvoker.getModelAndView() [SPR-5768]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5768](https://jira.spring.io/browse/SPR-5768?redirect=false)** and commented  In ServletHandlerMethodInvoker.getModelAndView(), the presense of a custom ModelAndViewResolver is checked for before the presense of `@ResponseStatus` on the handler method.  If ModelAndViewResolver resolves, then getModelAndView() exits immediately, before the `@ResponseStatus` is checked and the status set accordingly.  I suggest that the order here be reversed, checking for the annotation first, since the annotation on the controller is more specific than the ModelAndViewResolver, which is context-wide. Additionally, this would allow REST applications to specify a custom ModelAndViewResolver for rendering POJO return values, whilst still using `@ResponseStatus` on the controller.   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-05-18T03:10:12Z","2012-06-19T03:43:04Z"
"","10437","Misleading error message in HandlerMethodInvoker.resolveRequestBody() [SPR-5767]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5767](https://jira.spring.io/browse/SPR-5767?redirect=false)** and commented  Line 450 of HandlerMethodInvoker.resolveRequestBody throws the exception ""Cannot extract response"" when it fails to find a content type in the inbound request.  As well as the message itself being confusing, is the check itself really necessary? If there are HttpMessageConverters present that do not care about the content type, should the framework be enforcing it?   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d7d1ae89f366475e28589bfe8a39f840a1175773  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-05-18T01:49:15Z","2012-06-19T03:43:49Z"
"","10436","@ResponseBody [SPR-5766]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5766](https://jira.spring.io/browse/SPR-5766?redirect=false)** and commented  It seems odd and undesirable that the annotation-style of MVC controllers should only make use of HttpMessageConverter on the request, and not the response. Specifically, `@RequestBody` -annotated arguments can be resolved using HttpMessageConverter .read(), but there's no support for rendering the response using HttpMessageConverter .write().  This is addressed to some degree in #10100, but I'm focussing here more on writing elegant REST controllers; the controller should be able to take the typed and unmarshalled request body Object, and should be able to return a similarly type Object for marshalling.  The ModelAndViewResolver approach suggested in #10100 just doesn't seem right.  Would it be possible for the standard return value resolution logic to consult with any HttpMessageConverters in the context, as happens with `@RequestBody` annotations? There doesn't seem to be a need for a `@ResponseBody` annotation.  ---  **Affects:** 3.0 M3  **Issue Links:** - #10100 Allow for custom processing or result objects returned from handler/controller methods","closed","type: enhancement,","spring-projects-issues","2009-05-18T00:47:51Z","2019-01-11T17:34:20Z"
"","10416","Allow XStreamMarshaller subclasses to customise XStream object [SPR-5746]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5746](https://jira.spring.io/browse/SPR-5746?redirect=false)** and commented  XStream provides many methods to control the serialization of objects, e.g. the various alias() methods. If using XStreamMarshaller, then these methods cannot be invoked.  I suggest that XStreamMarshaller be modified to have a protected initXStream() method which subclasses can override, which is called during post-construct.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9cbc1d502d0c0ead391ffd65bf1cbd812ed53654","closed","type: enhancement,","spring-projects-issues","2009-05-11T03:11:19Z","2012-06-19T03:43:11Z"
"","10415","Support lazy initialization within Jaxb2 OXM classes [SPR-5745]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5745](https://jira.spring.io/browse/SPR-5745?redirect=false)** and commented  Jaxb2Marshaller and Jaxb2Unmarshaller initialise their JAXBContext objects inside afterPropertiesSet(). In some cases, particularly with large, complex schema bindings, the creation of the JAXBContext can take a long time (>10 seconds). It would be much preferably to create the context lazily, allowing the marshaller/unmarshaller to initialise quickly, and don't create the jaxb context until it is first needed.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58d3e704bff9a5aa28e364608f2341b61fca74c7","closed","type: enhancement,","spring-projects-issues","2009-05-11T02:56:35Z","2012-06-19T03:44:05Z"
"","10414","@Required doesn't play nice with @Configuration and @Bean [SPR-5744]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5744](https://jira.spring.io/browse/SPR-5744?redirect=false)** and commented  I've been using M3 to try porting fragments of existing applications to use `@Configuration` and `@Bean` instead of XML bean definitions.  The bean classes make heavy use of `@Required`. When I try to configure one of these beans using annotations, and injecting collaborators java-style, the context fails to start up, saying that a `@Required` property has not been set.  This is a problem, because these existing application classes are used everywhere, mostly using the `@Required` annotation in conjunction with XML bean definitions. Also, the context:component-scan tag which is used to locate the `@Configuration` classes implicitly adds a RequiredAnnotationBeanPostProcessor to the context.  It's not clear how to handle this, unless the framework can automagically figure out that the `@Bean` method is injecting the collaborators.  I've created a standalone test case illustrating the problem.   ---  **Affects:** 3.0 M3  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/15378/test.zip) (_1.33 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7b019cd5c5285d81f0aea967be8af021eac8b07","closed","type: enhancement,","spring-projects-issues","2009-05-11T02:33:09Z","2012-06-19T03:42:58Z"
"","10239","ServletContextResource.getDescription() should include the context path [SPR-5568]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5568](https://jira.spring.io/browse/SPR-5568?redirect=false)** and commented  ServletContextResource.getDescription() does not currently include any information on the context itself. I suggest it includes the context path in addition to the existing relative resource path.   --- No further details from [SPR-5568](https://jira.spring.io/browse/SPR-5568?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-03-12T04:21:00Z","2012-06-19T09:36:13Z"
"","10197","Add JMX ObjectName property editor [SPR-5526]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5526](https://jira.spring.io/browse/SPR-5526?redirect=false)** and commented  Can we have javax.management.ObjectName added to the list of types which Spring has a built-in property editor for?   ---  **Affects:** 2.5.6, 3.0 M2","closed","type: enhancement,","spring-projects-issues","2009-02-25T21:09:11Z","2018-12-28T11:41:42Z"
"","10145","Add some log output when a context has finished shutdown [SPR-5472]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5472](https://jira.spring.io/browse/SPR-5472?redirect=false)** and commented  AbstractApplicationContext.doClose() logs a message when it commences shutdown, but nothing once shutdown has completed.  In applications where there are many contexts in a hierarchy, it can be tricky to trace what's happening to which contexts and when, and some logging once the context has closed would help with this.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-02-11T04:39:03Z","2012-06-19T09:36:28Z"
"","10144","Give UrlBasedViewResolver.createView() access to the request object [SPR-5471]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5471](https://jira.spring.io/browse/SPR-5471?redirect=false)** and commented  UrlBasedViewResolver.createView() currently is not supplied with the current request object, and so does not have the option to create a different view based on some aspect of the current request (e.g. a session attribute).  Similarly for the canHandle() method.  Can it be refactored to allow this?  My use case is that I have an application ""personality"" attribute stored in the http session that I need to examine before deciding whether my custom ViewResolver can handle the view name. This would best be done in an overriden canHandle() method.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-02-10T23:54:58Z","2012-06-19T09:36:17Z"
"","10131","Allow  within  elements. [SPR-5458]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5458](https://jira.spring.io/browse/SPR-5458?redirect=false)** and commented  Please alter the beans XML schema to allow \ within \, for consistency with \   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-02-03T21:16:07Z","2012-06-19T09:36:18Z"
"","10121","Allow ParameterizableViewController to take a View instead of viewName [SPR-5447]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5447](https://jira.spring.io/browse/SPR-5447?redirect=false)** and commented  Please modify ParameterizableViewController so that I can inject it with a View object, as an alternative to injecting a view name.  It should only allow one or the other, validated at runtime.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-30T02:21:30Z","2012-06-19T09:36:30Z"
"","10119","Extend @RequestMapping to explicitly indicate no view to resolve [SPR-5445]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5445](https://jira.spring.io/browse/SPR-5445?redirect=false)** and commented  Currently, if your `@RequestMapping-annotated` method wants to indicate to the framework that no view should be resolved upon completion of the method, then it needs to declare the HttpServletResponse as one of its parameters.  In some cases, however, the response object is not necessary, but you still don't want Spring to attempt to render a view. For example, I have an AJAX web app, with the browser sending AJAX POST calls to the server. These POSTs are handled by a `@RequestMapping` method, and they perform some action and then just return. They do not render a view or write anything to the response because the browser doesn't need one - it's essentially a void return RPC call.  The current workaround is to either declare the response parameter, or return a View object that does nothing, neither of which is very nice. I suggest an additional optional argument to `@RequestMapping` which explicitly tells AnnotationMethodHandlerAdapter not to render a view.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-29T22:11:16Z","2012-06-13T07:01:02Z"
"","10016","SpringExpressionsParser doesn't work with newer version of ANTLR [SPR-5343]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5343](https://jira.spring.io/browse/SPR-5343?redirect=false)** and commented  SpringExpressionsParser refers to the ruleMemo field in the org.antlr.runtime.BaseRecognizer subclass.  This field was removed from BaseRecognizer in 2007  http://fisheye2.atlassian.com/browse/antlr/runtime/Java/src/org/antlr/runtime/BaseRecognizer.java?r1=3920&r2=3994  SpringExpressionsParser should be updated to work with the current version of ANTLR, if possible.    ---  **Affects:** 3.0 M1  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-12-07T21:54:20Z","2012-06-19T03:46:57Z"
"","10010","Rationalise ThreadPoolTaskExecutor and ScheduledExecutorFactoryBean [SPR-5337]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5337](https://jira.spring.io/browse/SPR-5337?redirect=false)** and commented  There is currently a gap in functionality between ThreadPoolTaskExecutor, which is offers lots of ways of configuring a ThreadPoolExecutor but hides it behind a TaskExecutor facade, and SheduledExecutorFactoryBean, which generates a ScheduledThreadPoolExecutor and is a FactoryBean.  It feels like these two should be brought together somehow. I've created a subclass ThreadPoolTaskExecutor which implements FactoryBean and exposes the native ThreadPoolExecutor.  I think that SheduledExecutorFactoryBean could itself just be a subclass of ThreadPoolTaskExecutor, but which overrides the method which creates the executor instance.  So, how about a class called ThreadPoolExecutorFactory, which provides facilities for configuring and instantiating ThreadPoolExecutor instances, and then a variety of subclasses of this, including ThreadPoolTaskExecutor (which wraps the ThreadPoolExecutor in a TaskExecutor facade), and ThreadPoolExecutorFactoryBean (which exposes the ThreadPoolExecutor directly). SheduledExecutorFactoryBean would simply become a special case of ThreadPoolExecutorFactoryBean.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-12-03T21:10:11Z","2012-06-19T03:47:19Z"
"","9911","Default value for @RequestParam [SPR-5237]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5237](https://jira.spring.io/browse/SPR-5237?redirect=false)** and commented  From #8915:  Kenny MacLeod added a comment - 13/Dec/07 12:05 PM Alternatively, perhaps `@RequestParam` could take an optional ""defaultValue"" attribute? It'd have to be a string, subject to the same conversion rules as if the parameter had been present. This would work for primitives as well as reference types.  Connor Barry added a comment - 24/Oct/08 01:36 AM I agree, a defaultValue attribute would be really helpful here, to mimic the set of functions in ServletRequestUtils that allow a default to be set if it's not present, for example: ServletRequestUtils.getBooleanParameter(request, name, defaultVal)  ---  **Affects:** 2.5 final  **Issue Links:** - #8915 optional boolean `@RequestParam` fails on missing parameter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0012c1e2da3069bd0201855e9957da2a90944b73","closed","type: enhancement,","spring-projects-issues","2008-10-23T19:11:50Z","2019-01-13T08:02:17Z"
"","9957","StringUtils.getFilename(String) should parse any kind of file separator [SPR-5284]","**[Kengkaj S.](https://jira.spring.io/secure/ViewProfile.jspa?name=kengkaj.s)** opened **[SPR-5284](https://jira.spring.io/browse/SPR-5284?redirect=false)** and commented  Currently, StringUtils.getFilename(String) code is [code]path.lastIndexOf(FOLDER_SEPARATOR);[/code] which FOLDER_SEPARATOR is ""/"", so it doesn't work with Windows file separator.  ---  **Affects:** 2.5.6  **Issue Links:** - #18237 CommonsMultipartFile.getOriginalFilename() does not strip file path properly","closed","type: enhancement,","spring-projects-issues","2008-11-09T21:34:22Z","2019-01-11T15:26:47Z"
"","10107","@RequestMapping to narrow on Request Header details [SPR-5433]","**[Ken Sipe](https://jira.spring.io/secure/ViewProfile.jspa?name=kensipe)** opened **[SPR-5433](https://jira.spring.io/browse/SPR-5433?redirect=false)** and commented  It would be great to narrow controller methods with details in the request header... for instance  `@RequestMapping`(agent = ""Mozilla/5.0 (iPhone;*"")  would match on iphone  ---  **Issue Links:** - #10360 Request header filtering in `@RequestMapping` (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-01-26T10:15:45Z","2019-01-13T08:01:18Z"
"","10095","@RequestMapping type-level params not taken into account consistently [SPR-5421]","**[Ken Sipe](https://jira.spring.io/secure/ViewProfile.jspa?name=kensipe)** opened **[SPR-5421](https://jira.spring.io/browse/SPR-5421?redirect=false)** and commented  Given the following code: `@Controller` `@RequestMapping`(param=""ex"") public class BookController {      @RequestMapping     public void index() {  }          @RequestMapping(param=""id"")     public void show() {  }  }  one would expect that in order to invoke either request mapping that an ""ex"" parameter woud need to be present in the request.  so /book/index?ex=a or /book/show?id=1&ex=a . however testing this out, the param requires are as expected for the show method... however a simple /book/index works without a parameter on the index.  As I think this through, it is the only default request mapping, however given the restriction on the type shouldn't this request fail with no matching mapping?   ---  **Affects:** 3.0 M1","closed","type: bug,","spring-projects-issues","2009-01-20T15:10:03Z","2012-06-19T03:47:26Z"
"","10563","Reference Doc  section 16.11.4 can include the new @RequestBody from 18.2.1.2 [SPR-5894]","**[Ken Krueger](https://jira.spring.io/secure/ViewProfile.jspa?name=kennyk)** opened **[SPR-5894](https://jira.spring.io/browse/SPR-5894?redirect=false)** and commented  Reference Doc  suggestion.  Section 16.11.4 ""Supported handler method arguments and return types"" can now include the new `@RequestBody` from 18.2.1.2 section on REST.  Suggested wording:  `@RequestBody` for access to the entire body of the HTTP request, see section 18.2.1.2   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-07-02T15:41:31Z","2012-06-19T03:44:18Z"
"","10562","Minor Typo: [SPR-5893]","**[Ken Krueger](https://jira.spring.io/secure/ViewProfile.jspa?name=kennyk)** opened **[SPR-5893](https://jira.spring.io/browse/SPR-5893?redirect=false)** and commented  Spring reference documentation, v3, section 18.2.1.2.  Search for the phrase: ""for converting for converting"", and you'll see the typo.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/522475a05ba2a2d6677a0f0239cd6f5b90c2ff88","closed","status: invalid,","spring-projects-issues","2009-07-02T15:32:55Z","2019-01-12T05:33:23Z"
"","10841","Jackson view adds/combines model objects in session when it really shouldn't [SPR-6173]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-6173](https://jira.spring.io/browse/SPR-6173?redirect=false)** and commented  I've found a very strange bug. It took me awhile to even discover it, but I believe I know what it is now.  The JSON view combining the model from the session with whatever the controller is passing. This is NOT good behaviour by default for json views, and the same could be said for xml as well.  The controller in my application generates the following json:  ``` {""userAccounts"":[{""role"":""ROLE_ADMIN"",""emailAddress"":""an.email@address.com"",""password"":""secret"",""id"":1}]} ```  This JSON is a list of DTO objects that are a very small subset of the actual object they are based on. Upon arriving the page that generates this JSON, it works fine. However, once I go to a form page where there are session attributes and move away from the form, it gets combined with the JSON data afterward:  ``` {""userAccount"":{""username"":null,""authorities"":[{""authority"":""ROLE_USER""}],""accountNonExpired"":true,""accountNonLocked"":true,""credentialsNonExpired"":true, ""emailAddress"":null,""verified"":false,""homePage"":"""",""lastLogin"":{""ipAddress"":null,""date"":null},""socialNetworks"":{""websiteUrl"":null,""facebookUrl"":null,""linkedInUrl"":null}, ""instantMessenger"":{""id"":null,""type"":null},""preferences"":{""receivingNewsletters"":false},""address"":{""street"":null,""city"":null,""province"":null,""postalCode"":null,""country"":null}, ""state"":""NOT_VERIFIED"",""enabled"":false,""null"":false,""fullName"":{""first"":null,""title"":null,""last"":null},""password"":null,""id"":0,""transient"":true,""active"":true}, ""userAccounts"":[{""role"":""ROLE_ADMIN"",""emailAddress"":""an.email@address.com"",""password"":""secret"",""id"":1}]} ```  For example, the ""userAccount"" that was added is just an empty object from a create UserAccount form. So, it contains all the empty values of a brand new UserAccount object. If you notice in the last line, the JSON includes the ACTUAL JSON.  This is really bad... because given the session data, the Jackson object mapper will map anything that starts with get* or is*. If these methods return null, then the Jackson object mapper will throw an exception. This is BAD!!!!  Sometimes the methods that start with is* and get* are not even properties, which actually infuriates me.  Nonetheless, this would not happen if Spring did not pass the session model to and combine it with the json view by default.  This is especially a pain for testing since simulating this session attribute stuff is impossible, nor is it anticipatory :(  Please, just don't do this and remove this ""feature"" if it is indeed a feature. And if it's a bug, I hope you can correct it for RC2 ;)  I really appreciate you hearing me out. This could be nasty one to leave in the framework from the start. I'd appreciate any workarounds until RC2 comes out.  Thank you very, very, very much!   ---  **Affects:** 3.0 RC1","closed","status: declined,","spring-projects-issues","2009-10-01T10:09:18Z","2019-01-12T16:39:02Z"
"","10833","MappingJacksonJsonView.setRenderedAttributes [SPR-6165]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-6165](https://jira.spring.io/browse/SPR-6165?redirect=false)** and commented  Hi, the setRenderedAttributes() method is pretty much useless. In practice, we want to filter out elements that belong to the tree that are nested... not the top level elements. A common idiom is to a list of domain objects, and only wanting specific properties on each domain object to be marshalled. As appears that this is impossible right now, which makes this method useless.  I checked the test cases in your rc1 distribution... and they are really simple. the guy that tested it just made 1 map and a simple bean that wasn't nested at all. If that's all he tested, I'm going to assume nested properties won't work.  Can you please make this work as nested properties and fix the test cases?  If we have a list of Object X and X has a, b, c properties, we should just say a map of ""a"" and ""c"" and it should work. Currently, it does not, and it is a big problem.  And I hate to say it, but setting up a map of strings is kind of bloated. It would be nice to have a list of comma-separated strings as an input as well to cut down on the lines of code it takes to write this.  Thanks  ---  **Affects:** 3.0 RC1  **Issue Links:** - #11815 Integrate Jackson `@JsonView`","closed","type: enhancement,","spring-projects-issues","2009-09-29T15:45:57Z","2019-01-13T07:58:12Z"
"","10831","Using ignoreAcceptHeader and defaultContentType together causes problems. [SPR-6163]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-6163](https://jira.spring.io/browse/SPR-6163?redirect=false)** and commented  Using ignore accept header and default content type causes problems. Here is my bean xml:  {code?xml} \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  ```  Here is the exception that is generated:  ```  SEVERE: Servlet.service() for servlet jawbs threw exception java.lang.UnsupportedOperationException at java.util.AbstractList.set(AbstractList.java:115) at java.util.AbstractList$ListItr.set(AbstractList.java:412) at java.util.Collections.sort(Collections.java:121) at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:344) at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1105) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1052) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:808) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:726) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:636) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:545) at javax.servlet.http.HttpServlet.service(HttpServlet.java:690) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)  ```  If there is a short-term fix, I'd love to hear it.  Basically what I want to do is have no extension (like /rest/hotels/list) go to text/html and still have the json, xml, etc. views work with the extensions on any/all browsers.  Thanks! ```  ---  **Affects:** 3.0 RC1  **Issue Links:** - #10846 Using defaultContentType property in ContentNegotiatingViewResolver throws java.lang.UnsupportedOperationException (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c47a01953d060a6aa8f306b03730078a60ddf39","closed","type: bug,","spring-projects-issues","2009-09-29T07:55:43Z","2019-01-11T14:08:33Z"
"","10801","Introduce mechanism to automatically clear and flush an ORM's unit of work in the TestContext framework [SPR-6133]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-6133](https://jira.spring.io/browse/SPR-6133?redirect=false)** and commented  Hi, I'd like to submit a feature request. I dunno how hard it would be.  I would like an aop interceptor setup for the spring test framework so that whenever a hibernate session factory is called... or whenever a data access save/update is called that the test framework automatically flushes and clears the session. I realize this might be hibernate-only, but test code can lead to bugs when people don't call .flush() and .clear() after save operations within tests.  It can be worse in that even if .clear() is called, many-to-many relationships will only put save/update to both sides of the relationships... but the join table will not be updated. It will only update if you put a flush() as well from the sessionFactory.  This sounds like a great job for AoP. This would make test code much more streamlined and trivial and less error prone. Can you add it?   ---  **Affects:** 3.0 M4, 3.0 GA","open","type: enhancement,","spring-projects-issues","2009-09-19T11:37:19Z","2013-12-11T02:37:56Z"
"","10798","Be able to specify a default content type when no extension is used in ContentNegotiatingViewResolver [SPR-6130]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-6130](https://jira.spring.io/browse/SPR-6130?redirect=false)** and commented  I'm having a problem where I am trying to get xml, json, html, etc. to work using the content negotiator. It works perfectly... almost. The main problem I'm having is that the default content type is coming up as XML. Here is the dispatcher servlet xml:  ```xml                                                                                                                                                                                                                                                                                                                                                                                                                        ```  As it stands, mapping to ""/"" results in Spring trying to get to ""/.xml"", which is terrible since it really needs to get mapped to what I have in `@RequestMapping` in a controller (mine points to ""index"", which in turns should get mapped to ""index.ftl"" in the view resolver)  Ultimately though, despite the above mentioned problem, having to specify "".ftl"" whenever I want a text/html view is somewhat annoying. It's workable mind you... but then there is no change of having a proper index page.  If there is quick workaround, would you please email me? Maybe I set it up incorrectly too... and if that's the case, I apologize for posting this.  Thanks for all of your help!  ---  **Affects:** 3.0 M4  **Reference URL:** http://forum.springsource.org/showthread.php?p=261035#post261035  **Issue Links:** - #10376 ContentNegotiatingViewResolver picks first media type from Accept header which is not consistent across browsers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5faa4d90ac8bc14bbabc0af6d03b7f349a430501","closed","type: enhancement,","spring-projects-issues","2009-09-19T02:20:53Z","2019-01-11T14:10:35Z"
"","10126","The default Aspect Order should not be Ordered.LOWEST_PRECEDENCE [SPR-5453]","**[Kek](https://jira.spring.io/secure/ViewProfile.jspa?name=kek)** opened **[SPR-5453](https://jira.spring.io/browse/SPR-5453?redirect=false)** and commented  I have a situation, when I need to guarantie that my Aspect  is the last one in the invocation chain. So I annotated the Aspect class with `@Order`(Ordered.LOWEST_PRECEDENCE).  But this does not work, after some hours of debuging I found, that the problem is in BeanFactoryAspectInstanceFactory.getOrder()  method, because all other aspects, without `@Order` and without ""implements Ordered"",   have the default order value Ordered.LOWEST_PRECEDENCE.      public int getOrder() {     	Class type = this.beanFactory.getType(this.name);     	if (type != null) {     		if (Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name)) {     			return ((Ordered) this.beanFactory.getBean(this.name)).getOrder();     		}     		Order order = (Order) type.getAnnotation(Order.class);     		if (order != null) {     			return order.value();     		}     	}     	return Ordered.LOWEST_PRECEDENCE;     }  So it is not possible to create some Aspect with lower precedence than the ""not ordered"" aspect.  In my opinion, the default order value should be something between Ordered.LOWEST_PRECEDENCE and Ordered.HIGHEST_PRECEDENCE like Ordered.DEFAULT_PRECEDENCE=0.   It is the same idea as in java.lang.Thred.priority, there is MIN_PRIORITY, NORM_PRIORITY, MAX_PRIORITY. But I know, there will be problem with backward compatibility.  I didn't find any way how to change the BeanFactoryAspectInstanceFactory implementation for my aspectj-autoproxy configuration, so my current solution is to define `@Order` on all Aspects.  Thank's for any other better solution.   ---  **Affects:** 2.5.6  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2009-02-03T00:08:02Z","2019-01-12T16:27:24Z"
"","10847","GenericConversionService converts to null when targetType is a primitive resulting in binding error [SPR-6179]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6179](https://jira.spring.io/browse/SPR-6179?redirect=false)** and commented  Say I'm binding a String to a int (primitive).  If the source String property is null, the value to bind to the target will also be null.  Unfortunately, null cannot be set as a value for a primitive and the result is an IllegalArgumentException.  For conversions that result in null, the GenericConversionService should see if the target type is a primitive; if so the value returned should be the equivalent of null for that primitive (0 for ints,longs, etc, false for boolean).  See example stack trace of this occurring and how cryptic it is at present:  map String age (value == null)  -> int age (value == """" results in the same with a DefaultConversionService)  ---  org.springframework.mapping.MappingException: 1 mapping failure(s) occurred: #1) EL1034E:(pos 0): A problem occurred whilst attempting to set the property 'age': Unable to access property 'age' through setter at org.springframework.mapping.support.SpelMapper.map(SpelMapper.java:104) at org.springframework.mapping.support.SpelMapperTests.mapBeanDeep(SpelMapperTests.java:125) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Failure cause traces: - MappingFailure #1 Cause:   org.springframework.expression.spel.SpelEvaluationException: EL1034E:(pos 0): A problem occurred whilst attempting to set the property 'age': Unable to access property 'age' through setter   at org.springframework.expression.spel.ast.PropertyOrFieldReference.writeProperty(PropertyOrFieldReference.java:213)   at org.springframework.expression.spel.ast.PropertyOrFieldReference.setValue(PropertyOrFieldReference.java:111)   at org.springframework.expression.spel.SpelExpression.setValue(SpelExpression.java:116)   at org.springframework.mapping.support.Mapping.map(Mapping.java:71)   at org.springframework.mapping.support.SpelMapper.map(SpelMapper.java:101)   at org.springframework.mapping.support.SpelMapperTests.mapBeanDeep(SpelMapperTests.java:125)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)   at java.lang.reflect.Method.invoke(Method.java:597)   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)   at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)   at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)   at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)   at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)   at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)   at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)   at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)   at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)   at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)   at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)   at org.junit.runners.ParentRunner.run(ParentRunner.java:236)   at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)   at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)   at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)   at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)   at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)   at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)   Caused by: org.springframework.expression.AccessException: Unable to access property 'age' through setter   at org.springframework.expression.spel.support.ReflectivePropertyResolver.write(ReflectivePropertyResolver.java:210)   at org.springframework.expression.spel.ast.PropertyOrFieldReference.writeProperty(PropertyOrFieldReference.java:208)   ... 27 more   Caused by: java.lang.IllegalArgumentException   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)   at java.lang.reflect.Method.invoke(Method.java:597)   at org.springframework.expression.spel.support.ReflectivePropertyResolver.write(ReflectivePropertyResolver.java:206)   ... 28 more  ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e7c8f1ef8b87b7763b9c27caf3e028321d5c5b62","closed","type: bug,","spring-projects-issues","2009-10-02T06:40:54Z","2019-01-13T21:48:57Z"
"","10808","Allow for the sourceType TypeDescriptor to be provided along with the targetType TypeDescriptor when executing type conversions [SPR-6140]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6140](https://jira.spring.io/browse/SPR-6140?redirect=false)** and commented  Currently only the sourceType Class can be provided.  This makes it impossible to access generic information to use for type conversion when mapping two object structures.  For consistency and to eliminate this gap, the sourceType TypeDescriptor should also be specifiable.   ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-09-21T00:14:37Z","2012-06-19T03:43:33Z"
"","10807","Introduce uniform GenericConverter interface within the GenericConversionService implementation [SPR-6139]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6139](https://jira.spring.io/browse/SPR-6139?redirect=false)** and commented  Currently the GenericConversionService implementation indexes Converters and ConverterFactories directly under these specific SPI interfaces, and has a nasty if/else block for special-case ""generic converters"" that require full access to the source/target property binding context (via TypeDescriptor).  We should introduce a uniform GenericConversionService all type converters are indexed under in the GenericConversionService, including user-defined Converters, ConverterFactories, and special-case GenericConverters.   ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-09-21T00:07:43Z","2012-06-19T03:44:03Z"
"","10806","Revise core.convert Converter SPI to not a throw checked Exception for the typed convert method [SPR-6138]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6138](https://jira.spring.io/browse/SPR-6138?redirect=false)** and commented  Converters can be called directly by application code, or other code other than a ConversionService facade.  Therefore the central convert operation should not throw a general Exception type but rather declare a `@throws` IllegalArgumentException in the JavaDoc instructing the developer to throw a RuntimeException after a conversion failure.   ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-09-21T00:04:43Z","2012-06-19T03:43:46Z"
"","10805","General SpEL-based object mapper [SPR-6137]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6137](https://jira.spring.io/browse/SPR-6137?redirect=false)** and commented  SpEL gives us a powerful capability to get and set object property locations.  A natural next step is to built a general object mapper ontop of this base SpEL capability that can a map source object structure to an target object structure.  Such a general-purpose object mapper is useful in cases like web data binding, but also for more ""headless"" scenarios such as DTO-DO mapping and Integration/batch data transformation scenarios.  This ticket should introduce a general Mapper API interface and a basic SpelMapper implementation.   ---  **Affects:** 3.0 M4  **Attachments:** - [org.springframework.mapper.zip](https://jira.spring.io/secure/attachment/16257/org.springframework.mapper.zip) (_82.17 kB_)  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-21T00:01:38Z","2015-09-22T18:55:04Z"
"","10778","Spring 3 JSR-303 Validation Documentation [SPR-6110]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6110](https://jira.spring.io/browse/SPR-6110?redirect=false)** and commented  Document Spring 3's Validation support and support for JSR-303.   ---  **Affects:** 3.0 M4  **Attachments:** - [validation.html](https://jira.spring.io/secure/attachment/15708/validation.html) (_19.21 kB_)","closed","in: core,","spring-projects-issues","2009-09-14T10:02:55Z","2012-06-19T03:44:14Z"
"","10745","Allow Formatters referenced by @Formatted meta-annotations to be configured from the Annotation instance [SPR-6077]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6077](https://jira.spring.io/browse/SPR-6077?redirect=false)** and commented  W could populate those default Formatter instances with annotation attributes as JavaBean properties e.g. if `@Date`(pattern = ""...""), the associated Formatter could be checked whether it has a ""pattern"" bean property (aka setPattern method) which we could then automatically invoke if it is a default Formatter instance derived from an `@Formatted` meta-annotation on `@Date` itself it's a bit of a special rule but it might be convenient it's a bit similar to how we're applying job execution parameters onto Quartz Job instances, for example. translating externalized metadata onto bean properties is a core Spring competency, after all Formatters are also different from Constraints in that the former operate on a type primarily (with annotations just as additional qualifier that's not needed if the type itself is unique), whereas constraints are pretty generic and always triggered by an annotation   ---  **Affects:** 3.0 M4","closed","status: invalid,","spring-projects-issues","2009-09-04T00:31:29Z","2019-01-12T05:33:07Z"
"","10742","Convention-based formatting/parsing methods for simple objects [SPR-6074]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6074](https://jira.spring.io/browse/SPR-6074?redirect=false)** and commented  Proposal: If no Formatter registered for class of type T, fallback to t.toString() to format value and t.valueOf(String) to parse value.   ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-09-03T06:42:25Z","2012-06-19T03:42:42Z"
"","10741","Document core.convert and ui.format in the reference manual [SPR-6073]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6073](https://jira.spring.io/browse/SPR-6073?redirect=false)** and commented  Chapter 5.   ---  **Affects:** 3.0 M4","closed","type: task,","spring-projects-issues","2009-09-03T04:12:51Z","2012-06-19T03:43:01Z"
"","10737","No way to register Formatter instances by field on DataBinder [SPR-6069]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6069](https://jira.spring.io/browse/SPR-6069?redirect=false)** and commented  On DataBinder, I see you can call getFormatterRegistry().add(...).  However, there is no specific binder.registerFormatter(String, Formatter) callback that allows you to register a Formatter for a specific field, as an alternative to binder.registerCustomEditor(Class, String, PropertyEditor).  ---  **Affects:** 3.0 M4  **Issue Links:** - #10839 ""Registering field-specific Formatters"" section is not in sync with the codebase - #10684 Add Formatter support to DataBinder - #12429 Provide a formatter registry capability local to a controller  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/02da2e85ee0e58202b90d11c126e6050abe184b4  9 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-02T14:29:21Z","2019-01-11T13:38:22Z"
"","10708","Document new Formatter support in Spring 3.0 [SPR-6039]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6039](https://jira.spring.io/browse/SPR-6039?redirect=false)** and commented   ---  **Affects:** 3.0 M4","closed","type: task,","spring-projects-issues","2009-08-25T00:41:40Z","2012-06-19T03:42:54Z"
"","10705","MessageBuilder for conveniently constructing String messages retrieved from a MessageSource [SPR-6036]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6036](https://jira.spring.io/browse/SPR-6036?redirect=false)** and commented  As a user, I'd like a simple, fluent API for retrieving messages from a MessageSource.  Example:  ``` String message = new MessageBuilder(messageSource).     code(""invalidFormat"").     arg(""label"", new ResolvableArgument(""form.decimalField"")).     arg(""format"", ""#,###.##"").     defaultMessage(""The decimal field must be in format #,###.##"").build(); ```  ``` 1. messages.properties invalidFormat=The #{label} must be in format #{format}. ```  This includes a capability to do #{variableSubsitution} on message template expressions using SpEL.   ---  **Affects:** 3.0 M4  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-24T00:41:44Z","2015-09-22T16:49:59Z"
"","10704","Validation: Initial support for dependency injection of a JSR-303 Validator [SPR-6035]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6035](https://jira.spring.io/browse/SPR-6035?redirect=false)** and commented  As a user, I want to use Spring to configure my JSR 303 provider, then have the ability to inject JSR-303 Validators into my own components using standard Spring DI capabilities.  Specifically, I am interested in injecting Validators into Services so I can invoke validation rules in the context of my business logic.  Hibernate Validator should be the JSR-303 implementation supported initially.  ---  **Affects:** 3.0 M4  **Issue Links:** - #4803 Support for declarative validation (Hibernate Validator, anticipating JSR 303) (_**""is depended on by""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-24T00:25:46Z","2019-01-11T14:22:50Z"
"","10703","Data Binder: Support for binding multiple submitted field values to a single property [SPR-6034]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6034](https://jira.spring.io/browse/SPR-6034?redirect=false)** and commented  Grails has support for this with its StructuredPropertyEditor concept: - http://www.grails.org/doc/1.0.x/api/org/codehaus/groovy/grails/web/binding/StructuredPropertyEditor.html  The Grails approach allows registration of a special type of PropertyEditor, called StructuredPropertyEditor, that introduces a new method named 'assemble(Class type, Map fields)'.  When a StructuredPropertyEditor is registered for a field, this special method is invoked and the value to bind becomes its return value, which is produced from the Map provided.  We should evaluate if/how we should build this capability into DataBinder, so Grails no longer has to maintain this feature with its own extension.  This feature is generally useful to users that have multiple fields they want to bind to a single property value (best example is a multi-field Date selector)  Other point of reference: The PresentationModel work under development for 3.1 does not build this into the Formatter layer, but offer's a filter(Map submittedFieldValues) method on AbstractBinder where such transforming could be done as a pre-bind step.  However, no special support for multi-field to single-field transformation has been added yet, nor has any specific abstraction.  Mark Fisher should be able to provide some good input on how to best implement this requirement given Spring Integration experience with pipes/filters.   ---  **Affects:** 3.0 M4  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2009-08-24T00:17:07Z","2019-01-12T03:50:55Z"
"","10702","Data Binder: Auto-grow collections as needed to support nested property binding [SPR-6033]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6033](https://jira.spring.io/browse/SPR-6033?redirect=false)** and commented  Grails, SpEL, and the new PresentationModel under development for 3.1 all include this feature.  We should consider building this natively into DataBnder to benefit existing users & so Grails particularly no-longer has to maintain its own extensions.  Scenario illustrating feature behavior: - Suppose I have an instance of type Foo - And I attempt to bind to indexed property path bar.baz[0] = 'hello' - If baz, a List, is null, it will be created in line with the rules described in #10701; 'hello' will then be added as the first element at index = 0, even though the new list was initially empty with a size of 0.  Alternate scenario: - Attempting to bind to index property path bar.baz[5] = 'hello'; say baz is not null, but only has a size of 1 at index = 0. - In this scenario, new default instances of the List's parameterized type e.g. String in the case of List\ will be added at index 1..3; baz[4] would then be set to 'hello'.  As a developer, this frees me from having to pre-populate a indexed object graph ahead of time when binding back a Form post; I can simply rely on what the client is submitting to drive the population of the object graph.  This is convenient  ---  **Affects:** 3.0 M4  **Issue Links:** - #12498 DataBinder should be able to define a different strategy for BeanWrapperImpl how autogrowing should handle gaps in collection properties - #9405 mvc: Dynamic List use case - allow collections/arrays to grow  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3fa533ddd85f8a33c11eda70387c347e2b4ce0ee  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-24T00:08:46Z","2019-01-11T14:23:11Z"
"","10701","Data Binder: Add support for auto-instantiating null values in nested paths [SPR-6032]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6032](https://jira.spring.io/browse/SPR-6032?redirect=false)** and commented  Grails, SpEL, and the new PresentationModel support in development for 3.1 all have native support for this.  We should consider building this capability natively into DataBinder for consistency, and so Grails no longer has to maintain its own DataBinder extension.  Scenario: Assume we are binding to an instance of object Foo Assume the expression of the property we are binding to is 'bar.baz', so a nested binding If the bar property value is null, this feature will cause a new value of bar's propertyType to be created via its default constructor and set for bar.  As a developer, this alleviates me from having to make sure all the property paths are instantiated ahead of time; I can simply rely on what the client is binding along with the property metadata to drive population of the object graph.  This is convenient.  ---  **Affects:** 3.0 M4  **Issue Links:** - #6368 Option to expose empty value instead of NullValueInNestedPathException - #6554 Null property values in nested paths relating to  tag,  tags, and ServletRequestDataBinder  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3fa533ddd85f8a33c11eda70387c347e2b4ce0ee  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-23T23:58:02Z","2019-01-11T14:23:05Z"
"","10691","Create a ui namespace, initially for configuring UI format system in a Spring application [SPR-6022]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6022](https://jira.spring.io/browse/SPR-6022?redirect=false)** and commented  ```                                                                                             ```  default bean id=formatterRegistry   --- No further details from [SPR-6022](https://jira.spring.io/browse/SPR-6022?redirect=false)","closed","in: core,","spring-projects-issues","2009-08-18T00:37:31Z","2019-01-12T05:33:14Z"
"","10684","Add Formatter support to DataBinder [SPR-6015]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6015](https://jira.spring.io/browse/SPR-6015?redirect=false)** and commented  Support for the Formatter/FormatterRegistry SPI/API should be added to DataBinder, as an alternative to working with PropertyEditors.  Existing PropertyEditor support should remain unaffected.  New proposed methods: registerFormatter(Class type, Formatter formatter); registerFormatter(Class type, String field, Formatter formatter); setFormatterRegistry(FormatterRegistry);  ---  **Issue Links:** - #10737 No way to register Formatter instances by field on DataBinder - #10839 ""Registering field-specific Formatters"" section is not in sync with the codebase  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/20f5f99e9a44bbafabe29a56f12e8fe7cb7c8925","closed","type: enhancement,","spring-projects-issues","2009-08-17T00:55:12Z","2019-01-11T14:24:34Z"
"","10683","FormatterRegistry API for defining shared registries of Formatter instances [SPR-6014]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6014](https://jira.spring.io/browse/SPR-6014?redirect=false)** and commented  It should be possible to: - Register a Formatter to apply to a property of a specific type - Register a Formatter to apply to a property annotated with a specific annotation  Proposal:  ```  /**  * A shared registry of Formatters.  * @author Keith Donald  * @since 3.0  */ public interface FormatterRegistry {  	/** 	 * Adds a Formatter that will format objects of the specified type. 	 * The type should generally be a concrete class for a scalar value, such as BigDecimal. 	 * The type may also be an annotation type, which will configure the Formatter to format values of properties annotated with that annotation. 	 * Use {@link #add(AnnotationFormatterFactory)} when the format annotation defines configurable annotation instance values. 	 *  	 * Note the Formatter's own formattedObjectType  may be different than the specified objectType. 	 * When objectType differs from , the caller of the Formatter should first coerse their value to the type required by the Formatter.   	 * @param objectType the type 	 * @param formatter the formatter 	 */ 	void add(Class objectType, Formatter formatter);  	/** 	 * Adds a AnnotationFormatterFactory that will format values of properties annotated with a specific annotation. 	 * @param factory the annotation formatter factory 	 */ 	void add(AnnotationFormatterFactory factory);  	/** 	 * Get the Formatter for the type. 	 * @return the Formatter, or null if none is registered 	 */ 	Formatter getFormatter(TypeDescriptor type);  }  /**  * A factory that creates {@link Formatter formatters} to format property values on properties annotated with a particular format {@link Annotation}.  * For example, a CurrencyAnnotationFormatterFactory might create a Formatter that formats a BigDecimal value set on a property annotated with @CurrencyFormat.  * @author Keith Donald  * @since 3.0   * @param  The type of Annotation this factory uses to create Formatter instances  * @param  The type of Object Formatters created by this factory format  */ public interface AnnotationFormatterFactory { 	 	/** 	 * Get the Formatter that will format the value of the property annotated with the provided annotation. 	 * The annotation instance can contain properties that may be used to configure the Formatter that is returned. 	 * @param annotation the annotation instance 	 * @return the Formatter to use to format values of properties annotated with the annotation. 	 */ 	Formatter getFormatter(A annotation);	 }  ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/20f5f99e9a44bbafabe29a56f12e8fe7cb7c8925, https://github.com/spring-projects/spring-framework/commit/2381452e9a1f850a743216ab4ae9b18d0bb4c418","closed","in: core,","spring-projects-issues","2009-08-17T00:51:33Z","2019-01-11T14:24:24Z"
"","10682","Ability to associate a Formatter with a class by using the @Formatted annotated [SPR-6013]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6013](https://jira.spring.io/browse/SPR-6013?redirect=false)** and commented  As a developer, I would like to be able to conveniently associated a Formatter implementation with a particular object class by simply annotating that class.  Proposal: `@Formatted`  ``` /**  * A type that can be formatted as a String for display in a UI.  * @author Keith Donald  * @since 3.0  */ @Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface Formatted { 	 	/** 	 * The Formatter that handles the formatting. 	 */ 	Class value(); } ```  ``` @Formatted(AddressFormatter.class) public static class Address { 	private String street; 	private String city; 	private String state; 	private String zip; 	private String country; } ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/20f5f99e9a44bbafabe29a56f12e8fe7cb7c8925, https://github.com/spring-projects/spring-framework/commit/2381452e9a1f850a743216ab4ae9b18d0bb4c418","closed","type: enhancement,","spring-projects-issues","2009-08-17T00:44:57Z","2012-06-19T03:43:09Z"
"","10681","UI Formatter SPI as an alternative to PropertyEditors [SPR-6012]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-6012](https://jira.spring.io/browse/SPR-6012?redirect=false)** and commented  Characteristics of the new SPI: - Simpler than PropertyEditors, with no java.beans, awt, concrete inheritance, and Swing dependency. - Instances can be shared / formatting logic is thread safe - Typesafe through use of generics  API proposal:  Package: org.springframework.ui.format  ```  /**  * Formats objects of type T for display.  * @author Keith Donald  * @since 3.0   * @param  the type of object this formatter can format  */ public interface Formatter { 	 	/** 	 * Format the object of type T for display. 	 * @param object the object to format 	 * @param locale the user's locale 	 * @return the formatted display string 	 */ 	String format(T object, Locale locale); 	 	/** 	 * Parse an object from its formatted representation. 	 * @param formatted a formatted representation 	 * @param locale the user's locale 	 * @return the parsed object 	 * @throws ParseException when a parse exception occurs 	 */ 	T parse(String formatted, Locale locale) throws ParseException; }  ```  Note ParseException is java.text.ParseException and is checked.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2381452e9a1f850a743216ab4ae9b18d0bb4c418","closed","type: enhancement,","spring-projects-issues","2009-08-17T00:38:30Z","2012-06-19T03:43:38Z"
"","10477","Spring REST @MVC: Add support for google Protocol Buffers resource representation format [SPR-5807]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5807](https://jira.spring.io/browse/SPR-5807?redirect=false)** and commented  Google Protocol buffers provide a mature, high-performant binary data exchange protocol that can be used a an alternative to JSON and XML to connect systems over a REST interface.  Benchmarks outlined by by Orbitz and Sears at JavaOne 2009 have shown that marshaling using protocol buffers is up to 7 to 10 times faster than JSON.  This would make them a good, lightweight choice for Java-to-Java remoting over HTTP/REST.  This ticket should investigate adding support for Google protocol buffers on the server-side side with Spring `@MVC`, and on the client-side with REST-template possibly with some sort of dynamic proxy layer on top.  See http://code.google.com/apis/protocolbuffers/ for the Google Protocol Buffers project home page.  ---  **Affects:** 3.0 M3  **Issue Links:** - #20331 Support Protobuf serialization in WebFlux - #10926 Spring MVC REST: Support for Google Protocol Buffers View (_**""supersedes""**_) - #10927 Spring MVC REST: Support for binding Google Protocol Buffers messages (_**""is superseded by""**_) - #10928 Spring MVC REST: Provide RestTemplate support for receiving & sending Google Protocol Buffers Messages (_**""is superseded by""**_) - #10929 Spring MVC REST: Provide interface definition model for generating HTTP client interface proxies wrapping RestTemplates (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b56703eadc93d7be6b4330bf2d94b4da5362e007  15 votes, 21 watchers","closed","has: votes-jira,","spring-projects-issues","2009-06-05T09:32:19Z","2019-01-11T17:14:39Z"
"","10402","When no type conversion strategy is found on a @Controller handler method bind target, a 500 error code should be returned not a 400. [SPR-5732]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5732](https://jira.spring.io/browse/SPR-5732?redirect=false)** and commented  Original suggestion from Gregor:  For explanation why code 400 code is returned see #10293. I think generally it should be solved like this: * if you registered a suitable converter, and the URL uses date with incorrect format, than the code 400 should be returned, as this is client fault (incorrect format) * if you haven't registered any converter, and the URL part must be converted to an object, than it is definitely programmer (server side) fault, and the proper exception should be thrown (MissingConverterException or so), stack trace should be printed, and error code 500 returned.  Currently it seems a code 400 is always sent (even in the second case).  This makes it difficult to identify the programmer error.  ---  **Affects:** 3.0 M3  **Issue Links:** - #10396 Unexpected `@RequestMapping` semantics when class-level and method-level mappings used together  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bf7a947559d8f9918cc738780bf04caf8ea46962","closed","type: enhancement,","spring-projects-issues","2009-05-08T08:05:59Z","2019-01-13T07:59:51Z"
"","10401","@Controller method order effects @RequestMapping behavior in ways not expected [SPR-5731]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5731](https://jira.spring.io/browse/SPR-5731?redirect=false)** and commented  Works:  ``` @Controller @RequestMapping(""/appointments"") public class AppointmentsController {  	private AppointmentBook appointmentBook; 	 	@Autowired 	public AppointmentsController(AppointmentBook appointmentBook) { 		this.appointmentBook = appointmentBook; 	}  	@RequestMapping(value=""/new"", method = RequestMethod.GET) 	public AppointmentForm getNewForm() { 		return new AppointmentForm(); 	} 	 	@RequestMapping(value=""/{day}"", method = RequestMethod.GET) 	public Appointments getForDay(@PathVariable Date day) { 		return appointmentBook.getAppointmentsForDay(day); 	} 	 } ```  Does not work:  ``` @Controller @RequestMapping(""/appointments"") public class AppointmentsController {  	private AppointmentBook appointmentBook; 	 	@Autowired 	public AppointmentsController(AppointmentBook appointmentBook) { 		this.appointmentBook = appointmentBook; 	}  	@RequestMapping(value=""/{day}"", method = RequestMethod.GET) 	public Appointments getForDay(@PathVariable Date day) { 		return appointmentBook.getAppointmentsForDay(day); 	}  	@RequestMapping(value=""/new"", method = RequestMethod.GET) 	public AppointmentForm getNewForm() { 		return new AppointmentForm(); 	} 		 } ```  Specifically, a GET to /appointments/new results in:  ``` java.lang.IllegalStateException: Could not find @PathVariable [day] in @RequestMapping 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.resolvePathVariable(AnnotationMethodHandlerAdapter.java:644) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolvePathVariable(HandlerMethodInvoker.java:514) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:262) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:146) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:355) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:343) 	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:763) 	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:709) 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:614) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:526) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:690) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:803) 	org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195) 	org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159) 	org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141) 	org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90) 	org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417) ```  ... indicating the {day} mapped method ran instead of the /new method.  With the method order reversed, GET /appointments/new works as expected.  ---  **Affects:** 3.0 M3  **Issue Links:** - #10040 PathVariable mappings are greedy over hard coded mappings - #10593 REOPENED -PathVariable mappings are greedy over hard coded mappings - #9602 Return 405 instead of 404 when HTTP method is not supported  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/752832a8da48287a04722e33d3578298e669ed6b","closed","type: bug,","spring-projects-issues","2009-05-08T07:56:53Z","2019-01-11T17:31:32Z"
"","10396","Unexpected @RequestMapping semantics when class-level and method-level mappings used together [SPR-5726]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5726](https://jira.spring.io/browse/SPR-5726?redirect=false)** and commented  The code below does not work as expected. Specifically: - Sending a GET request to /appointments, which I was expected to be mapped to the ""get()"" method below, instead gets mapped to getForDay(Date), which results in the error:  ``` java.lang.IllegalStateException: Could not find @PathVariable [day] in @RequestMapping 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.resolvePathVariable(AnnotationMethodHandlerAdapter.java:642) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolvePathVariable(HandlerMethodInvoker.java:514) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:262) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:146) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:354) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:342) 	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:763) 	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:709) 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:613) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:525) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:690) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:803) 	org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195) 	org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159) 	org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141) 	org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90) 	org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417) ```  - Sending a GET requests to /appointments/2009-12-29 results in a HTTP 400 being sent to the client with message:   ""The request sent by the client was syntactically incorrect ().""   Is this the default handing now when there is a binding error?  I was expecting to see a binding exception as I do not have a Date editor registered yet.  No info or warning logs indicated there was a binding problem, so I'm left wondering what happened.  FAILING CODE:  ``` package org.springframework.samples.petclinic.appointments;  import java.util.Date;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  @Controller @RequestMapping(""/appointments"") public class AppointmentsController {  	private AppointmentBook appointmentBook; 	 	@Autowired 	public AppointmentsController(AppointmentBook appointmentBook) { 		this.appointmentBook = appointmentBook; 	}  	@RequestMapping(method = RequestMethod.GET) 	public Appointments get() { 		return appointmentBook.getAppointmentsForToday(); 	}  	@RequestMapping(value=""/{day}"", method = RequestMethod.GET) 	public Appointments getForDay(@PathVariable Date day) { 		return appointmentBook.getAppointmentsForDay(day); 	}  	@RequestMapping(value=""/new"", method = RequestMethod.GET) 	public AppointmentForm getNewForm() { 		return new AppointmentForm(); 	} 	 	@RequestMapping(method = RequestMethod.POST) 	public String post(AppointmentForm form) { 		appointmentBook.createAppointment(form); 		return ""redirect:/appointments""; 	}	 } ```  ---  **Affects:** 3.0 M3  **Issue Links:** - #10302 Implicit /** mapping on type-level `@RequestMapping` - #10402 When no type conversion strategy is found on a `@Controller` handler method bind target, a 500 error code should be returned not a 400.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4025df1ef892bccf154553ff50306d83a3b67eba","closed","type: bug,","spring-projects-issues","2009-05-07T07:37:07Z","2019-01-13T07:59:53Z"
"","10388","Introduce a ViewContext object that can be passed as @Controller method argument to help promote more consistency in @Controller method signatures [SPR-5718]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5718](https://jira.spring.io/browse/SPR-5718?redirect=false)** and commented  Currently a return value is overloaded to request multiple things: - A model attribute to expose - A view to render - A resource to redirect to   In an Ajax environment with Spring JavaScript - One or more fragments of a view to render  Overloading to mean all these different things is starting to smell a little bit.  A improvement would be to introduce a context object, such as ViewContext or ResponseContext, that allows for the different types of responses above to be requested.  This would be more flexible and type safe.  Also, it would allow for adding additional response convenience.  Some use case examples:  ``` // redirect to subresource with id from current resource e.g. currently at owners... redirect to owners/1 after CREATING owner 1  @RequestMapping(method = RequestMethod.PUT) public void put(Owner owner, ResponseContext response) { 	repository.saveOwner(owner); 	response.redirect(owner.getId()); } ```  ``` // redirect to a subresource with id from another parent resource e.g. currently at /owners/1/pet/barney ... redirect to /owners/1 after DELETING barney  @RequestMapping(method = RequestMethod.DELETE) public void delete(Long owner, String pet, ResponseContext context) {         context.forResource(""owners"").redirect(owner); } ```  ``` // set model and view @RequestMapping(value=""/search"", method = RequestMethod.GET) public void getSearchResults(@RequestParam String lastName, ResponseContext context) {         context.getModel().add(...)         contest.selectView(...) } ```  ``` // set model and view and also render fragments for ajax cases  @RequestMapping(value=""/search"", method = RequestMethod.GET) public void getSearchResults(@RequestParam String lastName, ResponseContext context) {         context.getModel().add(...)         contest.selectView(...)         context.renderFragment(""viewFragmentToRender""); } ```  ``` // do different handling based on whether current request is an ajax request or not ... e.g. refreshing a status bar on current page if so, otherwise redirecting to do a full page refresh @RequestMapping(method = RequestMethod.PUT) public void put(Owner owner, ResponseContext response) { 	repository.saveOwner(owner);         if (response.isAjaxRequest()) {             response.renderFragment(""statusBar"");         } else {    	     response.redirect(owner.getId());         } } ```  I'm not sure ResponseContext is the best name, perhaps ExternalContext is better.  Web Flow employs a similiar pattern for its response handling which as proven to work well.    ---  **Affects:** 3.0 M3  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-05-06T08:02:00Z","2019-01-11T17:31:50Z"
"","10318","Provide ability to determine if the current request is an ajax request [SPR-5647]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5647](https://jira.spring.io/browse/SPR-5647?redirect=false)** and commented  Spring JavaScript has an AjaxHandler abstraction that can be used to determine if the current request is an ajax request originating from a Spring JS client.  Server-side controllers can use this information to implement progressive enhancement techniques: for example, rendering a partial view if ajax is enabled, or a full-page otherwise; similarily, rendering a status update after a successful POST if ajax is enabled, or sending a redirect if Ajax is not enabled.  For this to be possible, we need a way to be able to invoke the Spring JavaScript AjaxHandler from inside a Spring MVC `@Controller`. We can override the argument resolver to pass include an AjaxHandler, but that's a little inconvenient as its stateless and depends on a HttpServletRequest and Response as well.  It would be much better if the Spring MVC WebRequest abstraction had a isAjaxRequest() boolean method, similiar to Web Flow's ExternalContext.isAjaxRequest(), that MVC Controllers could use.  This ticket is requesting an enhancement to Spring MVC's WebRequest to add an isAjaxEnabled method.  Behind the scenes, the factory for the WebRequest could delegate to an AjaxHandler that could be customized, and Spring JavaScript provides its own AjaxHandler implementation.  ---  **Affects:** 3.0 M2  **Issue Links:** - #13055 Provide a TilesView for partial rendering  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-02T02:02:58Z","2019-01-11T16:35:10Z"
"","10092","Additional support for mapping validation errors to localized messages [SPR-5418]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5418](https://jira.spring.io/browse/SPR-5418?redirect=false)** and commented  With Spring 3.0, it will be possible to define additional declarative validation constraints against your model that are enforced by the framework.  At the same time as this work, we should also consider enhancing the support for mapping validation errors to localized messages for display.  For example, today's DefaultMessageCodeResolver can apply checks like [errorCode].[objectName].[propertyName] and [errorCode]  For tommorrow, it would be great if automatically the message code could be based on the error code + classname + property name of the object being validated, **and** there was support for resolving a property's label from the message bundle.  Then, for example, a general format like this could easily be supported:  error.[code]={0} has an error... label.[classname].[propertyname]  e.g.  error.required={0} is required label.AccountSearchCriteria.searchString=Search String  Then rendered is: ""Search String is required""   ---  **Affects:** 3.0 M1  2 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2009-01-19T03:35:52Z","2015-09-22T17:34:31Z"
"","10091","Integrating validation into the @MVC request lifecycle [SPR-5417]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5417](https://jira.spring.io/browse/SPR-5417?redirect=false)** and commented  Currently, validation is not part of the Spring MVC `@Controller` binding lifecycle.  This typically results in data binding being controlled by the framework, while validation logic is manually invoked by the user.  One of the goals of Spring 3.0 is to build validation support into the `@Controller` lifecycle, which is consistent with other web frameworks like JSF and Stripes.  To do this, there needs to be a way for the `@Controller` author to influence execution of the lifecycle; for example, to suppress model validation for some use cases, and to specify the view that should be re-rendered in the case of a binding or validation error.  Below is an example of a search controller that defines two handler methods: one to setup a search form for display, and another to process a search form submission.  There is a 'required' valiation constraint on one of the form fields.   This example shows two implementation flavors of this `@Controller`: the first as it would need to be implemented today on Spring 2.5.6 [without any support for declarative validation], and the second how it could potentially be implemented in Spring 3.0 once validation is built back into the MVC lifecycle.  BEFORE DECLARATIVE VALIDATION  `@Controller` public class AccountSearchController {      private AccountManager accountManager;          @Autowired     public AccountSearchController(AccountManager accountManager) {         this.accountManager = accountManager;     }          @RequestMapping     public void newSearch(AccountSearchCriteria criteria) {     	     }          @RequestMapping     public String search(AccountSearchCriteria criteria, BindingResult result, Model model) {         if (criteria.getSearchString().length() == 0) {            result.rejectValue(""searchString"", ""missingField"");         }         if (result.hasErrors()) {             return ""accountsearch/newSearch"";         }         List accounts = accountManager.findAccounts(criteria);         model.addAttribute(accounts);         return ""accountsearch/search"";     }  }  AFTER DECLARATIVE VALIDATION  `@Controller` public class AccountSearchController {      private AccountManager accountManager;          @Autowired     public AccountSearchController(AccountManager accountManager) {         this.accountManager = accountManager;     }          @InitBinder     public void initBinder(WebDataBinder binder) {         binder.setRequiredFields(new String[] { ""searchString"" });     }          @RequestMapping     @SuppressValidation     public void newSearch(AccountSearchCriteria criteria) {		     }          @RequestMapping     @BindingErrorView(""accountsearch/newSearch"")     public List search(AccountSearchCriteria criteria) {         return accountManager.findAccounts(criteria);     }  }  ---  **Affects:** 2.5.6  **Issue Links:** - #4803 Support for declarative validation (Hibernate Validator, anticipating JSR 303) - #11103 `@MVC` should provide an ""onBind"" hook prior to automatic validation  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-01-19T02:13:07Z","2019-01-13T08:01:24Z"
"","10090","With binder.setRequiredFields constraint set, submitting an empty value for a required request parameter not binding an empty string to backing JavaBean [SPR-5416]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5416](https://jira.spring.io/browse/SPR-5416?redirect=false)** and commented  I'm observing what may be an issue where I'm trying to bind an empty field value to the property of a backing JavaBean, where the field in question has a required constraint set using binder.setRequiredFields(String[]).  For this case, I would still expect the value to be copied to the model as an empty string and THEN the required error generated; however, it looks like no value is being copied.  The URL where this issued was discovered was:  GET /accountsearch/search?searchString=  The binding target was:  public AccountSearchCriteria { private String searchString; ... }  ... which resulted searchString being nul when searchString was required.  Shouldn't a empty string be copied over in this case?  I would consider the required constraint to be part of the model validation lifecycle, and while it could result in errors being generated, should not prevent binding of the model value all together.  Perhaps this is not the intention of binder.setRequired, but it might be good to clarify.  In general, I think we need to carefully review the binding and validation lifecycle of Spring MVC.  ---  **Affects:** 2.5.6  **Issue Links:** - #12201 Consider mapping empty form values to [null] for Object properties","closed","type: enhancement,","spring-projects-issues","2009-01-19T02:01:58Z","2019-01-11T15:44:13Z"
"","10079","Make Tiles 2 easier to configure in Spring MVC [SPR-5406]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5406](https://jira.spring.io/browse/SPR-5406?redirect=false)** and commented  Simple thing we can do: - Provide a TilesViewResolver subclass of UrlBasedViewResolver that configures the viewClass to be TilesView as a convenience  First noticed this when explaining configuring you need to configure a URL resolver for Tiles view proved quite complex.  It's simpler to just say configure a Tiles view resolver.  ---  **Affects:** 3.0 M1  **Issue Links:** - #10176 Provide first-class Tiles ViewResolver implementation (_**""is duplicated by""**_) - #10359 Add TilesViewResolver to enable fallback if tiles definition does not exist  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-01-13T06:13:48Z","2019-01-11T15:45:02Z"
"","10068","ApplicationContext not closed when using @ContextConfiguration to implement integration tests [SPR-5395]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5395](https://jira.spring.io/browse/SPR-5395?redirect=false)** and commented  I am seeing side-effects in an integration test that initializes a Spring ApplicationContext using `@ContextConfiguration`.  Specifically, close() on the context does not appear to be being called, ever.  I noticed this because one of my DispoableBeans is not receiving a destroy() callback and that is what is causing the side-effect [which pops up when a @Test runs in another, unrelated TestCase class].  I understand a test ApplicationContext is cached between test methods, but I would still expect the context to be closed after all tests have run, before moving on to the next test class in the suite.  ---  **Affects:** 3.0 M1  **Issue Links:** - #9379 Support for `@DirtiesContext` at the test class level (_**""duplicates""**_) - #10311 Reload the application context for each test in a class with a class level annotation - #9379 Support for `@DirtiesContext` at the test class level","closed","type: enhancement,","spring-projects-issues","2009-01-05T01:38:48Z","2019-01-13T08:01:34Z"
"","10067","Add support for @Controller-relative resource bundles (for messages, themes, etc) [SPR-5394]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5394](https://jira.spring.io/browse/SPR-5394?redirect=false)** and commented  It is a modularization best-practice to package `@Controllers` together with the templates they render. This makes it easy to introduce new `@Controllers` as loosely-coupled modules, which also meshes well with REST conventions where a single `@Controller` controls the interaction with a domain resource.  With this kind of controller-centric modularization, typically a `@Controller` is placed in its own package, for example, ""home"" for a HomeController, or ""accounts"" for an AccountsController. Within that package, dependent `@Controller` resources reside such as templates e.g. home.ftl (a Freemarker template) and message resources.  For messages, it is useful for messages specific to the `@Controllers` view templates to reside in local bundle files e.g. messages.properties.  Attached is a ControllerFreemarkerViewResolver and ControllerFreemarkerView that exposes a ""resourceBundle"" TemplateModel that is backed by a MessageSource that loads bundles relative to the `@Controller` path.  This `@Controller` MessageSource is a child of the DispatcherServlet's messageSource.  This patch is mainly designed to illustrate the concepts/benefits of this approach: namely, moduarlized messages to simplify maintenance and localize changes, and a convenient ""resourceBundle"" model variable for accessing messages [as an alternative to the more bulky use of message/theme macro/tags].  The patch is less than ideal in several areas--specifically, the `@Controller` MessageSource is instantiated on every request [no caching is performed]--also the logical view name has to be recalculated to support relative message lookups from the perspective of the view template author.  ---  **Affects:** 3.0 M1  **Attachments:** - [controller-view.zip](https://jira.spring.io/secure/attachment/15013/controller-view.zip) (_3.67 kB_)  **Issue Links:** - #10065 Have AnnotationMethodHandlerAdapter save `@Controller` invocation context so it can be used during view resolution and rendering (_**""depends on""**_) - #10064 Add ControllerMethodRequestToViewNameTranslator - #10066 Add ControllerRelativeViewResolver  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-01-05T01:29:03Z","2019-01-13T08:01:35Z"
"","10066","Add ControllerRelativeViewResolver [SPR-5393]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5393](https://jira.spring.io/browse/SPR-5393?redirect=false)** and commented  It is a modularization best-practice to package `@Controllers` together with the templates they render. This makes it easy to introduce new `@Controllers` as loosely-coupled modules, which also meshes well with REST conventions where a single `@Controller` controls the interaction with a domain resource.  With this kind of controller-centric modularization, typically a `@Controller` is placed in its own package, for example, ""home"" for a HomeController, or ""accounts"" for an AccountsController. Within that package, dependent `@Controller` resources reside such as templates e.g. home.ftl (a Freemarker template) and message resourecs.  Then, when a `@Controller` is invoked view resource loading is controller-relative; for example, a HomeController that chooses the view ""home"" might resolve to a relative freemarker template resource in the ""home"" package--home.ftl. For this to work, information about the `@Controller` that was invoked needs to be available in the request during view resolution and rendering.  In addition, A ViewResolver needs to use that information to build an ""absolute"" view name containing the controller's path.  Attached is a ControllerRelativeViewResolver decorator that appends the controllerPath to the selected viewName before delegating to the target ViewResolver.  This allows for the target to map to view resources packaged with the `@Controller`, and for the view names returned by the `@Controller` to be relative.  ---  **Affects:** 3.0 M1  **Attachments:** - [ControllerRelativeViewResolver.java](https://jira.spring.io/secure/attachment/15012/ControllerRelativeViewResolver.java) (_970 bytes_)  **Issue Links:** - #10065 Have AnnotationMethodHandlerAdapter save `@Controller` invocation context so it can be used during view resolution and rendering (_**""depends on""**_) - #10064 Add ControllerMethodRequestToViewNameTranslator - #10064 Add ControllerMethodRequestToViewNameTranslator - #10067 Add support for `@Controller-relative` resource bundles (for messages, themes, etc)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-01-05T01:07:14Z","2019-01-13T08:01:37Z"
"","10065","Have AnnotationMethodHandlerAdapter save @Controller invocation context so it can be used during view resolution and rendering [SPR-5392]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5392](https://jira.spring.io/browse/SPR-5392?redirect=false)** and commented  It is a modularization best-practice to package `@Controllers` together with the templates they render.  This makes it easy to introduce new `@Controllers` as loosely-coupled modules, which also meshes well with REST conventions where a single `@Controller` controls the interaction with a domain resource.  With this kind of controller-centric modularization, typically a `@Controller` is placed in its on package, for example, ""home"" for a HomeController, or ""accounts"" for an AccountsController.  Within that package, dependent `@Controller` resources reside such as templates e.g. home.ftl (a Freemarker template)  Then, when a `@Controller` is invoked view resource loading is controller-relative; for example, having a HomeController choose the view ""home"" might resolve to a relative freemarker template resource in the ""home"" package--home.ftl.  For this to work, information about the `@Controller` that was invoked needs to be available in the request during view resolution and rendering.  Attached is a patch to AnnotationMethodHandlerAdapter that simply exposes `@Controller` context as request attributes.  We should look at properly integrating this in the Spring 3.0 timeframe.  ---  **Affects:** 3.0 M1  **Attachments:** - [AnnotationMethodHandlerAdapter.java.SPR-5392.patch](https://jira.spring.io/secure/attachment/15011/AnnotationMethodHandlerAdapter.java.SPR-5392.patch) (_1.35 kB_)  **Issue Links:** - #10064 Add ControllerMethodRequestToViewNameTranslator (_**""is depended on by""**_) - #10066 Add ControllerRelativeViewResolver (_**""is depended on by""**_) - #10067 Add support for `@Controller-relative` resource bundles (for messages, themes, etc) (_**""is depended on by""**_) - #9329 AnnotationMethodHandlerAdapter$ServletHandlerMethodResolver does not take method names into account when resolving handler method for Methods annotated with `@RequestMapping` which do not specify path information  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-01-05T00:56:17Z","2019-01-13T08:01:38Z"
"","10064","Add ControllerMethodRequestToViewNameTranslator [SPR-5391]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5391](https://jira.spring.io/browse/SPR-5391?redirect=false)** and commented  In most cases, the convention of mapping an internal `@Controller` method name to a controller-relative view name is superior to mapping based on the request path. For example, consider the requirement to have a HomeController mapped to the root application URL e.g. /petclinic.  With method name-based view name translation, a handler method with name ""home"" will map to a view named ""home"", which is what we want.  Combine this with controller-relative view resolution, and the home template can be packaged together in the same module as the `@Controller`.  With today's default request-to-view-name-translator, the view name will be an empty string, which is not what we want.  We should add a ControllerMethodToViewNameTranslator to Spring 3 or consider whether the DefaultRequestToViewNameTranslator should change to incorporate this functionality. This work should ideally be done at the same time as the support for controller-relative views.  Basic ControllerMethodViewNameTranslator implementation shown below that assumes `@Controller` invocation context has been exposed in the request:  public class ControllerMethodToViewNameTranslator implements RequestToViewNameTranslator {      private DefaultRequestToViewNameTranslator defaultTranslator = new DefaultRequestToViewNameTranslator();          public String getViewName(HttpServletRequest request) throws Exception {     	String methodName = (String) request.getAttribute(""controllerMethod"");     	if (methodName != null) {     		return methodName;     	} else {     		return defaultTranslator.getViewName(request);     	}     }  }  ---  **Affects:** 3.0 M1  **Issue Links:** - #10065 Have AnnotationMethodHandlerAdapter save `@Controller` invocation context so it can be used during view resolution and rendering (_**""depends on""**_) - #12468 Allow custom request mapping conditions - #10066 Add ControllerRelativeViewResolver - #10066 Add ControllerRelativeViewResolver - #10067 Add support for `@Controller-relative` resource bundles (for messages, themes, etc)  5 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-01-05T00:26:06Z","2019-01-13T08:01:40Z"
"","10041","@Controllers deployed in the root Spring context not auto-detected by default annotation handler mapping [SPR-5368]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5368](https://jira.spring.io/browse/SPR-5368?redirect=false)** and commented  It is common to use a component-scan directive in your app-config to populate your root application context. Unfortunately, discovered `@Controllers` will not be hooked into the DispatcherServlet pipeline without also configuring a custom DefaultAnnotationHandlerMapping bean in this same context. This appears to because the default AnnotationHandlerMapping instance the DispatcherServlet references does not detect handlers in ancestor contexts. It would be nice if it would detect `@Controllers` in ancestor contexts by default... then no explicit DefaultAnnotationHandlerMapping would need to be registered if no other strategies were needed.  ---  **Affects:** 2.5.6  **Issue Links:** - #10413 AbstractUrlHandlerMapping registerHandler does not register REST url paths if configured in global web.xml contextConfigLocation param instead of DispatcherServlet init-param (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2008-12-17T02:14:13Z","2019-01-11T16:24:24Z"
"","10483","When using @ManagedOperation on a method, allow overriding methods in that subclass,to be exposed as an operation. [SPR-5813]","**[Kaz Chehresa](https://jira.spring.io/secure/ViewProfile.jspa?name=kchehresa)** opened **[SPR-5813](https://jira.spring.io/browse/SPR-5813?redirect=false)** and commented  When I use `@ManagedOperation` on a method, and then a subclass overrides that method, the method is not exposed as an operation anymore.  Here is an example: \ `@ManagedResource` class A implements SelfNaming { `@ManagedOperation` public void doSomething() {System.out.println(""Doesn't do anything"");} public ObjectName getName() {return new ObjectName(""someName-that is derived dynamically, for eg via BeanNameAware or smth"");} }  `@ManagedResource` class B { public void doSomething() {System.out.println(""Does something useful!"");} } \  When I expose an instance of B, the method doSomething is not exposed as an operation. To solve the issue, I have to do this:  \ `@ManagedResource` class B { `@ManagedOperation` public void doSomething() {System.out.println(""Does something useful!"");} } \  which is a bit redundant, given I already mentioned that I want to expose that method as an operation in the main class.  I think this is especially important for people who extend classes from infrastructure libraries, because they will likely not see that this method was being exposed, and will forget to put the annotation again in their own subclass.  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8f6a42bf646442192dcae01a9334f246508c7c99","closed","type: enhancement,","spring-projects-issues","2009-06-08T04:34:50Z","2019-01-13T07:59:29Z"
"","10859","HandlerMethodInvoker treats an aribitrary handler method argument as @ModelAttribute field [SPR-6191]","**[Karthik Gurumurthy](https://jira.spring.io/secure/ViewProfile.jspa?name=spring_user)** opened **[SPR-6191](https://jira.spring.io/browse/SPR-6191?redirect=false)** and commented  HandlerMethodInvoker treats the method argument ""Foo foo"" as though it is ""`@ModelAttribute` Foo foo""  `@Controller` public class SpringController {  `@RequestMapping`(value=""/test.htm"") public void handleRequest(ModelMap mm, Foo foo) {  } }  While this works ( HandlerMethodInvoker does a  'new Foo()', is this the intent? -  If Foo is an interface and not a class, an exception is likely to be thrown? May this needs to be handled better?   ---  **Affects:** 3.0 RC1","closed","status: declined,","spring-projects-issues","2009-10-05T15:54:12Z","2019-01-12T16:38:59Z"
"","10758","AnnotationMethodHandlerAdapter could be opened up a bit [SPR-6090]","**[Karthik Gurumurthy](https://jira.spring.io/secure/ViewProfile.jspa?name=spring_user)** opened **[SPR-6090](https://jira.spring.io/browse/SPR-6090?redirect=false)** and commented  This is same as http://jira.springframework.org/browse/SPR-4832 But I'm creating this issue since #9508 was marked as 'resolved'. i want to be able to support `@HandlerInterceptor` at controller 'method' level.  `@Controller` class HelloController{  `@RequestMapping` `@Interceptor`(MyInterceptor.class) public String foo(){  } }  class MyInterceptor implements HandlerInterceptor{  }  If I have access to the 'Method' object that will eventually be invoked by AnnotationMethodHandlerAdapter, I can probably reflect on the Method and execute the HandlerInterceptor-s. It would be nice if the hook is such that I can do something like this -  HandlerInterceptor.preHandle(); //continue with AnnotationhandlerAdapter invocation HandlerInterceptor.postHandle();  Note that supporting HandlerInterceptor.afterCompletion() would be tricky again since that needs to be implemented at the DispatcherServlet level. I can probably pass the method level interceptor informaton as a ThreadLocal to DispatcherServlet. But DispatcherServlet.triggerAfterCompletion( ) is private.  Would greatly appreciate it , if these hooks could be provided for the 3.0 release.  thanks Karthik  ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-09-08T09:15:37Z","2019-01-11T13:39:29Z"
"","10706","Ability to configure a XStream subclass on XStreamMarshaller [SPR-6037]","**[Karthik Gurumurthy](https://jira.spring.io/secure/ViewProfile.jspa?name=spring_user)** opened **[SPR-6037](https://jira.spring.io/browse/SPR-6037?redirect=false)** and commented  This is about XStreamMarshaller.  http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/oxm/xstream/XStreamMarshaller.html  XStream allows you to customize XStream by specifying a MapperWrapper like so -      class MyXStream extends XStream {              @Override         protected MapperWrapper wrapMapper(MapperWrapper next) {             // TODO Auto-generated method stub             return new MyClassMapper(next);         }          }  But Spring 3.x XStreamMarshaller instantiates a XStream instance by default. So I'm not sure how we can supply our MapperWrapper .  I was wondering if Spring 3.x can provide a hook method that allows one to return their own custom XStream instance. Or an option to specify our XStream subclass class. (XStreamMarsheller.setXStreamClass(Class xstreamClass); You can probably use XStream.class by default. I guess you guys know best how to achieve this.  I see that a method  protected void    customizeXStream(com.thoughtworks.xstream.XStream xstream)  exists on XStreamMarshaller. But what I was looking for is a hook that allows us to specify our own XStream custom subclass.  Since Spring 3.x is not final yet, I was wondering if this hook can be added.  thanks!   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c2d63745fb3b1b21b59a41e07724a86853d0d05","closed","type: enhancement,","spring-projects-issues","2009-08-24T09:33:25Z","2012-06-19T03:43:57Z"
"","10626","NullPointerException in JmsUtils.buildExceptionMessage() [SPR-5958]","**[Karim Qazi](https://jira.spring.io/secure/ViewProfile.jspa?name=reemboe)** opened **[SPR-5958](https://jira.spring.io/browse/SPR-5958?redirect=false)** and commented  I am currently using Spring 2.5.6 and we are using the DefaultMessageListenerContainer object.  We were doing some integration testing and noticed that when we killed the JVM hosting our JMS Topic that our Spring DefaultMessageListenerContainer would not successfully re-establish a JMS connection after the JVM hosting the JMS Topic was restarted.  We would get a stack trace that indicated a NullPointerException from this code:      public static String buildExceptionMessage(JMSException ex) {     	String message = ex.getMessage();     	Exception linkedEx = ex.getLinkedException();     	if (linkedEx != null && message.indexOf(linkedEx.getMessage()) == -1) {  // Need to check for null on linkedEx.getMessage()     		message = message + ""; nested exception is "" + linkedEx;     	}     	return message;     }  You need to check for a null before calling ""message.indexOf(linkedEx.getMessage())"".  This NPE was causing the Spring JMS internals to not automatically re-connect to the JMS Topic.  ---  **Affects:** 2.5.6  **Issue Links:** - #9948 JmsUtils.buildExceptionMessage throws NPE if the linked exception doesn't have a message (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2009-07-27T08:28:55Z","2019-01-12T16:50:19Z"
"","10440","Add an option to turn off html escaping of the options for formRadioButtons and formCheckboxes [SPR-5770]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-5770](https://jira.spring.io/browse/SPR-5770?redirect=false)** and commented  This is usefull when you have options which contains html, f.x. images.   --- No further details from [SPR-5770](https://jira.spring.io/browse/SPR-5770?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2009-05-19T00:33:58Z","2019-01-12T02:37:43Z"
"","10421","Can't use SimpleTriggerBean from application context because GenericApplicationContext causes NotSerializableException [SPR-5751]","**[Kai Hackemesser](https://jira.spring.io/secure/ViewProfile.jspa?name=schlaufuchs)** opened **[SPR-5751](https://jira.spring.io/browse/SPR-5751?redirect=false)** and commented  I try to get a simple application context running, see below.  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  I wrote a small JUnit to execute a test that does nothing else than to try to schedule a Job using a JobDetailBean and a SimpleTriggerBean:  `@Test` public void test0() throws SchedulerException {      final JobDetailBean jobDetail = (JobDetailBean) applicationContext.getBean(""archivingJob"");     final SimpleTriggerBean trigger =         (SimpleTriggerBean) applicationContext.getBean(""simpleTrigger"");     scheduler.start();     scheduler.scheduleJob(jobDetail, trigger);  }  This fails with following exception:  org.quartz.JobPersistenceException: Couldn't store trigger: org.springframework.context.support.GenericApplicationContext [See nested exception: java.io.NotSerializableException: org.springframework.context.support.GenericApplicationContext] at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeTrigger(JobStoreSupport.java:1182) at org.quartz.impl.jdbcjobstore.JobStoreSupport$3.execute(JobStoreSupport.java:984) at org.quartz.impl.jdbcjobstore.JobStoreSupport$39.execute(JobStoreSupport.java:3590) at org.quartz.impl.jdbcjobstore.JobStoreCMT.executeInLock(JobStoreCMT.java:244) at org.quartz.impl.jdbcjobstore.JobStoreSupport.executeInLock(JobStoreSupport.java:3586) at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJobAndTrigger(JobStoreSupport.java:971) at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:703) at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:255) at com.energyintellect.schedule.jobs.ArchiveJobTest.test0(ArchiveJobTest.java:63) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:163) at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233) at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333) at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217) at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197) at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:142) at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51) at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44) at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27) at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37) at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: java.io.NotSerializableException: org.springframework.context.support.GenericApplicationContext at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1156) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1474) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at org.quartz.impl.jdbcjobstore.StdJDBCDelegate.insertBlobTrigger(StdJDBCDelegate.java:1198) at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeTrigger(JobStoreSupport.java:1178) ... 30 more    ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2009-05-13T16:41:42Z","2015-09-22T17:34:32Z"
"","10635","Support for relative references in EL expressions within bean definitions [SPR-5967]","**[JÃ¼rgen Rose](https://jira.spring.io/secure/ViewProfile.jspa?name=cptmauli)** opened **[SPR-5967](https://jira.spring.io/browse/SPR-5967?redirect=false)** and commented  What I intend to do is something like this:  \ \ \ \ \ \ \ \ \ \ \ \ \  So the property name of the inner bean is populated with the name of the outer bean, in this case the value ""myName""  In my instance I have a lot of those definitions in my application, which only differ in some kind of id, but which is referenced within the ""outer"" bean, so any dynamic mechanism which supports something like the above, would ease the configuration and prevent copy & paste errors.   ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-07-30T02:19:50Z","2018-12-28T10:44:04Z"
"","10412","Code highlighting muddled in 4.3.7.2 Arbitrary method replacement [SPR-5742]","**[JÃ¶rg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-5742](https://jira.spring.io/browse/SPR-5742?redirect=false)** and commented  4.3.7.2 Arbitrary method replacement, XML code sample: code highlighting is muddled.   ---  **Affects:** 3.0 M3","closed","type: documentation,","spring-projects-issues","2009-05-11T00:19:20Z","2012-06-19T03:43:35Z"
"","10411","Dead link on method injection [SPR-5741]","**[JÃ¶rg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-5741](https://jira.spring.io/browse/SPR-5741?redirect=false)** and commented  4.3.7.1 Lookup method injection, box ""Isn't this Method Injection..."": The link ""this blog entry"" to http://blog.springframework.com/rod/?p=1 is dead.   ---  **Affects:** 3.0 M3","closed","type: documentation,","spring-projects-issues","2009-05-11T00:15:43Z","2012-06-19T03:43:12Z"
"","10410","Missing "" and code highlighting issue in first code sample on p-Namespace [SPR-5740]","**[JÃ¶rg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-5740](https://jira.spring.io/browse/SPR-5740?redirect=false)** and commented  In 4.3.2.6 (http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch04s03.html#xml-config-shortcuts) the first code sample on the p-namespace is slightly messed up by a missing "" on the property element of the ""classic"" bean.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b815b5e05347cb6be39a12f13b4dabb54637e37","closed","type: documentation,","spring-projects-issues","2009-05-11T00:06:03Z","2012-06-19T03:44:01Z"
"","10086","XStreamMarshaller.setImplicitCollection(Map) is insufficient [SPR-5449]","**[JÃ¶rg Gottschling](https://jira.spring.io/secure/ViewProfile.jspa?name=jgottschling)** opened **[SPR-5449](https://jira.spring.io/browse/SPR-5449?redirect=false)** and commented  The Method Signature as proposed in [SWS-361](https://jira.spring.io/browse/SWS-361) is insufficient. It it really buggy. Because it is a Map (that has unique keys), you can not add two collections with the same name, even if thy are part of different classes:  \ \ \ \ \ \  If configured so, only ""theCollection"" in ""OtherClass"" will be implicit, because it ""overrides"" ""theCollection"" from ""TheClass"".  I like to propose to deprecate the method and add on with a slightly different signature. It should take a Collection of Strings with the fully qualified name of the Collection. XStreamMarshaller.setImplicitCollections(Collection\)  \ \ \package.TheClass.theCollection\ \package.OtherClass.theCollection\ \ \ By the way: Shouldn't it be ""implicitCollections"" (plural?).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03f3bf09d63c1ee9cfbce54bb20696d06fed49b0","closed","type: enhancement,","spring-projects-issues","2009-01-29T17:03:15Z","2012-06-19T03:47:26Z"
"","10235","Exception while migrating from Sunserver 8.1 to 9.1 [SPR-5564]","**[Jwala Kompalli](https://jira.spring.io/secure/ViewProfile.jspa?name=jwalakompalli)** opened **[SPR-5564](https://jira.spring.io/browse/SPR-5564?redirect=false)** and commented  Hello,  I have an existing application usign spring version 1.2.6 deployed and perfectly working on on Sun server 8.1. When I am trying to deploy the same applciation on Sunserver 9.1, I am getting the below exception:  sun-appserver9.1|javax.enterprise.system.stream.out|_ThreadID=21;_ThreadName=httpSSLWorkerThread-8080-0;|ERROR [BindTag.doStartTag 75] org.apache.taglibs.standard.lang.jstl.ImplicitObjects java.lang.ClassCastException: org.apache.taglibs.standard.lang.jstl.ImplicitObjects at javax.servlet.jsp.el.ImplicitObjectELResolver$ImplicitObjects.getImplicitObjects(ImplicitObjectELResolver.java:592) at javax.servlet.jsp.el.ImplicitObjectELResolver.getValue(ImplicitObjectELResolver.java:153) at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:143) at com.sun.el.parser.AstIdentifier.getValue(AstIdentifier.java:86) at com.sun.el.parser.AstMinus.getValue(AstMinus.java:55) at com.sun.el.parser.AstPlus.getValue(AstPlus.java:55) at com.sun.el.parser.AstDynamicExpression.getValue(AstDynamicExpression.java:59) at com.sun.el.parser.AstCompositeExpression.getValue(AstCompositeExpression.java:64) at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206) at org.apache.jasper.runtime.ExpressionEvaluatorImpl.evaluate(ExpressionEvaluatorImpl.java:121) at org.springframework.web.util.ExpressionEvaluationUtils$Jsp20ExpressionEvaluationHelper.evaluate(ExpressionEvaluationUtils.java:216)  Can anyone throw any idea to solve this?   --- No further details from [SPR-5564](https://jira.spring.io/browse/SPR-5564?redirect=false)","closed","type: task,","spring-projects-issues","2009-03-11T05:58:59Z","2019-01-11T17:03:55Z"
"","10231","Exception while migrating from Sunserver 8.1 to 9.1 [SPR-5560]","**[Jwala Kompalli](https://jira.spring.io/secure/ViewProfile.jspa?name=jwalakompalli)** opened **[SPR-5560](https://jira.spring.io/browse/SPR-5560?redirect=false)** and commented  Hello,  I have an existing application usign spring version 1.2.6 deployed and perfectly working on on Sun server 8.1. When I am trying to deploy the same applciation on Sunserver 9.1, I am getting the below exception:  sun-appserver9.1|javax.enterprise.system.stream.out|_ThreadID=21;_ThreadName=httpSSLWorkerThread-8080-0;|ERROR [BindTag.doStartTag 75] org.apache.taglibs.standard.lang.jstl.ImplicitObjects java.lang.ClassCastException: org.apache.taglibs.standard.lang.jstl.ImplicitObjects at javax.servlet.jsp.el.ImplicitObjectELResolver$ImplicitObjects.getImplicitObjects(ImplicitObjectELResolver.java:592) at javax.servlet.jsp.el.ImplicitObjectELResolver.getValue(ImplicitObjectELResolver.java:153) at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:143) at com.sun.el.parser.AstIdentifier.getValue(AstIdentifier.java:86) at com.sun.el.parser.AstMinus.getValue(AstMinus.java:55) at com.sun.el.parser.AstPlus.getValue(AstPlus.java:55) at com.sun.el.parser.AstDynamicExpression.getValue(AstDynamicExpression.java:59) at com.sun.el.parser.AstCompositeExpression.getValue(AstCompositeExpression.java:64) at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206) at org.apache.jasper.runtime.ExpressionEvaluatorImpl.evaluate(ExpressionEvaluatorImpl.java:121) at org.springframework.web.util.ExpressionEvaluationUtils$Jsp20ExpressionEvaluationHelper.evaluate(ExpressionEvaluationUtils.java:216)  Can anyone throw any idea to solve this?   --- No further details from [SPR-5560](https://jira.spring.io/browse/SPR-5560?redirect=false)","closed","status: declined,","spring-projects-issues","2009-03-10T07:53:50Z","2019-01-11T17:04:09Z"
"","10836","Inconsistent use of Object[] vs. Object... in AbstractBeanFactory vs. BeanFactory [SPR-6168]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-6168](https://jira.spring.io/browse/SPR-6168?redirect=false)** and commented  As part of the Java 5 changes, BeanFactory defines this method: Object getBean(String name, Object... args) throws BeansException;  AbstractBeanFactory implements this method, but also defines this method: public \ T getBean(String name, Class\ requiredType, Object[] args) throws BeansException  IMHO, this should really be: public \ T getBean(String name, Class\ requiredType, Object... args) throws BeansException  to be consistent.    --- No further details from [SPR-6168](https://jira.spring.io/browse/SPR-6168?redirect=false)","closed","in: core,","spring-projects-issues","2009-10-01T02:48:14Z","2012-06-19T03:43:17Z"
"","10674","PathVariable should be able to be greedy with respect to path components [SPR-6006]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-6006](https://jira.spring.io/browse/SPR-6006?redirect=false)** and commented  `@RequestMapping`(""/greedy/{id}"")  will match /greedy/foo  But it will not match /greedy/foo/bar    ---  **Affects:** 3.0 M4  **Attachments:** - [SPR-6006-illustration.zip](https://jira.spring.io/secure/attachment/15614/SPR-6006-illustration.zip) (_2.80 kB_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-14T02:41:56Z","2014-02-25T22:43:53Z"
"","10542","AbstractBeanDefinitionParser.parseInternal() cannot return null [SPR-5872]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-5872](https://jira.spring.io/browse/SPR-5872?redirect=false)** and commented  Although it's acceptable for NamespaceHandler.parse() to return null, in practice this is unnecessarily hard to do because AbstractBeanDefinitionParser cannot be used as the base class for BeanDefinitionParser implementations which return null.  When parseInternal() returns null, this null object is passed to a BeanDefinitionHolder constructor (https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/AbstractBeanDefinitionParser.java?r=111#l64). This causes a failed assertion. (https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionHolder.java?r=855#l63).   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-06-26T06:49:15Z","2012-06-19T03:43:32Z"
"","10138","UrlResource should support lastModified() for http URLs [SPR-5465]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-5465](https://jira.spring.io/browse/SPR-5465?redirect=false)** and commented  The lastModified() method of org.springframework.core.io.UrlResource only works for URLs that can be resolved to files. For HTTP URLs, a HEAD request could be made to get the Last Modified header.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/82730830d16a4d4ab37bf5f491703cca962d9202  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-05T23:12:21Z","2012-06-19T03:47:18Z"
"","10518","Make SimpleHttpServerJaxWsServiceExporter easier to extend [SPR-5849]","**[Jurrie Overgoor](https://jira.spring.io/secure/ViewProfile.jspa?name=leadpumper)** opened **[SPR-5849](https://jira.spring.io/browse/SPR-5849?redirect=false)** and commented  I'm running into issues subclassing org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter. I need to override afterPropertiesSet() and publishEndpoint(). The problem is that all the fields of SimpleHttpServerJaxWsServiceExporter are private instead of protected. When I override above methods, I need a reference to the server field (and possibly others).  Subclassing SimpleHttpServerJaxWsServiceExporter can be for various reasons, like extending with HTTPS support. In my case I need it to rewrite the WSDL that is generated by Jax-ws (due to mod_proxy that translates https://externalhost to http://internalhost).  This also goes for org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter of course...  I'm working with Spring 2.5.6 sec 1, but I checked the Javadocs for 3.0.x and it seems the problem didn't change.   ---  **Affects:** 2.5.6, 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-06-20T23:52:19Z","2018-12-26T16:40:44Z"
"","10949","Enhance JPA Exception Translation to use PersistenceExceptionTranslator injected instance [SPR-6282]","**[Jukka PalomÃ¤ki](https://jira.spring.io/secure/ViewProfile.jspa?name=duckbill)** opened **[SPR-6282](https://jira.spring.io/browse/SPR-6282?redirect=false)** and commented  (Logged by Ben Alex on behalf of Jukka PalomÃ¤ki)  [ROO-182](https://jira.spring.io/browse/ROO-182) provided basic AspectJ-based exception translation of any JPA exceptions into Spring DataAccessExceptions. The present implementation uses the static EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(RuntimeException) method. Unfortunately this approach does not provide the ability to unwrap JPA implementation-specific exceptions that may be embedded within the JPA exception.  Spring provides a PersistenceExceptionTranslator interface:  ``` public interface PersistenceExceptionTranslator { 	DataAccessException translateExceptionIfPossible(RuntimeException ex);  } ```  There are various implementations of PersistenceExceptionTranslator, including implementations specific to different JPA implementations. For example, HibernateJpaDialect implements PersistenceExceptionTranslator and provides Hibernate-specific exception-to-DataAccessException resolution.  Because the optimal PersistenceExceptionTranslator will vary at runtime depending on which JPA implementation is in use, the exception translation aspect provided by Roo should allow the injection of a PersistenceExceptionTranslator by Spring and use that if present. It should gracefully fallback to the present static EntityManagerFactoryUtils approach if the PersistenceExceptionTranslator has not been injected. A possible implementation example has been provided in the [ROO-182](https://jira.spring.io/browse/ROO-182) comments.  In the meantime users can easily edit the Roo-provided exception translation aspect and delegate to their preferred PersistenceExceptionTranslator. It is also noted that only Hibernate's JPA dialect provides custom translation logic (the OpenJPA and EclipseLink implementations both inherit generic behaviour from DefaultJpaDialect, with DefaultJpaDialect simply delegating to the static EntityManagerFactoryUtils method). Accordingly OpenJPA and EclipseLink users will not obtain any immediate benefit from this enhancement, despite it clearly being beneficial in the long-term when such custom translation logic is provided by those DefaultJpaDialect subclasses.  ---  **Issue Links:** - [ROO-182](https://jira.spring.io/browse/ROO-182) JPA Exception Translation should be made available as an optional feature - [ROO-315](https://jira.spring.io/browse/ROO-315) Use Spring Framework-provided EntityManager exception translation services - #10942 Spring Aspects to provide DataAccessException translation for direct EntityManager usage (_**""is superseded by""**_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-04T10:53:26Z","2019-01-11T15:11:12Z"
"","10667","Add support for @Transactional static methods [SPR-5999]","**[Jukka PalomÃ¤ki](https://jira.spring.io/secure/ViewProfile.jspa?name=duckbill)** opened **[SPR-5999](https://jira.spring.io/browse/SPR-5999?redirect=false)** and commented  Given the rich Entity model promoted by e.g. Spring Roo, it would be nice if Spring core would support `@Transactional` static methods via AspectJ. Have a look at the sample below.  ```java @Entity class Reservation {      @Transactional     public void save() {         // ...     }          @Transactional     public void delete() {         // ...     }          //...          @Transactional     public static void deleteAll() {          // ...     } } ```  Currently this sort of design can work out for example by creating a (private) `@Transactional` instance method (e.g. `doDeleteAll()`), and delegating to it from within the static method. Though fairly concise, this approach feels sub-optimal. Another approach is to create a `@Service` bean to encapsulate this behavior, but for such a simple operation, it seems like overkill.  ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=76011  6 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-11T17:25:08Z","2021-02-10T12:32:35Z"
"","10384","Finalize module names (e.g. revisit context.support and instrument.classloading) [SPR-5714]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-5714](https://jira.spring.io/browse/SPR-5714?redirect=false)** and commented   --- No further details from [SPR-5714](https://jira.spring.io/browse/SPR-5714?redirect=false)","closed","type: task,","spring-projects-issues","2009-05-04T20:02:56Z","2012-06-19T03:44:17Z"
"","10258","Support Servlet 3.0 (JSR-315) [SPR-5587]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-5587](https://jira.spring.io/browse/SPR-5587?redirect=false)** and commented  Spring 3.0 provides compatibility with Servlet 3.0 containers such as GlassFish V3 already. Spring 3.1 (Q2 2011) is likely to provide optional support for Servlet 3.0's multipart form handling (#11210), and possibly for other Servlet 3.0 features that we can provide fallback solutions for as well.  Also to consider is support for Servlet 3.0 async processing in Spring MVC and for Servlet 3.0 auto-registration in Spring's general web deployment.  http://jcp.org/en/jsr/detail?id=315  ---  **Issue Links:** - #13162 Support for Servlet 3.0/3.1 asynchronous request processing - #12529 Provide servlet 3.0 web fragment to startup application context without web.xml modifications - #11210 Provide StandardMultipartResolver based on Servlet 3.0 Part API - #12328 Support configuring Servlet container in Spring using Servlet 3.0 programmatic config - #9840 Support for Tomcat's CometEvent enabled beans  18 votes, 21 watchers","closed","has: votes-jira,","spring-projects-issues","2009-03-19T23:32:52Z","2019-01-11T17:02:42Z"
"","10257","Full support for JPA 2.0 [SPR-5586]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-5586](https://jira.spring.io/browse/SPR-5586?redirect=false)** and commented  We will be providing compatibility with EclipseLink 1.1 - and hence the JPA 2.0 preview API there - in Spring 3.0 RC1 already.  However, full support for JPA 2.0 will have to wait for the JSR-317 spec going final, which is currently scheduled for September. Spring 3.1 will be catching up with it.   ---  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-19T23:29:07Z","2012-06-19T03:47:30Z"
"","10256","Full support for JSF 2.0 [SPR-5585]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-5585](https://jira.spring.io/browse/SPR-5585?redirect=false)** and commented  We will be providing compatibility with Mojarra 2.0 beta releases - and hence the JSF 2.0 public review API there - in Spring 3.0 RC1 already.  However, full support for JSF 2.0 will have to wait for the JSR-314 spec going final, which is currently scheduled for September. Spring 3.1 will be catching up with it.   ---  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-19T23:28:15Z","2012-06-19T03:47:36Z"
"","9908","Move to modularized source layout and new build system [SPR-5234]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-5234](https://jira.spring.io/browse/SPR-5234?redirect=false)** and commented   --- No further details from [SPR-5234](https://jira.spring.io/browse/SPR-5234?redirect=false)","closed","type: task,","spring-projects-issues","2008-10-22T21:22:02Z","2012-06-19T03:46:58Z"
"","9907","Deprecate superseded functionality such as the traditional MVC controller and JUnit 3.8 base class hierarchies [SPR-5233]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-5233](https://jira.spring.io/browse/SPR-5233?redirect=false)** and commented  Spring 3.0 gives us the chance to deprecate superseded functionality:  * the traditional MVC controller class hierarchy (superseded by Spring 2.5's annotated controller style) * the traditional JUnit 3.8 test class hierarchy (superseded by Spring 2.5's test context framework)    --- No further details from [SPR-5233](https://jira.spring.io/browse/SPR-5233?redirect=false)","closed","type: task,","spring-projects-issues","2008-10-22T20:49:24Z","2012-06-19T03:47:25Z"
"","9906","Drop outdated JDK 1.4 only functionality such as Commons Attributes support [SPR-5232]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-5232](https://jira.spring.io/browse/SPR-5232?redirect=false)** and commented  Spring 3.0 gives us the chance to get rid of functionality that became outdated with Java 5+:  * backport-concurrent fallbacks in the core (can rely on java.util.concurrent being present now) * Commons Attribute support (superseded by native Java 5 annotations) * support for TopLink's native API and bootstrapping (in favor of JPA)    --- No further details from [SPR-5232](https://jira.spring.io/browse/SPR-5232?redirect=false)","closed","type: task,","spring-projects-issues","2008-10-22T20:46:00Z","2012-06-19T03:46:58Z"
"","9905","Java 5+ upgrade of core container API and implementation [SPR-5231]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-5231](https://jira.spring.io/browse/SPR-5231?redirect=false)** and commented  Spring 3.0 gives us the chance to upgrade the entire Spring API to Java 5+.  This issue is tracking the upgrade effort in Spring's core packages: * org.springframework.aop * org.springframework.beans * org.springframework.context * org.springframework.core * org.springframework.util    ---  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2008-10-22T20:35:47Z","2019-01-11T15:19:42Z"
"","10734","BeanPostProcessor callbacks don't work as expected for @PostConstruct annotated methods [SPR-6066]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-6066](https://jira.spring.io/browse/SPR-6066?redirect=false)** and commented  Creating this issue per Juergen's request: because support for `@PostConstruct` is implemented using a BeanPostProcessor, the BPP.postProcessBeforeInitialization method is invoked **after** the actual initialization method that has the annotation. This has always been the case since support for JSR-250 was added I think, but no issue was ever created to make sure to track this deficiency. Added a simple test case that shows the described behavior,   ---  **Affects:** 2.5.6, 3.0 M4  **Attachments:** - [BppLifecycleTest.zip](https://jira.spring.io/secure/attachment/15682/BppLifecycleTest.zip) (_4.65 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7428014ca3278eb0b4dd301783310df47fe3bd8d, https://github.com/spring-projects/spring-framework/commit/fcaf692225b79db08f4359680ae9b5a6d4910554, https://github.com/spring-projects/spring-framework/commit/c495cbb1bfdce46a946e753d4682c312ae32df9c","closed","in: core,","spring-projects-issues","2009-09-02T01:38:07Z","2012-06-19T03:43:20Z"
"","10733","Autowiring doesn't fail in case of ambiguity with certain combinations of Java config and component scanning [SPR-6065]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-6065](https://jira.spring.io/browse/SPR-6065?redirect=false)** and commented  See the attached example: the ClassWithDependency is autowired by type, which should fail as there are two candidates: one created using component scanning and one created by the ConfigClass.secondDependency `@Bean` method. However, it doesn't. Interestingly, if you explicitly name the component scanned Dependency using its `@Component` annotation, it does. This seems like an obvious bug.  ---  **Affects:** 3.0 M4  **Attachments:** - [JavaConfigAutowireBug.zip](https://jira.spring.io/secure/attachment/15681/JavaConfigAutowireBug.zip) (_4.82 kB_)  **Issue Links:** - #10796 Field autowiring in TestContext framework ignores explicit `@Qualifier` in favor of qualification by field name  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b54746a5012c3620b9fd46bc78d947f6fddd7b8","closed","in: core,","spring-projects-issues","2009-09-02T00:42:41Z","2019-01-13T07:58:40Z"
"","10647","Reference guide refers to non-existing type StandardScopes [SPR-5979]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-5979](https://jira.spring.io/browse/SPR-5979?redirect=false)** and commented  In the current reference guide, the section ""Classpath scanning and managed components"" has a couple of code samples that refer to a type StandardScopes that doesn't seem to exist. This needs to be fixed.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3e02887dd25a8f2aa1f8884dbd7872ad8f43bc17","closed","type: bug,","spring-projects-issues","2009-08-04T00:27:57Z","2012-06-19T03:43:34Z"
"","10646","Broken ref to non-existing REST chapter in what's new section in reference guide [SPR-5978]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-5978](https://jira.spring.io/browse/SPR-5978?redirect=false)** and commented  I built the reference docs from SVN, and noticed that section 2.5.5.1 still links to the REST chapter that seems to have been removed. This should be fixed.   ---  **Affects:** 3.0 M4","closed","type: bug,","spring-projects-issues","2009-08-03T19:44:39Z","2012-06-19T03:44:09Z"
"","10439","HttpHeaders becomes case-sensitive without Commons Collections on the classpath [SPR-5769]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-5769](https://jira.spring.io/browse/SPR-5769?redirect=false)** and commented  HttpHeaders creates its header map like this: private final Map headers = CollectionFactory.createLinkedCaseInsensitiveMapIfPossible(5);  The method used will happily return a case **sensitive** map if Commons Collections is not on the classpath. This causes HttpHeaders to break HTTP Spec compliancy, as headers should always be treated as case insensitive (http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2). Interestingly enough, when I send an HTTP Request with a Content-Type header, HandlerMethodInvoker.resolveRequestBody gets an HttpInputMessage where all headers are converted to lower-case. This causes an IllegalStateException with a wrong message: ""Cannot extract response: no Content-Type found"". (response should be request, obviously.) Changing the case of the headers is done by Tomcat or Spring, as the TCP/IP Monitor confirms the header is still intact when the request is sent over the network. Combined with this bug, this means a large part of the current REST support is simply broken, which is why I've marked this issue as critical. Either HttpHeaders should throw an exception if it doesn't receive a real case-insensitive map, or it should work a little harder to implement the case-insensitivity itself without depending on Commons Collections.  ---  **Affects:** 3.0 M3  **Issue Links:** - #10435 `@RequestBody` Annotation Not Extracting Content-Type","closed","type: bug,","spring-projects-issues","2009-05-18T18:48:55Z","2019-01-13T07:59:38Z"
"","10349","Add option to check for matching number of arguments for a given PreparedStatement in ArgPreparedStatementSetter and enhance JdbcTemplate to optionally use it [SPR-5678]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-5678](https://jira.spring.io/browse/SPR-5678?redirect=false)** and commented  Currently, ArgPreparedStatementSetter.setValues simply applies the values in the args array it was created with to the given PreparedStatement. That means that if there are less arguments than placeholders, the remaining placeholders will be null. This is valid behavior in some cases, but in many cases I'd argue that this indicates a programmer error (forgetting a parameter). It might be nice to add an option to setValues to optionally check for a matching count of arguments and placeholders. The latter can be obtained from the PreparedStatement's ParameterMetaData. The JdbcTemplate can then be updated to enable this feature so this programming error would be caught early, instead of indirectly by running the statement with accidental null values. By disabling the option by default everything remains backwards compatible.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-04-15T00:41:33Z","2012-06-19T02:28:22Z"
"","10348","should warn when no bean names match [SPR-5677]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-5677](https://jira.spring.io/browse/SPR-5677?redirect=false)** and commented  It's quite easy to make a typo in the name (or name pattern) of an bean you're referring to when using ; same for exclude, obviously. Currently there's no warning if the provided name value doesn't match any beans in the application context. It would be nice if this scenario would result in a warning being issued, as it doesn't make a lot of sense to purposefully specify a pattern without matches.  It will help to catch errors that are hard to spot otherwise.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-04-14T22:50:23Z","2012-06-19T09:36:15Z"
"","10178","FactoryBean to simplify configuration of commons HttpClient particualrly with regard to authentication [SPR-5506]","**[Jonas Partner](https://jira.spring.io/secure/ViewProfile.jspa?name=jpartner)** opened **[SPR-5506](https://jira.spring.io/browse/SPR-5506?redirect=false)** and commented  Configuring the Apache HttpClient for authentication is quite painful currently even for basic authentication.  Simplifying this would be useful for standalone usage as well as usage with the WebServiceTemplate and presumably the upcoming RestTemplate.   --- No further details from [SPR-5506](https://jira.spring.io/browse/SPR-5506?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-02-19T02:56:50Z","2012-06-19T09:36:15Z"
"","9975","Calls to RMI/IIOP services via JndiRmiProxyFactoryBean never return when client uses Java 1.6 [SPR-5302]","**[Jonas Eschenburg](https://jira.spring.io/secure/ViewProfile.jspa?name=indyjo)** opened **[SPR-5302](https://jira.spring.io/browse/SPR-5302?redirect=false)** and commented  Calls to remote interfaces via RMI/IIOP never return. This happens exactly if:      * The client is running with Java 1.6     * AND The connection was made using Spring's JndiRmiProxyFactoryBean  Take any of the two away and everything will work as expected: Java 1.5 clients work, Java 1.6 clients work fine if the connection is made without Spring. Java 1.6 servers with Java 1.5 clients work, so the problem seems to be caused by the client.  _How to reproduce_      * Extract the attached ZIP file. For your convenience, it contains an Eclipse project.     * Put Spring's spring.jar into the ""lib"" directory (any version seems to work)     * Compile using the include ant file (build.xml, target ""build"")     * Start Java's ORB: orbd -ORBInitialPort 13800     * Run the Server main class     * Run the Client main class     * Run the SpringClient main class (make sure that a Java 1.6 JRE is used)  The Server will output:      Server is running.     Received call by Normal client     Received call by Spring client  The Client will output:      Calling: class _DoSomething_Stub 24417480     IOR:0000000000000021524d493a446f536f6d657468696e67 3a303030303030303030303030303030300000000000000001 000000000000006e000102000000000d31302e32392e32302e 3131390000098e00000019afabcb000000000256bdf9ba0000 00080000000100000000140000000000000200000001000000 20000000000001000100000002050100010001002000010109 000000010001010000000026000000020002     Done.  The SpringClient will output:      Calling: class $Proxy0 15081425     IOR:0000000000000021524d493a446f536f6d657468696e67 3a303030303030303030303030303030300000000000000001 000000000000006e000102000000000d31302e32392e32302e 3131390000098e00000019afabcb000000000256bdf9ba0000 00080000000100000000140000000000000200000001000000 20000000000001000100000002050100010001002000010109 000000010001010000000026000000020002  You'll notice that the SpringClient is still running, whereas the Client class, which doesn't use Spring, terminated successfully.  This is where the client hangs:  ``` Thread [main] (Suspended)	 	waiting for: Object  (id=42)	 	Object.wait(long) line: not available [native method] [local variables unavailable]	 	Object.wait() line: 485	 	CorbaResponseWaitingRoomImpl.waitForResponse(MessageMediator) line: 140	 	SocketOrChannelConnectionImpl.waitForResponse(MessageMediator) line: 1060	 	CorbaMessageMediatorImpl.waitForResponse() line: 253	 	CorbaClientRequestDispatcherImpl.marshalingComplete1(ORB, CorbaMessageMediator) line: 349	 	CorbaClientRequestDispatcherImpl.marshalingComplete(Object, OutputObject) line: 323	 	CorbaClientDelegateImpl.invoke(Object, OutputStream) line: 129	 	_DoSomething_Stub(ObjectImpl)._invoke(OutputStream) line: 457	 	_DoSomething_Stub.doSomething(String) line: 39	 	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	 	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	 	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	 	Method.invoke(Object, Object...) line: 597	 	RmiClientInterceptorUtils.doInvoke(MethodInvocation, Remote) line: 101	 	JndiRmiProxyFactoryBean(JndiRmiClientInterceptor).doInvoke(MethodInvocation, Remote) line: 407	 	JndiRmiProxyFactoryBean(JndiRmiClientInterceptor).invoke(MethodInvocation) line: 283	 	ReflectiveMethodInvocation.proceed() line: 161	 	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	 	$Proxy0.doSomething(String) line: not available	 	SpringClient.main(String[]) line: 14 ```    ---  **Affects:** 2.5.6  **Attachments:** - [corbatest.zip](https://jira.spring.io/secure/attachment/14873/corbatest.zip) (_12.25 kB_)  1 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2008-11-16T20:10:24Z","2019-01-12T16:27:45Z"
"","10699","Please don't @Deprecate the form controllers just yet! [SPR-6030]","**[Jon Vincent](https://jira.spring.io/secure/ViewProfile.jspa?name=jonmv)** opened **[SPR-6030](https://jira.spring.io/browse/SPR-6030?redirect=false)** and commented  The new `@MVC` annotations are very cool, and it's exciting to see them become the new preferred/suggested/default API, but it's still too early to forcibly `@Deprecate` the form controller class hierarchy. I hope one or more of the following arguments will convince you:  1. It's a significant change to make    The switch away from AbstractFormController and friends is not trivial. The mental/programming model is quite different, and each controller must be refactored to move some of the support logic provided in that base class into the controller itself. This will be a significant cost for large applications that want to switch to Spring 3.0.  If you guys choose to `@Deprecate` the base class, you'll be forcing your customers to choose from a number of unappealing options: pay the upfront cost just to get on the 3.0 train, ignore the deprecation warning, `@SuppressWarnings`(""deprecation"") on their entire controller implementations, or re-implement the form support classes themselves on top of AbstractController.  2. The `@MVC` system is not yet fully mature    The new API is still quite young, and important functionality like validation integration is just being added now, in Spring 3.0 RC1 (see #10091). Reading that issue, and various other issues related to controller annotations (for a short list of examples, see #10236, #9849, #10365, and #9737), it appears that there may still be gaps in the API that need to be filled before it will be suitable for wide-spread adoption in complex applications. It's not really yet clear exactly what the most common usage patterns will be for some scenarios.  3. The community has not yet had a chance to buy in    Because the API is so new, and was not the primary documented API for controllers in 2.5, the community hasn't really had a chance to ""get to know"" the `@MVC` API as well as the existing controller classes. There's not a lot of 3rd party information easily searchable on Google (for me at least), and there aren't a lot of examples of best practices.  4. There are still things that can only be done with the old API    Some of the issues I referenced in #2 go into more detail. Others are simply limitations of the current design (for example, it appears to be impossible to set different cacheSeconds values for individual controllers using `@MVC`, since that property is set on the HandlerAdapter in the new API). Certainly, in all cases there are workarounds, but they typically involve re-implemementing functionality in application classes. This adds to the pain of switching.  5. Weight of the implementation    The new API is fairly heavy weight in terms of both CPU cycles as well as working set size/GC impact, especially when compared to the cost of of the old Controller class hierarchy. Each request has to do a lot of work and create a lot of objects to achieve the flexibility of the new API, and for large deployments this could represent significant overhead for simple controllers. This will probably improve over time as more energy is devoted to the new codebase.  I'm not suggesting that you move away from promoting `@MVC` as the new hotness, but I am asking that you avoid the (somewhat drastic) step of `@Deprecating` the form hierarchy until some of the points above can be resolved. Removing the annotation for now has very little cost, and should not put the timeline/release of 3.0 at risk.  P.S. I apologize if the preferred process is to raise these discussions in the forum before opening an issue.  ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4  1 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2009-08-21T06:44:34Z","2019-01-12T16:39:10Z"
"","10152","Component scanning doesn't find enums in annotations  [SPR-5479]","**[Jon Bass](https://jira.spring.io/secure/ViewProfile.jspa?name=jon918)** opened **[SPR-5479](https://jira.spring.io/browse/SPR-5479?redirect=false)** and commented  If I have an annotation like: public `@interface` Foo { String value(); Thread.State state() default Thread.State.WAITING; }  Then the attributes in the AnnotatedBeanDefinition.getMetaData().getAnnotationattributes() always has the default value when I try to get them from a custom bean name generator.  ---  **Affects:** 2.5.6  **Issue Links:** - #10497 Regression: AnnotationMetadataReadingVisitor doesn't consider annotation method returning classes (SPR-5477)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/213b528ffe5b3624139d3f92e00acef01f35d8a5  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2009-02-12T05:47:09Z","2019-01-12T16:27:19Z"
"","10488","Property editor not being used for frm:select [SPR-5818]","**[john@johnandkerri.com](https://jira.spring.io/secure/ViewProfile.jspa?name=johndstein)** opened **[SPR-5818](https://jira.spring.io/browse/SPR-5818?redirect=false)** and commented  As of spring v 2.5.6, for frm:select tags toString is still being called by org.springframework.web.servlet.tags.form.SelectedValueComparator.isSelected method instead of my custom property editor. the editor is called on save, but not on display of jsp page.  this is similar to http://jira.springframework.org/browse/SPR-4164 which reported as fixed by 2.5.2.        06/10 12:15:01 [http-8080-Processor24] DEBUG net.aileron.data.entity.rez.FoodType.toString(FoodType.java:100) java.lang.RuntimeException at net.aileron.data.entity.rez.FoodType.toString(FoodType.java:100) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.hibernate.proxy.pojo.cglib.CGLIBLazyInitializer.invoke(CGLIBLazyInitializer.java:157) at net.aileron.data.entity.rez.FoodType$$EnhancerByCGLIB$$74e31005.toString(\) at org.springframework.util.ObjectUtils.nullSafeToString(ObjectUtils.java:547) at org.springframework.util.ObjectUtils.getDisplayString(ObjectUtils.java:493) at org.springframework.web.servlet.tags.form.SelectedValueComparator.exhaustiveCompare(SelectedValueComparator.java:181) at org.springframework.web.servlet.tags.form.SelectedValueComparator.isSelected(SelectedValueComparator.java:105) at org.springframework.web.servlet.tags.form.OptionWriter.isOptionSelected(OptionWriter.java:233) at org.springframework.web.servlet.tags.form.OptionWriter.renderOption(OptionWriter.java:210) at org.springframework.web.servlet.tags.form.OptionWriter.doRenderFromCollection(OptionWriter.java:192) at org.springframework.web.servlet.tags.form.OptionWriter.renderFromCollection(OptionWriter.java:177) at org.springframework.web.servlet.tags.form.OptionWriter.writeOptions(OptionWriter.java:132) at org.springframework.web.servlet.tags.form.SelectTag.writeTagContent(SelectTag.java:216)   --- No further details from [SPR-5818](https://jira.spring.io/browse/SPR-5818?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2009-06-10T03:30:39Z","2019-01-12T02:37:37Z"
"","10721","NullPointerException can occur from JmsUtils.buildException [SPR-6052]","**[John Baker](https://jira.spring.io/secure/ViewProfile.jspa?name=jmbaker)** opened **[SPR-6052](https://jira.spring.io/browse/SPR-6052?redirect=false)** and commented  The following exception has been noted when the WL JMS drivers failed to connect:  Exception in thread ""jms.jobs.messageListenerContainer.SRUpdateFromSiebel-1"" java.lang.NullPointerException at java.lang.String.indexOf(String.java:1564) at java.lang.String.indexOf(String.java:1546) at org.springframework.jms.support.JmsUtils.buildExceptionMessage(JmsUtils.java:255) at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:745) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:897) at java.lang.Thread.run(Thread.java:595)  The problem is this line of code in JmsUtils.buildException:      if (linkedEx != null && message.indexOf(linkedEx.getMessage()) == -1) {  linkedEx may not be null, but the message can be null, so it simply need to be:      if (linkedEx != null && linkedEx.getMessage() != null && message.indexOf(linkedEx.getMessage()) == -1) {  ---  **Affects:** 2.5.6  **Issue Links:** - #9948 JmsUtils.buildExceptionMessage throws NPE if the linked exception doesn't have a message (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2009-08-28T20:43:06Z","2019-01-12T16:50:14Z"
"","10762","@PostConstruct order in inheritance hierarchy is wrong (or at least not intuitive) [SPR-6094]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-6094](https://jira.spring.io/browse/SPR-6094?redirect=false)** and commented  * Define an abstract class Foo with an annotated init method. * Define a concrete class Bar with an annotated init method. * Define a bean instance of Bar.  After the bean instantiation the init method of Bar is called. Then the init method of Foo is called. This is probably the wrong way to do it since superclasses likely define/instantiate stuff children will depend on.   ---  **Affects:** 2.5.6  **Attachments:** - [example.zip](https://jira.spring.io/secure/attachment/15704/example.zip) (_1.58 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d4c16e91dfaf17ef63d6df2081014736e6f75efc","closed","in: core,","spring-projects-issues","2009-09-09T20:18:51Z","2012-06-19T03:44:09Z"
"","10640","Provide a HandlerExceptionResolver that maps DataAccessException exceptions to http error codes [SPR-5972]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-5972](https://jira.spring.io/browse/SPR-5972?redirect=false)** and commented  Example: PermissionDeniedDataAccessException -> 403 Forbidden or DataRetrievalFailureException -> 404   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-07-31T04:06:06Z","2018-12-28T10:12:48Z"
"","10629","Enable AbstractRequestLoggingFilter implementations to access the request body [SPR-5961]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-5961](https://jira.spring.io/browse/SPR-5961?redirect=false)** and commented  See #10628 - this is primarly useful for debugging POST requests with invalid RequestBody parameters. The patch is based is on [this](http://www.pascalalma.net/2007/08/24/debugging-soap-by-logging-the-incoming-httprequest/) blog post.  ---  **Affects:** 3.0 M3  **Attachments:** - [patch.zip](https://jira.spring.io/secure/attachment/15569/patch.zip) (_3.83 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d4ae59ff166d87f83f63c3e26b61caabb230cf9","closed","type: enhancement,","spring-projects-issues","2009-07-28T05:33:43Z","2019-01-11T18:14:39Z"
"","10628","org.springframework.http.converter.HttpMessageNotReadableException should expose message which could not be read [SPR-5960]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-5960](https://jira.spring.io/browse/SPR-5960?redirect=false)** and commented   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-07-27T10:53:25Z","2019-01-11T18:14:38Z"
"","10784","Improvement of locale resolving in ReloadableMessageSource [SPR-6116]","**[Joerg Herbst](https://jira.spring.io/secure/ViewProfile.jspa?name=jherbst)** opened **[SPR-6116](https://jira.spring.io/browse/SPR-6116?redirect=false)** and commented  When loading messages with a ReloadableResourcesMessageSource you can only use a fallback to the Locale.getDefault(). This is not apropriate if running on an application server and the default locale is not in your control.   ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4  **Attachments:** - [reloadableResourceBundleMessageSource.patch](https://jira.spring.io/secure/attachment/15719/reloadableResourceBundleMessageSource.patch) (_2.05 kB_)","closed","type: enhancement,","spring-projects-issues","2009-09-16T00:47:04Z","2018-12-28T12:19:37Z"
"","10182","integrate transaction synchronizations with savepoints [SPR-5510]","**[Joe Kearney](https://jira.spring.io/secure/ViewProfile.jspa?name=joekearney)** opened **[SPR-5510](https://jira.spring.io/browse/SPR-5510?redirect=false)** and commented  I'd like to propose an integration between synchronizations and transaction savepoints, as follows. Suppose that I register two synchronizations in my transaction; S1 registered before the nested transaction was started and S2 registered inside the nested transaction. 1. If the nested transaction is rolled back, then S2 should be unregistered and have its callbacks invoked as if it were in a usual transaction rollback. 2. If the nested transaction is committed, then the S2 should not have its commit callbacks invoked until the end of the outer transaction, so that if the outer transaction is rolled back the nested transaction's work is not persisted. 3. Synchronizations should have the ability to listen to savepoint edges: S1 could be informed when the savepoint is taken and again when it is rolled back or released.  I'm aware that storing transactional state in a synchronization might be considered something to avoid. If there are better ways to achieve this, I'm all ears, in particular for the SQL batching case below.  A couple of use cases: * Consider using the DataSourceTransactionManager and starting a nested transaction, then using JmsTemplate to send a message to a queue. A synchronization gets registered by ConnectionFactoryUtils to commit the JMS session in an afterCommit() callback. What happens to this synchronization when the nested transaction commits or rolls back? I propose that on rollback the JMS session be rolled back and the synchronization removed; on commit, nothing happens immediately, but the session should be committed at completion of the outer transaction. I suppose we'd also need to be careful about the behaviour of using the JMS session again in the outer transaction after the nested transaction has been released.  ``` start DataSource transaction { 	... 	take savepoint { 		use JmsTemplate, registers synchronization 	} rollback/commit savepoint } commit transaction  ```  * I have a wrapper around JdbcTemplate batching, implemented as a synchronization, to automatically execute the batch beforeCommit(). Extra values can be added to the batch during the transaction. Suppose I add some updates A to the batch, enter a nested transaction and add some more updates B, and after the nested transaction add some more updates C. I would like to ensure that order of execution of the batch items is maintained (A, B, C), but that if the nested transaction was rolled back, the updates B are not executed. This might be implemented by the notion of a savepoint on the synchronization, to allow the synchronization to manage its own state on rollback of the savepoint.  ``` start transaction { 	enlist database 	start DB batch, add element A to batch 	take savepoint { 		add element B to batch 	} rollback/commit savepoint 	add element C to batch } commit transaction ```  This would be used when batching JMS messages. I'd like to process each message in a nested transaction so that on failure I can rollback the savepoint and commit the work for messages I've already processed successfully. I also want to add any batch SQL items to a single synchronization to be executed on completion of the outer-most transaction, so that, in the above example, A, B and C might be in three separate nested transactions.   ---  **Affects:** 2.5.6  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-19T21:34:16Z","2015-09-22T17:34:32Z"
"","10043","TilesConfigurer setDefinitions does not trim input (e.g. /WEB-INF/tiles-layout.xml     ) while formatting xml in eclipse adds whitespace. [SPR-5370]","**[Jochen Szostek](https://jira.spring.io/secure/ViewProfile.jspa?name=dr.drane)** opened **[SPR-5370](https://jira.spring.io/browse/SPR-5370?redirect=false)** and commented  When formatting XML in Eclipse \ elements sometimes are moved to the next line like this:           	     		     			/WEB-INF/config/tiles-layout.xml     			     		     	       This will create a compile issue because the setDefinitions method in the TilesConfigurer class does not trim the input (because it uses StringUtils.arrayToCommaDelimitedString) and it wont be able to find the config file. I guess this is something that can happen to a lot of people who use the Eclipse source formatting features.  So I recommend changing the setDefinitions file to use a StringUtils.arrayToTrimmedCommaDelimitedString method:      /**      * Set the Tiles definitions, i.e. the list of files containing the definitions.      * Default is ""/WEB-INF/tiles.xml"".      */     public void setDefinitions(String[] definitions) {     	if (definitions != null) {     		String defs = StringUtils.arrayToTrimmedCommaDelimitedString(definitions);     		if (logger.isInfoEnabled()) {     			logger.info(""TilesConfigurer: adding definitions ["" + defs + ""]"");     		}     		this.tilesPropertyMap.put(BasicTilesContainer.DEFINITIONS_CONFIG, defs);     	}     }  This arrayToTrimmedCommaDelimitedString method could be added to the org.springframework.util.StringUtils method after the arrayToCommaDelimitedString method:      /**      * Convenience method to return a String array as a trimmed CSV String.      * E.g. useful for toString() implementations.      * @param arr the array to display      * @return the delimited String      */     public static String arrayToCommaTrimmedDelimitedString(Object[] arr) {     	return arrayToTrimmedDelimitedString(arr, "","");     }  But of course since this method just passes on the buck, the arrayToDelimitedString should also get a trimming brother, arrayToTrimmedDelimitedString:      /**      * Convenience method to return a String array as a trimmed delimited (e.g. CSV)      * String. E.g. useful for toString() implementations.      * @param arr the array to display      * @param delim the delimiter to use (probably a "","")      * @return the delimited String      */     public static String arrayToTrimmedDelimitedString(Object[] arr, String delim) {     	if (ObjectUtils.isEmpty(arr)) {     		return """";     	}     	StringBuffer sb = new StringBuffer();     	for (int i = 0; i < arr.length; i++) {     		if (i > 0) {     			sb.append(delim);     		}     		sb.append(trimWhitespace(arr[i]));     	}     	return sb.toString();     }  These methods then could also be used in future cases that would have a similar issue. I attached a TilesConfigurer.java and StringUtils.java here with these changes already in place.  Hope this could be of any help.  Kind regards,  Jochen Szostek   ---  **Attachments:** - [StringUtils.java](https://jira.spring.io/secure/attachment/14966/StringUtils.java) (_39.11 kB_) - [TilesConfigurer.java](https://jira.spring.io/secure/attachment/14965/TilesConfigurer.java) (_9.59 kB_)","closed","type: enhancement,","spring-projects-issues","2008-12-17T08:22:47Z","2012-06-19T09:36:27Z"
"","10455","NullPointerException in JmsUtils.buildExceptionMessage [SPR-5785]","**[joachim harabasz](https://jira.spring.io/secure/ViewProfile.jspa?name=harabasz)** opened **[SPR-5785](https://jira.spring.io/browse/SPR-5785?redirect=false)** and commented  I triggered  this by fetching an invalid JMS message from a  JMS Queue, that causes a NullPointerException exeption.  The spring framework catches this exeption and tries to handle it. But while it tries to generate the error output it triggers another NPE.  I think what happens is, that it does ""message.indexOf(linkedEx.getMessage())"" but ""linkedEx.getMessage()"" is null.  Exception in thread ""OrderStateListener-2"" java.lang.NullPointerException at java.lang.String.indexOf(String.java:1734) at java.lang.String.indexOf(String.java:1716) at org.springframework.jms.support.JmsUtils.buildExceptionMessage(JmsUtils.java:255) at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:745) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:897) at java.lang.Thread.run(Thread.java:619)  ---  **Affects:** 2.5.6  **Issue Links:** - #9948 JmsUtils.buildExceptionMessage throws NPE if the linked exception doesn't have a message (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2009-05-25T21:27:45Z","2019-01-12T16:50:23Z"
"","10470","Output parameters from stored procedures on Sybase throw exception JZ0SG: A CallableStatement did not return as many output parameters as the application had registered for it. [SPR-5800]","**[JiÅÃ­ Pressfreund](https://jira.spring.io/secure/ViewProfile.jspa?name=jcp)** opened **[SPR-5800](https://jira.spring.io/browse/SPR-5800?redirect=false)** and commented  When was refactored org.springframework.jdbc.core.CallableStatementCreatorFactory createCallableStatement method check on null was omitted 2.5.5 version if ((declaredParameter).isInputValueProvided() || inValue != null) { StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParameter, inValue); } 2.5.6 version if (declaredParam.isInputValueProvided()) { StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue); }  Version 3.0M2 is affected too.   ---  **Affects:** 2.5.6  **Attachments:** - [CallableStatementCreatorFactory.java](https://jira.spring.io/secure/attachment/15444/CallableStatementCreatorFactory.java) (_8.06 kB_) - [st.zip](https://jira.spring.io/secure/attachment/15443/st.zip) (_3.45 kB_)","closed","status: declined,","spring-projects-issues","2009-06-03T02:44:38Z","2019-01-12T16:27:06Z"
"","10821","ControllerClassNameHandlerMapping's bug [SPR-6153]","**[jia baozhen](https://jira.spring.io/secure/ViewProfile.jspa?name=jiabaozhen)** opened **[SPR-6153](https://jira.spring.io/browse/SPR-6153?redirect=false)** and commented  there is a bug in this method: org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping.generatePathMappings(Class)  String path = (className.endsWith(CONTROLLER_SUFFIX) ? className.substring(0, className.indexOf(CONTROLLER_SUFFIX)) : className);  it does not work if the className also starts with ""Controller"".   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74f4749372050556ba9c3636380d183fbadaba0f","closed","type: bug,","spring-projects-issues","2009-09-26T21:17:05Z","2012-06-19T03:42:49Z"
"","10252","ProxyFactoryBean does not trim InterceptorNames [SPR-5581]","**[Jeroen Ruijgers](https://jira.spring.io/secure/ViewProfile.jspa?name=salandur)** opened **[SPR-5581](https://jira.spring.io/browse/SPR-5581?redirect=false)** and commented  When using XML based configuration, my formatter makes the following XML: \ \ \ \ \a.interface \ \ \ \ \ \interceptor1\ \interceptor2 \ \ \ \  When calling the bean I get the following DEBUG (???) messages: 2009-03-18 16:21:14,466 DEBUG [ExecuteThread: '22' for queue: 'weblogic.kernel.Default'] org.springframework.aop.framework.ProxyFactoryBean  - Configuring advisor or advice 'interceptor2 ' 2009-03-18 16:21:14,466 DEBUG [ExecuteThread: '22' for queue: 'weblogic.kernel.Default'] org.springframework.beans.factory.support.DefaultListableBeanFactory  - No bean named 'interceptor2 ' found in org.springframework.beans.factory.support.DefaultListableBeanFactory@25a0791: defining beans [beans....]; root of factory hierarchy   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-03-18T03:34:59Z","2012-06-19T09:36:22Z"
"","9997","AnnotationSessionFactoryBean.scanPackages() creates scanning pattern incorrectly [SPR-5324]","**[Jeremy Haile](https://jira.spring.io/secure/ViewProfile.jspa?name=jhaile)** opened **[SPR-5324](https://jira.spring.io/browse/SPR-5324?redirect=false)** and commented  The ""scanPackages"" property requires the package name to have a trailing ""."" which is inconsistent with the component-scan.  This feature was adding by #9415  ClassPathScanningCandidateComponentProvider (used by component-scan) constructs the scanning pattern like this: String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + resolveBasePackage(basePackage) + ""/"" + this.resourcePattern;  AnnotationSessionFactoryBean constructs the scanning pattern like this: String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN;  Notice the missing ""/"" in the hibernate class.  This means that the resource pattern is constructed like classpath*:myPackage**/**.class instead of classpath**:myPackage/**/*.class  This works when all persistence classes are in the package to be scanned, but fails to scan subclasses.  AnnotationSessionFactoryBean should be changed to construct its pattern like component-scan does.  A workaround is to append a trailing ""."" onto the end of your package name.  ---  **Affects:** 2.5.6  **Issue Links:** - #10711 AnnotationSessionFactoryBean packagesToScan in a OSGi environment (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/71df72d6341015c8b27f574c2d1a2be926e4fadb","closed","type: bug,","spring-projects-issues","2008-11-26T04:47:48Z","2019-01-11T16:19:31Z"
"","10782","Upgrade the Spring JSP tag libraries to JSP 2.0 [SPR-6114]","**[Jeremy Grelle](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremyg484)** opened **[SPR-6114](https://jira.spring.io/browse/SPR-6114?redirect=false)** and commented  As Spring 3.0 requires a minimum of JSP 2.0, we should take the opportunity to upgrade the JSP tag libraries so that we can take advantage of JSP 2.0 features such as dynamic attributes.  This will require converting the current .tld files to the JSP 2.0 XML schema.  ---  **Affects:** 3.0 M4  **Issue Links:** - #10600 Allow non-standard attributes in  tags (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c134925bab619927fe6b2ba06a1799ca6f152f7  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-15T09:26:45Z","2019-01-11T14:06:21Z"
"","9932","Fully implement MXBean contract in MBeanExporter/Explore support for MXBeans in Java 5 [SPR-5258]","**[Jennifer Hickey](https://jira.spring.io/secure/ViewProfile.jspa?name=jencompgeek)** opened **[SPR-5258](https://jira.spring.io/browse/SPR-5258?redirect=false)** and commented  MBeanExporter should be able to fully implement the MXBean contract by creating MXBeans from regular Spring beans - possibly using Dynamic MBeans to intercept invocation and perform open type conversion.  We should then explore making this functionality available to Java 5 users.   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-10-30T06:38:12Z","2009-12-10T08:17:18Z"
"","9931","Explore moving the AMS monitoring API to Spring Framework [SPR-5257]","**[Jennifer Hickey](https://jira.spring.io/secure/ViewProfile.jspa?name=jencompgeek)** opened **[SPR-5257](https://jira.spring.io/browse/SPR-5257?redirect=false)** and commented  This is not currently related to JMX, but rather an overall management/monitoring category.  AMS includes a rich monitoring API that we should consider moving to Spring Framework for open use.  This includes a POJO-based Monitor implementation, as well as one or more abstract aspects that can be used for most generic operation monitoring.   ---  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-10-30T06:30:40Z","2015-09-22T17:34:32Z"
"","9930","Move @ManagedMetric annotation to Spring JMX [SPR-5256]","**[Jennifer Hickey](https://jira.spring.io/secure/ViewProfile.jspa?name=jencompgeek)** opened **[SPR-5256](https://jira.spring.io/browse/SPR-5256?redirect=false)** and commented  Move `@ManagedMetric` from AMS 2.0 M1 to Spring JMX.  This includes changes to the MBeanExporter and/or supporting classes to ensure that the proper descriptor values are added to the generated ModelMBeans, as needed for AMS auto-discovery.  See Managing Custom Components with AMS.html in AMS documentation.  Source code for existing annotation, supporting enums, and AMS' MBeanExporter extension can be found in AMS SVN repo.  I will also be happy to attach these files if you'd like.   --- No further details from [SPR-5256](https://jira.spring.io/browse/SPR-5256?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-10-30T06:27:41Z","2012-06-19T03:46:38Z"
"","10196","NestedServletException does not provide useful stack trace as advertised in its javadoc. [SPR-5525]","**[Jem Mawson](https://jira.spring.io/secure/ViewProfile.jspa?name=synesso)** opened **[SPR-5525](https://jira.spring.io/browse/SPR-5525?redirect=false)** and commented  NestedServletException advertises its purpose as a ""Subclass of ServletException that properly handles a root cause in terms of message and stacktrace"".  It still handles messages OK, but no longer handles stacktraces. This capability was removed in the last revision https://fisheye.springframework.org/browse/springframework/spring/src/org/springframework/web/util/NestedServletException.java?r1=1.9&r2=1.10 presumably in response to http://jira.springframework.org/browse/SPR-1961  Here's an example of the not very useful stack trace provided:  org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:583) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:112) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:265) org.acegisecurity.intercept.web.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:107) ... cropped by JM ... org.acegisecurity.util.FilterChainProxy.doFilter(FilterChainProxy.java:149) org.acegisecurity.util.FilterToBeanProxy.doFilter(FilterToBeanProxy.java:98)  root cause  java.lang.NullPointerException  I am currently getting this NPE in prod-like environments only (which I can't hack around on), so understanding what is causing this is very difficult. If the NPE had been logged in the stack trace it would be trivial.  ---  **Affects:** 2.5.4  **Issue Links:** - #6654 NestedServletException root cause handling can cause stack overflow","closed","status: bulk-closed,","spring-projects-issues","2009-02-25T10:34:15Z","2019-01-12T02:37:51Z"
"","9889","JPA Query API access fails when doing non-transactional access on shared EntityManager proxy [SPR-5216]","**[Jawher Moussa](https://jira.spring.io/secure/ViewProfile.jspa?name=djo.mos)** opened **[SPR-5216](https://jira.spring.io/browse/SPR-5216?redirect=false)** and commented  Given this configuration : - Hibernate 3.3.1 GA + Hibernate Annotations 3.4.0 and Hibernate Entity Maanger 3.4 - Spring 2.5.5 - Apache Tomcat 6.0.18 - this applicationContext.xml :  \                	     		     	                           - And a Spring bean where an EntityMaanger gets injected via `@PersistenceContext`(type = PersistenceContextType.TRANSACTION).  Whenever I invoke an operation on the injected EM (like createQuery(...).getResultList()), I get the following Exception (Session is closed) :  javax.persistence.PersistenceException: org.hibernate.SessionException: Session is closed! at org.hibernate.ejb.AbstractEntityManagerImpl.throwPersistenceException(AbstractEntityManagerImpl.java:614) at org.hibernate.ejb.QueryImpl.getResultList(QueryImpl.java:76) at *****.gp.service.impl.PersonServiceImpl$$M$8ce33edb.getPersons(PersonServiceImpl.java:82) at *****.gp.service.impl.PersonServiceImpl$$A$8ce33edb.getPersons(\) at *****.gp.service.impl.PersonServiceImpl.getPersons(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:310) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.remoting.support.RemoteInvocationTraceInterceptor.invoke(RemoteInvocationTraceInterceptor.java:70) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy19.getPersons(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at com.caucho.hessian.server.HessianSkeleton.invoke(HessianSkeleton.java:180) at com.caucho.hessian.server.HessianSkeleton.invoke(HessianSkeleton.java:109) at org.springframework.remoting.caucho.Hessian2SkeletonInvoker.invoke(Hessian2SkeletonInvoker.java:93) at org.springframework.remoting.caucho.HessianExporter.invoke(HessianExporter.java:142) at org.springframework.remoting.caucho.HessianServiceExporter.handleRequest(HessianServiceExporter.java:70) at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:511) at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:246) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:636) Caused by: org.hibernate.SessionException: Session is closed! at org.hibernate.impl.AbstractSessionImpl.errorIfClosed(AbstractSessionImpl.java:72) at org.hibernate.impl.SessionImpl.list(SessionImpl.java:1137) at org.hibernate.impl.QueryImpl.list(QueryImpl.java:102) at org.hibernate.ejb.QueryImpl.getResultList(QueryImpl.java:67) ... 45 more  Yet, exactly the same code works fine with Hibernate 3.2.5 GA (probably with 3.2.6 GA also, I'll test this soon). I've traced and debugged a little bit, and it seems that Spring can't create a transactional EntityManager, so no transaction is started in my DAO/Service method invocation, and hence the no Session Exception ...  Is this a regression or what ? Please feel free to ask for more details.  Cheers, Jawher   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-10-15T00:02:48Z","2012-06-19T03:47:27Z"
"","10648","lookup-method element should allow inner bean definition [SPR-5980]","**[Jason Royals](https://jira.spring.io/secure/ViewProfile.jspa?name=jroyals)** opened **[SPR-5980](https://jira.spring.io/browse/SPR-5980?redirect=false)** and commented  Hello,  I've started using method injection in my project so I can use prototype beans that supply instances to singletons on demand, but am a bit unhappy with the way the XML is looking.  Here is a small, contrived example.  ``` ...             ... ```  In this example, I have to declare `alpha` as a first-class bean but it is only _ever_ used within `qux`. In a trivial example like this, so what, but if there are several `lookup-method` elements per class, and I have lots of classes, then it starts looking ugly.  It would be clearer if I could do something like this:  ``` ...                                  ... ```  This certainly is not a high priority, but would be nice if the `lookup-method` element had the same inner-bean construct as the `property` or `constructor` elements.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-08-04T16:52:22Z","2012-06-19T09:36:20Z"
"","10042","Property Placeholder Configurer Incorrectly Reports ""Circular placeholder reference"" Error For Repeated Nested Placeholders [SPR-5369]","**[Jason Petersen](https://jira.spring.io/secure/ViewProfile.jspa?name=jasonmp85)** opened **[SPR-5369](https://jira.spring.io/browse/SPR-5369?redirect=false)** and commented  If a nested property placeholder (for instance ""${${Innter}.Outer}"") is referenced twice within a single property string, Spring incorrectly reports a circular placeholder reference. Run the attached code for an example. To run, just throw Spring/log4j/commons-logging on the classpath and execute the main method. Pwd needs to be the root of the unzipped archive (so the res/constants.properties file is properly referenced).  In the attached code, a simple bean has a string field set to ${Top}. The properties file defines Top as ${Child}${Child}. Child is defined as ${${Differentiator}.Grandchild}. Differentiator is equal to First, and First.Grandchild equals ActualValue.  It is clear that this is a directed tree; no circular references in resolving placeholders. The final interpolated value should be ""ActualValueActualValue"", but an exception is thrown after the first value is resolved.  I believe the root cause is in the inner workings of the parseStringValue method (in PropertyPlaceholderConfigurer). It appears that, on the way in, ${Differentiator}.Grandchild is added to the ""visitedPlaceholders"" collection. On the way back out (recursively speaking), ${Differentiator} has already been resolved, and an attempt is made to remove (in this case) ""First.Grandchild"" from the visitedPlaceholders collection (which value has never been in the collection to begin with). Hence the collection is left in a dirty state even after the method has exited all the way back up the chain.  The problem comes during the evaluation of the second occurrence of ${Child}. Because the vistedPlaceholders collection still contains ${Differentiator}.Grandchild, visitedPlaceholders.add(placeholder) returns false while trying to add this placeholder when it is seen a second time (on the way down). So 'throw new BeanDefinitionStoreException(""Circular placeholder reference '"" + placeholder + ""' in property definitions"");' is executed.  It is clear that there is no technical reason why this case should not be feasible, so this is filed as a bug. In real-world scenarios, this issue might show up anytime someone wants to repeat a value within a single string. Examples: within an Oracle JdbcUrl, the TNS name appears twice. Or: A command to setup an ssh tunnel from a remote port to the same port on localhost needs to repeat that port number.  The repetition alone is not enough to cause this bug, it is caused by the repetition of a placeholder utilizing nesting.   ---  **Affects:** 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6  **Attachments:** - [repro_case.zip](https://jira.spring.io/secure/attachment/14964/repro_case.zip) (_1.43 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/18006c72b014246946fd487159de7e133d173a17, https://github.com/spring-projects/spring-framework/commit/41698988423b8e70eac7dfcea70d87e41b474076, https://github.com/spring-projects/spring-framework/commit/98bf01adfbe8a10c12607d3c2f018b0a8b5d6353  3 votes, 4 watchers","closed","in: core,","spring-projects-issues","2008-12-17T07:40:24Z","2012-10-31T11:33:59Z"
"","10585","TestContext/ContextConfiguration: inherit loader, not just locations. [SPR-5916]","**[Jason Novak](https://jira.spring.io/secure/ViewProfile.jspa?name=jnovak)** opened **[SPR-5916](https://jira.spring.io/browse/SPR-5916?redirect=false)** and commented  TestContext supports inheritance of `@ContextConfiguration`'s ""locations"", but not ""loader"". This is unfortunate because I use a special ContextLoader to override bean definitions.  Suppose I have 2 test classes:  `@ContextConfiguration`(loader = FooContextLoader.class, locations = { ""Parent.xml"" }) public abstract class AbstractParentTest { ... };  `@ContextConfiguration` // implicitly loads default location. public class ConcreteChildTest extends AbstractParentTest { ... };  I want ConcreteChildTest to load beans from both Parent.xml and the default location(s), **and** inherit the ContextLoader from AbstractParentTest.  If I specify a custom loader in AbstractParentTest, it only takes effect if I remove the `@ContextConfiguration` attribute from ConcreteChildTest.  But if I remove the `@ContextConfiguration` attribute from ConcreteChildTest, Spring will only load beans from Parent.xml, ignoring the child's default location. =)   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fc79d98b6a229a61be6793103cc919c4683a9393, https://github.com/spring-projects/spring-framework/commit/b2c723a76ea740264084754d535ca7f44223ee29, https://github.com/spring-projects/spring-framework/commit/ba27c29dc4a2a676bb31f6a0252fd55b9d67ef23","closed","type: enhancement,","spring-projects-issues","2009-07-10T12:35:54Z","2012-06-19T03:44:10Z"
"","10255","Spel parser is not able to resolve bean id variable when it is passed as parameter to a static method. [SPR-5584]","**[jason bayk](https://jira.spring.io/secure/ViewProfile.jspa?name=jasonbayk)** opened **[SPR-5584](https://jira.spring.io/browse/SPR-5584?redirect=false)** and commented  \ \ \ \ \ \  The above bean definition works as expected resolving value of the property ""b"" to 2.  However, the following definition fails on expression parsing:  \ \ \  The error is: Field or property 'A' cannot be found on object of type 'java.lang.Math'  ---  **Affects:** 3.0 M2  **Reference URL:** http://forum.springsource.org/showthread.php?p=231886#post231886  **Attachments:** - [SPR-5584.zip](https://jira.spring.io/secure/attachment/19467/SPR-5584.zip) (_5.07 kB_)  **Issue Links:** - #11191 SpEL context is wrong in method parameter resolution (_**""duplicates""**_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2009-03-19T10:27:06Z","2019-01-12T16:50:27Z"
"","10027","Binding doesn't work when no radio button in a set is selected [SPR-5354]","**[Jason Barnabe](https://jira.spring.io/secure/ViewProfile.jspa?name=np)** opened **[SPR-5354](https://jira.spring.io/browse/SPR-5354?redirect=false)** and commented  Per http://static.springframework.org/spring/docs/2.5.x/reference/view.html#view-jsp-formtaglib-checkboxtag  ""What you might not expect to see is the additional hidden field after each checkbox. When a checkbox in an HTML page is not checked, its value will not be sent to the server as part of the HTTP request parameters once the form is submitted, so we need a workaround for this quirk in HTML in order for Spring form data binding to work. The checkbox tag follows the existing Spring convention of including a hidden parameter prefixed by an underscore (""_"") for each checkbox. By doing this, you are effectively telling Spring that ""  the checkbox was visible in the form and I want my object to which the form data will be bound to reflect the state of the checkbox no matter what  "".""  In HTML, radio buttons behave in the same way - if none of them are selected, the server gets nothing. But unlike checkboxes, Spring isn't adding this workaround for radio buttons.   ---  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2008-12-11T09:08:33Z","2019-01-12T02:38:09Z"
"","10755","Document HandlerInterceptor Processing Order [SPR-6087]","**[Jarrod Carlson](https://jira.spring.io/secure/ViewProfile.jspa?name=jcarlson)** opened **[SPR-6087](https://jira.spring.io/browse/SPR-6087?redirect=false)** and commented  It might be worth noting in the documentation that, like Filters, HandlerInterceptors (and WebRequestInterceptors) have a reverse ordering for methods called after the handler actually handles the request.  I spent a whole day tracking down why my code wasn't working right... it turned out to be that in order to get HandlerInterceptor.afterCompletion() to run last in the chain, it needed to be listed first in the config!  Argh!   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/222ae3366677e665c857d334ab84a6074b16cc14","closed","type: task,","spring-projects-issues","2009-09-07T10:56:04Z","2012-06-19T03:43:22Z"
"","10347","Allow EclipseLink 2.0.0.M1 in Spring-ORM [SPR-5676]","**[Jaro Kuruc](https://jira.spring.io/secure/ViewProfile.jspa?name=koxo)** opened **[SPR-5676](https://jira.spring.io/browse/SPR-5676?redirect=false)** and commented  Please open up the version range for EclipseLink in ORM bundle to allow custom made EclipseLink OSGi bundle based on 2.0.0.M1 milestone.  org.eclipse.persistence.\*;version=""[1.0.0, 2.1.0)"" or even org.eclipse.persistence.*;version=""[1.0.0, 3.0.0)"" would do.   ---  **Affects:** 2.5.6, 3.0 M2","closed","type: enhancement,","spring-projects-issues","2009-04-14T21:53:23Z","2012-06-19T03:47:07Z"
"","10188","Add unregisterManagedResource to MBeanExportOperations interface [SPR-5517]","**[Jaro Kuruc](https://jira.spring.io/secure/ViewProfile.jspa?name=koxo)** opened **[SPR-5517](https://jira.spring.io/browse/SPR-5517?redirect=false)** and commented  Hi,  I am trying to register/unregister MBeans in runtime using autowired MBeanExportOperations implementation (in this case MBeanExporter). At the moment, only methods for registering MBeans are available in the intefrace mentioned above. It would be very helpful if MBeanExportOperations interface and its implementations would contain methods to unregisterManagedResource as well.  Thanks.  Jaro   ---  **Affects:** 2.0.8, 2.5.6, 3.0 M1","closed","type: enhancement,","spring-projects-issues","2009-02-23T01:27:27Z","2012-06-19T03:46:56Z"
"","9981","Double EL expression evaluation in JSP MessageTag [SPR-5308]","**[Jarek Bojar](https://jira.spring.io/secure/ViewProfile.jspa?name=jbojar)** opened **[SPR-5308](https://jira.spring.io/browse/SPR-5308?redirect=false)** and commented  I think that, spring's MessageTag contains a fairly serious security vulnerability. 'Arguments' attribute is internally evaluated in MessageTag using ExpressionEvaluationUtils. If we are using JSP 2.0 then el expressions are potentially evaluated twice: first by JSP engine, second by MessageTag. This can lead to el expression injection (something similar to sql injection). Consider the following example:  In message bundle we have message: msg,welcome=Welcome {0} on our home page!  In JSP we use MessageTag to print this message with user name applied as argument:   If malicious user supplies an el expressions instead of his first name, he can gain access to sensitive data. For example, he can enter ${initParam.someParam} and gain access to init parameters defined in web.xml. Through ${pageContext.servletContext.applicationContext} he can discover server type and some internal server configuration. Potentially he can discover some other sensitive data accessible by EL expressions. Additionally EL expressions are not escaped by spring's HtmlUtil.escapeHtml(...).  I think that there should be a way to completely disable EL expression evaluation in MessageTag, because it is not needed when using JSP 2.0 (with builtin el evaluation).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b8d86330d1fadc645630416c3aaebf131bf749fc, https://github.com/spring-projects/spring-framework/commit/62ccc8dd7e645fb91705d44919abac838cb5ca3f, https://github.com/spring-projects/spring-framework/commit/9772eb8410e37cd0bdec0d1b133218446c778beb  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-11-18T01:34:50Z","2012-11-20T07:05:46Z"
"","10580","aop:scoped-proxy doesn't retain qualifiers [SPR-5911]","**[Jared Bunting](https://jira.spring.io/secure/ViewProfile.jspa?name=deraj123)** opened **[SPR-5911](https://jira.spring.io/browse/SPR-5911?redirect=false)** and commented  When a bean uses a \ element and , the created proxy does not retain that qualifier.  This means that a scoped-proxy will not qualify for autowiring.   ---  **Affects:** 2.5.6  **Attachments:** - [fix.patch](https://jira.spring.io/secure/attachment/15528/fix.patch) (_1.62 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c7aec3c9775b409d39919da4ee21088890195bf","closed","in: core,","spring-projects-issues","2009-07-08T07:50:57Z","2012-06-19T03:43:24Z"
"","10813","Provide ability to run piece of code in another hibernate session [SPR-6145]","**[Jara Cesnek](https://jira.spring.io/secure/ViewProfile.jspa?name=cesnek)** opened **[SPR-6145](https://jira.spring.io/browse/SPR-6145?redirect=false)** and commented  Commonly one hibernate session is bind to one http request and one thread. That is OK.  But sometimes we need do some actions in other than main hibernate session.  First, if you do plenty of hibernate operations (import data), you will go to out of memory problems. ( using evict() or clear() is unmaintable) Second, if hibernate operation throw exception, session can be destroyed, and after that you can even write log to database that ""Action ended with exception"".  We hack spring core and write our own method  ``` void runInAnotherHibernateSession(final Runnable task); ```  Example:  ``` HibernateTools.runInAnotherHibernateSession(new Runnable() {           public void run() {                  //do piece of code in another than main hibernate session           } });  ```  It will be nice if spring itself has this functionality.   --- No further details from [SPR-6145](https://jira.spring.io/browse/SPR-6145?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-09-22T23:12:40Z","2012-06-19T09:36:15Z"
"","10669","ConcurrentModificationException in SimpleJdbcCall  [SPR-6001]","**[Janet Moyer](https://jira.spring.io/secure/ViewProfile.jspa?name=easternwahoo)** opened **[SPR-6001](https://jira.spring.io/browse/SPR-6001?redirect=false)** and commented  AbstractJdbcCall.compile() executing in multiple threads causes a ConcurrentModificationException when running on a multicore processors. Synchronization is needed somewhere in the stack to avoid this exception.  java.util.ConcurrentModificationException at java.util.AbstractList$Itr.checkForComodification( AbstractList.java:464) at java.util.AbstractList$Itr.next(AbstractList.java: 435) at org.springframework.jdbc.core.metadata.CallMetaDat aContext.reconcileParameters(CallMetaDataContext.j ava:296) at org.springframework.jdbc.core.metadata.CallMetaDat aContext.processParameters(CallMetaDataContext.jav a:275) at org.springframework.jdbc.core.simple.AbstractJdbcCall.compileInternal(AbstractJdbcCall.java:288) at org.springframework.jdbc.core.simple.AbstractJdbcCall.compile(AbstractJdbcCall.java:266) at org.springframework.jdbc.core.simple.AbstractJdbcCall.checkCompiled(AbstractJdbcCall.java:325) at org.springframework.jdbc.core.simple.AbstractJdbcCall.doExecute(AbstractJdbcCall.java:351) at org.springframework.jdbc.core.simple.SimpleJdbcCall.execute(SimpleJdbcCall.java:160)   ---  **Affects:** 2.5.6, 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=76029  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ceca0db6459fca13519336ad8e62691fa1ace332  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2009-08-12T01:28:14Z","2019-01-11T14:19:50Z"
"","10034","Modify beans on the fly without shutting down the container [SPR-5361]","**[janardhanan vembunarayanan](https://jira.spring.io/secure/ViewProfile.jspa?name=jvembuna)** opened **[SPR-5361](https://jira.spring.io/browse/SPR-5361?redirect=false)** and commented  Spring 2.5.6 provides the method removeBeanDefinition in DefaultListableBeanFactory. This method removes the bean definition for that bean and removes the instance of that bean from its cache. It also removes all the singleton of the other beans which depending on this. For example if I remove Bean Definition of B and if A -> B then Spring removes the object instance of A.  I am working on a project to support dynamic updates. i.e. I can change the property of a bean and I can recreate that bean alone in the spring container without touching other dependencies. For achieving this I am doing the following.  1. Create a class which extends AbstractRefreshableApplicationContext and override the following method     protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws IOException, BeansException    protected DefaultListableBeanFactory createBeanFactory()  2. Create a class which extends DefaultListableBeanFactory and overrides. This method will stop the recursive destruction i.e. If I removeBeanDefinition of A this method would stop B from getting destoryed. I achieve this by tagging B with a Marker    interface called BeanChangeAware     public void destroySingleton(String beanName)  3. Change the spring xml on the fly for bean A. Now I register the bean definition for A alone.  4. After A is created I use reflection to change the instance of A i.e. in B.  The steps I did above for making the dynamic updates possible should be a part of the spring framework. If we can have  1. removeBeanDefinition(String beanName,boolean destroyDependecy) with a boolean parameter if passed as false will not destroy the dependents. 2. XmlBeanDefinitionReader.loadBeanDefinitions(_resourceName,String beanName); load only that bean that is passed in the second parameter. 3. Reinject the other modified bean to the other beans.  This would give support for on the fly changes with in the framework itself. It would be a great feature to have.  Let me know if you need more inputs from me for getting this feature request.  Regards, Jana   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-12-15T03:47:17Z","2012-06-19T09:36:20Z"
"","10444","UriTemplate not matching querystrings [SPR-5774]","**[jamie](https://jira.spring.io/secure/ViewProfile.jspa?name=jamie_m)** opened **[SPR-5774](https://jira.spring.io/browse/SPR-5774?redirect=false)** and commented  The following test fails:  ``` UriTemplate template = new UriTemplate(""/search?q={query}""); assertTrue(template.matches(""/search?q=foo"")); ```  as does:  ``` Map params = template.match(""/search?q=foo""); assertEquals(1, params.size()); assertEquals(""foo"", params.get(""query"")); ```  The problem seems to be the questionmark.  The parser encodes it when it creates the patter: \Q/search%3Fq=\E(.*) Adding the same encoding to the template.matches and template.match methods seems to fix it, e.g.  ``` public boolean matches(String uri) {      if (uri == null) {           return false;      }      Matcher matcher = this.matchPattern.matcher(encodeUri(uri).toASCIIString());      return matcher.matches(); } ```    ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f4480a1b8b7d39cbfb4c9c90c340edf4bf161fb","closed","type: bug,","spring-projects-issues","2009-05-20T05:00:12Z","2012-06-19T03:43:32Z"
"","10809","Spring container JPA integration does not ensure weaving occurs before loading of classes [SPR-6141]","**[James Sutherland](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesssss)** opened **[SPR-6141](https://jira.spring.io/browse/SPR-6141?redirect=false)** and commented  When running in JSE with the Spring agent, and using a Spring context that uses JPA with instrumentation in container mode, there is no guarantee that the  JPA provider is given a chance to weave the persistent classes before they are loaded.  Because the predeloy of the JPA persistence unit does not occur until the application calls new context, and the application class may have references to the persistence classes that cause them to load.  This will cause JPA providers that use byte-code weaving to fail. (i.e. EclipseLink)  The workaround is to use static weaving, or no weaving, or be very careful to avoid any reference to a persistent class before the Spring context is created.    --- No further details from [SPR-6141](https://jira.spring.io/browse/SPR-6141?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-09-21T05:48:10Z","2012-06-14T06:40:44Z"
"","10709","[JPA] [EclipseLink] - Spring filters various packages in JPA temp class loader, prevent weaving of any models in these packages [SPR-6040]","**[James Sutherland](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesssss)** opened **[SPR-6040](https://jira.spring.io/browse/SPR-6040?redirect=false)** and commented  Spring's JPA integration provides a tempClassLoader in the SpringPersistenceUnitInfo class.  This loader defines an exclude filter base on the JPA providers package and a few other packages.  The issue is in writing test for EclipseLink the package org.eclipse.persistence was used for the model classes, but this filter is excluding these classes, so weaving does not work with Spring in any EclipseLink tests or examples.  The filter is not required, and EclipseLink will work without it.  Either remove the package from the EclipseLinkDialect, or don't set it in SpringPersistenceUnitInfo.   ---  **Affects:** 2.5.6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-25T06:05:35Z","2012-06-19T03:43:22Z"
"","10173","Alias chaining does not work with @Qualifier and @Autowired [SPR-5501]","**[James Hood](https://jira.spring.io/secure/ViewProfile.jspa?name=hoodja)** opened **[SPR-5501](https://jira.spring.io/browse/SPR-5501?redirect=false)** and commented  Based on #7435, it seems that the following JUnit 4 test should work (spring context below the code):  ``` package com.uprr.app.ngt;  import static org.hamcrest.Matchers.equalTo; import static org.hamcrest.Matchers.is; import static org.junit.Assert.assertThat;  import org.junit.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;  @ContextConfiguration public class AliasTest extends AbstractJUnit4SpringContextTests {    private static final String expected = ""the_value"";      @Autowired   @Qualifier(""alias1"")   private String alias1;      @Autowired   @Qualifier(""alias2"")   private String alias2;      @Autowired   @Qualifier(""realBean"")   private String realBean;        @Test   public void testAutowiredAlias() throws Exception {     assertThat(alias1, is(equalTo(expected)));   }      @Test   public void testAutowiredAliasOfAlias() throws Exception {     assertThat(alias2, is(equalTo(expected)));   }      @Test   public void testAutowiredRealBean() throws Exception {     assertThat(realBean, is(equalTo(expected)));   }    public void setAlias1(String alias1) {     this.alias1 = alias1;   }    public void setAlias2(String alias2) {     this.alias2 = alias2;   }    public void setRealBean(String realBean) {     this.realBean = realBean;   }      } ```  Spring context:  ```xml                               ```  But for me it fails with the following:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.uprr.app.ngt.AliasTest': Autowiring of fields failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private java.lang.String com.uprr.app.ngt.AliasTest.alias2; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [java.lang.String] is defined: Unsatisfied dependency of type [class java.lang.String]: expected at least 1 matching bean 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessAfterInstantiation(AutowiredAnnotationBeanPostProcessor.java:243) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:957) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:329) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:110) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:255) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:93) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:130) 	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51) 	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44) 	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27) 	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37) 	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private java.lang.String com.uprr.app.ngt.AliasTest.alias2; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [java.lang.String] is defined: Unsatisfied dependency of type [class java.lang.String]: expected at least 1 matching bean 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:435) 	at org.springframework.beans.factory.annotation.InjectionMetadata.injectFields(InjectionMetadata.java:105) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessAfterInstantiation(AutowiredAnnotationBeanPostProcessor.java:240) 	... 18 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [java.lang.String] is defined: Unsatisfied dependency of type [class java.lang.String]: expected at least 1 matching bean 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:613) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:412) 	... 20 more ```  If the value of the `name` attribute of the `alias2` alias is changed to be `realBean`, all three tests pass.  ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2009-02-17T00:01:32Z","2019-01-11T16:47:02Z"
"","10533","Add min, max, average, and standard deviation calculations to StopWatch [SPR-5864]","**[James Earl Douglas](https://jira.spring.io/secure/ViewProfile.jspa?name=jamestastic)** opened **[SPR-5864](https://jira.spring.io/browse/SPR-5864?redirect=false)** and commented  On occasion when running a series of tests, it is handy to have data about the average, standard deviation, minimum, and maximum run times of the series.  These features would fit well in the org.springframework.util.StopWatch class, and could be implemented as follows:  ``` public double getAverageTaskTimeMillis() throws IllegalStateException {   if (this.taskCount","closed","type: enhancement,","spring-projects-issues","2009-06-24T15:17:06Z","2012-06-19T09:36:24Z"
"","10222","Overload findByExample method in HibernateTemplate to accept arrays of names and values [SPR-5551]","**[James Earl Douglas](https://jira.spring.io/secure/ViewProfile.jspa?name=jamestastic)** opened **[SPR-5551](https://jira.spring.io/browse/SPR-5551?redirect=false)** and commented  It would be convenient to be able to call findByExample(), and pass an array of column names and a corresponding array of row values.  This way, an unambiguous one-line call could be executed in the following way:  findByExample(Employee.class, new String[] {""name"", ""age""}, new Object[] {""John Doe"", new Integer(42)});  To implement this, I recommend adding the following to HibernateTemplate:      public List findByExample(Class entityClass, String[] names, Object[] values)     		throws DataAccessException {     	return findByExample(entityClass, names, values, -1, -1);     }          public List findByExample(Class entityClass, String[] names,     		Object[] values, int firstResult, int maxResults)     		throws DataAccessException {     	DetachedCriteria detachedCriteria = DetachedCriteria     			.forClass(entityClass);     	for (int index = 0; index < Math.min(names.length, values.length); index++) {     		detachedCriteria.add(Restrictions.eq(names[index], values[index]));     	}     	return findByCriteria(detachedCriteria, firstResult, maxResults);     }  Note: rather than using Math.min(), it may be more appropriate to throw an exception when the lengths of the arrays are different.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2009-03-06T17:23:51Z","2012-06-19T09:36:15Z"
"","10218","Count query results with HibernateTemplate without first retrieving them [SPR-5547]","**[James Earl Douglas](https://jira.spring.io/secure/ViewProfile.jspa?name=jamestastic)** opened **[SPR-5547](https://jira.spring.io/browse/SPR-5547?redirect=false)** and commented  It would be convenient to be able to count query results without first retrieving them.  This could be used prior to calling a method such as findByCriteria(DetachedCriteria, int, int) to aid in subsetting record sets.  In SQL, this is typically accomplished with a query such as ""select count(*) from my_table where ...""  I propose adding the following to HibernateTemplate to allow counting all entities of a given type, as well as counting the results which match a given DetachedCriteria.      public int count(Class entityClass) throws DataAccessException {     	return countByCriteria(DetachedCriteria.forClass(entityClass));     }          public int countByCriteria(final DetachedCriteria criteria)     		throws DataAccessException {     	Integer count = (Integer) executeWithNativeSession(new HibernateCallback() {     		public Object doInHibernate(Session session)     				throws HibernateException {     			Criteria executableCriteria = criteria     					.getExecutableCriteria(session);     			executableCriteria.setProjection(Projections.rowCount());     			for (Object result : executableCriteria.list()) {     				if (result instanceof Integer) {     					return (Integer) result;     				}     			}     			return -1;     		}     	});          	return count.intValue();     }    ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2009-03-05T18:02:56Z","2012-06-19T09:36:14Z"
"","9919","AspectJ Load-Time Weaving Breaks Property Editor Look-Up [SPR-5245]","**[James Carman](https://jira.spring.io/secure/ViewProfile.jspa?name=jwcarman)** opened **[SPR-5245](https://jira.spring.io/browse/SPR-5245?redirect=false)** and commented  I'm trying to use AspectJ Load-Time Weaving in Eclipse (using the AJDT plugin) to launch a stand-alone application.  I get the following stack trace:  org.aspectj.weaver.BCException: Do not call nameToSignature with something that looks like a signature (descriptor): '[Lorg.quartz.Trigger;Editor'      at org.aspectj.weaver.UnresolvedType.nameToSignature(UnresolvedType.java:650)     at org.aspectj.weaver.UnresolvedType.forName(UnresolvedType.java:244)     at org.aspectj.weaver.ExtensibleURLClassLoader.getBytes(ExtensibleURLClassLoader.java:70)     at org.aspectj.weaver.loadtime.WeavingURLClassLoader.getBytes(WeavingURLClassLoader.java:165)     at org.aspectj.weaver.ExtensibleURLClassLoader.findClass(ExtensibleURLClassLoader.java:50)     at java.lang.ClassLoader.loadClass(ClassLoader.java:306)     at java.lang.ClassLoader.loadClass(ClassLoader.java:251)     at org.springframework.beans.BeanUtils.findEditorByConvention(BeanUtils.java:375)     at org.springframework.beans.TypeConverterDelegate.findDefaultEditor(TypeConverterDelegate.java:254)     at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:171)     at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:138)     at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:386)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1288)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1249)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472)  I realize that related issues have been brought up before, but I'm not sure it's the exact same thing.  Besides, those other issues are listed as fixed and I'm seeing this in 2.5.5.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-10-29T02:47:50Z","2012-06-19T03:47:27Z"
"","9915","Break out private classes in org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter [SPR-5241]","**[James Briant](https://jira.spring.io/secure/ViewProfile.jspa?name=jbriant)** opened **[SPR-5241](https://jira.spring.io/browse/SPR-5241?redirect=false)** and commented  I can't wait for the Restful mapping in 3.0, so I've implemented restful paths by combining the Carbonfive code with the AnnotationMethodHandlerAdapter. However do to so I had to completely copy AnnotationMethodHandlerAdapter simply to replace its private implementation of ServletHandlerMethodResolver. Be grateful if this could be opened up.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-10-25T06:15:10Z","2012-06-19T09:36:25Z"
"","9961","BeanPropertySqlParameterSource doen't work with Date types on DB2 [SPR-5288]","**[Jaime Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=jsanchez)** opened **[SPR-5288](https://jira.spring.io/browse/SPR-5288?redirect=false)** and commented  I have applications working with Spring 2.5.1 and DB2. My queries use BeanPropertySqlParameterSource and when I changed to Spring upper version, I got the following error: org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL [INSERT INTO TABLE1 (COL1, COL2, COL3 VALUES (?, ?, ?)]; DB2 SQL error: SQLCODE: -181, SQLSTATE: 22007, SQLERRMC: null; nested exception is com.ibm.db2.jcc.a.SqlException: DB2 SQL error: SQLCODE: -181, SQLSTATE: 22007, SQLERRMC: null at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:100) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:607) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:792) ... Caused by: com.ibm.db2.jcc.a.SqlException: DB2 SQL error: SQLCODE: -181, SQLSTATE: 22007, SQLERRMC: null at com.ibm.db2.jcc.a.jd.d(jd.java:1397) at com.ibm.db2.jcc.b.fb.l(fb.java:366) at com.ibm.db2.jcc.b.fb.a(fb.java:64) at com.ibm.db2.jcc.b.s.a(s.java:48) ...  This error appears when I map a java.util.Date property with a Date type column. If I don't define specifically the java.util.Date properties like Date type columns by registerSqlType method, BeanPropertySqlParameterSource defines the java.util.Date properties like TimeStamp type columns. This sql type (TimeStamp) doen's work with DB2 Date columns.  I have tested if the error happens when I work with another database, for example with MySQL. In this case BeanPropertySqlParameterSource works properly without registering the sql type.  This behaviour appears from Spring 2.5.2. I can't update to uppper version, because I would modify all the applications which use BeanPropertySqlParameterSource and register the Date sql type in the queries. Have I got a chance to update the Spring version without modify my applications?    ---  **Affects:** 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6","closed","in: data,","spring-projects-issues","2008-11-10T18:31:21Z","2019-01-11T15:26:45Z"
"","10098","How to provide mulit language support for a web application using springs [SPR-5424]","**[jacks](https://jira.spring.io/secure/ViewProfile.jspa?name=jacks.mca39)** opened **[SPR-5424](https://jira.spring.io/browse/SPR-5424?redirect=false)** and commented  Hello, i need a help ,to provide a multi language support for a web application using springs   --- No further details from [SPR-5424](https://jira.spring.io/browse/SPR-5424?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-01-21T01:32:54Z","2012-06-19T09:36:13Z"
"","10061","Component scanning not working with multiple source directories in Eclipse [SPR-5388]","**[J-C Walmetz](https://jira.spring.io/secure/ViewProfile.jspa?name=jc7442)** opened **[SPR-5388](https://jira.spring.io/browse/SPR-5388?redirect=false)** and commented  I use the `@Service` annotation. My spring xml configuration file contains .  My project contains several directories for Java sources. Some service are not scanned. If I use jars instead of directories, services are scanned.  It looks like the component scanner does not support several source directories.  See forum http://forum.springframework.org/showthread.php?p=219500#post219500   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-04T19:02:12Z","2011-06-03T04:40:00Z"
"","10457","org.hibernate.annotations.Entity ignored by AnnotationSessionFactoryBean [SPR-5787]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-5787](https://jira.spring.io/browse/SPR-5787?redirect=false)** and commented  Based on a question from a student I tried to replace javax.persistence.Entity with org.hibernate.annotations.Entity, and found that it wasn't being picked up by the AnnotationSessionFactoryBean. Since it is documented as an extension of j.p.Entity this seems rightfully unexpected, so it would be nice if it was picked up.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a5c324f93484c572ef2dd63333b8dfa48e8a977f","closed","type: enhancement,","spring-projects-issues","2009-05-26T22:25:30Z","2012-06-19T03:43:34Z"
"","10364","AopUtils.getTargetClass assumes cglib proxies are always proxying classes [SPR-5694]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-5694](https://jira.spring.io/browse/SPR-5694?redirect=false)** and commented  If you create a cglib proxy for an interface using a third party framework AopUtils will break see [INT-654](http://jira.springframework.org/browse/INT-645).  Test to demonstrate:  ``` import static org.junit.Assert.assertTrue; import static org.mockito.Mockito.mock;  import org.junit.Test; import org.springframework.aop.support.AopUtils;  public class AopUtilsMockitoTests {  	@Test 	@SuppressWarnings(""unchecked"") 	public void getTargetClass() throws Exception { 		AnInterface candidate = mock(AnInterface.class); 		assertTrue(AnInterface.class.isAssignableFrom(candidate.getClass())); 		assertTrue(AnInterface.class.isAssignableFrom(AopUtils.getTargetClass(candidate))); 	}  	private interface AnInterface {	} } ```  This was tested with Mockito 1.7   ---  **Affects:** 2.5.6  **Issue Links:** - [INT-645](https://jira.spring.io/browse/INT-645) HandlerMethodUtils doesn't resolve handler methods on cglib proxies (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/85830261515918a244339cba18336a6011520132","closed","in: core,","spring-projects-issues","2009-04-22T21:52:44Z","2012-06-19T03:44:04Z"
"","10243","typo in RestTemplate javadoc [SPR-5571]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-5571](https://jira.spring.io/browse/SPR-5571?redirect=false)** and commented  ""Returnsthe"" should be: ""Returns the""   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a004ed1c51064c5b2d1e24b19b51fb669f556a61","closed","type: bug,","spring-projects-issues","2009-03-15T22:04:46Z","2012-06-19T03:47:13Z"
"","10114","grammatical error in LobHandler javadoc [SPR-5440]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-5440](https://jira.spring.io/browse/SPR-5440?redirect=false)** and commented  found: ""which uses Oracle's BLOB/CLOB API for both all access"" I think that should be either: ""which uses Oracle's BLOB/CLOB API for both types of access"" or ""which uses Oracle's BLOB/CLOB API for all access""   ---  **Affects:** 2.5.6","closed","type: bug,","spring-projects-issues","2009-01-27T23:36:38Z","2012-06-19T03:46:40Z"
"","10060","ThreadPoolExecutor waitForTasksToCompleteOnShutdown doesn't work as expected [SPR-5387]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-5387](https://jira.spring.io/browse/SPR-5387?redirect=false)** and commented  As described in forum post (http://forum.springframework.org/showthread.php?p=220432#post220432 sample linked there: http://drop.io/mpilone). The waitForTasksToCompleteOnShutdown communicates that awaiting the task completion is done in the shutdown method while in fact it is not. A call to awaitTermination or a change in javadoc (and possibly the property name) would improve this.  ---  **Affects:** 2.5.6  **Issue Links:** - #13883 I would like  to expose waitForTasksToCompleteOnShutdown and threadNamePrefixSet  **Referenced from:** commits https://github.com/spring-projects/spring-insight/commit/103300b96c6cdb8af0c44b1262c9e3392c72a51f, https://github.com/spring-projects/spring-insight/commit/d455b2721c75a35b7c2c5108d4d9b90c5d1f77b7  7 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2009-01-04T01:17:18Z","2019-01-11T16:21:45Z"
"","10147","@Autowired does not work in webapp.  [SPR-5474]","**[Ivan Latysh](https://jira.spring.io/secure/ViewProfile.jspa?name=ivan.latysh)** opened **[SPR-5474](https://jira.spring.io/browse/SPR-5474?redirect=false)** and commented  `@Autowired` does not work in webapp, but when the same application loaded into a test harness (AbstractTransactionalJUnit38SpringContextTests) injections are processed as expected.   ---  **Affects:** 3.0 M1","closed","status: invalid,","spring-projects-issues","2009-02-11T07:19:54Z","2019-01-12T05:33:44Z"
"","10282","Preserve custom annotations present on @Bean methods for interrogation during bean post processing [SPR-5611]","**[Ittay Dror](https://jira.spring.io/secure/ViewProfile.jspa?name=ittayd)** opened **[SPR-5611](https://jira.spring.io/browse/SPR-5611?redirect=false)** and commented  With Spring using more and more annotations, it would be good if the bean definitions allow registering custom annotations for use with Bean/Factory post processors.  Specifically, in JavaConfig one can annotate a method in a configuration class with `@Bean` annotation to create a bean from the result of the method. However, it is not possible to add custom annotations on the method so as to process them with a bean post processor.  The use case is for integrating with spring-dm. Specifically, I would like to annotate a ""regular"" `@Bean` method with `@OsgiService` annotation so the bean is published as a service.  NOTE: another approach is to allow me to replace `@Bean` with `@OsgiServiceBean` which would do both. The current JavaConfig code is very tightly bound to the internal annotations and it is had to add custom ones (specifically, i can't create a custom annotation and reuse BeanRegistrar since it uses `@Bean` directly)   ---  **Affects:** 3.0 M2  **Reference URL:** http://forum.springframework.org/showthread.php?p=232837#post232837","closed","type: enhancement,","spring-projects-issues","2009-03-25T17:36:26Z","2011-06-17T02:18:35Z"
"","10739","Fill implicit model with session-backed data for portlets render phase [SPR-6071]","**[Ingo Marahrens](https://jira.spring.io/secure/ViewProfile.jspa?name=imarahrens)** opened **[SPR-6071](https://jira.spring.io/browse/SPR-6071?redirect=false)** and commented  In the ACTION or EVENT phase of the portlet the handler method can request to get an implicit model by defining a Model parameter in the methods signature (e.g. public void action(ActionResponse response, Model model) { //do something e.g. modeel.AddAttribute(""modelData"", new Object()); }).  If the type hase declared the `@SessionAttributes`(""modelData"") annotation, the contents of this implicit model object are populated into the portlet session.  The method handler in the render phase can also request an implicit model object (same as the action handler), but this object is newly created prior to the methods invocation and as a result completely empty. Therefore the method model.containsAttribute(""modelData"") does not make much sense, because usually the model is empty. To get the data stored in the model of the ACTION or EVENT phase, it is necessary to check the session and copy the objects to the model to be accessed from the jsp.  It would be much more convient, if the implicit model in the render phase is populated with the session data before the render phase handler method is executed.  ---  **Affects:** 3.0 M4  **Issue Links:** - #10752 `@SessionAttributes` to be exposed in model even when not referenced in current handler method","closed","type: enhancement,","spring-projects-issues","2009-09-02T22:01:49Z","2019-01-13T07:58:38Z"
"","10730","Portlet MVC detects the wrong controller on Event thrown [SPR-6062]","**[Ingo Marahrens](https://jira.spring.io/secure/ViewProfile.jspa?name=imarahrens)** opened **[SPR-6062](https://jira.spring.io/browse/SPR-6062?redirect=false)** and commented  Hi, I posted this issue already as a question in the forum, therefore I will not repeat the complete analysis here but give a short description.  The controller class to handle the portlet request is determined by the portlet mode and request parameters, which is usually the right way, but will lead to unexpected behavior when an event is thrown. In this case the event should also be considered in this decision, because otherwise it can end up selecting the wrong controller class.  Compared to version 2.5.x and the ""Cooperative Source/Target"" model, which can be considered as the eventing ancestor in Portlet 1.0, the current behavior of the framework is different and could be considered as a bug.   ---  **Affects:** 3.0 M4  **Reference URL:** http://forum.springsource.org/showthread.php?p=258155#post258155  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d29f65a9c2df6603b494f4402f4a02d7d40767b","closed","type: bug,","spring-projects-issues","2009-09-01T19:51:24Z","2012-06-19T03:44:11Z"
"","10059","SelectTag (multiple=true) and CheckboxesTag generate invalid html for map-based properties (if path contains double-quotes) [SPR-5386]","**[Ilya](https://jira.spring.io/secure/ViewProfile.jspa?name=iegoshin)** opened **[SPR-5386](https://jira.spring.io/browse/SPR-5386?redirect=false)** and commented  Both SelectTag and CheckboxesTag don't escape double-quotes in the name of hidden element following main tag. Example:     or   SelectTag can be fixed by adding getDisplayString invocation, like this:      private void writeHiddenTagIfNecessary(TagWriter tagWriter) throws JspException {     	if (isMultiple()) {     		tagWriter.startTag(""input"");     		tagWriter.writeAttribute(""type"", ""hidden"");     		tagWriter.writeAttribute(""name"", getDisplayString(WebDataBinder.DEFAULT_FIELD_MARKER_PREFIX + getName())); // fix is here     		tagWriter.writeAttribute(""value"", ""1"");     		tagWriter.endTag();     	}     }  CheckboxesTag - the same solution:      protected int writeTagContent(TagWriter tagWriter) throws JspException {     	Object items = getItems();     	Object itemsObject = (items instanceof String ? evaluate(""items"", (String) items) : items);          	String itemValue = getItemValue();     	String itemLabel = getItemLabel();     	String valueProperty =     			(itemValue != null ? ObjectUtils.getDisplayString(evaluate(""itemValue"", itemValue)) : null);     	String labelProperty =     			(itemLabel != null ? ObjectUtils.getDisplayString(evaluate(""itemLabel"", itemLabel)) : null);          	if (itemsObject == null) {     		throw new IllegalArgumentException(""Attribute 'items' is required and must be a Collection, an Array or a Map"");     	}          	if (itemsObject.getClass().isArray()) {     		Object[] itemsArray = (Object[]) itemsObject;     		for (int i = 0; i < itemsArray.length; i++) {     			Object item = itemsArray[i];     			writeObjectEntry(tagWriter, valueProperty, labelProperty, item, i);     		}     	}     	else if (itemsObject instanceof Collection) {     		final Collection optionCollection = (Collection) itemsObject;     		int itemIndex = 0;     		for (Iterator it = optionCollection.iterator(); it.hasNext(); itemIndex++) {     			Object item = it.next();     			writeObjectEntry(tagWriter, valueProperty, labelProperty, item, itemIndex);     		}     	}     	else if (itemsObject instanceof Map) {     		final Map optionMap = (Map) itemsObject;     		int itemIndex = 0;     		for (Iterator it = optionMap.entrySet().iterator(); it.hasNext(); itemIndex++) {     			Map.Entry entry = (Map.Entry) it.next();     			writeMapEntry(tagWriter, valueProperty, labelProperty, entry, itemIndex);     		}     	}     	else {     		throw new IllegalArgumentException(""Attribute 'items' must be a Collection, an Array or a Map"");     	}          	if (!isDisabled()) {     		// Write out the 'field was present' marker.     		tagWriter.startTag(""input"");     		tagWriter.writeAttribute(""type"", ""hidden"");     		tagWriter.writeAttribute(""name"", getDisplayString(WebDataBinder.DEFAULT_FIELD_MARKER_PREFIX + getName())); // fix is here     		tagWriter.writeAttribute(""value"", ""on"");     		tagWriter.endTag();     	}          	return EVAL_PAGE;     }  ---  **Affects:** 3.0.7  **Issue Links:** - #10054 Spring-form tags don't filter out double-quotes from id attributes. - #10056 Label tag doesn't escape [] and double-quotes for map-based and indexed properties  1 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2009-01-03T01:04:35Z","2019-01-12T16:27:31Z"
"","10057","checkboxes and radiobuttons tags generate  elements which doesn't let you click on the text to select corresponding checkbox or radiobutton [SPR-5384]","**[Ilya](https://jira.spring.io/secure/ViewProfile.jspa?name=iegoshin)** opened **[SPR-5384](https://jira.spring.io/browse/SPR-5384?redirect=false)** and commented  Would be nice if checkboxes and radiobuttons tags generated for each checkbox or radiobutton \ tags with corresponding id and applied some css class or style to each of them.   --- No further details from [SPR-5384](https://jira.spring.io/browse/SPR-5384?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-01-01T07:32:27Z","2012-06-19T09:36:28Z"
"","10056","Label tag doesn't escape [] and double-quotes for map-based and indexed properties [SPR-5383]","**[Ilya](https://jira.spring.io/secure/ViewProfile.jspa?name=iegoshin)** opened **[SPR-5383](https://jira.spring.io/browse/SPR-5383?redirect=false)** and commented  Label tag by default uses path instead of id, so for map-based ar indexed properties label will not work if you specify path attribute. Can be fixed like this:      protected final String resolveFor() throws JspException {     	if (StringUtils.hasText(this.forId)) {     		return getDisplayString(evaluate(FOR_ATTRIBUTE, this.forId));     	}     	else {     		return StringUtils.deleteAny(getPropertyPath(), ""[]\"""");     	}     }  ---  **Issue Links:** - #10059 SelectTag (multiple=true) and CheckboxesTag generate invalid html for map-based properties (if path contains double-quotes)","closed","status: declined,","spring-projects-issues","2009-01-01T07:11:15Z","2019-01-12T16:27:32Z"
"","10055","org.springframework.web.servlet.tags.form.TagIdGenerator doesn't remove characters [] and double-quotes [SPR-5382]","**[Ilya](https://jira.spring.io/secure/ViewProfile.jspa?name=iegoshin)** opened **[SPR-5382](https://jira.spring.io/browse/SPR-5382?redirect=false)** and commented  org.springframework.web.servlet.tags.form.TagIdGenerator which is used by tags checkboxes and radiobuttons doesn't filter out [] and double-quotes from id attribute. It breaks html and javascript for map-based properties. Can be fixed like this:      public static String nextId(String name, PageContext pageContext) {     	String attributeName = PAGE_CONTEXT_ATTRIBUTE_PREFIX + name;     	Integer currentCount = (Integer) pageContext.getAttribute(attributeName);     	currentCount = (currentCount != null ? new Integer(currentCount.intValue() + 1) : new Integer(1));     	pageContext.setAttribute(attributeName, currentCount);     	return (StringUtils.deleteAny(name, ""[]\"""") + currentCount.intValue());     }  ---  **Issue Links:** - #11537 Spring MVC regression: binding to indexed properties is broken - #11506 form:checkbox tag creates invalid HTML id when bound to indexed property  **Backported to:** [3.0.1](https://github.com/spring-projects/spring-framework/milestone/68?closed=1)","closed","type: bug,","spring-projects-issues","2009-01-01T07:07:33Z","2019-01-11T16:21:52Z"
"","10054","Spring-form tags don't filter out double-quotes from id attributes. [SPR-5381]","**[Ilya](https://jira.spring.io/secure/ViewProfile.jspa?name=iegoshin)** opened **[SPR-5381](https://jira.spring.io/browse/SPR-5381?redirect=false)** and commented  For map-based properties spring-form tags keep double-quote character in ID attribute, that causes problems with javascript. Could be easily fixed by extending each tag and overriding this method:      protected String autogenerateId() throws JspException {     	return StringUtils.deleteAny(getName(), ""[]\"""");     }  ---  **Affects:** 3.0.7  **Issue Links:** - #10059 SelectTag (multiple=true) and CheckboxesTag generate invalid html for map-based properties (if path contains double-quotes)","closed","status: declined,","spring-projects-issues","2009-01-01T07:00:27Z","2019-01-12T16:27:33Z"
"","9958","EntityManagerPlusOperations proposal [SPR-5285]","**[Ignacio Coloma](https://jira.spring.io/secure/ViewProfile.jspa?name=icoloma)** opened **[SPR-5285](https://jira.spring.io/browse/SPR-5285?redirect=false)** and commented  As part of our work with the loom project ( http://loom.extrema-sistemas.org ) we have developed some extensions to JPA that we would like to contribute as an EntityManagerPlusOperations proposal. As far as I can tell, the current implementation is falling behind schedule, and this may help in this regard.  Attached you can find a working implementation for hibernate (start with ExtendedEntityManagerOperations), more code could be provided as needed.   ---  **Affects:** 2.5.5  **Attachments:** - [persistence.tar.gz](https://jira.spring.io/secure/attachment/14846/persistence.tar.gz) (_30.00 kB_)","closed","type: enhancement,","spring-projects-issues","2008-11-09T21:55:08Z","2012-06-19T09:36:28Z"
"","10142","Support Hessian 3.2.1 [SPR-5469]","**[Ho Tri Bao](https://jira.spring.io/secure/ViewProfile.jspa?name=hotribao)** opened **[SPR-5469](https://jira.spring.io/browse/SPR-5469?redirect=false)** and commented  Currently, regardless in which protocol (hessian 1 or hessian 2) that the client requests, the Hessian2Input will always be used if the class is available in the classpath. It works in hessian 3.1.2 but no longer work s with hessian 3.2.1  I got the answer from hessian mailinglist that Hessian2Input does not support hessian 1 protocol. Adaptations are needed in Spring in order to support the new version of hessian.  Please refer to the post in forum.  ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springframework.org/showthread.php?t=66876  **Attachments:** - [SPR-5469.patch](https://jira.spring.io/secure/attachment/15161/SPR-5469.patch) (_2.83 kB_)  **Issue Links:** - #10710 Support Hessian 4.0.1 with Spring 3.0  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-10T12:49:16Z","2019-01-11T15:46:40Z"
"","10370","Portlet-Name as portlet Controller annotation value to assign correct controllers to DispatcherPortlet [SPR-5700]","**[Helmut Mader](https://jira.spring.io/secure/ViewProfile.jspa?name=hmader)** opened **[SPR-5700](https://jira.spring.io/browse/SPR-5700?redirect=false)** and commented  **Problem:** When you have a portlet application with multiple portlets (that means several DispatcherPortlets entries in portlet.xml with different names and its own app-contexts) and using annotation based config and component scan (usually you scan the whole root package of your app to get all controllers, all services, all repositories etc.) the app context has no way to know what controller should be used for what portlet.  That means you have to separate the Controller classes in different sub packages for each concrete portlet, but that requires several and more specific base-package and component scan entries in each portlet's app ctx.  **Possible Solution:** For Controllers used with DispatcherPortlets it would be a nice feature to provide the portlet-name (as defined in the portlet.xml which is also the base name of the portlets app context config file) as value to the Controller annotation (or an additional PortletControllerName annotation), so that at some stage of app context init, only those Controllers are used that are annotated with the matching portlet name  Then it would be really possible to develop a Spring Portlet webapp almost like a ""normal"" WebApp without worrying about internal package structure and different scan entries for different portlets (which will often be similar and related in the same portlet web-app)   ---  **Affects:** 3.0 M2  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-27T07:52:28Z","2018-12-25T11:17:02Z"
"","10545","issue with the form tag. The Inner tags not able to access the name of the command object via the  PageContext in partial page rendering [SPR-5876]","**[Harikrishna Kollli](https://jira.spring.io/secure/ViewProfile.jspa?name=kris2008)** opened **[SPR-5876](https://jira.spring.io/browse/SPR-5876?redirect=false)** and commented  The Inner tags not able to access the name of the command object via the  PageContext in partial page rendering using  the FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, DEFAULT_COMMAND_NAME attribute. I am putting the name of the command bean into the model.  `@RequestMapping`(value=""/dashboard/hotels.action"", method = RequestMethod.GET) public String hotelsHandler(`@ModelAttribute`(""command"") DashboardPresentationModel command, Model model) {          model.addAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, DEFAULT_COMMAND_NAME);         model.addAttribute(DEFAULT_COMMAND_NAME,command);         return ""locationDependent"";     }  I get the below exception on page refresh  java.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name 'hotel' available as request attribute at org.springframework.web.servlet.support.BindStatus .\(BindStatus.java:141) at org.springframework.web.servlet.tags.form.Abstract DataBoundFormElementTag.getBindStatus(AbstractData BoundFormElementTag.java:175) at org.springframework.web.servlet.tags.form.Abstract DataBoundFormElementTag.getPropertyPath(AbstractDa taBoundFormElementTag.java:195) at org.springframework.web.servlet.tags.form.Abstract DataBoundFormElementTag.getName(AbstractDataBoundF ormElementTag.java:161) at org.springframework.web.servlet.tags.form.Abstract DataBoundFormElementTag.autogenerateId(AbstractDat aBoundFormElementTag.java:148) at org.springframework.web.servlet.tags.form.Abstract DataBoundFormElementTag.resolveId(AbstractDataBoun dFormElementTag.java:139) at org.springframework.web.servlet.tags.form.Abstract DataBoundFormElementTag.writeDefaultAttributes(Abs tractDataBoundFormElementTag.java:123) at org.springframework.web.servlet.tags.form.Abstract HtmlElementTag.writeDefaultAttributes(AbstractHtml ElementTag.java:380) at org.springframework.web.servlet.tags.form.SelectTa g.writeTagContent(SelectTag.java:199)  ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=74021  **Issue Links:** - #10544 Partial page refresh with form tag is not working (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2009-06-27T03:51:57Z","2019-01-12T16:50:20Z"
"","10544","Partial page refresh with form tag is not working [SPR-5874]","**[Harikrishna Kollli](https://jira.spring.io/secure/ViewProfile.jspa?name=kris2008)** opened **[SPR-5874](https://jira.spring.io/browse/SPR-5874?redirect=false)** and commented  ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=74021  **Issue Links:** - #10545 issue with the form tag. The Inner tags not able to access the name of the command object via the  PageContext in partial page rendering (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2009-06-26T10:13:20Z","2019-01-11T17:15:00Z"
"","10694","SystemPropertyUtils does not resolve placeholders recursively [SPR-6025]","**[Harald Radi](https://jira.spring.io/secure/ViewProfile.jspa?name=harald)** opened **[SPR-6025](https://jira.spring.io/browse/SPR-6025?redirect=false)** and commented  Unlike the property placeholder configurer the system property utils don't resolve placeholders recursively. If the placeholder specifies the location of properties files for a property placeholder configurer the application context falls back to the system properties utils (as the configurer is not in place yet), hence the placeholders value must not contain any other placeholders.  we (would like to) have sg. like  application.base=${catalina.base}  in our catalina.properties to make the application context tomcat independent (i.e. we even don't reference any tomcat env variables), but unfortunatelly we need to put the actual path into catalina.properties and thus need to create an individual properties file for every tomcat instance.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8357bcb050f27d46541cc89cedb61577eb958929, https://github.com/spring-projects/spring-framework/commit/d16faafc4f4ee45ed562bfbea768e554f8903229, https://github.com/spring-projects/spring-framework/commit/3fe09d70cde90a592a2934315f084e4a93324248","closed","type: enhancement,","spring-projects-issues","2009-08-18T23:52:55Z","2012-06-19T03:43:29Z"
"","9992","form:checkbox broken for nested arrays in collections [SPR-5319]","**[Harald Goelles](https://jira.spring.io/secure/ViewProfile.jspa?name=selzer)** opened **[SPR-5319](https://jira.spring.io/browse/SPR-5319?redirect=false)** and commented  String[] xxx;   a  b  sets ""a"" and ""b"" in xxx.  but if you have a collection of classes, only the last value is set:  List\ c ...  public class C { String[] xxx; }   a  b ...  a  b  selecting ""a"" and ""b"" for c[1] only selects ""b"" (the last element)  I can provide some sample code if requested.   ---  **Affects:** 2.5.5, 2.5.6","closed","status: invalid,","spring-projects-issues","2008-11-25T00:05:06Z","2019-01-12T05:33:54Z"
"","10007","ensureUniqueRuntimeObjectNames does not work on beans registered with a MBeanExporter [SPR-5334]","**[Hans-Peter StÃ¶rr](https://jira.spring.io/secure/ViewProfile.jspa?name=hstoerr)** opened **[SPR-5334](https://jira.spring.io/browse/SPR-5334?redirect=false)** and commented  When registering objects with a org.springframework.jmx.export.MBeanExporter the attribute ensureUniqueRuntimeObjectNames does not do anything - in case of name conflicts one still gets a BeanCreationException. I tried registering beans in the xml config file like this:                                                                                   In the MBeanExporter source the attribute is only used in registerManagedResource(Object managedResource), but this method is not used when registering the beans.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-12-02T20:22:42Z","2019-01-12T16:27:39Z"
"","10106","HibernateTemplate - changed Hibernate Session load() and get() semantic [SPR-5432]","**[Hamster](https://jira.spring.io/secure/ViewProfile.jspa?name=hamsterready)** opened **[SPR-5432](https://jira.spring.io/browse/SPR-5432?redirect=false)** and commented  It seems that Hibernate in v3 has changed load() semantic - it does not throw exception any more and returns proxy.  http://www.hibernate.org/hib_docs/v3/api/org/hibernate/Session.html#load(java.lang.Class,%20java.io.Serializable)  http://static.springframework.org/spring/docs/2.5.6/api/org/springframework/orm/hibernate3/HibernateTemplate.html#load(java.lang.Class,%20java.io.Serializable)  Did I miss something?   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-01-26T02:36:20Z","2019-01-12T16:27:26Z"
"","10616","no ability to get warnings from ResultSet.getWarnings() if query results are also desired [SPR-5947]","**[Hal Deadman](https://jira.spring.io/secure/ViewProfile.jspa?name=hdeadman)** opened **[SPR-5947](https://jira.spring.io/browse/SPR-5947?redirect=false)** and commented  When using spring jdbc inversion of control (JdbcTemplate) we are accessing a JDBC federated query datasource that returns query results but also returns warnings about which federated sources might not have been available. Setting the ignoreWarnings property on the template to false isn't an option because we want to get results back, not an exception. We currently have a hack where we check for warnings in the row mapper when the first row is processed but that only works if there is at least one row in the result set. If there are no rows, the row mapper is never called.  I hestitate to suggest a fix b/c you guys know better than me, but one way to provide the solution without changing the method signatures in the JdbcTemplate would be for the rowmapper to optionally implement a 2nd interface which (if implemented) would provide a callback method for spring to pass in the warnings from the ResultSet (or the whole resultset) whether there are any rows processed or not.  I know we could just use regular JDBC but I hate to give up the cleanliness of spring-jdbc.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-07-21T06:37:58Z","2012-06-19T02:28:23Z"
"","10368","Make the bind tag work with any model attribute [SPR-5698]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-5698](https://jira.spring.io/browse/SPR-5698?redirect=false)** and commented  It seems that the spring:bind tag requires Java bean objects in order to bind to the bean's fields (I assume historically Spring always required a dedicated Command-object for forms). However, often very simple forms are used that contain only 1 to 2 form input fields. For those simple cases, it would be preferable to just create 1-2 `@ModelAttribute-references` to e.g. simple String variables (Or Integer, BigDecimal etc.) in my controller instead of having to create a dedicated ""form class"" (In case those to fields do not map to main domain model nicely).  This would also help aligning Spring MVC conceptionally with Struts2 where your JSP form fields can map to any instance variables (Model Attributes) in your Controller class (Action).   ---  **Affects:** 3.0 M2","closed","type: enhancement,","spring-projects-issues","2009-04-24T13:58:26Z","2018-12-27T11:19:32Z"
"","10143","Possible NPE in JmsUtils.buildExceptionMessage and JmsException.getMessage [SPR-5470]","**[Guillaume Nodet](https://jira.spring.io/secure/ViewProfile.jspa?name=gnodet)** opened **[SPR-5470](https://jira.spring.io/browse/SPR-5470?redirect=false)** and commented  If the JMS exception has no message, a NPE is thrown  ``` Exception in thread ""org.apache.servicemix.jbi.cluster.requestor.ActiveMQJmsRequestorPool#717dc9-3"" java.lang.NullPointerException         at java.lang.String.indexOf(String.java:1564)         at java.lang.String.indexOf(String.java:1546)         at org.springframework.jms.support.JmsUtils.buildExceptionMessage(JmsUtils.java:255)         ... ```  ---  **Affects:** 2.5.6  **Issue Links:** - #9948 JmsUtils.buildExceptionMessage throws NPE if the linked exception doesn't have a message (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2009-02-10T22:00:17Z","2019-01-11T15:45:48Z"
"","10582","context:property-override to accept properties as child elements [SPR-5913]","**[Grzegorz OlÄdzki](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorz.oledzki)** opened **[SPR-5913](https://jira.spring.io/browse/SPR-5913?redirect=false)** and commented  Currently if one needs to redefine one property using `context:property-override` these lines are needed (or a separate .properties file is needed);  ```  	 		 			1 		 	   ```  It would be better to have a syntax like this:  ```       1  ```    ---  **Affects:** 2.5.6  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2009-07-08T21:56:20Z","2012-06-19T09:36:29Z"
"","10154","MBeanExporter's autodetection incompatible with prototype beans [SPR-5481]","**[Grzegorz OlÄdzki](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorz.oledzki)** opened **[SPR-5481](https://jira.spring.io/browse/SPR-5481?redirect=false)** and commented  `MBeanExporter#autodetect()` method is supposed to register all the beans in the JMX server. It calls  ``` this.beanFactory.getBeanNamesForType(Object.class, true, this.allowEagerInit); ```  which in turn returns all the **bean names**.  If there's a bean defined with **prototype** scope, it will be included in the list, and MBeanExporter will run `beanFactory.getBean(beanName)` to get one instance. So an **unrequested instance** of a prototype bean would be created. Which is wrong.   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-02-12T18:51:48Z","2019-01-12T16:27:18Z"
"","10153","[PATCH] JMX: mBeanExporter exports the beans only once during its startup [SPR-5480]","**[Grzegorz OlÄdzki](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorz.oledzki)** opened **[SPR-5480](https://jira.spring.io/browse/SPR-5480?redirect=false)** and commented  Currently MBeanExporter exports all the beans found at the start time (in the autodetect mode).  It would be better if there was a JMXBeanPostProcessor which exposed all the beans after their created and initialized. The difference would be among others with prototype beans - created dynamically on the fly. We have created a JMXBeanPostProcessor (pasted below) and configured MBeanExporter not to register any beans by itself.  ``` /**  * A {@link BeanPostProcessor} that registers all beans that are supposed to be exposed  * in JMX console. In most cases these are the beans with classes with annotated  * {@link ManagedResource}.  * @author GOL Grzegorz OlÄdzki, Syncron (created on 2009-02-11)  */ public class JMXBeanPostProcessor implements BeanPostProcessor {  	private AutodetectCapableMBeanInfoAssembler assembler; 	private MBeanExporter mbeanExporter; 	 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { 		Class beanClass = bean.getClass(); 		if (assembler.includeBean(beanClass, beanName)) { 			mbeanExporter.registerManagedResource(bean); 		} 		return bean; 	}  	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { 		return bean; 	}  	@Required 	public void setAssembler(AutodetectCapableMBeanInfoAssembler assembler) { 		this.assembler = assembler; 	}  	@Required 	public void setMbeanExporter(MBeanExporter mbeanExporter) { 		this.mbeanExporter = mbeanExporter; 	}  } ```    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-02-12T18:35:39Z","2012-06-19T09:36:31Z"
"","10113","""!target(...)"" pointcut expression never matches any method [SPR-5439]","**[Grzegorz OlÄdzki](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorz.oledzki)** opened **[SPR-5439](https://jira.spring.io/browse/SPR-5439?redirect=false)** and commented  A pointcut expression containing ``` !target(com.some.Interface) ``` (note the negation in front!) never matches any method. Even if `com.some.Interface` doesn't have any implementations.   ---  **Affects:** 2.5.6  **Attachments:** - [SPR-5439-example.zip](https://jira.spring.io/secure/attachment/15096/SPR-5439-example.zip) (_2.41 kB_)","closed","status: bulk-closed,","spring-projects-issues","2009-01-27T18:53:29Z","2019-01-12T02:38:00Z"
"","10102","TestContext to become subclassable [SPR-5428]","**[Grzegorz OlÄdzki](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorz.oledzki)** opened **[SPR-5428](https://jira.spring.io/browse/SPR-5428?redirect=false)** and commented  org.springframework.test.context.TestContext declares a package-protected constructor (the only constructor there). It would be better to make it **protected** instead - so that one can subclass it in his/her own package.  The same would apply to methods there - why not make them protected instead of private: `loadApplicationContext()` `contextKeyString()`  ---  **Affects:** 2.5.6  **Issue Links:** - #10284 Provide support for context hierarchies in the TestContext Framework (_**""is superseded by""**_) - #12348 Convert TestContext to interface and introduce default implementation (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2009-01-22T18:25:50Z","2019-01-11T15:43:52Z"
"","10690","Allow for using MultiValueMap in GET request for mapping multiple request params [SPR-6021]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-6021](https://jira.spring.io/browse/SPR-6021?redirect=false)** and commented  If you send GET request with multiple params (and changing number thereof), instead of writing method like this:  ``` method(@RequestParam String param1, @RequestParam String param2, @RequestParam String param3, @RequestParam String param4, ...) ```  it would be simpler to use MutliValueMap for this purpose:  ``` method(@RequestParam MutliValueMap params) ```  (or create new annotation `@RequestParams` for this purpose)   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-08-17T23:50:24Z","2012-06-19T03:43:35Z"
"","10495","ShallowEtagHeaderFilter doesn't work: response body is empty [SPR-5825]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-5825](https://jira.spring.io/browse/SPR-5825?redirect=false)** and commented  I'm trying to add Spring's new ShallowEtagHeaderFilter to my application. However the filter doesn't see the response body - the view is generated, but the filter sees it as empty String, and generates alwasy Etag for empty String. So in fact filter makes the whole application unusable. I use Tomcat 6.0.18 running on Suns JDK 1.6.0_10 and Spring 3.0M3 distribution (via Spring's S3 Maven repo). I also use two other filters in the chain: Spring's EncodingFilter and Spring Security filter. Both are called earlier in the chain, so they should have no influence on this issue. After debugging the code, I found out that the ShallowEtagResponseWrapper.content buffer is empty after the view is rendered. This is because the method ShallowEtagResponseWrapper.ResponseServletOutputStream.write(int) is never called (at least debugger never stops on the breakpoint put there, so it seems it is never called, and that's why the content buffer is empty). My view class it's not JSP, it's my custom implementation of View, but it worked well before and I don't think it has any impact on this. Its renderBody() method contains two lines: first sets content-type, second prints body:  ``` response.getWriter().write(responseBodyString); ```  Debugging shows that when getWriter() is called it returns the PrintWriter from ShallowEtagResponseWrapper; this PrintWriter wraps OutputStreamWriter which wraps ResponseServletOutputStream from ShallowEtagResponseWrapper. So everything seems ok. Then during the call to write() on this PrintWriter, it should at the end delegate to the write(int) method on the ShallowEtagResponseWrapper buffer - but it doesn't. I don't know why. During debugging I'm only able to get to the call of this method in OutputStreamWriter:  ``` public void write(String str, int off, int len) throws IOException {  se.write(str, off, len); } ```  Here 'se' is an instance of sun.nio.cs.StreamEncoder. Unfortunatelly, sources included in JDK 1.6 don't contain this class, and I wasn't able to find the proper source for this class. I found some googling, but it is probably from JDK 1.7 - the lines on the source don't match the ones from debugger metadata, and there are some methods called which are not used at all in the source I've found.  This all seems serious - my setup seems typical, but the filter is broken completely. Maybe you will have better luck with debugging it, you can also compare the setup you used in which it worked, maybe it can give some hint.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/444378c426128d72870971564131014d3cdff77c","closed","type: bug,","spring-projects-issues","2009-06-14T10:36:36Z","2012-06-19T03:42:54Z"
"","10403","Enhance MultiValueMap to be easily ""flattened"" [SPR-5733]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-5733](https://jira.spring.io/browse/SPR-5733?redirect=false)** and commented  In MultiValueMap (which is actually Map) there should be a method that would create either the shallow copy or the live view in the form Map where Object is K (if only one value present) or List\ (if more than one value).  See also end of the post: http://grzegorzborkowski.blogspot.com/2009/05/spring-framework-30-m3-and-rest.html   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-05-08T08:59:29Z","2019-01-11T17:31:41Z"
"","10307","@RequestMapping matching should be insensitive to trailing slashes [SPR-5636]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-5636](https://jira.spring.io/browse/SPR-5636?redirect=false)** and commented  For full discussion, see my article: http://grzegorzborkowski.blogspot.com/2009/03/test-drive-of-spring-30-m2-rest-support.html  Some citations from it:  ""For RESTful web services (...) URLs actually represent virtual directories. This means that common rule ""trailing slash doesn't matter"" (especially for URL representing ""list of resources"") should be respected: http://mydomain/restservice/v1/projects address is equivalent to http://mydomain/restservice/v1/projects/ address. If you consider that each project is also the container for its tasks or assignments, then also http://mydomain/restservice/v1/projects/MyProject should be equivalent to http://mydomain/restservice/v1/projects/MyProject/, etc.""  `@PathMapping` annotation is broken when it comes to handling those trailing slashes:  ""If I mark controller class with `@RequestMapping`(""/projects"") then only request without trailing slash will be matched. If trailing slash is appended to the actual request, we get 404 response. What's worse, method-level annotation will not be appended to base URL in this case. So we have to change it to `@RequestMapping`(""/projects/*""). Now methods will work, but if you send request to base url to get list of projects, and forget the slash at the end, you will get 404 response again. That's very bad in my opinion. JAX-RS handles it properly: see JAX-RS's `@Path` Javadoc.""  For reference: https://jsr311.dev.java.net/nonav/releases/1.0/javax/ws/rs/Path.html  This issue is related also to #10302.  ---  **Affects:** 3.0 M3  **Issue Links:** - #10302 Implicit /** mapping on type-level `@RequestMapping`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c225b44f3440d8799f1be96de7e27131ad9086c3","closed","type: enhancement,","spring-projects-issues","2009-03-30T18:21:54Z","2019-01-13T08:00:21Z"
"","10299","Support for PUTting form-encoded data [SPR-5628]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-5628](https://jira.spring.io/browse/SPR-5628?redirect=false)** and commented  In RESTful services scenario it is not uncommon to accept the incoming data (as service input) in the form-encoded format (Content-type: application/x-www-form-urlencoded). This format is well-known, popular, implemented in every language. See the RESTful Web Service book from O'Reilly for longer discussion of such choice. Obviously, REST service will accept form-endoded data in POST and PUT request. The problem is that servlet spec (or implementations) seems to be broken in this area. HttpServletRequest.getParameter(""foo"")  method for form-encoded data returns the parameter value only for POST requests, not for PUT. I've tested it on Tomcat and Glassfish. This also means that all Spring's autobinding features (with command object) will fail for PUT requests. This is really serious problem, as for PUT requests, one have to manually parse and decode the request body. The solution would be I think to add some filter, which wraps the request when the method is PUT and content type is ""application/x-www-form-urlencoded"", and override the getParameter() and related methods. It would be probably also helpful to check the servlet spec for explanation of this behavior, and how it is implemented in Tomcat (or other containers).  To reproduce, simply create servlet or JSP like this:  and send POST and then PUT request to it, with content-type set to ""application/x-www-form-urlencoded"" and body equal to ""foo=bar""  ---  **Affects:** 3.0 M3  **Issue Links:** - #13063 Clarify use of ""x-www-form-urlencoded"" in reference documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d746dcaa63959b78dc15582cdee63fd7746aeb61, https://github.com/spring-projects/spring-framework/commit/2cf2fc195ed36f841c5fd19341bd7e89e5db1fd7  4 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-28T09:01:49Z","2019-01-11T16:30:41Z"
"","10228","Regression: After changing from 2.5.6 to 3.0M2, application deployment is broken on Tomcat: ClassNotFoundException: org.objectweb.asm.commons.EmptyVisitor [SPR-5557]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-5557](https://jira.spring.io/browse/SPR-5557?redirect=false)** and commented  I had a web application based on Spring 2.5.6, built with Maven. With Spring 2.5.6, it built and deployed correctly to Tomcat 6 (6.0.16 and 6.0.18).  This is a part of POM file with Spring dependencies: 2.5.6 ... \ \org.springframework\ \spring-context\ \${spring.version}\ \ \ \org.springframework\ \spring-aop\ \${spring.version}\ \ \ \org.springframework\ \spring-web\ \${spring.version}\ \ \ \org.springframework\ \spring-jdbc\ \${spring.version}\ \ \ \org.springframework\ \spring-orm\ \${spring.version}\ \ \ \org.springframework\ \spring-tx\ \${spring.version}\ \ \ \org.springframework\ \spring-webmvc\ \${spring.version}\ \  After changing version in POM to 3.0.0.M2 (and updating artifactId to new scheme), war is built properly, but during deployment to Tomcat I got exception, see the stacktrace:  org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from ServletContext resource [/WEB-INF/dispatcher-servlet.xml]; nested exception is java.lang.NoClassDefFoundError: org/objectweb/asm/commons/EmptyVisitor at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:394) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:316) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:284) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:93) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:125) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:418) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:427) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:341) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:307) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) at javax.servlet.GenericServlet.init(GenericServlet.java:212) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1172) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:992) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4058) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4371) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:830) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:719) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:490) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1217) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:293) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1337) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590) at java.lang.Thread.run(Thread.java:619) Caused by: java.lang.NoClassDefFoundError: org/objectweb/asm/commons/EmptyVisitor at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:621) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124) at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1847) at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:890) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1354) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1233) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320) at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:621) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124) at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1847) at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:890) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1354) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1233) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320) at org.springframework.core.type.classreading.SimpleMetadataReader.getAnnotationMetadata(SimpleMetadataReader.java:54) at org.springframework.core.type.filter.AnnotationTypeFilter.matchSelf(AnnotationTypeFilter.java:68) at org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter.match(AbstractTypeHierarchyTraversingFilter.java:55) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.isCandidateComponent(ClassPathScanningCandidateComponentProvider.java:252) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:192) at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:201) at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:83) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:72) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1291) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1281) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:475) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:372) ... 33 more Caused by: java.lang.ClassNotFoundException: org.objectweb.asm.commons.EmptyVisitor at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1387) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1233) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320) ... 63 more  This is a new version of POM: 3.0.0.M2 ... \ \org.springframework\ \org.springframework.context\ \${spring.version}\ \ \ \org.springframework\ \org.springframework.aop\ \${spring.version}\ \ \ \org.springframework\ \org.springframework.web\ \${spring.version}\ \ \ \org.springframework\ \org.springframework.jdbc\ \${spring.version}\ \ \ \org.springframework\ \org.springframework.orm\ \${spring.version}\ \ \ \org.springframework\ \org.springframework.transaction\ \${spring.version}\ \ \ \org.springframework\ \org.springframework.web.servlet\ \${spring.version}\ \  This is a dispatcher-servlet.xml content, which causes the problem during parsing:  \  \                                               		     		                                  \   ---  **Affects:** 3.0 M2  4 votes, 5 watchers","closed","in: core,","spring-projects-issues","2009-03-09T21:29:49Z","2019-01-12T05:33:40Z"
"","10100","Allow for custom processing or result objects returned from handler/controller methods [SPR-5426]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-5426](https://jira.spring.io/browse/SPR-5426?redirect=false)** and commented  See the Spring forum link for explanation why this can be useful.  Generally, the case is following: I use the annotation-base controllers. I have a method, which takes some arguments, including MyTypeX, and returns MyTypeY:  ``` @Controller public class MyController {   public MyTypeY myMethod(MyTypeX input, ...) {...}  } ```  I want to register some custom converters for them. I can use the setCustomArgumentResolver() from AnnotationMethodHandlerAdapter method, to register custom converter for input type MyTypeX. That's great. But it's seems impossible for return MyTypeY to be converted. The AnnotationMethodHandlerAdapter  doesn't contain any extension point for this. The extension point should allow for two things: 1. custom processing of returned value to add it to model, or create model from it, or create view/view name from it; 2. custom processing of return value to write the response directly to output stream base on it, and return null to signal that response was already sent.  This is a piece of code of invokeHandlerMethod() of this AnnotationMethodHandlerAdapter:  ``` Object result = methodInvoker.invokeHandlerMethod(handlerMethod, handler, webRequest, implicitModel); ModelAndView mav = methodInvoker.getModelAndView(handlerMethod, handler.getClass(), result, implicitModel, webRequest); ```  One should be able to override the getModelAndView() method.  Unfortunately, this method is defined in some private inner class, what prevents from subclassing and overriding it.  Proposed changes are:  1.Create the ModelAndViewResolver interface (the parameters for its getModelAndView method are taken directly from the code above, but it does not have to be exactly the same) :  ``` package org.springframework.web.servlet;  import java.lang.reflect.Method;  import org.springframework.ui.ExtendedModelMap; import org.springframework.web.context.request.ServletWebRequest;  public interface ModelAndViewResolver {     boolean supports(Class clazz);        ModelAndView getModelAndView(Method handlerMethod, Class handlerType, Object returnValue,          ExtendedModelMap implicitModel, ServletWebRequest webRequest); } ```  2. Add setter methods and field into AnnotationMethodHandlerAdapter for custom implementation of this interface :  ```    private ModelAndViewResolver[] customModelAndViewResolvers;     public void setCustomModelAndViewResolver(ModelAndViewResolver resolver) {       this.customModelAndViewResolvers = new ModelAndViewResolver[] {resolver};    }        public void setModelAndViewResolvers(ModelAndViewResolver[] resolvers) {       this.customModelAndViewResolvers = resolvers;    } ```  3. Change the two aforementioned two lines in the invokeHandlerMethod of AnnotationMethodHandlerAdapter class into following:  ``` Object result = methodInvoker.invokeHandlerMethod(handlerMethod, handler, webRequest, implicitModel); ModelAndViewResolver customModelAndViewResolver = null; if (customModelAndViewResolvers != null) {    for (ModelAndViewResolver mavr : customModelAndViewResolvers) {       if (mavr.supports(handlerMethod.getReturnType())) {          customModelAndViewResolver = mavr;       }    } } ModelAndView mav; if (customModelAndViewResolver != null) {    mav = customModelAndViewResolver.getModelAndView(handlerMethod, handler.getClass(), result, implicitModel, webRequest); } else {    mav = methodInvoker.getModelAndView(handlerMethod, handler.getClass(), result, implicitModel, webRequest); } ```  Now user will be able to plug in own resolvers this way:  ```xml          	     		 		 		     		 		  ```  This is how I use it to return directly JSONObject from my handler methods:  ``` import java.io.IOException; import java.lang.reflect.Method;  import javax.servlet.ServletResponse;  import net.sf.json.JSONObject;  import org.springframework.ui.ExtendedModelMap; import org.springframework.web.context.request.ServletWebRequest; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.ModelAndViewResolver;  public class JsonResultResolver implements ModelAndViewResolver {     public ModelAndView getModelAndView(Method handlerMethod, Class handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) {       ServletResponse out = webRequest.getResponse();       out.setContentType(""application/json; charset=utf-8"");       try {          out.getWriter().write(returnValue.toString());       } catch (IOException e) {          throw new RuntimeException(e);       }       return null;    }     public boolean supports(Class clazz) {       return JSONObject.class.equals(clazz);    }  } ```  ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springframework.org/showthread.php?t=66175  **Issue Links:** - #10436 `@ResponseBody`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a0938fdd644405939af06d74c9c97fb5b65cf77","closed","type: task,","spring-projects-issues","2009-01-21T09:06:11Z","2019-01-13T08:01:20Z"
"","10000","Consider migrating from Commons-Logging to SLF4j [SPR-5327]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-5327](https://jira.spring.io/browse/SPR-5327?redirect=false)** and commented  Currently Spring Framework depends on Commons-Logging. All of us know that for long time Commons-Logging has very bad reputation and is the source of many problems, bug, memory leaks etc. The SLF4j is the newer implementation of similar idea, and many people claim it works much better than Commons-Logging. It contain even some adapter for Commons-Logging users, allowing for gradual transition. Perhaps with Spring 3, along with migration to Java 5, is the best time to migrate also to SLF4J and remove dependency on Commons-Logging? In fact, you can probably do it somehow automatically, writing the script that will replace in all java files the imports and logger types.  ---  **Affects:** 3.0 M4  **Attachments:** - [SPR-5327.patch](https://jira.spring.io/secure/attachment/15468/SPR-5327.patch) (_511.88 kB_)  **Issue Links:** - #12774 Revisit subsystem-oriented logging - #19081 Revisit Commons Logging vs java.util.logging vs SLF4J vs Log4j 2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f4763a801fe0a8f57aafeb2f9fb97d0d9fad43a5, https://github.com/spring-projects/spring-framework/commit/1a06b6a0ab2f7744324de0e8dbdb167c3c83e126, https://github.com/spring-projects/spring-framework/commit/ad3fa505f33d3533f226ad32ddb833b757343400, https://github.com/spring-projects/spring-framework/commit/604a9f077d5081865a7189124a17a840d2a83d42, https://github.com/spring-projects/spring-framework/commit/b7e37ddb072b0b0a57659761e5fceddb3a854bc0, https://github.com/spring-projects/spring-framework/commit/1202f67cc8afbdc7d49a43ea8a86a549fbfbb37a, https://github.com/spring-projects/spring-framework/commit/0400ccc11fa19b29c4b2a5e2b0f10b85679feed6  20 votes, 13 watchers","closed","has: votes-jira,","spring-projects-issues","2008-11-27T06:14:42Z","2019-01-11T16:19:49Z"
"","10420","Typo in references docs ""4.12.5.4 Specifying bean scope"" => ""Lookup method injection"", **PATCH INCLUDED** [SPR-5750]","**[Greg Turnquist](https://jira.spring.io/secure/ViewProfile.jspa?name=gregturn)** opened **[SPR-5750](https://jira.spring.io/browse/SPR-5750?redirect=false)** and commented  Patch for docs:  Index: beans.xml  ---  --- beans.xml   (revision 1170) +++ beans.xml   (working copy) @@ -6545,7 +6545,7 @@ protected abstract Command createCommand(); }                   ]]>\\  -         Using Java-configurtion support we can easily create a  +         Using Java-configuration support we can easily create a       subclass of CommandManager where the abstract       createCommand() is overridden in such a way that it       'looks up' a brand new (prototype) command object:","closed","type: bug,","spring-projects-issues","2009-05-12T22:00:28Z","2019-01-13T21:49:59Z"
"","10259","BeanPropertyRowMapper should default primitive property when receiving null value from result [SPR-5588]","**[Greg Nieman](https://jira.spring.io/secure/ViewProfile.jspa?name=gnieman)** opened **[SPR-5588](https://jira.spring.io/browse/SPR-5588?redirect=false)** and commented  Submitted on behalf of support client:  BeanPropertyRowMapper should gracefully handle null return values for primitive types. Currently it will attempt to set the null value into the target bean, treating the primitive property the same way it would an Object property. In such cases, a pre-established default value would allow the retrieval to proceed. Currently the SQL for retrievals where this may occur require modification to add NVL() for all numeric fields that have the potential to be null.   ---  **Affects:** 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/360434d0d1a4cddb2571a1fd91b52cb167ee461d, https://github.com/spring-projects/spring-framework/commit/93c56f19dfd39bd2f2cb6ffd94377a57c52a9ab6","closed","type: enhancement,","spring-projects-issues","2009-03-20T03:40:53Z","2012-06-19T03:47:26Z"
"","10080","Hot deploy changes to hibernate configuration files packaged in a jar are not picked up by Jetty [SPR-5407]","**[Greg Nieman](https://jira.spring.io/secure/ViewProfile.jspa?name=gnieman)** opened **[SPR-5407](https://jira.spring.io/browse/SPR-5407?redirect=false)** and commented  Created on behalf of support client:  When hot deploying to Jetty, if hibernate configuration files are modified, the changes are not picked up during the context reload when those configuration files are packaged within a jar.  When these files are deployed via the classes folder, the reload will pick up the changes.  Client assessment was that ClassPathResource.getInputStream() should be calling the getResource(path) method from the Class or Classloader, opening a URLConnection with that obtained URL, setting useCaches to false, and then obtaining the input stream with that connection:  if (this.clazz != null) { url = clazz.getResource(this.path); else{ url = this.classLoader.getResource(this.path);; }  if(url != null){ URLConnection connection = url.openConnection(); connection.setUseCaches(false); // don't use the cache!! is = connection.getInputStream(); }  Steps to reproduce: 1. Install Jetty 6,1.19, set the JETTY_HOME appropriately 2. Add hd-jetty-context.xml to the context folder.  If on Windows, add the webdefault.xml file to the etc directory so the jar containing the config file will not be locked. 3. Build the two enclosed projects using maven with mvn install in this order 6215emp, 6215. 4. Set up an exploded war directory and point the above context file to point to that directory. 5. Start Jetty.  Webapp should deploy correctly.  Navigating to the default context should produce a page. 6. Go to the 6125emp project, open Employee.hbm.xml, and uncomment the role field.  It is not present on the Employee object. 7. Build the new jar with maven and copy the jar file to the context directory /WEB-INF/lib. 8. Either touch or modify the context descriptor in the Jetty context directory.  The app will fail to reload saying that Employee.hbm,xml cannot be found. 9. Restarting Jetty, the new context will be picked up. 10. Reversing the process, starting with the invalid hibernate file, will produce a field not found error on startup.  When the employee jar is recompiled after commenting out the erroneous field, the message stating that Employee.hbm.xml cannot be found will occur. 11. Placing the hibernate config in the /classes directory causes changes to be picked up as expected.  This error does not occur in Linux.  And according to clieng, on the Mac/Leopard platform it will reload, but but simply ignore the new context definition.  Modifying ClassPathResource.java as per the client suggestion, the error did not occur.  Attached is a zip with the projects used for the test, a context definition for Jetty, and a defaultweb.xml if running on Windows to avoid file locking issues.   ---  **Affects:** 2.5.6  **Attachments:** - [jetty-hotdeploy-load.zip](https://jira.spring.io/secure/attachment/15038/jetty-hotdeploy-load.zip) (_24.17 kB_)","closed","type: enhancement,","spring-projects-issues","2009-01-13T07:54:01Z","2012-06-19T09:36:30Z"
"","9942","Allow developers to introduce custom @RequestMapping implementations [SPR-5269]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-5269](https://jira.spring.io/browse/SPR-5269?redirect=false)** and commented  What would be VERY helpful is allow developers to introduce custom `@RequestMapping` implementations..  For example, I might have something like: `@DomainBasedRequestMapping`(value = ""/home.htm"", domain = ""mydomain.com"") public String method() {}  `@DomainBasedRequestMapping`(value = ""/home.htm"", domain = ""myotherdomain.com"") public String method2() {}  I tried doing this in Spring 2.5 but it got VERY difficult.  One way I was thinking this could work is there would be a way to register custom `@RequestMapping` annotations (or just search for interfaces that extend `@RequestMapping`). For each custom `@RequestMapping` annotation, we could then register or wire up a custom handler for that situation.    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-11-04T00:59:28Z","2012-06-19T03:46:35Z"
"","10573","Multipart/mixed requests using RestTemplate [SPR-5904]","**[Graham Zabel](https://jira.spring.io/secure/ViewProfile.jspa?name=graham_z)** opened **[SPR-5904](https://jira.spring.io/browse/SPR-5904?redirect=false)** and commented  We have a requirement to upload documents (Word, pdf, etc). The Request is expected to be a multipart/mixed MIME type, with the first section containing the Xml defining the document, and the second section containing the actual document.  There currently seems to be very limited support for multipart requests. Could we have support for creation of  multipart requests using RestTemplate?  thanks, Graham   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/def90d1016ae948cefa9346bd7660c134ebb168b, https://github.com/spring-projects/spring-framework/commit/af4b22e5b9293fc82353acff7f35e45a10be4459, https://github.com/spring-projects/spring-framework/commit/0efb9d8023b07c6566aa1ef604574b1fe782052f","closed","type: enhancement,","spring-projects-issues","2009-07-06T19:34:16Z","2012-06-19T03:43:40Z"
"","10535","RestTemplate - access to Request Headers [SPR-5866]","**[Graham Zabel](https://jira.spring.io/secure/ViewProfile.jspa?name=graham_z)** opened **[SPR-5866](https://jira.spring.io/browse/SPR-5866?redirect=false)** and commented  Hi,  When sending GET and POST requests, we are required to send a Security token in the HTTP header. Currently with RestTemplate there is no easy way to set headers on the request.  The only way that seems possible is to provide a custom RequestCallback, in which the httpRequest object can be manipulated in doWithRequest(), making all but the execute() method unusable.  Is there a clean and easy way to set http headers on requests? (I can't think of one without some significant rewrites).  thanks, Graham  ---  **Issue Links:** - #11634 Introduce HttpEntity (_**""depends on""**_)  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-24T20:40:31Z","2019-01-11T17:15:48Z"
"","10506","RestTemplate - postForObject() method [SPR-5836]","**[Graham Zabel](https://jira.spring.io/secure/ViewProfile.jspa?name=graham_z)** opened **[SPR-5836](https://jira.spring.io/browse/SPR-5836?redirect=false)** and commented  Hi,  Using RestTemplate, the only way to execute a POST and process the response is to use execute() providing custom Callback and Extractor classes, which seems to be very elaborate. Could we have a new convenience method, perhaps postForObject() that does something like this:      public  R postForObject(String url, Object request, Class responseType) throws RestClientException {     	return execute(url, HttpMethod.POST,      				new PostPutCallback(request), new HttpMessageConverterExtractor(responseType));     }  thanks, Graham   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ddcd9f49053b9913ca67911dda60929d3bcfa9ee","closed","type: enhancement,","spring-projects-issues","2009-06-18T01:48:32Z","2012-06-19T03:44:07Z"
"","10447","UnsatisfiedDependencyException - autowiring to a setter declaring the interface rather than the implementation fails in 3.0 but works in 2.5 [SPR-5777]","**[Graham Zabel](https://jira.spring.io/secure/ViewProfile.jspa?name=graham_z)** opened **[SPR-5777](https://jira.spring.io/browse/SPR-5777?redirect=false)** and commented  autowiring to a setter declaring the interface rather than the implementation fails in 3.0 but works in 2.5, in the following instance:  \  HibernateReferenceDataDao declared thus:  public class HibernateReferenceDataDao extends HibernateDaoSupport implements ReferenceDataDao {  This causes the test to fail when injected here:  public void setReferenceDataDao(ReferenceDataDao referenceDataDao) { this.referenceDataDao = referenceDataDao; }  This can be fixed by setting the injected parameter to the concrete class rather than the interface. Doesn't seem right, but it works, like this:  public void setReferenceDataDao(HibernateReferenceDataDao referenceDataDao) { this.referenceDataDao = referenceDataDao; }  trace:  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'com.rbos.nucleus.integration.db.dao.ReferenceDataDaoTest': Unsatisfied dependency expressed through bean property 'referenceDataDao': : No bean named 'referenceDataDao' is defined; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'referenceDataDao' is defined at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1091) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:984) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:333) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.injectDependencies(AbstractDependencyInjectionSpringContextTests.java:208) at com.rbos.test.framework.AbstractNucleusFunctionalTestCase.injectDependencies(AbstractNucleusFunctionalTestCase.java:45) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.prepareTestInstance(AbstractDependencyInjectionSpringContextTests.java:183) at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:103) at junit.framework.TestCase.runBare(TestCase.java:125) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:79) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'referenceDataDao' is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:443) at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:986) at org.springframework.beans.factory.support.DefaultListableBeanFactory.isAutowireCandidate(DefaultListableBeanFactory.java:416) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:737) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:677) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1076) ... 20 more    ---  **Affects:** 3.0 M3","closed","in: core,","spring-projects-issues","2009-05-21T19:44:03Z","2019-01-11T17:33:27Z"
"","10443","CustomEditorConfigurer compatibility breakage in 3.0 [SPR-5773]","**[Graham Zabel](https://jira.spring.io/secure/ViewProfile.jspa?name=graham_z)** opened **[SPR-5773](https://jira.spring.io/browse/SPR-5773?redirect=false)** and commented  When migrating from Spring 2.5 to Spring 3 M3, my working CustomEditorConfigurer bean now fails to instantiate. It is defined thus:                                                                              	  this works in 2.5. In 3.0 M3 I get the following error:  20-05 17:11:44:947 [main] [] ERROR ContextLoader.initWebApplicationContext - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'customEditorConfigurer' defined in class path resource [com/rbos/nucleus/resource/config/BeanFactoryBaseConfiguration.xml]: Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.util.LinkedHashMap] to required type [java.util.Map] for property 'customEditors'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [com.rbos.util.INetAddressEditor] to required type [java.lang.String] for property 'customEditors[javax.mail.internet.InternetAddress]': no matching editors or conversion strategy found at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:483) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:412) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:383) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:276) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:273) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:179) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:872) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:522) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:359) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:254) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:198) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3843) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4342) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardHost.start(StandardHost.java:719) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:516) at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) at org.apache.catalina.startup.Catalina.start(Catalina.java:578) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413) Caused by: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.util.LinkedHashMap] to required type [java.util.Map] for property 'customEditors'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [com.rbos.util.INetAddressEditor] to required type [java.lang.String] for property 'customEditors[javax.mail.internet.InternetAddress]': no matching editors or conversion strategy found at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:383) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1248) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1011) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:475) ... 28 more Caused by: java.lang.IllegalArgumentException: Cannot convert value of type [com.rbos.util.INetAddressEditor] to required type [java.lang.String] for property 'customEditors[javax.mail.internet.InternetAddress]': no matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:226) at org.springframework.beans.TypeConverterDelegate.convertToTypedMap(TypeConverterDelegate.java:497) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:188) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:132) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:378) ... 32 more  ---  **Affects:** 3.0 M3  **Issue Links:** - #10825 XFire 1.2.6 not compatible with Spring 3.0's CustomEditorConfigurer  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2009-05-20T03:25:44Z","2019-01-11T17:33:00Z"
"","10824","Make it possible to filter the roots when using a PathMathingResourcePatternResolver [SPR-6156]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-6156](https://jira.spring.io/browse/SPR-6156?redirect=false)** and commented  currently Spring core will scan all classpath roots on this line:  ``` Resource[] rootDirResources = getResources(rootDirPath); ```  It is often to exclude certain roots for scanning so we need to make it possible to do so otherwise Spring's component scanner will scan in places it shouldn't   ---  **Affects:** 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-09-27T22:35:07Z","2018-12-26T17:19:15Z"
"","10754","Component scanning feature produces I/O exception attempting to read directories it shouldn't [SPR-6086]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-6086](https://jira.spring.io/browse/SPR-6086?redirect=false)** and commented  For example:  ``` org.springframework.beans.factory.BeanDefinitionStoreException: I/O failure during classpath scanning; nested exception is java.io.IOException: Could not retrieve contents of directory [/home/prvadm/.ssh] ```  IMO the exception should be caught, a debug level message printed and Spring should continue scanning.   ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c5e49fc6dc7a6f065a62eadff3e2c2163f45a850","closed","type: bug,","spring-projects-issues","2009-09-06T22:50:59Z","2012-06-19T03:43:52Z"
"","10389","only the first PropertyPlaceHolderConfigurer is initialized. Others are not [SPR-5719]","**[Gowrishankar V](https://jira.spring.io/secure/ViewProfile.jspa?name=gshanky)** opened **[SPR-5719](https://jira.spring.io/browse/SPR-5719?redirect=false)** and commented  In my webapp I have multiple PPC configured in different context files. The primary context file is initialized through ContextLoaderListener and others are imported into the primary context xml file.  In the primary context file, I have a PPC, which is initializing. Then there are other PPC in context files that are in jars which are initialized through imports. The PPC in those context files are not being initialized. If I remove the PPC from the primary context file, then one of the other PPC is being initialized. From my meddling around the code, it seems like only one PPC would be initialized per Application context, with or without imported context xml files.  Currently I am including all the files though the PPC in my primary context file.  I am wondering if this is a bug or is this how it is supposed to work?  ---  **Affects:** 2.5.6  **Issue Links:** - #11094 Placeholders not resolved when using multiple PropertyPlaceHolderConfigurers (_**""duplicates""**_) - #11094 Placeholders not resolved when using multiple PropertyPlaceHolderConfigurers  3 votes, 4 watchers","closed","in: core,","spring-projects-issues","2009-05-06T08:35:57Z","2019-01-12T16:50:25Z"
"","10333","Request: lazy-init or 'only-if-needed' option for stereotype @Component source-annotated component-scan definitions [SPR-5662]","**[Gordon Mohr](https://jira.spring.io/secure/ViewProfile.jspa?name=gojomo)** opened **[SPR-5662](https://jira.spring.io/browse/SPR-5662?redirect=false)** and commented  I'd like to be able to mark `@Component-annotated` classes to be instantiated and available for autowiring only **if** necessary to fill any required properties.  That is, even if 'singleton' and discovered by the package-scan, they aren't instantiated until needed. ('prototype' doesn't work because I still want only one instance if referenced twice.)  A 'lazy-init' flag for the `@Component` annotation would just about do the trick. Even more convenient would be some sort of 'only-if-needed' flag, which would also prevent the presence of the scan-discovered bean-definition from interfering (by being the second of the same type) with any definition explicitly included being used to satisfy a needs-one autowire-by-type situation. (Another idea along the same lines: allow specification of a recommended name for source-discovered `@Components`, so they could be autowired by name, too.)  (My initial request for this sort of functionality in the forums: http://forum.springsource.org/showthread.php?p=235027#post235027 )  ---  **Affects:** 2.5.6  **Issue Links:** - #10300 Support use of `@Primary` and `@Lazy` during component-scanning","closed","type: enhancement,","spring-projects-issues","2009-04-08T09:54:09Z","2019-01-13T08:00:13Z"
"","9903","HibernateTransactionManager.prepareForCommit should only disable flush when in a new transaction [SPR-5229]","**[Gordon Cosgrave](https://jira.spring.io/secure/ViewProfile.jspa?name=mrgcos)** opened **[SPR-5229](https://jira.spring.io/browse/SPR-5229?redirect=false)** and commented  HibernateTransactionManager.prepareForCommit  disables flushing when earlyFlushBeforeCommit is set to true regardless of whether the current transaction status started the transaction.  Flushing should only be disabled if the transaction is about to commit.  The finally block in prepareForCommit should be: finally {  if(status.isNewTransaction()) {      session.setFlushMode(FlushMode.NEVER);  } }    ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-10-22T04:12:00Z","2012-06-19T03:47:10Z"
"","10345","Spring 3 library omits org.springframework.expression [SPR-5675]","**[Glyn Normington](https://jira.spring.io/secure/ViewProfile.jspa?name=glyn)** opened **[SPR-5675](https://jira.spring.io/browse/SPR-5675?redirect=false)** and commented  The .libd file for Spring framework omits the Spring expressions bundle.  This breaks dm Server applications that import-library Spring and expect to access all the bundles of the Spring framework.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6fc16d1e3352b05578e696a8a8da54f827ef82f8","closed","in: core,","spring-projects-issues","2009-04-14T00:00:16Z","2012-06-19T03:47:30Z"
"","10773","Portlet's AbstractFormController.referenceData() JavaDoc improvement [SPR-6105]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-6105](https://jira.spring.io/browse/SPR-6105?redirect=false)** and commented  Hello, the JavaDoc for Spring Portlet framework's AbstractFormController.referenceData() method[1] should state whether the reference data Map returned by this method gets placed in the PortletSession.PORTLET_SCOPE or PortletSession.APPLICATION_SCOPE.  Possibly/Probably this information should also go into the JavaDoc subclasses of AbstractFormController where this method is overridden.  Reason: In upgrading from generic coding to using the Spring Portlet framework, developer needs to know the scope of the data placed in the Map returned by this method.  (Offhand, it appears to be APPLICATION_SCOPE but I'm unsure.)  [1] http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/web/portlet/mvc/AbstractFormController.html#referenceData(javax.portlet.PortletRequest,%20java.lang.Object,%20org.springframework.validation.Errors)   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-09-13T03:24:55Z","2012-06-19T09:36:23Z"
"","10783","Difference in EL processing between XML style and annotations style [SPR-6115]","**[Gildas Cuisinier](https://jira.spring.io/secure/ViewProfile.jspa?name=hikage)** opened **[SPR-6115](https://jira.spring.io/browse/SPR-6115?redirect=false)** and commented  When used with prototype scope  the EL are processed differently on the second call if they are set with `@Value` annotation, or by XML.  View forum post.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=77244  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/160521074bee4219680e3ead6313fca1c4a0108c","closed","in: core,","spring-projects-issues","2009-09-15T23:16:38Z","2012-06-19T03:44:15Z"
"","10559","Suggestion for Deadlock-Retrying in @Transactional annotation [SPR-5890]","**[Gert-Jan Schouten](https://jira.spring.io/secure/ViewProfile.jspa?name=gertjan_schouten)** opened **[SPR-5890](https://jira.spring.io/browse/SPR-5890?redirect=false)** and commented  If you use locking on databases, you always have to provide for the situation that your transaction rolls backe because of being selected as a deadlock victim.  The usual behaviour to deal with this situation is to retry some time later (e.g. 1s).  I think this is something that could be handled by a framework like Spring. If the method that has the transaction facade does not have any side effects (like modifying the input parameters or modifying some entity that is not part of the transaction), a proxy (or perhaps the TransactionInterceptor) could just call the same method again and again - until the transaction succeeds, rolls back because of another reason than deadlock victim, or a configurable timeout elapses.   ---  **Affects:** 1.2 RC2  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-07-02T08:07:49Z","2012-06-19T09:36:18Z"
"","9883","util:constant can't read static inner enums [SPR-5210]","**[Gert-Jan Schouten](https://jira.spring.io/secure/ViewProfile.jspa?name=gertjan_schouten)** opened **[SPR-5210](https://jira.spring.io/browse/SPR-5210?redirect=false)** and commented  If I have this code:  public enum AccountLevel {      NORMAL, MODERATOR, ADMINISTRATOR  }  then I can put this in my spring config:    Everything works fine. But if I have this code:  public class Account {      public enum Level {              NORMAL, MODERATOR, ADMINISTRATOR     }  }  then I cannot do this:    I have been thinking about this and came to the conclusion that this is impossible, because my inner enum is not static: You need an instance of Account, before you can have an Account.Level (just like inner classed), so I changed my code and made the enum static:  public class Account {      public static enum Level {              NORMAL, MODERATOR, ADMINISTRATOR     }  }  But this:    still does not work! Why? It should work, I think...   ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb1631f458a822fa4da7b51ea44388344bc55d6c","closed","type: enhancement,","spring-projects-issues","2008-10-11T11:18:38Z","2012-06-19T03:46:50Z"
"","10596","FormTag not clearing attributes [SPR-5927]","**[George Baxter](https://jira.spring.io/secure/ViewProfile.jspa?name=gjbaxter)** opened **[SPR-5927](https://jira.spring.io/browse/SPR-5927?redirect=false)** and commented  FormTag needs to null out or otherwise clear its attributes in doFinally clause.  Tomcat (and other containers) can reuse the tag object, even on subsequent pages and a null action is different than a 'previously used' action   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/afd6fe90480344ddc4992a43721074f614803084  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2009-07-14T09:00:29Z","2012-06-19T03:43:58Z"
"","9917","Support loading WebApplicationContexts with the TestContext Framework [SPR-5243]","**[Geoff Metselaar](https://jira.spring.io/secure/ViewProfile.jspa?name=geoffm)** opened **[SPR-5243](https://jira.spring.io/browse/SPR-5243?redirect=false)** and commented  #### Status Quo  When the _Spring TestContext Framework_ was introduced in Spring 2.5, it supported loading an `ApplicationContext` from either XML or Java Properties files. Spring 3.1 introduced support for loading an `ApplicationContext` from _annotated classes_ (e.g., `@Configuration` classes).  The underlying implementation for the existing support creates a `GenericApplicationContext`; however, a `GenericApplicationContext` is not suitable for testing a web application since a web application relies on an implementation of `WebApplicationContext` (_WAC_).  In order to integration test Spring-powered web applications the Spring TestContext Framework needs to be able to load a `WebApplicationContext`, either from XML configuration files or from annotated classes. Furthermore, the `ServletContext` used by such a WAC needs to be configurable within tests, and common context hierarchies must be supported (e.g., _root_ and _dispatcher_ WACs in a parent-child relationship).  ###### Original Author's Description  While writing some MVC integration tests, context errors were thrown when loading an `XmlViewResolver` and when attempting to recover command object property validation errors using the `RequestContext`. The reason is that each of these requires access to a `WebApplicationContext`, not a  `GenericApplicationContext` which the TestContext framework makes available by default.  ---  #### Goals  - Introduce an annotation that allows developers to configure a mock `ServletContext` from within integration tests. - Introduce `SmartContextLoaders` that can load `WebApplicationContexts` from either XML or annotated classes, using the configured mock `ServletContext`. - Provide a means for developers to access the mocks for the `HttpServletRequest` and `HttpServletResponse` objects and ensure that thread-local state in Spring MVC is kept in sync with these mock objects. - Ensure that metadata used to create the `WebApplicationContext` (e.g., `ServletContext` path) is used to define the unique application context cache key.  ---  #### Deliverables  1. [x] Implement a `SmartContextLoader` that loads a `WebApplicationContext` from XML resource locations defined via `@ContextConfiguration` 2. [x] Implement a `SmartContextLoader` that loads a `WebApplicationContext` from annotated classes defined via `@ContextConfiguration` 3. [x] Introduce a new class-level `@WebAppConfiguration` annotation that allows for configuration of the `ServletContext` base resource path, using Spring's `Resource` abstraction    - see `ContextMockMvcBuilder.configureWebAppRootDir()` from `spring-test-mvc`    - the base path must be filesystem-based by default, in contrast to the `locations` attribute in `@ContextConfiguration` which is classpath-based    - the base path should default to _""src/main/webapp""_, which follows the Maven convention    - determine if `@WebAppConfiguration` should be _inherited_ (i.e., annotated with `@Inherited`), keeping in mind that the top-level context in an EAR would not be a WAC 4. [x] Ensure that the two newly introduced `SmartContextLoader` implementations create a `MockServletContext` on demand (i.e., if a root WAC), when the WAC is loaded, and set the `MockServletContext` as the `ServletContext` in the application contexts that they load 5. [x] Set a loaded context as the `ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE` in the `MockServletContext` when context hierarchies are not used 6. [x] Introduce a subclass of `MergedContextConfiguration` specific for web apps (e.g., `WebMergedContextConfiguration`) that stores the `ServletContext` base path    - the subclass of MCC must override `equals()` and `hashCode()` to include the metadata that uniquely identifies the resulting WAC for proper context caching    - the `buildMergedContextConfiguration()` method in `ContextLoaderUtils` will likely need to instantiate either a standard `MergedContextConfiguration` or a `WebMergedContextConfiguration` 7. [x] Set up _default_ thread local state via `RequestContextHolder` before each test method by implementing a new Servlet-specific `TestExecutionListener`    - by using the `MockServletContext` already present in the WAC and by creating a `MockHttpServletRequest`, `MockHttpServletResponse`, and `ServletWebRequest` which will be set in the `RequestContextHolder` 8. [x] Ensure that the `MockServletContext`, `MockHttpServletRequest`, `MockHttpServletResponse`, and `ServletWebRequest` can be injected into the test instance (e.g., via `@Autowired`) 9. [x] Clean up thread locals after each test method 10. [x] Ensure that the Servlet-specific `TestExecutionListener` is configured as a default `TestExecutionListener` _before_ `DependencyInjectionTestExecutionListener` 11. [x] Introduce a new web-specific `DelegatingSmartContextLoader` to incorporate support for the `SmartContextLoader` types introduced in this issue and ensure that the correct delegating loader is picked based on the presence or absence of `@WebAppConfiguration` 12. [x] Consider being able to accommodate a future request to support mocks for Spring Portlet MVC  ---  #### Pseudocode Examples  ---  ##### Root WAC with Injected Mocks  ``` @WebAppConfiguration // path defaults to ""file:src/main/webapp"" @ContextConfiguration(""file:src/main/webapp/WEB-INF/applicationContext.xml"") public class RootWacTests {      @Autowired     private WebApplicationContext wac;      @Autowired     private MockServletContext servletContext;      @Autowired     private MockHttpServletRequest request;      @Autowired     private MockHttpServletResponse response;      @Autowired     private MockHttpSession session;      @Autowired     private ServletWebRequest webRequest;      //... } ```  ---  #### Further Resources  ##### Blogs and Custom Solutions  - http://codinghood.blogspot.com/2009/01/spring-integration-testing-for-web.html - http://jamesfarrell129.wordpress.com/2011/04/20/integration-testing-for-spring-portlet-mvc/ - http://tedyoung.me/2011/02/14/spring-mvc-integration-testing-controllers/ - http://code.google.com/p/ted-young/source/browse/trunk/blog.spring-mvc-integration-testing/  ##### Forum Discussions  - http://forum.springframework.org/showthread.php?p=210177#post210177 - http://forum.springframework.org/showthread.php?p=210181 - http://forum.springsource.org/showthread.php?t=76744  ---  **Affects:** 2.5 final, 3.0 GA, 3.1 GA  **Attachments:** - [web_listener_loader.zip](https://jira.spring.io/secure/attachment/17654/web_listener_loader.zip) (_6.70 kB_)  **Issue Links:** - #10284 Provide support for context hierarchies in the TestContext Framework (_**""depends on""**_) - #14496 Support WebApplicationContext hierarchies in the TestContext Framework (_**""is depended on by""**_) - #9265 Provide support for session/request scoped beans for integration testing (_**""is depended on by""**_) - #14497 Document WebApplicationContext support in the TestContext Framework (_**""is depended on by""**_) - #10519 Provide a ContextLoader for WebApplicationContext (_**""is duplicated by""**_) - #10072 Provide test ContextLoader for `@ContextConfiguration` that creates a WebApplicationContext (_**""is duplicated by""**_) - #9436 Make Spring ContextTest annotation support  WebApplicationContext (_**""is duplicated by""**_) - #14492 Add first class support for testing Spring MVC applications - #14588 Introduce bootstrap strategy in the TestContext framework - #13849 Release 1.0 spring-test-mvc - #14432 ApplicationContext fails to load in tests using Java-based config and WebMvcConfigurationSupport (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/461d99af29e8c358ff80ff9ff58a8ea63fe7b670, https://github.com/spring-projects/spring-framework/commit/a281bdbfc528187dcd1214be2d2a97e8482a8a23, https://github.com/spring-projects/spring-framework/commit/90c5f226b62503b492167bcd87361842f73d18b1, https://github.com/spring-projects/spring-framework/commit/9937f840d5dbd2be819f45f5101dd6486aa382f6, https://github.com/spring-projects/spring-framework/commit/a73280ccc8a18e0048351a3f08a51c2b13ec3b45, https://github.com/spring-projects/spring-framework/commit/21ebbb9c028c5ac05f9d541d87b53b08bb021818  30 votes, 29 watchers","closed","has: votes-jira,","spring-projects-issues","2008-10-27T22:54:49Z","2019-01-13T08:02:15Z"
"","10101","Can't use read-only of transaction in DataSourceTransactionManager [SPR-5427]","**[gengjun](https://jira.spring.io/secure/ViewProfile.jspa?name=gengjun)** opened **[SPR-5427](https://jira.spring.io/browse/SPR-5427?redirect=false)** and commented  there is no support in DataSourceTransactionManager to use read-only modal. \ \ \           	     		     	         ---  **Affects:** 2.5.5  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2009-01-21T17:49:15Z","2019-01-12T16:27:27Z"
"","10184","Buggy reuse of list in prototype, when using shorthand definition in xml. [SPR-5512]","**[Geir H. Pettersen](https://jira.spring.io/secure/ViewProfile.jspa?name=geir@trank.no)** opened **[SPR-5512](https://jira.spring.io/browse/SPR-5512?redirect=false)** and commented  If you are working with a prototype bean that has a list setter, the beanfactory is reusing the list if you use a shorthand creation of the list.  This results in a strange behavior. Any changes you make to the list in a bean created from the prototype will appear on all new versions of the prototype.  Example:  ``` public class SomePrototype {    private List aList = new ArrayList();     public List getAList() {       return aList;    }     public void setAList(List aList) {       this.aList = aList;    } } ```  ---  ```                             The one and only             ```  ---  **Affects:** 2.5.6  **Attachments:** - [spring-bug.zip](https://jira.spring.io/secure/attachment/15145/spring-bug.zip) (_2.98 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc1edccc56b70f989661ee8f4887328bdb6fb5da","closed","in: core,","spring-projects-issues","2009-02-20T00:29:57Z","2019-01-13T21:50:37Z"
"","10693","Transactions not rolled back in transactional test using Hibernate [SPR-6024]","**[Gaurav Kohli](https://jira.spring.io/secure/ViewProfile.jspa?name=gauravkohli)** opened **[SPR-6024](https://jira.spring.io/browse/SPR-6024?redirect=false)** and commented  We have a maven project using Spring and Hibernate. We are using transactions in it, but transactions seems to not rolling back .  Attached is the zip of the maven project.   ---  **Affects:** 2.5.6  **Attachments:** - [hibernate-transaction.zip](https://jira.spring.io/secure/attachment/15623/hibernate-transaction.zip) (_5.29 kB_)","closed","status: invalid,","spring-projects-issues","2009-08-18T22:01:43Z","2019-01-12T05:33:11Z"
"","10834","Add request and response headers support in RestTemplate [SPR-6166]","**[Gabriel Axel](https://jira.spring.io/secure/ViewProfile.jspa?name=guznik)** opened **[SPR-6166](https://jira.spring.io/browse/SPR-6166?redirect=false)** and commented  RestTemplate should allow defining request headers in all methods and provide for a way to read the response headers. I suggest adding an MultiValueMap parameter for all the methods which will hold the request headers, for example, in addition to: getForObject(String url, Class\ responseType, String... urlVariables) we will have: getForObject(String url, MultiValueMap headers, Class\ responseType, String... urlVariables)  Also, in order to read the response headers and the HTTP status code I suggest introducing a class which will hold the response status, the response headers and the payload and will be used as the return value of the RestTemplate methods. It should look something like this:  public class RestTemplateResponse\ { public int getStatus() { ... } public Map getHeaders>() { ... } public T getPayload() { ... } }   ---  **Affects:** 3.0 RC1  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-30T01:24:40Z","2018-12-26T16:20:29Z"
"","10659","Add support for iBatis 3 [SPR-5991]","**[Gabriel Axel](https://jira.spring.io/secure/ViewProfile.jspa?name=guznik)** opened **[SPR-5991](https://jira.spring.io/browse/SPR-5991?redirect=false)** and commented  iBatis 3 beta 1 introduced API changes which break the existing Spring support.  ---  **Affects:** 3.0 M3  **Attachments:** - [genius-spring.tar.gz](https://jira.spring.io/secure/attachment/15973/genius-spring.tar.gz) (_18.40 kB_) - [ibatis3_20091206.zip](https://jira.spring.io/secure/attachment/15984/ibatis3_20091206.zip) (_20.88 kB_) - [ibatis3_20091229.zip](https://jira.spring.io/secure/attachment/16051/ibatis3_20091229.zip) (_14.01 kB_) - [ibatis3-test.zip](https://jira.spring.io/secure/attachment/15653/ibatis3-test.zip) (_11.40 kB_) - [IBatisSpring.tar.gz](https://jira.spring.io/secure/attachment/16046/IBatisSpring.tar.gz) (_30.55 kB_) - [IBatisSpring.tar.gz](https://jira.spring.io/secure/attachment/16044/IBatisSpring.tar.gz) (_20.55 kB_) - [IBatisSpring.tar.gz](https://jira.spring.io/secure/attachment/16043/IBatisSpring.tar.gz) (_20.46 kB_) - [MapperFactoryBean_20091229.tar.gz](https://jira.spring.io/secure/attachment/16052/MapperFactoryBean_20091229.tar.gz) (_12.38 kB_) - [MapperFactoryBean_20091229-2.tar.gz](https://jira.spring.io/secure/attachment/16053/MapperFactoryBean_20091229-2.tar.gz) (_12.19 kB_) - [MapperFactoryBean_20100101.tar.gz](https://jira.spring.io/secure/attachment/16059/MapperFactoryBean_20100101.tar.gz) (_12.11 kB_) - [MapperFactoryBean.tar.gz](https://jira.spring.io/secure/attachment/16047/MapperFactoryBean.tar.gz) (_14.76 kB_) - [MybatisSpring_20100605.zip](https://jira.spring.io/secure/attachment/16631/MybatisSpring_20100605.zip) (_21.20 kB_) - [org.springframework.orm.ibatis3-201006100101.tar.gz](https://jira.spring.io/secure/attachment/16679/org.springframework.orm.ibatis3-201006100101.tar.gz) (_15.40 kB_) - [org.springframework.orm.ibatis3-201006100756.tar.gz](https://jira.spring.io/secure/attachment/16680/org.springframework.orm.ibatis3-201006100756.tar.gz) (_15.58 kB_) - [orm-ibatis3-2010-07-24.zip](https://jira.spring.io/secure/attachment/16929/orm-ibatis3-2010-07-24.zip) (_112.64 kB_) - [orm-ibatis3-2010-07-24-2nd.zip](https://jira.spring.io/secure/attachment/16930/orm-ibatis3-2010-07-24-2nd.zip) (_113.34 kB_) - [SqlSessionFactoryBean.java](https://jira.spring.io/secure/attachment/15613/SqlSessionFactoryBean.java) (_1.57 kB_) - [SqlSessionUtils.java](https://jira.spring.io/secure/attachment/16008/SqlSessionUtils.java) (_12.82 kB_)  **Issue Links:** - #10803 Add support for iBatis 3 (_**""is duplicated by""**_) - [DATAJDBC-2](https://jira.spring.io/browse/DATAJDBC-2) Add support for MyBatis 3  50 votes, 55 watchers","closed","has: votes-jira,","spring-projects-issues","2009-08-09T16:36:30Z","2019-01-13T21:49:27Z"
"","10272","Standalone Java application never exits if RmiServiceExporter is used [SPR-5601]","**[Gabor Willner](https://jira.spring.io/secure/ViewProfile.jspa?name=gwillner)** opened **[SPR-5601](https://jira.spring.io/browse/SPR-5601?redirect=false)** and commented  The StartContext class is used in order to start a Spring Context. If I export a bean using RmiServiceExporter it never exits. It hangs after it leaves the scope of the class at runtime. The thread dump shows that it the process DestroyJavaVM is still running.  If I comment out the exporter bean it exits as usual.  ``` public class StartContext {     /**      * Logger instance.      */     private static final Logger LOGGER = Logger.getLogger(StartContext.class);      /**      * Main context file.      */     private static final String CONTEXT_FILE = ""spring-context.xml"";      /**      * Service bean id.      */     private static final String BEAN_ID = ""beanA"";      /**      * Use static methods instead.      */     private StartContext() {         super();     }      /**      * @param args list of arguments.      */     public static void main(final String[] args) {         try {             final ApplicationContext applicationContext = new ClassPathXmlApplicationContext(CONTEXT_FILE);             final BeanA beanA = (BeanA) applicationContext.getBean(BEAN_ID);             LOGGER.debug("">> Engine started."");         } catch (Exception e) {             LOGGER.error(e);             System.exit(1);         } finally {             LOGGER.debug("">> Engine stops."");         }     } } ```  ``` public interface BeanA {     void test(); } ```  ``` public class BeanAImpl implements BeanA {     /**      * Logger instance.      */     private static final Logger LOGGER = Logger.getLogger(BeanAImpl.class);      /**      * {@inheritDoc}      */     @Override     public void test() {         LOGGER.debug(""BeanA.test() called"");     } } ```  ```xml                                                                        ```  ``` 08:45:06,476 INFO  [org.springframework.context.support.ClassPathXmlApplicationContext] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@53ba3d: display name [org.springframework.context.support.ClassPathXmlApplicationContext@53ba3d]; startup date [Wed Mar 18 08:45:06 CET 2009]; root of context hierarchy 08:45:06,538 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [spring-context.xml] 08:45:06,851 INFO  [org.springframework.context.support.ClassPathXmlApplicationContext] Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@53ba3d]: org.springframework.beans.factory.support.DefaultListableBeanFactory@18fd984 08:45:06,851 INFO  [org.springframework.beans.factory.support.DefaultListableBeanFactory] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@18fd984: defining beans [springRegistryRMI,beanA]; root of factory hierarchy 08:45:06,882 INFO  [org.springframework.remoting.rmi.RmiRegistryFactoryBean] Looking for RMI registry at port '1600' 08:45:08,148 INFO  [org.springframework.remoting.rmi.RmiRegistryFactoryBean] Could not detect RMI registry - creating new one 08:45:08,148 DEBUG [test.StartContext] >> Engine started. 08:45:08,148 DEBUG [test.StartContext] >> Engine stops. ```  ``` StartContext [Java Application]	 	test.StartContext at localhost:4424	 		Thread [DestroyJavaVM] (Running)	 	C:\dev\jdk16\bin\javaw.exe (20 Mar 2009 08:55:53) ```    ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=69108  **Attachments:** - [src.zip](https://jira.spring.io/secure/attachment/15246/src.zip) (_3.11 kB_)","closed","status: declined,","spring-projects-issues","2009-03-23T04:09:43Z","2019-01-12T16:27:14Z"
"","10731","BeanUtils.getPropertyDescriptor() returns property descriptor not in array returned by BeanUtils.getPropertyDescriptors [SPR-6063]","**[Fried Hoeben](https://jira.spring.io/secure/ViewProfile.jspa?name=fhoeben)** opened **[SPR-6063](https://jira.spring.io/browse/SPR-6063?redirect=false)** and commented  BeanUtils.getPropertyDescriptor() uses the internal cache of property descriptors maintained by CachedIntrospectionResults. getPropertyDescriptors() returns the property descriptors as known in the BeanInfo.  There can be a difference between the two: if the cache is filled with a GenericTypeAwarePropertyDescriptor the beanInfo's property descriptors are not updated. This happens when the BeanInfo (incorrectly) has a property descriptor referring to a 'bridge method' that does not use all generic type information available. BeanUtils.getPropertyDescriptor() will return the GenericTypeAwarePropertyDescriptor and BeanUtils.getPropertyDescriptors() will not, since the BeanInfo is not aware if the GenericTypeAwarePropertyDescriptor.  I believe BeanUtils.getPropertyDescriptors() should the property descriptors in the CachedIntrospectionResults propertyDescriptorCache.   ---  **Affects:** 2.5.6  **Attachments:** - [BeanUtilsTest.java](https://jira.spring.io/secure/attachment/15669/BeanUtilsTest.java) (_1.57 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01fb1825f561e56f84324f49bad2262505463f59","closed","in: core,","spring-projects-issues","2009-09-01T20:01:43Z","2012-06-19T03:43:12Z"
"","10481","SpringBeanAutowiringInterceptor doesn't work when spring is shared between apps. [SPR-5811]","**[Fredrik Skogberg](https://jira.spring.io/secure/ViewProfile.jspa?name=freskog)** opened **[SPR-5811](https://jira.spring.io/browse/SPR-5811?redirect=false)** and commented  When we tried to share spring between our applications using the shared library (basically the lib folder under the weblogic domain root folder) we ran into an issue where the autowiring would fail if the first EJB calls a second EJB in a different application (both use the SpringBeanAutowiringInterceptor).  More precisely, when the second EJB looks for a cached reference to it's beanRefContext,.xml  it finds the one from the _other_ application. This is because the ContextSingletonBeanFactoryLocator uses defaults to using the ""classpath*:beanRefContext.xml"" as a key to the target instance when wiring. Basically this means that when the second EJB is about to be wired, the wrong beanfactory is used, and the wiring fails.  The way we solved this was to create a new class which extends the Original SpringBeanAutowiringInterceptor like so :  public class NewSpringAutowiringInterceptor extends SpringBeanAutowiringInterceptor {      protected BeanFactoryLocator getBeanFactoryLocator(Object target) {         return EJBContextSingletonBeanFactoryLocator.getEJBInstance(target);     }  }  and the implementation of the EJBContextSingletonBeanFactoryLocator looks like :   ---  **Affects:** 2.5.6","closed","status: bulk-closed,","spring-projects-issues","2009-06-07T21:58:11Z","2019-01-12T02:37:40Z"
"","10812","@ResponseStatus annotation is ignored in an @Controller redirect (RedirectView) [SPR-6144]","**[Flyin Wolf](https://jira.spring.io/secure/ViewProfile.jspa?name=flyinwolf)** opened **[SPR-6144](https://jira.spring.io/browse/SPR-6144?redirect=false)** and commented  In a controller that returns a RedirectView or ""redirect:someViewName"" the `@ResponseStatus` annotation is ignored.  RedirectView always returns a hard coded 303 (or 302) in spite of the given value in the `@ResponseStatus` annotation.  i.e. @  ``` @Controller @RequestMapping(value = ""/games"") public class GameController { ...   @RequestMapping(method = RequestMethod.POST)   @ResponseStatus( value=HttpStatus.CREATED )    public View createGame( @ModelAttribute(""gameForm"") GameForm gameForm ) {     return getRedirectViewForCreate(); // ""redirect:somelocation.html"";   } ... ```  Got:  ``` $ curl -i -d name=""game1"" http://localhost:8080/rook2/rest/games/form.html HTTP/1.1 302 Moved Temporarily Server: Apache-Coyote/1.1 Location: http://localhost:8080/rest/games/1.html Content-Language: en-US Content-Length: 0 Date: Wed, 23 Sep 2009 04:03:15 GMT ```  Expected:  ``` $ curl -i -d name=""game2"" http://localhost:8080/rook2/rest/games/form.html HTTP/1.1 201 Created Server: Apache-Coyote/1.1 Location: /rook2/rest/games/2.html Content-Language: en-US Content-Length: 0 Date: Wed, 23 Sep 2009 02:44:55 GMT ```  I notice this could also maybe solve - http://jira.springframework.org/browse/SPR-5468  RedirectView.sendRedirect(...) could look something like this:  ``` protected void sendRedirect( 			HttpServletRequest request, HttpServletResponse response, String targetUrl, boolean http10Compatible) 			throws IOException { 		 		if (http10Compatible) { 			// Always send status code 302. 			response.sendRedirect(response.encodeRedirectURL(targetUrl)); 		} 		else if ( getHttpStatusCode() == null ) { 			// Correct HTTP status code is 303, in particular for POST requests. 			response.setStatus(303); 			response.setHeader(""Location"", response.encodeRedirectURL(targetUrl)); 		} else { 			if ( !isHttpStatusCodePreviouslySet() ) { // whatever... main thing is do NOT set it if the @ResponseStatus sets the status code 				response.setStatus( getHttpStatusCode() ); 			} 			response.setHeader(""Location"", response.encodeRedirectURL(targetUrl)); 		}  	} ```  Extending RedirectView works for me, but of course ""redirect:something.html"" would not work without also changing the class instantiated when ""redirect:"" is used.  But again, as is, it does give unexpected behaviour.  ---  **Affects:** 3.0 M4  **Issue Links:** - #17789 Support `@ResponseStatus` with RedirectView - #10141 Modify RedirectView to allow 301 Permanent Redirects  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b12503c477a99eaddb25710a8b3a88d00e1c552","closed","type: enhancement,","spring-projects-issues","2009-09-22T15:23:51Z","2019-01-13T07:58:20Z"
"","10496","Velocity fails when using a singletonMap as the model for template processing [SPR-5826]","**[Florent Robineau](https://jira.spring.io/secure/ViewProfile.jspa?name=robineau)** opened **[SPR-5826](https://jira.spring.io/browse/SPR-5826?redirect=false)** and commented  Calls to VelocityEngineUtils.mergeTemplateIntoString using a Collections.singletonMap as the model fail with the following exception:  java.lang.UnsupportedOperationException at java.util.AbstractMap.put(AbstractMap.java:186) at org.apache.velocity.VelocityContext.internalPut(VelocityContext.java:132) at org.apache.velocity.context.AbstractContext.put(AbstractContext.java:164) at org.apache.velocity.context.InternalContextAdapterImpl.put(InternalContextAdapterImpl.java:269) at org.apache.velocity.runtime.parser.node.ASTSetDirective.render(ASTSetDirective.java:213) at org.apache.velocity.runtime.parser.node.SimpleNode.render(SimpleNode.java:336) at org.apache.velocity.Template.merge(Template.java:328) at org.apache.velocity.Template.merge(Template.java:235) at org.apache.velocity.app.VelocityEngine.mergeTemplate(VelocityEngine.java:381) at org.apache.velocity.app.VelocityEngine.mergeTemplate(VelocityEngine.java:345) at org.springframework.ui.velocity.VelocityEngineUtils.mergeTemplate(VelocityEngineUtils.java:58) at org.springframework.ui.velocity.VelocityEngineUtils.mergeTemplateIntoString(VelocityEngineUtils.java:122) ...  Turns out that internally, Velocity tries to modify the map by calling methods that are not supported by the map implementation returned by Collections.singletonMap.  I don't know if this should be considered a Spring issue, a Velocity issue, or a non-issue (but nothing in either Spring's or Velocity's docs warn against using immutable maps for the model). Possible fixes: - On Spring's side, create a new map containing the old map and pass it as the model, i.e. use ""VelocityContext velocityContext = new VelocityContext(new HashMap(model));"" in VelocityEngineUtils - Same thing, but on Velocity's side, when creating the VelocityContext - Leave to the user the responsibility to pass a mutable map, but mention it explicitly in the doc  What do you think?   ---  **Affects:** 2.5.6","closed","status: invalid,","spring-projects-issues","2009-06-14T21:48:09Z","2019-01-12T05:33:28Z"
"","10435","@RequestBody Annotation Not Extracting Content-Type [SPR-5765]","**[Felix](https://jira.spring.io/secure/ViewProfile.jspa?name=felixleit)** opened **[SPR-5765](https://jira.spring.io/browse/SPR-5765?redirect=false)** and commented  The `@RequestBody` annotation is throwing a ""java.lang.IllegalStateException: Cannot extract response: no Content-Type found"" for every request.  I have verified that the request header contains a Content-Type.  I found another reference to this issue here: http://blog.springsource.com/2009/05/06/spring-framework-30-m3-released/#comment-166449.  ---  **Affects:** 3.0 M3  **Issue Links:** - #10439 HttpHeaders becomes case-sensitive without Commons Collections on the classpath","closed","type: bug,","spring-projects-issues","2009-05-15T16:02:50Z","2019-01-11T17:34:16Z"
"","10053","MarshallingView should override AbstractView instead of AbstractUrlBasedView [SPR-5380]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-5380](https://jira.spring.io/browse/SPR-5380?redirect=false)** and commented  It appears to me that MarshallingView doesn't use the url property at all. Being url management the only addition that AbstractUrlBasedView intoduces over AbstractView, I think that MarshallingView shoul really inherit from the latter, thus sparing the user from having to set a dummy value for the url, which is required.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e863f9a3715cd2a6cc20c764c3ded1ad4f8bffc9","closed","type: enhancement,","spring-projects-issues","2009-01-01T01:00:19Z","2012-06-19T03:46:42Z"
"","10566","HessianException is not converted to RemoteAccessConnection on HTTP 400 [SPR-5897]","**[Fabian Dankof](https://jira.spring.io/secure/ViewProfile.jspa?name=fdankof)** opened **[SPR-5897](https://jira.spring.io/browse/SPR-5897?redirect=false)** and commented  HessianException (and subtypes) is not converted to a RemoteAccessConnection if the server responds with an HTTP 400 error.  In this case, a HessianConnectionException is thrown. It is encapsulated in an InvocationTargetException but because of missing code, HessianClientInterceptor doesn't handle it and just throws the target exception.  I'd suggest the following:  ``` catch (InvocationTargetException ex) { 			if (ex.getTargetException() instanceof HessianRuntimeException) { 				HessianRuntimeException hre = (HessianRuntimeException) ex.getTargetException(); 				Throwable rootCause = (hre.getRootCause() != null ? hre.getRootCause() : hre); 				throw convertHessianAccessException(rootCause); 			} 			else if (ex.getTargetException() instanceof UndeclaredThrowableException) { 				UndeclaredThrowableException utex = (UndeclaredThrowableException) ex.getTargetException(); 				throw convertHessianAccessException(utex.getUndeclaredThrowable()); 			} else if (ex.getTargetException() instanceof HessianException) {                                 HessianException hex = (HessianRuntimeException) ex.getTargetException();                                                                 // handle / convert HessianException here !!!!!                                                         } 			throw ex.getTargetException(); 		} ```    ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64bf3b74b5c4eba445b6d283022aa4a84b457789","closed","type: enhancement,","spring-projects-issues","2009-07-05T23:54:08Z","2012-06-19T03:43:35Z"
"","10441","SimpleJaxWsServiceExporter on Weblogic 10.3 cause ""IllegalArgumentException: Cannot create URL for this address"" [SPR-5771]","**[F. Daniel Parra VizcaÃ­no](https://jira.spring.io/secure/ViewProfile.jspa?name=kdnp)** opened **[SPR-5771](https://jira.spring.io/browse/SPR-5771?redirect=false)** and commented  When using SimpleJaxWsServiceExporter into a .war application deployed in Weblogic, it never can start-up due to the following exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter#0' defined in ServletContext resource [/WEB-INF/webmvc-config.xml]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Cannot create URL for this address /MyService. [........] java.lang.IllegalArgumentException: Cannot create URL for this address /MyService at weblogic.wsee.jaxws.spi.WLSEndpoint.publish(WLSEndpoint.java:133) at org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter.publishEndpoint(SimpleJaxWsServiceExporter.java:67) at org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter.publishEndpoints(AbstractJaxWsServiceExporter.java:125) at org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter.afterPropertiesSet(AbstractJaxWsServiceExporter.java:104) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory .java:1369) Truncated. see log file for complete stacktrace  The problem is that the Weblogic JAX-WS implementation that is being called by SimpleJaxWsServiceExporter to publish the service doesn't accept URIs without a trailing slash '/'.  I have found out that patching the following method in SimpleJaxWsServiceExporter by adding the required slash character enables the webservice publication:      protected void publishEndpoint(Endpoint endpoint, WebService annotation) {     	String fullAddress = this.baseAddress + annotation.serviceName() + '/';   // Added slash for Weblogic 10.3     	endpoint.publish(fullAddress);     }  Indeed, I'm not sure is this patch is appliable for different application servers that Weblogic 10.3   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1f1717d03f390d35537816f7d9a7734b3045aee","closed","type: bug,","spring-projects-issues","2009-05-19T03:20:19Z","2012-06-19T03:42:42Z"
"","10192","AnnotationDrivenBeanDefinitionParser in spring-dao-2.0-m4.jar which is a maven dependency to spring-hibernate3 version 2.0-m4 contains reference to removed NamespaceHandlerUtils class [SPR-5521]","**[Evangelos Parchas](https://jira.spring.io/secure/ViewProfile.jspa?name=eparchas)** opened **[SPR-5521](https://jira.spring.io/browse/SPR-5521?redirect=false)** and commented  When running a Spring application using annotation driven transactions the following exception is produced. There seems to be an issue with the maven dependencies since in the classpath there are two versions of the AnnotationDrivenBeanDefinitionParser, one from spring-tx and one from spring-dao. The later is using the NamespaceHandlerUtils class which I believe is removed from the source tree.  java.lang.NoClassDefFoundError: org/springframework/aop/config/NamespaceHandlerUtils org.springframework.transaction.config.AnnotationDrivenBeanDefinitionParser.parse(AnnotationDrivenBeanDefinitionParser.java:45) org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69) org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1297) org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1287) org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135) org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92) org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507) org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398) org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342) org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310) org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149) org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:212) org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:113) org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:80) org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123) org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:422) org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352) org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:93) sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) java.lang.reflect.Constructor.newInstance(Constructor.java:494) org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100) org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87) org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:248) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:925) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:835) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) java.security.AccessController.doPrivileged(Native Method) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429) org.springframework.beans.factory.access.SingletonBeanFactoryLocator.initializeDefinition(SingletonBeanFactoryLocator.java:466) org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:384) net.velti.sbm.integration.xmlWeb.SubscriptionManagerServiceFactory.getBeanFactoryReference(SubscriptionManagerServiceFactory.java:25) net.velti.sbm.integration.xmlWeb.SubscriptionManagerServiceFactory.getSubscriptionManagerService(SubscriptionManagerServiceFactory.java:32) net.velti.sbm.integration.taglib.CheckSubscriptionTag.doStartTag(CheckSubscriptionTag.java:35) org.apache.jsp.checkSubscription_jsp._jspx_meth_sbm_005fcheckSubscription_005f0(checkSubscription_jsp.java:100) org.apache.jsp.checkSubscription_jsp._jspService(checkSubscription_jsp.java:65) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:98) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:331) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:329) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)   ---  **Affects:** 2.5.6","closed","in: data,","spring-projects-issues","2009-02-23T21:30:30Z","2019-01-11T17:01:33Z"
"","10820","InstrumentableClassLoader interface changed in GlassFish v3 [SPR-6152]","**[eshock](https://jira.spring.io/secure/ViewProfile.jspa?name=eshock)** opened **[SPR-6152](https://jira.spring.io/browse/SPR-6152?redirect=false)** and commented  com.sun.enterprise.loader.InstrumentableClassLoader is changed to org.glassfish.api.deployment.InstrumentableClassLoader in GlassFish v3   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77f07da49d15c3331f254977fc35527b7f6d1265","closed","type: enhancement,","spring-projects-issues","2009-09-25T23:39:58Z","2012-06-19T03:44:00Z"
"","10191","Execute all test methods in a class within the same transaction [SPR-5520]","**[Eric Jain](https://jira.spring.io/secure/ViewProfile.jspa?name=ejain)** opened **[SPR-5520](https://jira.spring.io/browse/SPR-5520?redirect=false)** and commented  Being able to configure that all test methods in a class should be run in the same transaction would be useful for people using TestNG (which supports test method dependencies) to write functional tests.  This feature could also be useful in JUnit Jupiter when using `@TestInstance(PER_CLASS)` or the planned support for [_scenario tests_](https://github.com/junit-team/junit5/issues/48).  ---  **Affects:** 2.5.6  **Issue Links:** - #21093 TestEntityManager can't be configured in `@BeforeAll` method in test class with `@TestInstance`(PER_CLASS) in JUnit Jupiter (_**""is duplicated by""**_) - #16024 Support `@Transactional` on TestNG `@BeforeClass` methods in the TestContext framework  1 votes, 1 watchers","open","type: enhancement,","spring-projects-issues","2009-02-23T08:39:28Z","2020-12-31T11:37:30Z"
"","10136","Can bind to generic attribute but not generic parameter [SPR-5463]","**[Eric Jain](https://jira.spring.io/secure/ViewProfile.jspa?name=ejain)** opened **[SPR-5463](https://jira.spring.io/browse/SPR-5463?redirect=false)** and commented  In this example, Spring MVC is able to use generics to create a list of Foo items (assuming a FooEditor class is registered):  ``` public String processSubmit(@ModelAttribute(""items"") FooListHolder items) {     ... }  public static class FooListHolder {     public void setItems(List items) { ... }     public List getItems() { ... }     ... } ```  But if we use a generic ListHolder class, Spring no longer attempts to convert Strings to Foo objects:  ``` public String processSubmit(@ModelAttribute(""items"") ListHolder items) {     ... }  public static class ListHolder {     public void setItems(List items) { ... }     public List getItems() { ... }     ... } ```  Not sure if this is due to a limitation in Java itself? Note that the ListHolder class used in this example that is a workaround for the following code, which doesn't appear to be supported in Spring MVC...  ``` public String processSubmit(@ModelAttribute(""items"") Foo[] items) {     ... } ```    ---  **Affects:** 2.5.6  1 votes, 1 watchers","closed","in: web,","spring-projects-issues","2009-02-04T10:36:16Z","2019-01-11T15:46:14Z"
"","10653","Add WindowState analog of PortletModeParameterHandlerMapping [SPR-5985]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-5985](https://jira.spring.io/browse/SPR-5985?redirect=false)** and commented  An analog of the PortletModeParameterHandlerMapping but using the portlet's WindowState instead would be very handy. It looks like the exact logic from PortletModeParameterHandlerMapping can be used by just simply replacing all the PortletMode references with WindowState references.   ---  **Attachments:** - [WindowStateParameterHandlerMapping.java](https://jira.spring.io/secure/attachment/15593/WindowStateParameterHandlerMapping.java) (_9.22 kB_)","closed","type: enhancement,","spring-projects-issues","2009-08-06T02:57:12Z","2012-06-19T09:36:23Z"
"","10342","TransactionSynchronizationUtils.unwrapResourceIfNecessary() does not unwrap scoped SessionFactory [SPR-5671]","**[Eric Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=sprig)** opened **[SPR-5671](https://jira.spring.io/browse/SPR-5671?redirect=false)** and commented  Like so many before me, it all started with looking for a way to use Spring with Hibernate and multiple SessionFactories (multiple databases, each with different schema).  I Googled and found many discussions dating from around 2004 to 2007.  The solution I opted for is outlined in the thread below - it involves creating a custom scope for a single SessionFactory proxy that delegates to the appropriate SessionFactory implementation based on a ThreadLocal variable.  http://forum.springsource.org/showthread.php?t=64382  The initial implementation worked fine for months, until for testing purposes we reduced the size of our database connection pools to 1.  This exposed the bug TransactionSynchronizationUtils.unwrapResourceIfNecessary() is not unwrapping custom-scoped SessionFactories (because it does not implement InfrastructureProxy) before storing/fetching the Hibernate Session.  TransactionInterceptor stores the Hibernate Session using the custom-scope SessionFactory proxy:  [code] Thread [main] (Suspended (breakpoint at line 438 in HibernateTransactionManager))	 HibernateTransactionManager.doGetTransaction() line: 438	 HibernateTransactionManager(AbstractPlatformTransactionManager).getTransaction(TransactionDefinition) line: 341	 TransactionInterceptor(TransactionAspectSupport).createTransactionIfNecessary(TransactionAttribute, String) line: 263	 TransactionInterceptor.invoke(MethodInvocation) line: 101 ... [/code]  However, Hibernate SessionFactoryImpl (via SpringSessionContext) looks for an existing session using itself - the real SessionFactory implementation.  Therefore, it fails to find the Session created by TransactionInterceptor  [code] Thread [main] (Suspended (breakpoint at line 139 in TransactionSynchronizationManager))	 TransactionSynchronizationManager.getResource(Object) line: 139	 SessionFactoryUtils.doGetSession(SessionFactory, Interceptor, SQLExceptionTranslator, boolean) line: 285	 SessionFactoryUtils.doGetSession(SessionFactory, boolean) line: 258	 SpringSessionContext.currentSession() line: 60	 SessionFactoryImpl.getCurrentSession() line: 544 ... [/code]  Clearly, this is because TransactionInterceptor and SpringSessionContext are using different SessionFactory objects as keys in TransactionSynchronizationmanager.resources line: 82.  The need to unwrap certain proxied objects before using them as keys in a map was forseen - hence the use of TransactionSyncrhonizationUtils.unwrapResourceIfNecessary() line: 57.  It seems to me that this function should be expanded to include scoped AOP proxies.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b962e7730f6f188ee8e4a0bf98bd98b4980cf75  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2009-04-13T11:56:55Z","2012-06-19T03:46:51Z"
"","9989","AnnotationTransactionAttributeSource : the cache takes a lot of memory [SPR-5316]","**[Eric Chaplet](https://jira.spring.io/secure/ViewProfile.jspa?name=echaplet)** opened **[SPR-5316](https://jira.spring.io/browse/SPR-5316?redirect=false)** and commented  i've just run MemoryAnalyser on my project and i see that AnnotationTransactionAttributeSource takes 16 Mo on a total of 78 Mo , which represent 20 % of all the memory of the application...  here is an extract of MemoryAnalyser :  org.springframework.transaction.annotation.Annotat ionTransactionAttributeSource @ 0x8286c70 => Retained Heap = 15 994 664 java.util.concurrent.ConcurrentHashMap @ 0x82b0788 => => Retained Heap = 15 994 456  it seems to be ""attributeCache""...  Is it possible to downsize the consumption of this class ?  Our applications aren't all installed on servers with a lot of memory...  Thanks for your help.  Forum link : http://forum.springframework.org/showthread.php?p=214584#post214584   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-11-24T02:55:23Z","2012-06-19T09:36:27Z"
"","10593","REOPENED -PathVariable mappings are greedy over hard coded mappings [SPR-5924]","**[Eric Bottard](https://jira.spring.io/secure/ViewProfile.jspa?name=eric.bottard)** opened **[SPR-5924](https://jira.spring.io/browse/SPR-5924?redirect=false)** and commented  Hard coded request mapping values should take precedence over path variables.  Wild card patterns in a path are currently inferior to explicit values.  Path variables should be applied after explicit paths and before wild cards.  For example:  `@RequestMapping`(value = ""/resources/new/"", method = RequestMethod.GET) is currently trumped by `@RequestMapping`(value = ""/resources/{resourceName}/"", method = RequestMethod.GET)  `@RequestMapping`(value = ""/resources/new/"", method = RequestMethod.GET) currently trumps `@RequestMapping`(value = ""/resources/*/"", method = RequestMethod.GET)  `@RequestMapping`(value = ""/resources/new/"", method = RequestMethod.GET) should trump `@RequestMapping`(value = ""/resources/{resourceName}/"", method = RequestMethod.GET) should trump `@RequestMapping`(value = ""/resources/*/"", method = RequestMethod.GET)  ---  **Affects:** 3.0 M1  **Issue Links:** - #10035 `@RequestMapping` best match gives wrong Controller method when using wildcards (_**""is duplicated by""**_) - #10040 PathVariable mappings are greedy over hard coded mappings - #10401 `@Controller` method order effects `@RequestMapping` behavior in ways not expected  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8073efd69f481590a6d22688dc2b9a0e8f6e124e, https://github.com/spring-projects/spring-framework/commit/abfc479bdb0eb28decc24fb720bb4e6827cbe7e3","closed","type: bug,","spring-projects-issues","2009-07-13T00:15:59Z","2019-01-13T07:59:07Z"
"","10341","ReflectiveMethodInvocation.proceed() changed behavior in Spring 2.5.1 ...as designed? [SPR-5670]","**[Eric B.](https://jira.spring.io/secure/ViewProfile.jspa?name=ebatzdor)** opened **[SPR-5670](https://jira.spring.io/browse/SPR-5670?redirect=false)** and commented  It seems that the ReflectiveMethodInvocation.proceed() method changed behavior from Spring 2.0 to Spring 2.5.1. Here's what's going on...  I have a a pre-interceptor for the org.springframework.transaction.interceptor.Transa ctionProxyFactoryBean that will retry the proxied method n number of times before giving up. Since it's a pre-interceptor, the idea is that a transaction will be started and completed after the call to my pre-interceptor. In Spring 2.0, this worked fine and the transaction would be restarted on each retry. That is, from within my interceptor, I could call ReflectiveMethodInvocation.proceed() as many times as I wanted without compromising the advice chain. When I upgraded to 2.5.1, it no longer restarted a transaction on subsequent retries.  I believe it has to do with the fact that, in Spring 2.0, ReflectiveMethodInvocation.nextInvocation() would be called and the interceptor index was incremented on a cloned object; therefore, the original invocation would remain unchanged.  See forum for more detail code samples.  JIRA opened per suggestion from ramnivas.   ---  **Affects:** 2.5.1  **Reference URL:** http://forum.springsource.org/showthread.php?p=235978#post235978","closed","in: core,","spring-projects-issues","2009-04-13T08:16:42Z","2019-01-12T16:27:12Z"
"","10240","not singleton StringBeans [SPR-5569]","**[EndrÃ©di, BalÃ¡zs](https://jira.spring.io/secure/ViewProfile.jspa?name=bendredi)** opened **[SPR-5569](https://jira.spring.io/browse/SPR-5569?redirect=false)** and commented  Bean definition: \ \ \test\ \ \  code: Object stringBean1 = ctx.getBean(""test"") Object stringBean2 = ctx.getBean(""test"")  The first reading of the bean is ok. The second reading fails because the system interprets the bean as java.lang.StringBuilder.  ---  **Affects:** 2.0.4, 3.0 M2  **Attachments:** - [StringBean_Mail_Eberhard_Wolff.pdf](https://jira.spring.io/secure/attachment/15203/StringBean_Mail_Eberhard_Wolff.pdf) (_78.06 kB_) - [TestCaseStringBean.jar](https://jira.spring.io/secure/attachment/15202/TestCaseStringBean.jar) (_3.91 kB_)  **Issue Links:** - #11744 IllegalArgumentException thrown for simple java.lang.String prototype bean  (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2009-03-12T04:49:14Z","2019-01-12T16:50:29Z"
"","10247","Allow multiple DefaultAnnotationHandlerMapping beans - move AbstractControllerUrlHandlerMapping.isEligibleForMapping(..) to AbstractDetectingUrlHandlerMapping [SPR-5576]","**[Eliot Sykes](https://jira.spring.io/secure/ViewProfile.jspa?name=eliotsykes)** opened **[SPR-5576](https://jira.spring.io/browse/SPR-5576?redirect=false)** and commented  Have found a few instances on the web where developers have wanted to define multiple DefaultAnnotationHandlerMapping beans in one app context.  Typically this is so different `@Controllers` can have different interceptors.  So far these developers have rolled their own solutions.  Some of these self-rolled solutions might be avoidable if AbstractControllerUrlHandlerMapping.isEligibleForMapping(..) (with some modifications) is moved into its superclass AbstractDetectingUrlHandlerMapping.  isEligibleForMapping(..) allows a configuration to exclude handlers by package or class name.  Currently isEligibleForMapping(...) is only available to ControllerBeanNameHandlerMapping and ControllerClassNameHandlerMapping.  Moving isEligibleForMapping(...) to AbstractDetectingUrlHandlerMapping would mean this functionality becomes available to BeanNameUrlHandlerMapping and DefaultAnnotationHandlerMapping too.   ---  **Affects:** 2.5.6  **Attachments:** - [ExcludingAnnotationHandlerMapping.java](https://jira.spring.io/secure/attachment/17489/ExcludingAnnotationHandlerMapping.java) (_5.87 kB_)  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-16T21:55:36Z","2019-01-11T17:03:05Z"
"","9927","Add RedirectFilter [SPR-5253]","**[Eliot Sykes](https://jira.spring.io/secure/ViewProfile.jspa?name=eliotsykes)** opened **[SPR-5253](https://jira.spring.io/browse/SPR-5253?redirect=false)** and commented  Add a RedirectFilter class to simplify performing redirects by a filter, expect that this is a common requirement for a filter.  Will attach candidate class shortly.   ---  **Affects:** 2.5.5  **Attachments:** - [RedirectFilter.java](https://jira.spring.io/secure/attachment/14813/RedirectFilter.java) (_1.78 kB_)","closed","type: enhancement,","spring-projects-issues","2008-10-30T01:21:00Z","2012-06-19T09:36:15Z"
"","10800","AbstractTransactionalTestNGSpringContextTests not working as expected when an EJB with TransactionAttribute.REQUIRES_NEW is encountered [SPR-6132]","**[Ed Randall](https://jira.spring.io/secure/ViewProfile.jspa?name=edrandall)** opened **[SPR-6132](https://jira.spring.io/browse/SPR-6132?redirect=false)** and commented  When an `@Test` method executes an EJB annotated with `@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)`, it seems that the _test_ transaction is consumed when the `REQUIRES_NEW` transaction completes. Subsequent transaction behavior then becomes unexpected.  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?p=261074  **Attachments:** - [requiresnew.zip](https://jira.spring.io/secure/attachment/15727/requiresnew.zip) (_4.15 kB_)  **Issue Links:** - #19400 No bean of type ConfigurableEnvironment in AbstractTestNGSpringContextTests - #17517 ApplicationContext fails to load in TestNG test if previous test is annotated with `@DirtiesContext` - #16026 Improve documentation of transactional support in the TestContext framework - #15947 Include TestContext in log message when starting a new transaction in TransactionalTestExecutionListener - #10792 Support timed transactional TestNG tests in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8105011368dedb45275db17b1d0c13523486ff12, https://github.com/spring-projects/spring-framework/commit/e20c927c5edcb58528a96c0e88ca50e22cb042ab, https://github.com/spring-projects/spring-framework/commit/c0eafa9ea15676cf5f4c64b1c6edf2646771059e  15 votes, 9 watchers","closed","has: votes-jira,","spring-projects-issues","2009-09-19T09:06:28Z","2019-01-13T07:58:23Z"
"","10792","Support timed transactional TestNG tests in the TestContext framework [SPR-6124]","**[Ed Randall](https://jira.spring.io/secure/ViewProfile.jspa?name=edrandall)** opened **[SPR-6124](https://jira.spring.io/browse/SPR-6124?redirect=false)** and commented  #### Status Quo  The _Spring TestContext Framework_ (TCF) has never supported _timed, transactional_ tests in conjunction with TestNG.  The reason for this is that the transaction managed by the TCF is only _active_ for the currently executing thread; this behavior is in line with standard transaction semantics for Spring. Thus, since TestNG executes the timed test method in a new thread, the test code does not participate in the transaction managed by Spring.  ###### Original Author's Description  If TestNG tests (which extend `AbstractTransactionalTestNGSpringContextTests`) are run with the `timeOut` attribute specified in the `@Test` annotation, they fail at `EntityManager.flush()` because there is no transaction.  If the timeout is set to zero, they pass.  ---  #### Analysis  The `invokeWithTimeout()` method in TestNG's `MethodInvocationHelper` class spawns a new thread to execute a timed test. Spring's transaction support, however, registers the current transaction resources, etc. in a `ThreadLocal` which is bound to the thread of the test runner. Thus, the timed test method cannot _see_ Spring's transaction.  Note that `MethodInvocationHelper` is deep in the internals of TestNG. Thus, it might be difficult to resolve this issue.  ---  #### Deliverables  1. [ ] Determine if it is possible to integrate the TCF in TestNG so that Spring `TestExecutionListeners` (specifically `TransactionalTestExecutionListener`) are executed in the same thread as the timed test.    - See the _Analysis_ section for further details.  ---  #### Further Resources  - [Spring Forum](http://forum.springsource.org/showthread.php?t=77874): see example code - [TestNG JIRA Issue](http://jira.opensymphony.com/browse/TESTNG-280) - [TimedTransactionalTestNGSpringContextTests](https://github.com/SpringSource/spring-framework/blob/master/spring-test/src/test/java/org/springframework/test/context/testng/TimedTransactionalTestNGSpringContextTests.java) in Spring's test suite which reproduces the issue  ---  **Affects:** 2.5.6, 3.0.5, 3.1.2  **Attachments:** - [testtimeout.zip](https://jira.spring.io/secure/attachment/15728/testtimeout.zip) (_4.16 kB_)  **Issue Links:** - #22176 Document effect of preemptive timeouts on transactional tests - #10800 AbstractTransactionalTestNGSpringContextTests not working as expected when an EJB with TransactionAttribute.REQUIRES_NEW is encountered  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b92a2fae113493543526e60b1ac7b72bd2865b7  3 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2009-09-18T04:25:02Z","2019-01-13T07:58:25Z"
"","10670","@Transactional on @PostConstruct annotated methods does not work [SPR-6002]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-6002](https://jira.spring.io/browse/SPR-6002?redirect=false)** and commented  If you have a method that is annotated using `@PostConstruct` the `@Transactional` annotation is not evaluated. Actually the call goes to the non proxied bean class.   ---  **Affects:** 2.5.6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-12T02:23:33Z","2012-06-18T12:45:05Z"
"","10665","Use @ManagedOperationParameter  on paramters [SPR-5997]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5997](https://jira.spring.io/browse/SPR-5997?redirect=false)** and commented  I would suggest to allow the usage of `@ManagedOperationParameter` to annotate the parameter of the method directly Something like:  `@ManagedOperation`(description=""Add two numbers"") public int add(`@ManagedOperationParameter`(name = ""x"", description = ""The first number"") int x, `@ManagedOperationParameter`(name = ""y"", description = ""The second number"") int y) { return x + y; }   --- No further details from [SPR-5997](https://jira.spring.io/browse/SPR-5997?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-08-10T20:39:34Z","2012-06-19T09:36:23Z"
"","10663","JUnit 4.5 support broken [SPR-5995]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5995](https://jira.spring.io/browse/SPR-5995?redirect=false)*** and commented  If you use JUnit 4.5 with Spring 3.0M4 you get an exception. At least the MANIFEST.MF for Spring Tests gives [3.8.2, 5.0.0) as the range so it should work I believe  Here is the stack trace:  java.lang.IllegalAccessError: tried to access method org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/runner/notification/RunNotifier;)Lorg/junit/internal/runners/model/EachTestNotifier; from class org.springframework.test.context.junit4.SpringJUnit4ClassRunner at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41) at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:220) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:179) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)  java.lang.IllegalAccessError: tried to access method org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/runner/notification/RunNotifier;)Lorg/junit/internal/runners/model/EachTestNotifier; from class org.springframework.test.context.junit4.SpringJUnit4ClassRunner at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41) at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:220) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:179) at org.junit.runners.Suite.runChild(Suite.java:115) at org.junit.runners.Suite.runChild(Suite.java:23) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41) at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.ParentRunner.run(ParentRunner.java:220) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)  ---  **Affects:** 3.0 M4  **Issue Links:** - #10631 Upgrade the Spring TestContext Framework to JUnit 4.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a7c299761ae6c6e7859b7cb844c863b52f748e1, https://github.com/spring-projects/spring-framework/commit/8fb53c801ecebbb7f0ef2137b952d05a484f1886, https://github.com/spring-projects/spring-framework/commit/da3eb580f672d7a49f23430f9182b4f73015690e  3 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2009-08-10T03:02:56Z","2019-01-11T18:13:28Z"
"","10373","does not fail if the name attribute does not refer to a valid Spring Bean [SPR-5703]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5703](https://jira.spring.io/browse/SPR-5703?redirect=false)** and commented           	       If hurz is not a valid Spring Bean the configuration is still accepted.   ---  **Affects:** 2.5.6, 3.0 M2  **Attachments:** - [aop.xml](https://jira.spring.io/secure/attachment/15351/aop.xml) (_527 bytes_) - [AopTest.java](https://jira.spring.io/secure/attachment/15352/AopTest.java) (_259 bytes_)","closed","type: enhancement,","spring-projects-issues","2009-04-29T07:17:34Z","2015-09-22T17:34:31Z"
"","10208","ReSTful URLs with content type extension do not work properly [SPR-5537]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5537](https://jira.spring.io/browse/SPR-5537?redirect=false)** and commented  I have a controller like `@RequestMapping`(value = ""/customer/{id}"", method = { RequestMethod.GET }) public ModelAndView getById(`@PathVariable`(""id"") int id) { }  I do a GET to http://localhost:8080/customer/42.xml to get an XML representation. Result:  org.springframework.web.util.NestedServletException: Request  processing failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert value of type [java.lang.String] to required type [int]; nested exception is java.lang.NumberFormatException: For input string: ""42.xml""  i.e. the extension is considered part of the id and therefore it fails.  ---  **Affects:** 3.0 M2  **Issue Links:** - #10899 RESTful URLs with path variables containing dots are incorrectly mapped - #10832 a Uri Value is incorrectly extracted if it contains '.'. - #10301 Extend Multiple `@PathVariable` Selection to allow delimeters other than /  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c178888efd6db95ac62a4044bdfeac1b36be2d5b  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2009-03-02T18:04:09Z","2019-01-13T08:00:49Z"
"","10207","RestTemplate does not do HTTP GET if it should [SPR-5536]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5536](https://jira.spring.io/browse/SPR-5536?redirect=false)** and commented  If you call getForObject() on an RestTemplate it does not use HTTP GET. The reason is that SimpleClientHttpRequest calls FileCopyUtils.copy(bufferedOutput, this.connection.getOutputStream()); . On Mac OS X JDK 1.6 this connection is sun.net.www.protocol.http.HttpURLConnection and  getOutputStream() contains this code:  if(method.equals(""GET"")) method = ""POST"";  making it a POST.    ---  **Affects:** 3.0 M2  **Attachments:** - [RestDoesNotDoGetTest.java](https://jira.spring.io/secure/attachment/15171/RestDoesNotDoGetTest.java) (_1.48 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b08ad44230269a2a8717c3c8a25a9b5539a55a22, https://github.com/spring-projects/spring-framework/commit/cbd5ddbb0d0a3b31172b2ece18b62a4eeb9e461f","closed","type: bug,","spring-projects-issues","2009-03-01T07:18:17Z","2012-06-19T03:47:08Z"
"","10204","Spring OXM project does not have a pom.xml [SPR-5533]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5533](https://jira.spring.io/browse/SPR-5533?redirect=false)** and commented  The Spring OXM project does not have a pom.xml   ---  **Affects:** 3.0 M2","closed","in: data,","spring-projects-issues","2009-03-01T00:40:36Z","2019-01-11T17:01:17Z"
"","10048","AbstractXsltView still documented [SPR-5375]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5375](https://jira.spring.io/browse/SPR-5375?redirect=false)** and commented  AbstractXsltView is still documented in the reference documentation even though it is deprecated and XslView should be used.   ---  **Affects:** 2.5.6  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2008-12-23T06:37:27Z","2015-09-22T18:20:30Z"
"","10045","AbstractJpaTest and AbstractAnnotationAwareTransactionalTests are not deprecated [SPR-5372]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5372](https://jira.spring.io/browse/SPR-5372?redirect=false)** and commented  JUnit 3.8 based test classes should be deprecated in Spring 3. These are not.   ---  **Affects:** 3.0 M1","closed","in: core,","spring-projects-issues","2008-12-19T05:27:21Z","2019-01-12T05:33:49Z"
"","9995","Doc: @Transactional is inherited [SPR-5322]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5322](https://jira.spring.io/browse/SPR-5322?redirect=false)** and commented  Paragraph 9.5.6 ""Using `@Transactional`"" says:  The fact that annotations are not inherited means that if you are using class-based proxies (proxy-target-class=""true"") or the weaving-based aspect (mode=""aspectj"") then the transaction settings will not be recognised by the proxying/weaving infrastructure and the object will not be wrapped in a transactional proxy (which would be decidedly bad).  This is not true. `@Transactional` is marked as `@Inherited`. So a subclass that inherits from a superclass marked as `@Transactional` is not distinguishable from a class that is marked as@Transaction itself.   ---  **Affects:** 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 1.2.9, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.0.9, 2.1 M1, 2.1 M2, 2.1 M3, 2.1 M4, 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6","closed","type: documentation,","spring-projects-issues","2008-11-26T00:23:05Z","2012-06-19T03:47:29Z"
"","9984","Easy way to use your own annotation instead of @Transactional [SPR-5311]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5311](https://jira.spring.io/browse/SPR-5311?redirect=false)** and commented  `@Component` can be used to annotate your own annotations so they can be used instead of `@Component`. I propose the same for `@Transactional` so that you can have transactional services by using:  `@Transaction` `@Component` public `@interface` MyCoolServiceAnnotation { }  and then annotate your services with this annotation.   ---  **Affects:** 2.5.6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-11-18T19:24:43Z","2012-06-19T09:36:18Z"
"","10524","Provide test utility to ensure remote interface and POJO interface compatibility [SPR-5855]","**[Dustin D Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=williadd)** opened **[SPR-5855](https://jira.spring.io/browse/SPR-5855?redirect=false)** and commented  This utility will allow developers to write unit tests to ensure a remote interface properly mirrors a POJO interface. Rather than waiting until deployment time to find that the 2 interfaces have not been kept in sync, a unit test can flag any problems at build time.   ---  **Attachments:** - [IBusinessDomainA.java](https://jira.spring.io/secure/attachment/15490/IBusinessDomainA.java) (_383 bytes_) - [IBusinessDomainAEJBObject.java](https://jira.spring.io/secure/attachment/15492/IBusinessDomainAEJBObject.java) (_194 bytes_) - [IBusinessDomainARemote.java](https://jira.spring.io/secure/attachment/15491/IBusinessDomainARemote.java) (_535 bytes_) - [InterfaceComparator.java](https://jira.spring.io/secure/attachment/15488/InterfaceComparator.java) (_1.49 kB_) - [TestIBusinessDomainAEJBObject.java](https://jira.spring.io/secure/attachment/15494/TestIBusinessDomainAEJBObject.java) (_370 bytes_) - [TestIBusinessDomainARemote.java](https://jira.spring.io/secure/attachment/15493/TestIBusinessDomainARemote.java) (_367 bytes_) - [TestInterfaceComparator.java](https://jira.spring.io/secure/attachment/15489/TestInterfaceComparator.java) (_2.30 kB_)","closed","type: enhancement,","spring-projects-issues","2009-06-22T01:53:21Z","2015-09-22T18:55:04Z"
"","10134","Suggest using Collections.emptyList() in various places [SPR-5461]","**[Doug Breaux](https://jira.spring.io/secure/ViewProfile.jspa?name=breaux)** opened **[SPR-5461](https://jira.spring.io/browse/SPR-5461?redirect=false)** and commented  Noticed that, for instance, RowMapperResultSetExtractor returns new ArrayList() when no rows are expected whereas Collections.emptyList() is recommended as an immutable, shared instance that reduces resource usage.  (I also can't tell whether there are other places that may return empty Collections that could benefit from this approach.)   --- No further details from [SPR-5461](https://jira.spring.io/browse/SPR-5461?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-02-04T01:26:30Z","2012-06-19T09:36:29Z"
"","9953","Parameterized ResultSetExtractor [SPR-5280]","**[Doug Ayers](https://jira.spring.io/secure/ViewProfile.jspa?name=zoan333)** opened **[SPR-5280](https://jira.spring.io/browse/SPR-5280?redirect=false)** and commented  To complement parameterized functionality provided by ParameterizedRowMapper, have proposed ParameterizedResultSetExtractor solutions.  My current application makes heavy use of Oracle's inline cursor select query statements to create jagged result sets.  Use of these ParameterizedResultSetExtractors made rowmapper implementations much safer as we could rely on compile-time checks that the correct result set extractor was used with the right bean property the rowmapper was handling.  Continues trend of using parameterized rowmappers and rely less on hard type casting.   ---  **Affects:** 2.5 final  **Attachments:** - [ParameterizedResultSetExtractor.java](https://jira.spring.io/secure/attachment/14843/ParameterizedResultSetExtractor.java) (_2.40 kB_) - [ParameterizedRowMapperResultSetExtractor.java](https://jira.spring.io/secure/attachment/14844/ParameterizedRowMapperResultSetExtractor.java) (_2.71 kB_)","closed","type: enhancement,","spring-projects-issues","2008-11-08T12:32:46Z","2012-06-19T09:36:28Z"
"","9952","Parameterized SingleColumnRowMapper By Column Name [SPR-5279]","**[Doug Ayers](https://jira.spring.io/secure/ViewProfile.jspa?name=zoan333)** opened **[SPR-5279](https://jira.spring.io/browse/SPR-5279?redirect=false)** and commented  The current ParameterizedSingleColumnRowMapper class restricts the result set to only contain a single column, which prevents use when needs to be applied on a multiple-column result set and the developer is only interested in an arbitrary column.  A workaround is to tune the database query to select only a single column, but that decision may not be in the hands of the developer.  The attached class proposes a solution that will allow a single arbitrary column identified by its name be extracted from a result set that may contain 1..N columns.  Adaptations of this proposal could provide same functionality but allow an arbitrary column index to be provided.  (My current need was to retrieve by column name so that's why I came up with this solution).   ---  **Affects:** 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6  **Attachments:** - [ParameterizedSingleColumnRowMapperByName.java](https://jira.spring.io/secure/attachment/14842/ParameterizedSingleColumnRowMapperByName.java) (_4.36 kB_)","closed","type: enhancement,","spring-projects-issues","2008-11-08T12:21:14Z","2012-06-19T09:36:25Z"
"","9946","Add method to PropertyAccessorFactory for target type Class [SPR-5273]","**[Doug Ayers](https://jira.spring.io/secure/ViewProfile.jspa?name=zoan333)** opened **[SPR-5273](https://jira.spring.io/browse/SPR-5273?redirect=false)** and commented  Per the Spring API online docs (2.5.x), the BeanWrapperImpl class has this developer note:  ""NOTE: As of Spring 2.5, this is - for almost all purposes - an internal class. It is just public in order to allow for access from other framework packages. For standard application access purposes, use the PropertyAccessorFactory.forBeanPropertyAccess(java.lang.Object) factory method instead.""  Though I agree with this recommendation completely, I would like to suggest that one more factory method for obtaining a BeanWrapper be added where the target object passed in could be a Class instance to match the similar constructor provided by the BeanWrapperImpl class.  There is a workaround, but it's even more verbose than using BeanWrapperImpl directly.  New Method: public static BeanWrapper forBeanPropertyAccess(Class target)  Meets Functionality of BeanWrapperImpl: new BeanWrapperImpl( MyClass.class )  Workaround Otherwise:  Attached is a simple bean and a standard Java main class that executes five tests showing the subtle loss of simple usage of BeanWrapperImpl by using the PropertyAccessorFactory recommended by the Spring documentation.  Thanks   ---  **Affects:** 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6  **Attachments:** - [MyBean.java](https://jira.spring.io/secure/attachment/14831/MyBean.java) (_229 bytes_) - [TestMyBean.java](https://jira.spring.io/secure/attachment/14832/TestMyBean.java) (_1.58 kB_)","closed","type: enhancement,","spring-projects-issues","2008-11-04T11:49:57Z","2014-07-28T04:11:14Z"
"","10849","Add 'setBasePackages' to ControllerClassNameHandlerMapping [SPR-6181]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-6181](https://jira.spring.io/browse/SPR-6181?redirect=false)** and commented  Currently we can only define one base package for ControllerClassNameHandlerMapping. It would be nice if we have 'setBasePackages' to define multiple base package.   ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-10-03T02:39:40Z","2018-12-28T10:12:31Z"
"","10622","Allow developers to configure locations of XML mappings, jars from LocalContainerEntityManagerFactoryBean [SPR-5954]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-5954](https://jira.spring.io/browse/SPR-5954?redirect=false)** and commented  Currently we can only add persistenceXml locations to LocalContainerEntityManagerFactoryBean. There is no way to configure XML mappings, jars locations from LocalContainerEntityManagerFactoryBean (like in Hibernate's LocalSessionFactoryBean).  If it's possible, I would love to see this feature in the next Spring 3.x implementations. Maybe we can provide a map of locations list to LocalContainerManagerFactoryBean (with persistenceUnit name as the key)   ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-07-23T20:20:31Z","2018-12-28T11:35:52Z"
"","10561","Merge multiple lists/maps/sets that share the same id  into a single map/list [SPR-5892]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-5892](https://jira.spring.io/browse/SPR-5892?redirect=false)** and commented  Add ability to merge multiple lists/maps/sets that share the same id  into a map/list (through the use of flag).  Some frameworks require developers to provide a list of mapping location (inside classpath). This would not be a problem if everything is bundled in a war.  But in modular deployment, we usually have the mapping files to be packaged inside jars where they belong.  This new improvement would remove the responsibility to add every mapping file located in every new jar we deploy, into the the a mapping list resides in the main context file of the application.  For example:  JAR_A has a collectionContext.xml with a map/list with id ""myList"" JAR_B has a collectionContext.xml with a map/list with id ""myList"" WAR has an applicationContext.xml that imports classpath*:**/collectionContext.xml  This feature would allow the two maps to be merged into a map with id ""myList"".  ---  **Issue Links:** - #11189 Introduce 'merge' attribute for util namespace collection elements (_**""Cloned to""**_)","closed","type: enhancement,","spring-projects-issues","2009-07-02T15:10:35Z","2019-01-11T17:17:15Z"
"","10512","Support for Dynamic Validator in Spring MVC [SPR-5843]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-5843](https://jira.spring.io/browse/SPR-5843?redirect=false)** and commented  Sometimes in application there are custom forms with custom fields which requires dynamic validator. It would be nice if the Spring MVC supports Dynamic Validator using Hibernate Validator.   ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-06-19T03:56:39Z","2018-12-28T10:23:23Z"
"","10498","Support for Simple XML Framework [SPR-5828]","**[Don Ngo](https://jira.spring.io/secure/ViewProfile.jspa?name=vvvngo)** opened **[SPR-5828](https://jira.spring.io/browse/SPR-5828?redirect=false)** and commented  Based on my experience on using both XStream and Simple XML Framework (http://simple.sourceforge.net/), I believe the Simple XML Framework is by far easiest and more flexible of the two.  And based on that merit, I think the Simple XML Framework should be far more popular among the Java developers, and adding support for this framework will be greatly appricated by the Spring community.   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-06-15T01:15:48Z","2015-09-22T18:55:05Z"
"","10278","Non-trivial NestedRuntimeException.getMessage() can cause deadlocks on OSGi [SPR-5607]","**[Don Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=mrdon)** opened **[SPR-5607](https://jira.spring.io/browse/SPR-5607?redirect=false)** and commented  The non-trivial implementation of NestedRuntimeException.getMessage():  ``` public String getMessage() { 	return NestedExceptionUtils.buildMessage(super.getMessage(), getCause()); } ```  can cause a deadlock in Log4J when running in an interesting classloader like an OSGi bundle classloader.  What happens is the log4j root logger lock is held, but the NestedExceptionUtils reference causes the class to be loaded into the classloader, which in Felix's case, causes a lock on the bundle.  If another thread which holds the bundle lock happens to be logging, you get a deadlock.  The deadlock is attached.  The solution is to either: 1. Resolve the message in the constructor and store it as a final private variable, so the implementation of getMessage() becomes trivial. 2. Force the loading of NestedExceptionUtils in the constructor by referencing it somehow.  Of the two, I think solution 1 is the most clear.  The bottom line is accessor methods in an exception should be trivial and not cause unintended side-effects.   ---  **Affects:** 2.5.6  **Attachments:** - [spring-deadlock.txt](https://jira.spring.io/secure/attachment/15258/spring-deadlock.txt) (_6.66 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b72af54f53047c65c7e4a5094c9f2a15df1f57ef  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2009-03-24T12:54:52Z","2012-06-19T03:47:15Z"
"","10312","EhCacheFactoryBean should support CacheEventListener [SPR-5641]","**[Dominique Jean-Prost](https://jira.spring.io/secure/ViewProfile.jspa?name=djeanprost)** opened **[SPR-5641](https://jira.spring.io/browse/SPR-5641?redirect=false)** and commented  Actually, EhCacheFactoryBean doesn't allow instanciate EhCache caches with CacheEventListeners. This forbids for instance to instanciate caches that supports distribution over a cluster, because the way ehcache runs needs the cache to be fully setup before adding it to the CacheManager (see net.sf.ehcache.distribution.RMICacheManagerPeerListener.notifyCacheAdded(String)).  I wrote an extended version of EhCacheFactoryBean so that I can provide cacheEventListeners to the factory in order to have distribution works. Now I think you can backport my class to spring-core so that evereybody can use it. As I can't find the url of spring scm, I can't provide patch, although I wish I could.  Here is what you have to setup in your bean definition : \  \ \ \false\ \ \ \itemsReferenceData\ \ \ \ \ \ \true\ \ \ \10000\ \ \ \true\ \ \ \ \ \ \ \ \ \ \ \  ---  **Affects:** 2.5.1  **Attachments:** - [ExtendedEhCacheFactoryBean.java](https://jira.spring.io/secure/attachment/15277/ExtendedEhCacheFactoryBean.java) (_11.38 kB_)  **Issue Links:** - #10902 Add facility to EhCacheFactorybean for registering event listeners (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2009-03-31T17:54:16Z","2019-01-11T16:34:59Z"
"","10242","Petclinic - double visit insertion when using JPA Hibernate [SPR-5572]","**[Dominik Sadowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mimik)** opened **[SPR-5572](https://jira.spring.io/browse/SPR-5572?redirect=false)** and commented  When using Hibernate as JPA provider for Petclinic sample, adding visit results in double insertion to database's VISITS table. Petclinic sample was configured for Tomcat as described in it's readme.txt (3. JPA ON TOMCAT).  Same problem occurs under Jetty with spring-agent.jar used as -javaagent.  Toplink, OpenJPA version work correctly.  Spring Petclinic sample was build from orginal Spring Framework 2.5.6 distribution (spring-framework-2.5.6-with-dependencies.zip).    ---  **Affects:** 2.5.6  **Attachments:** - [double-visit-insertion-tomcat-log.txt](https://jira.spring.io/secure/attachment/15217/double-visit-insertion-tomcat-log.txt) (_27.19 kB_) - [double-visit-insertion-tomcat-log(recommended config).txt](https://jira.spring.io/secure/attachment/15218/double-visit-insertion-tomcat-log%28recommended+config%29.txt) (_27.28 kB_) - [screenshot-1.jpg](https://jira.spring.io/secure/attachment/15216/screenshot-1.jpg) (_95.97 kB_)","closed","status: invalid,","spring-projects-issues","2009-03-16T03:08:02Z","2019-01-12T05:33:39Z"
"","10118","Add SQL error code mapping for Ingres DBMS [SPR-5444]","**[Domenic Mangano](https://jira.spring.io/secure/ViewProfile.jspa?name=domenicmangano)** opened **[SPR-5444](https://jira.spring.io/browse/SPR-5444?redirect=false)** and commented  Mapping of Ingres DBMS error codes to Spring DataAccessException Hierarchy   ---  **Attachments:** - [sql-error-codes.xml](https://jira.spring.io/secure/attachment/15100/sql-error-codes.xml) (_7.63 kB_)","closed","type: enhancement,","spring-projects-issues","2009-01-29T21:51:31Z","2012-06-19T09:36:21Z"
"","10323","JAX-WS intergation via SpringBeanAutowiringSupport doesn't work in Weblogic 10.3 [SPR-5652]","**[Dmitri Maximovich](https://jira.spring.io/secure/ViewProfile.jspa?name=maximdim)** opened **[SPR-5652](https://jira.spring.io/browse/SPR-5652?redirect=false)** and commented  Method for injecting dependencies in JAX-WS endpoint class, as described in the link below, doesn't work in Weblogic 10.3  http://static.springframework.org/spring/docs/2.5.x/reference/remoting.html#remoting-web-services-jaxws-export-servlet  It looks like Weblogic processes JAX-WS calls in separate classloader from web-app classloader. In the log files it's evident that Spring's context getting loaded twice: first on web-app startup (from org.springframework.web.context.ContextLoaderListener) and then upon handling of JAX-WS call. Following message from SpringBeanAutowiringSupport  observed in log file as well:  2009-04-06 10:05:45,701 DEBUG [[ACTIVE] ExecuteThread: '0' for queue: 'weblogic.kernel.Default (self-tuning)'] (org.springframework.web.context.support.SpringBeanAutowiringSupport:processInjectionBasedOnCurrentContext:87) - Current WebApplicationContext is not available for processing of AuthenticationWs: Make sure this class gets constructed in a Spring web application. Proceeding without injection.  As a result dependencies annotated with `@Autowired` are not set.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db2d323d962e70252a18f3b6bb7f3587427f47a0, https://github.com/spring-projects/spring-framework/commit/87eb3f970ebc59983b1cfc39dff77e244f596823  1 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2009-04-06T01:18:01Z","2013-05-24T06:02:39Z"
"","10073","form:errors tag generates invalid id attribute when used with ""indexed"" command object properties (array, list...) [SPR-5400]","**[dju`](https://jira.spring.io/secure/ViewProfile.jspa?name=dju%60)** opened **[SPR-5400](https://jira.spring.io/browse/SPR-5400?redirect=false)** and commented  As the org.springframework.web.servlet.tags.form.ErrorsTag class do not make use of AbstractDataBoundFormElementTag.autogenerateId() method (just like InputTag), id attribute might still contain invalid characters ('[' and ']').      generates \...\ instead of \...\   ---  **Affects:** 2.5.6","closed","status: bulk-closed,","spring-projects-issues","2009-01-06T19:29:56Z","2019-01-12T02:38:03Z"
"","10623","Usage of custom scopes breaks functioning of circular references [SPR-5955]","**[Dirk Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=iterator)** opened **[SPR-5955](https://jira.spring.io/browse/SPR-5955?redirect=false)*** and commented  The following construct brings up a BeanCurrentlyInCreationException.  ```xml              ```  As the example shows clearly, there are no problematic references via constructor-arg involved and the same construct but with scope=""singleton"" does actually work. I see no reason why circular references should not be possible for beans that have a custom scope. Therefor this seems clearly a bug.   ---  **Affects:** 3.0 M3  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-07-24T01:58:32Z","2015-09-22T17:34:38Z"
"","10260","Making @Required annotation more powerful [SPR-5589]","**[Dirk Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=iterator)** opened **[SPR-5589](https://jira.spring.io/browse/SPR-5589?redirect=false)** and commented  The `@Required` annotation is a very fine support for validation but it could be even better.  Imagine you have more than one way to affect some intenal value of a bean. For example there could be an optional constructor that takes also some argument that will fill a required value. But there is another optional constructor that does not take this value. Because of this an extra setter method annotated with `@Required` exists falso feeds that value. Using the first mentioned constructor would make the usage of the extra property unneccessary but validation will complain now. Here the java code behind this idea:  ``` public class X {   private String someProp;      public X(String someProp) {     this.someProp = someProp;   }    public X() {   }    @Required   public void setSomeProp(String someProp) {     this.someProp = someProp;   } } ```  My suggestion is now make the `@Required` more differentiated. It should get an array of strings as value. This array could be empty by default which would mean the old behaviour. But if the array contains strings they are meant as keys for required internal values that are covered by a constructors or methods (especially setters). Thus a validation could see that some required value is given by some of the used options and thus not complain if another option is not used.  In Java code this would look now as follows:  ``` public class X {   private String someProp;      @Required(""someProp"")   public X(String someProp) {     this.someProp = someProp;   }    public X() {   }    @Required(""someProp"")   public void setSomeProp(String someProp) {     this.someProp = someProp;   } } ```  The following xml configuration show how this is affecting xml configuration and validation  ```xml","closed","type: enhancement,","spring-projects-issues","2009-03-22T09:17:55Z","2012-06-19T09:36:27Z"
"","10003","Complement depends-on with attach [SPR-5330]","**[Dirk Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=iterator)** opened **[SPR-5330](https://jira.spring.io/browse/SPR-5330?redirect=false)** and commented  Imagine the following situation: I have two beans bean1 and bean2. bean1 will be instantated because it is retrieved directly or indirectly via explicit dependencies by BeanFactory.getBean(). bean2 has a dependency to bean1 but not vice versa. But I want to let the BeanFactory instantiate bean2 when bean1 is instantiated. The depends-on does not help in this situation because depends-on does not allow back references from the required bean. I can accept that depends-on works that way but then we would need something like an attach attribute that allows to instantiate other bean along with a given bean just like it is possible if there is a property reference to the other bean. In this case back references are possible.  Wouldn't it be good to have the attach mechanism in spring. For example it could be helpful to instantiate controllers that act between beens while none of the involved beans would have an explicit property dependency to it..  not working:  ```xml         ```  suggestion:  ```xml         ```    --- No further details from [SPR-5330](https://jira.spring.io/browse/SPR-5330?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-11-30T22:05:32Z","2012-06-19T09:36:26Z"
"","9891","defaultTimeout in JotmFactoryBean doesn't have any effect without transactionTimeout","**[Dima](https://jira.spring.io/secure/ViewProfile.jspa?name=tsigelnik)** opened **[SPR-5218](https://jira.spring.io/browse/SPR-5218?redirect=false)** and commented  Actually in Current class 2 properties describe timeout:  defaultTimeout has effect if you set up transactionTimeout","closed","type: enhancement,","spring-projects-issues","2008-10-15T18:57:46Z","2012-06-19T03:47:00Z"
"","10451","Document usage of static imports for assertions in test examples [SPR-5781]","**[Diego Plentz](https://jira.spring.io/secure/ViewProfile.jspa?name=plentz)** opened **[SPR-5781](https://jira.spring.io/browse/SPR-5781?redirect=false)** and commented  In Testing chapter, a lot of code samples use assert* methods, even if it don't exteds any class.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7661d53412249a428c8765dcb23b5c7550aa37b","closed","type: documentation,","spring-projects-issues","2009-05-24T14:15:13Z","2012-06-19T03:43:14Z"
"","9970","Please add support to GWT [SPR-5297]","**[Didier Girard](https://jira.spring.io/secure/ViewProfile.jspa?name=dgirard)** opened **[SPR-5297](https://jira.spring.io/browse/SPR-5297?redirect=false)** and commented  Please add support to Google Web Toolkit support to the Spring Framework.   ---  62 votes, 41 watchers","closed","has: votes-jira,","spring-projects-issues","2008-11-14T20:28:51Z","2014-09-17T06:31:55Z"
"","9987","Fix invalid aspect preceedence comparison algorithm [SPR-5314]","**[Denis Zhdanov](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.zhdanov)** opened **[SPR-5314](https://jira.spring.io/browse/SPR-5314?redirect=false)** and commented  Problem description: org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator contract should be corrected and implementation should be changed accordingly. The contract defines the following at the moment:  '...if 'a' and 'b' are defined in the same aspect, then if one of 'a' or 'b' is a form of after advice, then the advice declared last in the aspect has the highest precedence. If neither 'a' nor 'b' is a form of after advice, then the advice declared first in the aspect has the highest precedence'  Suppose the following multi-advice aspect (advice order is significant):  `@Around` (advice1) `@After` (advice2) `@Around` (advice3)  Given to the mentioned contract advice1 has higher precedence than advice2, advice3 has higher precedence than advice1 and advice2 has higher precedence than advice3. Hence, we have a circular advice precedence exception. Attached test-case illustrates the problem as well.  Solution: precedence rules for the pieces of advice located at the same aspect should be corrected in order to avoid a circularity at the situations like the one mentioned above. Also I suggest to define strict rules about 'before' advice precedence as well. My proposal is to define the following precedence rules constraints (please note that they cover only the situation when pieces of advice are located at the same aspect): *) if 'before' advice is compared to 'non-before' advice, the former has higher precedence; *) if 'before' advice is compared to 'before' advice, the advice declared first in the aspect has higher precedence; *) if a form of 'after' advice is compared to the advice that is not a form of 'after', the later has higher precedence; *) if a form of 'after' advice is compared to the advice that is a form of 'after', the advice declared first in the aspect has higher precedence; *) advice declared first in the aspect has higher precedence at all other cases;   ---  **Affects:** 2.5.6  **Attachments:** - [test-case.zip](https://jira.spring.io/secure/attachment/14886/test-case.zip) (_1.84 kB_)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2008-11-20T05:16:13Z","2019-01-12T16:27:41Z"
"","9922","Prototype application context event listeners are not notified within the events [SPR-5248]","**[Denis Zhdanov](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.zhdanov)** opened **[SPR-5248](https://jira.spring.io/browse/SPR-5248?redirect=false)** and commented  The IoC container only tries to manage 'singleton' beans that are IS-A org.springframework.context.ApplicationListener. So, prototype beans that are IS-A ApplicationListener are not notified within the new events. There is no reason why the container shouldn't manage prototype beans during events propagation. It's able to register the prototype bean as a listener during its instantiation. The only thing to check is to reference that beans via weak references in order to avoid memory leaks.  From the other side, expected behavior is that application text propagates new event to all of the registered listeners (prototyped beans as well). User expect that because reference documentation mentions specially only life cycle event regarding prototype beans - '3.4.2. The prototype scope': There is one quite important thing to be aware of when deploying a bean in the prototype scope, in that the lifecycle of the bean changes slightly. Spring does not manage the complete lifecycle of a prototype bean: the container instantiates, configures, decorates and otherwise assembles a prototype object, hands it to the client and then has no further knowledge of that prototype instance. This means that while initialization lifecycle callback methods will be called on all objects regardless of scope, in the case of prototypes, any configured destruction lifecycle callbacks will not be called. It is the responsibility of the client code to clean up prototype scoped objects and release any expensive resources that the prototype bean(s) are holding onto. (One possible way to get the Spring container to release resources used by prototype-scoped beans is through the use of a custom bean post-processor which would hold a reference to the beans that need to be cleaned up.)  There was a complain about that at the spring community already - see http://forum.springframework.org/showthread.php?t=62781.  ---  **Affects:** 2.5.5  **Issue Links:** - #14027 Support DisposableBean on prototype and `@Configurable` beans using weak references - #9921 Prototype beans that implement ApplicationListener shouldn't be created during container initialization","closed","type: enhancement,","spring-projects-issues","2008-10-29T22:13:18Z","2019-01-13T08:02:13Z"
"","9921","Prototype beans that implement ApplicationListener shouldn't be created during container initialization [SPR-5247]","**[Denis Zhdanov](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.zhdanov)** opened **[SPR-5247](https://jira.spring.io/browse/SPR-5247?redirect=false)** and commented  Consider that the client specifies particular bean with the scope prototype and that bean implements org.springframework.context.ApplicationListener. The bean instance is created during context instantiation then. The reason is that org.springframework.context.support.AbstractApplicationContext.registerListeners() calls getBeansOfType(ApplicationListener.class, true, false). The bug is that second parameter is set to true.  This is a major defect because the client may specify the bean to reference to resource that can't be available at the start time. Hence, spring context is failed to be constructed.  ---  **Affects:** 2.5.5  **Issue Links:** - #8733 ApplicationListener beans eagerly instantiated even when marked as lazy-init - #9922 Prototype application context event listeners are not notified within the events","closed","type: enhancement,","spring-projects-issues","2008-10-29T22:04:53Z","2019-01-11T15:26:18Z"
"","9920","Doc: Refined CommonAnnotationBeanPostProcessor contract [SPR-5246]","**[Denis Zhdanov](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.zhdanov)** opened **[SPR-5246](https://jira.spring.io/browse/SPR-5246?redirect=false)** and commented  The problem is that Spring users can't be sure if bean property specified via XML overrides the one injected via `@Resource`. Current implementation holds XML-defined property - org.springframework.context.annotation.CommonAnnotationBeanPostProcessor uses org.springframework.beans.factory.annotation.InjectionMetadata that in turn uses org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.ResourceElement that doesn't override InjectionMetadata.InjectedElement.inject(), hence, InjectionMetadata.InjectedElement.checkPropertySkipping() is performed. However, that feature is not defined neither at the CommonAnnotationBeanPostProcessor contract nor at the reference documentation. Spring users can't be sure about expected behavior then. We already had the questions about that (e.g. http://forum.springframework.org/showthread.php?t=62769).  The task is to refine both CommonAnnotationBeanPostProcessor contract and reference documentation section '3.11.5. `@Resource`'.   ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a9386f5c79e1687adfe6d3d2c5971718c6b0c5cf","closed","in: core,","spring-projects-issues","2008-10-29T19:48:13Z","2012-06-19T03:47:32Z"
"","10764","Make org.springframework.orm.ibatis.support.SqlMapClientDaoSupport an Instantiatable Class [SPR-6096]","**[David Sledge](https://jira.spring.io/secure/ViewProfile.jspa?name=sledged)** opened **[SPR-6096](https://jira.spring.io/browse/SPR-6096?redirect=false)** and commented  I'd like to request for the class org.springframework.orm.ibatis.support.SqlMapClientDaoSupport to no longer be abstract.  It defines no abstract methods, and implements all its inherited abstract methods, so removing the abstract class modifier makes it perfectly usable as an instatiatable class.  In fact, with my needs when I extend it, my entire class declaration is as follows:  `class SqlMapClientDao extends SqlMapClientDaoSupport` `{`}  Also, since all it's methods except one of the protected ones are final and seven of the eight final ones being public, it looks like subclassing provides a benefit only to a select group of scenarios.   ---  **Affects:** 2.5.6, 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-09-10T03:19:25Z","2015-09-22T17:34:30Z"
"","10555","Spelling mistake in ContentNegotiatingViewResolver JavaDoc [SPR-5885]","**[David Newcomb](https://jira.spring.io/secure/ViewProfile.jspa?name=davidnewcomb)** opened **[SPR-5885](https://jira.spring.io/browse/SPR-5885?redirect=false)** and commented  explicitely is spelt explicitly.  ""The ContentNegotiatingViewResolver does not resolve views itself, but delegates to other ViewResolvers. By default, these other view resolvers are picked up automatically from the application context, though they can also be set explicitely""   ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC3","closed","type: enhancement,","spring-projects-issues","2009-06-30T00:57:00Z","2018-12-09T22:37:56Z"
"","10387","Typo in JavaDoc for Propagation.SUPPORTS [SPR-5717]","**[David Newcomb](https://jira.spring.io/secure/ViewProfile.jspa?name=davidnewcomb)** opened **[SPR-5717](https://jira.spring.io/browse/SPR-5717?redirect=false)** and commented  http://static.springframework.org/spring/docs/3.0.x/javadoc-api/org/springframework/transaction/annotation/Propagation.html  Problem exists in all versions of code.  ""transaction scopp"" should be ""transaction scope""   ---  **Affects:** 1.0 RC1, 1.0 RC2, 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 1.2.9, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.0.9, 2.1 M1, 2.1 M2, 2.1 M3, 2.1 M4, 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC3","closed","type: bug,","spring-projects-issues","2009-05-06T02:40:21Z","2018-12-09T22:37:56Z"
"","10687","Support of class ConfigurationSupport in Spring 3.0.x framework [SPR-6018]","**[David Nemeshazy](https://jira.spring.io/secure/ViewProfile.jspa?name=dnemeshazy)** opened **[SPR-6018](https://jira.spring.io/browse/SPR-6018?redirect=false)** and commented  We were using Spring 2.5.6 + Spring JavaConfig 1.0.0.M4 and are using the ConfigurationSupport class.  Now we are migrating toward Spring 3.0 (3.0.0.M4 currently) and don't have this class anymore.  We find this class very helpful and would like to have it part of Spring 3.0.x or have it in the next JavaConfig version that is based on Spring 3.0.x  ---  **Affects:** 3.0 M4  **Issue Links:** - #12076 Provide alternatives to using FactoryBean types within `@Bean` methods (_**""is superseded by""**_)  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-08-17T20:51:26Z","2019-01-13T07:58:47Z"
"","10793","[doc] CSRF prevention support in spring form controller [SPR-6125]","**[David Minor](https://jira.spring.io/secure/ViewProfile.jspa?name=david%20minor)** opened **[SPR-6125](https://jira.spring.io/browse/SPR-6125?redirect=false)** and commented  Several frameworks have CSRF (Cross Site Request Forgery) prevention baked into their forms, which typically consists of a user-specific unique token that is placed in the form and verified on submission. It would be great if there were a ""preventCSRF"" property that one could set to true for the form controller, and a corresponding JSP/Velocity/FreeMarker tag to add the token to the form.   ---  **Affects:** 3.2.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e38b7ede6756feda759db28f876f70d484e4320  13 votes, 16 watchers","closed","has: votes-jira,","spring-projects-issues","2009-09-18T04:32:27Z","2019-01-13T21:49:05Z"
"","10466","Improve support for Listeners in Quartz scheduler factory bean [SPR-5796]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-5796](https://jira.spring.io/browse/SPR-5796?redirect=false)** and commented  Registering of global job and trigger listeners could be improved to do an instanceof check if it implements SchedulerPlugin, and then call initialize( name, scheduler), using the beanname as name before registering. Listeners are required to have a name. This is the case for org.quartz.plugins.history.LoggingTriggerHistoryPlugin as well as org.quartz.plugins.history.LoggingJobHistoryPlugin, which are nice to have feats for informational reasons. It's not possible to have a init-method attribute for these either, as they take in params.   ---  **Affects:** 2.0.9, 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-06-01T06:55:32Z","2012-06-19T09:36:23Z"
"","10209","Improve configurability for OracleLobHandler (be able to set classloader to use) [SPR-5538]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-5538](https://jira.spring.io/browse/SPR-5538?redirect=false)** and commented  i get a ClassNotFound even if the class is available for the application classloader (this is verified via the websphere admin console (troubleshooting -> class loader viewer - all the ora classes can be loaded just fine).  org.springframework.dao.DataAccessResourceFailureException: Could not create Oracle LOB; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: Couldn't initialize OracleLobHandler b ecause Oracle driver classes are not available. Note that OracleLobHandler requires Oracle JDBC driver 9i or higher!; nested exception is java.lang.ClassNotFoundException: oracle.sql.BLOB Caused by: org.springframework.dao.InvalidDataAccessApiUsageException: Couldn't initialize OracleLobHandler because Oracle driver classes are not available. Note that OracleLobHandler requires Oracle JDBC driver 9i or higher!; nested exception is java.lang.ClassNotFoundException: oracle.sql.BLOB Caused by: java.lang.ClassNotFoundException: oracle.sql.BLOB at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:402) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:347) at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.springframework.jdbc.support.lob.OracleLobHandler.initOracleDriverClasses(OracleLobHandler.java:150) at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.createLob(OracleLobHandler.java:339) at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.setClobAsCharacterStream(OracleLobHandler.java:311) at com.te.pwh.services.history.jobs.HistoricalizationItemWriter$1.setValues(HistoricalizationItemWriter.java:116) at org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(AbstractLobCreatingPreparedStatementCallback.java:70) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:566) at com.te.pwh.services.history.jobs.HistoricalizationItemWriter.handleTpwPafios(HistoricalizationItemWriter.java:110) at com.te.pwh.services.history.jobs.HistoricalizationItemWriter.write(HistoricalizationItemWriter.java:89) at org.springframework.batch.item.support.CompositeItemWriter.write(CompositeItemWriter.java:30) at org.springframework.batch.item.support.DelegatingItemWriter.write(DelegatingItemWriter.java:45) at org.springframework.batch.core.step.item.BatchListenerFactoryHelper$2.write(BatchListenerFactoryHelper.java:99) at org.springframework.batch.core.step.item.SimpleItemHandler.doWrite(SimpleItemHandler.java:105) at org.springframework.batch.core.step.item.SkipLimitStepFactoryBean$StatefulRetryItemHandler$1.doWithRetry(SkipLimitStepFactoryBean.java:402) at org.springframework.batch.retry.callback.RecoveryRetryCallback.doWithRetry(RecoveryRetryCallback.java:109) at org.springframework.batch.retry.support.RetryTemplate.execute(RetryTemplate.java:168) at org.springframework.batch.core.step.item.SkipLimitStepFactoryBean$StatefulRetryItemHandler.write(SkipLimitStepFactoryBean.java:419) at org.springframework.batch.core.step.item.SimpleItemHandler.handle(SimpleItemHandler.java:71) at org.springframework.batch.core.step.item.ItemOrientedStep$3.doInIteration(ItemOrientedStep.java:391) at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:346) at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:212) at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143) at org.springframework.batch.core.step.item.ItemOrientedStep.processChunk(ItemOrientedStep.java:382) at org.springframework.batch.core.step.item.ItemOrientedStep$2.doInIteration(ItemOrientedStep.java:259) at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:346) at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:212) at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143) at org.springframework.batch.core.step.item.ItemOrientedStep.doExecute(ItemOrientedStep.java:236) at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:172) at org.springframework.batch.core.job.SimpleJob.execute(SimpleJob.java:103) at org.springframework.batch.core.configuration.support.ClassPathXmlApplicationContextJobFactory$ContextClosingJob.execute(ClassPathXmlApplicationContextJobFactory.java:107) at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:86) at org.springframework.scheduling.commonj.DelegatingWork.run(DelegatingWork.java:61) at com.ibm.ws.asynchbeans.J2EEContext.run(J2EEContext.java:1114) at com.ibm.ws.asynchbeans.WorkWithExecutionContextImpl.go(WorkWithExecutionContextImpl.java:195) at com.ibm.ws.asynchbeans.CJWorkItemImpl.run(CJWorkItemImpl.java:187) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1473)  I found that the OracleLobHandles code looks like this: this.blobClass = con.getClass().getClassLoader().loadClass(BLOB_CLASS_NAME);  which is proibably the root cause of the problem (although I have not got around to step-debug this in the container yet to look into that classloader). The CL should probably be configurable, and use con.getClass().getClassLoader() if not configured otherwise explicitly.  Now you probably tell me to use: http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/jdbc/support/nativejdbc/WebSphereNativeJdbcExtractor.html But this is not recommended by IBM (http://www.ibm.com/developerworks/websphere/techjournal/0609_alcott/0609_alcott.html) and I really don't think it will influence which classloader is in use?  At any rate we reverted to using the DefaultLobHandler as this should be supported by the 10g drivers when only using CLOBs and no BLOBs.   ---  **Affects:** 2.0.7  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-02T20:42:08Z","2012-06-19T09:36:23Z"
"","10601","Singleton-scoped @Bean methods behave like prototypes in a Spring DM environment [SPR-5932]","**[David Fogel](https://jira.spring.io/secure/ViewProfile.jspa?name=carrotsalad)** opened **[SPR-5932](https://jira.spring.io/browse/SPR-5932?redirect=false)** and commented  What we are seeing is that when we use `@Configuration-annotated` configuration classes to define our beans, that our singleton beans are instead treated as prototype beans. This means that we get new instances of our singletons for each time they are referenced (!!!).  I have created sample code which demonstrates this broken behavior.  This code, when run as a regular spring-ified java application, (NOT OSGi), works as expected (only ONE instance of Foo and Bar are created).  BUT, when the identical code is run via Spring DM, THREE different instances of Bar are created!  Note: I used a FileSystemXmlApplicationContext to load this when running as a normal java application, and put the config.xml file inside a /META-INF/spring folder when running in Spring dm.  ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=74458  **Attachments:** - [spring-dm-javaconfig-bug.zip](https://jira.spring.io/secure/attachment/15531/spring-dm-javaconfig-bug.zip) (_2.96 kB_)  **Issue Links:** - [SJC-89](https://jira.spring.io/browse/SJC-89) Ensure OSGi / Spring Dynamic Modules compatibility (_**""is duplicated by""**_) - #13912 Java config FactoryBean proxy causes class loader leak - #14941 Concurrent creation of the same Configuration class in different contexts is not thread-safe  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9e0d87c5189cf07f0122b5edfd91321fdf0de013","closed","in: core,","spring-projects-issues","2009-07-11T06:23:02Z","2019-01-11T18:12:50Z"
"","10853","slf4j dependency in spring-orm should be optional [SPR-6185]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6185](https://jira.spring.io/browse/SPR-6185?redirect=false)** and commented   ---  **Affects:** 3.0 RC1","closed","in: core,","spring-projects-issues","2009-10-04T12:06:34Z","2012-06-19T03:43:00Z"
"","10804","ClassCastException in WebRequestDataBinder with MultipartRequest [SPR-6136]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6136](https://jira.spring.io/browse/SPR-6136?redirect=false)** and commented  ClassCastException in WebRequestDataBinder with MultipartRequest.  In bind() method:  ``` if (request instanceof NativeWebRequest) {      Object nativeRequest = ((NativeWebRequest) request).getNativeRequest();      if (nativeRequest instanceof MultipartRequest) {           MultipartRequest multipartRequest = (MultipartRequest) request;           bindMultipartFiles(multipartRequest.getFileMap(), mpvs);      } } ```  should be  ``` if (request instanceof NativeWebRequest) {      Object nativeRequest = ((NativeWebRequest) request).getNativeRequest();      if (nativeRequest instanceof MultipartRequest) {           MultipartRequest multipartRequest = (MultipartRequest) nativeRequest;           bindMultipartFiles(multipartRequest.getFileMap(), mpvs);      } } ```    --- No further details from [SPR-6136](https://jira.spring.io/browse/SPR-6136?redirect=false)","closed","type: bug,","spring-projects-issues","2009-09-20T21:27:42Z","2012-06-19T03:43:06Z"
"","10777","Spring JDBC POM should declare derby dependency is optional [SPR-6109]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6109](https://jira.spring.io/browse/SPR-6109?redirect=false)** and commented  Spring JDBC POM should declare derby dependency is optional  ---  **Affects:** 3.0 M3  **Issue Links:** - #10786 Spring JDBC 3.0.0.M4 maven pom includes derby and derby.client - these should be optional dependencies (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca928944dbbc74325fbb4044892f6169b7dc3738","closed","in: core,","spring-projects-issues","2009-09-14T07:18:15Z","2019-01-11T14:07:20Z"
"","10776","Expose setter for ConversionService to be set in a DataBinder, or publicly available property [SPR-6108]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6108](https://jira.spring.io/browse/SPR-6108?redirect=false)** and commented  Need to be able to avoid the ugly cast in this:  ``` ConfigurablePropertyAccessor accessor = ((AbstractPropertyBindingResult) binder.getBindingResult()) 		.getPropertyAccessor(); accessor.setConversionService(...); ```    ---  **Affects:** 3.0 M3, 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-09-14T03:49:02Z","2012-06-19T03:43:07Z"
"","10770","FrameworkServlet does not need parent to be WebApplicationContext [SPR-6102]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6102](https://jira.spring.io/browse/SPR-6102?redirect=false)** and commented  FrameworkServlet does not need its parent to be WebApplicationContext, but the signature of createWebApplicationContext() mandates it.  It would be a small change, but quite helpful to people embedding a servlet application (e.g. in a test) to allow that method to accept a plain ApplicationContext (as it says it does in the Javadocs)   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c3bf658058dbd6603658c77fdf31b9995b16f3b3, https://github.com/spring-projects/spring-framework/commit/af0a529bb509ce8284fd62b4caca946a0cc24a9a","closed","type: enhancement,","spring-projects-issues","2009-09-11T21:57:55Z","2012-06-19T03:42:58Z"
"","10767","Spring MVC dependency on standard taglibs should be optional [SPR-6099]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-6099](https://jira.spring.io/browse/SPR-6099?redirect=false)** and commented  Spring MVC dependency on standard taglibs should be optional (not every web app is a JSP app).  P.S. I'm talking about the Maven central poms (again) but presumably this applies to ivy and EBR poms.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d3c6fa55f8c4c82866eb037968d774693b4a9a5","closed","type: bug,","spring-projects-issues","2009-09-11T00:27:49Z","2012-06-19T03:43:51Z"
"","10644","Upgrade POMS to JUnit 4.6 [SPR-5976]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5976](https://jira.spring.io/browse/SPR-5976?redirect=false)** and commented  The JUnit version specified in the central POMs (4.5) doesn't work with Spring test any more.  Upgrade to 4.6.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d1fdd8c3ca7ab3702424498454bd7448ab01ec0, https://github.com/spring-projects/spring-framework/commit/97e3b5ca8c24e7954382b572ed30ad7094b107cc","closed","in: core,","spring-projects-issues","2009-08-03T04:36:34Z","2012-06-19T03:43:08Z"
"","10641","Add additional ""query builder"" features to UriTemplate [SPR-5973]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5973](https://jira.spring.io/browse/SPR-5973?redirect=false)** and commented  Add additional ""query builder"" features to UriTemplate.  The UrlTag already duplicates some features of UriTemplate, and I want to get the same features in Freemarker (#10606).  A good starting point would be a common place to get the parameter-appending feature that is needed in the UI.  A method like  ``` public URI expandAndAppend(List parameters) {    ... } ```  would work generically.  The ParameterValue is a new convenience class containing a name and value pair.  The ""append"" piece could also be separated out for use on its own, but the combined method is needed to get the feature needed in UrlTag (replace placeholders and append the query parameters that are not used in replacement).  Convenience methods that allow the user to pass in a Map (in the case where multi-valued parameters are not needed) would also help.  ---  **Affects:** 3.0 M4  **Attachments:** - [UriBuilder.java](https://jira.spring.io/secure/attachment/15582/UriBuilder.java) (_8.38 kB_) - [UriBuilderTests.java](https://jira.spring.io/secure/attachment/15583/UriBuilderTests.java) (_7.44 kB_)","closed","type: enhancement,","spring-projects-issues","2009-07-31T20:15:38Z","2019-01-11T18:14:21Z"
"","10638","Tidy up Maven central POM for spring-webmvc [SPR-5970]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5970](https://jira.spring.io/browse/SPR-5970?redirect=false)** and commented  Lots of stuff not quite working in POM.  Mostly not our fault, but needs careful application of exclusions and profiles to get a version that works OK with Java 6 and 5.  Some versions wrong; some missing dependencies; some over-specified.   ---  **Affects:** 3.0 M4  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/15576/pom.xml) (_7.58 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9016fdbe40e92671d539e1f40711356def66ab3","closed","type: bug,","spring-projects-issues","2009-07-30T05:10:58Z","2012-06-19T03:42:43Z"
"","10637","Tidy up Maven central POM for spring-context-support [SPR-5969]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5969](https://jira.spring.io/browse/SPR-5969?redirect=false)** and commented  Lots of stuff not quite working in POM.   ---  **Affects:** 3.0 M4  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/15575/pom.xml) (_4.26 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d1fdd8c3ca7ab3702424498454bd7448ab01ec0","closed","in: core,","spring-projects-issues","2009-07-30T05:09:27Z","2012-06-19T03:42:58Z"
"","10636","Maven central POM for spring-web has wrong versions of dependencies and a missing dependency [SPR-5968]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5968](https://jira.spring.io/browse/SPR-5968?redirect=false)** and commented  Maven central POM for spring-web has wrong versions of dependencies and a missing dependency.   ---  **Affects:** 3.0 M4  **Attachments:** - [SPR-5968.patch](https://jira.spring.io/secure/attachment/15574/SPR-5968.patch) (_10.41 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/16831794342df314ddefa4158e06130ed384428a","closed","type: bug,","spring-projects-issues","2009-07-30T02:40:57Z","2019-01-11T18:14:46Z"
"","10608","Add FreeMarkerConfigurer that can load the same template both dynamically in development and from classpath in production [SPR-5939]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5939](https://jira.spring.io/browse/SPR-5939?redirect=false)** and commented  Add FreeMarkerConfigurer that can load the same template both dynamically in development and from classpath in production.  The existing configurer allows the developer to choose between /WEB-INF (reloadable) or classpath: (not reloadable) paths for template locations, but actually it is more desirable to be able to do both.  That way a developer can store templates on the claspath (in a JAR) for production use but copy them to /WEB-INF for hot deployment and editing in development.   --- No further details from [SPR-5939](https://jira.spring.io/browse/SPR-5939?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-07-16T20:45:03Z","2012-07-05T06:03:58Z"
"","10607","Add more complete form tag support to FreeMarker macros [SPR-5938]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5938](https://jira.spring.io/browse/SPR-5938?redirect=false)** and commented  The old spring:bind style macros still work, but in JSPs are largely superseded these days by form: tags.  The FreeMarker support would be more complete if it did this as well.   --- No further details from [SPR-5938](https://jira.spring.io/browse/SPR-5938?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2009-07-16T20:40:49Z","2019-01-12T02:37:34Z"
"","10606","Add spring:url feature to FreeMarker macros [SPR-5937]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5937](https://jira.spring.io/browse/SPR-5937?redirect=false)** and commented  Add spring:url feature to FreeMarker macros.  The spring:url tag is nice in JSPs, and while FreeMarker supports JSP tags, they only work in container, so it would be nice to have this feature in the macros (consistent with other taglib features that are ported to spring.ftl).   ---  **Affects:** 3.0 RC3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/32ebf18429a179e6bf416db42ae2d474802369ea","closed","type: enhancement,","spring-projects-issues","2009-07-16T20:37:01Z","2019-01-11T18:12:35Z"
"","10605","spring:url could also provide the servlet base path (for the DispatcherServlet) [SPR-5936]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5936](https://jira.spring.io/browse/SPR-5936?redirect=false)** and commented  spring:url could also provide the servlet base path (for the DispatcherServlet).  Maybe the current behaviour is good as a default but an extra attribute / pattern for the DispatcherServlet path would make it much more portable.  E.g.  ```  ```    ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-07-16T20:35:24Z","2012-06-19T09:36:28Z"
"","10586","DataSourceInitializer and namespace support for creating and populating databases [SPR-5917]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5917](https://jira.spring.io/browse/SPR-5917?redirect=false)** and commented  Can I suggest a DatabasePopulator interface change?  The fact that the main public method takes a Connection is a blocker for re-using this useful interface and its implementations outside the datasource.embedded package.  I would like to have a general purpose DataSourceInitializer, which is pretty close to what the populator does, but not quite.  It would be quite a small refactoring (and timely if we can get it into 3.0.0.RC1) to change the interface to simply populate(), rather than populate(Connection).  Then implementations would change to have a DataSource injected, which could then be either an embedded one or a regular non-embedded DataSource.  Of course it would be easy for users to wrap the DatabasePopulator with an initializer that is configured with a DataSource, but it seems like we are so close to having that feature already, but not quite.   ---  **Affects:** 3.0 M3  **Attachments:** - [SPR-5917.patch](https://jira.spring.io/secure/attachment/15573/SPR-5917.patch) (_30.20 kB_) - [SPR-5917-1.patch](https://jira.spring.io/secure/attachment/15607/SPR-5917-1.patch) (_16.22 kB_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2009-07-11T00:57:36Z","2019-01-11T18:13:01Z"
"","10581","Confusing/wrong error message when @Autowire fails using the wrong @Qualifier [SPR-5912]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5912](https://jira.spring.io/browse/SPR-5912?redirect=false)** and commented  If I `@Autowire` with a `@Qualifier` and spell the bean name wrong, I get this:  ``` ... Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [org.springframework.batch.core.Job] is defined: Unsatisfied dependency of type [interface org.springframework.batch.core.Job]: expected at least 1 matching bean 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:690) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:448) 	... 28 more ```  which looks like there is no bean of the right type.  In fact there is at least one, but not one with the right name.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7a10b7530eb9880cd40bd7b31dc8f4f3bd2d2984","closed","in: core,","spring-projects-issues","2009-07-08T20:54:17Z","2012-06-19T03:42:45Z"
"","10577","Unmatched quotes in documentation samples in SpEL chapter [SPR-5908]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5908](https://jira.spring.io/browse/SPR-5908?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch07s04.html   ---  **Affects:** 3.0 M4","closed","in: core,","spring-projects-issues","2009-07-07T20:11:31Z","2012-06-19T03:44:08Z"
"","10575","EL replacement doesn't work in  value [SPR-5906]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5906](https://jira.spring.io/browse/SPR-5906?redirect=false)** and commented  E.g. try this:  ```    	 		 			 				#{properties['user.name']} 				#{properties['username']} 				#{properties[username]} 				#{properties.username} 			 		 	  	 		 			 				Dave 				Andy 			 		 	   ```  And the property values remain unresolved (as '#{...}').   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3c54d979ec211595e379607a3556e4d79119691, https://github.com/spring-projects/spring-framework/commit/dcb52dbbc17fc9eda8d180eede222247322aa96b","closed","in: core,","spring-projects-issues","2009-07-07T04:34:44Z","2019-01-11T18:11:00Z"
"","10520","Set Maven repositories as non-snapshot [SPR-5851]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5851](https://jira.spring.io/browse/SPR-5851?redirect=false)** and commented  Please mark Maven repositories as non-snapshot.  The poms have \ declarations in them, and there is no explicit flag to set snapshot scanning to off.  This means that any project that depends on Spring and also has snapshot dependencies has to wade through all the Spring-specified repositories looking for updates.  Just add  ```  	false  ```  to all \ elements.   ---  **Affects:** 3.0 M3  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/15581/pom.xml) (_6.08 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d75082b223303036c1198fb2403b2a999ad542a","closed","in: core,","spring-projects-issues","2009-06-21T19:06:25Z","2012-06-19T03:43:54Z"
"","10519","Provide a ContextLoader for WebApplicationContext [SPR-5850]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5850](https://jira.spring.io/browse/SPR-5850?redirect=false)** and commented  Provide a ContextLoader for WebApplicationApplicationContext: some components (e.g. View implementations) are hard or impossible to test without an instance of WebApplicationContext.  ---  **Affects:** 3.0 M3  **Issue Links:** - #9917 Support loading WebApplicationContexts with the TestContext Framework (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-06-21T07:24:07Z","2019-01-11T17:15:52Z"
"","10516","Errors in EL expressions in User Guide [SPR-5847]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5847](https://jira.spring.io/browse/SPR-5847?redirect=false)** and commented  Errors in EL expressions in User Guide.  It would be nice if properties could be de-referenced as in the guide, e.g.  ``` #{jdbcProperties.username} ```  but empirically it only seems to work as  ``` #{jdbcProperties['username']} ```  If EL is supposed to support the first example then I did something wrong?  It would be nice if it did support that (consistent with other similar idioms e.g. in Groovy), and also `jdbcProperties[username]`.  ---  **Affects:** 3.0 M3  **Issue Links:** - #20447 Variable index treated as string literal  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dbdac9fa31edc773642f7d8651c4de14e5d49599, https://github.com/spring-projects/spring-framework/commit/a4b7ce168c16c499642fdebf09044bdec74c766d","closed","in: core,","spring-projects-issues","2009-06-20T21:16:30Z","2019-01-13T07:59:25Z"
"","10515","NullPointerException in GenericConversionService [SPR-5846]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5846](https://jira.spring.io/browse/SPR-5846?redirect=false)** and commented  Caused by: java.lang.NullPointerException at org.springframework.core.convert.service.GenericConversionService.findSuperConverter(GenericConversionService.java:409) at org.springframework.core.convert.service.GenericConversionService.findRegisteredSuperConverter(GenericConversionService.java:384) at org.springframework.core.convert.service.GenericConversionService.getConversionExecutor(GenericConversionService.java:217) at org.springframework.core.convert.service.GenericConversionService.executeConversion(GenericConversionService.java:172) at org.springframework.expression.spel.support.StandardTypeConverter.convertValue(StandardTypeConverter.java:55) at org.springframework.expression.spel.ExpressionState.convertValue(ExpressionState.java:119) at org.springframework.expression.spel.ast.Indexer.getValueInternal(Indexer.java:56) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:54) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:51) at org.springframework.expression.spel.SpelExpression.getValue(SpelExpression.java:66) at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:125) ... 42 more   ---  **Affects:** 3.0 M3","closed","in: core,","spring-projects-issues","2009-06-20T20:59:14Z","2012-06-19T03:43:56Z"
"","10507","Backward compatibility broken with SimpleJdbcOperations.query() methods [SPR-5837]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5837](https://jira.spring.io/browse/SPR-5837?redirect=false)** and commented  Backward compatibility broken with SimpleJdbcOperations.query() methods.  This appeared after M3, but before RC1.  SimpleJdbcOperations method signatures do not refer to ParameterizedRowMapper any more (even though the interface still exists).  This is fine for new code, but if I depend on a library that was compiled with the old signature (e.g. Spring Batch 2.0), I get a NoSuchMethodError at runtime, even if my code doesn't use the method at all.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/11bf19a3b3543a747f99fb327242d0493495cf74","closed","in: core,","spring-projects-issues","2009-06-18T23:37:46Z","2012-06-19T03:43:13Z"
"","10504","Allow HiddenHttpMethodFilter to work with GET [SPR-5834]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5834](https://jira.spring.io/browse/SPR-5834?redirect=false)** and commented  I guess maybe the restriction to only analyse POST requests is to help avoid processing static resources? Or is there some reason I can't guess? Anyway it's annoying to have that restriction hard coded - I would be happy for it to be the default setting, but I really want to use GET to simulate a DELETE from a browser. Is that a possibility?   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-06-17T07:36:56Z","2009-06-18T20:15:56Z"
"","10490","Spring web optional dependencies are not marked as optional in pom.xml [SPR-5820]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5820](https://jira.spring.io/browse/SPR-5820?redirect=false)** and commented  Spring web optional dependencies are not marked as optional in pom.xml.  Hessian, Burlap and Spring OXM seem like obvious candidates for optional dependencies.  There may be others.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1242400789e43b31dbc2b56d260dde717f667d93","closed","type: bug,","spring-projects-issues","2009-06-10T07:30:43Z","2012-06-19T03:44:03Z"
"","10479","jta should be optional dependency of spring-context-support [SPR-5809]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5809](https://jira.spring.io/browse/SPR-5809?redirect=false)** and commented  jta should be optional dependency of spring-context-support. JTA clearl y isn't necessary at runtime, so it should be optional.   --- No further details from [SPR-5809](https://jira.spring.io/browse/SPR-5809?redirect=false)","closed","type: bug,","spring-projects-issues","2009-06-06T07:33:10Z","2012-06-19T03:42:57Z"
"","10473","Quartz dependency in context-support POM should be optional [SPR-5803]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5803](https://jira.spring.io/browse/SPR-5803?redirect=false)** and commented  Forcing people to download Quartz or specifically exclude it is inconsiderate (especially when the dependency is not available in Maven Central).  It should be marked as optional.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c16554e237cddc9561c52ab13a7a51f36e116fe","closed","type: enhancement,","spring-projects-issues","2009-06-04T19:23:37Z","2012-06-19T03:43:54Z"
"","10375","Doc: Namespace handlers cannot be located in classpath with INDEX.LIST is used in jar [SPR-5705]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5705](https://jira.spring.io/browse/SPR-5705?redirect=false)** and commented  Namespace handlers cannot be located in classpath with INDEX.LIST is used in jar and running with ""java -jar"".  If you build a jar file and index the classpath for it as recommended in the JAR file specification, the namespace handlers are only located from the first jar file in the list.  Removing the INDEX.LIST from the jar file and using a Classpath: entry in the manifest instead works fine, as does running with ""java -cp ..."" (not using -jar).   ---  **Affects:** 2.5.6  3 votes, 7 watchers","closed","in: core,","spring-projects-issues","2009-04-29T22:15:10Z","2015-09-22T18:20:30Z"
"","10356","Expose model object in RequestContext with public getter [SPR-5686]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5686](https://jira.spring.io/browse/SPR-5686?redirect=false)** and commented  Expose model object in RequestContext.  Background:  Trying to use Freemarker with Tiles, and I want to manipulate the model from an ""enclosing"" request and, while I can get hold of the RequestContext via the AbstractTemplateView.SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE, but then I can only get the model by using Field.setAccessible(true), e.g.  ``` String contextAttribute = AbstractTemplateView.SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE; RequestContext context = (RequestContext) request 		.getAttribute(contextAttribute); if (context != null) { 	@SuppressWarnings(""unchecked"") 	Map model = (Map) MacroModelInterceptor 			.getField(context, ""model""); 	model.remove(contextAttribute); 	modelAndView.addAllObjects(model); 	request.removeAttribute(contextAttribute); } ```    ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c230c188be4e6b03271617501f7c5fffa4adcf2b","closed","type: enhancement,","spring-projects-issues","2009-04-18T19:28:54Z","2012-06-19T03:43:28Z"
"","10202","TypeConverterDelegate doesn't use its PropertyEditors to convert to String [SPR-5531]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5531](https://jira.spring.io/browse/SPR-5531?redirect=false)** and commented  Despite the fact that SimpleTypeConverter knows in practice how to convert objects to String (through the PropertyEditors it knows about), it doesn't want to use them.  I can hack it by providing a TypeConverter that wraps an existing SimpleTypeConverter, and does this:  if (requiredType.isAssignableFrom(String.class)) { if (typeConverter instanceof PropertyEditorRegistrySupport) { /* * PropertyEditorRegistrySupport is de rigeur with * TypeConverter instances used internally by Spring. If * we have one of those then we can convert to String * but the TypeConverter doesn't know how to.   */   PropertyEditorRegistrySupport registry = (PropertyEditorRegistrySupport) typeConverter;   PropertyEditor editor = registry.findCustomEditor(value.getClass(), null);   if (editor != null) {   if (registry.isSharedEditor(editor)) {   // Synchronized access to shared editor   // instance.   synchronized (editor) {   editor.setValue(value);   result = editor.getAsText();   }   }   else {   editor.setValue(value);   result = editor.getAsText();   }   }   } else {   // maybe use toString as a fallback   }  It's OK like that, but ugly, but uncomfortable to have to use the implementations class directly (PropertyEditorRegistrySupport) when it seems that the TypeConverter could do this itself.    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-02-27T21:55:55Z","2012-06-20T01:09:03Z"
"","10174","PropertyEditor for array ([]) should be able to supply Collection [SPR-5502]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5502](https://jira.spring.io/browse/SPR-5502?redirect=false)** and commented  PropertyEditor for array ([]) should be able to supply Collection.  If I use  \  with  public void setResources(Resource[] resources) { ... }  I get an array of resources which all exist.  If I have  public void setResources(List\ resources) { ... }  then I get nonsense (a List with a single non-existent resource).   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-02-17T21:55:19Z","2012-06-19T09:36:24Z"
"","10093","Infinite loop in bean creation when placeholder used for bean name [SPR-5419]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5419](https://jira.spring.io/browse/SPR-5419?redirect=false)** and commented  If I use a placeholder to create the bean name alias from the name= attribute, there is an infinte loop in the bean creation (Spring never comes back from creating the application context).  Example:  \  \           	                    	     		     		string.value=foo     		string.name=string     		     	       \ If the placeholder is not used for the name= (or if the alias is different from the id) then everything is fine.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb1631f458a822fa4da7b51ea44388344bc55d6c","closed","in: core,","spring-projects-issues","2009-01-19T21:08:14Z","2012-06-19T03:47:09Z"
"","10072","Provide test ContextLoader for @ContextConfiguration that creates a WebApplicationContext [SPR-5399]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5399](https://jira.spring.io/browse/SPR-5399?redirect=false)** and commented  Provide test ContextLoader for `@ContextConfiguration` that creates a WebApplicationContext.  I would like to add a MockServletContext to my test configuration and then load a DispatcherServlet context to check that it initializes OK, at the very least.  I am prevented from doing thiswith a normal generic ContextLoader by #10071, but it strikes me that anyway a loader should be provided to make this a less onerous task to start with.  ---  **Affects:** 2.5.6  **Issue Links:** - #9917 Support loading WebApplicationContexts with the TestContext Framework (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-01-06T07:24:47Z","2019-01-11T16:20:31Z"
"","10071","Ordering of ServletContextAware and ApplicationContextAware callbacks makes testing FreeMarkerView (and similar classes) impossible [SPR-5398]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5398](https://jira.spring.io/browse/SPR-5398?redirect=false)** and commented  Ordering of ServletContextAware and ApplicationContextAware callbacks makes testing servlet aware components impossible.  I want to test a configuration that contains a FreeMarkerView (which is ServletContextAware), so I added a ServletContextAwareProcessor to my test config, with a MockServletContext.  Unfortunately this doesn't work because FreeMarkerView has a base class which is ApplicationContextAware, and it assumes that either the ServletContext is already set **or** the ApplicationContext is an instance of WebApplicationContext, and neither is the case.  But the ServletContext is available, and will eventually be set, so the initialisation is just happening too eagerly.  Is it possible to put it in a more orthodox place (like afterPropertiesSet())?   ---  **Affects:** 2.5.6, 3.0 M1","closed","type: enhancement,","spring-projects-issues","2009-01-06T03:53:34Z","2012-06-19T03:46:54Z"
"","10052","Doc: @Autowired with @Qualifier never matches a bean with autowire-candidate=""false"" [SPR-5379]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5379](https://jira.spring.io/browse/SPR-5379?redirect=false)** and commented  `@Autowired` with `@Qualifier` should be able to inject a bean with autowire-candidate=""false"".  The `@Autowired` annotation in this case is being used more in the sense of ""`@Wired`"" (not really ""auto"" anything, since i have specified the precise bean definition I want with a qualifier).  The bean I want to inject has to be autowire-candidate=""false"" to prevent it from being injected anywhere else.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7aec01bbac39a9f010160f83aadef9656fb97985","closed","in: core,","spring-projects-issues","2008-12-29T01:03:24Z","2021-07-15T09:29:19Z"
"","10037","Implement if() pointcut keyword [SPR-5364]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5364](https://jira.spring.io/browse/SPR-5364?redirect=false)** and commented  Implement if() pointcut keyword.  It seems quite feasible (or why not?) to call the pointcut method for a boolean return value before applying the pointcut expression, just like in AspectJ.   --- No further details from [SPR-5364](https://jira.spring.io/browse/SPR-5364?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2008-12-15T23:27:47Z","2019-01-12T02:38:06Z"
"","10014","ExecutorCompletionService for Spring TaskExecutor [SPR-5341]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5341](https://jira.spring.io/browse/SPR-5341?redirect=false)** and commented  Add TaskExecutorCompletionService.  It would be nice to be able to use the TaskExecutor abstraction in a CompletionService, since it has wider applicability than Executor from java.util.concurrent.  Another very useful feature which can be built in is the ability to throttle the tasks, so that at most N are pending execution at any time, causing the submit() method to block until one completes.   ---  **Attachments:** - [TaskExecutorCompletionService.java](https://jira.spring.io/secure/attachment/14937/TaskExecutorCompletionService.java) (_4.21 kB_) - [TaskExecutorCompletionServiceTests.java](https://jira.spring.io/secure/attachment/14938/TaskExecutorCompletionServiceTests.java) (_2.70 kB_)","closed","type: enhancement,","spring-projects-issues","2008-12-06T06:15:42Z","2012-06-19T03:47:18Z"
"","9898","Scope SPI support for EL binding [SPR-5224]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5224](https://jira.spring.io/browse/SPR-5224?redirect=false)** and commented  Need to have late binding to scope-specific attributes in Spring Batch, e.g.  \ \ \  or  \ \ \   ---  **Issue Links:** - [BATCH-282](https://jira.spring.io/browse/BATCH-282) Make input parameters easier to access from ItemReaders, etc. (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2008-10-21T01:35:56Z","2012-06-19T03:46:47Z"
"","9939","HibernateTemplate class 'find' function doesn't work for List/Collection positioned parameters. [SPR-5266]","**[Darshit Rao](https://jira.spring.io/secure/ViewProfile.jspa?name=darshrao)** opened **[SPR-5266](https://jira.spring.io/browse/SPR-5266?redirect=false)** and commented  Following code doesn't work. String query = ""from TESTTABLE testTable where testTable.testforiegnKey in (:?))""; List foriegnKeys = new ArrayList(); foriegnKeys.add(""1""); foriegnKeys.add(""2""); foriegnKeys.add(""3""); foriegnKeys.add(""4""); getHibernateTemplate().find(query, foriegnKeys);  Reason is find function use ""queryObject.setParameter(i, values[i]);"" to set value which doesn't set List values.  Solution : Call applyNamedParameterToQuery function for find function as well.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-11-03T09:51:59Z","2009-02-12T21:22:55Z"
"","10305","OXM does not permit targetClass and mapping file for CastorMarshaller [SPR-5634]","**[Darren Davison](https://jira.spring.io/secure/ViewProfile.jspa?name=darren.davison)** opened **[SPR-5634](https://jira.spring.io/browse/SPR-5634?redirect=false)** and commented  org.springframework.oxm.castor.CastorMarshaller has an afterPropertiesSet() check that explicitly disallows a targetClass and a mappings location to be set on the same instance.  However, there is at least one use case where this is required: unmarshalling a collection (where the root element in the XML represents some collection instance).  In this case, the targetClass specifies the required collection type, and the mappings are used as normal to instruct castor how to handle the other elements.  In the example here, the unmarshaller would return an ArrayList containing 2 items, where the item class is defined in the mapping location file.  ```    Foo100   Bar200","closed","type: enhancement,","spring-projects-issues","2009-03-30T11:59:46Z","2012-06-19T03:47:47Z"
"","10750","cookieMaxAge field fails in org.springframework.web.servlet.i18n.CookieLocaleResolver [SPR-6082]","**[Daniel Rubio](https://jira.spring.io/secure/ViewProfile.jspa?name=drubio)** opened **[SPR-6082](https://jira.spring.io/browse/SPR-6082?redirect=false)** and commented  upgrading a functioning 2.5 app to the most recent 3.0 (M4) release.  I have the following bean definition that fails in 3.0 M4:  ^M \^M \^M \^M \  When I deploy this in Tomcat 6.20 I get the following error.  SEVERE: Allocate exception for servlet court org.springframework.beans.NotWritablePropertyException: Invalid property 'cookieMaxAge' of bean class [org.springframework.web.servlet.i18n.CookieLocaleResolver]: Bean property 'cookieMaxAge' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:850) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:701) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:78) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:60) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1330) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1060) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:449) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:289) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:286) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:188) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:528) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:716) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:447) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:342) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:308) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) at javax.servlet.GenericServlet.init(GenericServlet.java:212) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1173) at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:809) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:129) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)  I reviewed the docs on M4  http://static.springsource.org/spring/docs/3.0.0.M4/javadoc-api/org/springframework/web/servlet/i18n/CookieLocaleResolver.html  The method is inherited from org.springframework.web.util.CookieGenerator . I saw the source https://src.springframework.org/svn/spring-framework/tags/spring-framework-3.0.0.M4/org.springframework.web/src/main/java/org/springframework/web/util/CookieGenerator.java And the set and getCookieMaxAge methods appears to be there.  Not exactly sure what is the root of this error message/bug.  ---  **Affects:** 3.0 M4  **Issue Links:** - #10738 Differing types for getter/setter of CookieGenerator.cookieMaxAge causes configuring to fail. (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2009-09-04T14:20:44Z","2019-01-12T16:50:13Z"
"","10749","Model.addAttribute not adding values in Interceptors [SPR-6081]","**[Daniel Rubio](https://jira.spring.io/secure/ViewProfile.jspa?name=drubio)** opened **[SPR-6081](https://jira.spring.io/browse/SPR-6081?redirect=false)** and commented  I had an Interceptor using the old ModelAndView.addObject call, the object is added successfully since I can extract it in the view.  However, I've since tried to updgrade to the newer Map.addAttribute, the attribute isn't added, I see a blank position in the view for the value. It appear the addAttribute does not not work with interceptors.  Here is the test Interceptor class, just comment two lines out.  One uses Model the other ModelAndView - * Old ModelAndView.addObject works * Newer Model.addAttribute fails.  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.springframework.web.servlet.handler.HandlerInterceptorAdapter; import org.springframework.ui.Model; import org.springframework.web.servlet.ModelAndView;  public class MeasurementInterceptor extends HandlerInterceptorAdapter {      public boolean preHandle(HttpServletRequest request,             HttpServletResponse response, Object handler) throws Exception {         long startTime = System.currentTimeMillis();         request.setAttribute(""startTime"", startTime);         return true;     }  public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, //Model model) throws Exception { ModelAndView modelAndView) throws Exception { long startTime = (Long) request.getAttribute(""startTime""); request.removeAttribute(""startTime""); long endTime = System.currentTimeMillis(); //model.addAttribute(""handlingTime"", endTime - startTime); modelAndView.addObject(""handlingTime"", endTime - startTime); } }    ---  **Affects:** 3.0 M4","closed","status: declined,","spring-projects-issues","2009-09-04T14:12:43Z","2019-01-12T16:39:08Z"
"","10752","@SessionAttributes to be exposed in model even when not referenced in current handler method [SPR-6084]","**[Daniel Alexiuc](https://jira.spring.io/secure/ViewProfile.jspa?name=justsomejavaguy)** opened **[SPR-6084](https://jira.spring.io/browse/SPR-6084?redirect=false)** and commented  I've discovered some confusing behaviour when trying to use two models in a page.  When I do a GET followed by a POST using this controller...  ```   @Controller @RequestMapping(""/myPage*"") @SessionAttributes(value = {""object1"", ""object2""}) public class MyController {    @RequestMapping(method = RequestMethod.GET)   public String get(Model model) {       model.addAttribute(""object1"", new Object1());       model.addAttribute(""object2"", new Object2());       return ""myPage"";   }    @RequestMapping(method = RequestMethod.POST)   public String post(@ModelAttribute(value = ""object1"") Object1 object1) {       //do something with object1       return ""myPage"";   } } ```  ...object2 gets cleared from the Model. It no longer exists as a `@SessionAttribute` and cannot be accessed on my view page.  However if the signature of the second method is modified to this...  ```   public String post(@ModelAttribute(value = ""object1"") Object1 object1,                    @ModelAttribute(value = ""object2"") Object2 object2) { ```  ...then object2 does not get cleared from the model and is available on my view page.  The javadoc for `@SessionAttributes` says:  > ... attributes will be removed once the handler indicates completion of its conversational session.  But I don't see how I have indicated completion of the conversational session in the first example but not in the second example.  This behaviour seems like a bug - I believe that object2 should remain in the model until I have indicated that the conversational session is complete.  ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=77305  **Issue Links:** - #10739 Fill implicit model with session-backed data for portlets render phase","closed","type: enhancement,","spring-projects-issues","2009-09-06T18:24:42Z","2019-01-11T13:37:52Z"
"","10625","When doing a redirect anything that is not org.springframework.beans.BeanUtils.isSimpleValueType silently gets left off of the redirect query string [SPR-5957]","**[Dane King](https://jira.spring.io/secure/ViewProfile.jspa?name=kingd9)** opened **[SPR-5957](https://jira.spring.io/browse/SPR-5957?redirect=false)** and commented  When doing a redirect anything that is not org.springframework.beans.BeanUtils.isSimpleValueType silently gets left off of the redirect query string. We were using UUIDs in the query string and they left off. We had to extend queryProperties, but there was alot of logic that we needed to duplicate. There are a couple of options that I feel would be better, throwing a parameter not supported exception or a provide a better extension point, maybe making isTypeHandled protected.  ---  **Affects:** 2.5.5  **Issue Links:** - #11462 Provide precise control over the attributes used in a redirect scenario","closed","type: enhancement,","spring-projects-issues","2009-07-27T05:40:30Z","2019-01-11T18:12:17Z"
"","9938","AspectJ aspects not working on first time call [SPR-5265]","**[Dan Luputan](https://jira.spring.io/secure/ViewProfile.jspa?name=dl_dan)** opened **[SPR-5265](https://jira.spring.io/browse/SPR-5265?redirect=false)** and commented  I'm sure this worked with spring 2.0; in 2.5.3 and 2.5.5 is not working anymore.  I have a perthis around aspectj aspect for exception handling. First call on the target never invokes the advice.  The problem is that the advisors chain of the proxy I get the (wrong, I think) order:  1. org.springframework.aop.interceptor.ExposeInvocationInterceptor@a21de3 2. org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher@678646    - org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl$PerTargetInstantiationModelPointcut@1d6d1d4 3. org.springframework.aop.framework.InterceptorAndDynamicMethodMatcher@1b1a66b    - AspectJExpressionPointcut:`@within`(....ExceptionConversion)  The second advisor will fail because the aspect is not materialized yet, and the third one materializes it. This causes the first call to go naked and only subsequent calls are properly intercepted.  Is there a workaround to this or I am missing something?  Thanks.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-11-03T00:45:58Z","2019-01-12T16:27:50Z"
"","10818","Provide advanced configuration mechanism for DispatcherServlet [SPR-6150]","**[Dan Diephouse](https://jira.spring.io/secure/ViewProfile.jspa?name=dandiep)** opened **[SPR-6150](https://jira.spring.io/browse/SPR-6150?redirect=false)** and commented  There are several options you can configure on the DispatcherServlet to control how it deals with handler mappings, but you have to extend the servlet itself. For example, the properties:  detectAllHandlerMappings detectAllHandlerAdapters detectAllHandlerExceptionResolvers detectAllViewResolvers  etc. There should be a way to change these parameters without having to resort to extending the DispatcherServlet.  There should also be documentation on these configuration mechanisms.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-09-25T02:12:16Z","2012-06-19T09:36:29Z"
"","10461","Debian : Spring Community Download page is not crawler friendly [SPR-5791]","**[Damien Raude-Morvan](https://jira.spring.io/secure/ViewProfile.jspa?name=drazzib)** opened **[SPR-5791](https://jira.spring.io/browse/SPR-5791?redirect=false)** and commented  Hi,  I'm Debian Maintainer of SpringFramework package [1]. The package is not currently part of Debian but will be soon (awaiting upload).  In Debian, we have a monitoring system which check upstream website / download site once a day to check if there is a new upstream release of each package. This system, DEHS [2], is fully automated and cannot submit a form to get access to a download area : It can just parse HTML page to get URL links.  - SpringSource Download page [3] couldn't work with this system (need to submit a form, even following the ""No"" button) - Your Amazon S3 webapp [4] can't handle file listing, get ""\\AccessDenied\\"" error  Could you please a download area like sourceforge.net or apache.org ?  [1] http://mentors.debian.net/cgi-bin/sponsor-pkglist?action=details;package=libspring-2.5-java [2] http://dehs.alioth.debian.org/stats.html [3] http://www.springsource.com/download/community?project=Spring%20Framework [4] http://s3.amazonaws.com/dist.springframework.org/release/SPR/  Regards, Damien Raude-Morvan   --- No further details from [SPR-5791](https://jira.spring.io/browse/SPR-5791?redirect=false)","closed","status: invalid,","spring-projects-issues","2009-05-28T03:11:39Z","2019-01-13T21:49:50Z"
"","10108","ReflectionUtils.findMethod does not find methods for Object.class [SPR-5434]","**[Daan Kets](https://jira.spring.io/secure/ViewProfile.jspa?name=blackbit)** opened **[SPR-5434](https://jira.spring.io/browse/SPR-5434?redirect=false)** and commented  ReflectionUtils.findMethod(Class clazz, String methodName) javadoc states:  Attempt to find a Method on the supplied class with the supplied name and no parameters. Searches all superclasses up to Object.  Currently, the implementation does not find any results for methods declared on the Object class. As from the moment when the Object class is reached while searching, the search ends, and no result is returned. So, it's impossible for example to find the public getClass() method using findMethod(\,""getClass""). This is pretty inconsistent with the behaviour of for example the 'getAllDeclaredMethods' method, which does return the getClass method as a result.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-27T00:12:39Z","2012-06-19T03:47:09Z"
"","10355","Annotations in method injection [SPR-5684]","**[D.T.Rajendra Prasad](https://jira.spring.io/secure/ViewProfile.jspa?name=dtrprasad)** opened **[SPR-5684](https://jira.spring.io/browse/SPR-5684?redirect=false)** and commented  I have a abstract class package com.htc.springdemos;  import org.springframework.stereotype.Component; import org.springframework.beans.factory.annotation.Autowired;  import java.util.Calendar; import java.util.GregorianCalendar;  `@Component`(""climate"") public abstract class ClimateService implements ClimateIf {  `@Autowired` protected  abstract TempRecorder getTempRecorder();  static  int    cnt = 0;  public ClimateService() { System.out.println(""ClimateService:""+(++cnt)); }  public String showHumidity() { String ret = """"; Calendar  cal = new GregorianCalendar(); int mon = cal.get(Calendar.MONTH); if(mon=3 && mon7 && mon","closed","type: enhancement,","spring-projects-issues","2009-04-17T20:48:19Z","2012-06-19T09:36:18Z"
"","9947","FileCopyUtils#copy(File, File) should copy meta data too [SPR-5274]","**[CÃ©drik LIME](https://jira.spring.io/secure/ViewProfile.jspa?name=cedrik_lime)** opened **[SPR-5274](https://jira.spring.io/browse/SPR-5274?redirect=false)** and commented  Copying a file should not only copy the content, but its meta-data too. FileCopyUtils#copy(File, File) should at least copy lastModified & readOnly attributes, and eventually POSIX flags if running Java 6.  The method should thus read something like:  ``` public static int copy(File in, File out) throws IOException {      Assert.notNull(in, ""No input File specified"");      Assert.notNull(out, ""No output File specified"");      int result = copy(new BufferedInputStream(new FileInputStream(in)),          new BufferedOutputStream(new FileOutputStream(out)));      out.setLastModified(in.lastModified());      out.setReadOnly( ! in.canWrite());      return result; } ```    ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-11-05T01:50:31Z","2015-09-22T17:34:36Z"
"","10011","AbstractResource.exists() doesn't close connection correctly on a not found http url [SPR-5338]","**[Cyril BontÃ©](https://jira.spring.io/secure/ViewProfile.jspa?name=cbonte)** opened **[SPR-5338](https://jira.spring.io/browse/SPR-5338?redirect=false)** and commented  Calling UrlResource.exists() on a URL that doesn't exist on the distant HTTP server leaves the connection in CLOSE_WAIT state, which can cause Deny of Service (Too many open files). the issue is located in this code : (part of AbstractResource.java) public boolean exists() { ... try { InputStream is = getInputStream(); is.close(); return true; } catch (Throwable isEx) { return false; } ... and UrlResource.getInputStream() contains : public InputStream getInputStream() throws IOException { URLConnection con = this.url.openConnection(); con.setUseCaches(false); return con.getInputStream(); }  => on 404 status (for example), con.getInputStream() throws a FileNotFoundException, so is.close() is not called.  A quick fix could be to override AbstractResource.exists() in UrlResource and not use UrlResource.getInputStream() : public boolean exists() { // Try file existence: can we find the file in the file system? try { return getFile().exists(); } catch (IOException ex) { // Fall back to stream existence: can we open the stream? try { URLConnection con = this.url.openConnection(); con.setUseCaches(false); try { InputStream is = con.getInputStream(); is.close(); } catch (Throwable isEx) { return false; } finally { // Close the HTTP connection if (con instanceof HttpURLConnection) { ((HttpURLConnection) con).disconnect(); } } return true; } catch (Throwable conEx) { return false; } } }   ---  **Affects:** 2.0.8, 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8651a88ecac9d6e9f2cda6100032666705fb96b","closed","type: bug,","spring-projects-issues","2008-12-03T23:20:42Z","2012-06-19T03:46:39Z"
"","10822","add setRole() attributes to PropertyValues (not just BeanDefinitions) [SPR-6154]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6154](https://jira.spring.io/browse/SPR-6154?redirect=false)** and commented  Currently, BeanDefinition support roles (which are picked by the tools) but it would be nice to have these extended onto PropertyValues as well to avoid for example, exposing settings that are not relevant to the user.   ---  **Affects:** 3.0 RC1","closed","type: enhancement,","spring-projects-issues","2009-09-26T22:14:03Z","2015-09-22T17:34:35Z"
"","10760","mention the difference between mvn central and EBR artifacts [SPR-6092]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6092](https://jira.spring.io/browse/SPR-6092?redirect=false)** and commented  It would be nice/useful to have this topic clarified directly in the Spring reference documentation: http://static.springsource.org/spring-batch/downloads.html http://static.springsource.org/spring-webflow/docs/2.0.x/reference/html/ch01s06.html http://static.springsource.org/spring-webflow/docs/2.0.x/reference/html/ch01s05.html   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fae06dc156250ebea80594f4ca15ffd32e8f3c4b, https://github.com/spring-projects/spring-framework/commit/ebd15e32876e0266c57faaf77ff66987e9bf813a, https://github.com/spring-projects/spring-framework/commit/d1dfa873b7ca4880fcdacf2ffe3dba3636b654c8","closed","type: documentation,","spring-projects-issues","2009-09-08T21:57:41Z","2012-06-19T03:43:44Z"
"","10729","upgrade to CGLIB 2.2 [SPR-6061]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-6061](https://jira.spring.io/browse/SPR-6061?redirect=false)** and commented  CGLIB 2.2 has been out for a while and seems to be backwards compatible with cglib 2.1   ---  **Affects:** 3.0 M4","closed","type: enhancement,","spring-projects-issues","2009-09-01T19:48:56Z","2012-06-19T03:43:56Z"
"","10662","The release archive contains an unecessary .zip file of the contents under the reference doc directories html and html-single [SPR-5994]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5994](https://jira.spring.io/browse/SPR-5994?redirect=false)** and commented  html and html-single folder contain a jar of themselves in the docs build - this seems to be an oversight.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ae8be05d1da7d889f4e9dbded15f43f282dd29e","closed","type: documentation,","spring-projects-issues","2009-08-09T22:20:05Z","2012-06-19T03:43:00Z"
"","10661","notice.txt should contain a different email [SPR-5993]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5993](https://jira.spring.io/browse/SPR-5993?redirect=false)** and commented  the emails in notice.txt should be replaced with enquiries@springsource.com :)   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b96fe8b5db0d7d5eb2f357ca1e2c9ee81feafe3","closed","type: enhancement,","spring-projects-issues","2009-08-09T22:18:49Z","2012-06-19T03:43:00Z"
"","10599","NPE in FileEditor [SPR-5930]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5930](https://jira.spring.io/browse/SPR-5930?redirect=false)** and commented  ``` java.lang.NullPointerException 	at org.springframework.beans.propertyeditors.FileEditor.setAsText(FileEditor.java:96) 	at org.springframework.beans.TypeConverterDelegate.doConvertTextValue(TypeConverterDelegate.java:358) 	at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:334) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:168) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:101) 	at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:354) ```  The following lines seems to be of blame:  ``` // Non URLs will be treated as relative paths if the resource was not found if(ResourceUtils.isUrl(text) || resource.exists()) {      try {           setValue(resource != null ? resource.getFile() : null);      } ```    ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/68363f17a796e174012d2de99070e39a205b3ca7","closed","in: core,","spring-projects-issues","2009-07-15T01:36:27Z","2012-06-19T03:42:49Z"
"","10554","support for configurations with a location-less schema [SPR-5884]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5884](https://jira.spring.io/browse/SPR-5884?redirect=false)** and commented  Currently, one needs to define a schema location for the schema definition to be properly resolved - so for example a definition like this:  ```xml   ```  would fail as the namespaces would not resolve. Adding  ```xml  ```  would solve the problem.  Out of the box, we could provide defaults for the known namespace by using a dedicated DocumentLoader (see the one used in Spring DM for the blueprint spec as an example). I think this could be handy and solve the issues that some beginners have when approaching Spring.  What do you think?   ---  **Affects:** 3.0 M3  **Attachments:** - [BlueprintDocumentLoader.java](https://jira.spring.io/secure/attachment/15515/BlueprintDocumentLoader.java) (_2.08 kB_)","closed","type: enhancement,","spring-projects-issues","2009-06-29T22:25:32Z","2012-06-19T02:28:25Z"
"","10553","long running init/destroy methods should not 'lock' the singleton registry [SPR-5883]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5883](https://jira.spring.io/browse/SPR-5883?redirect=false)** and commented  Assume the following definition  ```xml  ```  where init() is equivalent to:  ``` while(true) {} ```  Basically, for some reason the init method will never return (in time). The context is never fully initialized. Assume now that we want to close it - the moment we call getBeansOfType or anything that touches isSingleton() method (or the singleton registry), we are blocked since we're waiting for the lock used during the ""badBean"" creation.  Can we improve the locking semantics so the lock is acquired only when a singleton is fully initialized and potentially put it into a queue in the meantime? That is, rather then holding the singleton global lock, a fine grained lock would be used for each singleton during creation (potentially the singleton itself) and the registry lock only when saving, reading or removing the singleton from the singleton map.   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-06-29T22:16:02Z","2015-09-22T17:34:39Z"
"","10552","accessibility feature on bean definitions [SPR-5882]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5882](https://jira.spring.io/browse/SPR-5882?redirect=false)** and commented  In some environments, it makes sense to use only publicly accessible methods(factory methods), constructors or classes. In other words, the usage of setAccessible() should be forbidden when using XML configurations (i.e. declaring a configuration outside the target classes as opposed to annotations which are bound to them). It would be useful to have such a flag (shouldUseAccessible()) available on bean definitions so the parsers can define this behaviour when needed. When set, the container would just disregard any non-public reflection items that would otherwise consider.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7eabd2da563a4e95928e89f72f7a207804eef0ab","closed","type: enhancement,","spring-projects-issues","2009-06-29T22:11:07Z","2012-06-19T03:44:11Z"
"","10550","primitive vs wrapper objects abiguity inside the container [SPR-5881]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5881](https://jira.spring.io/browse/SPR-5881?redirect=false)** and commented  The container could be more explicit about its treatment of primitive vs wrapper objects. Consider the following example:  ``` Foo(Boolean bool) Foo(boolean bool) ```  and the configuration  ```xml                true       ```  The Boolean constructor is called instead of the primitive one since the primitives are always wrapped at runtime. Considering the red-herring that primitives are, it would be saner to actually get an exception as the case is ambiguous - both constructor apply and it's unclear who should be used. The work-around for people that depend on this behaviour is to specify a clear type on the constructor arg:  ```xml .... ```  ---  **Affects:** 3.0 M3  **Issue Links:** - #10486 support non-lenient constructor injection","closed","type: enhancement,","spring-projects-issues","2009-06-29T22:05:52Z","2019-01-11T17:17:39Z"
"","10546","ManagedProperties could preserve declaration order [SPR-5877]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5877](https://jira.spring.io/browse/SPR-5877?redirect=false)** and commented  As part of the RFC 124 spec, a lot of the metadata is ordered to preserve the declaration structure. ManagedProperties uses the Properties class internally which unfortunately does not obey this contract. I've attached a class that builds on ManagedProperties and uses delegation to a linked hash map to enforce the ordering.   ---  **Affects:** 3.0 M3  **Attachments:** - [OrderedManagedProperties.java](https://jira.spring.io/secure/attachment/15513/OrderedManagedProperties.java) (_4.73 kB_)","closed","type: enhancement,","spring-projects-issues","2009-06-28T19:56:10Z","2015-09-22T17:34:38Z"
"","10530","RuntimeBeanNameReference provides incorrent equals [SPR-5861]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5861](https://jira.spring.io/browse/SPR-5861?redirect=false)** and commented  Consider the following definition:  ```xml","closed","in: core,","spring-projects-issues","2009-06-23T21:43:10Z","2019-01-12T16:27:00Z"
"","10513","constructor resolution fails when using primitive arrays [SPR-5844]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5844](https://jira.spring.io/browse/SPR-5844?redirect=false)** and commented  Consider the following bean:  ``` class Foo {         private obj; 	public Foo(int[] array) { 		this.obj = array; 	}  	public Foo(float[] array) { 		this.obj = array; 	}  	public Foo(short[] array) { 		this.obj = array; 	} ... } ```  and the following config:  ```xml  	 		 			1 		 	  ```  The container fails with the following exception:  ``` org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'primitiveArray' defined in class path resource  [/org/springframework/osgi/blueprint/config/component-subelements.xml]:  Unsatisfied dependency expressed through constructor argument with index 0 of type [int[]]: Ambiguous constructor argument types -  did you specify the correct bean references as constructor arguments? 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:602) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:187) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:948) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:863) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:467) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:436) 	at java.security.AccessController.doPrivileged(Native Method) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:407) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:276) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:273) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:175) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:495) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:716) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383) 	at org.springframework.osgi.blueprint.metadata.BaseMetadataTest.setUp(BaseMetadataTest.java:49) 	at junit.framework.TestCase.runBare(TestCase.java:128) 	at junit.framework.TestResult$1.protect(TestResult.java:106) 	at junit.framework.TestResult.runProtected(TestResult.java:124) 	at junit.framework.TestResult.run(TestResult.java:109) 	at junit.framework.TestCase.run(TestCase.java:120) 	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) ```    ---  **Affects:** 3.0 M3  **Attachments:** - [spr5844.txt](https://jira.spring.io/secure/attachment/15519/spr5844.txt) (_2.01 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf29d1c367683fcb5159e2ea2721b81eb7925a00","closed","in: core,","spring-projects-issues","2009-06-20T08:08:40Z","2012-06-19T03:43:12Z"
"","10487","support the new conversion system into the core container APIs [SPR-5817]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5817](https://jira.spring.io/browse/SPR-5817?redirect=false)** and commented  The new conversion system introduced in M3 and refined in the trunk is currently separate from the existing property editors. Registration facilities as well as core injection classes (such as BeanWrapper) rely still on the old PropertyEditors making the new system unsuable w/o some sort of conversion. For Spring DM 2.0 purposes, relying on the new conversion system in the core container, becomes a mandatory requirement considering the current Blueprint spec.   ---  **Affects:** 3.0 M3  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-09T21:54:55Z","2012-06-19T03:44:00Z"
"","10486","support non-lenient constructor injection [SPR-5816]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5816](https://jira.spring.io/browse/SPR-5816?redirect=false)** and commented  Currently, for constructor injection the container assumes a default type of String for values injected. Consider the following class:  Foo(String s) {} Foo(Boolean b) {} \ \ \  Currently Spring will pick the first (String) constructor - arguably the second one is also valid. It would be useful to have a flag or some means (even programatically) to change this behaviour so when more then one constructor are found suitable, an exception is raised.  ---  **Affects:** 3.0 M3  **Issue Links:** - #10550 primitive vs wrapper objects abiguity inside the container  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e2797153bf3d4eb7fbc679907dc06700c0595f4, https://github.com/spring-projects/spring-framework/commit/a9254b34d19237f5fde7ceedec2126b08cf48e4d","closed","type: enhancement,","spring-projects-issues","2009-06-09T21:51:12Z","2019-01-11T17:14:30Z"
"","10469","GenericApplicationListenerAdapter#getGenericEventType as a general purpose utility [SPR-5799]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5799](https://jira.spring.io/browse/SPR-5799?redirect=false)** and commented  The introduction of generified listeners is nice but framework extenders that take this route need (due to the way generics are implemented) to do type filtering similar to GenericApplicationListenerAdapter. It would be nice to have this functionality opened to the main user based as some sort of static method.   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-06-02T03:37:58Z","2012-06-19T03:43:23Z"
"","10365","Allow an @ModelAttribute method to be invoked after the @RequestMapping method [SPR-5695]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5695](https://jira.spring.io/browse/SPR-5695?redirect=false)** and commented  `@ModelAttribute` is used for common (static) data and is used before the request is passed to the controller. It would nice to be able to use the same annotation after the handling process as well, to take care of common request data. The idea is to isolate the common model functionality in a separate method (such as dealing defaults) and leave the controller to focus only on the dynamic behaviour.  An example of handling the initial request and initializing defaults (if ModelAttribute would be used after) would be:  ```java @ModelAttribute(""bundleList) List bundleList(@ModelAttribute(""selection"")  SelectionCommand selectionCommand) {     if (selectionCommand.getDisplayChoice() == null)          selectionCommand.setDisplayChoice(BundleListingOptions.NAME);    // display bundles using the display choice... } ```  In this case, if `@ModelAttribute`  would be used after the controller, the method could inspect the parameters and populate the model map itself (currently this needs to be handled in the controller, i.e.:  ```java if (selection ...) {   model.addAttribute(""bundleList"", listBundles()); }) ```  To be backwards compatible, the annotation could have a new parameter added to it (an enum) that can indicate when the binding should occur, before or after the handler invocation.  ---  **Affects:** 2.5.6  **Issue Links:** - #10965 Support for `@ModelAttribute` interdependency  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-23T05:08:41Z","2019-01-13T08:00:01Z"
"","10350","improve thread-safety for entity/namespace resolvers [SPR-5679]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5679](https://jira.spring.io/browse/SPR-5679?redirect=false)** and commented  PluggableSchemaResolver and DefaultNamespaceHandlerResolver can be used in multi-threaded environments which can result in subtle threading problems w/o proper synchronization. The attached patch tries to address this problem.   ---  **Affects:** 3.0 M2  **Attachments:** - [simple-patch.diff](https://jira.spring.io/secure/attachment/15319/simple-patch.diff) (_3.73 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/10d8abea3ba2f58c4171c0944614cff08189ce5e","closed","type: enhancement,","spring-projects-issues","2009-04-16T03:37:24Z","2012-06-19T03:47:23Z"
"","10274","framework test suite fails on non-Sun VMs [SPR-5603]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5603](https://jira.spring.io/browse/SPR-5603?redirect=false)** and commented  Several users reported that due to the differences in behaviour between various VMs, the Spring test suite fails on non-Sun VM. A mentioned cause was the different order in which items are returned by the reflection API.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-03-23T05:16:31Z","2015-09-22T17:34:35Z"
"","10273","Eager validation for missing destroy methods [SPR-5602]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5602](https://jira.spring.io/browse/SPR-5602?redirect=false)** and commented  Currently, destroy methods are being discovered and invoked during destruction and any validation errors are only logged. The behaviour is different from init method which are validated at startup. An improvement would be to have the same behaviour for destroy methods as well - i.e. incorrect or missing methods would throw exceptions at startup (rather then at shutdown).   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bcf6f23225845df01be5a75e052fc58cf6209889","closed","type: enhancement,","spring-projects-issues","2009-03-23T05:09:19Z","2012-06-19T03:47:25Z"
"","10233","metadata clients cannot identify the source of a value type [SPR-5562]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5562](https://jira.spring.io/browse/SPR-5562?redirect=false)** and commented  Another metadata request. Consider the following example: \ \0.0\ \1.0\ \  The parser stores the list value-type into each of the specified values if not type is specified. This is equivalent to: \ \0.0\ \1.0\ \  The problem is that it clients relying on the metadata cannot determine wether the type has been specified on the value or on the list. A quick solution would be to add another field to TypedStringValue (such as specifiedValue) and store there any value specified. The container would work as it is, relying on the value type (which is the specified one or, if none is specified, the default one).  Thanks,  ---  **Affects:** 2.5.6  **Issue Links:** - #10227 xml value-type hard to determine for list/set or maps from the metadata  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b5812da204ef89623b354a543e02896ce44a546","closed","type: enhancement,","spring-projects-issues","2009-03-10T20:53:16Z","2019-01-11T17:03:49Z"
"","10227","xml value-type hard to determine for list/set or maps from the metadata [SPR-5556]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5556](https://jira.spring.io/browse/SPR-5556?redirect=false)** and commented  Through XML it is possible to specify a default value type for list, sets and for a map keys and values. However, the parser doesn't store this information in the metadata and just uses it internally. The only workaround for the moment, is for clients to reparse the XML nodes, providing they have access to them. A quick solution would be to add another field to ManagedLists/Sets/Maps to store this information (i.e. defaultTypeClassName). This can be done in BeanDefinitionDelegate class, in methods parseList/Set/MapElement  ---  **Affects:** 2.5.6  **Issue Links:** - #10233 metadata clients cannot identify the source of a value type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b5812da204ef89623b354a543e02896ce44a546","closed","type: enhancement,","spring-projects-issues","2009-03-09T19:43:51Z","2019-01-11T16:59:59Z"
"","10225","ConstructorArgumentValues returns collections with different order [SPR-5554]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5554](https://jira.spring.io/browse/SPR-5554?redirect=false)** and commented  ConstructorArgumentValues internally uses two collections - a map for indexed arguments and a linked list for unindexed ones. The problem is that the list returns the constructor arguments in the XML defined order while the map doesn't. This is inconsistent for the caller which has no way to discover the declaration order for the indexed arguments. The fix is trivial - the HashMap needs to be changed to a LinkedHashMap to preserve the order (a change which is backwards compatible).   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/423c4113eebbe776a4aabc0297d130ef02006db4","closed","type: enhancement,","spring-projects-issues","2009-03-09T05:52:52Z","2012-06-19T03:46:51Z"
"","10214","add support for arrays inside the xml configuration ( element) [SPR-5543]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5543](https://jira.spring.io/browse/SPR-5543?redirect=false)** and commented  Please add support for \ to the beans schema. An example definition would like this:    \ \ 	  \1\ \2\ \3\ \5\ \8\ \ \ \ \ \one\ \two\ \three\ \five\ \eight\ \ \ \ It would be nice if the array could try to determine the its type automatically (i.e. check the type of its elements and determine the lowest common class). However, this might be problematic when conversion is involved so maybe it's best for now to require the array type.   ---  **Affects:** 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b5812da204ef89623b354a543e02896ce44a546","closed","type: enhancement,","spring-projects-issues","2009-03-03T23:12:38Z","2012-06-19T03:47:20Z"
"","10211","incorrect error message when arg conversion fails for factory-method [SPR-5540]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5540](https://jira.spring.io/browse/SPR-5540?redirect=false)** and commented   \   works fine. However   \   throws the following exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'nan' defined in class path resource [mixed-rfc124-beans.xml]: No matching factory method found: factory method 'valueOf' at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:417) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:903) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:817) at ...  I think the problem lies in ConstructorResolver, around line 369, where the found methods are checked against the resolved arguments. Since in my case the conversion fails, the method doesn't match and thus the exception is thrown. The type of the argument seems to be ignored (probably for autowiring purposes). Additionally, the method search could be improved by using ReflectionUtils and using the method name and argument type to find the best match. The problem becomes more complex if there is no type match in which case the conversion scenario needs to be applied.   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-03-02T21:41:45Z","2012-06-19T03:47:34Z"
"","10087","CglibMethodInvocation fields are not accessible by subclasses [SPR-5413]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5413](https://jira.spring.io/browse/SPR-5413?redirect=false)** and commented  Currently, CglibMethodInvocation provides a protected method but has private fields. Due to the visibility of the field, reusing the CGLib MethodProxy for faster invocation is impossible (w/o reflection) by subclasses. An example would be routing the invocation to a different target. Since the MethodInvocation contract (and implementations) do not allow changing the target, one has to use reflection w/o reusing the existing infrastructure.  A solution would be either providing getters or making the fields protected (which should give some minor performance improvement).   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-14T23:13:25Z","2012-06-18T12:44:38Z"
"","10074","AnnotationBeanConfigurerAspect is created as a singleton and cannot be shared across multiple contexts [SPR-5401]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5401](https://jira.spring.io/browse/SPR-5401?redirect=false)** and commented  Reported at: http://forum.springframework.org/showthread.php?t=59567 http://forum.springframework.org/showthread.php?t=65205  ""The aspect ""org.springframework.beans.factory.aspectj.Annotat ionBeanConfigurerAspect"" is instantiated only once as singleton. Spring calls the setter for the Beanfactory property of the Aspect for each ApplicationContext with  entry. The last one who gets initialized wins. The Beans from the others Contexts can't get initialized.""  ---  **Affects:** 2.5.5  **Issue Links:** - #9829 Support use of `@Configurable` mechanism across multiple OSGi bundles (_**""duplicates""**_) - #9829 Support use of `@Configurable` mechanism across multiple OSGi bundles (_**""is duplicated by""**_)  5 votes, 7 watchers","closed","in: core,","spring-projects-issues","2009-01-07T19:11:28Z","2019-01-13T08:01:30Z"
"","9966","PropertyValue does not copy the converted semantics of a given pv [SPR-5293]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5293](https://jira.spring.io/browse/SPR-5293?redirect=false)** and commented  Constructor PropertyValue(PropertyValue) does not copy all the properties of the given pv. In my case, the given pv is converted already which means the converted flag is set to true. However, the constructor does not copies this field (though it does copy conversionNecessary which is package protected)  which means the property gets converted again on the next run. Additionally, the converted value is ignored as well. Not sure what's the relationship between resolvedTokens and convertedValue but the two should be synchronized somehow.  (I've attached a patch with a trivial fix)   ---  **Affects:** 2.5.6  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/14858/patch.txt) (_852 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46cbaa9729903647b844c14de664efc7538f1d2c","closed","type: enhancement,","spring-projects-issues","2008-11-12T22:50:25Z","2012-06-19T03:47:26Z"
"","9881","configure PropertyEditorRegistry from an existing beanFactory  [SPR-5208]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5208](https://jira.spring.io/browse/SPR-5208?redirect=false)** and commented  It would helpful to be able to retrieve the PropertyEditor/PropertyEditorRegistrar configuration from a configured beanFactory and copy it to new PropertyEditorRegistry, outside the control of the bean factory. For example, it would be nice to be create a BeanWrapper and initialize it with the customeditor declared in a bean factory (something that the BeanFactory does internally for its own usage):  BeanWrapper beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(instance) BeanFactoryUtil.initConverter(beanWrapper, BeanFactory) ...  Thanks,   ---  **Affects:** 2.5.5  **Issue Links:** - [OSGI-379](https://jira.spring.io/browse/OSGI-379) add support for managed-service element","closed","type: enhancement,","spring-projects-issues","2008-10-09T23:36:54Z","2012-06-19T03:47:08Z"
"","9876","extend property-placeholder namespace definition [SPR-5203]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5203](https://jira.spring.io/browse/SPR-5203?redirect=false)** and commented  Hi Juergen,  In Spring DM we can read properties (that can be fed to the property placeholder) from various APIs and would like to pass them directly to the property-placeholder:    I tried to use the p: namespace handler to pass this directly but it's not possible (since the attributes are not opened). Can you please consider extending the attributes or adding a properties attribute as well? Additionally, the entry could contain an inner declaration for the loaded properties:   \  or   \  The later example is similar to specifying location but the former cannot be replicated.  Thanks,   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-10-08T01:56:29Z","2012-06-19T03:47:31Z"
"","10077","AbstractTestNGSpringContextTests: Spring beans not available within @BeforeTest methods [SPR-5404]","**[CN Yee](https://jira.spring.io/secure/ViewProfile.jspa?name=yeecn)** opened **[SPR-5404](https://jira.spring.io/browse/SPR-5404?redirect=false)** and commented  Spring beans are not available within `@BeforeTest` methods with TestNG tests, as follows:  ``` @ContextConfiguration(""/applicationContext.xml"") public class Testing extends AbstractTestNGSpringContextTests {  	@Autowired 	SessionFactory sessionFactory;  	@Test 	public void testMe() { 		Session s = sessionFactory.openSession(); // This is OK 	} 	 	@BeforeTest   	public void beforeTest() {         	 Session s = sessionFactory.openSession(); // This give NullPointerException 	} } ```  ---  **Affects:** 2.5.6, 3.0.5  **Issue Links:** - #8750 Should AbstractTestNGSpringContextTests use `@BeforeSuite` instead of `@BeforeClass`? (_**""duplicates""**_)  5 votes, 4 watchers","closed","status: duplicate,","spring-projects-issues","2009-01-11T13:12:51Z","2019-01-13T08:01:29Z"
"","10392","The JDBC bundle has a non-optional import of org.hsqldb [SPR-5722]","**[Christopher Frost](https://jira.spring.io/secure/ViewProfile.jspa?name=cfrost)** opened **[SPR-5722](https://jira.spring.io/browse/SPR-5722?redirect=false)** and commented   ---  **Affects:** 3.0 M3","closed","type: bug,","spring-projects-issues","2009-05-07T02:52:55Z","2019-01-13T21:50:06Z"
"","10046","@PathVariable doesn't always work without the value specified in the use of the annotation [SPR-5373]","**[Christopher Bartling](https://jira.spring.io/secure/ViewProfile.jspa?name=cebartling)** opened **[SPR-5373](https://jira.spring.io/browse/SPR-5373?redirect=false)** and commented  When using the `@PathVariable`, we have found that we sometimes throw an exception when the `@PathVariable` is not used with a value...  `@RequestMapping`(value = ""/admin/{username}"", method = RequestMethod.GET) public String index(`@PathVariable` String username, ModelMap map) { ... }  sometimes results in the following exception being thrown...  java.lang.IllegalStateException: No variable name specified for `@PathVariable` argument of type [java.lang.String], and no parameter name information found in class file either. org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.resolvePathVariable(AnnotationMethodHandlerAdapter.java:664) org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:246) org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:134) org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:331) org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:318) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:861) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:793) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:578) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:503) javax.servlet.http.HttpServlet.service(HttpServlet.java:617) javax.servlet.http.HttpServlet.service(HttpServlet.java:717)  Adding the value to the annotation, like so...  `@RequestMapping`(value = ""/admin/{username}"", method = RequestMethod.GET) public String index(`@PathVariable`(""username"") String username, ModelMap map) { ... }  seems to solve the problem.  However, others may be perplexed if they hit this, so I'm writing it up as an issue.  ---  **Affects:** 3.0 M1  **Issue Links:** - #10130 `@RequestParam` is work inconsistent among differecen platform.","closed","status: declined,","spring-projects-issues","2008-12-22T03:42:14Z","2019-01-13T08:01:45Z"
"","10610","Finding class by autowiring inside a deployt jar  [SPR-5941]","**[Christoph Thodte](https://jira.spring.io/secure/ViewProfile.jspa?name=thodte)** opened **[SPR-5941](https://jira.spring.io/browse/SPR-5941?redirect=false)** and commented  Hello,  the problem is:  I realize an application with swt and spring. I use annotation config like:     When I start the application in my development enviroment all looks fine but when I export it to an executable jar file the starting process failed.  During starting the jar file the the log message:  2009-07-20 09:37:42,759 DEBUG [org.springframework.core.io.support.PathMatchingResourcePatternResolver] Resolved location pattern [classpath*:de/xxx/**/*.class] to resources [] 2009-07-20 09:37:42,760 DEBUG [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] Loaded 4 bean definitions from location pattern [client-services.xml]  I think he found the xml file inside the jar because it founds the base-package and try to find the classes for autowiring. But he didn't find any classes inside the jars to complete the autoconfiguration. In my development enviroment it find the classes. The Spring-Container doesn't find the classes with annotations inside the jar.  Regards Christoph   ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?p=251223","closed","in: core,","spring-projects-issues","2009-07-19T19:56:51Z","2019-01-12T05:33:17Z"
"","10787","Spring 3.0.0.M4 appears to use a mix of both commons-logging and slf4j - one logging facade should be used consistently [SPR-6119]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-6119](https://jira.spring.io/browse/SPR-6119?redirect=false)** and commented  This might just be a bug in the generated maven poms.  I haven't scanned all of the source to see if any code is actually using slf4j.  Maven reports that spring-orm has the following dependency: org.slf4j:slf4j-jdk14:jar:1.5.2:compile.  There are two issues with this:  1) All of the other spring modules are using commons-logging as the logging facade.  Logging in Java is already a bit of a mess with more than 3 wide-spread logging frameworks, plus countless one-offs (don't get me started :) ).  It seems like it's in everyone's best interest to stick to one facade throughout all of the spring modules.  2) If slf4j is a legitimate dependency, then the compile time dependency should be slf4j-api.  Consumers of spring modules get to plugin in the specific bridge applicable to their project.  As it's configured, maven users have to exclude this dependency if they're not ultimately using jdk14 logging.  See http://www.slf4j.org/faq.html#maven2 for a brief FAQ.  If you're considering switching from commons-logging to slf4j, I think it's a good move, as long as it's done wholesale.  Thanks for the great work.   ---  **Affects:** 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c6cd1a528e8acc657c4419c1a4b68e632703b802, https://github.com/spring-projects/spring-framework/commit/cd1df84d7d59af6661648820dce8ffc6b800b58c  1 votes, 0 watchers","closed","type: bug,","spring-projects-issues","2009-09-16T10:59:07Z","2012-06-19T03:44:04Z"
"","10786","Spring JDBC 3.0.0.M4 maven pom includes derby and derby.client - these should be optional dependencies [SPR-6118]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-6118](https://jira.spring.io/browse/SPR-6118?redirect=false)** and commented  Spring JDBC 3.0.0.M4 maven pom includes derby and derby.client - these should be optional dependencies.  Here is the relevant output from mvn dependency:tree...  [INFO] +- org.springframework:spring-orm:jar:3.0.0.M4:compile [INFO] |  +- org.slf4j:slf4j-jdk14:jar:1.5.2:compile [INFO] |  +- org.springframework:spring-beans:jar:3.0.0.M4:compile [INFO] |  +- org.springframework:spring-core:jar:3.0.0.M4:compile [INFO] |  |  \- org.springframework:spring-asm:jar:3.0.0.M4:compile [INFO] |  +- org.springframework:spring-jdbc:jar:3.0.0.M4:compile **[INFO] |  |  +- org.apache.derby:com.springsource.org.apache.derby:jar:10.5.1000001.764942:compile** **[INFO] |  |  \- org.apache.derby:com.springsource.org.apache.derby.client:jar:10.5.1000001.764942:compile** [INFO] |  \- org.springframework:spring-tx:jar:3.0.0.M4:compile [INFO] |     +- aopalliance:aopalliance:jar:1.0:compile [INFO] |     +- org.springframework:spring-aop:jar:3.0.0.M4:compile [INFO] |     \- org.springframework:spring-context:jar:3.0.0.M4:compile [INFO] |        \- org.springframework:spring-expression:jar:3.0.0.M4:compile  These dependencies should be configured as \true\ since they're not required for regular usage of spring-jdbc.  ---  **Affects:** 3.0 M4  **Issue Links:** - #10777 Spring JDBC POM should declare derby dependency is optional (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2009-09-16T10:39:51Z","2019-01-12T16:50:11Z"
"","10325","Consider using javassist for proxy generation [SPR-5654]","**[Chris Koch](https://jira.spring.io/secure/ViewProfile.jspa?name=kochcp)** opened **[SPR-5654](https://jira.spring.io/browse/SPR-5654?redirect=false)** and commented  cglib doesn't appear to be an active project anymore.  It'd be nice if there was a way we could specify javassist as our bytecode instrumentation utility.  ---  **Affects:** 2.5.6  **Attachments:** - [0001-from-CGLIB-to-Javassist-migration.patch](https://jira.spring.io/secure/attachment/19542/0001-from-CGLIB-to-Javassist-migration.patch) (_150.01 kB_) - [standalone-sources.zip](https://jira.spring.io/secure/attachment/19543/standalone-sources.zip) (_16.69 kB_)  **Issue Links:** - #12840 Support for ByteBuddy as an alternative to CGLIB (_**""is depended on by""**_) - #11829 Support `@Bean` method visibility  39 votes, 42 watchers","closed","has: votes-jira,","spring-projects-issues","2009-04-06T04:19:22Z","2019-01-13T08:00:15Z"
"","10449","Allow links to @Controller methods from views without hardcoding URLs [SPR-5779]","**[Chris Herron](https://jira.spring.io/secure/ViewProfile.jspa?name=cherro)** opened **[SPR-5779](https://jira.spring.io/browse/SPR-5779?redirect=false)** and commented  The various Spring Web tags and template-URI implementation encourage hard-coding of URLs in the view layer. If I alter a Controller's URL mapping, I need to remember to go and make the corresponding change(s) in my JSPs so that links and forms aren't broken. If the spring:url and form:form tags were able to accept the FQCN of a controller bean instead of an actual URL, the tag implementation could determine the most appropriate URL mapping, and (if applicable) incorporate any template-URI params / path variables to generate a reliable URL. By using the the FQCN, we can rely on any modern IDE to locate references during refactoring, instead of requiring additional help from Spring-aware IDE plugins. IMHO this would fit particularly well with Spring 3.0's annotation-based controller configuration.  Stripes supports this approach: http://stripes.sourceforge.net/docs/current/taglib/stripes/link.html http://stripes.sourceforge.net/docs/current/taglib/stripes/form.html  ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=72284  **Issue Links:** - #12241 URI/URL Related Improvement Suggestions for RequestMapping in Spring MVC (_**""is duplicated by""**_) - #10427 Externalized request mapping as a 1st class alternative to `@RequestMapping` - #13326 Form tag should prepend the contextPath and servletPath if not present  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b129c52e3bbcc4d301ad7604d43f39c64d346a1, https://github.com/spring-projects/spring-framework/commit/9d479feadded560b1d9a2c485730984ff5dcbfdb  32 votes, 29 watchers","closed","has: votes-jira,","spring-projects-issues","2009-05-22T02:06:56Z","2019-01-13T07:59:35Z"
"","9890","xml namespace for abbreviating class/package names [SPR-5217]","**[Chris Frohoff](https://jira.spring.io/secure/ViewProfile.jspa?name=frohoff)** opened **[SPR-5217](https://jira.spring.io/browse/SPR-5217?redirect=false)** and commented  An XML namespace based way to abbreviate classnames in spring XML configuration would help XML conciseness.  Perhaps something like:  \ \ \ I've created a placeholder configurer that does something similar to this, but one loses all of the static checking and completion SpringIDE provides when done this way, so it would be nice to have some sort of native support.   --- No further details from [SPR-5217](https://jira.spring.io/browse/SPR-5217?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-10-15T08:47:05Z","2015-09-22T17:34:36Z"
"","10855","Document @Configuration classes and AnnotationConfig[Web]ApplicationContext [SPR-6187]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6187](https://jira.spring.io/browse/SPR-6187?redirect=false)** and commented  ---  This issue is a sub-task of #10353  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f6228b91e578ca9c995d0d5aec2a5ad452c012fe, https://github.com/spring-projects/spring-framework/commit/0057481a0aa2c0d1d768ab28a02a153b5b918963","closed","type: documentation,","spring-projects-issues","2009-10-04T16:39:15Z","2019-01-11T14:39:53Z"
"","10854","Eliminate duplicate code between ConfigurationClassApplicationContext and ConfigurationClassWebApplicationContext [SPR-6186]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6186](https://jira.spring.io/browse/SPR-6186?redirect=false)** and commented  Due to multiple inheritance issues, CCAC and CCWAC cannot share `@Configuration` class processing behavior through a common superclass.  Factor out a static util (probably as an inner class of CCAC) and refererence it from CCWAC as necessary to eliminate duplicate code.  ---  This issue is a sub-task of #10353  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d020d73118b57a16d56d799f5364413e4ca64313, https://github.com/spring-projects/spring-framework/commit/cbadf350e1a378eeb6a0a90e14afd5e3df7657e7","closed","in: core,","spring-projects-issues","2009-10-04T16:38:39Z","2019-01-11T14:39:51Z"
"","10852","Provide TestContext support for @Configuration classes [SPR-6184]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6184](https://jira.spring.io/browse/SPR-6184?redirect=false)** and commented  Currently, JavaConfig integrates with the TestContext framework via its `ContextLoader` implementation, `JavaConfigContextLoader`:  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations=""com.bank.TransferAppConfig"",                       loader=JavaConfigContextLoader.class) public class TransferServiceTests {     // @Test methods ... } ```  This integration works well enough but is not refactoring-friendly due to the requirement that `@ContextConfiguration` imposes that locations must be a `String[]`. It forces the fully-qualified class name to be expressed as a string, when it would clearly be superior to be able to pass it around by `Class` literal.  Implementing this change would require a change to core, either by adding an attribute to `@ContextConfiguration` that takes a `Class[]` (not likely), or otherwise devising a way of proving a customized annotation (e.g., `@JavaConfigContextConfiguration`).  ---  **Affects:** 3.0 GA  **Issue Links:** - #13033 Introduce SmartContextLoader SPI (_**""is depended on by""**_) - #12888 Document TestContext support for `@Configuration` classes in the reference manual (_**""is depended on by""**_) - #12425 SpringJUnit4ClassRunner is not compatible with java context configuration (_**""is duplicated by""**_) - #11233 Annotation configuration based TestContext (_**""is duplicated by""**_) - [SJC-272](https://jira.spring.io/browse/SJC-272) JavaConfigContextLoader support with Spring 3.0 (_**""is duplicated by""**_) - #13042 AnnotationConfigContextLoader should not restrict the name of default configuration classes to ContextConfiguration - #12615 TestContext framework should support declarative configuration of bean definition profiles - #12592 Support for dependency injection and initialization of test instances using classpath scanning - #10353 Provide dedicated ApplicationContext implementations for use with (JavaConfig) `@Configuration` classes - #12078 Support Java-Based Application Configuration  37 votes, 30 watchers","closed","has: votes-jira,","spring-projects-issues","2008-11-05T19:05:42Z","2019-01-13T07:58:07Z"
"","10826","Support @ImportResource within @Configuration classes [SPR-6158]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6158](https://jira.spring.io/browse/SPR-6158?redirect=false)** and commented  Migrate `@ImportXml` from JavaConfig to core.  This is important as it provides easy access to namespace-related functionality not (yet) supported directly by the `@Configuration` approach.  With `@ImportXml`, users can still maintain a ""java-centric"" configuration approach, leaning on XML when necessary.  ---  **Issue Links:** - #10976 Support relative and by-convention use of `@ImportResource` (_**""is depended on by""**_) - #10353 Provide dedicated ApplicationContext implementations for use with (JavaConfig) `@Configuration` classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a4463fb71e6901a943a5bafc9d1957da2229333","closed","type: enhancement,","spring-projects-issues","2009-09-28T09:18:21Z","2019-01-13T07:58:17Z"
"","10796","Field autowiring in TestContext framework ignores explicit @Qualifier in favor of qualification by field name [SPR-6128]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-6128](https://jira.spring.io/browse/SPR-6128?redirect=false)** and commented  repro:  `AutowiredQualifierTests-context.xml`:  ```    	 		 	  	 		 	   ```  `AutowiredQualifierTests.java`  ``` package org.springframework.test.context.junit4.spr6128;  import static org.hamcrest.core.IsEqual.equalTo; import static org.junit.Assert.assertThat;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  @ContextConfiguration @RunWith(SpringJUnit4ClassRunner.class) public class AutowiredQualifierTests {  	@Autowired 	private String foo;  	@Autowired 	@Qualifier(""customFoo"") 	private String customFoo;   	@Test 	public void test() { 		assertThat(foo, equalTo(""normal"")); 		assertThat(customFoo, equalTo(""custom"")); 	} } ```  Expected: explicitly using `@Qualifier` should override any qualification by field name (just as, for example, `@RequestParam`(""pName"") does with relationship to the method parameter name.  Actual: if there is a bean that matches the name of the field, autowire-by-field-name takes precedence over any explicit `@Qualifier`.  This bug only manifests in a very particular set of conditions, but when it does it is deeply unintuitive.  ---  **Affects:** 3.0 M4  **Issue Links:** - #10733 Autowiring doesn't fail in case of ambiguity with certain combinations of Java config and component scanning  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/02dfe943964672de91bf99dd5c590f6e263353cf  1 votes, 2 watchers","closed","in: test,","spring-projects-issues","2009-09-18T12:33:50Z","2019-01-11T14:06:06Z"
"","10548","Provide support in TestContext framework equivalent to AbstractTransactionalSpringContextTests [SPR-5879]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5879](https://jira.spring.io/browse/SPR-5879?redirect=false)** and commented  Some, but not all of the functionality available in `AbstractTransactionalSpringContextTests` is currently available in the TestContext framework.  Notably missing is support for `setComplete()`, `endTransaction()`, and `startNewTransaction()` methods.  Since these methods ultimately manipulate thread-bound resources, it should be possible to provide equivalent support through static methods on utility class that ships as part of the TestContext support.  ---  **Issue Links:** - #9753 Support programmatic starting and stopping of transactions in the TestContext framework (_**""duplicates""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-29T04:45:01Z","2019-01-11T17:14:54Z"
"","10393","3.0 M3 PDF documentation code examples extend beyond page margins [SPR-5723]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5723](https://jira.spring.io/browse/SPR-5723?redirect=false)** and commented  See attached screenshot for example   ---  **Affects:** 3.0 M3  **Attachments:** - [Picture 1.png](https://jira.spring.io/secure/attachment/15367/Picture+1.png) (_141.41 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41c8352e1635b139246053b9409a19beefb61eee","closed","type: bug,","spring-projects-issues","2009-05-07T02:54:21Z","2012-06-19T03:43:57Z"
"","10390","Improve documentation (ref docs and javadoc) for @ContextConfiguration 'locations' parameter [SPR-5720]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5720](https://jira.spring.io/browse/SPR-5720?redirect=false)** and commented  **cbeams** it's not really documented that the path is relative by default and uses classpath: loading by default, etc..  **sbrannen** It is actually documented. The JavaDoc for ContextConfiguration links to ContextLoader, and that links to GenericXmlContextLoader which is a subclass of AbstractContextLoader. In org.springframework.test.context.support.AbstractContextLoader.generateDefaultLocations(Class\) it's fully documented as well as in org.springframework.test.context.support.AbstractContextLoader.modifyLocations(Class\, String...), but I can understand that it may be difficult to follow all of those links. However, it's spelled out in the reference manual as well with examples, etc.:  http://static.springframework.org/spring/docs/2.5.x/reference/testing.html#testcontext-ctx-management  Perhaps the only thing that's missing in the reference manual is the part about ""modifying"" paths (i.e., that a relative path is relative to the class' package).  **cbeams** wrt ContextConfiguration locations javadoc, perhaps the javadoc on locations could just be updated to point to the the two AbstractContextLoader methods for ""further information"" on how to craft those paths.  **sbrannen** That sounds like a feasible solution. FYI: ContextConfiguration#loader() was originally set to GenericXmlContextLoader, which made it more obvious; however, Juergen changed that at some point, I believe in order to reduce inter-package dependencies.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/31144591b0580b902d08b15216a6d29af66d2ae6","closed","type: task,","spring-projects-issues","2009-05-06T13:41:27Z","2012-06-19T03:43:23Z"
"","10372","Support ChunkingTaskExecutorService [SPR-5702]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5702](https://jira.spring.io/browse/SPR-5702?redirect=false)** and commented  Please review and comment on the attached classes, complete with JavaDoc to explain themselves.  Given the thumbs-up, I'll commit.  Note that developing this class was born out of necessity in the EIwS course.  Rather than providing a proprietary solution in the training, it would be much better to make this useful functionality generally available to them as part of Spring 3.  Open issues/questions:  This class is a straight implementation of `java.util.concurrent.ExecutorService`.  It could also implement `TaskExecutor` for wider compatibility, but it currently does not.  Moreover it probably shouldn't because of the side effects in the `shutdown()` method (see javadoc for details).  The name is currently `ChunkingTaskExecutorService` but would probably be better as `ChunkingExecutorService`, as it has nothing to do with Spring's `TaskExecutor` interface.  I haven't changed this yet, but can/will.  The class is not thread-safe, but probably does not need to be as Executor[Service]s are by their very nature usually called from within a single thread.  Regarding the side-effects in the `shutdown()` method mentioned above, it would be nice to avoid this, but the goal is to make chunking transparent.  There are two public methods exposed, `getCurrentChunkSize()` and `executeCurrentChunk()`.  The side-effects in `shutdown()` could be eliminated, but it would mean that callers would have to follow the contract of always calling `executeCurrentChunk()` themselves before calling `shutdown()`.  I think that in this case, the well-documented side effect is worth it to achieve the desired abstraction.   ---  **Attachments:** - [ChunkingTaskExecutorService.java](https://jira.spring.io/secure/attachment/15348/ChunkingTaskExecutorService.java) (_5.46 kB_) - [ChunkingTaskExecutorService.java](https://jira.spring.io/secure/attachment/15346/ChunkingTaskExecutorService.java) (_5.34 kB_) - [ChunkingTaskExecutorServiceTests.java](https://jira.spring.io/secure/attachment/15347/ChunkingTaskExecutorServiceTests.java) (_5.44 kB_)","closed","type: enhancement,","spring-projects-issues","2009-04-28T16:08:46Z","2019-01-11T17:30:28Z"
"","10353","Provide dedicated ApplicationContext implementations for use with (JavaConfig) @Configuration classes [SPR-5682]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5682](https://jira.spring.io/browse/SPR-5682?redirect=false)** and commented  The JavaConfig project provided `[JavaConfigApplicationContext](http://static.springframework.org/spring-javaconfig/docs/1.0.0.M4/javadoc-api/org/springframework/config/java/context/JavaConfigApplicationContext.html)` and `[JavaConfigWebApplicationContext](http://static.springframework.org/spring-javaconfig/docs/1.0.0.M4/javadoc-api/org/springframework/config/java/context/JavaConfigWebApplicationContext.html)` to allow for eliminating XML entirely.  (See also: [usage](http://static.springframework.org/spring-javaconfig/docs/1.0.0.M4/reference/html/ch03.html#javaconfigapplicationcontext)).  Similar implementations could be provided in Spring Core, though naming would probably change to `ConfigurationClassApplicationContext` and `ConfigurationClassWebApplicationContext`, respectively.  There are a number of issues to consider and work out before providing this support, but this issue can serve as a way to track community interest.  ---  **Sub-tasks:** - #10854 Eliminate duplicate code between ConfigurationClassApplicationContext and ConfigurationClassWebApplicationContext - #10855 Document `@Configuration` classes and AnnotationConfig[Web]ApplicationContext  **Issue Links:** - #10826 Support `@ImportResource` within `@Configuration` classes - #10852 Provide TestContext support for `@Configuration` classes - #10200 Support BeanFactory#getBean(Class requiredType)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cbadf350e1a378eeb6a0a90e14afd5e3df7657e7, https://github.com/spring-projects/spring-framework/commit/fd8935ba0babaace88b7987293c1f95891aee1f3, https://github.com/spring-projects/spring-framework/commit/a48234cf5f3964f982115167a1bc6f22fe6ca117, https://github.com/spring-projects/spring-framework/commit/772a74a636d17ca3a132edc038ea4b5a08acdd5d  12 votes, 13 watchers","closed","has: votes-jira,","spring-projects-issues","2009-04-17T05:17:53Z","2019-01-13T08:00:07Z"
"","10352","Instantiation of Spring context interferes with default JMX behavior under Java 6 [SPR-5681]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5681](https://jira.spring.io/browse/SPR-5681?redirect=false)** and commented  Consider the following scenario:  ``` >$ java -version java version ""1.6.0_07"" Java(TM) SE Runtime Environment (build 1.6.0_07-b06-153) Java HotSpot(TM) 64-Bit Server VM (build 1.6.0_07-b06-57, mixed mode)  >$ cat > Foo.java public class Foo {     public static void main(String... args) throws Exception {         while(true) { Thread.sleep(1000); }     } } ^D  >$ javac Foo.java >$ java Foo & >$ jconsole ```  JConsole's connection dialog appears, at which point I can select the Foo process and clicking 'Connect' succeeds.  **Now, the interesting part.  If I instantiate a Spring `ApplicationContext` within `Foo`'s `main` method, I can no longer connect with JConsole.**  ``` >$ cat > Foo.java public class Foo {     public static void main(String... args) throws Exception {         new org.springframework.context.support.ClassPathXmlApplicationContext(""empty-context.xml"");         while(true) { Thread.sleep(1000); }     } } ^D  >$ javac Foo.java >$ java Foo & >$ jconsole ```  The same JConsole connection dialog appears, and it finds my process just the same, but this time, clicking Connect fails with a ""Connection Failed"" error message.  If I go back and explicitly supply `-Dcom.sun.management.jmxremote`, everything works as expected.  Is Spring somehow disabling the registered-by-default MBeanServer?  ---  **Affects:** 2.5.6  **Issue Links:** - #11736 Document need for -Dcom.sun.management.* -D flags when using Spring JMX (_**""is superseded by""**_)","closed","in: core,","spring-projects-issues","2009-04-16T10:09:23Z","2019-01-12T16:27:10Z"
"","10336","Support collated problem reporting [SPR-5665]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5665](https://jira.spring.io/browse/SPR-5665?redirect=false)** and commented  Currently, the default `ProblemReporter` implementation used in the framework is `FailFastProblemReporter`, which results in a failure immediately upon detecting a configuration error.  Consider providing (and defaulting to) a `CollatingProblemReporter` which would still 'fail fast', but only after collecting all errors.  Also consider providing the ability to switch between implementations through a configuration switch - something in the `context` namespace, or perhaps as an option on the root `` element?  ---  **Issue Links:** - #12854 Overhaul core container error reporting","closed","type: enhancement,","spring-projects-issues","2009-04-09T07:52:17Z","2019-01-11T16:33:08Z"
"","10314","Support use of @Qualifier in conjunction with @Bean methods [SPR-5643]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5643](https://jira.spring.io/browse/SPR-5643?redirect=false)** and commented  `@Qualifier` may be used in conjunction with `@Component` at the class level, but its semantics also make sense for use with `@Bean` at the method level.   --- No further details from [SPR-5643](https://jira.spring.io/browse/SPR-5643?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-04-01T02:22:08Z","2012-06-19T03:47:04Z"
"","10303","Ensure compatibility for @Configuration classes in a Spring DM/OSGi environment [SPR-5632]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5632](https://jira.spring.io/browse/SPR-5632?redirect=false)** and commented   ---  **Reference URL:** http://forum.springframework.org/showthread.php?p=234009  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2009-03-30T03:23:55Z","2012-06-19T03:46:55Z"
"","10300","Support use of @Primary and @Lazy during component-scanning [SPR-5629]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5629](https://jira.spring.io/browse/SPR-5629?redirect=false)** and commented  #10261 and #10262 introduced the `@Primary` and `@Lazy` annotations for use with `@Bean` methods.  These annotations should be available for use on `@Component-annotated` classes.  ---  **Issue Links:** - #10333 Request: lazy-init or 'only-if-needed' option for stereotype `@Component` source-annotated component-scan definitions","closed","type: enhancement,","spring-projects-issues","2009-03-28T09:37:27Z","2019-01-13T08:00:26Z"
"","10290","Scan test suite for use of @Ignore [SPR-5619]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5619](https://jira.spring.io/browse/SPR-5619?redirect=false)** and commented  During the 3.0 modularization effort, certain areas of the testsuite were `@Ignore`'d.  While most of these were temporary, it's a good idea to re-scan the testsuite for any unintended remaining ignored tests.   --- No further details from [SPR-5619](https://jira.spring.io/browse/SPR-5619?redirect=false)","closed","status: declined,","spring-projects-issues","2009-03-26T02:12:57Z","2015-09-22T18:20:32Z"
"","10279","Make line endings consistent across all Spring source files [SPR-5608]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5608](https://jira.spring.io/browse/SPR-5608?redirect=false)** and commented  Approximately 100 source files in the Spring trunk contain CRLF (win) or CR (mac classic) line endings.  The standard is LF (unix) line endings.  Update the offending sources accordingly.  To find offending files:  $> cd $SPR_TRUNK $> find . -name '**.java' | xargs file | grep 'CR.** line terminators' | cut -d"":"" -f1  To fix offending files:  $> cd $SPR_TRUNK $> for $java in $(find . -name '**.java' | xargs file | grep 'CR.** line terminators' | cut -d"":"" -f1); do tab2space -tabs -lf $java $java; done;  ---  This issue is a sub-task of #12771  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41c405998e286e74b801d0379c5d97368df2e19c, https://github.com/spring-projects/spring-framework/commit/88913f2b231c7bad0a535dcc11aab4dbf5ad9127, https://github.com/spring-projects/spring-framework/commit/ae72cf2f50a078724c3d177daae9dec824bdbfee","closed","type: task,","spring-projects-issues","2009-03-24T15:43:35Z","2019-01-11T16:31:26Z"
"","10271","Make naming of @Configuration class processing-related artifacts consistent [SPR-5600]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5600](https://jira.spring.io/browse/SPR-5600?redirect=false)** and commented  AbstractConfigurationClassProcessor -> AbstractConfigurationClassPostProcessor ConfigurationEnhancer -> ConfigurationClassEnhancer ConfigurationParser -> ConfigurationClassParser  Also update corresponding unit test class names to match   ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/15264/mylyn-context.zip) (_1.64 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc713ad5241a90bc66b96364b91e5439f1ae6cb6","closed","type: enhancement,","spring-projects-issues","2009-03-22T19:42:27Z","2012-06-19T03:47:31Z"
"","10270","Hook @Configuration class processing into  and  through AnnotationConfigUtils#registerAnnotationConfigProcessors [SPR-5599]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5599](https://jira.spring.io/browse/SPR-5599?redirect=false)** and commented  `@Configuration` class processing is to be enabled by default when using component scanning and/or annotation-config.   ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/15260/mylyn-context.zip) (_21.70 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6698ed8420e02a1ca829f098621e5f6b92cd10a6","closed","type: enhancement,","spring-projects-issues","2009-03-22T19:26:31Z","2012-06-19T03:47:14Z"
"","10269","Improve support for @Aspect-annotated @Configuration classes by relaxing constraints in AbstractAspectJAdvisorFactory#isAspect() [SPR-5598]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5598](https://jira.spring.io/browse/SPR-5598?redirect=false)** and commented  Per prior discussions on this topic, try to simplify the logic required to process `@Aspect-annotated` `@Configuration` classes by relaxing the restrictions in AbstractAspectJAdvisorFactory#isAspect.  See ConfigurationEnhancer#nestOneClassDeeperIfAspect() for details of the current workaround.  Implementing this fix will allow for eliminating AddAnnotationAdapter as well as the above mentioned method from ConfigurationEnhancer.   --- No further details from [SPR-5598](https://jira.spring.io/browse/SPR-5598?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-03-22T18:08:21Z","2012-06-19T03:47:15Z"
"","10268","Consider providing specific @RequestScoped etc annotations [SPR-5597]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5597](https://jira.spring.io/browse/SPR-5597?redirect=false)** and commented  Currently, StandardScopes is available in the .context.annotation package, after having been moved over from .context.java.  This may not be the best place for it; decide on better packaging and move it accordingly.  Also, consider updating references throughout the codebase to BeanDefintion.SCOPE_SINGLETON to refer to StandardScopes.SINGLETON, etc.  At any rate, the goal is to place this class prominently in the 3.0 packaging and advertise its use in the reference documentation, esp. in conjunction with the `@Scope` annotation.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-22T17:58:49Z","2019-01-11T17:02:15Z"
"","10267","Test @Autowired @Configuration class constructors [SPR-5596]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5596](https://jira.spring.io/browse/SPR-5596?redirect=false)** and commented  `@Configuration` class documentation advertises that `@Autowired` ctors are supported.  Verify with tests.   ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/15262/mylyn-context.zip) (_14.08 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aee7f1ce530b60dd61d3840d3a54409620655748","closed","in: core,","spring-projects-issues","2009-03-22T17:55:23Z","2012-06-19T03:47:27Z"
"","10266","Provide BeanDefinitionRegistryPostProcessor lifecycle hook [SPR-5595]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5595](https://jira.spring.io/browse/SPR-5595?redirect=false)** and commented  Per discussions around `@Configuration` class processing, ConfigurationClassPostProcessor (currently a BeanFactoryPostProcessor) really needs a distinct new lifecycle hook for post-processing the BeanDefinitionRegistry.  This hook should happen right before BeanFactoryPostProcessing.  It gives the framework a first-class opportunity to detect, enhance and process `@Configuration` class BeanDefinitions and register new BeanDefinitions into the BeanDefintitionRegistry for each `@Bean` method parsed.  Affected classes will be:  * AbstractConfigurationClassPostProcessor * ConfigurationClassPostProcessor  This change also has implications for Spring IDE.  The current plan is that Spring IDE will detect the presence of the ConfigurationClassPostProcessor and invoke its own `@Configuration` class processing lifecycle.  If a BeanDefinitionRegistryPostProcessor lifecycle is introduced, Spring IDE will have to accomodate this change accordingly.   --- No further details from [SPR-5595](https://jira.spring.io/browse/SPR-5595?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-03-22T17:50:35Z","2012-06-19T03:46:54Z"
"","10265","Consolidate @ScopedProxy -> @Scope [SPR-5594]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5594](https://jira.spring.io/browse/SPR-5594?redirect=false)** and commented  The `@ScopedProxy` annotation was added as part of the experimental support for `@FactoryMethod`.  In alignment with `@Configuration` class processing's use of `@Scope` at the method level, `@ScopedProxy` should likely be eliminated in favor of using `@Scope` as well.   --- No further details from [SPR-5594](https://jira.spring.io/browse/SPR-5594?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-03-22T17:45:07Z","2012-06-19T03:47:21Z"
"","10264","Test @Bean dependsOn functionality [SPR-5593]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5593](https://jira.spring.io/browse/SPR-5593?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/69a762e86ac075035bfcdc899aadf2b36abaf167","closed","in: core,","spring-projects-issues","2009-03-22T17:39:34Z","2012-06-19T03:47:11Z"
"","10263","Test @Bean initMethod/destroyMethod functionality [SPR-5592]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5592](https://jira.spring.io/browse/SPR-5592?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/69a762e86ac075035bfcdc899aadf2b36abaf167","closed","in: core,","spring-projects-issues","2009-03-22T17:38:45Z","2012-06-19T03:47:23Z"
"","10262","Provide @Lazy annotation [SPR-5591]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5591](https://jira.spring.io/browse/SPR-5591?redirect=false)** and commented  Provide `@Lazy` annotation for use in conjunction with individual `@Bean` methods or at the type level to indicate default lazy behavior for entire `@Configuration` classes.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/69a762e86ac075035bfcdc899aadf2b36abaf167","closed","type: enhancement,","spring-projects-issues","2009-03-22T17:36:58Z","2012-06-19T03:47:24Z"
"","10261","Provide @Primary annotation [SPR-5590]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5590](https://jira.spring.io/browse/SPR-5590?redirect=false)** and commented  Provide `@Primary` annotation for use with `@Bean` methods  ---  **Issue Links:** - #9828 Scanned components don't have the ability of being ""primary"" candidates  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/69a762e86ac075035bfcdc899aadf2b36abaf167","closed","type: enhancement,","spring-projects-issues","2009-03-22T17:31:47Z","2019-01-11T17:02:33Z"
"","10229","Allow for indicating whether a field is required in using  and information from the WebDataBinder configuration [SPR-5558]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5558](https://jira.spring.io/browse/SPR-5558?redirect=false)** and commented  Ideally, users could repurpose the metadata from binder.setRequiredFields() when indicating which fields are required on the UI.  One implementation approach could be to optionally allow  to set different class= attributes on input/textarea/option/... based on whether those fields are required.  The user could then add an asterisk or other chosen indicator to those fields using CSS.   --- No further details from [SPR-5558](https://jira.spring.io/browse/SPR-5558?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-03-10T06:32:52Z","2012-06-19T09:36:21Z"
"","10221","Support @Scope(proxyMode) during component-scanning/autowiring lifecycle [SPR-5550]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5550](https://jira.spring.io/browse/SPR-5550?redirect=false)** and commented  In order to support `@Configuration` class processing, the following is now possible:  ``` @Configuration public class Config {     @Bean @Scope(value=StandardScopes.SESSION, proxyMode=ScopedProxyMode.TARGET_CLASS)     public Foo foo() {         return new Foo();     } } ```  The same should also be true when `@Scope` is used at the type level:  ``` @Component @Scope(value=StandardScopes.SESSION, proxyMode=ScopedProxyMode.TARGET_CLASS) public class Foo {     // ... } ```  The latter case is not yet supported.  Note that if a type 'Foo' is type annotated with `@Scope`, that annotation is ignored during `@Configuration` class processing.  `@Scope` (or the lack thereof) at the method level in conjunction with a `@Bean` annotation is the only metadata that is respected.   --- No further details from [SPR-5550](https://jira.spring.io/browse/SPR-5550?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-03-06T14:52:27Z","2012-06-19T03:46:56Z"
"","10220","Revise beans XSD for 3.0 [SPR-5549]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5549](https://jira.spring.io/browse/SPR-5549?redirect=false)** and commented   --- No further details from [SPR-5549](https://jira.spring.io/browse/SPR-5549?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-03-06T13:02:28Z","2012-06-19T03:47:06Z"
"","10201","Fields assigned with default values should tolerate @Value expressions that do not resolve [SPR-5530]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5530](https://jira.spring.io/browse/SPR-5530?redirect=false)** and commented  Repro:  ``` public class MyBean {     @Value(""#{systemProperties.myProp}"")     private String name = ""default"";      public String getName() {         return name;     } } ```  ``` public class DefaultValueTests {      public @Test void testWithSystemPropertySet() {          System.setProperty(""myProp"", ""foo"");          ApplicationContext ctx = ... // wire up a context containing the above bean          assertThat(ctx.getBean(""myBean"").getName(), equalTo(""foo"")); // passes     }      public @Test void testWithoutSystemPropertySet() {          // System.setProperty(""myProp"", ""foo"");           ApplicationContext ctx = ... // wire up a context containing the above bean          assertThat(ctx.getBean(""myBean"").getName(), equalTo(""default"")); // never makes it here; fails during wiring!     } } ```  Instead of defaulting to the 'default' value as a user might expect (and as the javadoc for `@Value` suggests), the following exception is thrown during wiring:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'test.basic.AutowiredConfigurationTests$ValueConfig#0': Autowiring of fields failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private final java.lang.String test.basic.AutowiredConfigurationTests$ValueConfig.name; nested exception is org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is org.springframework.expression.spel.SpelException: EL1009E:(pos 17): Field or property 'myProp' cannot be found on object of type 'java.util.Properties' at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessAfterInstantiation(AutowiredAnnotationBeanPostProcessor.java:260) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:956) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:475) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:412) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:383) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:271) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:268) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:469) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:717) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:376) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:197) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:172) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:158) at test.basic.AutowiredConfigurationTests.testValueInjection(AutowiredConfigurationTests.java:45) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41) at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.ParentRunner.run(ParentRunner.java:220) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private final java.lang.String test.basic.AutowiredConfigurationTests$ValueConfig.name; nested exception is org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is org.springframework.expression.spel.SpelException: EL1009E:(pos 17): Field or property 'myProp' cannot be found on object of type 'java.util.Properties' at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:463) at org.springframework.beans.factory.annotation.InjectionMetadata.injectFields(InjectionMetadata.java:105) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessAfterInstantiation(AutowiredAnnotationBeanPostProcessor.java:257) ... 40 more Caused by: org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is org.springframework.expression.spel.SpelException: EL1009E:(pos 17): Field or property 'myProp' cannot be found on object of type 'java.util.Properties' at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:128) at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:589) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:440) ... 42 more Caused by: org.springframework.expression.spel.SpelException: EL1009E:(pos 17): Field or property 'myProp' cannot be found on object of type 'java.util.Properties' at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:115) at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:55) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:53) at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:51) at org.springframework.expression.spel.SpelExpression.getValue(SpelExpression.java:64) at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:125) ... 45 more    ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-27T11:01:54Z","2012-06-19T09:36:21Z"
"","10200","Support BeanFactory#getBean(Class requiredType) [SPR-5529]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5529](https://jira.spring.io/browse/SPR-5529?redirect=false)** and commented  In alignment with Java 5 style and migration of JavaConfig features into core, support the following signature on the BeanFactory interface:       T getBean(Class requiredType) throws BeansException;  This will need to be implemented by the following classes:  AbstractBeanFactory SimpleJndiBeanFactory StaticListableBeanFactory AbstractApplicationContext  There are also several locations throughout the Spring test codebase that call getBean(null).  These calls will have to be disambiguated as getBean((String)null).  With the above in mind, the addition of getBean(Class\) does introduce a minor backward compatibility issue for anyone calling getBean(null).  Given that this is extremely unlikely (because it's meaningless to do so), it's probably not a significant concern.  Implementation approach:  Apply logic similar to that in getBeansOfType(), iterating through all beans, building up a collection of beans that match the given 'requiredType' parameter.  If the resulting list contains exactly one bean, return it.  If the list contains zero beans, throw a NoSuchBeanDefinitionException.  If the list contains more than one matching bean, throw a BeansException specific to the issue.  No suitable BeansException currently exists for this, so a suggestion would be 'AmbiguousBeanLookupException extends BeansException' with an appropriate error message, something to the effect of: ""3 beans match requested type com.acme.Foo.  Consider using getBean(String, Class\) to disambiguate.  Matching bean names are: ['foo1', 'foo2', 'foo3']  Qualified access by type:  Currently we're supporting \ T getBean(String, Class\).  This is a qualification-by-bean-name scenario.  We may also want to support qualification-by-`@Qualifier`.  Haven't given much thought to this, but something to the effect of:  \ T getBean(Class","closed","type: enhancement,","spring-projects-issues","2009-02-27T07:08:06Z","2019-01-13T08:00:51Z"
"","10194","Replace all 'package.html' artifacts with 'package-info.java' [SPR-5523]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5523](https://jira.spring.io/browse/SPR-5523?redirect=false)** and commented  Given that Java 5 is a requirement for Spring 3, let's move the package documentation to the preferred style: package-info.java as opposed to package.html.  This will allow for package-level annotations to be applied as well as better javadoc searching support in the IDE.   ---  **Attachments:** - [patch.diff](https://jira.spring.io/secure/attachment/15422/patch.diff) (_386.83 kB_) - [SPR-5523.patch](https://jira.spring.io/secure/attachment/15424/SPR-5523.patch) (_328.04 kB_)","closed","type: documentation,","spring-projects-issues","2009-02-23T22:52:18Z","2019-01-11T17:01:54Z"
"","10176","Provide first-class Tiles ViewResolver implementation [SPR-5504]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5504](https://jira.spring.io/browse/SPR-5504?redirect=false)** and commented  Currently, configuring tiles is somewhat cumbersome / low-level, in that users must define a UrlBasedViewResolver bean and provide a viewClass property of type TilesView.  Better would be to provide a concrete TilesViewResolver implementation for convenience.  ---  **Issue Links:** - #10079 Make Tiles 2 easier to configure in Spring MVC (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-02-18T03:47:52Z","2019-01-11T16:46:48Z"
"","10171","Support for matrix parameters [SPR-5499]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5499](https://jira.spring.io/browse/SPR-5499?redirect=false)** and commented  ---  **Affects:** 3.0.5  This issue is a sub-task of #9097  **Issue Links:** - #12474 Use of semicolon delimited lists in REST URIs (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2201dd8c45051230ad1a5a0e895cb5951edbfb74  8 votes, 12 watchers","closed","type: task,","spring-projects-issues","2009-02-14T06:20:07Z","2019-01-11T16:04:12Z"
"","10170","Consider changing Petclinic URIs for PUTs and DELETEs to /{id} instead of current /{id}/edit [SPR-5498]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5498](https://jira.spring.io/browse/SPR-5498?redirect=false)** and commented  Essentially this involves setting the form action manually for each PUT/DELETE (and POST, for that matter) scenario.  Currently PUTs and DELETEs are being issued against the URI that was used to GET the form.  e.g.:      GET http://localhost:8080/petclinic/owners/1/edit  followed by a:      PUT http://localhost:8080/petclinic/owners/1/edit  it is more correct to do the put directly against the entity resource, not against the 'form resource'.  e.g.:      PUT http://localhost:8080/petclinic/owners/1  Same with deletion:      DELETE http://localhost:8080/petclinic/owners/1  In the case of POST, it's a little more interesting:      GET http://localhost:8080/petclinic/owners  Renders a list of all owners      GET http://localhost:8080/petclinic/owners/new  Renders the 'add new owner' form  It's an open question, then, whether adding a new owner should be:      POST http://localhost:8080/petclinic/owners/new  or directly against the 'collection of owners' resource:      POST http://localhost:8080/petclinic/owners  I'm leaning toward the latter.  The only caution here is that it leaves the door open for users to make an honest mistake when coding a form against this URI.  The user may intend to be issuing a search (GET) request, which should read as follows:      GET http://localhost:8080/petclinic/owners?firstName=Chris&lastName=Beams  If the user mistakenly submits the form using POST, however, they could inadvertently create a new entity!      POST http://localhost:8080/petclinic/owners?firstName=Chris&lastName=Beams  This is at once an elegant design and a great feature, as well as a 'dangerous' possibility.  ---  This issue is a sub-task of #10156","closed","status: declined,","spring-projects-issues","2009-02-13T20:54:29Z","2019-01-11T16:04:08Z"
"","10169","Add automated web UI tests to Petclinic with JWebUnit [SPR-5497]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5497](https://jira.spring.io/browse/SPR-5497?redirect=false)** and commented  Petclinic currently has comprehensive unit and system tests against the core codebase, but no tests that verify the web UI is error-free.  Run through each of the possible requests with JWebUnit and embedded Jetty to ensure future refactorability.  ---  This issue is a sub-task of #10156","closed","status: declined,","spring-projects-issues","2009-02-13T20:47:26Z","2019-01-11T16:04:05Z"
"","10168","Update comments in Petclinic web.xml [SPR-5496]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5496](https://jira.spring.io/browse/SPR-5496?redirect=false)** and commented  ---  This issue is a sub-task of #10156","closed","status: declined,","spring-projects-issues","2009-02-13T20:46:32Z","2019-01-11T16:03:59Z"
"","10167","Update petclinic.html (tutorial page) to reflect changes to REST and changes in controller/JSP structure [SPR-5495]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5495](https://jira.spring.io/browse/SPR-5495?redirect=false)** and commented  ---  This issue is a sub-task of #10156","closed","","spring-projects-issues","2009-02-13T20:46:04Z","2019-01-11T16:04:27Z"
"","10166","Allow for deleting owners in Petclinic [SPR-5494]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5494](https://jira.spring.io/browse/SPR-5494?redirect=false)** and commented  ---  This issue is a sub-task of #10156","closed","status: declined,","spring-projects-issues","2009-02-13T20:44:51Z","2019-01-11T16:04:22Z"
"","10165","Provide hyperlink to owner on Petclinic 'edit pet' form [SPR-5493]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5493](https://jira.spring.io/browse/SPR-5493?redirect=false)** and commented  Currently pet edit forms render the name of the pet's owner, but do not allow for navigating to it.  This navigability will be even more important when #10164 is implemented.  ---  This issue is a sub-task of #10156","closed","status: declined,","spring-projects-issues","2009-02-13T20:42:34Z","2019-01-11T16:04:19Z"
"","10164","Sever the hierarchical relationship between pets and owners in URIs [SPR-5492]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5492](https://jira.spring.io/browse/SPR-5492?redirect=false)** and commented  Pets have application-wide unique identity.  Though pets are clearly correlated with their owners (by ownership), they are not fundamentally a 'part' of the owner's 'whole'.  For example, one owner could sell a pet to another owner.  The current hierachical URIs don't handle this reality well:      http://localhost:8080/petclinic/owners/7/pets/9/edit  Better would be to have pets top-level:      http://localhost:8080/petclinic/pets/9/edit  Pet representations can still maintain links to their owners, of course, and requests like the following would still make perfect sense:      http://localhost:8080/petclinic/owners/7/pets  This would render a list of all the pets that owner 7 currently owns.  ---  This issue is a sub-task of #10156","closed","status: declined,","spring-projects-issues","2009-02-13T20:37:56Z","2019-01-11T16:04:15Z"
"","10163","Update Petclinic build to create war named 'petclinic.war' [SPR-5491]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5491](https://jira.spring.io/browse/SPR-5491?redirect=false)** and commented  'ant jar' under petclinic currently produces a WAR artifact named org.springframework.samples.petclinic.war.  When deployed to the servlet container, this leaves the user having to access the webapp with an odd servlet context:  http://localhost:8080/org.springframework.samples.petclinic/  Clearly not ideal.  Please update the build to publish an artifact simply named 'petclinic.war'.  ---  This issue is a sub-task of #10156","closed","status: declined,","spring-projects-issues","2009-02-13T20:30:39Z","2019-01-11T16:05:24Z"
"","10162","GET /petclinic/owners returns 200 OK; GET /petclinic/owners/ returns 404 [SPR-5490]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5490](https://jira.spring.io/browse/SPR-5490?redirect=false)** and commented  With petclinic running on your local machine, try the following      http://localhost:8080/petclinic/owners  Then,      http://localhost:8080/petclinic/owners/  Notice the latter returns 404.  Users should be allowed to leave the trailing slash in place while exploring the site's URIs and not be penalized for it.  ---  This issue is a sub-task of #10156","closed","status: declined,","spring-projects-issues","2009-02-13T20:25:39Z","2019-01-11T16:05:14Z"
"","10161","Display a custom error page when user attempts to access an invalid Petclinic URI [SPR-5489]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5489](https://jira.spring.io/browse/SPR-5489?redirect=false)** and commented  ---  This issue is a sub-task of #10156","closed","","spring-projects-issues","2009-02-13T20:23:40Z","2019-01-11T16:06:08Z"
"","10160","Consolidate Petclinic controllers to take full advantage of @MVC style [SPR-5488]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5488](https://jira.spring.io/browse/SPR-5488?redirect=false)** and commented  Petclinic currently has the following controllers:  AddOwnerForm AddPetForm AddVisitForm  ClinicController  EditOwnerForm EditPetForm FindOwnersForm  Even though these controllers have long since been migrated to `@MVC` annotations and away from SimpleFormController / MultiActionController extension, their granularity reflects their inheritance-based origins.  A much better layout can be acheived now, where most or all entity-related functions are consolidated in a dedicated Controller.  Simply:  OwnerController PetController VisitController VetController etc..  ---  This issue is a sub-task of #10156","closed","status: declined,","spring-projects-issues","2009-02-13T20:18:29Z","2019-01-11T16:05:53Z"
"","10159","Polish petclinic RESTful URIs [SPR-5487]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5487](https://jira.spring.io/browse/SPR-5487?redirect=false)** and commented  ---  This issue is a sub-task of #10156  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3ddd08942c432dfb590067317e146a4d5c6b16ec","closed","","spring-projects-issues","2009-02-13T19:09:58Z","2019-01-11T16:05:48Z"
"","10158","Add content negotiation and MarshallingView to Petclinic [SPR-5486]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5486](https://jira.spring.io/browse/SPR-5486?redirect=false)** and commented  ---  This issue is a sub-task of #10156","closed","","spring-projects-issues","2009-02-13T19:08:02Z","2019-01-11T16:05:45Z"
"","10157","Update @RequestMappings to use URI templates and methods to accept @PathVariable [SPR-5484]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5484](https://jira.spring.io/browse/SPR-5484?redirect=false)** and commented  ---  This issue is a sub-task of #10156","closed","","spring-projects-issues","2009-02-13T19:00:50Z","2019-01-11T16:06:01Z"
"","10156","Update Petclinic sample to showcase REST support [SPR-5483]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5483](https://jira.spring.io/browse/SPR-5483?redirect=false)** and commented  Petclinic should be the showcase for REST support in Spring 3, and generally modernized to reflect Spring Web best practices.  Much of this work has already been done.  This issue exists to track the remaining effort.  ---  **Sub-tasks:** - #10103 Update Pet Clinic to use HSQL as an embedded database - #10157 Update `@RequestMappings` to use URI templates and methods to accept `@PathVariable` - #10158 Add content negotiation and MarshallingView to Petclinic - #10159 Polish petclinic RESTful URIs - #10160 Consolidate Petclinic controllers to take full advantage of `@MVC` style - #10161 Display a custom error page when user attempts to access an invalid Petclinic URI - #10162 GET /petclinic/owners returns 200 OK; GET /petclinic/owners/ returns 404 - #10163 Update Petclinic build to create war named 'petclinic.war' - #10164 Sever the hierarchical relationship between pets and owners in URIs - #10165 Provide hyperlink to owner on Petclinic 'edit pet' form - #10166 Allow for deleting owners in Petclinic - #10167 Update petclinic.html (tutorial page) to reflect changes to REST and changes in controller/JSP structure - #10168 Update comments in Petclinic web.xml - #10169 Add automated web UI tests to Petclinic with JWebUnit - #10170 Consider changing Petclinic URIs for PUTs and DELETEs to /{id} instead of current /{id}/edit  **Issue Links:** - #9097 Comprehensive REST Support  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-13T18:57:37Z","2019-01-13T08:01:07Z"
"","10001","Add bundle for org.springframework.asm [SPR-5328]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5328](https://jira.spring.io/browse/SPR-5328?redirect=false)** and commented  jarjar is no longer being used to repackage and embed org.objectweb.asm as org.springframework.asm under Spring Build.  Create a bundle dedicated to this effort, use jarjar to do the transformation manually, and have Spring depend on this bundle.   ---  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2008-11-28T08:19:22Z","2012-06-19T09:36:13Z"
"","9936","Provide AnnotationUtils.getAttributeType(Class","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5262](https://jira.spring.io/browse/SPR-5262?redirect=false)** and commented      /**      * Retrieve the type of the given annotation attribute.      */     public static Class getAttributeType(Class","closed","type: enhancement,","spring-projects-issues","2008-10-31T06:11:34Z","2012-06-19T09:36:27Z"
"","10595","MBeanExporter.setExcludedBeans does not work properly on FactoryBeans [SPR-5926]","**[Celal Ziftci](https://jira.spring.io/secure/ViewProfile.jspa?name=celal)** opened **[SPR-5926](https://jira.spring.io/browse/SPR-5926?redirect=false)** and commented  Inside the MBeanExporter.autodetect(AutodetectCallback) method, there is a check as follows:  \ String[] beanNames = this.beanFactory.getBeanNamesForType(Object.class, true, this.allowEagerInit); ... if (!isExcluded(beanName)) { ... } \  Here, the bean names for the factory beans are returned with a ampersand in front (like &someBean), and when the MBeanExporter is used in Spring config with excludedBeans set, one has to use smth like this to get the factoryBean created beans excluded:  \ \ \ \ \ So all in all, the framework should know how to handle factory beans and the beans created via them.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/566eeba8cac45b1f5bfedb710865a22bb04e3597","closed","type: enhancement,","spring-projects-issues","2009-07-14T03:44:35Z","2012-06-19T03:43:25Z"
"","10366","Add execute(Object[] values) method to StoredProcedure [SPR-5696]","**[Celal Ziftci](https://jira.spring.io/secure/ViewProfile.jspa?name=celal)** opened **[SPR-5696](https://jira.spring.io/browse/SPR-5696?redirect=false)** and commented  Currently there are methods that take in ""Object[]"" for the execution of operations in most of the jdbc.object classes, such as: - SqlUpdate.update(Object[]) - MappingSqlQuery.execute(Object[])  It would be very beneficial to have a similar method in StoredProcedure as ""execute(Object[])"".  I understand that there is a distinction in terms of update or query, and stored procedures in that stored procs can have a mixture of input and output params. However, this can be handled quite easily by using the already existing metadata provided to construct the StoredProcedure.  Below is a sample implementation:  ``` /**      * Avoids having to use a Map, hence to duplicate the keys of the map, which are the parameter names already      * provided while registering the parameters to the {@link StoredProcedure}.      *       * @param values      *            the values for the input parameters defined on this stored procedure, in the order of      *            registration. It is legal for map entries to be null, and this will produce the correct behavior using      *            a NULL argument to the stored procedure.      * @return map of output params, keyed by name as in parameter declarations. Output parameters will appear here,      *         with their values after the stored procedure has been called.      */     public Map execute(Object[] values) {         if (values == null) {             return execute(Collections.EMPTY_MAP);         } else {             List params = this.getDeclaredParameters();             List inputParams = new ArrayList();             // filter the input params             for (SqlParameter sqlParameter : params) {                 if (sqlParameter.isInputValueProvided()) {                     inputParams.add(sqlParameter);                 }             }              // Make sure exactly correct number of arguments are provided             if (inputParams.size() != values.length) {                 throw new IllegalArgumentException(""There are "" + inputParams.size() + "" input arguments, but ""                         + values.length + "" values are provided"");             }              // Create a map, and call existing execute method             Map valuesToReturn = new HashMap();             for (int i = 0; i < inputParams.size(); i++) {                 valuesToReturn.put(inputParams.get(i).getName(), values[i]);             }             return execute(valuesToReturn);         }     } ```  The use-case for this is: this avoids having to duplicate the input parameter names twice: - once during the registration of the input parameter with name to StoredProcedure - second, when we construct the Map for values to pass values to StoredProcedure.execute(Map) method    ---  **Affects:** 3.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7c053127ddc4cbfdf0aef8778029d087cd11d808","closed","type: enhancement,","spring-projects-issues","2009-04-23T05:42:53Z","2012-06-19T03:43:34Z"
"","10358","Male JNDI- container prefix configurable to support i.e. convenient JNDI lookups in a JBoss environment [SPR-5688]","**[Canny Duck](https://jira.spring.io/secure/ViewProfile.jspa?name=cannyduck)** opened **[SPR-5688](https://jira.spring.io/browse/SPR-5688?redirect=false)** and commented  The container prefix is hardcoded in the JndiLocatorSupport class. But i.e. JBoss uses the prefix ""java:"" instead of ""java:comp/env/"" for lookup. It would be better to make the container preffix configurable for a convenient Spring like JNDI access also in JBoss environments.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=65258","closed","type: enhancement,","spring-projects-issues","2009-04-20T22:38:24Z","2012-06-19T09:36:20Z"
"","10343","ReloadeableResourceBundleMessageSource wildcard support in basenames [SPR-5672]","**[Canny Duck](https://jira.spring.io/secure/ViewProfile.jspa?name=cannyduck)** opened **[SPR-5672](https://jira.spring.io/browse/SPR-5672?redirect=false)** and commented  The ReloadeableResourceBundleMessageSource should support wildcards in basenames. I attached an implementation for that. I know it's not the best solution but it fits to my needs.   ---  **Affects:** 2.5.6  **Attachments:** - [WildcardReloadeableResourceBundleMessageSource.java](https://jira.spring.io/secure/attachment/15313/WildcardReloadeableResourceBundleMessageSource.java) (_2.58 kB_)  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-13T18:11:36Z","2012-06-19T09:36:21Z"
"","10280","Support Tiles 2.2 for Velocity and FreeMarker purposes [SPR-5609]","**[Canny Duck](https://jira.spring.io/secure/ViewProfile.jspa?name=cannyduck)** opened **[SPR-5609](https://jira.spring.io/browse/SPR-5609?redirect=false)** and commented  ---  **Affects:** 3.0 M2, 3.0 GA  **Issue Links:** - #10084 TilesConfigurer class no longer works with Tiles 2.1.1 - #10765 TilesConfigurer does not support the new configuration model of Tiles 2.2  4 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-24T19:30:42Z","2019-01-11T16:31:36Z"
"","10185","Velocity Tools 2.0 support [SPR-5514]","**[Canny Duck](https://jira.spring.io/secure/ViewProfile.jspa?name=cannyduck)** opened **[SPR-5514](https://jira.spring.io/browse/SPR-5514?redirect=false)** and commented  Upgrade VelocityView and VelocityTools to support Velocity Tools 2.0 that provides dynamic loading of tools.   ---  **Affects:** 2.5.6  4 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-21T03:04:10Z","2015-09-22T17:34:31Z"
"","10330","@Property annotation to ""autowire"" properties [SPR-5659]","**[Bruno Navert](https://jira.spring.io/secure/ViewProfile.jspa?name=mycroft)** opened **[SPR-5659](https://jira.spring.io/browse/SPR-5659?redirect=false)** and commented  We (Morgan Stanley) have developed code to support a new annotation, similar to `@Autowired`: `@Property` This, combined with a BeanPostProcessor instance, will inject property values into fields/setters automatically, as if the bean had been registered in XML with ${xxx} placeholders.  The code uses a PropertyPlaceholderConfigurer subclass to be able to programmatively get the value of a given property name, using the same logic of system property override/fallback.  Benefits are clear: beans can then be annotated with `@Component`, and there's no need to define them in XML anymore when they depend on a property. Without this, `@Autowired` takes care of all the dependencies, but the moment you need a property, you still need to define your bean in XML in order to use the ${xxx} placeholder syntax. With this new annotation, everything can be done through code.  Since this code is very generic, we feel it would be best to be integrated into the core Spring framework.  Code will be attached to this JIRA issue as soon as we get legal approval internally to share it.   ---  **Affects:** 2.5.4  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-08T02:59:56Z","2012-06-19T03:47:00Z"
"","10510","SingletonBeanFactoryLocator.useBeanFactory() should decrement the BeanFactoryGroup reference after getBean() failure [SPR-5840]","**[Bruno Miguel CÃ¡lix Esteves Lopes](https://jira.spring.io/secure/ViewProfile.jspa?name=lopes)** opened **[SPR-5840](https://jira.spring.io/browse/SPR-5840?redirect=false)** and commented  In SingletonBeanFactoryLocator.useBeanFactory(), if exceptions occur after the BeanFactoryGroup is initialized (while getting the BeanFactory) it's reference count should be decremented.  As it is now, for example, after I try to get a BeanFactory that does not exist, the BeanFactoryGroup reference count is still incremented, making it's destruction when all references are released to never happen.  It should be easy to correct inserting refCount decrements at two locations: (...) try { BeanFactory beanFactory = null; if (factoryKey != null) { beanFactory = (BeanFactory) bfg.definition.getBean(factoryKey, BeanFactory.class); } else if (bfg.definition instanceof ListableBeanFactory) { beanFactory = (BeanFactory) BeanFactoryUtils.beanOfType((ListableBeanFactory) bfg.definition, BeanFactory.class); } else { bfg.refCount--; throw new IllegalStateException( ""Factory key is null, and underlying factory is not a ListableBeanFactory: "" + bfg.definition); } return new CountingBeanFactoryReference(beanFactory, bfg.definition); } catch (BeansException ex) { bfg.refCount--; throw new BootstrapException(""Unable to return specified BeanFactory instance: factory key ["" + 		factoryKey + ""], from group with resource name ["" + this.resourceLocation + ""]"", ex); } (...)   ---  **Affects:** 3.0 M3","closed","in: core,","spring-projects-issues","2009-06-19T01:25:31Z","2019-01-12T05:33:26Z"
"","10371","JaxWsPortProxyFactoryBean lookupServiceOnStartup property doesn't work with JRE 6 default JAXWS implementation. [SPR-5701]","**[Bruno CÃ©sar Brito Sant'Anna](https://jira.spring.io/secure/ViewProfile.jspa?name=brn.santanna)** opened **[SPR-5701](https://jira.spring.io/browse/SPR-5701?redirect=false)** and commented  I have an webservice client implementing though a JaxWsPortProxyFactoryBean which configuration is expressed bellow:  \ \ \ \ \ \ \  It is working fine, but when I set property   ""lookupServiceOnStartup""  to ""false""  My application throws an exception:  ""com.sun.xml.internal.ws.model.RuntimeModelerException: runtime modeler error: Wrapper class net.apoema.common.webservice.Save is not found. Have you run APT to generate them?""  Well, I generated everything using standard JDK 6  wsimport, it was working fine..  This stack might be relevant:  com.sun.xml.internal.ws.model.RuntimeModelerException: runtime modeler error: Wrapper class net.apoema.common.webservice.Save is not found. Have you run APT to generate them? at com.sun.xml.internal.ws.model.RuntimeModeler.getClass(RuntimeModeler.java:256) at com.sun.xml.internal.ws.model.RuntimeModeler.processDocWrappedMethod(RuntimeModeler.java:567) at com.sun.xml.internal.ws.model.RuntimeModeler.processMethod(RuntimeModeler.java:514) at com.sun.xml.internal.ws.model.RuntimeModeler.processClass(RuntimeModeler.java:341) at com.sun.xml.internal.ws.model.RuntimeModeler.buildRuntimeModel(RuntimeModeler.java:227) at com.sun.xml.internal.ws.client.WSServiceDelegate.addSEI(WSServiceDelegate.java:588) at com.sun.xml.internal.ws.client.WSServiceDelegate.getPort(WSServiceDelegate.java:291) at com.sun.xml.internal.ws.client.WSServiceDelegate.getPort(WSServiceDelegate.java:274) at com.sun.xml.internal.ws.client.WSServiceDelegate.getPort(WSServiceDelegate.java:267) at javax.xml.ws.Service.getPort(Service.java:92)   ---  **Affects:** 2.5.6  1 votes, 0 watchers","closed","in: web,","spring-projects-issues","2009-04-28T01:41:07Z","2019-01-11T17:30:31Z"
"","10190","Generic DAO support for Hibernate and JPA [SPR-5519]","**[Bruce Brouwer](https://jira.spring.io/secure/ViewProfile.jspa?name=bbrouwer)** opened **[SPR-5519](https://jira.spring.io/browse/SPR-5519?redirect=false)** and commented  I see this request show up from time to time. I have implemented a generic DAO for both Hibernate and JPA that has really helped with development of DAOs. I outline its use in the [forum topic](http://forum.springsource.org/showthread.php?t=66139).  Sometimes, it appears that these requests have gotten lost. Some past objections to include this were based on the fact that different data tools behave differently, and so a common solution for all ORM tools was not reasonable. That may be true, but that doesn't negate the possibility of having a solution that is specific to each ORM tool. So, the JPA solution will have methods named the JPA way and work the JPA way. The hibernate solution will have methods named the Hibernate way and work the JPA way.  This really would be a big help if it was part of the Spring framework. I am willing to contribute my code and the tests with 100% code coverage. I am also willing to work with anyone in addressing any concerns with this solution. Is it possible to have this solution considered for inclusion in Spring? I am willing to do the work. I just don't know how to proceed.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=66139","closed","type: enhancement,","spring-projects-issues","2009-02-23T08:08:57Z","2012-06-19T09:36:27Z"
"","10774","Cache for Service Layer Class [SPR-6106]","**[Brijesh Kumar Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=brijesh9aug)** opened **[SPR-6106](https://jira.spring.io/browse/SPR-6106?redirect=false)** and commented  In the Spring, we get the reference of implemented class for the Business Manager INterface from the Bean Context or Application Context. But Spring framework presently do not cache that instance. Everytime as request comes Spring has to build that object. So what we can do is we can cache the instance. It will help in reducing the processing time for the request. It is something like Service Locator pattern, once the service is there, we normally cache it for further transaction.  I  have already developed and using this in my application......   --- No further details from [SPR-6106](https://jira.spring.io/browse/SPR-6106?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-09-13T22:46:55Z","2011-03-08T01:53:09Z"
"","10871","Persistent message queue restart generates ""Cannot publish to a deleted Destination"" if there are messages to deliver on startup [SPR-6203]","**[Brian Topping](https://jira.spring.io/secure/ViewProfile.jspa?name=topping)** opened **[SPR-6203](https://jira.spring.io/browse/SPR-6203?redirect=false)** and commented  When a service is made available via JmsInvokerServiceExporter and connected to with DefaultRemoteInvocationExecutor on a persistent and transactional VM queue, messages that trigger an exception in the consumer will be persisted, as expected.  If the server is shut down and restarted, these messages are valid with the exception of the response queue name, which is of the form ""temp-queue://ID:..."".  Upon recovery, DefaultRemoteInvocationExecutor properly connects to the queue and accepts delivery of a message, but after processing it, the response fails in the JMS infrastructure because the response queue is invalid.  This failure causes the transaction to rollback and the message to be requeued, even though the consumer has completed it's task.  This first message in the queue is then repeatedly redelivered until the server is shut down.  A less than ideal workaround is to run a dedicated instance of the queue provider over sockets, at the great expense of performance from serialization.  It is not an issue with the queue provider, the response queue is not being created on restart.  Practically, it seems that under a recovery situation, if a response queue cannot be reached, the message should be considered delivered and not rolled back.  This would warrant a caveat in the documentation, but it is a reasonable situation.  In all cases, it may be worth considering whether the response queue for a message is available before issuing it to the consumer.  The container has adequate information to determine whether it will need to rollback a message before the consumer acts on it, and once the consumer has acted, the message should not be requeued.  This may be a check that is only made during recovery.  This may be a situation where a dead letter queue is a better solution, but it is not apparent to me yet how this would be done.   ---  **Affects:** 3.0 RC1","closed","status: invalid,","spring-projects-issues","2009-10-07T04:24:51Z","2019-01-12T05:33:03Z"
"","10811","RestTemplate cannot support OAuth [SPR-6143]","**[Brian Topping](https://jira.spring.io/secure/ViewProfile.jspa?name=topping)** opened **[SPR-6143](https://jira.spring.io/browse/SPR-6143?redirect=false)** and commented  Overview: OAuth works by a series of shared secrets and hashes with those secrets on the URI and it's query parameters.  In order for RestTemplate to support this increasingly important protocol, a transport must allow access (ideally, structured access) to the parameters that must be hashed as a part of the protocol.  As it stands, RestTemplate cannot support OAuth.  There are two major issues:  First: It was attempted to do this with a RequestCallback for GET method calls, but failed because the URLConnection is created before the RequestCallback has an opportunity to add the necessary additional query parameters.  It seems only appropriate that RequestCallback should have r/w access to the URI before it is used to open a connection.  Second: Even if this were fixed for GET method calls, http://oauth.net/core/1.0a#rfc.section.9.1.1 states that request parameters are collected from three locations when calculating signature hashes: * Parameters in the OAuth HTTP Authorization header (Authorization Header) excluding the realm parameter. * Parameters in the HTTP POST request body (with a content-type of application/x-www-form-urlencoded). * HTTP GET parameters added to the URLs in the query part (as defined by [RFC3986] (Berners-Lee, T., ""Uniform Resource Identifiers (URI): Generic Syntax,"" .) section 3).  Unfortunately, because the request body of the POST method is an OutputStream, there is no way to inspect the body to find application/x-www-form-urlencoded data, parse it for parameters, and construct the Signature Base String.  Fixing the second problem highlights a need for structured body content renderers that can be modified before they are called to render when the connection is made.  For instance, a basic BodyContentRenderer could write directly to the connection OutputStream (with no semantic difference than the current solution), and a more advanced one would emulate HTML form data, eventually rendering application/x-www-form-urlencoded data to the OutputStream, but not until the RequestCallback had an opportunity to modify the structured data of the form before it was rendered.  ---  **Affects:** 3.0 M4  **Issue Links:** - #12152 Introduce interceptors for RestTemplate (_**""depends on""**_) - #13050 UriTemplate doesn't encode query parameters  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-22T13:31:51Z","2019-01-11T14:10:02Z"
"","10873","support for multiple transaction managers with @Transactional /  needs to be documented [SPR-6205]","**[Brian James](https://jira.spring.io/secure/ViewProfile.jspa?name=bjames)** opened **[SPR-6205](https://jira.spring.io/browse/SPR-6205?redirect=false)** and commented  The fix for allowing multiple transaction managers to be used with annotations (Reference #8635) needs to be documented. There is no mention of this new feature in the 3.0.0.RC1 documentation.  ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1ddbfe0759751e1b44b8e1b85610416a88c0fb4b","closed","type: documentation,","spring-projects-issues","2009-10-07T07:50:52Z","2019-01-11T14:43:23Z"
"","10837","DispatcherServlet + web.xml context-param + contextConfigLocation = documentation vs implementation differ [SPR-6169]","**[Brian Ferris](https://jira.spring.io/secure/ViewProfile.jspa?name=bdferris)** opened **[SPR-6169](https://jira.spring.io/browse/SPR-6169?redirect=false)** and commented  In the documentation for DispatcherServlet (http://static.springsource.org/spring/docs/2.5.x/reference/mvc.html#mvc-servlet), it states:      You can customize Spring's DispatcherServlet by adding context parameters in the web.xml file or servlet initialization parameters. The possibilities are listed below.  It mentions ""contextConfigLocation"", which allows you to specify the resource locations for your context files. The documentation seems to indicate that DispatcherServlet will read web.xml \ definitions of ""contextConfigLocation"", but in practice DispatcherServlet only seems to read servlet \ definitions.  Either the documentation is incorrect or the implementation is.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=78564  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a5a2b18aca8e60228dfb4507fc7aa540ff64727","closed","type: task,","spring-projects-issues","2009-10-01T04:56:33Z","2012-06-19T03:42:57Z"
"","10617","spring-mvc-step-by-step.pdf contains confusing taglib-uri example in ""Adding a form"" [SPR-5948]","**[Brett Randall](https://jira.spring.io/secure/ViewProfile.jspa?name=javabrett)** opened **[SPR-5948](https://jira.spring.io/browse/SPR-5948?redirect=false)** and commented  Ref doc spring-mvc-step-by-step.pdf version 2.5, section 4.5 ""Adding a form"":  web.xml:  \ \ \/spring\ \/WEB-INF/tld/spring-form.tld\ \ \  then in JSP:    It seems like the taglib URIs suggested are a mix of short/relative and JSP 1.2 absolute (within the TLD) URI declarations.  Maybe the doc could suggest that if you are using JSP 1.2 or better that you can eliminate the taglib declaration in web.xml.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-07-21T13:52:46Z","2012-06-19T09:36:18Z"
"","10794","Clarify the meaning of SessionStatus.setComplete() in a Portlet environment [SPR-6126]","**[Brad Thurber](https://jira.spring.io/secure/ViewProfile.jspa?name=bthurber)** opened **[SPR-6126](https://jira.spring.io/browse/SPR-6126?redirect=false)** and commented  See Forum reference for more detail  Failing Test case: User opens a form in a JSR 286 portlet User changes data in the form, User clicks cancel button Form closes Data is (correctly) not persisted to db User opens form again User sees that the changes they made and canceled are still there. Changes should have been discarded by SessionStatus.setComplete()  Switching portlet.xml to JSR 168 standard fixes the problem  ---  **Affects:** 3.0 M4  **Reference URL:** http://forum.springsource.org/showthread.php?p=260919#post260919  **Issue Links:** - #11808 Portlet AnnotationMethodHandlerAdapter sets a render request parameter with a framework package name  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f4453a99c904f820c72478b902a62d3a670bbee  6 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-09-18T04:50:54Z","2019-01-11T14:05:41Z"
"","10862","MockServletContext hardcoded to return 2.5 for servlet version [SPR-6194]","**[Bob Jacoby](https://jira.spring.io/secure/ViewProfile.jspa?name=jacorob)** opened **[SPR-6194](https://jira.spring.io/browse/SPR-6194?redirect=false)** and commented  MockServletContext is hardcoded to return '5' for the servlet minor version.  org.springframework.web.context.ContextLoader contains a check of the servlet version number to determine whether or not to call a servlet 2.5 API method.      // Assign the best possible id value.     if (servletContext.getMajorVersion() > 2 || servletContext.getMinorVersion() >= 5) {          // Servlet 2.5's getContextPath available!          wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + servletContext.getContextPath());     }  Since MockServletContext will return 2.5 as the servlet version, our 2.4 servlet api test code throws a runtime exception when the ContextLoader attempt to call the 2.5 API method.  Could setters be provided for the major/minor version numbers in MockServletContext? The 2.5 method getContextPath could also throw an exception if called when the mock context is set to 2.4.  I consider this a bug as I thought it was supposed to be able to be used in a 2.4 environment. If not, I guess this is a enhancement/improvement. :)   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a111e504fcf5744347914776f70d6969796df96","closed","type: enhancement,","spring-projects-issues","2009-10-06T05:13:08Z","2012-06-19T03:43:40Z"
"","10771","The matching wildcard is strict, but no declaration can be found for element 'context:spring-configured'. [SPR-6103]","**[Bjorn Harvold](https://jira.spring.io/secure/ViewProfile.jspa?name=bjornharvold)** opened **[SPR-6103](https://jira.spring.io/browse/SPR-6103?redirect=false)** and commented  Having problem finding xsd spring-context-3.0.xsd. See the spring forum reference for more info.  > \ >  > \ xmlns:context=""http://www.springframework.org/schema/context"" > xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" > xsi:schemaLocation=""http://www.springframework.org/schema/beans > http://www.springframework.org/schema/beans/spring-beans-3.0.xsd > http://www.springframework.org/schema/context > http://www.springframework.org/schema/beans/spring-context-3.0.xsd""> >  >  >      >      >      >      >          >      >  > \  Here's the error:  > 2009-09-13 02:01:54,308 TRACE PluggableSchemaResolver.resolveEntity():105 - Trying to resolve XML entity with public id [null] and system id http://www.springframework.org/schema/beans/spring-beans-3.0.xsd > 2009-09-13 02:01:54,310 DEBUG PluggableSchemaResolver.getSchemaMappings():132 - Loading schema mappings from [META-INF/spring.schemas] > 2009-09-13 02:01:54,312 DEBUG PluggableSchemaResolver.getSchemaMappings():138 - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/security/spring-security-2.0.2.xsd=org/springframework/security/config/spring-security-2.0.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/flex/spring-flex-1.0.xsd=org/springframework/flex/config/xml/spring-flex-1.0.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/security/spring-security-2.0.1.xsd=org/springframework/security/config/spring-security-2.0.1.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/security/spring-security-2.0.xsd=org/springframework/security/config/spring-security-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/security/spring-security-2.0.4.xsd=org/springframework/security/config/spring-security-2.0.4.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/security/spring-security.xsd=org/springframework/security/config/spring-security-2.0.4.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd} > 2009-09-13 02:01:54,324 DEBUG PluggableSchemaResolver.resolveEntity():116 - Found XML schema http://www.springframework.org/schema/beans/spring-beans-3.0.xsd in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd > 2009-09-13 02:01:54,467 TRACE PluggableSchemaResolver.resolveEntity():105 - Trying to resolve XML entity with public id [null] and system id http://www.springframework.org/schema/beans/spring-context-3.0.xsd > 2009-09-13 02:01:56,563 TRACE BeansDtdResolver.resolveEntity():55 - Trying to resolve XML entity with public ID [-//W3C//DTD XHTML 1.0 Strict//EN] and system ID http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd > 2009-09-13 02:01:56,647 WARN  SimpleSaxErrorHandler.warning():47 - Ignored XML validation warning > org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'http://www.springframework.org/schema/beans/spring-context-3.0.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not . > ........ > org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 20 in XML document from file [/Users/crash/svn/xyz/xyz-web/target/xyz-web-0.1.0-SNAPSHOT/WEB-INF/classes/META-INF/spring/applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'context:spring-configured'. > at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:378)    ---  **Affects:** 3.0 M4  **Reference URL:** http://forum.springsource.org/showthread.php?p=259914","closed","in: core,","spring-projects-issues","2009-09-12T17:27:09Z","2019-01-12T05:33:05Z"
"","10633","Typo error in reference documentation - ""What's new in Spring 3.0"" [SPR-5965]","**[billy.Gong Liming](https://jira.spring.io/secure/ViewProfile.jspa?name=billy0401)** opened **[SPR-5965](https://jira.spring.io/browse/SPR-5965?redirect=false)** and commented  2.1 Java 5 .... """"""generified"""""" FactoryBeans....""""""Generified"""""""" ApplicationListeners.....  typo error here   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3e02887dd25a8f2aa1f8884dbd7872ad8f43bc17","closed","type: bug,","spring-projects-issues","2009-07-29T20:12:02Z","2012-06-19T03:43:23Z"
"","10456","Spring 2.5's CollectionFactory class may require Java 6 to run on certain JVMs [SPR-5786]","**[Billy Newport](https://jira.spring.io/secure/ViewProfile.jspa?name=bnewport)** opened **[SPR-5786](https://jira.spring.io/browse/SPR-5786?redirect=false)** and commented  The CollectionFactory class references NavigableSet      if (JdkVersion.isAtLeastJava16()) {          approximableCollectionTypes.add(NavigableSet.class);          approximableMapTypes.add(NavigableMap.class);     }  This references the NAvigable classes from the class forcing their loading on loading CollectionFactory. This means the code won't run on Java 5. A Class.forName needs to  be used to add the class rather than a direct reference.   ---  **Affects:** 2.5.6","closed","type: bug,","spring-projects-issues","2009-05-26T09:35:45Z","2012-06-19T03:43:23Z"
"","9918","Thread context ClassLoader does not find Spring-managed beans on Netweaver (SAP) application server [SPR-5244]","**[Bhaskar Maddala](https://jira.spring.io/secure/ViewProfile.jspa?name=maddalab)** opened **[SPR-5244](https://jira.spring.io/browse/SPR-5244?redirect=false)** and commented  Using spring beans under netweaver results in following exception  Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [com.****.infr.admin.SettingsManagerImpl] for bean with name 'settingsManager' defined in class path resource [/com/****/bre/integration/intgconf.xml]; nested exception is java.lang.ClassNotFoundException: com.****.infr.admin.SettingsManagerImpl  I tracked this down to the  AbstractApplicationContext.prepareBeanFactory  The method sets the class loader on the beanFactory to the context class loader  beanFactory.setBeanClassLoader(getClassLoader());  where getClassLoader is  Thread.currentThread().getContextClassLoader()  On the netweaver platform the application server seems to make use of the context class loader for its own purposes. The context class loader does not include my beans in its class path.  the documentation on ClassUtils.getDefaultClassLoader() (used to retreive the class loader for bean factory) states          * Call this method if you intend to use the thread context ClassLoader     * in a scenario where you absolutely need a non-null ClassLoader reference:     * for example, for class path resource loading (but not necessarily for     * Class.forName, which accepts a null ClassLoader     * reference as well).  Since BeanFactory  makes use of Class.formName() (via getBean), it should not rely on the context class loader to instantiate spring managed beans   --- No further details from [SPR-5244](https://jira.spring.io/browse/SPR-5244?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-10-28T08:30:48Z","2012-06-19T09:36:13Z"
"","10367","Cannot map handler - There is already handler with @Controller and not unique requestMappings [SPR-5697]","**[Bertalan Fodor](https://jira.spring.io/secure/ViewProfile.jspa?name=fodber)** opened **[SPR-5697](https://jira.spring.io/browse/SPR-5697?redirect=false)** and commented  Using      with `@Controller` annotation I get automatic mappings. For example:  ``` @Controller public class FormController becomes: /form/* ```  If I have a request handler in FormController like  ``` @RequestMapping(""init.do"") public String init() { } ```  it gets mapped to `/form/init.do` Alright this way. But if I create another controller like  ``` @Controller public class ContactController {       @RequestMapping(""init.do"")     public String init() { }  } ```  it isn't mapped to `/contact/init.do` as I would expect, but throws the error: Cannot map handler [formController] to URL path [init.do]: There is already handler [com.company.FormController@f8b79a] mapped.   ---  **Affects:** 2.5.6  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2009-04-24T01:33:30Z","2019-01-12T16:27:09Z"
"","9935","Conditional Bean Definitions [SPR-5261]","**[Bernard Macours](https://jira.spring.io/secure/ViewProfile.jspa?name=bmacours)** opened **[SPR-5261](https://jira.spring.io/browse/SPR-5261?redirect=false)** and commented  We would like to conditionally remotely expose some beans in our integration testing environment, but this is currently not possible (there is no out-of-the-box solution). Typically the condition would be based on a property value (a system property or a property from a property file), for example:  \ \ \  Where ""property-name"" gives a property name and ""property-value"" a regular expression the property value must match for the bean to be instanciated.  To ease error detection, it would also be nice to get an exception like ""ConditionalBeanAccessException"" when trying to reference a conditional bean which has not been instanciated.  ---  **Affects:** 2.5.5  **Issue Links:** - #12165 Add environment abstraction and support bean definition profiles (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2008-10-31T02:00:17Z","2019-01-11T15:24:35Z"
"","9884","Add ability to clear and replace errors in Errors/BindException objects [SPR-5211]","**[Ben Starr](https://jira.spring.io/secure/ViewProfile.jspa?name=benstarr)** opened **[SPR-5211](https://jira.spring.io/browse/SPR-5211?redirect=false)** and commented  It would be useful to be able to clear the errors in the Errors/BindException objects in controllers and validators. There are a couple of situations where this is particularly useful. The first is where there is a bind error for a particular field (e.g. type mismatch). Sometimes it is desirable to replace the default/global error message with one that is specific to the particular field in question. The second is where a form change request is processed and a there are bind errors (e.g. type mismatches). Sometimes it is desirable to suppress the display of binding errors in this situation. It would be useful in this case to be able to simply clear any bind errors from the Errors/BindException object. There are other situations when special error handling/reporting is desirable. At the moment the main workaround that I am using is to specify the data type as String in the form backing object so that bind errors do not occur for the field but then I have to manually check for type mismatches, etc in the validator and have to convert the field to the relevant type manually in the controller.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-10-12T10:13:28Z","2012-06-19T09:36:16Z"
"","10315","PropertyEditor support for binding of open enums (Enum) [SPR-5644]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-5644](https://jira.spring.io/browse/SPR-5644?redirect=false)** and commented  We use a map to hold options that can be passed into certain operations to influence their behavior. The map is keyed by some enum. Since we don't know all possible options we can't have a single enum. So we instead follow a pattern where each ""subsystem"" provides its own enum class. As such the key type in our map is Enum. We preferred this approach over static final strings as we'd hoped to offer some degree of type safety when loading an XML configuration since only strings representing valid enums and this options can be set. For example:  ``` Map.  I've attached a test-case demonstrating this in more detail. It also shows a custom PropertyEditor workaround, however as mentioned we think support for this in the core framework would be generally useful.   ---  **Attachments:** - [EnumBindingTest.java](https://jira.spring.io/secure/attachment/15281/EnumBindingTest.java) (_5.37 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1480202aa37d7edaf7f070a2bf45cd3a1016eea7  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-01T06:05:05Z","2012-06-19T03:46:37Z"
"","10181","Bean Configuration Overriding [SPR-5509]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-5509](https://jira.spring.io/browse/SPR-5509?redirect=false)** and commented  #### Overview  Spring provides a powerful mechanism to ""pull"" (inherit) configuration from a ""parent"" configuration. Sometimes it would be convenient to ""push"" (override) configuration onto a target bean or replace the bean definition entirely using a single consistent mechanism.  We see 2 main use-cases for configuration overriding:  - A) Testing production configurations with small tweaks - B) Extending a default configuration  ##### Use-Case A  When running an integration style test we find we need to override properties or even entire beans in the production configuration to allow tests to run quickly by swapping out real resources with mocked or faked implementations.  ##### Use-Case B  Frameworks built on top of Spring often ship with some 'default' configuration. Applications using this framework import the default configuration into their own configuration to get the framework setup. If these defaults need to be tweaked the only practical option is often to copy & paste the framework configuration and update the required property(s). It is preferable for the Application importing the defaults to be very specific and only override the specific properties it needs to rather than copying the entire config and avoiding getting future changes to the defaults. A real world example of this can be found in our own runtime framework. It manages Application caches in a cache manager configured by the framework defaults. Often Applications want to customize the cache manager, for example, to tweak the size of the thread pool used to keep caches refreshed.  ---  #### Details  Applications can be designed up front for overriding by using ${} placeholders however this is not always convenient and can obscure the configuration. In other cases the PropertyOverrideConfigurer can help but this requires the overrides be placed in a separate properties file. Spring also provides the ability to re-define beans by putting a bean with the same name in a later configuration file. Together these techniques can solve most, if not all, use-cases however individually they confuse and scatter the overrides. If united into a single mechanism it would allow a consistent approach and central location to define these overrides.  ##### Examples of overriding features we use  1. Replace beans 2. Override properties, constructor-args or bean-attributes (for example, the class or lazy-init value) 3. Custom mutation of properties, for example adding or removing from a collection  1 and 2 represent the 80-90% case.  It is possible to implement these features in an ad-hoc fashion using a custom BFPP to implement the overriding. However we feel a more natural, integrated and standard solution to express the overriding intent in a first class way would be generally useful in Spring. Some ideas on possible approaches to give more background are:  ###### XML Syntactic Sugar  - Re-use the ""parent"" bean attribute:  ```xml         ```  ```xml      ```  This is interpreted as ""foo"" in Config#2 redefines and overrides ""foo"" from Config#1. This isn't possible with the current implementation since bean definitions with the same name replace previous bean definitions so once Config#2 is read the original 'foo' is lost.  - Use a naming convention  ```xml      ```  This is interpreted as ""+"" (add) the configuration to the bean definition for ""foo"". This is unlikely to be a general solution since it would break backwards compatibility, but gives an example of what a custom BFPP could do.  - Add a new 'override' attribute to \  ```xml      ```  This explicitly ""overrides"" the configuration for ""foo"".  With both these approaches it isn't clear how to **remove** configuration - they can only **add** properties (replacing any previous properties). An additional property attribute or special value could be used to declare that the property should be removed from the definition. Its not clear if this is a real limitation.  ###### Java code  Java is the most powerful and natural mechanism to override beans. For example, if the original configuration was expressed using Spring JavaConfig it would just a case of overriding the method and calling super if required:  ``` @Bean @Override public Widget Foo() {   Widget w = super.Foo();   w.setP1(2);   return w; } ```  Most configuration is currently expressed in XML so bridging the gap and allowing Java to override selected beans definitions would provide a powerful mechanism. Its not clear if the bean-instance (easiest to work with) or bean-definition (most powerful) should be given to the overriding method. For example, all these overrides could be expressed as methods in a class:  ``` // this 'processor' is called to fix up bean definition 'foo' @OverrideBean() public void Foo(AbstractBeanDefinition definition) {   definition.getPropertyValues().addPropertyValue(""p1"", 2); } ```  The AbstractBeanDefinition API can be cumbersome to use, especially when dealing with collections and bean references. For some use-cases it may be sufficient to work with the concrete bean-instance, a factory pattern like that used in the Scope API would allow for the XML bean definition to be completely ignored if required:  ``` // this 'factory' is called to create the bean 'foo' @OverrideBean() public Object Foo(BeanCreator factory) {   // Can avoid creating 'foo' defined in config by just using new Foo()   // The BeanCreator could also offer access to BeanDefinition allowing   // both instance/definition APIs to work side by side.   Foo foo = (Foo)factory.create();   foo.setP1(2);   return foo; } ```  Both Java approaches work cleanly with the testing use-case since a single test class can define both the test logic and test overrides, rather than spreading these throughout multiple files.  ---  **Issue Links:** - #12839 Revised support for bean definition visibility and overriding (_**""is depended on by""**_) - #12637 Support profile exclusivity and/or bean definition finality - #11690 Allow `@Bean` methods to override definitions in XML - #11129 Named constructor args cannot be overridden by child bean definitions  27 votes, 29 watchers","closed","status: bulk-closed,","spring-projects-issues","2009-02-19T21:27:45Z","2019-01-13T08:00:56Z"
"","10180","Property placeholder defaulting in resources path [SPR-5508]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-5508](https://jira.spring.io/browse/SPR-5508?redirect=false)** and commented  #9462 requested support for defaulting in the PPC. For consistency this should be supported when expanding properties found in resource paths such as resolving the path for imports and resolving the location of the actual properties file for the PPC to use.  ---  **Issue Links:** - #9462 Add support for default values in property placeholder syntax","closed","type: enhancement,","spring-projects-issues","2009-02-19T21:14:13Z","2019-01-11T16:46:42Z"
"","10179","Phased Lifecycle Stop [SPR-5507]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-5507](https://jira.spring.io/browse/SPR-5507?redirect=false)** and commented  Spring provides a Lifecycle interface (Start & Stop) in addition to a mechanism to broadcast these signals to beans in the application context.  #8436 suggested an improvement to allow beans to define the order that these signals are delivered. The fix in 2.5.2 (following dependency order) is arguably a neater solution. One caveat with deriving the order from Spring (rather than allowing the components to declare their own order) is when Spring can't ""see"" the dependencies. For example, if some BPP ""magic"" detects components and installs them into other components Spring can't detect this dependency. It does appear this can (and should) be solved with the BPP registering the dependencies it is creating explicitly (via registerDependency() API).  A more subtle problem with the Lifecycle is what 'stop' means (for most use-cases 'start' rarely causes problems). Indeed, its not clear from the documentation when the stop method should return. The choices are:  A) Stop the component and returns when stopped; effectively joining on ""end-stop"" event B) Request the component to stop but returns immediately, possibly before it has stopped  The DMLC interprets ""stop"" as (B). This can cause problems since other **dependant** components can receive the stop signal before the DMLC is fully stopped (and may still be processing messages). If a DMLC is using a message handler that itself makes use of a database pool then the following can occur:  1) DMLC picks up a message from the queue 2) DMLC stop signal delivered, no more messages are picked up but in-flight messages are finished 3) Database pool stop signal delivered next (since DMLC depends on it via the message handler); DB pool is stopped 4) Message handler requests a database connection and gets a exception since the pool is stopped  The problem defining ""stop"" as (A) is that large applications could take a long time shutdown. This can happen since components like the DMLC poll for work with a small timeout (in the order of 1 to 10 seconds). When the poll returns (and after any message is processed) the 'running' flag is checked to see if the thread should stop or carry on around the loop. Since the request for work can't be interrupted it can take up to the timeout interval for the thread to notice it should stop (assuming no work is available). To reduce load on our messaging queue manager we may run with a poll interval of say 10s. So each DMLC stop could take 10s and an application with 6 DMLCs could take 1 minute to shutdown.  To solve this phased shutdown could be introduced. For example, suppose we defined stop as:  /** * Requests this component to stop, this method should * not await completion of the stop, instead upon completion * of the stop the provided callback should be run.   */   public void stop(Runnable callback)  To shutdown the system all components with the same ""phase"" (defined by Ordered interface or otherwise) get the stop signal and we join on their completion. Once each phase is successfully stopped we continue to stop the next phase and so on. This approach allows us to concurrently shutdown phases whilst guaranteeing that components in earlier phases are already stopped. #9092 added such an API to the DMLC to allow for this.  It is possible to do this with our own PhasedLifecycle API and custom PhaseLifecycleProcessor (see attached files) however having this in Spring would help drive adoption of the Spring Lifecycle API and allow other components to participate in this model out the box (currently we have to wrap components manually).  ---  **Affects:** 2.5.6  **Attachments:** - [PhasedLifecycle.zip](https://jira.spring.io/secure/attachment/15141/PhasedLifecycle.zip) (_4.48 kB_)  **Issue Links:** - #11007 Documentation for SmartLifecycle and LifecycleProcessor (_**""is depended on by""**_) - #11126 Add namespace support for ""phase"" on JMS listener-container  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e1c00ceb261b901e570a0df7bdd2ceda1c5db9d, https://github.com/spring-projects/spring-framework/commit/021663b12ffb07f87dc27552e60ec74d048f51cb, https://github.com/spring-projects/spring-framework/commit/5b088f5cb43eee10340826a744f20edf19c9bcab, https://github.com/spring-projects/spring-framework/commit/b4442205641365292f55ca0f6091df0d5d2a491f, https://github.com/spring-projects/spring-framework/commit/6ee17d28267ad387c1cee5eb853a493e242ceeaa, https://github.com/spring-projects/spring-framework/commit/81efd48352d0fade47e40e8a9c8cf49d4ee269b5, https://github.com/spring-projects/spring-framework/commit/535ec5cffd5808c8aff3e485e28c3ef1b265caf4, https://github.com/spring-projects/spring-framework/commit/d5fd22c8fe1e8436d7093bd0e51f26fba24c7d48, https://github.com/spring-projects/spring-framework/commit/a7c1f6b730dec82f4d8ae381c283b3ec096b9283, https://github.com/spring-projects/spring-framework/commit/a15a9600b76c6fe9950f718cfe37c0d6e33f2711  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2009-02-19T06:25:52Z","2019-01-11T16:46:56Z"
"","10603","@Configurable incompatible with OpenJPA [SPR-5934]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-5934](https://jira.spring.io/browse/SPR-5934?redirect=false)** and commented  Issue [ROO-153](https://jira.spring.io/browse/ROO-153) reported an apparent incompatibility between OpenJPA and `@Configurable`. This was verified by both Stefan and I against OpenJPA 1.2.1 (the latest at time of writing) and 1.1.0 (the latest in Enterprise Bundle Repository and the version used by Roo by default).  The issue can be reproduced in a standard project by using OpenJPA and defining a single entity class. The single entity class should be annotated with `@Configurable` and `@Entity`. The entity should have a single field of any time, although we suggest `@Autowired` private DataSource dataSource. Using the ""new"" keyword to instantiate the entity will correctly perform `@Configurable` dependency injection.  The following can then be observed:  1. At startup time a log message similar to the following will be displayed:    64544  persistenceUnit  INFO   [http-8080-2] openjpa.Enhance - Creating subclass for ""[class com.springsource.vote.domain.Choice, class com.springsource.vote.domain.Vote]"". This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.  2. A EntityManager method that will result in OpenJPA instantiating the entity using its normal constructor (including the default no-arg constructor).  3. The entity is dependency injected using `@Configurable`, with debug log messages such as:    Processing injected field of bean 'com.springsource.vote.domain.Choice': AutowiredFieldElement for private javax.sql.DataSource com.springsource.vote.domain.Choice.dataSource    Returning cached instance of singleton bean 'dataSource'  4. If \ is within persistence.xml, the next debug messages will show:    243804  persistenceUnit  TRACE  [http-8080-1] openjpa.jdbc.SQL -  executing prepstmnt 18966302 SELECT t0.version, t0.description, t0.namingChoice FROM Choice t0 WHERE t0.id = ? [params=(long) 1]    243805  persistenceUnit  TRACE  [http-8080-1] openjpa.jdbc.SQL -  [0 ms] spent  5. The EntityManager method will return the entity to the caller.  6. Querying the entity's accessor will return ""null"", indicating the injected fields have been replaced with a null field.  It appears OpenJPA simply overwrites the fields injected by the `@Configurable` service. Adding the transient modifier to the field declaration makes no difference to the observed behaviour.   ---  **Affects:** 3.0 M3  **Issue Links:** - [ROO-153](https://jira.spring.io/browse/ROO-153) Delete object using openJPA","closed","in: core,","spring-projects-issues","2009-07-15T15:38:43Z","2019-01-12T16:26:57Z"
"","10422","@Configurable BeanCurrentlyInCreationException logging causing confusion [SPR-5752]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-5752](https://jira.spring.io/browse/SPR-5752?redirect=false)** and commented  Roo-based applications by default use `@Configurable` together with `@PersistenceContext` to cause the automatic injection of an EntityManager into `@Entity` instances. When used with Hibernate, exceptions such as the following are logged:  Returning eagerly cached instance of singleton bean 'entityManagerFactory' that is not fully initialized yet - a consequence of a circular reference BeanConfigurerSupport failed to create target bean 'entityManagerFactory' while configuring object of type [org.mycompany.sample.application.roo.domain.Item] (probably due to a circular reference). Proceeding without injection. org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.mycompany.sample.application.roo.domain .Item': Injection of persistence fields failed; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'entityManagerFactory': FactoryBean which is currently in creation returned null from getObject at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessAfterInstantiation(PersistenceAnnotationBeanPostProcessor.java:310) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:956) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:333) at org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(BeanConfigurerSupport.java:140) at org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect.configureBean(AnnotationBeanConfigurerAspect.aj:59) at org.springframework.beans.factory.aspectj.AbstractDependencyInjectionAspect.ajc$afterReturning$org_springframework_beans_factory_aspectj_AbstractDependencyInjectionAspect$2$1ea6722c(AbstractDependencyInjectionAspect.aj:89) at org.mycompany.sample.application.roo.domain.Item.\(Item.java:14) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:513) at org.hibernate.engine.UnsavedValueFactory.instantiate(UnsavedValueFactory.java:22) at org.hibernate.engine.UnsavedValueFactory.getUnsavedIdentifierValue(UnsavedValueFactory.java:44) at org.hibernate.tuple.PropertyFactory.buildIdentifierProperty(PropertyFactory.java:44) at org.hibernate.tuple.entity.EntityMetamodel.\(EntityMetamodel.java:124) at org.hibernate.persister.entity.AbstractEntityPersister.\(AbstractEntityPersister.java:434) at org.hibernate.persister.entity.SingleTableEntityPersister.\(SingleTableEntityPersister.java:109) at org.hibernate.persister.PersisterFactory.createClassPersister(PersisterFactory.java:55) at org.hibernate.impl.SessionFactoryImpl.\(SessionFactoryImpl.java:226)  These exceptions happen when running Roo integration tests and starting a Servlet container to host the application. They are causing confusion for end users, who assume there is a problem whereas the message is simply informational.  It would be preferable that such messages are not logged, or if they must still be logged, the message be clarified to indicate this is an expected and non-fatal condition due to the interaction between `@Configurable`, Hibernate and `@PersistenceContext`.  ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=71760  **Issue Links:** - #9897 Circular reference when using `@Configurable` and `@PersistenceContext`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e0f663092c3e3f92e1dd28ebbec6553e3bfc645","closed","type: enhancement,","spring-projects-issues","2009-05-13T16:52:17Z","2019-01-13T07:59:43Z"
"","10391","Reduce cumulative JAR payload required for DI-only use cases (particularly ANTLR) [SPR-5721]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-5721](https://jira.spring.io/browse/SPR-5721?redirect=false)** and commented  As discussed over email, there are certain projects that use Spring Framework for dependency injection use cases only (eg the Spring Roo shell). Such projects may have distribution size minimization preferences that are easier to achieve if Spring Framework operated in a base ""DI-only"" mode with a minimal JAR payload.  The 3.0.0 series of Spring Framework introduced new expression language support, which as of 3.0.0.M3 has a dependency on ANTLR. In 3.0.0.M3 this amounts to 740K of JARs that would ideally be optional for ""DI-only"" usage. Excluding these JARs in 3.0.0.M3 causes a NoClassDefFoundError (org/antlr/runtime/RecognitionException) due to StandardBeanExpressionResolver.java:57.  It would be desirable if Spring Framework could operate without requiring expression languages JARs. Likewise, any other improvements that could be made to diminish the JAR payload requirements for DI-only use cases would be appreciated.   ---  **Affects:** 3.0 M3","closed","type: enhancement,","spring-projects-issues","2009-05-06T19:32:31Z","2012-06-19T03:43:56Z"
"","9914","ApplicationListener notifications to reflect Ordered interface [SPR-5240]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-5240](https://jira.spring.io/browse/SPR-5240?redirect=false)** and commented  At present Spring Framework offers no guarantees as to the order in which ApplicationEvent messages will be delivered to ApplicationListener instances.  It would be desirable for ApplicationListener instances that also implement Spring's Ordered interface to be notified of ApplicationEvents in the requested order. This would permit more complex use cases to be addressed by the ApplicationListener capability, plus provide consistency with other parts of Spring Framework which rely on Ordered.  As an interim solution, a user-provided OrderedApplicationEventMulticaster can be registered by AbstractApplicationContext. Nevertheless, it would be desirable for Spring Framework to provide this capability as part of its core functionality.   --- No further details from [SPR-5240](https://jira.spring.io/browse/SPR-5240?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-10-23T23:53:23Z","2012-06-19T03:47:34Z"
"","9897","Circular reference when using @Configurable and @PersistenceContext [SPR-5223]","**[Ben Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=balex)** opened **[SPR-5223](https://jira.spring.io/browse/SPR-5223?redirect=false)** and commented  This issue is similar to #7720.  If you have an `@Configurable` domain object which uses `@PersistenceContext` and Hibernate, you end up with a circular reference because the LocalContainerEntityManagerFactoryBean delegates to HibernatePersistence which ultimately attempts to invoke the domain object's constructor. This then leads to an attempt to inject the `@PersistenceContext` (due to `@Configurable`), which fails with:  Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [javax.persistence.EntityManagerFactory] is defined: expected single bean but found 0  A temporary workaround was to edit PersistenceAnnotationBeanPostProcessor and around line 516 add:  if (ControlFlowFactory.createControlFlow().under(AbstractEntityManagerFactoryBean.class)) { return null; }  A ThreadLocal would probably be more elegant than ControlFlowFactory. Another solution would be to write a more elaborate pointcut in the AnnotationBeanConfigurerAspect hierarchy, although that introduces special JPA handling (which seems suboptimal). Or detect the circular referencing as per #7720.  ---  **Affects:** 2.5.5  **Issue Links:** - #7720 Circular Reference while using both `@Configurable` and `@Entity` beans depending on Hibernate SessionFactory or Hibernate EntityManagerFactory - #10422 `@Configurable` BeanCurrentlyInCreationException logging causing confusion","closed","in: core,","spring-projects-issues","2008-10-20T10:47:39Z","2019-01-13T08:02:20Z"
"","10634","ContextRefreshedEvent listeners by annotation [SPR-5966]","**[Baruch Sadogursky](https://jira.spring.io/secure/ViewProfile.jspa?name=jbaruch)** opened **[SPR-5966](https://jira.spring.io/browse/SPR-5966?redirect=false)** and commented  Currently no lifecycle callback exist for ContextRefreshed notification. One of the use cases I can provide - transactional initialization work (e.g. cache preheating) can't be done by declarative transaction demarcation, only by TransactionTemplate.  The proposed improvement is `@PostInitialize` annotation, which can be applied to any method, similar to `@PostConstruct`. This method will be called after context refresh is finished, allowing using all the capabilites provided by PostProcessors.  Patch written by zvizvi and me attached. The PostInitializes work only in Singletons (beans in other scopes do no suffer from the described problem, since they created after full context refresh anyway) and they should be implemented as methods without parameters. They can be ordered by using order parameter of the `@PostInitialize` annotation.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=58337  **Attachments:** - [PostInitialize.zip](https://jira.spring.io/secure/attachment/15572/PostInitialize.zip) (_2.51 kB_)  14 votes, 14 watchers","closed","status: bulk-closed,","spring-projects-issues","2009-07-29T20:31:57Z","2019-01-12T03:50:57Z"
"","10183","Add warning when using classpath*:** path type with PathMatchingResourcePatternResolver [SPR-5511]","**[Baptiste MATHUS](https://jira.spring.io/secure/ViewProfile.jspa?name=batmat)** opened **[SPR-5511](https://jira.spring.io/browse/SPR-5511?redirect=false)** and commented  As said in the javadoc,for example  ""classpath*:**/message.properties"" won't be able to resolve properties file that would come from jar files. That'd be great and seemingly feasible to check for this kind of ""dangerous"" pattern, and to display warning about this.  We recently didn't put enough care not to use such and think some warning could have help here :-).  HTH.  Cheers.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-02-20T00:02:43Z","2012-06-19T09:36:17Z"
"","10722","Cannot retrieve database metadata for Sybase [SPR-6053]","**[Balaji Varanasi](https://jira.spring.io/secure/ViewProfile.jspa?name=balaji)** opened **[SPR-6053](https://jira.spring.io/browse/SPR-6053?redirect=false)** and commented  When executing a Sybase stored procedure using SimpleJdbcCall class, the database metadata is not being loaded. The logs show the following messages:  org.springframework.jdbc.core.metadata.CallMetaDataProviderFactory - SQL Server is not one of the databases fully supported for procedure calls -- supported are: [Apache Derby, DB2, MySQL, Microsoft SQL Server, Oracle, Sybase] org.springframework.jdbc.core.metadata.CallMetaDataProviderFactory - Metadata processing disabled - you must specify all parameters explicitly org.springframework.jdbc.core.metadata.CallMetaDataProviderFactory - Using org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider  After little research, I found that our Sybase database is named ""SQL Server"" and the commonDatabaseName method in JdbcUtils being used to get the database name compares against the string ""sql server"".  This problem gets fixed if the comparison with ""sql server"" is done without considering the case.  ---  **Affects:** 2.5.6, 3.0 M4  **Attachments:** - [sybase.patch](https://jira.spring.io/secure/attachment/15652/sybase.patch) (_822 bytes_)  **Issue Links:** - #11630 Sybase isn't detected by metadata when using WebLogic JDBC Driver (_**""is duplicated by""**_) - #10936 Include 'ASE' in the list of product names recognised by JDBCUtils as Sybase (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea674f2fa61d53c68902120dd666d6756ef5656e, https://github.com/spring-projects/spring-framework/commit/b482d6db121033e7ee0feed2854d277343f393e1","closed","type: bug,","spring-projects-issues","2009-08-29T14:13:40Z","2019-01-11T13:38:54Z"
"","10802","use RestUrlRewriteFilter to rewrite url  from ""/foo.gif"" to ""/static/foo.gif"" for visit static resource [SPR-6134]","**[badqiu](https://jira.spring.io/secure/ViewProfile.jspa?name=badqiu)** opened **[SPR-6134](https://jira.spring.io/browse/SPR-6134?redirect=false)** and commented  current petclinic sample to visit static resource must start with /static prefix.  However, we can use URL rewriting to avoid adding the prefix.  RestUrlRewriteFilter will forward like /foo.js => /static/foo.js rewrite usecase: /foo.js => /static/foo.js /foo/demo.gif => /static/demo.gif  not rewrite by excludeExtentions, default value is  do,jsp,jspx: /foo.jsp => /foo.jsp /foo.jspx => /foo.jsp /foo.do => /foo.do  web.xml config \ \RestUrlRewriteFilter\ \cn.org.rapid_framework.web.filter.RestUrlRewriteFilter\ \ \prefix\ \/static\ \ \ \excludeExtentions\ \jsp,jspx,do\ \ \ \debug\ \true\ \				 \ \ \RestUrlRewriteFilter\ \/*\ \  this is my patch.  ---  **Affects:** 3.0 M4  **Attachments:** - [RestUrlRewriteFilter.java](https://jira.spring.io/secure/attachment/15740/RestUrlRewriteFilter.java) (_5.35 kB_) - [RestUrlRewriteFilter.java](https://jira.spring.io/secure/attachment/15729/RestUrlRewriteFilter.java) (_4.22 kB_) - [RestUrlRewriteFilterTest.java](https://jira.spring.io/secure/attachment/15741/RestUrlRewriteFilterTest.java) (_3.30 kB_) - [RestUrlRewriteFilterTest.java](https://jira.spring.io/secure/attachment/15730/RestUrlRewriteFilterTest.java) (_2.68 kB_)  **Issue Links:** - #15561 Enhance ResourceHttpRequestHandler with ResourceResolver strategy (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2009-09-19T21:03:37Z","2019-01-11T14:10:21Z"
"","10361","add ""JdbcPlaceholderConfigurer"" for resolve placeholder value from database [SPR-5691]","**[badqiu](https://jira.spring.io/secure/ViewProfile.jspa?name=badqiu)** opened **[SPR-5691](https://jira.spring.io/browse/SPR-5691?redirect=false)** and commented  this is my JdbcPlaceholderConfigurer patch.  ```  	 	  ```  default_value is optional   ---  **Attachments:** - [DatabasePropertyPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/16212/DatabasePropertyPlaceholderConfigurer.java) (_8.36 kB_) - [JdbcPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/15336/JdbcPlaceholderConfigurer.java) (_2.75 kB_)","closed","type: enhancement,","spring-projects-issues","2009-04-22T03:27:59Z","2012-06-14T06:22:26Z"
"","10814","JBoss AS 5.0 VFS handling (SPR-5120) backport 2.5.X [SPR-6146]","**[Artur Karazniewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=karaznie)** opened **[SPR-6146](https://jira.spring.io/browse/SPR-6146?redirect=false)** and commented  Please backport #9793 to 2.5.X line. This is really blocking bug for all AS 5.0+ users. Since most of todays popular frameworks (CXF, Struts2 to name major) still use 2.5.X code line and probably won't switch to 3.0 in reasonable future. Porting this bugfix to 2.5.X line is crucial.  ---  **Affects:** 2.5.6  **Issue Links:** - #9793 Spring component scanning does not work within JBoss EJB container (_**""depends on""**_)  6 votes, 5 watchers","closed","in: core,","spring-projects-issues","2009-09-22T23:16:38Z","2019-01-11T14:09:49Z"
"","10047","SPEL PropertyOrFieldReference not threadsafe [SPR-5374]","**[Artur Biesiadowski](https://jira.spring.io/secure/ViewProfile.jspa?name=abies)** opened **[SPR-5374](https://jira.spring.io/browse/SPR-5374?redirect=false)** and commented  SPEL PropertyOrFieldReference makes Expressions unsafe to use from multiple threads. Cached accessor is replaced in the middle of method in case of mismatching resolution, possibly causing confusion for another thread.  I have attached a small test below which sometimes manages to reproduce the issue. Unfortunately, as it is race condition, it happens only sometimes - on my dual core machine, about 50% of times. Anyway, code review can spot the bug without the need for reproducing it.  In this case I have chosen degenerated example, where field is replaced with accessor method. Unfortunately, entire package seems to be quite thread unsafe - ReflectionPropertyReaderExecutor has non-final fields, which, due to lack of synchronization, can leak as nulls to different threads, possibly causing exceptions even on simples cases of accessing type of object.   ---  **Affects:** 3.0 M1  **Attachments:** - [ReuseTest.java](https://jira.spring.io/secure/attachment/14982/ReuseTest.java) (_1.09 kB_)","closed","type: bug,","spring-projects-issues","2008-12-22T05:37:55Z","2012-06-19T03:47:44Z"
"","10088","BridgeMethodResolver is unable to locate bridged method for hibernate Cglib-wrapped class implementing a generic interface [SPR-5414]","**[Arnout Engelen](https://jira.spring.io/secure/ViewProfile.jspa?name=raboof)** opened **[SPR-5414](https://jira.spring.io/browse/SPR-5414?redirect=false)** and commented  In some situations (in this case a hibernate-cglib-wrapped class implementing a generic interface), calling 'BeanUtils.getPropertyDescriptor' on any property of the class results in an IllegalStateException.  After some inspection, it seems BridgeMethodResolver recognises 2 candidate functions when looking for the bridge method, but upon closer inspection, decides neither of them should be chosen.  Attached is a simple, reasonable self-contained unittest demonstrating the problem. The problem does not seem to occur in Spring versions prior to 2.5.6.  Tested with hibernate 3.2.6.ga  java.lang.IllegalStateException: Unable to locate bridged method for bridge method 'public final void nl.topicuszorg.wicket.hibernate.test.CGLibTest$CglibInstantieMedewerker$$EnhancerByCGLIB$$540fe4f7.setOrganisatie(nl.topicuszorg.wicket.hibernate.test.CGLibTest$CglibIOrganisatie)' at org.springframework.core.BridgeMethodResolver.findBridgedMethod(BridgeMethodResolver.java:86) at org.springframework.beans.GenericTypeAwarePropertyDescriptor.\(GenericTypeAwarePropertyDescriptor.java:59) at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:250) at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:144) at org.springframework.beans.BeanUtils.getPropertyDescriptor(BeanUtils.java:329) at nl.topicuszorg.wicket.hibernate.test.CGLibTest.testCGLib(CGLibTest.java:51) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:168) at junit.framework.TestCase.runBare(TestCase.java:134) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  ---  **Affects:** 2.5.6  **Attachments:** - [CGLibTest.java](https://jira.spring.io/secure/attachment/15047/CGLibTest.java) (_1.17 kB_)  **Sub-tasks:** - #10215 BridgeMethodResolver is unable to locate bridged method for Groovy 1.6 ""`@Lazy` volatile"" annotated public properties  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15bbd575a9236f1bcdee38e39326d544f1591def","closed","in: core,","spring-projects-issues","2009-01-15T01:07:33Z","2019-01-13T08:01:26Z"
"","10400","dependency-check attribute in bean tag does not exist anymore [SPR-5730]","**[Arnaud Cogoluegnes](https://jira.spring.io/secure/ViewProfile.jspa?name=acogoluegnes)** opened **[SPR-5730](https://jira.spring.io/browse/SPR-5730?redirect=false)** and commented  looks like the dependency-check attribute of the bean tag does not exist anymore in spring-beans-3.0.xsd.  ---  **Affects:** 3.0 M3  **Issue Links:** - #11962 Remove dependency-check coverage from reference docs","closed","in: core,","spring-projects-issues","2009-05-08T06:27:28Z","2019-01-12T16:27:08Z"
"","10529","CustomEditorConfigurer needs way to register Property Editor instances [SPR-5860]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5860](https://jira.spring.io/browse/SPR-5860?redirect=false)** and commented  In the milestones of 3.0, the CustomEditorConfigurer only supports registering editors by way of a Map, where the key is the type and the value the editor type. This does not work for cases where the editor needs configuration, i.e. CustomDateEditor.  I propose we also allow for editor bean names as values for that Map, so that the CustomDateEditor can still be used.  ---  **Issue Links:** - #10825 XFire 1.2.6 not compatible with Spring 3.0's CustomEditorConfigurer - #10639 CustomEditorConfigurer functionality regression in 3.0","closed","type: enhancement,","spring-projects-issues","2009-06-23T20:04:57Z","2019-01-11T17:15:13Z"
"","10493","JSON HttpMessageConverter [SPR-5823]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5823](https://jira.spring.io/browse/SPR-5823?redirect=false)** and commented  We should add a JSON HttpMessageConverter. It's probably going to be based on Jackson, see http://jackson.codehaus.org.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3ca8c9be17556c211e328d014fe7c5a22ea529ba","closed","type: enhancement,","spring-projects-issues","2009-06-11T01:40:08Z","2012-06-19T03:42:51Z"
"","10452","BufferedImageHttpMessageConverter [SPR-5782]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5782](https://jira.spring.io/browse/SPR-5782?redirect=false)** and commented  We should add a HttpMessageConverter for converting to/from java.awt.BufferedImage instances.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce47e86b1c1417f8154290e6ec01358d70df3d31, https://github.com/spring-projects/spring-framework/commit/51f0fc07faa9f608c2d419fe99e93407acbc93d0, https://github.com/spring-projects/spring-framework/commit/3a1c88f059886d6e7a46d12acccc1f304e82e0b3","closed","type: enhancement,","spring-projects-issues","2009-05-24T22:17:37Z","2012-06-19T03:44:17Z"
"","10360","Request header filtering in @RequestMapping [SPR-5690]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5690](https://jira.spring.io/browse/SPR-5690?redirect=false)** and commented  See #10294:  It is useful to filter `@RequestMapping` method based on request headers, similarly to filtering by paramters. In effect, this feature would look something like:  `@RequestMapping`(value = ""/hotels"", header = ""content-type=text/*"")  This would match requests where the Content-Type header is 'text/plain', 'text/html', etc.  ---  **Issue Links:** - #10107 `@RequestMapping` to narrow on Request Header details (_**""is duplicated by""**_) - #9046 `@RequestMapping` narrowing based on presence of command object (_**""is duplicated by""**_) - #10294 Content-type filtering in `@RequestMapping`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/afa461892fa69851b4253ad18f88c21209e2eb81","closed","type: enhancement,","spring-projects-issues","2009-04-21T08:54:41Z","2019-01-13T08:00:04Z"
"","10304","Portlet-version of @ExceptionHandler [SPR-5633]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5633](https://jira.spring.io/browse/SPR-5633?redirect=false)** and commented  Basically the same as #9354, but for Portlet environments.  ---  **Issue Links:** - #9354 Allow annotated methods on a Controller to be marked as exception handlers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/44cf4e207ac412888997a0dcaa171666d0c8246b","closed","type: enhancement,","spring-projects-issues","2009-03-30T04:01:47Z","2019-01-11T16:30:14Z"
"","10302","Implicit /** mapping on type-level @RequestMapping [SPR-5631]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5631](https://jira.spring.io/browse/SPR-5631?redirect=false)** and commented  When a `@Controller` has a class-level `@RequestMapping` annotation, with further sub-paths mappings defined on the methods, it makes sense to implicitely add /** to the type-level annotation.  Since method mappings can just have a RequestMethod (GET or POST)on it, with no further path information, we have to be a little clever about this.  ---  **Issue Links:** - #10396 Unexpected `@RequestMapping` semantics when class-level and method-level mappings used together - #9172 When using request mappings at the type-level like /hotels/*, it should be possible to define a controller handler method for the root like /hotels - #10307 `@RequestMapping` matching should be insensitive to trailing slashes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6121da988b23a4b5c5755e555b439fadecab6773, https://github.com/spring-projects/spring-framework/commit/65afc80821502d96b07245c2c9160941618af6d3, https://github.com/spring-projects/spring-framework/commit/acc84925d3e446c26cf969f93e904e7668a4d85a","closed","type: enhancement,","spring-projects-issues","2009-03-29T21:18:06Z","2019-01-13T08:00:23Z"
"","10296","Allow for exceptions to be annotated with a @ResponseStatus annotation  [SPR-5625]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5625](https://jira.spring.io/browse/SPR-5625?redirect=false)** and commented  It would be nice to annotate an exception like so:  ``` @ResponseStatus(410) public class MyException extends Exception { ... } ```  and if that exception occurs in a web application, let the response status code be set to the value indicated by the annotation.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04b3edca3388be346d657a5d88e296940a96da53","closed","type: enhancement,","spring-projects-issues","2009-03-27T01:16:40Z","2012-06-19T03:47:33Z"
"","10295","A default HandlerExceptionResolver that resolves standard Spring exceptions [SPR-5624]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5624](https://jira.spring.io/browse/SPR-5624?redirect=false)** and commented  Currently, most Spring exceptions (MissingServletRequestParameterException, HttpRequestMethodNotSupportedException, etc, are handled in the org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter. It would make more sense to propagate these exceptions upwards, and have a default exception resolver that handles them, so that they can be easier overwritten.  ---  **Issue Links:** - #10293 WebDataBinder type conversion failures  should result in 400, not 500 (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/161c9260542aead8826db802b524a75cb6fb8932","closed","type: enhancement,","spring-projects-issues","2009-03-27T01:10:12Z","2019-01-11T16:30:56Z"
"","10294","Content-type filtering in @RequestMapping [SPR-5623]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5623](https://jira.spring.io/browse/SPR-5623?redirect=false)** and commented  It would be useful to customize the view resolution/content negotiation in the `@RequestMapping` annotation, by picking a response content-type there. Something like:  `@RequestMapping`(value = ""/hotels"", contentType=""application/pdf"")  This contentType would directly influence the View that is picked by the ViewResolver.  ---  **Issue Links:** - #10360 Request header filtering in `@RequestMapping`  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2009-03-26T23:25:17Z","2019-01-13T08:00:28Z"
"","10293","WebDataBinder type conversion failures  should result in 400, not 500 [SPR-5622]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5622](https://jira.spring.io/browse/SPR-5622?redirect=false)** and commented  When data cannot be bound by a WebDataBinder, this results in a TypeMismatchException, and eventually a status code 500: internal server error. This should be a 400: Bad Request  ---  **Issue Links:** - #10295 A default HandlerExceptionResolver that resolves standard Spring exceptions (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/880eb9e2b22f266d2ccd9fbba1da39b63cdabbef","closed","type: enhancement,","spring-projects-issues","2009-03-26T22:56:42Z","2019-01-11T16:30:50Z"
"","10210","Add XML HttpMessageConverters [SPR-5539]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5539](https://jira.spring.io/browse/SPR-5539?redirect=false)** and commented  We should add HttpMessageConverter instances for handling DOM Documents, Sources, and objects supported by OXM Marshallers.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca01cb4df61c1b41afe0ae5ad178181c4cabdf20","closed","type: enhancement,","spring-projects-issues","2009-03-02T21:08:08Z","2012-06-19T03:47:01Z"
"","10132","Repackage ASM into OSGi module [SPR-5459]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5459](https://jira.spring.io/browse/SPR-5459?redirect=false)** and commented  In the past, Spring used the jarjar ant task to repackage ASM into org.springframework.asm, part of the spring-core.jar.  For the Spring 3 release, we need to repackage ASM into a separate OSGi bundle, to work better in an OSGi environment.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9182cab52f51ddb8f53997de5915c1e165ba5357","closed","type: task,","spring-projects-issues","2009-02-03T21:48:34Z","2012-06-19T03:47:22Z"
"","10125","Content negotiation  [SPR-5452]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5452](https://jira.spring.io/browse/SPR-5452?redirect=false)** and commented  Spring-MVC currently let's the server decide which view to render for a given request, through it's View, view name and ViewResolver abstractions. In a more RESTful scenario, it is a best practice to let the client decide the representation, via the ""Accept"" HTTP header. The server responds with the delivered representation via the ""Content-Type"" header.  One issue with the ""Accept"" header is that is impossible to change it in a web browser; it is always fixed to ""text/html, image/gif"", etc. Looking at the file extension is a good workaround, i.e. http://example.com/hotels.pdf retrieves the PDF view of the hotel list, as does http://example.com/hotels with an Accept header of ""application/x-pdf"".  We should create a ViewResolver which respects the client-side Accept header, but also looks at file extensions. This view resolver acts as an adapter other ViewResolvers, simply delegating to the correct one given a particular media type.  ---  This issue is a sub-task of #9097  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df563dfcd6dcad6c8b4eb6579ce98661f936597b","closed","type: task,","spring-projects-issues","2009-02-02T21:13:50Z","2019-01-11T15:47:08Z"
"","10082","Support for PUTting and POSTing non-form data [SPR-5409]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5409](https://jira.spring.io/browse/SPR-5409?redirect=false)** and commented  Especially in RESTful Web Service scenario's, incoming data often takes the form of XML and JSON data. We should support binding this data to `@Controller` method parameters, in the same way we support submitted form data currently.  ---  This issue is a sub-task of #9097  **Issue Links:** - #9933 Migrate OXM from Spring-WS to Spring Core (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/035eea01e880a8661dc71b821f5cef6808b197e4  2 votes, 1 watchers","closed","type: task,","spring-projects-issues","2009-01-13T21:02:25Z","2019-01-11T15:44:46Z"
"","9974","Fix Maven POMs [SPR-5301]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5301](https://jira.spring.io/browse/SPR-5301?redirect=false)** and commented  The POMs for 3.0 are currently not usable, we need to fix them.  ---  **Issue Links:** - #10058 All maven2 artifactIds change (will break a lot of builds for maven users) (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0152d8d21d5c5fec2ce4572ddd0e83f71ea64680, https://github.com/spring-projects/spring-framework/commit/0b463c0838fff09955a3d04a5d40ad5cbf44c8ac  2 votes, 2 watchers","closed","type: task,","spring-projects-issues","2008-11-16T20:10:23Z","2019-01-11T16:14:45Z"
"","9940","Support for PUT and DELETE in spring:form tag [SPR-5267]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5267](https://jira.spring.io/browse/SPR-5267?redirect=false)** and commented  Browsers only support GET and POST in HTML forms. A common technique to use the other HTTP methods (PUT and DELETE) - used by Prototype and RubyOnRails, for instance - is to use POST instead, and pass an additional request parameter (typically _method) with the desired HTTP method.  We should support this mechanism in Spring MVC. This involves two parts:  - Adding support for PUT and DELETE in the spring:form tag. - Support the hidden _method parameter in on server side infrastructure, either through a Servlet filter, or more deeply embedded in the DispatcherServlet infrastructure.  ---  This issue is a sub-task of #9097","closed","type: task,","spring-projects-issues","2008-11-03T20:20:00Z","2019-01-11T15:24:30Z"
"","9934","RestTemplate [SPR-5260]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5260](https://jira.spring.io/browse/SPR-5260?redirect=false)** and commented  RestTemplate is going to be the central class for client-side REST access. It takes the familiar pattern of JdbcTemplate, JmsTemplate, etc., and applies it to REST.  The RestTemplate is going to integrate with the OXM abstraction, to be moved over, and will have other conversion mechanisms as well.  Here is some pseudo-code code to show how it might work:  String uri = ""http://example.com/hotels/{id}"" template = new RestTemplate(); HotelList result = template.getForObject(uri, HotelList.class, ""1"");  Booking booking = // create booking object uri = ""http://example.com/hotels/{id}/bookings""; Map vars = Collections.singletonMap(""id"", ""1""); URI location = template.postForLocation(uri, booking, vars);  template.delete(location.toString());  template.execute(uri, HttpMethod.GET,  myRequestCallback, myResponseCallback);  ---  This issue is a sub-task of #9097  **Issue Links:** - #9933 Migrate OXM from Spring-WS to Spring Core (_**""depends on""**_)  2 votes, 3 watchers","closed","type: task,","spring-projects-issues","2008-10-30T22:13:16Z","2019-01-11T15:24:55Z"
"","9933","Migrate OXM from Spring-WS to Spring Core [SPR-5259]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5259](https://jira.spring.io/browse/SPR-5259?redirect=false)** and commented  The OXM abstraction in Spring Web Services, which helps you wire up JAXB2, Castor, and other marshallers easier, is quite useful in non-web service scenarios too. We should move it over from SWS to SPR.  ---  **Issue Links:** - #9934 RestTemplate (_**""is depended on by""**_) - #10082 Support for PUTting and POSTing non-form data (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2008-10-30T22:11:50Z","2019-01-11T15:25:41Z"
"","9926","Shallow ETag support [SPR-5252]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5252](https://jira.spring.io/browse/SPR-5252?redirect=false)** and commented  An ETag (entity tag) is an HTTP response header returned by an HTTP/1.1 compliant web server used to determine change in content at a given URL. It can be considered to be the more sophisticated successor to the ""Last-Modified"" header. When a server returns a representation with an ETag header, client can use this header in subsequent GETs, in a ""If-None-Match"" header. If the content has not changed, the server will return 304: Not Modified.  Initially, we will focus on ""Shallow"" ETags, where the server simply computes a hash of the generated content (View), and sends that back as the ETag header. When this hash matches any If-None-Match client-sider header, the response is not sent. This approach only saves bandwith, as the content is still generated; it's just not sent over the wire.  ---  This issue is a sub-task of #9097","closed","type: task,","spring-projects-issues","2008-10-30T00:45:10Z","2019-01-11T15:25:37Z"
"","9925","URI Templates in @RequestMapping [SPR-5251]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5251](https://jira.spring.io/browse/SPR-5251?redirect=false)** and commented  A URI template is a URI-like string, containing one or more variable names. When these variables are substituted for values, the template becomes a URI. See the proposed RFC at http://bitworking.org/projects/URI-Templates/  We should allow for these URI templates to be used in `@Controllers`, something like:  `@RequestMapping`(value=""/hotels/{hotel}"", method=RequestMethod.GET) public void updateHotel(`@PathVariable`(""hotel"")long id)  ---  This issue is a sub-task of #9097  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fe72e8a5f74339e2501507a776681ca1044449fc, https://github.com/spring-projects/spring-framework/commit/efb0ab79f9091f4c4b613676a7625d242be94f3f, https://github.com/spring-projects/spring-framework/commit/27ed13f44d2ddb451118a936c9dc7aac6ae84b67, https://github.com/spring-projects/spring-framework/commit/bb5150361bdb74c8ea9dc431d5efdd6047ad16a3, https://github.com/spring-projects/spring-framework/commit/90ef7649c21bba154d877266fa8618e5de1bb641, https://github.com/spring-projects/spring-framework/commit/b33db73c932cd41bc19b9f5018c94c673dbe23d0","closed","type: task,","spring-projects-issues","2008-10-30T00:43:30Z","2019-01-11T15:25:32Z"
"","9924","Improve bundlor templates [SPR-5250]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5250](https://jira.spring.io/browse/SPR-5250?redirect=false)** and commented  Compare and update the template.mf files with the ones used for 2.5.6.   --- No further details from [SPR-5250](https://jira.spring.io/browse/SPR-5250?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-10-30T00:42:01Z","2012-06-19T03:47:11Z"
"","9923","Atom and RSS View [SPR-5249]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-5249](https://jira.spring.io/browse/SPR-5249?redirect=false)** and commented  Having View classes for Atom and RSS will make it easier for people to add feeds to their web applications.  There is a AbstractRssView in Spring modules, which we can use. It is based on Rome, which seems to be the standard library to create feeds with. We have to upgrade to the latest version of Rome, though.  https://springmodules.dev.java.net/source/browse/springmodules/projects/springmvc-extra/src/java/org/springmodules/web/servlet/view/AbstractRssView.java?rev=1.3&view=markup   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/baac76e2b140be3b41349b66e99140a09d223be5","closed","type: enhancement,","spring-projects-issues","2008-10-29T23:24:09Z","2012-06-19T03:47:19Z"
"","9980","Type pattern with annotation in @DeclareParents does not work [SPR-5307]","**[Arik Kfir](https://jira.spring.io/secure/ViewProfile.jspa?name=arikkfir)** opened **[SPR-5307](https://jira.spring.io/browse/SPR-5307?redirect=false)** and commented  I have an aspect which defines a mixin, as follows:  `@DeclareParents`( value = ""(`@Measured` *)"", defaultImpl = DefaultBeanNameProvider.class ) public static BeanNameProvider mixin;  The `@Measured` annotation, defined in the same package as the aspect:  `@Retention`( RetentionPolicy.RUNTIME ) `@Target`( ElementType.TYPE ) `@Inherited` public `@interface` Measured { }  I also have a bean, as follows:  `@Measured` public class MyBean { .... }  The ""MyBean"" bean is not advised to have the BeanNameProvider interface that should be introduced by the `@DeclareParents` mixin. If I change the type pattern to: Code:  `@DeclareParents`( value = ""mypackage..*"", defaultImpl = DefaultBeanNameProvider.class ) public static BeanNameProvider mixin;  where ""mypackage"" is whereI defined my bean, it works flawlessly.  Am I missing something? I've looked in the AspectJ 5 documentation regarding annotation type patterns, and it seems my pattern is correct. I also tried ""`@Measured` mypackage..*"" but that didn't work either.  I'm inclined to think that this is simply a bug in Spring's type pattern matching, since the matching based on package structure works OK - but it just as well be something I'm doing wrong.   ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9f0e68c82c57ca1f16aba0287979e46005f4b3d  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2008-11-17T20:22:43Z","2012-06-19T03:46:49Z"
"","9973","Cannot introduce BeanNameAware interface to other beans using Spring AOP [SPR-5300]","**[Arik Kfir](https://jira.spring.io/secure/ViewProfile.jspa?name=arikkfir)** opened **[SPR-5300](https://jira.spring.io/browse/SPR-5300?redirect=false)** and commented  It seems that the weaving process occurs after the container calls setBeanName. I've debugged AbstractAutowireCapableBeanFactory and saw that the bean provided to the 'initializeBean' method is the actual target bean, and not the weaved proxy.  The introduction of the BeanNameAware (e.g. the usage of `@DeclareParents`) does work - my AOP advice does receive (when joinpoint invoked) a proxy which is an instance of the ""introduced"" interface - apparently it happens after the initialization of the bean.  For details and a use-case, please see http://forum.springframework.org/showthread.php?t=63558   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-11-16T17:56:12Z","2019-01-12T16:27:46Z"
"","10237","Warn about CGLIB PermGen problems [SPR-5566]","**[Arie van Wijngaarden](https://jira.spring.io/secure/ViewProfile.jspa?name=vanwijngaarden)** opened **[SPR-5566](https://jira.spring.io/browse/SPR-5566?redirect=false)** and commented  Please make a remark in the documentation that when using CGLIB proxies problems may arise with hot deployments in OSGI environments with PermGen space.  I would favor to drop CGLIB proxies completely, if somehow possible.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springframework.org/showthread.php?t=62034","closed","type: enhancement,","spring-projects-issues","2009-03-11T23:03:39Z","2012-06-19T09:36:18Z"
"","10785","beansOfTypeIncludingAncestors() should clearly document behavior with respect to beans of same name [SPR-6117]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-6117](https://jira.spring.io/browse/SPR-6117?redirect=false)** and commented  I have three application contexts arranged in a hierarchy like this, from top to bottom:  * Context A containing bean named ""foo"" of type X * Context B containing bean named ""foo"" of type Y (where Y != X) * Context C containing a bean that has this field: `@Autowired private X x;`  Context A is the parent of context B which is the parent of context C.  The `AutowiredAnnotationBeanPostProcessor` throws a `NoSuchBeanDefinitionException` because it can't find the bean ""foo"" in context A that would satisfy the dependency.  This is because it finds the bean using `DefaultListableBeanFactory.resolveDependency()`, which invokes `findAutowireCandidates()`, which returns a `Map`, so obviously when there are two beans with the same name coming from different contexts, one of them will ""hide"" the other. It turns out the parent context bean hides the grandparent context bean.  This behavior would make sense if we were matching the beans by name, but here we are matching them by type (where X != Y), so the names should not affect the search.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/134e79c0fd49bd7912088af4d08fb774dd45fd13","closed","in: core,","spring-projects-issues","2009-09-16T09:01:00Z","2012-06-19T03:43:49Z"
"","10454","PersistenceUnitReader#determinePersistenceUnitRootUrl returns wrong root url on JBoss 5, causing no detection of entity beans [SPR-5784]","**[Antony Stubbs](https://jira.spring.io/secure/ViewProfile.jspa?name=astubbs)** opened **[SPR-5784](https://jira.spring.io/browse/SPR-5784?redirect=false)** and commented  I have a problem with jpa/spring/hiberante/jboss not detecting my entity beans. The following is what I tracked it down to. Let me know what you think. I'm a bit new with JPA so I might have missed something of course.  The JPA spec in section 2.6 defines the root of the persistence unit to be:  > A persistence unit is deï¬ned by a persistence.xml ï¬le. The jar ï¬le or directory whose META-INF > directory contains the persistence.xml ï¬le is termed the root of the persistence unit. In JavaEE, > the root of a persistence unit may be one of the following: > â¢ an EJB-JAR ï¬le > â¢ theWEB-INF/classes directory of a WAR ï¬le[40] > â¢ a jar ï¬le in theWEB-INF/lib directory of a WAR ï¬le > â¢ a jar ï¬le in the root of the EAR > â¢ a jar ï¬le in the EAR library directory > â¢ an application client jar ï¬le  However, when I deploy onto jboss, this method returns: vfszip:/Users/antonystubbs/Applications/jboss-5.0.1.GA/server/default/deploy/Web-marCom-1.0-SNAPSHOT/WEB-INF/lib/Backend-1.0-SNAPSHOT.jar/META-INF/persistence-spring.xml instead of what I expected: vfszip:/Users/antonystubbs/Applications/jboss-5.0.1.GA/server/default/deploy/Web-marCom-1.0-SNAPSHOT/WEB-INF/lib/Backend-1.0-SNAPSHOT.jar  I believe this to be because the URL originalURL = resource.getURL(); call in #determinePersistenceUnitRootUrl returns a url which is missing the jar file separator (!/) for some reason, even though the it is actually within a jar, within a war (same problem with exploded war).  As per the javadoc for ResourceUtils.extractJarFileURL(originalURL);, the behaviour is correct, in that ""(which may point to a resource in a jar file or to a jar file itself)."" which is what it ends up with, but I don't think this is spec compliant.?  I have attached the PersistenceUnitPostProcessor which I use to correctly point to the Backkend.jar, which allows hibernate to correctly automatically locate all my entity beans. Otherwise, it doesn't find any. Which is simply (and not very carefully):  ``` public void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {      URL rootUrl = pui.getPersistenceUnitRootUrl();      String newRootUrl = rootUrl.toString();      int metaInfIndex = newRootUrl.indexOf( ""META-INF"" );      // these aren't the droids you're looking for      if (metaInfIndex == -1)          return;      newRootUrl = newRootUrl.substring( 0, metaInfIndex - 1 );      try {          pui.setPersistenceUnitRootUrl( new URL( newRootUrl ) );      } catch (MalformedURLException e) {          // TODO Auto-generated catch block          e.printStackTrace();      }  } ```  ---  **Affects:** 2.5.6  **Attachments:** - [hibernate-prod-context.xml](https://jira.spring.io/secure/attachment/15413/hibernate-prod-context.xml) (_3.16 kB_) - [InvitePersistenceUnitPostProcessor.java](https://jira.spring.io/secure/attachment/15412/InvitePersistenceUnitPostProcessor.java) (_1.03 kB_) - [persistence-spring.xml](https://jira.spring.io/secure/attachment/15414/persistence-spring.xml) (_810 bytes_)  **Issue Links:** - #9793 Spring component scanning does not work within JBoss EJB container","closed","type: enhancement,","spring-projects-issues","2009-05-25T12:52:16Z","2019-01-11T17:32:32Z"
"","10035","@RequestMapping best match gives wrong Controller method when using wildcards [SPR-5362]","**[Antony Bowesman](https://jira.spring.io/secure/ViewProfile.jspa?name=adb)** opened **[SPR-5362](https://jira.spring.io/browse/SPR-5362?redirect=false)** and commented  Reference forum message http://forum.springsource.org/showthread.php?t=64011  Given the following two methods in a Controller  `@RequestMapping`(value=""/rest/mail/v1/ipm/*"", method=RequestMethod.GET) public ModelAndView Method1()  `@RequestMapping`(value=""/rest/mail/v1/ipm/*/**"", method=RequestMethod.GET) public ModelAndView Method2()  Given the request path /rest/mail/v1/ipm/JA8AAAAAAAAAKwAB4awBIfRXAeRU it matches the first method, but then chooses the second path as a _BETTER_ match, resulting in the wrong method being called.  This is because of the simplistic implementation of isBetterPathMatch() that decides that a longer length path is a better match regardless of the number of elements in the path.  This occurs in AnnotationMethodHandlerAdapter.ServletHandlerMethodResolver.isBetterPathMatch.  It clearly does not take account of the extra / in the second path, which is not present in the given URL.  Although it is possible to make a workaround which involves having a single method, where the code then makes decisions based on the request path, it complicates Controller implementations forcing different sets of business logic to be combined.  ---  **Affects:** 2.5.6  **Issue Links:** - #10040 PathVariable mappings are greedy over hard coded mappings (_**""duplicates""**_) - #10593 REOPENED -PathVariable mappings are greedy over hard coded mappings (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/721f2ca63ec0867eaaac7a63c3f071f3ef0cf91f","closed","in: web,","spring-projects-issues","2008-12-15T13:28:05Z","2019-01-12T16:50:34Z"
"","10049","DefaultLobHandler should honour ""wrapAsLob"" for getting data too [SPR-5376]","**[Antoni Reus](https://jira.spring.io/secure/ViewProfile.jspa?name=areus)** opened **[SPR-5376](https://jira.spring.io/browse/SPR-5376?redirect=false)** and commented  ""wrapAsLob"" was added in #7007 to DefaultLobHandler to make it work with Postgresql BLOBs.  But this setting is only used for setBlobAsBytes/setBlobAsBinaryStream. So saving a byte[] field in a Postgresql BLOB works well. But retrieving data doesn't work, it returns the ""oid"" number as a byte[].  Methods getBlobAsBytes and getBlobAsBinaryStream of DefaultLobHandler should use getBlob if wrapAsLob is set to true.  ---  **Affects:** 2.5.6","closed","type: bug,","spring-projects-issues","2008-12-25T08:14:28Z","2019-01-11T16:22:46Z"
"","9985","class SmartClassLoader not present in spring-framework-2.5.6-with-dependencies.zip [SPR-5312]","**[Antoine Wils](https://jira.spring.io/secure/ViewProfile.jspa?name=toon)** opened **[SPR-5312](https://jira.spring.io/browse/SPR-5312?redirect=false)** and commented  When trying to deploy the petclinic sample on Tomcat 5.5.23 I have always the error  [org.springframework.web.context.ContextLoader] - \ java.lang.NoClassDefFoundError: org/springframework/core/SmartClassLoader at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:620) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124) at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1847) at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:873) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1326) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1205) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319) at java.lang.Class.getDeclaredConstructors0(Native Method) at java.lang.Class.privateGetDeclaredConstructors(Class.java:2389) at java.lang.Class.getConstructor0(Class.java:2699) at java.lang.Class.getDeclaredConstructor(Class.java:1985) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:78) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:249) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3764) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4216) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:760) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:740) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:544) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:553) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:488) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1138) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:120) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1022) at org.apache.catalina.core.StandardHost.start(StandardHost.java:736) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:448) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:552) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433)   --- No further details from [SPR-5312](https://jira.spring.io/browse/SPR-5312?redirect=false)","closed","","spring-projects-issues","2008-11-18T22:14:40Z","2019-01-11T16:13:52Z"
"","10423","Typos in '7. Spring Expression Language' chapter [SPR-5753]","**[Anna GoÅ](https://jira.spring.io/secure/ViewProfile.jspa?name=annagos)** opened **[SPR-5753](https://jira.spring.io/browse/SPR-5753?redirect=false)** and commented  1. 7.1 ""single well supported expression language that can used across""  (missing ""be""?) 2. 7.1. ""language sytnax"" 3. 7.2. ""The expression language support the following functionality"" (supports?) 4. 7.3 ""'parser.parseExpression' and 'exp.getValue' respectedly."" (respectively?) 5. 7.3. ""such a calling methods"" (such as?) 6. 7.4 Missing "" in `@Value` in code snippet: public class SimpleMovieLister { ... and public class MovieRecommender { 7. 7.5.2. ""listed in section Section ..."" 8. 7.5.8 ""Variables can referenced .."" (missing be?)    ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41c8352e1635b139246053b9409a19beefb61eee","closed","type: documentation,","spring-projects-issues","2009-05-13T19:52:43Z","2012-06-19T03:43:17Z"
"","10417","Typos in Spring 3.0.x docs [SPR-5747]","**[Anna GoÅ](https://jira.spring.io/secure/ViewProfile.jspa?name=annagos)** opened **[SPR-5747](https://jira.spring.io/browse/SPR-5747?redirect=false)** and commented  I have gone through some of the new reference documentation and found some possible typos/erros:  1. Part I. Core Technologies ""The Spring team have found that..."" (has?)  2. 18.1 ""It is divided into two main two chapters.."" (one redundant two?)  3. 18.2.1 ""The proposed RFC for URI Templates defines how an URI is parameterized."" (a URI as used a line above?)  4. 18.2.1.1 Typo in snippet:     `@RequestMapping`(""/users/{userid}"", method=RequestMethod.GET)    public String getUser(`@PathVariable` String userId) {    // implementation omitted...    }    (the template variable is userid while the method param is userId)  5. 18.2.1.2 ""SourceHttpMessageConverter - convert .."" (converts?)  6. 18.2.1.2 ""MarshallingHttpMessageConverter - convert .."" (converts?)  7. 18.2.3   ""AbstractAtomFeedView - return..""  (returns?)  8. 18.2.3.1 ""The HTTP response in passed in only ..."" (s/in/is?)  9. 18.2.3.2 ""The MarhsallingView uses a XML Marshaller ..."" (an XML as in chapter 18.2.3 Views?)  10. 18.2.4  "" ... can be manipulated using the same four HTTP method: "" (methods?)  11. 18.2.5 Should be probably ""an If-None-Match header"" instead of ""a If-None-Match header""  12. 18.2.5 ""in combination any web framework"" (missing with?)  13. 18.2.5 ""as opposed to a deep ETags"" (a?)  14. 18.2.5 ""a MD5"" should be probably ""an MD5"" as M is a vowel-sounding letter  15. 18.2.5.""a ETag"" -> ""an ETag""  16. 18.2.5 ""it use that hash"" (it uses)  17. 18.2.6 ""the HttpServletRequest can be access in Servlet ..."" (accessed?)  18. 18.3.1 ""For example, the method getForObject will perform a GET,     convert the HTTP response into an object type of your choice, and returns that object."" (s/returns/return?)  19. 18.3.1 ""The method postForLocation will do a POST,     converting the given object into a HTTP request, and returns the response ..."" (s/returns/return? and missing dot at the end)  20. 18.3.1  Map vars = Collections.singletonMap(""hotel"", 42); (42 is not a String)  21. 18.3.2 ""The HttpMessageConverter interface is show below ..."" (shown?)  22. 18.3.2.x everything starting with Http should probably have ""an"" (as H is ""aitch"")  Hope you find it helpful!    ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41c8352e1635b139246053b9409a19beefb61eee","closed","type: documentation,","spring-projects-issues","2009-05-11T03:13:45Z","2012-06-19T03:43:06Z"
"","10078","ReloadableResourceBundleMessageSource requires cacheSeconds to be refreshable -- is this a performance issue?  [SPR-5405]","**[Anjenelu](https://jira.spring.io/secure/ViewProfile.jspa?name=anjenelu)** opened **[SPR-5405](https://jira.spring.io/browse/SPR-5405?redirect=false)** and commented  ReloadableResourceBundleMessageSource requires cacheSeconds to be refreshable -- is this a performance issue?   ---  **Affects:** 2.0.9","closed","status: invalid,","spring-projects-issues","2009-01-12T00:31:10Z","2019-01-12T05:33:47Z"
"","10430","XStreamMarshaller can not activate XStream automatic annotations detection feature [SPR-5760]","**[Angel](https://jira.spring.io/secure/ViewProfile.jspa?name=pakin)** opened **[SPR-5760](https://jira.spring.io/browse/SPR-5760?redirect=false)** and commented  XStreamMarshaller can not activate XStream automatic annotations detection feature   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3169d428ecc530d3f9c5b41ec4f0851d5288ebcf","closed","type: enhancement,","spring-projects-issues","2009-05-14T19:17:52Z","2012-06-19T03:43:49Z"
"","10429","Problems using Jaxb2Marshaller with jdk 6 using either bean definition or xml schema based configuration. Getting exception: ""java.lang.ClassNotFoundException: com.sun.xml.bind.v2.ContextFactory"" [SPR-5759]","**[Angel](https://jira.spring.io/secure/ViewProfile.jspa?name=pakin)** opened **[SPR-5759](https://jira.spring.io/browse/SPR-5759?redirect=false)** and commented  I am getting the following error when loading the Spring configuration files:  java.lang.ClassNotFoundException: com.sun.xml.bind.v2.ContextFactory  Either with the xml schema definition:    or with the bean definition:                                 			au.gov.environment.geocoding.service.ws.geocoding.bind.mds.Address     			au.gov.environment.geocoding.service.ws.geocoding.bind.mds.ArrayOfEntityPropertyValue     			au.gov.environment.geocoding.service.ws.geocoding.bind.mds.ArrayOfLocation     			au.gov.environment.geocoding.service.ws.geocoding.bind.mds.EntityPropertyValue     			au.gov.environment.geocoding.service.ws.geocoding.bind.mds.FindAddressResponse     			au.gov.environment.geocoding.service.ws.geocoding.bind.mds.Location     			au.gov.environment.geocoding.service.ws.geocoding.bind.mds.Point     			au.gov.environment.geocoding.service.ws.geocoding.bind.mds.Result     			au.gov.environment.geocoding.service.ws.geocoding.bind.mds.SearchOptions                                      I do not thing it is a classpath issue because I only have Spring dependencies, so must be some incompatibility with JDK 6.  Cheers.   --- No further details from [SPR-5759](https://jira.spring.io/browse/SPR-5759?redirect=false)","closed","in: data,","spring-projects-issues","2009-05-14T12:16:58Z","2019-01-11T17:30:42Z"
"","10151","Error in javadoc for org.springframework.web.portlet.mvc.AbstractFormController [SPR-5478]","**[Angel D. Segarra](https://jira.spring.io/secure/ViewProfile.jspa?name=asegarra)** opened **[SPR-5478](https://jira.spring.io/browse/SPR-5478?redirect=false)** and commented  There seems to be an error in the javadoc for the method **renderInvalidSubmit** in **org.springframework.web.portlet.mvc.AbstractFormController** .It gives code examples with the wrong method name, **handleInvalidSubmit** when it should be **renderInvalidSubmit**.   ---  **Affects:** 2.5.6","closed","type: bug,","spring-projects-issues","2009-02-12T04:44:13Z","2012-06-19T03:46:44Z"
"","10795","org.springframework.core declares a mandatory dependency upon JBoss VFS in its Ivy file but it should be optional [SPR-6127]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-6127](https://jira.spring.io/browse/SPR-6127?redirect=false)** and commented  Revision 1864 introduced the problem: https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.core/ivy.xml?r=1864   ---  **Affects:** 3.0 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6c4fb857530ffe8774140f822522b391995df5b5","closed","in: core,","spring-projects-issues","2009-09-18T07:41:05Z","2012-06-19T03:43:52Z"
"","10521","Embedded database support for H2 and HSQLDB does not work in an OSGi environment: JDBC bundle does not import org.hsqldb and org.h2 [SPR-5852]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5852](https://jira.spring.io/browse/SPR-5852?redirect=false)** and commented  The template for the JDBC bundle contains an entry to make any import of org.hsqldb optional, however the bundle's manifest doesn't contain an import for this package. This probably occurred as a result of the code in the JDBC bundle only having a reflection-based dependency upon org.hsqldb which is something that Bundlor cannot detect.  I've taken a quick look at the code (3.0.0.CI-282, which is the version upon which dm Server currently depends) and it would appear that both H2EmbeddedDatabaseConfigurer and HsqlEmbeddedDatabaseConfigurer only depend via reflection upon H2 and Hsql respectively, whereas DerbyEmbeddedDatabaseConfigurer has a hard dependency upon Derby.  Updating the template for the jdbc bundle to list Import-Package entries for both H2 and Hsql should do the trick:  Import-Package: ... org.h2;version=""[1.8.0, 2.0.0)"";resolution:=optional, org.hsqldb;version=""[1.0.0, 2.0.0)"";resolution:=optional, ...   ---  **Affects:** 3.0 M3","closed","type: bug,","spring-projects-issues","2009-06-21T20:42:49Z","2012-06-19T03:43:26Z"
"","10471","org.springframework.jdbc has a mandatory dependency upon Apache Derby in its ivy.xml [SPR-5801]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5801](https://jira.spring.io/browse/SPR-5801?redirect=false)** and commented  The dependency upon Apache Derby doesn't declare a conf, meaning it uses the default, which is compile:  \  The dependency should be:  \   ---  **Affects:** 3.0 M3","closed","type: bug,","spring-projects-issues","2009-06-03T04:30:34Z","2012-06-19T03:42:48Z"
"","10431","NPE in AbstractApplicationContext.toString() if servletContext.getServletContextName() returns null [SPR-5761]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5761](https://jira.spring.io/browse/SPR-5761?redirect=false)** and commented  Here's the diff of the change that I believe has introduced the problem: https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.web/src/main/java/org/springframework/web/context/ContextLoader.java?r1=1094&r2=1127  The javadoc for getServletContextName() states that it's legal for it to return null.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3af9e73301f8f559134f7ac35d876ec20ad7d77, https://github.com/spring-projects/spring-framework/commit/da4f1d0eb707fe033db77a44a5f6f404b0a8a4a1","closed","type: bug,","spring-projects-issues","2009-05-14T21:26:27Z","2012-06-19T03:42:46Z"
"","10363","ConfigurationClassPostProcessor.isConfigurationClassBeanDefinition() makes classloading assumptions that don't hold true in an OSGi environment [SPR-5693]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5693](https://jira.spring.io/browse/SPR-5693?redirect=false)** and commented  This problem is similar to http://jira.springframework.org/browse/SPR-5655, although it's a little more subtle and complex.  Currently, dm Server's GreenPages sample application fails to deploy with the following exception:  java.lang.RuntimeException: java.io.FileNotFoundException: class path resource [org/springframework/web/servlet/support/WebContentGenerator.class] cannot be opened because it does not exist at org.springframework.context.annotation.ConfigurationClassPostProcessor.isConfigurationClassBeanDefinition(ConfigurationClassPostProcessor.java:208) at org.springframework.context.annotation.ConfigurationClassPostProcessor.getConfigurationBeanDefinitions(ConfigurationClassPostProcessor.java:127) at org.springframework.context.annotation.AbstractConfigurationClassProcessor.processConfigBeanDefinitions(AbstractConfigurationClassProcessor.java:98) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:95) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:479) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:459) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:395) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:281) at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:247) at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:222) at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:175) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:175) at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$2.run(ContextLoaderListener.java:718) at com.springsource.kernel.dmfragment.internal.ContextPropagatingTaskExecutor$2.run(ContextPropagatingTaskExecutor.java:82) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:637) Caused by: java.io.FileNotFoundException: class path resource [org/springframework/web/servlet/support/WebContentGenerator.class] cannot be opened because it does not exist at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:143) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:73) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:69) at org.springframework.context.annotation.ConfigurationClassPostProcessor.isConfigurationClassBeanDefinition(ConfigurationClassPostProcessor.java:199) ... 17 more  The application context contains a GenericBeanDefinition that references org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter as a String, i.e. the class hasn't been loaded and, therefore, hasBeanClass returns false. This causes the code to use ASM to determine the presence, or otherwise, of `@Configuration` annotated. The bundle that contains this application context (the GreenPages Web bundle) contains an import for org.springframework.mvc.annotation as the application references types from that package. This means that the MetadataReader can load org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter and check for annotations. Although the MetadataReader is configuration with the classloader for the GreenPages Web bundle, this classloader delegates the load to the bundle that satisfied its import of org.springframework.web.servlet.mvc.annotation, i.e. the classloader for the org.springframework.web.servlet bundle is used.  The while loop then proceeds up the inheritance hierarchy. This is where the problem occurs. AnnotationMethodHandlerAdapter extends org.springframework.web.servlet.support.WebContentGenerator. so the MetadataReader attempts to read WebContentGenerator. It uses the GreenPages web bundle's classloader to do so. This classloader cannot see WebContentGenerator as the bundle doesn't import WebContentGenerator and nor should it as it doesn't reference any types in this package. This results in the FileNotFoundException above.  I believe that the solution here is to change the classloader that's used to read the metadata as the loop walks up the inheritance hierarchy: in an OSGi environment it's not safe to assume that a single classloader will be able to see all of the types in the hierarchy but it is safe to assume that the classloader at any point in the hierarchy will be able to see its super class. One potential problem may be that, to figure out the classloader that can actually see a type when OSGi-style delegation occurs, it would be necessary to actually load the class and then call getClassLoader on it which somewhat defeats the purpose of using ASM in the first place.   ---  **Affects:** 3.0 M2","closed","type: bug,","spring-projects-issues","2009-04-22T19:59:42Z","2014-09-11T11:26:21Z"
"","10326","RuntimeException thrown by ConfigurationClassPostProcessor.isConfigurationClassBeanDefinition when it encounters a BeanDefinition that contains a type that's class isn't visible to the classloader [SPR-5655]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5655](https://jira.spring.io/browse/SPR-5655?redirect=false)** and commented  dm Server uses a BeanFactoryPostProcessor to switch replace Spring's load-time weaver implementation with one that support load-time weaving in an OSGi environment. When it does this it adds a BeanDefinition to the application context that contains an instance of com.springsource.kernel.dmfragment.internal.ServerLoadTimeWeaver. In the recent 3.0 builds (I'm using 3.0.0.CI-182) this causes a failure in ConfigurationClassPostProcessor.isConfigurationClassBeanDefinition(). This method attempts to load com.springsource.kernel.dmfragment.internal.ServerLoadTimeWeaver and fails as it's not visible to the classloader.  As the BeanDefinition actually contains an instance at this point, rather than just a class name, I wonder if it's actually necessary to attempt the class load? If it is necessary, I believe the code would be more robust if it used the existing instance's classloader.  Here's a stack of the failure:  Caused by: java.lang.RuntimeException: java.io.FileNotFoundException: class path resource [com/springsource/kernel/dmfragment/internal/ServerLoadTimeWeaver.class] cannot be opened because it does not exist [junit]     at org.springframework.context.annotation.ConfigurationClassPostProcessor.isConfigurationClassBeanDefinition(ConfigurationClassPostProcessor.java:200) [junit]     at org.springframework.context.annotation.ConfigurationClassPostProcessor.getConfigurationBeanDefinitions(ConfigurationClassPostProcessor.java:125) [junit]     at org.springframework.context.annotation.AbstractConfigurationClassProcessor.processConfigBeanDefinitions(AbstractConfigurationClassProcessor.java:98) [junit]     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:93) [junit]     at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:479) [junit]     at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:459) [junit]     at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:395) [junit]     at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:281) [junit]     at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85) [junit]     at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:247) [junit]     at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:222) [junit]     at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:175) [junit]     at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:175) [junit]     at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$2.run(ContextLoaderListener.java:716) [junit]     at com.springsource.kernel.dmfragment.internal.ContextPropagatingTaskExecutor$2.run(ContextPropagatingTaskExecutor.java:82) [junit]     at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) [junit]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) [junit]     at java.lang.Thread.run(Thread.java:637) [junit] Caused by: java.io.FileNotFoundException: class path resource [com/springsource/kernel/dmfragment/internal/ServerLoadTimeWeaver.class] cannot be opened because it does not exist [junit]     at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:143) [junit]     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:73) [junit]     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:69) [junit]     at org.springframework.context.annotation.ConfigurationClassPostProcessor.isConfigurationClassBeanDefinition(ConfigurationClassPostProcessor.java:191)   ---  **Affects:** 3.0 M3  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/15288/mylyn-context.zip) (_917 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/254bf7e4038609f5d5c928fd07572184a58b0318","closed","in: core,","spring-projects-issues","2009-04-06T06:47:57Z","2019-01-11T16:34:27Z"
"","10289","ASM bundle contains an import package for org.objectweb.asm [SPR-5618]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5618](https://jira.spring.io/browse/SPR-5618?redirect=false)** and commented  The jarjar'd ASM bundle contains an import for one of the original ASM packages. The template.mf file needs to be updated to ignore the existing Import-Package header in the manifest of the jar that jarjar produces.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce2486820942ad44b27ddb40ea415abd65add16b","closed","type: bug,","spring-projects-issues","2009-03-26T01:47:58Z","2012-06-19T03:46:49Z"
"","10288","Optional Ivy dependencies are mandatory in the OXM bundle's manifest [SPR-5617]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5617](https://jira.spring.io/browse/SPR-5617?redirect=false)** and commented  OXM's Ivy file lists dependencies on xstream, castor, xmlbeans, and jibx that are marked as optional but this isn't reflected in the bundle manifest. Assuming the Ivy file is correct the template.mf needs to be updated to make the corresponding imports optional.  Also, the Bundle-Name is currently specified in the template as Spring ORM   ---  **Affects:** 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/337323a114bb8bc2a172379ddf258b81bd492d04","closed","type: bug,","spring-projects-issues","2009-03-26T01:45:13Z","2012-06-19T03:47:43Z"
"","10287","Spring library does not include the ASM and OXM bundles [SPR-5616]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5616](https://jira.spring.io/browse/SPR-5616?redirect=false)** and commented  the libd file for Spring 3 is missing entries for the new ASM and OXM bundles   ---  **Affects:** 3.0 M2","closed","type: bug,","spring-projects-issues","2009-03-26T01:37:11Z","2012-06-19T03:47:14Z"
"","10286","Regression: InterfaceBasedMBeanInfoAssembler setManagedInterfaces fails if interfaces are passed in [SPR-5615]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5615](https://jira.spring.io/browse/SPR-5615?redirect=false)** and commented  The logic in setManagedIntefaces that checks that each supplied Class is an interface has been inverted:  https://fisheye.springframework.org/browse/spring-framework/trunk/org.springframework.context/src/main/java/org/springframework/jmx/export/assembler/InterfaceBasedMBeanInfoAssembler.java?r1=153&r2=341    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77b2c4e199f1c7c57aff91f3f59f0158c9a9dbc5, https://github.com/spring-projects/spring-framework/commit/40b06b5f19228782e57a5e91beecd0edade428cd","closed","in: core,","spring-projects-issues","2009-03-26T01:22:07Z","2012-06-19T03:46:50Z"
"","10275","OXM bundle's BSN is incorrect [SPR-5604]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5604](https://jira.spring.io/browse/SPR-5604?redirect=false)** and commented  The OXM bundle incorrectly specifies its Bundle-SymbolicName as org.springframework.orm.   ---  **Affects:** 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d75291714a89a986da1ebfe1608d91beada49af5","closed","in: data,","spring-projects-issues","2009-03-23T22:23:40Z","2019-01-11T16:31:38Z"
"","10248","NPE in AbstractCachingLabeledEnumResolver.getLabeledEnumByLabel following garbage collection [SPR-5577]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-5577](https://jira.spring.io/browse/SPR-5577?redirect=false)** and commented  I'm trying to get the dm Server 2.0 codebase working against Spring 3.0.0.M2 and have hit a problem in StaticLabeledEnumResolver. There would appear to be a regression from 2.5.6.A. The problem's probably best illustrated by the attached.  Assuming that you have the attached class and jar in the current directory, along with spring core's jar and commons logging, the following should reproduce the problem:  java -classpath .:com.springsource.org.apache.commons.logging-1.1.1.jar:org.springframework.core-3.0.0.M2.jar StaticLabeledEnumResolverTest Exception in thread ""main"" java.lang.NullPointerException at org.springframework.core.enums.AbstractCachingLabeledEnumResolver.getLabeledEnumByLabel(AbstractCachingLabeledEnumResolver.java:75) at StaticLabeledEnumResolverTest.main(StaticLabeledEnumResolverTest.java:17)  Having looked at what's happening in the debugger it would appear that the first call to CachingMapDecorator.get() adds a weakly-referenced value to the map, keyed by the enum class. With nothing else referencing the value, garbage collection leaves the WeakReference pointing to null. This then causes the NPE.  It's key that FooEnum.jar isn't on the claspath. If FooEnum.jar is on the classpath the NPE does not occur as the weakly-referenced value is still strongly-referenced from elsewhere.  This is currently blocking a fairly major please of work that we had hoped to complete in our current sprint: I'd really appreciate it if you could take a look at this ASAP.   ---  **Affects:** 3.0 M2  **Attachments:** - [FooEnum.jar](https://jira.spring.io/secure/attachment/15222/FooEnum.jar) (_637 bytes_) - [StaticLabeledEnumResolverTest.class](https://jira.spring.io/secure/attachment/15221/StaticLabeledEnumResolverTest.class) (_1.31 kB_)","closed","in: core,","spring-projects-issues","2009-03-16T22:28:53Z","2012-06-19T03:47:01Z"
"","10459","SingletonBeanRegistry.containsSingleton() does not honour aliases or factory prefixes [SPR-5789]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-5789](https://jira.spring.io/browse/SPR-5789?redirect=false)** and commented  SingletonBeanRegistry.containsSingleton() checks the raw passed in name against the singleton registry without passing it through something akin to AbstractBeanFactory.transformedBeanName() and yet the docs say:  \Use BeanFactory's \containsBean\ for general checks whether the 	 * factory knows about a bean with a given name (whether manually registered singleton 	 * instance or created by bean definition), also checking ancestor factories. and make no mention of the different semantics. I believe the semantics for containsSingleton() should match those (as near as possible) as BeanFactory.containsBean(). This is particular troublesome for factories since if you call getBeanNamesForType() you cannot use the returned names as input to containsSingleton() even though the singletons do in fact exist.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5aefb2ce77016400efec032b434d8717c0dc3db7","closed","type: enhancement,","spring-projects-issues","2009-05-27T03:20:31Z","2009-11-11T05:37:16Z"
"","10021","AbstractApplicationContext.isActive() out of sync with multicaster [SPR-5348]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-5348](https://jira.spring.io/browse/SPR-5348?redirect=false)** and commented  In AbstractApplicationContext the isActive flag is set in prepareRefresh(), however the multicaster is not initialized until later in refresh(), thus if you have error handling code which does:  if (context.isActive()) { context.close(); }  you end up with this error:","closed","in: core,","spring-projects-issues","2008-12-09T23:23:50Z","2019-01-12T16:50:37Z"
"","10018","AbstractApplicationContext.isActive() out of sync with multicaster [SPR-5345]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-5345](https://jira.spring.io/browse/SPR-5345?redirect=false)** and commented  In AbstractApplicationContext the isActive flag is set in prepareRefresh(), however the multicaster is not initialized until later in refresh(), thus if you have error handling code which does:  if (context.isActive()) { context.close(); }  you end up with this error:","closed","in: core,","spring-projects-issues","2008-12-08T22:06:43Z","2019-01-12T16:27:38Z"
"","9988","Test context framework: @Transactional does not flush the Hibernate session before rollback [SPR-5315]","**[Andy Kriger](https://jira.spring.io/secure/ViewProfile.jspa?name=kokaku)** opened **[SPR-5315](https://jira.spring.io/browse/SPR-5315?redirect=false)** and commented  STEPS 1. Create a unit test method like this...    `@Transactional`    `@Rollback`(true)    public void txTest()    {    // do something to the db using Hibernate    // do something else to the db using Hibernate that will trigger a Hibernate/db exception (ex: unique constraint violation)    // sessionFactory.getCurrentSession().flush();    }  2. Run the unit test method with and without the flush line  EXPECT: In both cases, an exception - the transaction should flush at the end of the method  ACTUAL: Only when you flush manually do you get an exception.  NOTES: Is the rollback=true skipping a session flush? Since rollback=true would only be used in a test (why would you do that in production code?), the transaction should always flush to ensure that the test activity occurs at the database level (even though you're going to rollback anyways). Otherwise, you get false positives which is dangerous in test code.  ---  **Affects:** 2.5.4  **Issue Links:** - #10369 Test context framework: flush problems should lead to test exceptions instead of failures - #10613 Document potential false positives when testing ORM code  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ee1938eb74f656225dab8604ea60cfd02191bb17","closed","type: enhancement,","spring-projects-issues","2008-11-24T01:16:06Z","2019-01-11T16:14:21Z"
"","10362","Move the aop.xml file in spring-aspects.jar from META-INF to 'org/aspectj' and export it - this will enable its accessibility for ltw with spring-aspects.jar in plain OSGi environments [SPR-5692]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-5692](https://jira.spring.io/browse/SPR-5692?redirect=false)** and commented  Juergen - see the forum issue.  I'd like to move aop.xml from META-INF to org/aspectj and change the manifest to export org/aspectj.  Summarizing the forum issue:  Under that forum post a user is trying to do LTW in a pure OSGi environment.  I asked Martin Lippert to help out with Equinox Aspects and he developed a bit of code that will do the right thing - however the weaver it creates needs to be able to see the aop.xml file in order to be configured.  It cannot see files in META-INF because that folder is not exported.  We could export META-INF but that isn't ideal - the hyphen character is illegal in a package name according to the OSGi spec so cannot be used in the Export-Package header.  (However, dm-server and plain equinox don't actually police the hyphen so we would 'get away with it' - but I don't like having a non spec compliant manifest).   So the alternative is to move it to org/aspectj/aop.xml and export org.aspectj.  AspectJ (for many releases) has considered that another well known location where aop.xml files may be found.    ---  **Affects:** 3.0 M2  **Reference URL:** http://forum.springsource.org/showthread.php?t=60253  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/662dbaaed80a9b90b64eaacd7805414fb2cb7fea","closed","type: enhancement,","spring-projects-issues","2009-04-22T04:45:56Z","2015-09-22T18:20:32Z"
"","10285","Create EclipseLinkTemplate [SPR-5614]","**[AndrÃ© Ribeiro](https://jira.spring.io/secure/ViewProfile.jspa?name=aferrazlr)** opened **[SPR-5614](https://jira.spring.io/browse/SPR-5614?redirect=false)** and commented  As for org.springframework.orm.toplink .**TopLinkTemplate** it would of much use the existence of an org.springframework.orm.eclipselink.**EclipseLinkTemplate**   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-03-25T21:57:15Z","2012-06-19T09:36:33Z"
"","10643","BufferedImageHttpMessageConverter doesn't work on Google AppEngine [SPR-5975]","**[Andrey Paramonov](https://jira.spring.io/secure/ViewProfile.jspa?name=ndpar)** opened **[SPR-5975](https://jira.spring.io/browse/SPR-5975?redirect=false)** and commented  After upgrading Spring version to 3.0.0, application deployed on GAE fails with exception:  ``` Caused by: java.lang.NoClassDefFoundError: javax.imageio.ImageIO is a restricted class. Please see the Google App Engine developer's guide for more details. 	at com.google.apphosting.runtime.security.shared.stub.javax.imageio.ImageIO.(ImageIO.java) 	at org.springframework.http.converter.BufferedImageHttpMessageConverter.(BufferedImageHttpMessageConverter.java:70) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.(AnnotationMethodHandlerAdapter.java:166) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source) 	at java.lang.reflect.Constructor.newInstance(Unknown Source) 	at com.google.apphosting.runtime.security.shared.intercept.java.lang.reflect.Constructor_.newInstance(Constructor_.java:60) 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:127) ```  See also: http://code.google.com/p/googleappengine/issues/detail?id=1268   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4267f8488fed193a3d4fc80b5d4240ce51c728cb","closed","type: enhancement,","spring-projects-issues","2009-08-02T05:20:43Z","2012-06-19T03:42:55Z"
"","10376","ContentNegotiatingViewResolver picks first media type from Accept header which is not consistent across browsers [SPR-5706]","**[Andrew McCall](https://jira.spring.io/secure/ViewProfile.jspa?name=andrew.mccall)** opened **[SPR-5706](https://jira.spring.io/browse/SPR-5706?redirect=false)** and commented  I've been testing the ContentNegotiatingViewResolver and came across an issue which leads to inconsistent behaviour across browsers with no way to change it. I was trying to get my site to display xml if the url had a file extension of xml and to display html if the extension was missing or html.  I turned on debug logging and it seems that if the Accept media type header was being used (no extension was provided) content types with the same quality valye are ordered by the ContentNegotiatingViewResolver in the order the browser provided them, which isn't consistent across browsers. Here snipits from the logs, both requests were for the the url: http://localhost:8080/url :  Safari 4:  [DEBUG] ContentNegotiatingViewResolver - Requested media types are [application/xml, application/xhtml+xml, text/html;q=0.9, text/plain;q=0.8, image/png, */*;q=0.5] (based on Accept header) [DEBUG] ContentNegotiatingViewResolver - Returning [org.springframework.web.servlet.view.xml.MarshallingView: name 'result'] based on requested media type 'application/xml'  Firefox:  [DEBUG] ContentNegotiatingViewResolver - Requested media types are [text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8] (based on Accept header) [DEBUG] ContentNegotiatingViewResolver - Returning [org.springframework.web.servlet.view.JstlView: name 'result'; URL [/WEB-INF/ui/result.jsp]] based on requested media type 'text/html'  I think the default behaviour needs to be consistent so that the same view is returned on all browsers and I really think it would be nice to be able to influence which the application wants to display by default.  ---  **Affects:** 3.0 M2  **Attachments:** - [patch.diff](https://jira.spring.io/secure/attachment/15353/patch.diff) (_3.31 kB_)  **Issue Links:** - #10798 Be able to specify a default content type when no extension is used in ContentNegotiatingViewResolver  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-30T05:40:25Z","2019-01-11T17:30:17Z"
"","10418","MarshallingHttpMessageConverter misspelled in Spring 3.0 Reference Documentation section 2.4.5.1 [SPR-5748]","**[Andrew Goudzwaard](https://jira.spring.io/secure/ViewProfile.jspa?name=zwerd328)** opened **[SPR-5748](https://jira.spring.io/browse/SPR-5748?redirect=false)** and commented  MarshallingHttpMessageConverter is spelled ""MarhsallingHttpMessageConverter"" in Spring 3.0 Reference Documentation section 2.4.5.1 (as viewed in the single-page HTML version).   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41c8352e1635b139246053b9409a19beefb61eee","closed","type: bug,","spring-projects-issues","2009-05-11T12:55:39Z","2012-06-19T03:43:12Z"
"","10870","Add callback for Hibernate StatelessSession to HibernateTemplate [SPR-6202]","**[Andrew Goode](https://jira.spring.io/secure/ViewProfile.jspa?name=javaspock)** opened **[SPR-6202](https://jira.spring.io/browse/SPR-6202?redirect=false)** and commented  Add a new `StatelessHibernateCallback` interface with generic execution logic added to `HibernateTemplate`.  I have implemented similar functionality in my current project and have found that it's very useful for performing batch operations via Hibernate, especially when executing in threads outside the context of a Spring AOP-managed transaction.  According to #7184 and related forum posts, direct support for `StatelessSession`s seems to be a popular request.  This enhancement could be the first step to providing that support with Spring out-of-the-box.  The provided patch introduces the implementation used on my project in a form useful to others, including simple unit test.  Admittedly, this proposed implementation may not be robust enough to satisfy all use cases, but it should serve as at least a good starting point.  Will need to consider the implications of exposing thread-bound JDBC `Connection`s and relying on implementation of `SessionFactoryUtils#getDataSource(SessionFactory)`.  Please see patch for details.  ---  **Affects:** 3.0 RC1  **Attachments:** - [SPR-6202-RFE-patch.diff](https://jira.spring.io/secure/attachment/15773/SPR-6202-RFE-patch.diff) (_8.72 kB_)  **Issue Links:** - #7587 Add a HibernateDaoSupport / HibernateTemplate exclusively for handling Hibernate Stateless Sessions  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2009-10-07T03:10:03Z","2019-01-11T14:43:04Z"
"","10816","@ResponseBody with returned String results in unresolvable view ServletException [SPR-6148]","**[Andrew Ebaugh](https://jira.spring.io/secure/ViewProfile.jspa?name=ande)** opened **[SPR-6148](https://jira.spring.io/browse/SPR-6148?redirect=false)** and commented  We are using the `@ResponseBody` similar as indicated in the reference doc, like: `@RequestMapping`(value = ""/something"", method = RequestMethod.PUT) `@ResponseBody` public String helloWorld()  { return ""Hello World""; }  The returned String does get written to the response by the StringHttpMessageConverter (and the remote client is happy), but then the String goes on to be rendered as an InternalResourceView. Since the strings we are returning are not valid as internal resources, we see a ServletException that is, among other things, caught by our HandlerInterceptor.  One reason this is a problem is because we are mixing together some responses that are marshalled to XML, some that are returned as a strings via the ResponseBody, and others that are valid InternalResourceViews.  One approach may be that AnnotationMethodHandlerAdapter should return null instead of attempting to create a ModelAndView after this condition is met:  AnnotationMethodHandlerAdapter.getModelAndView(..) : if (returnValue != null && handlerMethod.isAnnotationPresent(ResponseBody.class)) { handleRequestBody(returnValue, webRequest); }  As it is, it proceeds to:  if (returnValue instanceof String) { return new ModelAndView((String) returnValue).addAllObjects(implicitModel); }   ---  **Affects:** 3.0 M4  **Attachments:** - [ResponseBodyTest.java](https://jira.spring.io/secure/attachment/15738/ResponseBodyTest.java) (_3.88 kB_) - [Test-servlet.xml](https://jira.spring.io/secure/attachment/15739/Test-servlet.xml) (_1.23 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e49869ea78c1571e4f854350777018f22ea4ee28","closed","type: bug,","spring-projects-issues","2009-09-24T15:20:45Z","2012-06-19T03:42:55Z"
"","10645","ContextLoader static logger causes early log4j initialization [SPR-5977]","**[Andrew Ebaugh](https://jira.spring.io/secure/ViewProfile.jspa?name=ande)** opened **[SPR-5977](https://jira.spring.io/browse/SPR-5977?redirect=false)** and commented  I am running into an issue using the Log4jConfigListener; in my web.xml, I have the listeners configured as follows:  \ \ \org.springframework.web.util.Log4jConfigListener\ \               org.springframework.web.context.ContextLoaderListener       Prior to the Log4jConfigListener.contextInitialized(...) method being invoked, log4j errors are showing up in my console output: log4j:ERROR setFile(null,true) call failed. java.io.FileNotFoundException: /../../logs/mark.log (No such file or directory) at java.io.FileOutputStream.openAppend(Native Method) at java.io.FileOutputStream.\(FileOutputStream.java:177) at java.io.FileOutputStream.\(FileOutputStream.java:102) at org.apache.log4j.FileAppender.setFile(FileAppender.java:289) at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:163) at org.apache.log4j.DailyRollingFileAppender.activateOptions(DailyRollingFileAppender.java:215) at org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:256) at org.apache.log4j.xml.DOMConfigurator.parseAppender(DOMConfigurator.java:220) at org.apache.log4j.xml.DOMConfigurator.findAppenderByName(DOMConfigurator.java:150) at org.apache.log4j.xml.DOMConfigurator.findAppenderByReference(DOMConfigurator.java:163) at org.apache.log4j.xml.DOMConfigurator.parseChildrenOfLoggerElement(DOMConfigurator.java:425) at org.apache.log4j.xml.DOMConfigurator.parseRoot(DOMConfigurator.java:394) at org.apache.log4j.xml.DOMConfigurator.parse(DOMConfigurator.java:829) at org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:712) at org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:618) at org.apache.log4j.helpers.OptionConverter.selectAndConfigure(OptionConverter.java:470) at org.apache.log4j.LogManager.\(LogManager.java:122) at org.apache.log4j.Logger.getLogger(Logger.java:104) at org.apache.commons.logging.impl.Log4JLogger.getLogger(Log4JLogger.java:289) at org.apache.commons.logging.impl.Log4JLogger.\(Log4JLogger.java:109) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:513) at org.apache.commons.logging.impl.LogFactoryImpl.createLogFromClass(LogFactoryImpl.java:1116) at org.apache.commons.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:914) at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:604) at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:336) at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:310) at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:685) at org.springframework.web.context.ContextLoader.\(ContextLoader.java:144) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ... The log file path referenced in the error message above uses the webapp.root system property set by the Log4jWebConfigurer, so when log4j.xml is read prior to the log4j listener starting, the path is invalid.  I've tracked this back to where the ContextLoader declares its logger; it gets created when the ContextLoaderListener is instantiated: private static final Log logger = LogFactory.getLog(ContextLoader.class); This translates through to the default log4j.xml attempting to be loaded when it shouldn't. At least in Tomcat 6, the listeners all appear to be instantiated, then the contextInitialized(...) method is called on them in the order declared in the web.xml.  I also note that it appears this logger field changed to a static somewhere between the Spring 2.5 and 2.5.6 releases, although don't think this is related.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b824d9af7bc13c6306fee2a25da9276c936189c","closed","type: bug,","spring-projects-issues","2009-08-03T12:57:32Z","2012-06-19T03:42:55Z"
"","10791","Update the documentation to include the advice of using within() together with lone kinded pointcuts [SPR-6123]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-6123](https://jira.spring.io/browse/SPR-6123?redirect=false)** and commented  A large number of ShadowMatchImpls objects are created and cached in case a simple execution() pointcut is used. In case this pointcut is combined with a within() clause, as pointed out here: http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg10969.html, the problem goes away, since the method matching in beans is stricter.  It would be good to reflect this advice in the Spring documentation, as well.   ---  **Affects:** 2.0.8, 2.5.6, 3.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/10e26e6dc7bbf6a12cc0666d718ee04fe307d0a3","closed","type: enhancement,","spring-projects-issues","2009-09-18T01:16:15Z","2012-06-19T03:43:33Z"
"","10238","@Scope annotation to be marked as @Inherited [SPR-5567]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-5567](https://jira.spring.io/browse/SPR-5567?redirect=false)** and commented  Mark `@Scope` annotation as `@Inherited`. One possible use-case is to create pojo-s and have them used in Web Flow environment (as ""flow"" scoped beans). A base class marked with `@Scope` would become the abstract source definition for other ""flow"" scoped beans.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-03-12T00:04:11Z","2012-06-19T09:36:17Z"
"","10223","SimpleMessageListenerContainer should allow to unsubribe a durable subscriber during shutdown [SPR-5552]","**[Andreas Kuhtz](https://jira.spring.io/secure/ViewProfile.jspa?name=akuhtz)** opened **[SPR-5552](https://jira.spring.io/browse/SPR-5552?redirect=false)** and commented  The SimpleMessageListenerContainer.doShutdown() should have a callback method that allows to unsubscribe a durable subscription. Currently the only solution is to make a copy of the whole SimpleMessageListenerContainer and overwrite the doShutdown() because the consumers are private (need to check if a consumer was created/exists and the subscription is durable). In my current solution I check if a TopicSubscriber exists and if the subscription is durable. If one was found the subscription is unsubscribed before the session is closed. If this (the unsubscribe) could be done in a separate callback method it would allow to just override it and use the SimpleMessageListenerContainer as it is.  This issue was discussed in http://www.nabble.com/Are-durable-topic-subscriptions-destroyed--td22344211.html.   ---  **Affects:** 2.5.6, 3.0 M2  1 votes, 2 watchers","closed","status: invalid,","spring-projects-issues","2009-03-08T21:11:53Z","2019-01-12T05:33:41Z"
"","10673","org.springframework.beans.propertyeditors.URIEditor does double escaping for % signes for URIs that contain a schema [SPR-6005]","**[Andreas Hartl](https://jira.spring.io/secure/ViewProfile.jspa?name=nd)** opened **[SPR-6005](https://jira.spring.io/browse/SPR-6005?redirect=false)** and commented  org.springframework.beans.propertyeditors.URIEditor does a double escaping of URLs with a schema that use % escaping.  Test:  System.out.println(new SimpleTypeConverter().convertIfNecessary(""http://de.wikipedia.org/wiki/%C3%96"", URI.class));  prints  http://de.wikipedia.org/wiki/%25C3%2596  I ran into this behavior when I wanted to make use of URIEditor's feature that it can resolve classpath: URLs. If the classpath contains spaces or other characters that need to be escaped in URLs, then the resulting URI contains double escaped % signs.  My current workaround is to extend URIEditor and override createURI to always return new URI(value). when registered as custom editor for URIs, this PropertyEditor returns the proper URI.  ---  **Affects:** 3.0 M3  **Attachments:** - [SPR-6005-URIEditor-patch.txt](https://jira.spring.io/secure/attachment/15769/SPR-6005-URIEditor-patch.txt) (_2.44 kB_)  **Issue Links:** - #21123 URIEditor should not double escape classpath: URIs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ec9f1506a3d93a5dacc66c00aec5ca6943a5ae7","closed","in: core,","spring-projects-issues","2009-08-13T19:14:13Z","2019-01-11T14:19:31Z"
"","10501","MethodInvokingJobDetailFactoryBean does not set the result in JobContext [SPR-5831]","**[Andreas Etzlstorfer](https://jira.spring.io/secure/ViewProfile.jspa?name=kingetzl)** opened **[SPR-5831](https://jira.spring.io/browse/SPR-5831?redirect=false)** and commented  In my Environment i have a MethodInvokingJobDetailFactoryBean which is invoking a method on a bean if the trigger fires: e.g. TestBean.doJob (returns a String Object)  Attached to the SchedulerBean i have some JobListeners. (org.quartz.JobListener) the implemented Method (jobWasExecuted) is asking for the Result of the Job (jobContext.getResult()) But it is everytime NULL! In my opinion it should be the return value of the method TestBean.doJob  I found the class which is invoking the method on the bean (its a inner class of MethodInvokingJobDetailFactoryBean)  class MethodInvokingJob { .... protected void executeInternal(JobExecutionContext context) throws JobExecutionException { .... Object result = this.methodInvoker.invoke(); //??? context.setResult(result); //??? .... } .... }    ---  **Affects:** 2.5.6  **Issue Links:** - [SPRNET-1340](https://jira.spring.io/browse/SPRNET-1340) MethodInvokingJobDetailFactoryObject does not set the result in JobContext  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87314b950e7c7be23a3931aa5c3a7d13c50b8712","closed","type: enhancement,","spring-projects-issues","2009-06-16T19:09:11Z","2012-06-19T03:42:47Z"
"","10094","FactoryBean should be able to declare beans it/the created bean depends on [SPR-5420]","**[Andreas Benneke](https://jira.spring.io/secure/ViewProfile.jspa?name=abeani)** opened **[SPR-5420](https://jira.spring.io/browse/SPR-5420?redirect=false)** and commented  If any bean depends on another (beyond the dependencies defined by wiring, etc.), you currently have to declare this dependency at the bean definition using setDependsOn(...) or the corresponding configuration option depends-on=""..."".  In case of a FactoryBean this declaration is not always possible or is redundant, because the bean definition may not ""know"", what the factory does, which other beans it refers to and which beans the created bean depends on.  One example is the ProxyFactoryBean. This factory makes use of beans with the names supplied by ""targetName"" and ""interceptorNames"" properties. The returned proxy then logically ""depends"" on those beans and should be destroyed/recreated according to these dependencies. But this is currently not the case, as long as you don't declare the bean names redundant (!) as ""dependsOn"" in the bean definition.  I think the best solution would be another interface extending FactoryBean with a single method  public String[] getObjectDependsOn()  or similar. The bean registry could then check for this interface and ""ask"" the FactoryBean about the dependencies.  What do you think?   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2009-01-20T09:47:03Z","2012-06-19T09:36:21Z"
"","9969","DB2 buffer pool JDBC exception mischaracterized as non-transient [SPR-5296]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-5296](https://jira.spring.io/browse/SPR-5296?redirect=false)** and commented  DB2 SQLCODE=-1218, SQLSTATE=57011, SQLERRMC=4097 is document as being transient  in the DB2 Message Reference, yet Spring throws this as a DataAccessResourceFailureException:  org.springframework.dao.DataAccessResourceFailureException: Hibernate flushing: could not insert collection rows: [com.electriccloud.commander.domain.JobStepImpl.steps#101]; SQL [update ec_job_step set parent_id=?, step_index=? where id=?]; DB2 SQL Error: SQLCODE=-1218, SQLSTATE=57011, SQLERRMC=4097, DRIVER=4.2.73; nested exception is com.ibm.db2.jcc.a.SqlException: DB2 SQL Error: SQLCODE=-1218, SQLSTATE=57011, SQLERRMC=4097, DRIVER=4.2.73 at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:103) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.orm.hibernate3.HibernateTransactionManager.convertJdbcAccessException(HibernateTransactionManager.java:801) at org.springframework.orm.hibernate3.HibernateTransactionManager.convertHibernateAccessException(HibernateTransactionManager.java:787) at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:663) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:732) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:701) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:321) at com.electriccloud.dao.TransactionAspect.withTransaction(TransactionAspect.java:161) at sun.reflect.GeneratedMethodAccessor32.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:627) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:616) at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:64) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:160) at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:77) at com.electriccloud.operations.TransactionRetryAspect.performWithRetry(TransactionRetryAspect.java:221) at sun.reflect.GeneratedMethodAccessor74.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:627) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:616) at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:64) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:160) at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:77) at com.electriccloud.operations.OperationTimingAspect.logOperationPerformance(OperationTimingAspect.java:106) at sun.reflect.GeneratedMethodAccessor20.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:627) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:616) at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:64) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:160) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy167.perform(Unknown Source) at com.electriccloud.operations.OperationInvoker.invoke(OperationInvoker.java:197) at com.electriccloud.operations.OperationCaller.call(OperationCaller.java:112) at com.electriccloud.operations.OperationCaller.call(OperationCaller.java:37) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619) at com.electriccloud.util.queue.CommanderThread.run(CommanderThread.java:112) Caused by: com.ibm.db2.jcc.a.SqlException: DB2 SQL Error: SQLCODE=-1218, SQLSTATE=57011, SQLERRMC=4097, DRIVER=4.2.73 at com.ibm.db2.jcc.a.cd.a(cd.java:669) at com.ibm.db2.jcc.a.cd.a(cd.java:60) at com.ibm.db2.jcc.a.cd.a(cd.java:127) at com.ibm.db2.jcc.a.ul.b(ul.java:2092) at com.ibm.db2.jcc.a.ul.c(ul.java:2075) at com.ibm.db2.jcc.t4.db.k(db.java:353) at com.ibm.db2.jcc.t4.db.a(db.java:59) at com.ibm.db2.jcc.t4.t.a(t.java:50) at com.ibm.db2.jcc.t4.tb.b(tb.java:200) at com.ibm.db2.jcc.a.vl.Zb(vl.java:2427) at com.ibm.db2.jcc.a.vl.e(vl.java:3269) at com.ibm.db2.jcc.a.vl.Rb(vl.java:624) at com.ibm.db2.jcc.a.vl.executeUpdate(vl.java:603) at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:469) at org.hibernate.jdbc.NonBatchingBatcher.addToBatch(NonBatchingBatcher.java:23) at org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1367) at org.hibernate.action.CollectionUpdateAction.execute(CollectionUpdateAction.java:66) at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:279) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:263) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:170) at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:304) at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27) at com.electriccloud.dao.HibernateFlushListener.onFlush(HibernateFlushListener.java:67) at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000) at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:338) at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:106) at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:655) ... 42 more   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/800af734d9717f5908b38c13ba355b3e4eea5fb6","closed","type: bug,","spring-projects-issues","2008-11-14T06:45:38Z","2012-06-19T03:46:46Z"
"","9948","JmsUtils.buildExceptionMessage throws NPE if the linked exception doesn't have a message [SPR-5275]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-5275](https://jira.spring.io/browse/SPR-5275?redirect=false)** and commented  This method throws an exception if the linked exception's message is null.  I've patched it locally as follow:      /**      * Build a descriptive exception message for the given JMSException,      * incorporating a linked exception's message if appropriate.      * @param ex the JMSException to build a message for      * @return the descriptive message String      * @see javax.jms.JMSException#getLinkedException()      */     public static String buildExceptionMessage(JMSException ex) {     	String message = ex.getMessage();     	Exception linkedEx = ex.getLinkedException();     	if (linkedEx != null && (linkedEx.getMessage() == null || message.indexOf(linkedEx.getMessage()) == -1)) {     		message = message + ""; nested exception is "" + linkedEx;     	}     	return message;     }  ---  **Affects:** 2.5.6  **Issue Links:** - #10005 JmsException.getMessage throws NPE if a cause doesn't have a message (_**""is duplicated by""**_) - #10075 NullPointerException in JmsException (_**""is duplicated by""**_) - #10455 NullPointerException in JmsUtils.buildExceptionMessage (_**""is duplicated by""**_) - #10626 NullPointerException in JmsUtils.buildExceptionMessage() (_**""is duplicated by""**_) - #10721 NullPointerException can occur from JmsUtils.buildException (_**""is duplicated by""**_) - #10143 Possible NPE in JmsUtils.buildExceptionMessage and JmsException.getMessage (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2008-11-06T10:09:58Z","2019-01-11T15:23:52Z"
"","10244","Find Currently Open Transactions [SPR-5573]","**[Amit](https://jira.spring.io/secure/ViewProfile.jspa?name=table1)** opened **[SPR-5573](https://jira.spring.io/browse/SPR-5573?redirect=false)** and commented  Is there any way to find out the number of currently open transactions by enabling logging or modifying the spring framework source code (2.5.6)?   ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2009-03-16T05:34:35Z","2012-06-19T09:36:24Z"
"","10597","Using AOP to inject dependency between beans [SPR-5928]","**[Amine ABBES](https://jira.spring.io/secure/ViewProfile.jspa?name=aabbes)** opened **[SPR-5928](https://jira.spring.io/browse/SPR-5928?redirect=false)** and commented  Hi, I think there is a room left for adding AOP as another way for doing Dependency Injection with spring. Rather than asking a service manager bean (S) to create an instance of an object (O) in a given bean (B), and so we must have a reference to S in B although B has only to deal with O, why not every time B needs an instance of O just it calls its internal method getO with the relevant arguments and then, the framework will use AOP to invoke S and asks it to produce an instance of O. To be more clear, suppose we have a class WebApp that needs to retrieve a User instance given by its login. WebApp has a method getUser(String login) and spring will be configured so that the call of this method results in a call to the method getUser(String login) but of the UserManager class. A very draft of the correspondent xml configuration file would contains a bloc that looks like below :             	     		     			     				     			     		     	            Behind the scene, an AOP aspect (of type around for example) will be used to redirect all the calls of  WebApp.getUser(String) in the webApp bean to the relevant method of the bean userManager. In this way, we free WebApp from having any knowledge of UserManager, even if it is an interface. We emphasis the separation of concern and the complete decoupling of the two classes.   --- No further details from [SPR-5928](https://jira.spring.io/browse/SPR-5928?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-07-14T09:30:29Z","2012-06-19T09:36:33Z"
"","10502","""util:properties location..."" should offer resolution of placeholders in properties file [SPR-5832]","**[Altin Papa](https://jira.spring.io/secure/ViewProfile.jspa?name=paperino)** opened **[SPR-5832](https://jira.spring.io/browse/SPR-5832?redirect=false)** and commented   ---  **Affects:** 2.5.4  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-06-16T22:49:45Z","2015-09-22T18:55:03Z"
"","10492","Extend @CookieValue mapping to support user-defined types [SPR-5822]","**[AleÅ¡ Najmann](https://jira.spring.io/secure/ViewProfile.jspa?name=littleli)** opened **[SPR-5822](https://jira.spring.io/browse/SPR-5822?redirect=false)** and commented  Current state: `@CookieValue` annotation currently helps programmer with mapping certain controller method argument. However, it limits the parameter to be of type Cookie or some primitive type such as int or String.  Improvement: As long as it is used in same context as `@RequestParam` it would be nice to extend `@CookieValue` mapping to be able to handle user-defined types through PropertyEditor, WebBindingInitializer or `@InitBinder`.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/49dd707b8a23154dab3ffc32f83ee3d816958a27","closed","status: invalid,","spring-projects-issues","2009-06-11T01:37:19Z","2019-01-12T05:33:29Z"
"","10472","NullPointerException when using @CookieValue annotation [SPR-5802]","**[AleÅ¡ Najmann](https://jira.spring.io/secure/ViewProfile.jspa?name=littleli)** opened **[SPR-5802](https://jira.spring.io/browse/SPR-5802?redirect=false)** and commented  When using annotated controller such as:  ``` @RequestMapping(value = ""/auth"", method = RequestMethod.POST) public String authentication(@RequestParam(""username"") String username, @RequestParam(""password"") String password, @CookieValue(value=""X-AUTH"") String tokenString) { ... } ```  and there is no cookie (X-AUTH) sent by client side browser, than invocation failes while mapping cookie value with NullPointerException. Here goes stacktrace:  ``` java.lang.NullPointerException at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.resolveCookieValue(AnnotationMethodHandlerAdapter.java:629)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveCookieValue(HandlerMethodInvoker.java:482)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:259)         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:146)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:354)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:342)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:763)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:709)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:613)         at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:536)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)         at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:71)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)         at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845)         at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)         at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)         at java.lang.Thread.run(Thread.java:619) ```  It happens even when defaultValue is set. I expect tokenString to be null or defaultValue (if it's set). Solution to this problem is trivial, after I looked to source code, but let me introduce more advanced idea. It would be great if anotated `@CookieValue` argument could be of any user type and should be resolved through registered property editors such as arguments with `@RequestParam` are.   ---  **Affects:** 3.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/541aae12ef82767479bcd53afb3681b46dd890a5, https://github.com/spring-projects/spring-framework/commit/1dc346a32c86f9ee19dfdaf06f7234d5ba806e8d","closed","type: bug,","spring-projects-issues","2009-06-04T04:13:12Z","2012-06-19T03:44:15Z"
"","10320","please have a look to my last comment [SPR-5649]","**[Alexandre Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=apclem)** opened **[SPR-5649](https://jira.spring.io/browse/SPR-5649?redirect=false)** and commented  ---  This issue is a sub-task of #10308  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/20fc42add04d4cf3a66b11ee963212aecc79f1e1","closed","type: task,","spring-projects-issues","2009-04-02T19:36:02Z","2019-01-11T16:35:15Z"
"","10308","portlet global session ignored by by JSF request wrapper [SPR-5637]","**[Alexandre Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=apclem)** opened **[SPR-5637](https://jira.spring.io/browse/SPR-5637?redirect=false)** and commented  the FacesRequestAttributes getAttributeMap() function doesn't handle the SCOPE_GLOBAL_SESSION.  ``` protected Map getAttributeMap(int scope) { 		if (scope == SCOPE_REQUEST) { 			return getExternalContext().getRequestMap(); 		} 		else { 			return getExternalContext().getSessionMap(); 		} 	} ```  I had to access to the underlying portletsession to manage it. I didn't find a way to do it without declaring a dependency on the portlet-api.  ``` protected Map getAttributeMap(int scope) { 		if (scope == SCOPE_REQUEST) { 			return getExternalContext().getRequestMap(); 		} 		else if (scope == SCOPE_SESSION) { 			return getExternalContext().getSessionMap(); 		} else { 		    Object session = getExternalContext().getSession(true); 		    if (session instanceof PortletSession) { 		        return ((PortletSession)session).getAttributeMap(PortletSession.APPLICATION_SCOPE); 		    } else { 		        return getExternalContext().getSessionMap(); 		    } 		} 	} ```  ---  **Sub-tasks:** - #10320 please have a look to my last comment  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2524ca33d5c5784a4caa6b0edef1035d077c6217","closed","type: enhancement,","spring-projects-issues","2009-03-30T21:11:40Z","2019-01-11T16:29:52Z"
"","10379","TagWriter doen't work for content type text/html - it closes empty tags in a wrong way [SPR-5709]","**[Alexander Kiel](https://jira.spring.io/secure/ViewProfile.jspa?name=akiel)** opened **[SPR-5709](https://jira.spring.io/browse/SPR-5709?redirect=false)** and commented  If I create an empty HTML tag with the TagWriter e.g.:  ``` TagWriter tagWriter = new TagWriter(pageContext); tagWriter.startTag(""br""); tagWriter.endTag(); ```  it outputs `` instead of `` in the case of real HTML or even `` (note the whitespace) in the case of XHTML delivered over text/html.  As I don't think that most of the spring webapps are delivered by application/xhtml+xml, I suggest that at least the additional whitespace before `/>` should be added.  A mode for real HTML should also be considered.    ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2009-05-01T22:32:40Z","2012-06-19T09:36:21Z"
"","9982","StackOverflowError when using MessageListenerAdapter without delegate [SPR-5309]","**[Alexander Grupe](https://jira.spring.io/secure/ViewProfile.jspa?name=oldgrupe)** opened **[SPR-5309](https://jira.spring.io/browse/SPR-5309?redirect=false)** and commented  When using the constructor without specifying a delegate...      public MessageListenerAdapter() {     	initDefaultStrategies();     	this.delegate = this;     }  ...the next call to getSubscriptionName leads to an endless loop:      public String getSubscriptionName() {     	if (this.delegate instanceof SubscriptionNameProvider) {     		return ((SubscriptionNameProvider) this.delegate).getSubscriptionName();     	}     	else {     		return this.delegate.getClass().getName();     	}     }  This is for example called in AbstractMessageListenerContainer.setMessageListener. Before the introduction of SubscriptionNameProvider in 2.5.6, by default the message listener's class name was used.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2674b13b06802e0d9f0894ac14c9623a7e157d81  3 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2008-11-18T03:26:10Z","2012-06-19T03:47:19Z"
"","10129","multiple instances of PropertyPlaceholderConfigurer under AbstractAnnotationAwareTransactionalTests don't work properly [SPR-5456]","**[Alex Bahlai](https://jira.spring.io/secure/ViewProfile.jspa?name=baocean)** opened **[SPR-5456](https://jira.spring.io/browse/SPR-5456?redirect=false)** and commented  When you test your application in your java IDE (IntelliJ Idea in my case ) using `AbstractAnnotationAwareTransactionalTests` in case you have to load few different spring application context files that have different property locator objects, properties are loaded only for the _last_ created property locator object  In the log you could see that properties weren't loaded for dslPropertyPlaceholder and casPropertyPlaceholder.  Though under tomcat everything is OK.  Example of log:  ``` 10:06:37,884 DEBUG DefaultListableBeanFactory:214 - Creating shared instance of singleton bean 'propertyPlaceholder' 10:06:37,886 DEBUG DefaultListableBeanFactory:383 - Creating instance of bean 'propertyPlaceholder' 10:06:37,948 DEBUG DefaultListableBeanFactory:459 - Eagerly caching bean 'propertyPlaceholder' to allow for resolving potential circular references 10:06:37,974 DEBUG DefaultListableBeanFactory:411 - Finished creating instance of bean 'propertyPlaceholder' 10:06:37,975 DEBUG DefaultListableBeanFactory:214 - Creating shared instance of singleton bean 'dslPropertyPlaceholder' 10:06:37,976 DEBUG DefaultListableBeanFactory:383 - Creating instance of bean 'dslPropertyPlaceholder' 10:06:37,976 DEBUG DefaultListableBeanFactory:459 - Eagerly caching bean 'dslPropertyPlaceholder' to allow for resolving potential circular references 10:06:37,977 DEBUG DefaultListableBeanFactory:411 - Finished creating instance of bean 'dslPropertyPlaceholder' 10:06:37,979 DEBUG DefaultListableBeanFactory:214 - Creating shared instance of singleton bean 'casPropertyPlaceholder' 10:06:37,980 DEBUG DefaultListableBeanFactory:383 - Creating instance of bean 'casPropertyPlaceholder' 10:06:37,981 DEBUG DefaultListableBeanFactory:459 - Eagerly caching bean 'casPropertyPlaceholder' to allow for resolving potential circular references 10:06:37,982 DEBUG DefaultListableBeanFactory:411 - Finished creating instance of bean 'casPropertyPlaceholder' 10:06:37,983 DEBUG DefaultListableBeanFactory:214 - Creating shared instance of singleton bean 'billingPropertyPlaceholder' 10:06:37,983 DEBUG DefaultListableBeanFactory:383 - Creating instance of bean 'billingPropertyPlaceholder' 10:06:37,984 DEBUG DefaultListableBeanFactory:459 - Eagerly caching bean 'billingPropertyPlaceholder' to allow for resolving potential circular references 10:06:37,985 DEBUG DefaultListableBeanFactory:411 - Finished creating instance of bean 'billingPropertyPlaceholder' 10:06:37,987  INFO PropertyPlaceholderConfigurer:178 - Loading properties file from URL [file:/etc/primetv/primetv-placeholders.properties] 10:06:37,998  INFO DefaultListableBeanFactory:421 - Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@111b910: defining beans [dataSource,quartzDS,primetvStatDS,jmsFactory,primetvQueue,propertyLoader,deployPropertiesLoader,propertyPlaceholder,dslPropertyPlaceholder,vodServerUrlConverter,pvrGatewayService,sessionFactory,transactionManager,dictionaryDAO,messageDAO,activityLogDAO,pvrAssetDAO,pvrOwnershipDAO,customerDAO,tvProgramDAO,tvChannelDAO,tvChannelDescriptionDAO,tvChannelGroupDAO,tvChannelGroupDescriptionDAO,bundleDAO,stbDAO,phoneDAO,packageSubscriptionDAO,vodOrderDAO,vodAssetDAO,vodAssetDescriptionDAO,vodCategoryDAO,vodCategoryDescriptionDAO,vodAssetPricingGroupDAO,vodServerDAO,profileDAO,clientSidePropertyDAO,stbTvChannelDAO,channelgroupsTvchannelDAO,vodAssetCategoryDAO,vodAssetRuleDAO,accedoSessionLogDAO,accedoGameDAO,genericDao,userDAO,roleDAO,stbPropDAO,tvProgramDescrDAO,couponDAO,couponDrawingDAO,couponUsageLogDAO,pvrSettingDAO,vodPlayoutLogDAO,auditLogDAO,stbChannelStatDAO,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,channel,primetvChannel,billingService,hibernateInterceptor,openSessionTemplate,constants,txProxyTemplate,activityLogger,clientSidePropertyManager,profileManager,activityLogManager,dictionaryManager,messageManager,pvrAssetManager,customerManager,bundleManager,managerFactory,pvrOwnershipManager,auditLogManager,pvrSettingManager,tvChannelGroupDescriptionManager,vodPlayoutLogManager,vodAssetDescriptionManager,stbPropManager,vodAssetPricingGroupManager,vodCategoryDescriptionManager,vodServerManager,tvProgramDescriptionManager,tvProgramManager,tvChannelDescriptionManager,tvChannelManager,tvChannelGroupManager,channelgroupsTvchannelManager,stbManager,phoneManager,packageSubscriptionManager,vodCategoryManager,vodOrderManager,vodAssetCategoryManager,vodAssetManager,vodAssetRuleManager,userManager,stbTvChannelManager,roleManager,accedoSessionLogManager,accedoGameManager,couponDrawingManager,couponManager,couponUsageLogManager,remoteEPGReader,cacheManagerFactory,jspCache,cacheService,tvProgramsCache,tvChannelsCache,tvChannelGroupsCache,tvProgramsCacheService,tvChannelGroupCacheService,tvChannelsCacheService,tvProgramManagerCachable,tvChannelManagerCachable,tvChannelGroupManagerCachable,casPropertyPlaceholder,deviceManagement,billingPropertyPlaceholder,org.springframework.scheduling.quartz.SchedulerFactoryBean#0,syncronizationTrigger,synchronizeSubscriptionJob,synchronizeSubscriptionManager,stbAuxiliaryJobs,synchronizeSubscriptionORMSpecific,synchronizeSubscriptionCommon,synchronizeBundlesManager,synchronizeVodAssetPriceManager,axisCallManagerCustomer]; root of factory hierarchy  org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'deviceManagement' defined in class path resource [spring-securemedia-client.xml]: Could not resolve placeholder 'bssUrl' ```    ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2009-02-03T18:11:10Z","2019-01-12T05:33:45Z"
"","10744","Support in AbstractTransactionalDataSourceSpringContextTests.executeSqlScript for complex statements which include more than one separator (i.e. triggers) [SPR-6076]","**[Alessandro Dionisi](https://jira.spring.io/secure/ViewProfile.jspa?name=cecchisandrone)** opened **[SPR-6076](https://jira.spring.io/browse/SPR-6076?redirect=false)** and commented  It could be helpful if the method executeSqlScript of class AbstractTransactionalDataSourceSpringContextTests can recognize multiline statements, with multiple separator into. For example, statement like this:  ``` CREATE OR REPLACE TRIGGER TASK_INST_ON_UPDATE  AFTER UPDATE OF PROCINST_ ON JBPM_TASKINSTANCE  REFERENCING NEW AS NewRow  FOR EACH ROW  declare counter number := 0;  BEGIN  select count(*) INTO counter FROM rawd_rawdata_taskinstance where taskinstance_id=:NewRow.ID_;  IF (counter = 0) THEN     IF (:NewRow.PROCINST_ is not null) then        INSERT into rawd_rawdata_taskinstance (taskinstance_id,rawdata_id)        SELECT :NewRow.ID_, rawd_rawdatas.RAWDATA_ID FROM rawd_rawdatas        where rawd_rawdatas.WORKFLOW_ID=:NewRow.PROCINST_;     END IF;  END IF;  END; ```    --- No further details from [SPR-6076](https://jira.spring.io/browse/SPR-6076?redirect=false)","closed","type: enhancement,","spring-projects-issues","2009-09-03T21:26:10Z","2012-06-19T09:36:21Z"
"","10876","RmiInvocationWrapper Stubs and Skels not packaged in org.springframework.remoting.rmi package [SPR-6208]","**[Aleksa Vukotic](https://jira.spring.io/secure/ViewProfile.jspa?name=aleksav)** opened **[SPR-6208](https://jira.spring.io/browse/SPR-6208?redirect=false)** and commented  We have RMI services exposed using Spring 2.5.6 RmiServiceExporter and currenly developing clients which will consume these services, but using Spring 3.0 RmiProxyFactoryBean.  org.springframework.remoting.rmi.RmiInvocationWrapper_Skel.class  and org.springframework.remoting.rmiRmiInvocationWrapper_Stub.class are not found in spring-context module in Spring 3.0 jars  This causes class not found exceptions on client RMI calls.  We fixed it temporarily by using our custom Spring 3 build, changing the org.springframework.context/build.xml to overrire do-compile macro (with rmic calls included)  ```xml                               	 		 		 		 		 		 			 				 				 				 				 				 			 	 			 	 			 				 			 	 			 				 					 					 				 			 			 				 			 		        ```    ---  **Affects:** 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1  **Attachments:** - [build.xml](https://jira.spring.io/secure/attachment/15782/build.xml) (_1.92 kB_)","closed","type: task,","spring-projects-issues","2009-10-08T02:20:25Z","2012-06-19T03:42:50Z"
"","10317","Investigate how to support more than 1 view resolved through the BeanNameViewResolver [SPR-5646]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5646](https://jira.spring.io/browse/SPR-5646?redirect=false)** and commented  As discussed in the blog entry (http://blog.springsource.com/2009/03/16/adding-an-atom-view-to-an-application-using-springs-rest-support/) you can now support more than 1 view by using the ContentNegotiatingViewResolver. Aas Dmitriy and Harald are asking, it's not clear right now how to support more than 1 view through the BeanNameViewResolver.  For more info on the issue, have a look at the comments by Dmitriy and Harald: http://blog.springsource.com/2009/03/16/adding-an-atom-view-to-an-application-using-springs-rest-support/#comments   ---  **Affects:** 3.0 M2  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2009-04-01T22:33:21Z","2018-12-27T11:10:28Z"
"","10148","Improve error messaging when factory-method is not found [SPR-5475]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5475](https://jira.spring.io/browse/SPR-5475?redirect=false)** and commented  If I use a factory-method without an argument, but in xml use a constructor+argument, I get quite a vague error message. Consider the following:  public aspect LoggingAspect {}  // a bunch of stuff, but no constructors obviously  \ 	\ \  Renders the following error. Can we improve this to give a hint that there no arguments in the method?? Or something similar??  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.mycompany.LoggingAspect#0' defined in class path resource [context.xml]: No matching factory method found: factory method 'aspectOf' at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:396) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:901)   ---  **Affects:** 2.5.6  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16344/mylyn-context.zip) (_254.69 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16343/mylyn-context.zip) (_279.13 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/351e72b6e258bd030fb21be253f6348319f81d0e","closed","type: enhancement,","spring-projects-issues","2009-02-11T18:36:59Z","2012-06-19T03:47:48Z"
"","10133","Add AtomView sample to PetClinic [SPR-5460]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5460](https://jira.spring.io/browse/SPR-5460?redirect=false)** and commented  Attached, you'll find a few patch files and one new class that implements an AtomView on top of the PetClinic.  The VisitsAtomView goes in org.springframework.samples.web  The first patch adds a handler method to the ClinicController returning a list of visits  The second patch adds the view as a bean to the ***-servlet.xml and adds a BeanNameViewResolver (ordered as the first resolver).  You would also need JDom and Rome on the classpath of the project.  Have fun!   ---  **Affects:** 3.0 M1  **Attachments:** - [diff.patch](https://jira.spring.io/secure/attachment/15107/diff.patch) (_1.05 kB_) - [petclinic-servlet.xml](https://jira.spring.io/secure/attachment/15109/petclinic-servlet.xml) (_3.49 kB_) - [VisitAtomView.java](https://jira.spring.io/secure/attachment/15108/VisitAtomView.java) (_1.47 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b96a7a7a8c11d417d2f2dbab098b9be9021ce44a","closed","type: enhancement,","spring-projects-issues","2009-02-03T23:32:05Z","2012-06-19T03:46:50Z"
"","10008","manager.sh classpath for petclinic should be updated (patch included) [SPR-5335]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5335](https://jira.spring.io/browse/SPR-5335?redirect=false)** and commented  The classpath in the manager.sh file for the petclinic sample still refers to the old hsqldb.jar file. This should be updated. Patch included.    ---  **Affects:** 3.0 M1  **Attachments:** - [manager.patch](https://jira.spring.io/secure/attachment/14930/manager.patch) (_400 bytes_)","closed","type: bug,","spring-projects-issues","2008-12-03T02:40:54Z","2012-06-19T03:47:18Z"
"","9999","HibernateClinic in PetClinic sample should use constructor-injection instead of field injection [SPR-5326]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5326](https://jira.spring.io/browse/SPR-5326?redirect=false)** and commented  In HibernateClinic (org.springframework.samples.petclinic.hibernate) we're using `@Autowired` field injection right now. This should be changed to use constructor injection. We promote the use of constructor injection all over the place and also not doing field injection in your business logic and this is precisely what we're doing here...  Attaching a patch. Not tested (can't get the workspace up and running right now, so please test before committing).   ---  **Affects:** 2.5.6  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/14916/patch.txt) (_1.66 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fe31de529beb69da60ce8dcf110423132865e069","closed","type: enhancement,","spring-projects-issues","2008-11-26T20:26:00Z","2012-06-19T03:46:37Z"
"","9994","Improve documentation for  and  in the schema [SPR-5321]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5321](https://jira.spring.io/browse/SPR-5321?redirect=false)** and commented  At the moment, there is no documentation in the schema for  and  while there is for . The XML editor provides a nice way of getting the documentation if you use autocompletion, but if there is no document, it also doesn't show up :-).  I wanted to provide a patch to the schema, but couldn't get Spring to build and resolve properly, so unfortunately, no patch this time...    ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2008-11-25T22:53:00Z","2019-01-11T16:19:05Z"
"","9950","Vague problems when including a class two times on the classpath in combination with Component Scanning [SPR-5277]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5277](https://jira.spring.io/browse/SPR-5277?redirect=false)** and commented  The description probably suffices, but if you have a class com.mycompany.Service annotated by `@Component` included twice in your classpath (say in two different jars), it's picked up twice as well by the component scanner. This is very confusing, because the error message your getting does say there is a conflicting bean definition of the same class already, but for users it is very confusing at first. Maybe the error message can be improved somehow? Or maybe we can detect that the same class is on the classpath twice or so?   ---  **Affects:** 2.5.4, 2.5.5, 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-11-06T17:51:40Z","2015-09-22T17:34:30Z"
"","9887","Improve error messaging when creating jms:listener with missing method attribute [SPR-5214]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5214](https://jira.spring.io/browse/SPR-5214?redirect=false)** and commented  When I create myself a simple POJO (no MessageListener, a simple POJO) and use it as a , forgetting the method attribute results in the following error.  While in the old-school (non-schema approach) this message is quite okay, when using  the error message is quite vague. Can we include a mention of the namespace as well?  Other than that, maybe it's possible to check whether or not the method exists earlier in the process...  WARN : org.springframework.jms.listener.DefaultMessageListenerContainer - Execution of JMS message listener failed javax.jms.IllegalStateException: No default listener method specified: Either specify a non-null value for the 'defaultListenerMethod' property or override the 'getListenerMethodName' method. at org.springframework.jms.listener.adapter.MessageListenerAdapter.onMessage(MessageListenerAdapter.java:351) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:506) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:463) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:868) at java.lang.Thread.run(Thread.java:613)   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-10-13T20:04:11Z","2015-09-22T17:34:38Z"
"","10386","ReloadableResourceBundleMessageSource:  filenames calculated incorrectly [SPR-5716]","**[Albert de Jongh](https://jira.spring.io/secure/ViewProfile.jspa?name=adejongh)** opened **[SPR-5716](https://jira.spring.io/browse/SPR-5716?redirect=false)** and commented  The ""calculateFilenamesForLocale"" method does not correctly calculate filenames if the variant is set, but not the country. For example, if you have the locale with language=""en"", country="""", variant=""POSIX"", the method will create the following filenames: (with basename ""messages"") . messages_en_POSIX . messages_en  The variant is now in the country position - it should have been messages_en__POSIX (extra underscore).   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ccb352aacd29e909f645985df3aa3cc589bf763","closed","in: core,","spring-projects-issues","2009-05-06T01:40:00Z","2012-06-19T03:43:08Z"
"","10485","AbstractTransactionalJUnit4SpringContextTests rollback per test fails when @GeneratedValue used for JPA Entity Identity [SPR-5815]","**[Alan O'Leary](https://jira.spring.io/secure/ViewProfile.jspa?name=aloleary)** opened **[SPR-5815](https://jira.spring.io/browse/SPR-5815?redirect=false)** and commented  AbstractTransactionalJUnit4SpringContextTests  Failing to rollback changed in each test when the domain containes entities with `@GeneratedValue` annotations for Identity.    ---  **Affects:** 3.0 M3  **Reference URL:** http://forum.springsource.org/showthread.php?t=72969","closed","status: invalid,","spring-projects-issues","2009-06-09T19:02:21Z","2019-01-12T05:33:30Z"
"","10051","AOP fails with interface implemented in Groovy with defaulted method parameter [SPR-5378]","**[Alan Boshier](https://jira.spring.io/secure/ViewProfile.jspa?name=wabrit)** opened **[SPR-5378](https://jira.spring.io/browse/SPR-5378?redirect=false)** and commented  Assume a class Foo written in Groovy which implements an interface, that is compiled to a classfile and registered in Spring as a regular ""static"" bean rather than anything dynamic (i.e. it is declared using < bean > not < lang:groovy >).  The class provides an implementation of a method, and that implementation allows the parameter values to be defaulted.  e.g.  \ public interface Foo { public void doStuff(String p1, boolean p2) }  public class FooImpl implements Foo { public void doStuff(String p1, boolean p2=false) { ... } } \  If an aop:aspect is defined to trigger on the doStuff method call for this interface using an afterReturning advice, then at runtime any call into an instance of Foo handed out by the Spring containers results in a ClassCastException: $Proxy0 error.  The error no longer happens if the default parameter value assignment is removed from the FooImpl.doStuff signature.    ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-12-27T04:32:35Z","2019-01-12T16:27:34Z"
"","10656","Add support for the @WebServiceProvider to the SimpleJaxWsServiceExporter [SPR-5988]","**[Adriaan Wisse](https://jira.spring.io/secure/ViewProfile.jspa?name=a3aan)** opened **[SPR-5988](https://jira.spring.io/browse/SPR-5988?redirect=false)** and commented  The current version of the SimpleJaxWsServiceExporter only supports webservices annotated with `@WebService`. It would be nice to have support for the `@WebServiceProvider` annotation as well.  I attached the code which is in my opinion sufficient to solve this issue.   ---  **Affects:** 2.5.6  **Attachments:** - [JaxWsServiceExporting.zip](https://jira.spring.io/secure/attachment/15597/JaxWsServiceExporting.zip) (_2.89 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a0108ac6a39a1c797b1218312467abdcc6fd76e","closed","type: enhancement,","spring-projects-issues","2009-08-06T19:55:02Z","2012-06-19T03:43:13Z"
"","9945","Bug in translating SQLException using Error Codes [SPR-5272]","**[Abhishek Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=gupabhi)** opened **[SPR-5272](https://jira.spring.io/browse/SPR-5272?redirect=false)** and commented  The SQLErrorCodeSQLExceptionTranslator class does a binary search on the SQLErrorCodes of each category. But binary search expects  these to be in ascending order. Since these error-codes are stored in String[], they need to be in an ""alphanumeric"" sorted order in the sql-error-codes.xml  file. Following are some examples of this not being the case:  In release 2.5.6 for DB=Sybase the following codes are defined: \ \921,1105\ \  These are in ascending order numerically but since SQLErrorCodeSQLExceptionTranslator does a binary search on String[] this is not ascending alphanumerically  The following break in older version 2.5.5 and older"": \ \423,511,515,530,547,2601,2615,2714\ \  There are other such breaks as well in the file.  Instead of fixing the config file to keep the codes sorted alphanumerically, may I suggest that the SQLErrorCodes actually be explicitly sorted on load?  In case a user overrides the the sql-error-codes.xml it can easily lead to bugs if  the file is not maintained alphanumerically sorted.    ---  **Affects:** 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6","closed","type: bug,","spring-projects-issues","2008-11-04T10:03:20Z","2012-06-19T03:47:28Z"