"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","23","SPR-9073 Added ""ant resolve"" to the top level","With this change, you can call ""ant **resolve**"" in ""build-springframework"" directory. This will download all dependencies into ""ivy-cache/repository"".  Background: ""ant **test**"" requires the unit tests to be fully passing in order to download all dependency jar files. So, for the first time IDE setting, when test fails, it causes compilation errors in IDE due to the lack of jar files. https://jira.springsource.org/browse/SPR-9073  Thanks,","closed","","ttddyy","2012-01-31T04:27:41Z","2012-02-01T23:58:53Z"
"","28","set systemId on InputSource before parsing configuration","When the systemId is set then the baseURI property of the created w3c nodes is available. This would help to resolve relative resources (for example in custom NamespaceHandlers).","closed","","swachter","2012-02-07T13:22:22Z","2014-08-04T13:05:56Z"
"","37","Small memory fixes","We analysed the memory usage of our application and found a lot of empty LinkedHashSet/Collections.synchronizedSet in the following three cases: - org.springframework.beans.factory.annotation.InjectionMetadata.injectedElements - org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata.initMethods - org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.LifecycleMetadata.destroyMethods  This fix should address this issue by: 1. Creating a LinkedHashSet of the ""right"" size, eg. the default capacity is 16 but we know the exact capacity that we need in advance 2. If the argument is empty then we use Collections.emptySet() which is a constant so no additional memory is used. Since it's immutable we also save ourselves the Collections.synchronizedSet wrapper.  Should I additionally open an issue?","closed","","marschall","2012-02-13T18:29:25Z","2014-06-27T17:47:38Z"
"","30","Validation","This pull request is in response to this Jira issue: https://jira.springsource.org/browse/SPR-4774. It enables the kind of Validator class shown in the example in the last comment on the issue.   This code works great in a modified version of the PetClinic app I am using to test, by setting this AnnotationMethodValidator as the one system-level validator (i.e. by returning an object of this type from the getValidator() method of a config class that extends WebMvcConfigurerAdapter).  If an approach to validation like this one makes sense, then the next question is how to register this validation mechanism with the framework. In my opinion, registering both a LocalValidatorFactoryBean and an AnnotationMethodValidator by default would cover most validation needs in an application, reduce the need to configure custom validators in ConfigurableWebBindingInitializers or @InitBinder methods, and bring validation more in line with other parts of the framework that leverage component scanning and flexible method signatures to make it easier for developers to extend the framework.   Unfortunately, the concept of a single validator class goes pretty deep into the framework (through the Java Config extension points to the DataBinder). It seems like it would be much more flexible for an app to be able to register multiple validators, similar to just about every other extension point (formatters, message converters, argument resolvers, handler exception resolvers, view resolvers, resource handlers, etc...). I have started to make all the changes to support registering a set of validators and defaulting, but I would like to get guidance and advice that this is the right approach before continuing.","closed","","scottfrederick","2012-02-08T04:26:05Z","2014-06-13T22:42:33Z"
"","3","Fixes https://jira.springsource.org/browse/SPR-7721","This pull fixes the SPR-7721. Using actualValue instead of value form formMultiSelect and formCheckboxes","closed","","filosganga","2011-11-23T18:15:22Z","2014-07-10T16:55:20Z"
"","4","SPR-7752 - EntityManager proxy now exposes provider specific interface.","The AbstractEntityMangerFactory now exposes the provider specific interface determined by the persistence provider class name even if the persistence provider is not configured specifically. We support Hibernate, EclipseLink and OpenJPA here. DataNucleus is not exposing a special interface, so there's no need to handle it.","closed","","odrotbohm","2011-11-29T14:59:13Z","2012-02-02T11:42:55Z"
"","11","Scripting","Support for evaluating scripting. Meant for 3.1 (the namespace have not been touched, only some classes added).","closed","","costin","2012-01-05T22:11:04Z","2014-06-18T05:12:07Z"
"","27","Improved named parameter parsing of single quotes","SPR-8280 Improving named parameter parsing where statement has escaped single quotes or comments are immediately before or after quoted literals","closed","","trisberg","2012-02-06T05:39:57Z","2012-02-06T08:52:16Z"
"","42","Fix circular placeholder prevention","Set of resolved placeholder references is used for circular placeholder prevention. For complex property definitions this mechanism would put property values with unresolved inner placeholder references in the set, but would try to remove property values with placeholders resolved, leaving set in invalid state and mechanism broken.  This fix makes sure value that is put in set is same one that is removed from it, and by this avoid false positives in reporting circular placeholder.  Issue: SPR-5369  I have signed and agree to the terms in the SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-02-18T17:27:26Z","2014-06-17T07:23:26Z"
"","24","spr9038: can override the set of methods computed by method resolver","second attempt - is this any better?","closed","","aclement","2012-02-01T18:36:23Z","2012-02-01T18:36:23Z"
"","15","SPR-8986. Added in the ability to scan for JAXB annotated classes in pac...","Resubmission of the pull request - on request! :-)  -=david=-","closed","","dharrigan","2012-01-07T12:16:36Z","2014-07-02T05:25:53Z"
"","29","SPR-9097 patch","Pull request for patch that resolves https://jira.springsource.org/browse/SPR-9097","closed","","sslavic","2012-02-08T00:02:30Z","2014-06-23T15:28:42Z"
"","18","SPR-8097 Polymorphism for BeanWrapperImpl","Proposed implementation of a fix for SPR-8097   First pull request, mostly hoping this might start a discussion regarding this issue and the feasibility of such a solution.","closed","","twicksell","2012-01-12T16:21:39Z","2012-05-16T14:20:45Z"
"","41","Predict specific object type in EhCacheFactoryBean","Prior to this change, before bean gets created by EhCacheFactoryBean, its getObjectType would return only Ehcache interface. This caused unwanted wiring issues like one described in related JIRA issue. This fix makes use of EhCacheFactoryBean configuration to determine object type even before it's created, so that container is provided with as specific as possible object type when resolving dependencies. Nevertheless, users are advised to code to Ehcache interface.  Issue: SPR-7843  I have signed and agree to the terms of SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-02-16T13:43:14Z","2014-06-25T11:02:45Z"
"","6","quick changelog typo fix","just found this problem and fixed it.","closed","","cbeams","2011-12-16T00:14:05Z","2014-06-18T05:11:27Z"
"","20","[SPR-8347] use .equals() in place of == when comparing objects","isues on mac OS x and RHEL 6 method that was compared was not the same with == but was equal with .equals propertyDescriptors were removed.","closed","","lepirlouit","2012-01-23T10:17:40Z","2014-06-25T20:58:22Z"
"","5","SPR-7679 - Qualified TransactionManager now also found if declared in parent context","In case you have defined a transaction manager inside a parent application context and try to reference this from a bean inside a child context explicitly (through @Transactional(""txMgr"") e.g.) it will be found now.","closed","","odrotbohm","2011-11-29T15:01:20Z","2012-02-02T12:56:59Z"
"","7","SPR-8308: OpPlus should convert operand values to String using registered converters","implementation + unittest","closed","","bedla","2011-12-18T12:47:02Z","2014-08-07T03:12:10Z"
"","12","Work in Progress for SPR-8986","Hi,  I wonder if I can get a bit of help on this one. I've merged into Jaxb2Marshaller the code to lookup JAXB2 annotated classes using package scanning. I'm just having difficultly understanding how to get appropriate tests written and to configure the spring-oxm-3.1.xsd properly.  The classes compile, but the tests fail for JAXB so far.  Thank you.  -=david=-","closed","","dharrigan","2012-01-05T22:34:30Z","2014-06-12T08:22:43Z"
"","13","SPR-8986. Added in the ability to scan for JAXB annotated classes in pac...","Hi,  Cleaned up the code and made one commit.  -=david=-","closed","","dharrigan","2012-01-06T16:49:45Z","2012-01-07T12:16:00Z"
"","34","fixed some warnings in Eclipse mostly be removing @SuppressWarnings that...","Hi  I'm new to git and I thought it's best to start with something small. This fixes several warnings in Eclipse. It's mostly places that have a @SuppressWarnings annotation but no longer need it, probably because the code was generified in Spring 3.  Cheers Philippe","closed","","marschall","2012-02-11T19:42:08Z","2014-06-18T05:11:55Z"
"","32","Fix for SPR 9096","Hey @rstoyanchev, I believe this fixes [SPR-9096](https://jira.springsource.org/browse/SPR-9096). Please merge if it works for you.","closed","","poutsma","2012-02-09T10:34:42Z","2014-06-18T05:11:09Z"
"","31","SPR-7655 TestExecutionListener to run sql scripts before each test method","Hello,  Wrote a TestExecutionListener that runs specified sql scripts before each test method.  https://jira.springsource.org/browse/SPR-7655  Thanks,","closed","","ttddyy","2012-02-09T03:17:22Z","2014-06-20T12:07:16Z"
"","43","Add support for creating test contexts with parent context","Hello,  I created ""@ParentContextConfiguration"" to support parent test contexts in spring-test framework.  Sample:  ``` java   @ParentContextConfiguration(""parent-context.xml"")   @ContextConfiguration(""child-context.xml"")   @RunWith(SpringJUnit4ClassRunner.class)   public class SomeTests {        @Autowired       protected ApplicationContext applicationContext;        // applicationContext.getParent() returns the parent app context   } ```  Parent context will be shared across the test classes if they are annotated to use parent context and have same configurations(xml locations, configuration classes, etc). It uses existing context caching  mechanism. I also added ""parent"" attribute to @DirtiesContext annotation in order to close the parent context if required. When ""parent=true"" is set on @DirtiesContext, DirtiesContextTestExecutionListener will close the parent application context as well as child contexts using the specified parent context.  Changes: - created @ParentContextConfiguration to configure the parent application context. - reused the @ContextConfigurationAttributes to represent both  @ContextConfiguration and @ParentContextConfiguration - changed ContextLoader SPI to pass a parent ApplicationContext - refactored ContextLoaderUtils to use ""getConfigurationAttributes()"" to resolve the context loader class and configuration attribute in a similar manner. - created ContextCacheKey class which contains two MergedContextConfiguration (one for parent, one for child) as a key of ContextCache. - added ""parent"" attribute on @DirtiesContext - @DirtiesContext(parent=true) will remove parent app context and all child app contexts using that parent context from the cache - unit tests  Issue: [SPR-5613](https://jira.springsource.org/browse/SPR-5613)    Submitted the CLA   Thanks,","closed","","ttddyy","2012-02-29T01:39:05Z","2014-06-13T05:30:59Z"
"","40","Initial implementation of JacksonObjectMapperBeanFactory (SPR-9125).","For more details see https://jira.springsource.org/browse/SPR-9125 and https://jira.springsource.org/browse/SPR-9130  Sample usage (from JavaDocs):  ``` xml                                                                            ```  For EasyMock:  ``` xml       ```  Feedback is welcomed.","closed","","dmak","2012-02-15T15:39:09Z","2014-06-18T05:11:02Z"
"","46","Fixed typos in documentation","Fixed simple/trivial typos in documentation.  This is for issues: SPR-8856 and SPR-9188  I've submitted Individual Contributor Agreement.","closed","","ghost","2012-03-01T03:48:28Z","2014-07-16T13:48:33Z"
"","10","Re: SPR-8941: Lifecycle processing ignores phases for circularly dependent SmartLifecycle beans","First stab at a fix this issue. For discussion see http://jira.springsource.org/browse/SPR-8941.","closed","","eyealike","2011-12-24T01:57:03Z","2021-11-12T13:53:47Z"
"","2","Improve annotation processing thread-safety","Commit http://bit.ly/nXumTs ensured that component methods and fields marked with 'common annotations' such as @Resource, @PostConstruct and @PreDestroy are invoked/assigned once and only once, even if multiple instances of the CommonAnnotationBeanPostProcessor are processing the same bean factory.  The implementation works against the InjectionMetadata API, adding and removing these members from sets that track whether they are already 'externally managed', i.e. that another CABPP has already handled them, thus avoiding redundant processing.  Prior to this change, the #remove operations against these sets were not synchronized. In a single-threaded context this is fine thanks to logic in AbstractAutowireCapableBeanFactory#doCreateBean that checks to see whether a given bean definition has already been post processed. However, as reported by SPR-8598, certain cases involving multiple threads and annotated prototype-scoped beans can cause concurrent modification exceptions during the #remove operation (ostensibly because another thread is attempting to do the same removal at the same time, though this has yet to be reproduced in isolation).  Now the sets originally introduced by the commit above are decorated with Collections#synchronizedSet and any iterations over those sets are synchronized properly. This change should have low performance impact as such processing happens at container startup time (save for non-singleton lookups at runtime), and there should be little contention in any case.  Issue: SPR-8598","closed","","cbeams","2011-09-06T04:51:33Z","2011-09-12T23:07:28Z"
"","36","Fix javadoc warnings","Before this fix there were numerous javadoc warnings being reported while building Spring framework API.  This fix resolves most of the javadoc warnings.  Issue: SPR-9113  I have signed and agree to the terms of SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-02-12T20:01:28Z","2014-06-28T11:06:54Z"
"","38","Escape names of databound form tags","Before this change, names of databound form tags were not being escaped. This caused issues since bound path and thus tag names could contain special characters that have to be escaped to be valid html. Names are now being always escaped.  For escaping strings a method from utility class HtmlUtils is used. It had a bug too - when escaping already escaped string it would wrongly escape start character (&) of entities (e.g. < would get escaped to &lt;). Fix for this bug is also included in this commit.  Issue: SPR-5386  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-02-14T22:10:22Z","2014-06-27T10:00:29Z"
"","35","Fix encoding issues in javadoc","Before this change javadoc in two classes had non-UTF-8 encoded characters. This caused building Spring API to fail in Java 1.7.  Commit fixes this by replacing wrongly encoded characters with their UTF-8 equivalents.  Issue: SPR-9097  I have signed and agree to the terms in the SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-02-12T19:49:41Z","2014-06-25T17:12:16Z"
"","45","Remove note on singleton scoped proxy raising BCE","Before this change bean scopes chapter in Spring reference documentation had a note which mentioned that creating a scoped proxy for singleton bean will throw BeanCreationException.  Since this is no longer the case, this change removes mentioned note.  Issue: SPR-7940  I have signed and agree to the terms of SpringSource Individual Contributor License Agreement.","closed","","sslavic","2012-02-29T22:42:20Z","2014-07-12T23:39:09Z"
"","21","spr9038: can override the set of methods computed by method resolver","As per https://jira.springsource.org/browse/SPR-9038","closed","","aclement","2012-01-26T01:34:22Z","2014-06-23T07:32:38Z"
"","17","Polish ""Support flash attrs..."" and related classes","@rstoyanchev, could you take a look at this and merge?  The commit comment explains.  If you review this locally, `git diff --word-diff` (or the same flag to `git show`) helps demonstrate that there are no substantive changes, only spacing and style.  Otherwise, this is a case where using the 'merge' button in-web is probably reasonable.  I ran tests against this locally and all is green.","closed","","cbeams","2012-01-10T15:37:45Z","2014-07-08T22:31:44Z"
"","19","SPR-8974 Fix regression in UriUtils.java","@poutsma, please review the change in UriUtils. I reverted as little as possible from the prior behavior. It turned out slightly more than initially expected but still a reasonable compromise in my opinion.","closed","","rstoyanchev","2012-01-20T04:57:12Z","2014-06-18T05:12:06Z"
"","16","Check original beanClass in #isFactoryBean calls","@jhoeller, please double check this.  All tests are green against latest 3.1.x, but as we know all too well, FactoryBean changes can have quite subtle repercussions.  See the commit comment for details.  @olivergierke, perhaps in the meantime you could grab this patch, build locally and try things out in-context against Spring Data JPA?","closed","","cbeams","2012-01-10T14:30:04Z","2014-08-09T20:48:05Z"
"","14","Introduce (and Review) ScriptEvaluator abstraction","@costin, this PR supersedes your original one at #11 (I don't think it's possible for me to add commits to someone else's PR).  I'll close it right after sending this one.  Take a look at the ""Review"" commit 319d8566 to see what I've already updated.  A few open questions: 1. Is the 'arguments' parameter to Jsr233ScriptEvaluator#determineScriptEngine actually necessary?  It's not currently used in the implementation, and it's difficult to imagine a use case where a subclass would use arguments to determine which ScriptEngine to use.  Perhaps this is an oversight? 2. Can you explain the intention / necessity of the 'runAtStartup' setting in Jsr223ScriptEvaluatorFactoryBean?  getObject will be invoked when singletons are initialized anyway -- is it actually important have such an explicit setting to do this in the @PostConstruct method as well? 3. Can you explain a use case where EvaluationPolicy (formerly EvaluationType) would be anything other than ALWAYS?  A unit test here would be good.  I'm simply not familiar with the ""script modification"" semantics that are mentioned throughout.  It makes sense when imagining someone using a ScriptEvaluator directly, but against the FactoryBean, it doesn't (yet) make sense to me, unless perhaps the FactoryBean is non-singleton scoped. 4. Curiosity mostly, but what was the impetus for this change?  Why now? 5. Could you also add and assign to yourself an issue to add reference documentation for this feature?  @jhoeller, could you take a look at the cumulative set of changes for a sanity check, e.g. that this is appropriate for 3.1.1, etc?  (You can click on the ""Diff"" tab above to see the net result of both my and Costin's commits).  Issue: [SPR-8999](https://jira.springsource.org/browse/SPR-8999)","closed","","cbeams","2012-01-07T01:48:15Z","2012-05-28T10:13:22Z"
"","39","[fix:SPR-8983]Fixes NPE when resolving ServletResponse arguments of init...","...-binder method","closed","","sslavic","2012-02-15T12:36:47Z","2012-02-15T14:26:45Z"
"","9","SPR-8938","- update documentation - add a# as an alias to p# for specifying method arguments","closed","","costin","2011-12-22T11:46:00Z","2014-07-13T13:53:41Z"
"","13600","where is the method ""updateDatabaseSchema()"" in the org.springframework.orm.hibernate4.LocalSessionFactoryBean class? [SPR-8960]","**[金鑫](https://jira.spring.io/secure/ViewProfile.jspa?name=venusdrogon)** opened **[SPR-8960](https://jira.spring.io/browse/SPR-8960?redirect=false)** and commented  in the spring 3.1  where is the method ""updateDatabaseSchema()"" in the org.springframework.orm.hibernate4.LocalSessionFactoryBean class?  in the org.springframework.orm.hibernate3.LocalSessionFactoryBean class,there has the updateDatabaseSchema() method  but today,wo use the org.springframework.orm.hibernate4.LocalSessionFactoryBean class  where is the updateDatabaseSchema() method?  We have been using this method inside the test class   ---  **Affects:** 3.1 GA  **Attachments:** - [2011-12-26_190215.png](https://jira.spring.io/secure/attachment/19247/2011-12-26_190215.png) (_21.03 kB_)","closed","type: enhancement,","spring-projects-issues","2011-12-26T03:02:32Z","2018-12-12T17:03:38Z"
"","13809","EhCacheManagerFactoryBean should use net.sf.ehcache.config.ConfigurationFactory set the name of ehcache manager [SPR-9171]","**[王正航](https://jira.spring.io/secure/ViewProfile.jspa?name=wangzhenghang)** opened **[SPR-9171](https://jira.spring.io/browse/SPR-9171?redirect=false)** and commented  In ehcache 2.5.1, net.sf.ehcache.CacheManager has a method assertNoCacheManagerExistsWithSameName called by constructor, this method keeping a static CACHE_MANAGERS_MAP to prevent two CacheManagers having the same name being constructed. However EhCacheManagerFactoryBean's afterPropertiesSet calls net.sf.ehcache.CacheManager.setName after CacheManager's constructor.  When your project use two CacheManager: one is shared and another is not, the project maybe startup failed, because of the shared CacheManager maybe initialized first, assertNoCacheManagerExistsWithSameName put the shared CacheManager instance into CACHE_MANAGERS_MAP using DEFAULT_NAME (__DEFAULT__), then the unshared CacheManager will be initialized failed.  In fact, using net.sf.ehcache.config.ConfigurationFactory.parseConfiguration to create a net.sf.ehcache.config.Configuration, then set name to this Configuration, and then using net.sf.ehcache.CacheManager.create(net.sf.ehcache.config.Configuration) or net.sf.ehcache.CacheManager(net.sf.ehcache.config.Configuration) will fix this bug.  Here attach my error log and fixed EhCacheManagerFactoryBean.   ---  **Affects:** 3.1.1  **Attachments:** - [EhCacheManagerFactoryBean.java](https://jira.spring.io/secure/attachment/19452/EhCacheManagerFactoryBean.java) (_4.79 kB_) - [other.log](https://jira.spring.io/secure/attachment/19451/other.log) (_12.84 kB_)","closed","in: core,","spring-projects-issues","2012-02-27T00:55:13Z","2013-01-18T08:47:02Z"
"","13555","Spring Ref 3.1 is still referencing OpenSymphony with outdated link [SPR-8915]","**[Zemian Deng](https://jira.spring.io/secure/ViewProfile.jspa?name=saltnlight5)** opened **[SPR-8915](https://jira.spring.io/browse/SPR-8915?redirect=false)** and commented  The latest spring ref (http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/scheduling.html#scheduling-quartz) is still referencing old Quartz owner and link.  26.6. Using the OpenSymphony Quartz Scheduler  It should really be ""Quartz Scheduler"", and the link is http://quartz-scheduler.org   --- No further details from [SPR-8915](https://jira.spring.io/browse/SPR-8915?redirect=false)","closed","type: bug,","spring-projects-issues","2011-12-12T20:13:01Z","2012-06-19T03:39:44Z"
"","12949","The stacktrace is incomplete when SchedulerFactoryBean#jobSchedulingDataLocation failed to load [SPR-8301]","**[Zemian Deng](https://jira.spring.io/secure/ViewProfile.jspa?name=saltnlight5)** opened **[SPR-8301](https://jira.spring.io/browse/SPR-8301?redirect=false)** and commented  When setting SchedulerFactoryBean#jobSchedulingDataLocation and if it failed, the nested stacktrace is incomplete and now displaying what actually happened.  It looks like stacktrace chain is not chained in SchedulerAccessor.java line 292.  I would also request to improve the javadoc for SchedulerAccessor#setJobSchedulingDataLocation to specifically state that this String location must be a file local on system, and not the Spring's ""resource"" location!   ---  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-05-06T07:48:48Z","2019-01-12T03:49:51Z"
"","13653","Improve the performance of BeanInfo lookups in CachedIntrospectionResults [SPR-9014]","**[Yuri Khomich](https://jira.spring.io/secure/ViewProfile.jspa?name=wilmot)** opened **[SPR-9014](https://jira.spring.io/browse/SPR-9014?redirect=false)** and commented  Current implementation of `org.springframework.beans.CachedIntrospectionResults` relies on `java.beans.Introspector` for bean introspection. Although `java.beans.Introspector` provides a way to limit the amount of information being introspected, `CachedIntrospectionResults` always uses `Introspector.getBeanInfo(beanClass)` which effectively means `Introspector.getBeanInfo(beanClass, Introspector.USE_ALL_BEANINFO)`:  ``` private CachedIntrospectionResults(Class beanClass) throws BeansException { 	try { 		if (logger.isTraceEnabled()) { 			logger.trace(""Getting BeanInfo for class ["" + beanClass.getName() + ""]""); 		} 		this.beanInfo = Introspector.getBeanInfo(beanClass); ```  The use of `USE_ALL_BEANINFO` flag makes `java.beans.Introspector` use class loading heavily to discover possible bean info. Extensive class loading is a real performance issue in some specific environments where classes are loaded not from local file system but from other sources that can be much slower to access. As a result, the initialization of application context is slowed down by the order of magnitude.  It would be very helpful if `CachedIntrospectionResults` provided control over `java.beans.Introspector` by calling `Introspector.getBeanInfo()` with desired flags. Otherwise there is no straightforward way to restrict class loading made by `java.beans.Introspector` in the case when full introspection is not needed and causes severe performance drawback.  ---  **Affects:** 3.0.7, 3.1 GA  **Issue Links:** - #16438 CachedIntrospectionResults caching jar entries and creating big pressure on GC - #16343 SpringProperties: the ClassLoader might be null, if class is loaded by the bootstrap class loader - #15921 StandardEnvironment's system environment access produces warning with stacktrace on WebSphere - #16486 Revisit class cache in CachedIntrospectionResults - #15981 Revisit need for Introspector.flushFromCaches call in CachedIntrospectionResults  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)  2 votes, 14 watchers","closed","type: enhancement,","spring-projects-issues","2012-01-11T03:26:55Z","2019-01-11T22:21:59Z"
"","12951","@Transactional(readOnly = true) doesn't work with com.mysql.jdbc.ReplicationDriver [SPR-8303]","**[Yogeshwar Srikrishnan](https://jira.spring.io/secure/ViewProfile.jspa?name=yoga80)** opened **[SPR-8303](https://jira.spring.io/browse/SPR-8303?redirect=false)** and commented  Iam using the annotation `@Transactional`(readOnly = true). Iam trying to use the com.mysql.jdbc.ReplicationDriver. My master and slave replication servers are configured fine.However the annotation doesn't ensure that the java.sql.Connection setReadOnly gets a value of True. Because of this all the read only queries as well go to master.   ---  **Affects:** 3.0 GA  1 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2011-05-06T14:21:32Z","2019-01-12T16:25:30Z"
"","13738","ClassPathBeanDefinitionScanner vs ClassPathBeanDefinitionScanner: difference in behavior when dealing with @ComponentScan excludeFilters [SPR-9100]","**[Yannick Lazzari](https://jira.spring.io/secure/ViewProfile.jspa?name=ylazzari)** opened **[SPR-9100](https://jira.spring.io/browse/SPR-9100?redirect=false)** and commented  There seems to be a difference in the way configuration classes, i.e. classes annotated with `@Configuration`, are handled by the ClassPathBeanDefinitionScanner vs the AnnotatedBeanDefinitionReader.  The javadoc says that the AnnotatedBeanDefinitionReader is, ""...an alternative to ClassPathBeanDefinitionScanner, applying the same resolution of annotations but for explicitly registered classes only."".  If you read the Spring forum thread attached to this issue report, you will find an example that shows that the way `@ComponentScan` excludeFilters are processed is not the same; actually, they seemed to be totally ignored when the ClassPathBeanDefinitionScanner scans a class annotated in the following manner:  `@Configuration` `@ComponentScan`(basePackages={""com.foo"", ""com.bar""}, excludeFilters={`@ComponentScan`.Filter(type = FilterType.ASSIGNABLE_TYPE, value = com.foo.ComponentA.class)}) public class TestConfig { }  ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?122907-Spring-3-1-AnnotationConfigWebApplicationContext-scan-vs-register-method&p=400832  **Issue Links:** - #13670 `@ComponentScan` with includeFilters on `@Import-ed` context does not work (_**""duplicates""**_) - #12634 `@ComponentScan` does not work when referenced from XML config - #13361 `@ComponentScan`(includeFilters=`@Filter`(...)) fails when `@Import`'ed","closed","in: core,","spring-projects-issues","2012-02-08T06:03:30Z","2019-01-13T07:06:25Z"
"","13519","Add getKeys function to org.springframework.cache.Cache [SPR-8878]","**[y b](https://jira.spring.io/secure/ViewProfile.jspa?name=yosib)** opened **[SPR-8878](https://jira.spring.io/browse/SPR-8878?redirect=false)** and commented  It would be nice to get access to all the keys of a specific cache from org.springframework.cache.Cache, in the same way possible for the Ehcache net.sf.ehcache.Cache version.   ---  **Affects:** 3.1 RC2","closed","type: enhancement,","spring-projects-issues","2011-11-26T09:44:24Z","2012-06-19T02:28:13Z"
"","13765","Methods that could use varargs [SPR-9126]","**[Xavier Dury](https://jira.spring.io/secure/ViewProfile.jspa?name=kalgon)** opened **[SPR-9126](https://jira.spring.io/browse/SPR-9126?redirect=false)** and commented  While migrating applicationContexts definitions from XML to `@Configuration`, I've encountered more and more methods that could take advantage of varargs. As I didn't want to create an issue each time, I generated a list of candidate methods that could be transformed (every method whose last parameter is an array).  Of course, public methods susceptible to be used in `@Configuration` classes would benefit more from varargs than internal/private methods, so that list must be sorted accordingly.   ---  **Attachments:** - [sorted-varargs-candidate-methods.txt](https://jira.spring.io/secure/attachment/19413/sorted-varargs-candidate-methods.txt) (_7.75 kB_) - [varargs-candidate-methods.txt](https://jira.spring.io/secure/attachment/19412/varargs-candidate-methods.txt) (_50.87 kB_)","closed","","spring-projects-issues","2012-02-16T00:28:52Z","2019-01-11T22:13:50Z"
"","13744","(Reloadable)ResourceBundleMessageSource.setBasenames should use varargs [SPR-9106]","**[Xavier Dury](https://jira.spring.io/secure/ViewProfile.jspa?name=kalgon)** opened **[SPR-9106](https://jira.spring.io/browse/SPR-9106?redirect=false)** and commented  Actually, (Reloadable)ResourceBundleMessageSource.setBasenames takes a (String[]) as parameter instead of (String...)  When configuring messageSource via `@Configuration`, it would be easier to write:  `@Bean` public MessageSource messageSource() { ResourceBundleMessageSource resourceBundleMessageSource = new ResourceBundleMessageSource(); resourceBundleMessageSource.setBasenames(""com.mycompany.web.messages"", ""com.mycompany.web.errors""); return resourceBundleMessageSource; }  instead of:  ... resourceBundleMessageSource.setBasenames(new String[] {""com.mycompany.web.messages"", ""com.mycompany.web.errors""}); ...   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ee36c80ca961a5b2af233cd26a5483d57939c0af, https://github.com/spring-projects/spring-framework/commit/947032372479fae3f9da5d64b9e3512896db92a4","closed","","spring-projects-issues","2012-02-10T08:20:28Z","2019-01-11T22:11:53Z"
"","12993","Calling methods of @Configuration class should behave like ""inner beans"" in xml configuration [SPR-8345]","**[Xarx](https://jira.spring.io/secure/ViewProfile.jspa?name=xarx)** opened **[SPR-8345](https://jira.spring.io/browse/SPR-8345?redirect=false)** and commented  Suppose the following sample code:  `@Configuration` class MyConfig { `@Bean` `@Qualifier`(""main"") SomeClass MyOuterBean() { return MyInnerBean(null); } `@Bean` SomeClass MyInnerBean(`@Qualifier`(""not used"") SomeClass obj) { return obj; } `@Bean` `@Qualifier`(""not used"") `@Lazy` SomeClass MyDependencyBean() { return new SomeClass(); } }  When having e.g.  `@Autowire` `@Qualifier`(""main"") SomeClass someInstance;  actually the instance of SomeClass created in MyDependencyBean() is set into someInstance, not null like one could expect. The null argument used in MyOuterBean() when calling MyInnerBean() is simply ignored.  In my opinion, the code above should behave similarly to inner beans (as described in http://static.springsource.org/spring/docs/3.0.x/reference/beans.html#beans-inner-beans). That is, null should be set to someInstance in the example above. Classes marked with `@Configuration` should be treated like ""definitions"" of inter-bean dependencies, as like as the Spring xml configuration files, so even the possibilities should be similar. In case of singleton beans (like in the example above), Spring could check that the configuration class methods (like MyInnerBean() above) is always called with the same arguments.  The described situation is not specified in the documentation (at least, I haven't found it), so the behavour described above should not break anything.   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2011-05-17T23:19:30Z","2019-01-11T12:58:09Z"
"","12992","Lazy-init beans are unnecessarily created during the candidate determination process [SPR-8344]","**[Xarx](https://jira.spring.io/secure/ViewProfile.jspa?name=xarx)** opened **[SPR-8344](https://jira.spring.io/browse/SPR-8344?redirect=false)** and commented  What happens: When org.springframework.beans.factory.support.DefaultListBeanFactory.findAutowireCandidates() determines candidate beans, it instantiates all of them at the end. Even when the candidates are marked as lazy-inited. In my opinion, this is unnecessary. Lazy-inited candidate should be instantiated only when it is actually chosen to be the right candidate - which is done later in DefaultListBeanFactory.doResolveDependency().  What should happen: In my opinion, beans marked as lazy-init should be instantiated only when actually used by the application code. Spring internals should avoid instantiating them unless really necessary.  This bug is a generalization of Bug #12991. I filed this bug separately because its resolution might be more complicated (though it needn't) than #12991, hence this bug has less chance to be resolved quickly.  ---  **Affects:** 3.0.5  **Issue Links:** - #12240 Migration from 2.5.6 to 3.0.2 - Lazy Init functions differently. (_**""is duplicated by""**_) - #12991 Even when primary candidate exists, other lazy bean candidates are instantiated (_**""is duplicated by""**_)  4 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-05-17T22:25:45Z","2019-01-12T03:49:49Z"
"","12991","Even when primary candidate exists, other lazy bean candidates are instantiated [SPR-8343]","**[Xarx](https://jira.spring.io/secure/ViewProfile.jspa?name=xarx)** opened **[SPR-8343](https://jira.spring.io/browse/SPR-8343?redirect=false)** and commented  What happens: I have a field denoted by `@Autowire`. There is one `@Primary` bean candidate for the field, the other candidates are marked as `@Lazy`. However, even in this case, when a primary candidate is available, all lazy candidates are instantiated during the candidate lookup process.  What should happen: When a primary candidate exists, it should be chosen without instantiation of other lazy-init candidates.  I tried to use the `@Lazy` annotation to mark beans that are not to be instantiated unless realy used by the application. But this doesn't work currently.  More details: Spring's (org.springframework.beans.factory.support) DefaultListBeanFactory.doResolveDependency() internally calls findAutowireCandidates(). findAutowireCandidates() instantiates all candidate beans, but the determination whether there exists a primary candidate is done only later in doResolveDependency() - which is too late. This determination should be done earlier in findAutowireCandidates(), before the other candidates are instantiated.  ---  **Affects:** 3.0.5  **Issue Links:** - #12992 Lazy-init beans are unnecessarily created during the candidate determination process (_**""duplicates""**_)  4 votes, 4 watchers","closed","in: core,","spring-projects-issues","2011-05-17T21:48:56Z","2019-01-12T16:48:54Z"
"","13707","Implementation of HttpStatus as an enumeration precludes other status codes [SPR-9068]","**[Willis Blackburn](https://jira.spring.io/secure/ViewProfile.jspa?name=willisblackburn)** opened **[SPR-9068](https://jira.spring.io/browse/SPR-9068?redirect=false)** and commented  I'm trying to implement RFC 2324 but cannot return HTTP response code 418 because it's not defined in the HttpStatus enumeration.  More generally, the enumeration of specific status values precludes the use of any others.  ---  **Affects:** 3.1 GA  **Issue Links:** - #11418 RestTemplate throws IllegalArgumentException when HTTP status is not in the HttpStatus enum  (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2012-01-29T09:46:16Z","2019-01-12T16:48:17Z"
"","13791","Add extension element to Spring Web MVC @RequestMapping annotation [SPR-9153]","**[Willie Wheeler](https://jira.spring.io/secure/ViewProfile.jspa?name=ww4)** opened **[SPR-9153](https://jira.spring.io/browse/SPR-9153?redirect=false)** and commented  In web apps, it's useful to create a base CRUD controller and then extend that with entity-specific subclasses. This makes it easy to write general purpose HTML, XML and JSON endpoints. I typically define for each subclass a class-level `@RequestMapping` specifying the base path for that controller (e.g., /applications, /packages, /farms, etc). Then the method-level `@RequestMappings` have value = """" for list views, value = ""/{id}"" for details views, etc.  For the web service list views, I would like to be able to map paths like /applications.xml, /applications.json, etc. But it doesn't seem that I can do this without giving up the generality in the approach above. I'd have to drop the class-level `@RequestMapping`, write a bunch of wrapper methods on each subclass, and then annotate them with explicit `@RequestMappings` to get the desired paths. Blech. Instead, I just define a generic `@RequestMapping` in the base controller like this:  `@RequestMapping`(value = """", method = RequestMethod.GET, params = ""format=json"") `@RequestMapping`(value = """", method = RequestMethod.GET, params = ""format=xml"")  That works, and it's generic, but I'd like to be able to use extensions instead, just because I think it's a little cleaner.  My proposal is that you add an extension element to the `@RequestMapping`. I envision it working something like this:  `@RequestMapping`(value = """", method = RequestMethod.GET, extension = ""json"") `@RequestMapping`(value = """", method = RequestMethod.GET, extension = ""xml"")  Thanks.  ---  **Affects:** 3.1.1  **Issue Links:** - #13057 Content negotiation improvements","closed","type: enhancement,","spring-projects-issues","2012-02-22T23:02:55Z","2019-01-11T22:12:12Z"
"","13339","Media type such as ""*/xml"" should not be accepted [SPR-8697]","**[william zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=william_zhou)** opened **[SPR-8697](https://jira.spring.io/browse/SPR-8697?redirect=false)** and commented  According to [RFC-2616](http://tools.ietf.org/html/rfc2616#section-14.1), the syntax of Accept header is defined:  ``` Accept         = ""Accept"" "":""                         #( media-range [ accept-params ] )  media-range    = ( ""*/*""                         | ( type ""/"" ""*"" )                         | ( type ""/"" subtype )                         ) *( "";"" parameter )   ```  A media type like ""*/xml"" is invalid.  However, below call did not fail (should fail). MediaType acceptType = org.springframework.http.MediaType.parseMediaTypes(""*/xml""); And following call returned TRUE (should be false). Boolean accpeted = acceptMediaType.includes(MediaType.APPLICATION_JSON);    ---  **Affects:** 3.0.6, 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6316a45927394333d83157a90c2c563c4f89fa8c, https://github.com/spring-projects/spring-framework/commit/01cc76f8e3b3016677cad5d7be8a45ee1f6bab2c","closed","type: bug,","spring-projects-issues","2011-09-14T23:51:36Z","2012-06-19T03:39:16Z"
"","13329","Request to switch off heading & trailing whitespaces trim of path segments in AntPathMatcher [SPR-8687]","**[william zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=william_zhou)** opened **[SPR-8687](https://jira.spring.io/browse/SPR-8687?redirect=false)** and commented  We have designed a RESTful resource that allows to get group membership from our system. The group name can start with whitespace.  ```java @RequestMapping(value = ""/group/{groupName}/members"", method = RequestMethod.GET) @ResponseBody public ResponseEntity getGroupMembers(@PathVariable(""groupName"") String groupName) ```  For example, both following URLs are valid and point to different resources.  - `/group/sales/members` - `/group/%20%20sales/members`  However, when the path variable `groupName` is read in controller, the leading and trailing whitespace has been trimmed.  We found that `org.springframework.util.AntPathMather` tokenized the path to string array with trim enabled. There's no choice for the Spring user to disable it.  So is it possible have an option to disable path variable trimming, as in some system it is sensitive?   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f185c3a3c18f11770494060182780af61a8c9e55","closed","type: enhancement,","spring-projects-issues","2011-09-12T20:10:27Z","2016-03-15T17:28:35Z"
"","13228","@RequestMapping should throw valid exception when the Accept header unmatches [SPR-8584]","**[william zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=william_zhou)** opened **[SPR-8584](https://jira.spring.io/browse/SPR-8584?redirect=false)** and commented  I have defined a user controller where the `@RequestMapping` specifies Accept headers.`@RequestMapping`( value = ""/users"", method = RequestMethod.POST, headers = ""Accept=application/json,application/xml"") `@ResponseBody` public User createUser(...)  If the client sends a request with invalid Accept header, server returns NoSuchRequestHandlingMethodException.  org.springframework.web.servlet.mvc.multiaction.NoSuchRequestHandlingMethodException: No matching handler method found for servlet request: path '/users', method 'POST', parameters map['p' -> array\['admin']]  Shouldn't it return HttpMediaTypeNotAcceptableException?  If I remove the Accept headers from `@RequestMapping`, I get the expected exception.`@RequestMapping`( value = ""/users"", method = RequestMethod.POST) `@ResponseBody` public User createUser(...)  org.springframework.web.HttpMediaTypeNotAcceptableException: Could not find acceptable representation at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.writeWithMessageConverters(Annota tionMethodHandlerAdapter.java:1032) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.handleHttpEntityResponse(Annotati onMethodHandlerAdapter.java:991) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.getModelAndView(AnnotationMethodH andlerAdapter.java:917)   ---  **Affects:** 3.1 M2","closed","in: web,","spring-projects-issues","2011-08-03T01:36:21Z","2019-01-13T21:42:19Z"
"","13595","Got stackoverflow when scanning for @Configuration [SPR-8955]","**[Willem Dekker](https://jira.spring.io/secure/ViewProfile.jspa?name=wdekker)** opened **[SPR-8955](https://jira.spring.io/browse/SPR-8955?redirect=false)** and commented  We migrated to spring 3.1.0.RELEASE and during startup of our MVC application we got the following error:  2011-12-17 09:45:27,245 ERROR [org.springframework.web.context.ContextLoader] - \ java.lang.StackOverflowError at org.springframework.util.StringUtils.cleanPath(StringUtils.java:599) at org.springframework.core.io.ClassPathResource.\(ClassPathResource.java:76) at org.springframework.core.io.DefaultResourceLoader.getResource(DefaultResourceLoader.java:90) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:76) at org.springframework.context.annotation.ConfigurationClassParser.findAllAnnotationAttributes(ConfigurationClassParser.java:248) at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:206) at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:138) at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:170) at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:138) ... ... ...  The cause seems to lie in the construction of a `@Component` annotated static innerclass with a non annotated super class:  abstract class A {      ...          @Component     static class B extends A {     }  }  We are not using `@Configurable` but only xml based configuration with component-scanning, the construction above worked perfectly with spring 3.0.x. As a workaround we extracted the innerclass to toplevel.   ---  **Affects:** 3.1 GA","closed","in: core,","spring-projects-issues","2011-12-22T10:32:01Z","2012-06-19T03:39:52Z"
"","13580","How can Spring 3.1 support hibernate 4 such as support Hibernate 3? [SPR-8940]","**[weixing_zou](https://jira.spring.io/secure/ViewProfile.jspa?name=weixing)** opened **[SPR-8940](https://jira.spring.io/browse/SPR-8940?redirect=false)** and commented  I can assign entityInterceptor and eventListeners to org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean, but there is no class org.springframework.orm.hibernate4.annotation.AnnotationSessionFactoryBean, and for org.springframework.orm.hibernate4.LocalSessionFactoryBean, there is no property entityInterceptor and eventListeners. Then how can I upgrade to Hibernate 4 with Spring 3.1 under this situation?  For example: \ \ \ \ \ ... \ \ \  ---  **Affects:** 3.1 GA  **Issue Links:** - #13620 support for hibernate interceptor for hibernate4  with spring3.1 - #14017 Unable to register hibernate event listeners against orm.hibernate4's LocalSessionFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/23a941d0f47f9efc8362ecda087c9daa230b2080, https://github.com/spring-projects/spring-framework/commit/eb31528979e5c6c76012a5ba6fc95308487d8404  8 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2011-12-16T09:15:27Z","2019-01-11T14:26:08Z"
"","13654","NoSuchMethodError occured while building spring-framework [SPR-9015]","**[wang haojie](https://jira.spring.io/secure/ViewProfile.jspa?name=herowang)** opened **[SPR-9015](https://jira.spring.io/browse/SPR-9015?redirect=false)** and commented  After I downloaded the sources I went to the spring-framework/build-spring-framework directory and run ant.Few minutes later an error occured:  mework\spring-build\multi-bundle\artifact.xml:60: The following error occurred while executing this line: mework\spring-build\multi-bundle\common.xml:86: The following error occurred while executing this line: mework\org.springframework.asm\build.xml:33: The following error occurred while executing this line: mework\org.springframework.asm\build.xml:53: java.lang.NoSuchMethodError: org.objectweb.asm.ClassReader.accept(Lorg/objectweb/asm/ClassVisitor;I)V ource.bundlor.support.asm.AsmTypeArtefactAnalyser.analyse(AsmTypeArtefactAnalyser.java:43) ource.bundlor.support.StandardManifestGenerator.analyzeEntry(StandardManifestGenerator.java:116) ource.bundlor.support.StandardManifestGenerator.analyzeEntries(StandardManifestGenerator.java:101) ource.bundlor.support.StandardManifestGenerator.generate(StandardManifestGenerator.java:66) ource.bundlor.ant.internal.AntBundlorExecutor.execute(AntBundlorExecutor.java:73) ource.bundlor.ant.Bundlor.execute(Bundlor.java:106) .NativeMethodAccessorImpl.invoke0(Native Method) .NativeMethodAccessorImpl.invoke(Unknown Source) .DelegatingMethodAccessorImpl.invoke(Unknown Source) eflect.Method.invoke(Unknown Source) tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) tools.ant.TaskAdapter.execute(TaskAdapter.java:154) tools.ant.UnknownElement.execute(UnknownElement.java:291) .GeneratedMethodAccessor6.invoke(Unknown Source) .DelegatingMethodAccessorImpl.invoke(Unknown Source) eflect.Method.invoke(Unknown Source) tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) tools.ant.Task.perform(Task.java:348) tools.ant.Target.execute(Target.java:390) tools.ant.Target.performTasks(Target.java:411) tools.ant.Project.executeSortedTargets(Project.java:1399) tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38) tools.ant.Project.executeTargets(Project.java:1251) tools.ant.taskdefs.Ant.execute(Ant.java:442) tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105) tools.ant.UnknownElement.execute(UnknownElement.java:291) .GeneratedMethodAccessor6.invoke(Unknown Source) .DelegatingMethodAccessorImpl.invoke(Unknown Source) eflect.Method.invoke(Unknown Source) tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) tools.ant.Task.perform(Task.java:348) tools.ant.Target.execute(Target.java:390) tools.ant.Target.performTasks(Target.java:411) tools.ant.Project.executeSortedTargets(Project.java:1399) tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38) tools.ant.Project.executeTargets(Project.java:1251) tools.ant.taskdefs.Ant.execute(Ant.java:442) tools.ant.taskdefs.SubAnt.execute(SubAnt.java:302) tools.ant.taskdefs.SubAnt.execute(SubAnt.java:221) tools.ant.UnknownElement.execute(UnknownElement.java:291) .GeneratedMethodAccessor6.invoke(Unknown Source) .DelegatingMethodAccessorImpl.invoke(Unknown Source) eflect.Method.invoke(Unknown Source) tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) tools.ant.Task.perform(Task.java:348) tools.ant.taskdefs.Sequential.execute(Sequential.java:68) tools.ant.UnknownElement.execute(UnknownElement.java:291) .GeneratedMethodAccessor6.invoke(Unknown Source) .DelegatingMethodAccessorImpl.invoke(Unknown Source) eflect.Method.invoke(Unknown Source) tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) tools.ant.Task.perform(Task.java:348) tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398) tools.ant.UnknownElement.execute(UnknownElement.java:291) .GeneratedMethodAccessor6.invoke(Unknown Source) .DelegatingMethodAccessorImpl.invoke(Unknown Source) eflect.Method.invoke(Unknown Source) tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) tools.ant.Task.perform(Task.java:348) tools.ant.Target.execute(Target.java:390) tools.ant.Target.performTasks(Target.java:411) tools.ant.Project.executeSortedTargets(Project.java:1399) tools.ant.Project.executeTarget(Project.java:1368) tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41) tools.ant.Project.executeTargets(Project.java:1251) tools.ant.Main.runBuild(Main.java:809) tools.ant.Main.startAnt(Main.java:217) tools.ant.launch.Launcher.run(Launcher.java:280) tools.ant.launch.Launcher.main(Launcher.java:109)  It seems like the version of ClassReader is wrong.   ---  **Affects:** 3.1 M1","closed","status: invalid,","spring-projects-issues","2012-01-11T04:24:10Z","2019-01-12T05:29:20Z"
"","13024","Add BoneCP NativeJdbcExtractor [SPR-8377]","**[Wallace Wadge](https://jira.spring.io/secure/ViewProfile.jspa?name=wwadge)** opened **[SPR-8377](https://jira.spring.io/browse/SPR-8377?redirect=false)** and commented  The attached file adds an implementation of the {`@link` NativeJdbcExtractor} interface for the BoneCP connection pool (http://jolbox.com).   ---  **Attachments:** - [BoneCPNativeJdbcExtractor.java](https://jira.spring.io/secure/attachment/18277/BoneCPNativeJdbcExtractor.java) (_3.58 kB_)","closed","type: enhancement,","spring-projects-issues","2011-05-25T09:11:14Z","2015-09-08T15:33:40Z"
"","13084","Tạo danh mục chức vụ [SPR-8438]","**[Vuong Nguyen](https://jira.spring.io/secure/ViewProfile.jspa?name=vuongnguyen)** opened **[SPR-8438](https://jira.spring.io/browse/SPR-8438?redirect=false)** and commented   ---  **Affects:** 3.1 M2","closed","in: core,","spring-projects-issues","2011-06-11T09:30:56Z","2019-01-12T05:30:12Z"
"","12904","Correct Cache Abstraction documentation [SPR-8256]","**[Vladislav Pernin](https://jira.spring.io/secure/ViewProfile.jspa?name=vpernin)** opened **[SPR-8256](https://jira.spring.io/browse/SPR-8256?redirect=false)** and commented  The documentation of the great Cache Abstraction feature has some errors : - the namespace declaration http://www.springframework.org/schema/cache/spring-cache.xsd does not exists, replace with http://www.springframework.org/schema/cache/spring-cache-3.1.xsd - duplicate block description of proxy-target-class with the note - the `@Cacheable` and `@CacheEvict` annotation key attribute must start with #, as already corrected in the blog http://blog.springsource.com/2011/02/23/spring-3-1-m1-caching/    ---  **Affects:** 3.1 M1","closed","in: core,","spring-projects-issues","2011-04-16T05:54:21Z","2012-06-19T03:39:22Z"
"","13666","Error in documentation [SPR-9027]","**[Vladimir Lifar](https://jira.spring.io/secure/ViewProfile.jspa?name=lifarv)** opened **[SPR-9027](https://jira.spring.io/browse/SPR-9027?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/beans.html#beans-factory-programmatically-registering-beanpostprocessors says:  ""it is also possible to register them programmatically against an ApplicationContext using the addBeanPostProcessor method""  However, there is no addBeanPostProcessor method in implementations of ApplicationContext.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c931eaa4364e498d9a6cf57b9cc3de986392517a","closed","in: core,","spring-projects-issues","2012-01-15T08:19:12Z","2012-06-19T03:39:17Z"
"","13313","Missing ""Creating RESTful services"" chapter [SPR-8671]","**[Vlad Juylov](https://jira.spring.io/secure/ViewProfile.jspa?name=vj)** opened **[SPR-8671](https://jira.spring.io/browse/SPR-8671?redirect=false)** and commented  3.0.0.M3 Has a chapter http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch18s02.html  That is missing from both http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ and http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/   ---  **Affects:** 3.0.6, 3.1 M2","closed","status: declined,","spring-projects-issues","2011-09-07T13:55:55Z","2019-01-12T16:37:26Z"
"","13525","Error when parsing PMS stored procedure script. [SPR-8884]","**[Vincent MONIER](https://jira.spring.io/secure/ViewProfile.jspa?name=vmonier)** opened **[SPR-8884](https://jira.spring.io/browse/SPR-8884?redirect=false)** and commented  For testing purpose, I use EmbeddedDatabase.  My database schema contains HSQLDB PMS stored procedures.  like this one:  -----------   content of procedure.sql (a valid HSQLDB PMS stored procedure) --------------------- CREATE PROCEDURE get_customer(IN id INT, OUT firstname VARCHAR(50), OUT lastname VARCHAR(50)) READS SQL DATA BEGIN ATOMIC SELECT first_name, last_name INTO firstname, lastname FROM customers WHERE cust_id = id; END  When I create database instance:  EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder(); database = builder.setType(EmbeddedDatabaseType.HSQL).addScript(""classpath:/META-INF/sql/schema.sql"") .addScript(""classpath:/META-INF/sql/procedure.sql"") .build();  I get this exception: ""an error occurs during parsing of procedure.sql org.hsqldb.HsqlException: unexpected end of statement:  required: ; ""  The problem is not in HSQLDB part but is located in : org.springframework.jdbc.datasource.init.ResourceDatabasePopulator#splitSqlScript(String script, char delim, List\ statements) it uses ';' character as a delimiter for statements and therefore creates 2 statements, one for [CREATE PROCEDURE .... cust_id = id] and the second for [END]. The first statement is rejected by HSQLDB because of a missing ';' character in BEGIN block.  ---  **Affects:** 3.0.6  **Issue Links:** - #13459 Support per-script statement separator configuration for SQL scripts (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2011-11-29T07:46:06Z","2019-01-12T16:48:22Z"
"","13574","Spring Cache ExpressionEvaluator doesn't find the right Expression in case of multiple @CacheEvict in a @Caching when generating the key [SPR-8934]","**[Vincent DEVILLERS](https://jira.spring.io/secure/ViewProfile.jspa?name=treydone)** opened **[SPR-8934](https://jira.spring.io/browse/SPR-8934?redirect=false)** and commented  When using something like: `@Caching`(evict = { `@CacheEvict`(value = CacheId.PROFILE, key = CompanyCacheKeys.NB_FOLLOWERS, beforeInvocation = true), `@CacheEvict`(value = CacheId.PROFILE, key = CompanyCacheKeys.MEMBER_SETTINGS, beforeInvocation = true) })  the eviction is always done only on one key, not on all the keys. The method: public Object key(String keyExpression, Method method, EvaluationContext evalContext) of ExpressionEvaluator seems to return the first key.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0053319c6279a55094a723dc5fc0955b901cfd1c","closed","in: core,","spring-projects-issues","2011-12-15T08:57:54Z","2019-01-12T05:29:27Z"
"","13489","The DispatcherServlet cannot handle MultipartException with @ExceptionHandler [SPR-8847]","**[Vincent DEVILLERS](https://jira.spring.io/secure/ViewProfile.jspa?name=treydone)** opened **[SPR-8847](https://jira.spring.io/browse/SPR-8847?redirect=false)** and commented  Actually, in the doDispatch method, the handler for the current request is determined after the multipart check. But if an error appears in the checkMultipart() method, like a MaxUploadSizeExceededException, the current handler is not determined and we cannot handle the MultipartException with the `@ExceptionHandler` annotation.  So, instead of this:      			processedRequest = checkMultipart(request);          			// Determine handler for the current request.     			mappedHandler = getHandler(processedRequest, false);     			if (mappedHandler == null || mappedHandler.getHandler() == null) {     				noHandlerFound(processedRequest, response);     				return;     			}  we can do this: // Determine handler for the current request. mappedHandler = getHandler(request); if (mappedHandler == null || mappedHandler.getHandler() == null) { noHandlerFound(processedRequest, response); return; }      processedRequest = checkMultipart(request);    ---  **Affects:** 3.1 RC1","closed","status: invalid,","spring-projects-issues","2011-11-14T01:01:13Z","2019-01-12T05:29:37Z"
"","13191","No easy way to extend WebMvcConfiguration [SPR-8547]","**[Vijay Dendukuri](https://jira.spring.io/secure/ViewProfile.jspa?name=javachap)** opened **[SPR-8547](https://jira.spring.io/browse/SPR-8547?redirect=false)** and commented  There is no easy way to extend the WebMvcConfiguration, Yes we can do some customization using WebMvcConfigurer/WebMvcConfigurerAdapter.But it is very limited. I have a use case where i need to use an extended  RequestMappingHandlerAdapter as my default mappingHandler. There is no way that i can reuse the existing WebMvcConfiguration, i have to copy the entire code from WebMvcConfiguration to my new Configuration Object.   --- No further details from [SPR-8547](https://jira.spring.io/browse/SPR-8547?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-07-20T01:51:02Z","2019-01-11T13:18:34Z"
"","13190","Spring MVC - Ability to use a Converter based on the Path Extension instead of Accep Header. [SPR-8546]","**[Vijay Dendukuri](https://jira.spring.io/secure/ViewProfile.jspa?name=javachap)** opened **[SPR-8546](https://jira.spring.io/browse/SPR-8546?redirect=false)** and commented  When ""RequestResponseBodyMethodProcessor"" is used to handle the return value (by annotating the method with `@ResponseBody`), the HttpMessageConverter is choosen based on request header ""Accept"".  Please provide an ability to also choose a HttpMessageConverter based on pathExtension (similar to ContentNegotiatingViewResolver).  The HtppMessageConverter is choosed in the following class now. org.springframework.web.servlet.mvc.method.annotation.support.AbstractMessageConverterMethodProcessor Method: writeWithMessageConverters  ---  **Affects:** 3.0.5  **Issue Links:** - #11163 `@RequestMapping` should support accept header and url extension (_**""duplicates""**_) - #13057 Content negotiation improvements (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-07-20T00:44:17Z","2019-01-13T07:08:21Z"
"","12926","Constants.toCode throws NPE when namePrefix is null [SPR-8278]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-8278](https://jira.spring.io/browse/SPR-8278?redirect=false)** and commented  org.springframework.core.Constants.toCode() javadoc says:  ""namePrefix prefix of the constant names to search (may be null)""  However if null namePrefix is passed in then toCode throws NPE on startsWith check.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e8f5d877a3e0e98772030c9d565a9d133581d01, https://github.com/spring-projects/spring-framework/commit/6ffb0436fa55fb73048a5a9133a98e122e490119  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2011-04-26T17:16:52Z","2012-06-19T03:39:41Z"
"","13454","org.springframework.orm.hibernate4.LocalSessionFactoryBean fails if 'packagesToScan' is not set [SPR-8812]","**[Vadim Lotarev](https://jira.spring.io/secure/ViewProfile.jspa?name=vlotarev)** opened **[SPR-8812](https://jira.spring.io/browse/SPR-8812?redirect=false)** and commented  Check packagesToScan for null in LocalSessionFactoryBuilder.scanPackages. 'packagesToScan' is not required to be set in XML-based configuration.   ---  **Affects:** 3.1 RC1","closed","type: bug,","spring-projects-issues","2011-11-02T06:58:41Z","2012-06-19T03:39:35Z"
"","13586","If you annotate any parameter in a @InitBinder method, it fails at runtime. [SPR-8946]","**[Ulon](https://jira.spring.io/secure/ViewProfile.jspa?name=monzonj)** opened **[SPR-8946](https://jira.spring.io/browse/SPR-8946?redirect=false)** and commented  Given the following init binder method:      @InitBinder()     protected void initBinder(WebDataBinder binder) {         .....     }  if you annotate the binder parameter with, let's say, `@Nonnull` annotation (very useful for IDE inspection or unit testing) spring MVC is not capable to correctly resolve the parameter      @InitBinder()     protected void initBinder(@Nonnull WebDataBinder binder) {         .....     }  Exception:  java.lang.IllegalStateException: No suitable resolver for argument [0] [type=org.springframework.web.bind.WebDataBinder]   ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03d6350e4b3c7e23e3cc84bf3f261f2c53b5b1e9, https://github.com/spring-projects/spring-framework/commit/229537288a721ea1f73d7fee5ce9dd60ec46c23e","closed","type: bug,","spring-projects-issues","2011-12-19T07:42:28Z","2012-09-10T12:05:26Z"
"","13137","Regression - Introspection with BeanUtils started failing for java.awt.Component derived classes [SPR-8491]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-8491](https://jira.spring.io/browse/SPR-8491?redirect=false)** and commented  java.awt.Component has both  public void setSize(int width, int height) and public void setSize(Dimension d)  introspection of classes derived from this base class (using BeanUtils.getPropertyDescriptor) now crashes with following exception  ... Caused by: java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods: size at java.beans.IndexedPropertyDescriptor.findIndexedPropertyType(IndexedPropertyDescriptor.java:341) at java.beans.IndexedPropertyDescriptor.setIndexedWriteMethod(IndexedPropertyDescriptor.java:248) at org.springframework.beans.ExtendedBeanInfo.addOrUpdatePropertyDescriptor(ExtendedBeanInfo.java:233) at org.springframework.beans.ExtendedBeanInfo.addOrUpdatePropertyDescriptor(ExtendedBeanInfo.java:178) at org.springframework.beans.ExtendedBeanInfo.\(ExtendedBeanInfo.java:108) at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:224) ... 92 more  I guess that this can be omitted by first checking whether or not index method really has to be updated or not (it seems to be already null)  ---  **Affects:** 3.1 M2  **Attachments:** - [SPR-8491.zip](https://jira.spring.io/secure/attachment/18416/SPR-8491.zip) (_3.02 kB_)  **Issue Links:** - #13448 ExtendedBeanInfo raises 'type mismatch' error with covariant property types (_**""duplicates""**_) - #13571 Regression - Introspection with BeanUtils started failing for java.math.BigDecimal - #14663 Overhaul non-void JavaBean write method support  3 votes, 5 watchers","closed","in: core,","spring-projects-issues","2011-06-27T06:02:24Z","2019-01-12T16:48:45Z"
"","13135","Make BeanFactoryLocator aware of autowiring (and primary flag) [SPR-8489]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-8489](https://jira.spring.io/browse/SPR-8489?redirect=false)** and commented  I see that (Context)SingletonBeanFactoryLocator still using BeanFactoryUtils beanOfType instead of BeanFactory getBean(requiredType). Changing this would allow autowiring exclusions and as a bonus the implementation wouldn't have to be aware of ListableBeanFactory anymore. I noticed also that DefaultListableBeanFactory.getBean(requiredType) isn't aware of primary flag (see resolveDependency method). I would like to see this feature to be available in getBean as well.  ---  **Affects:** 3.1 M2  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18415/mylyn-context.zip) (_2.11 kB_)  **Issue Links:** - #12511 `@Primary` and primary attribute of  element are not considered for calls to getBean(Class) (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4262aed9c887e65c400a12434e42726b0fcb7fa4","closed","type: enhancement,","spring-projects-issues","2011-06-27T01:20:47Z","2019-01-13T07:08:38Z"
"","13552","The DefaultLifecycleProcessor, when starting autostartup beans, should be checking isAutoStartup on dependencies before starting them [SPR-8912]","**[Trever Shick](https://jira.spring.io/secure/ViewProfile.jspa?name=trevershick)** opened **[SPR-8912](https://jira.spring.io/browse/SPR-8912?redirect=false)** and commented  I have a bean (AutoStarter) that implements SmartLifecycle and has autoStartup set true true. I have a DefaultMessageListenerContainer (DMLC) which has autoStartup set to false. 'AutoStarter' is meant to be a controller for the DMLC, thus 'Autostarter' has a reference to the DMLC via a property.  During context startup, the DefaultLifecycleProcessor attempts to start 'AutoStarter' which is ok, but in doing so, it determines that the DMLC (which is a dependent bean) needs to be started which is not correct as autoStartup = false on the DMLC.  I've attached a maven test project.    ---  **Affects:** 3.0.6  **Attachments:** - [smartlifecyclebug.jar](https://jira.spring.io/secure/attachment/19209/smartlifecyclebug.jar) (_11.01 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0042243a119cde1b5dbbe76cd2a8cb310265dfd4","closed","in: core,","spring-projects-issues","2011-12-12T07:53:30Z","2012-06-19T03:39:35Z"
"","13274","Cache Abstraction Documentation: minor typo [SPR-8632]","**[Travis Schneeberger](https://jira.spring.io/secure/ViewProfile.jspa?name=leo.herbie)** opened **[SPR-8632](https://jira.spring.io/browse/SPR-8632?redirect=false)** and commented  The documentation @  http://static.springsource.org/spring/docs/3.1.0.M2/spring-framework-reference/html/cache.html  has a minor typo  \  should be:  \ notice the capital 'C' in the class name.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13277 Use lowercase 'c' in 'Ehcache' consistently  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bd7fd57ad2114ce3ed3385116b886862a6cb3fd3","closed","in: core,","spring-projects-issues","2011-08-24T08:11:05Z","2019-01-11T14:21:36Z"
"","13272","Allow for a more flexible @CacheEvict annotation [SPR-8629]","**[Travis Schneeberger](https://jira.spring.io/secure/ViewProfile.jspa?name=leo.herbie)** opened **[SPR-8629](https://jira.spring.io/browse/SPR-8629?redirect=false)** and commented  It is pretty common in our application to have several related caches that all must be flushed at the same time.  We would like to be able to do something like:  class FooService { `@CacheEvictCol` { `@CacheEvict`(value=""foos"" key=""#f.id""), `@CacheEvict`(value=""associatesOfFoo"" allEntries=true), `@CacheEvict`(value=""anotherCache"" key=""'Foo.id=' + #f.id"") } void updateFoo(foo f); }  Right now you can specify multiple cache names on the `@CacheEvict` annotation but those caches must all be using the same key or you would need to use allEntries=true.  A a result of this inflexibility, we would probably end up using allEntries=true much more than we would like which would negate some of the benefits of caching.   ---  **Affects:** 3.1 M2  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-08-22T10:06:35Z","2012-06-19T03:39:02Z"
"","13263","create a mechanism to proxy non-spring managed objects for the new cache abstraction apis [SPR-8620]","**[Travis Schneeberger](https://jira.spring.io/secure/ViewProfile.jspa?name=leo.herbie)** opened **[SPR-8620](https://jira.spring.io/browse/SPR-8620?redirect=false)** and commented  We have a usecase where we have services that in certain cases are spring-managed while in other cases are not and instantiated in code.  For example:  We have a service interface like the following:  interface FooService { `@Cacheable`(value=""foos"" key=""#id"")     Foo getFoo(String id); }  Sometimes the implementation of this interface comes from Spring.  Other times this implementation comes from org.apache.cxf.frontend.ClientProxyFactoryBean (or something similar) and is proxied (instantiated) directly in code.  The problem is, the caching proxies will only be created when the bean is spring managed.  We would like the ability to Proxy an instance with a caching proxy on the fly, in code.  For example:  ClientProxyFactoryBean clientFactory... CacheManager cacheManager... //lookup the CacheManager  FooService fs = (FooService) clientFactory.create(); fs = CachedProxy.createCacheProxy(fs, cacheManager); //creates a Proxy with the caching logic based on the Spring annotations on the interface  I created something to do just this which I'll attach to the jira.  One problem with my implementation is it uses package private Spring classes.  It would be nice if the spring provided a mechanism to do this.  If nothing else it would be good of some of the Spring caching code was opened up so that it could be accessed from other packages.  Please feel free to use any parts of the attached code if you want.  My code is based on milestone 2.  Thanks.   ---  **Affects:** 3.1 M2  **Attachments:** - [CacheProxy.java](https://jira.spring.io/secure/attachment/18576/CacheProxy.java) (_3.76 kB_) - [CacheProxyTest.groovy](https://jira.spring.io/secure/attachment/18581/CacheProxyTest.groovy) (_5.20 kB_)  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-08-17T14:49:32Z","2019-01-12T03:49:27Z"
"","13696","Warn when attempting to inject values into fields marked final [SPR-9057]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-9057](https://jira.spring.io/browse/SPR-9057?redirect=false)** and commented  Using Spring 3.0.7.RELEASE this does work:  `@Value`(value = ""${crawler.http.tasks:6}"") private final int httpTasks = 1;  My property placeholder is using an empty property file:    Using 3.0.7.RELEASE the value of httpTasks is 6.  Using 3.1.0.RELEASE the value of httpTasks is 1, but it should be 6.  ---  **Issue Links:** - #12854 Overhaul core container error reporting","closed","type: enhancement,","spring-projects-issues","2012-01-25T04:57:25Z","2019-01-11T22:23:52Z"
"","13316","Collection Binding broken - TypeConverterDelegate does bind Collection Elements to Collection type instead of the collection elements Type [SPR-8674]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-8674](https://jira.spring.io/browse/SPR-8674?redirect=false)** and commented  Please look at the attached Testcase. Conversion does work for String -> Set in 3.0.5 but fails in 3.0.6. Elements are converted to the collection type rather than their Collections elements type. The revision and bug which causes this is mentioned in the forum thread.  ---  **Affects:** 3.0.6  **Reference URL:** http://forum.springsource.org/showthread.php?113783-TypeConverterDelegate-change-in-3.0.6-has-broken-my-CustomCollectionEditor-bindings  **Attachments:** - [Test.java](https://jira.spring.io/secure/attachment/18788/Test.java) (_2.02 kB_)  **Issue Links:** - #13307 Did spring framework 3.0.6 break property editor support for List's? If so, here's a new bug that was created. (_**""is duplicated by""**_) - #13356 3.0.6 Map to Map conversion shallow copying maps causing unexpected results on upgrade from 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/836e3c92531e608ccb5dcf8fdb8a0fa8bc24145a, https://github.com/spring-projects/spring-framework/commit/33b53b7cca7ec2667d57d320d888c51e48b09ed6, https://github.com/spring-projects/spring-framework/commit/94513c1a280db691f1c5e191dd9a581a3d497cb1  1 votes, 3 watchers","closed","type: regression,","spring-projects-issues","2011-09-08T12:27:56Z","2019-01-11T14:24:44Z"
"","13266","Add support to provide access to implicit created jsp objects like the ""request"" object itself to Spring EL [SPR-8623]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-8623](https://jira.spring.io/browse/SPR-8623?redirect=false)** and commented  Like mentioned in the forum thread it would be nice if spring EL does provide access to the jsp implicit objects like the request object. Did not found a way to access this in a spring:eval only way, only the workaround:  [code]   [/code]  did work, where urlPathHelper is a singleton bean from my context based on the well-known UrlPathHelper class of spring web itself. Maybe this does work already, however the forum thread exists a long time yet and no one seems to know the ""spring EL"" only solution and the documentation about spring:eval does not show how to get access to those implicit objects.   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?97122","closed","type: enhancement,","spring-projects-issues","2011-08-18T07:08:49Z","2011-12-10T06:52:41Z"
"","13243","@InitBinder - registered PropertyEditor for Class  not called if a constructor for Class  with a string Argument exists [SPR-8599]","**[Torsten Krah](https://jira.spring.io/secure/ViewProfile.jspa?name=tkrah)** opened **[SPR-8599](https://jira.spring.io/browse/SPR-8599?redirect=false)** and commented  Tried to use the `@InitBinder` annotation to register a custom PropertyEditor - however setAsText gets not called.  `@InitBinder` public void initBinder(WebDataBinder dataBinder) { dataBinder.registerCustomEditor(Role.class, new RoleEditor(roleDao)); }  However my Role Object does have this constructor - beside a default one and some other ones:  public Role (String text) {  }  This one is used everytime to perform the type coercion - my registered PropertyEditor is ignored. But the result is different - this constructor does create a transitive ""new"" Role Object, my PropertyEditor would load a existing one from my storage.  After removing the constructor my PropertyEditor setAsText... is called.  I've read the documentation but did not found the constructor vs. PropertyEditor RaceCondition mentioned nor how to make Spring prefer one over another. Is this a bug or a feature and/or intentional? I would expect if i register a custom PropertyEditor that this one is used before any other fallback way, but it seems to be not the case here. If this is mentioned in the docs and there are workarounds or config options or annotations how to make it work please tell me.  best regards   ---  **Affects:** 3.0.5","closed","status: bulk-closed,","spring-projects-issues","2011-08-10T05:15:48Z","2019-01-12T03:49:28Z"
"","13010","ViewControllerBeanDefinitionParser causes java.lang.NoSuchMethodError: java.lang.String.isEmpty() [SPR-8363]","**[Tomislav Rajakovic](https://jira.spring.io/secure/ViewProfile.jspa?name=tomislav.rajakovic)** opened **[SPR-8363](https://jira.spring.io/browse/SPR-8363?redirect=false)** and commented  org.springframework.web.servlet.config.ViewControllerBeanDefinitionParser implementation uses String.isEmpty() method which is part of Java 6 API, and resulting with java.lang.NoSuchMethodError: java.lang.String.isEmpty() error.   ---  **Affects:** 3.1 M1","closed","type: bug,","spring-projects-issues","2011-05-21T08:23:57Z","2012-06-19T03:39:26Z"
"","13583","Introduce @EnableMBeanExport equivalent to  [SPR-8943]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-8943](https://jira.spring.io/browse/SPR-8943?redirect=false)** and commented  Spring 3.1 introduces several `@Enable*` annotations. However this code snippet:  ```xml  ```  cannot be expressed with annotations. There is a valid simple workaround:  ```java @Bean public AnnotationMBeanExporter annotationMBeanExporter() {     return new AnnotationMBeanExporter(); } ```  but it would be nice to have built-in `@Enable...` annotation. Note that in JavaConfig project there was `@MBeanExport` [annotation](http://static.springsource.org/spring-javaconfig/docs/1.0.0.M4/javadoc-api/org/springframework/config/java/plugin/context/MBeanExport.html).  ---  **Affects:** 3.1 GA  **Sub-tasks:** - #14552 Document `@EnableMBeanExport` in reference manual  **Issue Links:** - #12963 Provide `@Configuration` support for automatic MBean registration (_**""is duplicated by""**_) - #17728 Add an enum for MBeanExporter Autodetect Mode  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0bd4dab4e3326be511d5a9e9cecdfa8279935993, https://github.com/spring-projects/spring-framework/commit/d52e86853026fa66cf9e7a8cfdc38791c80d93c4, https://github.com/spring-projects/spring-framework/commit/5d4d1eaca4fa8af29f07e23b89bee8fd028820bd, https://github.com/spring-projects/spring-framework/commit/cae08db6a9808bf9708d8bfd69417f792d4b06b6  5 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-12-18T12:20:06Z","2019-01-13T07:06:58Z"
"","13450","Allow @Configuration classes to self-@ComponentScan [SPR-8808]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-8808](https://jira.spring.io/browse/SPR-8808?redirect=false)** and commented  I am using `AnnotationConfigWebApplicationContext` and XML-free testing support with `@ContextConfiguration(classes=...)`. When pointed `@Configuration` class contains `@ComponentScan` with a package containing that class:  ```java package com.example.foo;  @Configuration @ComponentScan(basePackages = ""com.example.foo"") public class Config { } ```  I get unexpected exception:  ``` org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'config' for bean class [com.example.foo.Config] conflicts with existing, non-compatible bean definition of same name and class [com.example.foo.Config] ```  While I understand why it happens, IMHO Spring should handle this case and simply ignore `@Configuration` found in scanned package if it has already been provided in `AnnotationConfigWebApplicationContext`.  Test case attached. On branch `master` you'll find a test case failing, branch `fix` fixes the problem by simply `@Config` to another package.  ---  **Affects:** 3.1 RC1  **Attachments:** - [testcase2.zip](https://jira.spring.io/secure/attachment/19027/testcase2.zip) (_25.13 kB_) - [testcase3.zip](https://jira.spring.io/secure/attachment/19101/testcase3.zip) (_29.18 kB_)  **Issue Links:** - #13521 Default `@ComponentScan`'s exclude filter to exclude `@Configuration` annotated classes (_**""is duplicated by""**_) - #12956 Allow recursive use of `@ComponentScan`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca4eafd4dda3877d5bcce03c6d5aa98edded1375, https://github.com/spring-projects/spring-framework/commit/6991cd9cdf610f94ace3cd8072634106830b439f","closed","type: enhancement,","spring-projects-issues","2011-10-31T14:11:19Z","2019-01-13T07:07:24Z"
"","13410","Parallel bean initialization during startup [SPR-8767]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-8767](https://jira.spring.io/browse/SPR-8767?redirect=false)** and commented  Spring should provide a way (possibly a `BeanFactory` with a different `ConfigurableListableBeanFactory#preInstantiateSingletons` implementation) to initialize singleton non-lazy beans on startup in parallel using a thread pool. This could significantly reduce startup (and maybe shutdown) time by creating and initializing independent beans concurrently.  The algorithm is pretty simple in principle. Whereas the normal bean factory creates beans in single thread in rather random order, this implementation should:  1. Find all bean definitions that don't have any unresolved dependencies. 2. Schedule creation of each bean found in 1. in a separate concurrent task to allow parallel creation 3. When any of the tasks scheduled in 2. is completed go to 1.  The algorithm stops when all beans are created.  Implementation notes: * circular dependencies might require extra care * bean factory should create a thread pool with configurable number of threads and shut it down after all beans are created  ---  **Affects:** 3.1 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?105896-Initialize-spring-beans-in-parallel-at-startup  **Issue Links:** - #14520 Parallelize Component Scanning to Improve Spring Startup Time (_**""is duplicated by""**_) - #10033 Threads bottlenecking in DefaultSingletonBeanRegistry when using Wicket's `@SpringBean` annotation for injection - #14520 Parallelize Component Scanning to Improve Spring Startup Time - #20904 Initialization blocked by multi-threaded event publishing - #19487 Asynchronous initialization of beans during startup - #18305 Background initialization option for JPA EntityManagerFactory / Hibernate SessionFactory - #19398 Add a functional way to register a bean  80 votes, 77 watchers","open","has: votes-jira,","spring-projects-issues","2011-10-12T14:39:05Z","2022-07-15T08:58:44Z"
"","13252","Detect circular dependencies within @Configuration classes and throw a helpful exception [SPR-8609]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-8609](https://jira.spring.io/browse/SPR-8609?redirect=false)** and commented  In the following `@Configuration` class assertion fails because the SpEL expression is not evaluated prior to running `bar()`:  ``` @Configuration public class ContextConfiguration {  	@Resource 	private Foo foo;  	@Value(""#{2+3}"") 	private int value;  	@Bean 	public Bar bar() { 		Assert.isTrue(value == 5, Integer.toString(value)); 		return new Bar(); 	}  } ```  Because cyclic dependency is introduced, `bar()` is executed by the container on `ContextConfiguration` that is not yet populated:  ``` @Service public class Foo {  	@Resource 	private Bar bar;  }  public class Bar { } ```  I am aware that fixing this might be a bit challenging, but at least an exception should be thrown rather than silently calling `@Bean` method on uninitialized `@Configuration` class. Full failing test case is available [here](https://github.com/nurkiewicz/spring-no-xml/tree/spring-cyclic-dep-bug) (`spring-cyclic-dep-bug` branch).  ---  **Affects:** 3.1 M2  **Issue Links:** - #13226 unresolvable circular reference when bean defined in xml config refers to bean defined in outer java config","open","type: enhancement,","spring-projects-issues","2011-08-11T12:58:05Z","2019-01-11T14:18:29Z"
"","13029","Allow creating synchronized pool CommonsPoolTargetSource [SPR-8382]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-8382](https://jira.spring.io/browse/SPR-8382?redirect=false)** and commented  Some object factories aren't thread-safe and thus do not allow calling `org.apache.commons.pool.PoolableObjectFactory#makeObject` from within multiple threads. Commons-pool library provides convenient `PoolUtils#synchronizedPool` method to synchronize such factories. I can take advantage of this method by simply extending `org.springframework.aop.target.CommonsPoolTargetSource`:  ``` public class SynchCommonsPoolTargetSource extends CommonsPoolTargetSource {  	@Override 	protected ObjectPool createObjectPool() { 		return PoolUtils.synchronizedPool(super.createObjectPool()); 	}  } ```  However it would be nice if `CommonsPoolTargetSource` itself had an option to synchronize the pool if required. Implementation is pretty straightforward (in `org.springframework.aop.target.CommonsPoolTargetSource#createObjectPool`):  ``` return synchronizedPool? PoolUtils.synchronizedPool(gop) : gop; ```  where `synchronizedPool` would be accessible as factory property (field+setter).    ---  **Affects:** 3.0.5  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-05-30T13:38:31Z","2019-01-12T03:49:42Z"
"","13289","beans exposed to @Bean should not be identified solely by method name [SPR-8647]","**[Tomasz Bartczak](https://jira.spring.io/secure/ViewProfile.jspa?name=kretes@gazeta.pl)** opened **[SPR-8647](https://jira.spring.io/browse/SPR-8647?redirect=false)** and commented  When exposing beans via `@Bean` annotation from `@Configuration` bean method name is the only discriminator for the bean definition.  In situation when there are two beans of different types declared in two different configurations, but with same method name - only one configuration is being taken into account.  a test case to demonstrate the issue:  ``` package bartczak;  import static junit.framework.Assert.*;  import org.junit.Test; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.stereotype.Component;  public class SpringTest {      @Test     public void shouldtestSpringDifferentMethodNames() {         AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AConfig.class, BConfig.class);         assertEquals(new Integer(1), ctx.getBean(Integer.class));         assertEquals(""1"", ctx.getBean(String.class));     }      @Component     @Configuration     public static class AConfig {          public @Bean         String getBean() {             return ""1"";         }      }      @Component     @Configuration     public static class BConfig {          public @Bean         Integer getBean() {             return 1;         }      }  } ```  which is failing until one of the method names getBean() is changed to something else.   ---  **Affects:** 3.0.6","closed","in: core,","spring-projects-issues","2011-08-28T02:17:50Z","2019-01-12T16:37:27Z"
"","13755","Creating of Spring beans takes a long time when the application is deployed through webstart / jnlp with Java 6 and above [SPR-9117]","**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke)** opened **[SPR-9117](https://jira.spring.io/browse/SPR-9117?redirect=false)** and commented  Creating an instance of a Spring bean takes a long time when the application is deployed via webstart and the client of application is accessing the application over the WAN.  If a client of the application is remote, creating a bean can take up to 6 seconds.  Between the following two lines 6 seconds of time elapse.   CachedIntrospectionResults          | Getting BeanInfo for class [com.gfs.wms.service.vendor.buyer.dao.impl.JdbcBuyerDao] CachedIntrospectionResults          | Caching PropertyDescriptors for class [com.gfs.wms.service.vendor.buyer.dao.impl.JdbcBuyerDao]  If I drop the network connection while the beans are being created they are created quickly (few ms) and no exception is thrown ...  I was puzzled by this until ... I realized webstart caching of resources changed between Java 5 and Java 6  Java 6 and Java 7 DefaultBeanDefinitionDocumentReader | Loading bean definitions PathMatchingResourcePatternResolver | Looking for matching resources in jar file [http://wmstst. ...  Java 5 DefaultBeanDefinitionDocumentReader | Loading bean definitions PathMatchingResourcePatternResolver | Looking for matching resources in jar file [file:C:/Users/tjahncke/AppData/LocalLow/Sun/Java/Deployment/cache/javaws/http/Dwmstst.gfs.com/P8000/VworkflowManager-10.0.0.0.rc1.jar/DMdc9/DMwms/RMworkflowManager-10.0.0.0.rc1.jar]  It seems that Spring is looking for the jars on the remote site rather than the local cached copy.  Any assistance on having Spring look at the local cached copy instead of the remote jars would be very appreciated!  Thanks,  Tom  ---  **Issue Links:** - #9316 Classpath scanning fails after hot-deploy of a web-application to a container due to JarURLConnection caching  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fe57f74c1aa0063e0ccc9739b95078ccf0505a2c, https://github.com/spring-projects/spring-framework/commit/6fd476e2c5af60f1bf22a5c5c3be194d0f370f42","closed","type: enhancement,","spring-projects-issues","2012-02-13T10:19:01Z","2019-12-26T12:03:55Z"
"","13370","Support not (!) operator for profile selection [SPR-8728]","**[Tobias Mattsson](https://jira.spring.io/secure/ViewProfile.jspa?name=tmattsson)** opened **[SPR-8728](https://jira.spring.io/browse/SPR-8728?redirect=false)** and commented  It would be really helpful if the profile attribute could take names of profiles that all has to be active.  For instance:  ```      ...       ...  ```  As for syntax there would need to be a notation that can express both OR and AND, possibly using | and ,  Like:  ```      ...  ```  Even better would be if the syntax was in line with other expressions such as SpEL.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13818 Provide boolean logic on bean profiles, i.e. NOT profile. (_**""is duplicated by""**_) - #21010 Profile activation: not operator does not work consistently - #12637 Support profile exclusivity and/or bean definition finality  7 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2011-09-28T02:40:05Z","2019-01-13T21:41:53Z"
"","13138","Transaction problem with AnnotationSessionFactoryBuilder and @EnableTransactionManagement [SPR-8492]","**[Tobias Flohre](https://jira.spring.io/secure/ViewProfile.jspa?name=tobias79)** opened **[SPR-8492](https://jira.spring.io/browse/SPR-8492?redirect=false)** and commented  I tried to make the AnnotationSessionFactoryBuilder example work together with the `@EnableTransactionManagement` annotation and ran into the exception shown in the attachment. After a lot of debugging I tracked it down to one problem: There is this thread-bound map named resources in the TransactionSynchronizationManager. When the TransactionInterceptor first comes into play, it creates a Session and a SessionHolder and puts them into this map. The key is a proxy with the SessionFactoryImpl and the AnnotationSessionFactoryBuilder inside. Whenever getCurrentSession() is called on the injected SessionFactory in business code, there is a lookup for the SessionHolder object inside the resources map, but the key used for that is the plain SessionFactoryImpl object, not the proxy. So the SessionHolder cannot be found and a new Session and SessionHolder are created, although the existing should be used.  I hope that's enough information for you to reproduce it.  ---  **Affects:** 3.1 M2  **Attachments:** - [Exception.txt](https://jira.spring.io/secure/attachment/18397/Exception.txt) (_5.20 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18524/mylyn-context.zip) (_16.50 kB_)  **Issue Links:** - #13115 Exception thrown when updating Hibernate search indexes when SessionFactory is configured using the AnnotationSessionFactoryBuilder  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/363e08df228c86151cfda45377d7ad912731f435, https://github.com/spring-projects/spring-framework/commit/9f4a46e24cb32e7a5863bfc34e860f0ff8d937f7","closed","in: core,","spring-projects-issues","2011-06-27T09:47:19Z","2019-01-11T13:09:02Z"
"","13211","spring:eval rejects  in spite of the use of the Safe Navigation operator [SPR-8567]","**[TL](https://jira.spring.io/secure/ViewProfile.jspa?name=tln)** opened **[SPR-8567](https://jira.spring.io/browse/SPR-8567?redirect=false)** and commented  Below you find example JSP code to document the problem:  ```   ```  expected and actual output: `84,101,115,116`  ```   ```  expected and actual output: Exception during evaluation  ```   ```  expected output: \ actual output: Exception '`Field or property 'myVariable' cannot be found on null`' (I guess it's supposed to mean ""or null"".)  I already checked out the Spring source code some and came to the conclusion that there is no real workaround for this bug, except one that requires bloated code on my side (nesting the 'null' value in a dummy object).  This is so because `EvalTag.java:136` creates a context without a root object while `InternalSpelExpressionParser.java:452` puts a fixed `false` for ""null-safeness"". The combination of both conditions makes it very hard to make Spring handle the mentioned case as expected.  A solution would be welcome.   ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2011-07-28T09:19:19Z","2019-01-12T16:37:35Z"
"","13157","NumberFormatter, CurrencyFormatter, and PercentFormatter modify system singleton [SPR-8511]","**[TL](https://jira.spring.io/secure/ViewProfile.jspa?name=tln)** opened **[SPR-8511](https://jira.spring.io/browse/SPR-8511?redirect=false)** and commented  The problem is best explained by an example: Class CurrencyFormatter has a method like this:  ``` . 	protected NumberFormat getNumberFormat(Locale locale) { 		DecimalFormat format = (DecimalFormat) NumberFormat.getCurrencyInstance(locale); 		format.setParseBigDecimal(true); 		format.setMaximumFractionDigits(this.fractionDigits); 		format.setMinimumFractionDigits(this.fractionDigits); 		if (this.roundingMode != null && roundingModeOnDecimalFormat) { 			format.setRoundingMode(this.roundingMode); 		} 		if (this.currency != null) { 			format.setCurrency(this.currency); 		} 		return format; 	} ```  The problem is that this method takes a system singleton (as returned by `NumberFormat.getCurrencyInstance(locale)` in the first line) and modifies it. This usually doesn't cause any trouble, but if you have several currency formatters with different tasks in the system, you may experience conflicts (as I just did) each instance overwriting each other's settings. Also it may cause unexpected behaviour if other parts of your code access the static NumberFormat methods directly and expect them to be equipped with system defaults (or at least consistent settings over the entire runtime of the VM).  I recommend two things: 1: Introduce a call to `clone()` before you do any modifications. 2: The work done by the first line should be extracted into a separate method (like `protected NumberFormat getSystemNumberFormat(locale)`), so that it's easier to override just this part of the code. (I would've liked this opportunity to insert `clone()` myself without having to copy&paste the whole method.)   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2011-07-05T07:45:11Z","2019-01-12T16:25:22Z"
"","12920","Spring 3.0.5 - Adding @ModelAttribute to handler method signature results in JsonMappingException [SPR-8272]","**[Tim Schmelter](https://jira.spring.io/secure/ViewProfile.jspa?name=palpatim)** opened **[SPR-8272](https://jira.spring.io/browse/SPR-8272?redirect=false)** and commented  I'm not sure whether this is a misconfiguration on my part, a misunderstanding of what can be accomplished via `@ModelAttribute` and automatic JSON content conversion, or a bug in either Spring or Jackson. If it turns out to be Jackson, of course, I'll file an issue with the appropriate folks.  I've encountered a problem with adding a `@ModelAttribute` to a controller's handler method. The intent of the method is to expose a bean that's been populated from a form or previous submission, but I can reproduce the issue without actually submitting data into the bean via a web interaction.  To get the simplest possible environment in which to reproduce, I'm using the Spring mvc-showcase sample. It's currently using Spring 3.1, but I first encountered, and am able to reproduce, this issue on my project's 3.0.5 setup. As you're probably aware, the mvc-showcase sample uses a pretty standard servlet-context.xml:  ```                                                                                          ```  ---  The default `controllers.xml` referenced in the file simply sets up the relevant component-scan and view-controller for the root path. The relevant snippet is below.  ```     ```  ---  The test bean which I am attempting to deliver is a dead-simple POJO.  ``` package org.springframework.samples.mvc.test;  public class TestBean {     private String testField = ""test@example.com"";      public String getTestField() {         return testField;     }      public void setTestField(String testField) {         this.testField = testField;     }  } ```  ---  And finally, the controller, which is also simple.  ``` package org.springframework.samples.mvc.test;  import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.ResponseBody;  @Controller @RequestMapping(""test/*"") public class TestController {      @ModelAttribute(""testBean"")     public TestBean getTestBean() {         return new TestBean();     }      @RequestMapping(value = ""beanOnly"", method = RequestMethod.POST)     public @ResponseBody     TestBean testBean(@ModelAttribute(""testBean"") TestBean bean) {         return bean;     }      @RequestMapping(value = ""withoutModel"", method = RequestMethod.POST)     public @ResponseBody     Model testWithoutModel(Model model) {         model.addAttribute(""result"", ""success"");         return model;     }      @RequestMapping(value = ""withModel"", method = RequestMethod.POST)     public @ResponseBody     Model testWithModel(Model model, @ModelAttribute(""testBean"") TestBean bean) {         bean.setTestField(""This is the new value of testField"");         model.addAttribute(""result"", ""success"");         return model;     }  } ```  ---  If I call the controller via the mapped path `/mvc-showcase/test/beanOnly`, I get a JSON representation of the bean, as expected. Calling the `withoutModel` handler delivers a JSON representation of the Spring `Model` object associated with the call. It includes the implicit `@ModelAttribute` from the initial declaration in the return value, but the bean is unavailable to the method. If I wish to process the results of a form submission, for example, and return a JSON response message, then I need that attribute.  The last method adds the `@ModelAttribute`, and this is where the trouble comes up. Calling `/mvc-showcase/test/withModel` causes an exception.  In my 3.0.5 installation, I get a JsonMappingException caused by a lack of serializer for FormattingConversionService. In the 3.1.0 sample, the exception is caused by lack of serializer for DefaultConversionService. I'll include the 3.1 exception here; it seems to have the same root cause, even if the path is a bit different.  ``` org.codehaus.jackson.map.JsonMappingException: No serializer found for class org.springframework.format.support.DefaultFormattingConversionService and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: org.springframework.validation.support.BindingAwareModelMap[""org.springframework.validation.BindingResult.testBean""]->org.springframework.validation.BeanPropertyBindingResult[""propertyAccessor""]->org.springframework.beans.BeanWrapperImpl[""conversionService""])   at org.codehaus.jackson.map.ser.StdSerializerProvider$1.failForEmpty(StdSerializerProvider.java:89)   at org.codehaus.jackson.map.ser.StdSerializerProvider$1.serialize(StdSerializerProvider.java:62)   at org.codehaus.jackson.map.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:272)   at org.codehaus.jackson.map.ser.BeanSerializer.serializeFields(BeanSerializer.java:175)   at org.codehaus.jackson.map.ser.BeanSerializer.serialize(BeanSerializer.java:147)   at org.codehaus.jackson.map.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:272)   at org.codehaus.jackson.map.ser.BeanSerializer.serializeFields(BeanSerializer.java:175)   at org.codehaus.jackson.map.ser.BeanSerializer.serialize(BeanSerializer.java:147)   at org.codehaus.jackson.map.ser.MapSerializer.serializeFields(MapSerializer.java:207)   at org.codehaus.jackson.map.ser.MapSerializer.serialize(MapSerializer.java:140)   at org.codehaus.jackson.map.ser.MapSerializer.serialize(MapSerializer.java:22)   at org.codehaus.jackson.map.ser.StdSerializerProvider._serializeValue(StdSerializerProvider.java:315)   at org.codehaus.jackson.map.ser.StdSerializerProvider.serializeValue(StdSerializerProvider.java:242)   at org.codehaus.jackson.map.ObjectMapper.writeValue(ObjectMapper.java:1030)   at org.springframework.http.converter.json.MappingJacksonHttpMessageConverter.writeInternal(MappingJacksonHttpMessageConverter.java:153)   at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:181)   at org.springframework.web.servlet.mvc.method.annotation.support.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:121)   at org.springframework.web.servlet.mvc.method.annotation.support.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:101)   at org.springframework.web.servlet.mvc.method.annotation.support.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:81)   at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:64)   at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:114)   at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodAdapter.invokeHandlerMethod(RequestMappingHandlerMethodAdapter.java:505)   at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMethodAdapter.handleInternal(RequestMappingHandlerMethodAdapter.java:468)   at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)   at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790)   at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719)   at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)   at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:710)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)   at  ... ```  So, is there some configuration I am missing that should allow the Jackson converter to properly handle a response derived from a handler with `@ModelAttribute` in the method signature?  ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2011-04-23T12:38:13Z","2019-01-13T07:09:39Z"
"","13797","@ResponseBody does not work with @ExceptionHandler when reason is set in @ResponseStatus [SPR-9159]","**[Tim Reidel](https://jira.spring.io/secure/ViewProfile.jspa?name=reideltj)** opened **[SPR-9159](https://jira.spring.io/browse/SPR-9159?redirect=false)** and commented  An IOException is thrown by Jetty when returning an object from an exception handler in my `@Controller` annotated class.  Some investigation revealed that the issue was seen only when I defined an error response in the `@ResponseStatus` annotation.  An example `@ExceptionHandler` that demonstrates the issue:  ```java @ExceptionHandler(TestException.class) @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = ""test error"") public @ResponseBody TestObject handleTestException(TestException e) { 	return new TestObject(e.getMessage()); } ```  It seems the IOException is triggered by the HTTPConnection being written to twice in ServletInvocableHandlerMethod.invokeAndHandle() 1) in the call to setResponseStatus() in ServletInvocableHandlerMethod.invokeAndHandle() 2) in the call to returnValueHandlers.handleReturnValue()  If there is a reason defined in the `@ResponseStatus` then setResponseStatus() will write output text to the HTTP response which will cause the outputStream to close.   Later within returnValueHandlers.handleReturnValue() the JAXB seralization attempts to write to the outputStream which is closed.  This triggers the IOException.  Below is a snippet from ServletInvocableHandlerMethod that shows the logic that generates the error page via sendError().   This is only called when this.responseReason is non-null.  Thus if you define a reason in the `@ResponseStatus` annotation the `@ResponseBody` annotation won't work.  ```java private void setResponseStatus(ServletWebRequest webRequest) throws IOException {                if (this.responseStatus != null) {                        if (StringUtils.hasText(this.responseReason)) {                                webRequest.getResponse().sendError(this.responseStatus.value(), this.responseReason);                        }                        else {                                webRequest.getResponse().setStatus(this.responseStatus.value());                        }                        // to be picked up by the RedirectView                        webRequest.getRequest().setAttribute(View.RESPONSE_STATUS_ATTRIBUTE, this.responseStatus);                }        } ```    ---  **Affects:** 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/229537288a721ea1f73d7fee5ce9dd60ec46c23e, https://github.com/spring-projects/spring-framework/commit/d52fc3bd2fb96de0f92e51782523ecd2b06646b0","closed","type: enhancement,","spring-projects-issues","2012-02-23T20:08:59Z","2012-09-10T12:04:42Z"
"","13344","org.springframework.web.context.support.ServletContextPropertyPlaceholderConfigurer cannot read context-params [SPR-8702]","**[Thorsten Kamann](https://jira.spring.io/secure/ViewProfile.jspa?name=thorque)** opened **[SPR-8702](https://jira.spring.io/browse/SPR-8702?redirect=false)** and commented  I try to read context-params entries out of my web.xml:  ```      wafe_lucene_index     /tmp/lucene/index  ```  In the spring context I have:  ```   ```  After starting the webapplication only the properties out of db.properties are present but not the context-param.    ---  **Affects:** 3.0.6","closed","in: web,","spring-projects-issues","2011-09-16T02:39:53Z","2019-01-11T14:01:53Z"
"","12970","HttpMessageConverterExtractor throws RestClientException if no Content-Type header was found in HttpRespone [SPR-8332]","**[Thomas Ziem](https://jira.spring.io/secure/ViewProfile.jspa?name=tziem)** opened **[SPR-8332](https://jira.spring.io/browse/SPR-8332?redirect=false)** and commented  See #12563  ---  **Affects:** 3.1 M1  **Issue Links:** - #12563 HttpMessageConverterExtractor throws RestClientException if no Content-Type header was found in HttpRespone (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2011-05-12T04:41:33Z","2019-01-11T12:59:36Z"
"","12897","request for Agent-Class, Premain-Class declaration in spring-instrument's MANIFEST [SPR-8249]","**[The Alchemist](https://jira.spring.io/secure/ViewProfile.jspa?name=the_alchemist)** opened **[SPR-8249](https://jira.spring.io/browse/SPR-8249?redirect=false)** and commented  It would be great if one could load Spring's instrumentation to enable LTW without using `-javaagent:`.  This is [supported by Sun's JVM](http://download.oracle.com/javase/6/docs/api/java/lang/instrument/package-summary.html):  ``` ### Starting Agents After VM Startup  An implementation may provide a mechanism to start agents sometime after the the VM has started. The details as to how this is initiated are implementation specific but typically the application has already started and its main method has already been invoked. ```  In that page is a list of Manifest attributes that are required:  ``` ### Manifest Attributes The following manifest attributes are defined for an agent JAR file:   * Premain-Class         When an agent is specified at JVM launch time this attribute specifies the agent class. That is, the class containing the premain method. When an agent is specified at JVM launch time this attribute is required. If the attribute is not present the JVM will abort. Note: this is a class name, not a file name or path.   * Agent-Class         If an implementation supports a mechanism to start agents sometime after the VM has started then this attribute specifies the agent class. That is, the class containing the `agentmain` method. This attribute is required, if it is not present the agent will not be started. Note: this is a class name, not a file name or path.  ```  With a little help, I can write a patch.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-04-14T11:14:38Z","2018-12-28T10:14:15Z"
"","13371","cachedMappings in DefaultAnnotationHandlerMapping is not thread-safe [SPR-8729]","**[Ted Pennings](https://jira.spring.io/secure/ViewProfile.jspa?name=tedpennings)** opened **[SPR-8729](https://jira.spring.io/browse/SPR-8729?redirect=false)** and commented  The implementation of DefaultAnnotationHandlerMapping keeps a cache of its results as a HashMap instance variable. Requests to this class may put() and get() from this resource at any point. If one thread put a new value while another is in the process of reading, this would cause a structural modification of the data structure that would raise a ConcurrentModificationException.  This situation is highly unlikely, but preventable with a ConcurrentHashMap and probably advisable now that Spring has dropped Java 1.4 support.   --- No further details from [SPR-8729](https://jira.spring.io/browse/SPR-8729?redirect=false)","closed","status: invalid,","spring-projects-issues","2011-09-28T08:45:25Z","2019-01-12T05:29:48Z"
"","13174","CustomDateEditor and thread-safety of DateFormat instances [SPR-8530]","**[Ted Pennings](https://jira.spring.io/secure/ViewProfile.jspa?name=tedpennings)** opened **[SPR-8530](https://jira.spring.io/browse/SPR-8530?redirect=false)** and commented  The JavaDocs for DateFormat and SimpleDateFormat mention that instances are typically not thread-safe and should be accessed in a synchronized manner. CustomDateEditor does not appear to synchronize access to its DateFormat field. Is there a reason why or is this a defect?  A really helpful article on this subject can be found at http://blogs.atlassian.com/developer/2007/07/dateformat_objects_and_threads.html  Please forgive me if I'm wrong or off-base with this ticket.   ---  **Affects:** 3.0.5  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-07-13T10:53:13Z","2019-01-12T03:49:38Z"
"","12994","Support JSON-P Callback parameters in MappingJacksonJsonView [SPR-8346]","**[Ted Pennings](https://jira.spring.io/secure/ViewProfile.jspa?name=tedpennings)** opened **[SPR-8346](https://jira.spring.io/browse/SPR-8346?redirect=false)** and commented  The MappingJacksonJsonView class should support some sort of JSONP callback. Requests of the form http://host/path/resource.json?callback=fnx should return the response in the following format:  ``` fnx({obj:val, obj2, val}); ```  The callback function value should be a query parameter from the request so the client can easily modify it on individual requests.  This is very useful for cross-domain Ajax/REST requests in a browser. It can be easily added by extending MappingJacksonJsonView, but it would be awesome if Spring MVC supported it out of he box.  ---  **Affects:** 4.0.5  **Issue Links:** - #21338 Deprecate JSONP support and update MappingJackson2JsonView defaults  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5dc27ee134d28c7b25d0f6d3e9059f80c95d4402  3 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-18T16:23:33Z","2019-01-11T12:58:07Z"
"","13804","Cache and late resolve annotations on bean properties to improve performance [SPR-9166]","**[Taylor S. Wicksell](https://jira.spring.io/secure/ViewProfile.jspa?name=taylor.wicksell)** opened **[SPR-9166](https://jira.spring.io/browse/SPR-9166?redirect=false)** and commented  The same type of deadlock seen in #13722 can actually be triggered from numerous locations in the framework beyond just converter cache lookup. After the release of 3.1.1 we noticed the same issue being triggered from multiple calls from the Spring Form tag.  ``` ""tomcat-http--49"" daemon prio=10 tid=0x0000000052868800 nid=0x2ad1 waiting for monitor entry [0x0000000047048000]    java.lang.Thread.State: BLOCKED (on object monitor) 	at java.lang.reflect.Proxy.getProxyClass(Proxy.java:417) 	- waiting to lock  (a java.util.HashMap) 	at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581) 	at sun.reflect.annotation.AnnotationParser.annotationForMap(AnnotationParser.java:239) 	at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:229) 	at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:69) 	at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:52) 	at java.lang.reflect.Field.declaredAnnotations(Field.java:1014) 	- locked  (a java.lang.reflect.Field) 	at java.lang.reflect.Field.getDeclaredAnnotations(Field.java:1007) 	at java.lang.reflect.AccessibleObject.getAnnotations(AccessibleObject.java:175) 	at org.springframework.core.convert.Property.resolveAnnotations(Property.java:197) 	at org.springframework.core.convert.Property.(Property.java:65) 	at org.springframework.beans.BeanWrapperImpl.property(BeanWrapperImpl.java:525) 	at org.springframework.beans.BeanWrapperImpl.getPropertyTypeDescriptor(BeanWrapperImpl.java:401) 	at org.springframework.validation.AbstractPropertyBindingResult.findEditor(AbstractPropertyBindingResult.java:159) 	at org.springframework.web.servlet.support.BindStatus.(BindStatus.java:125) 	at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:178) 	at org.springframework.web.servlet.tags.form.ErrorsTag.shouldRender(ErrorsTag.java:140) 	at org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(AbstractHtmlElementBodyTag.java:47) 	at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:102) 	at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:79) ```  The root issue seems to be the reading of annotations using reflection in the constructor of org.springframework.core.convert.Property. This condition can be recreated fairly easily by calling this constructor from a unit test using multiple threads, as shown here: https://gist.github.com/1894670  It would seem like deferring the parsing of annotations until they are actually requested could help to mitigate this issue greatly.  ---  **Affects:** 3.0.6, 3.1.1  **Issue Links:** - #13343 Use concurrent cache to improve performance of GenericTypeResolver - [SWF-1528](https://jira.spring.io/browse/SWF-1528) Webflow upgrade from 2.0.8 to 2.3.0 - 6% CPU Increase On Websphere - #14429 Develop ConcurrentReferenceHashMap  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/02ce826ce4720bc6a74eaf3439656753fe6fcc44  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-24T07:06:22Z","2019-01-11T22:17:28Z"
"","13711","ant task to download all dependency jar files [SPR-9073]","**[Tadaya Tsuyukubo](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaya)** opened **[SPR-9073](https://jira.spring.io/browse/SPR-9073?redirect=false)** and commented  When I first time set up springframework source code into IDE(intellij), I had a hardtime to resolve compilation errors.  The reasons I figured are: - in ""ant test"" task, performance related tests **sometimes** fail - when test fails, ant build stops at there (ant result=failure) - then, subsequent modules don't get build - so, jars defined in subsequent modules will not get downloaded into ivy-cache repo - in IDE, due to the lack of jar files, it cannot compile the code  running ""ant jar"" doesn't download test related jar files, so still compilation fails in IDE.  It would be nice if there is a top level ""ant resolve"" task to just download all jar dependencies(including test scoped ones) without running tests. So that IDE can be set up without having compilation error.   --- No further details from [SPR-9073](https://jira.spring.io/browse/SPR-9073?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-01-30T20:03:35Z","2019-01-12T05:29:17Z"
"","13668","wrong junit version referenced in spring-framework.ipr  [SPR-9029]","**[Tadaya Tsuyukubo](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaya)** opened **[SPR-9029](https://jira.spring.io/browse/SPR-9029?redirect=false)** and commented  it's just trivial. ivy uses junit v4.9 but spring-framework.ipr for intellij is pointing to v4.8.1  ``` > git log -1 spring-framework.ipr commit dfc5b482c90c262c71d4d208d21dabdfc2e50f13 Author: Juergen Hoeller  Date:   Thu Dec 15 23:47:45 2011 +0100      IntelliJ IDEA 11 project setup  > grep junit spring-framework.ipr                         ```    --- No further details from [SPR-9029](https://jira.spring.io/browse/SPR-9029?redirect=false)","closed","type: task,","spring-projects-issues","2012-01-15T15:52:08Z","2018-12-08T13:05:48Z"
"","13122","Use 400 Bad request instead of 500 when JSON payload is well formed but has an invalid structure [SPR-8476]","**[Sébastien Launay](https://jira.spring.io/secure/ViewProfile.jspa?name=yabon)** opened **[SPR-8476](https://jira.spring.io/browse/SPR-8476?redirect=false)** and commented  When the JSON payload is well formed but contains like a property that cannot be mapped to the target bean a JsonMappingException is thrown and then catch by DefaultHandlerExceptionResolver resulting in a 500. This is not true for JsonParseException when the JSON is not well formed by wrapping the exception inside an HttpMessageNotReadableException thanks to #12097.  Unit test plus fix catching and wrapping the root exception JsonProcessingException can be found in the following patch.  ---  **Affects:** 3.0.3, 3.1 M2  **Attachments:** - [fix-json-jackson-mapping-500-to-400-2011-06-21.patch](https://jira.spring.io/secure/attachment/18362/fix-json-jackson-mapping-500-to-400-2011-06-21.patch) (_2.32 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/efaa9416720f4f60d8efb09538954b516cc55340","closed","type: enhancement,","spring-projects-issues","2011-06-21T10:51:04Z","2019-01-11T13:09:57Z"
"","13757","Custom namespaces ignored inside bean profiles [SPR-9119]","**[Szczepan Kuzniarz](https://jira.spring.io/secure/ViewProfile.jspa?name=szczepan.kuzniarz)** opened **[SPR-9119](https://jira.spring.io/browse/SPR-9119?redirect=false)** and commented  I try to configure an ActiveMQ broker and a connection factory using ""amq:"" prefixed tags (""http://activemq.apache.org/schema/core"" namespace). Namespaced tags placed inside a bean definition profile are silently ignored. The same tags placed outside a profile are parsed correctly.  There is a complete Maven/Eclipse project attached. Two bean definitions: ""amq:broker"" and ""amq:connectionFactory"" are placed inside the ""test"" profile in src/test/resources/jmsContext.xml and are not initialized (the JUnit test fails). If you move them outside the ""beans"" tag they are instantiated correctly and the JUnit test succeeds.   ---  **Attachments:** - [custom-namespace-test.zip](https://jira.spring.io/secure/attachment/19407/custom-namespace-test.zip) (_5.37 kB_)","closed","in: core,","spring-projects-issues","2012-02-14T06:06:48Z","2019-01-12T05:29:12Z"
"","12998","Non-deterministic behaviour of method injection [SPR-8351]","**[Szczepan Kuzniarz](https://jira.spring.io/secure/ViewProfile.jspa?name=szczepan.kuzniarz)** opened **[SPR-8351](https://jira.spring.io/browse/SPR-8351?redirect=false)** and commented  Using lookup-method in child bean definition produces non-deterministic behaviour. In the following example:  ``` public class Parent {     public Object getSomething() {         // method injection         return null;     }      public void testMe() {         System.out.println(getSomething());     } } ```  ``` public class Child extends Parent { } ```  ``` public class ParentSomething {     public String toString() {         return ""parent"";     } } ```  ``` public class ChildSomething {     public String toString() {         return ""child"";     } } ```  ```xml                    ```  the result of **testMe** method called on **childService** bean is random: in Spring 2.0.2 and earlier childService **getSomething** method is called, ane in Spring 2.0.3 and later parentService **getSomething** method is called. This is caused by **MethodOverrides** class storing **MethodOveride** instances in HashSet (which doesn't guarantee any particular order of elements). In my opinion the most specific lookup-method (childService in the example above) should be used.  ---  **Affects:** 3.0.5  **Issue Links:** - #17969 Method lookup doesn't allow for overriding definitions in parent bean","closed","in: core,","spring-projects-issues","2011-05-19T03:15:23Z","2019-01-12T05:30:20Z"
"","13572","Allow SELECT statements in ResourceDatabasePopulator  [SPR-8932]","**[Sylvain Mougenot](https://jira.spring.io/secure/ViewProfile.jspa?name=smougenot)** opened **[SPR-8932](https://jira.spring.io/browse/SPR-8932?redirect=false)** and commented  Using jdbc namespace for unit test data setup : {code:xml title=spring context}     ```  One of my sql scripts use select statement to call a procedure needed to setup sequence current value : ```  SELECT pg_catalog.setval('fournisseur_frn_id_seq', 1, false);  ```    The result is an exception from the JDBC layer, posgresql driver complains because this statement (a select) returned a result (which is not expected using executeUpdate : ```  Caused by: org.postgresql.util.PSQLException: Un résultat a été retourné alors qu'aucun n'était attendu. at org.postgresql.jdbc2.AbstractJdbc2Statement.executeUpdate(AbstractJdbc2Statement.java:307) at com.p6spy.engine.logging.P6LogStatement.executeUpdate(P6LogStatement.java:212) at com.mchange.v2.c3p0.impl.NewProxyStatement.executeUpdate(NewProxyStatement.java:64) at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.executeSqlScript(ResourceDatabasePopulator.java:184)  ```    Below is the source code of ResourceDatabasePopulator.  ```  //next line is #183 in the source try { int rowsAffected = stmt.executeUpdate(statement); if (logger.isDebugEnabled()) { logger.debug(rowsAffected + "" rows affected by SQL: "" + statement); } } catch (SQLException ex) { boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), ""drop""); if (continueOnError || (dropStatement && ignoreFailedDrops)) { if (logger.isDebugEnabled()) { logger.debug(""Failed to execute SQL script statement at line "" + lineNumber + "" of resource "" + resource + "": "" + statement, ex); } } else { throw new ScriptStatementFailedException(statement, lineNumber, resource, ex); } }  ```  To solve this issue I guess we could have this ```  stmt.execute(statement); int rowsAffected = stmt.getUpdateCount();  ``` instead of this ```  int rowsAffected = stmt.executeUpdate(statement);  ``` ```    ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ffa4725cdd24d7feeb1e5d16cdd82316488fcdf","closed","type: enhancement,","spring-projects-issues","2011-12-15T08:09:46Z","2012-06-19T03:39:18Z"
"","13016","RmiInvocationWrapper methods must not be declared as idempotent for Weblogic cluster [SPR-8369]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-8369](https://jira.spring.io/browse/SPR-8369?redirect=false)** and commented  In file org/springframework/remoting/rmi/RmiInvocationWrapperRTD.xml the line `` makes all methods of RmiInvocationWrapper idempotent but this is incorrect and dangerous since Spring cannot assume that the processing done during a call to `invoke` is idempotent.  I faced an actual problem where the result of a call contained a Serialized class that was not available on the client side, so that a ClassNotFoundException was raised. But internally Weblogic called the server again, thinking that it was safe to do so because the method is marked as idempotent, which was incorrect since some data was modified in a DB...  I think that only the `getTargetInterfaceName` method can be marked as idempotent.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c1e86b47f6b856598357b5f75e503b97d19eec1, https://github.com/spring-projects/spring-framework/commit/d1e998bedd6d6d1bba0e97a95fef89f67ec3d7a2","closed","type: bug,","spring-projects-issues","2011-05-24T14:09:26Z","2012-06-19T03:39:49Z"
"","13083","CachingConnectionFactory too eagerly Session.commit  [SPR-8437]","**[Sven Zethelius](https://jira.spring.io/secure/ViewProfile.jspa?name=szetheli)** opened **[SPR-8437](https://jira.spring.io/browse/SPR-8437?redirect=false)** and commented  I set up a simple derived class from CachingConnectionFactory that proxied the Session so I could println trace the method calls made.  In the process, I discovered a bug in the handling of transacted.  My use case is using Camel with spring-jms and spring-tx transactions.  Exceptions cause the JMS message to be retried by the configuration of my ConnectionFactory, when transactions are enabled.  Actual: When the broker is idle with no traffic, I'm seeing the following trace repeated until the session is in use again: Invoke: boolean javax.jms.Session.getTransacted([]) `@73850539` Invoke: void javax.jms.Session.commit([]) `@73850539` Invoke: void javax.jms.Session.commit([]) `@1538737979` Invoke: boolean javax.jms.Session.getTransacted([]) `@73850539` Invoke: void javax.jms.Session.commit([]) `@73850539` Invoke: void javax.jms.Session.commit([]) `@1538737979`  Expected: Session should not be getting errant commit messages when there is no outstanding messages being processed.  The problem is because the if statements in org.springframework.jms.connection.CachingConnectionFactory.CachedSessionInvocationHandler.invoke(Object, Method, Object[]) give getTransacted the same behavior as the create* methods.   The call in org.springframework.jms.listener.AbstractMessageListenerContainer.commitIfNecessary(Session, Message) then calls getTransacted, marking the session as transactionOpen because it thinks a create* method was called.  fix: I believe the fix is to conditionalize `this.transactionOpen = true` only on a create method, or possibly also recover, since it appears the invoke is missing handling for getTransacted, getMessageListener/setMessageListener, getAcknoledgeMode, recover, and unsubscribe.  {code:title bean setup} \ \ \ \ \ \ \ \ \                                                                        ``` ```  ---  **Affects:** 3.0.5  **Issue Links:** - #13082 Concurrency problem in CachingConnectionFactory on closing Session (_**""supersedes""**_)","closed","type: bug,","spring-projects-issues","2011-06-10T14:39:33Z","2019-01-11T13:37:38Z"
"","13082","Concurrency problem in CachingConnectionFactory on closing Session [SPR-8436]","**[Sven Zethelius](https://jira.spring.io/secure/ViewProfile.jspa?name=szetheli)** opened **[SPR-8436](https://jira.spring.io/browse/SPR-8436?redirect=false)** and commented  Found during a code inspection of the CachingConnectionFactory.  The LinkedList passed to CachedSessionInvocationHandler is not thread safe.  In CachedSessionInvocationHandler.logicalClose, the list is accessed twice in a thread unsafe manner, sessionList.contains and sessionsList.addLast.  If two sessions from the same CachingConnectionFactory are closed at the same time, this risks doing a logicalClose (not a physicalClose), but the reference to the session being lost, or worse the tail of linked list corrupted, and hence never closed and one less session in the cache pool then expected.  These two references need to be in a synchronized(sessionList) block to match the guards used in CachingConnectionFactory.getSession.  ---  **Affects:** 3.0.5  **Issue Links:** - #13083 CachingConnectionFactory too eagerly Session.commit  (_**""is superseded by""**_)  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2011-06-10T10:27:49Z","2019-01-11T13:37:17Z"
"","13381","Can't create JaxWsPortProxyFactoryBean caused by an unknown WebServiceFeature specification type [SPR-8739]","**[Sven W](https://jira.spring.io/secure/ViewProfile.jspa?name=svenw)** opened **[SPR-8739](https://jira.spring.io/browse/SPR-8739?redirect=false)** and commented  With an update to Spring 3.0.6.RELEASE we are facing with a strange problem by using the class JaxWsPortProxyFactoryBean to consume a web service as part of a web application(based on Wicket). When we start to deploy the the application to our application server (Glassfish v2) we are getting the following exception:  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean#b01950' defined in ServletContext resource [/WEB-INF/resultsAggregationContext.xml]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Unknown WebServiceFeature specification type: class $Proxy119         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1420)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)         at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:270)         ... 122 more Caused by: java.lang.IllegalArgumentException: Unknown WebServiceFeature specification type: class $Proxy119         at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor$FeaturePortProvider.convertWebServiceFeature(JaxWsPortClientInterceptor.java:563)         at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor$FeaturePortProvider.getPortStub(JaxWsPortClientInterceptor.java:539)         at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getPortStub(JaxWsPortClientInterceptor.java:410)         at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.prepare(JaxWsPortClientInterceptor.java:337)         at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.afterPropertiesSet(JaxWsPortClientInterceptor.java:316)         at org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean.afterPropertiesSet(JaxWsPortProxyFactoryBean.java:42)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1477)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1417)         ... 125 more ```  A short research reveals that all defined spring beans of the applicationContext.xml are handled as features at least the beans will be set with ""setWebServiceFeatures"". As a workaround we extended the bean configurations and setting an empty list/array:  ```     ...                  ```  I'm not sure if it is really a bug or we are doing something wrong in our environment? The change came in with the version 3.0.3(https://jira.springsource.org/browse/SPR-5712). The service classes are automatically generated with JAW-WS and doesn't contain any specific annotation to define a feature and the beans are not defined as inline beans.  Many thanks in advance for your support!  Best regards Sven Walter    ---  **Affects:** 3.0.6","closed","status: bulk-closed,","spring-projects-issues","2011-10-05T03:11:28Z","2019-01-12T02:37:23Z"
"","13816","IllegalStateException when using JpaTransactionManager with spring-batch-admin [SPR-9178]","**[Svein Erik Løvland](https://jira.spring.io/secure/ViewProfile.jspa?name=sveinelo)** opened **[SPR-9178](https://jira.spring.io/browse/SPR-9178?redirect=false)** and commented  Using JpaTransactionManager, with Hibernate 3.5.1-Final as provider. Using            ```  Might be related to #8720 ?  ``` java.lang.IllegalStateException: No value for key [org.apache.commons.dbcp.BasicDataSource@630bd3f1] bound to thread [jobLauncherTaskExecutor-1] 	at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(TransbcpactionSynchronizationManager.java:199) ~[spring-tx-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.orm.jpa.JpaTransactionManager.doCleanupAfterCompletion(JpaTransactionManager.java:531) ~[spring-orm-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:1011) ~[spring-tx-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804) ~[spring-tx-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723) ~[spring-tx-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:393) ~[spring-tx-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:120) ~[spring-tx-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) ~[spring-aop-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) ~[spring-aop-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at $Proxy29.updateExecutionContext(Unknown Source) ~[na:na] 	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:429) ~[spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) [spring-tx-3.0.6.RELEASE.jar:3.0.6.RELEASE] 	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:264) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:76) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367) [spring-batch-infrastructure-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214) [spring-batch-infrastructure-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143) [spring-batch-infrastructure-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:250) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:195) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:135) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:281) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:120) [spring-batch-core-2.1.8.RELEASE.jar:na] 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_24] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_24] 	at java.lang.Thread.run(Thread.java:662) [na:1.6.0_24] ```  ---  **Affects:** 3.0.6","closed","status: invalid,","spring-projects-issues","2012-02-28T07:08:53Z","2019-01-12T05:29:00Z"
"","13588","about applicationcontext load [SPR-8948]","**[suxianming](https://jira.spring.io/secure/ViewProfile.jspa?name=simplelife1)** opened **[SPR-8948](https://jira.spring.io/browse/SPR-8948?redirect=false)** and commented  Hi,I have encountered an issue when I use xml and annotation to define my applicationcontext. when a bean (A) in xml refer a bean in annotation (B),which is not defined in xml,and B depend on C (`@resource` is used),B can be initialized but C not. The relationship between B and C just as Service and DAO. There is no exception in the load process ,but NullPointerException is throwed when I use C in B.   ---  **Affects:** 3.0.6  **Attachments:** - [SPR-8948.zip](https://jira.spring.io/secure/attachment/19440/SPR-8948.zip) (_5.82 kB_)","closed","in: core,","spring-projects-issues","2011-12-20T01:51:19Z","2019-01-11T14:26:20Z"
"","13493","change log level on AbstractWebArgumentResolverAdapter.supportsParameter [SPR-8851]","**[Sung Joon, Park](https://jira.spring.io/secure/ViewProfile.jspa?name=hoyeol)** opened **[SPR-8851](https://jira.spring.io/browse/SPR-8851?redirect=false)** and commented  there org.springframework.web.method.annotation.support.AbstractWebArgumentResolverAdapter class supportsParameter method.. according below source code.. public boolean supportsParameter(MethodParameter parameter) { try { NativeWebRequest webRequest = getWebRequest(); Object result = this.adaptee.resolveArgument(parameter, webRequest); if (result == WebArgumentResolver.UNRESOLVED) { return false; } else { return ClassUtils.isAssignableValue(parameter.getParameterType(), result); } } catch (Exception ex) { // ignore logger.trace(""Error in checking support for parameter ["" + parameter + ""], message: "" + ex.getMessage()); return false; } }  there log level is ""TRACE"", but i think it's very important log. (likes describe there AbstractWebArgumentResolverAdapter class documentation) so, it seems need to change their log level.   ---  **Affects:** 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/947b5fefffed8e6a4412a29001c6717f4415e59b","closed","type: enhancement,","spring-projects-issues","2011-11-14T21:00:56Z","2012-06-19T03:39:15Z"
"","13319","Spring 3.0 Transaction not working in WebSphere 7.0 [SPR-8677]","**[Subhashish Ghosh](https://jira.spring.io/secure/ViewProfile.jspa?name=subhashishghosh)** opened **[SPR-8677](https://jira.spring.io/browse/SPR-8677?redirect=false)** and commented  I configured the JDBC in WebSphere Application Server 7.0.I have also configured the WebSphere transaction Manager in my application.xml. But when I am firing a transaction from a single method(first insert is successful second one is failure), I ideally should find everything should be rolled back. I am finding first data is getting committed.   ---  **Affects:** 3.0.6  **Attachments:** - [MyServlet.java](https://jira.spring.io/secure/attachment/18791/MyServlet.java) (_1.75 kB_) - [Spring3HelloWorld.java](https://jira.spring.io/secure/attachment/18790/Spring3HelloWorld.java) (_1.60 kB_) - [SpringHelloWorld.xml](https://jira.spring.io/secure/attachment/18792/SpringHelloWorld.xml) (_1.74 kB_)","closed","in: core,","spring-projects-issues","2011-09-09T10:33:13Z","2019-01-12T05:29:54Z"
"","13604","Property wrongly converted if field and setter do not match [SPR-8964]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-8964](https://jira.spring.io/browse/SPR-8964?redirect=false)** and commented  I have a somewhat weird use case but I believe this is a regression anyway.  I have a map of Integer to an enum. My code declars the maps as private Map enums but the setter injection is declared as setEnums(Map enums).  Notice that the value type does not match here. Probably the guy who wrote this didn't knew about property conversion (or when he wrote it it was not supported yet).  Anyway, with Spring 3.1, we assume (wrongly) that the type can be converted safely  In AbstractAutowireCapableBeanFactory  boolean convertible = bw.isWritableProperty(propertyName) && !PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName); if (convertible) { convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter); }  As a result of course, the wrong map is being injected  Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.util.LinkedHashMap' to required type 'java.util.Map' for property 'enums'; nested exception is java.lang.ClassCastException: com.bsb.showcase.spring.inject.SampleEnum cannot be cast to java.lang.String at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:102) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1393) ... 37 more  Attached a sample test case. To run with 3.0.6, just run ""mvn test -Dspring.version=3.0.6.RELEASE""  ---  **Affects:** 3.1 GA  **Attachments:** - [inject-regresion-showcase.zip](https://jira.spring.io/secure/attachment/19250/inject-regresion-showcase.zip) (_5.83 kB_)  **Issue Links:** - #13602 Bean configuration behaviour in detecting Locale values changed  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4aa8b96687add68542acab8a2b5af63fe4691576","closed","in: core,","spring-projects-issues","2011-12-28T01:37:25Z","2019-01-11T14:31:35Z"
"","13181","Backport JUnit 4 and @Rule execution order change to 3.0.x [SPR-8537]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-8537](https://jira.spring.io/browse/SPR-8537?redirect=false)** and commented  Please backport #12361 to the 3.0.x branch.  ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6fc6a9e80ce5119eeb9cdd0d0962e9f989ab10c2  2 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2011-07-15T04:07:24Z","2019-01-11T13:19:10Z"
"","12939","Programmatic support for isolated and child application contexts [SPR-8291]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-8291](https://jira.spring.io/browse/SPR-8291?redirect=false)** and commented  Our application has the need to be able to create isolated or child application contexts in a managed and programmatic way. We are Spring Batch users and found the [ApplicationContextFactory](http://static.springsource.org/spring-batch/apidocs/org/springframework/batch/core/configuration/support/ApplicationContextFactory.html) and friends quite useful to us.  When creating either child application contexts or isolated ones in a Spring application, you might want to be able to retrieve a ""public"" service from that context using the id of the context so what we have is a manager that uses this interface to:  1. Create context with a configurable associated id based on the ApplicationContextFactory 2. Retrieve a service with the id of the context and the identify of a bean (either the type or the name of the bean for instance, as defined in that context) 3. Honor the application lifecycle events callbacks (i.e. close the context(s) when the application is being undeployed)  (Spring batch exposes all ""Job"" bean types in a registry. The idea would be to rationalize/standardize this in core)  What would be useful also is an infrastructure to load those contexts in parallel. This is a general remark that would apply to Spring Batch as well because loading an application with 100 job types can be slow since everything happens in a single thread.  We have built a very simple ""SpringConsole"" that exposes basic metadata about the beans and the context in which it is available. This is (namely) a JMX bean that an adminsitrator can query to spot configuration/deployment issues.  Extra useful insight:  1. Configuring a child application context to enable some features like Autowiring is not easy. It works pretty much out of the box but `@Autowired` with `@Qualifier` does not until you copy some config from the parent 2. Another nice feature we envision about this infrastructure is to create application contexts with ""private"" beans. There's no such dimension in Spring today as far as I know using XML configuration (private here means available from anywhere in the context but not exposed ""outside"") 3. This infrastructure is extremely useful when you want a configuration by template approach. For a particular feature you import the template and override/define only the bean(s) you want using standard bean Ids. This is impossible if you load your template in your main application context. We have implemented this to create ""batch skeletons"" in Spring batch and it works very well  If you need any more info or code, we're glad to contribute.    ---  4 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-05-03T23:25:57Z","2019-01-12T03:49:52Z"
"","13561","LocalContainerEntityManagerFactoryBean packagesToScan doesn't honor annotated packages [SPR-8921]","**[Stéphane Landelle](https://jira.spring.io/secure/ViewProfile.jspa?name=slandelle)** opened **[SPR-8921](https://jira.spring.io/browse/SPR-8921?redirect=false)** and commented  Hibernate can make use of jdk5 annotated packages, for example declaring custom types. These are correctly bound when using LocalContainerEntityManagerFactoryBean AND a persistence.xml file, but not when using only packagesToScan.   ---  **Affects:** 3.1 GA  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2011-12-14T01:01:09Z","2013-01-24T04:58:59Z"
"","13523","ModelMap no longer populated with PathVariable [SPR-8882]","**[Stéphane Landelle](https://jira.spring.io/secure/ViewProfile.jspa?name=slandelle)** opened **[SPR-8882](https://jira.spring.io/browse/SPR-8882?redirect=false)** and commented  Hi,  I have the following use case : `@Controller` `@RequestMapping`(""/private/bank/account/{accountNumber}/year/{year}/month/{month}"") public class AccountOperationsController {      @RequestMapping({ ""/operations.html"" })     public String displayOperations(@PathVariable String accountNumber, @PathVariable int year, @PathVariable int month, ModelMap model) {  ...  In 3.1.0.M2, model was automatically populated with `@PathVariable` attributes. Doesn't work in 3.1.0.RC2. Is it a feature change or a bug?  Sincerely,  Stephane Landelle   ---  **Affects:** 3.1 RC2","closed","status: declined,","spring-projects-issues","2011-11-29T05:23:10Z","2019-01-12T16:37:10Z"
"","13409","Impossible to set SimpleMappingExceptionResolver.statusCodes [SPR-8766]","**[Stéphane Landelle](https://jira.spring.io/secure/ViewProfile.jspa?name=slandelle)** opened **[SPR-8766](https://jira.spring.io/browse/SPR-8766?redirect=false)** and commented  Bean property 'statusCodes' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?  indeed : public void setStatusCodes(Properties statusCodes) Map getStatusCodes()  Probably a regression due to #13098. Works with 3.1.0.M2. Maybe works on jdk7 as Introspector was modified.  Why not make statusCodes a Map instead of Properties?  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13402 SimpleMappingExceptionResolver: setStatusCodes getter return not same as setter. Makes override impossible (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2011-10-12T13:15:51Z","2019-01-12T16:48:27Z"
"","13751","Multiple javadoc issues [SPR-9113]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-9113](https://jira.spring.io/browse/SPR-9113?redirect=false)** and commented  Gradle api task reports multiple warnings.   ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3514cc5d65ca5b7dc603411c6175062380deec31, https://github.com/spring-projects/spring-framework/commit/effb762558f152ed60f5bd6aedb4c7b5ea65db4a","closed","type: bug,","spring-projects-issues","2012-02-12T09:59:18Z","2012-06-19T03:39:51Z"
"","13741","Eliminate brittle timing-dependent tests [SPR-9103]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-9103](https://jira.spring.io/browse/SPR-9103?redirect=false)** and commented  In `ScheduledAndTransactionalAnnotationIntegrationTests` tests `succeedsWhenSubclassProxyAndScheduledMethodNotPresentOnInterface` and `succeedsWhenJdkProxyAndScheduledMethodIsPresentOnInterface` from time to time fail (""`@Scheduled` method never called""). After increasing thread sleep time to 15ms in both tests, they would pass for me always, but maybe these tests can be refactored not to depend on time.  Also, `testFailureWithoutExplicitDeclarePrecedence` and `testPerTargetAspect` of `AbstractAspectJAdvisorFactoryTests` seldomly fail.  See relevant stack traces:  ``` java.lang.AssertionError: @Scheduled method never called Expected: a value greater than       got:           at org.junit.Assert.assertThat(Assert.java:780)         at org.springframework.scheduling.annotation.ScheduledAndTransactionalAnnotationIntegrationTests.succeedsWhenSubclassProxyAndScheduledMethodNotPresentOnInterface(ScheduledAndTransactionalAnnotationIntegrationTests.java:77)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:601)         at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)         at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)         at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)         at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)         at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)         at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)         at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)         at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)         at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)         at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)         at org.junit.runners.ParentRunner.run(ParentRunner.java:292)         at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:51)         at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:63)         at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:49)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:601)         at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)         at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)         at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)         at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:75)         at $Proxy3.processTestClass(Unknown Source)         at org.gradle.api.internal.tasks.testing.worker.TestWorker$1.run(TestWorker.java:104)         at org.gradle.messaging.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:66)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)         at java.lang.Thread.run(Thread.java:722) ```  ``` ReflectiveAspectJAdvisorFactoryTests org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactoryTests testFailureWithoutExplicitDeclarePrecedence(org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactoryTests) java.lang.AssertionError 	at org.junit.Assert.fail(Assert.java:92) 	at org.junit.Assert.fail(Assert.java:100) 	at org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.testFailureWithoutExplicitDeclarePrecedence(AbstractAspectJAdvisorFactoryTests.java:579) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:601) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:292) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) ```  ``` ava.lang.AssertionError         at org.junit.Assert.fail(Assert.java:92)         at org.junit.Assert.assertTrue(Assert.java:43)         at org.junit.Assert.assertTrue(Assert.java:54)         at org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactoryTests.testPerThisAspect(AbstractAspectJAdvisorFactoryTests.java:214)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:601)         at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)         at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)         at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)         at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)         at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)         at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)         at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)         at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)         at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)         at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)         at org.junit.runners.ParentRunner.run(ParentRunner.java:292)         at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:51)         at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:63)         at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:49)         at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:601)         at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)         at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)         at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)         at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:75)         at $Proxy3.processTestClass(Unknown Source)         at org.gradle.api.internal.tasks.testing.worker.TestWorker$1.run(TestWorker.java:104)         at org.gradle.messaging.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:66)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)         at java.lang.Thread.run(Thread.java:722) ```    ---  **Affects:** 3.2 M1","closed","in: core,","spring-projects-issues","2012-02-09T14:45:56Z","2019-01-11T22:11:56Z"
"","13735","Encoding issue causes javadoc generation to fail [SPR-9097]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-9097](https://jira.spring.io/browse/SPR-9097?redirect=false)** and commented  See build log output:  ``` [sslavic@sslavic spring-framework]$ ./gradlew build --stacktrace :spring-asm:compileJava UP-TO-DATE :spring-asm:processResources UP-TO-DATE :spring-asm:classes UP-TO-DATE :spring-asm:repackageAsm UP-TO-DATE :spring-asm:jar UP-TO-DATE :spring-core:compileJava UP-TO-DATE :spring-core:processResources UP-TO-DATE :spring-core:classes UP-TO-DATE :spring-core:jar UP-TO-DATE :spring-beans:compileJava UP-TO-DATE :spring-beans:processResources UP-TO-DATE :spring-beans:classes UP-TO-DATE :spring-beans:jar UP-TO-DATE :spring-aop:compileJava UP-TO-DATE :spring-aop:processResources UP-TO-DATE :spring-aop:classes UP-TO-DATE :spring-aop:jar UP-TO-DATE :spring-expression:compileJava UP-TO-DATE :spring-expression:processResources UP-TO-DATE :spring-expression:classes UP-TO-DATE :spring-expression:jar UP-TO-DATE :spring-instrument:compileJava UP-TO-DATE :spring-instrument:processResources UP-TO-DATE :spring-instrument:classes UP-TO-DATE :spring-instrument:jar UP-TO-DATE :spring-context:compileJava UP-TO-DATE :spring-context:processResources UP-TO-DATE :spring-context:classes UP-TO-DATE :spring-context:jar UP-TO-DATE :spring-tx:compileJava UP-TO-DATE :spring-tx:processResources UP-TO-DATE :spring-tx:classes UP-TO-DATE :spring-tx:jar UP-TO-DATE :spring-jdbc:compileJava UP-TO-DATE :spring-jdbc:processResources UP-TO-DATE :spring-jdbc:classes UP-TO-DATE :spring-jdbc:jar UP-TO-DATE :spring-context-support:compileJava UP-TO-DATE :spring-context-support:processResources UP-TO-DATE :spring-context-support:classes UP-TO-DATE :spring-context-support:jar UP-TO-DATE :spring-oxm:compileJava UP-TO-DATE :spring-oxm:processResources UP-TO-DATE :spring-oxm:classes UP-TO-DATE :spring-oxm:jar UP-TO-DATE :spring-web:compileJava UP-TO-DATE :spring-web:processResources UP-TO-DATE :spring-web:classes UP-TO-DATE :spring-web:jar UP-TO-DATE :spring-orm:compileJava UP-TO-DATE :spring-orm:processResources UP-TO-DATE :spring-orm:classes UP-TO-DATE :spring-orm:jar UP-TO-DATE :spring-webmvc:compileJava UP-TO-DATE :spring-webmvc:processResources UP-TO-DATE :spring-webmvc:classes UP-TO-DATE :spring-webmvc:jar UP-TO-DATE :spring-webmvc-portlet:compileJava UP-TO-DATE :spring-webmvc-portlet:processResources UP-TO-DATE :spring-webmvc-portlet:classes UP-TO-DATE :spring-webmvc-portlet:jar UP-TO-DATE :api /home/sslavic/git/spring-framework/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpMultiply.java:28: error: unmappable character for encoding UTF8  * If any of the operands is of a reference type, unboxing conversion (�5.1.8) is performed. Then:                                                                           ^ /home/sslavic/git/spring-framework/spring-test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java:37: error: unmappable character for encoding UTF8  * determine which context loader is appropriate for a given test class�s configuration.                                                                        ^ 2 errors  FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':api'. Cause: Javadoc generation failed.  * Try: Run with --info or --debug option to get more log output.  * Exception is: org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':api'.         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:71)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:48)         at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:34)         at org.gradle.api.internal.changedetection.CacheLockHandlingTaskExecuter$1.run(CacheLockHandlingTaskExecuter.java:34)         at org.gradle.cache.internal.DefaultCacheAccess$2.create(DefaultCacheAccess.java:200)         at org.gradle.cache.internal.DefaultCacheAccess.longRunningOperation(DefaultCacheAccess.java:172)         at org.gradle.cache.internal.DefaultCacheAccess.longRunningOperation(DefaultCacheAccess.java:198)         at org.gradle.cache.internal.DefaultPersistentDirectoryStore.longRunningOperation(DefaultPersistentDirectoryStore.java:111)         at org.gradle.api.internal.changedetection.DefaultTaskArtifactStateCacheAccess.longRunningOperation(DefaultTaskArtifactStateCacheAccess.java:83)         at org.gradle.api.internal.changedetection.CacheLockHandlingTaskExecuter.execute(CacheLockHandlingTaskExecuter.java:32)         at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:55)         at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:57)         at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:41)         at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:51)         at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:52)         at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:42)         at org.gradle.api.internal.AbstractTask.executeWithoutThrowingTaskFailure(AbstractTask.java:247)         at org.gradle.execution.DefaultTaskGraphExecuter.executeTask(DefaultTaskGraphExecuter.java:192)         at org.gradle.execution.DefaultTaskGraphExecuter.doExecute(DefaultTaskGraphExecuter.java:177)         at org.gradle.execution.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:83)         at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:36)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:61)         at org.gradle.execution.DefaultBuildExecuter.access$200(DefaultBuildExecuter.java:23)         at org.gradle.execution.DefaultBuildExecuter$2.proceed(DefaultBuildExecuter.java:67)         at org.gradle.api.internal.changedetection.TaskCacheLockHandlingBuildExecuter$1.run(TaskCacheLockHandlingBuildExecuter.java:31)         at org.gradle.cache.internal.DefaultCacheAccess$1.create(DefaultCacheAccess.java:111)         at org.gradle.cache.internal.DefaultCacheAccess.useCache(DefaultCacheAccess.java:126)         at org.gradle.cache.internal.DefaultCacheAccess.useCache(DefaultCacheAccess.java:109)         at org.gradle.cache.internal.DefaultPersistentDirectoryStore.useCache(DefaultPersistentDirectoryStore.java:103)         at org.gradle.api.internal.changedetection.DefaultTaskArtifactStateCacheAccess.useCache(DefaultTaskArtifactStateCacheAccess.java:79)         at org.gradle.api.internal.changedetection.TaskCacheLockHandlingBuildExecuter.execute(TaskCacheLockHandlingBuildExecuter.java:29)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:61)         at org.gradle.execution.DefaultBuildExecuter.access$200(DefaultBuildExecuter.java:23)         at org.gradle.execution.DefaultBuildExecuter$2.proceed(DefaultBuildExecuter.java:67)         at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:61)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:54)         at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:152)         at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:108)         at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:76)         at org.gradle.launcher.cli.RunBuildAction.execute(RunBuildAction.java:42)         at org.gradle.launcher.cli.RunBuildAction.execute(RunBuildAction.java:28)         at org.gradle.launcher.exec.ExceptionReportingAction.execute(ExceptionReportingAction.java:32)         at org.gradle.launcher.exec.ExceptionReportingAction.execute(ExceptionReportingAction.java:21)         at org.gradle.launcher.cli.CommandLineActionFactory$WithLoggingAction.execute(CommandLineActionFactory.java:238)         at org.gradle.launcher.cli.CommandLineActionFactory$WithLoggingAction.execute(CommandLineActionFactory.java:222)         at org.gradle.launcher.Main.doAction(Main.java:48)         at org.gradle.launcher.exec.EntryPoint$1.execute(EntryPoint.java:53)         at org.gradle.launcher.exec.EntryPoint$1.execute(EntryPoint.java:51)         at org.gradle.launcher.exec.Execution.execute(Execution.java:28)         at org.gradle.launcher.exec.EntryPoint.run(EntryPoint.java:39)         at org.gradle.launcher.Main.main(Main.java:39)         at org.gradle.launcher.ProcessBootstrap.runNoExit(ProcessBootstrap.java:51)         at org.gradle.launcher.ProcessBootstrap.run(ProcessBootstrap.java:33)         at org.gradle.launcher.GradleMain.main(GradleMain.java:24)         at org.gradle.wrapper.BootstrapMainStarter.start(BootstrapMainStarter.java:33)         at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:124)         at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:53) Caused by: org.gradle.api.GradleException: Javadoc generation failed.         at org.gradle.api.tasks.javadoc.Javadoc.executeExternalJavadoc(Javadoc.java:147)         at org.gradle.api.tasks.javadoc.Javadoc.generate(Javadoc.java:131)         at org.gradle.api.internal.BeanDynamicObject.invokeMethod(BeanDynamicObject.java:158)         at org.gradle.api.internal.CompositeDynamicObject.invokeMethod(CompositeDynamicObject.java:93)         at org.gradle.api.tasks.javadoc.Javadoc_Decorated.invokeMethod(Unknown Source)         at org.gradle.util.ReflectionUtil.invoke(ReflectionUtil.groovy:23)         at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$2.execute(AnnotationProcessingTaskFactory.java:129)         at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$2.execute(AnnotationProcessingTaskFactory.java:127)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:63)         ... 57 more Caused by: org.gradle.process.internal.ExecException: Command '/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.1.x86_64/bin/javadoc' finished with (non-zero) exit value 1.         at org.gradle.process.internal.DefaultExecHandle$ExecResultImpl.assertNormalExitValue(DefaultExecHandle.java:335)         at org.gradle.process.internal.DefaultExecAction.execute(DefaultExecAction.java:39)         at org.gradle.api.tasks.javadoc.Javadoc.executeExternalJavadoc(Javadoc.java:145)         ... 65 more   BUILD FAILED  Total time: 31.06 secs ```    ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e830511e8a323945c32157a1b522d3315ce81e1d, https://github.com/spring-projects/spring-framework/commit/991b8e9a06d65229b91ab29c7d59183fdd07dd02","closed","type: bug,","spring-projects-issues","2012-02-07T16:00:43Z","2012-06-19T03:39:05Z"
"","13646","Couple of ExtendedBeanInfoTests failing on Java 7 [SPR-9007]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-9007](https://jira.spring.io/browse/SPR-9007?redirect=false)** and commented  ExtendedBeanInfoTests.reproSpr8522 and some other tests fail when run with Java 7 (openjdk & oracle).  ``` [junit] Testcase: reproSpr8522(org.springframework.beans.ExtendedBeanInfoTests):    FAILED [junit]  [junit] Expected: is  [junit]      got:  [junit]  [junit] junit.framework.AssertionFailedError:  [junit] Expected: is  [junit]      got:  [junit]  [junit]     at org.springframework.beans.ExtendedBeanInfoTests.reproSpr8522(ExtendedBeanInfoTests.java:553) [junit]  [junit]  [junit] Testcase: indexedReadAndNonStandardIndexedWrite(org.springframework.beans.ExtendedBeanInfoTests):   FAILED [junit]  [junit] Expected: is  [junit]      got:  [junit]  [junit] junit.framework.AssertionFailedError:  [junit] Expected: is  [junit]      got:  [junit]  [junit]     at org.springframework.beans.ExtendedBeanInfoTests.indexedReadAndNonStandardIndexedWrite(ExtendedBeanInfoTests.java:436) [junit]  [junit]  [junit] Testcase: indexedReadAndNonStandardWriteAndNonStandardIndexedWrite(org.springframework.beans.ExtendedBeanInfoTests):        FAILED [junit]  [junit] Expected: is  [junit]      got:  [junit]  [junit] junit.framework.AssertionFailedError:  [junit] Expected: is  [junit]      got:  [junit]  [junit]     at org.springframework.beans.ExtendedBeanInfoTests.indexedReadAndNonStandardWriteAndNonStandardIndexedWrite(ExtendedBeanInfoTests.java:459) ```  Tests pass when run using Java 6 (openjdk). Looking at the source of Introspector, in getTargetPropertyInfo at least following has been changed:  from  ``` } else if (argCount == 2) {         if (argTypes[0] == int.class && name.startsWith(SET_PREFIX)) {         pd = new IndexedPropertyDescriptor(this.beanClass, name.substring(3), null, null, null, method);         if (throwsException(method, PropertyVetoException.class)) {             pd.setConstrained(true);         }     } } ```  to  ``` } else if (argCount == 2) {         if (void.class.equals(resultType) && int.class.equals(argTypes[0]) && name.startsWith(SET_PREFIX)) {         pd = new IndexedPropertyDescriptor(this.beanClass, name.substring(3), null, null, null, method);         if (throwsException(method, PropertyVetoException.class)) {             pd.setConstrained(true);         }     } } ```  It seems that non-standard indexed write methods like  ``` public Object setFoos(int i, String foo) { return new Object(); } ```  are no longer supported - method has to return void. After changing these setters to return void, tests would pass on both Java 6 and Java 7.  ---  **Affects:** 3.1 GA  **Issue Links:** - #14663 Overhaul non-void JavaBean write method support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a8be690998f43a9253305e09f96ad83058ef540, https://github.com/spring-projects/spring-framework/commit/0ee12563b038797a137ac67b13e5dd6d3d918a7f","closed","type: enhancement,","spring-projects-issues","2012-01-09T02:24:53Z","2019-01-11T22:22:10Z"
"","13085","XmlBeanFactoryTests.testFileSystemResourceWithImport fails on Windows if path contains spaces [SPR-8439]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-8439](https://jira.spring.io/browse/SPR-8439?redirect=false)** and commented  `FileNotFoundException` gets thrown in `XmlBeanFactoryTests.testFileSystemResourceWithImport` on Windows if path contains spaces. `URL.getFile()` will return ""%20"" for spaces in path making returned path string not usable for constructing `File`. `URL.toURI().getPath()` should be used instead.  See [this java bug](http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4466485) for more details.  Attaching a patch [^XmlBeanFactoryTests.java.patch] which fixes the issue.  ---  **Affects:** 3.1 M2  **Attachments:** - [XmlBeanFactoryTests.java.patch](https://jira.spring.io/secure/attachment/18328/XmlBeanFactoryTests.java.patch) (_1.31 kB_)  **Issue Links:** - #11330 XmlBeanFactoryTests testFileSystemResourceWithImport fails if build path contains spaces (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2011-06-11T13:14:25Z","2019-01-11T13:37:44Z"
"","13007","JibxMarshallerTests causes build failure on Windows [SPR-8360]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-8360](https://jira.spring.io/browse/SPR-8360?redirect=false)** and commented  Building Spring 3.1 M2 SNAPSHOT at revision 4339 JibxMarshallerTests fails with exception [1].  [1] Failed test stacktrace  ``` Unable to access binding 'binding' Make sure classes generated by the binding compiler are available at runtime java.lang.ClassNotFoundException: org.springframework.oxm.jibx.JiBX_bindingFactory 	at java.net.URLClassLoader$1.run(URLClassLoader.java:202) 	at java.security.AccessController.doPrivileged(Native Method) 	at java.net.URLClassLoader.findClass(URLClassLoader.java:190) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:307) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:248) 	at org.jibx.runtime.BindingDirectory.getFactory(BindingDirectory.java:237) 	at org.jibx.runtime.BindingDirectory.getFactory(BindingDirectory.java:292) 	at org.springframework.oxm.jibx.JibxMarshaller.afterPropertiesSet(JibxMarshaller.java:224) 	at org.springframework.oxm.jibx.JibxMarshallerTests.createMarshaller(JibxMarshallerTests.java:38) 	at org.springframework.oxm.AbstractMarshallerTests.setUp(AbstractMarshallerTests.java:58) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) ```    ---  **Affects:** 3.1 M1  **Attachments:** - [SPR-8360.patch](https://jira.spring.io/secure/attachment/18309/SPR-8360.patch) (_597 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95e99fe2a3eb1739d785f029e7fe9637fe3e26f8, https://github.com/spring-projects/spring-framework/commit/51ae6845ad0aaa1b8ea6f002ddd4f8ded45a9dbc  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2011-05-20T01:58:31Z","2019-01-11T13:23:43Z"
"","12979","spring-asm-3.1.0.M1-sources.jar has no sources [SPR-8330]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-8330](https://jira.spring.io/browse/SPR-8330?redirect=false)** and commented  Sources jar for org.springframework:spring-asm:3.1.0.M1 as found on Spring milestone repository, http://maven.springframework.org/milestone, contains no source files.  http://shrub.appspot.com/maven.springframework.org/milestone/org/springframework/spring-asm/3.1.0.M1/  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12773  **Issue Links:** - #12770 Migrate Spring build system to Gradle","closed","status: declined,","spring-projects-issues","2011-05-11T08:47:51Z","2019-01-11T12:59:25Z"
"","13123","When a cache can not be found from a @Cacheable annotation, no exception should be thrown to increase flexibility. [SPR-8477]","**[Steven Willems](https://jira.spring.io/secure/ViewProfile.jspa?name=steven.willems@i-develop.be)** opened **[SPR-8477](https://jira.spring.io/browse/SPR-8477?redirect=false)** and commented  Having multiple jars that can be included in multiple web apps, one could have to enable the cache from a module in web app A, but not in web app B. Now, when the code in the jar has a `@Cacheable`(value =""cacheName"") and the cacheName is not configured in the Spring context, an IllegalArgumentException is thrown. This is always what you want.  E.g.  'X.jar' has a class somewhere with  `@Cacheable`(value=""cacheName"") public Data getData(Parameter p) { ... }  In the jar, a CacheManager is defined, with ""cacheName"" defined in ehcache.xml  \ \ \  Now, it can be useful to enable the cache in a web app that is only reading data using X.jar, but in an other webapp which is modifying data, the cache should not be enabled. This can be achieved be not including the 'cacheManager' from X.jar in a CompositeCacheManager. But doing so, now an exception will be thrown. This a real world situation I ran into today @ work.  To fix this, I suggest an extra parameter on the `@Cacheable` annotation, required() (default=false). So when required is true, an exception will still be thrown, otherwise a warning statement will be logged that the cache is not configured and the web app will invoke the getData method like there is no `@Cacheable` on that method.  Would be nice if this could be added to increase the flexibility for working with modules in different applications.  Patch attached.   ---  **Affects:** 3.1 M2  **Attachments:** - [Allow_not_configured_caches_.patch](https://jira.spring.io/secure/attachment/18363/Allow_not_configured_caches_.patch) (_4.29 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26dbfba6c0d21ea987887e24cd2a153f8f6e18a7  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-06-21T11:57:35Z","2012-06-19T03:39:03Z"
"","13662","Beanname of @Configuration instance is null when Configuration is imported via @Import [SPR-9023]","**[Steven Hulshof](https://jira.spring.io/secure/ViewProfile.jspa?name=steven.hulshof)** opened **[SPR-9023](https://jira.spring.io/browse/SPR-9023?redirect=false)** and commented  The bean name of a configuration that is imported via `@Import` is set to null even though it is given.  Example  ``` @Configuration(""someName"") public class A  { }  @Configuration @Import({A.class}) public class B { } ```  The name of bean with type A will not be ""someName"" but will be auto generated name.  I believe the reason for this is in the ConfigurationClassParser which at line 303 processes the configuration bean with a null name, even though it is known in the MetadataReader used in its creation.  This is causing me some problems during testing where I'd like to override some Configuration beans.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e81df2ef3e6b2359de1970f2b0b5df0075abc554, https://github.com/spring-projects/spring-framework/commit/81e25b91c20a6a6d28c3935912bbe76e93ba103c","closed","in: core,","spring-projects-issues","2012-01-13T08:47:13Z","2012-06-19T03:39:43Z"
"","13059","spring-samples, petclinic, tc Server 2.5, no styles or images [SPR-8422]","**[Steve](https://jira.spring.io/secure/ViewProfile.jspa?name=mrsteve)** opened **[SPR-8422](https://jira.spring.io/browse/SPR-8422?redirect=false)** and commented  Unlike the mvc-showcase sample app, the petclinic sample app, from https://src.springsource.org/svn/spring-samples/petclinic/trunk (tip of trunk as of 6/8/2011), renders without styles and images, on ""VMware vFabric tc Server Developer Edition v2.5"" and ""Jetty v7.2 Server"".  This version of tc Server is the one installed by default with STS version 2.6.1.RELEASE.  The following attempted workaround, based on how mvc-showcase handles resources, failed too: a) updating pom.xml property spring.version to 3.0.5.RELEASE b) removing servlet-mapping of ""/static/*"" from web.xml c) adding  (so that /static/styles/petclinic.css maps to /styles/petclinic.css).  A SUCCESSFUL WORKAROUND was to deploy to Tomcat 6.0.26.   ---  **Affects:** 3.0 GA  1 votes, 4 watchers","closed","status: invalid,","spring-projects-issues","2011-06-08T10:13:53Z","2019-01-12T05:30:14Z"
"","13039","Provide pluggable naming strategies for org.springframework.ui.ModelMap [SPR-8392]","**[Steve](https://jira.spring.io/secure/ViewProfile.jspa?name=mrsteve)** opened **[SPR-8392](https://jira.spring.io/browse/SPR-8392?redirect=false)** and commented  org.springframework.ui.ModelMap conveniently generates model attribute names derived from the type of object added. But the name generation is not customizable or extensible.  When adding an attribute of type Set\ to the model map, I'd like the generated name to be ""fooBarSet"" instead of ""fooBarList"". The ""Set"" suffix is preferred to the ""List"" suffix because it makes it clear the collection may be unordered. eg:      Set fooBarSet = new HashSet();     fooBarSet.add(new FooBar());     modelMap.addAttribute(fooBarSet);     assertTrue(modelMap.containsAttribute(""fooBarSet""));  When adding an attribute of type Map, I'd like the generated name to be ""fooBarMap"" instead of ""hashMap"". eg:      Map fooBarMap = new HashMap();     fooBarMap.put(""key"", new FooBar());     modelMap.addAttribute(fooBarMap);     assertTrue(modelMap.containsAttribute(""fooBarMap"");  In general, provide the ability to plug any name generation strategy into ModelMap (instead of the current hard coded conventions in org.springframework.core.Conventions). An existing example is how org.springframework.validation.MessageCodesResolver lets you customize the generation of message code names.  Permitting pluggable name generation strategies for ModelMap, and providing a few off-the-shelf implementations, would provide an efficient way to implement model map attribute naming conventions in a project.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-06-02T09:57:23Z","2015-09-22T18:20:31Z"
"","13038","Reference Documentation, Chapter 15 - WebMVC, minor issues [SPR-8391]","**[Steve](https://jira.spring.io/secure/ViewProfile.jspa?name=mrsteve)** opened **[SPR-8391](https://jira.spring.io/browse/SPR-8391?redirect=false)** and commented  A few minor issues discovered in ""Chapter 15 - WebMVC"" the Spring Reference Documentation for release 3.1.0.M1 downloaded from:      http://static.springsource.org/spring/docs/3.1.0.M1/spring-framework-reference/pdf/spring-framework-reference.pdf  * p421 (typo) The line: ""The requesting processing workflow in Spring Web MVC"" should be: ""The request processing workflow in Spring Web MVC""  * p427 (typo) Last line on the page: ""functionality that requires creating a proxy proxy for the controller object"" should be:		 ""functionality that requires creating a proxy for the controller object""  * p429 (typo) Third code example, line 3: Owner owner = ownerService.findOwner(ownderId); should be: Owner owner = ownerService.findOwner(ownerId);  * p457 (content) This isn't just a typo. The documentation doesn't make it clear that empty arrays, unlike empty lists, can and will have a model attribute generated for them. The line: ""An x.y.User[] array with one or more x.y.User elements added will have the name userList generated."" should be: ""An x.y.User[] array with zero or more x.y.User elements added will have the name userList generated."" Likewise the line: ""An x.y.Foo[] array with one or more ..."" should be: ""An x.y.Foo[] array with zero or more ...""    ---  **Affects:** 3.1 M1","closed","type: enhancement,","spring-projects-issues","2011-06-02T09:33:58Z","2012-06-19T03:39:44Z"
"","13008","spring-samples, mvc-showcase, request mapping problem [SPR-8361]","**[Steve](https://jira.spring.io/secure/ViewProfile.jspa?name=mrsteve)** opened **[SPR-8361](https://jira.spring.io/browse/SPR-8361?redirect=false)** and commented  An interactive test fails with the spring-samples mvc-showcase app checked out from https://src.springframework.org/svn/spring-samples/mvc-showcase/trunk.  The test case: By not presence of header on the tab: Mapping Requests does not map to the correct handler method. expected: MappingController.byHeaderNegation() actual: MappingController.regexp()  Problem: `@RequestMapping` for MappingController.byHeaderNegation() is /notheader but should be /mapping/header.  See attached patch.   ---  **Affects:** 3.0.5  **Attachments:** - [MappingController.java.patch.txt](https://jira.spring.io/secure/attachment/18243/MappingController.java.patch.txt) (_575 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-mvc-showcase/commit/880c5d1ec9c0fb917812d676ee4cfb54269b6fc4","closed","in: web,","spring-projects-issues","2011-05-20T07:39:24Z","2019-01-11T13:23:54Z"
"","12934","spring-samples petcare unit test failure [SPR-8286]","**[Steve](https://jira.spring.io/secure/ViewProfile.jspa?name=mrsteve)** opened **[SPR-8286](https://jira.spring.io/browse/SPR-8286?redirect=false)** and commented  A unit test fails when building the spring-samples petcare app checked out from https://src.springframework.org/svn/spring-samples/petcare/trunk.  The method ResourceHttpRequestHandlerTests.modified() is testing whether ResourceHttpRequestHandler returns a modified resource by generating an If-Modified-Since timestamp that is 1 millisecond older than the actual ""resources/foo.css"". But ResourceHttpRequestHandler.checkNotModified() rounds timestamp down to the nearest second. The result is that the resource appears to be unmodified when the test method expects otherwise.  Asssuming that the granularity of the If-Modified-Since is supposed to be seconds, not milliseconds, then it is the test method that is in error. A patch is attached based on that assumption.   ---  **Affects:** 3.0.3  **Attachments:** - [petcare-bug.patch.txt](https://jira.spring.io/secure/attachment/18101/petcare-bug.patch.txt) (_952 bytes_)","closed","status: declined,","spring-projects-issues","2011-04-29T13:48:28Z","2019-01-12T16:25:36Z"
"","13530","QuartzJobBean doesn't work with Quartz 2.0 at runtime [SPR-8889]","**[Steve Storey](https://jira.spring.io/secure/ViewProfile.jspa?name=stevestorey)** opened **[SPR-8889](https://jira.spring.io/browse/SPR-8889?redirect=false)** and commented  Having put RC2 to work and testing out the fix for #13418 I now realise there's another problem. When the job I configured fires, I get the following exception2011-11-30 23:30:00,073 ERROR [JobRunShell] Job DEFAULT.job.reload.profiles threw an unhandled Exception: java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79) at org.quartz.core.JobRunShell.run(JobRunShell.java:213) at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557) 2011-11-30 23:30:00,075 ERROR [ErrorLogger] Job (DEFAULT.job.reload.profiles threw an exception. org.quartz.SchedulerException: Job threw an unhandled exception. [See nested exception: java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected] at org.quartz.core.JobRunShell.run(JobRunShell.java:224) at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557) Caused by: java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79) at org.quartz.core.JobRunShell.run(JobRunShell.java:213) ... 1 more  Configuration for the job is:\ \ \ \ \ \ \  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ I assume that this is a build issue for the Spring framework? Will there need to be a separate package and so on for Quartz 2, like Hibernate4  ---  **Affects:** 3.1 RC2  **Attachments:** - [MethodInvokingJobDetailFactoryBean.java](https://jira.spring.io/secure/attachment/19158/MethodInvokingJobDetailFactoryBean.java) (_11.56 kB_)  **Issue Links:** - #13528 QuartzJobBean throws IncompatibleClassChangeError when using Quartz 2.x (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4831ca27d2a4e67b1811244049ea19140538f29a, https://github.com/spring-projects/spring-framework/commit/9506f8d883d4d2543784e459663e041c2afd2dfa, https://github.com/spring-projects/spring-framework/commit/2b122816afa141c291fd269225366913d9b5d096, https://github.com/spring-projects/spring-framework/commit/00ff8fa2ccbaa4f689a74cc65a8bd20eda877484  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2011-11-30T15:41:04Z","2019-01-11T15:08:39Z"
"","13418","MethodInvokingJobDetailFactoryBean doesn't actually return the JobDetail if Quartz 2.0 in use [SPR-8775]","**[Steve Storey](https://jira.spring.io/secure/ViewProfile.jspa?name=stevestorey)** opened **[SPR-8775](https://jira.spring.io/browse/SPR-8775?redirect=false)** and commented  MethodInvokingJobDetailFactoryBean#afterPropertiesSet() does the following:  ``` // Build JobDetail instance. if (jobDetailImplClass != null) {      // Using Quartz 2.0 JobDetailImpl class...      Object jobDetail = BeanUtils.instantiate(jobDetailImplClass);      BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(jobDetail);      bw.setPropertyValue(""name"", name);      bw.setPropertyValue(""group"", this.group);      bw.setPropertyValue(""jobClass"", jobClass);      bw.setPropertyValue(""durability"", true);      ((JobDataMap) bw.getPropertyValue(""jobDataMap"")).put(""methodInvoker"", this); ```  but never actually sets this.jobDetail to the local jobDetail, and thus getObject() returns null if this codepath was exercised  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13432 MethodInvokingJobDetailFactoryBean does not properly initialize jobDetail field when using Quartz 2.0+ (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2011-10-13T10:46:51Z","2019-01-11T14:06:11Z"
"","13353","restTemplate gets 404 for PUT request [SPR-8711]","**[Steve Grodeon](https://jira.spring.io/secure/ViewProfile.jspa?name=srgrodeon)** opened **[SPR-8711](https://jira.spring.io/browse/SPR-8711?redirect=false)** and commented  When using the restTemplate.put, my request is sent to the server and executes properly, but the restTemplate throws this exception:  ``` org.springframework.web.client.ResourceAccessException: I/O error: http://localhost:8080/movie/update; nested exception is java.io.FileNotFoundException: http://localhost:8080/movie/update 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:453) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:401) 	at org.springframework.web.client.RestTemplate.put(RestTemplate.java:327) ... Caused by: java.io.FileNotFoundException: http://localhost:8080/movie/update 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:513) 	at sun.net.www.protocol.http.HttpURLConnection$6.run(HttpURLConnection.java:1368) 	at java.security.AccessController.doPrivileged(Native Method) 	at sun.net.www.protocol.http.HttpURLConnection.getChainedException(HttpURLConnection.java:1362) 	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1016) 	at org.springframework.http.client.SimpleClientHttpResponse.getBody(SimpleClientHttpResponse.java:78) 	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:72) 	at org.springframework.web.client.RestTemplate.handleResponseError(RestTemplate.java:486) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:443) ... Sep 19, 2011 7:08:56 PM org.springframework.web.client.RestTemplate handleResponseError WARNING: PUT request for ""http://localhost:8080/movie/update"" resulted in 404 (Not Found); invoking error handler Sep 19, 2011 7:08:56 PM org.springframework.web.client.RestTemplate handleResponseError WARNING: PUT request for ""http://localhost:8080/movie/updateAll"" resulted in 404 (Not Found); invoking error handler ```  In my server log I see this output, notice the URI has an extra ""/movie"" in it, I did not pass that in.  ``` Sep 20, 2011 12:08:56 AM org.springframework.web.servlet.DispatcherServlet noHandlerFound WARNING: No mapping found for HTTP request with URI [/movie/movie/updateAll] in DispatcherServlet with name 'mdbAppServlet' ```  I received this error on spring 3.0.5 and also tried 3.1.0.M2 and still received the error.   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?86425-Bug-with-RestFul-Web-Service-with-RequestMethod.PUT  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/f4607aed86e22c29268b486ee353e7084561b125","closed","status: invalid,","spring-projects-issues","2011-09-19T17:40:16Z","2019-01-12T05:29:50Z"
"","13390","Missing @Autowired candiate is reported too late for scoped beans [SPR-8748]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8748](https://jira.spring.io/browse/SPR-8748?redirect=false)** and commented  `@Autowired` properies for scoped beans are checked during bean instantiation, should be checked during context instantiation.  ``` public class ScopedAutowired {      public static class TheBean {         @Autowired         private Deflater deflater; // no deflater bean in context     }      @Configuration     public static class Conf {          @Bean         @Scope(""prototype"")         public TheBean theBean() {             return new TheBean();         }      }      public static void main(String[] args) {         new AnnotationConfigApplicationContext(Conf.class);         // should not reach this         System.out.println(""$"");     }  } ```  Method ""main"" reaches the end without exception and it is inconvenient: trivial bug could be found during app start-up, but now it requires some testing.   ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-10-07T11:49:25Z","2018-12-27T12:06:06Z"
"","13365","Type-level @Scope is ignored for explictly declared @Bean [SPR-8723]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8723](https://jira.spring.io/browse/SPR-8723?redirect=false)** and commented  ``` @Scope(""prototype"") public class Lamp {     public Lamp() {         throw new RuntimeException(                 ""must not be created because it is prototype"");     } }  public class Main {      @Configuration     public static class Conf {          @Bean         public Lamp lamp() {             return new Lamp();         }      }      public static void main(String[] args) {         new AnnotationConfigApplicationContext(Conf.class);         System.out.println(""must reach this"");     }  } ```  This code causes  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'lamp' defined in class ru.yandex.commune.junk.stepancheg.spring.scope.Main$Conf: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public ru.yandex.commune.junk.stepancheg.spring.scope.Lamp ru.yandex.commune.junk.stepancheg.spring.scope.Main$Conf.lamp()] threw exception; nested exception is java.lang.RuntimeException: must not be created because it is prototype 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:581) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:983) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:879) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:73) 	at ru.yandex.commune.junk.stepancheg.spring.scope.Main.main(Main.java:20) Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public ru.yandex.commune.junk.stepancheg.spring.scope.Lamp ru.yandex.commune.junk.stepancheg.spring.scope.Main$Conf.lamp()] threw exception; nested exception is java.lang.RuntimeException: must not be created because it is prototype 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:169) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:570) 	... 13 more Caused by: java.lang.RuntimeException: must not be created because it is prototype 	at ru.yandex.commune.junk.stepancheg.spring.scope.Lamp.(Lamp.java:8) 	at ru.yandex.commune.junk.stepancheg.spring.scope.Main$Conf.lamp(Main.java:14) 	at ru.yandex.commune.junk.stepancheg.spring.scope.Main$Conf$$EnhancerByCGLIB$$f6643148.CGLIB$lamp$0() 	at ru.yandex.commune.junk.stepancheg.spring.scope.Main$Conf$$EnhancerByCGLIB$$f6643148$$FastClassByCGLIB$$1b831bfa.invoke() 	at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:215) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:253) 	at ru.yandex.commune.junk.stepancheg.spring.scope.Main$Conf$$EnhancerByCGLIB$$f6643148.lamp() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:149) 	... 14 more ```  because Spring ignores type-level `@Scope` annotation for explicitly declared bean with `@Bean-annotated` method.  This is documented behavior, so this is an enhancement request, not bug.  Spring cannot find actual type of bean until it calls `@Bean` method, however in the most cases it is sufficient to analyze return type of `@Bean-annotated` method.  `@Scope` should be allowed as type-level annotation to avoid misuse of ""library"" classes: if library class is intended to be request-scoped, and library class is used as `@Bean`, developer may forget to add `@Scope` annotation to `@Bean` method, and this bug may be hard to find. Possibility to annotate class with `@Scope` solves the problem.   ---  **Affects:** 3.1 M2  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-09-25T09:02:59Z","2019-01-12T02:37:28Z"
"","13361","@ComponentScan(includeFilters=@Filter(...)) fails when @Import'ed [SPR-8719]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8719](https://jira.spring.io/browse/SPR-8719?redirect=false)** and commented  `@ComponentScan` does not work in `@Import-ed` configuration.  ``` public class Coin { }  public class Main {      @Configuration     @ComponentScan(basePackageClasses = Main.class,             useDefaultFilters = false,             includeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, value = Coin.class))     public static class Conf1 {     }      @Configuration     @Import(Conf1.class)     public static class Conf2 {      }      public static void main(String[] args) {         System.out.println(""loading Conf1""); // works fine         new AnnotationConfigApplicationContext(Conf1.class).getBean(Coin.class);          System.out.println(""loading Conf2""); // cannot find a bean         new AnnotationConfigApplicationContext(Conf2.class).getBean(Coin.class);         System.out.println(""Unreachable in Spring 3.1.0.M2"");     }  } ```  Outputs:  ``` loading Conf1 loading Conf2 Exception in thread ""main"" org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [ru.yandex.commune.junk.stepancheg.spring.shinderuk.Coin] is defined: expected single bean but found 0:  	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:269) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1101) 	at ru.yandex.commune.junk.stepancheg.spring.shinderuk.Main.main(Main.java:31) ```  Probably related to #12956.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13670 `@ComponentScan` with includeFilters on `@Import-ed` context does not work (_**""duplicates""**_) - #12634 `@ComponentScan` does not work when referenced from XML config (_**""is duplicated by""**_) - #13738 ClassPathBeanDefinitionScanner vs ClassPathBeanDefinitionScanner: difference in behavior when dealing with `@ComponentScan` excludeFilters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9f7fdd120409fff4491561215e5b2dda74e2b02  2 votes, 0 watchers","closed","in: core,","spring-projects-issues","2011-09-23T12:06:14Z","2019-01-13T07:07:45Z"
"","13352","Publish TestStarted and TestCompleted events in the TestContext framework [SPR-8710]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8710](https://jira.spring.io/browse/SPR-8710?redirect=false)** and commented  #### Status Quo  AFAIU currently test initialization and finalization code must be placed into a test class (not in the application context), so code cannot be easily reused between unrelated test classes.  #### Proposal  `SpringJUnit4ClassRunner` could publish a `TestStartedEvent` before each test method and a `TestFinishedEvent` after each test in the application context. Listeners to these events could be used to clean caches from the previous test run, recreate database state before a test method, etc.  ---  **Issue Links:**  - #18490 Publish TestExecutionListener events to the ApplicationContext under test - #18606 Introduce support for test-scoped beans in the TestContext framework","closed","status: superseded,","spring-projects-issues","2011-09-19T10:19:01Z","2020-04-08T15:16:05Z"
"","13172","@Bean(override=true) [SPR-8528]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8528](https://jira.spring.io/browse/SPR-8528?redirect=false)** and commented  Spring javaconf by default allows to override bean definitions. This could cause hard to find bean name collisions made by mistake in large projects.  To avoid this problem Spring provides GenericApplicationContext.setAllowBeanDefinitionOverriding(false). This helps to resolve name collision problems, but it makes impossible (or very hard) reuse of context configuration with minor adjustments (reuse 100 beans, redefine one or two).  I propose `@Bean`(override=true) parameter.  With `@Bean`(override=true) new bean is only registered if there already exists a bean with same name. Previous bean definition is removed during this bean registration.  It is an error if `@Bean`(override=true) overrides nothing.  allowBeanDefinitionOverriding value is ignored when `@Bean`(override=true)  `@Bean`(override=true) works for context similarly to how `@Override` works for classes and interfaces.  ---  **Affects:** 3.1 M2  **Issue Links:** - #12637 Support profile exclusivity and/or bean definition finality (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-07-12T08:49:19Z","2019-01-11T13:19:54Z"
"","13169","javaconf: beans with same name in independent conf files should cause an error [SPR-8525]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8525](https://jira.spring.io/browse/SPR-8525?redirect=false)** and commented  public class QuietlyOverrides {      @Configuration     public static class Conf1 {              @Bean         public Inflater inflater() {             System.out.println(""1"");             return new Inflater();         }          }          @Configuration     public static class Conf2 {              @Bean         public Inflater inflater() {             System.out.println(""2"");             return new Inflater();         }          }          @Configuration     @Import({ Conf1.class, Conf2.class })     public static class Conf {     }          public static void main(String[] args) {         // expecting an exception        // Spring quietly creates only second bean        new AnnotationConfigApplicationContext(Conf.class);         System.out.println(""$"");     }  } //~  We have large application, and one developer accidentally created a bean with name same as name of bean in another part of application. Problem search was not easy.  I think Spring should throw an error if independent configurations declare beans with same name. Configurations are independent if neither of which include another configuration directly or indirectly.  However, IF Conf2 includes Conf1, Spring should quietly override bean declared in Conf1 with bean declared if Conf2, as it does now. It is convenient to ""inherit"" configuration and override some bean definitions.   ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-07-11T10:52:43Z","2019-01-11T13:19:47Z"
"","13078","Regression in support for property write method return type covariance [SPR-8432]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8432](https://jira.spring.io/browse/SPR-8432?redirect=false)** and commented  Regression in 3.1 M2. When subclass overrides getter with narrower return type, Spring fails to set property.  ```   public class ReadWritePropertyErrorMain {       public static void main(String[] args) {           final String contextXml =              """" +              "" "" +              "" "" +              "" "" +              "" "" +              """";           AbstractXmlApplicationContext applicationContext = new AbstractXmlApplicationContext() {              @Override              protected Resource[] getConfigResources() {                  return new Resource[] { new ByteArrayResource(contextXml.getBytes()) };              }          };           applicationContext.refresh();           System.out.println(""$"");      }  }   public class MyDaoSupport4 {       private MyTemplate4 myTemplate4;       public void setMyTemplate4(MyTemplate4 jdbcTemplate4) {          this.myTemplate4 = jdbcTemplate4;      }       public MyTemplate4 getMyTemplate4() {          return myTemplate4;      }   }   public class MyDaoSupport5 extends MyDaoSupport4 {       @Override      public MyTemplate5 getMyTemplate4() { //","closed","in: core,","spring-projects-issues","2011-06-10T06:48:01Z","2019-01-11T13:37:31Z"
"","13044","ConcurrentModificationException when calling ACAC.register from @PostConstruct   [SPR-8397]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8397](https://jira.spring.io/browse/SPR-8397?redirect=false)** and commented  ``` @Configuration public static class Conf {      @Autowired     private AnnotationConfigApplicationContext applicationContext;      @PostConstruct     public void init() {         applicationContext.register(Inflater.class);     }  }  AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Conf.class); ```  throws  ``` Exception in thread ""main"" java.util.ConcurrentModificationException 	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372) 	at java.util.AbstractList$Itr.next(AbstractList.java:343) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:559) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:900) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:455) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:68) ```  If it is illegal to call register from `@PostContruct`, then exception should be better.  Related to #13009.  ---  **Affects:** 3.1 M1","closed","status: declined,","spring-projects-issues","2011-06-03T11:01:00Z","2019-01-12T16:25:28Z"
"","13043","Support disabling @Autowired on a per-@Bean basis [SPR-8396]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8396](https://jira.spring.io/browse/SPR-8396?redirect=false)** and commented  ``` public class AutowireOverrides {      public static class TheBean {          @Autowired         @Value(""from property"")         public void setBla(String value) {             System.out.println(""setBla: "" + value);         }     }      @Configuration     public static class ContextConfiguration {          @Bean         public TheBean theBean() {             TheBean r = new TheBean();             r.setBla(""from @Bean"");             return r;         }      }      public static void main(String[] args) {         new AnnotationConfigApplicationContext(ContextConfiguration.class);     }  } ```  Obviously outputs  ``` setBla: from @Bean setBla: from property ```  and property specified in `@Bean` method has lower priority.  Requesting a `@Bean`(properties=...) attribute, so theBean() declaration could be written as:  ``` @Bean(   properties={     @Property(name=""bla"", value=""from @Bean"")   } ) public TheBean theBean() {     return new TheBean(); } ```  In this case Spring would call setBla only once with ""from `@Bean`"" parameter value.  Assume HttpServer library class with `@Autowired` threadPool property. I cannot declare two HttpServer instances that use different thread pools in the same application (without disabling autowire, switching to xmlconf etc).  ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18343/mylyn-context.zip) (_10.84 kB_)  **Issue Links:** - #20752 Support for autowire-candidate with `@Bean`  1 votes, 4 watchers","open","type: enhancement,","spring-projects-issues","2011-06-03T10:26:15Z","2021-07-26T11:26:22Z"
"","13009","Noisy constructor injection with javaconf [SPR-8362]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8362](https://jira.spring.io/browse/SPR-8362?redirect=false)** and commented  Assume class MyService depends on 3 beans, and I use constructor injection. So MyService should be declared like this:  ``` @Autowired private BeanA beanA;  @Autowired private BeanB beanB;  @Autowired private BeanC beanC;  @Bean public MyService myService() {   return new MyService(beanA, beanB, beanC); } ```  Very noisy. And refactoring unfriendly. Compare to xmlconf:  ```  ```  I propose a static utility to help with instantiation of such constructor-dependency-injected beans:  ``` @Bean public MyService myService() {   return JavaConfHelper.newInstanceOfCurrent(); } ```  Spring could store current method info (return type and `@Bean` annotation) in some thread-local variable before invocation of myService() method, and then JavaConfHelper.newInstanceOfCurrent() could extract that information and instantiate MyService like in xmlconf.  (JavaConfHelper.newInstanceOfCurrent() will be valid only within `@Bean-annotated` method).   ---  **Affects:** 3.1 M1","closed","type: enhancement,","spring-projects-issues","2011-05-20T15:32:03Z","2019-01-11T13:23:51Z"
"","12905","@PostConstruct and PropertyPlaceholderConfigurer do not work together in AnnotationConfigApplicationContext [SPR-8257]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8257](https://jira.spring.io/browse/SPR-8257?redirect=false)** and commented  ``` @Configuration public class TmpConfig {      @PostConstruct     public void init() {         System.out.println(""TmpConfig.init"");     }      @Bean     public PropertyPlaceholderConfigurer propertyPlaceholderConfigurer() {         return new PropertyPlaceholderConfigurer();     }  }   new AnnotationConfigApplicationContext(TmpConfig.class); ```  nothing is printed. However, if propertyPlaceholderConfigurer bean removed:  ``` @Configuration public class TmpConfig {      @PostConstruct     public void init() {         System.out.println(""TmpConfig.init"");     }  }   new AnnotationConfigApplicationContext(TmpConfig.class); ```  ""TmpConfig.init"" is printed as expected.  ---  **Affects:** 3.1 M1  **Issue Links:** - #12917 BeanFactoryPostProcessor breaks default post-processing of `@Configuration` classes (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-04-17T06:17:06Z","2019-01-13T07:09:45Z"
"","13132","StringHttpMessageConverter doesn't work under UTF-8 [SPR-8486]","**[Steinway Wu](https://jira.spring.io/secure/ViewProfile.jspa?name=steinwaywhw)** opened **[SPR-8486](https://jira.spring.io/browse/SPR-8486?redirect=false)** and commented  I found it doesn't work under UTF-8.  After going through the source code of StringHttpMessageConverter, I concludes that although StringHttpMessageConverter has a ""DEFAULT_CHARSET"" public static member (with default 'ISO-8859-1'), it doesn't offer corresponding setter which leads to the embarrassing that I can't configure StringHttpMessageConverter in applicationContext.xml in a common \ way.  I suggest that StringHttpMessageConverter should work like FormHttpMessageConverter which contains a private non-static member Charset, and offers corresponding setter for configuration.  ---  **Affects:** 3.0.5  **Issue Links:** - #14122 Backport constructor accepting Charset in StringHttpMessageConverter, from Spring for Android to Spring Web. (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2011-06-25T02:43:29Z","2019-01-12T16:48:46Z"
"","13652","AbstractEnvironment should not call overridable method from constructor [SPR-9013]","**[Stefan Rufer](https://jira.spring.io/secure/ViewProfile.jspa?name=stefanrufer)** opened **[SPR-9013](https://jira.spring.io/browse/SPR-9013?redirect=false)** and commented  AbstractEnvironment calls the overridable method customizePropertySources from the default constructor. This gives subclasses a good chance to run into uninitialized member variables (see attached test case for an example).  ---  **Affects:** 3.1 GA  **Attachments:** - [CustomizedEnvironment.java](https://jira.spring.io/secure/attachment/19288/CustomizedEnvironment.java) (_486 bytes_) - [CustomizedEnvironmentTest.java](https://jira.spring.io/secure/attachment/19289/CustomizedEnvironmentTest.java) (_362 bytes_)  **Issue Links:** - #14288 Revisit AbstractEnvironment constructor invocation of protected #customizePropertySources (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7535e24deb91135b3349220ec566ced203a708c4  3 votes, 6 watchers","closed","in: core,","spring-projects-issues","2012-01-10T09:19:38Z","2019-01-11T22:22:02Z"
"","13518","DefaultAopProxyFactory: Make configurable, which interfaces are not considered user supplied. To better support code instrumentation from tools like Cobertura. [SPR-8877]","**[Stefan Ocke](https://jira.spring.io/secure/ViewProfile.jspa?name=stefanoc)** opened **[SPR-8877](https://jira.spring.io/browse/SPR-8877?redirect=false)** and commented  The current behavior of DefaultAopProxyFactory is to use dynamic proxy if the target has any interface other than SpringProxy. Only if the class has no interface, CGLIB is used.  When using Cobertura to measure code coverage, some instrumentation is applied to the beans. Especially, a marker interface is introduced. This changes the behavior of Spring AOP in the way, that in places, where CGLIB was used before, dynamic proxy is used.  The results are injection errors, since the proxy is not of appropriate type (... the type of the target class is required).  Looking for solutions, I found the following suggestions: - set proxy-target-class to true or - always use interfaces  However, in exisiting large projects, both of these solutions might imply a lot of changes and thus might not be applicable.  It would help, if there was a way to configure DefaultAopProxyFactory to not only ignore SpringProxy but also other interfaces (f.e. Cobertura marker interfaces) when making its CGLIB / dynamic proxy decision.  Currently, there is no easy way to to this. While it ist possible to configure the AopProxyFactory to be used in a ProxyFactory(Bean), there are many places in Spring code, where ProxyFactory is created by new() operator and there is no chance to set the AopProxyFactory.  Thus I would suggest - either a System Property to configure the interfaces to be ignored by DefaultAopProxyFactory - or a way to set a custom AopProxyFactory ""globally"" in the application context.  ---  **Issue Links:** - #8346 Add support for mixed, fine-grained JDK- and CGLIB-based proxying","closed","type: enhancement,","spring-projects-issues","2011-11-26T01:27:57Z","2019-01-11T15:10:13Z"
"","13724","Query Validation Groups in BindingResult [SPR-9086]","**[Stefan Haberl](https://jira.spring.io/secure/ViewProfile.jspa?name=birnbuazn)** opened **[SPR-9086](https://jira.spring.io/browse/SPR-9086?redirect=false)** and commented  It would be nice to be able to query the validation group that caused a bean validation to fail in the resulting BindingResult passed in to a Spring MVC controller method. Something a long the lines of  `@Validated`(Errors.class, Warnings.class) BindingResult result  and then in the method body  if (result.hasErrors(Warnings.class)) {...}  It would also be nice to get the bean validation result out of a single message, something like  List\ errors = result.getAllErrors(); ObjectError error = ... // get an error out of the list  and then  error.getValidationGroup()    ---  **Affects:** 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2012-02-02T00:18:42Z","2019-01-12T03:49:12Z"
"","13404","Spring tries to instantiate nested annotation with a @Component annotation [SPR-8761]","**[Stefan Gybas](https://jira.spring.io/secure/ViewProfile.jspa?name=sgybas)** opened **[SPR-8761](https://jira.spring.io/browse/SPR-8761?redirect=false)** and commented  When a component-scanned class has a nested annotation with a `@Component` annotation, Spring 3.1 RC1 tries to instantiate the nested annotation. For example:  ``` // the test passes if you remove this annotation @Component public class WithNestedAnnotation {      @Target({ ElementType.TYPE })     @Retention(RetentionPolicy.RUNTIME)     @Documented     @Component     public static @interface MyComponent {          String value() default """";     }  } ```  ``` @WithNestedAnnotation.MyComponent public class UsesAnnotation {  } ```  fails with  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.example.WithNestedAnnotation$MyComponent#0': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [com.example.WithNestedAnnotation$MyComponent]: Specified class is an interface 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:990) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:936) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:488) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:459) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:103) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) 	at org.springframework.test.context.support.DelegatingSmartContextLoader.loadContext(DelegatingSmartContextLoader.java:228) 	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:124) 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:148) 	... 24 more Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [com.example.WithNestedAnnotation$MyComponent]: Specified class is an interface 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:56) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:983) 	... 39 more ```  This works fine with Sping 3.0.6 so it's a regression in 3.1 RC1. When you move the `@Component` annotation from MyComponent to UsesAnnotation it also works with 3.1RC1.  Attached is a Maven/Eclipse project with a test that demonstrates the problem.   ---  **Affects:** 3.1 M2, 3.1 RC1  **Attachments:** - [NestedAnnotationTest.zip](https://jira.spring.io/secure/attachment/18896/NestedAnnotationTest.zip) (_5.97 kB_)","closed","in: core,","spring-projects-issues","2011-10-12T07:13:18Z","2012-06-19T03:39:41Z"
"","13369","Implement new method from ClassLoadHelper to make Spring work with Quartz 2.1 [SPR-8727]","**[Stefan Gybas](https://jira.spring.io/secure/ViewProfile.jspa?name=sgybas)** opened **[SPR-8727](https://jira.spring.io/browse/SPR-8727?redirect=false)** and commented  The method  ```  Class","closed","type: enhancement,","spring-projects-issues","2011-09-28T01:11:00Z","2019-01-11T14:04:44Z"
"","13080","AutowiredAnnotationBeanPostProcessor should ignore bridge methods when looking for annotations [SPR-8434]","**[Stefan Gybas](https://jira.spring.io/secure/ViewProfile.jspa?name=sgybas)** opened **[SPR-8434](https://jira.spring.io/browse/SPR-8434?redirect=false)** and commented  We are migrating a project from Java 5 to Java 6 and noticed that one integration test was failing because a dependency was not injected any longer.  The problem can be reproduced with a simple scenario: We have a package-visible base class for some services with an autowired dependency and a public getter and setter:  ``` abstract class AbstractService {      private Dependency dependency;      public Dependency getDependency() {         return dependency;     }      @Autowired     public void setDependency(Dependency dependency) {         this.dependency = dependency;     } } ```  Then he have a public sub class that gets component-scanned:  ``` @Component public class Service extends AbstractService { } ```  Our test basically looks like this:  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = { ""/applicationContext.xml"" }) public class DependencyInjectionTest {      @Autowired     private Service underTest;      @Test     public void testDependencyInjected() {         // this test passes when Service.java was compiled with Java 5         // but fails when compiled with Java 6         assertNotNull(underTest.getDependency());     } } ```  with a very simple application context that just enables annotation-config and does a package scan (see the attachment for a complete Maven/Eclipse project).  When we compile the project with Java 5 the test passes when run with Java 5 or Java 6. But when we compile the project with Java 6 (""-source 1.5 -target 1.5"") the test fails both under Java 5 and Java 6.  After investigating the byte code in Service.class we noticed that two bridge methods are generated by the Java 6 compiler. These methods are not generated by the Java 5 compiler:  ``` public com.example.Dependency com.example.Service.getDependency() (bridge: true) public void com.example.Service.setDependency(com.example.Dependency) (bridge: true) ```  AutowiredAnnotationBeanPostProcessor.buildAutowiringMetadata(Class clazz) uses ClassUtils.getMostSpecificMethod() in line 346 (current SVN) to determine if the method is defined in the class that is investigated (AbstractService in the example). The most specific method is the bridge method in Service.class when compiled with Java 6 but this method does not have the `@Autowired` annotation so the setter is never called.  A fix would be to replace ClassUtils.getMostSpecificMethod() with AopUtils.getMostSpecificMethod() to get the same results on Java 5 and Java 6. But this would cause a circular dependency between spring-aop and spring-beans and is probably not a high-performance solution.  We will change the visibility of AbstractService to public in our project to work around the problem. But I suggest to change Spring to deliver the same results on Java 5 and Java 6.  ---  **Affects:** 3.0.5, 3.1 M2  **Attachments:** - [DependencyTest.zip](https://jira.spring.io/secure/attachment/18326/DependencyTest.zip) (_6.13 kB_)  **Issue Links:** - #12555 Annotation based injection into non public base classes does not work (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-06-10T07:25:22Z","2019-01-12T16:48:49Z"
"","13242","ConcurrentModificationException in InjectionMetadata class [SPR-8598]","**[stas](https://jira.spring.io/secure/ViewProfile.jspa?name=stasgrom)** opened **[SPR-8598](https://jira.spring.io/browse/SPR-8598?redirect=false)** and commented  Hi. I am getting a ConcurrentModificationException exception in the Spring's InjectionMetadata class (located in the org.springframework.beans.factory.annotation package) when creating an instance of prototype bean in a multithreaded environment.  Here's the stack of the exception (only Spring portion of it):  ``` Thread [MaintenanceTasksJob] (Suspended (exception ConcurrentModificationException))                   LinkedHashMap$KeyIterator(LinkedHashMap$LinkedHashIterator).remove() line: 364 InjectionMetadata.checkConfigMembers(RootBeanDefinition) line: 72 AutowiredAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(RootBeanDefinition, Class, String) line: 216 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyMergedBeanDefinitionPostProcessors(RootBeanDefinition, Class, String) line: 789 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 487 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 450 DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 309 DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 189 ClassPathXmlApplicationContext(AbstractApplicationContext).getBean(String) line: 1044 ```  I think I know what's going on here. The AbstractAutowireCapableBeanFactory.doCreateBean() method (5th from the top of the stack) synchronizes on the bean definition object:  ``` synchronized (mbd.postProcessingLock) {   if (!mbd.postProcessed) {     applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);     mbd.postProcessed = true;   } } ```  However, two methods later, in the AutowiredAnnotationBeanPostProcessor.postProcessMe rgedBeanDefinition(), an instance of the InjectionMetadata class for the bean is fetched based on the bean class and not bean definition object, which means that instances of InjectionMetadata are cached per bean class. Therefore despite the fact that two threads cannot enter the same post processing section for the same bean instance, they can enter it for the same bean class and therefore will share the same InjectionMetadata instance. Thus in the next method:  ``` public void checkConfigMembers(RootBeanDefinition beanDefinition) {   for (Iterator it = this.injectedElements.iterator(); it.hasNext();) {     if (!beanDefinition.isExternallyManagedConfigMember(member))       beanDefinition.registerExternallyManagedConfigMember(member);     } else {       it.remove();     }   } } ```  The it.remove() will potentially throw the exception.  To summarize the problem: when defining two or more prototype beans based on the same class in a multithreaded environment, a ConcurrentModificationException may be thrown in the InjectionMetadata class.  Am I right in my analysis?  Thanks.   ---  **Affects:** 3.0.6, 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?113086-ConcurrentModificationException-in-InjectionMetadata-class  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18717/mylyn-context.zip) (_9.11 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a456a1a0e3ba2aa76ce37c6ccc77b7eb71119cf4","closed","in: core,","spring-projects-issues","2011-08-10T03:50:59Z","2012-06-19T03:39:48Z"
"","13388","Not able to use OpenSessionInViewFilter with Spring 3.0.5 [SPR-8746]","**[srikanth madarapu](https://jira.spring.io/secure/ViewProfile.jspa?name=smadarapu)** opened **[SPR-8746](https://jira.spring.io/browse/SPR-8746?redirect=false)** and commented  My app has been in production with Spring 2.5.6 for a while. Now I am trying to upgrade it to 3.0.5. The OpenSessionInViewFilter is not working as before.  I have made all the required updates (code and configuration) because of this upgrade (to 3.0.5). Upgraded spring-flex from 1.0.2 to 1.5.  \\contextConfigLocation\\classpath*:spring/*-context.xml\\              springSecurityFilterChain        org.springframework.web.filter.DelegatingFilterProxy                  hibernateFilter          		org.springframework.orm.hibernate3.support.OpenSessionInViewFilter             sessionFactoryBeanName    SessionFactory                  springSecurityFilterChain      /*      \    \hibernateFilter\      \/messagebroker/*\    \  \\\org.springframework.web.context.request.RequestContextListener\\  \\org.springframework.web.context.ContextLoaderListener\\  \\\flex.messaging.HttpFlexSession\\  \\admin\\org.springframework.web.servlet.DispatcherServlet\\1\\  \\download\\com.workscape.servlet.DownloadFileServlet\\\downloadAuditData.svc\\AuditInfoExportService\\\\trampolineService.svc\\TrampolineExportService\\\\downloadGroupEmployees.svc\\ExportGroupEmployeesService\\\1\\  \    \admin\    \/messagebroker/*\ \  \    \download\    \*.svc\ \  \\\\\20\\  \\403\\/error.jsp\\\\404\\/error.jsp\\\\500\\/error.jsp\\  The error I am getting is...  SEVERE: Servlet.service() for servlet [admin] in context with path [/dice] threw exception java.lang.IllegalStateException: Already value [org.springframework.orm.hibernate3.SessionHolder@24e6d224] for key [org.hibernate.impl.SessionFactoryImpl@4ffa5d1a] bound to thread [http-bio-9090-exec-4] at org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(TransactionSynchronizationManager.java:179) at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:183) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:368) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:100) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:35) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at com.workscape.admin.SecurityContextFilter.doFilter(SecurityContextFilter.java:45) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy66.doFilter(Unknown Source) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:79) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:169) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:185) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:151) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:269) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)  Look at my posts on the forums: http://forum.springsource.org/showthread.php?115586-Issues-with-OpenSessionInViewFilter-Flex. http://forum.springsource.org/showthread.php?115581-Issues-with-remoting-service-while-upgrading-from-Spring-2.5.6-to-3.0   ---  **Reference URL:** http://forum.springsource.org/showthread.php?115586-Issues-with-OpenSessionInViewFilter-Flex.  **Attachments:** - [WSOpenSessionInViewFilter.java](https://jira.spring.io/secure/attachment/18872/WSOpenSessionInViewFilter.java) (_3.71 kB_)","closed","in: core,","spring-projects-issues","2011-10-06T13:40:33Z","2019-01-12T16:37:20Z"
"","13490","default-lazy-init is not working with latest Spring org.springframework.core-3.1.0.RC1 [SPR-8848]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-8848](https://jira.spring.io/browse/SPR-8848?redirect=false)** and commented  When i was using spring-2.0.6.jar with default-lazy-init property set to true with the same environment, the lazy loading was working perfect with out any deployment error but with the latest Spring lazy loading is not working at all. I'm getting the following error.  java.lang.ClassNotFoundException: org.egov.pims.service.EisUtilService, we wont be having this particular class at Jboss loading time and non of the other beans is refers this bean definition in any of the applicationContext.  The main concern is this, the same code in the same environment works perfectly with spring-2.0.6.jar but it doesn't with spring 3.1.0.RC1  14:36:51,092 INFO  [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[/egi]] (MSC service thread 1-1) Initializing Spring root WebApplicationContext 14:36:51,094 INFO  [org.springframework.web.context.ContextLoader] (MSC service thread 1-1) Root WebApplicationContext: initialization started 14:36:51,198 INFO  [org.springframework.context.support.ClassPathXmlApplicationContext] (MSC service thread 1-1) Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@1961bac: startup date [Mon Nov 14 14:36:51 IST 2011]; root of context hierarchy 14:36:51,316 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from URL [vfs:/C:/Server/jboss-as-7.1.0.Alpha2-SNAPSHOT/standalone/deployments/egov.ear/lib/egijava.jar/org/egov/infstr/beanfactory/erpApplicationContext.xml] 14:36:53,370 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from URL [vfs:/C:/Server/jboss-as-7.1.0.Alpha2-SNAPSHOT/standalone/deployments/egov.ear/lib/mappings.jar/org/egov/infstr/beanfactory/erpApplicationContext.xml] 14:36:53,426 INFO  [org.springframework.beans.factory.support.DefaultListableBeanFactory] (MSC service thread 1-1) Overriding bean definition for bean 'erpApplicationContext': replacing [Generic bean: class [org.springframework.context.support.ClassPathXmlApplicationContext]; scope=; abstract=false; lazyInit=true; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [vfs:/C:/Server/jboss-as-7.1.0.Alpha2-SNAPSHOT/standalone/deployments/egov.ear/lib/egijava.jar/org/egov/infstr/beanfactory/erpApplicationContext.xml]] with [Generic bean: class [org.springframework.context.support.ClassPathXmlApplicationContext]; scope=; abstract=false; lazyInit=true; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [vfs:/C:/Server/jboss-as-7.1.0.Alpha2-SNAPSHOT/standalone/deployments/egov.ear/lib/mappings.jar/org/egov/infstr/beanfactory/erpApplicationContext.xml]] 14:37:50,957 INFO  [org.springframework.beans.factory.support.DefaultListableBeanFactory] (MSC service thread 1-1) Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@b08b13: defining beans [erpApplicationContext]; root of factory hierarchy 14:38:43,595 INFO  [org.springframework.context.support.ClassPathXmlApplicationContext] (MSC service thread 1-1) Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@491238: startup date [Mon Nov 14 14:38:43 IST 2011]; root of context hierarchy 14:38:43,597 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from class path resource [org/egov/infstr/beanfactory/globalApplicationContext.xml] 14:38:43,665 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from class path resource [org/egov/infstr/beanfactory/egiApplicationContext.xml] 14:38:43,699 INFO  [org.springframework.beans.factory.support.DefaultListableBeanFactory] (MSC service thread 1-1) Overriding bean definition for bean 'moduleDAO': replacing [Generic bean: class [org.egov.infstr.commons.dao.ModuleHibDao]; scope=prototype; abstract=false; lazyInit=true; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [org/egov/infstr/beanfactory/globalApplicationContext.xml]] with [Generic bean: class [org.egov.infstr.commons.dao.ModuleHibDao]; scope=prototype; abstract=false; lazyInit=true; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [org/egov/infstr/beanfactory/egiApplicationContext.xml]] 14:38:43,702 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from class path resource [org/egov/infstr/beanfactory/applicationContext-jcr.xml] 14:38:43,929 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from class path resource [org/egov/infstr/beanfactory/applicationContext-erpcollections.xml] 14:38:44,052 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from class path resource [org/egov/infstr/beanfactory/applicationContext-egf.xml] 14:38:44,242 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from class path resource [org/egov/infstr/beanfactory/applicationContext-pims.xml] 14:38:44,266 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from class path resource [org/egov/infstr/beanfactory/applicationContext-demand.xml] 14:40:42,921 INFO  [org.springframework.beans.factory.support.DefaultListableBeanFactory] (MSC service thread 1-1) Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@df8f81: defining beans [genericCommonService,rbacService,roleService,userService,boundaryService,boundaryTypeService,heirarchyTypeService,cityWebsiteService,commonsService,beanProvider,egovSessionFactory,persistenceService,sequenceGenerator,appConfigValuesDAO,reportService,scriptService,scriptExecutionService,stateService,userPersistanceService,eisService,genericDao,installmentDao,moduleDAO,workflowService,errorMailService,feedbackMailService,mailMessage,mailSender,customizedWorkFlowService,personalInformationService,employeeNomineeMasterService,drawingOfficerService,relationService,accountEntityService,egItemService,contractorService,projectCodeService,depositCodeService,advocateMasterService,pensionHeaderService,authRuleService,RuleInterceptorFilter,SetSessionVarFilter,boundaryDAO,boundaryTypeDAO,heirarchyTypeDAO,cityWebsiteDAO,userDao,departmentDao,actionDao,workflowTypeService,inboxComparator,workflowAdmin,moveBoundaryDelegate,favouriteService,repository,jcrSessionFactory,password,jcrTemplate,ocmList,ocmMapper,documentManagerService,collectionsNumberGenerator,receiptHeaderService,receiptPayeeDetailsService,receiptWorkflowService,collectionCommon,collectionsUtil,financialsUtil,collectionIntegrationService,PTCollectionsInterface,TLCollectionsInterface,HLCollectionsInterface,HWLCollectionsInterface,WWLCollectionsInterface,VETLCollectionsInterface,monthlyDemandService,quarterlyDemandService,yearlyDemandService,halfyearlyDemandService,LECollectionsInterface,actualDemandService,installmentService,demandReasonService,egDemandReasonMasterService,demandDetailService,voucherCreator,egovCommon,instrumentService,instrumentHeaderService,instrumentTypeService,instrumentVouherService,bankreconciliationService,contraService,contraWorkflowService,contrajournalService,vdPersitSer,bankReconService,instrumentOtherDetailsService,eisManager,eisCommonsManager,searchPositionService,designationDao,personalInfoDao,positionService,demandDao,billDao]; root of factory hierarchy 14:40:43,012 INFO  [org.springframework.web.context.support.XmlWebApplicationContext] (MSC service thread 1-1) Refreshing Root WebApplicationContext: startup date [Mon Nov 14 14:40:43 IST 2011]; parent: ApplicationContext 'erpApplicationContext' 14:40:43,018 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from ServletContext resource [/WEB-INF/security.xml] 14:40:43,072 INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] (MSC service thread 1-1) Loading XML bean definitions from ServletContext resource [/WEB-INF/erpInboxContext.xml] 14:40:43,182 INFO  [org.springframework.beans.factory.support.DefaultListableBeanFactory] (MSC service thread 1-1) Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1436f66: defining beans [filterChainProxy,httpSessionContextIntegrationFilter,logoutFilter,simpleSSOFilter,authenticationProcessingFilter,securityContextHolderAwareRequestFilter,rememberMeProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor,accessDecisionManager,rememberMeServices,authenticationManager,concurrentSessionController,daoAuthenticationProvider,anonymousAuthenticationProvider,rememberMeAuthenticationProvider,passwordEncoder,loggerListener,methodSecurityInterceptor,channelProcessingFilter,channelDecisionManager,userDetailsService,egovFilterInvocationDefinitionSource,businessAccessDecisionManager,afterInvocationManager,afterAclRead,administrationPermission,readPermission,writePermission,deletePermission,inboxService,defaultWorkflowTypeService]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@df8f81 14:40:43,188 INFO  [org.springframework.web.context.ContextLoader] (MSC service thread 1-1) Root WebApplicationContext: initialization completed in 232094 ms 14:40:43,542 INFO  [org.displaytag.filter.ResponseOverrideFilter] (MSC service thread 1-1) Filter initialized. Response buffering is enabled 14:42:08,976 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[/egi]] (MSC service thread 1-1) Exception starting filter acegi_securityFilter: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.egov.pims.service.EisUtilService] for bean with name 'eisService' defined in class path resource [org/egov/infstr/beanfactory/globalApplicationContext.xml]; nested exception is java.lang.ClassNotFoundException: org.egov.pims.service.EisUtilService from [Module ""deployment.egov.ear.egiadmin.war:main"" from Service Module Loader] at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1262) [org.springframework.beans-3.1.0.RC1.jar:] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:579) [org.springframework.beans-3.1.0.RC1.jar:] at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1331) [org.springframework.beans-3.1.0.RC1.jar:] at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:317) [org.springframework.beans-3.1.0.RC1.jar:] at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:396) [org.springframework.beans-3.1.0.RC1.jar:] at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1164) [org.springframework.context-3.1.0.RC1.jar:] at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:275) [org.springframework.beans-3.1.0.RC1.jar:] at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:279) [org.springframework.beans-3.1.0.RC1.jar:] at org.acegisecurity.util.FilterToBeanProxy.doInit(FilterToBeanProxy.java:142) [acegi-security-1.0.5.jar:] at org.acegisecurity.util.FilterToBeanProxy.init(FilterToBeanProxy.java:189) [acegi-security-1.0.5.jar:] at org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:447) [jbossweb-7.0.2.Final.jar:7.1.0.Alpha2-SNAPSHOT] at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:3269) [jbossweb-7.0.2.Final.jar:7.1.0.Alpha2-SNAPSHOT] at org.apache.catalina.core.StandardContext.start(StandardContext.java:3860) [jbossweb-7.0.2.Final.jar:7.1.0.Alpha2-SNAPSHOT] at org.jboss.as.web.deployment.WebDeploymentService.start(WebDeploymentService.java:81) [jboss-as-web-7.1.0.Alpha2-SNAPSHOT.jar:7.1.0.Alpha2-SNAPSHOT] at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1824) at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1759) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) [:1.6.0] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) [:1.6.0] at java.lang.Thread.run(Thread.java:619) [:1.6.0] Caused by: java.lang.ClassNotFoundException: org.egov.pims.service.EisUtilService from [Module ""deployment.egov.ear.egiadmin.war:main"" from Service Module Loader] at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:191) at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:361) at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:310) at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:103) at org.springframework.util.ClassUtils.forName(ClassUtils.java:257) [org.springframework.core-3.1.0.RC1.jar:] at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:417) [org.springframework.beans-3.1.0.RC1.jar:] at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass(AbstractBeanFactory.java:1283) [org.springframework.beans-3.1.0.RC1.jar:] at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1254) [org.springframework.beans-3.1.0.RC1.jar:]  The schema which used for all my spring xml as follows  \    and each and every bean definition with lazy-init=true  I hope this is a Major Bug ... We are really stuck of Spring migration with our new Jboss AS 7.. Please let me know if you guys need know more specific information.    ---  **Affects:** 3.1 RC1","closed","in: core,","spring-projects-issues","2011-11-14T01:23:35Z","2019-01-11T15:03:07Z"
"","13570","""Request method 'PUT' not supported"" error message when switching from 3.0.6.RELEASE to 3.1.0.RC2 with webmvc Restful access [SPR-8930]","**[Sorriso](https://jira.spring.io/secure/ViewProfile.jspa?name=sorriso)** opened **[SPR-8930](https://jira.spring.io/browse/SPR-8930?redirect=false)** and commented  the full code source having the issue can be found here:  https://github.com/sorriso/TodoSRV  this is a small application architecture sample (still under improvement / development) of a full todos application with a RIA javascript application on client side (using sproutcore 2.0, jquery) and a spring Resful server (using mybatis, c3p0 and mysql) with spring security  - database must be create first - just change springframework version from 3.0.6.RELEASE to 3.1.0.RC2 (and vice versa) in pom.xml file to (de)activate error msg - launch the application on a tomcat 7 server (via eclipse by example) - open the url http://localhost:8080/TodoSRV - login with user / user -> if exists todos item list appears (GET command allowed)   if not create 2 or 3 todo item (POST command allowed)   AND REFRESH the page in order to avoid a bug (who have no link with this issue) who duplicate todo items - mark as ""done"" a todo item -> error in webInspector / firebug console -> POST command not allowed   (this action works fine with 3.0.6.RELEASE) - if a todo item is already marked as done, clear action works fine (DELETED command allowed)  filter hiddenHttpMethodFilter have been added in web.xml file   ---  **Affects:** 3.1 RC2","closed","status: invalid,","spring-projects-issues","2011-12-15T03:53:12Z","2019-01-12T05:29:29Z"
"","13825","support for hibernate's 4 integrators as spring beans [SPR-9187]","**[Slawek Garwol](https://jira.spring.io/secure/ViewProfile.jspa?name=wulgar)** opened **[SPR-9187](https://jira.spring.io/browse/SPR-9187?redirect=false)** and commented  Hibernate 4 introduced new way of integrating things (which affects the way you register event listeners). To integrate with hibernate user must create class that implements org.hibernate.integrator.spi.Integrator and provide information about that class in META-INF/services/org.hibernate.integrator.spi.Integrator file (you cal look at EnversIntegrator to see how it works).  The problem is that this class is instantiated by newInstance and there is no way to make it spring bean.    ---  **Affects:** 3.1.1  6 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-02-29T09:49:21Z","2019-01-12T03:49:02Z"
"","13634","Child web application context could not access the property-placeholder defined in parent application context [SPR-8994]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-8994](https://jira.spring.io/browse/SPR-8994?redirect=false)** and commented  If the properties files are defined using  at parent context, the child application context (typically the web application context) could not access it.  e.g. In ServiceImpl defined in parent application context       @Value(""${testString}"") could refer to the property value in the properties file           In WebController, defined in child web application context           @Value(""${testString}"") would returns null  However, everything works fine if refer to the property using explicit bean ID      i.e.           and @Value(""#{someProperties.testString}"")    ---  **Affects:** 3.0.7, 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-01-05T02:34:04Z","2012-02-02T00:38:28Z"
"","13400","embeddedValueResolvers from parent BeanFactory are not used during @Value annotation resolution [SPR-8758]","**[Sherdil Now](https://jira.spring.io/secure/ViewProfile.jspa?name=sherdilnow)** opened **[SPR-8758](https://jira.spring.io/browse/SPR-8758?redirect=false)** and commented  org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(String)implementation does not use embeddedValueResolvers from parent BeanFactory during `@Value` resolution.      public String resolveEmbeddedValue(String value) {     	String result = value;     	for (StringValueResolver resolver : this.embeddedValueResolvers) {     		result = resolver.resolveStringValue(result);     	}     	return result;     }  I expect `@Value` to behave same as `@Autowired` in this regard and resolve the value from parent BeanFactory if available.   ---  **Affects:** 3.0.6  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-10-11T18:14:02Z","2019-01-12T02:37:20Z"
"","13000","MVC Controllers proxied with JDK Proxy (using ) are not resolved properly [SPR-8353]","**[Shai Yallin](https://jira.spring.io/secure/ViewProfile.jspa?name=electricmonk)** opened **[SPR-8353](https://jira.spring.io/browse/SPR-8353?redirect=false)** and commented  When a `@Controller` implements a single interface, the  declaration automatically creates a JDK proxy for it, instead of a CGLib proxy. While this is mostly a desired behavior, i.e. when using AOP in a single system where the business logic is hidden behind an interface, it creates a problem if the controller implements a utility interface, such as ApplicationContextAware, or is a Scala class (all scala classes automatically extend the ScalaObject trait, which translates into an interface at the bytecode level).  Specifically, the problem is in AnnotationMethodHandlerAdapter#getMethodResolver, which calls ClassUtils.getUserClass(handler). This utility method does not check whether handler is a proxy. The solution should be simple - check for proxy and extract the target class, if needed.  Note that this prevents usage of Spring MVC Scala Controllers in an application where Spring AOP is also used, which is problematic to say the least.   ---  **Affects:** 3.0.5  1 votes, 2 watchers","closed","","spring-projects-issues","2011-05-19T07:34:37Z","2019-01-13T21:42:49Z"
"","13615","JSR-303 Validation picks message codes from different locations [SPR-8975]","**[Shahed Moolji](https://jira.spring.io/secure/ViewProfile.jspa?name=shahed100)** opened **[SPR-8975](https://jira.spring.io/browse/SPR-8975?redirect=false)** and commented  I am using JSR 303 annotation driven validations to validate data bindings in my Controller.  For certain annotations like `@Size` and `@NotNull`, Spring Form error tags display the error message text from the default messageSource bean. For others, like `@Digits` the messages are resolved from ValidationMessages.properties.  This happen irrespective of whether I configure or omit the configuration below in my Web Context.           	                   ---  **Affects:** 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2011-12-30T03:42:30Z","2019-01-12T02:36:21Z"
"","13148","@Configurable does not work if method with configured classes as parameter exists [SPR-8502]","**[Setya Nugroho D](https://jira.spring.io/secure/ViewProfile.jspa?name=setya)** opened **[SPR-8502](https://jira.spring.io/browse/SPR-8502?redirect=false)** and commented  To reproduce the problem, just run 'TestServiceInjection.java' unit test in the Eclipse project attachment to make it failed, then comment out method 'someMethod' in the test to make it passed.  ---  **Affects:** 3.0.5, 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?110338-Strange-problem-with-Configurable  **Attachments:** - [configurable.tar.bz2](https://jira.spring.io/secure/attachment/18405/configurable.tar.bz2) (_3.35 MB_) - [log_when_test_fails.log](https://jira.spring.io/secure/attachment/18413/log_when_test_fails.log) (_78.16 kB_) - [log_when_test_passes.log](https://jira.spring.io/secure/attachment/18414/log_when_test_passes.log) (_78.28 kB_)  **Issue Links:** - #13167 `@Entity` objects are not enhanced by the load time weaver in certain situations  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2011-06-30T21:21:48Z","2019-01-13T07:08:32Z"
"","13308","Please add jquery validation support, as is done in .NET MVC 3 [SPR-8666]","**[Sergey Kling](https://jira.spring.io/secure/ViewProfile.jspa?name=kwsergio)** opened **[SPR-8666](https://jira.spring.io/browse/SPR-8666?redirect=false)** and commented  Spring is already fully supported JSR303, but it would be nice if it were possible to automatically generate a javascript code to support the validation on the client side. For example we can introduce an extra tag , and the appropriate conditions for the validation correctness of fields can be taken from JSR303 annotations of model's object. This solution would reduce the cost of implement a client-side validation, as well as virtually eliminate the cost of maintaining the relevance of jsp pages and of source codes   ---  **Affects:** 3.0.6","closed","type: enhancement,","spring-projects-issues","2011-09-03T11:49:30Z","2015-09-22T18:20:32Z"
"","13069","Transaction timeout in JBoss caused deadlock with spring transaction manager [SPR-8421]","**[Sergey Astakhov](https://jira.spring.io/secure/ViewProfile.jspa?name=sergeyastakhov)** opened **[SPR-8421](https://jira.spring.io/browse/SPR-8421?redirect=false)** and commented  Deadlock scenario:  1. Transaction started. At some point, jdbc connection allocated from poll and registered as transaction resource. 2. After timeout event occured, JBoss try to rollback this transaction. 3. In process of rolling back transaction, reaper process try to get lock on connection to do rollback and stopped at this point in waiting. 4. Due to cancelling state of the transaction, exception is rised in main process of transaction. 5. Spring catched this exception and invokes rollback to transaction. 6. Inside jboss transaction manager there is synchronized method for making transaction abort, so this rollback invocation is waiting another thread to complete. 7. At final: JBoss hold synchronized lock on abort method, but wait for releasing lock on connection. Main process hold lock on connection, but wait for releasing lock on abort method. Deadlock state.  How this can be fixed:  In method org.springframework.transaction.jta.JtaTransactionManager#doRollback you can check transaction state, and if it is already in state Status.STATUS_ROLLING_BACK - just do nothing.    ---  **Affects:** 3.0.5  **Attachments:** - [deadlock.txt](https://jira.spring.io/secure/attachment/18316/deadlock.txt) (_4.89 kB_)","closed","status: declined,","spring-projects-issues","2011-06-08T05:00:07Z","2019-01-12T16:25:26Z"
"","13505","Add methods to RequestContext to resolve URLs relative to servlet path [SPR-8863]","**[Sergey Alaev](https://jira.spring.io/secure/ViewProfile.jspa?name=scf37)** opened **[SPR-8863](https://jira.spring.io/browse/SPR-8863?redirect=false)** and commented  AFAIK currently there is no simple way to reference static resources from templates _relative to servlet_  Example: There is a file WEB-INF/app/css/main.css which belongs to MVC servlet 'app' thus it is static resource that belongs to serlvet 'app'  It could be good to be able to write something like  ``` ${requestContext.contextPath}${requestContext.servletPath}/css/main.css ```  or even  ``` ${requestContext.getServletUrl('css/main.css')} ```  to reference main.css without mentioning servlet path (it can change) or using relative paths (not really helpful in case of REST-like URLs AKA /webapp/app/item/1/)   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f98f77c3e4069b6b0762285d0e99306a25cd5c2","closed","type: enhancement,","spring-projects-issues","2011-11-21T05:20:51Z","2012-06-19T03:39:32Z"
"","13554","URL containing ""."" Dot truncates the content that follows the last dot. [SPR-8914]","**[Sergey A. Razin](https://jira.spring.io/secure/ViewProfile.jspa?name=cepega)** opened **[SPR-8914](https://jira.spring.io/browse/SPR-8914?redirect=false)** and commented  Hello!  Was not sure how to title it but it all boils down to that or rather some view locator related issue.  If URI does not contain ""."" no problem. Correct controller is being picked and view returned.  URL Example: http://\:\/testResource/id.name:role  Controller (very typical):  ```java @RequestMapping(method = RequestMethod.GET, value = ""/testResource/{id}"") public ModelAndView getResource(final HttpServletRequest request,         @PathVariable(""id"") final String id, final RequestMetadata requestMD) throws Exception ```  What will appear in ""id"" (considering example above) is id = id (name:role will be truncated).  Issue #1: Since information provided does not match anything that's available on the backend (after all only ""id"" as content made to the controller) HTTP error with some JSON body (view) will be returned, but instead HTTP 500 being returned indicating that view can not be located. Is there a confusion that causes view not be located?  ``` javax.servlet.ServletException: Could not resolve view with name 'defaultView' in servlet with name 'mnsvc' org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1139) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:927) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:874) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:779) javax.servlet.http.HttpServlet.service(HttpServlet.java:621) javax.servlet.http.HttpServlet.service(HttpServlet.java:722) ```  Workaround (not acceptable): The behavior can be corrected to desired by adding trailing ""."" or ""/"", but certainly not the desired solution.  Next I have tried manipulating DefaultAnnotationHandlerMapping considering there could be confusion in patterns to use.  ```xml       ```  Above does address the issue and now id = id.name:role, but again problem with the view. The same 500 error being returned. How can I address view related issue? If there is an issue using the right pattern (considering ""/users"" should be registered as ""/users.*"" and ""/users/"" too) I am assuming that it should be covered by introducing the DefaultAnnotationHandler Mapping and disabling useDefaultSuffixPattern, and based on my understanding it seems to me it is but (and filing as such).   ---  **Affects:** 3.1 RC2","closed","status: declined,","spring-projects-issues","2011-12-12T18:57:55Z","2019-01-12T16:37:09Z"
"","13700","AnnotationBeanConfigurerAspect doesn't get properly initialized if load-time-weaver element appears before component-scan element. [SPR-9061]","**[Scott Van Wart](https://jira.spring.io/secure/ViewProfile.jspa?name=silvaran)** opened **[SPR-9061](https://jira.spring.io/browse/SPR-9061?redirect=false)** and commented  The first few lines of my context.xml file are now as follows:                       While setting up and troubleshooting AOP with AspectJ, load-time weaving (using TomcatInstrumentableClassLoader) and `@Configurable` beans for instantiation interception and autowiring, I originally had the context:load-time-weaver element appearing after context:component-scan.  In this case, org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect would be instantiated immediately when my first `@Configurable` bean was instantiated.  org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(Object) would get called, but this.beanFactory wouldn't have been initialized, so `@Configurable` initialization wouldn't work.  Moving context:load-time-weaver before context:component-scan seemed to fix this, though it took me quite some time to track down the issue.  On a related note, is there a reason why an improperly initialized AnnotationBeanConfigurerAspect only omits a debug log statement rather than failing fast?  Can I suggest it throw an exception instead?   ---  **Affects:** 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2012-01-26T05:47:06Z","2019-01-12T02:35:55Z"
"","13399","Exception during SpringSessionSynchronization.aftercompletion() results in IllegalStateException/SessionHolder never unbound from thread [SPR-8757]","**[Scott Hart](https://jira.spring.io/secure/ViewProfile.jspa?name=alantor001)** opened **[SPR-8757](https://jira.spring.io/browse/SPR-8757?redirect=false)** and commented  This is my first time reporting an issue, so please be understanding about any glaring warts in my report.  If an exception is thrown from the SessionImplementor within the SpringSessionSynchronization.afterCompletion(int status) method while rolling back due to an unrelated exception, it results in the SessionHolder never being marked as no longer synchronized with the transaction, which in turn results in the SessionHolder never being unbound from the thread.  This causes an IllegalStateException when attempting to use the session for the remainder of the request, and more importantly causes a IllegalTransactionStateException: Pre-bound JDBC Connection found! on every subsequent reuse of the thread until the platform/web container is restarted.  I have seen exceptions be thrown from SessionImplementor.afterTransactionCompletion(...) on line 229 and Session.clear() on line 243 on the SpringSessionSynchronization class, and either one causes the issue.  After considerable time spent reproducing the stack track so I could reliably reproduce the issue, I was able to isolate and fix the problem (or at least the symptoms I was fighting with). Attached you will find code that allows the SessionHolder to be correctly unbound, as well as a detailed stack-trace of when the issue was reproduced.    ---  **Affects:** 3.0.5, 3.1 GA  **Attachments:** - [SpringSessionSynchronization_afterCompletion_codefix.txt](https://jira.spring.io/secure/attachment/18892/SpringSessionSynchronization_afterCompletion_codefix.txt) (_1.59 kB_) - [SpringSessionSynchronization_afterCompletion_stacktrace.txt](https://jira.spring.io/secure/attachment/18891/SpringSessionSynchronization_afterCompletion_stacktrace.txt) (_67.63 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3ea0cf36bc778a46127c20d9d12da921baa237d7, https://github.com/spring-projects/spring-framework/commit/8d83f6966ea52d35e10744c50494415264b40c76, https://github.com/spring-projects/spring-framework/commit/07ddedd7bf50c1015ae7fe7fd74abbf77df693e3  **Backported to:** [3.0.7](https://github.com/spring-projects/spring-framework/milestone/74?closed=1)  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2011-10-11T10:11:12Z","2012-06-19T03:39:15Z"
"","13591","@Controller combined with @Transactional does not work on a class that implements a java interface [SPR-8951]","**[Scott Harrison](https://jira.spring.io/secure/ViewProfile.jspa?name=smharris)** opened **[SPR-8951](https://jira.spring.io/browse/SPR-8951?redirect=false)** and commented  When an `@Transactional` annotation is added to a controller with an `@Controller` annotation that implements a java interface, no URL paths are identified for the controller.  If either the `@Transactional` annotation is removed, or the interface implementation is removed the URL paths are identified.   ---  **Affects:** 3.1 GA  **Attachments:** - [SPR-8951.zip](https://jira.spring.io/secure/attachment/19430/SPR-8951.zip) (_9.16 kB_)","closed","in: core,","spring-projects-issues","2011-12-20T15:23:51Z","2019-01-11T14:32:35Z"
"","13718","JobDetailFactoryBean missing properties to set description and durability on JobDetail [SPR-9080]","**[Scott Coldwell](https://jira.spring.io/secure/ViewProfile.jspa?name=scoldwell)** opened **[SPR-9080](https://jira.spring.io/browse/SPR-9080?redirect=false)** and commented  When changing to Quartz 2.x we switched to using JobDetailFactoryBean instead of JobDetailBean (as noted in #12923).  Along with this change we realized that JobDetailFactoryBean doesn't include properties for setting the description or durability that was previously available with JobDetailBean (since it extended JobDetail itself).  As a workaround we have created our own copy of JobDetailFactoryBean which sets these properties correctly.  I would be glad to submit a patch or fix, I just need to know the preferred method of doing so since I haven't contributed to spring before.  ---  **Issue Links:** - #15401 Spring + Quartz 2.2.0 Integration is Inconsistent  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f367619b0c4ca89d6573f4f8ffa0e0ee61bd127a","closed","type: bug,","spring-projects-issues","2012-01-31T15:39:16Z","2019-01-11T22:27:32Z"
"","13192","Introduce ConfigurableEnvironment#addActiveProfile(String) [SPR-8548]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-8548](https://jira.spring.io/browse/SPR-8548?redirect=false)** and commented  With ConfigurableEnvironment, it is currently annoying to activate additional profile.  You must get the array of active profiles, augment that array, and set the new array back on the environment.  If there are ever multiple threads working with ConfigurableEnvironment, it's possible to have a timing issue and changes lost.  I would like to see an addActiveProfile method added to ConfigurableEnvironment.  ``` ConfigurableEnvironment#addActiveProfile(String... activeProfiles) ```    ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-07-20T09:04:41Z","2012-06-19T03:39:54Z"
"","12922","Declarative registration for ApplicationContextInitializer [SPR-8274]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-8274](https://jira.spring.io/browse/SPR-8274?redirect=false)** and commented  We need to be able to augment the application environment when our library is deployed in an application.  Currently, we use an ApplicationContextInitializer that must be registered in web.xml for every application that wishes to utilize.  We would like to remove the need to register the initializer in web.xml.  An ApplicationContextInitializer should be automatically discoverable without requiring manual user registration.  I propose we use `classpath*:META-INF/spring.bootstrap` to register via the class path.  Inside this file:  ``` initializer=com.example.MyApplicationContextInitializer ```  This file can also be used for other bootstrapping concerns in the future.  ---  **Affects:** 3.1 M1  **Issue Links:** - #12328 Support configuring Servlet container in Spring using Servlet 3.0 programmatic config (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2011-04-25T08:10:00Z","2019-01-11T12:54:59Z"
"","13499","@DirtiesContext does not destroy all cached singleton beans [SPR-8857]","**[Saurabh Chandra](https://jira.spring.io/secure/ViewProfile.jspa?name=saurabh.chandra)** opened **[SPR-8857](https://jira.spring.io/browse/SPR-8857?redirect=false)** and commented  Data from one test having data-source as H2 (in-memory database) seems to live on for the next test class. This persists even after using `@DirtiesContext` at class or method level.  Currently we have to clear any data from H2 before every a test.  **``@DirtiesContext`` should clear all that is bound to the context (including data-source).**  If it might help we are using JUnit 4.8.1.  ---  **Issue Links:** - #10532 Allow for concurrent test execution in the TestContext framework  5 votes, 9 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-11-17T23:06:03Z","2021-03-22T12:56:49Z"
"","13496","Introduce mechanism for registering default TELs if a custom TEL is registered via @TestExecutionListeners [SPR-8854]","**[Saurabh Chandra](https://jira.spring.io/secure/ViewProfile.jspa?name=saurabh.chandra)** opened **[SPR-8854](https://jira.spring.io/browse/SPR-8854?redirect=false)** and commented  #### Status Quo  As of Spring Framework 3.2, the `TestExecutionListener` implementations `ServletTestExecutionListener` `DependencyInjectionTestExecutionListener`, `DirtiesContextTestExecutionListener`, and `TransactionalTestExecutionListener` are automatically registered by default.  However, if a custom `TestExecutionListener` is registered via `@TestExecutionListeners` then the defaults will **not** be registered. In most common testing scenarios, this effectively forces the user to manually declare all default listeners in addition to any custom listeners, for example:  ``` @TestExecutionListeners(   {     MyCustomTestExecutionListener.class,     ServletTestExecutionListener.class,     DependencyInjectionTestExecutionListener.class,     DirtiesContextTestExecutionListener.class,     TransactionalTestExecutionListener.class   } ) ```  The problem with this approach is that it requires that the user know exactly which listeners are registered by default. Moreover, this set can change from release to release -- for example, `ServletTestExecutionListener` was added in release 3.2.  #### Proposal  Provide a mechanism for instructing the TestContext framework to register all default `TestExecutionListeners` in addition to an explicitly configured custom `TestExecutionListener`.  This could be achieved via a new boolean flag in `@TestExecutionListeners`. Alternatively, an enum could be introduced that specifies how defaults should be handled -- for example, prepended to custom listeners, appended to customer listeners, or excluded (i.e., the current behavior).  If this proposal is not implemented, it should at least be clearly documented in both Javadoc and the reference manual that the defaults are not prepended by default when specifying a custom `TestExecutionListener`.  ---  **Affects:** 3.0 GA  **Issue Links:** - [SEC-2587](https://jira.spring.io/browse/SEC-2587) Improvements in Spring Test (_**""is depended on by""**_) - #16699 Document support for merging custom TELs with default TELs in the reference manual (_**""is depended on by""**_) - #16092 Introduce mechanism for automatic discovery of default TestExecutionListeners  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66250b1f8ec044b813e5ea8b96fbdf0af250f55c  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-11-17T02:33:01Z","2019-01-11T15:01:28Z"
"","13677","Provide a way to override the ReflectiveMethodResolver so that subclasses can provide thier own static methods [SPR-9038]","**[Satyapal Reddy](https://jira.spring.io/secure/ViewProfile.jspa?name=sreddy)** opened **[SPR-9038](https://jira.spring.io/browse/SPR-9038?redirect=false)** and commented  (I discussed this with Andy Clement on email)  We want to use a set of static methods declared on set of classes to be used as part of the expression evaluation. These methods are not declared on the rootObject being passed to Expression.getValue method.  One solution is to add our own MethodResolver to the list of resolvers on the StandardEvaluationContext. However doing that involves pretty much replicating the entire code of ReflectiveMethodResolver (except where we get methods from type) and then since compareArguments and compareArgumentsVarargs methods on ReflectionHelper are not public and also ReflectiveMethodExecutor class is not public, we need to duplicate lot of code.  However if ReflectiveMethodResolver could call a protected method getMethods(type), a subclass could just override it and provide its own static methods.  I am attaching the updated class as well as a Junit test case.  As we are using 3.0.5 version a backport would be great.   ---  **Affects:** 3.0.5  **Attachments:** - [ReflectiveMethodResolver.java](https://jira.spring.io/secure/attachment/19321/ReflectiveMethodResolver.java) (_6.18 kB_) - [SpELTest.java](https://jira.spring.io/secure/attachment/19322/SpELTest.java) (_1.97 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90bed9718f17bfd8f3d9dbe6cd2b3cf7ed2e6573","closed","type: enhancement,","spring-projects-issues","2012-01-18T23:08:27Z","2012-06-19T03:39:31Z"
"","13373","ConfigurationClassBeanDefinitionReader.checkConfigurationClassCandidate ignores the metadataReaderFactory argument [SPR-8731]","**[Sandu Turcan](https://jira.spring.io/secure/ViewProfile.jspa?name=alex322)** opened **[SPR-8731](https://jira.spring.io/browse/SPR-8731?redirect=false)** and commented  I'm trying to use JavaConfig with my own annotations by implementing a MetadataReaderFactory, which translates my annotations into standard Spring. Unfortunately the metadataReaderFactory argument gets ignored by checkConfigurationClassCandidate:  ```java if (beanDef instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) beanDef).hasBeanClass()) {     metadata = new StandardAnnotationMetadata(((AbstractBeanDefinition) beanDef).getBeanClass()); } ```  It seems to be an optimization to avoid unnecessary class lookups but it only works when the metadataReaderFactory creates instances of StandardMetadata.  In 3.1 the code moved to ConfigurationClassUtils.checkConfigurationClassCandidate   ---  **Affects:** 3.0.6","closed","in: core,","spring-projects-issues","2011-09-28T12:28:22Z","2019-01-11T14:04:01Z"
"","12985","Constructor sets the source incorrectly in org.springframework.beans.PropertyValue [SPR-8337]","**[Sandu Turcan](https://jira.spring.io/secure/ViewProfile.jspa?name=alex322)** opened **[SPR-8337](https://jira.spring.io/browse/SPR-8337?redirect=false)** and commented  I'm using my own document loader to preserve the line numbers but source information is not available in PropertyValue instances. I tracked down the problem to PropertyValue code. PropertyValue defines a field named 'source' and uses it instead of the one inherited from BeanMetadataAttributeAccessor. As a result when the beandefinition is merged and PropertyValues are cloned the source is lost. Line 84 in PropertyValue.java:  ``` this.source = original.getSource(); ```  should be  ``` this.setSource(original.getSource()); ```  or the same as line 104, which is:  ``` this.source = original; ```  I'm not sure which one is right, I'd prefer the first one.  ---  **Issue Links:** - #10462 PropertyOverrideConfigurer ignores some invalid keys but not others  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)","closed","in: core,","spring-projects-issues","2011-05-13T14:42:02Z","2019-01-11T12:59:11Z"
"","13602","Bean configuration behaviour in detecting Locale values changed [SPR-8962]","**[Sandro Ruch](https://jira.spring.io/secure/ViewProfile.jspa?name=sruch)** opened **[SPR-8962](https://jira.spring.io/browse/SPR-8962?redirect=false)** and commented  Original configuration:  ... \ \ \de\ \fr\ \it\ \ \ ...  Bean method: public void setAvailableLocales(Collection\ availableLocales)  This worked fine in all Spring Version bellow 3.1. Since Spring 3.1 we got an error saying: Failed to convert property value of type 'java.util.LinkedHashSet' to required type 'java.util.Collection' for property 'availableLocales'; nested exception is java.lang.ClassCastException: java.util.Locale cannot be cast to java.lang.String  After some investigation it was clear, that Spring changed the behaviour in ""detecting"" the correct values during configuration phase. The object injected has already a LinkedHashSet with Locale as keys... Within the setAvailableLocales the code is looping over a collection of Strings and there is the error. The code expects to get a Collection of Strings and receives instead a Collection of converted Locales...  ---  **Affects:** 3.1 GA  **Issue Links:** - #13604 Property wrongly converted if field and setter do not match","closed","in: core,","spring-projects-issues","2011-12-27T04:42:05Z","2019-01-11T14:31:30Z"
"","13441","@Qualifier to support expressions like @Value [SPR-8799]","**[Sandro Ruch](https://jira.spring.io/secure/ViewProfile.jspa?name=sruch)** opened **[SPR-8799](https://jira.spring.io/browse/SPR-8799?redirect=false)** and commented  It may be useful to support expressions in the `@Qualifier` annotation as they are in the `@Value` annotation.   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?116301-Qualifier-and-PropertyPlaceholder","closed","type: enhancement,","spring-projects-issues","2011-10-24T14:13:46Z","2012-12-15T14:33:04Z"
"","13286","ReflectionUtils should find methods with compatible argument types [SPR-8644]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8644](https://jira.spring.io/browse/SPR-8644?redirect=false)** and commented  #### Status Quo  `ReflectionUtils.findMethod(Class, String, Class...)` currently only finds methods with exact matches for supplied the argument types. `findMethod()` also does not find methods that accept variable arguments (see `ReflectionUtilsTests.findMethodWithVarArgs()` for an example of a failing test).  `MethodInvoker` on the other hand finds methods with compatible argument types.  As an aside, `invokeMethod(Object, String, Object...)` in `ReflectionTestUtils` could not be implemented using `ReflectionUtils` due to these limitations.  #### Deliverable  Either modify `ReflectionUtils.findMethod(Class, String, Class...)` or introduce a new method in `ReflectionUtils` to provide support for finding methods with _compatible_ argument lists, specifically:  1. for methods that accepts var-args    - for example, a call to `findMethod(clazz, ""add"", int.class, int.class, int.class)` should find a a method named ""add"" with a parameter declaration of `(int... args)`.    - of course, a call to `findMethod(clazz, ""add"", new int[] {int.class, int.class, int.class})` _will_ find the var-args method, but this requires specific knowledge of the implementation and therefore does not lend itself to dynamic, reflective use cases. 2. with regard to type conversion, either due automatic boxing and unboxing of primitives or due to inheritance.    - for example, a call to `findMethod(clazz, ""foo"", Integer.class)` should find a method named ""foo"" that accepts an `int`. For example, the following unit test should pass.  ``` public class Test {  	public void foo(int a) { 		System.out.println(""a = "" + a); 	}  	@Test 	public void testFoo() { 		Method method = ReflectionUtils.findMethod(getClass(), ""foo"", Integer.class); 		assertNotNull(method); 	} } ```  - similarly, a call to `findMethod(clazz, ""foo"", Integer.class)` should find a method named ""foo"" that accepts a `Number` if there is no ""foo"" method that accepts an `Integer`.  ---  **Affects:** 3.0.6  **Attachments:** - [ReflectionUtils.java.patch](https://jira.spring.io/secure/attachment/18692/ReflectionUtils.java.patch) (_3.31 kB_)  **Issue Links:** - #13275 Introduce a generic method for invoking any non-public method in ReflectionTestUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/16fb3cb4b3fe6db341277889b20a2e4f774e2cc4, https://github.com/spring-projects/spring-framework/commit/1a34f6459d0e49e4fd60aa3644ad17fa117854d9  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-08-26T14:47:47Z","2022-01-25T10:33:15Z"
"","13275","Introduce a generic method for invoking any non-public method in ReflectionTestUtils [SPR-8633]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8633](https://jira.spring.io/browse/SPR-8633?redirect=false)** and commented  #### Status Quo  `ReflectionTestUtils` currently provides support for invoking non-public _setter_ methods that accept a single argument but not for invoking _configuration_, _init_, or _destroy_ methods which accept an arbitrary number of arguments or zero arguments.  #### Goal  Introduce a generic method in `ReflectionTestUtils` for invoking any non-public method regardless of the number of arguments and regardless of the return type.  ---  **Issue Links:** - #11956 Add methods to invoke init and destroy methods of a bean in ReflectionTestUtils (_**""is depended on by""**_) - #13286 ReflectionUtils should find methods with compatible argument types or var-args  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1a34f6459d0e49e4fd60aa3644ad17fa117854d9, https://github.com/spring-projects/spring-framework/commit/4d99ddba8a5839f455e88ba830c981f9bbc2ec50, https://github.com/spring-projects/spring-framework/commit/7a1553472d5628f6dc7085852e32f43fcd731f4e","closed","type: enhancement,","spring-projects-issues","2011-08-24T08:20:05Z","2019-01-11T14:21:55Z"
"","13270","Deprecate @ExpectedException [SPR-8627]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8627](https://jira.spring.io/browse/SPR-8627?redirect=false)** and commented  #### Background  - `@ExpectedException` was introduced in Spring 2.0 in order to allow developers to declare an expected exception via an annotation when using JUnit 3.8.2. - JUnit 4+ supports expected exceptions out of the box via the `expected` attribute of the JUnit `@Test` annotation. - All JUnit 3.8.x support was deprecated in Spring 3.1 M2. - `SpringJUnit4ClassRunner` treats expected exceptions configured via Spring's `@ExpectedException` annotation and JUnit's `@Test` annotation identically. - Consequently, Spring's `@ExpectedException` annotation no longer provides added value in a JUnit 4+ world.  #### Goal  Deprecate `@ExpectedException` since it no longer provides added value.   ---  **Affects:** 3.0.6","closed","type: task,","spring-projects-issues","2011-08-20T11:23:30Z","2012-06-19T03:39:07Z"
"","13265","Upgrade to JUnit 4.8.2 [SPR-8622]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8622](https://jira.spring.io/browse/SPR-8622?redirect=false)** and commented  Upgrade to JUnit 4.8.2 once it has been added to the EBR.  See also: https://issuetracker.springsource.com/browse/EBR-768  ---  **Affects:** 3.0.5  **Issue Links:** - #12871 Upgrade to JUnit 4.9  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87dad65ff00c9fc3eed4c918edb50be0232e2fba","closed","type: task,","spring-projects-issues","2011-08-18T07:00:48Z","2019-01-11T14:16:34Z"
"","13259","MessageListenerContainers should invalidate the Session properly in case of JMSException [SPR-8616]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8616](https://jira.spring.io/browse/SPR-8616?redirect=false)** and commented  ###### Status Quo  When an exception is caught in `AbstractPollingMessageListenerContainer`'s `doReceiveAndExecute()` method, `AbstractPollingMessageListenerContainer` delegates to `AbstractMessageListenerContainer`'s `handleListenerException()` method. If the supplied `Throwable` is a `JMSException`, it gets passed to `AbstractMessageListenerContainer`'s `invokeExceptionListener()` method for further processing. In turn, `invokeExceptionListener()` calls `onException()` on the JMS `ExceptionListener` that was registered with the `AbstractMessageListenerContainer`.  `AbstractMessageListenerContainer`'s `invokeExceptionListener()` method does **not** call `onException()` on the JMS `ExceptionListener` of the underlying JMS `Connection`.  Consequently, connection errors that occur while processing _inbound_ messages in a Spring MessageListenerContainer do not get propagated to the underlying connection. If the underlying connection is a shared connection that was created by Spring's `SingleConnectionFactory` or `CachingConnectionFactory`, that now broken connection will be reused by subsequent clients even though it should have been reset due to the connection failure. This leads to an endless loop of retries with invalid connections that will never work, and in the end the application will likely have to be restarted in order to obtain new connections.  ###### Goal  `AbstractMessageListenerContainer`'s `invokeExceptionListener()` method should call `onException()`:  - on the JMS `ExceptionListener` that was registered with the `AbstractMessageListenerContainer` (i.e., the status quo) - **and** on the JMS `ExceptionListener` of the underlying JMS `Connection`  Note that `DefaultMessageListenerContainer`'s `refreshDestination()` method already provides similar support for refreshing a possibly invalid destination name for a `CachingDestinationResolver`.  ###### Work-around  The current work-around is to set the `exceptionListener` property of the `DefaultMessageListenerContainer` to the `CachingConnectionFactory`. This works since `CachingConnectionFactory` implements the JMS `ExceptionListener` interface, and `CachingConnectionFactory`'s `onException()` method will internally reset the connection (i.e., clear the cache). Note, however, that the `exceptionListener` property is unfortunately not exposed as an attribute via the `` XML namespace. The following XML-based configuration has been tested as a suitable work-around configuration:  ```xml  	 	 	 	  ```    ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?96821-DefaultMessageListenerContainer-CachingConnectionFactory-tomcat-and-WebSphere-MQ","open","type: enhancement,","spring-projects-issues","2011-08-14T14:57:23Z","2016-06-02T12:36:52Z"
"","13193","ContextCache should be keyed by MergedContextConfiguration instead of String [SPR-8549]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8549](https://jira.spring.io/browse/SPR-8549?redirect=false)** and commented  ---  **Affects:** 3.1 M2  **Issue Links:** - #11984 TestContext should generate cache keys based on all metadata that uniquely identify ApplicationContext configuration (_**""depends on""**_) - #12651 Improve documentation of the context caching mechanism in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/072271d9e99367e75bb0671b25558871df82988a, https://github.com/spring-projects/spring-framework/commit/8224af19385b82c27ec48e0b1bbea89c1b5d6a8c","closed","type: enhancement,","spring-projects-issues","2011-07-20T13:40:35Z","2019-01-11T13:18:42Z"
"","13185","Document DelegatingSmartContextLoader [SPR-8541]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8541](https://jira.spring.io/browse/SPR-8541?redirect=false)** and commented  Document `DelegatingSmartContextLoader` and related changes to `SmartContextLoader` and its implementations.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13034 Introduce a DelegatingSmartContextLoader (_**""depends on""**_)","closed","type: task,","spring-projects-issues","2011-07-17T10:19:32Z","2019-01-11T13:18:32Z"
"","13097","Links in JIRA issues are not visible as links [SPR-8451]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8451](https://jira.spring.io/browse/SPR-8451?redirect=false)** and commented  #### Status Quo  Links in JIRA issues are not visible as links.  For example, this [link to Google](http://google.com) appears as plain text, with the same color and style as standard text. Note that the words ""link to Google"" do not appear to be a link.  #### Goal  Change the CSS style sheets used on jira.springsource.org so that links are visible (e.g., displayed in green like other links on the site).   ---  **Affects:** 3.1 M2","closed","type: bug,","spring-projects-issues","2011-06-13T09:11:13Z","2012-06-19T03:39:17Z"
"","13096","Support @Autowired-like self injection [SPR-8450]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8450](https://jira.spring.io/browse/SPR-8450?redirect=false)** and commented  #### Background  Autowiring a bean with an instance of itself is not something one would normally do, but there are cases where it might be useful -- for example, to route method calls _through_ the proxy that wraps the bean. There are of course alternatives to this, such as using load-time weaving with AspectJ proxies instead of JDK dynamic proxies.  Note that self-autowiring _by name_ via `@Resource` **is** permitted by the framework; whereas, self-autowiring _by type_ is **not** permitted by the framework as can be seen in the following code snippet from `DefaultListableBeanFactory`'s `findAutowireCandidates(String, Class, DependencyDescriptor)` method.  ```java for (String candidateName : candidateNames) {     if (!candidateName.equals(beanName) && isAutowireCandidate(candidateName, descriptor)) {         result.put(candidateName, getBean(candidateName));     } } ```  The name of the bean (i.e., the bean that's trying to autowire itself) is `beanName`. That bean is in fact an autowire candidate, but the above if-condition returns `false` (since `candidateName` equals the `beanName`). Thus you simply cannot autowire a bean with itself _by type_ (at least not as of Spring 3.1 M2).  #### Goal  Add support for self-autowiring using `@Autowired` on fields and methods.  #### Stack Overflow Discussion  This topic was brought to our attention via a discussion on [Stack Overflow](http://stackoverflow.com/questions/5152686/self-injection-with-spring).  ---  **Affects:** 3.0.5  **Issue Links:** - #21186 Self autowiring does not work for transactional beans - #19532 Self reference fallback in 4.3 is not meant to apply to collection elements - #16794 `@Autowired` does not work for target bean of type Collection - #18973 Define and document rules for `@Autowired` self-injection in case of ambiguity  18 votes, 23 watchers","closed","has: votes-jira,","spring-projects-issues","2011-06-13T09:03:19Z","2019-01-13T07:08:49Z"
"","13048","Document TestContext support for @ActiveProfiles in the reference manual [SPR-8401]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8401](https://jira.spring.io/browse/SPR-8401?redirect=false)** and commented  ---  **Affects:** 3.1 M2  **Issue Links:** - #12888 Document TestContext support for `@Configuration` classes in the reference manual (_**""depends on""**_)","closed","type: documentation,","spring-projects-issues","2011-06-05T12:21:31Z","2019-01-13T07:09:01Z"
"","13040","AnnotatedBeanDefinitionReader's constructor should inherit Environment of supplied BeanDefinitionRegistry [SPR-8393]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8393](https://jira.spring.io/browse/SPR-8393?redirect=false)** and commented  The constructor for `AbstractBeanDefinitionReader` attempts to inherit the `Environment` from the supplied `BeanDefinitionRegistry`; however, `AnnotatedBeanDefinitionReader` is not a subclass of `AbstractBeanDefinitionReader` and therefore does not automatically attempt to inherit the environment.  Consequently, `AnnotatedBeanDefinitionReader`'s constructor needs to be modified to inherit the the `Environment` of supplied `BeanDefinitionRegistry`, analogous to the behavior displayed by subclasses of `AbstractBeanDefinitionReader`.  ---  **Affects:** 3.0.5  **Issue Links:** - #13685 `@ActiveProfiles` not taken into account for `@ImportResource-imported` XML context definitions from an `@Configuration` context definition - #13632 `@ActiveProfiles` are not cascaded down to contexts loaded via `@ImportResource`","closed","in: core,","spring-projects-issues","2011-06-02T10:29:35Z","2019-01-13T07:09:07Z"
"","13035","Improve documentation on default PropertyEditors [SPR-8388]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8388](https://jira.spring.io/browse/SPR-8388?redirect=false)** and commented  #### Background  Using the Spring Reference Manual alone, it is currently rather challenging for developers new to Spring to determine exactly which PropertyEditors are registered by default in an ApplicationContext.  It is not obvious to newbies that:  1. PropertyEditors can be used not only for explicit bean properties but also for XML namespace attributes 2. various *ArrayEditors are registered by default, thus supporting comma-separated lists of elements in a single property/attribute    - for example, ByteArrayPropertyEditor, CharArrayPropertyEditor, StringArrayPropertyEditor, ClassArrayEditor, ResourceArrayPropertyEditor, etc. 3. pattern matching can be used for all supported Resources  #### Current Default PropertyEditors  The PropertyEditors that are actually registered by default in a Spring ApplicationContext can be found in the code here:  - ResourceEditorRegistrar: registerCustomEditors(PropertyEditorRegistry) - PropertyEditorRegistrySupport: createDefaultEditors()  #### Goals  The following sections of the Reference Manual need to be updated with the current set of defaults and more examples of how to actually benefit from PropertyEditors in XML-based configuration. It would be beneficial to the reader to cross reference between these sections. Furthermore, table 5.2 (_Built-in PropertyEditors_) could be greatly improved by adding a new ""Registered by default"" column.  - [Built-in Resource Implementations](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#resources-implementations) - [Resources as Dependencies](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#resources-as-dependencies) - [Built-in PropertyEditor Implementations](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#beans-beans-conversion)  ###### Concrete examples with context:property-placeholder  It would be helpful to provide examples of using PropertyEditors in conjunction with XML namespaces. I have often heard the question, ""How can I supply more than one location for property placeholder replacement using the context:property-placeholder namespace element?"" As of Spring 3.0.5, there are zero examples in the reference manual that use either a comma-separated list of locations or wildcards for pattern matching; all current examples supply a single property file as the location.   ---  **Affects:** 3.0.5  1 votes, 3 watchers","open","in: core,","spring-projects-issues","2011-06-01T13:48:53Z","2016-05-17T20:08:29Z"
"","13034","Introduce a DelegatingSmartContextLoader [SPR-8387]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8387](https://jira.spring.io/browse/SPR-8387?redirect=false)** and commented  #### Status Quo  Placing an empty `@ContextConfiguration` annotation on a test class signals that default resource locations should be generated. Without declaring a specific `ContextLoader`, `GenericXmlContextLoader` will be used by default, which generates a default XML resource location.  With the introduction of `AnnotationConfigContextLoader` in Spring 3.1 M2, it would be nice if the TestContext framework supported a _look-up_ mechanism to determine which `ContextLoader` (from a list of candidates) should be used to generate default resource locations or configuration classes and eventually load the context.  #### Goals  Introduce a `DelegatingSmartContextLoader` that delegates to a _candidate_ `SmartContextLoader` list to determine which context loader is able to generate default resource locations or configuration classes for a given test class. The _winning_ candidate should then be used to actually load the context.  #### Implementation Notes  By default, `DelegatingSmartContextLoader` should delegate to `GenericXmlContextLoader` and `AnnotationConfigContextLoader`, in that order. `GenericPropertiesContextLoader` will not be included by default.  Furthermore, the new `SmartContextLoader` SPI will have to provide support to query a `SmartContextLoader` to determine if the context loader is capable of generating default resource locations or configuration classes. Implementations must _preemptively_ determine if the generated default(s) actually exists.  Depending on time and complexity, the implementation may or may not be generic in terms of whether it knows explicitly about only `GenericXmlContextLoader` and `AnnotationConfigContextLoader` or whether it supports any number of configured `SmartContextLoader` candidates.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13033 Introduce SmartContextLoader SPI (_**""depends on""**_) - #13185 Document DelegatingSmartContextLoader (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72da569aa3c84ade51cac8af84e0206f644746b6, https://github.com/spring-projects/spring-framework/commit/9a40021f18bc0493c247d5fe29b05d5d76a9c05a, https://github.com/spring-projects/spring-framework/commit/a298c2dde80d08c0ad02495d9e53f6d58650efa4, https://github.com/spring-projects/spring-framework/commit/d0cd678089b8956e95f34cef06fec3a1621c1677, https://github.com/spring-projects/spring-framework/commit/461119973ba370e4e6a6d4be8668adf0f2dd6832, https://github.com/spring-projects/spring-framework/commit/21f3f59cb71fb94443415ca8be1e215c8290a86a, https://github.com/spring-projects/spring-framework/commit/f874ed9790d1eb1621c097fbd9954ec1013f4290, https://github.com/spring-projects/spring-framework/commit/e7298a88d6034d6534f80b516ec793ea14e4b0cb, https://github.com/spring-projects/spring-framework/commit/e34fa6abb1e114a7d7cd6a77ca5098037c3fd403, https://github.com/spring-projects/spring-framework/commit/b8624b470c3514ef0ee95ff26eeffb40a26ddce2, https://github.com/spring-projects/spring-framework/commit/d2e6f82aa304040a9a00e3b71179cc737634fe6a, https://github.com/spring-projects/spring-framework/commit/12eb9d7ed63f6864a485ec3b7c2abc2bba1a19cc, https://github.com/spring-projects/spring-framework/commit/8e497d96277d38994e257cef7671844ef95acc3c, https://github.com/spring-projects/spring-framework/commit/4aed64ea4b8c5e4a16312edb60d3b016a97c4bf8, https://github.com/spring-projects/spring-framework/commit/4cbe2ae00aaec2ca4074b06f389f5e50ca235da3, https://github.com/spring-projects/spring-framework/commit/19fc2004f5ada9e52fde8e88f814dae52e95f898, https://github.com/spring-projects/spring-framework/commit/4ef895a018451cb4d9398fe5bc6104431b9dd5da, https://github.com/spring-projects/spring-framework/commit/b49d11f84a5d70961778749c82c638ba6c7d8244","closed","type: enhancement,","spring-projects-issues","2011-06-01T08:44:22Z","2019-01-11T13:22:47Z"
"","13033","Introduce SmartContextLoader SPI [SPR-8386]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8386](https://jira.spring.io/browse/SPR-8386?redirect=false)** and commented  #### Status Quo  The current `ContextLoader` SPI has the following shortcomings:  - it only supports String-based resource locations, but we need first-class support for Class-based resources for `@Configuration` classes - it does not support the notion of bean definition profiles that were introduced in Spring 3.1 M1  #### Deliverables  1. [x] Introduce a new `SmartContextLoader` SPI that extends `ContextLoader` and supports both String[] and Class[] resources, likely retrieved from a new ""context"" parameter object as opposed to hard-coded, inflexible method signatures. This will replace the need for `ResourceTypeAwareContextLoader` and its `ResourceType` enum, and it will result in a more flexible SPI that is better suited to support future, unknown requirements. 2. [x] Refactor existing `AnnotationConfigContextLoader`, `ContextLoaderUtils`, and `TestContext` implementations to take advantage of the `SmartContextLoader` SPI 3. [x] Delete `ResourceTypeAwareContextLoader` 4. [x] Delete `ContextLoaderUtils.LocationsResolver` and implementations  #### Implementation Notes Regarding Profiles  Design the `SmartContextLoader` SPI so that a reference to the configured active profiles can be passed to a variant of `loadContext()`. This _reference_ may potentially take the form of the ""context"" parameter object introduced with the new `SmartContextLoader` SPI. See `AbstractGenericContextLoader`'s `loadContext()` method for an example of where the profiles would need to be set in the code (i.e., prior to refreshing the context).  ---  **Affects:** 3.1 M2  **Issue Links:** - #10852 Provide TestContext support for `@Configuration` classes (_**""depends on""**_) - #12615 TestContext framework should support declarative configuration of bean definition profiles (_**""is depended on by""**_) - #13034 Introduce a DelegatingSmartContextLoader (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2011-06-01T08:27:46Z","2019-01-13T07:09:09Z"
"","12947","Introduce autowiring support for the current TestContext [SPR-8299]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8299](https://jira.spring.io/browse/SPR-8299?redirect=false)** and commented  #### Status Quo  Tests currently do not have access to the current `TestContext`.  Providing access to the `TestContext` would allow programmatic access to `TestContext` properties as well as methods such as `markApplicationContextDirty()`.  #### Considerations  Instead of exposing the `TestContext` _as is_, it may be preferential to expose a new (yet-to-be-implemented) public-facing interface that defines a subset of the publicly available methods in `TestContext`.  A similar approach could be introduced to provide programmatic support for transaction management.  #### Code Samples  `DependencyInjectionTestExecutionListener`'s `injectDependencies(TestContext)` method could be modified as follows:  ```java protected void injectDependencies(final TestContext testContext) throws Exception { 	Object bean = testContext.getTestInstance(); 	ApplicationContext applicationContext = testContext.getApplicationContext();  	// BEGIN NEW CODE 	// Enable autowiring of the current TestContext. 	if (applicationContext instanceof ConfigurableApplicationContext) { 		ConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) applicationContext; 		configurableApplicationContext.getBeanFactory().registerResolvableDependency(TestContext.class, testContext); 	} 	// END NEW CODE  	AutowireCapableBeanFactory beanFactory = applicationContext.getAutowireCapableBeanFactory(); 	beanFactory.autowireBeanProperties(bean, AutowireCapableBeanFactory.AUTOWIRE_NO, false); 	beanFactory.initializeBean(bean, testContext.getTestClass().getName()); 	testContext.removeAttribute(REINJECT_DEPENDENCIES_ATTRIBUTE); } ```  ```java public class MyTests {  	@Autowired 	protected TestContext testContext;  	@Test 	public void test() { 		assertNotNull(testContext); 		assertEquals(""test"", testContext.getTestMethod().getName()); 	} } ```  ---  **Affects:** 2.5.6  **Issue Links:** - #9753 Support programmatic starting and stopping of transactions in the TestContext framework","closed","type: enhancement,","spring-projects-issues","2011-05-06T04:38:56Z","2019-02-23T09:40:56Z"
"","12888","Document TestContext support for @Configuration classes in the reference manual [SPR-8240]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8240](https://jira.spring.io/browse/SPR-8240?redirect=false)** and commented  ###### Open Issues  - compare and contrast XML-based and `@Configuration` class configuration options - discuss how to mix and match XML and `@Configuration` classes via imports   - explain the _single entry point_ concept  ---  **Issue Links:** - #10852 Provide TestContext support for `@Configuration` classes (_**""depends on""**_) - #13048 Document TestContext support for `@ActiveProfiles` in the reference manual (_**""is depended on by""**_)","closed","type: documentation,","spring-projects-issues","2011-04-09T14:06:27Z","2019-01-13T07:09:48Z"
"","13273","Could not generate CGLIB subclass of class [class com.dao.Reside] nested exception is net.sf.cglib.core.CodeGenerationException: java.lang.ClassCastException-->java.lang.Class incompatible with java.lang.reflect.ParameterizedType [SPR-8631]","**[Saif ul Islam Khan](https://jira.spring.io/secure/ViewProfile.jspa?name=ask4saif)** opened **[SPR-8631](https://jira.spring.io/browse/SPR-8631?redirect=false)** and commented  2011-08-23 13:50:28.731 Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@ea00ea0] to prepare test instance [com.emaratech.v2015.entrypermit.config.ApplicationContextConfigTest@3b3c3b3c] java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:181) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:220) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:301) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:303) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'residencePermitTransactionSearchDaoImpl' defined in file [D:\work\vision2015_trunk_up16Jul\core\entry-residence-permit-service\target\classes\com\emaratech\v2015\entrypermit\dao\ResidencePermitTransactionSearchDaoImpl.class]: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class com.emaratech.v2015.entrypermit.dao.ResidencePermitTransactionSearchDaoImpl]: Common causes of this problem include using a final class or a non-visible class; nested exception is net.sf.cglib.core.CodeGenerationException: java.lang.ClassCastException-->java.lang.Class incompatible with java.lang.reflect.ParameterizedType at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:73) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:128) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:172) ... 24 more Caused by: org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class com.emaratech.v2015.entrypermit.dao.ResidencePermitTransactionSearchDaoImpl]: Common causes of this problem include using a final class or a non-visible class; nested exception is net.sf.cglib.core.CodeGenerationException: java.lang.ClassCastException-->java.lang.Class incompatible with java.lang.reflect.ParameterizedType at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:206) at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:112) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:476) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:362) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:322) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:407) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1426) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ... 35 more Caused by: net.sf.cglib.core.CodeGenerationException: java.lang.ClassCastException-->java.lang.Class incompatible with java.lang.reflect.ParameterizedType at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:235) at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:220) at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:216) at net.sf.cglib.proxy.Enhancer.createUsingReflection(Enhancer.java:643) at net.sf.cglib.proxy.Enhancer.firstInstance(Enhancer.java:538) at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:225) at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377) at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:200) ... 42 more Caused by: java.lang.ClassCastException: java.lang.Class incompatible with java.lang.reflect.ParameterizedType at com.emaratech.v2015.entrypermit.dao.GenericJPADAO.\(GenericJPADAO.java:57) at com.emaratech.v2015.entrypermit.dao.ResidencePermitTransactionSearchDaoImpl$$EnhancerByCGLIB$$9bf2c3b3.\(\) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:44) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:516) at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:228) ... 50 more   ---  **Affects:** 3.1 M2  **Reference URL:** http://forum.springsource.org/archive/index.php/t-42783.html","closed","in: core,","spring-projects-issues","2011-08-23T03:56:29Z","2019-01-12T05:29:57Z"
"","12936","BeanWrapperImpl.getPropertyTypeDescriptor() doesn't resolve generic type parameters when a generic bean class is subclassed with actual type parameter. [SPR-8288]","**[Ryo Asai](https://jira.spring.io/secure/ViewProfile.jspa?name=ryoasai)** opened **[SPR-8288](https://jira.spring.io/browse/SPR-8288?redirect=false)** and commented  Please see the following test case. Full source code is posted on my gist. (https://gist.github.com/952819)      static class Parent {         private List list;                  public List getList() {             return list;         }     }          static class Child extends Parent {         /* If overridden the following test case is passed.         @Override         public List getList() {             return super.getList();         }*/     }          @Test     public void testPropertyAccess() {         BeanWrapper beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(new Child());         TypeDescriptor typeDesc = beanWrapper.getPropertyTypeDescriptor(""list"");              assertThat(typeDesc.getType(), isSameClassAs(List.class));         assertThat(typeDesc.getElementType(), isSameClassAs(String.class)); // failed!              assertThat(typeDesc.asString(), is(""java.util.List"")); // failed!         assertThat(typeDesc.isCollection(), is(true));     }  BeanWrapperImpl.getPropertyTypeDescriptor() returns a TypeDescriptor whose element type is not correctly resolved with actual type parameter unless the method is actual overridden with a covariant return type.  Although may not be a bug, but it would be more convenient if it can work out a TypeDescriptor with correct element type at least for property access (not for direct field access).  ---  **Affects:** 3.0.5  **Issue Links:** - #17662 Data binding treats parameterized type as object even when the parameterized type is specified by a subclass (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2011-05-03T00:57:10Z","2019-01-11T12:54:45Z"
"","13451","RestTemplate headers not sent when bufferRequestBody is false [SPR-8809]","**[Ryan Fong](https://jira.spring.io/secure/ViewProfile.jspa?name=rpfong)** opened **[SPR-8809](https://jira.spring.io/browse/SPR-8809?redirect=false)** and commented  I'm using Spring Core 3.1.0.RC1 on Sun Java 6 with Tomcat 7.0.14. I'm trying to send custom http headers when invoking RestTemplate methods using features in #10535 & #12152.  I configured an InterceptingClientHttpRequestFactory to use an interceptor that adds a header prior to execution. However, I've discovered that my header is not sent when the SimpleClientHttpRequestFactory bufferRequestBody property is false. I've also tried adding the header by setting an interceptor directly on the RestTemplate instead of via request factory but with the same result.  I've only been able to send the custom header by setting the SimpleClientHttpRequestFactory bufferRequestBody property back to its default of true. I need to avoid buffering due to bug #12564. Is this expected behavior? Are any workarounds available? Thank you!  references: #10535 = RestTemplate - access to Request Headers #12152 = Introduce interceptors for RestTemplate #12564 = Sending large payloads with RestTemplate results in an OutOfMemoryError  ---  **Affects:** 3.1 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?115876-3.1-RestTemplate-headers-not-sent-when-bufferRequestBody-is-false  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/53cb529162b9382faa5ae345621b40581fdea873, https://github.com/spring-projects/spring-framework/commit/91c14bd1fe7f45fbd3568b0a7a2221dff0f76c5f","closed","type: bug,","spring-projects-issues","2011-11-01T09:35:09Z","2019-01-11T14:40:56Z"
"","13779","Autowiring fails, when jars are loaded as per skinny war concept where classes involved have default accessors [SPR-9140]","**[RSKB](https://jira.spring.io/secure/ViewProfile.jspa?name=rashmibhojwani)** opened **[SPR-9140](https://jira.spring.io/browse/SPR-9140?redirect=false)** and commented  Our application is based on skinny war concept(http://maven.apache.org/plugins/maven-war-plugin/examples/skinny-wars.html). . |-- META-INF |   `-- application.xml |-- lib |    -- core application jars |    -- spring jars |    -- common jar |-- war1-1.0.0.war |     --war1-jar1-1.0.0.jar `   - war2-1.0.0.war |     --war2-jar1-1.0.0.jar  We have spring jars and other core application jars loaded at application level. The common jar and the core application jars have their own applicationContext.xml. Also the wars have their own web-jars that have applicationContext.xml specific to each war. We noticed, that autowiring(in core application jar classes) failed at the application startup and we see errors as given in the logs files attached herewith.  Following are the observations:  1. Autowiring works fine, if all the jars loaded at application level, are moved to individual wars(WEB-INF/lib). 2. Autowiring works fine, if the classes in the core application jars have public accessors, which is default for security and encapsulation purposes.  We have to follow the skinny war concept and the core application jars cannot be modified.  Please suggest!  Thanks Rashmi.   ---  **Affects:** 3.0 GA  **Attachments:** - [SystemErr.log](https://jira.spring.io/secure/attachment/19443/SystemErr.log) (_72.32 kB_) - [SystemOut.log](https://jira.spring.io/secure/attachment/19442/SystemOut.log) (_145.32 kB_)","closed","in: core,","spring-projects-issues","2012-02-20T21:51:22Z","2019-01-12T05:29:03Z"
"","13320","Content negotiation should not take the context path into consideration [SPR-8678]","**[Rostislav Hristov](https://jira.spring.io/secure/ViewProfile.jspa?name=rostislav.hristov)** opened **[SPR-8678](https://jira.spring.io/browse/SPR-8678?redirect=false)** and commented  I'm experiencing a problem when using Tomcat 7 with a file named project-1.0.0.M3.war. When deployed the application can be accessed using the following URLs:  http://localhost:8080/project-1.0.0.M3/ - works fine http://localhost:8080/project-1.0.0.M3 - fails because the appropriate view cannot be found  The problem is caused by the content negotiation logic which detects an M3 file extension and decides that the requested MIME type is application/octet-stream. This happens in ContentNegotiatingViewResolver.getMediaTypes where the filename extraction mechanism should first remove the context path and then do what it does.   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de504fa613bc79546c596469ddf53a972a60fae6","closed","type: bug,","spring-projects-issues","2011-09-10T11:20:59Z","2012-06-19T03:39:40Z"
"","13806","Backport ""AbstractMessageConverterMethodProcessor ignores quality parameter when selecting a MediaType"" [SPR-9168]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9168](https://jira.spring.io/browse/SPR-9168?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #13798","closed","in: web,","spring-projects-issues","2012-02-24T07:50:38Z","2019-01-11T22:17:22Z"
"","13789","Backport ""'Content-Disposition' in class StandardMultipartHttpServletRequest should be case insensitive"" [SPR-9151]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9151](https://jira.spring.io/browse/SPR-9151?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #13787","closed","in: web,","spring-projects-issues","2012-02-22T08:08:31Z","2019-01-11T22:12:15Z"
"","13786","Backport ""Invalid MIME-type causes a 500 error"" [SPR-9148]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9148](https://jira.spring.io/browse/SPR-9148?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #13781  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca8b98e94724cd9a2008deb4fe1280aaace6ca8b, https://github.com/spring-projects/spring-framework/commit/83ac44d1e4b6d25c83a5f1ba324bc63737193f61","closed","in: web,","spring-projects-issues","2012-02-21T14:14:36Z","2019-01-11T22:12:19Z"
"","13785","Backport ""Race condition in AnnotationMethodHandlerExceptionResolver"" [SPR-9147]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9147](https://jira.spring.io/browse/SPR-9147?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #13777  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cf93711b9694433ee67d9f93e3e590df808ec3e  6 votes, 5 watchers","closed","in: web,","spring-projects-issues","2012-02-21T12:36:08Z","2019-01-11T22:12:25Z"
"","13784","Backport ""Custom condition in request mapping handler does not work as an exclusion filter"" [SPR-9146]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9146](https://jira.spring.io/browse/SPR-9146?redirect=false)** and commented  ---  **Affects:** 3.1.1  This issue is a backport sub-task of #13773  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8faa2e61ecf4f2c01252a7ab36194aa6e1cd2920","closed","in: web,","spring-projects-issues","2012-02-21T09:33:14Z","2019-01-11T22:12:23Z"
"","13699","IllegalStateException when saving flash attributes if the session does not exist [SPR-9060]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9060](https://jira.spring.io/browse/SPR-9060?redirect=false)** and commented  ``` java.lang.IllegalStateException: Cannot create a session after the response has been committed 	org.apache.catalina.connector.Request.doGetSession(Request.java:2313) 	org.apache.catalina.connector.Request.getSession(Request.java:2074) 	org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:833) 	org.springframework.web.servlet.support.DefaultFlashMapManager.retrieveFlashMaps(DefaultFlashMapManager.java:149) 	org.springframework.web.servlet.support.DefaultFlashMapManager.requestCompleted(DefaultFlashMapManager.java:202) 	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:830) ```  response.sendRedirect has already committed the response.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3d1fa4f6b60f4cbef66df980071ec5747c9183c8","closed","type: bug,","spring-projects-issues","2012-01-25T15:06:01Z","2012-06-19T03:39:03Z"
"","13695","Remove ""final"" from configuration callback methods in DelegatingWebMvcConfiguration [SPR-9056]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9056](https://jira.spring.io/browse/SPR-9056?redirect=false)** and commented  Extending directly directly from WebMvcConfigurationSupport allows overriding `@Bean` methods as well as configuration callback methods like addViewControllers(..), addInterceptors(..), and others. However, its sub-class DelegatingWebMvcConfiguration (which adds the ability to delegate to any number of WebMvcConfigurer classes) closes configuration callback methods for extension thus making it difficult to switch from WebMvcConfigurationSupport to DelegatingWebMvcConfiguration as the base class.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/610fa618aae58af50c12ee8d0c29d12b7460fd8a","closed","type: task,","spring-projects-issues","2012-01-24T15:27:11Z","2012-06-19T03:39:15Z"
"","13682","Update @RequestMapping Javadoc with regards to ambiguous annotation mappings [SPR-9042]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9042](https://jira.spring.io/browse/SPR-9042?redirect=false)** and commented  The Javadoc for `@RequestMapping`#value talks about method names taken into account for narrowing if no path is specified explicitly in case of ambiguous annotation mappings. And also discusses a default method (without explicit path mapping).  Those are not supported in the new RequestMappingHandlerMapping/RequestMappingHandlerAdapter pair and the above Javadoc needs an update.   ---  **Affects:** 3.1 GA  **Reference URL:** http://stackoverflow.com/questions/8909482/spring-mvc-3-ambiguous-mapping-found  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4f4a2e7fc76f458e809ae99046d2ceec7def4b18","closed","type: task,","spring-projects-issues","2012-01-20T11:48:01Z","2019-01-11T22:25:02Z"
"","13663","Invoke lifecycle methods on HandlerExceptionResolvers provided via WebMvcConfigurationSupport.configureHandlerExceptionResolvers(..) [SPR-9024]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9024](https://jira.spring.io/browse/SPR-9024?redirect=false)** and commented   ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-01-13T14:29:35Z","2012-06-19T02:28:12Z"
"","13660","Two matching produces conditions compared incorrectly if media type in 'Accept' header contains a quality parameter [SPR-9021]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9021](https://jira.spring.io/browse/SPR-9021?redirect=false)** and commented  This works:  ```java @Test public void compareToWithoutQualityFactor() {     ProducesRequestCondition none = new ProducesRequestCondition();     ProducesRequestCondition json = new ProducesRequestCondition(""application/json"");     MockHttpServletRequest request = new MockHttpServletRequest();     request.addHeader(""Accept"", ""*/*"");      assertTrue(none.compareTo(json, request) < 0); } ```  But if a quality parameter is added ""\*/\*;q=0.9"" it fails.   ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?120973-Spring-MVC-3-1-annotation-mappings-incompatible-with-MVC-3-0&p=396569#post396569","closed","type: bug,","spring-projects-issues","2012-01-12T13:06:59Z","2012-06-19T03:39:06Z"
"","13650","Provide support for ApplicationContextInitializers in the TestContext framework [SPR-9011]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-9011](https://jira.spring.io/browse/SPR-9011?redirect=false)** and commented  #### Status Quo  Starting with Spring 3.1 applications can specify `contextInitializerClasses` via `context-param` and `init-param` in `web.xml`.  ---  #### Goals  For comprehensive testing it should be possible to re-use `ApplicationContextInitializer` instances in tests as well.  This could be done at the `@ContextConfiguration` level by allowing an array of ACI types to be specified, and the TCF would allow each to visit the `ApplicationContext` at the right time.  ---  #### Deliverables  1.   [x] Introduce a new `initializers` attribute in `@ContextConfiguration`.  ---  ```      ```  ```  Class","closed","has: votes-jira,","spring-projects-issues","2012-01-09T06:17:55Z","2019-01-13T21:41:02Z"
"","13533","Add String constants to MediaType for use in @RequestMapping consumes and produces conditions [SPR-8892]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8892](https://jira.spring.io/browse/SPR-8892?redirect=false)** and commented  `@RequestMapping` accepts String[] for consumes and produces, which makes it impossible to make use of existing constants in MediaType. As a result String literals are used instead.  So for each constant we could add:  ```java /**  * Public constants for media type {@code application/json}.  * */ public final static String APPLICATION_JSON_VALUE = ""application/json"";  public final static MediaType APPLICATION_JSON = MediaType.valueOf(APPLICATION_JSON_VALUE); ```  Resulting in:  ```java @RequestMapping(produces=MediaType.APPLICATION_JSON_VALUE) ```    ---  **Affects:** 3.1 M2, 3.1 RC2  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-12-02T07:42:15Z","2012-06-19T03:39:16Z"
"","13501","@InitBinder and @ModelAttribute caches in RequestMappingHandlerAdapter ignore ""prototype"" controllers [SPR-8859]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8859](https://jira.spring.io/browse/SPR-8859?redirect=false)** and commented   ---  **Affects:** 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4fada56ab2e254004001f3773b00bdf9db1840b","closed","type: bug,","spring-projects-issues","2011-11-18T03:28:48Z","2012-06-19T03:39:34Z"
"","13468","Provide mechanism for creating links to controllers and controller methods [SPR-8826]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8826](https://jira.spring.io/browse/SPR-8826?redirect=false)** and commented  Add an `@MVC-specific` UriComponentsBuilder either as part of the ServletUriComponentsBuilder, or perhaps as a new subclass. One benefit is being able to point to an `@Controller` method instead of specifying a path. Something like:  ```java MvcUriComponentsBuilder ucb = MvcUriComponentsBuilder.fromServletMapping(); ucb.path(MyController.class, ""handle""); ```  where ""handle()"" is an `@Controller` method annotated with `@RequestMapping`.  Another possible benefit is to add required request parameters to the query string, use of current request URI template variables when expanding, and formatting of expanded arguments with a DataBinder.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13465 Add ServletUriComponentsBuilder - #15744 Document ability to create links to Spring MVC controller methods - #15293 Migrate core Hateoas concepts from Spring Hateoas (_**""supersedes""**_)","closed","type: enhancement,","spring-projects-issues","2011-11-08T08:34:01Z","2019-01-11T14:40:15Z"
"","13465","Add ServletUriComponentsBuilder [SPR-8823]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8823](https://jira.spring.io/browse/SPR-8823?redirect=false)** and commented  UriComponents builder offers options to build from a path or a URI string. A Servlet-variation can add more options to build a UriComponents instance starting with information in the current HttpServletRequest.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13468 Provide mechanism for creating links to controllers and controller methods - #13445 UriComponentsBuilder should also contain subtractive methods","closed","type: enhancement,","spring-projects-issues","2011-11-07T12:59:23Z","2019-01-11T14:40:20Z"
"","13367","Validator @Bean not initialized when extending from WebMvcConfigurationSupport [SPR-8725]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8725](https://jira.spring.io/browse/SPR-8725?redirect=false)** and commented  In WebMvcConfigurationSupport the requestMappingHandlerAdapter() method references mvcValidator(), which returns a LocalValidatorFactoryBean. When an `@Configuration` class extends from WebMvcConfiguration (vs using `@EnableWebMvc`), the requestMappingHandlerAdapter() method gets a Validator, which has not been initialized via InitializingBean. This is not the case when using `@EnableWebMvc` and extending from WebMvcConfigurerAdapter.  ---  **Affects:** 3.1 M1  **Issue Links:** - #13398 `@Bean` methods with package-private visibility are not enhanced in `@Configuration` class hierarchies that cross package boundaries  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1aa1278e99866cccef67b01c25e99ddd4f5b4643, https://github.com/spring-projects/spring-framework/commit/276054218235f922df11732997394747e6c47073","closed","in: core,","spring-projects-issues","2011-09-27T03:01:06Z","2019-01-13T07:07:43Z"
"","13336","Duplicate ""type"" attribute rendered in JSP InputTag [SPR-8694]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8694](https://jira.spring.io/browse/SPR-8694?redirect=false)** and commented  This issue was pointed out in a comment by Doug Breaux under #13131:  https://jira.springsource.org/browse/SPR-8485?focusedCommentId=67922&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-67922  The InputTag always renders type=""text"". Since type is not declared as an attribute in spring-forms.tld when the type attribute is added (e.g. type=""email"") it gets rendered a second time. Browsers seem to deal with it, hence the current priority of ""Minor"".  ---  **Affects:** 3.0.6  **Issue Links:** - #13131 Spring MVC form binding tags for new HTML5 form field types would be nice  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c290a4e68a288fa9734a7d87258b5e0bfb4bff03  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2011-09-14T08:19:12Z","2019-01-11T14:23:02Z"
"","13205","Controller method argument without annotations results in 400 error if not provided [SPR-8561]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8561](https://jira.spring.io/browse/SPR-8561?redirect=false)** and commented  The following method from the [Spring Data Key-Value RetwisJ sample](https://github.com/SpringSource/spring-data-keyvalue-examples):  ```java @RequestMapping(""/signIn"") public String signIn(String name, String pass, Model model, HttpServletResponse response) { } ```  has name and pass resolved to null in Spring 3.0.x (if not provided) but throws an exception in 3.1 as follows:  ``` Resolving exception from handler [public java.lang.String org.springframework.data.redis.samples.retwisj.web.RetwisController.signIn(java.lang.String,java.lang.String,org.springframework.ui.Model,javax.servlet.http.HttpServletResponse)]: org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter 'name' is not present ```  The above is turned to a 404 error through the DefaultHanndlerExceptionResolver.    ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75ad18555874a1e93c50ab7848fd0c2e265e550a","closed","type: bug,","spring-projects-issues","2011-07-26T05:26:57Z","2012-06-19T03:39:28Z"
"","13176","Add support for arguments of type javax.servlet.http.Part [SPR-8532]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8532](https://jira.spring.io/browse/SPR-8532?redirect=false)** and commented  `@RequestParam` and `@RequestPart` (new in Spring 3.1, #13129) support arguments of type MultipartFile. However in Servlet 3.0, multipart support can be configured and used without Spring's MultipartResolver (and MultipartFile) abstraction. Hence an argument of type javax.servlet.http.Part can be resolved simply by accessing request.getPart(partName).  ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-07-14T08:12:52Z","2019-01-11T13:18:47Z"
"","13130","Use AbstractView instead of HandlerMethodArgumentResolver to add @PathVariable values to the model [SPR-8484]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8484](https://jira.spring.io/browse/SPR-8484?redirect=false)** and commented  As part of #12200, milestone 2 of Spring 3.1, support was added to automatically expose `@PathVariable` values in the model. This is quite useful in cases where a view prepares links to related URLs (#11152). However, it can get in the way in cases where the model is used in an automated way such as when model attributes are appended to a redirect URL (#13094), or when views generate the response from the model - MarshallingView, MappingJacksonJsonView.  Rather than adding path variables to the model prior to invoking the controller method (like `@ModelAttribute`), path variables can be added via `AbstractView.render(..)`, which already deals with adding static attributes and a RequestContext. This has several advantages:  * The feature applies only to methods not annotated with `@ResponseBody` * View types can decide individually (e.g. turned off by default for MarshallingView and MappingJacksonJsonView) * Applications can override the default settings via AbstractView and UrlBasedViewResolver  ---  **Affects:** 3.1 M2  **Issue Links:** - #12200 Automatically expose `@PathVariables` in the Model","closed","type: task,","spring-projects-issues","2011-06-24T03:08:00Z","2019-01-13T07:08:40Z"
"","13120","Configure PatternsRequestCondition with information that allows it to do a smart suffix pattern match [SPR-8474]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8474](https://jira.spring.io/browse/SPR-8474?redirect=false)** and commented  With suffix pattern matching ""/users"" also matches to ""/users.*"". This is useful for content type negotiation - e.g. /users.xml, /users.pdf - but can lead to ambiguity when extracting URI template variables.  For example given ""/users/{user}"": 1. ""/users/1.json"" should extract ""1"" 2. ""/users/john.j.joe"" should extract ""john.j.joe""  Currently the above cannot be supported at the same time. You can only turn suffix pattern matching on or off. A simple solution could look for a single ""."" only but then this would be impossible:  ""/users/john.j.joe.json"" should extract ""john.j.joe""  Ideally the PatternsRequestCondition should be able to decide if the suffix represents a known file extension (.xml, .json) similar to how the ContentNegotiatingViewResolver is configured today.  This should become possible as part of the content negotiation improvements planned for Spring 3.2 (#13057).  ---  **Affects:** 3.1 M2  This issue is a sub-task of #13057  **Issue Links:** - #12288 Allow valid file extension paths for content negotiation to be specified (_**""duplicates""**_) - #14694 404 error when working with .htm servlet-mapping  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4fd7645efd2daf8d23960706180837a61bf9f321, https://github.com/spring-projects/spring-framework/commit/9cc4bd892a6bb3aca9fea4b2423369181cebea9a  2 votes, 3 watchers","closed","type: task,","spring-projects-issues","2011-06-21T04:51:15Z","2019-01-11T13:09:52Z"
"","13108","URL suffixes such as ""/"" and "".*"" not considered when checking whether to send a 405, 406 or 415 code [SPR-8462]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8462](https://jira.spring.io/browse/SPR-8462?redirect=false)** and commented   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c41caa3c2f815b36792b90662b4482e2c93b5ca4","closed","type: bug,","spring-projects-issues","2011-06-16T10:02:28Z","2012-06-19T03:39:51Z"
"","13100","Introduce Registration objects in Spring MVC Java-based configuration API [SPR-8454]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8454](https://jira.spring.io/browse/SPR-8454?redirect=false)** and commented  _Summary of changes:_  1. Introduce methods returning _Registration_ objects where multiple registrations are expected (interceptors, view controllers) 2. Allow configuration of multiple resource handlers via same _Registration_ object approach 3. Change suffix of classes that return _Registration_ objects from *Configurer to *Registry  Before & After:  ```java public void configureInterceptors(InterceptorConfigurer interceptorConfigurer) {   interceptorConfigurer.mapInterceptor(new String[] {""/foo""}, new FooInterceptor()); } ```  ```java public void addInterceptors(InterceptorRegistry registry) {   registry.addInterceptor(new FooInterceptor()).addPathPatterns(""/foo""); } ```  Before & After:  ```java public void configureViewControllers(ViewControllerConfigurer configurer) {   configurer.mapViewName(""/foo"", ""foo""); } ```  ```java public void addViewControllers(ViewControllerRegistry registry) {   registry.addViewController(""/foo"").setViewName(""foo""); } ```  Before & After:  ```java public void configureResourceHandling(ResourceConfigurer configurer) {   configurer.addPathMapping(""/css/**"").addResourceLocation(""/css/"");   configurer.addPathMapping(""/images/**"").addResourceLocation(""/images/""); } ```  ```java public void addResourceHandlers(ResourceHandlerRegistry registry) {   registry.addResourceHandler(""/css/**"").addResourceLocations(""/css/"").setCachePeriod(1);   registry.addResourceHandler(""/images/**"").addResourceLocations(""/images/"").setCachePeriod(1); } ```    ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-06-15T00:41:43Z","2012-06-19T03:39:14Z"
"","13076","Extract base support class for Spring MVC config classes from WebMvcConfiguration [SPR-8430]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8430](https://jira.spring.io/browse/SPR-8430?redirect=false)** and commented  Introduce a base support class for WebMvcConfiguration (e.g. WebMvcConfigurationSupport) with methods open for extension. This would provide the following path from simple to advanced Spring MVC Java-based configuration:  1. Enable default Spring MVC configuration by adding `@EnableWebMvc` 2. Customize the provided configuration via configuration callbacks by extending `WebMvcConfigurerAdapter` 3. Gain full control over the provided configuration by removing `@EnableWebMvc` and extending from `WebMvcConfigurationSupport` instead    ---  **Affects:** 3.1 M2","closed","type: task,","spring-projects-issues","2011-06-09T07:08:58Z","2012-06-19T03:39:25Z"
"","13068","Update the MVC Java config and the MVC namespace to support content negotiation options [SPR-8420]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8420](https://jira.spring.io/browse/SPR-8420?redirect=false)** and commented  This involves configuring a list of ordered `RequestedMediaTypesResolver` types and then using it to configure:  * `RequestMappingHandlerMapping` (for ""produces"") * `RequestMappingHandlerAdapter` (for `@ResponseBody`) * `ContentNegotiatingViewResolver` for view resolution  Currently we don't configure a ContentNegotiatingViewResolver through `@EnableWebMvc`. However, once content negotiation options have been provided it would be quite easy to do so. Such a resolver is always ordered at 0.  ---  **Affects:** 3.1 M1  This issue is a sub-task of #13057  **Issue Links:** - #11775 Resolve MediaType in ContentNegotiatingViewResolver Based on Request Parameter Existence (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64d939bb16099fcb647850a5f3e04990f5562099, https://github.com/spring-projects/spring-framework/commit/028e15faa33888673bfc7b55eaa65eb93f7bca0c","closed","type: task,","spring-projects-issues","2011-06-08T04:58:17Z","2019-01-11T13:32:55Z"
"","13067","Enhance ContentNegotiatingViewResolver to use the new ContentNegotiationManager type [SPR-8419]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8419](https://jira.spring.io/browse/SPR-8419?redirect=false)** and commented  This will be as an alternative to the existing properties - favorPathExtension, favorParameter, parameterName, ignoreAcceptHeader, useJaf, and mediaTypes.  ---  **Affects:** 3.1 M1  This issue is a sub-task of #13057","closed","type: task,","spring-projects-issues","2011-06-08T04:48:35Z","2019-01-11T13:33:36Z"
"","13066","Enhance RequestResponseBodyMethodProcessor and HttpEntityMethodProcessor to use new the ContentNegotiationManager type [SPR-8418]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8418](https://jira.spring.io/browse/SPR-8418?redirect=false)** and commented  ---  **Affects:** 3.1 M1  This issue is a sub-task of #13057","closed","type: task,","spring-projects-issues","2011-06-08T04:45:13Z","2019-01-11T13:33:50Z"
"","13065","Enhance ""produces"" condition to use the new ContentNegotiationManager type [SPR-8417]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8417](https://jira.spring.io/browse/SPR-8417?redirect=false)** and commented  ---  **Affects:** 3.1 M1  This issue is a sub-task of #13057","closed","type: task,","spring-projects-issues","2011-06-08T04:44:19Z","2019-01-11T13:33:53Z"
"","13064","Introduce ContentNegotiationStrategy abstraction [SPR-8416]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8416](https://jira.spring.io/browse/SPR-8416?redirect=false)** and commented  Along the lines of:  ```java public interface ContentNegotiationStrategy {    List resolveMediaTypes(NativeWebRequest webRequest);  } ```  Concrete implementations: * HeaderContentNegotiationStrategy * PathExtensionContentNegotiationStrategy * ParameterContentNegotiationStrategy * FixedContentNegotiationStrategy  Also perhaps a ContentNegotiationManager class that is configured with and delegates to one or more of the above.  ---  **Affects:** 3.1 M1  This issue is a sub-task of #13057  1 votes, 2 watchers","closed","type: task,","spring-projects-issues","2011-06-08T04:43:06Z","2019-01-11T13:33:42Z"
"","13063","Clarify use of ""x-www-form-urlencoded"" in reference documentation [SPR-8415]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8415](https://jira.spring.io/browse/SPR-8415?redirect=false)** and commented  For ""x-www-form-urlencoded"" data one could use an `@RequestBody` (via FormHttpMessageConverter) or a `@ModelAttribute` method argument (via data binding). The latter has a few advantages: * it results in a typed object rather than MultiValueMap * with MultiValueMap you lose the ability to apply automatic validation * use of request.getParameter*() before the `@RequestBody` argument is resolved causes problems  ---  **Affects:** 3.1 M1  **Issue Links:** - #11395 resolveRequestBody algorithm does not take into account ConversionService when determining if binding is possible - #10299 Support for PUTting form-encoded data","closed","type: task,","spring-projects-issues","2011-06-08T03:59:54Z","2019-01-11T13:33:46Z"
"","13057","Content negotiation improvements [SPR-8410]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8410](https://jira.spring.io/browse/SPR-8410?redirect=false)** and commented  The `ContentNegotiatingViewResolver` provides a range of options for configuring content negotiation based on the 'Accept' header, by path extension, or by request parameter. However when writing to the response via `@ResponseBody` only the 'Accept' header is used (see #12175). Furthermore, it's not possible to combine all options in the request mapping of a single method (see #11163, #12378).  This is an umbrella ticket to improve how content negotiation options are configured and to equalize the choices throughout request mappings, `@ResponseBody` methods, and `ContentNegotiatingViewResolver`.  ---  **Affects:** 3.1 M1  **Sub-tasks:** - #12288 Allow valid file extension paths for content negotiation to be specified - #13064 Introduce ContentNegotiationStrategy abstraction - #13065 Enhance ""produces"" condition to use the new ContentNegotiationManager type - #13066 Enhance RequestResponseBodyMethodProcessor and HttpEntityMethodProcessor to use new the ContentNegotiationManager type - #13067 Enhance ContentNegotiatingViewResolver to use the new ContentNegotiationManager type - #13068 Update the MVC Java config and the MVC namespace to support content negotiation options - #13120 Configure PatternsRequestCondition with information that allows it to do a smart suffix pattern match  **Issue Links:** - #13190 Spring MVC - Ability to use a Converter based on the Path Extension instead of Accep Header. (_**""is duplicated by""**_) - #13282 Allow customization of ContentNegotiatingViewResolver by making some of its methods protected - #13791 Add extension element to Spring Web MVC `@RequestMapping` annotation - #11658 Add content-negotiation to RequestBody and ResponseBody processing (_**""supersedes""**_) - #11163 `@RequestMapping` should support accept header and url extension (_**""supersedes""**_) - #12378 `@RequestMapping` should support alternative between a header and a url extension (_**""supersedes""**_) - #12175 Introduce request parameter based content negotiation for ResponseBody / HttpMessageConverter approach (_**""supersedes""**_)  6 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2011-06-07T09:09:21Z","2019-01-13T07:08:56Z"
"","13055","Provide a TilesView for partial rendering [SPR-8408]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8408](https://jira.spring.io/browse/SPR-8408?redirect=false)** and commented  Modify the TilesView or provide a variant that can render a Tiles definition with or without its layout. The decision can be based on the presence of a request parameter, a request attribute, or another configurable approach.  **Background:** when using Tiles it is common for each page to have a layout. When the controller returns a view name, it is interpreted as a Tiles definition name and the page is rendered with its layout. Sometimes however it is helpful to render the same Tiles definition without the layout, for example during an Ajax request.  A few scenarios this simple approach can serve: 1. Simple page (""body"" + layout) - update the main content area with a partial response 2. Container page (multiple content areas) - update each content area alone or render the entire page 3. Forms - on error return form content only; on success return form only (Ajax) or redirect  ---  **Affects:** 3.0.5  **Issue Links:** - #10318 Provide ability to determine if the current request is an ajax request  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-06-06T13:11:29Z","2021-11-08T10:50:49Z"
"","12999","Consolidate support for HandlerInterceptor and MappedInterceptor types in AbstractHandlerMapping [SPR-8352]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8352](https://jira.spring.io/browse/SPR-8352?redirect=false)** and commented  MappedInterceptors are dealt with in AbstractUrlHandlerMapping as opposed to in its base class AbstractHandlerMapping because MappedInterceptors require access to a UrlPathHelper and a PathMatcher. This worked initially but the newly introduced AbstractHandlerMethodMapping extends directly from AbstractUrlHandlerMapping and there may be other such implementations (e.g. FlowUrlHandlerMapping).  The goal of this ticket is to consolidate handling of HandlerInterceptors and MappedInterceptors, provide a single setter for configuring both, and apply them to requests in a way that is re-usable across sub-classes of AbstractHandlerMapping.  ---  **Affects:** 3.1 M1  **Issue Links:** - #12601 Mapped interceptors are not applied to current handler","closed","type: enhancement,","spring-projects-issues","2011-05-19T06:34:54Z","2019-01-11T13:24:28Z"
"","12997","When using Java-based configuration, nested ViewResolvers in ContentNegotiatingViewResolver may require bean initialization [SPR-8350]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8350](https://jira.spring.io/browse/SPR-8350?redirect=false)** and commented  The ContentNegotiatingViewResolver supports a property with nested ViewResolvers. When using Java-based configuration this property is likely to be populated with ViewResolvers created in the same method and not by an ApplicationContext. Some ViewResolvers however implement ApplicationContextAware and depend on access to an ApplicationContext (e.g. UrlBasedViewResolver and sub-classes).  Of course it is possible to create the nested ViewResolvers from separate `@Bean` methods but that's not ideal and seems to defeat the purpose of having nested ViewResolvers in the first place. Instead the ContentNegotiatingViewResolver can check if the provided ViewResolvers are registered in the container and if not initialize them through the BeanFactory.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-05-19T02:33:23Z","2012-06-19T03:39:52Z"
"","12968","Add option to register configuration classes via Class in AnnotationConfigWebApplicationContext [SPR-8320]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8320](https://jira.spring.io/browse/SPR-8320?redirect=false)** and commented  If you instantiate AnnotationConfigWebApplicationContext in a JUnit test or standalone code the only option to register `@Configuration` classes is to use setConfigLocation(String) or setConfigLocations(String[]). This means you have to convert configuration class names to a String based location that contains the class. Although this is simple (using clazz.getName() will do), it's not immediately obvious what the syntax for the String should be.  For comparison AnnotationConfigApplicationContext does provide a register(Class... annotatedClasses) method. It would make sense to have such a method on AnnotationConfigWebApplicationContext as well for parity.  ---  **Affects:** 3.0.5, 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18265/mylyn-context.zip) (_3.65 kB_)  **Issue Links:** - #13012 Introduce AnnotationConfigCapableApplicationContext interface to unify ACAC and ACWAC operations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c696e195fa27f6dccdb1551bbd9a9dd894242cf9, https://github.com/spring-projects/spring-framework/commit/e128ee2464b1d4bcc988999f4e05da5e8ecdf0ed","closed","type: enhancement,","spring-projects-issues","2011-05-10T02:09:37Z","2019-01-11T13:00:11Z"
"","12903","Non-empty type-level URL combined with method-level empty URL results in URL with trailing slash in RequestMappingHandlerMethodMapping [SPR-8255]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8255](https://jira.spring.io/browse/SPR-8255?redirect=false)** and commented  Example configuration:  ```java @Controller @RequestMapping(""/services/traces"") public class TracesController {     @RequestMapping(value = """", method = {RequestMethod.GET, RequestMethod.HEAD})     public String traces(Model model, @RequestParam(value = ""application"", required = false) ApplicationName application) { ... } } ```  Results in: Mapped ""{[/services/resources/],[GET, HEAD],params=[[start && end]],headers=TRUE}""  Reported by Spring Insight.    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57d327d1ff3a339d4e1a0d82e81f0028f712d9e2","closed","type: bug,","spring-projects-issues","2011-04-15T11:43:40Z","2012-06-19T03:39:33Z"
"","12896","RequestMappingHandlerMethodMapping can't combine type and method @RequestMapping annotations when method is in parent class only [SPR-8248]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8248](https://jira.spring.io/browse/SPR-8248?redirect=false)** and commented  The following setup describes the scenario:  ```java @Controller public class MappingClass {     @RequestMapping(value = ""/handle"", method = RequestMethod.GET)         public void handle(TestBean object) {     } }  @RequestMapping(value=""/type"") public class MappingClassController extends MappingClass { }  ```  Reported by the vFabric Management Service project.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/83ce399c4703a44823ba78edab6b65ded4c15b93","closed","type: bug,","spring-projects-issues","2011-04-14T10:40:14Z","2012-06-19T03:39:55Z"
"","12895","A direct match in AbstractHandlerMethodMapping can ignore other more specific matches [SPR-8247]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8247](https://jira.spring.io/browse/SPR-8247?redirect=false)** and commented  AbstractHandlerMethodMapping uses a lookup key built from the request including the URL and the HTTP method. That means the following is a direct hit:  ```java @RequestMapping(method = RequestMethod.GET) ```  There can be other more specific matches that will in effect be ignored since they don't match the lookup key:  ```java @RequestMapping(method = RequestMethod.GET, params=""day"") ```  A simple solution would be to remove direct lookups. However we need to revisit how lookup keys are used for a more optimal solution.  Reproduced with petcare sample.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/acb9433e5cad2f668a5d1edf8320fadfcdaf0706, https://github.com/spring-projects/spring-framework/commit/d14c7f2d0926afcef3b6fc3706489ee6cd48d8c6","closed","type: bug,","spring-projects-issues","2011-04-14T08:01:27Z","2012-06-19T03:39:01Z"
"","12882","Adapt the existing WebArgumentResolver to the new HandlerMethodArgumentResolver interface from the MVC namespace [SPR-8234]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8234](https://jira.spring.io/browse/SPR-8234?redirect=false)** and commented  1. MVC namespace to accept both existing and new interfaces wrapping existing interfaces with adapters 2. RequestMappingHandlerMethodAdapter and RequestMappingHandlerMethodExceptionResolver to accept custom resolvers and handlers in the new interfaces only - i.e. HandlerMethodArgumentResolvers and HandlerMethodReturnValueHandlers 3. A property to support custom ModelAndViewResolvers is still required since those can not be adapted and can only be invoked at the end (i.e. when no other HandlerMethodReturnValueHandlers supports the return value type) by the DefaultMethodReturnValueHandler.  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12864  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/23e37b68420f8ad4576b719ddba7ba42a6a6cc5c, https://github.com/spring-projects/spring-framework/commit/313546ad1fc36a46e6c356a9605cc1e3cb1b0613","closed","type: task,","spring-projects-issues","2011-04-08T04:28:39Z","2019-01-11T12:54:23Z"
"","13733","DestructionCallbackBindingListener is Serializable but contains non-serializable Runnable reference [SPR-9095]","**[Roshan](https://jira.spring.io/secure/ViewProfile.jspa?name=codevally)** opened **[SPR-9095](https://jira.spring.io/browse/SPR-9095?redirect=false)** and commented  We are using the above spring version in our web application and it is runs on 3 node jboss 5.1.1 cluster with enabling session replication. But when accessing our functionality, we are getting java.io.NotSerializableException: javax.annotation.PostConstruct exception at the time of replicating session over jboss nodes.  Found the https://jira.springsource.org/browse/SPR-5331 issue and it address the same issue but we cannot see any solution given.  ---  **Affects:** 3.0.5  **Issue Links:** - #10004 DestructionCallbackBindingListener is Serializable but contains potential non-serializable state","closed","status: bulk-closed,","spring-projects-issues","2012-02-06T21:24:17Z","2019-01-12T03:49:10Z"
"","13335","MANIFEST.MF: OSGi-Version Range too small for JDO in Library org.springframework.orm [SPR-8693]","**[Roland Hauser](https://jira.spring.io/secure/ViewProfile.jspa?name=roland.hauser)** opened **[SPR-8693](https://jira.spring.io/browse/SPR-8693?redirect=false)** and commented  We use Datanucleus (Version 3.0.1) for our persistence layer. Datanucleus, in turn, needs the JDO-API Version 3.0.0. Now, to be able to use the newest version of JDO/Datanucleus in Spring, I need to patch the ""Import-Package"" derective in the manifest of the orm library on every update to correct the version range from [2.0.0, 3.0.0) to [2.0.0, 3.1.0):  == Original == Import-Package: ... javax.jdo;version=""[2.0.0, 3.0.0)"";resolution:=""optional"",javax.jdo.datastore;version=""[2.0.0, 3.0.0)"" ...  == Patched == Import-Package: ... javax.jdo;version=""[2.0.0, 3.1.0)"";resolution:=""optional"",javax.jdo.datastore;version=""[2.0.0, 3.1.0)"" ...  If I won't do so, resolution could not be done by the OSGi runtime. A fix would be cool, it would prevent me to provide a patched version of the orm library.  Regards, Roland  ---  **Affects:** 3.0.5, 3.0.6  **Issue Links:** - #13309 Update spring-orm template.mf to be inclusive of javax.jdo 3.0 (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-09-14T02:07:28Z","2019-01-12T16:48:33Z"
"","13197","java.lang.IllegalArgumentException: interface com.ibm.ws.persistence.WsJpaEntityManagerFactory is not visible from class loader  [SPR-8553]","**[Rohit Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=rohitrajgupta)** opened **[SPR-8553](https://jira.spring.io/browse/SPR-8553?redirect=false)** and commented  We are getting below exception while deploying Apps in WAS 7.0 We are using Spring 3.0 and Open JPA 2.0 , while app server restart folowwing errors are  thrown. We have defined presistence provider as below inpersistence.xml file as WAS 7.0 comes with its  own JPA implemetation as well \org.apache.openjpa.persistence.Persisten ceProviderImpl\ \java:comp/env/WSOracleDS\  Please help  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?112370-Spring-3.0-Open-JPA-2.0-in-WAS-7.0-issue&p=372529&highlight=#post372529  **Attachments:** - [systemout.txt](https://jira.spring.io/secure/attachment/18491/systemout.txt) (_73.03 kB_)  **Issue Links:** - #9062 LocalContainerEntityManagerFactoryBean does not work with IBM WebSphere JPA","closed","in: core,","spring-projects-issues","2011-07-21T20:34:46Z","2019-01-12T05:30:04Z"
"","13147","JavaMailSenderImpl should re-use protocol from mail session when creating transport instance [SPR-8501]","**[Robin Sander](https://jira.spring.io/secure/ViewProfile.jspa?name=robin)** opened **[SPR-8501](https://jira.spring.io/browse/SPR-8501?redirect=false)** and commented  Currently it's not possible to configure the protocol in a mail session because JavaMailSenderImpl always uses it's own 'protocol' property to create the transport instance. For example, if I define a mail resource in a container using protocol 'smtps':  ```xml  ```  JavaMailSenderImpl creates the transport instance like this:  ```java protected Transport getTransport(Session session) throws NoSuchProviderException {   return session.getTransport(getProtocol()); } ```  so I would have to set the protocol' property to 'smtps' as well. Now while it may be convenient to be able to choose a provider by protocol it should also be possible to re-use the protocol which is defined in the mail session. My proposal is to use null or an empty protocol property in this case:  ```java protected Transport getTransport(Session session) throws NoSuchProviderException {   String p = getProtocol();   return (p == null || p.length() ==0) ? session.getTransport() : session.getTransport(p); } ```    ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-06-30T08:26:34Z","2012-06-19T03:39:38Z"
"","13386","TopLinkTransactionManager does not handle exceptions during the commit resulting in partially saved data in the database [SPR-8744]","**[Robin Cohen](https://jira.spring.io/secure/ViewProfile.jspa?name=g8urzc)** opened **[SPR-8744](https://jira.spring.io/browse/SPR-8744?redirect=false)** and commented  I'm using TopLinkTransactionManager via Spring AOP to manage transactions for my service layer.  The advice is configured to rollback on Throwable.  The method on the wrapped bean returned normally (no exception), but during the commit an OutOfMemoryError happened (Toplink uses lots of memory during commit) but the TransactionManager goes ahead and executes the database commit (instead of rollback) with a partially saved object graph - essentially corrupting the database.   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2011-10-06T06:46:23Z","2019-01-12T16:37:21Z"
"","13397","Button Tag [SPR-8755]","**[Roberto Velasco](https://jira.spring.io/secure/ViewProfile.jspa?name=rvelasco)** opened **[SPR-8755](https://jira.spring.io/browse/SPR-8755?redirect=false)** and commented  Thanks to the addition of a new interface (RequestDataValueProcessor) with 3.1 RC1 version (see #12598), is possible to process all parameters rendered using Spring MVC custom tags. This functionality is useful in order to implement for example different security checks (parameter tampering, autobinding,...).  Currently there isn't any tag in order to create a button within a form and in consecuence there isn't any way to create a button that is processed by RequestDataValueProcessor interface.  In other words if there is not  any tag for the button,  there are parameters that are not processed by this new interface. That's why is necessary to create a new button tag at least to complete the functionalities offered by RequestDataValueProcessor interface.  ---  **Affects:** 3.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57fe16e14ba0da689c6a7aa80211696738694aca","closed","type: enhancement,","spring-projects-issues","2011-10-10T08:59:20Z","2019-01-11T14:07:45Z"
"","13136","JndiPropertySource getProperty throws Exception [SPR-8490]","**[Robert Starzer](https://jira.spring.io/secure/ViewProfile.jspa?name=starzer)** opened **[SPR-8490](https://jira.spring.io/browse/SPR-8490?redirect=false)** and commented  JndiPropertySource (Object getProperty(String name) throws JndiLookupFailureException) should return null if the property was not found; now it throws an exception and the web context does not startup.  Also what's unclear for me is (in my case) the missing ""java:/comp/env/"" prefix for looking up properties defined in multiple property sources.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13189 Register JndiPropertySource by default in StandardServletEnvironment","closed","in: core,","spring-projects-issues","2011-06-27T02:27:33Z","2019-01-11T13:09:20Z"
"","12928","NamedParameterUtils does not parse quoted single quotes correctly [SPR-8280]","**[Robert Lichtenberger](https://jira.spring.io/secure/ViewProfile.jspa?name=effad)** opened **[SPR-8280](https://jira.spring.io/browse/SPR-8280?redirect=false)** and commented  NamedParameterUtils.parseSqlStatement has Problems with quoted single quotes within SQL.  ParsedSql sql = NamedParameterUtils.parseSqlStatement(""SELECT 'foo''doo', :xxx FROM DUAL""); // sql.totalParameterCount == 0 !    ---  **Affects:** 3.0.5  **Attachments:** - [SPR-8280-patch.txt](https://jira.spring.io/secure/attachment/18102/SPR-8280-patch.txt) (_4.04 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9fb6e2313ccf54fc3b2936f33e470f9eb1418a5c","closed","in: core,","spring-projects-issues","2011-04-28T05:01:25Z","2012-06-19T03:39:06Z"
"","13705","@RequestBody parameter with type of Object receives a SimpleSessionStatus object [SPR-9066]","**[Robert Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=badgerb1)** opened **[SPR-9066](https://jira.spring.io/browse/SPR-9066?redirect=false)** and commented  If a Servlet method has an Object typed parameter and it is annotated with `@RequestBody` the parameter is initialized with a SimpleSessionState object instead of the properly parsed body of the request.  Example:  ```java @RequestMapping(""/test"") @ResponseBody public List requester(HttpServletRequest request, HttpServletResponse response,          Locale locale, @RequestBody Object bodyData) {     if (bodyData instanceof Map){         processMap((Map)bodyData);     }     if (bodyData instanceof Collection){          processCollection((Collection)bodyData);     } } ```  I've traced the problem to the following line in the getMethodArgumentValues method in the org.springframework.web.method.support.InvocableHandlerMethod class.  ```java args[i] = resolveProvidedArgument(parameter, providedArgs); if (args[i] != null) {    continue; } ```  I believe the code below may fix the issue by not doing a parameter type matching if the parameter is of Type Object since no providedArg would actually be only of type Object and therefore should not match.  This change would be in the InvocableHandlerMethod class.  ```java private Object resolveProvidedArgument(MethodParameter parameter, Object... providedArgs) { 	if (providedArgs == null || parameter.getParameterType() == Object.class) { 		return null; 	} 	for (Object providedArg : providedArgs) { 		if (parameter.getParameterType().isInstance(providedArg)) { 			return providedArg; 		} 	} 	return null; } ```  Because the parameter is of type Object it matches any providedArgs and the one that's provided in this case is the SimpleSessionStatus object.  Note I have not had time to test this change at all.  There is a workaround in that you can change it to a String parameter and perform the conversion manually in your servlet.  Note the reason I need to do this instead of specifying a different Servlet for Map vs Collection, is that the js library that is accessing this servlet uses a single URL to send either a single json object or a list of json objects if there are multiple objects to send.  In the case of the single json it resolves to a Map of name value pairs, and in the case of the list it resolves to a List of Maps of name value pairs.    ---  **Affects:** 3.1 GA","closed","in: web,","spring-projects-issues","2012-01-27T06:49:23Z","2019-01-11T22:23:15Z"
"","13151","org.springframework.transaction bundle is missing import of org.jboss.resource.work [SPR-8505]","**[Richard Steele](https://jira.spring.io/secure/ViewProfile.jspa?name=rsteele)** opened **[SPR-8505](https://jira.spring.io/browse/SPR-8505?redirect=false)** and commented  The manifest for the org.springframework.transaction bundle is missing an Import-Package for org.jboss.resource.work, causing errors when we're trying to use the work manager from within a JBoss container.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5b1c4366c0fc02ad4d0a9b1e393fda644ec6c67, https://github.com/spring-projects/spring-framework/commit/b167f3f7a6f2d54898c9a69b75e6dd92fe57a9b7","closed","type: bug,","spring-projects-issues","2011-07-01T12:36:08Z","2012-06-19T03:39:02Z"
"","12933","Quartz scheduler is initialized even if lazy-init=true and autoStatup=false [SPR-8285]","**[Richard Levac](https://jira.spring.io/secure/ViewProfile.jspa?name=rlevac)** opened **[SPR-8285](https://jira.spring.io/browse/SPR-8285?redirect=false)** and commented  I am upgrading from Spring Framework 2.5.6 to 3.0.5 (just replacing the Spring jars using same xml files) and I have couple of Quartz Scheduler defined in our application-context.xml.  They are all defined with lazy-init=""true"" and autoStartup=""false"".  This is a standalone java application.  With version 2.5.6, these schedulers are not starting when Spring loads the beans definitions but with version 3.x (I've tried 3.0.0, 3.0.5 and 3.1.0.M1) the schedulers are starting but they should not.  Here's my bean configuration:           	     		file:///c:/temp/quartz.properties     	     	     		false     	     	     		     	       And here's the quartz.properties file (this is a remote scheduler) :  #============================================================================ 1. Configure Main Scheduler Properties      #============================================================================  org.quartz.scheduler.instanceName = OSCollectorScheduler org.quartz.scheduler.rmi.proxy = true org.quartz.scheduler.rmi.registryHost = localhost org.quartz.scheduler.rmi.registryPort = 1099   ---  **Affects:** 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/19418/test.zip) (_4.66 kB_)  1 votes, 7 watchers","closed","in: core,","spring-projects-issues","2011-04-28T12:19:45Z","2019-01-12T16:25:37Z"
"","13356","3.0.6 Map to Map conversion shallow copying maps causing unexpected results on upgrade from 3.0.5 [SPR-8714]","**[Ricardo Gladwell](https://jira.spring.io/secure/ViewProfile.jspa?name=rgladwell)** opened **[SPR-8714](https://jira.spring.io/browse/SPR-8714?redirect=false)** and commented  We have created a AbstractMap sub-class, SoftExpireHashMap. This has configurable behaviour which is achieved by setting properties. Once the SoftExpireHashMap has been configured, it must have the init() method called on it so that it can start a thread executor which runs in the background periodically pruning expired cached items.  However, using the default converters included with the 3.0.6 version of org.springframework.format.support.FormattingConversionServiceFactoryBean we find that this Map is being shallow copied before being injected into our objects and is, hence, not initialised.  Please see the following test case that replicates this issue:  https://github.com/rgladwell/spring-map-converter-issue  For some reason the MapToMapConverter is copying this Map despite the fact we don't want any conversions carried out on it.  Workaround: We can eliminate this behaviour by calling FormatterRegistry.removeConvertible(Map.class, Map.class) but obviously this is problem if we ever do need Map to Map conversion.  ---  **Affects:** 3.0.6  **Issue Links:** - #13316 Collection Binding broken - TypeConverterDelegate does bind Collection Elements to Collection type instead of the collection elements Type - #13163 SpEL: Unnecessary conversion of Map arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9607fdaf2dd401eb9d563df944b595168592cd9, https://github.com/spring-projects/spring-framework/commit/cb5954ed02e748f31d3ad342f696fb4a702ebc66  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2011-09-21T09:46:46Z","2019-01-11T14:05:19Z"
"","13659","Hibernate4 version of SpringSessionContext.currentSession() does not create a session if TransactionSynchronizationManager does not contain one [SPR-9020]","**[Reto Urfer](https://jira.spring.io/secure/ViewProfile.jspa?name=urferr)** opened **[SPR-9020](https://jira.spring.io/browse/SPR-9020?redirect=false)** and commented  The Hibernate4 support of Spring 3.1 does not open and register a session in case of the method called is annotated with `@Transactional`(propagation = Propagation.SUPPORTS). In this case HibernateTransactionManager.doBegin() is never called which is the only place where hibernate session is opened. The result is, that all read operations which do not require a transaction will fail because the call to SessionFactory.currentSession() will result in an exception.  The Hibernate3 implementation contains a fallback for this case in SessionFactoryUtils.doGetSession(...) which is missing in the corresponding Hibernate4 implementation of SpringSessionContext.currentSession().  If the transaction propagation is changed to REQUIRES_NEW everything is working fine.  ---  **Affects:** 3.1 GA  **Issue Links:** - #16421 Hibernate4 version of SpringSessionContext.currentSession() does not create a session if TransactionSynchronizationManager does not contain one (_**""is duplicated by""**_) - #13548 org.springframework.orm.hibernate4.HibernateTransactionManager fails with NoSuchMethodError against SessionFactory.getCurrentSession() - #17680 H4 SpringSessionSynchronization#beforeCompletion leaves irreparably broken state if exception thrown in session.disconnect() - #16954 HibernateTransactionManager should allow holdability of ResultSet into the View layer  19 votes, 28 watchers","closed","has: votes-jira,","spring-projects-issues","2012-01-12T04:29:16Z","2019-01-13T07:06:38Z"
"","13271","RmiClientInterceptorUtils.isConnectFailure() fails to detect java.rmi.MarshalException caused by java.net.SocketException [SPR-8628]","**[Renaud Marquet](https://jira.spring.io/secure/ViewProfile.jspa?name=rmarquet)** opened **[SPR-8628](https://jira.spring.io/browse/SPR-8628?redirect=false)** and commented  If the client application already holding a stub to remote method tries to invoke it after the RMI server has been restarted, the following exception is received:  org.springframework.remoting.RemoteAccessException: Could not access remote service [rmi://remote:1099/service]; nested exception is java.rmi.MarshalException: error marshalling arguments; nested exception is: java.net.SocketException: Software caused connection abort: socket write error at org.springframework.remoting.rmi.RmiClientInterceptorUtils.convertRmiAccessException(RmiClientInterceptorUtils.java:190) at org.springframework.remoting.rmi.RmiClientInterceptor.doInvoke(RmiClientInterceptor.java:346) at org.springframework.remoting.rmi.RmiClientInterceptor.invoke(RmiClientInterceptor.java:258)  Although it's not a pure connection failure because the server is rejecting the call (thus the SocketException) it could be seen as a connection failure (by detecting the root cause is a SocketException) because trying to get a new stub will solve the issue.  Doing it so will avoid to have to completely disable stub caching to support RMI server hot restart.  Does anybody have an objection on this?   ---  **Affects:** 3.0.5  1 votes, 0 watchers","closed","type: bug,","spring-projects-issues","2011-08-22T06:31:48Z","2012-06-19T03:39:31Z"
"","13260","Required annotation processing can't be skipped by using bean definition meta element [SPR-8617]","**[Ravi Sanwal](https://jira.spring.io/secure/ViewProfile.jspa?name=rsanwal)** opened **[SPR-8617](https://jira.spring.io/browse/SPR-8617?redirect=false)** and commented  As per the definition of meta attribute and the documentation in RequiredAnnotationBeanPostProcessor if the meta attribute ""SKIP_REQUIRED_CHECK_ATTRIBUTE"" is present on a bean and has a value of boolean(true) the required annotaion check should be skipped for that bean.  Now this works as expected, if programmatically set (beanDefinition.setAttribute(                    RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)), but there is no way that we can do this by specifying a meta element for the desired bean definition.  e.g \  \ \  does not work, however it is expected to.  I am not sure this is by design, but beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE) in method protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) in RequiredAnnotaionBeanPostProcessor returns a string value (as expected from any attribute value) and this comes out to be ""true"" for the example above.  Shouldn't there be a boolean conversion for this attribute value? like Boolean.valueOf(xxxx)  So if the method protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) { return (beanFactory != null && beanFactory.containsBeanDefinition(beanName) && Boolean.TRUE.equals(beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE))); }  is modified as protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) { return (beanFactory != null && beanFactory.containsBeanDefinition(beanName) && Boolean.TRUE.equals(Boolean.valueOf(beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)))); }  The meta value will be usable.  This may not be a critical thing but it definitely adds unnecessary elements to an application. The only way, currently, to skip this check is to create a BeanPostProcessor that takes an input (a list of bean names that need to skip the required check) and manually(programmatically) sets the desired SKIP_REQUIRED_CHECK_ATTRIBUTE to false for the desired beans.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ee821d3d153c7d528cc29b2ebf295c3877a5dff, https://github.com/spring-projects/spring-framework/commit/f6be50eda24dc4811a6f9024b8134e33c5e99a17, https://github.com/spring-projects/spring-framework/commit/19c6a4e209d2552f1213095bfaec67f78dbf0c07","closed","type: enhancement,","spring-projects-issues","2011-08-15T13:52:56Z","2012-06-19T03:39:50Z"
"","13799","Avoid infinite loop in AbstractResource#contentLength [SPR-9161]","**[Ramunas Belkauskas](https://jira.spring.io/secure/ViewProfile.jspa?name=ramunas)** opened **[SPR-9161](https://jira.spring.io/browse/SPR-9161?redirect=false)** and commented  In the method org.springframework.core.io.AbstractResource.contentLength() there is an infinite loop - is.read is called only once and than the returned value is tested repeatedly.  ---  **Affects:** 3.1.1  **Sub-tasks:** - #13801 Backport ""Avoid infinite loop in AbstractResource#contentLength""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ca5fba05ff0ef4dcf076303e1cba19c4b771d94, https://github.com/spring-projects/spring-framework/commit/40a6769309dfcc32e93072769fba2a46dd0e6a0f","closed","in: core,","spring-projects-issues","2012-02-24T00:31:55Z","2019-01-11T22:17:51Z"
"","13787","""Content-Disposition"" in class StandardMultipartHttpServletRequest should be case insensitive [SPR-9149]","**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-9149](https://jira.spring.io/browse/SPR-9149?redirect=false)** and commented  The class StandardMultipartHttpServletRequest does not handle the Header ""Content-Disposition"" correctly. It should be lowercase ""content-disposition"". Tried to figure out what the Servlet 3.0 specification says about this, but haven't found any statement. On the four tested application servers (Tomcat, Jetty, Resin, Glassfish) it's always lowercase.  It's also lowercase in Tomcat but it works because the Tomcat method getHeader(String name) converts the name to lowercase.  ```java // class: org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl @Override public String getHeader(String name) {     String nameLower = name.toLowerCase(Locale.ENGLISH);     ... } ```  As a consequence a MultipartFile parameter is null in Jetty and Resin.  ```java @RequestMapping(value = ""/uploadTest"", method = RequestMethod.POST) public String uploadTest(@RequestParam(value = ""oneFile"", required = false) MultipartFile oneMultipartFile) { ... } ```  I put the source code of my tests on Github: https://github.com/ralscha/uploadproblem  Here the output of the four tested servers: https://github.com/ralscha/uploadproblem/blob/master/output.txt  ---  **Affects:** 3.1.1  **Reference URL:** http://forum.springsource.org/showthread.php?120810-Servlet-3-0-MultipartForm-parameters-missing  **Sub-tasks:** - #13789 Backport ""'Content-Disposition' in class StandardMultipartHttpServletRequest should be case insensitive""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a17a889e8aa5f1d3b3eead636140247c5cde9e88, https://github.com/spring-projects/spring-framework/commit/0281158fccadbe657336867730e13d7fbd231e86","closed","type: bug,","spring-projects-issues","2012-02-22T06:48:03Z","2019-01-11T22:12:21Z"
"","13761","[SpEL] Problem with uppercase property names [SPR-9123]","**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-9123](https://jira.spring.io/browse/SPR-9123?redirect=false)** and commented  Looks like SpEL has a problem with property names where the second character is uppercase.  ```   public class TestObject { 	private String iD; } ```  According to the Java Bean Specification the get and set method have to be named like this. This is also the code Eclipse generates with the ""Source->Generate Getters and Setters"" function.  ``` public String getiD() {      return iD; } public void setiD(String iD) {      this.iD = iD; } ```  Now I try to access the property iD with SpEL  ```   TestObject to = new TestObject(); to.setiD(""a ID""); ExpressionParser expressionParser = new SpelExpressionParser(); Expression idExpression = expressionParser.parseExpression(""iD""); String anId = idExpression.getValue(to, String.class);  ```  This code throws an exception org.springframework.expression.spel.SpelEvaluationException: EL1008E:(pos 0): Field or property 'iD' cannot be found on object of type 'TestObject'  The PropertyUtils class from the Apache [commons-beanutils](http://commons.apache.org/beanutils/) project works:  ```   PropertyUtils.getProperty(to, ""iD"") ```  ---  **Affects:** 3.1.1  **Issue Links:** - #14755 Fix SpEL JavaBean compliance for setters - #15344 Relax JavaBean rules for SpEL property access  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d91a419fdc4f520ba8e443e689998f4e7b5a2b2c, https://github.com/spring-projects/spring-framework/commit/0ca11d2296d289c0b42dc8c371723632d8a3e5ef, https://github.com/spring-projects/spring-framework/commit/1f28bdfbfa7f6f7025dac18bd5cdf4fdefb32950  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2012-02-15T02:54:25Z","2019-01-11T22:13:59Z"
"","13231","org.springframework.jmx.export.NotificationListenerTests is marked @Ignore but extends TestCase in 3.0.x branch [SPR-8587]","**[Ralph Engelmann](https://jira.spring.io/secure/ViewProfile.jspa?name=ralph)** opened **[SPR-8587](https://jira.spring.io/browse/SPR-8587?redirect=false)** and commented  The test case `org.springframework.jmx.export.NotificationListenerTests` is annotated by `@Ignore`, but extends `junit.framework.TestCase` (via `AbstractMBeanServerTests`), so the `@Ignore` Annotation will be not taken in accout and the test will be executed.  In the current trunk (for version 3.1) the problem is already fixed in change 4119 but this is not merged in the current version 3.0.x branch.  _The `@Ignore` Annotation has a comment: `// Getting CCEs regarding ObjectName being cast to String` and exactly this is is the cause for an error that stops the build of the current 3.0.x trunk._  ---  **Affects:** 3.0.5  **Issue Links:** - #13104 Make ""timed"" and other environment-sensitive tests optional - #12744 Clean up ignored JMX tests - #12748 Install jmxremote_optional.jar in JVM used for Spring CI builds","closed","in: core,","spring-projects-issues","2011-08-06T11:37:46Z","2019-01-12T16:37:33Z"
"","13620","support for hibernate interceptor for hibernate4  with spring3.1 [SPR-8980]","**[raj kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=raj@197)** opened **[SPR-8980](https://jira.spring.io/browse/SPR-8980?redirect=false)** and commented  what is the way to inject hibernate interceptor in sessionFactory while using hibernate4 and spring3.1 such that \ used in spring3.1 and hibernate3  ---  **Issue Links:** - #13580 How can Spring 3.1 support hibernate 4 such as support Hibernate 3?","closed","","spring-projects-issues","2012-01-02T04:41:24Z","2019-01-11T14:29:21Z"
"","13006","Need support for Quartz 2.0 [SPR-8359]","**[Rafal Jaworski](https://jira.spring.io/secure/ViewProfile.jspa?name=rafaljaw)** opened **[SPR-8359](https://jira.spring.io/browse/SPR-8359?redirect=false)** and commented  Could not start any scheduled task when using SchedulerFactoryBean with Quartz 2.0. (with 1.8.5 everything works fine). The reason is new JobFactory interface in Quartz - spring AdaptableJobFactory implements old version of this interface.  ---  **Affects:** 3.0.5  **Issue Links:** - #12923 Support Quartz 2.0.x - #13369 Implement new method from ClassLoadHelper to make Spring work with Quartz 2.1 - #13225 Spring should support Quartz 2.0 CronTrigger interface  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-19T23:48:54Z","2019-01-11T13:24:09Z"
"","13608","Flash attributes with RedirectView [SPR-8968]","**[R1B2](https://jira.spring.io/secure/ViewProfile.jspa?name=r1b2)** opened **[SPR-8968](https://jira.spring.io/browse/SPR-8968?redirect=false)** and commented  Hi !  In a controller method, i'm trying to put flash attributes while using a instance of RedirectView, and it doesn't seems to work.  In ViewNameMethodReturnValueHandler, we have the following code to handle a redirect scenario (an also handle flash attributes):  ``` if (isRedirectViewName(viewName)) { 	mavContainer.setRedirectModelScenario(true); } ```  I think it's possible to add into ModelAndViewMethodReturnValueHandler something like  ``` if (mav.getView() instanceof RedirectView) { 	mavContainer.setRedirectModelScenario(true); } ```  Then we could write  ``` redirectAttributes.addFlashAttribute(""flashMessage"", ""the message""));  return new ModelAndView(new RedirectView(""myview"")); ```    ---  **Affects:** 3.1 RC2","closed","type: enhancement,","spring-projects-issues","2011-12-29T05:19:16Z","2012-06-19T03:39:11Z"
"","13374","Using array syntax generates invalid id using freemarker [SPR-8732]","**[Przemek Ch](https://jira.spring.io/secure/ViewProfile.jspa?name=przemek.ch)** opened **[SPR-8732](https://jira.spring.io/browse/SPR-8732?redirect=false)** and commented  Method  ```java protected String autogenerateId() throws JspException {      return StringUtils.deleteAny(getName(), ""[]""); } ```  form AbstractDataBoundFormElementTag class doesn't work with freemarker.  Example  ```xml  ```  generates  ```xml  ```  According to https://jira.springsource.org/browse/SPR-2380 the code above should generate id=""additionalSalesList1.saleResult.policyId""  [] in ID is not a valid HTML so libraries like jQuery cant handle such elements  Tricks like this `$("":input[name='additionalSalesList[1]\\.saleResult\\.policyId']"")` are needed now to select such items using jQuery.  ---  **Affects:** 3.0.6  **Issue Links:** - #12366 Using array syntax generates invalid id in freemarker (_**""duplicates""**_) - #9845 Binding in Velocity templates using EL accessors ([, ]) for collections produces non xhtml strict compliant output  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ba03d5b0c7d7211f910c5bc48c0895fe86614104, https://github.com/spring-projects/spring-framework/commit/e7e74c83d84dcd552d0e75458c91bc920e64d4d4, https://github.com/spring-projects/spring-framework/commit/a9f42061510e5015965a6a680d866db519b5356d  2 votes, 5 watchers","closed","type: regression,","spring-projects-issues","2011-09-29T04:30:02Z","2019-01-13T21:41:51Z"
"","13241","Want to contribute implementations to plug in open source cache stores such as MemcacheD, MongoDB, Derby,Berkeley DB into Spring Caching Framework [SPR-8597]","**[Priya Packrisamy](https://jira.spring.io/secure/ViewProfile.jspa?name=priyapackrisamy)** opened **[SPR-8597](https://jira.spring.io/browse/SPR-8597?redirect=false)** and commented  Hi,  I want to contribute CacheManager and Cache implementation for some popular opensource cache stores such as Memcached, MongoDB, BerkeleyDB, Derby DB, etc. I would like to enable declarative support for advanced features such as replication as well. Please let me know how I can go about it.  Thanks   --- No further details from [SPR-8597](https://jira.spring.io/browse/SPR-8597?redirect=false)","closed","in: core,","spring-projects-issues","2011-08-09T21:49:56Z","2019-01-12T05:30:00Z"
"","13173","MockHttpServletResponse API is incompatible with Servlet 3.0 HttpServletResponse [SPR-8529]","**[Pranay  Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=pranayku)** opened **[SPR-8529](https://jira.spring.io/browse/SPR-8529?redirect=false)** and commented  We have upgraded to Tomcat7 and also upgraded with servlet3.0 jar. Now while compiling our code which is creating a new instance of MockHttpServletResponse we are getting compolation error as:--  getHeaders(java.lang.String) in org.springframework.mock.web.MockHttpServletResponse cannot implement getHeaders(java.lang.String) in javax.servlet.http.HttpServletResponse; attempting to use incompatible return type [groovyc] found   : java.util.List [groovyc] required: java.util.Collection [groovyc]         MockHttpServletResponse response = new MockHttpServletResponse() {  After seeing the code we found that return type of getHeaders() functon have been now changed to ""java.util.Collection"" while spring still returning as ""List"". We are usnig spring 3.0.3. We checked the code in spring 3.0.5 which also have same issue.    ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc725d7e5c4f3f853553bae2711d133c56b4155d, https://github.com/spring-projects/spring-framework/commit/18ab057e90d838b7e604613265144792606fbcf7","closed","type: enhancement,","spring-projects-issues","2011-07-13T05:38:29Z","2012-06-19T03:39:54Z"
"","13739","OrderComparator.INSTANCE should be final [SPR-9101]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-9101](https://jira.spring.io/browse/SPR-9101?redirect=false)** and commented  `OrderComparator.INSTANCE` should be final, since it is public static field.  Having this field non-`final` prevents me from using it, as well as `OrderComparator.sort`   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/35c2869875083670018b8c0d12544667d8b8c17d","closed","in: core,","spring-projects-issues","2012-02-09T01:51:52Z","2019-01-11T22:12:01Z"
"","12925","ResourceBundleViewResolver doesn't recognize class definition [SPR-8277]","**[Philip Yurchuk](https://jira.spring.io/secure/ViewProfile.jspa?name=liquidcool)** opened **[SPR-8277](https://jira.spring.io/browse/SPR-8277?redirect=false)** and commented  I am getting an exception when visiting any web page:  java.lang.IllegalStateException: No bean class specified on bean definition ... Caused by: org.springframework.beans.factory.BeanCreationExce ption: Error creating bean with name 'registrationForm': Instantiation of bean failed; nested exception is java.lang.IllegalStateException: No bean class specified on bean definition ...  Starting with a very basic Roo app, I need to add a second view resolver. The first is the UrlBasedViewResolver configured for Tiles by Roo, and a ResourceBundleViewResolver for my JSP/JSTL views. I used the order property to chain them:  \  \ 	\ 	\  	 \  In my controller:  return new ModelAndView(""registrationForm"", ""model"", model);  In views.properties:  registrationForm(.class)=org.springframework.web.servlet.view.JstlView registrationForm.url=/WEB-INF/jsp/registrationForm.jsp  Here's where the trouble starts. The docs clearly state you must put the parentheses around .class, but after turning on debug logging for the web and beans packages, I discovered it incorrectly parses them:  2011-04-24 12:45:43,645 [http-8080-1] DEBUG org.springframework.beans.factory.support.PropertiesBeanDefinitionReader - Found bean name 'registrationForm' 2011-04-24 12:45:43,645 [http-8080-1] DEBUG org.springframework.beans.factory.support.PropertiesBeanDefinitionReader - Found bean name 'registrationForm' 2011-04-24 12:45:43,645 [http-8080-1] DEBUG org.springframework.beans.factory.support.PropertiesBeanDefinitionReader - Registering bean definition for bean name 'registrationForm' with PropertyValues: length=1; bean property 'url' 2011-04-24 12:45:43,645 [http-8080-1] DEBUG org.springframework.beans.factory.support.PropertiesBeanDefinitionReader - Registering bean definition for bean name 'registrationForm' with PropertyValues: length=1; bean property 'url' 2011-04-24 12:45:43,645 [http-8080-1] DEBUG org.springframework.beans.factory.support.PropertiesBeanDefinitionReader - Found bean name 'registrationForm(' 2011-04-24 12:45:43,645 [http-8080-1] DEBUG org.springframework.beans.factory.support.PropertiesBeanDefinitionReader - Found bean name 'registrationForm(' 2011-04-24 12:45:43,646 [http-8080-1] DEBUG org.springframework.beans.factory.support.PropertiesBeanDefinitionReader - Registering bean definition for bean name 'registrationForm(' with PropertyValues: length=1; bean property 'class)' 2011-04-24 12:45:43,646 [http-8080-1] DEBUG org.springframework.beans.factory.support.PropertiesBeanDefinitionReader - Registering bean definition for bean name 'registrationForm(' with PropertyValues: length=1; bean property 'class)'  If you look carefully, you'll see it creates a registrationForm with a url property, and a ""registrationForm("" bean with a "".class)"" property - it's still using the . as a delimiter. However, when I remove the parentheses, I get the same exception. I got no comments from the Web or Roo forums, so I assume this is a bug.   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=108266","closed","in: core,","spring-projects-issues","2011-04-26T13:41:37Z","2019-01-11T12:54:55Z"
"","13488","JDO PersistenceManager should not be closed until after transaction completion [SPR-8846]","**[Peter Dettman](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.dettman)** opened **[SPR-8846](https://jira.spring.io/browse/SPR-8846?redirect=false)** and commented  I tracked a memory leak in my application down to a failure to close JDO PersistenceManager instances. I am using JdoDaoSupport, with DataNucleus 3.0.3 as JDO implementation.  Looking into the source code for spring-orm, I noticed that PersistenceManagerFactoryUtils attempts to call close() on the PersistenceManager during TransactionSynchronization.beforeCompletion() callback. DataNucleus throws a JDOUserException because the transaction is still active (the exception is logged at DEBUG level and otherwise ignored).  JDO specification 3.0 mrel3 (and earlier) says:  > In a non-managed environment, if the current transaction is active, close throws JDOUserException.  (http://db.apache.org/jdo/specifications.html)  I propose a patch (attached) that: 1. defers the close() call until TransactionSynchronization.afterCompletion, and 2. logs failed close() attempt at WARN level, since it can lead to serious resource leakage.  P.S. There appears to be no SpringORM component available to log issues against.   ---  **Affects:** 3.0.6, 3.1 RC1  **Attachments:** - [SPR-jdo-patch.txt](https://jira.spring.io/secure/attachment/19116/SPR-jdo-patch.txt) (_1008 bytes_)  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2011-11-13T22:41:34Z","2012-06-19T03:39:09Z"
"","13487","TransactionSynchronizationManager should remove ThreadLocal if removal of void ResourceHolder leaves resources map empty [SPR-8845]","**[Peter Dettman](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.dettman)** opened **[SPR-8845](https://jira.spring.io/browse/SPR-8845?redirect=false)** and commented  After doGetResource discovers (and transparently removes) a void ResourceHolder, it should check whether the resources is now completely, and if so, remove the ThreadLocal entry completely (see similar situation in doUnbindResource).  ---  **Affects:** 3.0.6, 3.1 RC1  **Attachments:** - [SPR-resources-patch.txt](https://jira.spring.io/secure/attachment/19115/SPR-resources-patch.txt) (_670 bytes_)  **Issue Links:** - #13486 TransactionSynchronizationManager should not return void ResourceHolder when unbinding","closed","type: enhancement,","spring-projects-issues","2011-11-13T21:28:48Z","2019-01-11T15:03:14Z"
"","13486","TransactionSynchronizationManager should not return void ResourceHolder when unbinding [SPR-8844]","**[Peter Dettman](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.dettman)** opened **[SPR-8844](https://jira.spring.io/browse/SPR-8844?redirect=false)** and commented  Following the behaviour in doGetResource, TransactionSynchronizationManager.doUnbindResource should not return a ResourceHolder that has been marked as void.  ---  **Affects:** 3.0.6, 3.1 RC1  **Attachments:** - [SPR-unbind-patch.txt](https://jira.spring.io/secure/attachment/19114/SPR-unbind-patch.txt) (_745 bytes_)  **Issue Links:** - #13487 TransactionSynchronizationManager should remove ThreadLocal if removal of void ResourceHolder leaves resources map empty  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db0c921313a38ce26fa213a2292da5458f48ece6, https://github.com/spring-projects/spring-framework/commit/c9b36fb4e6a50a22ffa3fc4f231e1e53f11d987e","closed","type: bug,","spring-projects-issues","2011-11-13T21:21:10Z","2019-01-11T15:03:18Z"
"","13485","Javadoc for ResourceHolder.isVoid contains misspelling [SPR-8843]","**[Peter Dettman](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.dettman)** opened **[SPR-8843](https://jira.spring.io/browse/SPR-8843?redirect=false)** and commented  line 42: ""Determine whether this holder is -considere-+considered+ as 'void',""   ---  **Affects:** 3.1 RC1","closed","type: enhancement,","spring-projects-issues","2011-11-13T21:12:31Z","2012-06-19T03:39:24Z"
"","13667","HibernateInterceptor variant for Hibernate 4 [SPR-9028]","**[Per Edlund](https://jira.spring.io/secure/ViewProfile.jspa?name=per.edlund@gmail.com)** opened **[SPR-9028](https://jira.spring.io/browse/SPR-9028?redirect=false)** and commented  When using the HibernateInterceptor with Hibernate4, org.springframework.orm.hibernate4.HibernateTransactionManager and org.springframework.orm.hibernate4.LocalSessionFactoryBean I'm getting a signature error which I don't really understand. I added a comment to one of the other issues regarding this, here's the stack trace  Caused by: java.lang.NoSuchMethodError: org.hibernate.SessionFactory.openSession()Lorg/hibernate/classic/Session; at org.springframework.orm.hibernate3.SessionFactoryUtils.doGetSession(SessionFactoryUtils.java:322) at org.springframework.orm.hibernate3.SessionFactoryUtils.getSession(SessionFactoryUtils.java:233) at org.springframework.orm.hibernate3.HibernateInterceptor.getSession(HibernateInterceptor.java:145) at org.springframework.orm.hibernate3.HibernateInterceptor.invoke(HibernateInterceptor.java:90) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy44.getAll(Unknown Source)  ---  **Affects:** 3.1 GA  **Attachments:** - [HibernateInterceptor.java](https://jira.spring.io/secure/attachment/20551/HibernateInterceptor.java) (_12.12 kB_)  **Issue Links:** - #15915 Re-consider including HibernateTemplate and related classes for Hibernate 4  10 votes, 18 watchers","closed","has: votes-jira,","spring-projects-issues","2012-01-15T15:35:02Z","2019-01-11T22:21:45Z"
"","13691","NamedParameterUtils,substituteNamedParameters() should consider that a namedParameterValue could be a SqlParameterValue  [SPR-9052]","**[Pengling Qian](https://jira.spring.io/secure/ViewProfile.jspa?name=pqian)** opened **[SPR-9052](https://jira.spring.io/browse/SPR-9052?redirect=false)** and commented  h2.Use Case: I have a sql: WHERE clause contains **id in (:ids)**, column ""id"" is type integer in Mysql. But ids given is a collect of strings, I don't want to generate such result: **id in ('1','2','3',...)**, although it could be executed. **id in (1,2,3,...)** is expected by me. So I tried the code below;  ``` Map m = new Map(); m.put(""ids"", new SqlParameterValue(Types.INTEGER, ids)); source = new MapSqlParameterSource(m); query(sql, source, rowmapper); ```  I got an exception because of WHERE clause in parsed sql is: **id in (\?)**, not **id in (?,?,?,...)**  NamedParameterUtils,substituteNamedParameters() didn't consider a collection could be wrapped in SqlParameterValue:  ``` Object value = paramSource.getValue(paramName); if (value instanceof Collection) { //","closed","in: core,","spring-projects-issues","2012-01-24T07:14:20Z","2019-01-11T22:24:01Z"
"","13219","Would be useful to have getContentAsString method in MockPageContext [SPR-8575]","**[Pawel Kozlowski](https://jira.spring.io/secure/ViewProfile.jspa?name=pkozlowski.opensource)** opened **[SPR-8575](https://jira.spring.io/browse/SPR-8575?redirect=false)** and commented  It would be great to have getContentAsString() / getContentAsByteArray() (equivalent of what exists in MockHttpServletResponse) in the org.springframework.mock.web.MockPageContext. Otherwise we are obliged to write rather ugly code:  String output = ((MockHttpServletResponse) mockPageContext.getResponse()).getContentAsString();  Will try to prepare patch for this one.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8745024969186f98b2e525d00a6c6aa2fcabd2fc","closed","type: enhancement,","spring-projects-issues","2011-08-01T07:26:02Z","2012-06-19T03:39:54Z"
"","13452","JdbcUtils getResultSetValue does not handle Apache Derby BLOBs correctly [SPR-8810]","**[Pawel Fronczak](https://jira.spring.io/secure/ViewProfile.jspa?name=pfronczak)** opened **[SPR-8810](https://jira.spring.io/browse/SPR-8810?redirect=false)** and commented  getResultSetValue() reads the BLOB column twice - at first with the ResultSet.getObject(int) method and then with the ResultSet.getBytes(int). This behavior is not supported by the Apache Derby - the getBytes() method will fail to read correct data.  The java.sql.ResultSet API states that: ""For maximum portability, result set columns within each row should be read in left-to-right order, and each column should be read only once."". Therefore i is possible that this issue does not only apply to the Apache Derby database.  I have attached a code snippet reproducing this bug.  ---  **Affects:** 3.0.4, 3.0.6  **Attachments:** - [SelectBlobBug.java](https://jira.spring.io/secure/attachment/19030/SelectBlobBug.java) (_889 bytes_)  **Issue Links:** - #16771 getObject(index, requiredType) fails for BigInteger on Derby","closed","type: bug,","spring-projects-issues","2011-11-01T10:38:43Z","2019-01-11T14:40:34Z"
"","13448","ExtendedBeanInfo raises 'type mismatch' error with covariant property types [SPR-8806]","**[Paul Nardone](https://jira.spring.io/secure/ViewProfile.jspa?name=cosmicpaul)** opened **[SPR-8806](https://jira.spring.io/browse/SPR-8806?redirect=false)** and commented  Transcribed by cbeams from Paul's original comment on #12995  > I am experiencing an issue with ExtendedBeanInfo and covariante propertytypes i've yet to isolate a simple test but it appears to be due using JDK PropertyDescriptor and the long standing JDK bug that are the cause resulting in >  > java.beans.IntrospectionException: type mismatch between read and write methods > at java.beans.PropertyDescriptor.findPropertyType(PropertyDescriptor.java:603) > at java.beans.PropertyDescriptor.setWriteMethod(PropertyDescriptor.java:270) > at java.beans.PropertyDescriptor.\(PropertyDescriptor.java:117) > at org.springframework.beans.ExtendedBeanInfo.addOrUpdatePropertyDescriptor(ExtendedBeanInfo.java:260) > at org.springframework.beans.ExtendedBeanInfo.addOrUpdatePropertyDescriptor(ExtendedBeanInfo.java:178) > at org.springframework.beans.ExtendedBeanInfo.\(ExtendedBeanInfo.java:95) > at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:224) > ... 124 more  ---  **Attachments:** - [testspringprops_1.zip](https://jira.spring.io/secure/attachment/19024/testspringprops_1.zip) (_10.74 kB_)  **Issue Links:** - #13137 Regression - Introspection with BeanUtils started failing for java.awt.Component derived classes (_**""is duplicated by""**_) - #12995 Review ExtendedBeanInfo implementation - #14663 Overhaul non-void JavaBean write method support","closed","type: bug,","spring-projects-issues","2011-10-29T12:14:29Z","2019-01-11T14:41:13Z"
"","13306","Javadoc of JdbcOperations is incorrect [SPR-8664]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-8664](https://jira.spring.io/browse/SPR-8664?redirect=false)** and commented  Small issue: in the Javadoc of the JdbcOperations class spring-mock.jar is mentioned. This should be spring-test.jar.   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4e522c0cc36f5d506d01e1906c70f1151bddf1b7","closed","type: bug,","spring-projects-issues","2011-09-02T01:20:25Z","2012-06-19T03:39:49Z"
"","13293","@Scheduled doesn't work with well with proxies [SPR-8651]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-8651](https://jira.spring.io/browse/SPR-8651?redirect=false)** and commented  Tested on nightly build of August 29th 2011:  public interface MyRepository { }  `@Component` public class MyRepositoryImpl implements MyRepository { `@Scheduled`(fixedDelay = 5) public void initCache() {} }  This works. But when I change from `@Component` to `@Repository` I get this exception:  java.lang.IllegalArgumentException: object is not an instance of declaring class at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:64) at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:53) at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:81) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)  Adding the `@Scheduled` method to the interface doesn't help also.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13514 `@Scheduled` does not work in classes annotated with `@Cacheable` (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d4123d06379fadc0b05043f5ab5a1a2cb264314b  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2011-08-30T05:08:54Z","2019-01-13T07:08:02Z"
"","13140","@EnableTransactionManagement conflicts with  [SPR-8494]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-8494](https://jira.spring.io/browse/SPR-8494?redirect=false)** and commented  I have `@Configuration` Spring configuration with `@EnableTransactionManagement` and a `@ImportResource`. In the imported resource I use . This results in: java.lang.IllegalArgumentException: Class name [null] is not a known auto-proxy creator class  When I use  instead of `@EnableTransactionManagement` everything works fine.  Problem also exists in nightly build of June 27th.  Complete stacktrace: Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [applicationContext.xml]; nested exception is java.lang.IllegalArgumentException: Class name [null] is not a known auto-proxy creator class at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:412) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsFromImportedResources(ConfigurationClassBeanDefinitionReader.java:293) at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:118) at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:105) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:264) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigurationClasses(ConfigurationClassPostProcessor.java:199) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:175) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:617) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:446) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:102) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:124) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:149) ... 24 more Caused by: java.lang.IllegalArgumentException: Class name [null] is not a known auto-proxy creator class at org.springframework.aop.config.AopConfigUtils.findPriorityForClass(AopConfigUtils.java:140) at org.springframework.aop.config.AopConfigUtils.registerOrEscalateApcAsRequired(AopConfigUtils.java:113) at org.springframework.aop.config.AopConfigUtils.registerAutoProxyCreatorIfNecessary(AopConfigUtils.java:74) at org.springframework.aop.config.AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(AopNamespaceUtils.java:58) at org.springframework.cache.config.AnnotationDrivenCacheBeanDefinitionParser$AopAutoProxyConfigurer.configureAutoProxyCreator(AnnotationDrivenCacheBeanDefinitionParser.java:109) at org.springframework.cache.config.AnnotationDrivenCacheBeanDefinitionParser.parse(AnnotationDrivenCacheBeanDefinitionParser.java:67) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1414) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1404) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:184) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:111) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) ... 41 more  ---  **Affects:** 3.1 M2  **Issue Links:** - #13058 `@EnableTransactionManagement` does not handle APC escalation (_**""duplicates""**_) - #13375 Unable to use `@EnableTransactionManagement` along with  (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2011-06-28T07:05:37Z","2019-01-13T07:08:36Z"
"","13527","@Role looks half-baked - should use enum for hints [SPR-8886]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-8886](https://jira.spring.io/browse/SPR-8886?redirect=false)** and commented  `@org`.springframework.context.annotation.Role appears to be an incomplete design based on the value() types. Other annotations in Spring (and I can't think of one that doesn't) use enumerated values for known framework options. Instead of using a magical int value, the role should use a new RoleHint enum. This is much better!   ---  **Affects:** 3.1 RC1","closed","in: core,","spring-projects-issues","2011-11-29T16:44:06Z","2011-11-29T18:53:19Z"
"","13204","Add option to Proxy factories to copy parameter-level annotations [SPR-8560]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-8560](https://jira.spring.io/browse/SPR-8560?redirect=false)** and commented  When using proxies from Spring AOP, it is not possible to examine the intercepted method for ElementType.PARAMETER annotations. My best solution so far, which wastes cycles, is to unwrap the spring proxy, lookup the actual method on the target source with the same call signature and then examine that for annotations.  Spring could easily provide a better way if it allowed these annotations to be copied onto the proxy method.  ---  **Affects:** 3.0 GA  **Issue Links:** - #11734 Add support in AopUtils for obtaining target class transitively when target is an AopProxy","closed","status: bulk-closed,","spring-projects-issues","2011-07-25T19:39:14Z","2019-01-12T03:49:35Z"
"","13827","CachedIntrospectionResults cannot be cleared for null class loaders [SPR-9189]","**[Paul Austin](https://jira.spring.io/secure/ViewProfile.jspa?name=p_d_austin)** opened **[SPR-9189](https://jira.spring.io/browse/SPR-9189?redirect=false)** and commented  If a class loaded by the system class loader (null) then it is cached by the CachedIntrospectionResults class. However there is no way to clear this item from the cache as clearClassLoader ignores null class loader arguments.  This means that the classCache will include a reference to the CachedIntrospectionResults thus preventing in some cases CachedIntrospectionResults from being garbage collected.  The class that causes this problem in my spring + spring security app is ArrayList. It seems to happen when I include a task scheduler in my application.  I tried to create a simple test case below. But it was able to unload the classes in this case.  public class TestListener implements ServletContextListener {  public void contextInitialized(ServletContextEvent sce) { CachedIntrospectionResults.acceptClassLoader(Thread.currentThread() .getContextClassLoader()); BeanUtils.getPropertyDescriptors(ArrayList.class);  }  public void contextDestroyed(ServletContextEvent sce) { CachedIntrospectionResults.clearClassLoader(Thread.currentThread() .getContextClassLoader()); } }   ---  **Affects:** 3.0.7  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2012-03-01T18:51:42Z","2013-01-16T01:25:04Z"
"","13826","Reference documentation has incorrect attribute name for Spring url tag [SPR-9188]","**[Patrick Radtke](https://jira.spring.io/secure/ViewProfile.jspa?name=pradtke)** opened **[SPR-9188](https://jira.spring.io/browse/SPR-9188?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.1.1.RELEASE/spring-framework-reference/html/spring.tld.html#spring.tld.url  javascriptEncoding is listed as an attribute. The correct name is javaScriptEscape   ---  **Affects:** 3.1.1","closed","type: bug,","spring-projects-issues","2012-02-29T13:13:50Z","2012-06-19T03:39:51Z"
"","13480","DateTimeFormat javdoc mistake [SPR-8838]","**[Patrick Radtke](https://jira.spring.io/secure/ViewProfile.jspa?name=pradtke)** opened **[SPR-8838](https://jira.spring.io/browse/SPR-8838?redirect=false)** and commented  The javadoc for DateTimeFormat says  ""For custom formatting, set the pattern() attribute to be the DateTime pattern, such as yyyy/mm/dd h:mm:ss a.""  This is example is misleading. MM is for month, while mm is for minutes - the example uses minutes where month is expected. Someone who isn't paying attention will use the example pattern and wonder why their month is always January.  example should probably be ""yyyy/MM/dd hh:mm:ss a""  (capital M for moneths, extra h for hours)   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ededaf11c933f760f741f3dd311dc3e1e418af4","closed","type: bug,","spring-projects-issues","2011-11-11T14:22:16Z","2012-06-19T03:39:40Z"
"","13766","@PropertySource annotation with multiple values and a name fails to register all property sources [SPR-9127]","**[Patrick Marschik](https://jira.spring.io/secure/ViewProfile.jspa?name=pmarschik)** opened **[SPR-9127](https://jira.spring.io/browse/SPR-9127?redirect=false)** and commented  When you create an annotation based configuration class with a `@PropertySource` annotation that provides multiple .properties files and a name for that property source only one property source gets registered since all `ResourcePropertySource` s have the same name and thus get overwritten by the subsequent property sources.  Example:  ``` @Configuration @PropertySource(name = ""someName"", value = {""classpath:a.properties"", ""classpath:b.properties""}) public class MyConfiguration { } ```  this will only register `b.properties` in the Environment since 2 `ResourcePropertySource`s with the name `someName` are created and added to the environment.  ---  **Affects:** 3.1 GA  **Issue Links:** - #14016 Resolving ${} system properties in `@PropertySource` annotation does not work anymore (_**""is duplicated by""**_) - #13772 Fix regression in `@PropertySource` placeholder resolution - #16260 `@PropertySource` locations are being dropped in ConfigurationClassParser processPropertySource  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4df2a14b13ac41d71f8034fa68e1b7e54e3f7a48, https://github.com/spring-projects/spring-framework/commit/e30d6104f367eb416c420ef801a8f152201443cd, https://github.com/spring-projects/spring-framework/commit/41ade68b50b39485b3cf02b9c6fb8eb74962146b","closed","in: core,","spring-projects-issues","2012-02-16T06:24:09Z","2019-01-13T07:06:18Z"
"","13348","UriUrils.decode() not properly rejecting invalid escaped URLs [SPR-8706]","**[Patrick E](https://jira.spring.io/secure/ViewProfile.jspa?name=peger)** opened **[SPR-8706](https://jira.spring.io/browse/SPR-8706?redirect=false)** and commented  UriUtils is not properly validating that a %XX is a valid hex code, leading to invalid characters in the encoded output. Possible security implications unknown.   ---  **Affects:** 3.0.6  **Attachments:** - [x.diff](https://jira.spring.io/secure/attachment/18813/x.diff) (_1.03 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5afe13928528cc37cdf6337a7e8a9c8d061ba6a5","closed","in: core,","spring-projects-issues","2011-09-18T21:23:42Z","2012-06-19T03:39:46Z"
"","13004","Binding: Map key with brackets fails [SPR-8357]","**[Patrice Blanchardie](https://jira.spring.io/secure/ViewProfile.jspa?name=inisos)** opened **[SPR-8357](https://jira.spring.io/browse/SPR-8357?redirect=false)** and commented  A map key with brackets can't be bound at submission.  e.g. POST: map['key[0]']=value  The key is silently broken by Spring: 'key[0 instead of key[0]  The following map is built: map['key[0]=value   ---  **Affects:** 3.0.5","closed","status: bulk-closed,","spring-projects-issues","2011-05-19T15:38:13Z","2019-01-12T03:49:47Z"
"","13436","Possible to make spring TaskExecutor extend ExecutorService or provide similar functions on TaskExecutor? [SPR-8794]","**[pas filip](https://jira.spring.io/secure/ViewProfile.jspa?name=pasfilip)** opened **[SPR-8794](https://jira.spring.io/browse/SPR-8794?redirect=false)** and commented  Hi, I was wondering why spring's task executor didn't also extend from java.util.ExecutorService and if it could be added? The only reason I could think of is that it has grown as such historically or perhaps that there is a backwards compatible issue somewhere or perhaps it was chosen because the shutdown methods didn't want to be exposed? Not sure why and maybe this has already been discussed internally or on mailing lists etc although I didn't find anything related to this topic after a brief search. I apologize in advance if it's an outdated discussion. It looks like it shouldn't be too difficult to implement this in most TaskExecutor implementations and it would be a useful extension if you want to inject an ExecutorService in a managed bean making use of the invokeAll, invokeAny methods regardless of the underlying infrastructure being managed or unmanaged. The motivation I have for wanting an ExecutorService is that it isn't DRY code to achieve the semantics provided by invokeAll or invokeAny using the Async annotation or the TaskExecutor. The drill is to create the Callable or Runnable and submit them or invoke the async methods, collect the futures and iterate over them to retrieve the results.(could use static methods to be DRY but still not ideal) It would be nice to be able to inject the ExecutorService into your bean and just invoke invokeAll for the situations where a bunch of jobs need to run and all return while using the same pool underneath for this as used for the Async annotation. Nothing actually prevents me from doing this it just means I can't use the nice task namespace to keep the xml configuration short. If the TaskExecutor would extend ExecutorService I could use the task namespace and inject a ExecutorService into any managed by without needing to update the xml config. (All I would need to add is a Qualifier or custom Annotation for discriminating with the scheduler pool should there be one) It would also mean I could use the WorkManager implementation without having to write an adapter to provide the invokeAll and invokeAny semantics. Alternatively I could retrieve the ExecutorService that some of spring's TaskExecutor implementations contain and expose it as a bean but it would mean I couldn't switch easily to using alternate implementations of TaskExecutor that don't contain a wrapped ExecutorService.  In summary I'd say it would be a nice addition which provides a useful service while keeping configuration changes to a minimum and providing more DRY code.    ---  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-10-20T16:08:59Z","2019-01-12T02:37:03Z"
"","13415","AbstractAsyncExecutionAspect setExecutor wrong assignment [SPR-8772]","**[pas filip](https://jira.spring.io/secure/ViewProfile.jspa?name=pasfilip)** opened **[SPR-8772](https://jira.spring.io/browse/SPR-8772?redirect=false)** and commented  Sorry I didn't check if this was fixed in spring 3.1 I searched jira but didn't find anything related to this issue.  Wrong argument passed to TaskExecutorAdapter when using a java.util.concurrent.Executor. This is the source code by decompiling AbstractAsyncExecutionAspect from the spring 3.0.5      public void setExecutor(Executor executor)     {         if(executor instanceof AsyncTaskExecutor)             asyncExecutor = (AsyncTaskExecutor)executor;         else             asyncExecutor = new TaskExecutorAdapter(asyncExecutor);     }  Notice that the asyncExecutor is passed to the TaskExecutorAdapter instead of the executor variable.    ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dacfa6993a5604c8fef3c580e965ac1d52a687b1, https://github.com/spring-projects/spring-framework/commit/0150000d8b3506ca31cbd75cdcd506174c3c9762","closed","in: core,","spring-projects-issues","2011-10-13T04:52:38Z","2012-06-19T03:39:19Z"
"","13256","Provide more information about TransactionSystemException [SPR-8613]","**[pas filip](https://jira.spring.io/secure/ViewProfile.jspa?name=pasfilip)** opened **[SPR-8613](https://jira.spring.io/browse/SPR-8613?redirect=false)** and commented  Hi, I was wondering if it would be possible to extend the TransactionSystemException so that the getMessage() when the stack trace is printed the full information is accessible. Currently We have an ExceptionFilter that catches errors and logs them. This doesn't provide any helpful information tracking down the root of the issue because the information is not included in the getMessage or printStackTrace. This is just an example but overriding the getMessage as below will provide the full information and avoids having to add extra code to extract the full info of the reason for the rollback.  Maybe something like this already exists if so please forgive me.      @Override     public String getMessage() {         StringBuilder buf = new StringBuilder();         buf.append(""\nCaught a transaction exception:"").append(super.getMessage());         if ( getApplicationException() != null ){             buf.append(""\nApplicationException:"").append(ExceptionUtils.getFullStackTrace(e.getApplicationException()));         }         if ( getOriginalException() != null ){             buf.append(""\nOriginalException:"").append(ExceptionUtils.getFullStackTrace(e.getOriginalException()));         }         if ( getMostSpecificCause() != null ){             buf.append(""\nMostSpecificCause:"").append(ExceptionUtils.getFullStackTrace(e.getMostSpecificCause()));         }         return buf.toString();     }    --- No further details from [SPR-8613](https://jira.spring.io/browse/SPR-8613?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-08-12T09:50:54Z","2018-12-28T09:32:26Z"
"","13759","org.springframework.beans.NullValueInNestedPathException [SPR-9121]","**[Parthiban Samykutti](https://jira.spring.io/secure/ViewProfile.jspa?name=parthiban.samykutti)** opened **[SPR-9121](https://jira.spring.io/browse/SPR-9121?redirect=false)** and commented  ```java org.springframework.beans.InvalidPropertyException: Invalid property 'applicationInfoList[0]' of bean class [org.test.model.ApplicationForm]: Illegal attempt to get property 'applicationInfoList' threw exception; nested exception is org.springframework.beans.NullValueInNestedPathException: Invalid property 'applicationInfoList[0]' of bean class [org.test.model.ApplicationForm]: Cannot access indexed value of property referenced in indexed property path 'applicationInfoList[0]': returned null 	at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:826) 	at org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:555) 	at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:532) 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:904) 	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76) 	at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:673) 	at org.springframework.validation.DataBinder.doBind(DataBinder.java:569) 	at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:191) 	at org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:110) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.doBind(AnnotationMethodHandlerAdapter.java:734) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doBind(HandlerMethodInvoker.java:815) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:359) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:171) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:427) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:415) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:788) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) 	at weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:227) 	at weblogic.servlet.internal.StubSecurityHelper.invokeServlet(StubSecurityHelper.java:125) 	at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:292) 	at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:175) 	at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:3594) 	at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) 	at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) 	at weblogic.servlet.internal.WebAppServletContext.securedExecute(WebAppServletContext.java:2202) 	at weblogic.servlet.internal.WebAppServletContext.execute(WebAppServletContext.java:2108) 	at weblogic.servlet.internal.ServletRequestImpl.run(ServletRequestImpl.java:1432) 	at weblogic.work.ExecuteThread.execute(ExecuteThread.java:201) 	at weblogic.work.ExecuteThread.run(ExecuteThread.java:173) Caused by: org.springframework.beans.NullValueInNestedPathException: Invalid property 'applicationInfoList[0]' of bean class [org.test.model.ApplicationForm]: Cannot access indexed value of property referenced in indexed property path 'applicationInfoList[0]': returned null 	at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:744) 	... 32 more ```    ---  **Affects:** 3.0.4","closed","status: invalid,","spring-projects-issues","2012-02-14T23:33:30Z","2019-01-12T05:29:10Z"
"","13611","Introduce init levels during boot time [SPR-8971]","**[Papick G. Taboada](https://jira.spring.io/secure/ViewProfile.jspa?name=p.g.taboada)** opened **[SPR-8971](https://jira.spring.io/browse/SPR-8971?redirect=false)** and commented  Would be great to be able to define start levels and associate beans to them:        and  \ 		\	 \  This would allow us to sync startup of beans across modules.    --- No further details from [SPR-8971](https://jira.spring.io/browse/SPR-8971?redirect=false)","closed","","spring-projects-issues","2011-12-29T07:52:44Z","2019-01-11T14:30:28Z"
"","13610","Hibernate 4 + Hibernate Search 4 bootstrap error [SPR-8970]","**[Papick G. Taboada](https://jira.spring.io/secure/ViewProfile.jspa?name=p.g.taboada)** opened **[SPR-8970](https://jira.spring.io/browse/SPR-8970?redirect=false)** and commented  As soon as I switch from hibernate 3 to 4 (using hibernate search), I get the following exception during bootstrap:  Invocation of init method failed; nested exception is java.util.ServiceConfigurationError: org.hibernate.integrator.spi.Integrator: Provider org.hibernate.search.hcore.impl.HibernateSearchIntegrator could not be instantiated: java.lang.ClassCastException  Starting a plain LocalSessionFactoryBean form the hibernate4 package works.  My dependencies are managed by ivy.   ---  **Affects:** 3.1 GA  **Attachments:** - [SPR-8970.zip](https://jira.spring.io/secure/attachment/19439/SPR-8970.zip) (_8.01 kB_)","closed","status: declined,","spring-projects-issues","2011-12-29T07:47:56Z","2019-01-12T16:37:04Z"
"","12917","BeanFactoryPostProcessor breaks default post-processing of @Configuration classes [SPR-8269]","**[Osvaldas Grigas](https://jira.spring.io/secure/ViewProfile.jspa?name=prickus)** opened **[SPR-8269](https://jira.spring.io/browse/SPR-8269?redirect=false)** and commented  When using AnnotationConfigApplicationContext, if I declare at least one `@Bean` of type BeanFactoryPostProcessor (even if it's a stub that doesn't do anything), this breaks default post-processing of the `@Configuration` bean, meaning that `@Autowired` fields are no longer injected, `@PostConstruct` methods are not called, etc.  I'm attaching a test case to prove my point.  A workaround is to manually add the relevant BeanPostProcessors (like AutowiredAnnotationBeanPostProcessor and CommonAnnotationBeanPostProcessor) to BeanFactory.  Same thing happens in web app when I use ContextLoaderInitializer to load `@Configuration` classes or define them through XML config. My particular case is that I use MyBatis-Spring integration and I cannot declare a `@Bean` of type org.mybatis.spring.mapper.MapperScannerConfigurer using annotation config, because this bean is a BeanFactoryPostProcessor and thus breaks autowiring of `@Configuration` class.  ---  **Affects:** 3.1 M1  **Attachments:** - [org.mybatis.spring.sample.zip](https://jira.spring.io/secure/attachment/19013/org.mybatis.spring.sample.zip) (_8.37 kB_) - [testcase.zip](https://jira.spring.io/secure/attachment/18060/testcase.zip) (_1.98 kB_)  **Issue Links:** - #12905 `@PostConstruct` and PropertyPlaceholderConfigurer do not work together in AnnotationConfigApplicationContext (_**""is duplicated by""**_) - #12525 BeanDefinitionRegistryPostProcessor registered via `@Bean` will not be invoked - #14099 Method postProcessBeanDefinitionRegistry is not called if the bean implements BeanDefinitionRegistryPostProcessor - #18808 Warn about non-static BeanDefinitionRegistryPostProcessor declarations on `@Configuration` classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/52bef0b7b024e794186437dee78945fbb5bd209a","closed","in: core,","spring-projects-issues","2011-04-22T01:10:15Z","2019-01-13T07:09:41Z"
"","13423","JaxbElementPayloadMethodProcessor supports some RequestPayload that should not be supported [SPR-8780]","**[omar elmandour](https://jira.spring.io/secure/ViewProfile.jspa?name=ramo)** opened **[SPR-8780](https://jira.spring.io/browse/SPR-8780?redirect=false)** and commented  While i was trying to migrate some endPoint to the new  EndPoint model with  `@RequestPayload`, i have encountered this issue.  Previously during the migration, any bad migration will safely failed against any invocation with the well known exception :  ```java No adapter for endpoint YYY. Is your endpoint annotated with @Endpoint, or does it implement ... ```  But let say that the result of the migration, the endpoint looks like :  ```java public void saveTheWorld(@RequestPayload JAXBElement request) {} ```  It should failed because org.yourOwnPojo.Person is not a jaxb one. This tests below show that it will not fail.  ```java  package org.springframework.ws.server.endpoint.adapter.method.jaxb;  import java.lang.reflect.Method;  import javax.xml.bind.JAXBElement;  import org.junit.Assert; import org.junit.Test; import org.springframework.core.MethodParameter; import org.springframework.ws.server.endpoint.annotation.RequestPayload; /**  *   * @author elmandour omar  */ public class TestProcessor { 	 	@Test 	public void testShouldNotSupportTheRequestPayload(){ 		JaxbElementPayloadMethodProcessor processor = new JaxbElementPayloadMethodProcessor(); 		Method mymethod = SupermanEndPoint.class.getMethods()[0]; 		Assert.assertTrue(processor.supportsRequestPayloadParameter(new MethodParameter(mymethod,0))); 	} }   class SupermanEndPoint {     public void saveTheWorld(@RequestPayload JAXBElement request) {}   }    class NotAJaxbObject{} ```  The marshalling will works fine and the request object is created but with null or default values (int..)  You might wonder how can someone confuse his own pojo object with a jaxb one ? Like me by having typically the same name, for the jaxb and your pojo object.  Maybe the supportsRequestPayloadParameter should test that the embedded object is a real jaxb one (with `@XmlType` annotation from the package javax.xml.bind.annotation ?)  Thanks for reading me   --- No further details from [SPR-8780](https://jira.spring.io/browse/SPR-8780?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-09-06T10:34:05Z","2011-12-06T13:32:07Z"
"","13213","Proposition of a annotation for testing performance oriented sql [SPR-8569]","**[omar elmandour](https://jira.spring.io/secure/ViewProfile.jspa?name=ramo)** opened **[SPR-8569](https://jira.spring.io/browse/SPR-8569?redirect=false)** and commented  It would be nice if the Spring TestContext Framework provided support for performance tests oriented sql. It is well know that some ORM in the hands of novice developer  can produce methods in dao that  will generate against with real datas a lot of queries.  Actually it is possible but it is done programmatically,(start, call Mydao, stop and count...) so a lot of copy/paste is done.  This performance testing need is more a cross-cutting concern. It will even able to reuse previous tess done for example againts legacy database dumped from the production.  The annotation will prevent the arise of thoses issues by limiting the numbers of jdbc queries made by a specific test and will help new developers to spot more quickly any performance degradation newly introduced.  Proposed Annotation Names      @MaxQueries  Code Examples  ```java @MaxQueries(10) public void testFindPersonsByName() throws Exception{  } ```  `@Test`    --- No further details from [SPR-8569](https://jira.spring.io/browse/SPR-8569?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-07-28T13:46:38Z","2014-07-20T11:47:13Z"
"","13105","GenericConverter specifies Set getConvertibleTypes(), but ConvertiblePair doesn't override hashCode and equals. [SPR-8459]","**[Olve S. Hansen](https://jira.spring.io/secure/ViewProfile.jspa?name=olvesh)** opened **[SPR-8459](https://jira.spring.io/browse/SPR-8459?redirect=false)** and commented  I want to use the set of `ConvertiblePair` in my code, to check if a given convert request is valid.  ``` Set getConvertibleTypes(); Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType); ```  By creating a `ConvertiblePair` from the two `TypeDescriptor` parameters, I should be able to ask my set of `ConvertiblePair` (same as the one returned from `getConvertibleTypes()` if it contains the `ConvertiblePair` built from the convert-request. But because it is a new instance and hashCode/equals are not overridden this is not possible.  See the attached unit test, and suggested patch (also with the unit test). The patch was created against 3.0.3 svn tag.   ---  **Affects:** 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.1 M1, 3.1 M2  **Attachments:** - [ConvertiblePairTest.java](https://jira.spring.io/secure/attachment/18347/ConvertiblePairTest.java) (_1.56 kB_) - [Suggested_fix_with_unit-tests_.patch](https://jira.spring.io/secure/attachment/18348/Suggested_fix_with_unit-tests_.patch) (_3.17 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/576b8fec3124d91e191d1fa69b873fdadf6ba08f, https://github.com/spring-projects/spring-framework/commit/340a8b28f9c9b6bbe1ef0d4d23308ae43aad0390","closed","in: core,","spring-projects-issues","2011-06-16T01:43:09Z","2012-06-19T03:39:41Z"
"","13754","Ambiguous session attribute causes IllegalArgumentException: argument type mismatch [SPR-9116]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-9116](https://jira.spring.io/browse/SPR-9116?redirect=false)** and commented  Consider the following simplified example:  ``` @Controller @RequestMapping(""/foo"") @SessionAttributes(""command"") public class FooController {      @RequestMapping(""/page1"")     public ModelAndView page1() {         return new ModelAndView(""foo"", ""command"", new FooCommand());     }  }  @Controller @RequestMapping(""/bar"") @SessionAttributes(""command"") public class BarController {      @RequestMapping(""/page2"")     public String page2(@ModelAttribute(""command"") final BarCommand command) {         return ""bar"";     }  } ```  So you have two controllers using the same name for a session bound model attribute. Now call /foo/page1 and then /bar/page2 the following exception will be arise:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: argument type mismatch         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:681) ~[spring-webmvc-3.0.6.RELEASE.jar:3.0.6.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:574) ~[spring-webmvc-3.0.6.RELEASE.jar:3.0.6.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) ~[servlet-api.jar:na]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) ~[servlet-api.jar:na]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304) [catalina.jar:7.0.22]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [catalina.jar:7.0.22]         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224) [catalina.jar:7.0.22]         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169) [catalina.jar:7.0.22]         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:581) [catalina.jar:7.0.22]         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168) [catalina.jar:7.0.22]         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) [catalina.jar:7.0.22]         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) [catalina.jar:7.0.22]         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405) [catalina.jar:7.0.22]         at org.apache.coyote.ajp.AjpProcessor.process(AjpProcessor.java:200) [tomcat-coyote.jar:7.0.22]         at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515) [tomcat-coyote.jar:7.0.22]         at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302) [tomcat-coyote.jar:7.0.22]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) [na:1.7.0_01]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) [na:1.7.0_01]         at java.lang.Thread.run(Thread.java:722) [na:1.7.0_01] Caused by: java.lang.IllegalArgumentException: argument type mismatch         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_01]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_01]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_01]         at java.lang.reflect.Method.invoke(Method.java:601) ~[na:1.7.0_01]         at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:176) ~[spring-web-3.0.6.RELEASE.jar:3.0.6.RELEASE]         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:436) ~[spring-webmvc-3.0.6.RELEASE.jar:3.0.6.RELEASE]         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:424) ~[spring-webmvc-3.0.6.RELEASE.jar:3.0.6.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790) ~[spring-webmvc-3.0.6.RELEASE.jar:3.0.6.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) ~[spring-webmvc-3.0.6.RELEASE.jar:3.0.6.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:669) ~[spring-webmvc-3.0.6.RELEASE.jar:3.0.6.RELEASE]         ... 71 common frames omitted ```  This can be really hard to track error, when the application is not as simple es the example above.  I understand that an exception is thrown, but the message should be something like ""Can't bind FooCommand found in session to handler method BarController#page2(BarCommand). You may have used session model attribute 'command', ambiguously"".   ---  **Affects:** 3.0.6","closed","type: enhancement,","spring-projects-issues","2012-02-13T01:35:26Z","2012-02-16T05:49:28Z"
"","13706","ServletContextResource.isReadable() returns ""true"" for directories [SPR-9067]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-9067](https://jira.spring.io/browse/SPR-9067?redirect=false)** and commented  Consider this configuration:  ```  ```  The resource directory /WEB-INF/resources/immutable/ contains several files and subdirectories. One subdirectory is called images.  A browser request to /static/nonexistingfile.png results in a 404 HTTP error. But a request to /static/images (existing directory, without a file name specified) results in a FileNotFoundException:  ``` java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/resources/immutable/images]         at org.springframework.web.context.support.ServletContextResource.getInputStream(ServletContextResource.java:118) ~[spring-web-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:240) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:141) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) ~[servlet-api.jar:na]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) ~[servlet-api.jar:na] ```  I think the getResource(HttpServletRequest) method in ResourceHttpRequestHandler should also check if the requested resources is a File.  On a high volume website this can cause tons of FileNotFoundExceptions due to robot visits. This is why I classified this issue with major priority.  ---  **Affects:** 3.1 GA  **Issue Links:** - #13712 Spring MVC resources handler generates a 500 internal error when accessing a directory resource (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f8238f52433432d78a6f6d0a9352f5b1efa1cb02","closed","in: core,","spring-projects-issues","2012-01-29T06:09:07Z","2019-01-14T05:22:47Z"
"","13702","Update docs on differences between new and old MVC infrastructure when narrowing request mapping by request method only [SPR-9063]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-9063](https://jira.spring.io/browse/SPR-9063?redirect=false)** and commented  The code below worked in Spring 3.0 but fails in 3.1.  ``` @Controller @RequestMapping(value = ""/foo"", method = { RequestMethod.GET, RequestMethod.POST }) public class FooController {      @RequestMapping(method = RequestMethod.GET)     public String index() {         return ""form"";     }      @RequestMapping(method = RequestMethod.POST)     public String submit() {         return ""success"";     }  } ```  Exception:  ``` Caused by: java.lang.IllegalStateException: Ambiguous mapping found. Cannot map 'fooController' bean method public java.lang.String myproject.controller.FooController.submit() to {[/foo],methods=[GET || POST],params=[],headers=[],consumes=[],produces=[],custom=[]}: There is already 'fooController' bean method public java.lang.String myproject.controller.FooController.index() mapped.         at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.registerHandlerMethod(AbstractHandlerMethodMapping.java:181) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.detectHandlerMethods(AbstractHandlerMethodMapping.java:145) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.initHandlerMethods(AbstractHandlerMethodMapping.java:107) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.initApplicationContext(AbstractHandlerMethodMapping.java:87) ~[spring-webmvc-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.context.support.ApplicationObjectSupport.initApplicationContext(ApplicationObjectSupport.java:119) ~[spring-context-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.web.context.support.WebApplicationObjectSupport.initApplicationContext(WebApplicationObjectSupport.java:72) ~[spring-web-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:73) ~[spring-context-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:117) ~[spring-context-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:92) ~[spring-context-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) ~[spring-beans-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448) ~[spring-beans-3.1.0.RELEASE.jar:3.1.0.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ~[spring-beans-3.1.0.RELEASE.jar:3.1.0.RELEASE]         ... 32 common frames omitted ```    ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4f4a2e7fc76f458e809ae99046d2ceec7def4b18","closed","type: task,","spring-projects-issues","2012-01-26T10:36:58Z","2019-01-11T22:23:21Z"
"","12919","ShallowEtagHeaderFilter should make use of specified content length [SPR-8271]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-8271](https://jira.spring.io/browse/SPR-8271?redirect=false)** and commented  The current ShallowEtagHeaderFilter implementation does not make any use of the content-length set by the content generating code. The attached patch re-initializes the ByteArrayOutputStream with the specified content-length. This improves performance on very busy sites with rather big files.  ---  **Affects:** 3.0.5  **Attachments:** - [ShallowEtagHeaderFilter-ContentLength.patch](https://jira.spring.io/secure/attachment/18063/ShallowEtagHeaderFilter-ContentLength.patch) (_595 bytes_) - [ShallowEtagHeaderFilter-ContentLength.patch](https://jira.spring.io/secure/attachment/18062/ShallowEtagHeaderFilter-ContentLength.patch) (_511 bytes_)  **Issue Links:** - #15736 ShallowEtagHeaderFilter should not set ETags to non-cached resources - #16339 ShallowEtagHeaderFilter setContentLength on include - #16713 ShallowEtagHeaderFilter doesn't support Servlet 3.1 setContentLengthLong - #16697 ShallowEtagHeaderFilter should use a more efficiently dynamically resizing buffer than ResizableByteArrayOutputStream - #16218 ResizableByteArrayOutputStream and ByteArrayOutputStream capacities - #17083 Extract ContentCachingRequestWrapper and ContentCachingResponseWrapper for custom use outside of Spring's filters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ae012ae6e2a9ce69b3ec3e79b98af3443b6e27ef  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-23T06:25:06Z","2019-01-11T12:54:57Z"
"","13776","Unable to define Content-Type and Encoding when use @ResponseBody [SPR-9137]","**[Oliver Otzen](https://jira.spring.io/secure/ViewProfile.jspa?name=ollio)** opened **[SPR-9137](https://jira.spring.io/browse/SPR-9137?redirect=false)** and commented  I have setup a `@Controller` with a method returning a html page as String (`@ResponseBody`). Special characters then will become questionmarks and the Content-Type will become plain text. My workaround is to set the ContentType and encoding to the ServletResponse and write the page to the ServletOuputStream:  ```   response.setContentType(""text/html;charset=UTF-8""); IOUtils.write(htmlPage, outputStream, ""UTF-8""); ```  It would be nice to set the encoding and Response-Type as parameters to `@ResponseBody` like:  ``` public @ResponseBody(responseType=""text/html"", encoding=""UTF-8"") String getHtmlPage(@RequestParam String pageName) {     ...     return htmlPage; } ```    ---  **Affects:** 3.1 GA  3 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-20T06:15:03Z","2012-05-18T16:29:10Z"
"","13209","Allow null returns with multiple embedded value resolvers [SPR-8565]","**[Oliver Jankowski](https://jira.spring.io/secure/ViewProfile.jspa?name=oliver.jankowski)** opened **[SPR-8565](https://jira.spring.io/browse/SPR-8565?redirect=false)** and commented  A `@Component` bean with a `@Value` field, whose property resolves to NULL, throws a IllegalArgumentException, if there are mutiple value resolvers.  Example:  **core-beans.xml:**  ```                                   classpath:/spring/core/core-beans.properties         classpath:/spring/override/test-beans.properties                         ...     ```  **first-plugin-beans.xml:**  ```                                                    ....  ```  **second-plugin-beans.xml:**  ```                                           ....  ```  **MyComponent.java:**  ``` package my.first.plugin;  @Component public class MyComponent {    @Value(""${myValue}"")   private String myStringValue;      ... } ```  The problem is, that the AbstractBeanFactory tries to resolve a `@Value` property with every value resolver (here the three PropertyPlaceholderConfigurers).  Extract from AbstractBeanFactory:  ``` public String resolveEmbeddedValue(String value) {   String result = value;   for (StringValueResolver resolver : this.embeddedValueResolvers) {     result = resolver.resolveStringValue(result);   }   return result; } ```  If an embeddedValueResolver resolves the value to NULL, then the next embeddedValueResolver tries to resolve NULL, which leads finally to execution of the PropertyPlaceholderHelper and an assetion failure.  Extract from PropertyPlaceholderHelper:  ``` public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {   Assert.notNull(value, ""Argument 'value' must not be null."");   return parseStringValue(value, placeholderResolver, new HashSet()); } ```  I think a fix should be to stop the resolving chain, if an embeddedValueResolver resolves the value to NULL. (There is no more resolving possible!)  **Possible Fix:**  Extract from AbstractBeanFactory:  ``` public String resolveEmbeddedValue(String value) {   String result = value;   for (StringValueResolver resolver : this.embeddedValueResolvers) {     result = resolver.resolveStringValue(result); 	if (result == null) { 	  // No more resolving possible 	  break; 	}   }   return result; } ```    ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?112540-No-Null-Value-with-Value-and-PropertyPlaceholderConfigurer-possible  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f3ff98d86275e19e6828f9c3a0c432de0587bbbe","closed","type: bug,","spring-projects-issues","2011-07-28T02:43:44Z","2013-01-23T11:08:58Z"
"","13207","subelement in  throws BeanDefinitionParsingException [SPR-8563]","**[Oliver Jankowski](https://jira.spring.io/secure/ViewProfile.jspa?name=oliver.jankowski)** opened **[SPR-8563](https://jira.spring.io/browse/SPR-8563?redirect=false)** and commented  The use of the \ subelement in the \/\ element throws a BeanDefinitionParsingException. The XSD (http://www.springframework.org/schema/beans/spring-beans-3.0.xsd) allows this kind of comment.  Examples:  \ \ \ some comment \ \ \  or:  \ \ \ some comment \ \b\ \ \  The problem is that the \ is handled like any other subelement. A fix should be to ignore the \ element.  Possible fix for BeanDefinitionParserDelegate:  public Map parseMapElement(Element mapEle, BeanDefinition bd) { ... else { // Child element is what we're looking for. if (nodeNameEquals(candidateEle, DESCRIPTION_ELEMENT)) { // Do nothing, it's a description } else if (valueEle != null) { error(""\ element must not contain more than one value sub-element"", entryEle); } else { valueEle = candidateEle; } } ... }   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?110403-Unable-to-use-lt-description-gt-subelement-in-lt-map-gt-lt-entry-gt-lt-entry-gt-lt-map-gt  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18508/mylyn-context.zip) (_9.11 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c0257aba9bae0687d21e48ef463b4bae783de747, https://github.com/spring-projects/spring-framework/commit/226256e2642ffad4c24d81ca4f4cb15cd7714d7c","closed","in: core,","spring-projects-issues","2011-07-26T13:48:37Z","2012-06-19T03:39:17Z"
"","13815","BeanFactory does not return FactoryBeans by type when using type prediction and bean not yet created [SPR-9177]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9177](https://jira.spring.io/browse/SPR-9177?redirect=false)** and commented  This one is a follow up to #13594 which seemed to be fixed but still seemed to fail in certain scenarios. Here's what I could find out so far. The [test case](https://github.com/SpringSource/spring-framework/blob/master/spring-beans/src/test/java/org/springframework/beans/factory/support/Spr8954Tests.java) actually only succeeds as it starts with retrieving the relevant beans by name, which causes them to be instantiated in the first place. Thus the following happens in `AbstractBeanFactory.isTypeMatch(...)`:  - we get in there trying to resolve a factory de-reference ""&foo"" - we access the factory instance by calling `getSingleton(...)` passing in `false` for singleton creation but get back the bean instance as it's already created - we run into the `....isAssignableFrom(...)` check and get the bean returned  Now consider the case when the `FactoryBean` is not yet created:  - we get in there trying to resolve a factory de-reference ""&foo"" - we access the factory instance by calling `getSingleton(...)` passing in `false` for singleton creation **and get back `null`** - the subsequent evaluation looks at the `BeanDefinition` but only evaluates the predicted bean type in turn but not the bean class of the actual `BeanDefinition` - we fail to match the type  The code is trying to access a decorated definition (line 501, `AbstractBeanDefinition`) which I couldn't make much sense of. For ordinary bean definitions that doesn't seem to exist which lets the execution run into line 510. But either way the bean definitions class should be checked.  ---  **Affects:** 3.1.1  **Issue Links:** - [DATACMNS-133](https://jira.spring.io/browse/DATACMNS-133) Documented Configuration of Conversion Service with DomainClassConverter Does Not Work (_**""is depended on by""**_) - #15148 Lookup of beans of type fails for factory beans if type prediction is used. - #13782 Check original beanClass in #isFactoryBean calls for `@Bean` methods as well - #13594 BeanFactory does not return FactoryBeans in case the are looked up by type and type prediction is used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3c9a11bd1141f644859eb0023f4d6f4ae0c9910","closed","type: bug,","spring-projects-issues","2012-02-28T06:46:17Z","2019-01-13T07:06:01Z"
"","13782","Check original beanClass in #isFactoryBean calls for @Bean methods as well [SPR-9143]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9143](https://jira.spring.io/browse/SPR-9143?redirect=false)** and commented  See #13594 for background.  The fix there (against 3.1.1) resolved this issue for regular bean definitions, but as demonstrated in the topic branch linked below, the fix does not properly apply for `@Bean` methods with a `FactoryBean` return types.  ---  **Issue Links:** - [DATACMNS-133](https://jira.spring.io/browse/DATACMNS-133) Documented Configuration of Conversion Service with DomainClassConverter Does Not Work (_**""is depended on by""**_) - [DATAJPA-151](https://jira.spring.io/browse/DATAJPA-151) Upgrade to Spring 3.1.1 (_**""is depended on by""**_) - #13815 BeanFactory does not return FactoryBeans by type when using type prediction and bean not yet created - #13594 BeanFactory does not return FactoryBeans in case the are looked up by type and type prediction is used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3c9a11bd1141f644859eb0023f4d6f4ae0c9910","closed","in: core,","spring-projects-issues","2012-02-21T07:02:36Z","2019-01-11T22:12:44Z"
"","13743","Add BeanWrapperImpl.getPropertyValue(String name, Class type) [SPR-9105]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9105](https://jira.spring.io/browse/SPR-9105?redirect=false)** and commented  When working with a `BeanWrapperImpl` one can set a `ConversionService` which automatically converts given property values when setting them. This way one can have a `StringToDateConverter` and actually invoke `BeanWrapper.setPropertyValue(name, ""02/14/2012"")` for a property of type `Date` and get the given value converted.  However, when reading properties using `BeanWrapperImpl` one will always get the value returned as is. Now assume we want to access the bean values in a given type (e.g. `String`). One would need to do the follwoing:  ```java ConversionService service = // ... BeanWrapper wrapper = new BeanWrapperImpl();  Object rawValue = wrapper.getPropertyValue(""foo""); String value = conversionService.convert(rawValue, String.class); ```  As the `ConversionService` being used is likely to be the one already in place inside `BeanWrapperImpl` it would be cool if the code above could be abbreviated to:  ```java BeanWrapper wrapper = new BeanWrapperImpl(); String value = wrapper.getPropertyValue(""foo"", String.class); ```    --- No further details from [SPR-9105](https://jira.spring.io/browse/SPR-9105?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-02-10T02:10:42Z","2018-12-27T12:16:21Z"
"","13716","Provide more convenient way to load Properties into a JavaConfig configuration [SPR-9078]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9078](https://jira.spring.io/browse/SPR-9078?redirect=false)** and commented  Currently `@PropertySource` allows loading property files into the `ApplicationContext`'s environment in a very convenient manner:  ```java @Configuration @PropertySource(""classpath:sample.properties"") public class Config {      @Autowired   Environment environment;    @Bean   public Object doSomething() {     environment.getProperty(...);   } } ```  However, if you'd rather like to load the properties into a dedicated `Properties` instance one has to use a `PropertiesFactoryBean` like this:  ```java @Configuration public class Config {    @Bean   public Properties properties() {     PropertiesFactoryBean factory = new PropertiesFactoryBean();     factory.setLocation(new ClasspathResource(""sample.properties"");     factory.afterPropertiesSet();     return factory.getObject();   } } ```  which is quite a lot of ceremony. Would be cool if one could just shortcut it to something like this:  ```java @Configuration public class Config {    @PropertySource(""classpath:sample.properties"")   Properties properties; } ```    ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/078a1c5db84467a52e9de4078d139ee6fded08c7  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-01-31T03:45:49Z","2013-01-24T05:05:06Z"
"","13715","UriComponentsBuilder.pathSegments(...) should drop empty segments [SPR-9077]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9077](https://jira.spring.io/browse/SPR-9077?redirect=false)** and commented  When handing empty segments into `UriComponentsBuilder.pathSegments(...)` double slashes are created which are semantically equivalent to a single slash. Thus, empty path segments can/should be dropped:  ``` UriComponentsBuilder.pathSegment("""", ""foo"", """", ""bar"");  Result: //foo//bar Expected: /foo/bar ```    ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/010abd06e351686dc035fcb4f8fdd802990b8c9d","closed","type: enhancement,","spring-projects-issues","2012-01-31T02:33:13Z","2012-06-19T03:39:49Z"
"","13714","ServletUriComponentsBuilder should allow normalizing URIs created [SPR-9076]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9076](https://jira.spring.io/browse/SPR-9076?redirect=false)** and commented  If you create a `ServletUriComponentsBuilder` and add path segments that effectively result in moving up one path segment (e.g. `..`) these paths segments are kept in the resulting URI. It would be cool if one could create a normalized URI from it:  ``` /foo/bar/../something -> SUCB.getNormalizedUriString() -> /foo/something ```  `URI` offers this functionality via its `normalize()` method.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8530828eb474702673094e719d72d834cb45080f","closed","type: enhancement,","spring-projects-issues","2012-01-31T02:27:26Z","2012-06-19T03:39:30Z"
"","13713","ServletUriComponentsBuilder should provide static method to create URI from request without query parameters [SPR-9075]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9075](https://jira.spring.io/browse/SPR-9075?redirect=false)** and commented  `ServletUriComponentsBuilder` is usually used to create links to other resources. Thus you usually neet the raw URI without query parameters. Currently you have to clear the parameters manually:  ```java ServletUriComponentsBuilder.fromCurrentRequest().replaceQuery(null).... ```  An additional static method returning the raw URI would ease that scenario a bit.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95683f5137f22d432135be3cf04e78a0bfeee8b4","closed","type: enhancement,","spring-projects-issues","2012-01-31T02:21:33Z","2012-06-19T03:39:40Z"
"","13594","BeanFactory does not return FactoryBeans in case the are looked up by type and type prediction is used [SPR-8954]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8954](https://jira.spring.io/browse/SPR-8954?redirect=false)** and commented  Assume the following `FactoryBean` implementation:  ```java public MyFactoryBean implements FactoryBean, AnInterface { ... } ```  Now assume we have a `SmartInstantiationAwareBeanPostProcessor` registered that does return an arbitrary different type from a call to `predictBeanType(...)`. If you now call `BeanFactory.getBeansOfType(AnInterface.class)` the registered bean instance will not be returned as the type check is done against the type the factory produces in the first place. If that fails the actual bean type is checked against the given type **if** the bean definition is considered a factory bean.  `AbstractBeanFactory.isFactoryBean(...)` now inspects the predicted bean type and thus does not consider the bean as factory bean. Shouldn't this method check the actual bean type as well or even instead? The current implementation pretty much disables the bean definition being discovered as factory bean as soon as you predict the bean type.  ---  **Affects:** 3.0.6, 3.1 GA  **Issue Links:** - [DATACMNS-133](https://jira.spring.io/browse/DATACMNS-133) Documented Configuration of Conversion Service with DomainClassConverter Does Not Work (_**""is depended on by""**_) - [DATAJPA-151](https://jira.spring.io/browse/DATAJPA-151) Upgrade to Spring 3.1.1 (_**""is depended on by""**_) - #13815 BeanFactory does not return FactoryBeans by type when using type prediction and bean not yet created - #15148 Lookup of beans of type fails for factory beans if type prediction is used. - #13782 Check original beanClass in #isFactoryBean calls for `@Bean` methods as well","closed","in: core,","spring-projects-issues","2011-12-22T10:16:02Z","2019-01-13T07:06:55Z"
"","13565","DefaultPersistenceUnitManager must not reject multiple PersistenceUnits with the same name eagerly [SPR-8925]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8925](https://jira.spring.io/browse/SPR-8925?redirect=false)** and commented  Commit [4482](https://fisheye.springsource.org/changelog/spring-framework?cs=4482) introduced a snippet of code in `preparePersistenceUnitInfos()` that rejects `PersistenceUnit` instances with the very same name although the call to `postProcessPersistenceUnitInfo(...)` might have handled that case correctly. We rely on this behavior with Spring Data JPAs `MergingPersistenceUnitManager` and got reports ([DATAJPA-138](https://jira.spring.io/browse/DATAJPA-138)) claiming it's not working with Spring 3.1.  ---  **Affects:** 3.1 GA  **Issue Links:** - [DATAJPA-138](https://jira.spring.io/browse/DATAJPA-138) MergingPersistenceUnitManager doesnt work with Spring 3.1.0 DefaultPersistenceUnitManager (_**""is depended on by""**_) - #13884 Changes in the DefaultPersistenceUnitManager from 3.0 to 3.1 make it impossible to extend it (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/103c648a9240ee56e95cc02bfb4ec4ba848b0746, https://github.com/spring-projects/spring-framework/commit/bdcf480f55a8018690ef28294a36d19a45271243  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2011-12-14T09:25:56Z","2019-01-11T14:27:45Z"
"","13559","Typo in cache documentation [SPR-8919]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8919](https://jira.spring.io/browse/SPR-8919?redirect=false)** and commented  Section [27.4.2](http://static.springsource.org/spring/docs/3.1.0.M1/spring-framework-reference/html/cache.html#cache-plug) of the reference documentation states a class `org.springframework.cache.ehcache.EhcacheCacheManager` where it should be `EhCacheCacheManager`.   ---  **Affects:** 3.1 GA","closed","status: invalid,","spring-projects-issues","2011-12-13T13:34:19Z","2019-01-12T05:29:31Z"
"","13522","Allow multiple @Filter 'value' args for concision [SPR-8881]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8881](https://jira.spring.io/browse/SPR-8881?redirect=false)** and commented  Currently `@Filter` takes a single class as `value` attribute. To exclude two annotations from classpath scanning you have to configure `@ComponentScan` as follows:  ```java @ComponentScan(basePackageClasses = ..., excludeFilters = {   @Filter(Configuration.class),   @Filter(Controller.class) }) ```  If it were a class attribute instead it would look something like this:  ```java @ComponentScan(basePackageClasses = ..., excludeFilters =    @Filter({ Configuration.class, Controller.class }) ```  If multiple classes are listed for the `@Filter`'s `value` attribute the semantics should be or-concatenation.   ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/28ff473091822195a4c6e00d7eaba2c09567d700","closed","type: enhancement,","spring-projects-issues","2011-11-29T00:45:17Z","2012-06-19T03:39:13Z"
"","13521","Default @ComponentScan's exclude filter to exclude @Configuration annotated classes [SPR-8880]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8880](https://jira.spring.io/browse/SPR-8880?redirect=false)** and commented  Suppose you have an application with a base package of `com.acme` with an `@Configuration` class located in this package. Now suppose you use this configuration class as `basePackageClass` inside `@ComponentScan`. This will result in an exception saying the class is registered twice. So you pretty much end up with always adding this exclude.  Would it make sense to default the `excludeFilters` attribute of the `@ComponentScan` annotation as follows?  ``` @Filter(type = FilterType.ANNOTATION, value = Configuration.class) ```  ---  **Affects:** 3.1 RC2  **Issue Links:** - #13450 Allow `@Configuration` classes to self-`@ComponentScan` (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-11-29T00:38:31Z","2019-01-13T07:07:10Z"
"","13512","@Cachable condition should allow referencing return value [SPR-8871]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8871](https://jira.spring.io/browse/SPR-8871?redirect=false)** and commented  Currently the condition attribute of the `@Cacheable` annotation does not allow referring to the value returned by the method invocation. Thus, it's impossible to define something along ""don't cache null values returned from the method invocation"".  ---  **Affects:** 3.1 RC1  **Issue Links:** - #14212 Using Spring beans as a part of key in cache annotations (`@Cacheable` etc.) doesn't work  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c2ace33cbfe35f9f132c7ec8ca7d3c3beb59f7a  12 votes, 10 watchers","closed","has: votes-jira,","spring-projects-issues","2011-11-24T01:34:54Z","2019-01-13T07:07:14Z"
"","13461","Unguarded access to first iterator element in RequestMappingInfoHandlerMapping [SPR-8819]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8819](https://jira.spring.io/browse/SPR-8819?redirect=false)** and commented  `RequestMappingInfoHandlerMapping` potentially throws a `NoSuchElementException` in `handleMatch(...)` in case the patterns in `RequestMappingInfo` don't contain any values.  ``` java.util.NoSuchElementException   java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:375)   java.util.LinkedHashMap$KeyIterator.next(LinkedHashMap.java:384)   java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1010)   org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleMatch(RequestMappingInfoHandlerMapping.java:88) ```    ---  **Affects:** 3.1 RC1","closed","type: bug,","spring-projects-issues","2011-11-04T10:27:17Z","2012-06-19T03:39:44Z"
"","13343","Use concurrent cache to improve performance of GenericTypeResolver [SPR-8701]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8701](https://jira.spring.io/browse/SPR-8701?redirect=false)** and commented  Working with Spring Data Mongo a user seems to have discovered a few things to improve in `GenericTypeResolver`. We're currently using a copy of that class in the Spring Data codebase as some of the methods needed are not public in the 3.0.x branch. I thought it might be better to generally discuss and resolve these issues with the core Spring class as we will drop our copy as soon as 3.1 is out as well and Spring users might benefit from potential improvements in general.  Actual discussion in the linked ticket.  ---  **Issue Links:** - #13804 Cache and late resolve annotations on bean properties to improve performance - [DATACMNS-116](https://jira.spring.io/browse/DATACMNS-116) Synchronisation during performance tests - GenericTypeResolver - #14429 Develop ConcurrentReferenceHashMap  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3aa9ac15a1e0a36ff15b94e18bf75e4034a643f4  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-09-15T23:04:59Z","2019-01-11T14:01:55Z"
"","13199","Add LocalizedMessageSource abstraction to automatically discover Locale from a LocaleResolver [SPR-8555]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8555](https://jira.spring.io/browse/SPR-8555?redirect=false)** and commented  The current `MessageSource` interface expects a `Locale` being piped into each of the methods which at the web level causes the following implementation pattern:  * registering a `LocaleResolver` * getting a `MessageSource` injected into a Spring MVC controller * adding `Locale` parameters to controller methods and piping them into the message source when resolving a message  This pretty much feels like running around the block for no reason. If a whatever called new `LocalizedMessageSource` implementation was aware of a plain `MessageSource` as well as a `LocaleResolver` it could pretty much resolve the `Locale` on it's own and delegate the resolving call to the `MessageSource`. This would reduce the number of parameters in controller method signatures.   ---  **Affects:** 3.0.5, 3.1 M2  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-07-23T04:28:39Z","2019-01-11T13:21:53Z"
"","13198","MapToMapConverter invalidly returns source map for empty maps [SPR-8554]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8554](https://jira.spring.io/browse/SPR-8554?redirect=false)** and commented  In line 62 of `MapToMapConverter` the implementation simply returns the source `Map` in case it is empty. This is invalid in the following scenario: suppose you have a simple empty `LinkedHashMap` and the target type is a `SortedMap`. Given the current implementation we'd return the `LinkedHashMap` unconverted which does not implement `SortedMap` (that's why the conversion was triggered initially).  Simply removing that clause should do the trick as for an empty `Map` the only code being executed after that is the creation of the new `Map` type anyway.  Candidate for 3.0.6 back-porting?  ---  **Affects:** 3.0.5  **Issue Links:** - #12384 CollectionToCollectionConverter does not convert if the source is empty (_**""duplicates""**_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2011-07-22T01:07:02Z","2019-01-11T13:21:59Z"
"","13139","@PreDestroy and @PostConstruct should be mentioned more prominently in container callback section [SPR-8493]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8493](https://jira.spring.io/browse/SPR-8493?redirect=false)** and commented  The initialization callbacks section (3.6.1.1) of the reference docs prominently mention InitializingBean which is actually not the preferred way to implement initialization callbacks (as `@PostConstruct` and the like are preferred for. They are briefly mentioned in the 3.6.1.4 section but I think we should lead people to the Spring specific interfaces that much.  Maybe a big note at the beginning of the section is already sufficient.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/584e79c677e69853a983667521a20b66331d52a6  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-06-28T03:30:07Z","2013-02-07T17:26:07Z"
"","12984","Allow AnnotationTypeFilter to consider interfaces as well [SPR-8336]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8336](https://jira.spring.io/browse/SPR-8336?redirect=false)** and commented  Currently `AnnotationTypeFilter` invokes the constructor of `AbstractTypeHierarchyTraversingFilter` setting `considerInterfaces` to `false`. This probably makes sense in most cases. However there might be `BeanDefinitionParser` implementations that declare a `FactoryBean` creating a proxy for discovered interfaces. So it would be cool if we could add a constructor to pass in a `boolean` to enable interface discovery as well.  ---  **Affects:** 3.0.5, 3.1 M1  **Attachments:** - [filter.patch](https://jira.spring.io/secure/attachment/18225/filter.patch) (_3.38 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18226/mylyn-context.zip) (_1.26 kB_)  **Issue Links:** - [DATACMNS-37](https://jira.spring.io/browse/DATACMNS-37) Support annotation based declaration of repository interfaces (_**""depends on""**_) - #16341 Metadata reading should never use ASM for java.* and javax.* types (in particular on JDK 8)  **Referenced from:** commits https://github.com/spring-projects/spring-data-commons/commit/4a705067e5737d00c27bc43f33d41ce3babc9b63","closed","type: enhancement,","spring-projects-issues","2011-05-13T11:41:23Z","2019-01-11T12:59:14Z"
"","12974","Misleading exception message for using JPA with custom IsolationLevels [SPR-8325]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8325](https://jira.spring.io/browse/SPR-8325?redirect=false)** and commented  When trying to use JPA with custom transaction isolation levels and no specfic JPA dialect configured one will get an exception saying:  > Standard JPA does not support custom isolation levels - use a special JpaDialect for your JPA implementation  Unfortunately all our provided implementations do not support custom isolation levels at all. So even configuring a `HibernateJpaDialect` for example ends up with the same exception. This is not that of a big deal but might lead to quite some time spending on tracing an asssumed bug in the configuration where there actually is none.  ---  **Affects:** 3.0.5, 3.1 M1  **Issue Links:** - #16559 Isolation support for JPA with Hibernate EntityManager 4  **Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-10T11:32:51Z","2019-01-11T13:00:08Z"
"","12955","ConversionServiceFactory.addDefaultConverters() should add symetric converters [SPR-8306]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8306](https://jira.spring.io/browse/SPR-8306?redirect=false)** and commented  `ConversionServiceFactory.addDefaultConverters()` adds a few converters to convert from `String` to a particular type (e.g. `Boolean`, `Character`, `Locale` and so on). To convert those types back it adds an `ObjectToStringConverter`. This causes trouble as if you unregister this converter (in case you want to prevent any object to be convertible to a `String` without an explicit converter being added) you lose the ability to convert from and to those simple types as well.  I think we should have explicit converters for the simple types and use `ObjectToStringConverter` only as fallback for types that don't have explicit converters registered.   ---  **Affects:** 3.0.5, 3.1 M1  **Issue Links:** - [DATAMONGO-130](https://jira.spring.io/browse/DATAMONGO-130) Problem with Converters (java.util.Locale)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e25fbf2533a809c7c4eacc59a90169da73ad6c0b","closed","type: enhancement,","spring-projects-issues","2011-05-07T10:14:09Z","2012-06-19T03:39:22Z"
"","13802","Support BigDecimals with SpEL [SPR-9164]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-9164](https://jira.spring.io/browse/SPR-9164?redirect=false)** and commented  When doing number arithmetic in SpEL the result type is apparently one of double, long or int. This has the unwanted effect that for example float or BigDecimal values will be changed to int.  new java.math.BigDecimal(""12.34"") evaluates to 12.34  -(new java.math.BigDecimal(""12.34"")) evaluates to -12  see org.springframework.expression.spel.ast OpPlus, OpMinus, OpMultiply, OpDivide  ---  **Affects:** 3.1.1  **Reference URL:** https://github.com/SpringSource/spring-framework/pull/80  **Attachments:** - [SpELFloatLiteralTest.java](https://jira.spring.io/secure/attachment/19821/SpELFloatLiteralTest.java) (_1.24 kB_)  **Issue Links:** - #13358 Expression language not compare BigDecimals with integers (_**""is duplicated by""**_) - #13832 SpEL: OpEQ should use equals() - #15943 Downgrade accidental use of Java 1.7 APIs - #14121 Add SpEL support for float literals - #14546 SpEL's arithmetic operations should explicitly detect BigInteger/Short/Byte and fall back to double handling for unknown Number subtypes  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-24T06:17:21Z","2019-01-11T22:17:33Z"
"","13330","wrong getBody() implementation in ServletServerHttpRequest [SPR-8688]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-8688](https://jira.spring.io/browse/SPR-8688?redirect=false)** and commented  It seems to me the following new method in `org.springframework.http.server.ServletServerHttpRequest` (Spring 3.0.6) is wrong:  ``` public InputStream getBody() throws IOException { 	if (isFormSubmittal(this.servletRequest)) { 		return getFormBody(this.servletRequest); 	} 	else { 		return this.servletRequest.getInputStream(); 	} } ```  `getFormBody()` parses the request parameter map into an input stream. However, parsing the parameter map should happen if the request is **not** a form submittal. In Spring 3.0.5 `getBody()` always invokes `this.servletRequest.getInputStream()` (which works in my code). Now, using Spring 3.0.6, my controller method parameter `@RequestBody MultiValueMap parameters` is always empty, which is because `getFormBody()` will be called instead.  So in my opinion the code in the `if` and the `else` blocks have to be interchanged.  Thanks, Oliver   ---  **Affects:** 3.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7a3f02bce94b472915be2af0d65cd33b2d370aa2, https://github.com/spring-projects/spring-framework/commit/46a4ac9628f07fbb425254ab55daf0ee0829c62a","closed","type: bug,","spring-projects-issues","2011-09-13T02:18:19Z","2019-01-11T14:23:40Z"
"","12942","Inconsistencies in property conversions when using ConversionService [SPR-8294]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=oleg.zhurakousky@springsource.com)** opened **[SPR-8294](https://jira.spring.io/browse/SPR-8294?redirect=false)** and commented  We just had an issue reported in Spring Integration [INT-1891](https://jira.spring.io/browse/INT-1891) which unfortunately buried in spring core  When property of type File is assigned value let's say 'file:/etc"" it is converted differently depending on wether ConversionService is registered or not.  When ConversionService is not registered it goes through the default editor in TypeConverterDelegate (line 157) which is a FileEditor  ``` editor = findDefaultEditor(requiredType, typeDescriptor); ```  . . . and therefore converts successfully and properly to a File object with the path being ""/etc"".  However with CS its different. It basically attempts to convert from String to File and the selected converter is ObjectToObjectConverter which simply creates a file as new File (""file:/etc"") ignoring 'file:' prefix, thus still successfully creating File object, but the path is ""file:/etc""  I've attached the failing test showing this.  ---  **Affects:** 3.0.5  **Attachments:** - [cs-issue.zip](https://jira.spring.io/secure/attachment/18111/cs-issue.zip) (_1.68 kB_)  **Issue Links:** - [INT-1893](https://jira.spring.io/browse/INT-1893) Placeholder to track the progress of SPR-8818 (formerly SPR-8294) which causes inconsistent behavior in file inbound adapter (_**""is depended on by""**_) - [INT-1891](https://jira.spring.io/browse/INT-1891) Sample for file:inbound-channel-adapter uses file: prefix for directory attribute though directory is of type File (_**""supersedes""**_) - #13460 Add File/Resource conversion capability to ConversionService when configured on a BeanWrapper instance (_**""is superseded by""**_)","closed","in: core,","spring-projects-issues","2011-05-05T08:48:01Z","2019-01-12T16:25:32Z"
"","12883","Update SQL error code mapping for H2 1.3.154 [SPR-8235]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-8235](https://jira.spring.io/browse/SPR-8235?redirect=false)** and commented  Since H2 1.3.154 SQL error codes has changed in order to utilize commonly used ones. See the thread: http://groups.google.com/group/h2-database/browse_thread/thread/e4f6e77e3eebc1d4 and the change log: http://www.h2database.com/html/changelog.html.  This makes duplicate key condition undetected, DataIntegrityViolationException is thrown instead of DuplicateKeyException.  In order to fix this error code 23505 needs to be added to duplicateKeyCodes property of H2 bean in org/springframework/jdbc/support/sql-error-codes.xml.  ---  **Affects:** 3.0.5  **Issue Links:** - #12138 org.h2.jdbc.JdbcSQLException: NULL nicht zulässig für Feld ""xyz"" gets translated to org.springframework.jdbc.UncategorizedSQLException","closed","type: enhancement,","spring-projects-issues","2011-04-08T13:24:36Z","2019-01-11T12:54:07Z"
"","13794","Status.MARKED_AS_ROLLBACK is not supported by Transaction API [SPR-9156]","**[Nordine Boussedra](https://jira.spring.io/secure/ViewProfile.jspa?name=nordineb)** opened **[SPR-9156](https://jira.spring.io/browse/SPR-9156?redirect=false)** and commented  Hello,  We use `@Transactional` (Spring 3.0.3.RELEASE) for transaction management in our business services. We met a problem when using EjbContext.setRollbackOnly() within a ejb called by a transactional business service. EjbContext.setRollbackOnly() set the jta transaction status as STATUS_MARKED_AS_ROLLBACK. The EJB Service returns without error but set the JTA Transaction rollback only via EJBContext. When back to Spring, TransactionInterceptor call commit on PlatformTransactionManager (JtaTransactionManager). The commit method then throw an UnexceptedRollbackException (Indeed JBoss [EAP 4.2.3] throw a RollbackException when Spring try to commit).  When looking at JtaTransactionManager, we notice that the doCommit method checks the status of the jta transaction but only for STATUS_NO_TRANSACTION and STATUS_ROLLBACK and not for STATUS_MARKED_AS_ROLLBACK.  We fix the problem by decorating the JtaTransactionManager and propagating the rollback to spring in the commit method if the jta transaction status is equals to STATUS_MARKED_AS_ROLLBACK.  Is it a bug or do Spring team considers it as a normal behaviour ?  (excuse me for the clerical errors, i dot not really masters english).   ---  **Affects:** 3.0.3","closed","status: declined,","spring-projects-issues","2012-02-23T06:58:47Z","2019-01-12T16:36:49Z"
"","13623","NullPointerException when @InitBinder method has an HttpServletResponse argument [SPR-8983]","**[Noel Trout](https://jira.spring.io/secure/ViewProfile.jspa?name=noel.trout@avinode.com)** opened **[SPR-8983](https://jira.spring.io/browse/SPR-8983?redirect=false)** and commented  In the Spring 3.1 branch, it no longer works to have HttpServletRequest in the method signature of a controller class annotated with `@InitBinder`.  See the following stack trace.  java.lang.NullPointerException at org.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolver.resolveArgument(ServletResponseMethodArgumentResolver.java:65) at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:74)  Removing HttpServletRequest from the `@InitBinder` method signature causes the error to disappear.  This method works correctly in Spring 3.0.6.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3484aebb300c8021906e35a057d6fe2ec786cd6  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2012-01-03T01:50:00Z","2012-06-19T03:39:24Z"
"","12935","StringUtils.tokenizeToStringArray incorrectly dropping blank tokens [SPR-8287]","**[NK](https://jira.spring.io/secure/ViewProfile.jspa?name=nkurtyka)** opened **[SPR-8287](https://jira.spring.io/browse/SPR-8287?redirect=false)** and commented  tokenizeToStringArray will always drop blank tokens, regardless of the value of the ""ignoreEmptyTokens"" parameter (i.e. that parameter should either be removed or the function changed).  Blank tokens are dropped because this method uses StringTokenizer to split the input.  Per the following bug report, StringTokenizer will never return blank values.  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4140850   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2011-05-02T21:07:24Z","2019-01-12T16:25:35Z"
"","13597","Spring JDBC does not support JBoss 7 Native JDBC connection [SPR-8957]","**[Niranjan Nanda](https://jira.spring.io/secure/ViewProfile.jspa?name=nnanda)** opened **[SPR-8957](https://jira.spring.io/browse/SPR-8957?redirect=false)** and commented  I am using Spring JDBC 3.0.6.RELEASE and it is not JBoss 7 compatible. The class org.springframework.jdbc.support.nativejdbc.JBossN ativeJdbcExtractor is trying to use following classes which are no more there in JBoss 7  org.jboss.resource.adapter.jdbc.WrappedConnection org.jboss.resource.adapter.jdbc.WrappedStatement org.jboss.resource.adapter.jdbc.WrappedResultSet  JBoss 7 has moved these classes to the new packages shown below  org.jboss.jca.adapters.jdbc.WrappedConnection org.jboss.jca.adapters.jdbc.WrappedStatement org.jboss.jca.adapters.jdbc.WrappedResultSet    ---  **Affects:** 3.0.7, 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?120446-Spring-JDBC-is-not-compatible-to-JBoss-7","closed","type: enhancement,","spring-projects-issues","2011-12-22T18:16:50Z","2012-06-19T03:39:15Z"
"","13196","Make DefaultListableBeanFactory.findAutowireCandidates accessible for clients [SPR-8552]","**[Niklas Schlimm](https://jira.spring.io/secure/ViewProfile.jspa?name=niklas)** opened **[SPR-8552](https://jira.spring.io/browse/SPR-8552?redirect=false)** and commented  org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(String, Class, DependencyDescriptor)  This method is protected, thus (w/o a hack) only available for subclasses. I'd like to use this method to retrieve autowirig candidates.  If you'd use org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DependencyDescriptor, String, Set\, TypeConverter) it will throw an error in case of ambiguous results. However, I am interested in the autowiring candidates.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-07-21T05:34:45Z","2018-12-27T11:46:59Z"
"","13102","AOP Pointcuts cannot be relied upon, as they silently fail, breaking their contract. [SPR-8456]","**[nigel magnay](https://jira.spring.io/secure/ViewProfile.jspa?name=magnayn)** opened **[SPR-8456](https://jira.spring.io/browse/SPR-8456?redirect=false)** and commented  This is probably mildly related to #12238.  I have been converting a legacy application to use","closed","in: core,","spring-projects-issues","2011-06-15T10:29:17Z","2019-01-11T13:35:37Z"
"","12941","DelegatingFilterProxy should hide its parameters to proxied filter [SPR-8293]","**[Nicolas Guillaumin](https://jira.spring.io/secure/ViewProfile.jspa?name=nguillaumin)** opened **[SPR-8293](https://jira.spring.io/browse/SPR-8293?redirect=false)** and commented  When `org.springframework.web.filter.DelegatingFilterProxy` is setup with the `targetFilterLifecycle` init-param set to `true`, the `Filter.init()` method is called on the proxied filter.  That's great, however the proxied filter receive this `targetFilterLifecycle` parameter too. That's problematic with some filters that throws an Exception if an init-parameter is invalid / unrecognized.  Ex:  ```    MyFilter   org.springframework.web.filter.DelegatingFilterProxy        targetFilterLifecycle     true           myParam     myValue      ```  With the above example `MyFilter.init()` will be called with both `MyParam=MyValue` and `targetFilterLifecycle=true`.  `DelegatingFilterProxy` shouldn't pass along its own parameters to the proxied filters.   ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2011-05-05T00:00:28Z","2019-01-12T16:25:34Z"
"","13689","Log4jWebConfigurer managing several log4j configuration files location [SPR-9050]","**[Nicolas FABRE](https://jira.spring.io/secure/ViewProfile.jspa?name=nico.fabre)** opened **[SPR-9050](https://jira.spring.io/browse/SPR-9050?redirect=false)** and commented  Regarding the environment where my Spring Web application is deployed, I would like to be able to indicate a different log4j configuration file (typically log4j.xml) location. I know that I can use substitution mechanism brought by build tools such as Maven or Ant. However the ability of Log4jWebConfigurer to manage several locations would avoid to have environment specific .war file.  For example in Dev environment on my local machine, I like to have the SQL queries log to the database but I don't want such log in Production. In such case, I would like to specify something like that in the web.xml :  ```       log4jConfigLocation      file:${catalina.base}/files/conf/log4j.xml,classpath:log4j.xml        org.springframework.web.util.Log4jWebConfigurer  ```  The file:${catalina.base}/files/conf/log4j.xml is taken into account if it exists, otherwise the nect log4j config file location is tried.  Thus, I would like to propose the following modification in org.springframework.web.util.Log4jWebConfigurer :  ```  	/** 	 * Initialize log4j, including setting the web app root system property. 	 *  	 * @param servletContext 	 *            the current ServletContext 	 * @see WebUtils#setWebAppRootSystemProperty 	 */ 	public static void initLogging(ServletContext servletContext) { 		// Expose the web app root system property. 		if (exposeWebAppRoot(servletContext)) { 			WebUtils.setWebAppRootSystemProperty(servletContext); 		}  		// Only perform custom log4j initialization in case of a config file. 		String locations = servletContext.getInitParameter(CONFIG_LOCATION_PARAM); 		if (locations != null) { 			// Configuration files are separated by a comma in web.xml 			String[] locationsArray = locations.split("",""); 			for (int i = 0; i < locationsArray.length; i++) { 				try { 					Log4jWebConfigurer.doLog4jInit(servletContext, locationsArray[i]); 					return;// At the first location which works, we are happy and we quit 				} catch (FileNotFoundException ex) { 					// If there are still other locations to test, continue 					if (i == locationsArray.length - 1) { 						// We are in the last locations and no location has worked previously => throw Exception 						throw new IllegalArgumentException(""Invalid '"" + CONFIG_LOCATION_PARAM + ""' parameter: These config locations do not exist : "" 								+ locations); 					} 				} 			} 		} 	}  	/** 	 * Try a log4j initialization with the given location. 	 *  	 * @param servletContext 	 * @param location 	 * @throws FileNotFoundException 	 */ 	private static void doLog4jInit(ServletContext servletContext, String location) throws FileNotFoundException { 		// Perform actual log4j initialization; else rely on log4j's default initialization. 		// Return a URL (e.g. ""classpath:"" or ""file:"") as-is; 		// consider a plain file path as relative to the web application root directory. 		if (!ResourceUtils.isUrl(location)) { 			// Resolve system property placeholders before resolving real path. 			location = SystemPropertyUtils.resolvePlaceholders(location); 			location = WebUtils.getRealPath(servletContext, location); 		} else if (location.startsWith(""file"")) { 			String resolvedLocation = SystemPropertyUtils.resolvePlaceholders(location); 			File file = ResourceUtils.getFile(resolvedLocation); 			if (!file.exists()) { 				throw new FileNotFoundException(resolvedLocation + "" does not exist""); 			} 		}  		// Write log message to server log. 		servletContext.log(""Initializing log4j from ["" + location + ""]"");  		// Check whether refresh interval was specified. 		String intervalString = servletContext.getInitParameter(REFRESH_INTERVAL_PARAM); 		if (intervalString != null) { 			// Initialize with refresh interval, i.e. with log4j's watchdog thread, 			// checking the file in the background. 			try { 				long refreshInterval = Long.parseLong(intervalString); 				Log4jConfigurer.initLogging(location, refreshInterval); 			} catch (NumberFormatException ex) { 				throw new IllegalArgumentException(""Invalid 'log4jRefreshInterval' parameter: "" + ex.getMessage()); 			} 		} else { 			// Initialize without refresh check, i.e. without log4j's watchdog thread. 			Log4jConfigurer.initLogging(location); 		} 	}  ```    ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-01-24T06:32:54Z","2012-01-24T09:52:44Z"
"","13719","Spring 3.1 EclipseLink 2.3.2 Tomcat 7 Load Time Weaving Not Weaving OneToOne [SPR-9081]","**[Nicholas Padilla](https://jira.spring.io/secure/ViewProfile.jspa?name=nickpadilla)** opened **[SPR-9081](https://jira.spring.io/browse/SPR-9081?redirect=false)** and commented  Sum up of the problem,  When using this setup I cannot use `FetchType.LAZY` on `@OneToOne` and `@OneToMany` relationships.  The reason for this is because of the JNDI requirement, which requires we use the `TomcatInstrumentableClassLoader`.  Tomcat boots and uses the `TomcatInstrumentableClassLoader` to load all the classes on the classpath, which includes my `@Entity` objects.  Since I am using Load Time Weaving `TomcatInstrumentableClassLoader` tries to weave my POJO's.  However this all happens **before** the Spring Context is initialized, so no transformers are available to `TomcatInstrumentableClassLoader` to weave the classes.  When Spring boots, it again loads the classes on the classpath and attempts weaving, now with a transformer, but the classes were already loaded by `TomcatInstrumentableClassLoader` so no transformations are attempted. If we could add a property that tells spring to attempt another transformation on startup - that would be a work around anyway. Best case scenario is that `TomcatInstrumentableClassLoader` correctly loads the transformer needed, maybe an attribute in the \?  That is apache at that point and I can create an issue there if need be.  If I am missing something please let me know, i added this post to the forum a bit ago and still has no replies on it.  Since no one seems to be able to add anything constructive on the post I felt creating a bug ticket would be the next step. Please see the forum posting for more detail - just right to the problem here.  I would like to see a Spring Feature that could handle this scenario, I know i can move to an EE Container and the weaving would be handled.  I don't want to have to be tied to an EE Container, I like the lightweight aspect of Tomcat.  Again, if there is a work around or already is a feature to deal with this please let me know!  Thanks everyone!   ---  **Reference URL:** http://forum.springsource.org/showthread.php?121502-Spring-3-1-EclipseLink-2-3-2-Tomcat-7-Load-Time-Weaving  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-01-26T08:57:27Z","2019-01-12T03:49:13Z"
"","13357","Underscores in properties group resolves in ""Could not resolve placeholder"" (PropertyPlaceholderConfigurer) [SPR-8715]","**[Netshift](https://jira.spring.io/secure/ViewProfile.jspa?name=netshift)** opened **[SPR-8715](https://jira.spring.io/browse/SPR-8715?redirect=false)** and commented  BeanDefinitionStoreException: Invalid bean definition with name 'check' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Could not resolve placeholder 'check.webservice.endpoint.address' at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:287) ...  Having following properties: check.webservice.wsdl.location=https://wsdlurl/Check.asmx?WSDL check.webservice.endpoint.address=https://wsdlurl/Check.asmx check.webservice.endpoint.portname=CreditCheckSoap check.webservice.timeout.millisec=30000 check.webservice.score_when_no_response=100 check.webservice.score_when_no_score=0 check.webservice.validation_threshold=60  Example applicationContext.xml:   \ \ \ \ \ \ \ \ \ ... \ \ \ \ \ Replacing the underscores with ""."" resolved this issue. Took some time to find this issue.  ---  **Affects:** 3.0.5  **Issue Links:** - #13054 Default values are disregarded if underscore in placeholder for PropertyPlaceholderConfigurer","closed","in: core,","spring-projects-issues","2011-09-22T03:07:50Z","2019-01-11T14:05:17Z"
"","13087","GenericConversionService#findConverterForClassPair(TypeDescriptor sourceType, TypeDescriptor targetType) does not check the complete type hierarchy [SPR-8441]","**[Nestor Urquiza](https://jira.spring.io/secure/ViewProfile.jspa?name=nestor)** opened **[SPR-8441](https://jira.spring.io/browse/SPR-8441?redirect=false)** and commented  Hi,  I am trying to integrate jpasecurity project and I think we have found a bug in GenericConversionService#findConverterForClassPair(TypeDescriptor sourceType, TypeDescriptor targetType).  Basically classQueue accumulates all possible classes that Spring will try to find a converter for. Instead of accumulating java.lang.Object as one of the possibilities it stores jpasecurity SecureObject because that is the inmediate superclass of the secured JPA Entity. Once it cannot find a converter it will cache that situation forever like this key:  ConverterCacheKey [sourceType = [TypeDescriptor com.nestorurquiza.model.InstrumentTraded$$EnhancerByCGLIB$$114fa3ec], targetType = [TypeDescriptor java.lang.String]]=NO_MATCH  From that moment on it will never rescan to find a converter. I use Binding to make my JSP list the content of the particular entity but the page will never render complete (it starts rendering but an exception will be triggered whenever the object is attempted to be bound in the JSP)  You can find the whole thread in https://sourceforge.net/projects/jpasecurity/forums/forum/790334/topic/4563054.  Thanks! -Nestor Urquiza   ---  **Affects:** 3.0.4, 3.0.5, 3.1 M1, 3.1 M2  **Reference URL:** https://sourceforge.net/projects/jpasecurity/forums/forum/790334/topic/4562571/index/page/1","closed","in: core,","spring-projects-issues","2011-06-12T11:39:12Z","2020-07-01T01:31:38Z"
"","13392","MockServletRequest and MockServletResponse Ignore Content-Type [SPR-8750]","**[Neil Chaudhuri](https://jira.spring.io/secure/ViewProfile.jspa?name=neilac333)** opened **[SPR-8750](https://jira.spring.io/browse/SPR-8750?redirect=false)** and commented  MockServletRequest and MockServletResponse need to support Content-Type so that tests that depend on that header value can yield the appropriate results. I do not know if other headers are ignored as well.   ---  **Affects:** 3.0.6  **Reference URL:** http://forum.springsource.org/showthread.php?115547-Testing-HttpRequestHandlingMessagingGateway-with-MockHttpServletRequest-PUT  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63e235f2155a06d1f31191a0b3dc7c07a816e97c, https://github.com/spring-projects/spring-framework/commit/791881036625b06c64eb6f6976a993fb6ba76608","closed","type: enhancement,","spring-projects-issues","2011-10-07T13:21:59Z","2019-01-13T21:41:48Z"
"","13129","Allow access to named sections of a multipart request body [SPR-8483]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-8483](https://jira.spring.io/browse/SPR-8483?redirect=false)** and commented  Currently when a multipart request is received via a `POST` call, the only way to reference the sections of that request is by using the `@ReqestParam()` annotation to get the body content.  The content that you might get is then limited as it can only be converted to simple types (it doesn't go through the `ConversionService`) and you must do any conversion yourself.  Ideally, it'd be nice to have an `@RequestPart()` annotation that would allow you to reference the sections of the request and the values there would go through standard `@RequestBody` processing for things like `ConversionService` conversion and `@Valid` validation.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13284 Throw a more specific exception for a missing part in a multipart request, providing access to the name of the missing part  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3a87d8e7cb37a22c71658dce08e5261c8e0736bf, https://github.com/spring-projects/spring-framework/commit/3363d05879537979a13e057f036257a064e1b505, https://github.com/spring-projects/spring-framework/commit/f4b7cfea38712035a7641d90477b9640d3204968","closed","type: enhancement,","spring-projects-issues","2011-06-23T01:46:09Z","2019-01-11T13:09:46Z"
"","13111","CollectionToObjectConverter uses the first element of a collection even when the collection could be assigned to an Object [SPR-8465]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-8465](https://jira.spring.io/browse/SPR-8465?redirect=false)** and commented  Currently, `CollectionToObjectConverter`'s behavior is to extract the first element of the source collection and attempt to coerce that object into the target type being converted to.  However, this is not always desirable.  Consider the case where you have a method that takes an object of any type (`Object targetMethod(Object o)`) and does something generic with it.  With the `CollectionToObjectConverter`'s current behavior the method will never be called with collection itself, but rather the first element in that collection.  The default behavior is certainly very useful, but there are times when it's appropriate to get the collection itself.  An improvement could be that if the source collection is not assignable to the target type, the first element is extracted and that is used in the attempt to satisfy the conversion.  So in the example of `targetMethod(String s)` where a `Set` is passed in, the first `String` would be extracted and used.  But in the case of `targetMethod(Object o)` where a `Set` is passed in, the collection itself would be used.  It should be noted that this is a change in behavior from 3.0.5, although this may simply be due to bug fixing rather than anything intentional.  A Skype conversation with Keith about this issue follows.  > yes, DefaultConversionService will bind a String[] or a List to a scalar by binding the first value. > [17/06/2011 15:09:32] Ben Hale: And Object counts as a scalar there? > [17/06/2011 15:09:41] Keith Donald: you have a type declared as Object? > [17/06/2011 15:10:15] Keith Donald: CollectionToObject matches on Object, yes, so unless some other specific Converter matches, yes, Object would work as well. > [17/06/2011 15:10:19] Ben Hale: Yeah, because we just need to get the object and pass it through and it could be anything. > [17/06/2011 15:10:38] Keith Donald: yeah, so it's going to try and do what you want and rather than fail it will bind the first element. > [17/06/2011 15:11:07] Keith Donald: if you were binding a Collection->Collection though, CollectionToCollection converter would run > [17/06/2011 15:11:13] Keith Donald: because target Collection is more specific than Object > [17/06/2011 15:12:06] Ben Hale: Yeah, the problem is that it's not guaranteed to be a collection.  :S  It could be anything, so what I really want is no conversion at all to happen for this.  But it's just one of many places that the conversion service is used in SI. > [17/06/2011 15:12:28] Ben Hale: OK, let me see if it's possible for me to rewrite the method signature so that it doesn't trigger on this. > [17/06/2011 15:12:52] Keith Donald: the source object could be anything you mean? > [17/06/2011 15:13:18] Ben Hale: Yeah, the source object could be anything, and it most cases this is fine, but in the case where it's a collection, it breaks. > [17/06/2011 15:13:35] Keith Donald: because it's not binding the colleciton, but the collection's first element? > [17/06/2011 15:13:41] Ben Hale: Exactly. > [17/06/2011 15:13:49] Ben Hale: For what it's worth, this is a behavior change from 3.0 to 3.1. > [17/06/2011 15:13:53] Keith Donald: because SI is telling CS to convert a source Collection to an Object. > [17/06/2011 15:14:10] Ben Hale: Yeah, because it just does a getClass() to find out what the source type is. > [17/06/2011 15:14:10] Keith Donald: CollectionToObject has always been there. > [17/06/2011 15:14:23] Keith Donald: I'm not sure why it would just be triggering now.  It could be a SI related change. > [17/06/2011 15:14:49] Ben Hale: Yeah, I don't know why it's changed, but it only happens when I upgrade to 3.1.M2, no other changes to our code base. > [17/06/2011 15:14:57] Ben Hale: Same version of SI > [17/06/2011 15:15:26] Keith Donald: well there are CS changes, mainly changes around actually running as expected (Various bug fixes) > [17/06/2011 15:15:40] Keith Donald: the behavior you're seeing is expected given the nature of that converter. > [17/06/2011 15:15:44] Ben Hale: Yeah, this might just be that.  We may have been the beneficiary of the bug earlier. > [17/06/2011 15:15:57] Keith Donald: one thing you could do is not register that converter. > [17/06/2011 15:16:04] Ben Hale: Yeah, since it's expected, let me see if I can change the signature to not trigger it. > [17/06/2011 15:16:07] Keith Donald: create your own conversion service that registeres what you need. > [17/06/2011 15:16:23] Ben Hale: Yeah, that's what I thought you were going to say :) > [17/06/2011 15:16:24] Keith Donald: CollectionToObject and ObjectToObject and some of these others can be cause problems for some usages. > [17/06/2011 15:16:38] Keith Donald: these are kind of fallback converters. > [17/06/2011 15:16:54] Ben Hale: Indeed.  That'll be my fallback if I can't get a method signature that removes the triggering of this behavior. > [17/06/2011 15:17:33] Keith Donald: i guess it is kind of weird that a Collection that is bindable to a Object field gets the first element extracted. > [17/06/2011 15:17:50] Keith Donald: would you mind opening a JIRA on that? Perhaps we should revisit that case in general for RC1. > [17/06/2011 15:17:55] Ben Hale: Will do. > [17/06/2011 15:18:05] Ben Hale: Thanks for the input, I've got to go prep for our planning meeting. > [17/06/2011 15:18:19] Keith Donald: perhaps CollectionToObject's extraxt logic should only run as a fallback if the collection can't be assigned to the target type. > [17/06/2011 15:18:33] Ben Hale: Yeah, that might be a nice middle ground.    ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9d73e2bde3fb21d415fbb960790ec7e34f1c974","closed","type: enhancement,","spring-projects-issues","2011-06-17T08:15:51Z","2019-01-11T13:35:23Z"
"","13149","Spring Test should not modify the application context under test [SPR-8503]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-8503](https://jira.spring.io/browse/SPR-8503?redirect=false)** and commented  When using `@ContextConfiguration` in a test `@Autowired` annotated fields get wired, even if  has not been specified.  This is incorrect behaviour, as it means that a test can pass against a context configuration which when used in production will not behave that way.  A better approach would be to load the specified configuration into one application context, and then use a child context for wiring the test fixture.  The child context can then have the additional post processors, without polluting the application context under test.  ---  **Affects:** 3.1 M2  **Issue Links:** - #9309 Load dedicated child ApplicationContext for test instance in the TestContext framework (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-07-01T01:26:23Z","2019-01-11T13:16:18Z"
"","13235","Maybe typo in the reference document [SPR-8591]","**[nanlei](https://jira.spring.io/secure/ViewProfile.jspa?name=nanlei1987)** opened **[SPR-8591](https://jira.spring.io/browse/SPR-8591?redirect=false)** and commented  In the example XML code of 4.5.4.5. The comment ""this next element effects the proxying of the surrounding bean"" here may be the word ""next"" is superfluous. Or I misunderstood it?   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3ead3cf8592a6eaf84511a26cda303b250f80db7","closed","type: enhancement,","spring-projects-issues","2011-08-08T23:18:31Z","2012-06-19T03:39:42Z"
"","13223","Typo in Spring Document [SPR-8579]","**[nanlei](https://jira.spring.io/secure/ViewProfile.jspa?name=nanlei1987)** opened **[SPR-8579](https://jira.spring.io/browse/SPR-8579?redirect=false)** and commented  In the end of Section 4.4.1.3,""IntializingBean"" may be the ""Initializing Bean"", this is a minor typo in the document.   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/11597c906dce28820ab323ac62f5a61f5ee9397f","closed","type: enhancement,","spring-projects-issues","2011-08-02T07:01:06Z","2012-06-19T03:39:14Z"
"","13777","Race condition in AnnotationMethodHandlerExceptionResolver [SPR-9138]","**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[SPR-9138](https://jira.spring.io/browse/SPR-9138?redirect=false)** and commented  There seem to be a race condition in AnnotationMethodHandlerExceptionResolver. I've tried to reproduce in a unit test, but haven't succeeded. I regularly see this in the production logs though:  Invoking request method resulted in exception : public static native long java.lang.System.currentTimeMillis() []  at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.doResolveException(AnnotationMethodHandlerExceptionResolver.java:143) java.lang.IllegalArgumentException: Invalid handler method return value: 1329504807993  System.currentTimeMillis() is a dummy placeholder in AnnotationMethodHandlerExceptionResolver that shouldn't be called if there isn't a race condition. This is what I believe happens. I've added comments to the findBestExceptionHandlerMethod-method from AnnotationMethodHandlerExceptionResolver which I believe causes the problem:  ```     private Method findBestExceptionHandlerMethod(Object handler, final Exception thrownException) {         //T1 and T2 enters method         final Class handlerType = ClassUtils.getUserClass(handler);         final Class","closed","type: bug,","spring-projects-issues","2012-02-20T09:38:39Z","2019-01-11T22:12:57Z"
"","13118","MarshallingView throws exception for no-content [SPR-8472]","**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[SPR-8472](https://jira.spring.io/browse/SPR-8472?redirect=false)** and commented  The marshallingview has a null check in renderMergedOutputModel where an exception is thrown if there is no model to marshal.  This causes a problem when implementing a restful service (that support application/xml) that returns 204 (NO CONTENT) for some query operations. For application/json this works as expected with no content and just the header with http code 204 being returned.   --- No further details from [SPR-8472](https://jira.spring.io/browse/SPR-8472?redirect=false)","closed","status: declined,","spring-projects-issues","2011-06-21T02:48:00Z","2019-01-12T16:25:24Z"
"","13469","SPeL doesn't support Unicode characters [SPR-8827]","**[Mohsen Saboorian](https://jira.spring.io/secure/ViewProfile.jspa?name=mohsens)** opened **[SPR-8827](https://jira.spring.io/browse/SPR-8827?redirect=false)** and commented  Same as [SPRNET-740](https://jira.spring.io/browse/SPRNET-740). Java Spring doesn't support Unicode chars in SPeL. org.springframework.expression.spel.standard.Tokenizer.process() Only accepts ASCII alphabets.   ---  **Affects:** 3.0.6, 3.1 RC1","closed","status: invalid,","spring-projects-issues","2011-11-08T11:43:36Z","2019-01-12T05:29:41Z"
"","13047","@Column annotation for automatic RowMapper. [SPR-8400]","**[Mirek Kobylanski](https://jira.spring.io/secure/ViewProfile.jspa?name=mirek.kobylanski)** opened **[SPR-8400](https://jira.spring.io/browse/SPR-8400?redirect=false)** and commented  `@Column` annotation for automatic RowMapper.  In integration services and application usage of Spring JDBC has advantage over JPA, specially then we need better performance. In simple database row reading, Spring JDBC is about 25-35% faster than JPA with Hibernate or EclipseLink (according my own tests). Using BeanPropertyRowMapper we lost about 5-8% of performance (according my own tests again), but we have huge convenience from automatic mappings. The problem appears than we have strange mapping or ugly column naming strategy in database. We can use column aliases in the SQL statement, but there is better way for this, java way, how about standard `@Column` annotation?  In **Spring Integration** and in **Spring Batch** there is possibility to use RowMappers, it will be very convenient to use JPA Entities for automatic mappings.  EntityRowMapper as BeanPropertyRowMapper extention with patch in attachment.   ---  **Attachments:** - [EntityRowMapper.zip](https://jira.spring.io/secure/attachment/18310/EntityRowMapper.zip) (_2.54 kB_)  8 votes, 11 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-06-05T08:42:17Z","2019-01-12T03:49:41Z"
"","13790","Jaxb2Marshaller::supports() ignores classes found by packages scanning [SPR-9152]","**[Mikhail Moussikhine](https://jira.spring.io/secure/ViewProfile.jspa?name=belamiru)** opened **[SPR-9152](https://jira.spring.io/browse/SPR-9152?redirect=false)** and commented  Use case:  ```java Jaxb2Marshaller jaxb2Marshaller = new Jaxb2Marshaller() { jaxb2Marshaller.setPackagesToScan(new String[] { ""com.blah"" }); ... if (jaxb2Marshaller.supports(SomeJaxbAnnotatedClass.class)) {   ... } ```  org.springframework.oxm.jaxb.Jaxb2Marshaller::supports() will always return false in this case, since it does not take scanned classes into account. The culprit is:  ```java private boolean supportsInternal(Class clazz, boolean checkForXmlRootElement) {   ... } ```  It checks input clazz only against explicit contextPath and classesToBeBound. The simplest solution would be to allow createJaxbContextFromPackages() to set scanned classes as classesToBound, since contextPath, classesToBeBound and packagesToScan are mutually exclusive. The following code would do the trick:  ```java private JAXBContext createJaxbContextFromPackages() throws JAXBException {   ...   Class[] jaxb2Classes = scanner.getJaxb2Classes();   classesToBeBound = jaxb2Classes;   ... } ```  The problem is aggravated by the fact that there does not seem to be a way to get the classes from JAXBContext either.  ---  **Affects:** 3.1.1  **Sub-tasks:** - #13813 Backport: ""Jaxb2Marshaller::supports() ignores classes found by packages scanning""  **Issue Links:** - #15182 Jaxb2Marshaller + packagesToScan + SpringMVC fails to find supported class (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f48c71c77b740c8d478feaa095f98d962cd2658, https://github.com/spring-projects/spring-framework/commit/43b4997e3f7e8959aff44d778430945c0fe76e6a","closed","type: bug,","spring-projects-issues","2012-02-22T19:50:26Z","2019-01-11T22:12:17Z"
"","13773","Custom condition in request mapping handler does not work as an exclusion filter [SPR-9134]","**[Mikhail Moussikhine](https://jira.spring.io/secure/ViewProfile.jspa?name=belamiru)** opened **[SPR-9134](https://jira.spring.io/browse/SPR-9134?redirect=false)** and commented  Use case:  ```java @RequestMapping(...) @CustomMapping(...) String something() { } ```  , where `@CustomMapping` is some custom annotation to add custom request mapping condition in addition to `@RequestMapping`.  Create a custom condition using RequestMappingHandlerMapping subclass and override:  ```java @Override protected RequestCondition getCustomMethodCondition(Method method) {   CustomMapping methodAnnotation = AnnotationUtils.findAnnotation(method, CustomMapping.class);   if (methodAnnotation != null)     return new CustomMappingCondition(methodAnnotation.value());   return null; } ```  This works great as an inclusion filter. If custom condition succeeds, then function something() would be chosen as a matching candidate in RequestMappingHandlerMapping.lookupHandlerMethod().  The problem arises, when custom condition wants to exclude a function (condition failed). Normally (at least that is what built-in conditions do), if condition failed, it would return NULL from RequestCondition.getMatchingCondition(), which would cause RequestMappingInfo.getMatchingCondition() to return NULL, which would exclude the current mapping from possible matches.  However, in the case of the custom condition, the logic is somewhat different. RequestConditionHolder.getMatchingCondition() is called, which in turn calls condition.getMatchingCondition(). Even if condition.getMatchingCondition() returned NULL (which would indicate that condition has failed, right?), RequestConditionHolder.getMatchingCondition() would always return either itself or a new RequestConditionHolder(). This means that ""custom"" in:  ```java RequestMappingInfo::getMatchingCondition() { ... RequestConditionHolder custom = customConditionHolder.getMatchingCondition(request); if (custom == null) {   return null; } ... } ```  is never going to be NULL and would never cause and exclusion of the match based on the custom condition.  ---  **Affects:** 3.1.1  **Attachments:** - [aop.xml](https://jira.spring.io/secure/attachment/19850/aop.xml) (_239 bytes_) - [RequestConditionHolderFix.java](https://jira.spring.io/secure/attachment/19851/RequestConditionHolderFix.java) (_1.42 kB_)  **Sub-tasks:** - #13784 Backport ""Custom condition in request mapping handler does not work as an exclusion filter""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8faa2e61ecf4f2c01252a7ab36194aa6e1cd2920, https://github.com/spring-projects/spring-framework/commit/64ee5e579adcec97122fc0ee1414031da3be0c6e  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2012-02-19T17:59:18Z","2019-01-11T22:13:04Z"
"","13772","Fix regression in @PropertySource placeholder resolution [SPR-9133]","**[Mikhail Moussikhine](https://jira.spring.io/secure/ViewProfile.jspa?name=belamiru)** opened **[SPR-9133](https://jira.spring.io/browse/SPR-9133?redirect=false)** and commented  `@Configuration` `@PropertySource`({ ""${property1}"", ""${property2}"" }) class AppConfig { }  Only first ${property1} placeholder will be resolved. Second and any other values will be used as is. The cause and fix are simple:  File: ./org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java  Function: protected AnnotationMetadata doProcessConfigurationClass(ConfigurationClass configClass, AnnotationMetadata metadata) {}  Line: 187 for (int i = 0; i < nLocations; i++) { locations[0] = this.environment.resolveRequiredPlaceholders(locations[0]); }  Should be: for (int i = 0; i < nLocations; i++) { locations[i] = this.environment.resolveRequiredPlaceholders(locations[i]); }  Just a typo, I guess.  ---  **Affects:** 3.1.1  **Sub-tasks:** - #13775 Backport ""Fix regression in `@PropertySource` placeholder resolution""  **Issue Links:** - #13770 Multiple PropertySource fails to use System property (_**""is duplicated by""**_) - #14016 Resolving ${} system properties in `@PropertySource` annotation does not work anymore (_**""is duplicated by""**_) - #13766 `@PropertySource` annotation with multiple values and a name fails to register all property sources  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e30d6104f367eb416c420ef801a8f152201443cd, https://github.com/spring-projects/spring-framework/commit/4df2a14b13ac41d71f8034fa68e1b7e54e3f7a48","closed","in: core,","spring-projects-issues","2012-02-18T13:56:59Z","2019-01-13T07:06:11Z"
"","13165","'bold text' referenced in documentation is not actually bold [SPR-8520]","**[Mikhail Mazursky](https://jira.spring.io/secure/ViewProfile.jspa?name=ash2k)** opened **[SPR-8520](https://jira.spring.io/browse/SPR-8520?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/reference/xsd-config.html#xsd-config-body-schemas-tx  > In the interest of completeness, to use the tags in the tx schema, you need to have the following preamble at the top of your Spring XML configuration file; the bold text in the following snippet references the correct schema so that the tags in the tx namespace are available to you.  But there is no bold text in the following snippet.  ---  **Affects:** 3.0.5  **Issue Links:** - #13170 Render  in syntax-highlighted code examples  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2a98efa13d35e30bd879f0ff92182900c805f5d","closed","type: bug,","spring-projects-issues","2011-07-07T21:19:58Z","2019-01-11T13:19:42Z"
"","13446","Support an asynchronous API for RestTemplate [SPR-8804]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-8804](https://jira.spring.io/browse/SPR-8804?redirect=false)** and commented  Asynchronous programming models are growing in popularity.  To support this model of development it would be great if RestTemplate were enhanced to support an asynchronous model.  JAX-RS's client api is currently slated to add an asynchronous mode.  There are several Async Http client libraries.  It would seem that soon would be the right time to add Async support for RestTemplate.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/296e2189a2376745414a065e9239b066c31e2bed, https://github.com/spring-projects/spring-framework/commit/ebcee26d57a46de567d9b6d2b4665b17c302f2c6, https://github.com/spring-projects/spring-framework/commit/20c4177466502a6d056d19ee6afbe539fc2a30ca, https://github.com/spring-projects/spring-framework/commit/38c8c6d0851f9bf2d9a8b7b6c46949345d5298c6  12 votes, 19 watchers","closed","has: votes-jira,","spring-projects-issues","2011-10-26T21:16:27Z","2013-10-15T06:53:34Z"
"","13443","Add a way to easily reverse 'ignoreDefaultModelOnRedirect' default when using mvc:annotation-driven [SPR-8801]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-8801](https://jira.spring.io/browse/SPR-8801?redirect=false)** and commented  In Spring 3.1 a new option was added to disable automatically adding model attributes to a redirect.  This option was turned on by default in mvc:annotation-driven.  This breaks backwards compatibility of applications that are using annotation-driven and model attributes on redirect.  This if fine since the new default is better.  However, there is no easy way for annoation-driven users to revert to the old mechanism.  It would be nice if there was an easy way to reverse this backwards incompatible change.  Perhaps by adding an attribute to annoation-driven to restore the old functionality?   ---  **Affects:** 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/88892845178ef3bcef9319c169cdb9fbc0fd84d0","closed","type: enhancement,","spring-projects-issues","2011-10-26T11:41:34Z","2012-06-19T03:39:38Z"
"","13442","Regression: HibernateJpaDialect adding SessionFactory as txResource not getting cleaned up [SPR-8800]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-8800](https://jira.spring.io/browse/SPR-8800?redirect=false)** and commented  Using Spring 3.1 rc1 I get a new error when using hibernate with JTA multiple times in the same thread.  What appears to be happening is the HibernateJpaDialect is adding the Hibernate SessionFactory to the transactional resources for some reason.  It assumes that when the transaction commits  EntityManagerFactoryUtils.cleanupTransaction() will be called.  However it doesn't in my situation.  I've included a maven test case.  To duplicate simply run mvn test.  If you change the version of spring to 3.0.6.RELEASE then the test passes.  Below is the exception I get:  java.lang.IllegalStateException: Already value [SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=[] updates=[] deletions=[] collectionCreations=[] collectionRemovals=[] collectionUpdates=[]])] for key [org.hibernate.internal.SessionFactoryImpl@1d7b222] bound to thread [main] at org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(TransactionSynchronizationManager.java:180) at org.springframework.orm.jpa.vendor.HibernateJpaDialect.prepareTransaction(HibernateJpaDialect.java:98) at org.springframework.orm.jpa.EntityManagerFactoryUtils.prepareTransaction(EntityManagerFactoryUtils.java:230) at org.springframework.orm.jpa.EntityManagerFactoryUtils.doGetTransactionalEntityManager(EntityManagerFactoryUtils.java:207) at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:211) at $Proxy16.getDelegate(Unknown Source) at test.JpaTest$2.doInTransaction(JpaTest.java:32) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) at test.JpaTest.test(JpaTest.java:30) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80) at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:169) at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:158) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:181) at org.testng.internal.Invoker.invokeMethod(Invoker.java:684) at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:883) at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1208) at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127) at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111) at org.testng.TestRunner.privateRun(TestRunner.java:753) at org.testng.TestRunner.run(TestRunner.java:613) at org.testng.SuiteRunner.runTest(SuiteRunner.java:334) at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329) at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291) at org.testng.SuiteRunner.run(SuiteRunner.java:240) at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) at org.testng.TestNG.runSuitesSequentially(TestNG.java:1137) at org.testng.TestNG.runSuitesLocally(TestNG.java:1062) at org.testng.TestNG.run(TestNG.java:974) at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:109) at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:202) at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:173)  ---  **Attachments:** - [test-jpa-binding.zip](https://jira.spring.io/secure/attachment/19015/test-jpa-binding.zip) (_2.89 kB_)  **Issue Links:** - #13414 Jpa transaction manager transaction suspension ignores dialect resources  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2011-10-24T18:17:21Z","2019-01-11T14:41:17Z"
"","13180","Regression in mvc handler mapping resolution [SPR-8536]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-8536](https://jira.spring.io/browse/SPR-8536?redirect=false)** and commented  I recently upgraded my application from 3.0.5 to 3.1.0.m2.  In my application spring mvc is choosing a different controller method then it used to without any changes in annotations.  I know that a lot of work has gone into changing method routing based on headers and content types and stuff so if this is expected that is fine I just though I'd bring it to your attention in case it isn't expected.  I've attached a testcase based on the STS spring mvc template.  All I did was add a method like the following to the HomeController:  [code] `@RequestMapping`(value = ""/"", headers=""accept=application/json"", method = RequestMethod.GET) `@ResponseBody` public String homeJson() { return ""We're not home""; } [/code]  If using Spring 3.0.5 the normal html home controller method is invoked.  If I upgrade the project to Spring 3.1.0.m2 then the method above gets invoked instead.  I tested it in Chrome, Firefox, and IE 9.   ---  **Affects:** 3.1 M2  **Attachments:** - [test-mvc.zip](https://jira.spring.io/secure/attachment/18475/test-mvc.zip) (_6.34 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0460a5ecebe143281f4870bc8aef101fbffe5a10, https://github.com/spring-projects/spring-framework/commit/3c7e44ada41a26cd1ac243015af893fe2b5411ba","closed","type: bug,","spring-projects-issues","2011-07-14T15:11:44Z","2012-06-19T03:39:35Z"
"","13144","Tasks created using task:scheduled-tasks never start if default-lazy-init=""true"" [SPR-8498]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-8498](https://jira.spring.io/browse/SPR-8498?redirect=false)** and commented  Given the example below.  My scheduled task will never start.  If I change default-lazy-init=""false"" then the scheduled task starts.  It seems to me that the scheduled-tasks created from the task namespace handler should be forced to be lazy=false.  applicationContext.xml \           \ SomeService.java public class SomeService { public void print() { System.out.println(""Dude""); } }   ---  **Attachments:** - [lazyScheduler.patch](https://jira.spring.io/secure/attachment/18478/lazyScheduler.patch) (_10.73 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18486/mylyn-context.zip) (_45.32 kB_)","closed","type: enhancement,","spring-projects-issues","2011-06-29T14:29:14Z","2016-12-07T16:45:47Z"
"","12918","Support for better schemaName auto-detection in the TableMetaDataProvider [SPR-8270]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-8270](https://jira.spring.io/browse/SPR-8270?redirect=false)** and commented  We are running into a situation where the GenericTableMetaDataProvider.locateTableAndProcessMetaData() isn't correctly auto detecting the schema we are using in our Oracle based application.  Oracle has a mechanism to acquire the ""CURRENT_SCHEMA"" through a query.  Would you be open Thomas to accepting a patch that would:  1. Introduce a new method to support TableMetaDataProvider.detectCurrentSchema()  GenericTableMetaDataProvider.detectCurrentSchema() would just return 'null' 2. Customize GenericTableMetaDataProvider.locateTableAndProcessMetaData() that if ""schemaName"" is null would add the result of ""detectCurrentSchema()"" to its process of finding the table. 3. Enhance the OracleTableMetaDataProvider.detectCurrentSchema() to return the result of ""select sys_context('USERENV', 'CURRENT_SCHEMA') CURRENT_SCHEMA from dual;""  If you could give me a rough idea of your openness to this request I'd gladly code up a patch for 3.1.  Mike   ---  **Attachments:** - [patch-SPR-8270](https://jira.spring.io/secure/attachment/18119/patch-SPR-8270) (_4.48 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92d6e5a14c2af7c31949c8d7769cc8ebd22d5829","closed","type: enhancement,","spring-projects-issues","2011-04-22T12:12:50Z","2012-06-19T03:39:38Z"
"","13282","Allow customization of ContentNegotiatingViewResolver by making some of its methods protected [SPR-8640]","**[Mihhail Verhovtsov](https://jira.spring.io/secure/ViewProfile.jspa?name=infeligo)** opened **[SPR-8640](https://jira.spring.io/browse/SPR-8640?redirect=false)** and commented  We wanted to change the way Spring's `ContentNegotiatingViewResolver` resolves views, but could not achive that, because it uses a private method to get a list of view candidates:  ```java 	private List getCandidateViews(String viewName, Locale locale, List requestedMediaTypes) 			throws Exception {  		List candidateViews = new ArrayList(); 		for (ViewResolver viewResolver : this.viewResolvers) { 			View view = viewResolver.resolveViewName(viewName, locale); 			if (view != null) { 				candidateViews.add(view); 			} 			for (MediaType requestedMediaType : requestedMediaTypes) { 				List extensions = getExtensionsForMediaType(requestedMediaType); 				for (String extension : extensions) { 					String viewNameWithExtension = viewName + ""."" + extension; 					view = viewResolver.resolveViewName(viewNameWithExtension, locale); 					if (view != null) { 						candidateViews.add(view); 					} 				}  			} 		} 		if (!CollectionUtils.isEmpty(this.defaultViews)) { 			candidateViews.addAll(this.defaultViews); 		} 		return candidateViews; 	} ```  What we don't like in the original method was that it loops through every view resolver and asks for a view. It also adds an extension to the view name and then asks again for such a view. In out opinion, this could be too expensive operation, because internally views try to load template resources from file system and fail with exception. This is the way `VelocityEngine` tries to create views. More over, Velocity logs a message at ERROR level for each attempt to load a non-existing template.  Our custom improvement would be to use one-to-one relationship between media type and view resolver. We would like to select one view resolver by media type and then once ask it for a view.  We could have implemented that if `getCandidateViews` method would have visibility level of protected.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13057 Content negotiation improvements","closed","type: enhancement,","spring-projects-issues","2011-08-26T01:52:13Z","2019-01-11T14:21:17Z"
"","13513","SimpleJdbcTestUtils.executeSqlScript doesn't close script InputStream [SPR-8872]","**[Mickaël LEDUQUE](https://jira.spring.io/secure/ViewProfile.jspa?name=mleduque)** opened **[SPR-8872](https://jira.spring.io/browse/SPR-8872?redirect=false)** and commented  I use this code in a EJB context in the glassfish 3.1 server  SimpleJdbcTestUtils.executeSqlScript(new SimpleJdbcTemplate( new SingleConnectionDataSource(jdbcConnection, true)), new ClassPathResource(""script.sql""), false);  There is not failure, but the following warning :  24 nov. 2011 15:27:28 com.sun.enterprise.loader.ASURLClassLoader$SentinelInputStream report ATTENTION: Input stream has been finalized or forced closed without being explicitly closed; stream instantiation reported in following stack trace java.lang.Throwable at com.sun.enterprise.loader.ASURLClassLoader$SentinelInputStream.\(ASURLClassLoader.java:1230) at com.sun.enterprise.loader.ASURLClassLoader.getResourceAsStream(ASURLClassLoader.java:878) at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:155) at org.springframework.core.io.support.EncodedResource.getReader(EncodedResource.java:92) at org.springframework.test.jdbc.SimpleJdbcTestUtils.executeSqlScript(SimpleJdbcTestUtils.java:139) at org.springframework.test.jdbc.SimpleJdbcTestUtils.executeSqlScript(SimpleJdbcTestUtils.java:113) at com.cs.services.bcmonitoring.itests.init.DbInitializerBean.initDb(DbInitializerBean.java:45)  I tried to just close it by myself, but it's a completely internal object that can't be accessed by the caller.   ---  **Affects:** 3.0.6, 3.1 RC1","closed","type: bug,","spring-projects-issues","2011-11-24T06:35:03Z","2012-06-19T03:39:10Z"
"","13821","Autowired field/setter dependency is not set after another bean of the same class had this property set through xml configuration [SPR-9183]","**[Michał Rembiszewski](https://jira.spring.io/secure/ViewProfile.jspa?name=mrembisz)** opened **[SPR-9183](https://jira.spring.io/browse/SPR-9183?redirect=false)** and commented  When property is set through xml configuration it is marked as skip=true in org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement which is stored in org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#injectionMetadataCache where bean class is used as a key.  This mean after spring encounters xml definition of bean with explicitly set property, the subsequent beans of this class will have its annotation injection ignored. This results in difficult to detect bugs in projects. Here is minimal code to demonstrate the issue:  import org.springframework.beans.factory.annotation.Value;  import javax.annotation.PostConstruct;  public class AutowireTest { public String testField;  `@PostConstruct` public void init() { if (testField == null) throw new RuntimeException(""FAIL""); }  `@Value`(""default"") public void setTestField(String testField) { this.testField = testField; } }  \ \ \ \ This throws ""FAIL"" exception when ""au_test2"" is constructed. When I remove \ from ""au_test1"" no exception is thrown. Also there is no exception if I swap order in which beans are defined. The same behavior can be observed also for other injection annotations than Value.   ---  **Affects:** 3.0.5  **Attachments:** - [spr-9183.zip](https://jira.spring.io/secure/attachment/19478/spr-9183.zip) (_2.46 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/65ac173b29825aa460bda47c5b751515138b5a4c","closed","in: core,","spring-projects-issues","2012-02-29T01:12:20Z","2019-01-12T16:36:45Z"
"","13792","Type override registration when using LocalSessionFactoryBean [SPR-9154]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-9154](https://jira.spring.io/browse/SPR-9154?redirect=false)** and commented  org.hibernate.cfg.Configuration#registerTypeOverride methods are not exposed in any way when using XML context configuration with LocalSessionFactoryBean. It would be useful if the factory had properties for listing these overrides.  In comparison, LocalSessionFactoryBuilder is already good, as it simply extends the Configuration class.   ---  **Affects:** 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2012-02-23T03:25:47Z","2019-01-12T03:49:07Z"
"","13075","Spring MVC returns 500 Internal Server Error when required HTTP header is missing [SPR-8429]","**[Michał Orman](https://jira.spring.io/secure/ViewProfile.jspa?name=michalorman)** opened **[SPR-8429](https://jira.spring.io/browse/SPR-8429?redirect=false)** and commented  If required HTTP header is missing in a request Spring return 500 Internal Server Error rather than 400 Bad Request. The 500 is caused by `IllegalStateException`:  ``` org.springframework.web.bind.annotation.support.HandlerMethodInvocationException: Failed to invoke handler method [public java.lang.Object ch.netm.appgateway.controller.CategoriesController.show(ch.netm.appgateway.api.request.ShowCategoryRequest,javax.servlet.http.HttpServletRequest,java.lang.String)]; nested exception is java.lang.IllegalStateException: Missing header 'User-Agent' of type [java.lang.String] 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:181) ~[spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:426) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:414) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) [spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) [spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) [servlet-api.jar:na] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) [servlet-api.jar:na] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) [catalina.jar:6.0.29] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) [catalina.jar:6.0.29] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) [catalina.jar:6.0.29] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) [catalina.jar:6.0.29] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [catalina.jar:6.0.29] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [catalina.jar:6.0.29] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298) [catalina.jar:6.0.29] 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857) [tomcat-coyote.jar:6.0.29] 	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588) [tomcat-coyote.jar:6.0.29] 	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) [tomcat-coyote.jar:6.0.29] 	at java.lang.Thread.run(Thread.java:662) [na:1.6.0_24] Caused by: java.lang.IllegalStateException: Missing header 'User-Agent' of type [java.lang.String] 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.raiseMissingHeaderException(HandlerMethodInvoker.java:784) ~[spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveRequestHeader(HandlerMethodInvoker.java:554) ~[spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:343) ~[spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE] 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:171) ~[spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE] ```  In comparison whenever required request parameter is missing the `MissingServletRequestParameterException` is thrown which is further handled by `DefaultHandlerExceptionResolver` and 400 Bad Request is returned to the client. In case of missing HTTP header similar functionality is expected.  ---  **Affects:** 3.0.5  **Issue Links:** - #12458 Spring MVC should return 400 BAD_REQUEST on unsuccessful binding. (_**""supersedes""**_)","closed","type: bug,","spring-projects-issues","2011-06-09T06:48:40Z","2019-01-11T13:33:01Z"
"","13503","Improve dependency management for the spring-test module [SPR-8861]","**[Michal Jedynak](https://jira.spring.io/secure/ViewProfile.jspa?name=mjedynak)** opened **[SPR-8861](https://jira.spring.io/browse/SPR-8861?redirect=false)** and commented  #### Original Summary  _spring-test cannot be used without spring-core_  #### Status Quo  After adding `spring-test` jar as a dependency to a maven project, during invoking `ReflectionTestUtils.getField()` method I'm getting:  ``` java.lang.NoClassDefFoundError: org/springframework/util/Assert 	at org.springframework.test.util.ReflectionTestUtils.getField(ReflectionTestUtils.java:134) ```  Adding a dependency on `spring-core` solves the problem.  #### Proposal  `spring-test` should have a _required_ dependency on `spring-core`.   ---  **Affects:** 3.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/155b88ffcee5c85898cc6cc70c0527250a9e5772","closed","type: enhancement,","spring-projects-issues","2011-11-19T08:57:56Z","2012-06-19T03:39:39Z"
"","13090","tag doesn't support dot(.) operator for accessing map values [SPR-8444]","**[Michal Hlavac](https://jira.spring.io/secure/ViewProfile.jspa?name=mh_macbeth)** opened **[SPR-8444](https://jira.spring.io/browse/SPR-8444?redirect=false)** and commented  EvaluationContext used by the  tags shoud contain a MapAccessor to support the dot(.) operator for accessing map values:    ---  **Affects:** 3.0.5  **Issue Links:** - #13056 Provide 'environment' taglib  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2011-06-13T04:05:37Z","2019-01-11T13:36:31Z"
"","13332","Clarify BeanFactory#containsBean Javadoc [SPR-8690]","**[Michal Bachman](https://jira.spring.io/secure/ViewProfile.jspa?name=bachmanm)** opened **[SPR-8690](https://jira.spring.io/browse/SPR-8690?redirect=false)** and commented  The JavaDoc for BeanFactory.containsBean says ""is {`@link` #getBean} able to obtain a bean instance for the given name?"". For Beans declared abstract, the containsBean method returns true, but getBean can't obtain the bean, resulting in BeanIsAbstractException.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/10be0ef9e763d368a24a7ac466da50a2224c5d41","closed","type: enhancement,","spring-projects-issues","2011-09-13T09:34:07Z","2012-06-19T03:39:19Z"
"","13464","Introduce a configurable strategy-based approach to bean property access [SPR-8822]","**[Michael Vorburger](https://jira.spring.io/secure/ViewProfile.jspa?name=vorburger)** opened **[SPR-8822](https://jira.spring.io/browse/SPR-8822?redirect=false)** and commented  It would be wonderful if the org.springframework.beans.BeanWrapperImpl were a little less ""monolithic"" than it appears to be today, and had support for some pluggable PropertyAccessStrategy & PropertyMetadataAccessStrategy, à la what package org.springframework.binding in spring-rich-c (from http://www.springsource.org/spring-rcp) appears to have.  The default BeanWrapperImpl would be using an implementation of PropertyAccessStrategy doing what it does today - but one would be apply to supply it other ones, which would, for example, allow directly supporting any kind of more dynamic ""Bean"" implementations.  Support for DynaBean comes to mind naturally, but beyond DynaBeans as in Apache Commons BeanUtil, pluggable support for dynamic data structures such as simple Maps, Jackson JSON objects, or some XML frameworks in core Spring Beans could allow e.g. SpEL to directly access such data!  I do understand that in theory one could write one's own BeanWrapper implementation (and/or extending AbstractPropertyAccessor & PropertyEditorRegistrySupport, but as there appears to be a lot of logic in them (how to ""traverse"" / navigate beans, indexed & mapped access etc.) should probably stay inside BeanWrapperImpl - as long as it has some way to extend it.   ---  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2011-11-06T05:14:50Z","2019-01-11T14:40:24Z"
"","12902","Log4jConfigurer should accept Resource [SPR-8254]","**[Michael Vorburger](https://jira.spring.io/secure/ViewProfile.jspa?name=vorburger)** opened **[SPR-8254](https://jira.spring.io/browse/SPR-8254?redirect=false)** and commented  One may expect the org.springframework.util.Log4jConfigurer to be able to use a org.springframework.core.io.Resource (both Spring Core helpers after all), but this is not so.  How to configure (Log4j) from a Resource is harder than it should be in Spring.  I ended up doing it like this (may not be ideal), it would be nice if something like this was part of Core:  ```         Resource location = ...;  // some proprietary thing which looks up Log Config (checks various dirs and falls back to default on CP)          try {             File locationFile = location.getFile();             // can use refreshInterval here (as opposed to below)             Log4jConfigurer.initLogging(locationFile.getAbsolutePath(), refreshInterval);             return;         } catch (IOException e) {             try {                 URL locationURL = location.getURL();                 // use method w.o. refreshInterval here (@see https://jira.springsource.org/browse/SPR-707)                 Log4jConfigurer.initLogging(locationURL.toString());             } catch (IOException e1) {                 throw new IllegalArgumentException(""Unable to start logging, because non-File resource ""                         + location.getDescription() + "" toURL() failed: "" + e.getMessage(), e);             }         } ```  See also #12901.  ---  No further details from [SPR-8254](https://jira.spring.io/browse/SPR-8254?redirect=false)","closed","in: core,","spring-projects-issues","2011-04-15T08:52:18Z","2019-01-12T05:30:29Z"
"","12901","Log4jConfigurer JavaDoc wrongly states that ""classpath:"" location is supported, but that only works with refreshInterval [SPR-8253]","**[Michael Vorburger](https://jira.spring.io/secure/ViewProfile.jspa?name=vorburger)** opened **[SPR-8253](https://jira.spring.io/browse/SPR-8253?redirect=false)** and commented  org.springframework.util.Log4jConfigurer is confusing with regards to the ""classpath:"" location support introduced in #5435.  The JavaDoc of BOTH the initLogging(String location) as well as the initLogging(String location, long refreshInterval) methods state that 'location = the location of the config file: either a ""classpath:"" location (e.g. ""classpath:myLog4j.properties""), an absolute file URL (e.g. ""file:C:/log4j.properties), or a plain absolute path in the file system (e.g. ""C:/log4j.properties"")'  That is actually wrong - only the initLogging(String location) variant currently supports a ""classpath:"" location prefix, the initLogging(String location, long refreshInterval) doesn't and will fall over if you try to (because internally it will attempt to create a File from the location).  At the very least the JavaDoc should be cleared up to explicitly clarify this. -- Or, better (IMHO) would be if it would be handled automatically & transparently by the initLogging(String location, long refreshInterval) implementation - if a ""classpath:"" location is specified (inside a packaged JAR, as opposed to if its a File in the filesystem on the classpath) then just fall-back to initLogging(String location) [print a WARN?], as obviously you cannot refresh - the intention in that case is clear enough though to suck it up and move on anyways.  ---  No further details from [SPR-8253](https://jira.spring.io/browse/SPR-8253?redirect=false)","closed","in: core,","spring-projects-issues","2011-04-15T08:13:38Z","2019-01-12T05:30:30Z"
"","13268","""depends-on"" attribute not working for dynamic language bean [SPR-8625]","**[Michael Ottati](https://jira.spring.io/secure/ViewProfile.jspa?name=mottati)** opened **[SPR-8625](https://jira.spring.io/browse/SPR-8625?redirect=false)** and commented  In attempting to refactor a bean from a statically compiled groovy script to a dynamically compiled one, I made the following change to my context.xml.  ORIGINAL             MODIFIED             The code contained in DynamicGroovyRouteBuilder was an exact copy of the groovy script that was statically compiled. Upon testing this new configuration, it failed. The failure was at first cryptic however upon further examination I determined that the root cause of the failure was due to the fact that the bean my groovy script was dependent upon had not been instantiated.  I was able to correct the problem by declaring the dependency in a slightly different way. Instead of relying on the ""depends-on"" attribute, I added a property element to the dynamic language bean which referenced the bean I depended upon. The resulting definition did work.  WORKING                      I am attaching a simple project that demonstrates the problem. Within the test case there are three tests:      StaticTest             Original working configuration with statically compiled groovy     DynamicDependsOnTest   Failure case     DynamicRefTest         Fix described above.  When these tests are run individually they work as described. When the tests are run together, for instance when running them with the mvn ""test"" goal they fail. The failure is described in this thread:  http://forum.springsource.org/showthread.php?100699-Unit-Test-Issue-ContextConfiguration-Multiple-AppContext-Files-amp-Autowiring  I have attached a test case that demonstrates the bug.    ---  **Affects:** 3.0.5  **Attachments:** - [SpringDependencyBug.tgz](https://jira.spring.io/secure/attachment/18578/SpringDependencyBug.tgz) (_24.32 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/b5326ccd647c3a1976cda9a1f9b615a13a985745","closed","type: bug,","spring-projects-issues","2011-08-19T10:21:16Z","2013-06-21T10:12:28Z"
"","13158","pdf documentation doesn't contain images [SPR-8512]","**[Michael König](https://jira.spring.io/secure/ViewProfile.jspa?name=micha77dd)** opened **[SPR-8512](https://jira.spring.io/browse/SPR-8512?redirect=false)** and commented  The following files doesn't contain images: http://static.springsource.org/spring/docs/3.1.0.M2/spring-framework-reference/pdf/spring-framework-reference.pdf http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/pdf/spring-framework-reference.pdf  ---  **Affects:** 3.0.5, 3.1 M1, 3.1 M2  **Issue Links:** - #13323 Missing images in Reference Documentation (PDF Version) (_**""is duplicated by""**_) - #13315 All diagrams are missing from Reference Manual PDF (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2011-07-05T13:01:28Z","2019-01-11T13:20:01Z"
"","13466","@Configuration class enhancement is not idempotent [SPR-8824]","**[Michael Hunger](https://jira.spring.io/secure/ViewProfile.jspa?name=mhunger)** opened **[SPR-8824](https://jira.spring.io/browse/SPR-8824?redirect=false)** and commented  _Resolver's note: See the final comment explaining the resolution before attempting to understand the details of this issue._  Added Test-Project to github: spring-framework-issues  ``` 2011-11-08 12:34:36,061 [main] ERROR org.springframework.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@2e67cd84] to prepare test instance [org.springframework.data.neo4j.examples.hellograph.WorldCounterTest@20e5ace9] java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:157) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:290) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) 	at org.junit.runners.Suite.runChild(Suite.java:128) 	at org.junit.runners.Suite.runChild(Suite.java:24) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:157) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:71) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:202) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) Caused by: java.lang.IllegalStateException: Singleton 'conversionService' isn't currently in creation 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.afterSingletonCreation(DefaultSingletonBeanRegistry.java:312) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:239) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:903) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:103) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) 	at org.springframework.test.context.support.DelegatingSmartContextLoader.loadContext(DelegatingSmartContextLoader.java:228) 	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:124) 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:148) 	... 35 more ```    ---  **Affects:** 3.1 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?114363-Spring-data-neo4j-error-on-start-Singleton-xxx-isn-t-currently-in-creation","closed","type: bug,","spring-projects-issues","2011-11-08T03:43:43Z","2012-06-19T03:39:34Z"
"","13670","@ComponentScan with includeFilters on @Import-ed context does not work [SPR-9031]","**[Michael Donaghy](https://jira.spring.io/secure/ViewProfile.jspa?name=lmm)** opened **[SPR-9031](https://jira.spring.io/browse/SPR-9031?redirect=false)** and commented  It seems that using `@ComponentScan` with an includeFilters set only works for top-level contexts, not for `@Imported` contexts? See the attached minimal example maven project: the LowLevelContext works correctly, but the HighLevelContext does not, even though all the HighLevelContext does is to `@Import` the LowLevelContext.  Stepping through in a debugger I found that different AnnotationMetadata implementations are passed to ConfigurationClassParser#doProcessConfigurationClass in the two cases: For LowLevelContext a StandardAnnotationMetadata is used (and behaves correctly). For HighLevelContext an AnnotationMetadataReadingVisitor is used, and seems to return an empty array from getAnnotationAttributes(ComponentScan.class.getName()).get(""includeFilters""), which is incorrect.  ---  **Affects:** 3.1 GA  **Attachments:** - [springproblem.tar.gz](https://jira.spring.io/secure/attachment/19316/springproblem.tar.gz) (_1.58 kB_)  **Issue Links:** - #13361 `@ComponentScan`(includeFilters=`@Filter`(...)) fails when `@Import`'ed (_**""is duplicated by""**_) - #13738 ClassPathBeanDefinitionScanner vs ClassPathBeanDefinitionScanner: difference in behavior when dealing with `@ComponentScan` excludeFilters (_**""is duplicated by""**_) - #12634 `@ComponentScan` does not work when referenced from XML config - #13871 Reduce log level for message re: missing annotation  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/dd79a1bbee3b248eecbf916a2367eecfdfb97ff6","closed","in: core,","spring-projects-issues","2012-01-17T06:21:45Z","2019-01-13T07:06:36Z"
"","13732","Task Namespace Executor Element Does Not Set threadNamePrefix [SPR-9094]","**[Michael Bevilacqua-Linn](https://jira.spring.io/secure/ViewProfile.jspa?name=mblinn)** opened **[SPR-9094](https://jira.spring.io/browse/SPR-9094?redirect=false)** and commented  The Task Execution documentation here - http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/scheduling.html  Claims: 25.4.2 The 'executor' element... ...the value provided for the 'id' attribute will be used as the prefix for thread names within the pool.  The documentation for the executor element in the task namespace makes a similar claim      The bean name for the generated ThreadPoolTaskExecutor instance.     This value will also be used as the thread name prefix which is why it is     required even when defining the executor as an inner bean: The executor     won't be directly accessible then but will nevertheless use the specified     id as the thread name prefix of the threads that it manages.  This documentation is actually on the id attribute, not the name attribute, and neither the ID nor name are used to set a thread name prefix.  It appears that the TaskExecutorFactoryBean is expecting a property 'beanName' to be set, which it will use to set a 'threadNamePrefix' on the TaskExecutor it constructs, but that the 'beanName' is never set by the ExecutorBeanDefinitionParser.   ---  **Affects:** 3.1 GA","closed","in: core,","spring-projects-issues","2012-02-06T10:45:27Z","2019-01-11T22:26:59Z"
"","13467","Tiles-3 support [SPR-8825]","**[mck](https://jira.spring.io/secure/ViewProfile.jspa?name=mck)** opened **[SPR-8825](https://jira.spring.io/browse/SPR-8825?redirect=false)** and commented  Tiles-3.0 requires new package with new TilesConfigurer, TilesView, and TilesViewResolver.  patch soon to come...   ---  **Affects:** 3.0.6  **Attachments:** - [SPR-8825-0.1-finn.pom](https://jira.spring.io/secure/attachment/20120/SPR-8825-0.1-finn.pom) (_6.06 kB_) - [SPR-8825-0.1-finn-classes.jar](https://jira.spring.io/secure/attachment/20121/SPR-8825-0.1-finn-classes.jar) (_19.99 kB_)  7 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2011-11-08T07:53:16Z","2012-11-20T12:01:42Z"
"","13661",".hibernate4.LocalSessionFac toryBean doen't have ""p:lobHandler-ref"" property [SPR-9022]","**[Maxim Kuzmik](https://jira.spring.io/secure/ViewProfile.jspa?name=forn)** opened **[SPR-9022](https://jira.spring.io/browse/SPR-9022?redirect=false)** and commented  Hello.  After merge for spring 3.1 and Hibernate 4. I can't do the work with Clob.  I have hbm file:  ``` ...  ... ```  In the package hibernate4.support.ClobStringType is absent.  And second one in the configuration i was have: Code:  ```  ...                                       ```  Now the org.springframework.orm.hibernate4.LocalSessionFac toryBean doen't have ""p:lobHandler-ref"" property.  What is the path to fix this?   ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?121101-Hibernate-4-logHandler-ClobStringType","closed","type: enhancement,","spring-projects-issues","2012-01-12T22:03:59Z","2012-01-13T06:14:26Z"
"","13671","Update Testing chapter regarding avoiding false positives with JPA [SPR-9032]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-9032](https://jira.spring.io/browse/SPR-9032?redirect=false)** and commented  Step by step:  1. Go to http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#testcontext-tx 2. Scroll down to ""Avoid false positives when testing ORM code"" 3. Find how to include SessionFactory and flush() is used to avoid false positives if you are using Hibernate.  The information is good, but it is not applicable if you use JPA. To avoid false positives when using JPA (backed by Hibernate) I propose that you add a new snippet that the describes a different approach. Suggested implementation:  ```java @PersistenceContext EntityManager entityManager;  @Test(expected = GenericJDBCException.class) public void updateWithSessionFlush() {     updateJpaEntity();     // Manual flush is required to avoid false positive in test     entityManager.unwrap(Session.class).flush(); } ```  ---  **Affects:** 3.1 GA  **Issue Links:** - #18296 Doc: Flush in test with SessionFactory vs EntityManager (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64c388d5242076ac7a95af1bd03ea276157596af","closed","type: documentation,","spring-projects-issues","2012-01-17T13:10:37Z","2019-01-11T22:21:37Z"
"","13037","Update documentation of TransactionCallback.doInTransaction() [SPR-8390]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-8390](https://jira.spring.io/browse/SPR-8390?redirect=false)** and commented  In the javadocs of the TransactionCallback.doInTransaction() it is currently stated that:      A RuntimeException thrown by the callback is treated as application exception that enforces a rollback. An exception gets propagated to the caller of the template.  The second sentence implies that any exception propagates to the caller. This is wrong, because any implementation of the doInTransactionMethod() that throws a checked exception will cause a compile error. A better javadoc clarification would stress that we are only dealing with unchecked exceptions, e.g.      A RuntimeException thrown by the callback is treated as application exception that enforces a rollback. The RuntimeException gets propagated to the caller of the template.  Ref: http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/transaction/support/TransactionCallback.html   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca6e1127421aa8cec34f3b556297ef89d6b173bc","closed","type: enhancement,","spring-projects-issues","2011-06-02T08:08:31Z","2012-06-19T03:39:34Z"
"","13542","Create easily searchable page centralizing Spring Maven & OSGi release/external/milestone/snapshot repository locations [SPR-8902]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-8902](https://jira.spring.io/browse/SPR-8902?redirect=false)** and commented  I always have to search nontrivially to find the \ definitions for the various Spring repositories (release/external/milestone/snapshot for Maven & OSGi -- 8 total?).  Please hang a page off of springsource.org with Maven pom.xml snippets for all of them, and/or include it at https://s3browse.springsource.com/browse/.   --- No further details from [SPR-8902](https://jira.spring.io/browse/SPR-8902?redirect=false)","closed","in: core,","spring-projects-issues","2011-12-07T10:29:57Z","2019-01-12T05:29:33Z"
"","13477","Add MapCombiningFactoryBean [SPR-8835]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-8835](https://jira.spring.io/browse/SPR-8835?redirect=false)** and commented  I couldn't find a factory bean that combines maps, and the feature of merging collections among parent & child beans (http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-collection-elements) didn't suit my needs, so I created MapCombiningFactoryBean.  Please add to Spring core if you see fit.  ---  **Affects:** 2.0.9, 2.5.6, 3.0.6, 3.1 RC1  **Attachments:** - [MapCombiningFactoryBean.java](https://jira.spring.io/secure/attachment/19107/MapCombiningFactoryBean.java) (_1.45 kB_)  **Issue Links:** - #11189 Introduce 'merge' attribute for util namespace collection elements (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-11-10T06:46:00Z","2019-01-11T15:04:38Z"
"","13476","Injecting EXTENDED @PersistenceContext into JUnit 4 test class causes NoSuchBeanDefinitionException [SPR-8834]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-8834](https://jira.spring.io/browse/SPR-8834?redirect=false)** and commented  I'm trying to use a container-managed extended `EntityManager` in a test class.  When I use the annotation `@PersistenceContext(type=PersistenceContextType.EXTENDED, unitName=""..."")`, the `PersistenceAnnotationBeanPostProcessor` throws a `NoSuchBeanDefinitionException` saying that it can't find the bean with the name of my test class.  If I remove the type argument (or set it to `PersistenceContextType.TRANSACTION`), my test fails for unrelated reasons.  #### Reproducible example attached.  To reproduce, extract archives in archive, issue `""mvn install""` in `../dn-atomikos/trunk`, and then issue `""mvn clean test -Dtest=TwoPhaseCommitTest""` in `../db.jta/`.  If reproduced, you should get an exception like the one below. If you comment out `""type=PersistenceContextType.EXTENDED)""` in `AbstractTwoPhaseCommitTest`, this exception goes away (and a new, unrelated exception may appear). I need to test this with a container-managed extended `EntityManager`, so I'm blocked until this is fixed.  ``` 2011-11-09 14:40:39,476 TRACE [org.springframework.beans.factory.support.DefaultListableBeanFactory] -  2011-11-09 14:40:39,476 ERROR [org.springframework.test.context.TestContextManager] -  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.example.test.TwoPhaseCommitTest': Injection of persistence dependencies failed; nested exception is org .springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'org.example.test.TwoPhaseCommitTest' is defined         at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:342)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1099)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBeanProperties(AbstractAutowireCapableBeanFactory.java:377)         at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:110)         at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)         at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288)         at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:290)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)         at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)         at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)         at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)         at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)         at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)         at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)         at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)         at org.junit.runners.ParentRunner.run(ParentRunner.java:236)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)         at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)         at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123)         at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)         at java.lang.reflect.Method.invoke(Method.java:597)         at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)         at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)         at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)         at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:81)         at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68) Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'org.example.test.TwoPhaseCommitTest' is defined         at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:529)         at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1095)         at org.springframework.beans.factory.support.AbstractBeanFactory.isPrototype(AbstractBeanFactory.java:430)         at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveExtendedEntityManager(PersistenceAnnotationBeanPostProcessor.java:689)         at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:629)         at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:150)         at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)         at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:339)         ... 32 more ```    ---  **Affects:** 3.1 RC1  **Attachments:** - [spring-bug.zip](https://jira.spring.io/secure/attachment/19105/spring-bug.zip) (_17.38 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/592e3441915ec8d59e2a4378bc9e62872fef343c, https://github.com/spring-projects/spring-framework/commit/8fb7b694dd5d0d8fd45c48ebfe37fb1dcef16d15, https://github.com/spring-projects/spring-framework/commit/388561df619470f326761a21efa4087be475297f, https://github.com/spring-projects/spring-framework/commit/e48c315ad13aa06ef6eeb6112df5fbb37de71ded  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1), [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2011-11-09T12:44:04Z","2014-09-04T01:31:46Z"
"","13453","Add convenient DefaultPersistenceUnitPostProcessor [SPR-8811]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-8811](https://jira.spring.io/browse/SPR-8811?redirect=false)** and commented  It would be convenient if the framework provided a default implementation of PersistenceUnitPostProcessor.  It's boilerplate code.  Implementation included in issue submission.   ---  **Affects:** 2.5.6, 3.0.6, 3.1 RC1  **Attachments:** - [correct.java](https://jira.spring.io/secure/attachment/19033/correct.java) (_5.96 kB_) - [DefaultPersistenceUnitInfoPostProcessor.java](https://jira.spring.io/secure/attachment/19032/DefaultPersistenceUnitInfoPostProcessor.java) (_5.96 kB_) - [DefaultPersistenceUnitInfoPostProcessor.java](https://jira.spring.io/secure/attachment/19031/DefaultPersistenceUnitInfoPostProcessor.java) (_5.92 kB_)","closed","status: bulk-closed,","spring-projects-issues","2011-11-01T13:25:46Z","2019-01-12T02:36:59Z"
"","13401","Spring+Hibernate fails to release connection [SPR-8789]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-8789](https://jira.spring.io/browse/SPR-8789?redirect=false)** and commented  Example attached.  It looks like the combination of Spring+Hibernate is failing to release a connection.  Any ideas why the first test works for all except Spring+Hibernate but the second one works for all?  To run the sample for each ORM, here are the maven commands. Note that you should clean each time because the tests require a new database.  mvn clean test -Ddn=1 mvn clean test -Ddn=2 mvn clean test -Dopenjpa=1 mvn clean test -Dopenjpa=2 mvn clean test Dhib=1","closed","status: bulk-closed,","spring-projects-issues","2011-10-19T14:37:04Z","2019-01-12T02:37:16Z"
"","13429","Make interpretation of spring.profiles.active more tolerant of provided format [SPR-8786]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-8786](https://jira.spring.io/browse/SPR-8786?redirect=false)** and commented  Including an extra comma at the end of the system property ""spring.profiles.active"" causes a Spring to throw, stating that an empty string is not a valid profile name.  Technically speaking, I agree that this is incorrect, but it would be nice if the parsing of that property were a bit more tolerant.  For example, the parser could allow for several reasonable separators (like comma, semicolon, colon, whitespace, etc) and ignore empty profile names.  My use case is from Maven (see -X output below).  As you can see below, due to limitations in Maven, I'm passing ""-Dspring.profiles.active=dn,derby,"" (note trailing comma) to my tests.  This causes Spring to throw with the message ""java.lang.IllegalArgumentException: Invalid profile []: must contain text"".  Please enhance the parsing of the spring.profiles.active system property be more tolerant of its input format, allowing for a designated set of delimiters (possibly user-configured?), and ignoring empty profile names (or allow the user to configure whether empty names are to be ignored).  [DEBUG] Configuring mojo 'org.apache.maven.plugins:maven-surefire-plugin:2.4.3:test' --> [DEBUG]   (f) argLine = -Dspring.profiles.active=dn,derby, ... [DEBUG]   - end configuration -- [INFO] [surefire:test {execution: default-test}] ... [DEBUG] Setting system property [user.dir]=[C:\Perforce\p4serv1.online.ea.com_1999\matthewadams_win7\nucleus\SANDBOX\madams\nextgen\shard-test-example] [DEBUG] Setting system property [localRepository]=[C:\Users\madams\.m2\repository] [DEBUG] Setting system property [basedir]=[C:\Perforce\p4serv1.online.ea.com_1999\matthewadams_win7\nucleus\SANDBOX\madams\nextgen\shard-test-example] [DEBUG] Using JVM: C:\dev\jdks\current\jre\bin\java ...  ---  T E S T S  ---  Running org.example.shard.test.OrderPersistenceTests ... 2011-10-18 09:19:41,827 ERROR [org.springframework.test.context.TestContextManager] -  java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:157) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:290) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127) at org.apache.maven.surefire.Surefire.run(Surefire.java:177) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009) Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Failed to import bean definitions from URL location [classpath:/META-INF/spring/*.xml] Offending resource: class path resource [org/example/shard/test/test-context.xml]; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from file [C:\Perforce\p4serv1.online.ea.com_1999\matthewadams_win7\nucleus\SANDBOX\madams\nextgen\shard-test-example\target\classes\META-INF\spring\dataSource-context.xml]; nested exception is java.lang.IllegalArgumentException: Invalid profile []: must contain text at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:76) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:245) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:196) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:181) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:111) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:243) at org.springframework.test.context.support.AbstractGenericContextLoader.loadBeanDefinitions(AbstractGenericContextLoader.java:205) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:100) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) at org.springframework.test.context.support.DelegatingSmartContextLoader.loadContext(DelegatingSmartContextLoader.java:228) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:124) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:148) ... 29 more Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from file [C:\Perforce\p4serv1.online.ea.com_1999\matthewadams_win7\nucleus\SANDBOX\madams\nextgen\shard-test-example\target\classes\META-INF\spring\dataSource-context.xml]; nested exception is java.lang.IllegalArgumentException: Invalid profile []: must contain text at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:412) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:239) ... 47 more Caused by: java.lang.IllegalArgumentException: Invalid profile []: must contain text at org.springframework.util.Assert.hasText(Assert.java:162) at org.springframework.core.env.AbstractEnvironment.validateProfile(AbstractEnvironment.java:279) at org.springframework.core.env.AbstractEnvironment.addActiveProfile(AbstractEnvironment.java:207) at org.springframework.core.env.AbstractEnvironment.setActiveProfiles(AbstractEnvironment.java:202) at org.springframework.core.env.AbstractEnvironment.doGetActiveProfiles(AbstractEnvironment.java:192) at org.springframework.core.env.AbstractEnvironment.acceptsProfiles(AbstractEnvironment.java:256) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:125) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:206) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:181) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:111) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) ... 52 more 2011-10-18 09:19:41,841 INFO [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] -  2011-10-18 09:19:41,875 INFO [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] -  2011-10-18 09:19:41,896 INFO [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] -  2011-10-18 09:19:41,930 ERROR [org.springframework.test.context.TestContextManager] -  java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:157) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:290) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127) at org.apache.maven.surefire.Surefire.run(Surefire.java:177) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009) Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Failed to import bean definitions from URL location [classpath:/META-INF/spring/*.xml] Offending resource: class path resource [org/example/shard/test/test-context.xml]; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from file [C:\Perforce\p4serv1.online.ea.com_1999\matthewadams_win7\nucleus\SANDBOX\madams\nextgen\shard-test-example\target\classes\META-INF\spring\dataSource-context.xml]; nested exception is java.lang.IllegalArgumentException: Invalid profile []: must contain text at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:76) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:245) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:196) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:181) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:111) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:243) at org.springframework.test.context.support.AbstractGenericContextLoader.loadBeanDefinitions(AbstractGenericContextLoader.java:205) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:100) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) at org.springframework.test.context.support.DelegatingSmartContextLoader.loadContext(DelegatingSmartContextLoader.java:228) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:124) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:148) ... 29 more Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from file [C:\Perforce\p4serv1.online.ea.com_1999\matthewadams_win7\nucleus\SANDBOX\madams\nextgen\shard-test-example\target\classes\META-INF\spring\dataSource-context.xml]; nested exception is java.lang.IllegalArgumentException: Invalid profile []: must contain text at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:412) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:239) ... 47 more Caused by: java.lang.IllegalArgumentException: Invalid profile []: must contain text at org.springframework.util.Assert.hasText(Assert.java:162) at org.springframework.core.env.AbstractEnvironment.validateProfile(AbstractEnvironment.java:279) at org.springframework.core.env.AbstractEnvironment.addActiveProfile(AbstractEnvironment.java:207) at org.springframework.core.env.AbstractEnvironment.setActiveProfiles(AbstractEnvironment.java:202) at org.springframework.core.env.AbstractEnvironment.doGetActiveProfiles(AbstractEnvironment.java:192) at org.springframework.core.env.AbstractEnvironment.acceptsProfiles(AbstractEnvironment.java:256) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:125) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:206) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:181) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:111) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) ... 52 more  ---  **Affects:** 3.1 RC1","closed","type: enhancement,","spring-projects-issues","2011-10-18T07:37:00Z","2019-01-13T21:41:42Z"
"","13420","Don't require bean classes to be available when current profile is inactive [SPR-8777]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-8777](https://jira.spring.io/browse/SPR-8777?redirect=false)** and commented  When using bean profiles, all classes of all beans must be available whether or not the bean is activated as a result of the activation of the profile that it belongs to.  I discovered this by using a Maven profile to build a sample project that includes dependencies based on Maven profile(s).  In my case, I'm switching between DataNucleus & Hibernate at build and test time.  When the Maven profile for DataNucleus is activated, the DataNucleus dependencies are included; the Maven profile for Hibernate, the Hibernate dependencies.  In my application context config, I have a bean for a Hibernate & DataNucleus EMF:                                                                                                                                   hibernate.dialect=org.hibernate.dialect.MySQL5Dialect                     hibernate.connection.pool_size=0                     hibernate.temp.use_jdbc_metadata_defaults=false                     hibernate.hbm2ddl.auto=none                                                                                                                       datanucleus.jpa.addClassTransformer=false                     datanucleus.autoCreateSchema=false                     datanucleus.storeManagerType=rdbms                     datanucleus.rdbms.datastoreAdapterClassName=org.datanucleus.store.rdbms.adapter.MySQLAdapter                     datanucleus.rdbms.checkExistTablesOrViews=false                     datanucleus.rdbms.omitDatabaseMetaDataGetColumns=true                                              Problem is, when the ""dn"" profile is active, the container throws an exception because the Hibernate dependencies are not available:  Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/hibernate/ejb/HibernatePersistence  If this profile is not activated, why should the bean classes mentioned in it need to be available?   ---  **Affects:** 3.1 RC1","closed","in: core,","spring-projects-issues","2011-10-14T10:13:44Z","2019-01-11T14:06:23Z"
"","13297","Support JDO 3.x [SPR-8655]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-8655](https://jira.spring.io/browse/SPR-8655?redirect=false)** and commented  We're trying to use DataNucleus 3.0.1 w/JPA, which requires JDO >= 3.0, in a Virgo-3.0 OSGi environment and identified that the Spring ORM bundle specifies an ""Import-Template"" entry of ""javax.jdo.*;version=""[2.0.0, 3.0.0)"";resolution:=optional,"".  JDO 3.x, after my own cursory review, is a backward-binary-compatible release with JDO 2.x.  The maven artifactId has changed to ""jdo-api"", though.  Attached is a patch relative to trunk\org.springframework.orm that updates the pom & OSGi manifest to include anything up to but not including JDO 4.0.0.  Note that this is true whether or not you're using DataNucleus's JPA or JDO API.  I don't really expect this to be fixed in the 3.0 branch, although it would be nice.  Minimal fix would have to be in the trunk.  ---  **Affects:** 3.0.6, 3.1 M2  **Attachments:** - [jdo3.patch](https://jira.spring.io/secure/attachment/18694/jdo3.patch) (_1.04 kB_)  **Sub-tasks:** - #13309 Update spring-orm template.mf to be inclusive of javax.jdo 3.0 - #13310 Test against jdo-api 3.0  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-08-30T13:10:37Z","2019-01-11T14:20:27Z"
"","12948","Add abstract checkJpaDaoConfig() method to JpaDaoSupport class [SPR-8300]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-8300](https://jira.spring.io/browse/SPR-8300?redirect=false)** and commented  The Spring JpaDaoSupport class marks its checkDaoConfig() method as final, without giving subclasses a chance to do the same.  If JpaDaoSupport is going to make checkDaoConfig() final, then it should define an abstract method checkJpaDaoConfig() that gets called in its checkDaoConfig() method.  See attached.  `@Override` protected final void checkDaoConfig() {      checkJpaDaoConfig();          if (this.jpaTemplate == null) {     	throw new IllegalArgumentException(""entityManagerFactory or jpaTemplate is required"");     }  }    ---  **Affects:** 3.0.5  **Attachments:** - [JpaDaoSupport.java](https://jira.spring.io/secure/attachment/18118/JpaDaoSupport.java) (_4.51 kB_)","closed","in: core,","spring-projects-issues","2011-05-06T07:17:00Z","2019-01-12T05:30:24Z"
"","13515","Support by-type lookup/injection of primitive types [SPR-8874]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-8874](https://jira.spring.io/browse/SPR-8874?redirect=false)** and commented  You cannot inject a primitive boolean value because Spring complains that it is not of the required type java.lang.Boolean.  Changing the declarations to Boolean does work as expected.  Class requiring depending injection example declaration:      @Resource     protected boolean failOnErrors;  Spring Java configuration example:      /**      * Specifies the behavior components should have when a recoverable error      * occurs. If failOnErrors is true, an exception should be thrown when an      * error is encountered. If the failOnErrors property is set to false, a      * WARNing or ERROR should be logged instead.      */     @Bean     public boolean failOnErrors() {     	return true;     }  Stack trace attached.   ---  **Attachments:** - [error.txt](https://jira.spring.io/secure/attachment/19143/error.txt) (_3.04 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0113ea91a3ba17dadab7d6321feb0dcf2d31ba99","closed","type: enhancement,","spring-projects-issues","2011-11-24T07:23:57Z","2012-06-19T03:39:54Z"
"","13680","Getting and Setting Config Locations in ConfigurableApplicationContext  requires knowledge of the implementation classes. [SPR-9070]","**[matthew inger](https://jira.spring.io/secure/ViewProfile.jspa?name=mattinger)** opened **[SPR-9070](https://jira.spring.io/browse/SPR-9070?redirect=false)** and commented  Currently, there's no way to reliably get or set the config locations from a ConfigurableApplicationContext object.  You have to deal with specific implementations like AbstractXmlApplicationContext or ConfigurableWebApplicationContext.  This comes about because I need to  create an ApplicationContextInitializer which is capable of adding context files under certain conditions.  However, there's no reliable way to get the existing config locations so that I can append to the array and call the ""setConfigLocations"" methods.  In particular, the getter and setter are availble for web contexts, but the getter is protected for AbstractXmlApplicationContext.  It would be ideal if there were come subinterface of ConfigurableApplicationContext which defined these methods, as well as a simple ""addConfigLocation"" method.  For the time being it seems that the Initializer functionality is relatively limited to activating profiles.   ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-01-30T09:58:31Z","2018-12-27T11:44:33Z"
"","13683","PropertiesLoaderSupport no longer works with XML-formatted property files when they're loaded as a FileSystemResource.  [SPR-9043]","**[matt](https://jira.spring.io/secure/ViewProfile.jspa?name=matthoffman)** opened **[SPR-9043](https://jira.spring.io/browse/SPR-9043?redirect=false)** and commented  In Spring 3.0.6, when detecting whether a property file was a Java 5 xml-formatted property file, the code looked like this:  ```  String filename = null; try { 	filename = location.getFilename(); } catch (IllegalStateException ex) { 	// resource is not file-based. See SPR-7552. }  if (filename != null && filename.endsWith(XML_FILE_EXTENSION)) { 	this.propertiesPersister.loadFromXml(props, is); } ```  In Spring 3.1, that code looks like this:  ``` String filename = (location instanceof AbstractFileResolvingResource) ? 		location.getFilename() : null; if (filename != null && filename.endsWith(XML_FILE_EXTENSION)) { 	this.propertiesPersister.loadFromXml(props, is); } ```  The problem is, FileSystemResource doesn't extend AbstractFileResolvingResource.  So if an xml-formatted properties file is loaded as a FileSystemResource, it will not be loaded properly.   I don't know if the right answer is to make FileSystemResource extend AbstractFileResolvingResource (which seems to make sense) or to change the ""location instanceof AbstractFileResolvingResource"" above to catch both cases -- AbstractFileResolvingResource or FileSystemResource.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57851de88e84006afc104c4f22eb2fbaf2e0d3d1, https://github.com/spring-projects/spring-framework/commit/1d9d3e6ff79ce9f0eca03b02cd1df705925575da  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2012-01-20T15:08:00Z","2012-06-19T03:39:27Z"
"","13167","@Entity objects are not enhanced by the load time weaver in certain situations [SPR-8523]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=attack7)** opened **[SPR-8523](https://jira.spring.io/browse/SPR-8523?redirect=false)** and commented  I've boiled down a confusing situation into a reproducible odd behavior in the attached example application.  In an OpenJPA-supported application when there are two classes (an abstract parent and a concrete child) that are both marked with `@Entity`, the classes are not enhanced when an autowired `@Repository` DAO is called from a unit test.  The DAO contains an inserted `@PersistenceContext` to get access to the EntityManager.  If the call to the dao is commented out, the classes are enhanced as they should be.  Using spring-instrument-3.1.M2.jar on a -javaagent line.  Notes: * Run a mvn package with the dao call commented out and not commented out in the test class  * Observe the difference in openjpa reporting the enhancement of classes vs. not enhancing them  * It doesn't matter if you use a persistence.xml file or the new packagesToScan option in LocalContainerEntityManagerFactoryBean  ---  **Affects:** 3.1 M2  **Attachments:** - [jpa-example.zip](https://jira.spring.io/secure/attachment/18469/jpa-example.zip) (_6.77 kB_)  **Issue Links:** - #13148 `@Configurable` does not work if method with configured classes as parameter exists - #14490 LoadTimeWeaving not working properly in Websphere  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2011-07-11T10:14:48Z","2019-01-13T07:08:26Z"
"","13422","FlashMap matching logic fails when URL is rewritten [SPR-8779]","**[Matt Veitas](https://jira.spring.io/secure/ViewProfile.jspa?name=mveitas)** opened **[SPR-8779](https://jira.spring.io/browse/SPR-8779?redirect=false)** and commented  I recently had to extends the RedirectView for a case where I did not want to set any of the requestPath and requestParam details on the flash map as the values in the flash map where not being picked due to the check in the DefaultFlashMapManager.isFlashMapForRequest method.  Given the renderMergedOutputModel method, can a simple protected method be created that could be overridden to handle the flash map stuff.  ``` /** 	 * Convert model to request parameters and redirect to the given URL. 	 * @see #appendQueryProperties 	 * @see #sendRedirect 	 */ 	@Override 	protected void renderMergedOutputModel( 			Map model, HttpServletRequest request, HttpServletResponse response) 			throws IOException {  		String targetUrl = createTargetUrl(model, request);  		if (getWebApplicationContext() != null) { 			RequestContext requestContext = createRequestContext(request, response, model); 			RequestDataValueProcessor processor = requestContext.getRequestDataValueProcessor(); 			if (processor != null) { 				targetUrl = processor.processUrl(request, targetUrl); 			} 		} 		                 processFlashMap(request); 				 		sendRedirect(request, response, targetUrl.toString(), this.http10Compatible); 	}  /** * ADD THIS METHOD */ protected void processFlashMap(HttpServletRequest request) {                 FlashMap flashMap = RequestContextUtils.getOutputFlashMap(request); 		if (!CollectionUtils.isEmpty(flashMap)) { 			UriComponents uriComponents = UriComponentsBuilder.fromUriString(targetUrl).build(); 			flashMap.setTargetRequestPath(uriComponents.getPath()); 			flashMap.addTargetRequestParams(uriComponents.getQueryParams()); 		} } ```    ---  **Affects:** 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e6920a59fade8ea74710bf806ec8ae6e40999b1e","closed","type: task,","spring-projects-issues","2011-10-16T09:54:42Z","2012-06-19T03:39:38Z"
"","12966","XmlBeanDefinitionReader runs 10x slower due to resetBeanDefinition check [SPR-8318]","**[Matt McQuarrie](https://jira.spring.io/secure/ViewProfile.jspa?name=mattmcq)** opened **[SPR-8318](https://jira.spring.io/browse/SPR-8318?redirect=false)** and commented  When trying to load 700+ beans using: org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions  it takes over 5 min using the 2.5.3 (or 3.0.5) library, but only 24 sec using the 2.0.4 library. This seems to only occur on the AIX JVM.  Please see the attached zip with example scripts loadbeans256.sh and loadbeans204.sh  We have also tested with spring 3.0.5 and the results are similar to 2.5.6.  Thanks for your help with this. This is the first time I've filed a defect so please let me know if I'm missing anything.  - Matt    ---  **Affects:** 2.5.6, 3.0.5  **Attachments:** - [DefaultListableBeanFactory.java.diff](https://jira.spring.io/secure/attachment/18236/DefaultListableBeanFactory.java.diff) (_2.78 kB_) - [LoadBeansExample.zip](https://jira.spring.io/secure/attachment/18134/LoadBeansExample.zip) (_8.46 MB_) - [LoadBeansExamplePatched.zip](https://jira.spring.io/secure/attachment/22110/LoadBeansExamplePatched.zip) (_9.91 MB_) - [Spring XML Parsing.png](https://jira.spring.io/secure/attachment/18235/Spring+XML+Parsing.png) (_55.75 kB_)  **Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-09T11:42:38Z","2014-07-18T10:16:28Z"
"","13484","Misplaced ""foo bar"" in Reference Documentation under ""Classpath scanning and managed components"" [SPR-8842]","**[Mats-Ola Persson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsola.persson@gmail.com)** opened **[SPR-8842](https://jira.spring.io/browse/SPR-8842?redirect=false)** and commented  I'm learning spring and while reading the reference documentation and I found a misplaced ""foo bar"" in the beginning of section ""Classpath scanning and managed components"" (source: spring-framework-reference/src/beans-classpath-scanning.xml).  The ""foo bar"" was introduced between 3.0.4 and 3.0.5  I have added a patch that removes the ""foo bar"".  Might be that the ""foo bar"" is a don't-forget-marker?   ---  **Affects:** 3.0.5, 3.0.6, 3.1 M1, 3.1 M2, 3.1 RC1  **Attachments:** - [foobar.patch](https://jira.spring.io/secure/attachment/19113/foobar.patch) (_688 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1d5ca80924df154fd51fe9492f66e04a17958382","closed","in: core,","spring-projects-issues","2011-11-13T12:06:50Z","2012-06-19T03:39:37Z"
"","13564","NullPointerException in org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.(LocalSessionFactoryBuilder.java:101) [SPR-8924]","**[Mat Banik](https://jira.spring.io/secure/ViewProfile.jspa?name=momatej)** opened **[SPR-8924](https://jira.spring.io/browse/SPR-8924?redirect=false)** and commented  The following exception is thrown during application context start up. I even tried it with the spring-orm-3.1.0.BUILD-20111214.083151-467.jar file to see if it was fixed but no luck.  Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'loadableIdConverter' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot resolve reference to bean 'adminApplicationService' while setting bean property 'adminApplicationService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'adminApplicationService' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot resolve reference to bean 'adminApplicationDAO' while setting bean property 'adminApplicationDAO'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'adminApplicationDAO' defined in ServletContext resource [/WEB-INF/applicationContext-hibernate.xml]: Cannot resolve reference to bean 'sessionFactory' while setting bean property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in ServletContext resource [/WEB-INF/applicationContext-hibernate.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1349) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1107) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:516) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:381) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4723) at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5226) at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5221) at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source) at java.util.concurrent.FutureTask.run(Unknown Source) at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) at java.lang.Thread.run(Unknown Source) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'adminApplicationService' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot resolve reference to bean 'adminApplicationDAO' while setting bean property 'adminApplicationDAO'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'adminApplicationDAO' defined in ServletContext resource [/WEB-INF/applicationContext-hibernate.xml]: Cannot resolve reference to bean 'sessionFactory' while setting bean property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in ServletContext resource [/WEB-INF/applicationContext-hibernate.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1349) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1107) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:516) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) ... 23 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'adminApplicationDAO' defined in ServletContext resource [/WEB-INF/applicationContext-hibernate.xml]: Cannot resolve reference to bean 'sessionFactory' while setting bean property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in ServletContext resource [/WEB-INF/applicationContext-hibernate.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1349) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1107) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:516) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) ... 33 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in ServletContext resource [/WEB-INF/applicationContext-hibernate.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1444) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:518) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) ... 43 more Caused by: java.lang.NullPointerException at java.util.Hashtable.put(Unknown Source) at org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.\(LocalSessionFactoryBuilder.java:101) at org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:244) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1503) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1441) ... 50 more   ---  **Affects:** 3.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09ac195f0ce6b99b02ada2ea122a6e7bc45d50b0, https://github.com/spring-projects/spring-framework/commit/e2f4332c49db6c0357b66c44bed0eb4aaa7357d2","closed","in: core,","spring-projects-issues","2011-12-14T09:08:24Z","2012-06-19T03:39:42Z"
"","13549","HibernateTransactionManager.doBegin() is trowing NullPointerException without additional clarification [SPR-8909]","**[Mat Banik](https://jira.spring.io/secure/ViewProfile.jspa?name=momatej)** opened **[SPR-8909](https://jira.spring.io/browse/SPR-8909?redirect=false)** and commented  After following line in doBegin method session = txObject.getSessionHolder().getSession(); There is not check if session is null and it does not suggest to the user what to correct if it is.   ---  **Affects:** 3.1 RC2  **Reference URL:** http://forum.springsource.org/showthread.php?119982-Could-not-open-Hibernate-Session-for-transaction-nested-exception-is-NPE&p=392999#post392999  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2fa9ef9f5ad08508adacea01bdec7e1309705af6","closed","type: enhancement,","spring-projects-issues","2011-12-11T19:03:06Z","2012-06-19T03:39:26Z"
"","13548","org.springframework.orm.hibernate4.HibernateTransactionManager fails with NoSuchMethodError against SessionFactory.getCurrentSession() [SPR-8908]","**[Mat Banik](https://jira.spring.io/secure/ViewProfile.jspa?name=momatej)** opened **[SPR-8908](https://jira.spring.io/browse/SPR-8908?redirect=false)** and commented  During transaction management following exception is thrown:  java.lang.NoSuchMethodError: org.hibernate.SessionFactory.getCurrentSession()Lorg/hibernate/classic/Session; at org.springframework.orm.hibernate4.HibernateTransactionManager.doGetTransaction(HibernateTransactionManager.java:284) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:335) at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:335) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:105) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:622) at com.iteezy.server.service.impl.UserServiceImpl$$EnhancerByCGLIB$$fe213902.getCurrentUser(\) at com.iteezy.server.web.servlet.ErrorServlet.doGet(ErrorServlet.java:40) at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:59) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:473) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:402) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:329) at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:455) at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:399) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:191) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:964) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302) at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) at java.lang.Thread.run(Unknown Source)  ---  **Affects:** 3.1 RC2  **Reference URL:** http://forum.springsource.org/showthread.php?119953-hibernate4-No-Session-found-for-current-thread&p=392891#post392891  **Issue Links:** - #13419  java.lang.NoSuchMethodError: org.hibernate.SessionFactory.openSession()Lorg/hibernate/classic/Session; - #13659 Hibernate4 version of SpringSessionContext.currentSession() does not create a session if TransactionSynchronizationManager does not contain one","closed","type: bug,","spring-projects-issues","2011-12-10T08:23:23Z","2019-01-11T14:28:36Z"
"","13673","TagTransform does not refresh page context in a  loop [SPR-9034]","**[martino](https://jira.spring.io/secure/ViewProfile.jspa?name=eden91940)** opened **[SPR-9034](https://jira.spring.io/browse/SPR-9034?redirect=false)** and commented  The binding and transform tag is KO for a TagTransform in a foreach loop, with a NULL last value to bind l. Actually the pageContext is not refreshed, the method doStartTagInternal needs to be rewritten maybe as :  ``` 	@Override 	protected final int doStartTagInternal() throws JspException { 		Object resolvedValue = this.value; 		if (this.value instanceof String) { 			String strValue = (String) this.value; 			resolvedValue = ExpressionEvaluationUtils.evaluate(""value"", strValue, pageContext); 		}  		if (resolvedValue != null) { 			// Find the containing EditorAwareTag (e.g. BindTag), if applicable. 			EditorAwareTag tag = (EditorAwareTag) TagSupport.findAncestorWithClass(this, EditorAwareTag.class); 			if (tag == null) { 				throw new JspException(""TransformTag can only be used within EditorAwareTag (e.g. BindTag)""); 			}  			// OK, let's obtain the editor... 			String result = null; 			PropertyEditor editor = tag.getEditor(); 			if (editor != null) { 				// If an editor was found, edit the value. 				editor.setValue(resolvedValue); 				result = editor.getAsText(); 			} 			else { 				// Else, just do a toString. 				result = resolvedValue.toString(); 			} 			result = isHtmlEscape() ? HtmlUtils.htmlEscape(result) : result; 			String resolvedVar = ExpressionEvaluationUtils.evaluateString(""var"", this.var, pageContext); 			if (resolvedVar != null) { 				String resolvedScope = ExpressionEvaluationUtils.evaluateString(""scope"", this.scope, pageContext); 				pageContext.setAttribute(resolvedVar, result, TagUtils.getScope(resolvedScope)); 			} 			else { 				try { 					// Else, just print it out. 					pageContext.getOut().print(result); 				} 				catch (IOException ex) { 					throw new JspException(ex); 				} 			} 		} 		else { 			String resolvedVar = ExpressionEvaluationUtils.evaluateString(""var"", this.var, pageContext); 			if (resolvedVar != null) { 				pageContext.removeAttribute(resolvedVar, TagUtils.getScope(resolvedScope)); 			} 		 }  		return SKIP_BODY; 	} ```    ---  **Affects:** 3.0.5","closed","in: web,","spring-projects-issues","2012-01-18T07:13:19Z","2019-01-11T22:21:33Z"
"","13770","Multiple PropertySource fails to use System property [SPR-9131]","**[Martin Vanek](https://jira.spring.io/secure/ViewProfile.jspa?name=anthavio)** opened **[SPR-9131](https://jira.spring.io/browse/SPR-9131?redirect=false)** and commented  `@PropertySource`( { ""${sdmt_update_config:client_update.properties}"", // ""${sdmt_client_config:sdmt_client.properties}""// }) JVM started with -Dsdmt_client_config=client_mava.properties -Dsdmt_update_config=client_update.properties 3.1.0 works and is able to pick up us system property or use default values 3.1.1 fails Caused by: java.io.FileNotFoundException: class path resource [${sdmt_client_config:sdmt_client.properties}] cannot be opened because it does not exist at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:158) at org.springframework.core.io.support.ResourcePropertySource.loadPropertiesForResource(ResourcePropertySource.java:101) at org.springframework.core.io.support.ResourcePropertySource.\(ResourcePropertySource.java:43) at org.springframework.core.io.support.ResourcePropertySource.\(ResourcePropertySource.java:52) at org.springframework.core.io.support.ResourcePropertySource.\(ResourcePropertySource.java:82) at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:193) at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:149) at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:135) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:260)  I see something very smelly in ConfigurationClassParser.doProcessConfigurationClass  for (int i = 0; i < nLocations; i++) { locations[0] = this.environment.resolveRequiredPlaceholders(locations[0]); }  ---  **Affects:** 3.1.1  **Issue Links:** - #13772 Fix regression in `@PropertySource` placeholder resolution (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-02-17T07:38:58Z","2019-01-13T07:06:14Z"
"","13640","Add abstract=""true"" concept from xml configuration into code configuration [SPR-9000]","**[Martin Vanek](https://jira.spring.io/secure/ViewProfile.jspa?name=anthavio)** opened **[SPR-9000](https://jira.spring.io/browse/SPR-9000?redirect=false)** and commented  In xml configuration I often use bean with parent=""true"" to set default values in parent context and multiple nonabstract beans in several child contexts with mandatory but always different dependency. Because abstract bean concept is missing in `@Bean` code configuration this leads to lots of duplication  For example I have abstract LocalContainerEntityManagerFactoryBean bean in parent ""platform"" context preconfigured with jpaVendorAdapter and jpaPropertyMap, but dataSource is specified in child ""dbmodel"" context   ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-01-06T01:44:05Z","2012-02-14T01:33:10Z"
"","13627","JSR-303 validation no easy way to include the field name as message argument [SPR-8987]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-8987](https://jira.spring.io/browse/SPR-8987?redirect=false)** and commented  When implementing a custom validator it is quite easy to pass in the field name as a message argument so that one can use it to render a message ({0} is required). However there is no easy way of doing this when using the JSR-303 annotations. It would be nice if this was possible.   ---  **Affects:** 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2012-01-03T22:56:33Z","2019-01-12T02:36:12Z"
"","13624","Make the ConfigurableWebBindingInitializer easy to customize in WebMvcConfigurationSupport [SPR-8984]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-8984](https://jira.spring.io/browse/SPR-8984?redirect=false)** and commented  When we want to customize binding and want to do it on the global scale by using a WebBindingInitializer we are overriding the one already set on the RequestMappingHandlerAdapter when extending WebMvcConfigurationSupport. It would be nice if the internally used ConfigurableWebBindingInitializer would be a top-level bean so that we could append some configuration options (like direct field access, message code resolver etc. now we need to do a full reconfiguration).   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/826057bcdea8bfe5984c7c4df2b3faff35dcae52","closed","type: enhancement,","spring-projects-issues","2012-01-03T05:10:08Z","2019-01-11T14:29:01Z"
"","13616","Add FlashAttributes to Model for view controllers [SPR-8976]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-8976](https://jira.spring.io/browse/SPR-8976?redirect=false)** and commented  Currently in an application I'm developing we are using flash attributes, which work quite nicely. However it would be nice if we could have the flash attributes as model attributes for view controllers also. Now for each page that needs to have access to the flash attributes we need an annotated controller. Now it would be nice if we wouldn't need to write this code anymore and could simply declare a view controller in our `@Configuration` class.f  [code] `@Controller` public class OrderController {  `@RequestMapping`(""/order-success.htm""); public String success() { return ""success""; }  } [code]   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0c735feaedaca6b0dddca37193dd5ddd1e6c3e0","closed","type: enhancement,","spring-projects-issues","2011-12-30T03:58:40Z","2012-06-19T03:39:42Z"
"","13364","Automatically register StandardServletMultipartResolver when multipart enabled [SPR-8722]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-8722](https://jira.spring.io/browse/SPR-8722?redirect=false)** and commented  It would be nice if `@EnableWebMvc` could detect the fact that the multipart handling of the Servlet 3.0 spec is available and enabled and if it is the case (and no explicit MultipartResolver is present) register a StandardServletMultipartResolver automatically.   ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-09-24T03:22:52Z","2011-11-22T16:10:26Z"
"","13363","DispatcherServlet defaults and @EnableWebMvc have different defaults [SPR-8721]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-8721](https://jira.spring.io/browse/SPR-8721?redirect=false)** and commented  It might be deliberate but whilst writing up the defaults for the DispatcherServlet and `@EnableWebMvc` I noticed at least a difference in the handler mapping and handler adapters. The DispatcherServlet uses the DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter and `@EnableWebMvc` used the RequestMappingHandlerMapping and RequestMappingHandlerAdapter respectively.  There are also differences in the default HandlerExceptionResolvers.  Not sure if it is intended that way but just wanted to point this differences out.   ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-09-24T03:14:12Z","2011-10-10T01:28:32Z"
"","13322","AbstractSingletonProxyFactoryBean is deprecated [SPR-8680]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-8680](https://jira.spring.io/browse/SPR-8680?redirect=false)** and commented  According to the javadocs of the AbstractSingletonProxyFactoryBean it has been deprecated  ---  * `@deprecated` as of Spring 3.1 following the deprecation of its only implementation * ({`@link` org.springframework.transaction.interceptor.TransactionProxyFactoryBean * TransactionProxyFactoryBean}) and generally in favor of providing such functionality * via Spring XML namespaces, e.g. {`@code` tx:} or {`@code` `@Enable`}* annotations, e.g. *   {`@code` `@EnableTransactionManagement`}.  ---  However there is another implementation CacheProxyFactoryBean which uses this bean. So not sure if either the javadoc is valid or the deprecation at all...  ---  **Affects:** 3.1 M2  **Issue Links:** - #13327 Deprecate AbstractSingletonProxyFactoryBean and subclasses  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1819bee35fcf7c00a48ba37010ebfb7c240b5403","closed","in: core,","spring-projects-issues","2011-09-11T23:08:23Z","2019-01-13T07:07:57Z"
"","13617","mvc:resources uses ServletContextResource for classpath locations [SPR-8977]","**[Marshall Cody McCain](https://jira.spring.io/secure/ViewProfile.jspa?name=marshallmccain)** opened **[SPR-8977](https://jira.spring.io/browse/SPR-8977?redirect=false)** and commented  When using an  declaration with a locations attribute that includes a classpath element (such as the second XML example in section 16.14.5 of the documentation), Spring converts the string with the classpath element into a ServletContextResource, which does not understand the classpath element, prefixes it with a /, and returns 404 for any requests for resources inside embedded jars.  The following declaration: '' correctly returns files located in the containing application's /resources directory, but requests for files in jars fail as follows:  2011-12-31 00:57:40,834 [btpool0-0] DEBUG org.springframework.web.servlet.resource.ResourceHttpRequestHandler - Trying relative path [test.txt] against base location: ServletContext resource [/resources/] 2011-12-31 00:57:40,834 [btpool0-0] DEBUG org.springframework.web.servlet.resource.ResourceHttpRequestHandler - Trying relative path [test.txt] against base location: ServletContext resource [/classpath*:/WEB-INF/public-web-resources/]  It appears that the property converter should be turning the second location into a ClassPathResource instead of a ServletContextResource.   ---  **Affects:** 3.0.7","closed","in: web,","spring-projects-issues","2011-12-30T23:06:43Z","2019-01-11T14:30:39Z"
"","13745","Reading raw request body into String variable fails [SPR-9107]","**[Markus Wolf](https://jira.spring.io/secure/ViewProfile.jspa?name=knisterpeter)** opened **[SPR-9107](https://jira.spring.io/browse/SPR-9107?redirect=false)** and commented  Before Spring 3.1 it was possible to annotate a method parameter of type String with `@RequestBody` and get the raw http body. Now the behaviour has changed significant. The implementation behind this 'recreates' the body from the getParametersMap(). Therefore POSTing a JSON to the server in a form body fails to get accepted as expected, since there is at least an '=' char added at the end of the parameter. This prevents from parsing this parameter from JSON.  There should be at least tried to read the raw body before an attempt to recreate the whole thing.   ---  **Affects:** 3.1 GA","closed","status: declined,","spring-projects-issues","2012-02-10T08:37:48Z","2019-01-12T16:36:51Z"
"","13723","Incorrect name in documentation for ByteArrayHttpMessageConverter class [SPR-9085]","**[Mark Vedder](https://jira.spring.io/secure/ViewProfile.jspa?name=markv)** opened **[SPR-9085](https://jira.spring.io/browse/SPR-9085?redirect=false)** and commented  The title for section [20.9.2.3](http://static.springsource.org/spring/docs/3.1.x/reference/html/remoting.html#rest-byte-converter) is ByteArrayMessageConverter. The class name however is ByteArrayHttpMessageConverter All the other _20.9.2 HTTP Message Conversion_ subsection titles are the name of the convertor class. And given the section's text does not mention the class name, it takes extra effort to find the correct class as a result of this typo.   ---  **Affects:** 3.0.7, 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e5cc53fc9dc48daeadbda1d2056c791dc83c245","closed","type: bug,","spring-projects-issues","2012-02-01T11:43:10Z","2012-06-19T03:39:55Z"
"","13321","Add advice-chain support for JMS listener containers [SPR-8679]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-8679](https://jira.spring.io/browse/SPR-8679?redirect=false)** and commented  This can be modeled after the same feature in Spring AMQP where a proxy is created around the invokeListener() method.   --- No further details from [SPR-8679](https://jira.spring.io/browse/SPR-8679?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-09-10T15:24:37Z","2016-06-02T12:35:54Z"
"","12909","Support profile / @Profile as implicit autowiring qualifier [SPR-8261]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-8261](https://jira.spring.io/browse/SPR-8261?redirect=false)** and commented  Given two beans of type `Bar`, respectively declared in profiles ""p1"" and ""p2"" and a single bean `Foo` declared in ""p1"" that depends on a bean of type `Bar` via autowiring, if both profiles ""p1"" and ""p2"" are active, an autowiring exception will be thrown indicating that two beans of type `Bar` were available in the container and that the container could not disambiguate between them when trying to satisfy `Foo`'s dependencies.  However, the intent is quite clear in the arrangement above, and the container should be able to recognize that the `Foo` bean declared in profile ""p1"" should be injected with the `Bar` bean declared in ""p1"".  This is what is meant by the issue summary ""support `@Profile`/profile metadata as implicit autowiring qualifier"".   --- No further details from [SPR-8261](https://jira.spring.io/browse/SPR-8261?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-04-19T00:24:47Z","2015-09-22T19:46:31Z"
"","13117","Performance bottleneck and potential thread deadlock in DefaultSingletonBeanRegistry [SPR-8471]","**[Mark Davies](https://jira.spring.io/secure/ViewProfile.jspa?name=harloshmark)** opened **[SPR-8471](https://jira.spring.io/browse/SPR-8471?redirect=false)** and commented  A less significant version of this problem has already been raised under #10033 - a performance bottleneck affecting Wicket. However, the same issue causes a serious thread deadlock in our application, occasionally preventing application startup.  The basic issue seems to be that DefaultSingletonBeanRegistry takes a global synchronization lock when creating a singleton bean. Here is the code in that class:  ``` public Object getSingleton(String beanName, ObjectFactory singletonFactory) {      Assert.notNull(beanName, ""'beanName' must not be null"");      synchronized (this.singletonObjects) {           Object singletonObject = this.singletonObjects.get(beanName);           if (singletonObject == null) {           ... stuff ...                         singletonObject = singletonFactory.getObject();           ... stuff ... } ```  The synchronized block (the same this.singletonObjects reference is used by all threads entering the method) means that Spring can only create singleton beans one at a time, regardless of their type (beanName). This clearly introduces a performance penalty if an application has a large number of singleton beans to construct, e.g. at startup.  That is not the issue affecting our code, though. We see a deadlock, caused by the following two sets of behaviour:  1. We have Spring-managed singleton beans which perform database access in their constructor (basically loading and caching configuration sets from the database). In order to do this they obtain database connections, which are pooled, with relatively small pool sizes. If a pooled connection is not available, the calling thread blocks and waits until one becomes free. This is usually not a problem since queries are small and rapid, so pool wait times are low, and the maximum pool size is sufficient to work the databasea at full capacity anyway.  2. We also have non-Spring code doing database access. Such code obtains a database connection from the same pool, purely for the lifetime of running a query and processing a result set, so again very quick for almost cases in our system. But sometimes, whilst processing the result set, we need to use a Spring-managed bean, which may have singleton scope.  You now have a deadlock - thread number one is trying to get a Spring-managed singleton bean, which is waiting for a JDBC connection in its constructor; thread number two is running database code which has the JDBC connection and is waiting to create a Spring-managed singleton of a completely different type. Both thread own the resource needed by the other, so will wait forever. (OK, if the database pool size is two or higher you need two or more threads in the second state, but this has happened to us in customer environments, in production).  Obviously our application code is almost certainly less than ideal in how we use Spring, but it seems to me that we ought to be able to use Spring-managed beans which do database access in the manner I've described, without encountering unpleasant deadlocks such as this. Note that the problem is actually much more general than this particular example of database connections: if your singleton beans require any kind of global monitor, which is also used outside of the context of Spring, you have a deadlock condition.  Both the originally-reported performance problem, and this deadlock, could be solved by a simple improvement to  DefaultSingletonBeanRegistry. The getSingleton() method should not synchronize on a global monitor, but instead a monitor specific to the beanName you are instantiating. This is the correct level at which to lock - what you are trying to do is prevent a bean of a certain type being created more than once, but allowing two beans of different types to construct at the same time is perfectly reasonable. Of course you have to synchronize access to the underlying collections with a global lock, but the construction of the singleton bean does not need to be protected with the same global monitor. For instance I believe this kind of thing would do it:  ``` public Object getSingleton(String beanName, ObjectFactory singletonFactory) {      Object bean;      Object perBeanMonitor;      synchronized (GLOBAL_MONITOR) {           perBeanMonitor = getPerBeanMonitor(beanName);      }      synchronized (perBeanMonitor) {           synchronized (GLOBAL_MONITOR) {                bean = getBeanFromRegistry(beanName);           }           if (bean==null) {                Object bean = doConstructBean(beanName, singletonFactory);                synchronized (GLOBAL_MONITOR) {                         addToRegistry(beanName, bean);                }           }      }      return bean; } ```  It would be extremely helpful if this approach could be implemented in this core part of the Spring framework. We rely on singleton construction to be performant and thread-safe; the fact that DefaultSingletonBeanRegistry behaves as it currently does is causing us serious production problems at client sites, and, whilst we can modify our application code to work around the issue, I do see this as a fundamental flaw in Spring - would be nice to get a quick fix please.  ---  **Affects:** 2.5.6  **Attachments:** - [test-case.zip](https://jira.spring.io/secure/attachment/19616/test-case.zip) (_3.09 kB_)  **Issue Links:** - #13428 Deadlock during application context creation (_**""is duplicated by""**_) - #14470 A Java Thread deadlock has occured (_**""is duplicated by""**_) - #13837 Deadlock on the beanDefinitionMap and singletonObjects (_**""is duplicated by""**_) - #12374 Deadlock between DefaultListableBeanFactory and DefaultSingletonBeanRegistry, perhaps due to lazily-instantiated aspect - #14452 Non-singleton beans performance issue - #14654 Deadlock in DefaultListableBeanFactory/DefaultSingletonBeanRegistry - #14985 AbstractApplicationEventMulticaster#getApplicationListeners() should have double check for 'this.retrieverCache.get(cacheKey)' within synchronized block  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dd68fecbf2509faa189234807f30bbf364a691f1, https://github.com/spring-projects/spring-framework/commit/52124fa31b17fee7b6ffdfc92ec9fe14ad9a0561  19 votes, 26 watchers","closed","has: votes-jira,","spring-projects-issues","2011-06-20T10:30:35Z","2020-08-31T15:16:19Z"
"","13298","Support for advised MVC controllers [SPR-8656]","**[Marius Bogoevici](https://jira.spring.io/secure/ViewProfile.jspa?name=mbogoevici)** opened **[SPR-8656](https://jira.spring.io/browse/SPR-8656?redirect=false)** and commented  Suppose there is a class  ```java @Controller @RequestMapping(""/foo"") public class FooController{          @RequestMapping(value=""/{id}"", method=RequestMethod.GET) 	public String viewFoo(@PathVariable(""id"") Long id) { 		... 	}  } ```  After applying an advice (e.g. using ), a proxy class instance will be used as a controller. However, the framework will try use information from the proxy class to handle the request, which will result in various errors (e.g. parameter mappings are not available due to the fact that `@PathVariable` is lost, etc).  A suggestion in this case would be to detect that the controller is in fact a proxy and to try to read the metadata from the target class.   ---  **Affects:** 3.1 M2","closed","in: web,","spring-projects-issues","2011-08-30T14:44:19Z","2019-01-12T16:48:40Z"
"","13178","Petclinic example: ORM mapping for JPA leads to a failure when deleting a Pet [SPR-8534]","**[Marius Bogoevici](https://jira.spring.io/secure/ViewProfile.jspa?name=mbogoevici)** opened **[SPR-8534](https://jira.spring.io/browse/SPR-8534?redirect=false)** and commented  Cascading the owner relationship from Pet causes the application to try to remove the Owner when deleting a Pet.   --- No further details from [SPR-8534](https://jira.spring.io/browse/SPR-8534?redirect=false)","closed","status: invalid,","spring-projects-issues","2011-07-14T09:15:31Z","2019-01-12T05:30:05Z"
"","13177","Add support for load time weaving in JBoss AS7 [SPR-8533]","**[Marius Bogoevici](https://jira.spring.io/secure/ViewProfile.jspa?name=mbogoevici)** opened **[SPR-8533](https://jira.spring.io/browse/SPR-8533?redirect=false)** and commented  Extend the functionality of the existing JBossLoadTimeWeaver to support JBoss AS7   ---  **Affects:** 3.1 M2  **Attachments:** - [0001-Add-support-for-JBoss-AS7-LoadTimeWeaver.patch](https://jira.spring.io/secure/attachment/18479/0001-Add-support-for-JBoss-AS7-LoadTimeWeaver.patch) (_23.13 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1d690ab99fde8e24b98c0bfa39520dfeb08df7f5","closed","type: enhancement,","spring-projects-issues","2011-07-14T08:48:46Z","2012-06-19T03:39:46Z"
"","13385","NullPointerException in EL on proxied bean [SPR-8743]","**[Marco Fago](https://jira.spring.io/secure/ViewProfile.jspa?name=marfago)** opened **[SPR-8743](https://jira.spring.io/browse/SPR-8743?redirect=false)** and commented  I'm building up an application using Spring,JSF (Primefaces) and some AOP. Consider the following code snippets:  web.xml:  \  \  \ \contextConfigLocation\ \ classpath:applicationContext.xml classpath:applicationContext-security.xml \ \ \ \ org.springframework.web.context.ContextLoaderListener \ \ \ \ org.springframework.web.context.request.RequestContextListener \ \               org.springframework.security.web.session.HttpSessionEventPublisher       \ \CharacterEncodingFilter\ \ org.springframework.web.filter.CharacterEncodingFilter \ \ \encoding\ \UTF-8\ \ \ \ \CharacterEncodingFilter\ \/*\ \               Spring JPA Filter         org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter                   Spring JPA Filter         /*       \ \springSecurityFilterChain\ \ org.springframework.web.filter.DelegatingFilterProxy \ \ \ \springSecurityFilterChain\ \/*\ \ \ \Faces Servlet\ \javax.faces.webapp.FacesServlet\ \1\ \ \ \Faces Servlet\ \*.jsf\ \ \  application-context.xml: ..... \  \ ......  MyService.java: package xxx.yyy;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Scope; import org.springframework.stereotype.Component;  `@Scope`(""session"") `@Component` public class MyService {  `@Autowired` private MyBeanClass myBean;  static public MyBeanClass initMyBean() { return null; }  public MyBeanClass getMyBean() { return myBean; }  static public class MyBeanClass {  } }  myPage.xhtml:  \     \#{empty myService.myBean}\ \ \ \  The page will always show ""false"" even though the property is null. Further if you try to access the property from the page you will get a NullPointerException. I think the problem is with the ELResolver which does not recognized the proxy bean and tries to handle it and not the target.  If you remove the  from application-context.xml, all works fine.   ---  **Affects:** 3.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/c93479552f599d148e05beb5ac1101ff1607b2c8, https://github.com/spring-projects/spring-framework-issues/commit/3de19229456aca0d0fac3fd83d07af1211c4ae30","closed","in: core,","spring-projects-issues","2011-10-06T05:12:49Z","2019-01-12T16:37:22Z"
"","13281","ProxyFactoryBean may silently fail to apply interceptors in specific @Autowired use cases [SPR-8639]","**[Marcin Lukasiuk](https://jira.spring.io/secure/ViewProfile.jspa?name=marcin.lukasiuk)** opened **[SPR-8639](https://jira.spring.io/browse/SPR-8639?redirect=false)** and commented  Situation: There are tree proxy beans with some Interceptor (a, b, c) defined in xml file. 'c' is injected to 'a' and 'b'  When proxy bean 'c' has injected any dependency through annotation `@Autowired`, then it is loosing interceptor from his advisors. There is no problem when bean 'c' has all dependcies injected in xml file or bean 'c' is injected only to one other proxy bean.  Test case is in attachment.   ---  **Affects:** 2.5.6, 3.0.5, 3.1 M2  **Attachments:** - [bug.tar.gz](https://jira.spring.io/secure/attachment/18599/bug.tar.gz) (_1.58 kB_)  3 votes, 4 watchers","closed","in: core,","spring-projects-issues","2011-08-26T00:51:54Z","2019-01-12T16:37:28Z"
"","13750","Support @MVC methods that can apply to any @Controller [SPR-9112]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9112](https://jira.spring.io/browse/SPR-9112?redirect=false)** and commented  This Spring 3.1 example (https://github.com/rstoyanchev/spring-mvc-31-demo/tree/master/src/main/java/org/springframework/samples/mvc31/exceptionhandler) gives an example how to declare ""global"" exception handlers. I think the ExtendedExceptionHandlerExceptionResolver example class should in some way brought into core mvc, so it would be easier to this.  ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?120466-Handling-Exceptions-As-JSON-Spring-3-1  **Issue Links:** - #13831 ExceptionHandlerExceptionResolver: premature null value check  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c846198e4697f2ac5d79f0f4f62d25fa7d62fa26, https://github.com/spring-projects/spring-framework/commit/e65b930e7ad63b909bd2977bff806322477f8a91, https://github.com/spring-projects/spring-framework/commit/cf147a82ef0c5592041ddfdde3d1340fd47e89aa  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-12T06:23:39Z","2019-01-11T22:11:50Z"
"","13749","3.1.x reference docs mentions RequestBodyNotValidException but should be MethodArgumentNotValidException [SPR-9111]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9111](https://jira.spring.io/browse/SPR-9111?redirect=false)** and commented  The 3.1.x reference docs (http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/pdf/spring-framework-reference.pdf) mentions the RequestBodyNotValidException but this should be MethodArgumentNotValidException.  It should also be added to docs how this works.  E.g.  ```   @RequestMapping(value = ""/create"", method = RequestMethod.POST) public @ResponseBody Customer create(@Valid Customer customer, BindingResult result) { 	if (result.hasErrors()) { 		// .. 	} 	customer.save(); 	return customer; } ```  If the customer method argument is Valid what will happen? Will the MethodArgumentNotValidException be thrown and will the if (result.hasErrors()) block never be reached?  Also take this code from the reference docs which is also identical:  ``` @RequestMapping(value=""/owners/{ownerId}/pets/{petId}/edit"", method = RequestMethod.POST) public String processSubmit(@Valid @ModelAttribute(""pet"") Pet pet, BindingResult result) { 	if (result.hasErrors()) { 		return ""petForm""; 	} 	// ... } ```  It also contains the `@Valid` annotation but also the if (result.hasErrors()) block.  I wonder how this should but can't find it in the docs.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/997c6c56f7e910118ee3956bf2ef198fff853375","closed","type: enhancement,","spring-projects-issues","2012-02-11T01:56:24Z","2012-10-31T11:33:59Z"
"","13658","@EnableSpringConfigured gives BeanFactory has not been set on BeanConfigurerSupport [SPR-9019]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-9019](https://jira.spring.io/browse/SPR-9019?redirect=false)** and commented  I'm facing an issue with AspectJ Dependency Injection when creating objects with the 'new' keyword.  I have 3 Configuration classes: the main AppConfig.java, the web MvcConfig.java and BootStrapConfig.java for doing some data creation.  The AppConfig contains the `@EnableSpringConfigured` annotation to enable dependency injection when creating new domain objects. This class looks like:  ``` @Configuration @ComponentScan(basePackages = ""com.appspot.springaop"") @EnableSpringConfigured public class AppConfig { 	.. } ```  The BootStrapConfig looks like:  ``` @Configuration public class BootStrapConfig { 	 	@Bean 	public BootStrap bootStrap() { 		return new BootStrap(); 	}  	private class BootStrap {  		@PostConstruct 		public void init() { 			// create data by instantiating domain classes with 'new' 			.. 		} 	} } ```  Note that this one does not have the `@EnableSpringConfigured` as I **assume** once (in AppConfig) should be enough.  I'm loading the configuration classes with the following definition in web.xml:  ``` 	 		contextClass 		org.springframework.web.context.support.AnnotationConfigWebApplicationContext 	  	 		contextConfigLocation 		com.appspot.springaop.config 	 ```  When running this code on local (!) Google App Engine the AOP stuff works perfectly as expected. But on the production Google Infrastructure I always noticed inconsistent behavior as the AOP aspects did not seem to work always between deployments. Note that that time I was using dailly development snapshots of Spring 3.1 so I did not give it much attention then as it worked quit often the other day. Also note that I was changing my own JAva config setup because of new features in different 3.1 RC's.  Now after the 3.1 GA locally everything works still fine, but on Google App Engine infrastructure I'm not able to get it working anymore. Spring works fine on it, only the AOP seems to be broken with `@EnableSpringConfigured`.  Note that I also noticed this DEBUG message on the Google App Engine infrastructure:  ``` [s~spring-aop/3.356043308451020324].: 10:39:43,186 DEBUG [org.springframework.beans.factory.wiring.BeanConfigurerSupport] BeanFactory has not been set on BeanConfigurerSupport: Make sure this configurer runs in a Spring container. Unable to configure bean of type [com.appspot.springaop.domain.Book]. Proceeding without injection. ```  Another thing I found out is that when I move the BootStrap `@Bean` definition and inner class from BootStrapConfig to AppConfig it works on Google App Engine infrastructure.  Is there something I'm doing wrong?  Could it maybe the case that on the Configuration classes are processed in different order? E.g. DevelopmentBootStrapConfig before AppConfig which means `@EnableSpringConfigured` was not yet invoked maybe?  I don't know how this internally works...  For reference I'm als posting the full stack trace I received on Google App Engine infrastructure:  ``` I 2012-01-12 11:39:38.123 javax.servlet.ServletContext log: Set web app root system property: 'webapp.root' = [/base/data/home/apps/s~spring-aop/3.356043308451020324]  I 2012-01-12 11:39:38.126 javax.servlet.ServletContext log: Initializing log4j from [classpath:META-INF/log4j.properties]  I 2012-01-12 11:39:38.891 javax.servlet.ServletContext log: Initializing Spring root WebApplicationContext  I 2012-01-12 11:39:42.454 [s~spring-aop/3.356043308451020324].: 10:39:42,454 INFO  [com.appspot.springaop.config.AppConfig] Initializing configuration AppConfig...  I 2012-01-12 11:39:43.186 [s~spring-aop/3.356043308451020324].: 10:39:43,186 DEBUG [org.springframework.beans.factory.wiring.BeanConfigurerSupport] BeanFactory has not been set on BeanConfigurerSupport: Make sure this configurer runs in a Spring container. Unable to configure bean of type [com.appspot.springaop.domain.Book]. Proceeding without injection.  I 2012-01-12 11:39:43.193 [s~spring-aop/3.356043308451020324].: 10:39:43,190 ERROR [org.springframework.web.context.ContextLoader] Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bootStrap': Invocation of init method failed; nested exception is java.lang.IllegalStateException: DatastoreService has not been injected 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:135) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:384) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) 	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548) 	at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) 	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250) 	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517) 	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467) 	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) 	at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.createHandler(AppVersionHandlerMap.java:202) 	at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.getHandler(AppVersionHandlerMap.java:171) 	at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:123) 	at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:422) 	at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:449) 	at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:455) 	at com.google.tracing.TraceContext.runInContext(TraceContext.java:695) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:333) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:325) 	at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:453) 	at com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:251) 	at java.lang.Thread.run(Thread.java:679) Caused by: java.lang.IllegalStateException: DatastoreService has not been injected 	at com.appspot.springaop.domain.Book.datastoreService(Book.java:53) 	at com.appspot.springaop.domain.Book.findByTitle(Book.java:79) 	at com.appspot.springaop.config.BootStrapConfig$BootStrap.findOrCreateBook(BootStrapConfig.java:35) 	at com.appspot.springaop.config.BootStrapConfig$BootStrap.init(BootStrapConfig.java:30) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:43) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:346) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:299) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:132) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:384) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) 	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548) 	at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) 	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250) 	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517) 	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467) 	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) 	at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:449) 	at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:455) 	at com.google.tracing.TraceContext.runInContext(TraceContext.java:695) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:333) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:325) 	at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:453) 	... 1 more  W 2012-01-12 11:39:43.194 Failed startup of context com.google.apphosting.utils.jetty.RuntimeAppEngineWebAppContext@974600{/,/base/data/home/apps/s~spring-aop/3.356043308451020324} org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bootStrap': Invocation of init method failed; nested exception is java.lang.IllegalStateException: DatastoreService has not been injected 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:135) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:384) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) 	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548) 	at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) 	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250) 	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517) 	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467) 	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) 	at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.createHandler(AppVersionHandlerMap.java:202) 	at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.getHandler(AppVersionHandlerMap.java:171) 	at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:123) 	at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:422) 	at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:449) 	at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:455) 	at com.google.tracing.TraceContext.runInContext(TraceContext.java:695) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:333) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:325) 	at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:453) 	at com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:251) 	at java.lang.Thread.run(Thread.java:679) Caused by: java.lang.IllegalStateException: DatastoreService has not been injected 	at com.appspot.springaop.domain.Book.datastoreService(Book.java:53) 	at com.appspot.springaop.domain.Book.findByTitle(Book.java:79) 	at com.appspot.springaop.config.BootStrapConfig$BootStrap.findOrCreateBook(BootStrapConfig.java:35) 	at com.appspot.springaop.config.BootStrapConfig$BootStrap.init(BootStrapConfig.java:30) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:43) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:346) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:299) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:132) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:384) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) 	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548) 	at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) 	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250) 	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517) 	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467) 	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) 	at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:449) 	at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:455) 	at com.google.tracing.TraceContext.runInContext(TraceContext.java:695) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:333) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:325) 	at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:453) 	... 1 more 	 W 2012-01-12 11:39:43.196 Nested in org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bootStrap': Invocation of init method failed; nested exception is java.lang.IllegalStateException: DatastoreService has not been injected: java.lang.IllegalStateException: DatastoreService has not been injected 	at com.appspot.springaop.domain.Book.datastoreService(Book.java:53) 	at com.appspot.springaop.domain.Book.findByTitle(Book.java:79) 	at com.appspot.springaop.config.BootStrapConfig$BootStrap.findOrCreateBook(BootStrapConfig.java:35) 	at com.appspot.springaop.config.BootStrapConfig$BootStrap.init(BootStrapConfig.java:30) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:43) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:346) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:299) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:132) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:384) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) 	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548) 	at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) 	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250) 	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517) 	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467) 	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) 	at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:449) 	at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:455) 	at com.google.tracing.TraceContext.runInContext(TraceContext.java:695) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:333) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:325) 	at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:453) 	at java.lang.Thread.run(Thread.java:679) 	 C 2012-01-12 11:39:43.200 Uncaught exception from servlet javax.servlet.UnavailableException: Initialization failed. 	at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.createHandler(AppVersionHandlerMap.java:211) 	at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.getHandler(AppVersionHandlerMap.java:171) 	at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:123) 	at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:422) 	at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:449) 	at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:455) 	at com.google.tracing.TraceContext.runInContext(TraceContext.java:695) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:333) 	at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:325) 	at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:453) 	at com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:251) 	at java.lang.Thread.run(Thread.java:679) ```  As requested in the dicussion forum I have also uploaded a simple example project (Maven) that runs locally but gives above error on Google App Engine infrastructure.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?120751-EnableSpringConfigured-gives-BeanFactory-has-not-been-set-on-BeanConfigurerSupport  **Attachments:** - [spring-aop.rar](https://jira.spring.io/secure/attachment/19298/spring-aop.rar) (_8.67 kB_)  3 votes, 7 watchers","open","in: core,","spring-projects-issues","2012-01-12T02:54:07Z","2022-02-01T12:20:50Z"
"","13607","Support for Customizing URL Formats [SPR-8967]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-8967](https://jira.spring.io/browse/SPR-8967?redirect=false)** and commented  Grails 2.0 introduced support for Customizing URL Formats (see docs http://grails.org/doc/latest/guide/theWebLayer.html#customizingUrlFormat).  It would be nice to have such a feature for Spring MVC as well.   ---  **Affects:** 3.1 GA","closed","status: invalid,","spring-projects-issues","2011-12-28T23:12:02Z","2019-01-12T05:29:24Z"
"","13424","3.1 RC1 does not work on Google App Engine because direct InitialContext usage (which is restricted) [SPR-8781]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-8781](https://jira.spring.io/browse/SPR-8781?redirect=false)** and commented  3.1 RC1 uses the InitialContext directly, which causes RC1 not to run on Google App Engine as it is a restricted class. M2 was working fine.  See below the details:  java.lang.NoClassDefFoundError: javax.naming.InitialContext is a restricted class. Please see the Google App Engine developer's guide for more details. at com.google.appengine.tools.development.agent.runtime.Runtime.reject(Runtime.java:51) at org.springframework.jndi.JndiTemplate.createInitialContext(JndiTemplate.java:136) at org.springframework.jndi.JndiTemplate.getContext(JndiTemplate.java:103) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:85) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:152) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:178) at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:95) at org.springframework.jndi.JndiLocatorDelegate.lookup(JndiLocatorDelegate.java:37) at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:77) at org.springframework.jndi.JndiLocatorDelegate.lookup(JndiLocatorDelegate.java:32) at org.springframework.jndi.JndiPropertySource.getProperty(JndiPropertySource.java:82) at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:73) at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:59) at org.springframework.core.env.AbstractEnvironment.doGetDefaultProfiles(AbstractEnvironment.java:229) at org.springframework.core.env.AbstractEnvironment.acceptsProfiles(AbstractEnvironment.java:257) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.isCandidateComponent(ClassPathScanningCandidateComponentProvider.java:303) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:232) at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:218) at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(ClassPathBeanDefinitionScanner.java:196) at org.springframework.web.context.support.AnnotationConfigWebApplicationContext.loadBeanDefinitions(AnnotationConfigWebApplicationContext.java:236) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:522) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:436) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:381) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548) at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250) at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517) at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130) at org.mortbay.jetty.Server.doStart(Server.java:224) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at com.google.appengine.tools.development.JettyContainerService.startContainer(JettyContainerService.java:186) at com.google.appengine.tools.development.AbstractContainerService.startup(AbstractContainerService.java:182) at com.google.appengine.tools.development.DevAppServerImpl.start(DevAppServerImpl.java:172) at com.google.appengine.tools.development.DevAppServerMain$StartAction.apply(DevAppServerMain.java:164) at com.google.appengine.tools.util.Parser$ParseResult.applyArgs(Parser.java:48) at com.google.appengine.tools.development.DevAppServerMain.(DevAppServerMain.java:113) at com.google.appengine.tools.development.DevAppServerMain.main(DevAppServerMain.java:89) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:436) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:381) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548) at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250) at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517) at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130) at org.mortbay.jetty.Server.doStart(Server.java:224) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at com.google.appengine.tools.development.JettyContainerService.startContainer(JettyContainerService.java:186) at com.google.appengine.tools.development.AbstractContainerService.startup(AbstractContainerService.java:182) at com.google.appengine.tools.development.DevAppServerImpl.start(DevAppServerImpl.java:172) at com.google.appengine.tools.development.DevAppServerMain$StartAction.apply(DevAppServerMain.java:164) at com.google.appengine.tools.util.Parser$ParseResult.applyArgs(Parser.java:48) at com.google.appengine.tools.development.DevAppServerMain.(DevAppServerMain.java:113) at com.google.appengine.tools.development.DevAppServerMain.main(DevAppServerMain.java:89) Caused by: java.lang.NoClassDefFoundError: javax.naming.InitialContext is a restricted class. Please see the Google App Engine developer's guide for more details. at com.google.appengine.tools.development.agent.runtime.Runtime.reject(Runtime.java:51) at org.springframework.jndi.JndiTemplate.createInitialContext(JndiTemplate.java:136) at org.springframework.jndi.JndiTemplate.getContext(JndiTemplate.java:103) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:85) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:152) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:178) at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:95) at org.springframework.jndi.JndiLocatorDelegate.lookup(JndiLocatorDelegate.java:37) at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:77) at org.springframework.jndi.JndiLocatorDelegate.lookup(JndiLocatorDelegate.java:32) at org.springframework.jndi.JndiPropertySource.getProperty(JndiPropertySource.java:82) at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:73) at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:59) at org.springframework.core.env.AbstractEnvironment.doGetDefaultProfiles(AbstractEnvironment.java:229) at org.springframework.core.env.AbstractEnvironment.acceptsProfiles(AbstractEnvironment.java:257) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.isCandidateComponent(ClassPathScanningCandidateComponentProvider.java:303) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:232) ... 27 more    ---  **Affects:** 3.1 RC1","closed","type: bug,","spring-projects-issues","2011-10-17T02:31:40Z","2012-06-19T03:39:09Z"
"","13239","It should be possible to set allowed fields and validator per action in controller [SPR-8595]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-8595](https://jira.spring.io/browse/SPR-8595?redirect=false)** and commented  Using Spring 3 controllers it is possible to use `@InitBinder` methods to set allowed fields and validator for the controller action. However when using controller with multiple actions (like CRUD) there is no straightforward way to set the allowed field and validator per action.  It would be a huge improvement if there would be a way to map `@InitBinder` to action(s) directly. For validation it might also be an option to specify validator class in `@Valid` annotation like: `@Valid`(validator = CreateUserValidator.class) CreateUserForm form  Probably there are better alternatives, but any other solution would be good, as I think at the moment there is no alternative at all. At least that's what I assume from docs and unanswered forum posts below.  http://forum.springsource.org/showthread.php?112698-Allowed-fiels-in-Roo-generated-controller http://forum.springsource.org/showthread.php?108195-Spring-3-MultiActionController-and-initBinder-allowed-fields   ---  **Affects:** 3.1 M2  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-08-09T13:46:01Z","2019-01-11T14:11:47Z"
"","13232","Add  tag [SPR-8588]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-8588](https://jira.spring.io/browse/SPR-8588?redirect=false)** and commented  I just want to check if my form object hasErrors. I'm not interested to know which error or errors.  Above my form I want to display a message (like: there are errors), and the specific errors are displayed inline with form fields, using    ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-08-07T12:12:09Z","2011-10-31T08:23:47Z"
"","13161","@Component class using @Value cannot access @PropertySource proeprties [SPR-8516]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-8516](https://jira.spring.io/browse/SPR-8516?redirect=false)** and commented  I'm using a `@Configuration` class like:  ``` @Configuration @ComponentScan(basePackages = {""nl.vooty""}, excludeFilters = {@Filter(type = FilterType.ANNOTATION, value = Configuration.class)}) @PropertySource(""classpath:/META-INF/config.properties"") public class AppConfig {     .. } ```  In a `@Component` class I would like to inject a property value using the `@Value` annotation like:  ``` @Component public class AuthenticationFailureBadCredentialsListener implements ApplicationListener {          @Value(""${authentication.max.login.failures}"")     private String maxLoginFailures;      .. } ```  Although the property exists, it's not injected in the variable.  When logging the value of the maxLoginFailures it is: ""${authentication.max.login.failures}""  Note that I'm testing on M2.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13183 automatic registration of PSPC when `@PropertySource` is used","closed","status: declined,","spring-projects-issues","2011-07-06T13:52:37Z","2019-01-13T07:08:30Z"
"","13056","Provide 'environment' taglib [SPR-8409]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-8409](https://jira.spring.io/browse/SPR-8409?redirect=false)** and commented  Please provide a Spring 'environment' taglib with tags like: - acceptsProfiles - containsProperty - getProperty  ---  **Affects:** 3.1 M1  **Attachments:** - [env.tld](https://jira.spring.io/secure/attachment/18320/env.tld) (_2.13 kB_) - [PropertyTag.java](https://jira.spring.io/secure/attachment/18321/PropertyTag.java) (_4.26 kB_)  **Issue Links:** - #13090  tag doesn't support dot(.) operator for accessing map values","closed","type: enhancement,","spring-projects-issues","2011-06-06T17:00:58Z","2019-01-11T13:34:28Z"
"","13807","Apostrophe not being displayed correctly in MessageSource [SPR-9169]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-9169](https://jira.spring.io/browse/SPR-9169?redirect=false)** and commented  When a list of key value pairs for MessageSource contains an apostrophe, it is not displayed.  e.g. ui.nophotos=Nog geen foto''s geplaatst displays ""Nog geen foto''s geplaatst"" INCORRECT  ui.nophotos=Nog geen foto''s geplaatst door {0} displays ""Nog geen foto's geplaatst door Marc"" CORRECT  ui.nophotos=Nog geen foto's geplaatst displays ""Nog geen fotos geplaatst"" INCORRECT  if there is no args replacement, Spring will display two apostrophes.  This may seem trivial to an English speaker, but in other languages, this is a nightmare. It's also inconsistent.  ---  **Issue Links:** - #13989 Apostrophe in MessageSource text leads to {0} not being replaced","closed","status: bulk-closed,","spring-projects-issues","2012-02-24T08:57:57Z","2019-01-12T03:49:04Z"
"","13633","@ModelAttribute in child controller should execute after @ModelAttribute in parent [SPR-8993]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-8993](https://jira.spring.io/browse/SPR-8993?redirect=false)** and commented  In my app I use a common ModelAttribute in a parent controller to share an ""expensive"" result with child controllers. However, it looks like if you want to use this result in a child `@ModelAttribute` method, the child controller `@ModelAttribute` executes before the parent. In the context of inheritance, this seems like a bug to me. But it could also be considered an improvement.  `@Controller` public class ParentController{  `@ModelAttribute`(""expensiveResult"") public MyResult getResult(){ //do something expensive } }  `@Controller` public class ChildController extends ParentController{  `@ModelAttribute`(""commonModelElement"") public CommonElement getElement(ModelMap model, NativeWebRequest request){ MyResult res = (MyResult) model.get(""expensiveResult""); return service.getElement(expensiveResult); }   ---  **Affects:** 3.0.7","closed","status: declined,","spring-projects-issues","2012-01-04T13:11:16Z","2019-01-12T16:37:03Z"
"","13402","SimpleMappingExceptionResolver: setStatusCodes getter return not same as setter. Makes override impossible [SPR-8759]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-8759](https://jira.spring.io/browse/SPR-8759?redirect=false)** and commented  The getter return type (Map) is not the same as setter (Properties). Since Spring 3.1, this is a problem. I get  org.springframework.beans.NotWritablePropertyException: Invalid property 'statusCodes' of bean class [nl.project.interceptor.MySimpleExceptionResolver]: Bean property 'statusCodes' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1057) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:920)  This makes it impossible to configure properties for 'statusCodes' in dispatcher-servlet.xml  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13409 Impossible to set SimpleMappingExceptionResolver.statusCodes (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5d42a6242fe0146423fceb266901d03021d0de89  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2011-10-12T06:26:46Z","2019-01-11T14:08:13Z"
"","13224","WebRequest.getLocale doesn't resolve locale correctly [SPR-8580]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-8580](https://jira.spring.io/browse/SPR-8580?redirect=false)** and commented  When you retrieve the Locale from a WebRequest through request.getLocale(), it doesn't take into account the possibility that the locale has been changed through the LocaleResolver.  WebRequest.getLocale()  should return the same as HttpServletRequest request; LocaleResolver localeResolver;  Locale locale = new Locale(someLanguageCode, someCountryCode); localeResolver.setLocale(request, response, locale); RequestContextUtils.getLocaleResolver(request).resolveLocale(request);  This is quite major to users who are dealing with internationalized websites, especially since some applications, like the Hibernate Validator rely on the ThreadLocal locale to determine the language for an error message.  It is even a more major pickle if you don't notice this subtle difference and happily convert all your method signatures to the more convenient NativeWebRequest   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-08-02T07:16:01Z","2015-09-22T17:34:35Z"
"","12950","cxf/spring ""eats"" entityManagerFactory exception and hides stacktrace [SPR-8302]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-8302](https://jira.spring.io/browse/SPR-8302?redirect=false)** and commented  When I have cxf-spring as a platform for working with webservices, I tend to have exceptions that occur in the entitymanagerfactory creation process hidden in exceptions that look like this, making it that much harder to debug. The actual ultimate exception message is there, but the stacktrace is missing and quite often, so is the root cause.  ERROR [main] ContextLoader.initWebApplicationContext(220) | Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.apache.cxf.transport.servlet.ServletTransportFactory' defined in class path resource [META-INF/cxf/cxf-servlet.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (2) are: PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'bus' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in URL [jar:file:/var/lib/tomcat6/webapps/ROOT/WEB-INF/lib/myapp.jar!/applicationContext.xml]: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: ApplicationEntityManager] Unable to build EntityManagerFactory PropertyAccessException 2: org.springframework.beans.MethodInvocationException: Property 'transportIds' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in URL [jar:file:/var/lib/tomcat6/webapps/ROOT/WEB-INF/lib/myapp.jar!/applicationContext.xml]: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: ApplicationEntityManager] Unable to build EntityManagerFactory at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1361) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4135) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4630) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:546) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:637) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:563) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:498) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1277) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:321) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) at org.apache.catalina.core.StandardHost.start(StandardHost.java:785) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:445) at org.apache.catalina.core.StandardService.start(StandardService.java:519) at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) at org.apache.catalina.startup.Catalina.start(Catalina.java:581) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (2) are: PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'bus' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in URL [jar:file:/var/lib/tomcat6/webapps/ROOT/WEB-INF/lib/myapp.jar!/applicationContext.xml]: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: ApplicationEntityManager] Unable to build EntityManagerFactory PropertyAccessException 2: org.springframework.beans.MethodInvocationException: Property 'transportIds' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in URL [jar:file:/var/lib/tomcat6/webapps/ROOT/WEB-INF/lib/myapp.jar!/applicationContext.xml]: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: ApplicationEntityManager] Unable to build EntityManagerFactory at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:102) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1358) ... 37 more  See also http://cxf.547215.n5.nabble.com/CXF-Not-starting-up-td3338583.html   ---  1 votes, 0 watchers","closed","status: declined,","spring-projects-issues","2011-05-06T08:03:21Z","2019-01-12T16:25:31Z"
"","13697","the first  rule will be overwrited by spring self with  [SPR-9058]","**[mao lingzhi](https://jira.spring.io/secure/ViewProfile.jspa?name=mlzboy)** opened **[SPR-9058](https://jira.spring.io/browse/SPR-9058?redirect=false)** and commented  i have a xml configuration like bellows:  ```xml              	 	 	 	 	  ```  i found this issue by check the jetty log:  ``` INFO : org.springframework.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/resources/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0' INFO : org.springframework.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/extjs/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1' INFO : org.springframework.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/app/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2' ```  #above is right,but at the end ,it replace the #0 rule by  INFO : org.springframework.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/resources/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'  so if only has one rule in config file ,it will replace by the system default rule always    ---  **Affects:** 3.0.6","closed","in: web,","spring-projects-issues","2012-01-25T08:42:01Z","2019-01-11T22:23:44Z"
"","13528","QuartzJobBean throws IncompatibleClassChangeError when using Quartz 2.x [SPR-8887]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-8887](https://jira.spring.io/browse/SPR-8887?redirect=false)** and commented  This is the exception we get when using the latest Spring 3.1 RC2 together with Quartz 2.1.1  [ERROR] 2011-11-29 14:33:57 [JobRunShell-scheduler_Worker-1] - Job DEFAULT.deviceIndexerJob threw an unhandled Exception: java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79) at org.quartz.core.JobRunShell.run(JobRunShell.java:213) at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557) [ERROR] 2011-11-29 14:33:57 [JobRunShell-scheduler_Worker-2] - Job DEFAULT.shortCodeIndexerJob threw an unhandled Exception: java.lang.IncompatibleClassChangeError: Found interface org.quartz.JobExecutionContext, but class was expected at org.springframework.scheduling.quartz.QuartzJobBean.execute(QuartzJobBean.java:79) at org.quartz.core.JobRunShell.run(JobRunShell.java:213) at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:557)  The source for QuartzJobBean does not seem to indicate any kind of problem. Even though JobExecutionContext was a class in Quartz 1.x and is now an interface in Quartz 2.x, the methods invoked on it are present in both.  The problem is that the Spring binary has been compiled against Quartz 1.x, and changing a class into an interface (or viceversa) is an incompatible change according to the Java spec, so we get IncompatibleClassChangeError even if the source compiles fine against both Quartz versions.  Recompiling QuartzJobBean against Quartz 2.x solves the issue, however this is an undesirable solution. I guess the solution would be to invoke the offending methods using reflection.  Our workaround was simply creating an alternative MethodInvokingJobDetailFactoryBean simplified for our use and compiled directly against Quartz 2.x, but this should be solved for the general public.  BTW, #13081 is somehow related but is clearly a different issue, which in fact has already been solved in 3.1 RC2  ---  **Affects:** 3.1 RC2  **Issue Links:** - #13530 QuartzJobBean doesn't work with Quartz 2.0 at runtime (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-11-30T04:57:20Z","2019-01-12T16:48:21Z"
"","13432","MethodInvokingJobDetailFactoryBean does not properly initialize jobDetail field when using Quartz 2.0+ [SPR-8790]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-8790](https://jira.spring.io/browse/SPR-8790?redirect=false)** and commented  Line 197:  Object jobDetail = BeanUtils.instantiate(jobDetailImplClass);  should be changed to:  this.jobDetail = (JobDetail) BeanUtils.instantiate(jobDetailImplClass);  Otherwise this.jobDetail is never initialized when using Quartz 2.0+  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13418 MethodInvokingJobDetailFactoryBean doesn't actually return the JobDetail if Quartz 2.0 in use (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-10-19T19:49:24Z","2019-01-12T16:48:25Z"
"","13383","Make MethodInvokingJobDetailFactoryBean compatible with Quartz 2.x [SPR-8741]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-8741](https://jira.spring.io/browse/SPR-8741?redirect=false)** and commented  MethodInvokingJobDetailFactoryBean attempts to instantiate JobDetailBean which is no longer compatible with Quartz 2.x  Also, CronTriggerBean is not compatible either. Although Quartz 2.x's native CronTriggerImpl largely replaces most functionality that CronTriggerBean offers, it would still be useful, since it allows referencing jobDetails by references instead of explicit job detail names/groups. Otherwise, classic declarative XML configuration needs to be overhauled and gets uglier.  ---  **Issue Links:** - #12923 Support Quartz 2.0.x","closed","type: enhancement,","spring-projects-issues","2011-10-05T11:06:48Z","2019-01-11T14:03:37Z"
"","12884","When i extract latest release i got .... [SPR-8236]","**[Manpreet](https://jira.spring.io/secure/ViewProfile.jspa?name=jatt.5abe@gmail.com)** opened **[SPR-8236](https://jira.spring.io/browse/SPR-8236?redirect=false)** and commented  !   C:\Users\abc\Desktop\MY\spring-framework-3.1.0.M1-with-docs.zip: Cannot create spring-framework-3.1.0.M1\projects\org.springframework.integration-tests\src\test\java\org\springframework\context\annotation\jsr330\ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.java Total path and file name length must not exceed 260 characters The system cannot find the path specified. !   C:\Users\abc\Desktop\MY\spring-framework-3.1.0.M1-with-docs.zip: Cannot create spring-framework-3.1.0.M1\projects\org.springframework.test\src\test\java\org\springframework\test\context\configuration\ContextConfigurationWithPropertiesExtendingPropertiesAndInheritedLoaderTests-context.properties Total path and file name length must not exceed 260 characters The system cannot find the path specified. !   C:\Users\abc\Desktop\MY\spring-framework-3.1.0.M1-with-docs.zip: Cannot create spring-framework-3.1.0.M1\projects\org.springframework.test\src\test\java\org\springframework\test\context\configuration\ContextConfigurationWithPropertiesExtendingPropertiesAndInheritedLoaderTests.java Total path and file name length must not exceed 260 characters The system cannot find the path specified. !   C:\Users\abc\Desktop\MY\spring-framework-3.1.0.M1-with-docs.zip: Cannot create spring-framework-3.1.0.M1\projects\org.springframework.test\src\test\java\org\springframework\test\context\configuration\ContextConfigurationWithPropertiesExtendingPropertiesTests-context.properties Total path and file name length must not exceed 260 characters The system cannot find the path specified. !   C:\Users\abc\Desktop\MY\spring-framework-3.1.0.M1-with-docs.zip: Cannot create spring-framework-3.1.0.M1\projects\org.springframework.test\src\test\java\org\springframework\test\context\junit4\RollbackOverrideDefaultRollbackFalseTransactionalSpringRunnerTests-context.xml Total path and file name length must not exceed 260 characters The system cannot find the path specified. !   C:\Users\abc\Desktop\MY\spring-framework-3.1.0.M1-with-docs.zip: Cannot create spring-framework-3.1.0.M1\projects\org.springframework.test\src\test\java\org\springframework\test\context\junit4\RollbackOverrideDefaultRollbackTrueTransactionalSpringRunnerTests-context.xml Total path and file name length must not exceed 260 characters The system cannot find the path specified.   --- No further details from [SPR-8236](https://jira.spring.io/browse/SPR-8236?redirect=false)","closed","status: invalid,","spring-projects-issues","2011-04-08T16:05:13Z","2019-01-12T05:30:32Z"
"","13811","org.springframework.context misses Import-Package on javax.inject [SPR-9173]","**[Magnus Jungsbluth](https://jira.spring.io/secure/ViewProfile.jspa?name=mjungsbluth)** opened **[SPR-9173](https://jira.spring.io/browse/SPR-9173?redirect=false)** and commented  If you enable  from within a OSGi bundle, the Classloader of Spring's Context bundle is used to check if javax.inject.`@Named` is reachable. This check is always false sinse org.springframework.context does not declare an appropiate Import-Packages statement in META-INF/MANIFEST.MF.  Solution: add javax.inject;resolution:=optional to the manifest and component scanning works in OSGi environments.   ---  **Affects:** 3.0.6, 3.1 GA","closed","in: core,","spring-projects-issues","2012-02-27T08:10:18Z","2012-03-14T08:02:05Z"
"","12987","Make Assert.* methods return the checked value using generics [SPR-8339]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-8339](https://jira.spring.io/browse/SPR-8339?redirect=false)** and commented  #### Overview  This issue proposes a simple change that can be applied to all methods in `Assert.java` that makes code more readable and compact, without breaking any compatibility.  ---  #### Status Quo  ###### Assert.java  ``` public static void notNull(Object object, String message) { 	if (object == null) { 		throw new IllegalArgumentException(message); 	} } ```  ###### Usage  ``` Assert.notNull(name, ""Name must not be null""); this.name = name; ```  ---  #### Proposal  ###### Assert.java  ``` public static  T notNull(T object, String message) { 	if (object == null) { 		throw new IllegalArgumentException(message); 	} 	return object; } ```  ###### Usage  ``` this.name = Assert.notNull(name, ""Name must not be null""); ```  ---  No further details from [SPR-8339](https://jira.spring.io/browse/SPR-8339?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-05-16T10:55:38Z","2019-01-13T21:42:52Z"
"","13455","AutowiredAnnotationBeanPostProcessor CGLIB proxies [SPR-8813]","**[Madis Pärn](https://jira.spring.io/secure/ViewProfile.jspa?name=madis.parn)** opened **[SPR-8813](https://jira.spring.io/browse/SPR-8813?redirect=false)** and commented  AutowiredAnnotationBeanPostProcessor.buildAutowiringMetadata does not find method annotations on CGLIB proxies  problem occurs when using custom valueResolver and calling beanFactory.autowireBeanProperties after first context initialization  solution would be using ClassUtils.getUserClass in method AutowiredAnnotationBeanPostProcessor.findAutowiringMetadata    ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/987cddab36e1d491eb1799535310ba2a2c0a6944, https://github.com/spring-projects/spring-framework-issues/commit/04ca0bddad2bfce1511197afa936b6730dc21ac4","closed","status: declined,","spring-projects-issues","2011-11-02T11:01:36Z","2019-01-12T16:37:14Z"
"","13767","Override type's @Cacheable with an annotation on a method to disable caching [SPR-9128]","**[Maciej Drozdzowski](https://jira.spring.io/secure/ViewProfile.jspa?name=the4yeast)** opened **[SPR-9128](https://jira.spring.io/browse/SPR-9128?redirect=false)** and commented  It would be really useful to override `@Cacheable` set on the class. If the class has 10 methods and same settings are applied to all of them, it's good to put `@Cacheable` on the class. But when one of the methods has to be excluded from cache, a `@Cacheable`(false), `@NotCacheable`, or anything similar would be a great simplification.   ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-02-16T14:26:06Z","2019-01-14T05:22:37Z"
"","13678","spring el - autoGrowNullReferences/autoGrowCollections in SpelParserConfiguration does not work for maps [SPR-9039]","**[maayan s](https://jira.spring.io/secure/ViewProfile.jspa?name=maayan)** opened **[SPR-9039](https://jira.spring.io/browse/SPR-9039?redirect=false)** and commented  the SpelExpressionParser can be set with SpelParserConfiguration. in the SpelParserConfiguration you can set the autoGrowNullReferences/autoGrowCollections to true. This is a usefull configuration that works just fine for lists and arrays, but not for maps. in case i have a map object that maps a string to some object (for example: map myMap ) that i want to populate using spring el i have to first create the new instance of the object and only than i can set the new object fields.  for example i want to create a new entry in my map:  1. map myMap","closed","in: core,","spring-projects-issues","2012-01-19T04:56:54Z","2019-01-12T05:29:19Z"
"","13648","SimpleMessageListenerContainer creates the consumers in the afterPropertySet instead of the start [SPR-9009]","**[maayan s](https://jira.spring.io/secure/ViewProfile.jspa?name=maayan)** opened **[SPR-9009](https://jira.spring.io/browse/SPR-9009?redirect=false)** and commented  when using SimpleMessageListenerContainer with ActiveMQ we have a problem where the SimpleMessageListenerContainer tries to connect to the queue before the active mq broker loads. since SimpleMessageListenerContainer already implements the SmartLifecycle interface it should start the consumers in the start() method just like the DefaultMessageListenerContainer. This will help control when the consumers are started and they could be started manually as well (when using autoStartup = false).  currently the only workaround is using the ""depends-on"" attribute, in order to make sure the consumers are started after the broker.   --- No further details from [SPR-9009](https://jira.spring.io/browse/SPR-9009?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-01-09T01:57:21Z","2012-06-19T03:39:16Z"
"","13619","Use thisJoinPointStaticPart in AbstractTransactionAspect [SPR-8979]","**[Lyor Goldstein](https://jira.spring.io/secure/ViewProfile.jspa?name=lgoldstein)** opened **[SPR-8979](https://jira.spring.io/browse/SPR-8979?redirect=false)** and commented  The AbstractTransactionAspect references the thisJoinPoint aspect context in order to retrieve the MethodSignature and subsequently the Method in order to decide whether a transaction should be started. The usage of thisJoinPoint is very ""expensive"" performance wise and should be avoided (the very mention of it cause performance penalty even if the member is not referenced - e.g., due to some ""if"" statement). Static information (as MethodSignature in this case) is much more efficiently accessed via the thisJoinPointStaticPart context.   ---  **Affects:** 3.0.7, 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2012-01-02T03:41:25Z","2019-01-12T02:36:15Z"
"","13545","Autowire of overriden setters with generic parameter regression [SPR-8905]","**[Lukasz Wozniak](https://jira.spring.io/secure/ViewProfile.jspa?name=woznial)** opened **[SPR-8905](https://jira.spring.io/browse/SPR-8905?redirect=false)** and commented  When setter method annotated with `@Autowired` accepts concrete type, while overriding superclass method of the same name but accepting generic parameter, autowiring works correctly in 3.0.5 autowiring concrete type. In 3.0.6 it tries to autowire using generic type ( `` ) and fails finding multiple instances of `SomeType`  attached simple project with example, just change spring version accordingly to see test fail or succeed   ---  **Affects:** 3.0.6  **Attachments:** - [autowiring-test.zip](https://jira.spring.io/secure/attachment/19205/autowiring-test.zip) (_3.34 kB_)","closed","in: core,","spring-projects-issues","2011-12-09T04:16:41Z","2012-06-19T03:39:40Z"
"","13218","Can not inject primitive values from property file using @Value annotation into servlet [SPR-8574]","**[Lukas Vlcek](https://jira.spring.io/secure/ViewProfile.jspa?name=lukas.vlcek)** opened **[SPR-8574](https://jira.spring.io/browse/SPR-8574?redirect=false)** and commented  I am not able to inject primitive values from property file into servlet. Complete sample code can be found here: https://github.com/lukas-vlcek/SpringValueAnnotationTest  In a nutshell: 1) I setup annotation driven config mode using  2) I read property file  3) Then in init() method of each servlet I call SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this, config.getServletContext()); 4) Injection in servlet using `@Autowired` works fine but using `@Value` does not. More specifically see https://github.com/lukas-vlcek/SpringValueAnnotationTest/blob/master/src/main/java/org/test/springframework/inject/Bar.java Injecting using `@Value` annotation fails in this servlet.  Besides Bar servlet there two other servlets that work fine, these are Foo and Lorem servlets. I created these two working servlets to verify that `@Value` annotation works fine when not used directly on servlet (that is the case for Lorem) and in Foo servlet I show that the Properties object is loaded correctly using `@Autowired` annotation.  So the question is: is it possible to have primitive values from property file directly injected into servlet?  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?112716-Using-Value-to-inject-primitive-value-from-property-file-into-servlet-possible  **Issue Links:** - #13264 Problem using SpringBeanAutowiringInterceptor with `@Value` annotation in a Stateless Session Bean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8f23c66512720ee3077e8500bf976549504fcd8f, https://github.com/spring-projects/spring-framework/commit/3ffc0a2da2c1e5d855973b2210451ebed470b9b3","closed","in: core,","spring-projects-issues","2011-08-01T01:59:37Z","2019-01-13T07:08:16Z"
"","13798","AbstractMessageConverterMethodProcessor ignores quality parameter when selecting a MediaType [SPR-9160]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-9160](https://jira.spring.io/browse/SPR-9160?redirect=false)** and commented  `AbstractMessageConverterMethodProcessor` does target media-type selection in a strange way. If I have `Accept=""text/plain; q=0.5, application/json""` then it picks `text/plain` as target Content-type. The reason is that `MediaType.sortBySpecificity()` ignores ""q"" parameter if the types are different as in this example.  ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?123451-Accept-header-resolution-%28text-plain-q-0-5-application-json%29  **Sub-tasks:** - #13806 Backport ""AbstractMessageConverterMethodProcessor ignores quality parameter when selecting a MediaType""","closed","type: bug,","spring-projects-issues","2012-02-23T23:47:25Z","2019-01-11T22:17:45Z"
"","13637","Make flash attributes use cookie to enable stateless webapp [SPR-8997]","**[Ludovic Praud](https://jira.spring.io/secure/ViewProfile.jspa?name=ludovic.praud)** opened **[SPR-8997](https://jira.spring.io/browse/SPR-8997?redirect=false)** and commented  I was waiting the flash attributes feature in spring 3.1 but I was surprised that the attributes were stored in the HTTP session instead of cookie. My webapp is required to not have session because the infrastructure we use does not handle sticky session. I have done my own flash scope inspired from the one in playframework. It would be cool to be able to choose between http session or cookie.  ---  **Affects:** 3.1 GA  **Issue Links:** - #17354 FlashMap's cannot be easily serialized by means other than java serialization  4 votes, 10 watchers","open","type: enhancement,","spring-projects-issues","2012-01-05T12:30:26Z","2020-06-12T11:34:15Z"
"","13524","RestTemplate.headForHeaders throws ""IllegalArgumentException: No InputStream specified"" on server resource which status code are 4xx [SPR-8883]","**[Ludovic Praud](https://jira.spring.io/secure/ViewProfile.jspa?name=ludovic.praud)** opened **[SPR-8883](https://jira.spring.io/browse/SPR-8883?redirect=false)** and commented  With RestTemplate, an `IllegalArgumentException: No InputStream specified` is thrown when doing HTTP HEAD on a resource which has a 4xx Status-Code.  The problem is within `org.springframework.web.client.DefaultResponseErrorHandler#handleError` method which fetchs the body of the response with :  ```java byte[] body = FileCopyUtils.copyToByteArray(response.getBody()); ```  and that copy throws an `IllegalArgumentException: No InputStream specified`  We don't expect the body to be different from null when doing an HTTP HEAD (the HEAD always returns empty body response). The handleError method must handle null body response.  **workaround**  Set an override of DefaultResponseErrorHandler in RestTemplate which fix the problem.  ```java this.restTemplate.setErrorHandler(new DefaultResponseErrorHandler() {     @Override     public void handleError(final ClientHttpResponse response) throws IOException {         final HttpStatus statusCode = response.getStatusCode();         final MediaType contentType = response.getHeaders().getContentType();         final Charset charset = contentType != null ? contentType.getCharSet() : null;         final byte[] body = (response.getBody() != null) ? FileCopyUtils.copyToByteArray(response.getBody()) : null;         switch (statusCode.series()) {             case CLIENT_ERROR:                 throw new HttpClientErrorException(statusCode, response.getStatusText(), body, charset);             case SERVER_ERROR:                 throw new HttpServerErrorException(statusCode, response.getStatusText(), body, charset);             default:                 throw new RestClientException(""Unknown status code ["" + statusCode + ""]"");         }     } }); ```  ---  **Affects:** 3.0.6  **Sub-tasks:** - #14154 Backport ""RestTemplate.headForHeaders throws ""IllegalArgumentException: No InputStream specified"" on server resource which status code are 4xx""  **Issue Links:** - #13355 DefaultResponseErrorHandler IOException Bug  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3beef9a92e78ca6da4f41dbb0c3c858ac85b10cb  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2011-11-29T06:07:03Z","2019-01-11T15:08:25Z"
"","13396","unable to retrieve response status code with spring web client from a response with no body [SPR-8754]","**[Ludovic Praud](https://jira.spring.io/secure/ViewProfile.jspa?name=ludovic.praud)** opened **[SPR-8754](https://jira.spring.io/browse/SPR-8754?redirect=false)** and commented  Given a simple controller  ``` @RequestMapping(value = ""/resource"", method = HEAD) public ResponseEntity exists() {     return resourceExists        ? new ResponseEntity(HttpStatus.OK)        : new ResponseEntity(HttpStatus.NOT_FOUND); } ```  Doing an HTTP HEAD with the spring web client  ``` restTemplate.headForHeaders(""/resource""); ```  I expect to receive an `HttpClientErrorException` with an HTTP status code `HttpStatus.NOT_FOUND` if the `resourceExists == false` but instead I received a `java.lang.IllegalArgumentException`.  ``` java.lang.IllegalArgumentException: No InputStream specified 	at org.springframework.util.Assert.notNull(Assert.java:112) 	at org.springframework.util.FileCopyUtils.copy(FileCopyUtils.java:106) 	at org.springframework.util.FileCopyUtils.copyToByteArray(FileCopyUtils.java:164) 	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:72) 	at org.springframework.web.client.RestTemplate.handleResponseError(RestTemplate.java:486) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:443) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:401) 	at org.springframework.web.client.RestTemplate.headForHeaders(RestTemplate.java:242)         ... ```  Note : the fetching of the response body depends of the `org.springframework.http.client.ClientHttpRequestFactory` implementation used. Here I've used a `CommonsClientHttpRequestFactory`.  If I use a `SimpleClientHttpRequestFactory` it works for HTTP HEAD but failed for HTTP GET  ``` org.springframework.web.client.ResourceAccessException: I/O error: http://localhost:9090/its/file/resource; nested exception is java.io.FileNotFoundException: http://localhost:9090/its/file/resource 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:453) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:401) 	at org.springframework.web.client.RestTemplate.getForEntity(RestTemplate.java:221) 	... 30 more Caused by: java.io.FileNotFoundException: http://localhost:9090/its/file/resource 	at sun.reflect.GeneratedConstructorAccessor146.newInstance(Unknown Source) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:513) 	at sun.net.www.protocol.http.HttpURLConnection$6.run(HttpURLConnection.java:1491) 	at java.security.AccessController.doPrivileged(Native Method) 	at sun.net.www.protocol.http.HttpURLConnection.getChainedException(HttpURLConnection.java:1485) 	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1139) 	at org.springframework.http.client.SimpleClientHttpResponse.getBody(SimpleClientHttpResponse.java:77) 	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:72) 	at org.springframework.web.client.RestTemplate.handleResponseError(RestTemplate.java:486) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:443) 	... 35 more Caused by: java.io.FileNotFoundException: http://localhost:9090/its/file/resource 	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1434) 	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:379) 	at org.springframework.http.client.SimpleClientHttpResponse.getStatusCode(SimpleClientHttpResponse.java:47) 	at org.springframework.web.client.DefaultResponseErrorHandler.hasError(DefaultResponseErrorHandler.java:45) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:439) 	... 35 more ```    ---  **Affects:** 3.0.6","closed","in: web,","spring-projects-issues","2011-10-10T06:29:57Z","2019-01-12T16:48:29Z"
"","13022","Can make an OutOfMemoryException by sending a modified form list property with an high index [SPR-8375]","**[Ludovic Praud](https://jira.spring.io/secure/ViewProfile.jspa?name=ludovic.praud)** opened **[SPR-8375](https://jira.spring.io/browse/SPR-8375?redirect=false)** and commented  **How to reproduce the problem**  With a ModelAttribute such as :  ```java class Model {     List getItems(); } ```  With a JSP such as :  ```xml  ```  within an HTML form.  POST the form with modified items attribute :  ``` items[100000000]=foo ```  and wait, wait, wait until the OutOfMemoryException.  **Incriminated code**  `org.springframework.validation.DataBinder.autoGrowNestedPaths` is default true, it should be false instead.  **Workarounds**  In a controller :  ``` @InitBinder public void initBinder(WebDataBinder binder) {     binder.setAutoGrowNestedPaths(false); } ```  or using an implementation of WebBindingInitializer :  ``` public void initBinder(WebDataBinder binder, WebRequest request) {     binder.setAutoGrowNestedPaths(false); } ```  ---  **Affects:** 3.0.5  **Issue Links:** - #12498 DataBinder should be able to define a different strategy for BeanWrapperImpl how autogrowing should handle gaps in collection properties (_**""duplicates""**_)  1 votes, 3 watchers","closed","in: web,","spring-projects-issues","2011-05-25T06:21:35Z","2019-01-12T16:48:51Z"
"","13366","ClassUtils.forName(...) - Add complex class in commonClassCache [SPR-8724]","**[Lucas POUZAC](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.pouzac.pro)** opened **[SPR-8724](https://jira.spring.io/browse/SPR-8724?redirect=false)** and commented  1. commonClassCache : use ConcurrentHashMap 2. Add complex class in commonClassCache (ClassUtils.forName(...) method)  because classLoaderToUse.loadClass(name) use synchronized method.   ---  **Affects:** 3.0.6  **Attachments:** - [ClassUtils.java](https://jira.spring.io/secure/attachment/18828/ClassUtils.java) (_41.16 kB_)","closed","status: bulk-closed,","spring-projects-issues","2011-09-26T06:30:11Z","2019-01-12T02:37:25Z"
"","13203","Synchronisation during performance tests - TypeDescriptor [SPR-8559]","**[Lucas POUZAC](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas.pouzac.pro)** opened **[SPR-8559](https://jira.spring.io/browse/SPR-8559?redirect=false)** and commented  Hi, During performance tests, I observed that several threads were in status ""blocked"". Below, the stack:  The tests were carried out with jmeter with read-only queries.  """"http-bio-8080""-exec-34"" - Thread t@100 java.lang.Thread.State: BLOCKED at org.springframework.core.convert.TypeDescriptor.getAnnotations(TypeDescriptor.java:363) - waiting to lock  (a org.springframework.core.convert.TypeDescriptor) owned by """"http-bio-8080""-exec-33"" t@99   at org.springframework.core.convert.TypeDescriptor.equals(TypeDescriptor.java:436)   at org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey.equals(GenericConversionService.java:621)   at java.util.concurrent.ConcurrentHashMap$Segment.get(ConcurrentHashMap.java:338)   at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:769)   at org.springframework.core.convert.support.GenericConversionService.getConverter(GenericConversionService.java:243)   at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:174)   at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:133)   at org.springframework.data.mapping.BeanWrapper.getPotentiallyConvertedValue(BeanWrapper.java:224)   at org.springframework.data.mapping.BeanWrapper.setProperty(BeanWrapper.java:157)   at org.springframework.data.document.mongodb.convert.MappingMongoConverter$2.doWithPersistentProperty(MappingMongoConverter.java:242)   at org.springframework.data.document.mongodb.convert.MappingMongoConverter$2.doWithPersistentProperty(MappingMongoConverter.java:230)   at org.springframework.data.mapping.BasicPersistentEntity.doWithProperties(BasicPersistentEntity.java:112)   at org.springframework.data.document.mongodb.convert.MappingMongoConverter.read(MappingMongoConverter.java:230)   at org.springframework.data.document.mongodb.convert.MappingMongoConverter.read(MappingMongoConverter.java:174)   at org.springframework.data.document.mongodb.convert.MappingMongoConverter.read(MappingMongoConverter.java:128)   at org.springframework.data.document.mongodb.MongoTemplate$ReadDbObjectCallback.doWith(MongoTemplate.java:1655)   at org.springframework.data.document.mongodb.MongoTemplate.executeFindMultiInternal(MongoTemplate.java:1426)   at org.springframework.data.document.mongodb.MongoTemplate.doFind(MongoTemplate.java:1186)   at org.springframework.data.document.mongodb.MongoTemplate.find(MongoTemplate.java:587)   at org.springframework.data.document.mongodb.MongoTemplate.find(MongoTemplate.java:557)   at $MongoOperations_1314305d6b4.find($MongoOperations_1314305d6b4.java)    ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8767774c9ee3e4b2877e44e273a5036548c97ca","closed","in: core,","spring-projects-issues","2011-07-19T09:13:33Z","2012-06-19T03:39:43Z"
"","13206","Spring embedded database fails to execute script after encoding changes [SPR-8562]","**[Luca Preziati](https://jira.spring.io/secure/ViewProfile.jspa?name=luca.preziati)** opened **[SPR-8562](https://jira.spring.io/browse/SPR-8562?redirect=false)** and commented  If the Script sql used to popolate Embedded Db, like this    contains new line in sql command, the import failed with uncomprensible error.  I think should be necessary throw a specific exception or better permit space and load the sql command separated by character ;   ---  **Affects:** 3.0.4  **Attachments:** - [error.sql](https://jira.spring.io/secure/attachment/18516/error.sql) (_11.67 kB_) - [typeRegistryCreate.sql](https://jira.spring.io/secure/attachment/18515/typeRegistryCreate.sql) (_40 bytes_)","closed","type: enhancement,","spring-projects-issues","2011-07-26T08:26:55Z","2012-06-19T03:39:37Z"
"","13302","Bridged method detection leads to false positive detection of autowired annotations [SPR-8660]","**[Loïc Frering](https://jira.spring.io/secure/ViewProfile.jspa?name=loicfrering)** opened **[SPR-8660](https://jira.spring.io/browse/SPR-8660?redirect=false)** and commented  Due to [changeset 4600](https://fisheye.springsource.org/changelog/spring-framework?cs=4600) in AutowiredAnnotationBeanProcessor, autowired annotations are found on **overrided parameterized methods** where there are no `@Autowired` annotations!  Exemple :  ``` public abstract class GenericServiceImpl implements GenericService {      protected D dao;      public void setDao(D resourceDao) {         this.dao = resourceDao;     }      // ... } ```  ``` @Service(""userService"") public class UserServiceImpl extends GenericServiceImpl implements UserService {      @Inject     @Named(""userDao"")     @Override     public void setDao(UserDao userDao) {         super.setDao(userDao);     }      // ... } ```  When processing the userService bean, the findAutowiredAnnotation method in AutowiredAnnotationBeanPostProcessor finds not only the `@Autowired` annotation for the setDao method defined in UserServiceImpl but also for the one defined in the parent class. This because the BridgeMethodResolver.findBridgedMethod detects the child method as the bridged method of the parent one:  ``` private Annotation findAutowiredAnnotation(AccessibleObject ao) {     for (Class","closed","in: core,","spring-projects-issues","2011-08-31T09:18:22Z","2019-01-11T14:19:38Z"
"","13238","PersistenceAnnotationBeanPostProcessor does not operate on the most specific persistence annotation declaration [SPR-8594]","**[Loïc Frering](https://jira.spring.io/secure/ViewProfile.jspa?name=loicfrering)** opened **[SPR-8594](https://jira.spring.io/browse/SPR-8594?redirect=false)** and commented  Hello guys, I've got an issue with the PersistenceAnnotationBeanPostProcessor when using multiple persistence units and inheritance. The problem is in findPersistenceMetadata method which looks for persistence annotations in registered beans.  The current implementation loops through **declared** fields and **declared** methods of the actual class of the bean to detect eventual persistence annotation and register a PersistenceElement for each.  And this process is repeated in a do ... while loop for each class in the inheritance hierarchy of the bean's class.  Here is a simplified verion of the current algorithm:  Class targetClass = clazz;do { LinkedList currElements = new LinkedList(); for (Field field : targetClass.getDeclaredFields()) { // ....        currElements.add(new PersistenceElement(field, null)); } for (Method method : targetClass.getDeclaredMethods()) { // ....        PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method); currElements.add(new PersistenceElement(method, pd)); } elements.addAll(0, currElements); targetClass = targetClass.getSuperclass(); }while (targetClass != null && targetClass != Object.class); metadata = new InjectionMetadata(clazz, elements);  The problem is that a PersistentElement is registered for each definition of a field or method in the class hierarchy : the most specific definition is not the only one registered.  As a consequence having this:  public class GenericRepository {      private EntityManager entityManager;          @PersistenceContext     public void setEntityManager(EntityManager em) {         this.entityManager = em;     }          // ....}  public class UserRepository extends GenericRepository {      @Override     @PersistenceContext(unitName=""my-unit"")     public void setEntityManager(EntityManager em) {         parent.setEntityManager(em);     }          // ....}  Would leed to 2 injected elements in metadata:  * One for `@PersistenceContext` without unitName * One for `@PersistenceContext` with unitName ""my-unit""  Then Spring injects the EntityManager based on the first element definition and skip the second one **which is the most specific**!  There might be a good reason for iterating through each declared field/method of each super class of the bean's class but I don't get why you do not simply use the getMethods() and getFields() reflection methods which return the most specific definition of the field/method with annotations and would avoid having multiple injectedElements for persistence matadata?   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65077d262c396ee919f84808bafb059ef3618e96, https://github.com/spring-projects/spring-framework/commit/49e61d2680c66e6d59aaa2d483300d4ac76cbc78","closed","type: bug,","spring-projects-issues","2011-08-09T09:23:47Z","2012-06-19T03:39:38Z"
"","12952","Make FilterTypeDescriptor a public class [SPR-8304]","**[Loïc Frering](https://jira.spring.io/secure/ViewProfile.jspa?name=loicfrering)** opened **[SPR-8304](https://jira.spring.io/browse/SPR-8304?redirect=false)** and commented  Make FilterTypeDescriptor which is a private ComponentScanSpec inner class a public class. It could then be used by libraries allowing namespace-based configuration and which are using a ClassPathScanningCandidateComponentProvider.  It would be useful for Spring Data Common which uses a particular specific class for now (see: http://goo.gl/5b1NJ and http://goo.gl/kXJbj) and for RESThub (http://goo.gl/f3lH0), a Spring based library we are developing.   --- No further details from [SPR-8304](https://jira.spring.io/browse/SPR-8304?redirect=false)","closed","in: core,","spring-projects-issues","2011-05-06T15:16:52Z","2019-01-12T05:30:23Z"
"","13285","LoadTimeWeavingConfiguration does not AUTODETECT aop.xml [SPR-8643]","**[Lorenzo Acerbo](https://jira.spring.io/secure/ViewProfile.jspa?name=lorenzo.acerbo)** opened **[SPR-8643](https://jira.spring.io/browse/SPR-8643?redirect=false)** and commented  Hi, I was tooling with new version of Spring Framework, specifially I was trying to enable aspectJ load time weaving using `@EnableLoadTimeWeaving` annotation, but I failed. I had No LoadTimeWeaver available error. Having a look at the source code I saw that at line #87 it checks if aop.xml resource is available, and then return. Shouldn't be the opposite?  Regards. Lorenzo   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e5f3559d3bd2f9166d3a6cde7fc4c402bc0b802","closed","in: core,","spring-projects-issues","2011-08-26T09:47:40Z","2012-06-19T03:39:01Z"
"","13579","The key-generator attribute of cache:annotation-driven element does not work when mode attribute is set to ""aspectj"" [SPR-8939]","**[liuchiliang](https://jira.spring.io/secure/ViewProfile.jspa?name=lcl2003536)** opened **[SPR-8939](https://jira.spring.io/browse/SPR-8939?redirect=false)** and commented  I want to use custom keyGenerator when I use aspectj compile-time weaving, but the keyGenerator is always DefaultKeyGenerator. The config is as below:  \               ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c39a14a130cd34cc5fc88fa8775fb5f4f26b6eb0","closed","in: core,","spring-projects-issues","2011-12-16T01:41:09Z","2012-06-19T03:39:29Z"
"","12980","Child ApplicationContext does not inherit parent ApplicationContext's BeanPostProcessor [SPR-8331]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-8331](https://jira.spring.io/browse/SPR-8331?redirect=false)** and commented  Hi,  According to the thread http://forum.springsource.org/showthread.php?11347-Using-PropertyPlaceholderConfigurer-in-servlet.xml , looks like it comes from design that Child ApplicationContext does not extend parent ApplicationContext's BeanPostProcessor.  Can we give an option to Child ApplicationContext to explicitly inherit parent ApplicationContext's BeanPostProcessor. I think it will be useful because sometimes we do want to get parent's BeanPostProcessor. thanks.  David   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-05-11T21:27:17Z","2011-06-02T22:49:16Z"
"","13125","using Spring Framwork 3.0, it works in WAS7.0, when move to WAS 6.1, got 'BeanCreationException' [SPR-8479]","**[Lin Xu](https://jira.spring.io/secure/ViewProfile.jspa?name=lxu_04@yahoo.com)** opened **[SPR-8479](https://jira.spring.io/browse/SPR-8479?redirect=false)** and commented  The application run at WAS v7.0, works. After move to WAS v6.1, got following error:  [Servlet Error]-[Filter [springSecurityFilterChain]: could not be initialized]: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'contactController': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void mil.army.pcmp.ecms.dm.controller.ContactController.setContactService(mil.army.pcmp.ecms.dm.service.ContactService); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'contactService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void mil.army.pcmp.ecms.dm.service.ContactService.setContactDAO(mil.army.pcmp.ecms.dm.dao.ContactDAO); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'contactDAO': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void mil.army.pcmp.ecms.dm.dao.ContactDAO.setSessionFactory(org.hibernate.SessionFactory); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in ServletContext resource [/WEB-INF/spring/db-config.xml]: Invocation of init method failed; nested exception is org.hibernate.HibernateException: Unable to get the default Bean Validation factory at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:286) ...  How to solve these problem? Thanks, Lynn   ---  **Affects:** 3.0.4","closed","status: invalid,","spring-projects-issues","2011-06-22T07:40:19Z","2019-01-12T05:30:08Z"
"","12938","Add expiration time, mode of delivery and priority for the individual message [SPR-8290]","**[Libor Tvrdík](https://jira.spring.io/secure/ViewProfile.jspa?name=libor.tvrdik)** opened **[SPR-8290](https://jira.spring.io/browse/SPR-8290?redirect=false)** and commented  Attached is a patch that adds support for setting the expiration time, mode of delivery and priority for the individual message.  In the +[message specification](http://download.oracle.com/javaee/1.4/api/javax/jms/Message.html)+ is defined method _set/get_ JMSExpiration, JMSDeliveryMode and JMSPriority, which does not use in JmsTemplate.  #### Change code motivation:  We have a mix of permanent and temporary message with a different expiration time. It is not therefore possible to create multiple JMS templates, because the expiration time is different for each message.  #### Change code summary:  1. For each message property is create message specify method in JmsTemplate:  ``` public int getPriority(Message message) throws JMSException {  	int messagePriority = message.getJMSPriority(); 	if (messagePriority == Message.DEFAULT_PRIORITY) { 		messagePriority = getPriority(); 	}  	return messagePriority; } ```  1. In send method is used (only if explicit QOS is enabled) this specific get method:  ``` protected void doSend(MessageProducer producer, Message message) throws JMSException { 	if (isExplicitQosEnabled()) { 		producer.send(message, getDeliveryMode(message), 				getPriority(message), getTimeToLive(message)); 	} 	else { 		producer.send(message); 	} } ```  #### How to use:  1. Create (edit) JMS template. Important property is `explicitQosEnabled` and must be set on **true**  ```xml 	 	 	  ```  1. In code use +[setJMSExpiration(long)](http://download.oracle.com/javaee/1.4/api/javax/jms/Message.html#setJMSExpiration(long))+, +[setJMSPriority(int)](http://download.oracle.com/javaee/1.4/api/javax/jms/Message.html#setJMSPriority(int))+, or +[setJMSDeliveryMode(int)](http://download.oracle.com/javaee/1.4/api/javax/jms/Message.html#setJMSDeliveryMode(int))+ method:  ``` jmsTemplate.send(destinations.get(addressableId), new MessageCreator() {  	@Override 	public javax.jms.Message createMessage(Session session) throws JMSException {  		final javax.jms.Message jmsMessage = session.createObjectMessage(container); 		jmsMessage.setJMSExpiration(1000);  		return jmsMessage; 	} }); ```    ---  **Attachments:** - [springframework_JmsTemplate_send_property_in_message_test.patch](https://jira.spring.io/secure/attachment/18106/springframework_JmsTemplate_send_property_in_message_test.patch) (_20.68 kB_) - [springframework_JmsTemplate_send_property_in_message.patch](https://jira.spring.io/secure/attachment/18105/springframework_JmsTemplate_send_property_in_message.patch) (_7.58 kB_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-03T06:50:23Z","2018-12-27T11:22:08Z"
"","13279","StringUtils.parseLocaleString incorrectly constrains the characters of the variant parts of a locale String [SPR-8637]","**[Liam Hale](https://jira.spring.io/secure/ViewProfile.jspa?name=sourcesmith)** opened **[SPR-8637](https://jira.spring.io/browse/SPR-8637?redirect=false)** and commented  There are no constraints on the variant parts of a locale name (other than '_' being a separator) unlike the country and language parts.  The parseLocaleString method of StringUtils constrains the entire locale String to be letters, digits or separators which is incorrect for the variant parts.  [Note, this changes for JDK7 where the '-' delimits subtags in a locale].   ---  **Affects:** 3.0.6, 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2d9142c5a118e27e724b6574cc4a6ee446e270d, https://github.com/spring-projects/spring-framework/commit/a730bf47dfa6a4fec53dbf76cbcb58493a067a21  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2011-08-25T03:08:05Z","2012-06-19T03:39:45Z"
"","13788","simpleJdbcInsert cannot insert Timestamp field on Oracle [SPR-9150]","**[Li Cao](https://jira.spring.io/secure/ViewProfile.jspa?name=licao)** opened **[SPR-9150](https://jira.spring.io/browse/SPR-9150?redirect=false)** and commented  simpleJdbcInsert cannot insert a Timestamp field. Spring throws exception: org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL []; SQL state [99999]; error code [17004]; Invalid column type; nested exception is java.sql.SQLException: Invalid column type at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:83) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:602) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:842) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertAndReturnKeyHolderInternal(AbstractJdbcInsert.java:445) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertAndReturnKeyInternal(AbstractJdbcInsert.java:426) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.doExecuteAndReturnKey(AbstractJdbcInsert.java:393) at org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeAndReturnKey(SimpleJdbcInsert.java:126) at com.amfam.rrs.common.persistence.IntTestCommonDAO.testRetrieveErrorLog_PrimaryKey(IntTestCommonDAO.java:407) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82) at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: java.sql.SQLException: Invalid column type at oracle.jdbc.driver.OraclePreparedStatement.setObjectCritical(OraclePreparedStatement.java:8516) at oracle.jdbc.driver.OraclePreparedStatement.setObjectInternal(OraclePreparedStatement.java:8034) at oracle.jdbc.driver.OraclePreparedStatement.setObject(OraclePreparedStatement.java:8575) at oracle.jdbc.driver.OraclePreparedStatementWrapper.setObject(OraclePreparedStatementWrapper.java:238) at org.apache.commons.dbcp.DelegatingPreparedStatement.setObject(DelegatingPreparedStatement.java:163) at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:356) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:216) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:144) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.setParameterValues(AbstractJdbcInsert.java:621) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.access$1(AbstractJdbcInsert.java:612) at org.springframework.jdbc.core.simple.AbstractJdbcInsert$1.createPreparedStatement(AbstractJdbcInsert.java:449) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:580) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:842) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertAndReturnKeyHolderInternal(AbstractJdbcInsert.java:445) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertAndReturnKeyInternal(AbstractJdbcInsert.java:426) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.doExecuteAndReturnKey(AbstractJdbcInsert.java:393) at org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeAndReturnKey(SimpleJdbcInsert.java:126)  Code: MapSqlParameterSource namedParameters = new MapSqlParameterSource(); namedParameters.addValue(""ORD_TS"", new Timestamp(1000)); long id = simpleJdbcInsert.executeAndReturnKey(namedParameters).longValue();    ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2012-02-22T07:35:14Z","2019-01-12T16:36:50Z"
"","13261","ContextLoader does not validate ApplicationContextInitializer classes correctly [SPR-8618]","**[Les Hazlewood](https://jira.spring.io/secure/ViewProfile.jspa?name=lhazlewood)** opened **[SPR-8618](https://jira.spring.io/browse/SPR-8618?redirect=false)** and commented  #### Problem  I've implemented an `ApplicationContextInitializer` as follows:  ``` public class MyInitializer implements ApplicationContextInitializer {      public void initialize(ConfigurableApplicationContext appCtx) {         // ...     } } ```  However, when specified in my Spring web app's web.xml:  ```xml      contextInitializerClasses     com.foo.MyInitializer  ```  The application does not start up.  The failure is an Assertion failure, line 467 of 3.1.0.M2's org/springframework/web/context/ContextLoader.java.  The assertion is failing because the `GenericTypeResolver.resolveTypeArgument` call on line 466 returns null for whatever reason (I've clearly implemented the interface properly).  #### Work Around  I created a subclass of ContextLoaderListener that overrides the `customizeContext()` method and retains the same behavior, but does a null check:  ``` Class initializerContextClass =     GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);  //CHANGE STARTS: WRAP IN !NULL CHECK: if (initializerContextClass != null) {     Assert.isAssignable(initializerContextClass, contextClass, String.format(         ""Could not add context initializer [%s] as its generic parameter [%s] "" +         ""is not assignable from the type of application context used by this "" +         ""context loader [%s]"", initializerClass.getName(), initializerContextClass, contextClass)); } //CHANGE ENDS (finish !null check) ```  The !null check is the only addition.  Everything else in the original implementation stayed the same.  After adding this check, the application started as expected.  #### Assumption  It appears there may be a root cause bug with the `GenericTypeResolver`, but I'm not sure.  I have no idea why it returned null when, based on my class/implementation, I clearly implemented the interface (and specified the generics type) correctly.  ---  **Affects:** 3.1 M2  **Issue Links:** - #15082 NPE in the ContextLoader#customizeContext on building Assert.isAssignable message (_**""is superseded by""**_)","closed","in: core,","spring-projects-issues","2011-08-16T13:36:14Z","2019-01-12T16:48:41Z"
"","13746","improve performance of javassist CtMethod.setBody [SPR-9108]","**[lerbscher](https://jira.spring.io/secure/ViewProfile.jspa?name=jpl)** opened **[SPR-9108](https://jira.spring.io/browse/SPR-9108?redirect=false)** and commented  I have to transform several methods in different classes. Each time i call CtMethod.setBordy(String src) the method run in more than 100 to 800 ms. It seems that setBody() recompile the class (declaringClass.rebuildClassFile()). The new content of the method varies depending on an algorithm and cannot be prepared. how can I optimize this code to achieve a single compilation of methods for multiple changes?   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2012-02-10T10:27:49Z","2019-01-12T05:29:14Z"
"","13511","DataSourceTransactionManager assumes that connection is not in transaction but nothing ensures it [SPR-8870]","**[Leonid](https://jira.spring.io/secure/ViewProfile.jspa?name=leonidos@gmail.com)** opened **[SPR-8870](https://jira.spring.io/browse/SPR-8870?redirect=false)** and commented  DataSourceTransactionManager.doBegin() assumes that connection it passes to DataSourceUtils.prepareConnectionForTransaction() is not in transaction but really nothing does guaranntee it. In case of PostgreSQL this causes an exception:  org.postgresql.util.PSQLException: Cannot change transaction isolation level in the middle of a transaction. at org.postgresql.jdbc2.AbstractJdbc2Connection.setTransactionIsolation(AbstractJdbc2Connection.java:783) at org.apache.commons.dbcp.DelegatingConnection.setTransactionIsolation(DelegatingConnection.java:380) at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.setTransactionIsolation(PoolingDataSource.java:343) at org.apache.commons.dbcp.DelegatingConnection.setTransactionIsolation(DelegatingConnection.java:380) at org.springframework.jdbc.datasource.DataSourceUtils.prepareConnectionForTransaction(DataSourceUtils.java:174) at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:210) ... 38 more   ---  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-11-22T13:40:28Z","2019-01-12T02:36:50Z"
"","16196","Specify URL encoding on RestTemplate postForObject [SPR-11572]","**[Leonard Saers](https://jira.spring.io/secure/ViewProfile.jspa?name=flow)** opened **[SPR-11572](https://jira.spring.io/browse/SPR-11572?redirect=false)** and commented  Thanks for a great work, and a grate framework.  It would be nice if it also was possible to specifying which URL encoding to use.  > Eg. > The following call will now encode in Unicode. ø will be encoded as %F8 > `templateResult = template.postForObject(uri, parameters, DOMSource.class);`  Suggestion, make it possible to specify encoding:  > Eg. > The follwing call should then encode in UTF-8. ø will be encoded as %C3%B8 > `templateResult = template.postForObject(uri, parameters, DOMSource.class,""UTF-8"");`  To encode as UTF-8, The only solution now is to build and encode the URL as UTF-8. Then use:  > `templateResult = template.getForObject(uri, DOMSource.class);`  But this approach will not allow one to send UTF-8 encoded post data.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?110703-Change-RestTemplate-URL-encoding","closed","status: bulk-closed,","spring-projects-issues","2011-06-29T08:03:08Z","2020-04-10T05:49:29Z"
"","13168","AbstractCachingViewResolver does not cache negative lookups [SPR-8524]","**[Leon Stein](https://jira.spring.io/secure/ViewProfile.jspa?name=leons727)** opened **[SPR-8524](https://jira.spring.io/browse/SPR-8524?redirect=false)** and commented  If a view is missing, AbstractCachingViewResolver will keep trying to resolve it on each request. This may cause significant performance impact for views that are supposed be resolved by a subsequent resolver(s). See attached patch with a simple fix.  ---  **Affects:** 3.0.5, 3.1 RC1  **Attachments:** - [AbstractCachingViewResolver.patch](https://jira.spring.io/secure/attachment/18470/AbstractCachingViewResolver.patch) (_491 bytes_)  **Issue Links:** - #12824 AbstractCachingViewResolver does not query cache correctly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0032f43c7df4dded482c6ea269386e7d64e43e4, https://github.com/spring-projects/spring-framework/commit/98ad8633bd22e28e4705ee72e73d6d862fe6e8d2  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-07-11T10:32:08Z","2019-01-11T13:19:32Z"
"","13458","Can't get real ID of the application context in ApplicationContextAware.setApplicationContext() [SPR-8816]","**[Leo Liang](https://jira.spring.io/secure/ViewProfile.jspa?name=aleung)** opened **[SPR-8816](https://jira.spring.io/browse/SPR-8816?redirect=false)** and commented  I create a bean to implement the ApplicationContextAware interface and print out the current context id. But the id isn't the one I specify in xml, it's a generated one like ""org.springframework.context.support.ClassPathXmlApplicationContext@15e9756"". At the same place I print the id of the parent context, it's the real one.  I guess that reason is: at the time when ApplicationContextAware is invoked, id isn't set yet. Can it be changed so that real context id can be retrieve in ApplicationContextAware?  == Java code:  public class ApplicationContextDumper implements ApplicationContextAware { `@Override` public void setApplicationContext(ApplicationContext context) throws BeansException { String appContextInfo = String.format(""ApplicationContext %s"", context.getId()); ApplicationContext parent = context.getParent(); if (parent != null) { appContextInfo += String.format("" -> %s"", parent.getId()); } System.out.println(appContextInfo); } }  public class TestMain { public static void main(String[] args) { String[] paths = { ""classpath:**/beanRefContext.xml"" }; new ClassPathXmlApplicationContext(paths); } }  == beanRefContext.xml: ... \ \ \ \classpath:**/parentContext.xml\ \ \ \ \ \ \ \classpath:**/applicationContext.xml\ \ \ \ \ \ \ ...  == applicationContext.xml: ... \ ...  == Expected output:  ApplicationContext myBeanFactory -> parentBeanFactory  == Actual output:  ApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext@15e9756 -> parentBeanFactory    ---  **Affects:** 3.0.6","closed","type: enhancement,","spring-projects-issues","2011-11-03T23:52:15Z","2011-11-21T14:51:29Z"
"","13814","Scoped-proxy memory leak w/ @Resource injection [SPR-9176]","**[Leigh Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=bravesirrobin)** opened **[SPR-9176](https://jira.spring.io/browse/SPR-9176?redirect=false)** and commented  New entries are added to dependentBeanMap and dependenciesForBean map every time that a new instance of the request-scoped bean is created. This is because the proxy object representing the HttpServletRequest has a bean name like ""$Proxy10@XXXXX"" where XXXXX changes for each request. These entries are never removed, and eventually fill up the old generation.  Attached is a web application which demonstrates the issue. Visit ""http://localhost:8080/leak"" repeatedly and watch the count increase.  ---  **Affects:** 3.0.5  **Attachments:** - [dridi-spring-9176-quickfix.patch](https://jira.spring.io/secure/attachment/19566/dridi-spring-9176-quickfix.patch) (_1.74 kB_) - [request-memory-leak.tar.gz](https://jira.spring.io/secure/attachment/19459/request-memory-leak.tar.gz) (_3.41 kB_)  **Sub-tasks:** - #14000 Backport ""Scoped-proxy memory leak w/ `@Resource` injection""  **Issue Links:** - #12420 memory leak occurs in SpringMVC(DefaultListableBeanFactory.dependentBeanMap, DefaultListableBeanFactory.dependenciesForBeanMap)  (_**""is duplicated by""**_) - #14261 Regression: scoped beans being cached too aggressively  3 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2012-02-28T04:09:05Z","2019-01-13T07:06:02Z"
"","12916","Typo in documentation [SPR-8268]","**[Lauri Lehtinen](https://jira.spring.io/secure/ViewProfile.jspa?name=llehtinen)** opened **[SPR-8268](https://jira.spring.io/browse/SPR-8268?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html  ""through"" is spelled as ""throuch"":  You may register aspect classes as regular beans in your Spring XML configuration, or autodetect them throuch classpath scanning - just like any other Spring-managed bean.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/88e2277bfff54c27fbd9546bd76bf35feb0e8f9a","closed","type: bug,","spring-projects-issues","2011-04-22T00:48:08Z","2012-06-19T03:39:15Z"
"","13301","Improve javadoc for SimpleTypeConverter: it has no information that this class is not thread-safe [SPR-8659]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-8659](https://jira.spring.io/browse/SPR-8659?redirect=false)** and commented  SimpleTypeConverter is not thread-safe . There is no information about this in the javadoc of [SimpleTypeConverter](http://static.springsource.org/spring/docs/3.1.0.M2/javadoc-api/org/springframework/beans/SimpleTypeConverter.html)  The only place where it is mentioned is in [AbstractBeanFactory.getTypeConverter()](http://static.springsource.org/spring/docs/3.1.0.M2/javadoc-api/org/springframework/beans/factory/support/AbstractBeanFactory.html#getTypeConverter())  > ""TypeConverters are usually not thread-safe."" > It might be worth mentioning this in the javadoc of TypeConverter too.  We noticed that SimpleTypeConverter is not thread safe in a load test of Grails: http://jira.grails.org/browse/GRAILS-7974   ---  **Affects:** 3.1 M2","closed","type: task,","spring-projects-issues","2011-08-31T03:49:39Z","2013-01-24T02:18:03Z"
"","12931","ServletContextResourceLoader performance problem: creates a lot of MalformedURLExceptions (""no protocol"") in normal operation [SPR-8283]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-8283](https://jira.spring.io/browse/SPR-8283?redirect=false)** and commented  The performance of ServletContextResourceLoader.getResource is very bad because it creates a MalformedURLException in normal operation. I've noticed this problem in Grails webapplications.  Creating exceptions are costly because filling the stack trace of the exception takes relatively a lot of cpu.  There should be a better way to check url validity (without exceptions). In commons-validator there is org.apache.commons.validator.routines.UrlValidator , but I guess a simple check in ServletContextResourceLoader.getResource should be ok. (if path starts with '/' , prefer getResourceByPath)   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f3884084f27d9058d6a56cf27d695b373e203e7c","closed","type: enhancement,","spring-projects-issues","2011-04-28T06:32:51Z","2014-03-26T22:34:10Z"
"","13292","Some methods in org.springframework.jdbc.core.namedparam.ParsedSql need accessed outside the package. [SPR-8650]","**[L.J.W](https://jira.spring.io/secure/ViewProfile.jspa?name=likebean)** opened **[SPR-8650](https://jira.spring.io/browse/SPR-8650?redirect=false)** and commented  Some methods in org.springframework.jdbc.core.namedparam.ParsedSql need accessed outside the package,such as getParameterNames method and other getXXX methods.   ---  **Affects:** 3.0.6, 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-08-29T22:20:04Z","2015-09-22T16:55:22Z"
"","13808","Consider moving Spring Batch Retry package into Spring Core [SPR-9170]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-9170](https://jira.spring.io/browse/SPR-9170?redirect=false)** and commented  I think it would be a really-really good idea to move _org.springframework.batch.retry_ into _org.springframework.core.retry_. It is really well-thought out and useful API, a true gem. I can't believe I haven't noticed it in all these years of using Spring. The API contain no conceptual dependencies on batch infrastructure and they should really be moved into the core.  ---  **Affects:** 3.1.1  **Issue Links:** - #9531 Migrate Repeat and Retry from Spring Batch (_**""duplicates""**_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-26T18:49:22Z","2019-01-11T22:17:06Z"
"","13612","JDBC XML schema refers to a non-existing class EmbeddedDataSourceFactoryBean [SPR-8972]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-8972](https://jira.spring.io/browse/SPR-8972?redirect=false)** and commented  JDBC XML schema appears to refer to an non-existing class: _org.springframework.jdbc.embedded.EmbeddedDataSourceFactoryBean_  ```    	 	  	 		 			 ```  Please adjust appropriately. Such inconsistency make it harder to understand actual bean initialization flow.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/adac38f91b0d023db35926ca7d016f6465c78868","closed","type: bug,","spring-projects-issues","2011-12-29T11:33:01Z","2012-06-19T03:39:20Z"
"","13601","Regression: please expose Configuration object in Hibernate 4 LocalSessionFactoryBean  [SPR-8961]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-8961](https://jira.spring.io/browse/SPR-8961?redirect=false)** and commented  Please expose Hibernate's _org.hibernate.cfg.Configuration_ object in the newly added _org.springframework.orm.hibernate4.LocalSessionFactoryBean_ class.  Previous version _org.springframework.orm.hibernate3.LocalSessionFactoryBean_ clearly does it through its _#getConfiguration_ method. Today _LocalSessionFactoryBuilder_ (i.e. Spring's extension of Hibernate's _Configuration_ class) is only a local variable in the _#afterPropertiesSet_ method.  This is actually a very important piece of functionality for us.  Thank you!    ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2011-12-26T13:08:30Z","2019-01-11T14:31:32Z"
"","13098","Expose statusCodes field in SimpleMappingExceptionResolver as a read-only map. [SPR-8452]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-8452](https://jira.spring.io/browse/SPR-8452?redirect=false)** and commented  We have a good use cases where we'd like to know programmatically which views are mapped to what HTTP status code in SimpleMappingExceptionResolver. For example, we'd like to redirect standard Tomcat error pages to a Spring controller that would determine what view to send it to. As in a web.xml:  ```          500         /springApp/error/500                   404         /springApp/error/404      ```  This effectively becomes impossible to do with current SimpleMappingExceptionResolver (unless we resort to reflection).   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/54c82a53cd5e153b023888baa9e6c9fbf7d8fce8","closed","type: enhancement,","spring-projects-issues","2011-06-13T16:13:25Z","2019-01-11T13:35:50Z"
"","13538","org.springframework.web.WebApplicationInitializer's Javadoc missed a semi-colon; [SPR-8897]","**[Kwangyong Jin](https://jira.spring.io/secure/ViewProfile.jspa?name=doneer)** opened **[SPR-8897](https://jira.spring.io/browse/SPR-8897?redirect=false)** and commented  org.springframework.web.WebApplicationInitializer's Javadoc have three examples. The second example's ""The code-based approach with WebApplicationInitializer"" missed a semi-colon.  code XmlWebApplicationContext appContext = new XmlWebApplicationContext() *(miss -> *   ---  **Affects:** 3.1 RC1, 3.1 RC2","closed","type: bug,","spring-projects-issues","2011-12-05T18:08:51Z","2012-06-19T03:39:28Z"
"","13731","org.springframework.web.util.UriTemplate not throwing IllegalArgumentException when URIVariables map missing values [SPR-9093]","**[Kurt Paulson](https://jira.spring.io/secure/ViewProfile.jspa?name=metalpegleg)** opened **[SPR-9093](https://jira.spring.io/browse/SPR-9093?redirect=false)** and commented  The following test fails in with spring-web 3.1.  ``` @Test(expected=IllegalArgumentException.class) public void testURIExpand() { 	String template = ""http://{host}/{something}/{something2}""; 	UriTemplate t = new UriTemplate(template); 	Map uriVariables = new HashMap(); 	uriVariables.put(""host"", ""a""); 	uriVariables.put(""something2"", ""b""); 	t.expand(uriVariables); } ```  Using spring-web 3.0.5 an IllegalArgumentException with message ""'uriVariables' Map has no value for 'something'"" is thrown.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3ec78e2c0429ec3a5f76bbe2358a65638d57f0b1","closed","type: bug,","spring-projects-issues","2012-02-06T07:35:45Z","2012-06-19T03:39:42Z"
"","13179","packages listed in component-scan in applicationContext.xmls must be on a single line- newlines and whitespaces in URL otherwise [SPR-8535]","**[Konstantinos Pachopoulos](https://jira.spring.io/secure/ViewProfile.jspa?name=nocturna_gr)** opened **[SPR-8535](https://jira.spring.io/browse/SPR-8535?redirect=false)** and commented  Hi, if one lists packages in a ""component-scan"" in an applicationContext.xml file and uses newlines/tabs for readability between, the locationPattern will look like this ""classpath*:   com/yyy/xxx/xxx/**/**.class"" and not like this ""classpath**:com/lhs/ccb/sfw/**/*.class"". This can be seen in PathMatchingResourcePatternResolver.findPathMatchingResources(String). This will cause the URL of the class to include whitespaces. The class will not be found and the beans will not be loaded.  Thanks, K   ---  **Affects:** 2.5 final","closed","status: bulk-closed,","spring-projects-issues","2011-07-14T10:24:30Z","2019-01-12T03:49:36Z"
"","13470","Using DataBinder with an auto-growing list is broken [SPR-8828]","**[Konstantin Kolinko](https://jira.spring.io/secure/ViewProfile.jspa?name=kkolinko)** opened **[SPR-8828](https://jira.spring.io/browse/SPR-8828?redirect=false)** and commented  In our web application we use an auto-growing list that grows on get() operation. We use data binding to map request parameters to fields of a form, and one field contains such a list. For example, a field with name ""f[list][0]"" will map to the 0th element of the list, if form element getF().get(""list"") is the list.  The application did work successfully in 3.0.5.RELEASE, but is failing in 3.0.6.RELEASE.  I am attaching JUnit test case that reproduces the issue.  **Expected result:**  JUnit test passes  **Actual result in 3.0.6.RELEASE:**  Data binding succeeds, but result validation fails: java.lang.AssertionError: expected:\ but was:\ at bugreport.GrowingListDataBinderRegression.testDataBinding(GrowingListDataBinderRegression.java:133)  The list contents after data binding was expected to be [""firstElement"", ""secondElement""], but the actual contents is [null, ""secondElement""]. Both values were assigned to the same position in the list and only the second one survived.  **Actual result in 3.1.0.RC1:**  Data binding fails: java.lang.IllegalStateException: Not a collection, array, or map: cannot resolve nested value types  **Result of debugging in 3.0.6.RELEASE:**  The problem is in class org.springframework.beans.BeanWrapperImpl in method setPropertyValue(PropertyTokenHolder,PropertyValue)  There is the following code in the ""if (propValue instanceof List)"" branch:  980: int size = list.size(); 981: Object oldValue = null; 982: if (isExtractOldValueForEditor() && index < size) { 983:    oldValue = list.get(index); 984: } 985: Object convertedValue = convertIfNecessary(...); 986: 987: if (index >= size && index < this.autoGrowCollectionLimit) { ... 999:    list.add(convertedValue); 1000: } 1001: else { ... 1003:   list.set(index, convertedValue); ... 1009: }  The problem is that list size is calculated on line 980 and remembered and is later used to decide whether to call list.add() or list.set(). If I start with empty list and there is incoming request parameter with name ""f[list][0]"", the list size on line 981 is evaluated to be zero.  The list.get() call on line 983 is skipped thanks to (&& index < size) check, but on line 985 the convertIfNecessary() call does its own getProperty() call and calls list.get(0) and that creates 0th element of the list. I will cite the stacktrace of that call below.  When we are on line 987 the value of size variable is still 0, but the list already contains one element. Execution continues to line 999, where list.add() is called. When the method returns, the list contains two elements [null, ""firstElement""] instead of just one [""firstElement""].  If anyone is curious, the list.get() call performed inside of convertIfNecessary() has the following stack trace:  > Thread [main] (Suspended (breakpoint at line 790 in BeanWrapperImpl))	 > BeanWrapperImpl.getPropertyValue(BeanWrapperImpl$PropertyTokenHolder) line: 790	 > BeanWrapperImpl.getPropertyValue(String) line: 718	 > BeanWrapperImpl.getPropertyType(String) line: 366	 > BeanWrapperImpl(PropertyEditorRegistrySupport).findCustomEditor(Class, String) line: 341	 > TypeConverterDelegate.convertIfNecessary(String, Object, Object, Class\, TypeDescriptor) line: 134	 > BeanWrapperImpl.convertIfNecessary(String, Object, Object, Class, TypeDescriptor) line: 466	 > BeanWrapperImpl.setPropertyValue(BeanWrapperImpl$PropertyTokenHolder, PropertyValue) line: 985  **Proposed fix:**  Add  size = list.size();  call before line 987 in class BeanWrapperImpl.   ---  **Affects:** 3.0.6, 3.1 RC1  **Attachments:** - [GrowingListDataBinderRegression.java](https://jira.spring.io/secure/attachment/19102/GrowingListDataBinderRegression.java) (_3.04 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8213d0cb504b1c73cbb0df028a9745b0cb4a7e5a, https://github.com/spring-projects/spring-framework/commit/569426dfdfec186e98a6ae4bd8ebf946720206b1  **Backported to:** [3.0.7](https://github.com/spring-projects/spring-framework/milestone/74?closed=1)","closed","in: core,","spring-projects-issues","2011-11-08T14:02:15Z","2012-06-19T03:39:07Z"
"","13657","EL not evaluated in mvc:mapping element inside mvc:interceptor  [SPR-9018]","**[Konrad Hosemann](https://jira.spring.io/secure/ViewProfile.jspa?name=konz)** opened **[SPR-9018](https://jira.spring.io/browse/SPR-9018?redirect=false)** and commented  In Spring MVC XML configuration a otherwise valid EL expression is not evaluated when used as path attribute in an `mvc:mapping` element.  See the attached example: The interceptor writes to system out when intercepting `/app/**`. Switch between the EL expression and the plain path for the interceptor mapping in `servlet-context.xml` and the interceptor will be mapped when using the plain text but not when using the EL expression, which resolves to the same value.   ---  **Affects:** 3.0.7, 3.1 GA  **Attachments:** - [interceptor-configuration.tar.gz](https://jira.spring.io/secure/attachment/19296/interceptor-configuration.tar.gz) (_3.28 kB_)","closed","type: enhancement,","spring-projects-issues","2012-01-11T13:21:57Z","2015-09-22T20:45:18Z"
"","13598","Regression: SpringValidatorAdapter generates invalid error codes for class-level constraints [SPR-8958]","**[Konrad Hosemann](https://jira.spring.io/secure/ViewProfile.jspa?name=konz)** opened **[SPR-8958](https://jira.spring.io/browse/SPR-8958?redirect=false)** and commented  When using class-level validation annotations the returned codes differ from those returned in 3.0.6.  **3.1:**  ``` Constraint.object. Constraint. Constraint ```  **3.0.6:**  ``` Constraint.object Constraint ```  Please see the attached example: switch to Spring 3.0.6 in the pom and the test turns green.   ---  **Affects:** 3.1 GA  **Attachments:** - [spring-validation-regression.tar.gz](https://jira.spring.io/secure/attachment/19246/spring-validation-regression.tar.gz) (_2.38 kB_)","closed","in: core,","spring-projects-issues","2011-12-23T11:35:58Z","2012-06-19T03:39:00Z"
"","12906","Update EhCacheFactoryBean to support current releases (2.4.x) [SPR-8258]","**[Klaus UNGER](https://jira.spring.io/secure/ViewProfile.jspa?name=ukcavediver)** opened **[SPR-8258](https://jira.spring.io/browse/SPR-8258?redirect=false)** and commented  The Spring Framework currently comes with kind of outdated EhCache support! There where big enhancements in EhCache recently! Developers should have the ability to choose also current versions!   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2b79c80b03d18d2a7d5767cc3ac482ccfefedd8  3 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-18T00:55:07Z","2019-01-09T10:21:09Z"
"","13081","java.lang.IncompatibleClassChangeError  --> with new Version Of Quartz (2.0.0) !!! [SPR-8435]","**[kh sam](https://jira.spring.io/secure/ViewProfile.jspa?name=boolsam)** opened **[SPR-8435](https://jira.spring.io/browse/SPR-8435?redirect=false)** and commented  Hello I have this exception when use spring (all version) with the new version of Quartz (2.0.0) :  java.lang.IncompatibleClassChangeError: class org.springframework.scheduling.quartz.JobDetailBean has interface org.quartz.JobDetail as super class at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:616) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124) at java.net.URLClassLoader.defineClass(URLClassLoader.java:260) at java.net.URLClassLoader.access$000(URLClassLoader.java:56) at java.net.URLClassLoader$1.run(URLClassLoader.java:195) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:188) at java.lang.ClassLoader.loadClass(ClassLoader.java:303) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) at java.lang.ClassLoader.loadClass(ClassLoader.java:248) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:316) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:247) at org.springframework.util.ClassUtils.forName(ClassUtils.java:88) at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(BeanDefinitionReaderUtils.java:65) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:369) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:335) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:266) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:186) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:246) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:163) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:125) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:141) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:113) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:81) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:89) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:268) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:81) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:66) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:513) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:75) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:669) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:329) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:275) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.initializeDefinition(SingletonBeanFactoryLocator.java:502) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:386) . . .  There is an incompatibility between spring all version and new Version of QUARTZ because all version of spring use an super class  public class JobDetailBean extends JobDetail { }  and ""JobDetail""   in the new version of Quartz is an Interface !!!  I'm really stuck, is there a new verion that solves this PB,  thanks  ---  **Issue Links:** - #12923 Support Quartz 2.0.x (_**""duplicates""**_) - #13225 Spring should support Quartz 2.0 CronTrigger interface","closed","status: duplicate,","spring-projects-issues","2011-06-10T07:53:42Z","2019-01-12T16:48:48Z"
"","13758","util:map Changes Keys [SPR-9120]","**[Kevin LaVergne](https://jira.spring.io/secure/ViewProfile.jspa?name=klavergne)** opened **[SPR-9120](https://jira.spring.io/browse/SPR-9120?redirect=false)** and commented  When using util:map to create a Map and the values are references to existing beans, the resulting Map contains keys that are the ids of the beans that were added as values instead of whatever keys added in the XML configuration.  Example:  ```xml        ```  The key in the Map that is created is not ""abc1"" as expected, but it actually is ""myABC"".  The same thing happens when the bean is created inside the entry:  ```xml              ```    ---  **Affects:** 3.1 GA","closed","in: core,","spring-projects-issues","2012-02-14T13:36:36Z","2019-01-12T05:29:11Z"
"","13131","Spring MVC form binding tags for new HTML5 form field types would be nice [SPR-8485]","**[Kent Rancourt](https://jira.spring.io/secure/ViewProfile.jspa?name=krancour)** opened **[SPR-8485](https://jira.spring.io/browse/SPR-8485?redirect=false)** and commented  HTML5 supports a variety of new form field input types such as ""email,"" ""tel,"" and ""date"" (to name a few).  e.g.   In all known cases, browsers that don't understand these new field types gracefully degrade to type ""text.""  Since these new field types permit modern browsers (especially mobile browsers) to handle certain fields in a special manner (e.g. bring up different variant of on-screen keyboard conducive to the type of field being edited) and because they degrade gracefully, they're quickly becoming popular to use, but unfortunately, Spring MVC's form-binding tags don't currently permit use of these new field types.  i.e. there is no  or  tag.  It seems it would be rather simple to include these by extending org.springframework.web.servlet.tags.form.InputTag to change the field type, in much the same way that org.springframework.web.servlet.tags.form.PasswordInputTag already does.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13336 Duplicate ""type"" attribute rendered in JSP InputTag  8 votes, 14 watchers","closed","type: enhancement,","spring-projects-issues","2011-06-24T12:05:31Z","2019-01-11T13:09:30Z"
"","13710","Redirect views mangle extended UTF-8 Characters [SPR-9072]","**[Kenneth DeLong](https://jira.spring.io/secure/ViewProfile.jspa?name=kdelong)** opened **[SPR-9072](https://jira.spring.io/browse/SPR-9072?redirect=false)** and commented  Our application has URLs that are in many languages, including Arabic, Chinese, and Russian.  The URLs may contain these extended characters, e.g. /thread/13741/%D8%A8%D8%AF%D9%87%D8%A7-%D8%B5%D8%A8%D8%B1.  In our controller, we return a view name of return ""redirect:"" + uri; Where the variable ""uri"" is a java.lang.String of the form ""/thread/13741/\"".  The view resolution framework does not handle this well, it totally mangles the Arabic characters, turning them into something like /thread/13741/%28/G%27-5%281.  RedirectView (and friends) should properly percent-encode the string before issuing the redirect.   ---  **Affects:** 3.1 GA","closed","status: declined,","spring-projects-issues","2012-01-30T15:24:26Z","2019-01-12T16:36:56Z"
"","13445","UriComponentsBuilder should also contain subtractive methods [SPR-8803]","**[Kenneth DeLong](https://jira.spring.io/secure/ViewProfile.jspa?name=kdelong)** opened **[SPR-8803](https://jira.spring.io/browse/SPR-8803?redirect=false)** and commented  UriComponentsBuilder should have methods also to subtract and remove items from the URI.  For example, I might want to take the current URL and remove the pagination parameter from the URL:  ```java UriComponentsBuilder.parse(request).removeParameter(""page"").build(); ```  Also, I might want to change the UriPath  ```java UriComponentsBuilder.parse(request).removeParameter(""page"").setUriPath(""/new/path"").build(); ```  The advantage of this is we might want to keep the incoming request's DNS name, port, scheme, etc.  This is a portable way of constructing URLs across environments (dev/qa/staging/prod).  URLs are not always used for redirecting etc.  I might need to send out an email with a link to some page on the site.  I could use the above functionality to construct a URL with the correct port, scheme, etc. in a simple portable fashion.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13465 Add ServletUriComponentsBuilder  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a39f34d33b0ce0e2ba6ad10571c8df10fce0f91, https://github.com/spring-projects/spring-framework/commit/d3f4c69f00b1fcf52a070e217b26c0ea1cd0ea53","closed","type: enhancement,","spring-projects-issues","2011-10-26T19:47:55Z","2019-01-11T14:41:23Z"
"","13444","Expose BeanDefinitionRegistry in Java Config [SPR-8802]","**[Kenneth DeLong](https://jira.spring.io/secure/ViewProfile.jspa?name=kdelong)** opened **[SPR-8802](https://jira.spring.io/browse/SPR-8802?redirect=false)** and commented  Some problems require the creation of multiple beans by a single configuration method.  For example, creating dynamically configured multi-tenancy applications (see http://www.jroller.com/kenwdelong/entry/multi_tenancy_using_spring_and) where a single Java method may need to produce multiple objects.  It would be very useful to be able to grab a BeanDefinitionRegistry and add multiple beans.  Even better would be the ability to return a Map from an `@Beans` method where the key of the map is a bean name and the value is the bean itself.   ---  **Affects:** 3.1 RC1  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-10-26T19:38:43Z","2018-12-27T12:04:26Z"
"","13737","Change StringHttpMessageConverter.DEFAULT_CHARSET value to UTF-8 [SPR-9099]","**[Kenan Sevindik](https://jira.spring.io/secure/ViewProfile.jspa?name=ksevindik)** opened **[SPR-9099](https://jira.spring.io/browse/SPR-9099?redirect=false)** and commented  When our REST services are accessed via browser, like firefox, we are having trouble returning content having some Turkish (ISO-8859-9) characters (\u0131\u0130\u015f\u015e\u011f\u011e) even though user's preferred language is TR.  The problem is that StringHttpMessageConverter.DEFAULT_CHARSET value is ISO-8859-1 by default, and it is used if Accept header of current request doesn't contain charset=XXX parameter. It is easy to provide custom Accept Header value while using RestTemplate, however when we try to access or REST services via browser like firefox it is not possible (without an add on) as far as I know.  If DEFAULT_CHARSET value were UTF-8, instead of ISO-8859-9, the problem would gone away. Another option would be to provide a way to configure this property via a setter method as well. To me, it is better to change it into UTF-8 unless there is a special meaning of making it ISO-8859-1.  ---  **Affects:** 3.1 GA  **Issue Links:** - #13734 StringHttpMessageConverter should use HttpServletRequest encoding for POST body","closed","type: enhancement,","spring-projects-issues","2012-02-08T01:52:20Z","2019-01-11T22:26:49Z"
"","13502","Possible Bug - Why doesn't Spring MVC throw an error when you POST to a controller action that accepts HTTP GET? [SPR-8860]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-8860](https://jira.spring.io/browse/SPR-8860?redirect=false)** and commented  I just noticed a weird problem as I've been testing my application. I was accidentally POSTing to a method that accepts HTTP GET (It was a typo - I'm a little tired), but the weird thing is that Spring was executing a GET action anyway - it wasn't throwing an error.  Here is the mapping for my GET action that I was POSTing to instead:  ```java @RequestMapping(value = ""/partialMapping/{partialMappingId}/edit"", method = RequestMethod.GET) public ModelAndView edit(@PathVariable long partialMappingId) {     return new ModelAndView(view(""edit""), ""partialMapping"", 	partialMappingService.findPartialMapping(partialMappingId)); } ```  What I would have expected was for Spring to say, ""There is no action called /partialMapping/{partialMappingId}/edit for HTTP POST"".  Instead... if you use the `HandlerAdapter` and pass it ""POST"" and ""/partialMapping/1/edit"", it runs my `index` action instead (""/partialMapping""). It doesn't throw an error. Why?  Is this a bug in spring, or is this desired behaviour? It's not a big deal when it comes to production code, but it surely makes debugging problems harder.   --- No further details from [SPR-8860](https://jira.spring.io/browse/SPR-8860?redirect=false)","closed","in: web,","spring-projects-issues","2011-11-18T09:57:03Z","2019-01-11T14:43:11Z"
"","13435","@DateTimeFormat produces off-by-one errors in the ""day"" part of the date for both java sdk (linux) and joda time [SPR-8793]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-8793](https://jira.spring.io/browse/SPR-8793?redirect=false)** and commented  I am using this annotation to define the format for a date  `@DateTimeFormat`(pattern = ""MM/dd/yyyy"")  I have used this for a regular jdk Date object as well as a LocalDate object in Joda Time.  Unfortunately, whenever spring parses a date that was given via user input, it does some funky thing with the time-zomes or something. So if you enter ""10/19/2001"", it sets the date to ""10/18/2001 20:00:00"" (as seen in the database).  I thought moving to Joda Time and using LocalDate would fix this problem, but that hasn't happened... so I suspect the problem is with SimpleTimeFormat or the Spring Framework itself - I don't know.  Anyway, regardless of who's fault it is, ultimately since it's your annotation, the responsibility probably lies with you guys. Maybe don't use SimpleDateFormat anymore? I'm not sure.  Regardless, this is pretty critical for me. I do not care about timezones in this application. I do not want to deal with the complexity of time zones at all - the date is sufficient exactly as the user has entered it. Unfortunately, there's no way to configure this annotation to deal with timezones, nor is there a way to get it parsed to ignore timezone conversions and simply create a date that actually is what it says.  Thanks   ---  **Affects:** 3.0.5","closed","","spring-projects-issues","2011-10-20T09:23:20Z","2019-01-11T14:10:38Z"
"","13307","Did spring framework 3.0.6 break property editor support for List's? If so, here's a new bug that was created. [SPR-8665]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-8665](https://jira.spring.io/browse/SPR-8665?redirect=false)** and commented  I have an application that I've recently upgraded to 3.0.6 from 3.0.5. The application used a property editor to convert a String to a List of objects, back and forth.  I am positive this code used to work. In fact, the unit tests for the property editor continue to work as expected.  However, whenever a controller uses the property editor, it wraps the List of objects with ANOTHER list, which is absolutely not what we want to happen. Did they change how property editors work? How do I fix it?  My init binder method looks like this:  ``` @InitBinder public void initBinder(WebDataBinder binder) {      binder.registerCustomEditor(List.class, new UsernamesToRecipientsEditor(userAccountDao)); } ```  Because java is weakly typed when it comes to List, I want you to know that this is really a `List` and not just a List of any random object. Here is the property editor code:  ``` public class UsernamesToRecipientsEditor extends PropertyEditorSupport {          private UserAccountDao dao;          public UsernamesToRecipientsEditor(UserAccountDao dao) {                   this.dao = dao;          }          @Override          public String getAsText() {                   Object obj = getValue();                   if(obj == null) {                            return """";                   }                   if(obj instanceof List) {                            List recipients = (List) obj;                            StringBuilder builder = new StringBuilder();                            for(Iterator iterator = recipients.iterator(); iterator.hasNext();) {                                     Recipient recipient = iterator.next();                                     builder.append(recipient.getUserAccount().getUsername());                                     if(iterator.hasNext()) {                                                  builder.append("", "");                                     }                            }                            return builder.toString();                   }                   throw new IllegalArgumentException(""Value must be a UserAccount"");          }          @Override          public void setAsText(String text) {                   List recipients = new ArrayList();                   if(!StringUtils.hasText(text)) {                            setValue(recipients);                            return;                   }                   for(String username : StringUtils.commaDelimitedListToSet(text)) {                            UserAccount userAccount = dao.findByUsername(username.trim());                            if(userAccount != null) {                                     Recipient recipient = new Recipient(userAccount);                                     if(!containsRecipient(recipients, recipient)) {                                                  recipients.add(recipient);                                     }                            }                   }                   setValue(recipients);          }          private boolean containsRecipient(List recipients, Recipient recipient) {                   for(Recipient r : recipients) {                            if(r.getUserAccount().getId() == recipient.getUserAccount().getId()) return true;                   }                   return false;          } } ```  Basically what this code does is it converts a string containing a bunch of username's separated by commas and converts them to the actual user objects, back and forth between them. It works in unit tests, and this worked in the past.  Unfortunately, after Spring MVC calls into this property editor, it wraps the result from `setValue(recipients)` inside of ANOTHER List... so the end result is a ""List of a List of Recipients"". This isn't what I want.  Since this code above USED TO work, I have to conclude that some bug or behavioral change has happened. Please help.  ---  **Affects:** 3.0.6  **Reference URL:** http://stackoverflow.com/questions/7293928/did-spring-framework-3-0-6-break-property-editor-support-for-lists  **Issue Links:** - #13316 Collection Binding broken - TypeConverterDelegate does bind Collection Elements to Collection type instead of the collection elements Type (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2011-09-03T08:29:42Z","2019-01-12T16:48:39Z"
"","13712","Spring MVC resources handler generates a 500 internal error when accessing a directory resource [SPR-9074]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9074](https://jira.spring.io/browse/SPR-9074?redirect=false)** and commented  Would expect a 404 not a 500. Here is an example:  ``` java.io.FileNotFoundException: Could not open ServletContext resource [/static/libs/webshims/1.8.7] 	at org.springframework.web.context.support.ServletContextResource.getInputStream(ServletContextResource.java:118) 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:240) 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:141) 	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900) ```  ---  **Affects:** 3.1 GA  **Issue Links:** - #13706 ServletContextResource.isReadable() returns ""true"" for directories (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-01-30T23:00:17Z","2019-01-12T16:48:16Z"
"","13709","JdbcTemplate queryForObject variants that return NULL instead of throwing an EmptyResultDataAccessException [SPR-9071]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9071](https://jira.spring.io/browse/SPR-9071?redirect=false)** and commented  It sure would be useful if we had queryForObject variants that returned null on no row found cases vs. throwing an exception. Returning null is pretty standard here and supported by other object mappers such as Hibernate and iBatis. Making the developer catching an exception just to return null is verbose and has the cost of creating the exception in the first place. The other workaround -- use query with DataAccessUtils#singleResult(List) -- is also verbose.   ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?57232-queryForObject-EmptyResultDataAccessException  7 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-01-30T11:48:38Z","2015-09-22T16:55:21Z"
"","13694","Support for testing mail sending using the Spring JavaMail API [SPR-9055]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9055](https://jira.spring.io/browse/SPR-9055?redirect=false)** and commented  There is no guidance on unit testing mailers that send mails using Spring's JavaMail support. The Mock JavaMail API is already available but doesn't integrate natively with Spring's JavaMailSender abstraction. With a little bit of glue code we could provide good support for Java Mail testing in a Spring environment...  See https://gist.github.com/1671155 for an example.   ---  **Affects:** 3.1 GA  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-01-24T09:15:54Z","2015-09-25T16:25:22Z"
"","13693","Mustache templating support [SPR-9054]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9054](https://jira.spring.io/browse/SPR-9054?redirect=false)** and commented  Mustache is a popular templating syntax that is well-supported in JavaScript (on the client) and Java (on the server). See: http://mustache.github.com/.  I am aware of two Java-based Mustache implementations: https://github.com/samskivert/jmustache https://github.com/spullara/mustache.java  I've developed integration between Spring MVC and JMustache as a start. See: https://gist.github.com/1603296  I've also developed some standalone JMustache integration that is useful for templating outside of a web environment (e.g. for email templating). See: https://gist.github.com/1671155.  Would love to see Mustache supported as a templating system!   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e860fa9a8b56459998911768a3fc791fa4d53b0f  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-01-24T09:12:33Z","2014-01-31T14:29:06Z"
"","13690","spring-test allows you to reference configuration classes that aren't annotated with @Configuration [SPR-9051]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9051](https://jira.spring.io/browse/SPR-9051?redirect=false)** and commented  When a `@ContextConfiguration` test class references a config class missing a `@Configuration` annotation, `@Bean` dependencies are wired successfully but the bean lifecycle is not applied (no init methods are invoked, for example). Adding the missing `@Configuration` annotation solves the problem, however the problem and solution isn't obvious since wiring/injection appeared to work.  It would be better if an integration test failed-fast if you reference a config class with no `@Configuration` annotation.  ---  **Affects:** 3.1 GA  **Issue Links:** - #14114 Missing `@Configuration` annotation will cause transaction not working (_**""is duplicated by""**_) - #14061 Document `@Bean` 'lite' mode and annotated classes in the reference manual - #15002 Log warning when using inner-bean referenced without `@Configuration` - #15599 Throw exception when `@ContextConfiguration`#classes are not annotated with `@Configuration` - #14037 Improve documentation for `@Bean` 'lite' mode and annotated class support in the TestContext Framework (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/500a4dd99579b00027918abda7d4d74f2a65b3a9, https://github.com/spring-projects/spring-framework/commit/2017b24867c6b009cad316960a84a7f55bec58c5, https://github.com/spring-projects/spring-framework/commit/1cec0f9c6575edb9f81ef39a7019b5d3edc0d656, https://github.com/spring-projects/spring-framework/commit/78c6d70f0b3123d53708544324a8bbc734b81251  0 votes, 5 watchers","closed","in: test,","spring-projects-issues","2012-01-24T06:35:33Z","2019-01-13T07:06:31Z"
"","13687","Make spring-test dependency on spring-aspects optional [SPR-9048]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-9048](https://jira.spring.io/browse/SPR-9048?redirect=false)** and commented  Was surprised when spring-test was brought down transitively just because I added spring-aspects to my list of dependencies.  ---  **Affects:** 3.1 GA  **Sub-tasks:** - #13803 Backport ""Make spring-test dependency on spring-aspects optional""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a9451d11f6effeeddb22c12009c83fe0bcdb36f6","closed","type: bug,","spring-projects-issues","2012-01-23T13:20:29Z","2019-01-11T22:24:48Z"
"","13460","Add File/Resource conversion capability to ConversionService when configured on a BeanWrapper instance [SPR-8818]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8818](https://jira.spring.io/browse/SPR-8818?redirect=false)** and commented  #12942 describes an unexpected issue where ConversionService ""fallback conversion rules"" run before specific conversion logic for supported convertible types in a BeanWrapper environment, notably String-to-File and String-to-Resource conversions. This leads to inconsistent conversion results for these types depending upon whether a ConversionService is registered or not.  To prevent this issue, a BeanWrapper could enable its own conversion rules, for the types it natively supports such as File and Resource, by registering new converters against a ConversionService configured via beanWrapper.setConversionService(ConversionService). One thing to consider with adding this capability is the possibility of over-writing user-defined conversion rules for supported BeanWrapper types.  ---  **Affects:** 3.1 RC1  **Issue Links:** - [INT-1893](https://jira.spring.io/browse/INT-1893) Placeholder to track the progress of SPR-8818 (formerly SPR-8294) which causes inconsistent behavior in file inbound adapter - #12942 Inconsistencies in property conversions when using ConversionService (_**""supersedes""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-11-04T10:07:17Z","2019-01-11T14:40:37Z"
"","13360","ClassCastException possible when converting to a target type that is a subtype of T for a Converter convertible type. [SPR-8718]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8718](https://jira.spring.io/browse/SPR-8718?redirect=false)** and commented  test case: - register a StringToColorConverter implementing Converter - ask the conversion service to convert a String to a MyColor, where MyColor extends Color. - a class cast exception will occur, because a Color instance will be returned, which is not a MyColor.  instead of a class cast exception, a converter not found exception should be thrown.  ---  **Affects:** 3.0.6  **Issue Links:** - #13317 GenericConversionService should match target converters for compatible subclasses","closed","in: core,","spring-projects-issues","2011-09-23T08:41:10Z","2019-01-11T14:05:10Z"
"","13114","Allow MVC interceptors to handle requests for URLs that aren't mapped to any handler [SPR-8468]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8468](https://jira.spring.io/browse/SPR-8468?redirect=false)** and commented  A good example would be signout control logic. Such logic might be part of a UserInterceptor and triggered if the request URI is /signout. However, if /signout is not mapped to a handler, a 404 will be thrown even if UserInterceptor is capable of processing a /signout request.  The workaround seems to be ""use a filter"".  However filters are difficult to configure and do not natively benefit from Spring DI.  The other workaround is to register a dummy handler for something like /signout.  ---  **Affects:** 3.1 M2  **Issue Links:** - #14330 Provide support for Filter registrations in AbstractDispatcherServletInitializer  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-06-17T11:35:23Z","2019-01-11T13:35:14Z"
"","13113","Allow handler interceptors to handle exceptions [SPR-8467]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8467](https://jira.spring.io/browse/SPR-8467?redirect=false)** and commented  Currently its not possible for a interceptor to handle a exception in the afterCompletion callback.  The JavaDoc implies ""cleanup"" should be performed on afterCompletion with exception.  However, in the case where such ""cleanup"" logic is in the context of ""exception handling"", one is forced to rely on a separate HandlerExceptionResolver. This breaks encapsulation when the interceptor has the knowledge to handle the exception itself.  The workaround in this case seems to be ""use a Filter"", but Filter's are difficult to configure relative to HandlerInteceptors and do not natively benefit from Spring DI.   ---  **Affects:** 3.1 M2  1 votes, 3 watchers","closed","in: web,","spring-projects-issues","2011-06-17T11:31:17Z","2019-01-11T13:35:04Z"
"","13112","Exceptions thrown by scoped proxy target factory methods are wrapped in a BeanCreationException, preventing easy access to root cause for handling purposes [SPR-8466]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8466](https://jira.spring.io/browse/SPR-8466?redirect=false)** and commented  In my case I have a scoped proxy target factory method that can throw a NotConnectedException.  I need to handle this exception in a HandlerInterceptor.  However, this exception gets wrapped in a BeanCreationException->BeanDefinitionStoreException, so I must detect it and introspect two nested root causes, which doesn't feel very clean conceptually.  You can see this below:  ``` /**  * A proxy to a request-scoped object representing the current user's primary Facebook account.  * @throws NotConnectedException if the user is not connected to facebook.  */ @Bean @Scope(value=""request"", proxyMode=ScopedProxyMode.INTERFACES)	 public Facebook facebook() {     return connectionRepository().getPrimaryConnection(Facebook.class).getApi(); } ```  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.facebook' defined in class path resource [org/springframework/social/quickstart/config/SocialConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.springframework.social.facebook.api.Facebook org.springframework.social.quickstart.config.SocialConfig.facebook()] threw exception; nested exception is org.springframework.social.connect.NotConnectedException: Not connected to provider 'facebook' ```  I would prefer to be able to work against NotConnectedException as the exception that was thrown.   ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-06-17T09:21:38Z","2015-09-22T19:44:58Z"
"","13095","SimpleUrlHandlerMapping Warning logs on startup [SPR-8449]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8449](https://jira.spring.io/browse/SPR-8449?redirect=false)** and commented  I am receiving the following at startup, yet am not declaring any SimpleUrlHandlerMapping bean:  ``` WARNING: Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping Jun 11, 2011 12:27:37 AM org.springframework.web.servlet.handler.SimpleUrlHandlerMapping registerHandlers WARNING: Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping Jun 11, 2011 12:27:37 AM org.springframework.web.servlet.handler.SimpleUrlHandlerMapping registerHandlers WARNING: Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping ```    ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-06-13T08:28:59Z","2012-06-19T03:39:48Z"
"","13094","@PathVariable values sent as query parameters in redirect unexpectedly [SPR-8448]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8448](https://jira.spring.io/browse/SPR-8448?redirect=false)** and commented  I have a '`@PathVariable` String providerId' MethodParameter declaration on a `@Controller` that returns a RedirectView.  The redirect is sent with s 'providerId=\' query parameter present in the URL, which was not expected or needed.  I consider this a bug because in my case this behavior pollutes the URL the end-user sees with a parameter that is not needed/relevant.   ---  **Affects:** 3.1 M2","closed","type: bug,","spring-projects-issues","2011-06-13T08:25:46Z","2012-06-19T03:39:06Z"
"","13093","MVC handler exceptions missing context [SPR-8447]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8447](https://jira.spring.io/browse/SPR-8447?redirect=false)** and commented  I had a bug in a HandlerMethodArgumentResolver and the following exception was thrown:  ``` org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.social.facebook.api.Facebook]: Specified class is an interface 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:101) 	at org.springframework.web.method.annotation.support.ModelAttributeMethodProcessor.createDataBinder(ModelAttributeMethodProcessor.java:125) 	at org.springframework.web.method.annotation.support.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:92) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:65) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:153) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:117) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:100) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:502) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:465) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:863) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:792) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:851) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:756) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) ```  What I noticed about this was there was little context available about where this exception occurred.  I expected this exception to be wrapped in an exception that told me something like ""error invoking handler method \, unable to resolve method parameter \"", with the above exception as the root cause.  In general, I recommend a review of exceptions that can be thrown from the new mvc handler infrastructure and ensure they have the right level of context to best assist the developer in identifying the problem.   ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-06-13T08:22:44Z","2012-06-19T03:39:51Z"
"","13041","Nesting level type index not respected when binding to fields [SPR-8394]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8394](https://jira.spring.io/browse/SPR-8394?redirect=false)** and commented  The following test illustrates the problem:  ``` @Test @Ignore public void fieldMap() throws Exception {      // typeIndex handling not currently supported by fields      TypeDescriptor desc = new TypeDescriptor(getClass().getField(""field""));      assertEquals(Integer.class, desc.getMapKeyTypeDescriptor().getElementType());      assertEquals(Long.class, desc.getMapValueTypeDescriptor().getElementType()); } public Map field; ```  ``` junit.framework.AssertionFailedError: expected: but was: 	at junit.framework.Assert.fail(Assert.java:47) ```  GenericCollectionResolver needs to be enhanced to provide support for this with Fields as its done with MethodParameters.   --- No further details from [SPR-8394](https://jira.spring.io/browse/SPR-8394?redirect=false)","closed","in: core,","spring-projects-issues","2011-06-02T18:46:45Z","2012-06-19T03:39:47Z"
"","13003","Relative imports in @Configuration classes [SPR-8356]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8356](https://jira.spring.io/browse/SPR-8356?redirect=false)** and commented  The following `@Configuration` class declared in package `com.springsource.greenhouse.config`, which uses imports, could be simplified from:  ```java @Configuration @ComponentScan(""com.springsource.greenhouse"") @Import({ComponentConfig.Embedded.class, ComponentConfig.Standard.class}) public class ComponentConfig { 	 	/** 	 * Properties to support the 'embedded' mode of operation. 	 */ 	@Configuration 	@Profile(""embedded"") 	@PropertySource(""classpath:com/springsource/greenhouse/config/embedded.properties"")         static class Embedded { 	}  	/** 	 * Properties to support the 'standard' mode of operation. 	 */ 	@Configuration 	@Profile(""standard"") 	@PropertySource(""classpath:application.properties"")         static class Standard { 	} } ```  to something like:  ```java @Configuration @ComponentScan(""${topLevelPackage}"") @Import({ComponentConfig.Embedded.class, ComponentConfig.Standard.class}) public class ComponentConfig { 	 	/** 	 * Properties to support the 'embedded' mode of operation. 	 */ 	@Configuration 	@Profile(""embedded"") 	@PropertySource(""embedded.properties"")          static class Standard { 	}  } ```  This would make things more concise, future-proof to refactoring changes, and consistent with how beans:import tag works (imported resources there are relative to the location of the enclosing resource).  Also, it seems imports are now webapp-root relative for web applications.  I'm not so sure this is desirable, since these are `@Configuration` classes in the classpath.  I would expect imports to always be classpath resources unless an alternative resource loading scheme was used.  ---  **Issue Links:** - #10976 Support relative and by-convention use of `@ImportResource` - #9690 XML import should support patterns for relative paths as well","closed","type: enhancement,","spring-projects-issues","2011-05-19T14:59:53Z","2019-01-13T07:09:21Z"
"","12972","Verify required properties at Environment initialization time [SPR-8323]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8323](https://jira.spring.io/browse/SPR-8323?redirect=false)** and commented  Benefits: - Explicit descriptor for each environment provides clarity. - Fail faster - No need to use Environment#getRequiredProperty in access code, simply rely on #getProperty variants.    ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18197/mylyn-context.zip) (_4.76 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/404f7980483e8c4088fd365fc54047300a1d3aa4","closed","in: core,","spring-projects-issues","2011-05-10T07:20:00Z","2019-01-11T12:59:59Z"
"","12971","Add Environment.getProperty(String name, Class targetType, T defaultValue); [SPR-8322]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8322](https://jira.spring.io/browse/SPR-8322?redirect=false)** and commented  e.g. would turn this:  ``` @Bean public JavaMailSender mailSender() {     JavaMailSenderImpl mailSender = new JavaMailSenderImpl();     mailSender.setDefaultEncoding(""UTF-8"");     mailSender.setHost(environment.getProperty(""mail.host""));     Integer port = environment.getProperty(""mail.port"", Integer.class);     if (port != null) {         mailSender.setPort(port);     }     mailSender.setUsername(environment.getProperty(""mail.username""));     mailSender.setPassword(environment.getProperty(""mail.password""));     Properties properties = new Properties();     Boolean mailSmtpAuth = environment.getProperty(""mail.smtp.auth"", Boolean.class);     if (mailSmtpAuth != null) {         properties.put(""mail.smtp.auth"", mailSmtpAuth);     }     Boolean mailSmtpStartTls = environment.getProperty(""mail.smtp.starttls.enable"", Boolean.class);     if (mailSmtpAuth != null) {         properties.put(""mail.smtp.auth"", mailSmtpStartTls);     }     mailSender.setJavaMailProperties(properties);     return mailSender; } ```  into this:  ``` @Bean public JavaMailSender mailSender() {     JavaMailSenderImpl mailSender = new JavaMailSenderImpl();     mailSender.setDefaultEncoding(""UTF-8"");     mailSender.setHost(environment.getProperty(""mail.host""));     mailSender.setPort(port, environment.getProperty(""mail.port"", Integer.class, 25));     mailSender.setUsername(environment.getProperty(""mail.username""));     mailSender.setPassword(environment.getProperty(""mail.password""));     Properties properties = new Properties();     properties.put(""mail.smtp.auth"", environment.getProperty(""mail.smtp.auth"", Boolean.class, false));     properties.put(""mail.smtp.auth"", environment.getProperty(""mail.smtp.starttls.enable"", Boolean.class, false));     mailSender.setJavaMailProperties(properties);     return mailSender; } ```    ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18194/mylyn-context.zip) (_40.51 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3622c6f340c57847234b648af0e757573dee5063, https://github.com/spring-projects/spring-framework/commit/dc2d5c107f517ffa894c653a1c5fd4c165db015e","closed","type: enhancement,","spring-projects-issues","2011-05-10T07:17:15Z","2012-06-19T03:39:38Z"
"","12890","Snapshot build failing inconsistently with OUT_OF_MEMORY errors [SPR-8242]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8242](https://jira.spring.io/browse/SPR-8242?redirect=false)** and commented  ""The quick build succeeded but the snapshot build failed with an OutOfMemory exception. I've seen that happen a few days ago and when restarted manually it succeeded. It might have to do with the time it runs at and what else is running then. So it's worth trying to kick it off manually.  Rossen""   --- No further details from [SPR-8242](https://jira.spring.io/browse/SPR-8242?redirect=false)","closed","","spring-projects-issues","2011-04-10T07:03:38Z","2019-01-11T12:53:43Z"
"","12885","Unable to inject @Named list [SPR-8237]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8237](https://jira.spring.io/browse/SPR-8237?redirect=false)** and commented  I have the following `@Bean`:  ``` @Bean(name=""twitterConnections"") @Scope(value=""request"", proxyMode=ScopedProxyMode.INTERFACES)	 public List twitterConnections() {     return serviceProviderConnectionRepository.findConnectionsByServiceApi(TwitterApi.class); } ```  and following client that depends on it:  ``` @Inject public TwitterShowcaseController(@Named(""twitterConnections"") List twitterConnections) {     this.twitterConnections = twitterConnections; } ```  Injection fails unexpectedly with the following error:  ``` SEVERE: Servlet /spring-social-showcase threw load() exception org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [org.springframework.social.connect.ServiceProviderConnection] found for dependency [collection of org.springframework.social.connect.ServiceProviderConnection]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@javax.inject.Named(value=twitterConnections)}    at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:920)    at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:747)    at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:703)    at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:795)    at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:723)    at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:196)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1003)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:907)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)    at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1080)    at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:383)    at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:362)    at org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping.detectHandlers(AbstractDetectingUrlHandlerMapping.java:82)    at org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping.initApplicationContext(AbstractDetectingUrlHandlerMapping.java:58)    at org.springframework.context.support.ApplicationObjectSupport.initApplicationContext(ApplicationObjectSupport.java:119)    at org.springframework.web.context.support.WebApplicationObjectSupport.initApplicationContext(WebApplicationObjectSupport.java:72)    at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:73)    at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:116)    at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1413)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:900)    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:455)    at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:442)    at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:458)    at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:339)    at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:306)    at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133)    at javax.servlet.GenericServlet.init(GenericServlet.java:160)    at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1189)    at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1103)    at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1010)    at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4935)    at org.apache.catalina.core.StandardContext$3.call(StandardContext.java:5262)    at org.apache.catalina.core.StandardContext$3.call(StandardContext.java:5257)    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)    at java.util.concurrent.FutureTask.run(FutureTask.java:138)    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)    at java.lang.Thread.run(Thread.java:680) ```  Removing `@Named` results in all the ServiceProviderConnection objects added to the list, not just the twitterConnections, which is not what I want.  As a side note, I was surprised by this as well given the fallback rule to inject by constructor argument name if there is not an exact by-type match.  ---  **Affects:** 3.1 M1  **Issue Links:** - #13164 Support injection of collection-typed beans using `@Autowired`+`@Qualifier` or `@Inject`+`@Named`  (_**""is superseded by""**_)  1 votes, 1 watchers","closed","status: duplicate,","spring-projects-issues","2011-04-08T20:01:27Z","2019-01-13T07:09:51Z"
"","12881","TreeMultiValueMap and EmptyMultiValueMap and UmodifiableMultiValueMap [SPR-8232]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8232](https://jira.spring.io/browse/SPR-8232?redirect=false)** and commented  Spring Social needs a Tree-based MultiValueMap along with the ability to create a unmodifiable emptyMultiValueMap() without wasting space. Initial contributions that meet our needs attached.  An ability to get a unmodifiable multi-value map would also be nice for immutable structures.   ---  **Affects:** 3.1 M1  **Attachments:** - [EmptyMultiValueMap.java](https://jira.spring.io/secure/attachment/18010/EmptyMultiValueMap.java) (_2.89 kB_) - [TreeMultiValueMap.java](https://jira.spring.io/secure/attachment/18009/TreeMultiValueMap.java) (_3.33 kB_)","closed","type: enhancement,","spring-projects-issues","2011-04-07T20:27:30Z","2015-09-22T18:20:30Z"
"","13350","Code example bug in Cache Abstraction document [SPR-8708]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-8708](https://jira.spring.io/browse/SPR-8708?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.1.0.M2/spring-framework-reference/html/cache.html  In this documents, 28.4.2's example code has some bugs.  [xml] \  \ \ [/xml]  This code should be fixed like below.  [xml] \  \ \ [/xml] * p:cache-manager=""ehcache"" =>  p:cacheManager-ref=""ehcache"" * p:config-location=""ehcache.xml"" => p:configLocation=""ehcache.xml""    ---  **Affects:** 3.1 M2","closed","type: bug,","spring-projects-issues","2011-09-19T00:12:25Z","2012-06-19T03:39:41Z"
"","13312","Bug in Cache Abstraction document [SPR-8670]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-8670](https://jira.spring.io/browse/SPR-8670?redirect=false)** and commented  In the document, http://static.springsource.org/spring/docs/3.1.0.M2/spring-framework-reference/html/cache.html  ""All the other caches that do not contain the method will be updated as well event though the cached method was not actually executed.""  should be fixed like this.  ""All the other caches that do not contain the method will be updated as well even though the cached method was not actually executed.""  event -> even  thanks.   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/49b38190eeaf3861b2f0784044270b9c899ecf14","closed","type: bug,","spring-projects-issues","2011-09-05T23:52:49Z","2012-06-19T03:39:15Z"
"","13740","Add ""Bundle-RequiredExecutionEnvironment: J2SE-1.5"" to org.springframework.context bundle [SPR-9102]","**[Kay Huber](https://jira.spring.io/secure/ViewProfile.jspa?name=kayhuber)** opened **[SPR-9102](https://jira.spring.io/browse/SPR-9102?redirect=false)** and commented  AFAIK, spring framework (since 3.0) requires J2SE 1.5 to run properly. For OSGi, there's a MANIFEST.MF header to indicate that:  ``` Bundle-RequiredExecutionEnvironment: J2SE-1.5 ```  In the spring bundles, this entry is currently missing and has effects: org.springframework.context for example will, when started on a Java 6 VM import javax.annotation from the JDK6. Any other bundle having this header set, will require the javax.annotation package to be provided explicitely by another bundle.  As a result, for example the javax.annotation.PostConstruct annotation will not be recognized by Spring when scanning a custom bundle with J2[SE-1](https://jira.spring.io/browse/SE-1).5 set.    --- No further details from [SPR-9102](https://jira.spring.io/browse/SPR-9102?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-02-09T06:24:05Z","2012-08-13T07:56:42Z"
"","13647","OXM 3.1 compatibility issue with castor 1.2  [SPR-9008]","**[Kasia Trapszo](https://jira.spring.io/secure/ViewProfile.jspa?name=ktrapszo)** opened **[SPR-9008](https://jira.spring.io/browse/SPR-9008?redirect=false)** and commented  OXM distributed with spring framework 3.1 is not compatible with castor 1.2 (or 1.3 for that matter). Downgrading oxm to 3.0.5 fixes the issue. Here's the stack trace:  java.lang.NoSuchMethodError: org.exolab.castor.xml.Unmarshaller.unmarshal(Ljavax/xml/stream/XMLEventReader;)Ljava/lang/Object; at org.springframework.oxm.castor.CastorMarshaller.unmarshalXmlEventReader(CastorMarshaller.java:597) at org.springframework.oxm.support.AbstractMarshaller.unmarshalStaxSource(AbstractMarshaller.java:326) at org.springframework.oxm.support.AbstractMarshaller.unmarshal(AbstractMarshaller.java:128) at org.springframework.batch.item.xml.StaxEventItemReader.doRead(StaxEventItemReader.java:233) at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:318) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131) at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy11.read(Unknown Source) at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:90) at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:148) at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:108) at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367) at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214) at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143) at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:103) at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:68) at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:386) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130) at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:264) at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:76) at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367) at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214) at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143) at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:250) at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:195) at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:135) at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61) at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60) at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144) at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124) at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135) at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:281) at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:120) at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:48) at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:114)   --- No further details from [SPR-9008](https://jira.spring.io/browse/SPR-9008?redirect=false)","closed","in: data,","spring-projects-issues","2011-12-29T07:13:48Z","2019-01-11T22:22:12Z"
"","13800","SpringContextResourceAdapter does not fulfill whole JCA 1.5 contract [SPR-9162]","**[Karel Piwko](https://jira.spring.io/secure/ViewProfile.jspa?name=kpiwko)** opened **[SPR-9162](https://jira.spring.io/browse/SPR-9162?redirect=false)** and commented  org.springframework.jca.context.SpringContextResourceAdapter does not fully implement JCA 1.5 specification.  To be more precise, it violates section 5.3.1 of JCA 1.5 specification: ""The application server is allowed to have multiple instances of a ResourceAdapter JavaBean active simultaneously, in the same JVM, provided the instances are not equal. Their equality is determined using the equals method, and therefore, the ResourceAdapter JavaBean is required to implement the equals method.""  This leads to deployment failure when JCA archive validation is enabled.   ---  **Affects:** 2.5.6, 3.0.7, 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30ad07a4e2f86887dc5987a63f07db4d79c7e4e0, https://github.com/spring-projects/spring-framework/commit/f6d7518013d97ed9f1edfa4c6b65065eafac445b  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: enhancement,","spring-projects-issues","2012-02-24T01:27:09Z","2013-01-09T09:42:56Z"
"","13730","Injecting / autowiring collection provider doen't work [SPR-9092]","**[Kamil](https://jira.spring.io/secure/ViewProfile.jspa?name=skajotde)** opened **[SPR-9092](https://jira.spring.io/browse/SPR-9092?redirect=false)** and commented  I implement contributions for my application and I found inconsistent behaviour for Provider/ObjectFactory. There are defined classes for different contributions:  ``` @Contribute(""rest"") @Named(""bean-contrib2a"") public class Contrib2A implements ContribRest { ... }  @Contribute(""rest"") @Named(""bean-contrib2b"") public class Contrib2B { ... }  @Contribute(""non-rest"") @Named(""bean-contrib3a"") public class Contrib3A implements ContribRest { ... }  @Contribute(""non-rest"") @Named(""bean-contrib3b"") public class Contrib3B { ... } ```  Code to show injecting scenario looks like that:  ``` @Named(""applicationRest"") public class ApplicationRest extends Application {      private List contrib2;     private List contrib4;      private ObjectFactory ofContrib2;     private ObjectFactory ofContrib4;      private Provider pvdContrib2;     private Provider pvdContrib4;      @Inject     public void setContrib2(@Contribute(""rest"") List contrib2) {         this.contrib2 = contrib2;     }      @Autowired(required = false)     public void setContrib4(@Contribute(""other"") List contrib4) {         this.contrib4 = contrib4;     }      @Inject     public void setOfContrib2(@Contribute(""rest"") ObjectFactory ofContrib2) {         this.ofContrib2 = ofContrib2;     }      @Autowired(required = false)     public void setOfContrib4(@Contribute(""other"") ObjectFactory ofContrib4) {         this.ofContrib4 = ofContrib4;     }      @Inject     public void setPvdContrib2(@Contribute(""rest"") Provider pvdContrib2) {         this.pvdContrib2 = pvdContrib2;     }      @Autowired(required = false)     public void setPvdContrib4(@Contribute(""other"") Provider pvdContrib4) {         this.pvdContrib4 = pvdContrib4;     } ```  Injection finish with that result:  ``` INFO contrib2=[Contrib2A@51a19458] - INFO contrib4=null ERROR ofContrib2=No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 2: [bean-contrib2b, bean-contrib2a] INFO ofContrib4=null ERROR pvdContrib2=No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 2: [bean-contrib2b, bean-contrib2a] -  INFO pvdContrib4=null  ```  Injecting list looks correct - classes with other contribution and type are filtered and only Contrib2A is injected.  Unfortunately injecting Provider or ObjectFactory tries to inject List a not all beans for this list and it looks as a bug.  Maybe you can provide alternative way to how can I provide this list with all instances contributed (scanned) without manually defining list in XML.  ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?122488-Injecting-autowiring-collection-provider-to-implement-contribution  **Issue Links:** - #13669 javax.Provider Spring support doesn't work for collections (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-02-06T03:45:24Z","2019-01-12T16:48:15Z"
"","13569","JavaMailSenderImpl: Support for overriding default ""Content-Transfer-Encoding""  [SPR-8929]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-8929](https://jira.spring.io/browse/SPR-8929?redirect=false)** and commented  It would be nice if org.springframework.mail.javamail.JavaMailSenderImpl had a setContentTransferEncoding method for overriding the default value for ""Content-Transfer-Encoding"" generated my JavaMail.  They use the following algorithm:  If the primary type of this datasource is ""text"" and if all the bytes in its input stream are US-ASCII, then the encoding is ""7bit"". If more than half of the bytes are non-US-ASCII, then the encoding is ""base64"". If less than half of the bytes are non-US-ASCII, then the encoding is ""quoted-printable"".  from http://docs.oracle.com/javaee/6/api/javax/mail/internet/MimeUtility.html#getEncoding(javax.activation.DataSource)  See also  http://www.oracle.com/technetwork/java/faq-135477.html#howencode  and  http://forum.springsource.org/showthread.php?61174-MimeMessageHelper-and-base64-as-Content-Transfer-Encoding    ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?61174-MimeMessageHelper-and-base64-as-Content-Transfer-Encoding","open","status: bulk-closed,","spring-projects-issues","2011-12-15T00:11:43Z","2019-06-28T10:31:46Z"
"","13227","Java config for Web app context and servlet context - autowiring the configuration fails. [SPR-8583]","**[Kai Hackemesser](https://jira.spring.io/secure/ViewProfile.jspa?name=schlaufuchs)** opened **[SPR-8583](https://jira.spring.io/browse/SPR-8583?redirect=false)** and commented  I have the web application context and the servlet context converted from xml to java config. The web.xml is updated according to the online documentation example. I use `@Autowire` annotation in the servlet config to get the beans required for the form controllers. I have autowired the web application context config class, too, as I want to retrieve some fields from there that I have `@Value` annotated, by calling some type converting methods. The autowiring seems to fail as I get Nullpointer exceptions on lines where the webapp config class method is called. I was debugging the server: the web application context has been built using the config class and the fields I want to call methods on are filled properly. The `@Autowired` config field is null when the `@Bean` annotated method wants to use it.  Here some short example lines from our project:  web.xml:  ```    ...    ...            contextClass       org.springframework.web.context.support.AnnotationConfigWebApplicationContext                 contextConfigLocation       com.ourcompany.ServletConfig      ...    ...        contextClass                org.springframework.web.context.support.AnnotationConfigWebApplicationContext                   contextConfigLocation            com.ourcompany.ApplicationConfig         ...  ```  ServletConfig.java:  ``` ... @Configuration @ImportResource(""classpath:/META-INF/iem/servletPropertyConfigurer.xml"") public class ServletConfig { ...   @Autowired   private ApplicationConfig applicationConfig; ...   @Bean   public DbStatsController dbStatsController()   {     DbStatsController controller = new DbStatsController();     controller.setManageUrl(applicationConfig.getDatabaseManageUrl()); ...     return controller;   } ... ```  ApplicationConfig.java:  ``` @Configuration(""applicationConfig"") @ImportResource({     ""classpath:/META-INF/..."" }) public class ApplicationConfig { ...   @Value(""$[database.manage.url]"")   private String databaseManageUrl;  ...   public String getDatabaseManageUrl()   {     return databaseManageUrl;   }  ```  Following the documentation a Config class can be autowired like any other bean, but it doesn't work here. and I don't get a BeanNotFound or similar exception, it just fails with a NullpointerException when trying to access the autowired field.  ---  **Issue Links:** - #13226 unresolvable circular reference when bean defined in xml config refers to bean defined in outer java config (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2011-08-02T16:56:38Z","2019-01-12T16:48:43Z"
"","13226","unresolvable circular reference when bean defined in xml config refers to bean defined in outer java config [SPR-8582]","**[Kai Hackemesser](https://jira.spring.io/secure/ViewProfile.jspa?name=schlaufuchs)** opened **[SPR-8582](https://jira.spring.io/browse/SPR-8582?redirect=false)** and commented  I have converted an xml config file into java config. The xml config then and now the java config defined the ""messagesource"" bean and imported a handful of other xml configs. Some logic beans defined in the imported xml files depend on messagesource which is now defined in the importing config class - circle closed but exception thrown. As this was working in the pure xml config, I see this as a kind of regression.  I was able to work around here by defining a separate java config file just for the message source and importing this in the main java config as well. But it would be nice if the config interpreter would be able to handle this for me the same way the xml config handler was doing this.  ---  **Attachments:** - [proof.jar](https://jira.spring.io/secure/attachment/18538/proof.jar) (_6.35 kB_)  **Issue Links:** - #13227 Java config for Web app context and servlet context - autowiring the configuration fails. (_**""is duplicated by""**_) - #13252 Detect circular dependencies within `@Configuration` classes and throw a helpful exception  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/09dd8abf2c28eb7d2b7bd4abaa67bffdbe4776b9, https://github.com/spring-projects/spring-framework-issues/commit/4ea27b64420078b5514d950d2f6212a8a0b16f02, https://github.com/spring-projects/spring-framework-issues/commit/a1c4743954d3f3268866d4d1e27454ba967a9a62","closed","status: declined,","spring-projects-issues","2011-08-02T16:15:26Z","2019-01-13T07:08:14Z"
"","13323","Missing images in Reference Documentation (PDF Version) [SPR-8681]","**[Jyothi Prakash](https://jira.spring.io/secure/ViewProfile.jspa?name=jyothi.polani)** opened **[SPR-8681](https://jira.spring.io/browse/SPR-8681?redirect=false)** and commented  Hi,  I am new to this technology. I've just started reading spring reference documentation (PDF) both Current Development Releases and Current GA Releases. Unfortunately both PDF version does not download the images in files.  Thanks in advance, Jyothi  ---  **Affects:** 3.0.5, 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?114388-Reference-Documentation  **Issue Links:** - #13158 pdf documentation doesn't contain images (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-09-12T05:59:02Z","2019-01-12T16:48:36Z"
"","13726","Each FreeMarkerView needlessly creates a TaglibFactory in initServletContext() [SPR-9088]","**[Jun-Dai Bates-Kobashigawa](https://jira.spring.io/secure/ViewProfile.jspa?name=jundai)** opened **[SPR-9088](https://jira.spring.io/browse/SPR-9088?redirect=false)** and commented  This code causes FTL templates to very slow when hit for the first time if they contain a taglib:      if (getConfiguration() != null) {          this.taglibFactory = new TaglibFactory(servletContext);     }     else {          FreeMarkerConfig config = autodetectConfiguration();          setConfiguration(config.getConfiguration());          this.taglibFactory = config.getTaglibFactory();     }  The problem is that the new TaglibFactory created here has no history of the taglibs already encountered, so every FTL rendered for the first time has to use a new taglib factory, which means that each time it encounters a taglib in the FTL file it has to parse the .tld file.  This means that if you have multiple taglibs (or if you load multiple FreeMarkerViews in a page), then the first time you load that page it's extremely slow.  Is there any reason not to just do: this.taglibFactory = getConfiguration().getTaglibFactory() and reuse the freemarker configurer's taglib factory?  That would make the problem go away.   ---  **Affects:** 3.0.5","closed","status: invalid,","spring-projects-issues","2012-02-02T19:01:53Z","2019-01-12T05:29:15Z"
"","13491","Introduce support for generating unique names for embedded databases [SPR-8849]","**[Julian Sareyka](https://jira.spring.io/secure/ViewProfile.jspa?name=golliwog)** opened **[SPR-8849](https://jira.spring.io/browse/SPR-8849?redirect=false)** and commented  Hi, I use an embedded database (HSQL) in my integration test suite. Its a maven project with TestNG.  ```xml  	 	 	 	  ```  I have one default context configuration (which includes the database) and several extensions: for instance:  ```java @ContextConfiguration(""/spring/default.xml"") public class PodcastControllerTest extends AbstractTestNGSpringContextTests {...}  // and  @ContextConfiguration({ ""/spring/components/amq-broker.xml"", ""/spring/default.xml"" }) public class SophoraAvDocumentTest extends AbstractTestNGSpringContextTests {...} ```  When executing the tests with maven (maven-surefire), all the tests with the first configuration reuse the same context (due to context caching). The first test-setup with the second configuration should create a fresh application context, but it fails with Database-Errors indicating, that the objects to create already exist. (I spent quite some time debugging the maven process).  Here is the maven surefire config:  ```xml  	org.apache.maven.plugins 	maven-surefire-plugin 	 		1 		slow,local 		-Xmx1024m 	  ```  My theory is, that both contexts connect to the same database instance, because they are in the same vm and the name of the db-instance is the same: EmbeddedDatabaseFactory.databaseName = ""testdb"";  I did not find a way to assign the name with the jdbc:embedded-database-Tag.  So I created a custom EmbeddedDatabaseBuilder which assigns a random name (UUID) to every new instance:  ```java EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.HSQL).setName(UUID.randomUUID().toString()); for (String sqlResource : this.scripts) {     builder.addScript(sqlResource); } this.embeddedDatabase = builder.build(); ```  With this one the errors are gone. Would it be a solution to add a configuration-option to jdbc:embedded-database for random db-instance names?  ---  **Affects:** 3.1 GA  **Issue Links:** - #17432 Introduce database-name attribute in  (_**""depends on""**_) - #17437 Document support for generating unique names for embedded databases in the reference manual (_**""is depended on by""**_) - #15999 Embedded database connection closed by shutdown() method - #13560 Using multiple declarations of jdbc:embedded-database creates only one H2 instance per JVM - #12260 jdbc:datasource lacks 'name' attribute or related mechanism  6 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2011-11-14T02:54:07Z","2019-01-11T15:03:05Z"
"","13459","Support per-script statement separator configuration for SQL scripts [SPR-8817]","**[Julian Sareyka](https://jira.spring.io/secure/ViewProfile.jspa?name=golliwog)** opened **[SPR-8817](https://jira.spring.io/browse/SPR-8817?redirect=false)** and commented  I have tried to setup an in-memory db with hsql. In one of my scripts there is a stored procedure. Database setup fails when executing this script.  I found out that this is due to automatic statement splitting in `ResourceDatabasePopulator`. Here all statements in a script are split on semicolons. So my stored procedure is cut into pieces (after `p_date_value DAY;`).  ```sql CREATE FUNCTION pkg_verweildauer.get_pub_ende (IN p_pub_start TIMESTAMP, IN p_date_unit VARCHAR(255), IN p_date_value NUMERIC)  RETURNS timestamp READS SQL DATA BEGIN ATOMIC  DECLARE v_pub_ende timestamp; case p_date_unit 	when 'DAYS' then 		SET v_pub_ende = p_pub_start + p_date_value DAY; 	when 'WEEKS' then 		SET v_pub_ende = TIMESTAMPADD(SQL_TSI_WEEK, p_date_value, p_pub_start); 	when 'MONTHS' then 		SET v_pub_ende = TIMESTAMPADD(SQL_TSI_MONTH, p_date_value, p_pub_start); 	when 'YEARS' then 		SET v_pub_ende = TIMESTAMPADD(SQL_TSI_YEAR, p_date_value, p_pub_start); 	else 		SET v_pub_ende = p_pub_start + 365 DAY; end case; RETURN v_pub_ende;  END; ```  A simple solution would be to add a parameter to the `` tag to disable splitting on file basis. Unfortunately `ResourceDatabasePopulator` cannot be exchanged in the `EmbeddedDatabaseBuilder`.  I had to write a post processing bean, to add the stored function.  ---  **Affects:** 3.0.5  **Issue Links:** - #13525 Error when parsing PMS stored procedure script. (_**""is duplicated by""**_) - #12356 Add configurable SQL statement delimiter to ResourceDatabasePopulator and JDBC XML namespace. (_**""is duplicated by""**_) - #16310 Support EOF as statement separator in SQL scripts - #17970 Support triggers & stored procedures alongside standard statements in SQL scripts  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-11-04T09:52:12Z","2019-01-11T14:40:43Z"
"","13021","BeanUtils.copyProperties could ignore fields with an annotation [SPR-8374]","**[Julian Bell](https://jira.spring.io/secure/ViewProfile.jspa?name=jerbell)** opened **[SPR-8374](https://jira.spring.io/browse/SPR-8374?redirect=false)** and commented  When using Spring BeanUtils.copyProperties(object1, object2, ignoredFields), we need to supply all of the fields to ignore.  It would be nice if we could use an annotation on the fields to ignore - such as `@BeanCopyIgnore`.  This could be used when retrieving one object from a database and overwriting other fields from a submitted web form. The following code would grab a String[] of field names with a certain annotation (including super classes):  public static String[] getFieldNamesWithAnnotation(Class beanClass, Class","closed","type: enhancement,","spring-projects-issues","2011-05-25T05:56:34Z","2018-12-27T11:52:44Z"
"","13778","Support for JTA 1.2 transaction annotation [SPR-9139]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-9139](https://jira.spring.io/browse/SPR-9139?redirect=false)** and commented  javax.transaction.Transactional  ---  **Issue Links:** - #16423 Support standard javax.transaction.Transactional in AspectJ  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/52fd84bb577296f78881388ff72b383a4e4808a3","closed","type: enhancement,","spring-projects-issues","2012-02-20T11:48:51Z","2019-01-11T22:12:55Z"
"","13417","Support for JCache (JSR-107) [SPR-8774]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-8774](https://jira.spring.io/browse/SPR-8774?redirect=false)** and commented  Support for JCache compliant cache providers in an ""org.springframework.cache.jcache"" package:  * with JCacheCacheManager/Cache adapters for Spring's SPI as well as JCacheManager/JCacheFactoryBean setup conveniences (analogous to the existing EHCache support) * with support for JCache's standardized caching annotations, ideally automatically through Spring's  (similar to our existing  /  /  approach with JSR-330/JSR-250 annotations etc)  Juergen  ---  **Issue Links:** - #12845 Support Java Temporary Caching API (JSR-107) (_**""is duplicated by""**_) - #14250 Support for JSR-107 caching annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/83fa8e12f0ea1aa3f5564de48a801b4d5d171898","closed","type: enhancement,","spring-projects-issues","2011-10-13T08:37:17Z","2019-01-11T14:06:16Z"
"","13214","Document Lifecycle.stop() method synchronous or asynchronous behaviour [SPR-8570]","**[Juan Antonio Farré Basurte](https://jira.spring.io/secure/ViewProfile.jspa?name=juan.farre)** opened **[SPR-8570](https://jira.spring.io/browse/SPR-8570?redirect=false)** and commented  I've been searching for documentation regarding Lifecycle interface and Lifecycle.stop() method. I haven't been able to clarify whether this method should perform a synchronous stop of the component or just start an asynchronous shutdown sequence and probably return before shutdown is complete (and without a mean to signal shutdown completion). Having SmartLifecycle.stop(Runnable) method specifically designed for asynchronous shutdown, looks logical to have stop() behave synchronously, but I've found references to components whose stop() method behaves asynchronously and a really haven't been able to get a clear idea of what's considered correct or standard behaviour. I believe it's important to document it somewhere, preferably both in the javadoc of the interface and the method and in Spring Framework reference documentation 3.6.1 Lyfecycle callbacks.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6404440cbf216111b4643e6cf5667b7e64fef9b5, https://github.com/spring-projects/spring-framework/commit/272f14513215150dbc104fdb4b67c0e07cb28370, https://github.com/spring-projects/spring-framework/commit/35d2ab3bf9d3a85c4557549127f32b7c384f6c56","closed","type: enhancement,","spring-projects-issues","2011-07-29T04:32:45Z","2012-06-19T03:39:30Z"
"","12929","AbstractHttpMessageConverter.write() has a bug dealing with requested contentType [SPR-8281]","**[Juan Antonio Farré Basurte](https://jira.spring.io/secure/ViewProfile.jspa?name=juan.farre)** opened **[SPR-8281](https://jira.spring.io/browse/SPR-8281?redirect=false)** and commented  Inspecting the code of AbstractHttpMessageConverter.write(...) method, I notice something that clearly looks like a but, though I'm not 100% certain about what was the intention of the implementor. The code fragment is the following:  if (contentType == null || contentType.isWildcardType() || contentType.isWildcardSubtype()) { contentType = getDefaultContentType(t); } if (contentType != null) { headers.setContentType(contentType); }  Obviously, the second if overrides what the first if does when contentType!=null. The requested contentType will always be honored, even if it isWildcardType of isWildcardSubtype. May be the intention was to use else if:  if (contentType == null || contentType.isWildcardType() || contentType.isWildcardSubtype()) { contentType = getDefaultContentType(t); } else if (contentType != null) { headers.setContentType(contentType); }  But for sure the current code does not make much sense.  Thanks,  Juan   ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2011-04-28T05:35:22Z","2019-01-12T16:25:40Z"
"","13529","PortletUtils.getSessionMutex() needs to use APPLICATION_SCOPE [SPR-8888]","**[Joshua White](https://jira.spring.io/secure/ViewProfile.jspa?name=joshuawhite929)** opened **[SPR-8888](https://jira.spring.io/browse/SPR-8888?redirect=false)** and commented  The org.springframework.web.util.HttpSessionMutexListener will store a ""mutex"" object under the key WebUtils.SESSION_MUTEX_ATTRIBUTE in the HttpSession.  The getSessionMutex(HttpSession session) in the WebUtils class is pretty straight forward and implemented correctly.  The implementation of a similar method, getSessionMutex(PortletSession session) looks like the same implementation, substituting HttpSession with PortletSession.  In the portlet world, PortletSession is a thin vineer over HttpSession.  The difference is that portlets provide two different scopes within this session, APPLICATION_SCOPE and PORTLET_SCOPE.  APPLICATION_SCOPE is essentially equivalent to HttpSession.  PORTLET_SCOPE differs in that it is essentially limited (often by namespacing from an implementation perspective) to a given portlet.  This means that by default, one portlet cannot see another portlets session unless they are explicitly sharing objects in the ""APPLICATION_SCOPE"".  Long story short, the following line in the current PortletUtils class:  Object mutex = session.getAttribute(WebUtils.SESSION_MUTEX_ATTRIBUTE);  Is attempting to get the variable placed into HttpSession (ie APPLICATION_SCOPE) by searching in PORTLET_SCOPE.  For portlet containers like WebSphere, this will never work.  To get things out of HttpSession (ie the APPLICATION_SCOPE of PortletSession), the line above needs to be changed to:  Object mutex = session.getAttribute(WebUtils.SESSION_MUTEX_ATTRIBUTE, PortletSession.APPLICATION_SCOPE);  This issue may not have been found because the code will silently fail and default to providing PortletSession to synchronize on.  Also, not all vendors choose to implement this feature.  In an IBM environment however, the resulting behavior is not safe if you are using parallel portlet rendering.   ---  **Affects:** 2.0 final  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/21f61e3680a1f15cfde12a75f4e0fcdc32591234, https://github.com/spring-projects/spring-framework/commit/bffa50e31a5410def099d6f3b7bf6e2b624b5ac6  **Backported to:** [3.0.7](https://github.com/spring-projects/spring-framework/milestone/74?closed=1)","closed","type: bug,","spring-projects-issues","2011-11-30T11:49:24Z","2012-06-19T03:39:26Z"
"","13183","automatic registration of PSPC when @PropertySource is used [SPR-8539]","**[Josh Long](https://jira.spring.io/secure/ViewProfile.jspa?name=joshlong)** opened **[SPR-8539](https://jira.spring.io/browse/SPR-8539?redirect=false)** and commented  Can we please register a PropertySourcesPlaceholderConfigurer when `@PropertySource` is used so that everything just ""works"" in `@Configuration` classes? I realize that I could also do a `@Bean` public static PropertySourcesPlaceholderConfigurer pspc(){ }, but it is surprising that it doesn't work by default. It's one more place for users to stub their toes when I can't think of any reason not to support it. Thanks for your consideration.  ---  **Reference URL:** http://blog.springsource.com/2011/06/10/spring-3-1-m2-configuration-enhancements/#comment-195857  **Issue Links:** - #21745 Document default EmbeddedValueResolver support for property placeholders - #14537 `@Enable-style` annotation is desired for automatic registration of PropertySourcesPlaceholderConfigurer - #18712 Placeholder resolution for annotation attributes is not active by default - #13161 `@Component` class using `@Value` cannot access `@PropertySource` proeprties  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/690d33e14f0e46a181e92999f102e0f75ca2534c  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2011-07-15T12:13:21Z","2019-01-13T07:08:23Z"
"","13303","form:hidden disabled attribute is created regardless if value is true or false [SPR-8661]","**[Josh Brackett](https://jira.spring.io/secure/ViewProfile.jspa?name=jbrackett)** opened **[SPR-8661](https://jira.spring.io/browse/SPR-8661?redirect=false)** and commented   creates an hidden input that looks like \  This contrasts with a regular input:  creates \  This causes problems because the hidden input doesn't get submitted with the form since it's disabled.   ---  **Affects:** 3.0.5","closed","type: bug,","spring-projects-issues","2011-08-31T09:50:29Z","2012-06-19T03:39:00Z"
"","12927","form:checkboxes does not provide I18N capabilities [SPR-8279]","**[Josh Brackett](https://jira.spring.io/secure/ViewProfile.jspa?name=jbrackett)** opened **[SPR-8279](https://jira.spring.io/browse/SPR-8279?redirect=false)** and commented  form:checkboxes should allow you to reference a message key from a property file for i18n of labels.  Something along the lines of   where propertyName is a path to the getter which provides the property to use.   ---  **Affects:** 3.0.5","closed","status: bulk-closed,","spring-projects-issues","2011-04-27T07:59:16Z","2019-01-12T03:49:54Z"
"","13253","MockMultipartActionRequest doesn't get through AnnotationMethodHandlerAdapter as other MockRequests [SPR-8610]","**[Josef Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=lisak)** opened **[SPR-8610](https://jira.spring.io/browse/SPR-8610?redirect=false)** and commented  MockActionRequest, MockRenderRequest can be handled by AnnotationMethodHandlerAdapter like this :  ``` MockActionRequest request = new MockActionRequest(); Object handler = handlerMapping.getHandler(request).getHandler(); handlerAdapter.handleAction(request, response, handler); ```  But if you do that with MockMultipartActionRequest and your handler method looks like this :  ``` @ActionMapping(params = ""javax.portlet.action=addFile"") public void handleMultipartRequest(DefaultMultipartActionRequest request, ActionResponse response) ```  Then webRequest.getNativeRequest(parameterType) returns null because MockMultipartActionRequest is not assignment-compatible with DefaultMultipartActionRequest  ``` protected Object resolveStandardArgument(Class parameterType, NativeWebRequest webRequest) 				throws Exception {  	PortletRequest request = webRequest.getNativeRequest(PortletRequest.class); 	PortletResponse response = webRequest.getNativeResponse(PortletResponse.class); 		if (PortletRequest.class.isAssignableFrom(parameterType) || 			MultipartRequest.class.isAssignableFrom(parameterType)) { 		Object nativeRequest = webRequest.getNativeRequest(parameterType); 		if (nativeRequest == null) { 			throw new IllegalStateException( 					""Current request is not of type ["" + parameterType.getName() + ""]: "" + request)				} 		return nativeRequest; } ```  org.springframework.web.bind.annotation.support.HandlerMethodInvocationException: Failed to invoke handler method [public void cz.instance.transl.portlet.customers.AjaxUploadFormController.handleMultipartRequest(org.springframework.web.portlet.multipart.DefaultMultipartActionRequest,javax.portlet.ActionResponse) throws com.liferay.portal.kernel.exception.PortalException,com.liferay.portal.kernel.exception.SystemException]; nested exception is java.lang.IllegalStateException: Current request is not of type [org.springframework.web.portlet.multipart.DefaultMultipartActionRequest]: org.springframework.mock.web.portlet.MockMultipartActionRequest@b35fb1c at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:181) at org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:358) at org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter.doHandle(AnnotationMethodHandlerAdapter.java:345) at org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter.handleAction(AnnotationMethodHandlerAdapter.java:280) at ControllerTest.handleActionRequest(ControllerTest.java:249) Caused by: java.lang.IllegalStateException: Current request is not of type [org.springframework.web.portlet.multipart.DefaultMultipartActionRequest]: org.springframework.mock.web.portlet.MockMultipartActionRequest@b35fb1c at org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter$PortletHandlerMethodInvoker.resolveStandardArgument(AnnotationMethodHandlerAdapter.java:611) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveCommonArgument(HandlerMethodInvoker.java:857) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:308) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:171) ... 37 more   ---  **Affects:** 3.0.5, 3.1 M2","closed","status: declined,","spring-projects-issues","2011-08-11T15:44:41Z","2019-01-12T16:37:30Z"
"","13245","ConfigurableWebBindingInitializer should have allowed / disallowed / required fields for DataBinder initialization [SPR-8601]","**[Josef Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=lisak)** opened **[SPR-8601](https://jira.spring.io/browse/SPR-8601?redirect=false)** and commented  There are two major means of data binding initialization, but there is a drawback in the oldschool xml one.  In short, you can do this :  ``` @InitBinder(""order"") public void initBinder(WebDataBinder binder) {     binder.setAllowedFields(allowedFields.split("","")); } ```  but it can't be done with ConfigurableWebBindingInitializer. First off, the binder instance is created in AnnotationMethodHandlerAdapter and initializer is passed the binder instance somewhere in HandlerMethodInvoker so it can't be set up... :  ```             ```  FIX :  ``` public void initBinder(WebDataBinder binder, WebRequest request) {      if(this.allowedFields != null) {                    binder.setAllowedFields(allowedFields);            }            if(this.disallowedFields != null) {                    binder.setDisallowedFields(disallowedFields);            }                          if(this.allowedFields != null) {                    binder.setRequiredFields(requiredFields);            }            if (this.directFieldAccess) {           binder.initDirectFieldAccess();      }      if (this.messageCodesResolver != null) {           binder.setMessageCodesResolver(this.messageCodesResolver);      }      if (this.bindingErrorProcessor != null) {           binder.setBindingErrorProcessor(this.bindingErrorProcessor);      }      if (this.validator != null && binder.getTarget() != null &&                this.validator.supports(binder.getTarget().getClass())) {           binder.setValidator(this.validator);      }      if (this.conversionService != null) {           binder.setConversionService(this.conversionService);      }      if (this.propertyEditorRegistrars != null) {           for (PropertyEditorRegistrar propertyEditorRegistrar : this.propertyEditorRegistrars) {                propertyEditorRegistrar.registerCustomEditors(binder);           }      } } ```  ---  **Affects:** 3.1 M2  **Issue Links:** - #13244 ConfigurableWebBindingInitializer should have allowed / disallowed / required fields for DataBinder initialization (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-08-10T09:41:29Z","2019-01-11T14:18:14Z"
"","13244","ConfigurableWebBindingInitializer should have allowed / disallowed / required fields for DataBinder initialization [SPR-8600]","**[Josef Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=lisak)** opened **[SPR-8600](https://jira.spring.io/browse/SPR-8600?redirect=false)** and commented  There are two major means of data binding initialization, but there is a drawback in the oldschool xml one.  In short, you can do this :  ```java @InitBinder(""order"")public void initBinder(WebDataBinder binder) {     binder.setAllowedFields(allowedFields.split("","")); } ```  but it can't be done with ConfigurableWebBindingInitializer. First off, the binder instance is created in AnnotationMethodHandlerAdapter and initializer is passed the binder instance somewhere in HandlerMethodInvoker so it can't be set up... :  ```xml             ```  FIX :**ConfigurableWebBindingInitializer.java**  ```java public void initBinder(WebDataBinder binder, WebRequest request) {if(this.allowedFields != null) {                         binder.setAllowedFields(allowedFields);                 }                 if(this.disallowedFields != null) {                         binder.setDisallowedFields(disallowedFields);                 }              if(this.allowedFields != null) {                         binder.setRequiredFields(requiredFields);                 }                 if (this.directFieldAccess) { 			binder.initDirectFieldAccess(); 		}if (this.messageCodesResolver != null) { 			binder.setMessageCodesResolver(this.messageCodesResolver); 		}if (this.bindingErrorProcessor != null) { 			binder.setBindingErrorProcessor(this.bindingErrorProcessor); 		}if (this.validator != null && binder.getTarget() != null &&this.validator.supports(binder.getTarget().getClass())) { 			binder.setValidator(this.validator); 		}if (this.conversionService != null) { 			binder.setConversionService(this.conversionService); 		}if (this.propertyEditorRegistrars != null) {for (PropertyEditorRegistrar propertyEditorRegistrar : this.propertyEditorRegistrars) { 				propertyEditorRegistrar.registerCustomEditors(binder); 			} 		} 	} ```  ---  **Affects:** 3.1 M2  **Reference URL:** http://stackoverflow.com/q/7014245/306488  **Issue Links:** - #13245 ConfigurableWebBindingInitializer should have allowed / disallowed / required fields for DataBinder initialization (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2011-08-10T09:40:44Z","2019-01-11T14:18:21Z"
"","13234","AnnotationMethodHandlerAdapter rejects handler methods  @RequestMapping(method = RequestMethod.GET) because RenderRequest is not ClientDataRequest [SPR-8590]","**[Josef Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=lisak)** opened **[SPR-8590](https://jira.spring.io/browse/SPR-8590?redirect=false)** and commented  With this handler method  `@RequestMapping`(method = RequestMethod.GET, params = ""javax.portlet.action=uploadOrderView"") public String uploadOrder(Model model) { log.debug(""uploadOrderView handler method""); model.addAttribute(""tabs1"", tabs1);return ""mainOrderForm""; }  if you do  MockRenderRequest request = new MockRenderRequest(); request.addParameter(""javax.portlet.action"", ""uploadOrderView"");  Object controller = defaultAnnotationHandlerMapping.getHandler(request).getHandler(); annotationMethodHandlerAdapter.handleAction(request, response, controller);  Then AnnotationMethodHandlerAdapter calls this method to evaluate the handler method and it rejects it because ""methods"" is GET and RenderRequest is not an instance of ClientDataRequest.  public static boolean checkRequestMethod(Set\ methods, PortletRequest request) {if (!methods.isEmpty()) {if (!(request instanceof ClientDataRequest)) {return false; }String method = ((ClientDataRequest) request).getMethod();if (!methods.contains(method)) {return false; } }return true; }  Isn't it wrong ?   ---  **Attachments:** - [kt22.png](https://jira.spring.io/secure/attachment/18541/kt22.png) (_66.22 kB_)","closed","status: invalid,","spring-projects-issues","2011-08-08T11:16:08Z","2019-01-12T05:30:01Z"
"","13202","SessionLocaleResolver for portlets, it is not compatible with spring-portlet-mvc [SPR-8558]","**[Josef Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=lisak)** opened **[SPR-8558](https://jira.spring.io/browse/SPR-8558?redirect=false)** and commented  Relates to #13199  The point is, that SessionLocaleResolver operates with ServletRequest and HttpSession but in portlet environment, you don't have access to ServletRequest which is wrapped in PortletRequest, the method call is delegated to it. The same applies to HttpSession and PortletSession.  Also portlets have 3 scopes (portlet, portal, application) and Locale is part of the PORTAL scope whereas the default scope is PORTLET.  As a result, one has to implement CustomSessionLocaleResolver, that is incompatible with SessionLocaleResolver interface.  ``` public class LocalizedMessageSource { 	 	@Autowired 	private MessageSource resource; 	@Autowired 	private PortletSessionLocaleResolver localeResolver;   	public String getMessage(MessageSourceResolvable resolvable) { 		return resource.getMessage(resolvable, getLocale()); 	}  	public String getMessage(String code, Object[] args) { 		return resource.getMessage(code, args, getLocale()); 	}  	public String getMessage(String code, Object[] args, String defaultMessage, Locale locale) { 		return resource.getMessage(code, args, defaultMessage, getLocale()); 	}  	private Locale getLocale() { 		return localeResolver.resolveLocale(getCurrentRequest()); 	}  	private PortletRequest getCurrentRequest() { 		return ((PortletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest(); 	} } ```  ``` public class PortletSessionLocaleResolver  {   	public static final String LOCALE_SESSION_ATTRIBUTE_NAME = ""LOCALE""; 	public static final int PORTAL_SCOPE = 0x03; 	 	private Locale defaultLocale;  	public Locale resolveLocale(PortletRequest request) { 		PortletSession session = request.getPortletSession(false); 		Locale locale = (Locale) session.getAttribute(LOCALE_SESSION_ATTRIBUTE_NAME, PORTAL_SCOPE); 		if (locale == null) { 			locale = determineDefaultLocale(request); 		} 		return locale; 	}  	protected Locale determineDefaultLocale(PortletRequest request) { 		Locale defaultLocale = getDefaultLocale(); 		if (defaultLocale == null) { 			defaultLocale = request.getLocale(); 		} 		return defaultLocale; 	}  	public Object getSessionAttribute(PortletRequest request, String name) { 		PortletSession session = request.getPortletSession(false); 		return (session != null ? session.getAttribute(name, PORTAL_SCOPE) : null); 	} 	 	public void setSessionAttribute(PortletRequest request, String name, Object value) { 		if (value != null) { 			request.getPortletSession().setAttribute(name, value, PORTAL_SCOPE); 		} 		else { 			PortletSession session = request.getPortletSession(false); 			if (session != null) { 				session.removeAttribute(name); 			} 		} 	} 	 	public void setDefaultLocale(Locale defaultLocale) { 		this.defaultLocale = defaultLocale; 	}  	protected Locale getDefaultLocale() { 		return this.defaultLocale; 	} 	 } ```  ---  **Affects:** 3.1 M2  **Attachments:** - [kt9.png](https://jira.spring.io/secure/attachment/18494/kt9.png) (_121.82 kB_)  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2011-07-23T11:34:10Z","2019-01-11T13:22:27Z"
"","12915","Possibility to explicitly prevent model to be enriched with CommandObject / ImplicitModel when dispached to View [SPR-8267]","**[Josef Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=lisak)** opened **[SPR-8267](https://jira.spring.io/browse/SPR-8267?redirect=false)** and commented  as `@ResponseBody` is not implemented, when one needs to respond to Ajax POST request with some success/error messages via JSON, the model after dispatching to VIEW, contains also the implicitModel - the commandObject from the POST request ... so that at ""someView"" the map contains the entire CommandObject... there is no way to prevent it. THIS IS THE ONLY WAY I KNOW HOW TO RESPOND TO ACTIONREQUEST AND THERE SHOULD BE A POSSIBILITY TO NOT HAVE THE COMMANDEDOBJECT BE PROPAGATED INTO THE VIEW - IT DOESN'T MAKE SENSE.  Action request from view layer goes to this method:  ``` @ActionMapping(params = ""javax.portlet.action=sample"") public void response(ActionRequest request, ActionResponse response, Bean bean) {          response.setRenderParameter(""javax.portlet.action"", ""success"");          List fileList = request.getFiles(""file""); } ```  render phase follows :  ``` @RequestMapping(params = ""javax.portlet.action=success"") public ModelAndView process(RenderRequest request, Model model) throws IOException {          Map map = new HashMap();          map.put(""test"", new Integer(1));          return new ModelAndView(""someView"", map); } ```  You create a ""bean"" view :  ``` @Component(""someView"") public class SomeView extends AbstractView {          private Logger logger = Logger.getLogger(SomeView.class);          @Override          protected void renderMergedOutputModel(Map map, HttpServletRequest request, HttpServletResponse response)                            throws Exception {          logger.info(""Resolving ajax request view - "" + map);          JSONObject jsonObj = new JSONObject(map);          logger.info(""content Type = "" + getContentType());          response.setContentType(""application/json"");          response.setCharacterEncoding(""UTF-8"");          response.getWriter().write(jsonObj.toString());          response.getWriter().flush();          } } ```  This is the reason of the ImplicitModel / CommandObject being dispatched to VIEW together with custom model ... and in Portlet environment it is a huge disadvantage when `@ResponseBody` is missing. It is very hard then getting JSON out of the model  ```  if (returnValue instanceof ModelAndView) {     ModelAndView mav = (ModelAndView) returnValue;     mav.getModelMap().mergeAttributes(implicitModel);     return mav; } else if (returnValue instanceof org.springframework.web.servlet.ModelAndView) {     org.springframework.web.servlet.ModelAndView smav = (org.springframework.web.servlet.ModelAndView) returnValue;     ModelAndView mav = (smav.isReference() ? 	new ModelAndView(smav.getViewName(), smav.getModelMap()) : 	new ModelAndView(smav.getView(), smav.getModelMap()));     mav.getModelMap().mergeAttributes(implicitModel);     return mav; } else if (returnValue instanceof Model) {     return new ModelAndView().addAllObjects(implicitModel).addAllObjects(((Model) returnValue).asMap()); } else if (returnValue instanceof View) {     return new ModelAndView(returnValue).addAllObjects(implicitModel); } else if (handlerMethod.isAnnotationPresent(ModelAttribute.class)) {     addReturnValueAsModelAttribute(handlerMethod, handlerType, returnValue, implicitModel);     return new ModelAndView().addAllObjects(implicitModel); } else if (returnValue instanceof Map) {     return new ModelAndView().addAllObjects(implicitModel).addAllObjects((Map) returnValue);     } else if (returnValue instanceof String) {     return new ModelAndView((String) returnValue).addAllObjects(implicitModel); } ```    ---  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-21T08:18:30Z","2018-12-25T11:02:34Z"
"","13045","DirectFieldAccessor fails to preserve shadowed fields [SPR-8398]","**[Jose Luis Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=jlm)** opened **[SPR-8398](https://jira.spring.io/browse/SPR-8398?redirect=false)** and commented  ReflectionUtils.doWithFiels() iterates on fields, from target class to Object class so the ReflectionUtils.FieldCallback in Ctor hide target fields with superclass fields of the same name:  ``` public DirectFieldAccessor(Object target) {                 Assert.notNull(target, ""Target object must not be null""); 		this.target = target; 		ReflectionUtils.doWithFields(this.target.getClass(), new ReflectionUtils.FieldCallback() { 			public void doWith(Field field) { 				fieldMap.put(field.getName(), field); 			} 		}); 		this.typeConverterDelegate = new TypeConverterDelegate(this, target); 		registerDefaultEditors(); 		setExtractOldValueForEditor(true); } ```  Solved testing before put field on fieldMap.  ``` new ReflectionUtils.doWithFields(this.target.getClass(), new ReflectionUtils.FieldCallback() { 	public void doWith(Field field) { 		if (!fieldMap.containsKey(field.getName()) {  		        fieldMap.put(field.getName(), field);                 }         } });  ```    ---  **Affects:** 3.1 M1  **Attachments:** - [TestDirectFieldAccessor.java](https://jira.spring.io/secure/attachment/18308/TestDirectFieldAccessor.java) (_739 bytes_)","closed","in: core,","spring-projects-issues","2011-06-03T17:09:26Z","2012-06-19T03:39:53Z"
"","13002","AntPatternComparator prefers a less specific match when brackets occur [SPR-8355]","**[Johnathon](https://jira.spring.io/secure/ViewProfile.jspa?name=outdooricon)** opened **[SPR-8355](https://jira.spring.io/browse/SPR-8355?redirect=false)** and commented  When sorting the following array: [/a/b/{c}/**, /a/b/{c}/**/, /**, /**/] with the current implementation of AntPathMatcher.AntPatternComparator, the sort order results in: [/**/, /**, /a/b/{c}/**/, /a/b/{c}/**] . In our case, this results in the wrong controller picking up the request.  I believe the problem lies in this block: if (totalCount1 != totalCount2) { return totalCount1 - totalCount2; } and would be correct if instead it returned ""totalCount2 - totalCount1;"". However, I can't speak to how this may affect other use cases.  ---  **Affects:** 3.0.4, 3.0.5  **Issue Links:** - #15181 Assign lowest priority to ""/**"" in AntPathMatcher (_**""duplicates""**_) - #13325 AntPathMatcher.AntPatternComparator algorithm wrong for hierarchical matches  3 votes, 3 watchers","closed","in: core,","spring-projects-issues","2011-05-19T11:48:36Z","2019-01-12T16:48:53Z"
"","13747","Add hook to UrlResource to allow setting of URL. [SPR-9109]","**[John Logan](https://jira.spring.io/secure/ViewProfile.jspa?name=nerff)** opened **[SPR-9109](https://jira.spring.io/browse/SPR-9109?redirect=false)** and commented  I just ran into an instance where I was maintaining some code that used urlResouce.getInputStream(), but the URLs being used now point to a server that requires an additional header to be set, otherwise it returns a 403 response.  Looking at the JavaDoc for AbstractResource, AbstractFileResolvingResource, and UrlResource, I didn't see any existing way to set headers or otherwise tweak HttpURLConnection settings.  I worked around this by subclassing from UrlResource and overriding the methods that open URL connections, but it seems like it might be nice to have a protected abstract method on AbstractFileResolvingResource that allows subclasses to implement these setting changes, like (didn't actually try compiling this though):  --- AbstractFileResolvingResource.java	2012-02-10 10:12:19.566585841 -0800 +++ AbstractFileResolvingResource.java.new	2012-02-10 10:21:19.283800683 -0800 @@ -83,6 +83,7 @@ return ResourceUtils.getFile(uri, getDescription()); }  + abstract protected void configureHttpConnection(void HttpURLConnection con);    `@Override`   public boolean exists() {   @@ -96,6 +97,7 @@   // Try a URL connection content-length header...   URLConnection con = url.openConnection();   con.setUseCaches(false);  +         configureHttpConnection(con);       HttpURLConnection httpCon =                         (con instanceof HttpURLConnection ? (HttpURLConnection) con : null);       if (httpCon != null) {  @@ -158,6 +160,7 @@ // Try a URL connection content-length header... URLConnection con = url.openConnection(); con.setUseCaches(false); +      configureHttpConnection(con);     if (con instanceof HttpURLConnection) {          ((HttpURLConnection) con).setRequestMethod(""HEAD"");     }  @@ -176,6 +179,7 @@ // Try a URL connection last-modified header... URLConnection con = url.openConnection(); con.setUseCaches(false); +      configureHttpConnection(con);     if (con instanceof HttpURLConnection) {          ((HttpURLConnection) con).setRequestMethod(""HEAD"");     }  --- UrlResource.java	2012-02-10 10:12:14.430650407 -0800 +++ UrlResource.java.new	2012-02-10 10:20:32.964383282 -0800 @@ -120,6 +120,7 @@ public InputStream getInputStream() throws IOException { URLConnection con = this.url.openConnection(); con.setUseCaches(false); +      configureHttpConnection(con);     try {          return con.getInputStream();     }  @@ -217,4 +218,7 @@ return this.cleanedUrl.hashCode(); }  + `@Override` + protected void configureHttpConnection(HttpURLConnection con) { + }   }  I recognize that there's a tradeoff involved between exposing implementation details (if implementation changes to use something than HttpURLConnection, then there's interface breakage) and providing flexibility (one could implement a property with getter/setter specifically for headers and be implementation independent, but couldn't control other aspects of the w/o a myriad of other properties).  Either way solves the ugliness of having to copy/paste four entire public methods into my subclass to introduce a one-line change in each.  Or if I'm just being dense and missed an existing fix for this, I'd love to hear about it...thanks!    ---  **Affects:** 3.2 M1","closed","status: bulk-closed,","spring-projects-issues","2012-02-10T10:38:08Z","2019-01-12T03:49:09Z"
"","13506","LocalSessionFactoryBean in Spring 3.1.0.RC1 unable to set NamingStrategy [SPR-8864]","**[John Kroubalkian](https://jira.spring.io/secure/ViewProfile.jspa?name=javapda)** opened **[SPR-8864](https://jira.spring.io/browse/SPR-8864?redirect=false)** and commented  org.springframework.orm.hibernate4.LocalSessionFactoryBean missing ability to set NamingStrategy (this ability is available in org.springframework.orm.hibernate3.LocalSessionFactoryBean)  Not sure if this is a bug (or by design) but since there has been no response on forum (http://forum.springsource.org/showthread.php?118079-How-to-set-namingStrategy-in-LocalSessionFactoryBean-in-Spring-3.1.0-and-hibernate-4) thought I'd post it as an issue.  If this is not recommended procedure or if should be posted to another project please let me know.  Also, the Component/s section above does not include a SpringORM item.  The hibernate 3 version of LocalSessionFactoryBean (org.springframework.orm.hibernate3.LocalSessionFactoryBean) had a property of org.hibernate.cfg.NamingStrategy that could be set in xml:  ```xml  	 		 	 	 		 	         ...  ```  The hibernate 4 version of LocalSessionFactoryBean (org.springframework.orm.hibernate4.LocalSessionFa ctoryBean) does not have this property.  I tried using an hibernate.ejb.naming_strategy entry in the hibernateProperties property but it had no effect:  ```xml                                                                                                                                                                                                                           ${hibernate.legacy.dialect}                                 ${hibernate.legacy.show_sql}                                 BOGUScom.my.util.NoPrefixNamingStrategy                                 ${hibernate.legacy.cache.region.factory_class}                                            ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93db3df35b44a9a6c7a202ea242f7e371882080c","closed","type: enhancement,","spring-projects-issues","2011-11-21T10:39:47Z","2012-06-19T03:39:35Z"
"","13346","Doc: @Autowired properties not reliably set in FactoryBean before getObject [SPR-8704]","**[John Kew](https://jira.spring.io/secure/ViewProfile.jspa?name=jkew)** opened **[SPR-8704](https://jira.spring.io/browse/SPR-8704?redirect=false)** and commented  If I have a factoryBean with an `@Autowired` field this field may be null before getObject is called.  I wasn't able to find a similar issue, bu #12108 may be related. It's possible I don't understand the guarantees provided by a FactoryBean. See the test case attached to this issue, and I'll see about adding it to the github test cases.  If two bean factories are declared with:  ```   ```  And the DependentBeanFactory has:  ``` public class DependentBeanFactory implements FactoryBean {     @Autowired     BigFancyBean myFancyBean; ... ```  dependentBean.getObject() can be called before myFancyBean is set, often leading to a NullPointerException or other issue.  ---  **Affects:** 3.0.5  **Attachments:** - [SPRING-UNK.tar.gz](https://jira.spring.io/secure/attachment/18805/SPRING-UNK.tar.gz) (_2.27 kB_)  **Issue Links:** - #13893 Intermittent BeanCurrentlyInCreationException when using `@Autowired` on a FactoryBean or anywhere in its dependency graph (_**""is duplicated by""**_) - #14983 Circular dependency problem (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/28e114b569d0e3e19ea0e0160704b6726810f428, https://github.com/spring-projects/spring-framework/commit/fd41f63ec065b890a539451532392fa9b5bb0b28  2 votes, 8 watchers","closed","in: core,","spring-projects-issues","2011-09-16T13:14:44Z","2019-01-13T07:07:49Z"
"","13287","Reduce log level to DEBUG when @TestExecutionListeners is not present [SPR-8645]","**[John David Dunlap](https://jira.spring.io/secure/ViewProfile.jspa?name=john.dunlap)** opened **[SPR-8645](https://jira.spring.io/browse/SPR-8645?redirect=false)** and commented  #### Overview  Example log output:  ``` org.springframework.test.context.TestContextManager - @TestExecutionListeners is not present for class [class ]: using defaults. ```  My logs are getting cluttered by messages like this because it gets displayed after each test is run. I don't need test execution listeners in my use case so I find myself trying to find ways to silence this message.  #### Goal  Consider changing the log level of this message from `INFO` to `DEBUG` or `TRACE`.   ---  **Affects:** 3.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5710cf5ed29139e94853f3d14124eb100a924b82","closed","type: enhancement,","spring-projects-issues","2011-08-26T15:37:25Z","2012-08-10T09:44:03Z"
"","13354","Expose BEST_MATCHING_PATTERN_ATTRIBUTE with RequestMappingHandlerMapping [SPR-8712]","**[John Cook](https://jira.spring.io/secure/ViewProfile.jspa?name=nogyara)** opened **[SPR-8712](https://jira.spring.io/browse/SPR-8712?redirect=false)** and commented  Please, expose the best matching pattern (HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE) with Spring 3.1+ RequestMappingHandlerMapping as it used to be with Spring 3.0 DefaultAnnotationHandlerMapping (resp. in AbstractUrlHandlerMapping.exposePathWithinMapping). Though it is still possible to expose it by myself with a specialized HandlerInterceptor, I don't see any reason, why it shouldn't be exposed directly from framework.   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f200ccd89972c45d24fbbe86c69a9f15fc6e7d15","closed","type: enhancement,","spring-projects-issues","2011-09-20T00:24:35Z","2012-06-19T03:39:46Z"
"","12967","Look up of parameter annotations causes deadlock [SPR-8319]","**[Johannes Tuchscherer](https://jira.spring.io/secure/ViewProfile.jspa?name=jtuchscherer)** opened **[SPR-8319](https://jira.spring.io/browse/SPR-8319?redirect=false)** and commented  When there are a lot of requests hitting a request method with parameter annotations we occasionally get a deadlock in the jvm (see below for stack trace). I think this could be easily fixed in the org.springframework.core.HandlerMethodInvoker, if - instead of creating a new instance of MethodParameter every time (line 243) - the methodParameters and their annotations would be cached. This would also give us a nice performance gain, since we don't need to lookup annotations every time the request method is called.  java.lang.Thread.State: BLOCKED (on object monitor) at java.lang.reflect.Proxy.getProxyClass(Proxy.java:417)  - waiting to lock  (a java.util.HashMap) at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581) at sun.reflect.annotation.AnnotationParser.annotationForMap(AnnotationParser.java:239) at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:229) at sun.reflect.annotation.AnnotationParser.parseParameterAnnotations2(AnnotationParser.java:133) at sun.reflect.annotation.AnnotationParser.parseParameterAnnotations(AnnotationParser.java:110) at java.lang.reflect.Method.getParameterAnnotations(Method.java:751) at org.springframework.core.MethodParameter.getParameterAnnotations(MethodParameter.java:232) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:246) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:169) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:421) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:409) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)  Blocked by:  java.lang.Thread.State: BLOCKED (on object monitor) at java.util.AbstractList.iterator(AbstractList.java:273) at java.util.AbstractList.hashCode(AbstractList.java:524) at java.util.HashMap.get(HashMap.java:300) at java.lang.reflect.Proxy.getProxyClass(Proxy.java:426)  - locked  (a java.util.HashMap) at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581) at sun.reflect.annotation.AnnotationParser.annotationForMap(AnnotationParser.java:239) at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:229) at sun.reflect.annotation.AnnotationParser.parseParameterAnnotations2(AnnotationParser.java:133) at sun.reflect.annotation.AnnotationParser.parseParameterAnnotations(AnnotationParser.java:110) at java.lang.reflect.Method.getParameterAnnotations(Method.java:751) at org.springframework.core.MethodParameter.getParameterAnnotations(MethodParameter.java:232) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:246) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:169) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:421) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:409) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:771) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:716) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)  ---  **Affects:** 3.0.2  **Issue Links:** - #13936 monitor contention at org.springframework.core.MethodParameter.getParameterAnnotations() (_**""duplicates""**_) - #14429 Develop ConcurrentReferenceHashMap  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2011-05-09T13:55:40Z","2019-01-12T16:48:55Z"
"","13160","ResourceHttpRequestHandler should check for directory traversal [SPR-8515]","**[Johannes Scharf](https://jira.spring.io/secure/ViewProfile.jspa?name=scharfj)** opened **[SPR-8515](https://jira.spring.io/browse/SPR-8515?redirect=false)** and commented  The ResourceHttpRequestHandler which was introduced in Spring 3.0.4 (see #11776) and supersedes ResourceServlet from Spring WebFlow doesn't check for directory traversal.  Given the following configuration it is possible to traverse one hierachy up and get access to resources which may not should be exposed to the outside.  **Example:** Given the application runs under /myapp and the DispatcherServlet is mapped onto path /main/* and the configuration of the ResourceHttpRequestHandler is as follows:   With a tool like ""Burp Proxy"" it is now possible to issue a request like that: GET /myapp/main/resources/../secret-web-resources/secret.txt HTTP/1.1  This would traverse up to path /META-INF/secret-web-resources and expose ""secret.txt"".  A more fatal configuration would be  which would allow for an attacker to expose ""web.xml"" with a request like GET /myapp/main/resources/../web.xml HTTP/1.1  The deeper the mapping of ResourceHttpRequestHandler is, the higher the path can be traversed. A mapping like  would even allow for traversing two directories up. That is because the request URI seems to be resolved by Tomcat before it tries find a matching servlet mapping. Later on the original path - containing "".."" - gets passed to the servlet. So it is possible that the resulting URI doesn't match the Spring DispatcherServlet mapping any more. This seems to be a kind of barrier for the directory traversal attack.  Also classpath resources (eg. classpath:/dir/) can be exposed that way. The tests were performed with Tomcat 6.0.29 under Windows XP SP 3.  **Summary:** - ResourceHttpRequestHandler doesn't check for directory traversal - Thus resources either in web context or classpath with a known media type can be exposed - The deeper the mapping of the ResourceHttpRequestHandler is, the higher the path can be traversed  In my book, the ResourceServlet from Spring WebFlow follows a much more secure approach by matching the path against some patterns to check if it is allowed.  **Suggestions:** The ResourceHttpRequestHandler should check if the resolved Resource is beneath the given location and **NOT** above of it. Following that approach the attacker would be jailed into the (parent) location. From a user's perspective it would be much more intuitive if only resources beneath a given location are exposed to the outside.  ---  **Affects:** 3.0.4, 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41b9a461df287e4793eb722671bc3a75b65ebf25, https://github.com/spring-projects/spring-framework/commit/fd7e0b405b1fa418ed7449200a42d77a145f92e8","closed","type: enhancement,","spring-projects-issues","2011-07-06T11:52:06Z","2019-01-11T13:20:13Z"
"","13074","allow SimpleJdbcTemplate to create insert statements qualified with database name [SPR-8428]","**[Joe Kearney](https://jira.spring.io/secure/ViewProfile.jspa?name=joekearney)** opened **[SPR-8428](https://jira.spring.io/browse/SPR-8428?redirect=false)** and commented  It is not currently possible to execute a cross-database insert with `SimpleJdbcTemplate` because the `TableMetaDataContext` will not put the database name in the SQL string. This behaviour cannot be overridden for use in `SimpleJdbcTemplate` because it's a private final field.  If `org.springframework.jdbc.core.metadata.TableMetaDataContext.createInsertString(String[])` prepended the database name (is this the catalog name?) before the `schema.table_name` then this would just work. Similarly if `SimpleJdbcTemplate` allowed the `TableMetaDataContext` to be set, we could implement this ourselves.  **Workaround** is to use `withoutTableColumnMetaDataAccess()`, specify the column names explicitly and give the table name as `database_name..table_name`.  **Use case** database server login per system component with appropriate privileges to the multiple databases in the database server. Single connection may be able to read/write from/to more than one database, but has only one default database.  (This applies to at least MS SQL Server with multiple databases in the same database server.)   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-06-09T03:15:50Z","2015-09-22T16:55:22Z"
"","13479","Spring MVC easy 404 interception [SPR-8837]","**[Jeremy Solarz](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremys)** opened **[SPR-8837](https://jira.spring.io/browse/SPR-8837?redirect=false)** and commented  Would be nice to have a basic mechanism for handling 404 errors via Spring MVC.  E.g. if you have a basic REST application where only JSON is used for communication. The case when a URL is called that is none existent results in a proper JSON response + error message and not a general 404 error.  See the following Stackoverflow entry for a detailed explaination what I tried to achieve this. http://stackoverflow.com/questions/7228622/spring-mvc-exception-handling-with-handlerexceptionresolver/7228646  Only ""sub-urls"" that don't match to a given request-mapping are caught by this example.  Regards  JS   --- No further details from [SPR-8837](https://jira.spring.io/browse/SPR-8837?redirect=false)","closed","status: invalid,","spring-projects-issues","2011-11-11T04:39:43Z","2019-01-12T05:29:39Z"
"","13478","Linking Spring Tool Set into beginning of Spring Doc [SPR-8836]","**[Jeremy Solarz](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremys)** opened **[SPR-8836](https://jira.spring.io/browse/SPR-8836?redirect=false)** and commented  Would be nice to have a link to SpringSource Tool Suite in the Spring doc's that says to use SpringSource Tool Suite for development because it has XYZ features.  Especially a hint that SpringSource Tool Suite has a basic Spring MVC template as a starter would be helpful for people who are new to Spring and want to start fast.  Possible places for a reference to STS in the Docu would be:  http://static.springsource.org/spring/docs/current/spring-framework-reference/html/overview.html  http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html  Regards  JS   --- No further details from [SPR-8836](https://jira.spring.io/browse/SPR-8836?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-11-11T04:32:22Z","2015-09-22T19:30:59Z"
"","13644","GenericConversionService not converting concrete types when Converter uses abstract types [SPR-9004]","**[Jeremy Hammond](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremyhammond)** opened **[SPR-9004](https://jira.spring.io/browse/SPR-9004?redirect=false)** and commented  I recently upgraded from spring 3.0.5 to 3.1.0.  We encountered an issue where a converter that was previously picked is not being resolved and as a result and we are experiencing a ""No converter found capable of converting from type java.lang.String to typy BLAH"" issue.  I was able to replicate this via the attached unit test ""ConverterTest"".  It seems to me that in 3.0.5 getMatchingConverterForTarget was returning a GenericConverter but in 3.1.0 it is not resolving it.  You will see in the attached test that it works fine for  3.0.5 but the test testUsingConcreteClass fails using 3.1.0.  This test trys to convert a Concrete instance of a class when the Converter is generic and uses the base class.    ---  **Affects:** 3.1 GA  **Attachments:** - [ConverterTest.java](https://jira.spring.io/secure/attachment/19274/ConverterTest.java) (_1.53 kB_) - [pom.xml](https://jira.spring.io/secure/attachment/19275/pom.xml) (_1.01 kB_)","closed","in: core,","spring-projects-issues","2012-01-06T07:08:20Z","2019-01-12T16:37:01Z"
"","13462","Add support for setting an MBeanServerForwarder to ConnectorServerFactoryBean [SPR-8820]","**[Jens Borgland](https://jira.spring.io/secure/ViewProfile.jspa?name=jborgland)** opened **[SPR-8820](https://jira.spring.io/browse/SPR-8820?redirect=false)** and commented  It would be very useful if the ConnectorServerFactoryBean also could set an MBeanServerForwarder on the ConnectorServer. Suggested implementation below.  ```java private MBeanServerForwarder mbsf;  public void setMBeanServerForwarder(MBeanServerForwarder mbsf) {     this.mbsf = mbsf; }  public void afterPropertiesSet() throws JMException, IOException {      // some existing code...       // Do we want to register the connector with the MBean server?     if (this.objectName != null) {         doRegister(this.connectorServer, this.objectName);     }      // Set the MBeanServerForwarder, if one has been specified     if (this.mbsf != null) {         this.connectorServer.setMBeanServerForwarder(this.mbsf);     }      // more code... } ```    ---  **Affects:** 3.0.6, 3.1 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?56814-How-to-configure-a-MBeanServerForwarder-with-ConnectorServerFactoryBean  **Attachments:** - [spr-8820.patch](https://jira.spring.io/secure/attachment/19126/spr-8820.patch) (_11.80 kB_)","closed","type: enhancement,","spring-projects-issues","2011-11-05T03:25:51Z","2012-06-19T03:39:16Z"
"","13342","ResponseEntity now returned as a literal response when used in conjunction with @ResponseBody [SPR-8700]","**[Jennifer Hickey](https://jira.spring.io/secure/ViewProfile.jspa?name=jencompgeek)** opened **[SPR-8700](https://jira.spring.io/browse/SPR-8700?redirect=false)** and commented  I have a Controller method that uses ResponseEntity (code below). With Spring 3.1 M1, restTemplate.getForObject() returned this: ""org.springframework.data.redis.connection.jedis.JedisConnectionFactory""  After upgrading to M2 (with no code changes), getForObject returns this: ""{""statusCode"":""OK"",""headers"":{},""body"":""org.springframework.data.redis.connection.jedis.JedisConnectionFactory""}""  Removing `@ResponseBody` from the method solves the problem.  It looks like ResponseEntity was detected by type before looking for `@ResponseBody` in the old AnnotationMethodHandlerAdapter. In the new RequestMappingHandlerMapping, return value handlers are ordered by annotation first and then by type.  ```java Controller Method: @RequestMapping(value = ""/redis"", method = RequestMethod.GET) public @ResponseBody ResponseEntity getRedisClass() {     if (serviceHolder.getRedisConnectionFactory() == null) {         return new ResponseEntity(HttpStatus.NOT_FOUND);     }     return new ResponseEntity(         serviceHolder.getRedisConnectionFactory().getClass().getName(), HttpStatus.OK); } ```    ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb526f534ab412f0f893221b8bca1e74e49c325b","closed","type: bug,","spring-projects-issues","2011-09-15T13:15:06Z","2012-06-19T03:39:36Z"
"","12975","Spring MVC should support a non-default Tiles container [SPR-8326]","**[Jeffrey Reichenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=jreichenberg)** opened **[SPR-8326](https://jira.spring.io/browse/SPR-8326?redirect=false)** and commented  Spring MVC provides various integration points with the Tiles 2 framework. In the Tiles 2 framework, it is possible to configure multiple or non-default Tiles containers within the same web application. This is useful/required in cases where Spring MVC and another framework live in the same web application and both use the Tiles framework.  To retrieve the proper Tiles container, the getter ServletUtil.getCurrentContainer(ServletRequest request, ServletContext context) should be used. In the Spring code, however, the simplified getter getContainer(ServletContext context) is used, which just returns the default Tiles container and returns null if a custom ""container key"" is used.  To reproduce:  1) Within the Tiles framework, set up a Tiles container with a non-default ""container key"". 2) Add the following code to DispatcherServlet doService()  //Tell the Tiles framework to use a non-default Tiles container. Necessary for cases where Spring MVC and //another MVC framework live in the same web application since they have different PreparerFactory classes ServletUtil.setCurrentContainer(request, request.getSession().getServletContext(), MY_NON_DEFAULT_CONTAINER_KEY);  3) All calls to ServletUtil.getContainer(ServletContext context) within the Spring code will return null. Replacing those calls with ServletUtil.getCurrentContainer(ServletRequest request, ServletContext context); will fix the issue.    ---  **Reference URL:** http://forum.springsource.org/showthread.php?109150-Need-to-run-multiple-non-default-Tiles-container-with-Spring-MVC...how&p=361656","closed","type: enhancement,","spring-projects-issues","2011-05-10T13:54:25Z","2018-12-27T11:22:22Z"
"","13516","Make configurable the key used to specify active profiles (spring.profiles.active) [SPR-8875]","**[jean](https://jira.spring.io/secure/ViewProfile.jspa?name=jean)** opened **[SPR-8875](https://jira.spring.io/browse/SPR-8875?redirect=false)** and commented  For background, see https://jira.springsource.org/browse/SPR-8869?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=73077  Currently the key used to read Spring active profiles is named 'spring.profiles.active' and it can't be changed.  There are several use cases where making this key fully configurable would reveal highly useful.  e.g. 'myapp1_profiles_active', 'myapp2_profiles_active', 'foobar_x', etc.  One idea behind the newly introduced Spring profile feature is to be able to trigger a specific configuration in an application without changing the content of the application, just by introducing a variable that will be read by Spring at startup.  This key value can be read from the system environment variable (no additional parameter needed when starting an application) or from the java system properties, traditionally passed with -Dkey=value in the command line used to stat the application.  When you have several applications running on a single machine, such as when you work on different applications as a developer, you may quickly end up needing to pass different spring active profile values to each application.  This isn't possible with system environment variable. You can only specify different spring.profiles.active value per application through Java system properties, which can become quiet cumbersome when you have many run/debug configuration in your IDE, or when you use maven command line.  Allowing for a fully configurable key through a simple annotation, something like `@ActiveProfilesPropertyName`(""myapp_profiles_active""), or it's equivalent in XML, would allow for a higher level of configurability. This would be used only by the ones that need this higher level, conventional key value would apply by default.   ---  **Reference URL:** https://jira.springsource.org/browse/SPR-8869?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=73077  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-11-24T23:40:18Z","2019-01-11T15:09:50Z"
"","13428","Deadlock during application context creation [SPR-8785]","**[Jean-Pierre Bergamin](https://jira.spring.io/secure/ViewProfile.jspa?name=ractive)** opened **[SPR-8785](https://jira.spring.io/browse/SPR-8785?redirect=false)** and commented  We face a deadlock in virgo 3.0.0.RELEASE when starting our spring dm powered bundles during the creation of the application contexts. Two bundles get in a deadlock while their contexts get created simultaneously.  Please see the [discussion in the eclipse forum](http://www.eclipse.org/forums/index.php/t/248977/) for full stacktraces of the blocking threads.  ---  **Affects:** 3.0.6  **Reference URL:** http://www.eclipse.org/forums/index.php/t/248977/  **Issue Links:** - #13117 Performance bottleneck and potential thread deadlock in DefaultSingletonBeanRegistry (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-10-18T04:33:05Z","2019-01-12T16:48:26Z"
"","13606","Wildcards support in PropertySource annotation values [SPR-8966]","**[Jean-Christophe Delmas](https://jira.spring.io/secure/ViewProfile.jspa?name=jcdelmas)** opened **[SPR-8966](https://jira.spring.io/browse/SPR-8966?redirect=false)** and commented  Would it be possible to add support for resource location wildcards (e.g. classpath*:/META-INF/conf/*.properties) in PropertySource annotation.   --- No further details from [SPR-8966](https://jira.spring.io/browse/SPR-8966?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-12-28T06:56:13Z","2018-12-27T12:04:46Z"
"","13295","Spring 3.1 Cache abstraction - UnsupportedOperationException in AbstractCacheAspect ... [SPR-8653]","**[Jay Prasad](https://jira.spring.io/secure/ViewProfile.jspa?name=jayj)** opened **[SPR-8653](https://jira.spring.io/browse/SPR-8653?redirect=false)** and commented  The Spring 3.1 Cache abstraction throws an UnsupportedOperationException in AbstractCacheAspect if any method that uses the Cacheable or CacheEvict annotation throws an exception (including runtime exceptions). This changes the behavior for calling code that check the type of exception thrown because it now needs to unpack the UnsupportedOperationException to find the real cause. IMHO, RuntimeException should be let through without wrapping in UnsupportedOperationException.   ---  **Affects:** 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?113935-Spring-3.1-Cache-abstraction-UnsupportedOperationException-in-AbstractCacheAspe-...  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9de19d7b31c684fe65f51233a70ada6ecc15221","closed","in: core,","spring-projects-issues","2011-08-30T09:01:41Z","2012-06-19T03:39:08Z"
"","13638","Regression: 3.0.4 broke JAX-WS 2.0 support: JaxWsPortClientInterceptor.FeaturePortProvider uses JAX-WS 2.1 API [SPR-8998]","**[Jay Kamm](https://jira.spring.io/secure/ViewProfile.jspa?name=jaykamm)** opened **[SPR-8998](https://jira.spring.io/browse/SPR-8998?redirect=false)** and commented  The following change introduced in 3.0.4: * AbstractJaxWsServiceExporter supports ""webServiceFeatures"" bean property on JAX-WS 2.2   introduced a regression that broken JAX-WS 2.0 compatibility.   Namely, the source code as shown here on line 547:   http://javasourcecode.org/html/open-source/spring/spring-3.0.4/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java.html   makes use of a method javax.xml.ws.Service.getPort( QName, Class\, WebServiceFeature[] )   that is clearly documented by Sun to have been introduced in JAX-WS 2.1:   http://jax-ws.java.net/nonav/jaxws-api/2.2/javax/xml/ws/Service.html#getPort(javax.xml.namespace.QName,%20java.lang.Class,%20javax.xml.ws.WebServiceFeature...)  That inner class is trying to support older versions, but this problem results in a NoSuchMethodError when running against a JAX-WS 2.0 binary, such as that included in Websphere 6.1.  Full Stack Trace shown below:  [1/5/12 23:04:21:032 EST] 00000051 WebApp        E   [Servlet Error]-[dispatch]: org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(redacted-for-jira)' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Invocation of init method failed; nested exception is java.lang.NoSuchMethodError: javax/xml/ws/Service.getPort(Ljavax/xml/namespace/QName;Ljava/lang/Class;[Ljavax/xml/ws/WebServiceFeature;)Ljava/lang/Object; Caused by: java.lang.NoSuchMethodError: javax/xml/ws/Service.getPort(Ljavax/xml/namespace/QName;Ljava/lang/Class;[Ljavax/xml/ws/WebServiceFeature;)Ljava/lang/Object; at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor$FeaturePortProvider.getPortStub(JaxWsPortClientInterceptor.java:547) at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getPortStub(JaxWsPortClientInterceptor.java:416) at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.prepare(JaxWsPortClientInterceptor.java:337) at org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.afterPropertiesSet(JaxWsPortClientInterceptor.java:316) at org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean.afterPropertiesSet(JaxWsPortProxyFactoryBean.java:42) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1062) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1029) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:420) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at com.ibm.ws.wswebcontainer.webapp.WebApp.notifyServletContextCreated(WebApp.java:653) at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinish(WebApp.java:378) at com.ibm.ws.wswebcontainer.webapp.WebApp.initialize(WebApp.java:293)  I've selected the versions I believe are affected, which are everything from 3.0.4 forward.   ---  **Affects:** 3.0.4, 3.0.5, 3.0.6, 3.0.7, 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/96b8c464808859943719551db2351d4b5502fc14","closed","in: web,","spring-projects-issues","2012-01-05T20:39:04Z","2019-01-11T14:37:40Z"
"","13331","Bidirectional Spring 3 Type Conversion for Enumeration [SPR-8689]","**[Javaid Bolaky](https://jira.spring.io/secure/ViewProfile.jspa?name=javaid.bolaky)** opened **[SPR-8689](https://jira.spring.io/browse/SPR-8689?redirect=false)** and commented  Hi there,  According to spring 3 conversion reference manual for enum conversion,  Suppose we have an enumeration like  public enum PoolType {  CARPOOL(""1""), VANPOOL(""2"");  private String code;  private PoolType(String code) { this.code = code; }  public String getCode() { return code; }  and If in the request page we have :  \\ \--SELECT--\ \Car Pool\ \Van Pool\ \\  and if a model has an attribute as being an Enum Type (PoolType), when submitting a form we need to register a converter factory such as  public class StringToPoolTypeConverterFactory implements ConverterFactory {  public \ Converter getConverter( Class\ targetType) {  return new StringToPoolTypeEnumConverter\(); }  private final class StringToPoolTypeEnumConverter implements Converter {  `@SuppressWarnings`(""unchecked"") public T convert(final String source) { return (T) PoolType.convertCode(source); } }  }  This will only work when submitting a form request where a conversion of lets say String ""2"" converting to VANPOOL so that in my model i already get it as a PoolType type.  But when loading a page where pool type enum is already populated in a model, the above StringToPoolTypeConverterFactory will not work because we have to register another converter factory for conversion of PoolType to String like for example below :  public class PoolTypeToStringConverterFactory implements ConverterFactory {  public \ Converter getConverter( Class\ targetType) {  return new PoolTypeEnumToStingConverter\(); }  private final class PoolTypeEnumToStingConverter\ implements Converter {  `@SuppressWarnings`(""unchecked"") public T convert(final PoolType poolType) { return poolType != null ? (T) poolType.getCode() : null; } }  So am wondering if Converter interface (or by any other means) could have the possibility to handles bidirection conversion , i.e StringToEnumType and EnumTypeToString.  The idea here is significantly to reduce the number of converterFactors for applications that uses a lot of Enum in their models.  This is just a suggestion.  If you you please give it a though and let us know.  Thanks   --- No further details from [SPR-8689](https://jira.spring.io/browse/SPR-8689?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2011-09-13T06:54:57Z","2019-01-12T03:49:21Z"
"","13107","ServletContextResource getFile should not rely on getRealPath (for WebLogic 10 compatibility) [SPR-8461]","**[Jason Arndt](https://jira.spring.io/secure/ViewProfile.jspa?name=jarndt196)** opened **[SPR-8461](https://jira.spring.io/browse/SPR-8461?redirect=false)** and commented  When using the ResourceHttpRequestHandler to serve static resources the ServletContextResource's getFile() method that is used doesn't work when not deploying exploded.  Here is the scenario:  * wire up in spring config     * access http://localhost:7001/myapp/resources/images/img.gif  * DispatcherServlet gets the request and delegates to the ResourceHttpRequestHandler.getResource()  * ResourceHttpRequestHandler uses the ServletContextResource from it's list of locations to check ""exists"" and ""readable""  * ServletContextResource says yes it exists  * isReadable() hops to AbstractFileResolvingResource, which determines that is is a ""file system resolution"" and calls getFile() on ServletContextResource.  NOTE: the url that is returned by Weblogic is file:c:/weblogic/tmp/blah/blah/blah/resources/images/img.gif  * The ServletContextResource.getFile() uses WebUtils.getRealPath(), which is returning /resources/images/img.gif and it tries to then create a File object.  I was able to work around this issue by creating and plugging in a custom ServletContextResource class that overrides the getFile() method and does this:  `@Override` public File getFile() throws IOException { //////////////////////////////////////////////////// //TODO: this fixes a Bug in spring...they are using file path resolution, so use it here too... //   `@see` AbstractFileResolvingResource.isReadable() //String realPath = WebUtils.getRealPath(this.servletContext, this.path); //return new File(realPath); //////////////////////////////////////////////////////// URL url = getServletContext().getResource(getPath()); String realPath = url.getPath(); return new File(realPath); }  I have tested this using Weblogic 10.3 deployed exploded, not exploded, and using the eclipse plugin which is basically exploded.   ---  **Affects:** 3.0.5, 3.1 M1, 3.1 M2  4 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2011-06-16T09:42:03Z","2019-01-11T13:35:29Z"
"","13387","MultiActionController in Spring [SPR-8745]","**[Jaroslavas](https://jira.spring.io/secure/ViewProfile.jspa?name=jaroslavas)** opened **[SPR-8745](https://jira.spring.io/browse/SPR-8745?redirect=false)** and commented  Hi, I have this problem. I have MultiActionControler public class LecturerPage extends MultiActionController {      public LecturerPage() {     }               @RequestMapping(params = ""action=upload"")         public ModelAndView upload(HttpServletRequest request,         HttpServletResponse response) throws Exception {                  System.out.print(""dddddddddddddd"");              return new ModelAndView(""redirect:index.htm"");     }  }  and create a link Go to Action2  there is my distpatcher file: \ \ \ \indexController\ \helloWorldController\ \LoginPageForm\ \LecturerPage11\ \                                                                                 \ \ \               action  \ and Go to Action2  this linnk is not working. Please help me. That I am doing wrong?   --- No further details from [SPR-8745](https://jira.spring.io/browse/SPR-8745?redirect=false)","closed","status: invalid,","spring-projects-issues","2011-10-06T13:09:55Z","2019-01-12T05:29:47Z"
"","13721","MANIFEST.MF of Spring ORM should contain import for javax.persistence.metamodel so that Spring Data JPA can be used in an OSGi environment [SPR-9083]","**[Jan Stamer](https://jira.spring.io/secure/ViewProfile.jspa?name=remast)** opened **[SPR-9083](https://jira.spring.io/browse/SPR-9083?redirect=false)** and commented  Hi All,  I want to use Spring Data JPA in an OSGi environment. Currently that is not possible as Spring Data JPA in OSGi requires that the Spring ORM jar org.springframework.orm-3.1.0.RELEASE.jar declares an import for javax.persistence.metamodel which is not the case.  So this can easily be fixed by adding the following info to the list of imported packages in the OSGi Manifest: javax.persistence.metamodel;version=""[1.0.0, 3.0.0)"";resolution:=""optional""  See the attached manifest files for details. One is the original manifest file of org.springframework.orm-3.1.0.RELEASE.jar.original and the other is a corrected manifest.  I have done so in my development environment and it works. Yet I have not really figured out how that line can be added during the regular spring build, as the OSGi manifest seems to be generated. Feel free to contact me for more details.  Bye, Jan   ---  **Affects:** 3.1 GA  **Attachments:** - [MANIFEST.MF](https://jira.spring.io/secure/attachment/19351/MANIFEST.MF) (_12.97 kB_) - [MANIFEST.MF.corrected](https://jira.spring.io/secure/attachment/19350/MANIFEST.MF.corrected) (_13.05 kB_)  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-02-01T05:31:30Z","2019-01-12T16:36:55Z"
"","13609","Generic collection type resolution for CGLIB proxy should introspect superclass [SPR-8969]","**[Jan Novotný](https://jira.spring.io/secure/ViewProfile.jspa?name=novoj)** opened **[SPR-8969](https://jira.spring.io/browse/SPR-8969?redirect=false)** and commented  In connection with reported MyBatis issue: http://code.google.com/p/mybatis/issues/detail?id=481  It seems there is no possibility how to make CgLib factory keep Generic info in overriden methods. In such case BeanWrapperImpl cannot recognize generic type on method such as:  public List\ getTagIds();  Because in CgLib proxy signature looks like:  public final List getTagIds();  Would it be possible to detect if instance is dynamic proxy and if so, try to find same method on original superclass that was proxied and get generic information from this one?   ---  **Affects:** 3.1 RC1","closed","status: bulk-closed,","spring-projects-issues","2011-12-29T07:19:04Z","2019-01-12T02:36:24Z"
"","12914","Deadlock when configuring more maxConsumers than threads available in workmanager @ DefaultMessageListenerContainer.  [SPR-8266]","**[Jan Groot](https://jira.spring.io/secure/ViewProfile.jspa?name=j.j.groot)** opened **[SPR-8266](https://jira.spring.io/browse/SPR-8266?redirect=false)** and commented  On our system we've configured a messagelistener  ```xml                                                                                                                                  ```  The ${ebt.wm.jndiname} referes to a pool of 10 threads, what happened was that there appeared to be a deadlock situation. (see attached excerpt of the thread dump.) When load got serious the JMS container stopped picking up messages from the queue.  We've solved this by increasing the threadpool to 30.    ---  **Affects:** 3.0.5  **Attachments:** - [threaddump.txt](https://jira.spring.io/secure/attachment/18058/threaddump.txt) (_6.91 kB_)","closed","status: declined,","spring-projects-issues","2011-04-21T03:43:22Z","2019-01-12T16:25:44Z"
"","13725","Provide transactional support for Infinispan 2nd level cache [SPR-9087]","**[Jan Goyvaerts](https://jira.spring.io/secure/ViewProfile.jspa?name=jan_goyvaerts)** opened **[SPR-9087](https://jira.spring.io/browse/SPR-9087?redirect=false)** and commented  I have a classic JPA configuration in which I'm using Hibernate. I'd like to switch to Infinispan for 2nd level- and query caching. Mainly because this cache takes the transaction into account. This is for a standalone deployment on Tomcat.  However, there is no way yet to integrate the Spring transaction manager for Infinispan. (At least, I didn't found a way.)  ```xml                                                                                                                                                   org.hibernate.cache.infinispan.InfinispanRegionFactory         true         true         true         ... something of Spring should be here ...          create         1000         false         ${database.hibernate.dialect}                 ```  ---  **Issue Links:** - #15217 Add Infinispan Cache Implementation (_**""duplicates""**_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-02T07:16:57Z","2019-01-11T22:27:37Z"
"","13669","javax.Provider Spring support doesn't work for collections [SPR-9030]","**[Jan Dudek](https://jira.spring.io/secure/ViewProfile.jspa?name=lfty)** opened **[SPR-9030](https://jira.spring.io/browse/SPR-9030?redirect=false)** and commented  Let's have this following class:  ``` @Component public class TestClass {     private List propertyRelatedClasses;       public List getPropertyRelatedClasses() {         return propertyRelatedClasses;     }       @Inject     public void setPropertyRelatedClasses(Provider propertyRelatedClassesProvider) {         this.propertyRelatedClasses = propertyRelatedClassesProvider.get();     } }  I want to inject a `List` of all existing instances of type `RelatedClass2` using a Provider. What I get is:  ```  ... Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [java.lang.Object] is defined: expected single matching bean but found 15: [relatedClass1, 2b, 2a, org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalRequiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.annotation.internalPersistenceAnnotationProcessor, org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0, environment, systemProperties, systemEnvironment, importRegistry, messageSource, applicationEventMulticaster] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:800) at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory.getObject(DefaultListableBeanFactory.java:1023) at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProvider.get(DefaultListableBeanFactory.java:1038) at com.gooddata.connectors.restapi.controller.springtest.TestClass.setPropertyRelatedClasses(TestClass.java:25) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  ```  The ``` 2a ``` and  ```2b ``` beans are of type `RelatedClass2`. ```  ---  **Affects:** 3.1 GA  **Issue Links:** - #13730 Injecting / autowiring collection provider doen't work (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c55362c35e0c098d3e7fb9c5c749e180382bbca8","closed","in: core,","spring-projects-issues","2012-01-16T07:32:16Z","2019-01-11T22:21:40Z"
"","13334","DirectFieldBindingResult should support autoGrowNestedPaths [SPR-8692]","**[James Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=jlward4th)** opened **[SPR-8692](https://jira.spring.io/browse/SPR-8692?redirect=false)** and commented  When using direct field access I want to be able to traverse paths:   But it doesn't work according to: http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/validation/DirectFieldBindingResult.html  ---  **Affects:** 3.1 M2  **Issue Links:** - #14339 org.springframework.beans.DirectFieldAccessor fails to go through field paths recursively  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0979cbab6578c1f5f5a6757c9e80731faa7022d","closed","type: enhancement,","spring-projects-issues","2011-09-13T23:09:17Z","2019-01-11T14:23:22Z"
"","12932","TransactionAspectUtils.isQualifierMatch() does not search parent contexts [SPR-8284]","**[James Shaw](https://jira.spring.io/secure/ViewProfile.jspa?name=hertzsprung)** opened **[SPR-8284](https://jira.spring.io/browse/SPR-8284?redirect=false)** and commented  The call to ConfigurableListableBeanFactory.containsBeanDefinition() will not search parent contexts which results in an error:  ``` java.lang.IllegalStateException: No matching PlatformTransactionManager bean found for qualifier 'myQualifier' - neither qualifier match nor bean name match! 	at org.springframework.transaction.interceptor.TransactionAspectUtils.getTransactionManager(TransactionAspectUtils.java:91)  	at org.springframework.transaction.interceptor.TransactionAspectUtils.getTransactionManager(TransactionAspectUtils.java:53)  	at org.springframework.transaction.interceptor.TransactionAspectSupport.determineTransactionManager(TransactionAspectSupport.java:245)  	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:100) ```  I checked that my code works ok when I remove the child ApplicationContext.   ---  **Affects:** 3.0.4","closed","status: declined,","spring-projects-issues","2011-04-28T07:24:18Z","2019-01-12T16:25:38Z"
"","12878","CGLIB enhanced @Configuration classes cannot be garbage collected [SPR-8229]","**[James Shaw](https://jira.spring.io/secure/ViewProfile.jspa?name=hertzsprung)** opened **[SPR-8229](https://jira.spring.io/browse/SPR-8229?redirect=false)** and commented  When an ApplicationContext is closed, any `@Configuration` class that was registered in that context does not get garbage collected.  If I understand the way class loading works, this is because the ClassLoader still holds a reference to the enhanced Configuration class.  This is a problem for me because I want to create ApplicationContexts at runtime.  ---  **Issue Links:** - #12556 ConfigurationClassEnhancer prevents BeanFactory from being GCd (_**""duplicates""**_) - #12556 ConfigurationClassEnhancer prevents BeanFactory from being GCd","closed","in: core,","spring-projects-issues","2011-04-07T04:59:29Z","2019-01-12T16:48:59Z"
"","13567","Please include  block in project pom's. [SPR-8927]","**[JAmes Atwill](https://jira.spring.io/secure/ViewProfile.jspa?name=idcmp)** opened **[SPR-8927](https://jira.spring.io/browse/SPR-8927?redirect=false)** and commented  Hello, we're working on some tooling to ensure none of our dependencies are GPL. To do this, we have a maven plugin that walks through projects and looks at the \ block of the projects to ensure they're whitelisted.  Many projects don't have \ blocks, but they're super quick to add.  Estimate assumes doing all poms in bulk manually and waiting for a CI to push out a new snapshot.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87a021d5c9b25d2e7785bbecbd4e668b2091d4c3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-12-14T13:40:25Z","2019-01-11T14:27:52Z"
"","13101","Capturing groups in regular expressions in @RequestMapping cause IndexOutOfBoundsException [SPR-8455]","**[Jakub Ukrop](https://jira.spring.io/secure/ViewProfile.jspa?name=jukrop)** opened **[SPR-8455](https://jira.spring.io/browse/SPR-8455?redirect=false)** and commented  Using groups in regular expressions in RequestMapping, such as  ```   @RequestMapping(""/web/{id:foo(bar)?}"") public String process(@PathVariable String id) {...} ```  causes  ``` java.lang.IndexOutOfBoundsException: Index: 1, Size: 1 	java.util.LinkedList.entry(Unknown Source) 	java.util.LinkedList.get(Unknown Source) 	org.springframework.util.AntPathStringMatcher.matchStrings(AntPathStringMatcher.java:107) ```  Problem is that `AntPathStringMatcher` expects one variable per matching group. Here we have one variable `id` and two matched groups `(foo(bar)?)` and `(bar)` thus the exception.  Workaround is simple - use non-capturing groups:  ```   @RequestMapping(""/web/{id:foo(:?bar)?}"") public String process(@PathVariable String id) {...} ```  However, it seems there is no correct way of using capturing groups in URI template without an exception being thrown. `AntPathStringMatcher` resolves them as if one could specify more variables per pattern, which in fact one cannot.  ---  **Affects:** 3.0.5  **Attachments:** - [AntPathStringMatcher.java](https://jira.spring.io/secure/attachment/18342/AntPathStringMatcher.java) (_3.62 kB_)  This issue is a sub-task of #12443","closed","type: task,","spring-projects-issues","2011-06-15T06:50:39Z","2019-01-11T13:35:39Z"
"","13155","Update for Spring OXM Reference, including changes introduced in CastorMarshaller [SPR-8509]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-8509](https://jira.spring.io/browse/SPR-8509?redirect=false)** and commented  I had been working with Werner Guttman lead of the Castor XML project on ideas for extending the Spring OXM for current Castor version.  Couple of the patches we had prepared has been alredy applied so we would like to add some extra information into the Spring Reference to document those changes. I have attached a patch that briefly describes the xml schema configuration for 'castor-marshaller' element.  ---  **Affects:** 3.1 M2  **Attachments:** - [SpringOXM Reference.patch](https://jira.spring.io/secure/attachment/18422/SpringOXM+Reference.patch) (_4.52 kB_)  **Issue Links:** - #13116 CastorMarshaller - marshaller and unmarshaller properties.","closed","type: enhancement,","spring-projects-issues","2011-07-05T03:39:48Z","2019-01-11T13:16:08Z"
"","13116","CastorMarshaller - marshaller and unmarshaller properties. [SPR-8470]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-8470](https://jira.spring.io/browse/SPR-8470?redirect=false)** and commented  I had been working with Werner Guttman lead of the Castor XML project on ideas for extending the Spring OXM for current Castor version. I've prepared a patch with additional ""complex"" properties that we would like to exposed by CastorMarshaller.  I've attchet three patches one with changes made in CastorMarshaller, second with tests for those additional properties. The last patch is required to build this version.  ---  **Affects:** 3.1 M2  **Attachments:** - [SpringOXM Build 20.06.2011.patch](https://jira.spring.io/secure/attachment/18356/SpringOXM+Build+20.06.2011.patch) (_2.11 kB_) - [SpringOXM ComplexProperties 20.06.2011.patch](https://jira.spring.io/secure/attachment/18357/SpringOXM+ComplexProperties+20.06.2011.patch) (_27.31 kB_) - [SpringOXM ComplexProperties Tests 20.06.2011.patch](https://jira.spring.io/secure/attachment/18358/SpringOXM+ComplexProperties+Tests+20.06.2011.patch) (_13.57 kB_)  **Issue Links:** - #12943 Extension for CastorMarshaller - additional marshaller properties - #13155 Update for Spring OXM Reference, including changes introduced in CastorMarshaller  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6a2ace739fa97dc25b41014944343d0c65e17c3a  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-06-20T09:24:36Z","2019-01-11T13:10:00Z"
"","13099","SpringOXM CastorMarshaller tests [SPR-8453]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-8453](https://jira.spring.io/browse/SPR-8453?redirect=false)** and commented  I had been working with Werner Guttman lead of the Castor XML project on ideas for extending the Spring OXM for current Castor version. I've prepared a set of patches with additional properties for one of the previously resolved issues (#12943 and #12944).  You should find two patches attached: SpringOXM MarshallerTests 14.06.2011.patch SpringOXM UnmarshallerTests 14.06.2011.patch  ---  **Affects:** 3.1 M2  **Attachments:** - [SpringOXM CastorMarshallerTest with CastorObject.patch](https://jira.spring.io/secure/attachment/18341/SpringOXM+CastorMarshallerTest+with+CastorObject.patch) (_3.33 kB_) - [SpringOXM MarshallerTests 14.06.2011.patch](https://jira.spring.io/secure/attachment/18339/SpringOXM+MarshallerTests+14.06.2011.patch) (_12.92 kB_) - [SpringOXM UnmarshallerTests 14.06.2011.patch](https://jira.spring.io/secure/attachment/18340/SpringOXM+UnmarshallerTests+14.06.2011.patch) (_7.22 kB_)","closed","type: enhancement,","spring-projects-issues","2011-06-14T07:36:47Z","2019-01-11T13:35:59Z"
"","13070","Spring OXM schema improvment for CastorMarshaller - additional properties [SPR-8423]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-8423](https://jira.spring.io/browse/SPR-8423?redirect=false)** and commented  I had been working with Werner Guttman lead of the Castor XML project on ideas for extending the Spring OXM for current Castor version. I've prepared a set of patches with change made to Spring OXM schema, that will allow configuring the Castor marshaller using oxm namespace.  Please consider this as extansion for previouse issue: #12958 (link https://jira.springsource.org/browse/SPR-8309)  Our idea here was to enable full configuration of marshaller through the schema, so we added additional attributes to castor-marshaller.  I believe the CastorMarshallerBeanDefinitionParser would need a comment here, I tried to simply the implementation as much as possible and made it generic in order to allow handling multpile attributes, that is way I decided to extend the AbstractSimpleBeanDefinitionParser. The CastorMarshallerBeanDefinitionParser recognize the type of property (primitive or value type/reference) by the name of attribute. If the attribute ends with '-ref' suffix then it is considered as reference to other bean.  I though that maybe I would be usefull to have such functionality in AbstractSimpleBeanDefinitionParser itself, but I wasn't sure how this will affect the existing code, so I decided to implement that only in the parser.  You will find three patches attached: SpringOXM Enhancement Xml Schema 31.05.11.patch - that contains changes made in SprinOXM xsd SpringOXM Enhancement Xml Implementation 31.05.11.patch - with implementation of CastorMarshallerBeanDefinitionParser SpringOXM Enhancement Xml Tests 31.05.11.patch - with tests for above changes  ---  **Attachments:** - [SpringOXM Enhancement Xml Implementation 31.05.11.patch](https://jira.spring.io/secure/attachment/18338/SpringOXM+Enhancement+Xml+Implementation+31.05.11.patch) (_7.25 kB_) - [SpringOXM Enhancement Xml Schema 31.05.11.patch](https://jira.spring.io/secure/attachment/18332/SpringOXM+Enhancement+Xml+Schema+31.05.11.patch) (_11.50 kB_) - [SpringOXM Enhancement Xml Schema 31.05.11.patch](https://jira.spring.io/secure/attachment/18331/SpringOXM+Enhancement+Xml+Schema+31.05.11.patch) (_11.50 kB_) - [SpringOXM Enhancement Xml Tests 31.05.11.patch](https://jira.spring.io/secure/attachment/18333/SpringOXM+Enhancement+Xml+Tests+31.05.11.patch) (_17.45 kB_)  This issue is a sub-task of #12958","closed","status: declined,","spring-projects-issues","2011-06-08T11:14:27Z","2019-01-11T13:32:43Z"
"","12989","Spring OXM CastorMarshaller unmarshalling methods [SPR-8341]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-8341](https://jira.spring.io/browse/SPR-8341?redirect=false)** and commented  I had been working with Werner Guttman lead of the Castor XML project on ideas for extending the Spring OXM for current Castor version. I've prepared a patch with change made to CastorMarshaller unmarshalling methods, so that they will use Castor API and 'native' support for StAX.  You will find two patches attached, one with changes made in implementation and second with changes made in ivy build file and manifest file.  Before resolving this task, could You please resolve the issue in EBR (https://issuetracker.springsource.com/browse/EBR-747). So that the Spring OXM could use the current Castor version (1.3.2)   ---  **Attachments:** - [SpringOXM Build.patch](https://jira.spring.io/secure/attachment/18231/SpringOXM+Build.patch) (_2.25 kB_) - [SpringOXM Unmarshalling methods.patch](https://jira.spring.io/secure/attachment/18230/SpringOXM+Unmarshalling+methods.patch) (_1.24 kB_) - [SpringOXM Unmarshalling methods - 21.05.11.patch](https://jira.spring.io/secure/attachment/18247/SpringOXM+Unmarshalling+methods+-+21.05.11.patch) (_1.38 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2aaf14e96f5e745d38c6933834658f7259b269ec, https://github.com/spring-projects/spring-framework/commit/680f9692c848a18ffd72d2ded3569473c19fefbd","closed","type: enhancement,","spring-projects-issues","2011-05-17T06:17:05Z","2019-01-11T12:58:33Z"
"","12958","Spring OXM schema improvement for CastorMarshaller [SPR-8309]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-8309](https://jira.spring.io/browse/SPR-8309?redirect=false)** and commented  I had been working with Werner Guttman lead of the Castor XML project on ideas for extending the Spring OXM for current Castor version. I've prepared a set of patches with change made to Spring OXM schema, that will allow configuring the Castor marshaller using oxm namespace.  This propsitions will allows to define the marshaller like below i.e.:   You will find three patches attached: SpringOXM Xml Schema - with changes made in the xsd. SpringOXM Xml Schema Implmentation - that contains simple change made in CastorMarshaller and definition of CastorMarshallerBeanDefinitionParser. SpringOXM Xml Schema Tests - with tests for CastorMarshallerBeanDefinitionParser  ---  **Affects:** 3.1 M1  **Attachments:** - [SpringOXM Xml Schema.patch](https://jira.spring.io/secure/attachment/18127/SpringOXM+Xml+Schema.patch) (_1.56 kB_) - [SpringOXM Xml Schema 21.05.11.patch](https://jira.spring.io/secure/attachment/18248/SpringOXM+Xml+Schema+21.05.11.patch) (_7.67 kB_) - [SpringOXM Xml Schema Implementation.patch](https://jira.spring.io/secure/attachment/18128/SpringOXM+Xml+Schema+Implementation.patch) (_4.55 kB_) - [SpringOXM Xml Schema Implementation 21.05.11.patch](https://jira.spring.io/secure/attachment/18249/SpringOXM+Xml+Schema+Implementation+21.05.11.patch) (_4.86 kB_) - [SpringOXM Xml Schema Implementation 22.05.11.patch](https://jira.spring.io/secure/attachment/18255/SpringOXM+Xml+Schema+Implementation+22.05.11.patch) (_3.41 kB_) - [SpringOXM Xml Schema Tests.patch](https://jira.spring.io/secure/attachment/18129/SpringOXM+Xml+Schema+Tests.patch) (_6.67 kB_) - [SpringOXM Xml Schema Tests 21.05.11.patch](https://jira.spring.io/secure/attachment/18250/SpringOXM+Xml+Schema+Tests+21.05.11.patch) (_7.11 kB_)  **Sub-tasks:** - #13070 Spring OXM schema improvment for CastorMarshaller - additional properties  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9765fefeac8403ea6374a160d061a69ba6f5f16d  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-09T01:40:22Z","2019-01-11T12:56:49Z"
"","12944","Extension for CastorMarshaller - additional unmarshaller properties [SPR-8296]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-8296](https://jira.spring.io/browse/SPR-8296?redirect=false)** and commented  I had been working with Werner Guttman lead of the Castor XML project on ideas for extending the Spring OXM for current Castor version. I've prepared a patch with additional ""internal"" Castor properties that we would like to exposed by CastorMarshaller. We willing to prepare a set of other enhancement in future.  This issue is related to #12943. This time I've attached two patches with changes for Castor Unmarshaller class used internally by Spring's CastorMarshaller.  ---  **Affects:** 3.1 M1  **Attachments:** - [SpringOXMCastorUnmarshaller.patch](https://jira.spring.io/secure/attachment/18114/SpringOXMCastorUnmarshaller.patch) (_11.43 kB_) - [SpringOXMCastorUnmarshallerTests.patch](https://jira.spring.io/secure/attachment/18115/SpringOXMCastorUnmarshallerTests.patch) (_6.18 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/60aa598c03e32a86c1760ab38aa7d655ac8f6dba  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-05T09:08:10Z","2019-01-11T12:54:36Z"
"","12943","Extension for CastorMarshaller - additional marshaller properties [SPR-8295]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-8295](https://jira.spring.io/browse/SPR-8295?redirect=false)** and commented  I had been working with Werner Guttman lead of the Castor XML project on ideas for extending the Spring OXM for current Castor version. I've prepared a patch with additional ""internal"" Castor properties that we would like to exposed by CastorMarshaller. We willing to prepare a set of other enhacment in future.  I've attchet two patches one with changes made in CastorMarshaller, second with unit tests for those additional properties. The mentioned patches contain properties specific for Castor Marshaller class used internally by Spring's CastorMarshaller.  ---  **Affects:** 3.1 M1  **Attachments:** - [SpringOXMCastorMarshaller.patch](https://jira.spring.io/secure/attachment/18112/SpringOXMCastorMarshaller.patch) (_12.93 kB_) - [SpringOXMCastorMarshallerTests.patch](https://jira.spring.io/secure/attachment/18113/SpringOXMCastorMarshallerTests.patch) (_6.55 kB_)  **Issue Links:** - #13116 CastorMarshaller - marshaller and unmarshaller properties. - #12100 CastorMarshaller should have suppressXMLDeclaration (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dd8a9cce053f957ee43837a4470cae7d81b2fb24  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-05T09:02:59Z","2019-01-11T12:54:38Z"
"","13215","Can't insert into nvarchar2 using SimpleJdbcInsert whereas it works with SimpleJdbcTemplate [SPR-8571]","**[Jacques-Henri Berthemet](https://jira.spring.io/secure/ViewProfile.jspa?name=jhberthemet)** opened **[SPR-8571](https://jira.spring.io/browse/SPR-8571?redirect=false)** and commented  When using SimpleJdbcInsert the following error is thrown : org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [INSERT INTO testNVARCHAR2 (ID) VALUES(?)]; SQL state [99999]; error code [17004]; Invalid column type; nested exception is java.sql.SQLException: Invalid column type  When using SimpleJdbcTemplate it is working. See unit test below:  public class OracleTest {      //You need to create below table on Oracle     //create table testNVARCHAR2  (ID  NVARCHAR2(50));          private static DriverManagerDataSource dataSource = new DriverManagerDataSource();     static {         dataSource.setDriverClassName(""oracle.jdbc.driver.OracleDriver"");         dataSource.setUrl(""jdbc:oracle:thin:user/password@host:1521/DB"");     }          @Test     public void fail() {         SimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert(dataSource);         simpleJdbcInsert.setTableName(""testNVARCHAR2"");              Map parameters = new HashMap();         parameters.put(""ID"", ""hello"");                  simpleJdbcInsert.execute(parameters);     }          @Test     public void success() {         SimpleJdbcTemplate simpleJdbcTemplate = new SimpleJdbcTemplate(dataSource);         String sql = ""INSERT INTO testNVARCHAR2 (ID) VALUES (:ID)"";              Map parameters = new HashMap();         parameters.put(""ID"", ""hello"");                  simpleJdbcTemplate.update(sql, parameters);     }  }  Full trace : 0    [main] INFO  org.springframework.jdbc.datasource.DriverManagerDataSource  - Loaded JDBC driver: oracle.jdbc.driver.OracleDriver 1313 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml] 1547 [main] INFO  org.springframework.jdbc.support.SQLErrorCodesFactory  - SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase] 1641 [main] INFO  org.springframework.jdbc.datasource.DriverManagerDataSource  - Loaded JDBC driver: oracle.jdbc.driver.OracleDriver  org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [INSERT INTO testNVARCHAR2 (ID) VALUES(?)]; SQL state [99999]; error code [17004]; Invalid column type; nested exception is java.sql.SQLException: Invalid column type at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:83) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:602) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:811) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:867) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:871) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertInternal(AbstractJdbcInsert.java:356) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.doExecute(AbstractJdbcInsert.java:334) at org.springframework.jdbc.core.simple.SimpleJdbcInsert.execute(SimpleJdbcInsert.java:108) at com.genesyslab.cv.OracleTest.fail(OracleTest.java:30) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:44) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41) at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.ParentRunner.run(ParentRunner.java:220) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: java.sql.SQLException: Invalid column type at oracle.jdbc.driver.OraclePreparedStatement.setObjectCritical(OraclePreparedStatement.java:8761) at oracle.jdbc.driver.OraclePreparedStatement.setObjectInternal(OraclePreparedStatement.java:8259) at oracle.jdbc.driver.OraclePreparedStatement.setObject(OraclePreparedStatement.java:8820) at oracle.jdbc.driver.OraclePreparedStatementWrapper.setObject(OraclePreparedStatementWrapper.java:238) at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:356) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:216) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:144) at org.springframework.jdbc.core.ArgTypePreparedStatementSetter.doSetValue(ArgTypePreparedStatementSetter.java:97) at org.springframework.jdbc.core.ArgTypePreparedStatementSetter.setValues(ArgTypePreparedStatementSetter.java:79) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:815) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:1) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586) ... 31 more  ---  **Affects:** 3.0.3  **Issue Links:** - #16223 JdbcTemplate should support JDBC 4.1 getObject(columnIndex, type) - #16555 Support for Types.NCLOB in SqlLobValue to simplify use with NamedParameterJdbcTemplate. - #17488 Regression in handling of String passed as Types.OTHER to JdbcTemplate - #21210 Unable to bind a null value for UUID column with PostgreSQL - #19954 Support for Oracle JDBC connection properties Ex: fixedString  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/759f430ba56d55d702ed2f0f07d468402a1202df","closed","type: enhancement,","spring-projects-issues","2011-07-29T07:35:26Z","2019-01-11T13:21:15Z"
"","13337","Dynamic includes (with jsp:include or in Java code) of static content fails with Spring + Tomcat [SPR-8695]","**[Jacob Wu](https://jira.spring.io/secure/ViewProfile.jspa?name=jwu)** opened **[SPR-8695](https://jira.spring.io/browse/SPR-8695?redirect=false)** and commented  The contents of an _including_ JSP are delivered, and an exception thrown, when attempting to include static contents with .  The error also occurs when including dynamically with Java code; in this case no content is delivered.  Attached is a bare-bones spring web-app that exhibits this behavior when the war file is run in Tomcat.  {servlet}/helloworld/dynamic returns (as expected):  \ \ \Hello World!\ \ \ {servlet}/helloworld/static should return the same as above but instead returns:     ---  **Affects:** 3.0.5, 3.0.6  **Attachments:** - [dynamic-include-error.zip](https://jira.spring.io/secure/attachment/18797/dynamic-include-error.zip) (_3.95 MB_)","closed","status: invalid,","spring-projects-issues","2011-09-14T12:59:40Z","2019-01-12T05:29:52Z"
"","12957","spring-expression: OpPlus should convert operand values to String using registered convertors [SPR-8308]","**[Ivo Smid](https://jira.spring.io/secure/ViewProfile.jspa?name=bedla.czech)** opened **[SPR-8308](https://jira.spring.io/browse/SPR-8308?redirect=false)** and commented  Hi, I tried to use custom registered convertor and found some place for improvement. Even having properly registered TypeConverter for class Time.class, there is always called object's toString method. My expression is ${'any' + timeVar}. Converter is converting Time class to String class using DateTimeFormat with given Locale. My output should be '01:15 pm', but with conversion using toString method output is '13:15:00'. In attached patch, you can see my point directly in code. Have a nice day Ivosh   ---  **Affects:** 3.1 GA  **Attachments:** - [OpPlus-converter.patch](https://jira.spring.io/secure/attachment/18126/OpPlus-converter.patch) (_3.82 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e85e6147f01ddb4c7931033285b317bd633926ec, https://github.com/spring-projects/spring-framework/commit/7cdfaf3e0d9e1add3a326db7527a37905edd5e6e","closed","type: enhancement,","spring-projects-issues","2011-05-08T08:57:17Z","2012-06-19T03:39:43Z"
"","13449","nested placeholders are not parsed properly [SPR-8807]","**[Ittay Dror](https://jira.spring.io/secure/ViewProfile.jspa?name=ittayd)** opened **[SPR-8807](https://jira.spring.io/browse/SPR-8807?redirect=false)** and commented  When I have a reference of the form: ${a:${b:c}}, a placholder resolver should be passed ""a"" as placeholder and if null, ""b"" placeholder.  However, it is passed the entire string:  ``` scala> val helper = new org.springframework.util.PropertyPlaceholderHelper(""${"", ""}"", "":"", true) helper: org.springframework.util.PropertyPlaceholderHelper = org.springframework.util.PropertyPlaceholderHelper@10a5314  scala> val resolver = new org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver {      | def resolvePlaceholder(ph: String) = {println(""placeholder: "" + ph); ph}} resolver: java.lang.Object with org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver = $anon$1@ad8dbc  scala> helper.replacePlaceholders(""${a:${b:c}}"", resolver) placeholder: b:c placeholder: a:b:c res1: java.lang.String = a:b:c ```  At first I thought maybe it is the responsibility of the resolver to separate the default value from the placeholder name, but look at PropertyPlaceholderConfigurer#resolveSystemProperty:  ``` protected String resolveSystemProperty(String key) {      try {           String value = System.getProperty(key);           if (value == null && this.searchSystemEnvironment) {                value = System.getenv(key);           }           return value;      }      catch (Throwable ex) {           if (logger.isDebugEnabled()) {                logger.debug(""Could not access system property '"" + key + ""': "" + ex);           }           return null;      } } ```    ---  **Affects:** 3.1 RC1  **Attachments:** - [SPR-8807.zip](https://jira.spring.io/secure/attachment/19444/SPR-8807.zip) (_4.69 kB_)","closed","in: core,","spring-projects-issues","2011-10-31T05:16:29Z","2019-01-12T16:37:15Z"
"","13394","Refactor AnnotationUtils#findAllAnnotationAttributes to accommodate non-default class loader [SPR-8752]","**[Ittay Dror](https://jira.spring.io/secure/ViewProfile.jspa?name=ittayd)** opened **[SPR-8752](https://jira.spring.io/browse/SPR-8752?redirect=false)** and commented  Line 347: MetadataReader reader = new SimpleMetadataReaderFactory().getMetadataReader(annotatedClassName);  This creates a MetadataReader that uses the default class loader. But the class name may be from a different class loader. This causes a failure later on when trying to load the class name   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6837111bda5e4df9bdfa617c78c1ea32ced7ab5c","closed","type: enhancement,","spring-projects-issues","2011-10-09T09:01:08Z","2012-06-19T03:39:02Z"
"","13532","Convenient programmatic bean retrieval with qualifiers [SPR-8891]","**[Ilya Kazakevich](https://jira.spring.io/secure/ViewProfile.jspa?name=ilka)** opened **[SPR-8891](https://jira.spring.io/browse/SPR-8891?redirect=false)** and commented  Because of http://stackoverflow.com/questions/8345723/java-spring-tagging-beans-in-xml-to-get-specific-bean-by-class-and-tag I need to find bean which is an instance of specific interface **and** has special qualifier.  Spring needs to have something like this: beanFactory.getBean(new NameCondition(""someName""), new ClassCondition(MyInterface.class)); beanFactory.getBean(new QualifierCondition(""myQualif""), new ClassCondition(MyInterface.class)); beanFactory.getBean(new ClassCondition(MyInterface.class));  getBean should be vararg method that accepts several conditions and joins them using ""AND"".  ---  **Issue Links:** - #19778 Cyclic bean methods cause IllegalArgumentException instead of BeanCurrentlyInCreationException - #17522 Ability to query an ApplicationContext for annotations on a bean - #17723 Support dynamic bean lookup a la CDI's Instance type - #21613 Programmatic ObjectProvider retrieval through BeanFactory API - #15842 Allow to specify bean qualifier in an AOP `@Around` / `@Before` / ...  1 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2011-12-01T11:51:02Z","2019-01-13T07:07:08Z"
"","13613","spring-context missing optional Import-Package directive for javax.validation.spi [SPR-8973]","**[Illya Kysil](https://jira.spring.io/secure/ViewProfile.jspa?name=ikysil)** opened **[SPR-8973](https://jira.spring.io/browse/SPR-8973?redirect=false)** and commented  org.springframework.validation.beanvalidation.LocalValidatorFactoryBean configures an implementation of javax.validation.spi.ValidatorProvider. This fails in an OSGi container due to missing Import-Package directive for javax.validation.spi in spring-context bundle's manifest.  ---  **Affects:** 3.0.5, 3.0.6, 3.0.7, 3.1 GA  **Issue Links:** - #15268 LocalValidatorFactoryBean#setProviderClass(Class) is unsafe  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a61f36d3d281cdb255e2e22c95dee9bf2f58386","closed","in: core,","spring-projects-issues","2011-12-29T13:36:13Z","2019-01-11T14:30:16Z"
"","13810","Problem using spring mvc, jpa and hibernate validator [SPR-9172]","**[Ilinca Vintila Hallberg](https://jira.spring.io/secure/ViewProfile.jspa?name=ilinca)** opened **[SPR-9172](https://jira.spring.io/browse/SPR-9172?redirect=false)** and commented  The following error occurs when using hibernate-validator with a `@Valid` annotation in a Controller. The spring bean sent as the requestbody isn't a Dao-class, but the application has a DAO-layer that uses jpa2. The same code works just fine without the DAO-layer. Removing the `@Valid` annotation also solves the problem. Something seems to be happening when using the `@Valid` annotation together with hibernate-validator annotations in a Controller while having dependencies to hibernate entitymanager and spring-orm.  [#|2012-02-27T11:20:24.334+0100|SEVERE|sun-appserver2.1|javax.enterprise.system.container.web|_ThreadID=29;_ThreadName=httpWorkerThread-8080-1;_RequestID=ad491357-922d-424e-84c6-9906992aff29;|StandardWrapperValve[Spring MVC Dispatcher Servlet]: PWC1406: Servlet.service() for servlet Spring MVC Dispatcher Servlet threw exception java.lang.AbstractMethodError at javax.persistence.Persistence$1.isLoaded(Persistence.java:93) at org.hibernate.validator.engine.resolver.JPATraversableResolver.isReachable(JPATraversableResolver.java:61) at org.hibernate.validator.engine.resolver.DefaultTraversableResolver.isReachable(DefaultTraversableResolver.java:131) at org.hibernate.validator.engine.resolver.SingleThreadCachedTraversableResolver.isReachable(SingleThreadCachedTraversableResolver.java:46) at org.hibernate.validator.engine.ValidatorImpl.isValidationRequired(ValidatorImpl.java:1242) at org.hibernate.validator.engine.ValidatorImpl.validateConstraint(ValidatorImpl.java:448) at org.hibernate.validator.engine.ValidatorImpl.validateConstraintsForDefaultGroup(ValidatorImpl.java:397) at org.hibernate.validator.engine.ValidatorImpl.validateConstraintsForCurrentGroup(ValidatorImpl.java:361) at org.hibernate.validator.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:313) at org.hibernate.validator.engine.ValidatorImpl.validate(ValidatorImpl.java:139) at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:101) at org.springframework.validation.DataBinder.validate(DataBinder.java:722) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:78) at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:74) at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:155) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:117) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:96) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:617) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:578) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:789) at javax.servlet.http.HttpServlet.service(HttpServlet.java:754) at javax.servlet.http.HttpServlet.service(HttpServlet.java:847) at org.apache.catalina.core.ApplicationFilterChain.servletService(ApplicationFilterChain.java:427) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:333) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:214) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:246) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:214) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:313) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:287) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:218) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:648) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:593) at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:94) at com.sun.enterprise.web.PESessionLockingStandardPipeline.invoke(PESessionLockingStandardPipeline.java:98) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:222) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:648) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:593) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:587) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1096) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:166) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:648) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:593) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:587) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1096)  ... The error occurs when calling the controller and the application deploys perfectly on glassfish 2 and 3. Removing the `@Valid` annotation fixes the error. Attaching a test application that reproduces the error. The error only occurs when using annotations from the hibernate-validator javax.validation annotations still work.   ---  **Affects:** 3.1.1  **Attachments:** - [common.zip](https://jira.spring.io/secure/attachment/19453/common.zip) (_79.01 kB_)","closed","status: invalid,","spring-projects-issues","2012-02-27T03:11:13Z","2019-01-12T05:29:01Z"
"","13362","Incorrect link in javadoc to external javadoc [SPR-8720]","**[Igor Mihalik](https://jira.spring.io/secure/ViewProfile.jspa?name=imihalik)** opened **[SPR-8720](https://jira.spring.io/browse/SPR-8720?redirect=false)** and commented  In the following link the ""All Implemented Interfaces: ServletContainerInitializer"" points to incorrect URL: http://static.springsource.org/spring/docs/3.1.0.M2/javadoc-api/org/springframework/web/SpringServletContainerInitializer.html    ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f35dfd4107ba093de5e0cc9eebe62a7b76a19183","closed","type: bug,","spring-projects-issues","2011-09-23T14:29:36Z","2012-06-19T03:39:01Z"
"","13015","Spring XSD validation fails in the presence of non-standard classloaders due to problems resolving ""schema.handlers"" etc. [SPR-8368]","**[Ian Sollars](https://jira.spring.io/secure/ViewProfile.jspa?name=ianso)** opened **[SPR-8368](https://jira.spring.io/browse/SPR-8368?redirect=false)** and commented  With the splitting of Spring Framework into multiple jar files in v3.0, there are now several files named ""META-INF/spring.handlers"", ""spring.schemas"" and ""spring.tooling"". This is not a problem when running in a normal servlet container, but poses problems when e.g. creating an executable JAR file from a webapp using an embedded web server such as Jetty, or running GWT in ""Dev Mode"", which uses a custom class loader.  In the former scenario, a typical approach is to use a Maven assembly to extract all .class files from the project dependencies and merge them into one hierarchy, as a way of packaging all the dependencies and the webapp itself into one JAR file.  However, in this case only one copy of ""spring.handlers/schemas/tooling"" can exist, and so any schemas that are used and /not/ in the one copy cannot be validated. This leads to exceptions such as this one:  org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 65 in XML document from class path resource [spring/beans.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'context:annotation-config'. at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:76) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:218) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:147)  Other people reporting similar problems can be found at Stack Overflow here and here.  The workaround is to construct your own ""custom"" version of these three files, merging all the copies into one like so:  //IOUtils and FileUtils come from Apache Commons IOfor(String s : new String[] {""spring.schemas"", ""spring.handlers"", ""spring.tooling""}) { Enumeration e = Test.class.getClassLoader().getResources(""META-INF/""+s); StringBuilder out = new StringBuilder();while(e.hasMoreElements()) { URL u = (URL) e.nextElement(); out.append(IOUtils.toString(u.openStream())).append(""\n""); } File outf = new File(s); FileUtils.writeStringToFile(outf, out.toString(), ""UTF-8""); }  However, the proper fix would be to use a different file-name for each instance of the schemas/handlers/tooling files. For example, inside ""org.springframework.aop-3.0.5.RELEASE.jar/META-INF"" you would find ""spring-aop.schemas"", ""spring-aop.handlers"" and ""spring-aop.tooling"".  I'm afraid I'm not sufficiently up-to-speed with the Spring code-base to give you a patch to do this, however a brief investigation shows that ""spring.handlers"" and ""spring.schemas"" are specified in org.springframework.beans.factory.xml.PluggableSchemaResolver and DefaultNamespaceHandlerResolver, and that constructors exist for specifying different locations for these files. I hope you find this information useful.  Best regards,  - Ian  ---  **Affects:** 3.0.5  **Issue Links:** - #13175 META-INF/spring.handlers are hidden resources when running with special isolated ClassLoader, for example as osgi Netbeans plugins or javawebstart (_**""is duplicated by""**_)  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2011-05-24T01:28:28Z","2019-01-12T05:30:19Z"
"","12924","using jsp:include to include spring action caused infinite loop [SPR-8276]","**[Hui Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=chenhuieb)** opened **[SPR-8276](https://jira.spring.io/browse/SPR-8276?redirect=false)** and commented  Config the web app to use tiles as ViewResolver.  Create a parent jsp page and child jsp page, in parent jsp apge, use jsp:include to call an action which renders the child jsp page.    Defined the view in tiles.  \ \ \ \ \ \  Create two controllers GetParentController and GetChildController, which simply returns ""parent_page"" and ""child_page"" as view respectively.  When trying to call /getParent.action, it causes an infinite loop and JVM crashes.  It used to work under Spring 2.5.6 and Tiles 2.0.4.  And it also works if I use InternalResourceViewResolver.    ---  **Affects:** 3.0.5  **Attachments:** - [controller.zip](https://jira.spring.io/secure/attachment/18080/controller.zip) (_2.12 kB_) - [WebContent.zip](https://jira.spring.io/secure/attachment/18079/WebContent.zip) (_4.43 kB_)","closed","in: core,","spring-projects-issues","2011-04-26T11:51:09Z","2019-01-12T16:25:41Z"
"","13341","MarshallingHttpMessageConverter supports(Class clazz) method [SPR-8699]","**[Hossein Bahramian](https://jira.spring.io/secure/ViewProfile.jspa?name=bahramian@gmail.com)** opened **[SPR-8699](https://jira.spring.io/browse/SPR-8699?redirect=false)** and commented  I think be better implementation for the method supports in class MarshallingHttpMessageConverter          @Override     public boolean supports(Class clazz) {     	return this.unmarshaller.supports(clazz);     }  is this:          @Override     public boolean supports(Class clazz) {     	return this.unmarshaller.supports(clazz) || this.marshaller.supports(clazz);     }  In this way you do not have to add unnecessary entries to classesToBeBound of UnMarshaller bean.    --- No further details from [SPR-8699](https://jira.spring.io/browse/SPR-8699?redirect=false)","closed","","spring-projects-issues","2011-09-15T09:52:16Z","2019-01-11T14:22:59Z"
"","13210","The advice is not executed for pointcuts that are defined to select custom-annotated methods, where these methods are already annotated with spring annotations [SPR-8566]","**[hithem mohamed aly](https://jira.spring.io/secure/ViewProfile.jspa?name=hithem%20mohamed)** opened **[SPR-8566](https://jira.spring.io/browse/SPR-8566?redirect=false)** and commented  I have defined an Aspect: where its pointcut expression is defined to select methods annotated with a `@custom` annotation  In the Service class: I have annotated my methods with `@Request`  The advice is executed for only methods that is annotated with `@custom` annotation Only, if the method is annotated with `@Transactional` for instance the advice is not executed.  The same behavior happens for the controller classes, if the method is annotated with `@RequestMapping` and `@custom` annotation, the advise is not executed    ---  **Affects:** 3.1 M2","closed","in: core,","spring-projects-issues","2011-07-28T08:31:46Z","2019-01-11T13:21:19Z"
"","13780","Map Oracle's ORA-30006 to Spring's CannotAcquireLockException [SPR-9141]","**[Hideyuki Suzumi](https://jira.spring.io/secure/ViewProfile.jspa?name=slopetown)** opened **[SPR-9141](https://jira.spring.io/browse/SPR-9141?redirect=false)** and commented  ORA-00054 has been translated into a CannotAcquireLockException. ORA-30006 is a similar error, it has not been translated into a CannotAcquireLockException.   --- No further details from [SPR-9141](https://jira.spring.io/browse/SPR-9141?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-02-20T22:58:50Z","2012-06-19T03:39:38Z"
"","13054","Default values are disregarded if underscore in placeholder for PropertyPlaceholderConfigurer  [SPR-8407]","**[Hayo](https://jira.spring.io/secure/ViewProfile.jspa?name=hayo)** opened **[SPR-8407](https://jira.spring.io/browse/SPR-8407?redirect=false)** and commented  In the 2.5 reference documentation ther is a chapter 3.7.2.1. ""Example: the PropertyPlaceholderConfigurer"". In sub-chapter ""Class name substitution"" there is an example which usually works fine.  This example does not work anymore, when the property file or property in the property file is not available (pre-condition), and the name of the placeholder is changed to contain an underscore.  Working code:  ```               classpath:com/nonexist/strategy.properties                   custom.strategy.class=com.foo.DefaultStrategy        ```  Breaking code:  ```               classpath:com/nonexist/strategy.properties                   custom_strategy.class=com.foo.DefaultStrategy        ```  (Probably you also will have to set \ \ to get it running. In my environment, a large application, this was not necessary.)  Running the stuff logs following ERROR: org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'underscoreServiceStrategy' defined in class path resource [applicationContext.xml]: Could not resolve placeholder 'custom_strategy.class'  Mind that the placeholder containing the underscore is resolved fine if it is found in the strategy.properties. Only the resolution of the 'DefaultStrategy' fails.  This is at least a Major bug. Not just because it took me hours to resolve my local bug ;-). The real problem is: if the same placeholder has been set outside the current configuration file, that value will might found instead of the intended default. So, just by renaming the placeholder an unsecure initial implementation might become productive.  I have not tested against Spring 3, so the bug might be also existing there.  ---  **Affects:** 2.5.6  **Issue Links:** - #13357 Underscores in properties group resolves in ""Could not resolve placeholder"" (PropertyPlaceholderConfigurer)","closed","in: core,","spring-projects-issues","2011-06-06T08:17:48Z","2019-01-11T13:34:39Z"
"","13017","Dojo DateTextBox not allowing to select date when Text box length is bigger than Calender. [SPR-8370]","**[Hari haran N](https://jira.spring.io/secure/ViewProfile.jspa?name=hariharan87)** opened **[SPR-8370](https://jira.spring.io/browse/SPR-8370?redirect=false)** and commented  Dojo DateTextBox is not allowing me to select the date which are outside the textbox. Please find the attached image.   ---  **Affects:** 3.0.1  **Attachments:** - [Dojo_date_issue.PNG](https://jira.spring.io/secure/attachment/18272/Dojo_date_issue.PNG) (_14.45 kB_)","closed","status: invalid,","spring-projects-issues","2011-05-24T22:49:11Z","2019-01-12T05:30:18Z"
"","13509","Truncated HTTP responses [SPR-8867]","**[Harald Wellmann](https://jira.spring.io/secure/ViewProfile.jspa?name=hwellmann)** opened **[SPR-8867](https://jira.spring.io/browse/SPR-8867?redirect=false)** and commented  After upgrading my Spring MVC application from Spring 3.0.6 to 3.1.0.RC1, I'm getting errors from some of my AJAX requests with JSON responses.  With Spring 3.0.6, the Content-Length header was not set. With Spring 3.1.0.RC1 the header is set, but the value does not match the actual length of the JSON string, which causes the truncation.  My controller method returns a HttpEntity where the Content-Type header is set to text/plain;charset=utf-8. The problem seems to be that StringHttpMessageConverter uses the charset from the output message for encoding the content in writeInternal(), but does not use the same character set for computing the length: getContentLength() derives the character set from the MediaType and defaults to iso-8559-1. This is why the Content-Length value is smaller than it should be.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #16308 Regression: AbstractHttpMessageConverter does not set ContentType - #13324 Allow configuration of whether HttpMessageConverters should set content-length header  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/f9de7ce5ff78652f43f24b079129d6babf9036b0, https://github.com/spring-projects/spring-framework-issues/commit/1f668760aa62c429fd491fa16e3a3c3ef67aedc5","closed","type: bug,","spring-projects-issues","2011-11-22T09:13:27Z","2019-01-11T14:43:19Z"
"","13592","The class org.springframework.orm.hibernate4.LocalSessionFactoryBean does not implement the interface PersistenceExceptionTranslator [SPR-8952]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-8952](https://jira.spring.io/browse/SPR-8952?redirect=false)** and commented  The class org.springframework.orm.hibernate4.LocalSessionFactoryBean does not implement the interface PersistenceExceptionTranslator  As a result, if you declare a bean of type org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor, you get an exception at program startup:  java.lang.IllegalStateException: No persistence exception translators found in bean factory. Cannot perform exception translation. at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.detectPersistenceExceptionTranslators(PersistenceExceptionTranslationInterceptor.java:142) at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.\(PersistenceExceptionTranslationInterceptor.java:79) at org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisor.\(PersistenceExceptionTranslationAdvisor.java:70) at org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor.setBeanFactory(PersistenceExceptionTranslationPostProcessor.java:103) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods(AbstractAutowireCapableBeanFactory.java:1475) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1443) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ... 20 more  P.S. : For correction look at the class org.springframework.orm.hibernate3.LocalSessionFactoryBean, which implements the interface PersistenceExceptionTranslator   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/392247d6746eb8bd83d2ea38f5126c11b49bbe5f, https://github.com/spring-projects/spring-framework/commit/4b74a3565c12c31ead51cf46985e415299861292","closed","type: bug,","spring-projects-issues","2011-12-21T05:04:51Z","2012-06-19T03:39:08Z"
"","13439","change Accept header in request sent by delete method of RestTemplate [SPR-8797]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-8797](https://jira.spring.io/browse/SPR-8797?redirect=false)** and commented  The delete method of RestTemplate sends a request with an Accept header equal to text/html, image/gif, image/jpeg, *; q=.2, \*/\*; q=.2 This makes it difficult to distinguish - a delete request from RestTemplate   from - a delete request sent by an HTML form (with the help from HiddenHttpMethodFilter)  I would suggest to change the Accept header of the delete method to text/plain, application/xml, application/json   ---  **Affects:** 3.1 RC1","closed","status: invalid,","spring-projects-issues","2011-10-24T00:16:18Z","2019-01-12T05:29:43Z"
"","13729","Add support for enhancing schema-based configuration with traditional beans XML [SPR-9091]","**[Hannes Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=hannes.schmidt)** opened **[SPR-9091](https://jira.spring.io/browse/SPR-9091?redirect=false)** and commented  Some schema-based bean definitions provide a lot of behind-the-scenes ""magic"" that if the ""magic"" doesn't cover one little property on one little bean, user's are forced to translate the schema-based configuration into traditional Spring XML.  Spring Security is such an example. It has a \ element that sets up three singletons and injects them into other security singletons. Unfortunately, the \ element doesn't let me specify a value for the alwaysRemember property of the AbstractRememberMeServices bean it sets up. Now I have to go and figure out how these three beans are meant to be wired up and translate them to traditional syntax. Worse, I have to translate all schema-based security configuration back to traditional syntax because the FilterChainProxy isn't accessible via schema-based syntax. If you've ever dealt with Spring Security you know what a daunting task that is.  I don't really know how to solve this problem but let's say 1) the bean names used by schema-based config were well-documented and 2) Spring supported the merging of bean definitions (for all beans, not just collections), that would be viable fallback:  ```    ...      ...    ```    --- No further details from [SPR-9091](https://jira.spring.io/browse/SPR-9091?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-02-03T12:50:18Z","2012-08-15T13:04:09Z"
"","13581","Lifecycle processing ignores phases for circularly dependent SmartLifecycle beans [SPR-8941]","**[Hannes Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=hannes.schmidt)** opened **[SPR-8941](https://jira.spring.io/browse/SPR-8941?redirect=false)** and commented  I have two beans A and B. Both are services, both implement SmartLifecycle. Both have an auto-wired dependency to the other bean. IOW, there is a circular dependency between them. A.getPhase() returns 1, B.getPhase() returns 2. Intuitively, the expected behavior is that A.start() is invoked before B.start(). The actual behavior in 3.0.5 is that B.start() is invoked before A.start().  DefaultLifecycleProcessor attempts to start A first, but before doing so starts all lifecycle beans among A's dependencies first. B is one of those so its start() is actually invoked first.  My take on this is that an injection dependency is not necessarily the same as a lifecycle dependency. Spring's lifecycle processing treats them as the same thing. Bean X may depend on bean Y and yet bean X might have to be started before Y for reasons orthogonal to dependency injection, say concurrency. SmartLifecycle's Javadocs state explicitly that depends-on has priority over phases, yet I feel that overriding getPhase() is a much stronger statement than introducing a bean reference, especially when it is auto-wired, so I would think that getPhase() should overrule depends-on relationships.  I don't see how these two dependency sets can be untangled without breaking backwards compatibility. On the other hand, we could limit the fix to circularly dependent beans: If beans A and B depend on each other but belong to distinct phases, the dependency should be ignored. I'd be willing to supply a patch, if requested.   ---  **Affects:** 3.0.5  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-12-16T13:48:13Z","2019-01-12T02:36:35Z"
"","13304","UriTemplate takes wrong approach at encoding substituted template variables [SPR-8662]","**[Hannes Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=hannes.schmidt)** opened **[SPR-8662](https://jira.spring.io/browse/SPR-8662?redirect=false)** and commented  The basic problem is that UriTemplate first substitutes the template variables into a single string and then encodes that string as a whole using URIUtils. This simply can't work reliably because the substitution could produce a string that is impossible to parse using a regular expression for URLs. For example, the following template  ``` http://foo.com/things/{thingId} ```  with the following value for thingId  ``` a/b ```  produces the following string after substitution  ``` http://foo.com/things/a/b ```  When URIUtil does not encode the / between a and b because it takes the slash literally. This is what I would expect in this case:  ``` http://foo.com/things/a%2Fb ```  The reason we have URL-encoding is so we can embed any string into a URL without breaking it. But we need to encode the embedded string BEFORE we embed it. We can't expect URIUtils to be able to fix a URL that we broke by embedding an unencoded string.  Now, depending on where we embed a string into a URL certain characters loose their special meaning. The slash, for example, has no special meaning in the query part. If we want to produce URLs without redundantly encoded parts, we need to take the context into account. Nevertheless, it is always safe to encode all special characters in each embedded string and that would be a simple fix.  ---  **Affects:** 3.0.5  **Issue Links:** - #13050 UriTemplate doesn't encode query parameters - [INT-2569](https://jira.spring.io/browse/INT-2569) Refactor HttpOutboundGateway to mitigate breaking changes due to UriTemplate changes in Spring 3.1","closed","type: enhancement,","spring-projects-issues","2011-08-31T19:45:37Z","2019-01-13T21:42:06Z"
"","12907","ReflectivePropertyAccessor adds supertype matches to general accessors instead of specific accessors [SPR-8259]","**[Hampus Wingren](https://jira.spring.io/secure/ViewProfile.jspa?name=hampe98)** opened **[SPR-8259](https://jira.spring.io/browse/SPR-8259?redirect=false)** and commented  I think that when the ReflectivePropertyAccessor tries to create a list of property accesors to try, it adds supertype matches to the wrong list.  ```java private List getPropertyAccessorsToTry(Class targetType, ExpressionState state) {  List specificAccessors = new ArrayList();  List generalAccessors = new ArrayList();  for (PropertyAccessor resolver : state.getPropertyAccessors()) {  Class[] targets = resolver.getSpecificTargetClasses();  if (targets == null) { // generic resolver that says it can be used for any type generalAccessors.add(resolver); } else {  if (targetType != null) {  int pos = 0;  for (Class clazz : targets) {  if (clazz == targetType) { // put exact matches on the front to be tried first? specificAccessors.add(pos++, resolver); } else if (clazz.isAssignableFrom(targetType)) { // put supertype matches at the end of the // specificAccessor list generalAccessors.add(resolver); } }  }  }  }  List resolvers = new ArrayList();  resolvers.addAll(specificAccessors);  resolvers.addAll(generalAccessors);  return resolvers;  } ```      ---  **Affects:** 3.1 M1","closed","in: core,","spring-projects-issues","2011-04-18T04:29:27Z","2019-01-12T05:30:27Z"
"","13258","Allow read and connect timeouts and request headers to be set on SimpleHttpInvokerRequestExecutor [SPR-8615]","**[Haavar Valeur](https://jira.spring.io/secure/ViewProfile.jspa?name=haavar)** opened **[SPR-8615](https://jira.spring.io/browse/SPR-8615?redirect=false)** and commented  Currently the SimpleHttpInvokerRequestExecutor uses the system default timeouts when it makes a networks connection. This patch allows a user to specify custom timeouts for the request executor as well as adding custom HTTP headers to each request.  ---  **Attachments:** - [requestExecutorTimeout.patch](https://jira.spring.io/secure/attachment/18556/requestExecutorTimeout.patch) (_3.11 kB_)  **Issue Links:** - #13257 Allow the read and connect timeout to be set on SimpleClientHttpRequestFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c564049b238de2233a95cda520c78f50f50733f6, https://github.com/spring-projects/spring-framework/commit/a2129a132fe28c4b0980c587bef32004c8e41a3d","closed","type: enhancement,","spring-projects-issues","2011-08-12T12:21:29Z","2019-01-11T14:17:42Z"
"","13257","Allow the read and connect timeout to be set on SimpleClientHttpRequestFactory [SPR-8614]","**[Haavar Valeur](https://jira.spring.io/secure/ViewProfile.jspa?name=haavar)** opened **[SPR-8614](https://jira.spring.io/browse/SPR-8614?redirect=false)** and commented  Allow for the read and connect timeout to be set on the URLConnection in SimpleClientHttpRequestFactory.  The current behavior is to use the system default. This patch allows users to set different timeouts for different use cases.  ---  **Attachments:** - [requestFactoryTimeout.patch](https://jira.spring.io/secure/attachment/18555/requestFactoryTimeout.patch) (_2.25 kB_)  **Issue Links:** - #13258 Allow read and connect timeouts and request headers to be set on SimpleHttpInvokerRequestExecutor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/585745de328b055ef0c67b0db6fd3ff9f1d42f65, https://github.com/spring-projects/spring-framework/commit/03c267e93a9bed5bf0246ed6b560fd8299be9edd","closed","type: enhancement,","spring-projects-issues","2011-08-12T11:55:52Z","2019-01-11T14:17:34Z"
"","13249","Allow GET requests to be filtered by HiddenHttpMethodFilter [SPR-8606]","**[Haavar Valeur](https://jira.spring.io/secure/ViewProfile.jspa?name=haavar)** opened **[SPR-8606](https://jira.spring.io/browse/SPR-8606?redirect=false)** and commented  Currently the HiddenHttpMethodFilter will only filter POST request. The attached patch will optionally allow GET requests to be filtered as well.  This is useful when you want a browser to call a REST controller directly, and the browser request is generated by the user clicking an HTML anchor. For example if you wanted a plain anchor, without java-script, to delete a user: delete user   ---  **Attachments:** - [enableGet.patch](https://jira.spring.io/secure/attachment/18546/enableGet.patch) (_4.65 kB_)","closed","status: invalid,","spring-projects-issues","2011-08-10T14:22:52Z","2019-01-12T05:29:58Z"
"","13403","Provide variations of Assert.noNullElements that accepts a Collection or Map [SPR-8760]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-8760](https://jira.spring.io/browse/SPR-8760?redirect=false)** and commented  Currently there is an Assert.noNullElements method, but it currently accepts only an array, not a Collection. In order to provide better null checking it would be nice to have applicable methods that also accept Collections and Maps as parameters.  Also, for arrays the following Note applies: ""Does not complain if the array is empty!"". However, it would be nice if for maps and collections we have a method that checks for all null/empty conditions and ensures that the passed in Map/Collection is:  * Not Null * Not Empty * Does not contain Null elements    ---  **Affects:** 3.1 RC1  1 votes, 2 watchers","open","type: enhancement,","spring-projects-issues","2011-10-12T07:08:18Z","2019-02-22T18:56:49Z"
"","13796","MethodInterceptor causes integration test to commit changes to database [SPR-9158]","**[Guillermo De Luca](https://jira.spring.io/secure/ViewProfile.jspa?name=grd22001)** opened **[SPR-9158](https://jira.spring.io/browse/SPR-9158?redirect=false)** and commented  #### Overview  The following Spring AOP method interceptor (`MethodLoggingInterceptor`) causes a Hibernate-based DAO test case to commit changes to the database even though the transaction manged by the Spring TestContext framework is rolled back.  ---  #### Code  Regarding the `testCreateRemoveHunter()` method in `SampleDaoImplTest`:  - The test works if the method interceptor is not enabled. - The test works if only one operation is performed per test method. - The logs confirm that the Spring TestContext Framework properly rolls back the transaction after the test method.  ---  ``` public class MethodLoggingInterceptor implements MethodInterceptor {      private final Logger logger = Logger.getLogger(this.getClass().toString());      @Override     public Object invoke(MethodInvocation methodInvocation) throws Throwable {          StopWatch stopWatch = new StopWatch();         stopWatch.start();          Object result = methodInvocation.proceed();          stopWatch.stop();          StringBuilder logMessage = new StringBuilder();         // build logMessage ... 	logger.info(logMessage.toString());          return result;     } } ```  ```xml                              *                                           methodLoggingInterceptor                                                                                                                              100                 true                 false                 ${database.dialect}                                 ```  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(""classpath*:applicationContext.xml"") public class SampleDaoImplTest {      @Autowired     HunterDao hunterDao;      @Test     @Transactional     public void testCreateRemoveHunter() {         Hunter hunter = new Hunter();         hunterDao.createHunter(hunter);         hunterDao.deleteHunter(hunter);     }      @AfterTransaction     public void afterTransaction() {         // if you query the state of the database, the hunter table         // contains the Hunter entity created in testCreateRemoveHunter(),         // but it shouldn't since the transaction for the test was rolled         // back by the Spring TestContext Framework.     } } ```  ---  #### Analysis  The basic cause of the problem is that the `MethodInterceptor` is applied to **every** bean in the context by specifying ""*"" for the `beanNames` property of `BeanNameAutoProxyCreator`. This results in the interceptor being applied not only to application beans but also to the Hibernate `SessionFactory`.  If the `beanNames` property of `BeanNameAutoProxyCreator` is changed to something less _greedy_ than ""*"" -- for example, ""*Dao"" -- the `sessionFactory` will not be advised by the method interceptor, and the code will work as expected.  As for why the `SessionFactory` fails to operate as expected when advised by a `MethodInterceptor`, that remains to be determined, but it is assumed that Spring's Hibernate support fails to properly manage the `Session` for the current thread if the `SessionFactory` is hidden behind a dynamic proxy, which is the case when a `MethodInterceptor` is applied to every bean in the application context.  ---  **Affects:** 3.0.5, 3.1.2","closed","status: declined,","spring-projects-issues","2012-02-23T12:10:50Z","2019-01-13T07:06:07Z"
"","13618","ClassPathResource fails to load the last version of a file [SPR-8978]","**[Guillaume Smet](https://jira.spring.io/secure/ViewProfile.jspa?name=gsmet)** opened **[SPR-8978](https://jira.spring.io/browse/SPR-8978?redirect=false)** and commented  Hi,  Using ClassPathResource.getInputStream() with a Tomcat container gets me stale content (it's supposed to read CSS files hot deployed to Tomcat and it always serves the same content).  It seems that the guys from JBoss Drools (who borrowed ClassPathResource from Spring) had the same problem and fixed it in: https://issues.jboss.org/browse/JBRULES-2960 https://github.com/droolsjbpm/drools/commit/a73ba05a30c2d4d89d2c5844c17670225df9385e#diff-1 by using getURL().openStream() in getInputStream().  I worked around it by using getURL().openStream() directly in my code instead of getInputStream() but I thought it might be a good idea to bring it to your attention.  ---  Guillaume  ---  **Affects:** 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2012-01-02T02:33:59Z","2019-01-13T21:41:12Z"
"","13163","SpEL: Unnecessary conversion of Map arguments [SPR-8518]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-8518](https://jira.spring.io/browse/SPR-8518?redirect=false)** and commented  `@kdonald`  In revision 4483 there was a change in `org.springframework.expression.spel.support.ReflectionHelper.convertArguments(TypeConverter, Object[], Object, int[], Integer)`. Now all arguments are converted.  I have a problem with SpEL, where root object is map (but it's a general problem with Map arguments) - it's a problem w Java generics, where type arguments may be deducted from method parameters, but not from actual arguments:  ``` // method void mapArg(Map arg1); // type descriptor for method parameter new TypeDescriptor(MethodParameter.forMethodOrConstructor(methodOrCtor, i)); // type descriptor for actual argument TypeDescriptor.forObject(argument) ```  Spring converts Map because it determines it's Map\, which results in new Map being passed to actual method. When the map is EvaluationContext's root object, it's not the root map which is passed to SpEL invoked method, so I can't use SpEL to fill passed map...  I know it **can't** be resolved because of type erasure - but can this be specified in documentation somehow?  regards Grzegorz Grzybek  ---  **Affects:** 3.1 M2  **Issue Links:** - #13356 3.0.6 Map to Map conversion shallow copying maps causing unexpected results on upgrade from 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-07-07T00:50:49Z","2019-01-11T13:20:08Z"
"","13656","Allow SpEL to resolve getter method against object of type Class [SPR-9017]","**[Gregor Purdy](https://jira.spring.io/secure/ViewProfile.jspa?name=gregor)** opened **[SPR-9017](https://jira.spring.io/browse/SPR-9017?redirect=false)** and commented  If your context object is a `Class` then you cannot evaluate an expression that calls a getter on that object.  For example:  ```     /**      * WORKS      */     public void testSpelGetterOnBean() {         final String name = ""foo"";         final Object thing = new Object() {             public String getName() { return name; }         };                  final ExpressionParser parser = new SpelExpressionParser();         final StandardEvaluationContext context = new StandardEvaluationContext(thing);         final Object result = parser.parseExpression(""name"").getValue(context);          assertEquals(name, result);     } ```  ```     /**      * FAILS      */     public void testSpelGetterOnClass() {         final Class clazz = Object.class;         final String name = clazz.getName();                  final ExpressionParser parser = new SpelExpressionParser();         final StandardEvaluationContext context = new StandardEvaluationContext(clazz);         final Object result = parser.parseExpression(""name"").getValue(context);          assertEquals(name, result);     } ```  ---  **Affects:** 3.1 GA  **Sub-tasks:** - #14512 Backport ""SpEL not able to resolve getter method against object of type Class""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea8b1327b49ece4ff47af8fb715fa17b588eb1a4, https://github.com/spring-projects/spring-framework/commit/d28592a6c66f62059c0cf056cc7db04cebb947c3, https://github.com/spring-projects/spring-framework/commit/4525527794b75c9d06866d6561f9afb053906d8b  1 votes, 6 watchers","closed","in: core,","spring-projects-issues","2012-01-11T12:12:15Z","2019-01-11T22:21:55Z"
"","13376","Incorrect javadoc for AbstractResource.contentLength() -- looks like copy-paste error [SPR-8734]","**[Gregor Purdy](https://jira.spring.io/secure/ViewProfile.jspa?name=gregor)** opened **[SPR-8734](https://jira.spring.io/browse/SPR-8734?redirect=false)** and commented  The javadoc for this method matches that for lastModified(), but of course that is not correct.      /**      * This implementation checks the timestamp of the underlying File,      * if available.      * @see #getFile()      */     public long contentLength() throws IOException {     	return getFile().length();     }    ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dfda4c32d53104b0f11aa1986a696b52aff6cdaf","closed","in: core,","spring-projects-issues","2011-10-01T06:33:29Z","2012-06-19T03:39:24Z"
"","13819","@Inject Provider or @Autowired ObjectFactory issue with session scoped bean [SPR-9181]","**[Greg Thompson](https://jira.spring.io/secure/ViewProfile.jspa?name=gthomps95)** opened **[SPR-9181](https://jira.spring.io/browse/SPR-9181?redirect=false)** and commented  I have a session scoped bean.  It's marked with .  I'm trying to inject a Provider or ObjectFactory into the session bean using `@Inject` or `@Autowired`.  It injects fine the first time the session bean is created.  On the second creation of the session bean (for a 2nd session), I get java.lang.IllegalArgumentException when setting the `@Inject` or `@Autowired` property.  It's trying to set the actual bean, instead of a provider or an object factory.  I stepped through the code.  The code in the getDependencyType() method of DependencyDescriptor doesn't seem to work as expected when it's setting the value on the second session bean.  Something with the nesting level.  So, I don't get a DependencyProvider as expected in the resolveDependency method of DefaultListableBeanFactory class. The getDependencyType returns the class of the bean, instead of a provider or object factory class that is the type of the property.  This worked fine with 3.0.  ---  **Attachments:** - [SPR-9181.tgz](https://jira.spring.io/secure/attachment/19995/SPR-9181.tgz) (_4.89 kB_)  **Issue Links:** - #14024 Regression: javax.inject.Provider resolution too agressive (_**""is duplicated by""**_) - #14264 Injection of Provider fails for prototype-scoped beans (_**""is duplicated by""**_) - #14478 Automatically created java.inject.Provider cannot be injected into session scoped beans (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1bd775f828ddb1f2919c2a57b1151dc3cca9f14c, https://github.com/spring-projects/spring-framework/commit/fbe955ab284f5782b80a852b84933af14c32b006  6 votes, 8 watchers","closed","in: core,","spring-projects-issues","2012-02-28T14:37:34Z","2019-01-11T22:16:02Z"
"","13166","Annotation based bean creation fails with GsonBuilder [SPR-8522]","**[Greg Nieman](https://jira.spring.io/secure/ViewProfile.jspa?name=gnieman)** opened **[SPR-8522](https://jira.spring.io/browse/SPR-8522?redirect=false)** and commented  Creation of a GsonBuilder using `@Bean` fails with  java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods: dateFormat.  Rolling back to 3.0.5 the same code works.  The exception occurs in the addOrUpdatePropertyDescriptor method of the ExtendedBeanInfo class at line 230 when it attempts to set the indexedReadMethod, which IIRC is a null value.  Attached is a small sample that illustrates this.  The pom is set so you can toggle back and forth between 3.1 and 3.0.5 to see the behavior.  ---  **Affects:** 3.1 M2  **Attachments:** - [testconfig.zip](https://jira.spring.io/secure/attachment/18467/testconfig.zip) (_24.75 kB_)  **Issue Links:** - #14663 Overhaul non-void JavaBean write method support  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2011-07-11T07:29:06Z","2019-01-11T13:19:27Z"
"","13535","Warnings thrown while using SpringFramework 3.1.RC2 with Quartz 2.1.1 [SPR-8894]","**[Greg Lively](https://jira.spring.io/secure/ViewProfile.jspa?name=glively)** opened **[SPR-8894](https://jira.spring.io/browse/SPR-8894?redirect=false)** and commented  Updated my local dev environment to Spring Framework 3.1.RC2 and Quartz 2.1.1. My job are running fine, however, I get a number of these warnings in my logs while the app is starting up:  WARNING: Unable to load class [org.springframework.scheduling.quartz.CronTriggerBean] to check against the `@HandlesTypes` annotation of one or more ServletContentInitializers. java.lang.IncompatibleClassChangeError: class org.springframework.scheduling.quartz.CronTriggerBean has interface org.quartz.CronTrigger as super class at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631) at java.lang.ClassLoader.defineClass(ClassLoader.java:615) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141) at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:2823) at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:1160) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1655) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1533) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:1988) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1951) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1840) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1808) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1794) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1214) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:828) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:302) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5148) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1525) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1515) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)   ---  **Affects:** 3.1 RC2  **Attachments:** - [SchedulerService.java](https://jira.spring.io/secure/attachment/19181/SchedulerService.java) (_985 bytes_) - [SchedulerServiceImpl.java](https://jira.spring.io/secure/attachment/19180/SchedulerServiceImpl.java) (_4.79 kB_)","closed","in: core,","spring-projects-issues","2011-12-03T07:35:34Z","2019-01-12T05:29:35Z"
"","13200","setCronExpression method not exposed in CronTriggerBean [SPR-8556]","**[Greg Lively](https://jira.spring.io/secure/ViewProfile.jspa?name=glively)** opened **[SPR-8556](https://jira.spring.io/browse/SPR-8556?redirect=false)** and commented  The CronTriggerBean does not expose the setCronExpression() method. It looks like the Spring CronTriggerBean should extend the QUARTZ CronTriggerImpl, not the QUARTZ interface?? of CronTrigger, which only contain 4 getter methods. I have no idea where it would get access to setCronExpression any other way.  ---  **Affects:** 3.1 M2  **Issue Links:** - #12923 Support Quartz 2.0.x","closed","in: core,","spring-projects-issues","2011-07-23T08:43:26Z","2019-01-12T16:25:19Z"
"","13413","RequestDataValueProcessor not called in RedirectView [SPR-8770]","**[Gotzon Illarramendi](https://jira.spring.io/secure/ViewProfile.jspa?name=gillarramendi)** opened **[SPR-8770](https://jira.spring.io/browse/SPR-8770?redirect=false)** and commented  In RedirectView class, 'renderMergedOutputModel' method calls to RequestDataValueProcessor inteface into this if statement:  ``` if (getWebApplicationContext() != null) {         RequestContext requestContext = createRequestContext(request, response, model);         RequestDataValueProcessor processor = requestContext.getRequestDataValueProcessor();         if (processor != null) {             targetUrl = processor.processUrl(request,             targetUrl);         }   } ```  The problem is that 'getWebApplicationContext()' returns always 'null' and this lines are not executed.  I have tested with 'spring-mvc-showcase' and 'petclinic' sample applications and it happens the same in both cases.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #21583 AOP and use of redirect view can lead to unbounded caching in AbstractAutoProxyCreator - #17930 Revisit RedirectView's use of getCurrentWebApplicationContext()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fd97c8d7a4d4717465c3bb09f2a17f7e2d56e973","closed","type: bug,","spring-projects-issues","2011-10-13T00:57:55Z","2019-01-11T14:06:35Z"
"","13674","Profiles not discovered by DispatcherServlet Config [SPR-9035]","**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[SPR-9035](https://jira.spring.io/browse/SPR-9035?redirect=false)** and commented  The Spring blog http://blog.springsource.org/2011/02/11/spring-framework-3-1-m1-released/ references the ability to configure ""spring.profiles.active"" as an ""init-param"" for DispatcherServlet.  This feature does not work with DispatcherServlet, it does work with ContextLoaderListener.  Web.xml servlet section: \ \accounts\ \org.springframework.web.servlet.DispatcherServlet\                       contextConfigLocation             /WEB-INF/mvc-config.xml                               spring.profiles.active             PRODUCKSEAN                  1         ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/a0a909ec937417ba7ae6eada7ef8a3e21429d843, https://github.com/spring-projects/spring-framework-issues/commit/5c1262bf736b4ea7393b6afd159bb3a0a40bb1b1","closed","in: core,","spring-projects-issues","2012-01-18T09:37:15Z","2019-01-12T16:36:57Z"
"","13494","JUnit Dependency not in Central [SPR-8852]","**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[SPR-8852](https://jira.spring.io/browse/SPR-8852?redirect=false)** and commented  JUnit version specified in org.springframework.spring-parent specifies JUnit version ""4.9.0"". The tertiary digit is not present in Central. Change to ""4.9"", or the current version ""4.10"".   ---  **Affects:** 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3528637d62bbcc685522714a4a826dca88346ae4","closed","type: bug,","spring-projects-issues","2011-11-15T07:18:20Z","2012-06-19T03:39:48Z"
"","12981","SpEL Documentation - Include Predefined Beans [SPR-8333]","**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[SPR-8333](https://jira.spring.io/browse/SPR-8333?redirect=false)** and commented  As a developer, it would be helpful to define any predefined objects available for use in SpEL.  Section ""6.4.1 XML based configuration"" defines ""systemProperties"", however ""systemEnvironment"" is not defined anywhere in the documentation.  1. Are there any other Spring Framework variables available? 2. Is there any specific configuration to enable/populate these variables, such as using PropertyPlaceholderConfigurer?    ---  **Affects:** 3.0.5, 3.1 M1  1 votes, 3 watchers","open","type: task,","spring-projects-issues","2011-05-12T16:47:03Z","2018-12-28T11:49:47Z"
"","12976","Documentation for @BeanAge [SPR-8327]","**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[SPR-8327](https://jira.spring.io/browse/SPR-8327?redirect=false)** and commented  Please provide description for `@BeanAge` documented in Core SpringFramework Reference in Section 3.10, PDF page 103.  Also, provide comment in the Annotation class: org.springframework.context.annotation.BeanAge.java.   ---  **Affects:** 3.0.5, 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df5bab3454ae337eadc430b85259ca2bdc0c643c","closed","type: enhancement,","spring-projects-issues","2011-05-10T15:24:48Z","2012-06-19T03:39:44Z"
"","13645","NPE in Spring-JDBC with sqlite [SPR-9006]","**[gonfi](https://jira.spring.io/secure/ViewProfile.jspa?name=gonfi)** opened **[SPR-9006](https://jira.spring.io/browse/SPR-9006?redirect=false)** and commented  GenericTableMetaDataProvider line ~310: check if userName is null line ~338: check if userName is null  that's it.   ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?99201-SQLite-SingleConnectionDataSource-NullpointerException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e00456e6747e1015e577ffe0465a7942fbcf30c, https://github.com/spring-projects/spring-framework/commit/66012b951e6fc1f2c8cd9025381f2ae6851bd91c","closed","type: bug,","spring-projects-issues","2012-01-06T18:26:32Z","2012-06-19T03:39:49Z"
"","13543","Users of the SpringSource EBR need Spring framework bundles to continue to be published there for Spring 3.2 [SPR-8903]","**[Glyn Normington](https://jira.spring.io/secure/ViewProfile.jspa?name=glyn)** opened **[SPR-8903](https://jira.spring.io/browse/SPR-8903?redirect=false)** and commented  The planned implementation of #12770 for Spring 3.2 excludes support for publishing Spring framework bundles to the SpringSource Enterprise Bundle Repository (EBR). The subset of the OSGi community that uses Spring, which includes the communities surrounding the popular Eclipse Virgo and Gemini Blueprint projects, will be impacted if such support is not put in place or some suitable workaround found.  The particular value of publishing Spring framework bundles to the EBR is that the EBR captures those bundles' transitive dependencies on ""bundleised"" versions of 3rd party libraries such as Hibernate which are present in the EBR. If Spring framework 3.2 bundles are omitted from the EBR, then users will need to resort to educated guesswork to determine the correct ""bundleised"" transitive dependencies.  The purpose of this JIRA is to track the work to implement or work around the issue, but also to raise awareness of the issue among the user community and to encourage discussion.  Although this feels more like a blocker for the OSGi/Spring community, I have raised it as critical to provide a more balanced view from the perspective of the much larger Spring community.  BTW let's not use this issue to discuss the rationale for switching to Gradle - that's the subject of #12770.  ---  **Affects:** 3.2 M1  **Issue Links:** - #14434 Migration to gradle build lost OSGi headers (_**""is duplicated by""**_)  8 votes, 22 watchers","closed","status: declined,","spring-projects-issues","2011-12-08T03:41:38Z","2019-01-11T14:25:26Z"
"","13433","Provide OSGi regression test [SPR-8791]","**[Glyn Normington](https://jira.spring.io/secure/ViewProfile.jspa?name=glyn)** opened **[SPR-8791](https://jira.spring.io/browse/SPR-8791?redirect=false)** and commented  There is currently no regression test of the OSGi manifests of the Spring framework bundles. So it is possible to introduce manifest changes which will prevent Spring framework being used as a drop-in upgrade for earlier versions of Spring. See #13431 for an example of this, which was caught relatively late in the day.  The suggested improvement is to introduce a nightly regression test of the ability to resolve Spring framework with a fixed basic set of non-optional dependencies. The test should probably fire up an OSGi framework such as Eclipse Equinox and install the Spring framework bundles and their non-optional dependencies. After this, the Spring framework bundles should be started and then the test should check that all of those bundles are in ACTIVE state.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13431 New non-optional dependencies in org.springframework.web-3.1.0.RC1.jar","closed","status: bulk-closed,","spring-projects-issues","2011-10-20T03:05:32Z","2019-01-12T02:37:10Z"
"","13431","New non-optional dependencies in org.springframework.web-3.1.0.RC1.jar [SPR-8788]","**[Glyn Normington](https://jira.spring.io/secure/ViewProfile.jspa?name=glyn)** opened **[SPR-8788](https://jira.spring.io/browse/SPR-8788?redirect=false)** and commented  Spring framework 3.1RC1 does not work as a drop-in replacement for Spring framework 3.0.5 in Eclipse Virgo 3.0.x (or, for that matter as a replacement for Spring framework 3.0.0 in Eclipse Virgo 2.1.x and SpringSource dm Server 2.0.x).  This is very important for Virgo and dm Server users wanting to upgrade Spring before Virgo ships a release containing Spring framework 3.1.x.  For an example of the failure, when Virgo Tomcat Server has its user region upgraded to 3.1RC1 ([1]), Virgo fails to start with the following diagnostics:  [2011-10-19 14:54:41.979] system-artifacts             \ Installation of plan 'org.eclipse.virgo.web.tomcat' version '3.0.0' failed. org.eclipse.virgo.kernel.osgi.framework.UnableToSatisfyBundleDependenciesException: Unable to satisfy dependencies of bundle 'org.eclipse.virgo.web.dm' at version '3.1.0.D-20111011141821': Cannot resolve: org.eclipse.virgo.web.dm Resolver report: An Import-Package could not be resolved. Caused by missing constraint in bundle  constraint:  An Import-Package could not be resolved. Caused by missing constraint in bundle  constraint:   at org.eclipse.virgo.kernel.install.pipeline.stage.resolve.internal.QuasiResolveStage.process(QuasiResolveStage.java:45) etc.  Looking in the manifest of org.springframework.web-3.1.0.RC1.jar, the following non-optional dependencies have been added. These should be made optional.  org.apache.http;version=""[4.1, 5.0.0)"", org.apache.http.client;version=""[4.1, 5.0.0)"", org.apache.http.client.methods;version=""[4.1, 5.0.0)"", org.apache.http.conn;version=""[4.1, 5.0.0)"", org.apache.http.conn.scheme;version=""[4.1, 5.0.0)"", org.apache.http.conn.ssl;version=""[4.1, 5.0.0)"", org.apache.http.entity;version=""[4.1, 5.0.0)"", org.apache.http.impl.client;version=""[4.1, 5.0.0)"", org.apache.http.impl.conn.tsccm;version=""[4.1, 5.0.0)"", org.apache.http.params;version=""[4.1, 5.0.0)"", org.apache.http.util;version=""[4.1, 5.0.0)""  [1] http://wiki.eclipse.org/Virgo/FAQ#How_can_I_change_the_version_of_Spring_framework_in_the_user_region.3F  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13433 Provide OSGi regression test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ca5f38c5e4f62335b5d97e5b4bacb5c7f2952e44","closed","type: bug,","spring-projects-issues","2011-10-19T07:23:43Z","2019-01-11T14:05:38Z"
"","13358","Expression language not compare BigDecimals with integers [SPR-8716]","**[Giovanni Dall'Oglio Risso](https://jira.spring.io/secure/ViewProfile.jspa?name=giovanni.dalloglio)** opened **[SPR-8716](https://jira.spring.io/browse/SPR-8716?redirect=false)** and commented  The number comparison can be more accurate with BigDecimals (possibly also BigIntegers) and other number types:  This test fail, becouse the BigDecimal is converted to Integer, truncating the value to zero:  ```     @Test     public void testGT() throws Exception     {          ExpressionParser ep = new SpelExpressionParser();         Expression expression = ep.parseExpression(""new java.math.BigDecimal('0.1') > 0"");         Boolean value = expression.getValue(Boolean.class);          Assert.assertTrue(value);     } ```  The responsible is the class org.springframework.expression.spel.ast.**OpGT** (but all the similar classes has the same imprinting)  ``` @Override public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {      Object left = getLeftOperand().getValueInternal(state).getValue();      Object right = getRightOperand().getValueInternal(state).getValue();      if (left instanceof Number && right instanceof Number) {           Number leftNumber = (Number) left;           Number rightNumber = (Number) right;           if (leftNumber instanceof Double || rightNumber instanceof Double) {                return BooleanTypedValue.forValue(leftNumber.doubleValue() > rightNumber.doubleValue());           } else if (leftNumber instanceof Long || rightNumber instanceof Long) {                return BooleanTypedValue.forValue(leftNumber.longValue() > rightNumber.longValue());           } else {                return BooleanTypedValue.forValue(leftNumber.intValue() > rightNumber.intValue());           }      }      return BooleanTypedValue.forValue(state.getTypeComparator().compare(left, right) > 0); } ```  In order you: * check if is a Double * check if is a Long * treat it as an Integer  I attach my modest suggestion  ---  **Affects:** 3.0.5  **Attachments:** - [OpGT.java](https://jira.spring.io/secure/attachment/18819/OpGT.java) (_3.08 kB_)  **Issue Links:** - #13802 Support BigDecimals with SpEL (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-09-22T04:24:16Z","2019-01-12T16:48:32Z"
"","13828","Threads blocking on getSingleton method on DefaultSingletonBeanRegistry class  [SPR-9190]","**[ggn](https://jira.spring.io/secure/ViewProfile.jspa?name=ggn)** opened **[SPR-9190](https://jira.spring.io/browse/SPR-9190?redirect=false)** and commented  We have been facing numerous threads being blocked waiting for getSingleton method on DefaultSingletonBeanRegistry class and because of this our servers have been hanging which requires a restart whenever it happens.  We have been collecting threaddumps whenever this happens and we are consistently seeing as below for hundreds of threads:  ""catalina-exec-567"" daemon prio=10 tid=0x00002aaabc5eb000 nid=0xc54 waiting for monitor entry [0x00002aaaf6320000] java.lang.Thread.State: BLOCKED (on object monitor) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:180) - waiting to lock  (a java.util.concurrent.ConcurrentHashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:466)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:319)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:298)   at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:1132)  java.lang.Thread.State: BLOCKED (on object monitor) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:180) - waiting to lock  (a java.util.concurrent.ConcurrentHashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:466)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:319)   at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:185)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:833)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:790)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:707)   at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:433)   at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:411)   at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:543)   at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:147)   at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84)   at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:298)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1074)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)   at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)   at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1087)  I have already commented requesting for help on the related problem https://jira.springsource.org/browse/SPR-7949 but haven't gotten any response.  https://jira.springsource.org/browse/SPR-7949 has some information about some patch but i haven't seen the patch being applied to 3.0.6 or 3.0.7 or 3.1.  Please help with this issue as this is causing some major issue with our application.  Thanks for help. ggn  ---  **Affects:** 3.0.6  **Reference URL:** https://jira.springsource.org/browse/SPR-7949  **Issue Links:** - #12604 Improve performance of DefaultSingletonBeanRegistry.getSingletonNames(..) for high-concurrent-load applications (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-03-01T23:13:45Z","2019-01-12T16:48:11Z"
"","13305","Conflict between GenericInterfaceDrivenDependencyInjectionAspect bean declaration and  [SPR-8663]","**[Gerson](https://jira.spring.io/secure/ViewProfile.jspa?name=gersonk)** opened **[SPR-8663](https://jira.spring.io/browse/SPR-8663?redirect=false)** and commented  Declaring a subaspect of GenericInterfaceDrivenDependencyInjectionAspect in Application Context (XML) before some \ causes Spring to stop injecting dependency to the subaspect.  ```                                                                   ```  ```                                                                  ```  ``` public aspect SubaspectOfGenericInterfaceDrivenDependencyInjectionAspect extends GenericInterfaceDrivenDependencyInjectionAspect {      protected ConfigObject configObject;      public void setConfigObject(ConfigObject configObject) {         this.configObject = configObject;     }      public void configure(SomeInterface bean) {         bean.setConfigObject(this.configObject);     } } ```    ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/cba7954af008110c77dab9f7174573310723be18","closed","in: core,","spring-projects-issues","2011-09-01T19:51:29Z","2019-01-11T14:19:44Z"
"","13290","Declaring RequestMappingHandlerAdapter before  makes Spring ignore my custom WebBindingInitializer [SPR-8648]","**[Gerson](https://jira.spring.io/secure/ViewProfile.jspa?name=gersonk)** opened **[SPR-8648](https://jira.spring.io/browse/SPR-8648?redirect=false)** and commented  The code below, declared in servlet-context.xml, doesn't work because MyCustomWebBindingInitializer is ignored by Spring.  ```                    ```  If I change to this one, everything works BUT JSR-303 Validator (`@Valid` in Spring MVC).  ```                    ```  ---  **Issue Links:** - #11737  doesn't allow CustomPropertyEditor be co-exists","closed","in: core,","spring-projects-issues","2011-08-28T09:23:14Z","2019-01-12T05:29:55Z"
"","13030","By default, there is broken conversion String -> ContextResource [SPR-8383]","**[Gerr Magnus Mes](https://jira.spring.io/secure/ViewProfile.jspa?name=gerr_mes)** opened **[SPR-8383](https://jira.spring.io/browse/SPR-8383?redirect=false)** and commented  For example:  public class SomeBean { private ContextResource cache;      @Required     public void setCache(ContextResource cache) {         this.cache = cache;     }  } ...  \ \ \  ...  org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'java.lang.String' to required type 'org.springframework.core.io.ContextResource'  Spring 2.x has no problem with conversion.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fece2c112502d1144a0e15f07bc403ffb2428b95, https://github.com/spring-projects/spring-framework/commit/f288060ad8f0d007f1541213130d006729b9ec40","closed","in: core,","spring-projects-issues","2011-05-31T00:34:53Z","2012-06-19T03:39:17Z"
"","13379","annotations need to be cached (jvm concurrency issue) [SPR-8737]","**[George Baxter](https://jira.spring.io/secure/ViewProfile.jspa?name=gjbaxter)** opened **[SPR-8737](https://jira.spring.io/browse/SPR-8737?redirect=false)** and commented  Java has a concurrency issue when examining annotations on a method or method parameters (synchronized around a jam-wide weak hash map).  In high concurrency environments, this becomes a bottleneck.  The only current solution is to cache the annotations.  Currently, the MethodParameter class could cache the annotations based on the declaring class, the method and the parameter index.  We might have been able to extend MethodParameter class to provide this caching, but unfortunately, the object is instantiated directly within the HandlerMethodInvoker.resolveHandlerArguments(..) (private method).  Currently a critical issue for us.  ---  **Affects:** 3.0.5, 3.0.6  **Issue Links:** - #13936 monitor contention at org.springframework.core.MethodParameter.getParameterAnnotations() (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-10-03T12:06:19Z","2019-01-11T14:04:31Z"
"","13520","[Documentation] Wrong namespace declaration in c-namespace example in reference guide. [SPR-8879]","**[Geert Pante](https://jira.spring.io/secure/ViewProfile.jspa?name=greyfairer)** opened **[SPR-8879](https://jira.spring.io/browse/SPR-8879?redirect=false)** and commented  See http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/beans.html#beans-c-namespace. It says:  ``` xmlns:p=""http://www.springframework.org/schema/c"" ```  Where it obviously should say:  ``` xmlns:c=""http://www.springframework.org/schema/c"" ```    --- No further details from [SPR-8879](https://jira.spring.io/browse/SPR-8879?redirect=false)","closed","type: bug,","spring-projects-issues","2011-11-28T01:44:50Z","2012-06-19T03:39:18Z"
"","12892","Allow Customization of Object Name Attributes [SPR-8244]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-8244](https://jira.spring.io/browse/SPR-8244?redirect=false)** and commented  MBeanExporters in Spring Integration and Spring Batch provide an attribute to specify additional components of the object name. It would be nice if core could do the same. When using `@ManagedResource`, one has to use a static name; this causes issues if multiple instances are deployed in the same JVM.  Currently using this as a work-around  ``` public class EnhancedMetadataNamingStrategy extends MetadataNamingStrategy {  	private String staticNameParts = """"; 	 	public EnhancedMetadataNamingStrategy( 			AnnotationJmxAttributeSource annotationSource) { 		super(annotationSource); 	}  	@Override 	public ObjectName getObjectName(Object managedBean, String beanKey) 			throws MalformedObjectNameException { 		ObjectName objectName = super.getObjectName(managedBean, beanKey); 		if (this.staticNameParts.length() == 0) { 			return objectName; 		} 		return new ObjectName(objectName.getCanonicalName() + this.staticNameParts); 	}  	/** 	 * Static properties that will be added to all object names. 	 *  	 * @param objectNameStaticProperties the objectNameStaticProperties to set 	 */ 	public void setObjectNameStaticProperties(Map objectNameStaticProperties) { 		StringBuilder builder = new StringBuilder(); 		for (String key : objectNameStaticProperties.keySet()) { 			builder.append("","" + key + ""="" + objectNameStaticProperties.get(key)); 		} 		this.staticNameParts = builder.toString(); 	}  } ```  ```  	 	 		 			 				 			 			 				 					 				 			 		 	  ```  See also [INT-1817](https://jira.spring.io/browse/INT-1817) (SI did not expose the map via the namespace).  ---  **Affects:** 3.0.5  **Sub-tasks:** - #14655 Eliminate package cycle introduced by SPR-8244  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e0200769d892932561f721a1a015d176e95337f  0 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-12T09:24:21Z","2019-01-11T12:53:50Z"
"","12899","Use of sendError(int,String) in AnnotationMethodHandlerExceptionResolver causes @RequestBody to be ignored [SPR-8251]","**[Gareth Davis](https://jira.spring.io/secure/ViewProfile.jspa?name=gid79)** opened **[SPR-8251](https://jira.spring.io/browse/SPR-8251?redirect=false)** and commented  When an `@ExceptionHandler` method is also annotated with `@ResponseStatus`(reason = ""some none empty reason"") then AnnotationMethodHandlerExceptionResolver uses response.sendError rather than response.setStatus, this causes the container to commit the response and ignore any writes to the output stream.  Stack Overflow question: http://stackoverflow.com/questions/5637950/spring-mvc-using-responsestatusreason-on-a-responsebody-exception-handl  github project with example: https://github.com/gid79/spring-mvc-json-error-resolver  This is a minor issue that can cause an awful lot of head scratching. The fix is actually to use setStatus(int,String) rather than sendError() but that overload of setStatus is deprecated in favour of sendError.  I haven't tested this in anything other than tomcat 6&7.    ---  **Affects:** 3.0.5  3 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2011-04-15T07:51:08Z","2019-01-12T16:25:46Z"
"","13338","Introduce qualifier in @Cacheable for cache manager name [SPR-8696]","**[Gaetan Pitteloud](https://jira.spring.io/secure/ViewProfile.jspa?name=gpitteloud)** opened **[SPR-8696](https://jira.spring.io/browse/SPR-8696?redirect=false)** and commented  A qualifier attribute on `@Cacheable` would help to specify a `CacheManager` in the scenario described in the referenced forum post and summarized here:  > Two modules define their own `CacheManager` and use `@Cacheable` together with `` in their respective XML configuration files. >  > When the XML configuration files from the two modules are used to build a single `ApplicationContext`, the second `CacheManager` is ignored as only one cache interceptor is registered by the namespace.  ---  **Affects:** 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?110853  **Issue Links:** - #11513 Enable Executor qualification with `@Async` - #15257 Be able to specify custom key generators on a per-cache basis - #15940 Provide a `@CacheConfig` annotation to share class-level customizations - #16115 Apply CacheResolver to Spring's caching abstraction  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b89c1a87e2469110f9a0d4282eeb348b76262ff, https://github.com/spring-projects/spring-framework/commit/f06cad91c03c395177ee139539ac1dabfd4855da  10 votes, 12 watchers","closed","has: votes-jira,","spring-projects-issues","2011-09-14T23:37:25Z","2019-01-13T07:07:52Z"
"","12973","Formatter subsystem: allow Parser to return null as the parsed object; allow Printers to accept null as the object to be formatted [SPR-8324]","**[Gabriele Del Prete](https://jira.spring.io/secure/ViewProfile.jspa?name=gdelprete)** opened **[SPR-8324](https://jira.spring.io/browse/SPR-8324?redirect=false)** and commented  Currently, the Formatter subsystem in Spring guarantees that Parsers and Printers never have to handle null values. I believe this should be changed to allow for null values in the ""object"" side of the conversion. That means modifying the system so that Parsers can return null as the parsed object, and Printers can accept null as the object to be formatted.  This would allow to use null as a valid value, which might be required when interfacing with/building on legacy systems.  Right now, Parsers cannot return null or you'll immediately get a NullPointerException (on the conversion to targetType; see ParserConverter class in FormattingConversionService), while Printers will never be called if the object being formatted is null (see PrinterConverter class in FormattingConversionService).  I believe this specification change to Parser is fully backward compatible. The one to Printer is not (as Printers right now are never called on null), so maybe we could introduce a tag interface ""NullAwarePrinter"" that printers have to implement if they want to be passed null values (if they don't, just fall back to the current behavior).  Note: this is similar to issue #12969; however, #12969 involves only Parsers and the empty string value, and this one really is just an improvement, while the other is a bug (IMHO).  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?101583-Why-does-the-Formatter-system-ignore-null-values  **Issue Links:** - #12969 Formatter subsystem's ParserConverter skips Parser invocation if input string is empty","closed","type: enhancement,","spring-projects-issues","2011-05-10T08:20:37Z","2019-01-11T12:59:55Z"
"","12969","Formatter subsystem's ParserConverter skips Parser invocation if input string is empty [SPR-8321]","**[Gabriele Del Prete](https://jira.spring.io/secure/ViewProfile.jspa?name=gdelprete)** opened **[SPR-8321](https://jira.spring.io/browse/SPR-8321?redirect=false)** and commented  ParserConverter will skip calling the parse() method of a Parser\ if the to-be-converted field is empty, and will return null as the parsing result.  (You can see this at the very beginning of the convert() method in ParserConverter).  This mean that you get two different behaviors when receiving data from fields in a form, depending on whether you use or don't use parsers.  1) Suppose you have a String property on your command bean, and a matching input field on the view. Then:  - if the user inputs any non empty string, the form bean property will be set to that string; - if the user inputs an empty string, the form bean property will be set to the empty string.  So far, so good, this is the expected behavior.  2) Now suppose you annotate the String property on your command bean with a Formatter\ annotation with its parse() method implemented.  Then: - if the user inputs any non empty string, the parse() method will get correctly called, and will return whatever is its parsing result. - if the user inputs an empty string, the parse() method will never get called, and moreover the form bean property will be set to null.  This is wrong in my opinion because:  1) Spring is not allowing a Parser to handle empty strings on input, however one might very well want to consider empty strings as lecit value when parsing.  2) from the application point-of-view, using a Parser may result in having your command bean properties set to null... ironically enough, something you should never get as Parsers and Printers supposedly are not allowed to handle null values.  The proposed fix is, simply allow empty string to reach the Parser's parse() method, so that it can eventually handle it.  ---  I'm attaching a sample webapp which shows the problem; the webapp shows a form with two String fields, one not annotated with a Formatter, and the other annotated with a simple `@Trim` formatters which trims strings when parsing and is a no-op when printing.  The form is pre-populated with non empty string; if you submit it, you can see both the Parser and the Printer part of the Formatter getting called on the annotated property (watch the log for this). If you otherwise submit the form with empty fields, you'll see the Parser is never called, and the annotated property is set to null (again, see the log as on the resulting webpage nulls are converted to the empty string).  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?101583-Why-does-the-Formatter-system-ignore-null-values  **Attachments:** - [formatters-test.tar.gz](https://jira.spring.io/secure/attachment/18189/formatters-test.tar.gz) (_7.50 kB_)  **Issue Links:** - #12973 Formatter subsystem: allow Parser to return null as the parsed object; allow Printers to accept null as the object to be formatted - #12201 Consider mapping empty form values to [null] for Object properties - #12038 Formatters bind empty form fields to [null] property values while DataBinder by default binds empty string","closed","type: bug,","spring-projects-issues","2011-05-10T03:38:42Z","2019-01-13T07:09:25Z"
"","13482","RestTemplate Converting Generic Types [SPR-8840]","**[Furkan KAMACI](https://jira.spring.io/secure/ViewProfile.jspa?name=kamaci)** opened **[SPR-8840](https://jira.spring.io/browse/SPR-8840?redirect=false)** and commented  I have a model like that:  ```java public class Wrapper {   private String message;  private T data;   public String getMessage() {     return message;  }   public void setMessage(String message) {     this.message = message;  }   public T getData() {     return data;  }   public void setData(T data) {     this.data = data;  }  } ```  and I use resttemplate as follows:  ```java ... Wrapper response = restTemplate.getForObject(URL, Wrapper.class, myMap); Model model = response.getData(); ... ```  However it throws a:  ClassCastException  I think resttemplate can not understand my generic variable and maybe it accepts it as an Object instead of generic T. So it becomes a LinkedHashMap.  ---  **Reference URL:** http://forum.springsource.org/showthread.php?117511-RestTemplate-Can-Not-Convert-Generic-Types&p=387485#post387485  **Issue Links:** - #11685 Proper handling of parameterized types in RestTemplate (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-11-13T06:00:16Z","2019-01-11T15:02:53Z"
"","13416","Conditional converter List -> String depending on the List's element type doesn't work anymore [SPR-8773]","**[Friedrich Messner](https://jira.spring.io/secure/ViewProfile.jspa?name=fmessner)** opened **[SPR-8773](https://jira.spring.io/browse/SPR-8773?redirect=false)** and commented  We use a BeanWrapper with a registered ConditionalGenericConverter for the convertible pair List.class -> String.class. The condition checks the List's element type as follows:  ```java public class MyTypedListToStringConverter implements ConditionalGenericConverter {      @Override     public Set getConvertibleTypes() {         return Collections.singleton(new ConvertiblePair(List.class, String.class));     }      @Override     public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {         return MyType.class.isAssignableFrom(sourceType.getElementTypeDescriptor().getType());     }      @Override     public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {         // do the conversion stuff     } } ```  This used to work until 3.0.6 and seems to be broken with 3.1.RC1 since there is no element type at that point anymore. The difference is obviously that in 3.0 the collection's elementType was resolved lazily when calling `TypeDescriptor.getElementTypeDescriptor()` whereas it is just returned in the new version.   ---  **Affects:** 3.1 RC1","closed","status: bulk-closed,","spring-projects-issues","2011-10-13T07:50:07Z","2019-01-12T02:37:13Z"
"","13824","ResourceHttpRequestHandler should check that locations is not null [SPR-9186]","**[Fried Hoeben](https://jira.spring.io/secure/ViewProfile.jspa?name=fhoeben)** opened **[SPR-9186](https://jira.spring.io/browse/SPR-9186?redirect=false)** and commented  ResourceHttpRequestHandler does check whether a value supplied to setLocations is not empty, but it does not check whether a value has been configured at all. Can a `@Required` be added to the locations field, or afterPropertiesSet() be implemented to check that locations is not null?  Exposing the locations (with a getter) would allow me to double check my own configuration in a test case, but now I can't even do that...   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a4c15d6678e63b6d70af79d4c97c40e75c2e9152, https://github.com/spring-projects/spring-framework/commit/dd7508d6065edf42c4ba2af1df4fafa7ce24baea, https://github.com/spring-projects/spring-framework/commit/1eaaa9a446c664991f9cb744e9dbcde8b6bca357","closed","type: enhancement,","spring-projects-issues","2012-02-29T07:48:45Z","2013-07-19T14:25:42Z"
"","12894","Add S/MIME support for Mail Encryption [SPR-8246]","**[François Houdebert](https://jira.spring.io/secure/ViewProfile.jspa?name=fhoudebert)** opened **[SPR-8246](https://jira.spring.io/browse/SPR-8246?redirect=false)** and commented  When Using spring-context-support for sending mail and spring security for encryption, I can't encrypt my email since there is no s/mime support.  It would be usefull to add a simple API to be able to encrypt a message with a X509 certificate, for instance :  JavaMailSenderImpl sender = new JavaMailSenderImpl(); ... MimeMessage message = sender.createMimeMessage(); ... MimeMessage smimeEncryptedMsg = SmimeUtils.encryptMessage(sender.getSession(), message, smimePublicKey); sender.send(smimeEncryptedMsg);   ---  6 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-04-13T08:25:32Z","2019-01-12T03:49:55Z"
"","13736","Decode URI variable values when UrlPathHelper.setUrlDecode() is set to false  [SPR-9098]","**[Frans Flippo](https://jira.spring.io/secure/ViewProfile.jspa?name=fransflippo)** opened **[SPR-9098](https://jira.spring.io/browse/SPR-9098?redirect=false)** and commented  Say I have a Controller with the following request mapping:  `@RequestMapping`(value = ""/{group}/{identifier}"", method = RequestMethod.GET)  **Current behavior:**  If one of the PathVariable components (e.g. ""identifier"" in the above example) contains a URL encoded slash (%2F), the handler is NOT invoked for that request, e.g. http://myhost/myservlet/group/a%2Fb  **Expected behavior:**  If one of the PathVariable comonents (e.g. ""identifier"" in the above example) contains a URL encoded slash (%2F), the handler is invoked for that request and the URL decoded value is assigned to the path variable, e.g. http://myhost/myservlet/group/a%2Fb  calls the handler method above with group=""group"" and identifier=""a/b""  This is supported by the RFC which assigns special meaning to the slash character and states a slash and a URL encoded slash are NOT the same character:  RFC 3986 says (section 2.2) : The purpose of reserved characters is to provide a set of delimiting characters that are distinguishable from other data within a URI. URIs that differ in the replacement of a reserved character with its corresponding percent-encoded octet are not equivalent.  Percent- encoding a reserved character, or decoding a percent-encoded octet that corresponds to a reserved character, will change how the URI is interpreted by most applications.  Thus, characters in the reserved set are protected from normalization and are therefore safe to be used by scheme-specific and producer-specific algorithms for delimiting data subcomponents within a URI.  The actual URL decoding happens in UrlPathHelper.getLookupPathForRequest which eventually calls getRequestUri which calls decodeAndCleanUriString. This is basically too early. First the handler should be chosen and the PathVariables assigned. Then URL decoding should happen on each of the path variables' values.  If desired I can write a unit test or include a sample Controller to reproduce the above.  **Note:** Tomcat MUST be started with the -Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true option or the request will never even land at the Spring DispatcherServlet.  ---  **Affects:** 3.1 GA  **Issue Links:** - #11616 Decode URI template variables if the AbstractHandlerMethodMapping.setUrlDecode() property is set to false (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57307a0b2e5bce8f70d5deddf8df11d034dc8c5a  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-08T01:51:13Z","2019-01-11T22:26:47Z"
"","13818","Provide boolean logic on bean profiles, i.e. NOT profile. [SPR-9180]","**[Frank Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=maverick1601)** opened **[SPR-9180](https://jira.spring.io/browse/SPR-9180?redirect=false)** and commented  As far as I've seen it most of the bean profile examples tend to use profiles such as dev and production. However, sometimes it would be useful to have a configuration that should NOT be applied, if a certain profile is active. More generally speaking, wouldn't it be possible to support some rudimentary boolean logic for bean profiles?  ---  **Issue Links:** - #13370 Support not (!) operator for profile selection (_**""duplicates""**_) - #12637 Support profile exclusivity and/or bean definition finality","closed","type: enhancement,","spring-projects-issues","2012-02-28T12:14:00Z","2019-01-11T22:15:49Z"
"","13817","MutablePropertySources#get throws when it should return null [SPR-9179]","**[Frank Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=maverick1601)** opened **[SPR-9179](https://jira.spring.io/browse/SPR-9179?redirect=false)** and commented  Using contains() to check in advance is a valid work-around, but the JavaDoc should not state returning null, if throwing NPE.  ---  **Affects:** 3.1 GA  **Sub-tasks:** - #13823 Backport ""MutablePropertySources#get throws when it should return null""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d72ab59ae1841fecb0f33c938b37234dde75a8f, https://github.com/spring-projects/spring-framework/commit/15d1d824b54b2ec36a7c926e12644b391b310930","closed","in: core,","spring-projects-issues","2012-02-28T11:55:57Z","2019-01-11T22:16:20Z"
"","13781","Invalid MIME-type causes a 500 error [SPR-9142]","**[Francois Félicien](https://jira.spring.io/secure/ViewProfile.jspa?name=francoisfelicien)** opened **[SPR-9142](https://jira.spring.io/browse/SPR-9142?redirect=false)** and commented  I get a similar to #12368 issue but on 3.1 GA and on a different code line.  The following exception is thrown when The Accept header of the request does not contains any slash (mostly due to blackberry browser)  ``` java.lang.IllegalArgumentException: ""01"" does not contain '/'         at org.springframework.http.MediaType.parseMediaType(MediaType.java:640)         at org.springframework.http.MediaType.parseMediaTypes(MediaType.java:683)         at org.springframework.http.HttpHeaders.getAccept(HttpHeaders.java:149)         at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.getAcceptableMediaTypes(AbstractMessageConverterMethodProcessor.java:178)         at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:104)         at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:81)         at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:94)         at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:73)         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:617)         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:578)         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882)         at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:789)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:710)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)         at com.alvarum.server.channels.screen.framework.processing.ExceptionsStoppingAndLoggingFilter.doFilter(ExceptionsStoppingAndLoggingFilter.java:44)         at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)         at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:259)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ```  According to the comments of the issue #12368, it should either send a 406 response code or return null for ViewResolver chaining.  ---  **Affects:** 3.1 GA  **Sub-tasks:** - #13786 Backport ""Invalid MIME-type causes a 500 error"" - #14333 Backport ""Invalid MIME-type causes a 500 error""  **Issue Links:** - #13557 Accept header with quoted parameter causes IllegalArgumentException in HttpHeaders.getContentType for the outputMessage - #14327 IllegalArgumentException parsing several Accept header variations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/83ac44d1e4b6d25c83a5f1ba324bc63737193f61  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2012-02-21T01:44:34Z","2019-01-11T22:12:35Z"
"","13672","Multiselect is rendered with both pre-conversion and post-conversion values selected. [SPR-9033]","**[Finn Edward Merkel](https://jira.spring.io/secure/ViewProfile.jspa?name=finn)** opened **[SPR-9033](https://jira.spring.io/browse/SPR-9033?redirect=false)** and commented  Steps to reproduce: 1. Create an EnumSet\, and have it contain EnumSet.allOf(E). 2. Create and register an EnumSet converter that always returns a special string ""ALL"". 3. Bind the EnumSet to a multiselect that contains ""ALL"" as well as the elements of the EnumSet.  Expected result: The multiselect is rendered with only ""ALL"" selected.  Actual result: The multiselect is rendered with both ""ALL"" as well as every element in the EnumSet selected.   ---  **Affects:** 3.0.6","closed","status: bulk-closed,","spring-projects-issues","2012-01-18T06:52:30Z","2019-01-12T02:36:06Z"
"","13703","Doc: Bad snippet for CompositeCacheManager [SPR-9064]","**[Filippo De Luca](https://jira.spring.io/secure/ViewProfile.jspa?name=filosganga)** opened **[SPR-9064](https://jira.spring.io/browse/SPR-9064?redirect=false)** and commented  The documentation at address: http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/cache.html section 2.8.5.3 contains a snippet with error:  ```xml                             ```  Should be:  ```xml                             ```    ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8422da4d3f325b288adac6c8c59634c7962643f2, https://github.com/spring-projects/spring-framework/commit/13cf1fceaa88add6c02b4cebb58c7a5721c93946  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: documentation,","spring-projects-issues","2012-01-26T12:56:05Z","2013-01-18T04:49:44Z"
"","13795","Converters don't get picked up for MVC controllers in 3.0.7 [SPR-9157]","**[Ferenc Gratzer](https://jira.spring.io/secure/ViewProfile.jspa?name=ferengra)** opened **[SPR-9157](https://jira.spring.io/browse/SPR-9157?redirect=false)** and commented  The same converter class and xml config work with Spring 3.0.5 and 3.0.6, but not with 3.0.7. Only changing the Spring version breaks it.  ```java public class EnvironmentConverter implements Converter {   public Environment convert(String source) {} } ```  servlet.xml:  ```xml                           ```  Log:  ``` org.springframework.beans.ConversionNotSupportedException: Failed to convert value of type 'java.lang.String' to required type '....environment.Environment'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [....environment.Environment]: no matching editors or conversion strategy found 	at org.springframework.beans.SimpleTypeConverter.convertIfNecessary(SimpleTypeConverter.java:58) 	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:553) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveRequestParam(HandlerMethodInvoker.java:507) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:340) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:171) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:436) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:424) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:669) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:585) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:710) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ```    ---  **Affects:** 3.0.7","closed","status: declined,","spring-projects-issues","2012-02-23T08:03:00Z","2019-01-12T16:36:47Z"
"","13359","springmvc error happened when handle responseBody [SPR-8717]","**[feng](https://jira.spring.io/secure/ViewProfile.jspa?name=linvar)** opened **[SPR-8717](https://jira.spring.io/browse/SPR-8717?redirect=false)** and commented  log strack: java.lang.IllegalArgumentExceptiondoes not contain '/' at org.springframework.http.MediaType.parseMediaType(MediaType.java:562) ~[spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.http.MediaType.parseMediaTypes(MediaType.java:602) ~[spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.http.HttpHeaders.getAccept(HttpHeaders.java:149) ~[spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.writeWithMessageConverters(AnnotationMethodHandlerAdapter.java:964) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.handleResponseBody(AnnotationMethodHandlerAdapter.java:933) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.getModelAndView(AnnotationMethodHandlerAdapter.java:882) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:428) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:414) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) ~[spring-webmvc-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549)   --- No further details from [SPR-8717](https://jira.spring.io/browse/SPR-8717?redirect=false)","closed","status: declined,","spring-projects-issues","2011-09-23T00:16:23Z","2019-01-12T16:37:24Z"
"","13026","default values in placeholders e.g. ${key:default} are not overridable in a spring context with multiple PropertyPlaceholderConfigurer Beans [SPR-8379]","**[Felix Simmendinger](https://jira.spring.io/secure/ViewProfile.jspa?name=fsimmend)** opened **[SPR-8379](https://jira.spring.io/browse/SPR-8379?redirect=false)** and commented  say you have 3 xml spring configuration files A.xml, B.xml and C.xml where A.xml is the root context file and B.xml and C.xml are imported in a chained way. E.g.  A.xml -> B.xml -> C.xml where -> denotes an import.  If in such a scenario C.xml defines a bean and uses a placeholder x.key with default value ""C"" and B.xml defines a PPC overriding x.key with B, B is not the replaced value if A.xml defines another PPC where x.key is not defined.  The attached reproducer.zip contains a maven project with a UnitTest reproducing the behaviour.  If the default syntax is not used and you use a PPC in C.xml overriding is no problem.   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5  **Attachments:** - [reproducer.zip](https://jira.spring.io/secure/attachment/18285/reproducer.zip) (_4.85 kB_)  10 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-05-26T10:24:30Z","2019-01-12T03:49:44Z"
"","13679","Unserializable members of custom scoped-beans don't get reinjected from WebApplicationContext [SPR-9040]","**[Felix Seeger](https://jira.spring.io/secure/ViewProfile.jspa?name=felixs)** opened **[SPR-9040](https://jira.spring.io/browse/SPR-9040?redirect=false)** and commented  Please provide a way to extend the rewire-unserializable-objects functionality of session/request scoped beans to custom beans.  Longer Description:  I created the custom scope ""ViewScope""*1. The Bean in this Scope is annotated with: `@Component`(""statusBean"") `@ManagedBean` `@Scope`(""view"")  The bean has an autowired transient member environmentDAO which is not serializable. Everything works fine, when configuring the bean into the session or request scope.  According to the spring 3.0.0 M4 Changelog and a spring 3 presentation movie on the web, Spring 3 Beans in request/session scope automatically get objects inject from the WebapplicationContext if they are unserializable/null because they got lost during serialization.  It looks like it is not possible to do this for custom scoped beans.  I tried to configure the dao with an \ element and used scoped-proxy=""interfaces/targetClass"" from component-scan.  I gave a session-listener which implements HttpSessionActivationListener a try without sucess (sessionDidActivate is never called).  After all, everything I tried leaded to the dao beeing null, or an Exception because of an unserializable dao.  *1 http://blog.primefaces.org/?p=702   ---  **Affects:** 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2012-01-19T06:14:20Z","2019-01-12T02:36:00Z"
"","13642","Error while replacing nested placeholders [SPR-9002]","**[Felipe Desiderati](https://jira.spring.io/secure/ViewProfile.jspa?name=desiderati)** opened **[SPR-9002](https://jira.spring.io/browse/SPR-9002?redirect=false)** and commented  If you have a nested placeholder property, like this:  ... \${${Environment}.JndiProviderURL}\ ...  BUT, you defined each property in separated properties file and loaded these files using different PropertyPlaceholderConfigurers, i.e., one bean configuration for each properties file, that placeholder will not be replaced.  This happens because inside the framework, it processes the bean definitions iterating over the PPCs defined first. And each PPCs has its own properties file. So, when the PPC that has defined the Environment property is visited, only the ${Environment} placeholder will be replaced. And the method ""Object resolveValue(Object value)"" inside the BeanDefinitionVisitor class will return the original placeholder ${${Environment}.JndiProviderURL}, instead of ${Dev.JndiProviderURL}. (Environment=Dev)  The main problem happens inside the method ""String parseStringValue(..)"" of PropertyPlaceholderHelper class. The first placeholder ${Environment} will be replaced, but the second one ${Dev.JndiProviderURL} will be not. Because that property is defined in other properties file loaded by other PPC. The propVal on line 146 will be null and the method will return the original placeholder, instead of ${Dev.JndiProviderURL}.  I know if you define just one PPC with two locations (properties file) on it will solve the problem, but why not return the ""semi-replaced"" placeholder instead?   ---  **Affects:** 3.0.5  **Attachments:** - [SPR-9002.zip](https://jira.spring.io/secure/attachment/19515/SPR-9002.zip) (_4.62 kB_)","closed","in: core,","spring-projects-issues","2012-01-06T06:12:12Z","2019-01-12T16:37:02Z"
"","13025","Improve model merging when using Velocity fragment within Tiles [SPR-8378]","**[Fei Ma](https://jira.spring.io/secure/ViewProfile.jspa?name=feima)** opened **[SPR-8378](https://jira.spring.io/browse/SPR-8378?redirect=false)** and commented  When using Velocity as a Tiles fragment, current Spring MVC already works. However when to access RequestContext, which is used by Spring VM macros (defined in spring.vm) or custom toolbox, it is unable to merge the model from the current Request attributes, which has already been populated by previous `@Controller` handler before entering VelocityView as the result of RequestDispatcher.include().  1. Tiles template (JSP)      2. Tiles definition     \\  3. Spring MVC configuration             (similar to InternalResourceViewResolver for JSP)  4. Velocity fragment (b.vm)    #springFormInput(""command.property"")  Current workaround is to set ""exposeSpringMacroHelpers"" to false and create a controller that handles ""/**/*.vm"" and then do model.put(""springMacroRequestContext"", new RequestContext(request, response, getServletContext(), null)). Note it set the current model in RequestContext to null to cheat RequestContext to get model object from request attributes.  Expected: Spring should provide an option to merge model or use request attributes as a fallback in case ""vm"" resources are only accessed as internal resources thru RequestDispatcher and there's no controller to provide model.   ---  **Affects:** 3.0.5","closed","status: bulk-closed,","spring-projects-issues","2011-05-25T13:04:28Z","2019-01-12T03:49:46Z"
"","13121","JettyClientHttpRequestFactory [SPR-8475]","**[Federico Fissore](https://jira.spring.io/secure/ViewProfile.jspa?name=fissore@celi.it)** opened **[SPR-8475](https://jira.spring.io/browse/SPR-8475?redirect=false)** and commented  Attached are the source packages of the code we are using to use jetty as a ClientHttpRequestFactory to be used with RestTemplate  Please note: actually our tests are the original spring tests modified to assure the behaviour of our implementation be coherent with that of spring  I'll be glad to see this code (with any modifitation you'd like to apply) be merged into spring code base   ---  **Affects:** 3.0.5  **Attachments:** - [celi-spring-web-1.0-SNAPSHOT-sources.jar](https://jira.spring.io/secure/attachment/18359/celi-spring-web-1.0-SNAPSHOT-sources.jar) (_3.74 kB_) - [celi-spring-web-1.0-SNAPSHOT-test-sources.jar](https://jira.spring.io/secure/attachment/18360/celi-spring-web-1.0-SNAPSHOT-test-sources.jar) (_21.93 kB_)","closed","type: enhancement,","spring-projects-issues","2011-06-21T06:07:39Z","2014-11-06T23:22:39Z"
"","13681","org.springframework.dao.EmptyResultDataAccessException doesn't provide cause Throwable [SPR-9041]","**[Eugene Gunichev](https://jira.spring.io/secure/ViewProfile.jspa?name=eugene_gunichev)** opened **[SPR-9041](https://jira.spring.io/browse/SPR-9041?redirect=false)** and commented  Unlike the other exceptions, which are returned by org.springframework.orm.jpa.EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible, EmptyResultDataAccessException is not populated with cause Throwable. It somewhat complicates troubleshooting as the original stack trace is lost.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a0714b41c61c67851e86d86b69d45a25c6f5a70","closed","type: enhancement,","spring-projects-issues","2012-01-19T11:13:47Z","2012-06-19T03:39:48Z"
"","13599","readOnly transaction doesn't work with JPA and Hibernate 4 [SPR-8959]","**[Eugen Paraschiv](https://jira.spring.io/secure/ViewProfile.jspa?name=eugenparaschiv)** opened **[SPR-8959](https://jira.spring.io/browse/SPR-8959?redirect=false)** and commented  Setting the readOnly flag to true when Spring is configured with JPA (JpaTransactionManager, LocalContainerEntityManagerFactoryBean) with Hibernate (3.6.8) as provider works fine. When migrating to Hibernate 4 (still with the same JPA configuration) the readOnly doesn't have any effect any more. After a bit of debugging it seems that, when the underlying connection is prepared, it no longer gets marked as read only, so no exception is thrown, which means that the operation is indeed executed. This should be easy to test, but if needed I can provide a sample project. I will also mention that I am using MySQL.  ---  **Affects:** 3.1 GA  **Issue Links:** - #16734 OpenEntityManagerInViewInterceptor doesn't always close connections with WildFly 8 - #16559 Isolation support for JPA with Hibernate EntityManager 4 - #17860 HibernateJpaDialect should warn about connection release mode other than ON_CLOSE (when upgrading from 4.0.x)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0280a2a9947bd4ee0c835129f7adb60a23f371ca, https://github.com/spring-projects/spring-framework/commit/5452144dabbdb7ec1ed2009768aa36f7d3f1bdb1, https://github.com/spring-projects/spring-framework/commit/562916b69cc90d5799f8829f688e874befe191ac, https://github.com/spring-projects/spring-framework/commit/8a5e47a0434f2bcb8341356333019231e6a76729, https://github.com/spring-projects/spring-framework/commit/cbda72232924b1fddd47f30ccf719ea925424b63  2 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2011-12-24T12:32:54Z","2019-01-11T14:32:40Z"
"","13560","Using multiple declarations of jdbc:embedded-database creates only one H2 instance per JVM [SPR-8920]","**[Etienne Studer](https://jira.spring.io/secure/ViewProfile.jspa?name=etiennestuder)** opened **[SPR-8920](https://jira.spring.io/browse/SPR-8920?redirect=false)** and commented  When using the jdbc:embedded-database element, Spring will use the same database name for each embedded database instance that it tries to create. As a consequence of using the same database name, all connections go against the same embedded H2 instance (and thus the data is shared) -> this causes troubles if multiple (and unrelated) application contexts are running at the same time or if more than one H2 instance with a separate datastore is needed in one application context.  See http://www.h2database.com/html/features.html#in_memory_databases for details.  Suggested fix: Provide a databaseName attribute on the jdbc:embedded-database element. This way, the developer can control the scope/visibility of the H2 instances.  ---  **Affects:** 3.0.5  **Issue Links:** - #13491 Introduce support for generating unique names for embedded databases - #12260 jdbc:datasource lacks 'name' attribute or related mechanism - #17432 Introduce database-name attribute in  (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2011-12-14T00:06:57Z","2019-01-11T14:27:42Z"
"","12886","NullPointerException if DefaultKeyGenerator if one argument is null [SPR-8238]","**[Etienne Bernard](https://jira.spring.io/secure/ViewProfile.jspa?name=ebernard)** opened **[SPR-8238](https://jira.spring.io/browse/SPR-8238?redirect=false)** and commented  In the following scenario:  ``` @Cacheable(value = ""productListByShopAndBrand"") public Collection getProductList(Shop shop, Brand brand) {     .... } ```  Which can be called with brand == null (when you do not want to filter), you'll get a NullPointerException in the DefaultKeyGenerator, because it calls object.hashCode() without checking for null value.  I suggest the following (simple) change:  ``` public Object extract(Method method, Object... params) { 	int hashCode = 17;  	for (Object object : params) { 		hashCode = 31 * hashCode + (object == null ? 53 : object.hashCode()); 	}  	return Integer.valueOf(hashCode); } ```    ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5206f5bc9a0e4721eb173c27549e2369d9a8d919, https://github.com/spring-projects/spring-framework/commit/e1d19d6c24f48f35f528ddd1d4b07a45f2fb0399","closed","type: bug,","spring-projects-issues","2011-04-09T03:39:16Z","2012-06-19T03:39:11Z"
"","13349","CUBRID Database Support through its JDBC Driver [PATCH INCLUDED] [SPR-8707]","**[Esen Sagynov](https://jira.spring.io/secure/ViewProfile.jspa?name=kadishmal)** opened **[SPR-8707](https://jira.spring.io/browse/SPR-8707?redirect=false)** and commented  Hi,  I am a developer at NHN and CUBRID Database Project Manager. Our company has been using the CUBRID RDBMS (http://www.cubrid.org) along with Spring Framework for most of its 100+ services. So we want to share the patch for Spring which enables to use CUBRID as a back-end database through its JDBC driver (http://www.cubrid.org/cubrid_java_programming).  In the attachment you can find two files:  * sql-error-codes.xml: the classifications of error codes. * CubridSequenceMaxValueIncrementer.java: retrieves the next value of a given CUBRID sequence.  The files are released under BSD.  Everything is done and tested. I hope our contribution will not be ignored. If anything is required please let me know.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?110504-CUBRID-Database-Support-through-its-JDBC-Driver&p=366361#post366361  **Attachments:** - [CUBRID_PATCH.zip](https://jira.spring.io/secure/attachment/18814/CUBRID_PATCH.zip) (_3.47 kB_)","closed","status: bulk-closed,","spring-projects-issues","2011-09-18T23:16:47Z","2019-01-12T02:37:31Z"
"","13685","@ActiveProfiles not taken into account for @ImportResource-imported XML context definitions from an @Configuration context definition [SPR-9046]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-9046](https://jira.spring.io/browse/SPR-9046?redirect=false)** and commented  When using `@ActiveProfiles` to activate certain profiles in a test that uses AnnotationConfigContextLoader to load a `@Configuration` context definition which imports XML application context definitions using `@ImportResource`, the active profiles are not considered when loading the XML context definition.  See the attached files for a test reproducing the problem. This test fails with the following error:  org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [test.ContextLoadingProblem$Bar] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {`@org`.springframework.beans.factory.annotation.Autowired(required=true)}  Note that if you use XML throughout (i.e. import one XML context definition from another), the problem does not arise.  ---  **Affects:** 3.1 GA  **Attachments:** - [bar-context.xml](https://jira.spring.io/secure/attachment/19325/bar-context.xml) (_613 bytes_) - [ContextLoadingProblem.java](https://jira.spring.io/secure/attachment/19326/ContextLoadingProblem.java) (_1.31 kB_)  **Issue Links:** - #13632 `@ActiveProfiles` are not cascaded down to contexts loaded via `@ImportResource` (_**""duplicates""**_) - #13040 AnnotatedBeanDefinitionReader's constructor should inherit Environment of supplied BeanDefinitionRegistry","closed","in: core,","spring-projects-issues","2012-01-23T05:22:36Z","2019-01-13T07:06:33Z"
"","13631","Initialize property sources before invoking ApplicationContextInitializer [SPR-8991]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-8991](https://jira.spring.io/browse/SPR-8991?redirect=false)** and commented  Currently, the ContextLoader.configureAndRefreshWebApplicationContext() will go through the following steps (summarized): 1) set the ServletContext on the WebApplicationContext 2) call ApplicationContextInitializer.initialize() methods 3) refresh the application context, which involves preparing the refresh, which in turn involves initializing the property sources (GenericWebApplicationContext.initPropertySources())  As a result, when ApplicationContextInitializer.initialize() is called, the PropertySources list is not yet properly initialized: it still contains stubs for the ServletConfigPropertySource and ServletContextPropertySource. This is stange because of course the ServletContext is already available!  As a result, an ApplicationContextInitializer cannot 'safely' use Environment.getProperty(), for instance to lookup a property containing additional profiles that need to be activated.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/856b77bc31046d416f2f236337d362517b1fda6f, https://github.com/spring-projects/spring-framework/commit/025b8abfaf1c2236328389337869dddcd5466fd7","closed","type: enhancement,","spring-projects-issues","2012-01-04T04:14:36Z","2012-06-19T03:39:20Z"
"","13630","Provide JdbcTemplate in abstract transactional base classes in the TestContext framework [SPR-8990]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-8990](https://jira.spring.io/browse/SPR-8990?redirect=false)** and commented  #### Status Quo  `AbstractTransactionalTestNGSpringContextTests` provides a `SimpleJdbcTemplate` for use in subclasses. Spring 3.1 deprecated `SimpleJdbcTemplate`. As a result any `AbstractTransactionalTestNGSpringContextTests` subclass that uses the `simpleJdbcTemplate` member inherited from the superclass will get deprecation warnings.  ---  #### Goals  It would be useful to also add a `protected JdbcTemplate jdbcTemplate` instance variable to `AbstractTransactionalTestNGSpringContextTests`, allowing subclasses to switch to this new `jdbcTemplate` to avoid the deprecation warnings.  The same remark is applicable to `AbstractTransactionalJUnit4SpringContextTests` and other similar test support classes.  ---  #### Deliverables  1. [x] In `AbstractTransactionalJUnit4SpringContextTests` and `AbstractTransactionalTestNGSpringContextTests`:    - Define and instantiate a `protected JdbcTemplate jdbcTemplate`    - _Deprecate_ the existing `simpleJdbcTemplate` instance variable    - Delegate to `JdbcTestUtils` instead of the now deprecated `SimpleJdbcTestUtils` 2. [x] Update the reference manual 3. [x] Update the changelog  ---  **Affects:** 3.1 GA  **Issue Links:** - #13873 Deprecate SimpleJdbcTestUtils in favor of JdbcTestUtils (_**""depends on""**_) - #14299 Introduce countRowsInTableWhere() and dropTables() in abstract transactional base classes in the TestContext framework (_**""is depended on by""**_) - #13983 Reference Guide still recommends SimpleJdbcTemplate, which is now deprecated - #11587 Deprecate SimpleJdbcTemplate in favor of JdbcTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d9637ada65b3b7211a37f853221493c963b1799  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-01-04T03:27:42Z","2019-01-13T21:41:08Z"
"","13701","Spring MVC 3.1.GA 405 problem, can not create two mappings with a same url when using 2 methods (GET, POST) and a PathVariable [SPR-9062]","**[Erwan ALLIAUME](https://jira.spring.io/secure/ViewProfile.jspa?name=ealliaume)** opened **[SPR-9062](https://jira.spring.io/browse/SPR-9062?redirect=false)** and commented  Hi, Here is a bug I found on Spring MVC 3.1 GA. I mage pull request made on SpringSource spring-test-mvc project with a broken test : https://github.com/SpringSource/spring-test-mvc/pull/22  Quick explanation:  Method 1 : `@RequestMapping`(value = ""/bug/EXISTING"", method = POST) Method 2 : `@RequestMapping`(value = ""/bug/{type}"", method = GET)  These two mappings are in conflict when calling : POST /bug/EXISTING => Http 200 => OK :) GET /bug/EXIST => Http 200 => OK :) GET /bug/EXISTING => Http 405 => KO :(  Regards   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e9208981a642f1e98863446174ce5285f5ecf993  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2012-01-26T07:35:27Z","2012-06-19T03:39:06Z"
"","13686","SessionAttributes defined in the controller are not populated from the HttpSession object when the web session fails over to a new server in the cluster [SPR-9047]","**[Erik Love](https://jira.spring.io/secure/ViewProfile.jspa?name=elove)** opened **[SPR-9047](https://jira.spring.io/browse/SPR-9047?redirect=false)** and commented  We have been working towards implementing a web site using Spring 3.0.5.  However, when working in a clustered environment, we have found that variables defined as part of the `@SessionAttribute` annotation are not populated from the HttpSession when the server instance fails over to a different server in the cluster.  It looks like the org.springframework.web.bind.annotation.support.HandlerMethodInvoker calls the getActualSessionAttributeNames() method of the HandlerMethodResolver in order to get a list of all session attributes/variables that should be placed into the Model.  The issue, however, is that the Set used to store the names (actualSessionAttributeNames) is not populated during the init of HandlerMethodResolver.  It is only populated as the HandlerMethodResolver.isSessionAttribute method is called which doesn't happen until AFTER the call to the getActualSessionAttributeNames() is made by the HandlerMethodInvoker.  This is resulting in the SessionAttribute values being re-initialized and the loss of all conversational data for the Controller.  We have temporarily gotten around this issue by modifying the HandlerMethodResolver code  to have it add all session attribute names to the actualSessionAttributeNames during the init (around line 107 in the HandlerMethodResolver code).  We have not found any other solution and most forums/posts/blogs/examples suggest using the WebRequest or HttpSession objects directly.   ---  **Affects:** 3.0.5  **Attachments:** - [ErikController.java](https://jira.spring.io/secure/attachment/19330/ErikController.java) (_1.46 kB_)","closed","type: enhancement,","spring-projects-issues","2012-01-23T12:20:40Z","2012-06-19T03:39:05Z"
"","13406","Silent failure when using #id in @Cachable key [SPR-8763]","**[Eric Westfall](https://jira.spring.io/secure/ViewProfile.jspa?name=ewestfal)** opened **[SPR-8763](https://jira.spring.io/browse/SPR-8763?redirect=false)** and commented  I'm not sure if it's actually the use of #id that is the problem, but we have a method defined as follows:  ``` @Cacheable(value = Group.Cache.NAME, key=""'id=' + #id"") Group getGroup(String id); ```  The problem is that, what this appears to be doing is caching the very first group that is returned from the getGroup method and then returning that for all subsequent requests.  So if I execute the following sequence of requests:  ``` Group g1 = getGroup(""1000""); Group g2 = getGroup(""2000""); Group g3 = getGroup(""random_invalid_id_which_isnt_even_in_the_database""); ```  In the above case, g1, g2, and g3 will all be the exact same object which is the first group fetched (the one with id of ""1000"").  If I change, the method declaration as follows:  ``` @Cacheable(value = Group.Cache.NAME, key=""#id"") Group getGroup(String id); ```  I get the following error when trying to use the method:  ``` java.lang.IllegalArgumentException: Null key returned for cache definition (maybe you are using named params on classes without debug info?) CacheDefinition[public abstract org.kuali.rice.kim.api.group.Group org.kuali.rice.kim.api.group.GroupService.getGroup(java.lang.String) throws org.kuali.rice.core.api.exception.RiceIllegalArgumentException] caches=[http://rice.kuali.org/kim/v2_0/GroupType] | condition='' | key='#id' ```  But, oddly enough, when i change it as follows, it works!  ``` @Cacheable(value = Group.Cache.NAME, key=""#groupId"") Group getGroup(String groupId); ```  And, of course, the following works as well:  ``` @Cacheable(value = Group.Cache.NAME, key=""#p0"") Group getGroup(String groupId); ```  And this works as well:  ``` @Cacheable(value = Group.Cache.NAME, key=""'id=' + #groupId"") Group getGroup(String groupId); ```  So, I guess I'm wondering if ""#id"" is some kind of reserved value in the SPEL?  Or if there could be something else going on here?  Obviously the issue having debug symbols available for method parameters is not an issue because when i change ""id"" to ""groupId"" it works.  Also, I cut a little bit out of my original declaration of this method just to keep the description more succinct, there are other annotations on this method as well but I didn't think those would affect things, but just in case, here is the method verbatim as it is declared on the interface:  ``` @WebMethod(operationName = ""getGroup"") @WebResult(name = ""group"") @Cacheable(value = Group.Cache.NAME, key=""'id=' + #id"") Group getGroup(@WebParam(name=""id"") String id) throws RiceIllegalArgumentException; ```  If you need more info, javadoc can be found here:  http://site.kuali.org/rice/2.0.0-m9-SNAPSHOT/apidocs/org/kuali/rice/kim/api/group/GroupService.html    ---  **Affects:** 3.1 RC1  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2011-10-12T08:00:37Z","2019-01-11T14:06:56Z"
"","13110","Proxied controller does not handle @RequestParam properly when using @EnableWebMvc [SPR-8464]","**[Eric Toom](https://jira.spring.io/secure/ViewProfile.jspa?name=eric.toom)** opened **[SPR-8464](https://jira.spring.io/browse/SPR-8464?redirect=false)** and commented  When using `@Transactional` on a `@Controller` method arguments marked with `@RequestParam`(""name"") fail.  When routing to that controller, the following exception is raised.  java.lang.IllegalArgumentException: Name for argument type [java.lang.Long] not available, and parameter name information not found in class file either. org.springframework.util.Assert.notNull(Assert.java:112) org.springframework.web.method.annotation.support.AbstractNamedValueMethodArgumentResolver.updateNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:133) org.springframework.web.method.annotation.support.AbstractNamedValueMethodArgumentResolver.getNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:111) org.springframework.web.method.annotation.support.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:80) org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:65) org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:153) org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:117) org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:100) org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:502) org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:465) org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:863) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:792) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:851) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:756) javax.servlet.http.HttpServlet.service(HttpServlet.java:621) javax.servlet.http.HttpServlet.service(HttpServlet.java:722)  In working through a different issue during my migration from 3.1.0.M1 to 3.1.0.M2 I noticed this issue.  In working through the problem I created a small sample application that demonstrates the issue.  The sample project is using a WebApplicationInitializer so a Servlet 3.0 runtime environment is required.  I have included a relevant post from the forum thread this was created in response of.  ""I have spent some time trying to create a simple project that would expose the issue I was having. In doing so, I finally figured out what was causing me the issues. Basically, during a prototyping session the controller under question was doing some direct manipulation of the session factory, and a `@Transactional` annotation was added to the controller.  In the mvc:annotation-driven branch, I use two main contexts, one that is loaded through the context loader listener and scans non-controller components and a context that is associated to the dispatcher servlet that scans for controller components so I imagine the transaction annotation didn't conflict with it. In looking at the logs during initialization this branch uses the actual class and not a proxy when mapping the url to the method.  In the java configuration branch, I based the configurations off of the Greenhouse sample application, which scanned all of the components (controller and non-controller) in the same application context that was associated with the context loader listener. The dispatcher servlet was given an empty context. In this branch, the transaction annotation caused the initialization to map the url to the proxy created by the transaction annotation scanning (I would presume). I would assume that if I had created two contexts as I did in the xml configuration it would work fine. I have also confirmed that removing the `@Transactional` from the controller fixed the issues I was having.  At this point I have not created a JIRA entry for this because I assumed I would get some combination of 1) why would you want to do this or 2) create two contexts if you insist on doing this.  If you would still like me to create a ticket, I would be happy to, and I have a small sample application that shows the problem for troubleshooting purposes.""   ---  **Affects:** 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?110593-mvc-interceptors-behavior-change-between-3.1.0.M1-and-3.1.0.M2  **Attachments:** - [m2java.zip](https://jira.spring.io/secure/attachment/18351/m2java.zip) (_21.24 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a7ff8a2efaf5b30399066715fa1a6762814d6e7f, https://github.com/spring-projects/spring-framework/commit/40fb1b21e1ae3e802c2e9326afd81e6642c6ee59","closed","type: bug,","spring-projects-issues","2011-06-17T06:29:04Z","2012-06-19T03:39:46Z"
"","13042","AnnotationConfigContextLoader should not restrict the name of default configuration classes to ContextConfiguration [SPR-8395]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-8395](https://jira.spring.io/browse/SPR-8395?redirect=false)** and commented  #### Overview  This issue is a spinoff of #10852 and was originally titled ""_Support flexible (wildcard-based) resource suffixes in AnnotationConfigContextLoader_"".  #### Status Quo  When generating default configuration classes, `AnnotationConfigContextLoader` currently (as of Spring 3.1 M2) generates a class name by appending ""`$ContextConfiguration`"" to the name of the test class. For a test class named `MyTests` this requires the default configuration class to be named `MyTests$ContextConfiguration` (i.e., that it be a static inner class named `ContextConfiguration`).  #### Goal  `AnnotationConfigContextLoader` should use reflection to inspect all inner classes defined within the test class that is annotated with `@ContextConfiguration` and consider any inner class that meets the following criteria to be a default configuration class:  - not private - not final - static - annotated with `@Configuration`  #### Original Description  Suggestion to enhance `AnnotationConfigContextLoader` to support wildcards for the default `@Configuration` look-up rules.  The semantics would be that any class that matches that wildcard AND has an `@Configuration` annotation could be picked up.  As a further suggestion, change the default resource suffix pattern to ""$*"" -- this would satisfy the 'convention over configuration' but also give some naming flexibility to users.  ---  **Affects:** 3.1 M2  **Issue Links:** - #10852 Provide TestContext support for `@Configuration` classes","closed","type: enhancement,","spring-projects-issues","2011-06-03T06:49:48Z","2019-01-13T07:09:05Z"
"","12937","when using  you have to add a BeanNameUrlHandlerMapping to your servlet config or @Controllers will be ignored [SPR-8289]","**[Eric Pederson](https://jira.spring.io/secure/ViewProfile.jspa?name=ericacm)** opened **[SPR-8289](https://jira.spring.io/browse/SPR-8289?redirect=false)** and commented  When using  you have to add a BeanNameUrlHandlerMapping to your servlet config or `@Controllers` will be ignored.  See http://stackoverflow.com/questions/4784060/spring-tomcat-and-static-resources-and-mvcresources for further discussion.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c0e22e7a812e1216660773e9d513a29f3241f6a  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2011-05-03T01:38:43Z","2012-06-19T03:39:44Z"
"","13318","Content-Type on HttpForm Submissions Incorrectly Detected. [SPR-8676]","**[Eric LeVin](https://jira.spring.io/secure/ViewProfile.jspa?name=ejlevin1)** opened **[SPR-8676](https://jira.spring.io/browse/SPR-8676?redirect=false)** and commented  I had to create the following filter to override the Content-Type specified within a POST request from Firefox browser.  Below is the controller I was trying to make an AJAX call to with jQuery; however, when the request would come from Firefox (didn't happen in Chrome) it would successfully pass the parameters into the method as 'map'.  ```java @RequestMapping(value=""/pages/{pageId}"", method = RequestMethod.PUT) public @ResponseBody String update(@PathVariable Long pageId, @RequestBody MultiValueMap map) throws Exception  {   return String.valueOf(map.keySet().size()); } ```  Below is the filter that I created to override this behavior; however, I think this should actually be fixed within the ServletServerHttpRequest.isFormSubmittal(request) check instead.  You will notice that I do an .indexOf instead of .equals()  ```java /**  * This filter was created to fix a bug with AJAX submissions in Firefox.  Spring MVC assumes the form  * MUST have the Content-Type specified as 'application/x-www-form-urlencoded'; however, Firefox uses  * the content type: application/x-www-form-urlencoded; charset=UTF-8 because of jQuery.    *   * This filter will check whether the contents of the Content-Type field within the request has the   * form Content-Type (application/x-www-form-urlencoded) WITHIN it, and if so, return the value  * 'application/x-www-form-urlencoded' whenever getContentType() is called on the request object.  *   * @author ejlevin1  * @see org.springframework.http.server.ServletServerHttpRequest.isFormSubmittal(request)  */ public class FormSubmissionFilter extends OncePerRequestFilter { 	private static final String FORM_CONTENT_TYPE = ""application/x-www-form-urlencoded""; 	 	@Override 	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException 	{ 		if (request.getContentType() != null && request.getContentType().indexOf(FORM_CONTENT_TYPE) >= 0)  		{ 			request = new ContentTypeRequestWrapper(request); 		} 		filterChain.doFilter(request, response); 	} 	 	private static class ContentTypeRequestWrapper extends HttpServletRequestWrapper  	{ 		public ContentTypeRequestWrapper(HttpServletRequest request)  		{ 			super(request); 		}  		@Override 		public String getContentType()  		{ 			return FORM_CONTENT_TYPE; 		} 	}  } ```    ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/28a696ba513e91d70c8497f8a84f32d966d67a61","closed","type: bug,","spring-projects-issues","2011-09-08T19:59:41Z","2012-06-19T03:39:05Z"
"","13103","XMLEventStreamReader.getText() fails for COMMENT and ENTITY_REFERENCE events [SPR-8457]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-8457](https://jira.spring.io/browse/SPR-8457?redirect=false)** and commented  XMLStreamReader.getText() specifies the following:  /** * Returns the current value of the parse event as a string, * this returns the string value of a CHARACTERS event, * returns the value of a COMMENT, the replacement value * for an ENTITY_REFERENCE, the string value of a CDATA section, * the string value for a SPACE event, * or the String value of the internal subset of the DTD. * If an ENTITY_REFERENCE has been resolved, any character data * will be reported as CHARACTERS events. * `@return` the current text or null * `@throws` java.lang.IllegalStateException if this state is not * a valid text state.   */  The current implementation only works for CHARACTERS, CDATA, & SPACE events which all use the Characters XMLEvent class. COMMENT and ENTITY_REFERENCE events use a different class and fail the isCharacters() check in the existing code:  ``` public String getText() {     if (event.isCharacters()) {         return event.asCharacters().getData();     }     else {         throw new IllegalStateException();     } } ```  The following will not fail and is much closer to correct than the existing implementation though as the TODO notes it is still not 100% correct as getText must return resolved entity references. I feel like this fallback approach is at least a decent default and first pass at getting this issue fixed.  ``` public String getText() {     if (event.isCharacters()) { //Handles CHARACTERS, CDATA, & SPACE         return event.asCharacters().getData();     }     else if (event.getEventType() == XMLEvent.COMMENT) {         return ((Comment) event).getText();     }     else if (event.getEventType() == XMLEvent.ENTITY_REFERENCE) {         //TODO this should be the replacement value, not sure how to resolve that         return ((EntityReference) event).getName();     }     else {         throw new IllegalStateException();     } } ```  This bug is a problem for any use of the XMLEventStreamReader where a comment exists in the parsed document.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3a332e556cd05c0bee7dcd7f1f1a556d371e3567, https://github.com/spring-projects/spring-framework/commit/7c504853cdce0379b5282ec5bd869cc738f44e95","closed","in: core,","spring-projects-issues","2011-06-15T23:01:33Z","2012-06-19T03:39:31Z"
"","12988","Add GenericPortletFilterBean and DelegatingPortletFilterProxy [SPR-8340]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-8340](https://jira.spring.io/browse/SPR-8340?redirect=false)** and commented  Create portlet equivalents of GenericFilterBean and DelegatingFilterProxy for portlets.   ---  **Affects:** 3.0.5, 3.1 M1  **Attachments:** - [DelegatingPortletFilterProxy.java](https://jira.spring.io/secure/attachment/18229/DelegatingPortletFilterProxy.java) (_12.98 kB_) - [GenericPortletFilterBean.java](https://jira.spring.io/secure/attachment/18228/GenericPortletFilterBean.java) (_10.05 kB_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-16T15:15:50Z","2019-01-11T12:58:56Z"
"","13534","Detect whether parameter names are available for cache key computation [SPR-8893]","**[Eric Brun](https://jira.spring.io/secure/ViewProfile.jspa?name=erbru)** opened **[SPR-8893](https://jira.spring.io/browse/SPR-8893?redirect=false)** and commented  Hi,  I have annotated method of my class with the new cache abstraction feature.  a method by example :  `@Cacheable`(value=""jackrabbitCache"", key=""#login+':'+#path"") public RessourceItem getPathContent(String path, String login) {...}  On MacOSX JVM 1.6 and Jetty + tomcat 7 libs when I put login and path parameter with for example 'JEAN-MICHEL.JULLIEN' and path '/JEAN-MICHEL.JULLIEN' My traceback says :  02-12-2011 17:30:30:113 43707 DEBUG org.springframework.cache.interceptor.CacheInterceptor  - Computed cache key JEAN-MICHEL.JULLIEN:/JEAN-MICHEL.JULLIEN for operation CacheableOperation[public com.pentila.evalcomp.domain.transit.RessourceItem com.pentila.evalcomp.repository.Storage.getPathContent(java.lang.String,java.lang.String)] caches=[jackrabbitCache] | condition='' | key='#login+':'+#path'  => Here it works  When I deploy on Linux JVM IBM 1.6 or JVM SUN 1.6.0_22 on tomcat 6.0.33 or tomcat 7.0.22  My traceback is always :  02-12-2011 18:51:28:829 848685 DEBUG org.springframework.cache.interceptor.CacheInterceptor  - Computed cache key null:null for operation CacheableOperation[public com.pentila.evalcomp.domain.transit.RessourceItem com.pentila.evalcomp.repository.Storage.getPathContent(java.lang.String,java.lang.String)] caches=[jackrabbitCache] | condition='' | key='#login+':'+#path'  => Here Fail !  My key is wrong but I pass the right values for parameters (not null values).  Is there a bug in parameters interpretation in SpeL language expression ? Or a conflict libs with tomcat ?  Please Help  Thanks Eric   ---  **Affects:** 3.1 RC2","closed","type: enhancement,","spring-projects-issues","2011-12-02T10:03:39Z","2021-12-09T13:39:10Z"
"","13237","ModelAndViewContainer.view is overridden by ModelAndViewContainer.viewName [SPR-8593]","**[Emmanuel Venisse](https://jira.spring.io/secure/ViewProfile.jspa?name=evenisse)** opened **[SPR-8593](https://jira.spring.io/browse/SPR-8593?redirect=false)** and commented  My controller returns a ModelAndView object with a view (extends AbstractView) attached to it.  In ModelAndViewMethodReturnValueHandler, my view is set to null by this code :  mavContainer.setView(mav.getView()); mavContainer.setViewName(mav.getViewName());  It is set to null because setViewName reset the view object into mavContainer.  As it is null after this code, spring cannot resolve my view because it try to load the default view name.   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1300da06a6c4aea7a5198e70e97aee4990fa9b17  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2011-08-09T09:07:25Z","2012-06-19T03:39:49Z"
"","13355","DefaultResponseErrorHandler IOException Bug [SPR-8713]","**[elliot barlas](https://jira.spring.io/secure/ViewProfile.jspa?name=ebarlas)** opened **[SPR-8713](https://jira.spring.io/browse/SPR-8713?redirect=false)** and commented  DefaultResponseErrorHandler.handleError throws IOException for HTTP error responses (for example with 4xx, 5xx status codes) with no content.  RestTemplate invocations with error responses will throw ResourceAccessExceptions rather than HttpClientErrorException, HttpServerErrorException, and RestClientException.  This breaks client code that relies on specific exception behavior.  To reproduce, (1) implement a simple spring REST client that sends a request and (2) configure a server that sends error responses with no content.  Client example:  ``` import org.springframework.http.HttpMethod; import org.springframework.web.client.RestTemplate;  public class Main {      public static void main(String[] args) {         RestTemplate restTemplate = new RestTemplate();         restTemplate.exchange(""http://localhost:8080"", HttpMethod.GET, null, null);     }  } ```  Server example using netcat:  ``` $ nc -l 8080 GET / HTTP/1.1 User-Agent: Java/1.6.0_24 Host: localhost:8080 Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive  HTTP/1.1 400 Bad Request Content-Length: 0 ```  Result:  ``` Sep 20, 2011 2:58:41 PM org.springframework.web.client.RestTemplate handleResponseError WARNING: GET request for ""http://localhost:8080"" resulted in 400 (Bad Request); invoking error handler Exception in thread ""main"" org.springframework.web.client.ResourceAccessException: I/O error: Server returned HTTP response code: 400 for URL: http://localhost:8080; nested exception is java.io.IOException: Server returned HTTP response code: 400 for URL: http://localhost:8080 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:453) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:401) 	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:377) 	at com.citrix.queue.support.Main.main(Main.java:10) Caused by: java.io.IOException: Server returned HTTP response code: 400 for URL: http://localhost:8080 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:513) 	at sun.net.www.protocol.http.HttpURLConnection$6.run(HttpURLConnection.java:1491) 	at java.security.AccessController.doPrivileged(Native Method) 	at sun.net.www.protocol.http.HttpURLConnection.getChainedException(HttpURLConnection.java:1485) 	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1139) 	at org.springframework.http.client.SimpleClientHttpResponse.getBody(SimpleClientHttpResponse.java:77) 	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:72) 	at org.springframework.web.client.RestTemplate.handleResponseError(RestTemplate.java:486) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:443) 	... 3 more Caused by: java.io.IOException: Server returned HTTP response code: 400 for URL: http://localhost:8080 	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1436) 	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:379) 	at org.springframework.http.client.SimpleClientHttpResponse.getStatusCode(SimpleClientHttpResponse.java:47) 	at org.springframework.web.client.DefaultResponseErrorHandler.hasError(DefaultResponseErrorHandler.java:45) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:439) 	... 3 more ```  ---  **Affects:** 3.0.5  **Issue Links:** - #13524 RestTemplate.headForHeaders throws ""IllegalArgumentException: No InputStream specified"" on server resource which status code are 4xx  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c987b0ffb3ef31350329396293a27d5372d8bf0, https://github.com/spring-projects/spring-framework/commit/67fda70cb86b1cd83412e488dd32d74a0ccb20a0","closed","type: bug,","spring-projects-issues","2011-09-20T15:03:20Z","2019-12-30T14:09:00Z"
"","13230","PluggableSchemaResolver. Couldn't find XML schema [http://www.springframework.org/schema/batch/spring-batch-2.1.xsd] [SPR-8586]","**[Eldar](https://jira.spring.io/secure/ViewProfile.jspa?name=eldariof)** opened **[SPR-8586](https://jira.spring.io/browse/SPR-8586?redirect=false)** and commented  14:49:07,363 DEBUG [PluggableSchemaResolver] Found XML schema http://www.springframework.org/schema/beans/spring-beans-3.0.xsd in classpath: schema/spring-beans-3.0.xsd 14:49:07,372 DEBUG [PluggableSchemaResolver] Couldn't find XML schema http://www.springframework.org/schema/batch/spring-batch-2.1.xsd: class path resource [schema/spring-batch-2.1.xsd] java.io.FileNotFoundException: class path resource [schema/spring-batch-2.1.xsd] cannot be opened because it does not exist at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:158) at org.springframework.beans.factory.xml.PluggableSchemaResolver.resolveEntity(PluggableSchemaResolver.java:114) at org.springframework.beans.factory.xml.DelegatingEntityResolver.resolveEntity(DelegatingEntityResolver.java:85) at org.springframework.beans.factory.xml.ResourceEntityResolver.resolveEntity(ResourceEntityResolver.java:74) at org.apache.xerces.util.EntityResolverWrapper.resolveEntity(Unknown Source) at org.apache.xerces.impl.XMLEntityManager.resolveEntity(Unknown Source) at org.apache.xerces.impl.xs.XMLSchemaLoader.resolveDocument(Unknown Source) at org.apache.xerces.impl.xs.XMLSchemaValidator.findSchemaGrammar(Unknown Source) at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source) at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source) at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source) at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source) at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source) at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source) at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source) at org.apache.xerces.parsers.XMLParser.parse(Unknown Source) at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:388) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:186) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:147) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:132) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:93) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:124) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:93) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:467) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:397) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:549) at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1282) at org.jboss.jetty.JBossWebAppContext.startContext(JBossWebAppContext.java:118) at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:518) at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:499) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at org.jboss.jetty.JettyDeployer.performDeploy(JettyDeployer.java:142) at org.jboss.web.AbstractWebDeployer.start(AbstractWebDeployer.java:375) at org.jboss.web.WebModule.startModule(WebModule.java:83) at org.jboss.web.WebModule.startService(WebModule.java:61) at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:289) at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:245) at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:978) at $Proxy0.start(Unknown Source) at org.jboss.system.ServiceController.start(ServiceController.java:417) at sun.reflect.GeneratedMethodAccessor14.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy37.start(Unknown Source) at org.jboss.web.AbstractWebContainer.start(AbstractWebContainer.java:466) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.interceptor.DynamicInterceptor.invoke(DynamicInterceptor.java:97) at org.jboss.system.InterceptorServiceMBeanSupport.invokeNext(InterceptorServiceMBeanSupport.java:238) at org.jboss.wsf.container.jboss42.DeployerInterceptor.start(DeployerInterceptor.java:87) at org.jboss.deployment.SubDeployerInterceptorSupport$XMBeanInterceptor.start(SubDeployerInterceptorSupport.java:188) at org.jboss.deployment.SubDeployerInterceptor.invoke(SubDeployerInterceptor.java:95) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy38.start(Unknown Source) at org.jboss.deployment.MainDeployer.start(MainDeployer.java:1025) at org.jboss.deployment.MainDeployer.start(MainDeployer.java:1015) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:819) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:782) at sun.reflect.GeneratedMethodAccessor31.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy9.deploy(Unknown Source) at org.jboss.deployment.scanner.URLDeploymentScanner.deploy(URLDeploymentScanner.java:421) at org.jboss.deployment.scanner.URLDeploymentScanner.scan(URLDeploymentScanner.java:634) at org.jboss.deployment.scanner.AbstractDeploymentScanner$ScannerThread.doScan(AbstractDeploymentScanner.java:263) at org.jboss.deployment.scanner.AbstractDeploymentScanner.startService(AbstractDeploymentScanner.java:336) at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:289) at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:245) at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:978) at $Proxy0.start(Unknown Source) at org.jboss.system.ServiceController.start(ServiceController.java:417) at sun.reflect.GeneratedMethodAccessor14.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy4.start(Unknown Source) at org.jboss.deployment.SARDeployer.start(SARDeployer.java:302) at org.jboss.deployment.MainDeployer.start(MainDeployer.java:1025) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:819) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:782) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:766) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy5.deploy(Unknown Source) at org.jboss.system.server.ServerImpl.doStart(ServerImpl.java:482) at org.jboss.system.server.ServerImpl.start(ServerImpl.java:362) at org.jboss.Main.boot(Main.java:200) at org.jboss.Main$1.run(Main.java:508) at java.lang.Thread.run(Thread.java:619) 14:49:08,725 DEBUG [PluggableSchemaResolver] Found XML schema http://www.springframework.org/schema/tool/spring-tool-3.0.xsd in classpath: org/springframework/beans/factory/xml/spring-tool-3.0.xsd   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2011-08-03T04:19:52Z","2019-01-12T05:30:02Z"
"","13768","DefaultMessageListenerContainer throws javax.jms.IllegalStateException [SPR-9129]","**[El Mahdi El Hilali](https://jira.spring.io/secure/ViewProfile.jspa?name=mhilali)** opened **[SPR-9129](https://jira.spring.io/browse/SPR-9129?redirect=false)** and commented  reconnect failed, the Listener reads no messages, after restart the Listener works fine.  ``` WARN   2012-02-07 14:49:07,676 [sbus-bridge-container-inbound-1] RouterMessageListenerContainer: Setup of JMS message listener invoker failed for destination 'service.sbus.test.out.10' - trying to recover. Cause: Failed to connect to any server at: tcp://10.211.54.150:7222,tcp://10.211.54.151:7222; nested exception is javax.jms.IllegalStateException: connect failed: server in standby mode : org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:821) INFO   2012-02-07 14:49:09,182 [sbus-bridge-container-inbound-1] RouterMessageListenerContainer: Successfully refreshed JMS Connection : org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:862) WARN   2012-02-07 14:49:16,215 [sbus-bridge-container-inbound-2] RouterMessageListenerContainer: Setup of JMS message listener invoker failed for destination 'service.sbus.test.out.10' - trying to recover. Cause: Failed to connect to any server at: tcp://10.211.54.150:7222,tcp://10.211.54.151:7222; nested exception is javax.jms.IllegalStateException: connect failed: server in standby mode : org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:821) WARN   2012-02-07 14:49:19,251 [sbus-bridge-container-inbound-2] RouterMessageListenerContainer: Could not refresh JMS Connection for destination 'service.sbus.test.out.10' - retrying in 5000 ms. Cause: Failed to connect to any server at: tcp://10.211.54.150:7222,tcp://10.211.54.151:7222; nested exception is javax.jms.IllegalStateException: connect failed: server in standby mode : org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:875) WARN   2012-02-07 14:49:28,289 [sbus-bridge-container-inbound-2] RouterMessageListenerContainer: Could not refresh JMS Connection for destination 'service.sbus.test.out.10' - retrying in 5000 ms. Cause: Failed to connect to any server at: tcp://10.211.54.150:7222,tcp://10.211.54.151:7222; nested exception is javax.jms.IllegalStateException: connect failed: server in standby mode : org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:875) WARN   2012-02-07 14:49:36,828 [sbus-bridge-container-inbound-2] RouterMessageListenerContainer: Could not refresh JMS Connection for destination 'service.sbus.test.out.10' - retrying in 5000 ms. Cause: Failed to connect to any server at: tcp://10.211.54.150:7222,tcp://10.211.54.151:7222; nested exception is javax.jms.IllegalStateException: connect failed: server in standby mode : org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:875) WARN   2012-02-07 14:49:45,370 [sbus-bridge-container-inbound-2] RouterMessageListenerContainer: Could not refresh JMS Connection for destination 'service.sbus.test.out.10' - retrying in 5000 ms. Cause: Failed to connect to any server at: tcp://10.211.54.150:7222,tcp://10.211.54.151:7222; nested exception is javax.jms.IllegalStateException: connect failed: server in standby mode : org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:875) WARN   2012-02-07 14:49:52,892 [sbus-bridge-container-inbound-2] RouterMessageListenerContainer: Could not refresh JMS Connection for destination 'service.sbus.test.out.10' - retrying in 5000 ms. Cause: Failed to connect to any server at: tcp://10.211.54.150:7222,tcp://10.211.54.151:7222; nested exception is javax.jms.IllegalStateException: connect failed: server in standby mode : org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:875) WARN   2012-02-07 14:49:59,921 [sbus-bridge-container-inbound-2] RouterMessageListenerContainer: Could not refresh JMS Connection for destination 'service.sbus.test.out.10' - retrying in 5000 ms. Cause: Failed to connect to any server at: tcp://10.211.54.150:7222,tcp://10.211.54.151:7222; nested exception is javax.jms.IllegalStateException: connect failed: server in standby mode : org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:875) ```  Thanks,   ---  **Affects:** 3.0.3","closed","status: invalid,","spring-projects-issues","2012-02-17T01:47:48Z","2019-01-12T05:29:06Z"
"","13504","@RequestMapping(headers=""foo!=bar"") does not work for non media type headers [SPR-8862]","**[Edward Sargisson](https://jira.spring.io/secure/ViewProfile.jspa?name=ejsarge)** opened **[SPR-8862](https://jira.spring.io/browse/SPR-8862?redirect=false)** and commented  I am attempting to seemlessly handle requests for KML files from Google Maps API and return a gzip version when requested. Google Maps puts 'accept-encoding = gzip' into the header.  I have the following code:  `@RequestMapping`(value = ""/course/{courseIdParam}.kml"", method=RequestMethod.GET, headers=""Accept-Encoding!=gzip"") `@ResponseBodypublic` void getCourseAsKml(`@PathVariable` final String courseIdParam, final ModelMap modelMap, final OutputStream outputStream, final HttpServletResponse response, final HttpServletRequest request) throws JAXBException, IOException { }  `@RequestMapping`(value = ""/course/{courseIdParam}.kml"", method=RequestMethod.GET, headers=""Accept-Encoding=gzip"") `@ResponseBodypublic` void getCourseAsKmz(`@PathVariable` final String courseIdParam, final ModelMap modelMap, final OutputStream outputStream, final HttpServletResponse response, final HttpServletRequest request) throws JAXBException, IOException { }  Expected behaviour: getCourseAsKmz should be called. getCourseAsKml should not be called  Actual behaviour: getCourseAsKml is called  I believe the problem is in ServletAnnotationMappingUtils.checkHeaders      else if (!value.equals(request.getHeader(key))) {     return negated;     }  I think the ! needs to be removed from the condition   ---  **Affects:** 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/173f307ec9e48a09fd6dea28e3184d67a481e0da, https://github.com/spring-projects/spring-framework/commit/e695a2168887fe9d545725e7d2ec8b3e750742bb","closed","type: bug,","spring-projects-issues","2011-11-20T17:58:48Z","2012-06-19T03:39:40Z"
"","13153","UriUtils does double encode [SPR-8507]","**[Eduard Dudar](https://jira.spring.io/secure/ViewProfile.jspa?name=edudar)** opened **[SPR-8507](https://jira.spring.io/browse/SPR-8507?redirect=false)** and commented  I'm seeing quite strange behavior and I'm not sure why UriUtils works this way.  In detail I'm having URL that I want to ask using RestTemplate. Url is the following [CODE]API=http://server/path?key=...&url={url}[/CODE] where {url} is variable that is passed from the outside. Url that is passed in can be any valid URL with query string or not. Then I call [CODE]this.rest.getForObject(API, String.class, url)[/CODE] that call API mentioned above and passed incoming URL into.  And here is what I see. When I pass unencoded url into REST call UriUtils does nothing so I get more parameters then I need because own url parameters are just appended to API parameters. When I do manual encoding first I get double encoded parameter that is also invalid.  I found the code and it definitely works that way, but I'm not sure why already encoded parameters are forced to be double encoded.  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?111473-UriUtils-does-double-encode  **Issue Links:** - #13050 UriTemplate doesn't encode query parameters","closed","status: declined,","spring-projects-issues","2011-07-03T02:23:18Z","2019-01-12T16:25:23Z"
"","13558","UriTemplate doesn't allow for ampersands as values for request parameters [SPR-8918]","**[Ed Delacruz](https://jira.spring.io/secure/ViewProfile.jspa?name=edelacruz)** opened **[SPR-8918](https://jira.spring.io/browse/SPR-8918?redirect=false)** and commented  UriTemplate doesn't allow for ampersands as values for request parameters.  When you perform UriTemplate.expand(Map), it will break off the second part of the value as a new parameter.  See attached test.   ---  **Affects:** 3.0.3  **Attachments:** - [UriTemplateTest.java](https://jira.spring.io/secure/attachment/19213/UriTemplateTest.java) (_847 bytes_)","closed","type: bug,","spring-projects-issues","2011-12-13T09:30:25Z","2012-06-19T03:39:09Z"
"","13635","Spring @Async should have some way of specifying UncaughtExceptionHandler [SPR-8995]","**[Dwayne D'Souza](https://jira.spring.io/secure/ViewProfile.jspa?name=deelo55)** opened **[SPR-8995](https://jira.spring.io/browse/SPR-8995?redirect=false)** and commented  Currently an exceptions in Async proxied methods fail silently and do not pass to the default UncaughtExceptionHandler. This means you need to wrap every async method with AspectJ in order to achieve unexpected error handling in these methods.  e.g.  `@Override` `@Async` public void asyncExceptionTest() { int i=1/0; }  This will fail silently.  ---  **Issue Links:** - #16706 UncaughtExceptionHandler is not configured with AspectJ - #16397 Asynchronous method execution is always invoked before bean validation - #13246 Use ErrorHandler in TaskExecutors  19 votes, 20 watchers","closed","has: votes-jira,","spring-projects-issues","2012-01-05T02:39:06Z","2019-02-22T08:36:32Z"
"","13471","SimpleJdbcCall.setAccessCallParameterMetaData(false) has no affect - metadata is still queried [SPR-8829]","**[Dustin Schultz](https://jira.spring.io/secure/ViewProfile.jspa?name=dustin.schultz)** opened **[SPR-8829](https://jira.spring.io/browse/SPR-8829?redirect=false)** and commented  final SimpleJdbcCall call = new SimpleJdbcCall(jdbcTemplate); ... call.setAccessCallParameterMetaData(false) ...  In AbstractJdbcCall:  public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) { this.callMetaDataContext.setAccessCallParameterMetaData(accessCallParameterMetaData); }  Instance variable is always the same CallMetaDataContext - no setter /** context used to retrieve and manage database metadata */ private CallMetaDataContext callMetaDataContext = new CallMetaDataContext();  In CallMetaDataContext, the parameter is never consulted in reconcileParameters(parameters); it just starts calling for metadata:  private List\ reconcileParameters(List\ parameters) { final List\ declaredReturnParameters = new ArrayList\(); final Map declaredParameters = new LinkedHashMap(); boolean returnDeclared = false; List\ outParameterNames = new ArrayList\(); List\ metaDataParameterNames = new ArrayList\();      // get the names of the meta data parameters     for (CallParameterMetaData meta : metaDataProvider.getCallParameterMetaData()) {     	if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {     		metaDataParameterNames.add(meta.getParameterName().toLowerCase());     	}     }  etc    ---  **Affects:** 2.5.6, 3.0.6","closed","in: core,","spring-projects-issues","2011-11-08T14:31:32Z","2019-01-12T16:37:13Z"
"","13188","ExposeInvocationInterceptor should always be highest precedence [SPR-8544]","**[Dustin Schultz](https://jira.spring.io/secure/ViewProfile.jspa?name=dustin.schultz)** opened **[SPR-8544](https://jira.spring.io/browse/SPR-8544?redirect=false)** and commented  If a user defined aspect sets `@Ordered`(Ordered.HIGHEST_PRECEDENCE), it will have a higher precedence than ExposeInvocationInterceptor and thus when said MethodInvocation tries to retrieve a method invocation, it will always be null and throw  ""No MethodInvocation found: Check that an AOP invocation is in progress and that the ExposeInvocationInterceptor is in the interceptor chain.""  ExposeInvocationInterceptor is currently HIGHEST_PRECEDENCE + 1 which is less priority than HIGHEST_PRECEDENCE since priority is represented by lowest value. In this case, -1 wouldn't work since HIGHEST_PRECEDENCE = Integer.MIN_VALUE.  Not sure what the solution is ... perhaps a better error message as to ExposeInvocationInterceptor being first in the chain or rewriting a user's defined HIGHEST_PRECEDENCE to be higher than ExposeInvocationInterceptor's   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-07-19T13:31:11Z","2012-06-19T03:39:47Z"
"","13544","Ignore properties in BeanUtils.getPropertyDescriptor() [SPR-8904]","**[Dridi Boukelmoune](https://jira.spring.io/secure/ViewProfile.jspa?name=dridi)** opened **[SPR-8904](https://jira.spring.io/browse/SPR-8904?redirect=false)** and commented  It would be nice to ignore properties when invoking BeanUtils.getPropertyDescriptor(). Typical property I've always needed to ignore so far : class (and sometimes others of course)  It should be transparent with a vararg :  ```java public static PropertyDescriptor[] getPropertyDescriptors(Class clazz, String... ignoreProperties) throws BeansException;  BeanUtils.getPropertyDescriptors(getClass()); BeanUtils.getPropertyDescriptors(getClass(), ""class"", ""other""); ```  Dridi   --- No further details from [SPR-8904](https://jira.spring.io/browse/SPR-8904?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-12-09T00:29:31Z","2011-12-09T02:18:32Z"
"","13664","Section 3.4. 6 example should have ApplicationContext [SPR-9025]","**[Douglas Ertz](https://jira.spring.io/secure/ViewProfile.jspa?name=dougertz)** opened **[SPR-9025](https://jira.spring.io/browse/SPR-9025?redirect=false)** and commented  The example in this section of the documentation has the following line import org.springframework.context.Applicationcontext;  It should be import org.springframework.context.ApplicationContext;    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c931eaa4364e498d9a6cf57b9cc3de986392517a","closed","in: core,","spring-projects-issues","2012-01-14T13:12:09Z","2012-06-19T03:39:45Z"
"","13086","Add 'mappingLocations' to LocalContainerEntityManagerFactoryBean to scan any JPA mapping files (ORM.xml) in the classpath. [SPR-8440]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-8440](https://jira.spring.io/browse/SPR-8440?redirect=false)** and commented  Add 'mappingLocations' to LocalContainerEntityManagerFactoryBean for reading/scanning the JPA mapping files (ORM.xml) in the classpath. This will allow developers to write JPA queries and custom mappings in more modular approach. Developers can easily put the ORM.xml in the same package with the Entity class it relates to.  ---  **Affects:** 3.1 M2  **Issue Links:** - #15859 orm.xml should be recognized by default if using JPA","closed","type: enhancement,","spring-projects-issues","2011-06-11T21:31:10Z","2019-01-11T13:36:48Z"
"","13031","jboss is calling portlet.xml before web.xml [SPR-8384]","**[Dominik](https://jira.spring.io/secure/ViewProfile.jspa?name=problematic)** opened **[SPR-8384](https://jira.spring.io/browse/SPR-8384?redirect=false)** and commented  Hi, I have following problem. It  is look like jboss is first calling portlet.xml and then web.xml (I checked on websphere and this problem doeas not occure).  The error look like this:  2011-05-31 10:42:13,240 ERROR [org.springframework.web.portlet.DispatcherPortlet] (main) Context initialization failed org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'portletModeHandlerMapping' defined in PortletContext resource [/WEB-INF/ING-COP-Payment-List-portlet.xml]: Could not resolve parent bean definition 'abstractPortletHandlerMapping'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'abstractPortletHandlerMapping' is defined at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:1055)  in web.xml i have:  \ 		\contextConfigLocation\ 		\/WEB-INF/classes/spring/appContext*.xml\ \ 	\  In appContext-portlet.xml  \ \ \ \ \ \ \ \  In portlet.xml with is in root directory (as well as web.xml)  \ 		\ING COP PaymentRequest List\ 		\ING-COP-PaymentRequest-List\ 		\blabla\ 		\org.springframework.web.portlet.DispatcherPortlet\ 		\ 			\text/html\ 			\VIEW\ 		\ I am sure that portlet.xml is callig before web.xml because i made an error in web.xml (for testing reason) and in log i see that error after jboss finish with portlet.xml   --- No further details from [SPR-8384](https://jira.spring.io/browse/SPR-8384?redirect=false)","closed","status: invalid,","spring-projects-issues","2011-05-31T02:36:40Z","2019-01-12T05:30:15Z"
"","12978","problem with base-package [SPR-8329]","**[Dominik](https://jira.spring.io/secure/ViewProfile.jspa?name=problematic)** opened **[SPR-8329](https://jira.spring.io/browse/SPR-8329?redirect=false)** and commented  in appContext.xml in cop.war WEB-INF\classes\spring I have declaration of base-package:                       When I am trying to deploy this on JBOSS i am getting following errors:  2011-05-11 09:59:16,185 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[localhost].[/cop-gui]] (main) Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanDefinitionStoreException: I/O failure during classpath scanning; nested exception is java.io.FileNotFoundException: D:\MIGRACJA_COP_JBOSS\fix\jboss-epp-5.1\jboss-as\server\default\deploy\cop-gui.war\WEB-INF\classes\pl\ing\claim\view (System nie może odnaleźć określonej ścieżki) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:227) at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:200) at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:84) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:72) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1320) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1310) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:475) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:372) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:316) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:284) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:93) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:126) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:419) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:349) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:254) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:198) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3910) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4389) at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeployInternal(TomcatDeployment.java:321) at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeploy(TomcatDeployment.java:145) at org.jboss.web.deployers.AbstractWarDeployment.start(AbstractWarDeployment.java:461) at org.jboss.web.deployers.WebModule.startModule(WebModule.java:118) at org.jboss.web.deployers.WebModule.start(WebModule.java:97) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:157) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:96) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:668) at org.jboss.system.microcontainer.ServiceProxy.invoke(ServiceProxy.java:206) at $Proxy38.start(Unknown Source) at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:42) at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:37) at org.jboss.dependency.plugins.action.SimpleControllerContextAction.simpleInstallAction(SimpleControllerContextAction.java:62) at org.jboss.dependency.plugins.action.AccessControllerContextAction.install(AccessControllerContextAction.java:71) at org.jboss.dependency.plugins.AbstractControllerContextActions.install(AbstractControllerContextActions.java:51) at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) at org.jboss.system.microcontainer.ServiceControllerContext.install(ServiceControllerContext.java:297) at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:826) at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:556) at org.jboss.system.ServiceController.doChange(ServiceController.java:688) at org.jboss.system.ServiceController.start(ServiceController.java:460) at org.jboss.system.deployers.ServiceDeployer.start(ServiceDeployer.java:163) at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:99) at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:46) at org.jboss.deployers.spi.deployer.helpers.AbstractSimpleRealDeployer.internalDeploy(AbstractSimpleRealDeployer.java:62) at org.jboss.deployers.spi.deployer.helpers.AbstractRealDeployer.deploy(AbstractRealDeployer.java:55) at org.jboss.deployers.plugins.deployers.DeployerWrapper.deploy(DeployerWrapper.java:179) at org.jboss.deployers.plugins.deployers.DeployersImpl.doDeploy(DeployersImpl.java:1454) at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1172) at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1193) at org.jboss.deployers.plugins.deployers.DeployersImpl.install(DeployersImpl.java:1113) at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:826) at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:556) at org.jboss.deployers.plugins.deployers.DeployersImpl.process(DeployersImpl.java:789) at org.jboss.deployers.plugins.main.MainDeployerImpl.process(MainDeployerImpl.java:699) at org.jboss.system.server.profileservice.repository.MainDeployerAdapter.process(MainDeployerAdapter.java:117) at org.jboss.system.server.profileservice.repository.ProfileDeployAction.install(ProfileDeployAction.java:70) at org.jboss.system.server.profileservice.repository.AbstractProfileAction.install(AbstractProfileAction.java:53) at org.jboss.system.server.profileservice.repository.AbstractProfileService.install(AbstractProfileService.java:403) at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:778) at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:543) at org.jboss.system.server.profileservice.repository.AbstractProfileService.registerProfile(AbstractProfileService.java:308) at org.jboss.system.server.profileservice.ProfileServiceBootstrap.start(ProfileServiceBootstrap.java:256) at org.jboss.bootstrap.AbstractServerImpl.start(AbstractServerImpl.java:461) at org.jboss.Main.boot(Main.java:221) at org.jboss.Main$1.run(Main.java:556) at java.lang.Thread.run(Thread.java:662) Caused by: java.io.FileNotFoundException: D:\MIGRACJA_COP_JBOSS\fix\jboss-epp-5.1\jboss-as\server\default\deploy\cop-gui.war\WEB-INF\classes\pl\ing\claim\view (System nie może odnaleźć określonej ścieżki) at java.util.zip.ZipFile.open(Native Method) at java.util.zip.ZipFile.\(ZipFile.java:127) at java.util.jar.JarFile.\(JarFile.java:135) at java.util.jar.JarFile.\(JarFile.java:72) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(PathMatchingResourcePatternResolver.java:450) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:339) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:263) at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:1023) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:182) ... 91 more 2011-05-11 09:59:16,451 ERROR [org.apache.catalina.core.StandardContext] (main) Error lis   --- No further details from [SPR-8329](https://jira.spring.io/browse/SPR-8329?redirect=false)","closed","status: invalid,","spring-projects-issues","2011-05-11T03:02:44Z","2019-01-12T05:30:22Z"
"","13495","@ComponentScan don't work for @Repository annotated DAOs using SessionFactory [SPR-8853]","**[Dominik Hirt](https://jira.spring.io/secure/ViewProfile.jspa?name=dominik42)** opened **[SPR-8853](https://jira.spring.io/browse/SPR-8853?redirect=false)** and commented  If using the JavaConfig based app configuration with `@Configuration` and include the new `@ComponentScan` annotation for all of my packages, the creation of the application context failed for the DAO's annotated with `@Repository` which uses Hibernate/SessionFactory with IllegalArgumentException: 'sessionFactory' or 'hibernateTemplate' is required.  A workaround for this error exists: 1) do not use `@ComponentScan` in the configuration class annotated with `@Configuration` 2) instead put the component-scan declarations into a single xml file and import this file by using `@ImportResource` in the app configuration class.  I've created a reproduction project at Github (https://github.com/SpringSource/spring-framework-issues   ---  **Affects:** 3.1 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?117204-Strange-behavior-for-ComponentScan-SessionFactory-in-3.1.0RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/25b55a1c4932ed84fea02423c4fabc779b3df1af, https://github.com/spring-projects/spring-framework-issues/commit/dcfeff2be25e2990f83c9637f093c776dd55ca93","closed","in: core,","spring-projects-issues","2011-11-17T02:07:19Z","2019-01-12T16:37:11Z"
"","12879","GlassFishWorkManagerTaskExecutor fails to lookup ThreadPool [SPR-8230]","**[Dominik Bartholdi](https://jira.spring.io/secure/ViewProfile.jspa?name=domi)** opened **[SPR-8230](https://jira.spring.io/browse/SPR-8230?redirect=false)** and commented  The issues is described at is about spring 2.5.6, but the issue still exists with 3.0.5 http://forum.springsource.org/archive/index.php/t-85272.html  because of an API change in Glassfish, the lookup fails with:  Could not initialize GlassFishWorkManagerTaskExecutor because GlassFish API is not available: java.lang.NoSuchMethodException: com.sun.enterprise.connectors.work.WorkManagerFact ory.getWorkManager(java.lang.String)   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/archive/index.php/t-85272.html  3 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2011-04-07T06:06:50Z","2019-01-12T16:25:47Z"
"","13251","3.1 M2 Download Javadoc incomplete [SPR-8608]","**[Dominic John North](https://jira.spring.io/secure/ViewProfile.jspa?name=dnorth)** opened **[SPR-8608](https://jira.spring.io/browse/SPR-8608?redirect=false)** and commented  Download javadoc is incomplete, missing most of the top-level html and css files.   ---  **Affects:** 3.1 M2  **Attachments:** - [javadoc-api.zip](https://jira.spring.io/secure/attachment/18553/javadoc-api.zip) (_13.82 MB_) - [JavadocFolders.tiff](https://jira.spring.io/secure/attachment/18551/JavadocFolders.tiff) (_115.93 kB_)","closed","in: core,","spring-projects-issues","2011-08-11T07:40:18Z","2019-01-12T16:37:32Z"
"","13497","EhCacheFactoryBean does not support setting setStatisticsEnabled field. [SPR-8855]","**[dogukan sonmez](https://jira.spring.io/secure/ViewProfile.jspa?name=dogukansonmez)** opened **[SPR-8855](https://jira.spring.io/browse/SPR-8855?redirect=false)** and commented  Based on following configuration. It is not possible to enable ehcache statistics on xml file. There is no such a property to enable ehcache statistics.  \ \ \ \ \ \ \   ---  **Affects:** 3.1 RC1","closed","type: enhancement,","spring-projects-issues","2011-11-17T12:29:10Z","2012-06-19T03:39:20Z"
"","13692","JtaTransactionManager does not translate exceptions like JpaTransactionManager [SPR-9053]","**[dodo bird](https://jira.spring.io/secure/ViewProfile.jspa?name=crazytrain411)** opened **[SPR-9053](https://jira.spring.io/browse/SPR-9053?redirect=false)** and commented  The JpaTransactionManager seems to have a nice piece of functionality that translates an exception thrown by Hibernate.  For example it will call translateExceptionIfPossible in doCommit and we will get a specific exception somewhere in the org.springframework.dao.DataAccessException hierarchy. For example org.hibernate.StaleStateException will get wrapped into a JpaOptimisticLockingFailureException.  The JtaTransactionManger has no such call and seems to bundle all of my Hibernate exceptions into UnexpectedRollbackException exception.  Not sure if this is a bug but it seems inconsistent and also we lose all of the specific exception type information.    ---  **Affects:** 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2012-01-24T08:51:48Z","2019-01-12T02:35:58Z"
"","13434","TransactionInterceptor does not translate Hibernate Exception [SPR-8792]","**[dodo bird](https://jira.spring.io/secure/ViewProfile.jspa?name=crazytrain411)** opened **[SPR-8792](https://jira.spring.io/browse/SPR-8792?redirect=false)** and commented  Here is code from org.springframework.transaction.interceptor.TransactionInterceptor  When Hibernate exception org.hibernate.StaleObjectStateException is thrown down the stack from invocation.proceed(); it is not translated at all. The code that does the translation simply does not come in anywhere.  If the exception is thrown from commitTransactionAfterReturning, then it is translated properly into JpaOptimisticLockingFailureException.  public Object invoke(final MethodInvocation invocation) throws Throwable { // Work out the target class: may be \null\. // The TransactionAttributeSource should be passed the target class // as well as the method, which may be from an interface. Class targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);  // If the transaction attribute is null, the method is non-transactional. final TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(invocation.getMethod(), targetClass); final PlatformTransactionManager tm = determineTransactionManager(txAttr); final String joinpointIdentification = methodIdentification(invocation.getMethod());  if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) { // Standard transaction demarcation with getTransaction and commit/rollback calls. TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification); Object retVal = null; try { // This is an around advice: Invoke the next interceptor in the chain. // This will normally result in a target object being invoked. retVal = invocation.proceed(); } catch (Throwable ex) { // target invocation exception completeTransactionAfterThrowing(txInfo, ex); throw ex; } finally { cleanupTransactionInfo(txInfo); } commitTransactionAfterReturning(txInfo); return retVal; }  Here is the full stack trace  JoinedSubclassEntityPersister(AbstractEntityPersister).check(int, Serializable, int, Expectation, PreparedStatement) line: 1934 JoinedSubclassEntityPersister(AbstractEntityPersister).update(Serializable, Object[], Object[], Object, boolean[], int, Object, Object, String, SessionImplementor) line: 2578 JoinedSubclassEntityPersister(AbstractEntityPersister).updateOrInsert(Serializable, Object[], Object[], Object, boolean[], int, Object, Object, String, SessionImplementor) line: 2478 JoinedSubclassEntityPersister(AbstractEntityPersister).update(Serializable, Object[], int[], boolean, Object[], Object, Object, Object, SessionImplementor) line: 2805 EntityUpdateAction.execute() line: 114 ActionQueue.execute(Executable) line: 268 ActionQueue.executeActions(List) line: 260 ActionQueue.executeActions() line: 180 EJB3AutoFlushEventListener(AbstractFlushingEventListener).performExecutions(EventSource) line: 321 EJB3AutoFlushEventListener(DefaultAutoFlushEventListener).onAutoFlush(AutoFlushEvent) line: 64 SessionImpl.autoFlushIfRequired(Set) line: 1175 SessionImpl.list(CriteriaImpl) line: 1699 CriteriaImpl.list() line: 347 GeneratedMethodAccessor158.invoke(Object, Object[]) line: not available DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25 Method.invoke(Object, Object...) line: 597 AopUtils.invokeJoinpointUsingReflection(Object, Method, Object[]) line: 309 ReflectiveMethodInvocation.invokeJoinpoint() line: 183 ReflectiveMethodInvocation.proceed() line: 150 TransactionInterceptor.invoke(MethodInvocation) line: 110   ---  **Affects:** 3.0.2  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-10-20T07:20:18Z","2019-01-12T02:37:06Z"
"","13145","Non-fatal exception thrown/logged by TypeConverterDelegate [SPR-8499]","**[Dmitry Sukhovilin](https://jira.spring.io/secure/ViewProfile.jspa?name=dmitry.sukhovilin)** opened **[SPR-8499](https://jira.spring.io/browse/SPR-8499?redirect=false)** and commented  I faced with an exception (java.lang.InstantiationException) when I tried to inject a dependency into a bean using an interface. The interface and the bean are implementing Set\. The example of this bug is following:  Interface:  public interface MyInterface extends Set\ { }  A class to inject:  public class MyClass extends AbstractSet\ implements MyInterface { private Set\ set = new HashSet\(); public MyClass() { set.add(""one""); set.add(""two""); set.add(""three""); } `@Override` public Iterator\ iterator() { return set.iterator(); } `@Override` public int size() { return set.size(); }  }  A class in which to inject.  public class MyReciever { public MyInterface getInterface() { return null; } public void setInterface(MyInterface parent) { System.out.println(""we got the interface!""); } public void callMethod() { System.out.println(""OK""); } }  config:  \  \           	                 \  caller:  package com.test;  import org.springframework.context.support.FileSystemXmlApplicationContext;  public class Bootstrap { public static void main(String[] args) { FileSystemXmlApplicationContext context = new FileSystemXmlApplicationContext(""context.xml""); MyReciever bean = context.getBean(MyReciever.class); bean.callMethod(); } }   ---  **Affects:** 3.0.5  **Attachments:** - [test.tar.bz2](https://jira.spring.io/secure/attachment/18401/test.tar.bz2) (_1.80 kB_)  3 votes, 3 watchers","closed","in: core,","spring-projects-issues","2011-06-30T01:11:41Z","2019-01-11T13:08:53Z"
"","13769","Introduce FactoryBean to create mock beans with EasyMock [SPR-9130]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-9130](https://jira.spring.io/browse/SPR-9130?redirect=false)** and commented  #### Problem Area  I would like to have a `myService` definition in both production and test application contexts so that the service is further autowired into other services. The test application context should create a mock version of the bean, e.g. by means of `IMocksControl.createMock()`.  #### Current Approach  The test application context defines:  ```xml     	   ```  The drawback of this approach is that the given service can no longer be autowired with `@Autowired MyService myService`, but it can be injected with `@Resource`.  #### Analysis  The reason that the mock cannot be autowired by type is that the parametrized return type of the method configured via `factory-method` is not currently honored by Spring in all cases (i.e., depending on the order in which beans are defined in the context). In other words, the returned bean is not a candidate for autowiring by type for the type `T` (i.e., `org.company.api.MyService` in this example).  For a succinct discussion of this behavior, see the _Explanation_ and _Alternative solution_ sections of the _[Spring Integration Tests, Part I, Creating Mock Objects](http://www.jayway.com/2011/11/30/spring-integration-tests-part-i-creating-mock-objects/)_ blog post.  Note that this is a general limitation of using `factory-method` in Spring; this is not specific to testing or mocks.  Furthermore, the same naturally applies to other mocking frameworks such as Mockito.  #### Proposal  The solution is to use a specific `FactoryBean`:  ```xml  ```  #### Related Resources  - [Spring Integration Tests, Part I, Creating Mock Objects](http://www.jayway.com/2011/11/30/spring-integration-tests-part-i-creating-mock-objects/) (blog) - [EasyMock Objects Injection using Spring and Annotations](http://www.rowellbelen.com/content/easymock-objects-injection-using-spring-and-annotations) (blog) - [Injecting Mockito mocks into a Spring bean](http://stackoverflow.com/questions/2457239/injecting-mockito-mocks-into-a-spring-bean) (discussion at Stack Overflow) - [Mocking Spring beans](http://stackoverflow.com/questions/6976421/mocking-spring-beans) (discussion at Stack Overflow) - [Springockito](https://bitbucket.org/kubek2k/springockito/) (open source project) - [spring-mvc-test with a sprinkle of mockito](http://stevelibonati.wordpress.com/2012/02/05/spring-mvc-test-with-a-sprinkle-of-mockito/) (blog)  ---  **Affects:** 3.1 GA  **Attachments:** - [EasyMockBeanFactory.java](https://jira.spring.io/secure/attachment/19422/EasyMockBeanFactory.java) (_5.21 kB_)  **Issue Links:** - #13412 `@Autowired` dependencies against bean definitions with type-inspecific factory-methods may fail - #14127 Infer return type of parameterized static factory methods - #15044 Return type prediction for generic factory method fails if type conversion of method arguments is necessary (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2012-02-17T07:37:27Z","2019-01-13T07:06:16Z"
"","13764","Provide bean factory to simplify the customization of Jackson ObjectMapper [SPR-9125]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-9125](https://jira.spring.io/browse/SPR-9125?redirect=false)** and commented  Bean factory should allow to define: * Configuration options to enable/disable in ObjectMapper * AnnotationIntrospector to be used for serializer/deserializer  Sample class is attached.   ---  **Affects:** 3.1 GA  **Attachments:** - [JacksonObjectMapperBeanFactory.java](https://jira.spring.io/secure/attachment/19409/JacksonObjectMapperBeanFactory.java) (_7.11 kB_)  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-15T07:28:36Z","2019-01-11T22:13:55Z"
"","13556","org.springframework.jmx.export.metadata.AttributesJmxAttributeSource has been removed but is still mentioned in the documentation [SPR-8916]","**[Dmitrii Afanasyev](https://jira.spring.io/secure/ViewProfile.jspa?name=dmitrii_afanasyev)** opened **[SPR-8916](https://jira.spring.io/browse/SPR-8916?redirect=false)** and commented  org.springframework.jmx.export.metadata.AttributesJmxAttributeSource has been removed but is still mentioned in ""22.4.2 Using the MetadataNamingStrategy""  JMX documentation: http://static.springsource.org/spring/docs/3.0.5.RELEASE/reference/jmx.html   ---  **Affects:** 3.0.5  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","in: core,","spring-projects-issues","2011-12-13T06:32:21Z","2013-01-18T04:41:43Z"
"","13571","Regression - Introspection with BeanUtils started failing for java.math.BigDecimal [SPR-8931]","**[Dennis Kieselhorst](https://jira.spring.io/secure/ViewProfile.jspa?name=deki)** opened **[SPR-8931](https://jira.spring.io/browse/SPR-8931?redirect=false)** and commented  After updating from 3.0.6 to 3.1 the bean creation for java.math.BigDecimal fails with:  Caused by: org.springframework.beans.FatalBeanException: Failed to obtain BeanInfo for class [java.math.BigDecimal]; nested exception is java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods: scale at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:262) at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:149) at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:324) at org.springframework.beans.BeanWrapperImpl.getPropertyDescriptors(BeanWrapperImpl.java:331) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1242) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1101) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) ... 149 more Caused by: java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods: scale at java.beans.IndexedPropertyDescriptor.findIndexedPropertyType(IndexedPropertyDescriptor.java:341) at java.beans.IndexedPropertyDescriptor.setIndexedWriteMethod(IndexedPropertyDescriptor.java:248) at org.springframework.beans.ExtendedBeanInfo.addOrUpdatePropertyDescriptor(ExtendedBeanInfo.java:261) at org.springframework.beans.ExtendedBeanInfo.\(ExtendedBeanInfo.java:142) at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:224) ... 155 more  ---  **Affects:** 3.1 GA  **Issue Links:** - #13577 java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods:  - #14663 Overhaul non-void JavaBean write method support - #13137 Regression - Introspection with BeanUtils started failing for java.awt.Component derived classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ee12563b038797a137ac67b13e5dd6d3d918a7f, https://github.com/spring-projects/spring-framework/commit/4a8be690998f43a9253305e09f96ad83058ef540","closed","in: core,","spring-projects-issues","2011-12-15T04:28:34Z","2019-01-11T14:26:51Z"
"","13456","Unnecessarily conservative locking in registerDependentBean is a bottleneck [SPR-8814]","**[Dennis Homann](https://jira.spring.io/secure/ViewProfile.jspa?name=dhomann)** opened **[SPR-8814](https://jira.spring.io/browse/SPR-8814?redirect=false)** and commented  In a highly concurrent application with a high rate of prototype bean instantiations, injection of (singleton) bean references into the prototype beans becomes a bottleneck due to unnecessary synchonization in `DefaultSingletonBeanRegistry#registerDependentBean`.  `registerDependentBean` updates the two ConcurrentHashMaps `dependentBeanMap` and `dependenciesForBeanMap`. For both maps, the method ensures that it maps the singleton bean name to a `LinkedHashSet` (will be added, if not present) and that this set contains the dependent prototype bean name. A `synchronized` block guards both map manipulations, leading to contention and a severe performance bottleneck under high load.  Since both maps are already `ConcurrentHashMaps`, the map manipulation may be refactored to be non-blocking. The following suggestion for `dependentBeanMap` applies in the same way to `dependenciesForBeanMap`. It may also be applied to some other `ConcurrentHashMap` manipulations in `DefaultSingletonBeanRegistry`, however those are not as performance-critical.  ``` // change type of field from Map to ConcurrentMap private final ConcurrentMap dependentBeanMap = new ConcurrentHashMap();  public void registerDependentBean(String beanName, String dependentBeanName) {   String canonicalName = canonicalName(beanName);   getMappedSet(dependentBeanMap, canonicalName).add(dependentBeanName);   getMappedSet(dependenciesForBeanMap, dependentBeanName).add(canonicalName); }  private Set getMappedSet(ConcurrentMap map, String name) {   // a simple putIfAbsent would be enough to be functionally correct,   // but calling get first will avoid creation of the set in the common case that a mapping already exists    Set set = map.get(name);   return set != null ? set : map.putIfAbsent(name, Collections.synchronizedSet(new LinkedHashSet(8))); } ```  After the change the set will be synchronized, but contention on the contained sets will be much lower than on a global map lock.  ---  **Affects:** 3.0.5  **Issue Links:** - #12621 Improve failure mode when depends-on cycles exist - #16722 Remove synchronization around filteredPropertyDescriptorsCache in case of non-existing entry  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2011-11-02T13:03:37Z","2019-01-11T14:40:46Z"
"","13805","Can't access messageResource from domain class when as @ModelAttribute [SPR-9167]","**[deng hui](https://jira.spring.io/secure/ViewProfile.jspa?name=truetime)** opened **[SPR-9167](https://jira.spring.io/browse/SPR-9167?redirect=false)** and commented  I have a domain class like:`@Entitypublic` class User implements Serializable, MessageSourceAware {  private static final long serialVersionUID = 1L; `@Transient` MessageSource settings;  private String fullName; ...  public User() {super(); }  public void setMessageSource(MessageSource messageSource) { settings=messageSource; } ...public void setFullName(String name) { settings.getMessage(""matchPattern.firstName"", null, this.locale) ... }  and in Controller:public String processRegisterSubmit(`@ModelAttribute` User user, BindingResult result, SessionStatus status, Model model) ...  when the controller is validating the summited form data, User.setFullname is always trigged at very first, then only can get a null point for **settings**, before that setMessageSource() and constructor User() all haven't been invoked.  btw, these bean all areconfigured in applicationContext.xml:\ \ \ \messages\ \settings\ \exceptions\ \ \ \          --- No further details from [SPR-9167](https://jira.spring.io/browse/SPR-9167?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-02-24T07:09:33Z","2019-01-12T05:29:02Z"
"","13774","failure of JSON serialization in  MVC  [SPR-9135]","**[deng hui](https://jira.spring.io/secure/ViewProfile.jspa?name=truetime)** opened **[SPR-9135](https://jira.spring.io/browse/SPR-9135?redirect=false)** and commented  after execution of the controller which should response as JSON:  ``` @Controller @RequestMapping(""/organization"") public class OrganizationController {  	@Autowired 	private OrganizationRepository organizationRepository;  	@RequestMapping(value=""/names"", method=RequestMethod.GET) 	public @ResponseBody List getCompanyNameList(@RequestParam String term) { 		List companyNames=organizationRepository.findCompanyName(""%""+term+""%""); 		 		return companyNames; 	}  } ```  I get a exception:  ``` org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: No serializer found for class org.springframework.data.mongodb.crossstore.MongoChangeSetPersister and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) )  (through reference chain: java.util.ArrayList[0]->com.azelea.OrganizationMgmt.entities.Organization[""ajc$interField$org_springframework_data_mongodb_crossstore_MongoDocumentBacking$org_springframework_data_mongodb_crossstore_DocumentBacked$itdChangeSetPersister""]);  nested exception is org.codehaus.jackson.map.JsonMappingException: No serializer found for class org.springframework.data.mongodb.crossstore.MongoChangeSetPersister and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) )  (through reference chain: java.util.ArrayList[0]->com.azelea.OrganizationMgmt.entities.Organization[""ajc$interField$org_springframework_data_mongodb_crossstore_MongoDocumentBacking$org_springframework_data_mongodb_crossstore_DocumentBacked$itdChangeSetPersister""]) ```  I configured  in **-servlet.xml and jackson package also in classpath(see pom.xml below:)  ```    org.codehaus.jackson   jackson-jaxrs   1.9.4   runtime     org.codehaus.jackson   jackson-mrbean   1.9.4   compile     org.codehaus.jackson   jackson-smile   1.9.4   compile     org.codehaus.jackson   jackson-xc   1.9.4   compile  ```  I suppose Spring MongoDB also have a mechanism to serialize POJO as JSON to manipulate MongoDB, then conflict each other by default? is there a way to settle this conflict by configuration?   --- No further details from [SPR-9135](https://jira.spring.io/browse/SPR-9135?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-02-18T07:29:15Z","2019-01-12T05:29:04Z"
"","13665","Can you support  initialize a database in domain class [SPR-9026]","**[deng hui](https://jira.spring.io/secure/ViewProfile.jspa?name=truetime)** opened **[SPR-9026](https://jira.spring.io/browse/SPR-9026?redirect=false)** and commented  Initializing a database is supported by:       but can we support this initialization in domain class? pseudo-code looks like:  `@Entity` class A { private Long id; private String a; private int b; private Date c;  `@Initialize` public void SomeFunction(){  persist(new A(1,""hello"", 10, ""2012-1-1"")); persist(new A(2,""hello"", 10, ""2012-1-1"")); persist(new A(3,""hello"", 10, ""2012-1-1"")); persist(new A(4,""hello"", 10, ""2012-1-1"")); ... }  }  By this way, it's convenient to synchronize and cross-check the changes from domain class to initialization data;   --- No further details from [SPR-9026](https://jira.spring.io/browse/SPR-9026?redirect=false)","closed","in: core,","spring-projects-issues","2012-01-15T00:39:27Z","2019-01-11T22:21:47Z"
"","13585","Tomcat logs ClassNotFoundException warnings for com.sun.tools.xjc.util.* on Spring 3.1 startup [SPR-8945]","**[deng hui](https://jira.spring.io/secure/ViewProfile.jspa?name=truetime)** opened **[SPR-8945](https://jira.spring.io/browse/SPR-8945?redirect=false)** and commented  I just replace spring framework core 3.0.6 with 3.1.0 (no anymore operation), I get lots of exceptions from com.sun.tools.xjc.util.* can you please help how to manage this situation?  十二月 19, 2011 9:47:20 下午 org.apache.catalina.startup.ContextConfig checkHandlesTypes 警告: Unable to load class [com.sun.tools.xjc.util.FilterIterator] to check against the `@HandlesTypes` annotation of one or more ServletContentInitializers. java.lang.ClassNotFoundException: com.sun.tools.xjc.util.FilterIterator at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2006) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1969) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1858) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1826) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1812) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1306) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.startup.Catalina.start(Catalina.java:621) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)  十二月 19, 2011 9:47:20 下午 org.apache.catalina.startup.ContextConfig checkHandlesTypes 警告: Unable to load class [com.sun.tools.xjc.util.NameUtil] to check against the `@HandlesTypes` annotation of one or more ServletContentInitializers. java.lang.ClassNotFoundException: com.sun.tools.xjc.util.NameUtil at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2006) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1969) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1858) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1826) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1812) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1306) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.startup.Catalina.start(Catalina.java:621) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)  十二月 19, 2011 9:47:20 下午 org.apache.catalina.startup.ContextConfig checkHandlesTypes 警告: Unable to load class [com.sun.tools.xjc.util.SubList$1] to check against the `@HandlesTypes` annotation of one or more ServletContentInitializers. java.lang.ClassNotFoundException: com.sun.tools.xjc.util.SubList$1 at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2006) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1969) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1858) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1826) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1812) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1306) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.startup.Catalina.start(Catalina.java:621) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)  十二月 19, 2011 9:47:20 下午 org.apache.catalina.startup.ContextConfig checkHandlesTypes 警告: Unable to load class [com.sun.tools.xjc.util.SubList] to check against the `@HandlesTypes` annotation of one or more ServletContentInitializers. java.lang.ClassNotFoundException: com.sun.tools.xjc.util.SubList at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2006) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1969) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1858) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1826) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1812) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1306) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.startup.Catalina.start(Catalina.java:621) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)  十二月 19, 2011 9:47:20 下午 org.apache.catalina.startup.ContextConfig checkHandlesTypes 警告: Unable to load class [com.sun.tools.xjc.writer.Writer$1] to check against the `@HandlesTypes` annotation of one or more ServletContentInitializers. java.lang.ClassNotFoundException: com.sun.tools.xjc.writer.Writer$1 at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2006) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1969) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1858) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1826) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1812) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1306) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.startup.Catalina.start(Catalina.java:621) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)  十二月 19, 2011 9:47:20 下午 org.apache.catalina.startup.ContextConfig checkHandlesTypes 警告: Unable to load class [com.sun.tools.xjc.writer.Writer$SmartWriter] to check against the `@HandlesTypes` annotation of one or more ServletContentInitializers. java.lang.ClassNotFoundException: com.sun.tools.xjc.writer.Writer$SmartWriter at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2006) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1969) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1858) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1826) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1812) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1306) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.startup.Catalina.start(Catalina.java:621) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)  十二月 19, 2011 9:47:20 下午 org.apache.catalina.startup.ContextConfig checkHandlesTypes 警告: Unable to load class [com.sun.tools.xjc.writer.Writer] to check against the `@HandlesTypes` annotation of one or more ServletContentInitializers. java.lang.ClassNotFoundException: com.sun.tools.xjc.writer.Writer at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1678) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2006) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1969) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1858) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1826) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1812) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1306) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.startup.Catalina.start(Catalina.java:621) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)    ---  **Affects:** 3.1 GA","closed","in: core,","spring-projects-issues","2011-12-19T05:59:31Z","2019-01-12T05:29:26Z"
"","13551","HTML5 validation support in Spring MVC [SPR-8911]","**[deng hui](https://jira.spring.io/secure/ViewProfile.jspa?name=truetime)** opened **[SPR-8911](https://jira.spring.io/browse/SPR-8911?redirect=false)** and commented  Since HTML5 support full validation capability, and with Hibernate Bean Validation Spring MVC framework can well support backend logic validation by annotation. is it possible Spring JSP tags automatically detect bean validation annotations and migrate the same rules to view during view resolving?   ---  4 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-12-12T06:56:32Z","2019-01-12T02:36:47Z"
"","13550","log4j filtering can't work [SPR-8910]","**[deng hui](https://jira.spring.io/secure/ViewProfile.jspa?name=truetime)** opened **[SPR-8910](https://jira.spring.io/browse/SPR-8910?redirect=false)** and commented  when log4j.properties configured as:  log4j.rootLogger=DEBUG,A1  1. 输出到控制台    log4j.appender.A1=org.apache.log4j.ConsoleAppender    #log4j.appender.A1.layout=org.apache.log4j.SimpleLayout    log4j.appender.A1.layout=org.apache.log4j.PatternLayout    log4j.appender.A1.layout.ConversionPattern=%d %p: %m >>> %l%n  when compiling the project outputs fine as follows:  2011-12-12 22:33:34,017 DEBUG: Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0' >>> org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:214) 2011-12-12 22:33:34,017 DEBUG: Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0' >>> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:430) 2011-12-12 22:33:34,018 DEBUG: [AspectJ] not weaving 'org.springframework.web.HttpRequestMethodNotSupportedException' >>> org.springframework.aop.aspectj.AspectJWeaverMessageHandler.handleMessage(AspectJWeaverMessageHandler.java:56) 2011-12-12 22:33:34,020 DEBUG: [AspectJ] not weaving 'org.springframework.web.HttpSessionRequiredException' >>> org.springframework.aop.aspectj.AspectJWeaverMessageHandler.handleMessage(AspectJWeaverMessageHandler.java:56) 2011-12-12 22:33:34,021 DEBUG: [AspectJ] not weaving 'org.springframework.web.servlet.mvc.multiaction.MethodNameResolver' >>> org.springframework.aop.aspectj.AspectJWeaverMessageHandler.handleMessage(AspectJWeaverMessageHandler.java:56) 2011-12-12 22:33:34,022 DEBUG: [AspectJ] not weaving 'org.springframework.web.bind.support.SessionAttributeStore' >>> org.springframework.aop.aspectj.AspectJWeaverMessageHandler.handleMessage(AspectJWeaverMessageHandler.java:56) 2011-12-12 22:33:34,024 DEBUG: [AspectJ] not weaving 'org.springframework.web.bind.annotation.support.HandlerMethodResolver' >>> org.springframework.aop.aspectj.AspectJWeaverMessageHandler.handleMessage(AspectJWeaverMessageHandler.java:56) 2011-12-12 22:33:34,026 DEBUG: [AspectJ] not weaving 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodResolver' >>> org.springframework.aop.aspectj.AspectJWeaverMessageHandler.handleMessage(AspectJWeaverMessageHandler.java:56) ...  I think I should filter Debug information from org.springframework.aop.aspectj.AspectJWeaverMessageHandler because there are too much outputs, so now the log4j.properties seems like:  log4j.rootLogger=DEBUG,A1 log4j.Logger.org.springframework.aop=WARN  1. 输出到控制台    log4j.appender.A1=org.apache.log4j.ConsoleAppender    log4j.appender.A1.layout=org.apache.log4j.PatternLayout    log4j.appender.A1.layout.ConversionPattern=%d %p: %m >>> %l%n  surprised! I tried different way it still doesn't work. I cant understand why, Is there possible a bug anywhere?  btw, here is the exported user libraries:                                                            ---  **Affects:** 3.0.6","closed","in: core,","spring-projects-issues","2011-12-12T06:49:36Z","2019-01-12T05:29:32Z"
"","13483","how to debug spring bean [SPR-8841]","**[deng hui](https://jira.spring.io/secure/ViewProfile.jspa?name=truetime)** opened **[SPR-8841](https://jira.spring.io/browse/SPR-8841?redirect=false)** and commented  Hi master, I tried spring IoC in my test code but when debugging line by line to the injected bean, they are still all null point. I can't find what wrong in my code. Since all beans are instantiated from applicationContext.xml and no error/warning risen when setup, so I can't trace where the problem happen. Is there a debug way to watch the instantiation process of configed beans? look for your help. I can't find a full example for scenario ""JPA 2.0(eclipselink) + spring 3.x + tomcat 7.x +Servlet 3.0"" with full leverage of  annotations, so all helps for finding bugs are appreciated. best regards,  the sample code all list here:  ----RegisterService.java----------------------------------------------------  package com.azelea.servlet;  import java.io.IOException;  import javax.servlet.ServletConfig; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.springframework.orm.jpa.JpaTemplate; import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;  import com.azelea.orm.Staff;  /** * Servlet implementation class RegisterService   */   `@WebServlet`(""/RegisterService"")   public class RegisterService extends HttpServlet {   private static final long serialVersionUID = 1L;    JpaTemplate jpa;   LocalContainerEntityManagerFactoryBean emf;    /**    * `@see` HttpServlet#HttpServlet()     */     public RegisterService() {     super();     // TODO Auto-generated constructor stub     }    public JpaTemplate getJpa() {   return jpa;   }    public void setJpa(JpaTemplate jpaTemplate) {   this.jpa = jpaTemplate;   }    public LocalContainerEntityManagerFactoryBean getEmf() {   return emf;   }    public void setEmf(LocalContainerEntityManagerFactoryBean emf) {   this.emf = emf;   }    /**    * `@see` Servlet#init(ServletConfig)     */     public void init(ServletConfig config) throws ServletException {     // TODO Auto-generated method stub     }    /**    * `@see` HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)     */     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {     // TODO Auto-generated method stub     doPost(request,response);     }    /**    * `@see` HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     */     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {     // TODO Auto-generated method stub     response.setContentType(""text/html"");     response.setCharacterEncoding(""utf-8"");      Staff staff=new Staff();     staff.setAccount(request.getParameter(""accountId""));     staff.setPassword(request.getParameter(""Password""));      emf.getPersistenceUnitName();     jpa.persist(staff);     }  }  ----applicationContext.xml----------------------------------------------------  \  \                                                                  	     	     	     		     			     			     			     		     	     	     		     	                         	                    	     	                         	       \  ----web.xml---------------------------------------------------- ﻿\ \           	index.html     	index.htm     	index.jsp                    	webAppRootKey     	Azelea                         	log4jConfigLocation     	/WEB-INF/classes/log4j.properties               	log4jRefreshInterval     	60000                         	org.springframework.web.util.Log4jConfigListener                         	contextConfigLocation     	/WEB-INF/applicationContext.xml                         	org.springframework.web.context.ContextLoaderListener       \  ----persistence.xml----------------------------------------------------  \ \ 	\ 		\com.azelea.orm.Staff\ 	\ 		\ 		\ 		\ 		\ 		\ 		\ 		\ 	\ 	\ \  ----context.xml----------------------------------------------------  \ \ \           WEB-INF/web.xml                                     \   ---  **Affects:** 3.0.6","closed","in: core,","spring-projects-issues","2011-11-13T06:17:55Z","2019-01-12T05:29:38Z"
"","13463","java.lang.NoClassDefFoundError: org/eclipse/persistence/jpa/PersistenceProvider [SPR-8821]","**[deng hui](https://jira.spring.io/secure/ViewProfile.jspa?name=truetime)** opened **[SPR-8821](https://jira.spring.io/browse/SPR-8821?redirect=false)** and commented  with applicationContext.xml configed as: \ \ \ \ \  \ \ \ \ \ \ \ \ \ I got a compiling error: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Cannot create inner bean 'org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter#84aa66' of type [org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter] while setting bean property 'jpaVendorAdapter'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter#84aa66' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/eclipse/persistence/jpa/PersistenceProvider at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:281) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:120) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1325) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:192) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:567) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:282) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:204) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4723) at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5226) at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5221) at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source) at java.util.concurrent.FutureTask.run(Unknown Source) at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) at java.lang.Thread.run(Unknown Source)  then I reviews the source file 'EclipseLinkJpaVendorAdapter.class', the beginning part of code pasted here:  package org.springframework.orm.jpa.vendor;  import java.util.HashMap; import java.util.Map; import java.util.logging.Level; import javax.persistence.EntityManager; import javax.persistence.spi.PersistenceProvider;  import org.eclipse.persistence.config.PersistenceUnitProperties; import org.eclipse.persistence.config.TargetDatabase; import org.eclipse.persistence.jpa.JpaEntityManager;  import org.springframework.orm.jpa.JpaDialect;  public class EclipseLinkJpaVendorAdapter extends AbstractJpaVendorAdapter {      private final PersistenceProvider persistenceProvider = new org.eclipse.persistence.jpa.PersistenceProvider();          //this is the location throw exception since the class 'org.eclipse.persistence.jpa.PersistenceProvider' hasn't imported. from EclipseLink 2.3.0, this class is defined in package 'org.eclipse.persistence.jpa'          private final JpaDialect jpaDialect = new EclipseLinkJpaDialect();               public PersistenceProvider getPersistenceProvider() {     	return this.persistenceProvider;     }    ---  **Affects:** 3.0.6","closed","status: invalid,","spring-projects-issues","2011-11-06T01:16:28Z","2019-01-12T05:29:42Z"
"","13704","After upgrade to 3.1.0 from 3.0.5 we've get ""Unexpected ClassLoader type"" exception during startup of our application under jboss 5.1 [SPR-9065]","**[Den Orlov](https://jira.spring.io/secure/ViewProfile.jspa?name=den.orlov)** opened **[SPR-9065](https://jira.spring.io/browse/SPR-9065?redirect=false)** and commented  After upgrade spring libs from 3.0.5 to to 3.1.0 we've get  ``` 2012-01-27 14:51:10,107 ERROR [org.springframework.web.context.ContextLoader] (main) Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.weaving.AspectJWeavingEnabler#0': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'loadTimeWeaver': Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: Unexpected ClassLoader type: org.jboss.web.tomcat.service.WebCtxLoader$ENCLoader 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1097) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:661) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:446) 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:384) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3910) 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4389) 	at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeployInternal(TomcatDeployment.java:321) 	at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeploy(TomcatDeployment.java:145) 	at org.jboss.web.deployers.AbstractWarDeployment.start(AbstractWarDeployment.java:461) 	at org.jboss.web.deployers.WebModule.startModule(WebModule.java:118) 	at org.jboss.web.deployers.WebModule.start(WebModule.java:97) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:157) 	at org.jboss.mx.server.Invocation.dispatch(Invocation.java:96) 	at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) 	at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) 	at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:668) 	at org.jboss.system.server.jmx.LazyMBeanServer.invoke(LazyMBeanServer.java:283) 	at org.jboss.system.microcontainer.ServiceProxy.invoke(ServiceProxy.java:206) 	at $Proxy38.start(Unknown Source) 	at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:42) 	at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:37) 	at org.jboss.dependency.plugins.action.SimpleControllerContextAction.simpleInstallAction(SimpleControllerContextAction.java:62) 	at org.jboss.dependency.plugins.action.AccessControllerContextAction.install(AccessControllerContextAction.java:71) 	at org.jboss.dependency.plugins.AbstractControllerContextActions.install(AbstractControllerContextActions.java:51) 	at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) 	at org.jboss.system.microcontainer.ServiceControllerContext.install(ServiceControllerContext.java:297) 	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) 	at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) 	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:826) 	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:556) 	at org.jboss.system.ServiceController.doChange(ServiceController.java:688) 	at org.jboss.system.ServiceController.start(ServiceController.java:460) 	at org.jboss.system.deployers.ServiceDeployer.start(ServiceDeployer.java:163) 	at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:99) 	at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:46) 	at org.jboss.deployers.spi.deployer.helpers.AbstractSimpleRealDeployer.internalDeploy(AbstractSimpleRealDeployer.java:62) 	at org.jboss.deployers.spi.deployer.helpers.AbstractRealDeployer.deploy(AbstractRealDeployer.java:55) 	at org.jboss.deployers.plugins.deployers.DeployerWrapper.deploy(DeployerWrapper.java:179) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.doDeploy(DeployersImpl.java:1454) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1172) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1193) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1225) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.install(DeployersImpl.java:1113) 	at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) 	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) 	at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) 	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:826) 	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:556) 	at org.jboss.deployers.plugins.deployers.DeployersImpl.process(DeployersImpl.java:789) 	at org.jboss.deployers.plugins.main.MainDeployerImpl.process(MainDeployerImpl.java:699) 	at org.jboss.system.server.profileservice.repository.MainDeployerAdapter.process(MainDeployerAdapter.java:117) 	at org.jboss.system.server.profileservice.repository.ProfileDeployAction.install(ProfileDeployAction.java:70) 	at org.jboss.system.server.profileservice.repository.AbstractProfileAction.install(AbstractProfileAction.java:53) 	at org.jboss.system.server.profileservice.repository.AbstractProfileService.install(AbstractProfileService.java:403) 	at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) 	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) 	at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) 	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) 	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:778) 	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:543) 	at org.jboss.system.server.profileservice.repository.AbstractProfileService.registerProfile(AbstractProfileService.java:308) 	at org.jboss.system.server.profileservice.ProfileServiceBootstrap.start(ProfileServiceBootstrap.java:256) 	at org.jboss.bootstrap.AbstractServerImpl.start(AbstractServerImpl.java:461) 	at org.jboss.Main.boot(Main.java:221) 	at org.jboss.Main$1.run(Main.java:556) 	at java.lang.Thread.run(Thread.java:662) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'loadTimeWeaver': Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: Unexpected ClassLoader type: org.jboss.web.tomcat.service.WebCtxLoader$ENCLoader 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.context.weaving.LoadTimeWeaverAwareProcessor.postProcessBeforeInitialization(LoadTimeWeaverAwareProcessor.java:95) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	... 82 more Caused by: java.lang.IllegalArgumentException: Unexpected ClassLoader type: org.jboss.web.tomcat.service.WebCtxLoader$ENCLoader 	at org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver.(JBossLoadTimeWeaver.java:74) 	at org.springframework.context.weaving.DefaultContextLoadTimeWeaver.createServerSpecificLoadTimeWeaver(DefaultContextLoadTimeWeaver.java:121) 	at org.springframework.context.weaving.DefaultContextLoadTimeWeaver.setBeanClassLoader(DefaultContextLoadTimeWeaver.java:74) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods(AbstractAutowireCapableBeanFactory.java:1472) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1443) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	... 91 more ```  exception during startup of our EAR application under jboss 5.1   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/efd2783dd1fab5ebdafa10dc189539bc080295d9","closed","in: core,","spring-projects-issues","2012-01-27T03:11:10Z","2012-06-19T03:39:34Z"
"","13233","Hibernate Annotation scanner missing package-info.java [SPR-8589]","**[Den Orlov](https://jira.spring.io/secure/ViewProfile.jspa?name=den.orlov)** opened **[SPR-8589](https://jira.spring.io/browse/SPR-8589?redirect=false)** and commented  I configured  \ \ \ \ \ \ \ \ \ hibernate.hbm2ddl.auto=create hibernate.dialect=org.hibernate.dialect.Oracle10gDialect hibernate.connection.charSet=UTF-8 hibernate.validator.apply_to_ddl=false                hibernate.validator.autoregister_listeners=false                hibernate.cache.use_query_cache=true                hibernate.cache.provider_class=net.sf.ehcache.hibernate.SingletonEhCacheProvider \ \ \  put  `@TypeDefs`( { `@TypeDef`( name = ""oracleNullSafeString"", defaultForType = String.class, typeClass = OracleNullSafeString.class ) } )package ru.massmo.tele2.incidents.model;  import org.hibernate.annotations.TypeDef;import org.hibernate.annotations.TypeDefs;import ru.massmo.hibernate.OracleNullSafeString;  into \src\ru\massmo\tele2\incidents\model\package-info.java  But according to logs Hibernate does not found my OracleNullSafeString UserType.  When I put `@TypeDef` at Entity file (into \src\ru\massmo\tele2\incidents\model\Subject.java):  `@Entity` `@Access`(value = AccessType.FIELD) `@org`.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE) `@TypeDefs`( { `@TypeDef`( name = ""oracleNullSafeString"", defaultForType = String.class, typeClass = OracleNullSafeString.class ) } )  hibernate found my OracleNullSafeString type correctly.  ---  **Affects:** 3.0.5  **Issue Links:** - #14922 In AnnotationSessionFactoryBean, be able to specify annotatedPackages and packagesToScan in one property - #15538 Propagate LCEMFB.packagesToScan to native PersistenceProvider to pick up annotated packages  10 votes, 15 watchers","closed","has: votes-jira,","spring-projects-issues","2011-08-08T05:21:44Z","2019-01-11T13:20:36Z"
"","13812","@Validated should allow ElementType.METHOD target [SPR-9174]","**[Dejan Predovic](https://jira.spring.io/secure/ViewProfile.jspa?name=dpredovic)** opened **[SPR-9174](https://jira.spring.io/browse/SPR-9174?redirect=false)** and commented  `@Validated` is, at the moment, the only place where one can set a validation group for method-level validation, but different methods of the class typically need different validation groups. Imo, `@Validated` should work exactly like `@Transactional` - class level definition is fine, but one needs to be able to override it at the method level.  ---  **Affects:** 3.1.1  **Issue Links:** - #15269 Add support for javax.validation.executable.ValidateOnExecution - #17014 Allow custom `@Validated` annotations for handler method parameters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e3edc667e4b71b8a1468957e578e9ec11a7ab9f  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-27T08:32:55Z","2019-01-13T07:06:04Z"
"","13414","Jpa transaction manager transaction suspension ignores dialect resources [SPR-8771]","**[Dejan Predovic](https://jira.spring.io/secure/ViewProfile.jspa?name=dpredovic)** opened **[SPR-8771](https://jira.spring.io/browse/SPR-8771?redirect=false)** and commented  JpaTransactionManager.doSuspend() method fails to unbind the resource bound by the JpaDialect, so the pending transaction always fails with:  Caused by: java.lang.IllegalStateException: Already value [SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=[] updates=[] deletions=[] collectionCreations=[] collectionRemovals=[] collectionUpdates=[]])] for key [org.hibernate.internal.SessionFactoryImpl@6921dcac] bound to thread [main] at org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(TransactionSynchronizationManager.java:180) ~[spring-tx-3.1.0.RC1.jar:3.1.0.RC1] at org.springframework.orm.jpa.vendor.HibernateJpaDialect.prepareTransaction(HibernateJpaDialect.java:98) ~[spring-orm-3.1.0.RC1.jar:3.1.0.RC1] at org.springframework.orm.jpa.vendor.HibernateJpaDialect.beginTransaction(HibernateJpaDialect.java:69) ~[spring-orm-3.1.0.RC1.jar:3.1.0.RC1] at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:377) ~[spring-orm-3.1.0.RC1.jar:3.1.0.RC1]  It used to work in the last milestone.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13421 Transaction synchronization resources are not properly cleaned-up - #13442 Regression: HibernateJpaDialect adding SessionFactory as txResource not getting cleaned up  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f50f3d2405a0b7c24a3a8bbd7e89c0482af78e7b  12 votes, 12 watchers","closed","has: votes-jira,","spring-projects-issues","2011-10-13T01:37:40Z","2019-01-11T14:06:29Z"
"","13267","Cache-Control headers regression [SPR-8624]","**[DECORBIN Théo](https://jira.spring.io/secure/ViewProfile.jspa?name=tdeco)** opened **[SPR-8624](https://jira.spring.io/browse/SPR-8624?redirect=false)** and commented  There is a problem with Cache-Control headers after updating Spring from 3.0.1 to 3.0.2. With a contoller (without annotations) inheriting from MultiActionController :  ``` public class JsonControler extends MultiActionController{   public ModelAndView getTheme(HttpServletRequest request, HttpServletResponse response) throws Exception { 	ModelAndView modelAndView = new ModelAndView(); 	List meaList = getService().getTheme(); 	modelAndView.addObject(RESPONSE,meaList); 	setCacheControl(response, getWebappConfig().getCacheControlByKey(""json.getTheme"")); 	return modelAndView; }   protected void setCacheControl(HttpServletResponse response, final int pCacheValue) { 	if (pCacheValue != -1) { 		applyCacheSeconds(response, pCacheValue); 	} 	response.addHeader(""Cache-Control"", ""stale-while-revalidate="" + webappConfig.getCacheStaleWhileRevalidate()); } ... } ```  The url mapping and the url rewriting are defined in the Spring configuration context file  ```  	 		 			jsonControler                  	  ```  ```  	^/catalog/home/theme.json$ 	getTheme.do-json  ```  When I specify the cache-control headers with setCacheControl (=> applyCacheSeconds from WebContentGenerator spring bean) there are inconsistent headers.  In Spring 3.0.1, it's OK:  ``` Expires : Tue, 16 Aug 2011 xxxx GMT Cache-Control:max-age=1800, stale-while-revalidate=3600 ```  In Spring 3.0.2, it's KO, there are 2 expiration dates and additional cache-control parameters :  ``` Expires : Tue, 16 Aug 2011 xxxx GMT, Tue, 01 Jan 1970 xxx GMT Cache-Control:max-age=1800, stale-while-revalidate=3600, no-cache, no-store, max-age=0 ```  Is it a regression of Spring 3.0.2 ?   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?113511-Cache-Control-headers-problem-after-updating-Spring-from-3.0.2-to-3.0.1-release","closed","in: web,","spring-projects-issues","2011-08-19T06:25:17Z","2019-01-11T14:16:42Z"
"","13269","org.springframework.validation.beanvalidation.LocalValidatorFactoryBean ""cacheMessages"" property. [SPR-8626]","**[David Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=elameno)** opened **[SPR-8626](https://jira.spring.io/browse/SPR-8626?redirect=false)** and commented  I have a web setup where I am using JSR-303 validation logic with a custom JDBC Message Source that permits caching with a specified cache invalidation/refresh interval.  The LocalValidatorFactoryBean instantiates a MessageInterpolator that provides caching of its own that does not have any cache invalidation timing parameters and, as such, it overrides any settings that are in my MessageSource.  What I've done to fix the issue is to subclass the LocalValidatorFactoryBean and have added a boolean cacheMessages property which then gets passed on through to the constructor of the ResourceBundleMessageInterpolator.  This permits me to turn off caching at the MessageInterpolator level and utilize the caching that is available in my MessageSource implementation.  It would be nice to have the cacheMessages option added directly into the LocalValidatorFactoryBean so I no longer have to utilize a subclass in my own packages.  I've attached an example of what I've done if you care to update the factory bean.  Many Thanks! Dave Wolff   ---  **Affects:** 3.0.5  **Attachments:** - [LocalValidatorFactoryBean.java](https://jira.spring.io/secure/attachment/18579/LocalValidatorFactoryBean.java) (_10.27 kB_)","closed","status: bulk-closed,","spring-projects-issues","2011-08-19T11:33:35Z","2019-01-12T03:49:25Z"
"","13412","@Autowired dependencies against bean definitions with type-inspecific factory-methods may fail [SPR-8769]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-8769](https://jira.spring.io/browse/SPR-8769?redirect=false)** and commented  Autowire Mock Object using factory-method fails with NoSuchBeanDefinitionException if the Autowired bean comes after the dependent.  ---  **Issue Links:** - #13769 Introduce FactoryBean to create mock beans with EasyMock - #14127 Infer return type of parameterized static factory methods (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/b38d68c381162c3c0ff9506337939a81e8f7433a, https://github.com/spring-projects/spring-framework-issues/commit/b74256033c52f95e23f587e9dde710b3b2f319aa, https://github.com/spring-projects/spring-framework-issues/commit/bfbeccc71ff87b383669f5fed11e06a2b9b2268a","closed","in: core,","spring-projects-issues","2011-10-12T15:58:16Z","2019-01-12T16:37:16Z"
"","12940","Inner class XML configuration fails with  [SPR-8292]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-8292](https://jira.spring.io/browse/SPR-8292?redirect=false)** and commented  Given public class Outer { public static class Inner { } }  \ works in fine in Spring 3.0. In fact STS code completion provides the '.'.  \ works in 3.0 and 3.1  In the first case Spring 3.1 throws the following exception:  java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:308) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:220) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:301) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:303) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: java.lang.IllegalStateException: Could not create MetadataReader for class Outer.Inner at org.springframework.context.annotation.ConfigurationClassPostProcessor.isFeatureConfiguration(ConfigurationClassPostProcessor.java:286) at org.springframework.context.annotation.ConfigurationClassPostProcessor.retrieveFeatureConfigurationBeans(ConfigurationClassPostProcessor.java:253) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processFeatureConfigurationClasses(ConfigurationClassPostProcessor.java:210) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigurationClasses(ConfigurationClassPostProcessor.java:203) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:176) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:604) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:437) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) ... 24 more Caused by: java.io.FileNotFoundException: class path resource [Outer/Inner.class] cannot be opened because it does not exist at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:158) at org.springframework.core.type.classreading.SimpleMetadataReader.\(SimpleMetadataReader.java:45) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:76) at org.springframework.context.annotation.ConfigurationClassPostProcessor.isFeatureConfiguration(ConfigurationClassPostProcessor.java:279) ... 34 more   ---  **Affects:** 3.1 M1","closed","","spring-projects-issues","2011-05-04T09:24:16Z","2019-01-11T12:54:40Z"
"","13317","GenericConversionService should match target converters for compatible subclasses [SPR-8675]","**[David Smiley](https://jira.spring.io/secure/ViewProfile.jspa?name=dsmiley)** opened **[SPR-8675](https://jira.spring.io/browse/SPR-8675?redirect=false)** and commented  I registered this simple Converter (which by the way, I feel is something that should be out of the box):  ```java public class FileToResourceConverter implements Converter {   public Resource convert(File source) {     return new FileSystemResource(source);   } } ```  I have code that would like to look up a converter for an InputStreamSource (a super-interface of Resource):  ```java InputStreamSource rsrc = this.getConversionService().convert(message.getPayload(), InputStreamSource.class); ```  But this fails because, apparently, GenericConversionService is unable to recognize instanceof relationships between the conversion target type and the desired target type. As a workaround, my code here has to be aware that the converter is for Resource and then ask the conversion service for a Resource even though it only needs an InputStreamSource.  ---  **Affects:** 3.0.6  **Issue Links:** - #13360 ClassCastException possible when converting to a target type that is a subtype of T for a Converter convertible type. - [INT-3556](https://jira.spring.io/browse/INT-3556) Use Converters that can convert to subtype of datatype channel  0 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2011-09-08T13:00:55Z","2021-02-09T02:55:27Z"
"","13028","HttpMessageConverter doesn't support typed collections [SPR-8381]","**[David Parks](https://jira.spring.io/secure/ViewProfile.jspa?name=davidparks21)** opened **[SPR-8381](https://jira.spring.io/browse/SPR-8381?redirect=false)** and commented  HttpMessageConverter can't support conversion to typed collections.  Example: Use JacksonJsonMessageConverter to convert a json string to a Collection\ objects.  Since only a Class","closed","type: enhancement,","spring-projects-issues","2011-05-30T03:12:27Z","2019-01-13T07:09:11Z"
"","13014","3.1.0.M2 update of the RestTemplate for Apache HTTP Components will default to sending 2 requests on authentication and doesn't support HttpContext parameters without significant extention/rewrite [SPR-8367]","**[David Parks](https://jira.spring.io/secure/ViewProfile.jspa?name=davidparks21)** opened **[SPR-8367](https://jira.spring.io/browse/SPR-8367?redirect=false)** and commented  Reference JIRA: https://jira.springsource.org/browse/SPR-6180?focusedCommentId=66682#comment-66682  Any use cases which require an HttpContext attribute to be set aren't covered in this implementation, and the extensions required make the whole thing so messy as to make using the Rest Template more of a burden than a benefit. Here is the particular case that I've been fussing with today to little avail, setting preemptive authentication (i.e. send basic authentication headers by default rather than performing 2 requests to authenticate):  http://hc.apache.org/httpcomponents-client-ga/tutorial/html/authentication.html#d4e1023  The problem being that the RestTemplate implementation as it is has no support for setting HttpContext parameters (the template calls the Http.execute(HttpUriRequest) which uses only the non-accessible default HttpContext), there aren't any good ways to set the default context parameters on the HttpClient in 4.x Apache HTTP Components. You end up needing to extend HttpClient to provide for default HttpContext params on the HttpClient object and the whole thing just becomes a spaghetti mess from there making the template more pain than pleasure.   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9144ea1eae5b09b3f8609dec0e6343f35c887a9  3 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-24T00:38:25Z","2012-06-19T03:39:15Z"
"","13557","Accept header with quoted parameter causes IllegalArgumentException in HttpHeaders.getContentType for the outputMessage [SPR-8917]","**[David Pacheco](https://jira.spring.io/secure/ViewProfile.jspa?name=dpacheco)** opened **[SPR-8917](https://jira.spring.io/browse/SPR-8917?redirect=false)** and commented  A HTTP request with the following Accept header  Accept: application/xhtml+xml; profile=""http://www.wapforum.org/xhtml"", application/vnd.wap.xhtml+xml  to a String Controller, causes the following exception to be thrown:  ```java SEVERE: Servlet.service() for servlet dispatcher threw exception java.lang.IllegalArgumentException: Invalid token character ':' in token ""http://www.wapforum.org/xhtml""         at org.springframework.http.MediaType.checkToken(MediaType.java:282)         at org.springframework.http.MediaType.checkParameters(MediaType.java:302)         at org.springframework.http.MediaType.(MediaType.java:263)         at org.springframework.http.MediaType.parseMediaType(MediaType.java:584)         at org.springframework.http.HttpHeaders.getContentType(HttpHeaders.java:286)         at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:97)         at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:1)         at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:181)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.writeWithMessageConverters(AnnotationMethodHandlerAdapter.java:973)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.handleResponseBody(AnnotationMethodHandlerAdapter.java:931)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.getModelAndView(AnnotationMethodHandlerAdapter.java:880)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:429)         at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:415)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:788)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644)         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) ```  In brief:  This is due to the AbstractHttpMessageConverter write method calling the headers.setContentType() method of the outputMessage parameter with a MediaType with the following value ""application/xhtml+xml;profile=http://www.wapforum.org/xhtml"".  Note the lack of quotes around the profile value part.  The program flow is:  The MediaType is parsed from the HTTP Accept header with the value  application/xhtml+xml;profile=""http://www.wapforum.org/xhtml""  Note - The inclusion of the quotes means that this value does not trigger the checkToken(String) method of MediaType.  In the StringHttpMessageConverter write method, a call is made to set the content type for the outputMessage. This uses the toString() method of MediaType to set the Content-Type header, this results in the value being set to ""application/xhtml+xml;profile=http://www.wapforum.org/xhtml"".  Next the writeInternal method of StringHttpMessageConverter is called, this tries to get the MediaType for the outputMessage by calling outputMessage.getHeaders().getContentType(), which in turn calls MediaType.parseMediaType(value) with the value of ""application/xhtml+xml;profile=http://www.wapforum.org/xhtml"", due to the missing quotes in the profile parameter value, this will now trigger the checkToken(String) method of MediaType which ultimately results in the IllegalArgumentException being thrown.  ---  Example request headers  GET /index.html HTTP/1.1 Accept: application/xhtml+xml; profile=""http://www.wapforum.org/xhtml"", application/vnd.wap.xhtml+xml Accept-Language: en-us Host: app.example.com Connection: Keep-Alive Pragma: no-cache  ---  **Affects:** 3.0.4  **Issue Links:** - #14368 Allow parsing of media types with single-quotes (_**""is depended on by""**_) - #13781 Invalid MIME-type causes a 500 error  1 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2011-12-13T09:22:17Z","2019-01-13T21:41:22Z"
"","13629","JSR 303 customer ConstraintValidator seems to result in incorrect error codes [SPR-8989]","**[David Melia](https://jira.spring.io/secure/ViewProfile.jspa?name=mzz6wh)** opened **[SPR-8989](https://jira.spring.io/browse/SPR-8989?redirect=false)** and commented  Hi,  I have created a JSR 303 Custom ConstraintValidator integrating to Spring but seem to get problems resolving object errors.  I am currently experiencing this in a Spring MVC REST application however I have created the below JUnit 4test to try and isolate the problem:  Please see the following test:  ```java   public class ModelTest {     @Target({ ElementType.TYPE })    @Retention(RUNTIME)    @Constraint(validatedBy = CheckModelValidator.class)    @Documented    public @interface CheckModel {       String message() default ""CheckModel.validation"";        Class[] groups() default {};        Class","closed","status: bulk-closed,","spring-projects-issues","2012-01-04T01:06:54Z","2019-01-12T02:36:10Z"
"","13628","JSR 303 customer ConstraintValidator seems to result in incorrect error codes [SPR-8988]","**[David Melia](https://jira.spring.io/secure/ViewProfile.jspa?name=mzz6wh)** opened **[SPR-8988](https://jira.spring.io/browse/SPR-8988?redirect=false)** and commented   --- No further details from [SPR-8988](https://jira.spring.io/browse/SPR-8988?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-01-04T00:46:09Z","2019-01-12T05:29:23Z"
"","13407","Allow SpringJUnit4ClassRunner to have a ""pre"" context that is whollly initialized before the main contexts [SPR-8764]","**[David M. Karr](https://jira.spring.io/secure/ViewProfile.jspa?name=dkarr)** opened **[SPR-8764](https://jira.spring.io/browse/SPR-8764?redirect=false)** and commented  The forum note I wrote describes the situation, but I'll recap it here in a different way.  I have an app that uses ""jee:jndi-lookup"".  It normally runs in WebLogic, which has configuration settings to bind JNDI paths to datasources.  This works fine in the container.  I have integration tests that use SpringJUnit4ClassRunner.  In order for this to work, I have to use a ""pre"" context that uses ""DriverManagerDataSource"" and binds those datasources to JNDI (I wrote a simple ""JNDIBinder"" class that does this).  Unfortunately, I need more than just the Spring context changes to get this to work.  When I specify the `@ContextConfiguration` annotation, I can give it the ""pre"" context, and then the regular application context, in that order, but that doesn't mean that the ""pre"" context will be entirely initialized before Spring attempts to process the ""jee:jndi-lookup"" element.  In fact, what I see happen is that Spring reports errors on the ""jee:jndi-lookup"" elements, because my JNDI binder hasn't been initialized by the time Spring processes the ""jee:jndi-lookup"" element.  What I ended up having to do is have a ""`@BeforeClass`"" method that manually loads the ""pre"" context, and then manually calls the ""init()"" function on my JNDIBinder class (just loading the ""pre"" context didn't appear to make this happen).  What I'm suggesting in this recommendation, without specifying exactly how you would make this happen, is to allow the developer to specify a list of contexts that are entirely loaded and initialized before the ""regular"" context list is loaded and initialized.  This would likely be an additional list attribute on the `@ContextConfiguration` annotation.   ---  **Affects:** 3.0.6  **Reference URL:** http://forum.springsource.org/showthread.php?115434-Would-it-be-useful-if-SpringJUnit4ClassRunner-had-a-quot-pre-quot-context&p=382183#post382183","closed","type: enhancement,","spring-projects-issues","2011-10-12T10:03:06Z","2014-07-21T11:49:29Z"
"","13408","@Value injection not working correcly with a ""non-standard"" properties object as the source. [SPR-8765]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-8765](https://jira.spring.io/browse/SPR-8765?redirect=false)** and commented  See http://www.jasypt.org/encrypting-configuration.html and in particular: http://www.jasypt.org/api/jasypt/apidocs/org/jasypt/properties/EncryptableProperties.html.  If I define my config like:  ```  		 			 				 				 					 						classpath:pays/app-config.properties 						classpath:pays/pays-config.properties 					 				 			 		 		 			 				 					 						 						 					 				 			 		 	    ```  Injection of some `@Value` in my beans is suddenly null.  If I have it like before:  ```  				 				 					 						app-config.properties contains commons tunable values. 						pays-config.properties contains environment values. 					 					 						classpath:pays/app-config.properties 						classpath:pays/pays-config.properties 						classpath:pays/pays-config.properties.#{systemEnvironment['APP']} 						 					 				 			    ```  it works as it should.  I can also add that the parameter type needs some conversion (A string array is injected, and the properties are comma-separated).   ---  **Affects:** 3.0.6  2 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2011-10-12T10:30:44Z","2019-01-12T16:37:17Z"
"","13291","ServiceLocatorFactoryBean - support a default mapping if no match in the serviceMappings [SPR-8649]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-8649](https://jira.spring.io/browse/SPR-8649?redirect=false)** and commented  It would be very handy if it was possible to define a default mapping when there is no match in the service map. In cases where you would have to configure a lot of keys in the service map, one could instead just return a default, and configure the non-defaults in the map.   ---  **Affects:** 3.0.6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-08-29T07:52:41Z","2018-12-28T09:35:41Z"
"","13626","Add the ability to Scan Packages for JAXB Marshalling (java example provided) [SPR-8986]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-8986](https://jira.spring.io/browse/SPR-8986?redirect=false)** and commented  Hi,  In our application we have a rapidly growing number of JAXB2 annotated classes. It is a right pain to add these classes manually to the ""classesToBeBound"" property in the Jaxb2Marshaller. Given that other components (I'm looking at you Hibernate : AnnotationSessionFactoryBean) have the ability to automatically add classes from packages that match annotations, why not then for the Jaxb2Marshaller (having to key in the classes manually is **so** old skool).  I've extended Jaxb2Marshaller (file attached) that scans on the classpath for appropriately annotated classes. Please do review and I hope that this can be incorporated into the next release. I'm happy to make changes to the codebase if required to bring it up to Spring coding standards.  It's a pity that afterPropertiesSet is marked as Final in Jaxb2Marshaller since I can't override that method to set up the setClassesToBeBound before then calling the super afterPropertiesSet. Currently as the code stands, I have to provide a dummy setClassesToBeBound and setLazyInit to be true. This dummy is then replaced by overriding the getJaxbContext. I think this needs rewriting.  An example of use:  ```xml                               foo.bar.Class                                        foo.bar.jaxb.model                ```  -=david=-  ---  **Affects:** 3.1 GA  **Attachments:** - [AnnotationJaxb2Marshaller_v2.java](https://jira.spring.io/secure/attachment/19255/AnnotationJaxb2Marshaller_v2.java) (_5.10 kB_) - [AnnotationJaxb2Marshaller.java](https://jira.spring.io/secure/attachment/19254/AnnotationJaxb2Marshaller.java) (_4.13 kB_)  **Issue Links:** - #13835 HTTP response code 308 (_**""is duplicated by""**_) - #13844 Add ClasspathScanningJaxb2Marshaller for spring OXM (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8980ce712da209aa5cf742dd4bd58f09e5d46870, https://github.com/spring-projects/spring-framework/commit/79f32c7f33489bf9e746928d9e33fb29b53e0a96, https://github.com/spring-projects/spring-framework/commit/ff9ad7adc603fd395c212b7329a2b0b2804a82bc","closed","type: enhancement,","spring-projects-issues","2012-01-03T14:53:36Z","2019-01-11T14:29:08Z"
"","13150","Please allow disabling of Cache in EhCacheFactoryBean [SPR-8504]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-8504](https://jira.spring.io/browse/SPR-8504?redirect=false)** and commented  Currently EhCacheFactoryBean allows for setting of quite a number of Cache values such as cacheName, maxElementsInMemory, diskPersistent and so on.  We have an issue that during development time, it would be neat if the cache was disabled via a spring property. This is not exposed on EhCacheFactoryBean. I propose this:  A new setter on EhCacheFactoryBean called ""setDisabled"" which takes a boolean, then in createCache() set the cache to be disabled if the property is set.  This would fit nicely into the environment configuration where one configuration would have setDisabled to true during development (in a development environment configuration).   ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-07-01T08:20:04Z","2012-06-19T03:39:21Z"
"","13079","Regression on 3.1.0.M2: NoSuchMethodException on Inner Class [SPR-8433]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-8433](https://jira.spring.io/browse/SPR-8433?redirect=false)** and commented  I seem to have found a regression between 3.0.5.RELEASE and 3.1.0.M2.  Here is the offending code:  ``` @Component(""daoFactory"") public class DaoFactory {      @Autowired     private ApplicationContext applicationContext;      public TestDao getTestDao() {         return applicationContext.getBean(""test"", TestDaoImpl.class);     }      @Repository(""test"")     public class TestDaoImpl extends AbstractDao implements TestDao {          public TestDaoImpl() {             super(Model.class);         }          @Override         public Model create() {             return null;         }      } } ```  If I run this via a simple unit test:  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = ""classpath:applicationContext-testing.xml"") public class DaoFactoryTest {      private DaoFactory daoFactory;      @Test     public void assertGetArticleDao() {         final TestDao testDao = daoFactory.getTestDao();         assertNotNull(testDao);     }      @Resource     public void setDaoFactory(final DaoFactory daoFactory) {         this.daoFactory = daoFactory;     } } ```  I obtain this error in 3.1.0.M2:  ``` java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:181) ~[spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) ~[spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) ~[spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) ~[spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:220) [spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:301) [spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) [junit-dep-4.8.2.jar:na] 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:303) [spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240) [spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49) [junit-dep-4.8.2.jar:na] 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) [junit-dep-4.8.2.jar:na] 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) [junit-dep-4.8.2.jar:na] 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) [junit-dep-4.8.2.jar:na] 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) [junit-dep-4.8.2.jar:na] 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) [junit-dep-4.8.2.jar:na] 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) [spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) [junit-dep-4.8.2.jar:na] 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) [spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) [.cp/:na] 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na] 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) [.cp/:na] 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) [.cp/:na] 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) [.cp/:na] 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) [.cp/:na] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'X.X.common.domain.dao.impl.DaoFactory$TestDaoImpl#0': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [X.X.common.domain.dao.impl.DaoFactory$TestDaoImpl]: No default constructor found; nested exception is java.lang.NoSuchMethodException: X.X.common.domain.dao.impl.DaoFactory$TestDaoImpl.() 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:965) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:911) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) ~[spring-context-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) ~[spring-context-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:73) ~[spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:128) ~[spring-test-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:172) ~[spring-test-3.1.0.M2.jar:3.1.0.M2] 	... 24 common frames omitted Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [X.X.common.domain.dao.impl.DaoFactory$TestDaoImpl]: No default constructor found; nested exception is java.lang.NoSuchMethodException: X.X.common.domain.dao.impl.DaoFactory$TestDaoImpl.() 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:72) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:958) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	... 37 common frames omitted Caused by: java.lang.NoSuchMethodException: X.X.domain.dao.impl.DaoFactory$TestDaoImpl.() 	at java.lang.Class.getConstructor0(Class.java:2706) ~[na:1.6.0_25] 	at java.lang.Class.getDeclaredConstructor(Class.java:1985) ~[na:1.6.0_25] 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:67) ~[spring-beans-3.1.0.M2.jar:3.1.0.M2] 	... 38 common frames omitted ```  Whereas, in Spring 3.0.5.RELEASE, I get this:  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [X.X.common.domain.dao.impl.DaoFactory$TestDaoImpl] is defined: expected single bean but found 0:  	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:269) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083) 	at X.X.common.domain.dao.impl.DaoFactory.getTestDao(DaoFactory.java:21) 	at X.X.common.domain.dao.impl.DaoFactoryTest.assertGetArticleDao(DaoFactoryTest.java:22) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) ```  In the Inner Class, you can clearly see that there is a default constructor (which calls to a super which has a default constructor).  =david=   ---  **Affects:** 3.1 M2","closed","status: declined,","spring-projects-issues","2011-06-10T07:09:57Z","2019-01-12T16:25:25Z"
"","13575","@Autowired does not appear in JavaDoc [SPR-8935]","**[David Goblirsch](https://jira.spring.io/secure/ViewProfile.jspa?name=dmgob)** opened **[SPR-8935](https://jira.spring.io/browse/SPR-8935?redirect=false)** and commented  When I generate JavaDocs for my projects, `@Component` shows up, `@Qualifier` shows up, `@Transactional` shows up, but `@Autowired` does not. `@Qualifier` looks odd without the corresponding `@Autowired`!    ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2011-12-15T09:42:41Z","2012-06-19T03:39:36Z"
"","13240","UrlPathHelper.getOriginatingQueryString incorrectly tests for forwarded request [SPR-8596]","**[David Eckel](https://jira.spring.io/secure/ViewProfile.jspa?name=dvdckl)** opened **[SPR-8596](https://jira.spring.io/browse/SPR-8596?redirect=false)** and commented  For a request ""/foo"" that gets forwarded to ""/error?type=404"", UrlPathHelper.getOriginatingQueryString(request) returns ""?type=404"" instead of null.  The problem is that the method assumes that the attribute ""javax.servlet.forward.query_string"" will always be present in a forwarded request, but it won't be present if the original request.getQueryString() returns null when there is no query string.  UrlPathHelper.getOriginatingQueryString(request) should change to something like the following that relies upon an attribute that should always be non-null for a forwarded request:  public String getOriginatingQueryString(HttpServletRequest request) { if (request.getAttribute(WebUtils.FORWARD_REQUEST_URI_ATTRIBUTE) != null) { return (String) request.getAttribute(WebUtils.FORWARD_QUERY_STRING_ATTRIBUTE); }      return request.getQueryString();  }   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7bf44f06a0a57da13cd20e3712c1ad66c60f04c3","closed","type: bug,","spring-projects-issues","2011-08-09T19:55:04Z","2019-01-11T14:11:50Z"
"","13783","TransactionAspectSupport.currentTransactionStatus() can return null when from the exception signature we'd expect a NoTransactionException [SPR-9144]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-9144](https://jira.spring.io/browse/SPR-9144?redirect=false)** and commented  Affects version 3.1.0.RELEASE. I haven't tested 3.1.1.RELEASE but assume it still exists there.  The behaviour I'm seeing is that TransactionStatus.currentTransactionStatus() calls currentTransactionInfo() and gets a valid object.  However, it then returns the .transactionStatus attributes from that object. In this case the attribute is null. This null is returned and opens up the potential for an unexpected NullPointerException.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff8655846d9c6903f16730efc1650a4ae55866b9","closed","type: bug,","spring-projects-issues","2012-02-21T08:35:34Z","2014-11-17T06:42:31Z"
"","13589","PropertyPathFactoryBean requires a bean setter in version 3.1.0.RELEASE. It didn't in 3.0.6.RELEASE [SPR-8949]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-8949](https://jira.spring.io/browse/SPR-8949?redirect=false)** and commented  The org.springframework.beans.factory.config.PropertyPathFactoryBean class seems to have got more strict in 3.1.0.RELEASE. I have an object with an ""options"" field and a ""getOptions()"" method but no corresponsing ""setOptions()"" method. Fair enough, it isn't a bean :)  However, I just wanted to log the fact that the behaviour has recently changed and maybe to help someone else out who's seeing the same error.  A reasonable workaround is to switch to the MethodInvokingFactoryBean and specify ""getOptions"" as the method name. Unfortunatly, this isn't quite as elegant as I would hope because I have 2 levels of beans to navigate. The original spring config was:                               Note the ""options.applicationId"" meaning ""the applicationId property inside the options bean"". I've got it working by using:                                                                                                    Could someone in the know please make a judgement about whether it's appropriate to relax the demand for the setter? If we want to keep it strict then fine, I'll move everything over to MethodInvokingFactoryBean.  Stack trace:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'core.CommandLineOptions': FactoryBean threw exception on object creation; nested exception is org.springframework.beans.NotReadablePropertyException: Invalid property 'options' of bean class [com.fxcash.fxcore.application.impl.option.CoreCommandLineArgumentProcessorImpl]: Bean property 'options' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:149) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:109) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1441) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:305) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) ... 48 more Caused by: org.springframework.beans.NotReadablePropertyException: Invalid property 'options' of bean class [com.fxcash.fxcore.application.impl.option.CoreCommandLineArgumentProcessorImpl]: Bean property 'options' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:729) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:721) at org.springframework.beans.factory.config.PropertyPathFactoryBean.getObject(PropertyPathFactoryBean.java:208) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142) ... 53 more  ---  **Issue Links:** - #14663 Overhaul non-void JavaBean write method support  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2011-12-20T07:07:32Z","2019-01-11T14:26:27Z"
"","13641","Javadoc error in AbstractRequestCondition subclasses [SPR-9001]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-9001](https://jira.spring.io/browse/SPR-9001?redirect=false)** and commented  Various AbstractRequestCondition subclasses say in the Javdocs to their compareTo() method that it return ""less than 1"" or ""greater than 1"" where it should say ""less then 0"" or ""greater than 0"" (since that is the contract for a Comparator you can guess this but it is surprising to see the wrong value).   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a4b33533d3608c2124c076476ed8835273582ec0","closed","type: bug,","spring-projects-issues","2012-01-06T03:30:34Z","2012-06-19T03:39:50Z"
"","13625","SystemProfileValueSource is not very compatible with the new 3.1 default system property profiles [SPR-8985]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8985](https://jira.spring.io/browse/SPR-8985?redirect=false)** and commented  SystemProfileValueSource is not very compatible with the new 3.1 default system property profiles.  If `System.getProperty(""spring.profiles.active"")` is null then the ""default"" profile is active, which is quite handy in `` configuration.  But the old SystemProfileValueSource from 2.0 returns null in that case, which then cannot be matched to anything legal in the `@IfProfileValue` annotation.  I suggest that returning the empty String would be more sensible anyway and won't break any existing code because null is not legal as an annotation value.  ---  **Affects:** 3.1 GA  **Issue Links:** - #12410 Decide what to do with `@IfProfileValue` - #13622 Allow overriding `@ActiveProfiles` in test classes with system property - #16300 Introduce annotation to skip test based on active Spring profile","open","type: enhancement,","spring-projects-issues","2012-01-03T05:29:33Z","2019-01-15T11:50:35Z"
"","13566","TypedValue.NULL is illegal, but public and used internally [SPR-8926]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8926](https://jira.spring.io/browse/SPR-8926?redirect=false)** and commented  TypedValue.NULL is illegal, but public and used internally.  SImple test:  TypedValue value = TypedValue.NULL;  Throws an exception:  ``` java.lang.NoSuchFieldError: NULL 	at org.springframework.expression.TypedValue.(TypedValue.java:32) ```  This is used for example in the default constructor of StandardEvaluationContext.   ---  **Affects:** 3.1 GA","closed","in: core,","spring-projects-issues","2011-12-14T10:59:10Z","2019-01-11T14:27:44Z"
"","13563","SpEL expressions not resolvable from @bean expressions in an  inside  with a non-default profile [SPR-8923]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8923](https://jira.spring.io/browse/SPR-8923?redirect=false)** and commented  This file imports another but only in the jdbc profile:  ```  	   ```  The import has additional profile dependent section:  ``` 	 		 			 				 			 		 	  	 		 			 		 	  	 		 			 		 	 ```  If you load the context you get a SpEL exception saying that the bean ""platform"" does not exist.  The import works on its own, and it works if it is imported as part of the default profile.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/df06948047b9e435c11036450440ec09af185199","closed","in: core,","spring-projects-issues","2011-12-14T06:21:51Z","2019-01-12T16:37:08Z"
"","13541","Add system-properties-mode back into the 3.1 schema for  [SPR-8901]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8901](https://jira.spring.io/browse/SPR-8901?redirect=false)** and commented  Add system-properties-mode back into the 3.1 schema for .  It's a very widely used feature and, while there are workarounds (use 3.0 schema, or a bean definition) I think it will help a lot of users to upgrade if they can just upgrade the schema without changing the config.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-12-07T03:25:09Z","2012-06-19T03:39:37Z"
"","13481","@ExceptionHandler should be able to return ResponseEntity [SPR-8839]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8839](https://jira.spring.io/browse/SPR-8839?redirect=false)** and commented  `@ExceptionHandler` should be able to return ResponseEntity, for consistency with `@RequestMapping`, and to enable custom (dynamic) status codes to be added to the response (`@ResponseStatus` has to be hardcoded).  It's pretty easy to do this - you just add a handler for ResponseEntity to the AnnotationMethodExceptionHandlerResolver.   ---  **Affects:** 3.0.6","closed","type: enhancement,","spring-projects-issues","2011-11-12T03:04:01Z","2012-06-19T03:39:50Z"
"","13430","Allow access to @ModelAttributes in @ExceptionHandler [SPR-8787]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8787](https://jira.spring.io/browse/SPR-8787?redirect=false)** and commented  Allow access to `@ModelAttributes` in `@ExceptionHandler`.  Since the `@ExceptionHandler` is handler specific, some or all of the `@ModelAttributes` might very well be available when it is called, but because currently it is only called directly from DispatcherServlet they are not passed into the handler method.  Simple example:  ``` @Controller @SessionAttributes(""foo"") public class FooController {     @ModelAttribute(""foo"")     public String getFoo() {         return ""foo"";     }     @RequestMapping(...)     public String handleRequest(@ModelAttribute(""foo"") String foo) {         throw new Exception(""planned"");     }     @ExceptionHandler     public String handleException(@ModelAttribute(""foo"") String foo) {         return foo; // this is not possible     } } ```    --- No further details from [SPR-8787](https://jira.spring.io/browse/SPR-8787?redirect=false)","closed","status: invalid,","spring-projects-issues","2011-10-18T08:32:51Z","2019-01-12T05:29:46Z"
"","13325","AntPathMatcher.AntPatternComparator algorithm wrong for hierarchical matches [SPR-8683]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8683](https://jira.spring.io/browse/SPR-8683?redirect=false)** and commented  AntPathMatcher.AntPatternComparator algorithm wrong for hierarchical matches,  Consider an incoming request  GET /hotels/foo/rooms  and two patterns that match  1: /hotels/{hotel}/** 2: /**  Intuitively 1 is more specific than 2, so the comparator should return negative with compare(1,2) (i.e. 1","closed","in: core,","spring-projects-issues","2011-09-12T12:06:06Z","2019-01-12T16:48:35Z"
"","13254","ContentNegotiatingViewResolver should be able to follow redirect:views [SPR-8611]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8611](https://jira.spring.io/browse/SPR-8611?redirect=false)** and commented  ContentNegotiatingViewResolver should be able to follow redirect:views.  It seems inconsistent that if the controller clearly says that it wants a redirect view by returning the string ""redirect:xxx"" then it is unfortunate that the ContentNegotiatingViewResolver does not respect that wish.  It works fine if the controller returns a RedirectView instance, so it is also inconsistent that the string convention is not followed.  N.B. it works if the preferred media type is one that leads to an HTML view (so browser clients generally don't notice), but machine and command line clients do not work because they get a 200 instead of a 302.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37d22ad039790985ccb8f751fcd2a2aec159e5ca","closed","type: enhancement,","spring-projects-issues","2011-08-12T00:51:06Z","2012-06-19T03:39:26Z"
"","13236","Make JDBC namespace more placeholder and SpEL friendly [SPR-8592]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8592](https://jira.spring.io/browse/SPR-8592?redirect=false)** and commented  Make JDBC namespace more placeholder and SpEL friendly: the location for an initializer, in particular, are not externalizable.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/296099f2224698b7128f2242feb627ed203c77f5","closed","type: enhancement,","spring-projects-issues","2011-08-09T02:28:03Z","2012-06-19T03:39:38Z"
"","13229","Add generic composite servlet filter [SPR-8585]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8585](https://jira.spring.io/browse/SPR-8585?redirect=false)** and commented  Add generic composite servlet filter.  Spring security has a composite filter with matching rules bundled into it and it is quite domain specific, but it would be useful to have a simple composite that could be wired up with a list of filter beans and exposed to an app in web.xml.  Also very useful for inserting long chains of additional filters in the Spring Security filter chain (which is where the original requirement came from).  the `VirtualFilterChain` in Spring Security provides a template.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-08-03T02:37:00Z","2012-06-19T03:39:15Z"
"","13089","Spring Web dependency on rome should be optional [SPR-8443]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8443](https://jira.spring.io/browse/SPR-8443?redirect=false)** and commented  ---  **Affects:** 3.1 M2  **Issue Links:** - #12649 Rome is marked as required dependency for spring-web artifact (_**""Cloned from""**_)","closed","type: bug,","spring-projects-issues","2011-06-13T03:22:06Z","2019-01-11T13:36:53Z"
"","13052","JdbcNamespaceIntegrationTest fails because Derby is not shutdown correctly [SPR-8405]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8405](https://jira.spring.io/browse/SPR-8405?redirect=false)** and commented  JdbcNamespaceIntegrationTest fails because Derby is not shutdown correctly.  It used to work, and I can't see what changed, but I remember Oliver contricuting some code to 3.0 to make this work.  Presumably the CI build is not failing(?), but the test fails in Eclipse and with Maven on the command line, so it makes it hard to develop spring-jdbc and be confident about the changes.   --- No further details from [SPR-8405](https://jira.spring.io/browse/SPR-8405?redirect=false)","closed","","spring-projects-issues","2011-06-06T00:30:39Z","2019-01-11T13:34:34Z"
"","13051","Please undeprecate XmlBeanFactory [SPR-8404]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8404](https://jira.spring.io/browse/SPR-8404?redirect=false)** and commented  Please undeprecate XmlBeanFactory.  It's only a few lines of code, so not a big deal to keep it I would have thought.  It's really useful for testing, and those few lines have to be duplicated, plus I never remember how to do it.  ---  **Affects:** 3.1 M1  **Issue Links:** - #18064 Revisit remaining XmlBeanFactory usage in reference documentation","closed","type: enhancement,","spring-projects-issues","2011-06-06T00:11:08Z","2019-01-11T13:34:35Z"
"","13050","UriTemplate doesn't encode query parameters [SPR-8403]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8403](https://jira.spring.io/browse/SPR-8403?redirect=false)** and commented  Maybe people tend not to use UriTemplate with query strings?  UriUtils actually has some code for encoding query parameters and for encoding the whole query string, but UriTemplate only uses the latter.  The query parameter encoding method is used by the JSP tag UrlTag, so from that I assume that there is a good technical reason for doing the encoding.  Example from the JSP case (where UriTemplate will leave the input unchanged):  ``` foo?bar=a=b&c -> foo?bar=a%3Db&c ```  I think it would be easy to implement (by splitting the query string on '&' and feeding the parts through the parameter encoding method) if we can agree on the principle.  ---  **Affects:** 3.0.5  **Issue Links:** - #13153 UriUtils does double encode - #10811 RestTemplate cannot support OAuth - #13304 UriTemplate takes wrong approach at encoding substituted template variables","closed","type: enhancement,","spring-projects-issues","2011-06-05T21:52:27Z","2019-01-11T13:34:16Z"
"","12900","Allow ref= as well as  for  [SPR-8252]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8252](https://jira.spring.io/browse/SPR-8252?redirect=false)** and commented  Allow ref= as well as \ for .  It's a nice feature (to get all handlers injected with the same interceptors), but it makes the interceptors hard to override.   ---  **Affects:** 3.0.5  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-15T08:11:37Z","2019-01-11T12:53:26Z"
"","13517","SPEL: Error message is useless at helping developer resolve problem actual problem, EL1027E:(pos 4): Indexing into type ... [SPR-8876]","**[Darryl L. Miles](https://jira.spring.io/secure/ViewProfile.jspa?name=dlmiles)** opened **[SPR-8876](https://jira.spring.io/browse/SPR-8876?redirect=false)** and commented  After having used Spring Roo to produce a skeleton application to modify (therefore using the best coding conventions and project design). When modifiying such a project I came into a situation that was difficult to solve from readying the Exception message.  org.springframework.expression.spel.SpelEvaluationException: EL1027E:(pos 4): Indexing into type 'com.example.MyParentClass' is not supported  org.springframework.expression.spel.ast.Indexer:174 in method => public TypedValue getValueInternal(ExpressionState state) throws EvaluationException at line => throw new SpelEvaluationException(getStartPosition(),SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE, targetObjectTypeDescriptor.asString());  There is not enough information presented to the developer to have any idea about which thing is the problem. The index/indexValue local variables look very useful at providing the developer anough information to be able to fix the problem. So this bug request that such messages provide information to allow diagnosis of the problem from the message.  The only way to develop is to set a breakpoint and manually inspect the state of Spring internals before allowing it to throw the exception.   --- No further details from [SPR-8876](https://jira.spring.io/browse/SPR-8876?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-11-25T09:47:01Z","2013-02-11T12:32:32Z"
"","12930","BindingResult should not hold on to ConversionService when serialized in session [SPR-8282]","**[Darren Mills](https://jira.spring.io/secure/ViewProfile.jspa?name=dmills)** opened **[SPR-8282](https://jira.spring.io/browse/SPR-8282?redirect=false)** and commented  We have a WebSphere cluster configured with session replication between each node. In order to accomplish this, all objects that end up in the session must be Serializable. We are using the Joda Date/Time Converters in our domain objects which could be contained within a Web Form. Although all of OUR objects are Serializable, our production logs are complaining about the FormattingConversionService not being Serializable.  Another poster confirmed they are seeing the same exception and provided screenshots of their session attributes which included the FormattingConversionService.  Possible solutions may be either making all ConversionService implementations serializable, or changing the Spring behavior of storing the service bean in session, for example, in ServletContext.   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?p=359434  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74b6a5b6d7892200b2d4ab8418421507ff4f0ba0, https://github.com/spring-projects/spring-framework/commit/9472025da708c78e22e00c246d893d90897f240e  7 votes, 14 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-28T06:18:02Z","2017-04-06T15:26:37Z"
"","13315","All diagrams are missing from Reference Manual PDF [SPR-8673]","**[Daniel Serodio](https://jira.spring.io/secure/ViewProfile.jspa?name=dserodio)** opened **[SPR-8673](https://jira.spring.io/browse/SPR-8673?redirect=false)** and commented  The reference manual in PDF form is missing all figures (diagrams)  http://static.springsource.org/spring/docs/3.0.6.RELEASE/spring-framework-reference/pdf/spring-framework-reference.pdf  eg. section ""1.2 Modules"" in page 27 of the PDF  ---  **Affects:** 3.0.6  **Issue Links:** - #13158 pdf documentation doesn't contain images (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-09-08T11:40:31Z","2019-01-12T16:48:37Z"
"","13722","Synchronization issues occur on a form which heavily uses  [SPR-9084]","**[Daniel Mikusa](https://jira.spring.io/secure/ViewProfile.jspa?name=dmikusa)** opened **[SPR-9084](https://jira.spring.io/browse/SPR-9084?redirect=false)** and commented  Given a Spring MVC application which uses the Spring Forms JSP tags for data binding, a page that has a large number of field can cause blocking to occur.  Attached is a thread dump from an actual application which is experiencing this problem.  Also attached is a sample application which can be used to demonstrate the problem.  To run the demo, use the command ""mvn:tomcat"".  Once the application is deployed to Tomcat, run the included JMeter test to put load on the application. As the JMeter test runs, you should see the ""max"" time gradually increasing.  I let it run for about 5 minutes and the max time crept up to around 10 seconds per response.  Taking a thread dump at this time should show the issue.  In addition, I've ran the demo, replicating the problem, and have taken a snapshot with YourKit.  The snapshot is attached.  From the snapshot, it appears that a significant portion of the contention appears to be around the following two items:  ``` http-8080-8 [BLOCKED] CPU time: 0:03 java.util.Collections$SynchronizedMap.get(Object) org.springframework.core.GenericTypeResolver.getTypeVariableMap(Class) org.springframework.core.GenericTypeResolver.resolveParameterType(MethodParameter, Class) org.springframework.core.convert.Property.resolveParameterType(MethodParameter) org.springframework.core.convert.Property.resolveReadMethodParameter() org.springframework.core.convert.Property.resolveMethodParameter() org.springframework.core.convert.Property.(Class, Method, Method) org.springframework.beans.BeanWrapperImpl.property(PropertyDescriptor) org.springframework.beans.BeanWrapperImpl.getPropertyTypeDescriptor(String) org.springframework.validation.AbstractPropertyBindingResult.formatFieldValue(String, Object) org.springframework.validation.AbstractBindingResult.getFieldValue(String) org.springframework.web.servlet.support.BindStatus.(RequestContext, String, boolean) org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus() org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getPropertyPath() org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getName() org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.autogenerateId() org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.resolveId() org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.writeDefaultAttributes(TagWriter) org.springframework.web.servlet.tags.form.AbstractHtmlElementTag.writeDefaultAttributes(TagWriter) org.springframework.web.servlet.tags.form.InputTag.writeTagContent(TagWriter) org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal() org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag() org.apache.jsp.WEB_002dINF.views.home_jsp._jspx_meth_form_005finput_005f0(JspTag, PageContext, int[]) org.apache.jsp.WEB_002dINF.views.home_jsp._jspService(HttpServletRequest, HttpServletResponse) org.apache.catalina.core.ApplicationDispatcher.forward(ServletRequest, ServletResponse) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(Map, HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.view.AbstractView.render(Map, HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.DispatcherServlet.render(ModelAndView, HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.DispatcherServlet.doDispatch(HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.DispatcherServlet.doService(HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.FrameworkServlet.processRequest(HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.FrameworkServlet.doPost(HttpServletRequest, HttpServletResponse) java.lang.Thread.run() ```  and  ``` http-8080-18 [BLOCKED] CPU time: 0:00 java.util.Arrays.equals(Object[], Object[]) org.springframework.util.ObjectUtils.nullSafeEquals(Object, Object) org.springframework.core.convert.TypeDescriptor.equals(Object) org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey.equals(Object) java.util.concurrent.ConcurrentHashMap.get(Object) org.springframework.core.convert.support.GenericConversionService.getConverter(TypeDescriptor, TypeDescriptor) org.springframework.core.convert.support.GenericConversionService.canConvert(TypeDescriptor, TypeDescriptor) org.springframework.validation.AbstractPropertyBindingResult.formatFieldValue(String, Object) org.springframework.validation.AbstractBindingResult.getFieldValue(String) org.springframework.web.servlet.support.BindStatus.(RequestContext, String, boolean) org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus() org.springframework.web.servlet.tags.form.ErrorsTag.shouldRender() org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(TagWriter) org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal() org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag() org.apache.jsp.WEB_002dINF.views.home_jsp._jspService(HttpServletRequest, HttpServletResponse) org.apache.catalina.core.ApplicationDispatcher.forward(ServletRequest, ServletResponse) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(Map, HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.view.AbstractView.render(Map, HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.DispatcherServlet.render(ModelAndView, HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.DispatcherServlet.doDispatch(HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.DispatcherServlet.doService(HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.FrameworkServlet.processRequest(HttpServletRequest, HttpServletResponse) org.springframework.web.servlet.FrameworkServlet.doPost(HttpServletRequest, HttpServletResponse) java.lang.Thread.run() ```  The first item appears to be similar to what is mentioned here in #13343.  The second item appears to be unique.  ---  **Affects:** 3.0.6, 3.1 GA  **Attachments:** - [BindingSyncTest.zip](https://jira.spring.io/secure/attachment/19354/BindingSyncTest.zip) (_26.94 kB_) - [Launcher-2012-02-01-shutdown-2.snapshot.zip](https://jira.spring.io/secure/attachment/19355/Launcher-2012-02-01-shutdown-2.snapshot.zip) (_1.82 MB_) - [threaddump-1326467408882.tdump](https://jira.spring.io/secure/attachment/19353/threaddump-1326467408882.tdump) (_812.05 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/17bbc623c13747bcdf171bbd75ed6b118a3a658b, https://github.com/spring-projects/spring-framework/commit/9e21d2f74127b73e7ef8bab6bb1446f137970fb9  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-01T07:32:34Z","2019-01-11T22:27:42Z"
"","13576","Spring should tell JPA provider to exclude unlisted classes when packagesToScan is used [SPR-8936]","**[Daniel Gredler](https://jira.spring.io/secure/ViewProfile.jspa?name=gredler2)** opened **[SPR-8936](https://jira.spring.io/browse/SPR-8936?redirect=false)** and commented  I'm not sure I'm on solid footing here, but I think there may be a bug in the new feature in Spring 3.1.0 which allows you to omit the persistence.xml file(s) by using the new packagesToScan attribute on the LocalContainerEntityManagerFactoryBean.  The problem is that I have multiple JPA persistence units in my application (i.e. multiple independent persistence.xml files), and if I update my Spring config to take advantage of this new auto-scan functionality, I get an exception when two different persistence.xml files map two classes with the same (unqualified) class name. The reason is that Hibernate is trying to perform its own `@Entity` scanning, even after Spring has already scanned.  Looking at the code, I see that DefaultPersistenceUnitManager.buildDefaultPersistenceUnitInfo() (which does some of the Spring `@Entity` scanning work) appears to try to exclude unlisted classes by calling SpringPersistenceUnitInfo.excludeUnlistedClasses(). However, this method is actually a poorly named getter, although it would be easy to confuse it with something equivalent to setExcludeUnlistedClasses(true). I suspect that this line was actually intended to tell the JPA provider to exclude unlisted classes, but it ends up being a no-op.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0231438cdfa75bcbd34bae28765e2afcb0c4121, https://github.com/spring-projects/spring-framework/commit/01036f0ff5876be996affda71ad4c721f3ee92a5","closed","type: bug,","spring-projects-issues","2011-12-15T13:21:40Z","2012-06-19T03:39:10Z"
"","13603","Allow the use of custom PropertySource annotations in @Configuration classes [SPR-8963]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-8963](https://jira.spring.io/browse/SPR-8963?redirect=false)** and commented  IMHO, there is a mismatch between the configuration possibilities offered by XML and `@Configuration` classes in Spring 3.1, which could be fixed by allowing developers to create custom annotations that could be used in `@Configuration` classes (in the same way as `@PropertySource`) for performing pre-configured infrastructure tasks.  These annotations could perform these configuration tasks ""underneath"", hiding their complexities to Spring users, in the same way namespace handlers can in an XML file.  `@PropertySource` is the clear example to this, as it registers a PropertySource for the specified "".properties"" files, but the object registered is of a specific class hard-coded into Spring's code. This avoids the possibility of creating instances of other implementations of the PropertySource interface that perform more complex processing of .properties entries.  Specifically, the jasypt project [ http://www.jasypt.org ] --of which I'm author-- defines an ""encryption"" XML namespace which allows developers to register an EncryptablePropertySource that performs automatic transparent decryption of properties with """", which works in a way equivalent to """", but applying transparent decryption.  I would love to be able to offer this same easiness of configuration in `@Configuration` classes with an `@EncryptablePropertySource` annotation, but as it happens this is not possible :-(  Please, extend the `@Configuration` mechanism for allowing custom annotations (with their associated handlers).  Thanks.  ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?120147-Can-I-create-my-own-annotations-for-enabling-features-at-Configuration-classes  **Issue Links:** - #16732 Improve `@PropertySource` loading support (_**""is duplicated by""**_) - #14865 Allow `@PropertySource` to be specified on a test class - #16004 Support declarative PropertySource annotations in the TestContext framework - [SEC-3123](https://jira.spring.io/browse/SEC-3123) Encrypted property value support - #18447 Add support for UTF-8 and other charset/encoding to `@PropertySource` - #18574 convertPropertyValue (for reading encrypted values) not working - #16428 Custom `@Profile` annotations not working on `@Configuration` classes - #13568 PropertySourcesPlaceholderConfigurer never calls ""convertProperties"" on merged properties - #15294 Add encryption support for PropertyPlaceholderConfigurer - #17236 Backport encrypted property functionality from spring-cloud-config environment work - #18544 Allow a single element to override an array attribute in a meta-annotation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3789120c9d5d77a7f3946c9d5d809195de6d243  5 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2011-12-27T09:48:42Z","2019-01-13T07:06:53Z"
"","13568","PropertySourcesPlaceholderConfigurer never calls ""convertProperties"" on merged properties [SPR-8928]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-8928](https://jira.spring.io/browse/SPR-8928?redirect=false)** and commented  org.springframework.context.support.PropertySourcesPlaceholderConfigurer is overriding the ""postProcessBeanFactory"" method defined in org.springframework.beans.factory.config.PropertyResourceConfigurer in order to register the required chain of PropertySource objects that will be use for resolving properties. This makes sense and is OK.  But the problem is that the PropertySource object for the local properties (those coming from the ""location"" attribute and also from the ""properties"" property) is being created like this:  PropertySource localPropertySource = new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, this.mergeProperties());  ...whereas in the original ""postProcessBeanFactory"" method in PropertyResourceConfigurer these merged properties are post-processed by executing the ""convertProperties"" method:  Properties mergedProps = mergeProperties(); // Convert the merged properties, if necessary. convertProperties(mergedProps); // Let the subclass process the properties. processProperties(beanFactory, mergedProps);  This means that the new PropertySourcesPlaceholderConfigurer class never calls ""convertProperties"", and so disables one of the extension mechanisms of the old pre-3.1 PropertyPlaceholderConfigurer class: overriding the ""convertProperty(...)"" and ""convertPropertyValue(...)"" methods.  I am jasypt's author http://www.jasypt.org and I am creating a Spring3.1-compatible EncryptedPropertySourcesPlaceholderConfigurer, but this bug doesn't allow me to transparently apply property decryption at the ""convertProperty"" method :-(  ---  **Affects:** 3.1 GA  **Issue Links:** - #18574 convertPropertyValue (for reading encrypted values) not working (_**""is duplicated by""**_) - #13603 Allow the use of custom PropertySource annotations in `@Configuration` classes - [SEC-3123](https://jira.spring.io/browse/SEC-3123) Encrypted property value support - #15294 Add encryption support for PropertyPlaceholderConfigurer - #17236 Backport encrypted property functionality from spring-cloud-config environment work  8 votes, 18 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-12-14T18:22:22Z","2022-06-24T06:28:22Z"
"","13756","ResourceHttpRequestHandler OSGiBundleResource contentLength [cannot be resolved to absolute file path] [SPR-9118]","**[Dan Ziggas](https://jira.spring.io/secure/ViewProfile.jspa?name=dziggas)** opened **[SPR-9118](https://jira.spring.io/browse/SPR-9118?redirect=false)** and commented  Related to:  https://jira.springsource.org/browse/OSGI-818  When using  in an OSGi container, ResourceHttpRequestHandler calls setHeaders on an OsgiBundleReesource (resource)  ``` 	protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException { 		long length = resource.contentLength(); 		if (length > Integer.MAX_VALUE) { 			throw new IOException(""Resource content too long (beyond Integer.MAX_VALUE): "" + resource); 		} 		response.setContentLength((int) length);  		if (mediaType != null) { 			response.setContentType(mediaType.toString()); 		} 	} ```  In this case, resource.contentLength delegates to AbstractResource, which calls:  ``` public long contentLength() throws IOException {      return getFile().length(); } ```  This results in a somewhat spurious log message of:  ``` java.io.FileNotFoundException: OSGi resource[/resources/css/some.css|bnd.id=43|bnd.sym=com.foo.bar.some.controller] cannot be resolved to absolute file path [INFO] [talledLocalContainer] 	at org.springframework.osgi.io.OsgiBundleResource.getFile(OsgiBundleResource.java:345) [INFO] [talledLocalContainer] 	at org.springframework.core.io.AbstractResource.contentLength(AbstractResource.java:116) [INFO] [talledLocalContainer] 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setHeaders(ResourceHttpRequestHandler.java:221) [INFO] [talledLocalContainer] 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:134) [INFO] [talledLocalContainer] 	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) [INFO] [talledLocalContainer] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900) [INFO] [talledLocalContainer] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827) [INFO] [talledLocalContainer] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:882) [INFO] [talledLocalContainer] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:778) [INFO] [talledLocalContainer] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) [INFO] [talledLocalContainer] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) ```  If instead the size was pulled from the InputStream, this could be avoided.  To bypass this, extending ResourceHttpRequestHandler and using:  ```    long length = IOUtils.toByteArray(resource.getInputStream()).length ```  seems to do the trick.   ---  **Affects:** 3.1 GA","closed","type: bug,","spring-projects-issues","2012-02-13T15:04:58Z","2012-06-19T03:39:27Z"
"","13536","Hibernate Class Level Validators cause IllegalArgument Exception [SPR-8895]","**[Dan Ford](https://jira.spring.io/secure/ViewProfile.jspa?name=webdaford)** opened **[SPR-8895](https://jira.spring.io/browse/SPR-8895?redirect=false)** and commented  When a class level validator is  invoked during ""binding"" of an input form with a ""form object""/Bean, its failure to validate at the class level is treated as a ""FieldError"".  This causes an IllegalArgumentException to be reported later from GenericConvesionService.convert() when it attempts to convert the Bean (i.e., the ""value"") to the type of the field, e.g., to String.  This issue does not exist in 3.1.0.RC1. From 3.1.0.RC1 to 3.1.0.RC2, there was a change to SpringValidatorAdapter.validate(Object,Errors) that seems to be one/the source of this problem.  Attached is an Eclipse/Maven project that demonstrates the issue.  The pom.xml file has two profiles one for 3.1.0RC1 and one for 3.1.0.RC2.  There are two Eclipse launch configurations defined that invoke Maven with one or the other profile active.  Maven will start up Jetty and then run a single Selenium test that provides two different ""passwords"" for a ""new user page"".  A ""`@Matches`"" validator will be called to compare these two values and will return ""false"" because they are different.  The current logic seems to treat this as a ""binding failure"" and associates the Bean instance (the value being validated) with the ""confirmationPassword"" field as its ""invalid value.""  The conversion service later tries to convert the Bean to a String, the type of the field, which causes the IllegalArgumentException to be thrown.  ---  **Affects:** 3.1 RC2  **Attachments:** - [RC2Bug.zip](https://jira.spring.io/secure/attachment/19194/RC2Bug.zip) (_46.29 kB_)  **Issue Links:** - #13276 NumberFormatException caused by property paths from JSR-303 based validation with no index into a collection  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aedccec67efc5512d0e39f5c888dc876625e2d4f","closed","in: core,","spring-projects-issues","2011-12-05T11:57:22Z","2019-01-11T15:06:48Z"
"","13577","java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods:  [SPR-8937]","**[Dan Avila](https://jira.spring.io/secure/ViewProfile.jspa?name=davila)** opened **[SPR-8937](https://jira.spring.io/browse/SPR-8937?redirect=false)** and commented  This is an extension to https://jira.springsource.org/browse/SPR-8491.  I have a bean that extends a JTable. When that bean is created, I see the following error:  java.beans.IntrospectionException: type mismatch between indexed and non-indexed methods: rowHeight  JTable has two setter methods: * setRowHeight(row, rowHeight); * setRowHeight(rowHeight);  I'm guessing the first method is the culprit.  This problem is preventing me from upgrading to 3.1.0.RELEASE from 3.0.6.RELEASE.  I did not explore much to find a workaround.  ---  **Affects:** 3.1 GA  **Attachments:** - [SPR-8937-indexed-property-test.zip](https://jira.spring.io/secure/attachment/19329/SPR-8937-indexed-property-test.zip) (_9.72 kB_)  **Issue Links:** - #14663 Overhaul non-void JavaBean write method support - #13571 Regression - Introspection with BeanUtils started failing for java.math.BigDecimal - #17183 ExtendedBeanInfo test fails on JDK 8u40 Build b19  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2011-12-15T16:41:27Z","2019-01-11T14:26:59Z"
"","13584","TypeConverterDelegate no longer processes ConversionService ParseException when converting to String [SPR-8944]","**[Damon Maria](https://jira.spring.io/secure/ViewProfile.jspa?name=machine)** opened **[SPR-8944](https://jira.spring.io/browse/SPR-8944?redirect=false)** and commented  In Spring 3.0 if a Formatter.parse used by Spring MVC threw a ParseException then an error would be added to the BindingResult.  This commit https://fisheye.springsource.org/changelog/spring-framework?cs=4453 however breaks this behaviour for Formatters that are typed as Formatter\. This is because the checks after the parse failure in TypeConverterDelegate think the conversion has succeeded because the original value is a String and the type it's converting to is a String.  This produces the logger debug: ""Original ConversionService attempt failed - ignored since PropertyEditor based conversion eventually succeeded"". But this is incorrect because there is no PropertyEditor (local variable 'editor' is null).   ---  **Affects:** 3.1 GA","closed","in: core,","spring-projects-issues","2011-12-18T18:15:12Z","2012-06-19T03:39:49Z"
"","13531","AspectJ @Transactional aspect uses runtime checks [SPR-8890]","**[Dale Peakall](https://jira.spring.io/secure/ViewProfile.jspa?name=dale_peakall)** opened **[SPR-8890](https://jira.spring.io/browse/SPR-8890?redirect=false)** and commented  The AspectJ support for the `@Transactional` annotation uses pointcuts that include ""runtime"" conditions.  These conditions mean that every method on every object processed by AspectJ will be weaved with code that checks for the presence of the annotation at runtime.  This is hugely inefficient.  The pointcuts can be rewritten so AspectJ only weaves code into the classes that have actually been annotated.  ``` private pointcut executionOfAnyPublicMethodInAtTransactionalType() :   execution(public * ((@Transactional *)+).*(..)) && @this(Transactional);  private pointcut executionOfTransactionalMethod() :   execution(* *(..)) && @annotation(Transactional); ```  ``` private pointcut executionOfAnyPublicMethodInAtTransactionalType() :   execution(public * ((@Transactional *)+).*(..)) && within(Transactional);  private pointcut executionOfTransactionalMethod() :   execution(@Transactional * *(..)); ```    ---  **Affects:** 3.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f74789ffbe1a671aaf8175987e6f68afd639f5a6, https://github.com/spring-projects/spring-framework/commit/5ab2bf16a5453f3d54db589a92c3ec4bc553f8d2, https://github.com/spring-projects/spring-framework/commit/3a62aa053e6bff3d96d4c1b8640a29f06e0517c5, https://github.com/spring-projects/spring-framework/commit/a347e4d3c2bdea343f8e7cb7eef399e77ed52cea","closed","type: enhancement,","spring-projects-issues","2011-12-01T08:25:55Z","2012-06-19T03:39:30Z"
"","13124","Project uploaded for to get the clarification of forum thread [SPR-8478]","**[Daitari Jena](https://jira.spring.io/secure/ViewProfile.jspa?name=jenad)** opened **[SPR-8478](https://jira.spring.io/browse/SPR-8478?redirect=false)** and commented  Hi,  Please find the below attachment, in this project `@AfterThrowing` is also returning normally to method.  Please download the project and run the ExceptionTest class.  Thanks jenad   ---  **Reference URL:** http://forum.springsource.org/showthread.php?110833-Issue-in-AfterThrowing-in-aop&goto=newpost  **Attachments:** - [Test.zip](https://jira.spring.io/secure/attachment/18388/Test.zip) (_6.07 MB_)","closed","status: invalid,","spring-projects-issues","2011-06-21T23:00:26Z","2019-01-12T05:30:10Z"
"","13106","Issue in Spring Java Config with AOP [SPR-8460]","**[Daitari Jena](https://jira.spring.io/secure/ViewProfile.jspa?name=jenad)** opened **[SPR-8460](https://jira.spring.io/browse/SPR-8460?redirect=false)** and commented  I have created a sample project.I am using Spring Java Config with aop. The purpose of the project is whenever any exception occured in service method, afterThrowing() will invoke and it will print something in console.  Please find the attached sample projec and run the ExampleTest.java. And in exampleService.java method1() will throw Arithmatic exception.At that time it invoke afterThrowing() of AOPException.java. but it is not executing that method. Please have a look in my code and let me know what is the wrong in my code.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?110704-Spring-AOP-in-Java-Config  **Attachments:** - [Test.zip](https://jira.spring.io/secure/attachment/18349/Test.zip) (_5.91 kB_)","closed","in: core,","spring-projects-issues","2011-06-16T06:15:08Z","2019-01-12T05:30:11Z"
"","13590","Converting empty form inputs into null using a custom Converter causes backing object fields to be populated with the string ""null"" [SPR-8950]","**[Cyrus Coffman](https://jira.spring.io/secure/ViewProfile.jspa?name=ccoffman)** opened **[SPR-8950](https://jira.spring.io/browse/SPR-8950?redirect=false)** and commented  In our application we have 2 needs: 1) empty form fields should become nulls in the DB (rather than the empty string) 2) register custom formatters on some string fields (ex. formatting phone, ssn, etc)  Initally we registered a StringTrimmerEditor but this caused our custom formatter to never get called. This is due to the following code in TypeConverterDelegate:  ```java PropertyEditor editor = this.propertyEditorRegistry.findCustomEditor(requiredType, propertyName);  		// No custom editor but custom ConversionService specified? 		ConversionService conversionService = this.propertyEditorRegistry.getConversionService(); 		if (editor == null && conversionService != null && convertedValue != null) { 			TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(convertedValue); 			TypeDescriptor targetTypeDesc = typeDescriptor.forElementType(requiredType); 			if (conversionService.canConvert(sourceTypeDesc, targetTypeDesc)) { 				return (T) conversionService.convert(convertedValue, sourceTypeDesc, targetTypeDesc); 			} 		} ```  The above code prefers a property editor over a conversion service so the StringTrimmerEditor is being selected rather than the Wrapped Formatter object.  According to Keith in ##12201, we need to create a custom EmptyStringToNull converter, We did this, registered it with the conversion service instead of the StringTrimmerEditor and got slightly different behavior.  At this point we now have the backing bean field being populated with the string ""null"". It turns out this is because the WebDataBinder has String[] as input and therefore ArrayToStringConverter (which delegates to CollectionToStringConverter) gets called.  CollectionToStringConverter loops over collection elements, converts each to a string and concatanates them together as shown below:  ```java StringBuilder string = new StringBuilder(); int i = 0; for (Object sourceElement : sourceCollection) {   if (i > 0) {     string.append(DELIMITER);   }   Object targetElement = this.conversionService.convert(       sourceElement, sourceType.getElementTypeDescriptor(sourceElement), targetType);   string.append(targetElement);   i++; } return string.toString(); ```  StringBuilder.append takes the null value returned from the custom converter and appends it as ""null"".  We are not quite sure how to proceed at this point. It seems that maybe the CollectionToStringConverter should check the length of the input collection (always 1 for single fields and have alternate behavior). Or it should check the return value of the converter and if null not append it. (and maybe return null if all elements converted to null).  Is there a better place to handle all of this. (extend WebRequestDataBinder?)  Thanks  ---  **Affects:** 3.0.6","closed","in: web,","spring-projects-issues","2011-12-20T09:51:43Z","2019-01-11T14:32:37Z"
"","13092","Flexible response status handling in REST environment, deprecates @ResponseStatus annotated exceptions [SPR-8446]","**[Crummy Nickname](https://jira.spring.io/secure/ViewProfile.jspa?name=crummynickname)** opened **[SPR-8446](https://jira.spring.io/browse/SPR-8446?redirect=false)** and commented  `@ResponseStatus` attributes are inflexible for some use cases, therefore....  Interface ResponseStatusProvider is introduced, which is to be implemented by exceptions, which are to be caught by a RestExceptionResolver. RestException is introduced, which is CHECKED. It handles expected application conditions, e.g. HttpStatus.NOT_FOUND RestRuntimeException is introduced, which is UNchecked. It handles UNexpected application conditions, e.g. HttpStatus.INTERNAL_SERVER_ERROR  The Spring team is to decide which conditions result in what exceptions, after careful thought, then implement them as appropriate.  `@ResponseStatus` EXCEPTION usage is to be deprecated. Method usage is to be considered normal and application developers SHOULD use 'normal' status codes there.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?110595  **Attachments:** - [source code.zip](https://jira.spring.io/secure/attachment/18334/source+code.zip) (_1.58 kB_)","closed","type: enhancement,","spring-projects-issues","2011-06-13T05:56:41Z","2011-06-15T03:31:27Z"
"","13553","Support SpEL in log4jConfigLocation parameter to Log4jConfigListener [SPR-8913]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-8913](https://jira.spring.io/browse/SPR-8913?redirect=false)** and commented  In web.xml, log4j can be configured as:  ```xml    log4jConfigLocation   /WEB-INF/log4j.xml     org.springframework.web.util.Log4jConfigListener  ```  It would be nice if instead of just being able to use system properties (see #5991) and classpath references (#5435), we could also use SpEL. For example, that would make something like this possible:  ```xml    log4jConfigLocation   #{systemEnvironment['env']=='dev'?'classpath:log4j.xml':'file:/home/tomcat/current/conf/log4j.xml'}     org.springframework.web.util.Log4jConfigListener  ```  (Let's please overlook why the configuration would look exactly like that... it's just an example.)  ---  **Affects:** 3.1 RC2","closed","status: bulk-closed,","spring-projects-issues","2011-12-12T13:39:55Z","2019-01-12T02:36:44Z"
"","13391","Need a way to disable behavior added in ""Automatically expose @PathVariables in the Model"" SPR-7543 [SPR-8749]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-8749](https://jira.spring.io/browse/SPR-8749?redirect=false)** and commented  #12200 made the change to automatically expose `@PathVariables` in the model. However, that change makes the means used to ""unwrap"" json, which rely on the Model having exactly 1 item in it, not work. For instance, the workout around posted here: http://pascaldimassimo.com/2010/04/13/how-to-return-a-single-json-list-out-of-mappingjacksonjsonview/ no longer works, nor does the configuration option http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/servlet/view/json/MappingJacksonJsonView.html#setExtractValueFromSingleKeyModel%28boolean%29 do anything any more.  There needs to be a way to disable automatically exposing `@PathVariables` in the model.  ---  **Affects:** 3.1 M2  **Issue Links:** - #12200 Automatically expose `@PathVariables` in the Model","closed","type: bug,","spring-projects-issues","2011-10-07T12:38:13Z","2019-01-13T07:07:38Z"
"","13389","@RequestMapping at class level and @RequestMapping at method level with same value does not map properly (3.1 regression) [SPR-8747]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-8747](https://jira.spring.io/browse/SPR-8747?redirect=false)** and commented  This is a regression from Spring 3.0.5 to Spring 3.1M2.  Using the default Spring MVC configuration of .  `@RequestMapping`(""/test"") public class Test { `@RequestMapping`(""test"") public String test { return ""something""; } }  Then make an HTTP request to ""/test/test"" In Spring 3.0.5, the test method is called. In Spring 3.1M2, the test is not called (verified using a debugger), and Spring returns a 404.   ---  **Affects:** 3.1 M2","closed","in: web,","spring-projects-issues","2011-10-06T14:45:53Z","2019-01-11T14:03:55Z"
"","13248","MappingJacksonHttpMessageConverter should have getObjectMapper() method [SPR-8605]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-8605](https://jira.spring.io/browse/SPR-8605?redirect=false)** and commented  org.springframework.http.converter.json.MappingJacksonHttpMessageConverter has a setObjectMapper() method, but no getObjectMapper method. There are cases where getting the object mapper would be useful, and I don't see any downside to allow this.   ---  **Affects:** 3.0.6, 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/540845e61315f811e87dc96984bcbc036633a987, https://github.com/spring-projects/spring-framework/commit/3f7dccddd244ad8a81714a15c520a0a980813da8  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-08-10T10:42:35Z","2012-06-19T03:39:13Z"
"","13247","Add static factory methods to RequestCallback and ResponseExtractor [SPR-8604]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-8604](https://jira.spring.io/browse/SPR-8604?redirect=false)** and commented  I'm attempting to use RestTemplate.execute() and it takes a RequestCallback instance and a ResponseExtractor instance as parameters. It seems that I should be able to use (via direct instantiation or inheritance) the really useful RestTemplate implementations of these interfaces, but they're all marked private. Can they please be marked public?   ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/79e809be24157b621ba8f8d569269c3c9fb3783f  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2011-08-10T10:40:37Z","2019-01-11T14:18:46Z"
"","13194","Provide controller method level alternative to WebContentInterceptor [SPR-8550]","**[Craig Walls](https://jira.spring.io/secure/ViewProfile.jspa?name=habuma)** opened **[SPR-8550](https://jira.spring.io/browse/SPR-8550?redirect=false)** and commented  Even though WebContentInterceptor can be used to declare when and how cache-control headers are set in a response, it isn't as straightforward or consistent with the `@Controller` model.  I propose an annotation-based option for declaring when cache-control headers are added to a response. For example, a general-purpose `@CachePolicy` annotation might be used like this:  ``` @CachePolicy(maxAge=60) @RequestMapping(value=""/headlines"", method=RequestMethod.GET) public String showHeadlines() { ... } ```  Also, perhaps a more specific-purpose `@PreventCaching` annotation might declare that a response include the headers currently added by WebContentGenerator's preventCaching() method.  These two annotations are just suggestions--I'd be interested in any solution that allows for declarative cache policies at the request method level.  ---  **Affects:** 3.0.6  This issue is a sub-task of #16413  **Issue Links:** - #13886 WebContentInterceptor.preHandle(request, response, handler), handler of type HandlerMethod not controller instance - #7466 HTTP caching should be decoupled from WebContentGenerator - #11789 Add support for public/private Cache-Control HTTP header - #18290 Regression: ShallowEtagHeaderFilter does not add Etag header for ResponseEntity returning methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9ce11eef8b05e7e31b45a428d63ae35eed8ed42  10 votes, 17 watchers","closed","has: votes-jira,","spring-projects-issues","2011-07-20T21:00:11Z","2019-01-11T13:22:15Z"
"","13156","ContextLoaderListener overwriting config location set in WebApplicationContext [SPR-8510]","**[Craig Walls](https://jira.spring.io/secure/ViewProfile.jspa?name=habuma)** opened **[SPR-8510](https://jira.spring.io/browse/SPR-8510?redirect=false)** and commented  When creating a ContextLoaderListener programmatically in a WebApplicationInitializer, I'd expect to be able to set the config location on the context like this:  ```java XmlWebApplicationContext context = new XmlWebApplicationContext(); context.setConfigLocation(""/WEB-INF/spring/root-context.xml""); ContextLoaderListener contextLoaderListener = new ContextLoaderListener(context); container.addListener(contextLoaderListener); ```  Doing so would be consistent with how I can set the config location when programmatically creating a DispatcherServlet.  But this doesn't work because ContextLoader.configureAndRefreshWebApplicationContext() overwrites the config location with whatever the ""contextConfigLocation"" init parameter is set to (if it's not set, then it sets it to null, which in the case of XmlWebApplicationContext makes it try to load the default applicationContext.xml).  The workaround is to set the ""contextConfigLocation"" init param. But this is inconsistent with how it works with DispatcherServlet.   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/23e58aa718f7575dad14d2f00be15ff2896ef57a","closed","type: bug,","spring-projects-issues","2011-07-05T06:24:02Z","2012-06-19T03:39:35Z"
"","12911","Reading typed lists with RestTemplate [SPR-8263]","**[Craig Walls](https://jira.spring.io/secure/ViewProfile.jspa?name=habuma)** opened **[SPR-8263](https://jira.spring.io/browse/SPR-8263?redirect=false)** and commented  With RestTemplate's methods, it is possible to request an object of a specific type...e.g.:  Foo foo = restTemplate.getForObject(""some uri"", Foo.class);  But if I want to retrieve a list of Foos, this won't work:  List\ foos = restTemplate.getForObject(""some uri"", List.class);  Because there's no way to specify the type of the List to return, I get back a List of Map instead. It'd be nice if there was a way to specify the List's generic type so that I can get back a List\ and not have to extract Foo objects from Map objects.   ---  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-19T08:17:49Z","2019-01-11T12:52:53Z"
"","13639","Support script evaluation declaration (not just for backing beans) [SPR-8999]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-8999](https://jira.spring.io/browse/SPR-8999?redirect=false)** and commented  The scripting support currently allows Spring beans to be written in a scripting language however it is not possible to simply evaluate/execute a script (and potentially use the returning value as a bean).  ---  **Issue Links:** - #8737 Implement Jython support in spring-scripting","closed","type: enhancement,","spring-projects-issues","2012-01-05T23:12:05Z","2019-01-11T14:37:38Z"
"","13475","reconsider ValueWrapperImpl name [SPR-8833]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-8833](https://jira.spring.io/browse/SPR-8833?redirect=false)** and commented  ValueWrapperImpl introduced in RC1 seems to break the existing naming conventions in Spring - there's only another Impl class. I suggest the name to be changed before the actual GA - annoying but doable - to something more common like SimpleValueWrapper ?   ---  **Affects:** 3.1 RC1","closed","type: enhancement,","spring-projects-issues","2011-11-09T10:33:15Z","2012-06-19T03:39:00Z"
"","13473","improved ResourceLoader contract in AbstractApplicationContext [SPR-8831]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-8831](https://jira.spring.io/browse/SPR-8831?redirect=false)** and commented  The way AbstractApplicationContext implements the ResourceLoader contract could be improved: (a) it should delegate the getResource() call (just like it does with getResources()). Otherwise, one can get into a strange situation where getResource() differs from getResources() if a different PatternResourceResolver is set then the default one. (b) alllow a ResourceLoader to be set externally (AAC.setResourceLoader()) - this solves (a) and also allow beans to programmatically configure the ApplicationContext even after it has been constructed.   ---  **Affects:** 3.1 RC1","closed","type: enhancement,","spring-projects-issues","2011-11-09T10:15:08Z","2015-09-22T17:34:35Z"
"","13472","introduce meta annotation for declaring multiple @Cache annotations [SPR-8830]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-8830](https://jira.spring.io/browse/SPR-8830?redirect=false)** and commented  Currently only one `@Cache` annotation can be defined per method. This needs to be loosen so that multiple `@Cache` annotations are supported on the same method both for declaration and interception.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc88a7c8ba8dfeacfb8a37fa4e510b73c7cae4a0","closed","type: enhancement,","spring-projects-issues","2011-11-09T02:02:34Z","2012-06-19T03:39:14Z"
"","13405","NPE when injecting @Value into @Configuration methods [SPR-8762]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-8762](https://jira.spring.io/browse/SPR-8762?redirect=false)** and commented  Given the following class:  > `@Configuration` > public class NamespaceBasedConfiguration { >  > `@Bean` > public FactoryBean\ classConfiguredJob(`@Value`("""") String > inputPath,`@Value`("""") String outputPath) throws Exception { > ... > } > } >  >  > In my case I'm using component-scanning which detects, the class, tries > to apply Autowiring which calls metadata.inject() which ends up calling > AbstractAutowireCapableBeanFactory#getTypeForFactoryBean() specifically > line 683: >  > Method m = ReflectionUtils.findMethod(fbClass, factoryMethodName); > objectType = GenericTypeResolver.resolveReturnTypeArgument(m, > FactoryBean.class); >  >  > This results in a NPE since m above is null and that's because the > findMethod looks for a ""classConfiguredJob"" with NO params (which is not > the case with this class).    ---  **Affects:** 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/48836e2ebb5990d9dd2f7656c0dfb66650b49e0d  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2011-10-12T07:39:43Z","2012-06-19T03:39:44Z"
"","13126","Type conversion not applied on @Resource annotation [SPR-8480]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-8480](https://jira.spring.io/browse/SPR-8480?redirect=false)** and commented  See https://jira.springsource.org/browse/DATAKV-51  Basically it seems that for `@Resource` (as opposed to `@Value`) the container does not perform type conversion which prevents injection of compatible types.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4664366aca471bdd1aeda81e736cf3220ee6d58b, https://github.com/spring-projects/spring-framework/commit/d8a4949fafab0d61f48bbe05a23b5c4982d4601f, https://github.com/spring-projects/spring-framework/commit/e0d558b084c65453b15ad913a81e1785ec606877","closed","type: enhancement,","spring-projects-issues","2011-06-22T11:08:10Z","2012-06-19T03:39:03Z"
"","12982","duplicate CacheManager classes [SPR-8334]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-8334](https://jira.spring.io/browse/SPR-8334?redirect=false)** and commented  SimpleCacheManager and MapCacheManager are identical and one of them should be eliminated.   ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/700a02b094921d223e1bbc3bcccf8a1f9bc4febe, https://github.com/spring-projects/spring-framework/commit/cc519e7c6d6a74e1549a08f57a0929de02bad0a9","closed","in: core,","spring-projects-issues","2011-05-12T23:14:37Z","2012-06-19T03:39:22Z"
"","12946","cache mutable operations should not return values [SPR-8298]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-8298](https://jira.spring.io/browse/SPR-8298?redirect=false)** and commented  Currently the cache mutable operations return the old values which causes extra strain especially for distributed caches.  See http://www.devwebsphere.com/devwebsphere/2011/05/spring-cache-v31-initial-thoughts-on-their-generic-cache-api-design.html   --- No further details from [SPR-8298](https://jira.spring.io/browse/SPR-8298?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-05-06T03:07:20Z","2012-06-19T03:39:28Z"
"","12893","System environment related tests fail on Windows [SPR-8245]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-8245](https://jira.spring.io/browse/SPR-8245?redirect=false)** and commented  See also http://blog.springsource.com/2009/03/03/building-spring-3/#comment-192070  ```     [junit] Testcase: getSystemEnvironment_withAndWithoutSecurityManager(org.spr ingframework.core.env.EnvironmentTests):        FAILED     [junit]     [junit] Expected: ""42""     [junit]      got: null     [junit]     [junit] junit.framework.AssertionFailedError:     [junit] Expected: ""42""     [junit]      got: null     [junit]     [junit] Expected: ""42""     [junit]      got: null     [junit]     [junit]     at org.springframework.core.env.EnvironmentTests.getSystemEnviro nment_withAndWithoutSecurityManager(EnvironmentTests.java:263)  from the JUnit XML report:             junit.framework.AssertionFailedError:  Expected: ""42""      got: null  Expected: ""42""      got: null  	at org.springframework.core.env.EnvironmentTests.getSystemEnvironment_withAndWithoutSecurityManager(EnvironmentTests.java:263)  ```    ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18299/mylyn-context.zip) (_856 bytes_) - [SPR-8245_EnvironmentTests.java.patch](https://jira.spring.io/secure/attachment/18240/SPR-8245_EnvironmentTests.java.patch) (_2.11 kB_) - [SPR-8245.patch](https://jira.spring.io/secure/attachment/18304/SPR-8245.patch) (_5.22 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/385d8e9482dabee9ec764756c30bc59aedcf5a69, https://github.com/spring-projects/spring-framework/commit/67661693fe30a9ad173239fdcf620a23f19f5ed8, https://github.com/spring-projects/spring-framework/commit/14d50e3482fa0520e2f2ef21602ff20e569ffe6d  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2011-04-12T18:50:17Z","2019-01-11T12:53:47Z"
"","13734","StringHttpMessageConverter should use HttpServletRequest encoding for POST body [SPR-9096]","**[Cormac Blackwell](https://jira.spring.io/secure/ViewProfile.jspa?name=cormacb)** opened **[SPR-9096](https://jira.spring.io/browse/SPR-9096?redirect=false)** and commented  When converting a POST body StringHttpMessageConverter tries to get the character set from the content type header and defaults to ISO-8859-1 if it can't find it:  MediaType contentType = inputMessage.getHeaders().getContentType(); Charset charset = contentType.getCharSet() != null ? contentType.getCharSet() : DEFAULT_CHARSET;  It doesn't look at the ServletRequest encoding (no doubt influenced by a design that uses yet another HTTP request wrapper). This means that if you use a servlet filter that sets the request encoding, or if the servlet container sets the encoding, that encoding will be ignored.  This breaks a common solution to encoding issues of using org.springframework.web.filter.CharacterEncodingFilter to set UTF-8 encoding by default.  StringHttpMessageConverter should respect the environment it runs in and use the servlet request encoding.  ---  **Affects:** 3.0.7, 3.1 GA  **Issue Links:** - #13737 Change StringHttpMessageConverter.DEFAULT_CHARSET value to UTF-8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/edc80ffa956214922ff4892250032a689676f720","closed","type: bug,","spring-projects-issues","2012-02-07T04:03:38Z","2019-01-11T22:26:51Z"
"","13419","java.lang.NoSuchMethodError: org.hibernate.SessionFactory.openSession()Lorg/hibernate/classic/Session; [SPR-8776]","**[chun ping wang](https://jira.spring.io/secure/ViewProfile.jspa?name=cablepuff)** opened **[SPR-8776](https://jira.spring.io/browse/SPR-8776?redirect=false)** and commented  Hi when i ran a unit test with hibernate 4 i get this error.  java.lang.NoSuchMethodError: org.hibernate.SessionFactory.openSession()Lorg/hibernate/classic/Session; at org.springframework.orm.hibernate4.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:328) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:371) at org.springframework.test.context.transaction.TransactionalTestExecutionListener$TransactionContext.startTransaction(TransactionalTestExecutionListener.java:513) at org.springframework.test.context.transaction.TransactionalTestExecutionListener.startNewTransaction(TransactionalTestExecutionListener.java:271) at org.springframework.test.context.transaction.TransactionalTestExecutionListener.beforeTestMethod(TransactionalTestExecutionListener.java:164) at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:358) at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:73) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30) at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83) at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) at org.junit.runners.ParentRunner.run(ParentRunner.java:300) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:119) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:101)  Here is my xml configuration: \ \ \ \ \ \           	       ---  **Affects:** 3.1 RC1  **Issue Links:** - [SWF-1534](https://jira.spring.io/browse/SWF-1534) Support Hibernate 4 - #13548 org.springframework.orm.hibernate4.HibernateTransactionManager fails with NoSuchMethodError against SessionFactory.getCurrentSession()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0dfb617d8a13dc8e37d78d40f296e9daf345b2e6, https://github.com/spring-projects/spring-framework/commit/439b7750d4750722a03d60465da2e4b62bbcf626  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2011-10-13T23:32:27Z","2019-01-11T14:06:27Z"
"","12945","Debug logging forces instantiation of scoped beans [SPR-8297]","**[Christopher Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=cwong15)** opened **[SPR-8297](https://jira.spring.io/browse/SPR-8297?redirect=false)** and commented  When the logging level is set to DEBUG, certain scoped beans -- normally protected behind scoped proxies -- are instantiated. This is because of the class:  org.springframework.core.convert.support.GenericConversionService  The convert() method (line 159) will, when debug logging is enabled, invoke StylerUtils.style() on the bean. This ends up calling toString() on the proxy, forcing instantiation of the underlying bean. In my case, the bean (an instance of UserContext) is request-scoped, so the bean instantiation fails outside of a request context. Stack trace follows.  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.userContext': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request. at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:339) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:653) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:604) at com.lifeimage.common.model.UserContext$$EnhancerByCGLIB$$a3fff27e.toString(\) at java.lang.String.valueOf(Unknown Source) at org.springframework.core.style.DefaultValueStyler.style(DefaultValueStyler.java:78) at org.springframework.core.style.StylerUtils.style(StylerUtils.java:47) at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:159) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:141) at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:447) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:499) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:493) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1371) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1330) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) ... 58 more Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request. at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131) at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:40) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325) ... 75 more   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c51b9a7be2c310cfacc7ee6ba3357923b0c8ee6d, https://github.com/spring-projects/spring-framework/commit/b6e82048fc838ebbb2e58288eeda0c14119d38b9","closed","in: core,","spring-projects-issues","2011-05-05T12:40:06Z","2012-06-19T03:39:54Z"
"","13771","Allow autowiring of empty collection in @Bean method parameters using java.util.Optional [SPR-9132]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-9132](https://jira.spring.io/browse/SPR-9132?redirect=false)** and commented  The autowire semantics for collection types assume that at least one matching bean will be found to be injected.  The new `@Configuration` syntax with parameter injection, however, does not have analog to `@Autowired`'s required=false.  Changing to field injection is an inelegant workaround, and it would be cleaner to have an `@AllowEmpty` or similar parameter annotation for the new syntax.  ---  **Affects:** 3.1.1  **Issue Links:** - #16452 Support for java.util.Optional with `@Inject` (a la `@Autowired`'s required=false)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d2231541ba3629b9a51773fa4a3ddfc50485e29  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2012-02-18T13:23:33Z","2019-01-13T07:06:13Z"
"","13222","Logging of @Configuration processor when mixing Java and XML [SPR-8578]","**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[SPR-8578](https://jira.spring.io/browse/SPR-8578?redirect=false)** and commented  I'm using a mix of XML files and `@Configuration` files.  When I'm launching the webapp, the logs tells me everything about the XML files but nothing about `@Configuration` :  ``` [STDOUT]org.springframework.beans.factory.xml.XmlBeanDefinitionReader 2011-08-02 09:39:03,842 -- INFO -- Loading XML bean definitions from class path resource [appContext-eppk.xml] ... /*one line per xml file, even when the xml file is imported*/ ```  What I'd like is a way to tell what `@Configuration` files are also used AND, most importantly, what beans XML configuration have overridden.  For example, this is usefull to diagnose a not so obvious configuration problem when you have an xml file that is replaced at deployment and contains beans that are not in the `@Configuration` anymore (and so, you have a prod system runnig with a part of the dev conf...)   --- No further details from [SPR-8578](https://jira.spring.io/browse/SPR-8578?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-08-02T00:50:10Z","2018-12-26T09:17:01Z"
"","13221","Documentation of AnnotationConfigApplicationContext default constructor [SPR-8577]","**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[SPR-8577](https://jira.spring.io/browse/SPR-8577?redirect=false)** and commented  The documentation says : Create a new AnnotationConfigApplicationContext that needs to be populated through {`@link` #add} calls and then manually {`@link` #refresh refreshed}.  It must have said #register instead of #add  This is not big deal, just confusing   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2011-08-02T00:43:04Z","2012-06-19T03:39:16Z"
"","13187","@PathVariable incorrect matching [SPR-8543]","**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[SPR-8543](https://jira.spring.io/browse/SPR-8543?redirect=false)** and commented  This is nearly the same as #10038  I have a controller with 2 methods :  ```java @RequestMapping(value=""/lov/{type}"", method=RequestMethod.GET) public EPpkResult listRuleSetsDto(@PathVariable(""networkId"") String networkId, @PathVariable(""libraryId"") String libraryId, @PathVariable(""type"") String type) { ... } 	 @RequestMapping(value=""/{type}"", method=RequestMethod.GET) public EPpkResult listRuleSets(@PathVariable(""networkId"") String networkId, @PathVariable(""libraryId"") String libraryId, @PathVariable(""type"") String type) { ... } ```  When I call the first method with url = /networks/xxx/libraries/xxx/rule_sets/lov/LOAN.json => type==LOAN When I call the second method with url = /networks/xxx/libraries/xxx/rule_sets/LOAN.json => type==LOAN.json  WHY the .json appears in the second method ?  I've used the debugger to find more but I'm lost in the code.  At the moment, the only thing I see is that when I go through AbstractUrlHandlerMapping.lookupHandler via the first method, the bestPattern ends with ""{type}.*"" whereas in the second case I have ""{type}""  It seems that this is because I have a collision with another method :  Whereas the second method call go through  where the pattern ends with {type}  ```java @RequestMapping(value=""/{id}"", method=RequestMethod.DELETE) public EPpkResult deleteRS(@PathVariable(""networkId"") String networkId, @PathVariable(""libraryId"") String libraryId, @PathVariable(""id"") String id) { ... } ```  So maybe this is because the patterns are chosen WITHOUT taking care of the method ?  ---  **Affects:** 3.0.5  **Attachments:** - [spr-8543.zip](https://jira.spring.io/secure/attachment/18489/spr-8543.zip) (_5.40 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38a666077739de57b0b962aa0dd0ba40434a12c0, https://github.com/spring-projects/spring-framework/commit/7605707c18d64979c9ba6652037f4ab519ffe096","closed","type: bug,","spring-projects-issues","2011-07-19T08:56:03Z","2019-01-11T13:18:16Z"
"","13636","ORM PersistenceExceptionTranslation does not convert Hibernate3 unique ids error to spring DuplicateKeyException [SPR-8996]","**[Christoph Jerolimov](https://jira.spring.io/secure/ViewProfile.jspa?name=jerolimov)** opened **[SPR-8996](https://jira.spring.io/browse/SPR-8996?redirect=false)** and commented  When using spring-orm with Hibernate it is possible to convert the Hibernate Exceptions to the Spring DataAccessException by simple adding the PersistenceExceptionTranslationPostProcessor.  But this does not work for the Hibernate Exception `org.hibernate.NonUniqueObjectException` which will converted in `org.springframework.orm.hibernate3.SessionFactoryUtils#convertHibernateAccessException` in the last line (as fallback) to an `org.springframework.orm.hibernate3.HibernateSystemException`.  I think the correct exception will be `org.springframework.dao.DuplicateKeyException` (prefered) or the parent `org.springframework.dao.DataIntegrityViolationException`. Implemented just simuluar to the other mappings in `SessionFactoryUtils#convertHibernateAccessException`.  The Hibernate NonUniqueObjectException exist since Hibernate 3.0. Problem verified with Spring-ORM 3.0 and 3.1.  ```    	 	 	   	     ```  ``` @Entity public class Category implements Cloneable { 	@Id 	@Column 	// No ID Generation here.. 	private Long id; 	private String name;  	public Long getId() { return id; } 	public void setId(Long id) { this.id = id; } 	public String getName() { return name; } 	public void setName(String name) { this.name = name; } } ```  ``` @RunWith(SpringJUnit4ClassRunner.class) @Transactional(""jpaTransactionManager"") @TestExecutionListeners({ TransactionalTestExecutionListener.class, DependencyInjectionTestExecutionListener.class, DirtiesContextTestExecutionListener.class }) @ContextConfiguration(""classpath:/spring-context.xml"") public class CategoryTest { 	@PersistenceContext 	private EntityManager entityManager; 	 	@Test(expected = DuplicateKeyException.class) 	public void testDuplicateInsert() { 		Category category = new Category(); 		category.setId(1L); 		category.setName(""Neue Kategorie""); 		entityManager.persist(category); 		entityManager.flush(); 		 		Category categoryWithSameId = new Category(); 		categoryWithSameId .setId(1L); 		categoryWithSameId .setName(""Neue Kategorie""); 		entityManager.persist(categoryWithSameId ); 		entityManager.flush(); 	} } ```    ---  **Affects:** 3.0.5, 3.1 GA","closed","type: enhancement,","spring-projects-issues","2012-01-05T05:19:12Z","2012-06-19T03:39:45Z"
"","13717","RequestParamMethodArgumentResolver does not resolve multiparts using HTTP PUT [SPR-9079]","**[Christoffer Soop](https://jira.spring.io/secure/ViewProfile.jspa?name=csoop)** opened **[SPR-9079](https://jira.spring.io/browse/SPR-9079?redirect=false)** and commented  Using the `HiddenHttpMethodFilter` and `MultipartFilter` as described in their respective JavaDoc produces a stack trace with the message:  > The current request is not a multipart request.  ... when used with Spring MVC's DispatcherServlet.  To my understanding the HiddenHttpMethod wraps the HTTP Request and changes the POST method to PUT. This makes the method `isMultipartRequest` (lines 187-193) in `RequestParamMethodArgumentResolver` always return `false`:  ```java private boolean isMultipartRequest(HttpServletRequest request) {   if (!""post"".equals(request.getMethod().toLowerCase())) {     return false;   }   String contentType = request.getContentType();   return (contentType != null && contentType.toLowerCase().startsWith(""multipart/"")); } ```  An obvious fix would be to remove the if-clause and rely only on the HTTP content-type header. Another is to include the HTTP PUT method as a valid multipart HTTP method in the if-clause.   ---  **Affects:** 3.1 GA  **Attachments:** - [20120131-multipart-stack-trace.txt](https://jira.spring.io/secure/attachment/19346/20120131-multipart-stack-trace.txt) (_1.91 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64a69f7cf826c39c0b72da4f910b8445c4627815","closed","type: bug,","spring-projects-issues","2012-01-31T04:19:05Z","2012-06-19T03:39:42Z"
"","13264","Problem using SpringBeanAutowiringInterceptor with @Value annotation in a Stateless Session Bean [SPR-8621]","**[Chris Wewerka](https://jira.spring.io/secure/ViewProfile.jspa?name=longliveenduro)** opened **[SPR-8621](https://jira.spring.io/browse/SPR-8621?redirect=false)** and commented  I'm using spring 3.0.5 in JBoss and when I try to use ""`@Value`"" annotation like this `@Value`(""${terminal.type}"") in an statless Session Bean annotated with `@Interceptors`(SpringBeanAutowiringInterceptor.clas s), I receive a IllegalArgumentException ""'name' must not be null"". No problem with `@Autowired` annotation. In SpringBeanAutowiringInterceptor class the metadata.inject() method is called with the bean name argument set to null. Do I need to specify the bean name somewhere ?  (Same problem was asked here by another user: http://forum.springsource.org/showthread.php?94930-Problem-using-SpringBeanAutowiringInterceptor-with-Value-annotation, but was unanswered)  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?94930-Problem-using-SpringBeanAutowiringInterceptor-with-Value-annotation  **Issue Links:** - #13218 Can not inject primitive values from property file using `@Value` annotation into servlet","closed","in: core,","spring-projects-issues","2011-08-18T02:07:43Z","2019-01-13T07:08:06Z"
"","13347","mvc rest services to generate a wadl [SPR-8705]","**[chris snow](https://jira.spring.io/secure/ViewProfile.jspa?name=snowch)** opened **[SPR-8705](https://jira.spring.io/browse/SPR-8705?redirect=false)** and commented  It would be good if Spring MVC Rest services could automatically generate a WADL.  This will make the rest services much each to use in service (e.g. SOA) environments.   ---  25 votes, 33 watchers","closed","status: declined,","spring-projects-issues","2011-09-18T11:26:23Z","2021-09-21T15:29:00Z"
"","12880","ExceptionDepthComparator handle comparison of exact object is incorrect [SPR-8231]","**[Chris Shepperd](https://jira.spring.io/secure/ViewProfile.jspa?name=chris.shepperd)** opened **[SPR-8231](https://jira.spring.io/browse/SPR-8231?redirect=false)** and commented  I am using several `@ExceptionHandler` annotations in a controller with different exceptions (not in same hierarchy).  The first exception that happens gets handled correctly, whereas the next different type of exception throws it's own exception as the incorrect method is selected.  I traced this down to the ExceptionDepthComparator class incorrectly ordering the collection of possibilities.  This seems to happen in a couple of scenarios but most importantly when the exception is exactly the same as the method contains vs something not in the hierarchy at all.  I saw #11745 changed the compare class of ExceptionDepthComparator from depth2-depth1 to depth1-depth2 but when one of the exceptions being compared is not in the hierarchy is still returned -1.  This caused incorrect ordering as it things -1 is the lowest depth and as such should be moved to the top.  I changed this to a high number and all my tests then passed.  This is what I changed (Full class with Test Class attached)  public class ExceptionDepthComparator implements Comparator","closed","in: core,","spring-projects-issues","2011-04-07T13:44:31Z","2019-01-11T12:54:20Z"
"","13457","Enhance LocalSessionFactoryBuilder to offer ability to addHibernateProperties and addMappingResources [SPR-8815]","**[Chris Phillipson](https://jira.spring.io/secure/ViewProfile.jspa?name=fastnsilver)** opened **[SPR-8815](https://jira.spring.io/browse/SPR-8815?redirect=false)** and commented  Would like to enhance current functionality of LocalSessionFactoryBuilder w/ support for methods found in old AnnotationSessionFactoryBean, specifically support for adding hibernate.properties and referencing *.hbm.xml files on classpath.  This is not too much effort in my opinion.  Below is code sample impl from a subclass I implemented earlier, that could just as well be promoted into the aforementioned builder.  Of course, this is dependent on fix for https://jira.springsource.org/browse/SPR-8776 to be released in order to fully realize its potential.  private static final Method addProperties = ClassUtils.getMethodIfAvailable(Configuration.class, ""addProperties"", Properties.class);  private static final Method addResource = ClassUtils.getMethodIfAvailable(Configuration.class, ""addResource"", String.class);      /**      * Set Hibernate mapping resources to be found in the class path,      * like ""example.hbm.xml"" or ""mypackage/example.hbm.xml"".      * Analogous to mapping entries in a Hibernate XML config file.      * Can be used to add to mappings from a Hibernate XML config file,      * or to specify all mappings locally.      * @see org.hibernate.cfg.Configuration#addResource      */     public LocalSessionFactoryBuilder addMappingResources(String... mappingResources) {         for (String mappingResource :mappingResources) {             ReflectionUtils.invokeMethod(addResource, this, mappingResource);         }         return this;     }          /**      * Set Hibernate properties, such as ""hibernate.dialect"".      * Can be used to override values in a Hibernate XML config file,      * or to specify all necessary properties locally.      * Note: Do not specify a transaction provider here when using      * Spring-driven transactions. It is also advisable to omit connection      * provider settings and use a Spring-set DataSource instead.      */     public LocalSessionFactoryBuilder addHibernateProperties(Properties properties) {         ReflectionUtils.invokeMethod(addProperties, this, properties);         return this;     }    ---  **Affects:** 3.1 RC1  **Attachments:** - [CustomLocalSessionFactoryBuilder.java](https://jira.spring.io/secure/attachment/19035/CustomLocalSessionFactoryBuilder.java) (_2.25 kB_)","closed","type: enhancement,","spring-projects-issues","2011-11-03T14:06:20Z","2014-10-27T06:38:08Z"
"","13823","Backport ""MutablePropertySources#get throws when it should return null"" [SPR-9185]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9185](https://jira.spring.io/browse/SPR-9185?redirect=false)** and commented  ---  This issue is a backport sub-task of #13817  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d72ab59ae1841fecb0f33c938b37234dde75a8f","closed","in: core,","spring-projects-issues","2012-02-29T05:51:10Z","2019-01-11T22:15:35Z"
"","13803","Backport ""Make spring-test dependency on spring-aspects optional"" [SPR-9165]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9165](https://jira.spring.io/browse/SPR-9165?redirect=false)** and commented  ---  This issue is a backport sub-task of #13687","closed","status: declined,","spring-projects-issues","2012-02-24T06:40:19Z","2019-01-11T22:17:35Z"
"","13801","Backport ""Avoid infinite loop in AbstractResource#contentLength"" [SPR-9163]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9163](https://jira.spring.io/browse/SPR-9163?redirect=false)** and commented  ---  This issue is a backport sub-task of #13799  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40a6769309dfcc32e93072769fba2a46dd0e6a0f","closed","in: core,","spring-projects-issues","2012-02-24T05:43:06Z","2019-01-11T22:17:41Z"
"","13775","Backport ""Fix regression in @PropertySource placeholder resolution"" [SPR-9136]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9136](https://jira.spring.io/browse/SPR-9136?redirect=false)** and commented  ---  This issue is a backport sub-task of #13772","closed","in: core,","spring-projects-issues","2012-02-20T05:28:46Z","2019-01-11T22:12:59Z"
"","13762","BeanNameGenerator strategy provided to AnnotationConfig(Web)ApplicationContext does not apply to nested and imported @Configuration classes [SPR-9124]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9124](https://jira.spring.io/browse/SPR-9124?redirect=false)** and commented   ---  **Affects:** 3.0 GA, 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fc416bcb0bac38805c01f65ec1a8a08a13e3836f","closed","in: core,","spring-projects-issues","2012-02-15T04:22:31Z","2012-06-19T03:39:31Z"
"","13720","Upgrade dependency on hibernate-core to 4.1.0.Final [SPR-9082]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-9082](https://jira.spring.io/browse/SPR-9082?redirect=false)** and commented  For 3.1.1, requires addition of Hibernate 4.0.1.Final (and any/all new dependencies) to EBR, updating ivy.xml, .classpath, .iml files, poms, etc..  See also EBR-808.  For 3.2 M1, requires updating the entry in build.gradle.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3eff36452908c06774eb4e40e4943cb794674c05, https://github.com/spring-projects/spring-framework/commit/ff44c9132c23b35789dbb61ea09534797c18b231","closed","type: task,","spring-projects-issues","2012-02-01T04:16:04Z","2012-06-19T03:39:35Z"
"","13547","Add reference documentation for @Validated [SPR-8907]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8907](https://jira.spring.io/browse/SPR-8907?redirect=false)** and commented   --- No further details from [SPR-8907](https://jira.spring.io/browse/SPR-8907?redirect=false)","closed","type: documentation,","spring-projects-issues","2011-12-10T08:18:16Z","2015-10-27T11:18:37Z"
"","13546","Add reference documentation for WebApplicationInitializer [SPR-8906]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8906](https://jira.spring.io/browse/SPR-8906?redirect=false)** and commented   --- No further details from [SPR-8906](https://jira.spring.io/browse/SPR-8906?redirect=false)","closed","type: documentation,","spring-projects-issues","2011-12-10T08:17:23Z","2015-10-27T11:19:57Z"
"","13510","Introduce SystemEnvironmentPropertySource [SPR-8869]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8869](https://jira.spring.io/browse/SPR-8869?redirect=false)** and commented  For background, see http://blog.springsource.org/2011/02/14/spring-3-1-m1-introducing-profile/#comment-223530 and http://www.linuxquestions.org/questions/linux-general-1/is-it-possible-to-set-an-environment-variable-name-containing-a-period-in-bash-724256/.  The following is not possible in bash:  ``` $ spring.profiles.active=p1,p2 java -classpath ... MyApplication ```  As bash does not support '.' in variable names:  ``` -bash: spring.profiles.active=p1,p2: command not found ```  This means that it is currently not possible to set active or default profiles via the system environment if one is using bash.  Nor is it possible to use the system environment for resolution of any other user-defined property using the `PropertySource`/`Environment` API developed as part of Spring 3.1.  Note that this **is** possible under other shells, such as tcsh:  ``` % setenv spring.profiles.active p1,p2 % java -classpath ... MyApplication ```  There are several possible solutions, the simplest of which would be to change the property name from `spring.profiles.active` to `spring_profiles_active` or something similar that bash does not take issue with.  However, this is undesirable, because it suggests that _all_ properties to be resolved through the `PropertySource` mechanism should avoid '.' characters.  This goes strongly against convention in java, where such naming is common (think about .properties files here.  This 'solution' would also have the negative effect of breaking all existing applications running against 3.1 milestones and release candidates at this point, as well as all documentation and blog post that have been written about profile support and it's activation mechanisms.  Therefore, the better solution is probably to provide custom support at the environment property source level, allowing for interchangeability of '.' and '_' characters.  This would allow for the following:  ``` $ spring_profiles_active=p1,p2 java -classpath ... MyApplication ```  as well as the following  ``` $ java -Dspring.profiles.active=p1,p2 -classpath ... MyApplication ```  This would apply generally, such that a call to resolve property `foo.bar`, e.g.:  ``` env.getProperty(""foo.bar"") ```  would return non-null assuming that the `Environment` object `env` contains a system environment `PropertySource` and there is an environment variable present named `foo.bar` or `foo_bar`.  In the rare case that both variables `foo.bar` and `foo_bar` are present in the environment (possible under tcsh, for example), then the variable matching the original request will be the one returned.  That is, a call to `getProperty(""foo.bar"")` will return the value of `foo.bar`, and a call to `getProperty(""foo_bar"")` will return the value of `foo_bar`.  Appropriate debug logging will be added to inform the user when this is occurring.  It may also make sense to allow for case-insensitivity when resolving properties against the system environment `PropertySource`, which will allow for more idiomatic invocation, e.g.:  ``` SPRING_PROFILES_ACTIVE=p1,p2 java -classpath ... MyApplication ```  Javadoc will be updated to reflect these changes at the appropriate locations.   ---  **Reference URL:** http://blog.springsource.org/2011/02/14/spring-3-1-m1-introducing-profile/#comment-223530  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/143db0d8de9d7b46e5de93323afa7a97152ac37c, https://github.com/spring-projects/spring-framework/commit/06d06d4aa94d9025ea7416110bff270eb8a632f3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-11-22T12:01:30Z","2012-06-19T03:39:47Z"
"","13437","Introduce ResourceBundle PropertySource implementation [SPR-8795]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8795](https://jira.spring.io/browse/SPR-8795?redirect=false)** and commented  Placeholder for now to see about interest in a `ResourceBundlePropertySource`.   --- No further details from [SPR-8795](https://jira.spring.io/browse/SPR-8795?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-10-21T11:56:18Z","2015-09-22T18:20:32Z"
"","13411","Add package-info.java where missing [SPR-8768]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8768](https://jira.spring.io/browse/SPR-8768?redirect=false)** and commented  * core.en * org.springframework.mock.env * org.springframework.scheduling.aspectj * org.springframework.transaction.aspectj * check for others at time of resolution    --- No further details from [SPR-8768](https://jira.spring.io/browse/SPR-8768?redirect=false)","closed","type: documentation,","spring-projects-issues","2011-10-12T14:55:34Z","2012-06-19T03:39:25Z"
"","13398","@Bean methods with package-private visibility are not enhanced in @Configuration class hierarchies that cross package boundaries [SPR-8756]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8756](https://jira.spring.io/browse/SPR-8756?redirect=false)** and commented  _Originally raised by Rossen in regard to subclassing Spring's own `WebMvcConfigurationSupport`_  ## Reproduction  ``` package com.foo.model;  public class Foo { }  public class Bar {     private final Foo foo;      public Bar(Foo foo) {         this.foo = foo;     }      public Bar getBar() {         this.bar = bar;     } } ```  ``` package com.foo.config.a;  @Configuration public class BaseConfig {     @Bean     Foo packagePrivateFoo() {         return new Foo();     }      @Bean     public Foo publicFoo() {         return packagePrivateFoo();     } } ```  ``` package com.foo.config.b; //","closed","status: declined,","spring-projects-issues","2011-10-10T20:18:21Z","2019-01-13T07:07:34Z"
"","13393","Support 'destroy method inference' for @Bean methods [SPR-8751]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8751](https://jira.spring.io/browse/SPR-8751?redirect=false)** and commented  Use case: creating a Hibernate `SessionFactory` using the native Hibernate API or Spring 3.1's `LocalSessionFactoryBuilder`:  ``` @Bean public SessionFactory sessionFactory() {     // ...     return sessionFactory; } ```  In order to properly destroy the `SessionFactory` on Spring container shutdown, the user must specify `@Bean(destroyMethod=""close"")`:  ``` @Bean(destroyMethod=""close"") public SessionFactory sessionFactory() {     // ...     return sessionFactory; } ```  This is easy to forget and should be specified every time anyway.  ""destroy method inference"" will detect well-known destroy methods (e.g. public no-arg `close()` methods) and automatically register them as the destroy-method against the underlying bean definition.  Users may disable destroy method inference by explicitly specifying empty string (`""""`) for the value of `destroyMethod`:  ``` @Bean(destroyMethod="""") // call no destroy method and do not attempt to infer one public SessionFactory sessionFactory() {     // ...     return sessionFactory; } ```  ---  **Issue Links:** - #17153 Document how to prevent a JNDI DataSource retrieved using JavaConfig to be removed on shutdown of the context - #17139 Add note to reference material about difference between XML destroy-method and `@Bean` destroyMethod behavior - #14668 Support bean disposal on ApplicationContext shutdown for Closeable beans","closed","type: enhancement,","spring-projects-issues","2011-10-08T23:30:03Z","2019-01-13T07:07:36Z"
"","13333","Clarify stereotype and exception translation Javadoc [SPR-8691]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8691](https://jira.spring.io/browse/SPR-8691?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15a8f776b9436fa8a74fc73b7004fdf830879c77","closed","type: enhancement,","spring-projects-issues","2011-09-13T10:47:09Z","2012-06-19T03:39:48Z"
"","13328","Remove CacheProxyFactoryBean [SPR-8686]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8686](https://jira.spring.io/browse/SPR-8686?redirect=false)** and commented  Costin,  Please see #13327 and linked javadoc regarding deprecations to AbstractSingletonProxyFactoryBean and subtypes.  It is assumed that CacheProxyFactoryBean is actually unneccessary in light of the cache: namespace, and not an option that we'd want to introduce if we don't have to.  Please advise if you actually intend to keep this type around and why; if so, we may have to reconsider the deprecation.  Thanks.  ---  This issue is a sub-task of #13327  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1819bee35fcf7c00a48ba37010ebfb7c240b5403","closed","in: core,","spring-projects-issues","2011-09-12T19:35:38Z","2019-01-11T14:23:30Z"
"","13327","Deprecate AbstractSingletonProxyFactoryBean and subclasses [SPR-8685]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8685](https://jira.spring.io/browse/SPR-8685?redirect=false)** and commented  ---  **Sub-tasks:** - #13328 Remove CacheProxyFactoryBean  **Issue Links:** - #13322 AbstractSingletonProxyFactoryBean is deprecated","closed","","spring-projects-issues","2011-09-12T19:31:50Z","2019-01-11T14:23:54Z"
"","13310","Test against jdo-api 3.0 [SPR-8668]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8668](https://jira.spring.io/browse/SPR-8668?redirect=false)** and commented  In order to test against JDO 3.0, it must be available in the SpringSource EBR.  Compatibility has been tested locally, but we cannot actually update the build scripts / ivy.xml files until this the API jar is available.  ---  This issue is a sub-task of #13297  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8759b20e4601d3a3e24301e2c6502038c95b9816","closed","in: core,","spring-projects-issues","2011-09-03T17:37:19Z","2019-01-11T14:20:01Z"
"","13309","Update spring-orm template.mf to be inclusive of javax.jdo 3.0 [SPR-8667]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8667](https://jira.spring.io/browse/SPR-8667?redirect=false)** and commented  ---  **Affects:** 3.0.6, 3.1 M2  This issue is a sub-task of #13297  **Issue Links:** - #13335 MANIFEST.MF: OSGi-Version Range too small for JDO in Library org.springframework.orm (_**""is duplicated by""**_)","closed","type: task,","spring-projects-issues","2011-09-03T17:33:01Z","2019-01-11T14:19:27Z"
"","13277","Use lowercase 'c' in 'Ehcache' consistently [SPR-8635]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8635](https://jira.spring.io/browse/SPR-8635?redirect=false)** and commented  Per copy on http://ehcache.org, the proper capitalization of the name is 'Ehcache', not 'EhCache'.  We have the following types and files that use the latter (incorrect) spelling:  ``` cbeams:~/Work/spring-framework/spring-framework[master]>$ git grep -l EhCache build-spring-framework/resources/changelog.txt org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java org.springframework.context/src/main/java/org/springframework/cache/ehcache/EhCacheManagerFactoryBean.java org.springframework.context/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java org.springframework.context/src/test/java/org/springframework/cache/ehcache/EhCacheSupportTests.java spring-framework-reference/src/cache.xml ```  ---  **Affects:** 3.1 M2  **Issue Links:** - #13447 Minor typo in code sample of Cache Abstraction documentation (_**""is duplicated by""**_) - #13274 Cache Abstraction Documentation: minor typo  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bd7fd57ad2114ce3ed3385116b886862a6cb3fd3","closed","type: enhancement,","spring-projects-issues","2011-08-24T12:01:17Z","2019-01-11T14:22:15Z"
"","13189","Register JndiPropertySource by default in StandardServletEnvironment [SPR-8545]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8545](https://jira.spring.io/browse/SPR-8545?redirect=false)** and commented  Following the changes made in #13136, it now makes sense to enable `JndiPropertySource` by default when using a `StandardServletEnvironment`, as the overhead is minimal and exceptions are no longer thrown when a property is not found in JNDI.  Remove the `jndiPropertySourceEnabled` flag altogether and allow users to manipulate the `JndiPropertySource` through the usual mechanisms available from `MutablePropertySources` if desired.  ---  **Affects:** 3.1 M1, 3.1 M2  **Issue Links:** - #13136 JndiPropertySource getProperty throws Exception  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6db594c79dec6532e68c06ac0a44af4edd055975, https://github.com/spring-projects/spring-framework/commit/f0460ce6fd49cdd3f8a9e25e9e9961d21ac013b9  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-07-19T15:19:57Z","2019-01-11T13:18:25Z"
"","13170","Render  in syntax-highlighted code examples [SPR-8526]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8526](https://jira.spring.io/browse/SPR-8526?redirect=false)** and commented  As originally noted in #13165, portions of the reference documentation marked up with \ are not actually made bold.  This is true in both the HTML and PDF representations, and is likely because of how the CSS for syntax highlighting works.  Not strictly related, in the PDF version, spaces are often rendered as dash characters (-) for reasons unknown.  It would be good to address this at the same time.  ---  **Issue Links:** - #13165 'bold text' referenced in documentation is not actually bold  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2a98efa13d35e30bd879f0ff92182900c805f5d","closed","type: enhancement,","spring-projects-issues","2011-07-11T11:24:43Z","2019-01-11T13:19:44Z"
"","13164","Support injection of collection-typed beans using @Autowired+@Qualifier or @Inject+@Named  [SPR-8519]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8519](https://jira.spring.io/browse/SPR-8519?redirect=false)** and commented  _A number of issues (see linked issues) have been brought up over time regarding confusion about how to use annotation-based injection for Spring beans that implement `java.util.Collection`.  This issue aims to provide a single and definitive place to address these concerns._  Consider a Spring bean ""fooList"" of type `java.util.List` (but could be any bean ultimately implementing `java.util.Collection`):  ``` @Bean public List fooList() {     List fooList = new ArrayList();     fooList.add(new Foo(1));     fooList.add(new Foo(2));     return fooList; } ```  And consider a Spring `@Component` ""fooService"" that depends on this collection. It is natural to imagine using `@Autowired` or `@Inject` to express the dependency:  ``` @Component public class FooService {     private List fooList;      @Autowired     public setFooList(List fooList) {         this.fooList = fooList;     } } ```  This configuration will fail with an exception similar to the following:  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of  type [Foo] found for dependency [collection of Foo]: expected at least 1 bean which  qualifies as autowire candidate for this dependency. Dependency annotations: {} ```  The reason for this is that when injecting an object of type `List`, `@Autowired` expects one or more **individual** Spring beans of type `Foo` to exist in the container.  Any such beans are added to a new list of type `Foo` and injected.  Therefore, the `@Autowired` method signature above could be read as ""Please collect all Spring beans of type `Foo` into a `List` and inject that list into my `setFooList` setter method"".  These semantics are at odds with the actual intent in the situation above, which reads more like: ""Please find and inject the Spring bean of type `List` into my `setFooList` setter method"".  The situation is often complicated by the fact that asking to inject the Spring bean of type `List` is meaningless at runtime due to type erasure in Java generics.  For this reason, it makes sense to try to qualify the bean by name, as below:  ``` @Component public class FooService {     private List fooList;      @Autowired     public setFooList(@Qualifier(""fooList"") List fooList) {         this.fooList = fooList;     } } ```  Unfortunately, the effect is the same, rendering an exception similar to the following:  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of  type [Foo] found for dependency [collection of Foo]: expected at least 1 bean which  qualifies as autowire candidate for this dependency. Dependency annotations:  {@org.springframework.beans.factory.annotation.Qualifier(value=fooList)} ```  Again, this is due to the semantics of `@Autowired` collections, as described above.  Note that in the examples above, Spring's `@Autowired` is interchangeable with JSR-330's `@Inject`, as is Spring's `@Qualifier` with JSR-330's `@Named`.  They are processed by the same code and thus have the same semantics with regard to collection injection.  This issue then, addresses the common request to provide support for injecting beans of type `java.util.Collection` using `@Autowired`+`@Qualifier` and/or `@Inject`/`@Named` as described above.  ---  **Issue Links:** - #9170 Doc: `@Autowired` does not support Collection and Map as actual bean types - #9713 can't `@autowire` collections - #11443 NoSuchBeanDefinitionException autowiring to collection with no matching types - #12332 `@Qualifier` fails to resolve Lists containing enumerated types (_**""supersedes""**_) - #12454 Cannot `@Autowired` java.util.concurrent.BlockingQueue (_**""supersedes""**_) - #12885 Unable to inject `@Named` list (_**""supersedes""**_) - #8626 `@Autowire` does not work as expected for Collections based Repository implementation (_**""supersedes""**_)","closed","type: enhancement,","spring-projects-issues","2011-07-07T17:43:40Z","2019-01-13T07:08:28Z"
"","13162","Support for Servlet 3.0/3.1 asynchronous request processing [SPR-8517]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8517](https://jira.spring.io/browse/SPR-8517?redirect=false)** and commented  ---  **Sub-tasks:** - #14036 Documentation for the Servlet 3, async support  **Issue Links:** - #10258 Support Servlet 3.0 (JSR-315) - #14035 Add Servlet 3 async support related config options - #14006 Add context to StaleAsyncWebRequestException to allow for better exception handling  12 votes, 23 watchers","closed","has: votes-jira,","spring-projects-issues","2011-07-06T21:34:27Z","2019-01-11T13:20:18Z"
"","13159","FactoryBean-returning @Bean methods short-circuit normal @Autowired lifecycle in @Configuration classes [SPR-8514]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8514](https://jira.spring.io/browse/SPR-8514?redirect=false)** and commented   ---  **Affects:** 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?108508-Java-Config-Support-for-Repository-Configuration&p=369963#post369963  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18424/mylyn-context.zip) (_544.89 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/605f0e7a22b4e8bf8effa33283e8bc7685d7d129, https://github.com/spring-projects/spring-framework/commit/807d612978f9d01e446542320c19db68da14b8e1","closed","type: bug,","spring-projects-issues","2011-07-05T16:05:48Z","2012-06-19T03:39:24Z"
"","13143","Factor out a spring-web-client module [SPR-8497]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8497](https://jira.spring.io/browse/SPR-8497?redirect=false)** and commented  spring-web currently includes both client- and server-side components.  Projects such as Spring Social and Spring Android depend only on the client-side artifacts such as RestTemplate.  Consider creating a dedicated spring-web-client JAR.  It remains to be seen whether this can be done without introducing cycles.   ---  1 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2011-06-29T10:48:02Z","2013-08-28T07:45:39Z"
"","13142","SpringServletContainerInitializer raises NullPointerException when no WebApplicationInitializer implementations are present [SPR-8496]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8496](https://jira.spring.io/browse/SPR-8496?redirect=false)** and commented  Per the linked forum thread:  ``` Caused by: java.lang.NullPointerException 	at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:142) 	at org.apache.catalina.core.StandardContext.callServletContainerInitializers(StandardContext.java:5352) 	... 28 more ```  Initial analysis:  It appears that on certain platforms e.g. Tomcat, the set of classes coming into onStartup will never be null when `@HandlesType`(WebApplicationInitializer.class) is specified, because the actual WAI interface is always picked up; i.e. there will always be at least one class in the set.  My own testing on GlassFish suggested the same behavior, but obviously the reporter here is seeing the opposite behavior.  Per the Javadoc for ServletContainerInitializer, the set will be null if no classes matching `@HandlesType` are found, and that's what we're seeing here.  Solution:  In any case, a null guard within SpringServletContainerInitializer doesn't hurt and certainly solves this issue.   ---  **Affects:** 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?111398-Can-I-use-spring-social-without-spring-web  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4756badc1d614abe4b6bb4ecc89b71f4fcd092fd","closed","type: bug,","spring-projects-issues","2011-06-29T10:28:50Z","2012-06-19T03:39:07Z"
"","13128","Provide PropertySource implementation for command line arguments [SPR-8482]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8482](https://jira.spring.io/browse/SPR-8482?redirect=false)** and commented   ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18404/mylyn-context.zip) (_22.69 kB_)","closed","type: enhancement,","spring-projects-issues","2011-06-22T21:45:45Z","2012-06-19T03:39:43Z"
"","13104","Make ""timed"" and other environment-sensitive tests optional [SPR-8458]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8458](https://jira.spring.io/browse/SPR-8458?redirect=false)** and commented  We currently have a number of timed tests that frequently fail on developer machines due to varying CPU speeds and system load.  It would be better to make these tests optional and configure them to run only on the CI server, which is a more controlled and predictable environment.  This may be done using a mechanism like JUnit's `@Rule`, or possibly through their upcoming test categorization mechanism.  ---  **Issue Links:** - #12744 Clean up ignored JMX tests (_**""is depended on by""**_) - #13231 org.springframework.jmx.export.NotificationListenerTests is marked `@Ignore` but extends TestCase in 3.0.x branch","closed","type: task,","spring-projects-issues","2011-06-15T23:25:59Z","2019-01-13T07:08:47Z"
"","13088","Resolve ${...} placeholders in @PropertySource resource locations [SPR-8442]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8442](https://jira.spring.io/browse/SPR-8442?redirect=false)** and commented  Allow `@PropertySource`(""classpath:/foo/${placeholder}/x.properties"")   ---  **Affects:** 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?110538-Spring-3.1.0.M2-PropertySource-flexibility&p=366504#post366504  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18330/mylyn-context.zip) (_32.28 kB_)","closed","type: enhancement,","spring-projects-issues","2011-06-12T20:39:11Z","2012-06-19T03:39:24Z"
"","13073","LocalContainerEntityManagerFactoryBean#setPackagesToScan should accept String... [SPR-8427]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8427](https://jira.spring.io/browse/SPR-8427?redirect=false)** and commented  as well as #setPersistenceUnitProcessors.   --- No further details from [SPR-8427](https://jira.spring.io/browse/SPR-8427?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-06-09T02:09:16Z","2012-06-19T03:39:11Z"
"","13072","Add syntax highlighting to Javadoc where necessary [SPR-8426]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8426](https://jira.spring.io/browse/SPR-8426?redirect=false)** and commented  Replace `` with `","closed","status: duplicate,","spring-projects-issues","2011-06-09T00:57:17Z","2019-01-11T13:32:57Z"
"","13071","Publish Spring Milestone builds to Maven Central [SPR-8424]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8424](https://jira.spring.io/browse/SPR-8424?redirect=false)** and commented  Beginning with 3.1 M2, publish milestone (M1, M2) and release candidate (RC1, RC2) builds to Maven Central to improve the feedback loop through easier access.  ---  **Reference URL:** http://blog.springsource.com/2011/02/11/spring-framework-3-1-m1-released/#comment-194864  **Issue Links:** - #12773 Improve build system and source control infrastructure","closed","status: declined,","spring-projects-issues","2011-06-08T20:52:52Z","2019-01-11T13:32:50Z"
"","13062","Test Spring 3.1 compatibility with supported versions of Hibernate [SPR-8414]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8414](https://jira.spring.io/browse/SPR-8414?redirect=false)** and commented  ---  **Sub-tasks:** - #12763 Test Spring 3.1 compatibility with Hibernate 3.2.x - #12764 Test Spring 3.1 compatibility with Hibernate 3.5.x - #12765 Test Spring 3.1 compatibility with Hibernate 3.6.x","closed","status: invalid,","spring-projects-issues","2011-06-07T20:27:57Z","2019-01-12T05:30:13Z"
"","13061","Introduce GWAC variant of AnnotationConfigWebApplicationContext [SPR-8413]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8413](https://jira.spring.io/browse/SPR-8413?redirect=false)** and commented  The current ACWAC extends RefreshableWebApplicationContext.  Ideally for programmatic use a variant should exist that extends GenericWebApplicationContext.  Explore this and possible renames of these types, e.g.:  * AnnotationApplicationContext (GAC subclass for standalone use) * AnnotationWebApplicationContext (GWAC subclass for programmatic web use) * RefreshableAnnotationWebApplicationContext (RWAC subclass for declarative web use)  The existing ACAC and ACWAC types would be deprecated and refactore as subclasses of AAC and RAWAC, respectively.  ---  **Issue Links:** - #13012 Introduce AnnotationConfigCapableApplicationContext interface to unify ACAC and ACWAC operations (_**""supersedes""**_)","closed","type: enhancement,","spring-projects-issues","2011-06-07T20:06:49Z","2019-01-11T13:33:32Z"
"","13060","Review relationship between .config and .annotation packages wrt @Enable annotations [SPR-8412]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8412](https://jira.spring.io/browse/SPR-8412?redirect=false)** and commented   ---  **Affects:** 3.1 M2","closed","type: task,","spring-projects-issues","2011-06-07T19:09:25Z","2012-06-19T03:39:12Z"
"","13058","@EnableTransactionManagement does not handle APC escalation [SPR-8411]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8411](https://jira.spring.io/browse/SPR-8411?redirect=false)** and commented  ---  **Affects:** 3.1 M2  **Issue Links:** - #13140 `@EnableTransactionManagement` conflicts with  (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2011-06-07T18:32:20Z","2019-01-13T07:08:54Z"
"","13046","Add ""What's new in Spring 3.1"" to reference docs [SPR-8399]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8399](https://jira.spring.io/browse/SPR-8399?redirect=false)** and commented   --- No further details from [SPR-8399](https://jira.spring.io/browse/SPR-8399?redirect=false)","closed","type: task,","spring-projects-issues","2011-06-04T01:45:34Z","2012-06-19T03:39:55Z"
"","13036","Allow convenient addition of custom Converter types against ConfigurableEnvironment / ConfigurablePropertyResolver [SPR-8389]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8389](https://jira.spring.io/browse/SPR-8389?redirect=false)** and commented  Excerpt from email conversation with Dave Syer:  > Incidentally, how can I register > the FooConverter for the above use case?  Good question.  You can do it through the Environment API as well.  Technically, you can do it at any point in the lifecycle, but it would be most correct to do it pre-refresh().  There is a convenience issue here, in that the ConfigurableEnvironment interface exposes a `ConversionService getConversionService();` method, but does not expose a method returning a ConverterRegistry.  This means that the user would need to cast:  ((ConverterRegistry)env.getConversionService()).addConverter(FooConverter.class);  We can certainly consider making that more convenient.    ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18302/mylyn-context.zip) (_2.91 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8227cb624308e68c34cc2140ea63e8fc4f5cbd9f","closed","type: enhancement,","spring-projects-issues","2011-06-01T22:11:14Z","2012-06-19T03:39:31Z"
"","13020","Introduce ValuePostProcessor for use with PropertyResolver / Environment [SPR-8373]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8373](https://jira.spring.io/browse/SPR-8373?redirect=false)** and commented  Many Spring users are familiar with the idea of 'chaining' BFPPs, with the classic example being a PPC that replaces ${...} with encrypted values from a .properties file followed by a custom BFPP that decrypts those values.  There is no straightforward way to make this happen in the current `Environment#getProperty` world.  Consider introducing a `ValuePostProcessor` mechanism that would allow for this, where (possibly `Ordered`) VPP instances are registered against the `Environment` (via its `PropertyResolver` interface) at context bootstrap time and then act as visitors on any calls to `#getProperty` methods.  VPPs would be invoked **prior** to type conversion via the `Environment`'s built-in `ConversionService` for methods where the latter is applicable.  ---  **Affects:** 3.1 M2  **Issue Links:** - #12962 Provide `@Configuration` support for PropertySource registration (`@PropertySource`)","closed","type: enhancement,","spring-projects-issues","2011-05-25T01:19:38Z","2019-01-13T07:09:13Z"
"","13019","Introduce @Inject-able SpEL expression resolver for use in @Configuration classes [SPR-8372]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8372](https://jira.spring.io/browse/SPR-8372?redirect=false)** and commented  Right now, `@Value` (in combination with `PPC`) is flexible enough to support ${...} or #{...} expressions, whereas the `Environment#getProperty` family of methods is only about property lookups (as it should be).  We should consider allowing users to `@Inject` something like a `SpelExpressionResolver` object that allows for a symmetrical approach to servicing property lookups or SpEL expressions side-by-side.  ---  **Affects:** 3.1 M2  **Issue Links:** - #12962 Provide `@Configuration` support for PropertySource registration (`@PropertySource`)","closed","type: enhancement,","spring-projects-issues","2011-05-25T01:08:26Z","2019-01-13T07:09:14Z"
"","13018","Add @PropertySources annotation and support ignoreResourceNotFound [SPR-8371]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8371](https://jira.spring.io/browse/SPR-8371?redirect=false)** and commented  As of 3.1 M2, the `@PropertySource` annotation allows for declarative registration of property sources against the enclosing `Environment`.  However, it does not allow for manipulation of property source ordering.  This (if desired at all) must be done against the `ConfigurableEnvironment#getPropertySources()` `MutablePropertySources` API.  This issue exists to gauge interest in this feature (read: collect votes).  Please be specific about use cases in order to assess whether such an enhancement truly represents a general need.  If interest is sufficient, we'll consider this for 3.1 RC1.  ---  **Affects:** 3.1 M2  **Issue Links:** - #14959 Allow for ignoreResourceNotFound on `@PropertySource` (_**""is duplicated by""**_) - #12962 Provide `@Configuration` support for PropertySource registration (`@PropertySource`) - #15560 Add ""ignoreResourceNotFound"" attribute to the `@PropertySource`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e95bd9e25086bf1dad37f8d08293c948621faf6b  12 votes, 17 watchers","closed","has: votes-jira,","spring-projects-issues","2011-05-25T01:01:21Z","2019-01-13T07:09:16Z"
"","13013","Support ""contextInitializerClasses"" init-param for FrameworkServlet  [SPR-8366]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8366](https://jira.spring.io/browse/SPR-8366?redirect=false)** and commented  As described in http://blog.springsource.com/2011/02/15/spring-3-1-m1-unified-property-management/, as of Spring 3.1 ContextLoader accepts an optional ""contextInitializerClasses"" context-param for specifying ApplicationContextInitializer implementations, but FrameworkServlet implementations (e.g. DispatcherServlet) do not support a corresponding init-param.   ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18263/mylyn-context.zip) (_3.73 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/56720fc42cfdab28a61fecfbd3a9e543763ef1a9","closed","type: enhancement,","spring-projects-issues","2011-05-22T22:47:49Z","2012-06-19T03:39:35Z"
"","13012","Introduce AnnotationConfigCapableApplicationContext interface to unify ACAC and ACWAC operations [SPR-8365]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8365](https://jira.spring.io/browse/SPR-8365?redirect=false)** and commented  `AnnotationConfigApplicationContext` and `AnnotationConfigWebApplicationContext` both expose `register` and `scan` methods as of the completion of #12968.  Introduce a new interface that declares each of these methods and refactor ACAC and ACWAC to implement it.  Beyond information value, this is useful for implementors of the `ApplicationContextInitializer` interface, in that users may create an ACI that works consistently across ACAC and ACWAC for standalone (e.g. testing, batch) or web (e.g. production) use.  ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18266/mylyn-context.zip) (_3.57 kB_)  **Issue Links:** - #12968 Add option to register configuration classes via Class in AnnotationConfigWebApplicationContext - #13061 Introduce GWAC variant of AnnotationConfigWebApplicationContext (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2011-05-22T21:22:58Z","2019-01-11T13:23:39Z"
"","13005","Support introspection of nested classes with ClassMetadata [SPR-8358]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8358](https://jira.spring.io/browse/SPR-8358?redirect=false)** and commented  In support of #12837, support introspecting for nested classes (i.e.: `Class#getClasses()` / `Class#getDeclaredClasses()`).  Through the `ClassMetadata` interface.  Provide both ASM and standard reflection implementations.  ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18246/mylyn-context.zip) (_6.26 kB_)  **Issue Links:** - #12837 Automatically detect and register nested `@Configuration` classes (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b2c7c4e585af1ceab7b43340514988005204de8, https://github.com/spring-projects/spring-framework/commit/4a6101a697475b6f0f5b5da7cf280ad372725ebb","closed","type: enhancement,","spring-projects-issues","2011-05-19T22:13:46Z","2019-01-13T07:09:19Z"
"","13001","Introduce AbstractEnvironment#customizePropertySources [SPR-8354]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8354](https://jira.spring.io/browse/SPR-8354?redirect=false)** and commented  The current approach to customizing property sources in AbstractEnvironment subclasses is based on property source manipulation within the subclass constructor, relying on the invocation of the default constructor of the subclass to add any property sources there.  Introduce a #customizePropertySources hook in the AbstractEnvironment lifecycle to allow this kind of customization to be more explicit and predictable   ---  **Affects:** 3.1 M1","closed","type: enhancement,","spring-projects-issues","2011-05-19T08:07:01Z","2012-06-19T03:39:00Z"
"","12995","Review ExtendedBeanInfo implementation [SPR-8347]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8347](https://jira.spring.io/browse/SPR-8347?redirect=false)** and commented  See #12734 and #12826.  Original commit (and comment) for ExtendedBeanInfo: https://github.com/cbeams/spring-framework/commit/1271acb8eb264f05729ccfa2dc30737c26eeb818  Related commit and comment fixing a small bug with the implementation: https://github.com/cbeams/spring-framework/commit/8dedf111bcf08af967c2de00b3e1ee4e99979533  ---  **Affects:** 3.1 M1  **Issue Links:** - #13698 Concurrent problem with BeanWrapperImpl.getPropertyValue (_**""is duplicated by""**_) - #12826 ExtendedBeanInfo Passes Empty Property Name to PropertyDescriptor Causing IntrospectionException: bad property name - #14663 Overhaul non-void JavaBean write method support - #13448 ExtendedBeanInfo raises 'type mismatch' error with covariant property types  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a8be690998f43a9253305e09f96ad83058ef540, https://github.com/spring-projects/spring-framework/commit/0ee12563b038797a137ac67b13e5dd6d3d918a7f, https://github.com/spring-projects/spring-framework/commit/17cf465d239605632fee99d8c869ea5fd0bee14c  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2011-05-18T22:28:01Z","2019-01-11T12:58:23Z"
"","12977","Introduce ResourcePropertySource [SPR-8328]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8328](https://jira.spring.io/browse/SPR-8328?redirect=false)** and commented  Convenience subclass of `PropertiesPropertySource` for creating a `PropertySource` based on a string resource path such as `classpath:/org/foo/bar.properties` or `file:/path/to/file.properties`   ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18200/mylyn-context.zip) (_4.09 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/314a054a9baf2cc13dc0c64d3b388164e5f5346e","closed","type: enhancement,","spring-projects-issues","2011-05-11T01:49:27Z","2012-06-19T03:39:51Z"
"","12965","Provide @Configuration support for enabling load-time weaving (@EnableLoadTimeWeaving) [SPR-8317]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8317](https://jira.spring.io/browse/SPR-8317?redirect=false)** and commented  ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18311/mylyn-context.zip) (_190.88 kB_)  **Issue Links:** - #12779 Introduce EntityManagerFactoryBuilder types  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a3c1292bc82c2799c697a38ac9e69efbd3a09fd, https://github.com/spring-projects/spring-framework/commit/620018d16b2639a4ded38f0c05c6277698c5c69f","closed","type: enhancement,","spring-projects-issues","2011-05-09T03:39:22Z","2019-01-11T13:00:48Z"
"","12964","Provide @Configuration support for enabling AspectJ auto-proxy behavior [SPR-8316]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8316](https://jira.spring.io/browse/SPR-8316?redirect=false)** and commented  ---  **Issue Links:** - #12789 Introduce `@EnableAspectJAutoProxy` (equivalent to aop:aspectj-autoproxy) (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-05-09T03:38:52Z","2019-01-13T07:09:27Z"
"","12963","Provide @Configuration support for automatic MBean registration [SPR-8315]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8315](https://jira.spring.io/browse/SPR-8315?redirect=false)** and commented  ---  **Issue Links:** - #13583 Introduce `@EnableMBeanExport` equivalent to  (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-05-09T03:33:16Z","2019-01-13T07:09:28Z"
"","12962","Provide @Configuration support for PropertySource registration (@PropertySource) [SPR-8314]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8314](https://jira.spring.io/browse/SPR-8314?redirect=false)** and commented  ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18201/mylyn-context.zip) (_255.54 kB_)  **Issue Links:** - #13019 Introduce `@Inject-able` SpEL expression resolver for use in `@Configuration` classes - #13020 Introduce ValuePostProcessor for use with PropertyResolver / Environment - #13018 Add `@PropertySources` annotation and support ignoreResourceNotFound  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ceeff370aff402bd669f9125d93e99d09e8ce71, https://github.com/spring-projects/spring-framework/commit/c8bc54e0ccad49f0785856f911349283619eb8ba, https://github.com/spring-projects/spring-framework/commit/57206db15271f865b542264c74980e6cbb4681fd","closed","type: enhancement,","spring-projects-issues","2011-05-09T03:32:57Z","2019-01-13T07:09:30Z"
"","12961","Provide @Configuration support for annotation-based transaction management [SPR-8313]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8313](https://jira.spring.io/browse/SPR-8313?redirect=false)** and commented   --- No further details from [SPR-8313](https://jira.spring.io/browse/SPR-8313?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-05-09T02:23:52Z","2012-06-19T03:39:40Z"
"","12960","Provide @Configuration support for annotation-based caching [SPR-8312]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8312](https://jira.spring.io/browse/SPR-8312?redirect=false)** and commented  Liklely via an `@EnableCaching` annotation, closely following suit with the existing `@EnableAsync`, `@EnableScheduling`, and `@EnableTransactionMangement` approaches.  `@EnableAsync` is probably the closest cousin here in terms of functionality.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4f3cbb45f4846a0dc14d48c6ee5e6020e0e49b18  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-09T02:23:45Z","2012-06-19T03:39:53Z"
"","12959","Provide @Configuration support for async method execution [SPR-8311]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8311](https://jira.spring.io/browse/SPR-8311?redirect=false)** and commented   --- No further details from [SPR-8311](https://jira.spring.io/browse/SPR-8311?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-05-09T02:22:41Z","2012-06-19T03:39:06Z"
"","12953","Provide @Configuration support for configuring Spring @MVC [SPR-8310]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8310](https://jira.spring.io/browse/SPR-8310?redirect=false)** and commented  ---  **Issue Links:** - #12887 Introduce `@EnableMvcConfiguration` (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2011-05-09T02:21:32Z","2019-01-13T07:09:34Z"
"","12956","Allow recursive use of @ComponentScan [SPR-8307]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8307](https://jira.spring.io/browse/SPR-8307?redirect=false)** and commented  Currently (in Spring 3.1 M1), `@ComponentScan` annotations are not processed recursively.  For example:  ``` package one;  @Configuration @ComponentScan(""two"") public class ConfigOne { } ```  ``` package two;  @Configuration @ComponentScan(""three"") public class ConfigTwo { } ```  ``` package three;  @Component public class MyComponent { } ```  Under Spring 3.1 M1, the following behavior will occur:  ``` package bootstrap;  public class Bootstrap {     public static void main(String... args) {         AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();         ctx.register(ConfigOne.class);         ctx.refresh();          ctx.getBean(ConfigOne.class); // success         ctx.getBean(ConfigTwo.class); // success - 1st level @ComponentScan processed         ctx.getBean(MyComponent.class); // fails - 2nd level @ComponentScan not processed     } } ```  Once the recursion logic is complete, it will also be important to detect and prevent cycles in scanned packages, e.g. `@ComponentScan`(""one"")=>`@ComponentScan`(""two"")=>`@ComponentScan`(""one"").  This is not unlike the cycle detection we already do with the `@Import` annotation.  ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18125/mylyn-context.zip) (_131.35 kB_)  **Issue Links:** - #11848 Add `@ComponentScan` annotation - #13450 Allow `@Configuration` classes to self-`@ComponentScan` - #12724 `@Configuration` classes are not enhanced with `@ComponentScan` (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6991cd9cdf610f94ace3cd8072634106830b439f, https://github.com/spring-projects/spring-framework/commit/d0c31ad84cffd7af718a45d679483a1c51f9e552","closed","type: enhancement,","spring-projects-issues","2011-05-08T01:05:47Z","2019-01-13T07:09:32Z"
"","12954","Introduce PropertySources#getPropertyAsClass [SPR-8305]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8305](https://jira.spring.io/browse/SPR-8305?redirect=false)** and commented  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12778","closed","in: core,","spring-projects-issues","2011-05-07T03:38:19Z","2019-01-11T12:56:55Z"
"","12923","Support Quartz 2.0.x [SPR-8275]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8275](https://jira.spring.io/browse/SPR-8275?redirect=false)** and commented  ---  **Issue Links:** - #13081 java.lang.IncompatibleClassChangeError  --> with new Version Of Quartz (2.0.0) !!! (_**""is duplicated by""**_) - #14030 Documentation concerning Quartz support is out of date - #12642 Support Quartz 1.8.x or better - #13369 Implement new method from ClassLoadHelper to make Spring work with Quartz 2.1 - #13200 setCronExpression method not exposed in CronTriggerBean - #13383 Make MethodInvokingJobDetailFactoryBean compatible with Quartz 2.x - #13006 Need support for Quartz 2.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f26534700a6646a6a6cf8debcffe8f108a7c9d9e, https://github.com/spring-projects/spring-framework/commit/16933a511d81d6b24bd19022efdde06eeb5c3fb6, https://github.com/spring-projects/spring-framework/commit/69c9abf2b8588d0668e1511da664f4e93d23612e  4 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-26T05:46:28Z","2019-01-11T12:54:53Z"
"","12910","Provide @Configuration support for scheduled tasks [SPR-8262]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8262](https://jira.spring.io/browse/SPR-8262?redirect=false)** and commented  ---  **Issue Links:** - #12782 Document `@Bean` alternatives to ScheduledExecutor and ThreadPoolExecutor FactoryBean types - #12798 Introduce TaskAnnotationDriven for AnnotationDrivenBeanDefinitionParser (task:annotation-driven) (_**""supersedes""**_) - #12806 Investigate ExecutorBeanDefinitionParser (task:executor) (_**""supersedes""**_) - #12807 Investigate ScheduledTasksBeanDefinitionParser (task:scheduled) (_**""supersedes""**_) - #12808 Investigate SchedulerBeanDefinitionParser (task:scheduler) (_**""supersedes""**_)","closed","type: enhancement,","spring-projects-issues","2011-04-19T01:45:26Z","2019-01-13T07:09:43Z"
"","12908","Introduce @Role annotation [SPR-8260]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8260](https://jira.spring.io/browse/SPR-8260?redirect=false)** and commented  e.g.:  ``` @Configuration public class Config {     @Bean     @Role(BeanDefinition.ROLE_INFRASTRUCTURE)     public SomeBPP bpp() {         // ...     } } ```    --- No further details from [SPR-8260](https://jira.spring.io/browse/SPR-8260?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-04-19T00:22:15Z","2012-06-19T03:39:16Z"
"","12887","Introduce @EnableMvcConfiguration [SPR-8239]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8239](https://jira.spring.io/browse/SPR-8239?redirect=false)** and commented  ---  **Issue Links:** - #12953 Provide `@Configuration` support for configuring Spring `@MVC` (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-04-09T03:46:42Z","2019-01-13T07:09:49Z"
"","12876","Do not create CGLIB subclass proxies for @Configuation classes that declare only @Feature methods [SPR-8227]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8227](https://jira.spring.io/browse/SPR-8227?redirect=false)** and commented  Example:  processing the following nested `private` class  ``` 	@Configuration 	private static class MvcDefaultServletHandlerFeature {  		@SuppressWarnings(""unused"") 		@Feature 		public MvcDefaultServletHandler defaultServletHandler() { 			return new MvcDefaultServletHandler(""foo""); 		}  	} ```  results in the following stack trace:  ``` java.lang.IllegalStateException: Cannot load configuration class: org.springframework.web.servlet.config.MvcDefaultServletHandlerTests$MvcDefaultServletHandlerFeature 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:363) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigurationClasses(ConfigurationClassPostProcessor.java:197) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:170) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:604) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:437) 	at org.springframework.web.servlet.config.MvcDefaultServletHandlerTests.testDefaultServletHandler(MvcDefaultServletHandlerTests.java:40) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: java.lang.IllegalArgumentException: No visible constructors in class org.springframework.web.servlet.config.MvcDefaultServletHandlerTests$MvcDefaultServletHandlerFeature 	at net.sf.cglib.proxy.Enhancer.filterConstructors(Enhancer.java:531) 	at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:448) 	at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) 	at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:216) 	at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377) 	at net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317) 	at org.springframework.context.annotation.ConfigurationClassEnhancer.createClass(ConfigurationClassEnhancer.java:127) 	at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:97) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:355) 	... 27 more ```  This is because CGLIB subclassing is required even for `@Configuration` classes that declare no `@Bean` methods.  The user is forced to make the class non-`private` to work around this.   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/111fb71fe1ccb8d3a5e06e61461edd87d6d025f4","closed","status: invalid,","spring-projects-issues","2011-04-07T03:06:19Z","2019-01-12T05:30:33Z"
"","12875","Remove support for @FeatureConfiguration; @Feature methods [SPR-8226]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8226](https://jira.spring.io/browse/SPR-8226?redirect=false)** and commented   ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/111fb71fe1ccb8d3a5e06e61461edd87d6d025f4","closed","type: task,","spring-projects-issues","2011-04-07T02:53:54Z","2012-06-19T03:39:55Z"
"","12874","Invoke @Feature methods during the normal @Bean method lifecycle [SPR-8225]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8225](https://jira.spring.io/browse/SPR-8225?redirect=false)** and commented   ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/111fb71fe1ccb8d3a5e06e61461edd87d6d025f4","closed","status: invalid,","spring-projects-issues","2011-04-07T02:26:17Z","2019-01-12T05:30:35Z"
"","13384","@ExceptionHandler not handling exception for unsupported Accept header [SPR-8742]","**[Chris Astall](https://jira.spring.io/secure/ViewProfile.jspa?name=chrisastall)** opened **[SPR-8742](https://jira.spring.io/browse/SPR-8742?redirect=false)** and commented  My Controller is defined as:  ```java // Get a Course @RequestMapping(value=""/people/{personId}"", method = RequestMethod.GET, headers = {""Accept=text/xml, application/xml, application/json""}) public @ResponseBody PersonResponseWrapper read(@PathVariable Long personId) { 	//Get Person and wrap in response wrapper 	return personResponseWrapper; } ```  I havne't defined a method to handle `DELETE` on this resource and if I call the `DELETE` method then a `org.springframework.web.HttpRequestMethodNotSupportedException` is thrown and I can catch in with the following exception handler:  ```java @ExceptionHandler(HttpRequestMethodNotSupportedException.class) @ResponseStatus(value=HttpStatus.METHOD_NOT_ALLOWED) public @ResponseBody ExceptionWrapper methodNotAllowed(HttpRequestMethodNotSupportedException e) {     return new ExceptionWrapper(""10005"", e.getLocalizedMessage()); } ```  But if I call the Service witha `GET` and an non-matching Accept header then a `org.springframework.web.HttpRequestMethodNotSupportedException` is also thrown but not caught by the exception handler. Even a very generic exception handler won't catch it:  ```java @ExceptionHandler(Throwable.class) @ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR) public @ResponseBody ExceptionWrapper generalError(Throwable e) {      return new ExceptionWrapper(""10000"", ""Internal Server Error""); } ```    ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2011-10-06T03:06:52Z","2019-01-12T16:37:23Z"
"","13742","requestMapping upload return 404 [SPR-9104]","**[chenxiaoshun](https://jira.spring.io/secure/ViewProfile.jspa?name=cxshun)** opened **[SPR-9104](https://jira.spring.io/browse/SPR-9104?redirect=false)** and commented  When specify requestMapping as upload,managing an request projects/upload will return 404.Exception will be The current request is not a multipart request.But have already set the form action to post and enctype to ""multipart/form-data"".  ```java @Controller public class FileUploadController{  	@RequestMapping(value=""/upload"") 	public ModelAndView uploadFile(@RequestParam(value=""file"") MultipartFile file) { 		if (!file.isEmpty()) { 			FileOutputStream fos = null; 			try { 				byte[] bytes = file.getBytes(); 				fos = new FileOutputStream(""D:\\""+file.getOriginalFilename()); 				fos.write(bytes); 			} catch (IOException e) { 				e.printStackTrace(); 			} finally { 				try { 					fos.close(); 				} catch (IOException e) { 					e.printStackTrace(); 				} 			} 		} 		return new ModelAndView(""message""); 	} } ```    ---  **Affects:** 3.1 GA","closed","status: declined,","spring-projects-issues","2012-02-09T18:08:33Z","2019-01-12T16:36:52Z"
"","13763","NullPointerException when attempting to use aws-maven with Sonatype Aether [SPR-9145]","**[Chas Emerick](https://jira.spring.io/secure/ViewProfile.jspa?name=cemerick)** opened **[SPR-9145](https://jira.spring.io/browse/SPR-9145?redirect=false)** and commented  Using [aws-maven](http://git.springsource.org/spring-build/aws-maven)'s `SimpleStorageServiceWagon` with Sonatype's [aether](https://github.com/sonatype/sonatype-aether) consistently throws a `NullPointerException` due to a bug in aws-maven's `AbstractWagon` / `TransferListenerSupport` implementation.  In short, `WagonRepositoryConnector` will call `.addTransferListener()` with `null`, even if aether has not been configured to use a listener.  This is unfortunate, but apparently intentional, given the standard [`TransferListenerSupport` implementation](http://maven.apache.org/wagon/wagon-provider-api/apidocs/org/apache/maven/wagon/events/TransferEventSupport.html#addTransferListener(org.apache.maven.wagon.events.TransferListener)), which allows `addXXXListener` calls to be made with `null` arguments without consequence.  The solution would be to either match the null-safe behaviour of aether's `TransferListenerSupport`, or, surely even better, just reuse the `AbstractWagon` implementation from wagon-provider-api rather than maintaining your own.   ---  **Referenced from:** commits https://github.com/spring-projects/aws-maven/commit/af8823480f854f232ec4a549feafa052a5686913","closed","status: invalid,","spring-projects-issues","2012-02-21T09:29:31Z","2019-01-12T05:29:07Z"
"","13649","org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBuilder is missing from 3.1.0.RELEASE [SPR-9010]","**[Charles Harvey](https://jira.spring.io/secure/ViewProfile.jspa?name=sbzoom)** opened **[SPR-9010](https://jira.spring.io/browse/SPR-9010?redirect=false)** and commented  org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBuilder is missing from 3.1.0.RELEASE  It existed in 3.1.0.M2 but it is now missing in 3.1.0.RELEASE.  It isn't even in the javadoc: Old: http://static.springsource.org/spring/docs/3.1.0.M2/javadoc-api/org/springframework/orm/hibernate3/annotation/AnnotationSessionFactoryBuilder.html New: http://static.springsource.org/spring/docs/3.1.0.RELEASE/javadoc-api/org/springframework/orm/hibernate3/annotation/AnnotationSessionFactoryBuilder.html  What happened? It was just introduced as the new way to do configurations, now its gone? SessionFactoryBuilderSupport is also missing. Were these files moved to a different project? Is there a new way of doing the configurations? There seems to be not explanation for the missing files.   ---  **Affects:** 3.1 GA","closed","status: declined,","spring-projects-issues","2012-01-09T05:49:10Z","2019-01-12T16:36:59Z"
"","13760","Problem with SessionFactory [SPR-9122]","**[CH MADAN MOHAN SANTOSH](https://jira.spring.io/secure/ViewProfile.jspa?name=mmstsmm)** opened **[SPR-9122](https://jira.spring.io/browse/SPR-9122?redirect=false)** and commented  Hi Support,  I m working on a project on Spring 3.1,Hibernate 4.0 (NET BEANS IDE). I m having an issue while autowiring my SessionFactory Bean(org.springframework.orm.hibernate3.LocalSessionFactoryBean) to my DAO (org.hibernate.SessionFactory) through Dispatcher servlet.  It is showing me null point exception at  public void save(Registration rg) { sessionFactory.getCurrentSession().save(rg);","closed","status: invalid,","spring-projects-issues","2012-02-14T23:49:28Z","2019-01-12T05:29:08Z"
"","13540","Introduce an annotation-based alternative to JDBCTemplate [SPR-8900]","**[Cemo Koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemkoc)** opened **[SPR-8900](https://jira.spring.io/browse/SPR-8900?redirect=false)** and commented  This issue is an enhancement rather than a minor adjustment for JDBCTemplate. Since the initial implementation of the JDBCTemplate there is a great amount of people who are utilizing it and honestly I am big supporter of it.  What I would like to suggest for JBDCTemplate is annotation base JDBCTemplate.  ``` public interface UserDAO {   @SqlUpdate(""insert into users (id, name) values (:userId, :name)"")   @Datasource(value=""MasterDataSource"", strategy = DefaultCommunityStrategy.class)   int insert(@Bind(""userId"") int userId, @Bind(""name"") String name);    @SqlQuery(""select name from users where id = :id"")   @Datasource(value=""SlaveDataSource"")   String findNameById(@Bind(""id"") int id); } ```  More:  * Based on Spring JDBCTemplate and SpEL * Transactional * Utilize rowMappers * CRUD support ?  Also there is an similar api, [jDBI](http://jdbi.org/), which is not based on JDBCTemplate.  The initial thoughts came to mind my mind is simply like this. I would like to elaborate on this which can be simplify many things.  Thanks    --- No further details from [SPR-8900](https://jira.spring.io/browse/SPR-8900?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-12-07T01:17:34Z","2015-09-22T18:20:32Z"
"","13596","org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBean() causes ClassLoader leak [SPR-8956]","**[carl chase](https://jira.spring.io/secure/ViewProfile.jspa?name=carchase)** opened **[SPR-8956](https://jira.spring.io/browse/SPR-8956?redirect=false)** and commented  We are using the AbstractAutowireCapableBeanFactory.autowireBean() method to autowire beans instantiated from dynamically compiled Groovy classes. AbstractAutowireCapableBeanFactory uses the Class object as a key in the filteredPropertyDescriptorsCache Map to cache PropertyDescriptors. When we re-compile the Groovy class, and invoke autowireBean() on a newly created object, the old Class object remains in the cache. Thus, the Class and its ClassLoader never get GC'd. It only takes about 1200 of these cycles to consume our PermGen space. Perhaps WeakHashMap would be a better choice for filteredPropertyDescriptorsCache.  ---  **Affects:** 3.0.4  **Issue Links:** - #16494 Performance regression for custom autowireBean calls with many properties  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e1d11ec99d40051ecdb60191c49bc587373a031d","closed","type: bug,","spring-projects-issues","2011-12-22T11:13:51Z","2019-01-11T14:32:48Z"
"","13146","Allow access to TriggerContext when scheduling Trigger-based tasks [SPR-8500]","**[Burkhard Graves](https://jira.spring.io/secure/ViewProfile.jspa?name=dhukas)** opened **[SPR-8500](https://jira.spring.io/browse/SPR-8500?redirect=false)** and commented  What about making the field triggerContext in ReschedulingRunnable public accessible such that its methods lastScheduledExecutionTime(), lastActualExecutionTime() and lastCompletionTime() can be called? (see linked forum thread for context).   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?111444","closed","type: enhancement,","spring-projects-issues","2011-06-30T04:08:58Z","2011-12-10T09:40:07Z"
"","13255","RedirectView always sends 302s in HTTP/1.0 (default) mode [SPR-8612]","**[Bryan Barkley](https://jira.spring.io/secure/ViewProfile.jspa?name=bbarkley)** opened **[SPR-8612](https://jira.spring.io/browse/SPR-8612?redirect=false)** and commented  RedirectView's sendRedirect method always sends a 302 in HTTP/1.0 compatible mode (the code's default). The HTTP/1.0 spec allows 301s as well. After calling setStatusCode with HttpStatus.MOVED_PERMANENTLY the view incorrectly (and without warning) sends a 302 instead if it is in HTTP/1.0 compatible mode.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0f1c10bc1c51ba28042ef0d5371e3bcb54621a46, https://github.com/spring-projects/spring-framework/commit/224bce1b6462731a7aed43f586bbc5cb4bb00dfa","closed","type: bug,","spring-projects-issues","2011-08-12T09:02:12Z","2012-06-19T03:39:40Z"
"","13727","API doc for the ForkJoinPoolFactoryBean contains a broken link  [SPR-9089]","**[Bruce Snyder](https://jira.spring.io/secure/ViewProfile.jspa?name=bsnyder)** opened **[SPR-9089](https://jira.spring.io/browse/SPR-9089?redirect=false)** and commented  The API docs for the [ForkJoinPoolFactoryBean](http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/scheduling/concurrent/ForkJoinPoolFactoryBean.html) and the [org.springframework.scheduling.concurrent package summary](http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/scheduling/concurrent/package-summary.html) both contain a broken link to the Java SE 7 ForkJoinPool. Currently each doc links to the following URL which results in a 404:  http://download.oracle.com/javase/6/docs/api/java/util/concurrent/ForkJoinPool.html?is-external=true  Instead, the following URL should be used:  http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ForkJoinPool.html   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/afa4bb3f1b593a6296cefbddebc03cf75790405a","closed","in: core,","spring-projects-issues","2012-02-02T19:33:31Z","2019-01-11T22:27:26Z"
"","12921","Missing AccessController.doPrivileged blocks which cause webapp to fail with security manager [SPR-8273]","**[Brian Vella](https://jira.spring.io/secure/ViewProfile.jspa?name=bvella)** opened **[SPR-8273](https://jira.spring.io/browse/SPR-8273?redirect=false)** and commented  My project is a web application based on spring mvc which will run on tomcat (7).  In my project I have a requirement to run using the java security manager. I am starting tomcat with the -security option. I granted all permissions to all 3rd party libraries, including spring.  First problem was found in HtmlCharacterEntityReferences when this class loads HtmlCharacterEntityReferences.properties. This is because the loading is not performed within a privileged block, requiring my code to also have access to that properties file. I have fixed this by modifying and recompiling the class (attached patch). I simply wrapped the part that loads the properties file in a privileged block.  There are other reflection related problems which I solved by granting the following permissions to my war file:  grant codeBase ""file:${catalina.base}/webapps/mywebapp/-"" { permission java.lang.RuntimePermission ""getClassLoader""; permission java.lang.RuntimePermission ""accessDeclaredMembers""; permission java.lang.reflect.ReflectPermission ""suppressAccessChecks""; };  However this is not ideal as only spring itself requires these permissions.  I have attached the relevant exceptions. There needs to be some privileged blocks, but since i am not too familiar with the spring web and aop code, I'm not 100% sure where these should be. Definitely not in the classes ReflectionUtils and ClassUtils as that would enable curcumventing permission checking by directly using the utilities.  I can provide a simple demo application and tomcat configuration to replicate these if required.  Thanks.   ---  **Affects:** 3.0.5  **Attachments:** - [exceptions.txt](https://jira.spring.io/secure/attachment/18071/exceptions.txt) (_17.26 kB_) - [HtmlCharacterEntityReferences.patch](https://jira.spring.io/secure/attachment/18070/HtmlCharacterEntityReferences.patch) (_625 bytes_)","closed","in: core,","spring-projects-issues","2011-04-25T03:38:51Z","2019-01-12T16:25:42Z"
"","13498","Missing syntax in the 3.0.0 reference documentation [SPR-8856]","**[Brian Stempin](https://jira.spring.io/secure/ViewProfile.jspa?name=bstempi)** opened **[SPR-8856](https://jira.spring.io/browse/SPR-8856?redirect=false)** and commented  In section 3.2.3 (http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html), the example source is given:  > // create and configure beans > ApplicationContext context = > new ClassPathXmlApplicationContext(new String[] `""services.xml"", ""daos.xml""`); >  > // retrieve configured instance > PetStoreServiceImpl service = context.getBean(""petStore"", PetStoreServiceImpl.class); >  > // use configured instance > List userList service.getUsernameList();  The last line should read:  > List userList = service.getUsernameList();    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6c602d7bbc2f5a897ed1dc4ffa04b1155d9947d4","closed","type: enhancement,","spring-projects-issues","2011-11-17T13:50:43Z","2012-06-19T03:39:07Z"
"","13171","ConfigurationClassPostProcessor throws IllegalStateException when its postProcessBeanDefinitionRegistry is called with different registries [SPR-8527]","**[Brian Remmington](https://jira.spring.io/secure/ViewProfile.jspa?name=brianjohn)** opened **[SPR-8527](https://jira.spring.io/browse/SPR-8527?redirect=false)** and commented  The ConfigurationClassPostProcessor contains this method:      public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {     	if (this.postProcessBeanDefinitionRegistryCalled) {     		throw new IllegalStateException(     				""postProcessBeanDefinitionRegistry already called for this post-processor"");     	}     	if (this.postProcessBeanFactoryCalled) {     		throw new IllegalStateException(     				""postProcessBeanFactory already called for this post-processor"");     	}     	this.postProcessBeanDefinitionRegistryCalled = true;     	processConfigBeanDefinitions(registry);     }  This throws an exception when invoked twice, even if it is invoked with two different BeanDefinitionRegistry objects. Surely this should only happen if invoked twice on the same BeanDefinitionRegistry?    ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?111842-ConfigurationClassPostProcessor-IllegalStateException-when-starting-test-case  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18473/mylyn-context.zip) (_36.78 kB_)","closed","in: core,","spring-projects-issues","2011-07-12T06:03:31Z","2012-06-19T03:39:06Z"
"","13049","A @PathVariable provided in the method parameter, but not in the @RequestMapping, will throw an IllegalStateException. [SPR-8402]","**[Brian Reindel](https://jira.spring.io/secure/ViewProfile.jspa?name=hal10001)** opened **[SPR-8402](https://jira.spring.io/browse/SPR-8402?redirect=false)** and commented  For instance:  ``` @Controller public class MyController {  	@RequestMapping(value={""/user/id/{id}/delete"", ""/user/id/{id}/deleted/{deleted}/delete""}, method=RequestMethod.GET) 	public ModelAndView updateUserHandler(@PathVariable String id, @PathVariable String deleted) { 	 		/* Implementation */ 		 	} } ```  That code above will throw an IllegalStateException. Instead, only the following is allowed if I want access to deleted:  ``` @Controller public class MyController {  	@RequestMapping(value=""/user/id/{id}/deleted/{deleted}/delete"", method=RequestMethod.GET) 	public ModelAndView updateUserHandler(@PathVariable String id, @PathVariable String deleted) { 	 		/* Implementation */ 		 	} } ```  However, this necessitates always providing a value for the deleted parameter. This should instead be treated like request.getParameter(), in that if you try to access a request parameter (or path variable in the case of Spring) that doesn't exist on the path, the value defaults to null.  ---  **Affects:** 3.0.5  **Issue Links:** - #12639 Allow optional `@PathVariable` (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-06-05T15:22:50Z","2019-01-13T07:08:59Z"
"","13091","static content does not display in tomcat version 6.0.32 [SPR-8445]","**[bren](https://jira.spring.io/secure/ViewProfile.jspa?name=bdawg1)** opened **[SPR-8445](https://jira.spring.io/browse/SPR-8445?redirect=false)** and commented  we have an application that works as expexted on tomcat version 6.0.29 on a windows server . If i try to copy the war to a machine running version 6.0.32 none of the static content will display. If i copy the war file to a different machine with version 6.0.29 installed the static content displays correctly   ---  **Affects:** 3.0.5","closed","","spring-projects-issues","2011-06-13T05:32:27Z","2019-01-11T13:36:26Z"
"","13375","Unable to use @EnableTransactionManagement along with  [SPR-8733]","**[Brandon M.](https://jira.spring.io/secure/ViewProfile.jspa?name=jzcfk9)** opened **[SPR-8733](https://jira.spring.io/browse/SPR-8733?redirect=false)** and commented  I'm unable to use the new `@Cachable` construct within spring 3.1 along with the new `@EnableTransactionManagement`.  My application fails to start with the following exception:  Caused by: java.lang.IllegalArgumentException: Class name [null] is not a known auto-proxy creator class at org.springframework.aop.config.AopConfigUtils.findPriorityForClass(AopConfigUtils.java:140) at org.springframework.aop.config.AopConfigUtils.registerOrEscalateApcAsRequired(AopConfigUtils.java:113) at org.springframework.aop.config.AopConfigUtils.registerAutoProxyCreatorIfNecessary(AopConfigUtils.java:74) at org.springframework.aop.config.AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(AopNamespaceUtils.java:58) at org.springframework.cache.config.AnnotationDrivenCacheBeanDefinitionParser$AopAutoProxyConfigurer.configureAutoProxyCreator(AnnotationDrivenCacheBeanDefinitionParser.java:109) at org.springframework.cache.config.AnnotationDrivenCacheBeanDefinitionParser.parse(AnnotationDrivenCacheBeanDefinitionParser.java:67) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1414) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1404) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:184) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:111) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) ... 40 more  I've attached a sample application which has a test case to recreate this issue.  ---  **Affects:** 3.1 M2  **Attachments:** - [CacheTestProject.zip](https://jira.spring.io/secure/attachment/18860/CacheTestProject.zip) (_14.50 kB_)  **Issue Links:** - #13140 `@EnableTransactionManagement` conflicts with  (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-09-30T06:09:06Z","2019-01-13T07:07:41Z"
"","13372","Allow for setting of custom KeyGenerator in  XML namespace [SPR-8730]","**[Brandon M.](https://jira.spring.io/secure/ViewProfile.jspa?name=jzcfk9)** opened **[SPR-8730](https://jira.spring.io/browse/SPR-8730?redirect=false)** and commented  Need to enable setting of custom KeyGenerator via XML namespace.  Currently, if no key is specified in `@Cacheable` annotation, system will always default to the DefaultKeyGenerator.  See blow comment for further details.  http://blog.springsource.com/2011/02/23/spring-3-1-m1-caching/#comment-203239   ---  **Affects:** 3.1 M2  **Reference URL:** http://blog.springsource.com/2011/02/23/spring-3-1-m1-caching/#comment-203239  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40d88fd9918b1dcc8dd7e3e69350ad5a29f18490, https://github.com/spring-projects/spring-framework/commit/a12ebbfded96ffe89a163a2e49c076526db8d2a0","closed","type: enhancement,","spring-projects-issues","2011-09-28T12:12:16Z","2012-06-19T03:39:23Z"
"","13368","Unable to Autowire a dependency into an @AspectJ component [SPR-8726]","**[Brandon M.](https://jira.spring.io/secure/ViewProfile.jspa?name=jzcfk9)** opened **[SPR-8726](https://jira.spring.io/browse/SPR-8726?redirect=false)** and commented  I have an `@AspectJ` component that has an autowired dependency which is not getting injected into the component.  When the aspect attempts to use the autowired dependency, it encounters an NPE.  See attached project for example along with failing test case.   ---  **Affects:** 3.1 M2  **Attachments:** - [TestProject.zip](https://jira.spring.io/secure/attachment/18839/TestProject.zip) (_12.40 kB_)","closed","in: core,","spring-projects-issues","2011-09-27T08:07:53Z","2019-01-12T05:29:49Z"
"","13216","RestTemplate should support Void response types [SPR-8572]","**[Brad Cupit](https://jira.spring.io/secure/ViewProfile.jspa?name=brad.cupit)** opened **[SPR-8572](https://jira.spring.io/browse/SPR-8572?redirect=false)** and commented  when calling RestTemplate.exchange() I should be able to use a Void response type. Example (notice the last parameter):      restTemplate.exchange(webServiceUrl, HttpMethod.DELETE, null, Void.class);  The Void class implies no return entity and reads a little better than null for the response type.  The fix should be trivial. In RestTemplate.ResponseEntityResponseExtractor's constructor, just change this line: if (responseType != null) to this: if (responseType != null && responseType != Void.class)   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c472a163f114ba946974980be299deb0a7cb7f34","closed","type: enhancement,","spring-projects-issues","2011-07-29T08:14:11Z","2012-06-19T03:39:23Z"
"","13675","Improve DefaultKeyGenerator [SPR-9036]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-9036](https://jira.spring.io/browse/SPR-9036?redirect=false)** and commented  org.springframework.cache.interceptor.DefaultKeyGenerator is implemented by calculating the hashcode of all arguments. This is problematic in many cases:  - methods with similar signature - foo(int, String), foo(int, List)  - if the 2nd argument is null they will get mixed - methods with the same signature in different classes, using the same cache - they will get mixed - is there a collision resolution mechanism? If not, things will randomly fail. Rarely, but they will. Imagine that the arguments of two distinct methods (that use the same cache region) evaluate to the same hashcode (not unlikely) - they will override each other's values, and possibly a ClassCastException will occur on retrieval  What is in the first place the reason to get the hashcodes? The underlying cache mechanism is a hashtable of some sort, so it will calculate the hash of the key anyway. But it will have a collision-resolution strategy, unlike the KeyGenerator.  I suggest:  - concatenating the string representations of primitives, and the hashcode of non-primitives. - adding the class name and method name to the key - optionally, where non-primitive values are used as keys, log a warning - this is usually wrong, as the hashcode will change even though the values inside the object are the same  ---  **Attachments:** - [TestDefaultKeyGenerator.java](https://jira.spring.io/secure/attachment/20806/TestDefaultKeyGenerator.java) (_2.01 kB_)  **Issue Links:** - #14870 Cacheable key collision with DefaultKeyGenerator (_**""duplicates""**_) - #14870 Cacheable key collision with DefaultKeyGenerator - #14013 org.springframework.cache.interceptor.DefaultKeyGenerator has too weak hashing functionality  9 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2012-01-18T11:20:18Z","2019-01-11T22:21:29Z"
"","13539","useDefaultSuffixPattern in RequestMappingHandlerMapping  [SPR-8898]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8898](https://jira.spring.io/browse/SPR-8898?redirect=false)** and commented  DefaultAnnotationHandlerMapping  is now replaced with RequestMappingHandlerMapping for . That's good, but not all attributes of the old class are supported in the new one. I once reported an issue about detectHandlersInAncestorContexts (https://jira.springsource.org/browse/SPR-8753), but yesterday I needed another one (useDefaultSuffixPattern) and it was missing as well.  Can you make sure all attributes are supported, or at least that there are immediate, obvious replacements.   ---  **Affects:** 3.1 RC2","closed","type: enhancement,","spring-projects-issues","2011-12-06T04:30:12Z","2012-06-19T03:39:13Z"
"","13507","Allow multiple executors for @Async [SPR-8865]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8865](https://jira.spring.io/browse/SPR-8865?redirect=false)** and commented  Currently  uses only one executor for all `@Async` methods. It can be useful (and is often required) to have multiple executors (and hence multiple thread pools for example). This can be achieved by an optional parameter of `@Async`: `@Async`(""executorBeanId"")   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-11-21T14:30:49Z","2015-09-22T18:20:30Z"
"","13500","Path variable in class-level @RequestMapping not working properly [SPR-8858]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8858](https://jira.spring.io/browse/SPR-8858?redirect=false)** and commented  ```java @RequestMapping(""/{foo}"") public class FooController {    @RequestMapping(""/bar"")    public String bar(@PathVariable String foo) {    } } ```  That is not parsed properly - the path spring maps it to is simply ""/bar"". To make it work, you have a number of options:  - /{foo}/ (add a slash) - /{foo}/baz (add anything after that) - /bar/ (add a trailing slash)  That way it works, but it's not what we want - we want /foo/bar, not /foo//bar, and not /foo/bar/  ---  **Affects:** 3.1 RC1  **Issue Links:** - #12625 Wrong path mapping combination between type-level and method-level `@RequestMapping` on `@Controller`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b5bcfa0ae3e7c95aa388086a62e51b433ff61db1","closed","type: bug,","spring-projects-issues","2011-11-18T03:00:17Z","2019-01-13T07:07:17Z"
"","13427","Improve documentation on options for configuring Spring MVC [SPR-8784]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8784](https://jira.spring.io/browse/SPR-8784?redirect=false)** and commented  Many occurrences of the built-in namespace handlers are painful to use. That includes , ,  to name a few.  The problem is that once you go outside the standard use-case (and that happens in practically all of the projects I've used that), you have to drop the namespace and define all beans manually, one by one. Which would not be that bad, if it was mentioned anywhere in the documentation how to do that. Now you have to go the the XBeanDefinitionParser, read the code and see what beans are being registered, and what properties they are initialized with. And that code is not the nicest one to read. Plus - this defeats the whole purpose of having a one-tag-to-configure-the-basics. Because it makes you stuck with the basics only, rather than allowing you to built ontop of that. (I know there is at least an issue about mvc:annotation-driven that requests the option to customize a XHandlerAdapter). Another thing is - it is hard to debug once you happen to have a number of beans with names #0 that you haven't registered and don't know anything about (well, I agree you should know where they come from, but you can't override just that particular one - you have to override all). All that leads to questions like this one: http://stackoverflow.com/questions/3693397/howto-get-rid-of-mvcannotation-driven/3694059  How to improve that - I don't know exactly, but something out of the top of my head - allow defining \ tags inside the namespace-specific tag. Like:   \\\   which will automatically replace the XHandlerAdapter defined by the BeanDefinitionParser with the custom one. I'm reporting the 'issue' in spring-core, because I think that for example AbstractBeanDefinitionParser, or the classes used to register the beans (ParserContext, etc), can be made aware of those inner beans, and use a bean with the same-class-or-subclass, if one is defined with \. I know that sounds vague, but the final idea is to allow customization of just one of the beans defined by the catch-all tag.  (And another thing is documentation. AnnotationDrivenBeanDefinitionParser does a good job showing what beans exactly it defines (except that its javadoc has not been updated from 3.0 to 3.1), but this is not true for many other parsers from portfolio projects. I know the core project can't enforce that, but just mentioning it)   --- No further details from [SPR-8784](https://jira.spring.io/browse/SPR-8784?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-10-17T12:34:29Z","2019-01-11T14:05:56Z"
"","13426","Update and improve AnnotationDrivenBeanDefinitionParser javadoc [SPR-8783]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8783](https://jira.spring.io/browse/SPR-8783?redirect=false)** and commented  The javadoc of AnnotationDrivenBeanDefinitionParser still refers to the old handler adapter and mapping classes instead of the new ones:  Responsible for: - Registering a DefaultAnnotationHandlerMapping bean for mapping HTTP Servlet Requests to `@Controller` methods using `@RequestMapping` annotations. - Registering an AnnotationMethodHandlerAdapter bean for invoking annotated `@Controller` methods.  Should include RequestMappingHandlerMapping and RequestMappingHandlerAdapter instead.   ---  **Affects:** 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cd2fee035af8f235e8843b049878721dcab63703","closed","type: bug,","spring-projects-issues","2011-10-17T06:18:30Z","2012-06-19T03:39:12Z"
"","13421","Transaction synchronization resources are not properly cleaned-up [SPR-8778]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8778](https://jira.spring.io/browse/SPR-8778?redirect=false)** and commented  I was building my application using the latest snapshots. (of spring 3.1.0) But recently the following exception started to appear:  SEVERE: Servlet.service() for servlet [dispatcher] in context with path [##92] threw exception [Request processing failed; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: Already value [SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=[] updates=[] deletions=[] collectionCreations=[] collectionRemovals=[] collectionUpdates=[]])] for key [org.hibernate.impl.SessionFactoryImpl@7dd212] bound to thread [http-bio-80-exec-8]; nested exception is java.lang.IllegalStateException: Already value [SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=[] updates=[] deletions=[] collectionCreations=[] collectionRemovals=[] collectionUpdates=[]])] for key [org.hibernate.impl.SessionFactoryImpl@7dd212] bound to thread [http-bio-80-exec-8]] with root cause java.lang.IllegalStateException: Already value [SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=[] updates=[] deletions=[] collectionCreations=[] collectionRemovals=[] collectionUpdates=[]])] for key [org.hibernate.impl.SessionFactoryImpl@7dd212] bound to thread [http-bio-80-exec-8] at org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(TransactionSynchronizationManager.java:180) at org.springframework.orm.jpa.vendor.HibernateJpaDialect.prepareTransaction(HibernateJpaDialect.java:98) at org.springframework.orm.jpa.EntityManagerFactoryUtils.prepareTransaction(EntityManagerFactoryUtils.java:230) at org.springframework.orm.jpa.EntityManagerFactoryUtils.doGetTransactionalEntityManager(EntityManagerFactoryUtils.java:207) at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:211) at $Proxy72.find(Unknown Source) at com.welshare.dao.jpa.BaseDao.getById(BaseDao.java:46) at com.welshare.dao.jpa.BaseDao.getById(BaseDao.java:38) at sun.reflect.GeneratedMethodAccessor62.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:318) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:155) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy73.getById(Unknown Source) at com.welshare.service.impl.FollowingServiceImpl.updateCurrentUserFollowings(FollowingServiceImpl.java:233) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:318) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy92.updateCurrentUserFollowings(Unknown Source) at com.welshare.web.FollowingController.followers(FollowingController.java:76) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:176) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:436) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:419) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:827) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:874) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:779) at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.mortbay.servlet.UserAgentFilter.doFilter(UserAgentFilter.java:78) at org.mortbay.servlet.GzipFilter.doFilter(GzipFilter.java:131) at com.welshare.web.util.GzipFilter.doFilter(GzipFilter.java:22) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.valves.CrawlerSessionManagerValve.invoke(CrawlerSessionManagerValve.java:180) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:279) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:636)  I thought it was due to some recent change on my side, so I spent a whole day reverting and retesting things. Then I decided to switch to something stable, and saw that RC1 is out. Switched to RC1 - same thing. A bit more testing to confirm that it's not ""my fault"". Then I switched back to M2 and everything seems to be OK.  My guess is some recent change made so that the TransactionSynchronizationManager is not cleaned up properly.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13414 Jpa transaction manager transaction suspension ignores dialect resources  2 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2011-10-15T10:43:27Z","2019-01-11T14:06:47Z"
"","13395","RequestMappingHandlerMapping lacks detectHandlersInAncestorContexts [SPR-8753]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8753](https://jira.spring.io/browse/SPR-8753?redirect=false)** and commented  DefaultAnnotationHandlerMapping has detectHandlersInAncestorContexts, but the new RequestMappingHandlerMapping (used by mvc:annotation-driven since 3.1) doesn't have it. It would be good to add it. And optionally, make it configurable via    ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-10-09T23:51:05Z","2012-06-19T03:39:46Z"
"","13250","Improve bug reporting experience [SPR-8607]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8607](https://jira.spring.io/browse/SPR-8607?redirect=false)** and commented  (This is not an issue for the code or the framework, so this might not be the right place for it, but I don't see where to report it)  The issue reporting interfaces has some serious drawbacks:  - you can't edit your own bug report. If you mistype something in the title, or want to add a stacktrace/code to the description, you can't. - you can't edit your own comments below the issue - Tomcat has a stable version 7 for a year already and it does not appear in the list of tomcat versions. Perhaps it's the same for other containers/servers. - Affects version/s does not provide an option for ""SNAPSHOT"". I'm using the snapshot builds, but have to report M2  ---  This issue is a sub-task of #12773  **Issue Links:** - #13889 Unable to edit JIRA issue description after creation (_**""is duplicated by""**_)  2 votes, 4 watchers","closed","","spring-projects-issues","2011-08-11T02:05:15Z","2019-01-11T14:18:27Z"
"","13246","Use ErrorHandler in TaskExecutors [SPR-8603]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8603](https://jira.spring.io/browse/SPR-8603?redirect=false)** and commented  Exceptions that occur in `@Async` methods are currently lost (they don't appear in tomcat logs). The way to provide a custom exception handler (for the sake of logging the exception), you have to configure a TaskExecutor and supply it with a custom ThreadFactory, which in turn sets an uncaughtExceptionHandler to the created threads - not a very pleasant solution (http://stackoverflow.com/questions/4531240/log-runtimeexception-thrown-from-thread-created-by-spring-via-the-async-annotati).  Since TaskScheduler implementations make use of TaskUtils.decorateWithErrorHandler(..) I think it is logical for TaskExecutor implementations to do the same, and use a LoggingErrorHandler by default. And also expose a setter for a custom ErrorHandler.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13635 Spring `@Async` should have some way of specifying UncaughtExceptionHandler  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-08-10T10:16:21Z","2019-01-13T07:08:09Z"
"","13225","Spring should support Quartz 2.0 CronTrigger interface [SPR-8581]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8581](https://jira.spring.io/browse/SPR-8581?redirect=false)** and commented  CronTriggerBean extends CronTrigger - this causes an IncompatibleClassChangeError with quartz 2.0.2 on the classpath, because CronTrigger is an interface in quartz 2.  Quartz 2 being around for a couple of months now, it will be good to upgrade spring to support it.  Note that this issue is not manifested in Tomcat 6 - only in Tomcat 7 (but it is missing in the version drop-down). I believe this is a classloader change, so I'm also reporting an issue to Tomcat. (We are not using this particular class, but tomcat still loads it).  ---  **Affects:** 3.1 M2  **Issue Links:** - #13081 java.lang.IncompatibleClassChangeError  --> with new Version Of Quartz (2.0.0) !!! - #13006 Need support for Quartz 2.0","closed","type: enhancement,","spring-projects-issues","2011-08-02T07:26:48Z","2019-01-11T13:20:55Z"
"","13220","Proper handling of multiple transaction managers for one method [SPR-8576]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8576](https://jira.spring.io/browse/SPR-8576?redirect=false)** and commented  This is related to https://jira.springsource.org/browse/SPR-8573 All preconditions are described there. But 8573 is about detecting the default transaction manager, and this one here is about trying to apply both annotations (`@SqlTransactional` and `@GraphTransactional`) on the same method (which may be two manifestations of the same issue)  So, when I have a method:  `@SqlTransactional` `@GraphTransactional` public User register(User user) throws UserException { .. }  Only the SQL transaction is started. If I reverse the order of the annotations - only the graph transaction is started. That's because there is only one transaction manager in the trace (I checked with debug). Shouldn't there be two calls to the transaction interceptor(s)?  In fact, I moved from","closed","status: bulk-closed,","spring-projects-issues","2011-08-01T14:41:33Z","2019-01-12T03:49:30Z"
"","13217","Incorrect default transaction manager when multiple transaction managers exist [SPR-8573]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8573](https://jira.spring.io/browse/SPR-8573?redirect=false)** and commented  I have two transaction manager declared (one for MySQL and one for a NoSQL (neo4j) DB). Then I have two annotations - `@SqlTransactional` and `@GraphTransactinal`, which are annotated with `@Transactional` (as meta-annotation):  `@Retention`(RetentionPolicy.RUNTIME) `@Transactional`(""neo4jTransactionManager"") public `@interface` GraphTransactional { }  `@Retention`(RetentionPolicy.RUNTIME) `@Transactional`(isolation=Isolation.READ_UNCOMMITTED, propagation=Propagation.REQUIRED) public `@interface` SqlTransactional { .. }  I have the following definitions:     However, `@SqlTransactional` appeared to be using the JtaTransactionManager that is ""neo4jTransactionManager"". So, if the annotation does not specify ""transactionManager"", a default transaction manager is supposed to be used (which is ""transactionManager""). However, when I step through the spring code, it appears that transactionManagerBeanName in TransactionAspectSupport is ""neo4jTransactionManager"". Then I realized there are actually two interceptors, and whichever gets created first seems to matter. That's why I reversed the  definitions (put the sql one on top), and everything worked.  I think this is undesirable behaviour. I don't know how exactly to fix it, because I'm not aware of the container behaviour with two interceptors, but it seems TransactionAspectSupport.determineTransactionManager(..) relies on the beanName per-interceptor (which appears to be incorrect in my case).  I don't know if having `@Transactional`.value() default ""transactionManager"" won't be better. But the general assumption is that ""omitting the transaction manager name means it uses the default one, named ""transactionManager"".  ---  **Affects:** 3.1 M2  **Issue Links:** - #13220 Proper handling of multiple transaction managers for one method","closed","status: bulk-closed,","spring-projects-issues","2011-07-31T23:21:11Z","2019-01-12T03:49:31Z"
"","13212","Don't throw exceptions (configurable) for missing parameters [SPR-8568]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8568](https://jira.spring.io/browse/SPR-8568?redirect=false)** and commented  HandlerMethodInvoker verifies if required request parameters are present and throws an exception otherwise (line 501: raiseMissingParameterException(paramName, paramType);)  This is not bad, but in production it is not that desirable. Web crawlers and site scrapers often open URLs without supplying the needed parameters which pollutes the log files with whole stacktraces.  You can't actually stop that stacktrace from appearing in the servlet container logs, apart from catching it in a Filter. So my suggestion is to make it configurable - either throw an exception, or log it on one-line with WARN level.   ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-07-28T12:15:35Z","2011-11-22T16:48:40Z"
"","13208","Better Quartz integration [SPR-8564]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8564](https://jira.spring.io/browse/SPR-8564?redirect=false)** and commented  Some people advise that if you are to use quartz, you should not use it through the spring-quartz integration. I wanted to use spring, but it appeared impossible to do what I want - I wanted annotation-based definition of quartz jobs. so that you simply annotate a class and it is run by quartz (similar to the `@Scheduled` annotation).  That's why I wrote some improvements on top of the current quartz classes in spring. Here I've shown everything: http://stackoverflow.com/questions/6788811/taskscheduler-scheduled-and-quartz/6840970#6840970 I know I should attach sources here, but I'll do it if you agree that these changes can be put in a future spring release. (Since I am not a quartz expert, I might be missing some crucial point, so let me know)   ---  1 votes, 0 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-07-27T00:54:18Z","2019-01-12T03:49:33Z"
"","13152","Report request URI when exception occurs [SPR-8506]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8506](https://jira.spring.io/browse/SPR-8506?redirect=false)** and commented  When exception occurs in the spring mechanism for invoking the target method (for example - binding/conversion exception, missing parameter) spring-mvc does not tell us what is the URL for which the exception occurs. Thus you see exceptions in the log file and have no idea where it is originating form.  The current workaround is to register an exception resolver that simply logs the request url and rethrows the exception, but it would be good if spring-mvc did that by default.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-07-02T01:30:24Z","2012-07-09T17:08:06Z"
"","13119","Allow 301 redirect from trailing slash to no trailing slash urls [SPR-8473]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8473](https://jira.spring.io/browse/SPR-8473?redirect=false)** and commented  It would be nice to use strict url matching and at the same time be able to redirect alternatives with 301 (permanent).  For example: http://example.com/foo/bar -> no trailing slash, and it is specified that way in the `@RequsetMapping` http://example.com/foo/bar/ -> 301 redirect to /foo/bar  This is to enforce consistency of urls and at the same time not loose traffic/SEO value if someone accidentally adds the wrong link. Logging could be configured to report these redirects.   ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/5eacd228f7aa79661f087ecb42d90112fec189bf  5 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-06-21T03:36:06Z","2019-01-12T03:49:39Z"
"","12912","Add an option not to deregister MBeans from MBeanExporter or to automatically increment their version [SPR-8264]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8264](https://jira.spring.io/browse/SPR-8264?redirect=false)** and commented  Whenever an MBeanExporter is destoryed in spring context, all MBeans are deregistered. There should be an option to disable automatic deregistration of mbeans. The scenario where it applies is as follows:  Tomcat 7.0 (as well as tc server, where this feature originates) can have multiple versions of the same webapp. So when I deploy my application, I use REGISTRATION_REPLACE_EXISTING, and so the beans of the old version are replaced. But then (when all sessions to the old version expire), I undeploy the older version, and its MBeanExporter deregisters its mbeans. However that turns out to deregister the ones deployed by the new version (they have the same name, of course).  Currently, I have two options: - use an incremented version in the key (mbean name), so that each new deployment has a different mbean name - extend the MBean exporter and add that option myself.  I picked the latter, but it would be nice to have this option built-in. That said - it might be nice to add an additional option to REGISTRATION_REPLACE_EXISTING that would add a new bean with the same name and #2 (or #n) appended to it.   ---  **Affects:** 3.1 M1","closed","type: enhancement,","spring-projects-issues","2011-04-20T02:10:53Z","2018-12-28T10:00:36Z"
"","13688","Allow @Profile on @Bean annotated methods for @Configuration classes [SPR-9049]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-9049](https://jira.spring.io/browse/SPR-9049?redirect=false)** and commented  For simplicity and ease of configuration, it would be nice if the following were possible using `@Configuration` classes:  ``` @Configuration @Profile(""production"") public class AppConfig {     @Bean    @Profile(""test"")    public Object testObject() {        // ...    }  } ```  This would allow specifying a default profile for the configuration, but overriding at the bean method level.  Two methods that approximate this behavior are `@Imports` and inner classes. However, both these approaches are verbose, require new classes and do not provide a consistent experience when compared to \ which allow a developer to specify profiles inline.  For consistency, it would also be nice to support \ for bean instances in XML.    ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2012-01-23T14:58:45Z","2018-12-28T09:28:50Z"
"","13684","Support simplified main class application context / dependency management [SPR-9044]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-9044](https://jira.spring.io/browse/SPR-9044?redirect=false)** and commented  ## Problem  One common request I see quite frequently on the internet is the ability to have spring autowire a main class:  - http://hvijay.wordpress.com/2011/07/02/spring-dependency-injection-in-applications-main-class/ - http://forum.springsource.org/archive/index.php/t-47933.html - http://stackoverflow.com/questions/6820724/how-to-inject-properties-into-a-spring-bean-from-main-class - http://stackoverflow.com/questions/8313070/spring-bean-injection-in-main-method-class - http://stackoverflow.com/questions/3659720/spring-3-autowire-in-standalone-application - http://stackoverflow.com/questions/4787719/spring-console-application-configured-using-annotations - http://forum.springsource.org/showthread.php?75991-ContextConfiguration  There is no shortage of questions / solutions to this problem which illustrates a need for a standardized approach.  ## Solution  What I am proposing is combination of features between the following existing classes:  1. `org.springframework.test.context.junit4.SpringJUnit4ClassRunner` - provides functionality of the Spring TestContext Framework to standard JUnit 4.5+ tests 2. `org.springframework.test.context.ContextConfiguration` - class-level metadata that is used to determine how to load and configure an ApplicationContext for test classes 3. `org.springframework.web.context.support.SpringBeanAutowiringSupport` a convenient base class for self-autowiring classes that gets constructed within a Spring-based web application.  Thus provinding first class support for console based application context management and DI.  ## Features  1. Autowiring of main class dependencies 2. Auto-destruction of application context 3. Ability in the future to handle command line arguments as beans  ## Properties  1. Standardization 2. Consistency with other APIs 3. Minimal configuration 4. Intent revealing  ## Example  My visions is something like the following:  ``` import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.MainSupport; import org.springframework.context.ContextConfiguration; import org.springframework.context.support.AnnotationConfigContextLoader;  @ContextConfiguration(classes=AppConfig.class, loader=AnnotationConfigContextLoader.class) public class Main extends MainSupport {          @Autowired     private Service service;      public static void main( String[] args ) {         // MainSupport.execute         execute(args);     }          @Main     public void main() {         service.run();     }      } ```  The way this would work is as follows:  1. JVM calls `main` 2. `main` delegates to super class method `MainSupport.execute` provided by spring (analog of `SpringBeanAutowiringSupport`) 3. `MainSupport.execute` reads the `@ContextConfiguration` annotation and looks for a `@Main` annotation (analog of `@Test`) 4. `MainSupport.execute` creates the application context 5. `MainSupport.execute` create an application `Main` class instance 6. `MainSupport.execute` injects dependencies 7. `MainSupport.execute` wraps instance in a proxy that will advise the method annotated with `@Main`. This proxy will first call the annotated method and then destroy the application context  ---  **Issue Links:** - #12732 Provide Java main() for launching Spring applications  4 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2012-01-21T07:06:07Z","2019-01-11T22:24:56Z"
"","13676","Document all predefined SpEL variables [SPR-9037]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-9037](https://jira.spring.io/browse/SPR-9037?redirect=false)** and commented  Spring team should clearly document all predefined SpEL variables in a centralized place to avoid confusion. In particular, I see no mention of `environment`. See http://stackoverflow.com/questions/7885847/list-of-spring-el-variables for details.   ---  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-01-18T18:30:25Z","2019-01-12T02:36:04Z"
"","13324","Allow configuration of whether HttpMessageConverters should set content-length header [SPR-8682]","**[Bob Jacoby](https://jira.spring.io/secure/ViewProfile.jspa?name=jacorob)** opened **[SPR-8682](https://jira.spring.io/browse/SPR-8682?redirect=false)** and commented  I use spring with Apache's HttpClient 4.1. There is an outstanding feature request for officially supporting this version of HttpClient since the currently supported version (3.x) is no longer supported (see #11385). I created a port to the newer version of HttpClient (code included in referenced issue).  However, in 3.0.6 the HttpMessageConverters now set the content-length header on the message prior to using the httpclient to send the message. HttpClient 4.1 expects this header to NOT be set because it expects to be the one to set that header.  It would be nice to at least have the option for the converters to not set the content length. Ideally it would default to not setting them since that would be compatible with Spring 3.0.5. Otherwise I will have to rewrite all the message converters to upgrade to 3.0.6.  ---  **Affects:** 3.0.6  **Issue Links:** - #13509 Truncated HTTP responses","closed","in: web,","spring-projects-issues","2011-09-12T08:03:09Z","2019-01-11T14:23:50Z"
"","13182","CollectionToObjectConverter uses the first element of a collection even when the collection could be assigned to an Object [SPR-8538]","**[Bob Jacoby](https://jira.spring.io/secure/ViewProfile.jspa?name=jacorob)** opened **[SPR-8538](https://jira.spring.io/browse/SPR-8538?redirect=false)** and commented  This is the exact same issue as #13111. However, that issue (a closed issue) describes it as only affecting 3.1 whereas I have found that it affects 3.0.5 as well. If you have a class with a property 'settings' that is defined as Map, you can reproduce the issue.  When a value of the map is a list the CollectionToObjectConverter is called and assigns the first value of my list to the collection which is not what I expected or want. For example,                                                                                           mylist                                                                   a                         b                                                                   (note - I tried use util:list as well and (as expected and should) received the same results).  Rather than reopen the closed issue, I decided I should create a new issue instead with the appropriate affected version. The resolution described in #13111 would be perfect if it could be backported to the 3.0.x line.  ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0df4631788da1c0055e7fb050d02013724ee9d42, https://github.com/spring-projects/spring-framework/commit/a2f00f205a0b54c870a2f93684fa5fb30e0d2935","closed","type: enhancement,","spring-projects-issues","2011-07-15T07:53:41Z","2019-01-11T13:19:19Z"
"","13698","Concurrent problem with BeanWrapperImpl.getPropertyValue [SPR-9059]","**[Björn Voß](https://jira.spring.io/secure/ViewProfile.jspa?name=bjoern.voss)** opened **[SPR-9059](https://jira.spring.io/browse/SPR-9059?redirect=false)** and commented  Since 3.1 BeanWrapperImpl has a concurrent problem with properties which have only a getter method. Please see my very simple maven project in the attached zip-file. The main method of the Starter class produces 3 to 8 exceptions per run with the 3.1.0 and the latest SNAPSHOT of 3.1.1. But if you either uncomment the setter or got back to 3.0.7 it is absolute stable.  I suppose it has something to do with the new introduced ExtendedBeanInfo in CachedIntrospectionResults(L224) but I didn't get it right now.  ---  **Attachments:** - [fix_for_spr_9059.patch](https://jira.spring.io/secure/attachment/19339/fix_for_spr_9059.patch) (_818 bytes_) - [test_for_spr_9059.patch](https://jira.spring.io/secure/attachment/19338/test_for_spr_9059.patch) (_1.85 kB_) - [test.zip](https://jira.spring.io/secure/attachment/19333/test.zip) (_2.63 kB_)  **Issue Links:** - #12995 Review ExtendedBeanInfo implementation (_**""duplicates""**_) - #14663 Overhaul non-void JavaBean write method support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a8be690998f43a9253305e09f96ad83058ef540, https://github.com/spring-projects/spring-framework/commit/0ee12563b038797a137ac67b13e5dd6d3d918a7f  1 votes, 1 watchers","closed","status: duplicate,","spring-projects-issues","2012-01-25T13:00:19Z","2019-01-12T16:48:18Z"
"","13621","Cron expression with fixed weekday and fixed date may or may not lead to IllegalStateException (runaway search for next trigger) [SPR-8981]","**[Bernhard Seebass](https://jira.spring.io/secure/ViewProfile.jspa?name=seebass)** opened **[SPR-8981](https://jira.spring.io/browse/SPR-8981?redirect=false)** and commented  A cron expression combining fixed date and fixed weekday may or may not fail.  Example:  ```java TimeZone tz = TimeZone.getTimeZone(""UTC""); CronSequenceGenerator g = new CronSequenceGenerator(""0 0 0 29 2 WED"", tz); System.out.println(g.next(new Date(112, 1, 1))); // -> Wed Feb 29 01:00:00 CET 2012 try { g.next(new Date(113, 2, 1)); } catch (IllegalStateException ex) { ex.printStackTrace(); // java.lang.IllegalStateException: Invalid cron expression led to runaway search for next trigger } ``` This kind of cron-expression must either always trigger an exception on initialization or it must always work. To make this work, CronSequenceGenerator would have to be adapted to allow 28 years in the future instead of only 4 (line 162).  ---  **Affects:** 3.1 GA  **Issue Links:** - #21574 CronSequenceGenerator - Friday 13th issue - #19500 Cron Expression validation  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2012-01-03T01:06:17Z","2020-08-03T14:52:17Z"
"","13822","Spring MVC Portlet 2.0 @EventMapping is not recognized [SPR-9184]","**[Bassem Reda Zohdy](https://jira.spring.io/secure/ViewProfile.jspa?name=bassem)** opened **[SPR-9184](https://jira.spring.io/browse/SPR-9184?redirect=false)** and commented  While I was development Portlet 2.0 application and testing it with portlet-prototyping-maven-plugin everything was working with no problem but while I was testing Event feature of portlet 2.0 I faced this problem:  org.springframework.web.portlet.NoHandlerFoundException: No matching handler method found for portlet request: mode 'view', phase 'EVENT_PHASE', parameters map[[empty]]  while controller source code is  `@Controller` `@RequestMapping`(""VIEW"") public class TestController { private static Log log = LogFactory.getLog(TestController.class);      @EventMapping(""{http://com.ibm/portal/portlets/ns}PublishEvent"")     public void processName(EventRequest eventRequest,     		EventResponse eventResponse) {     	String city = (String) eventRequest.getEvent().getValue();     	log.info(""Reciving data"" + city);     }  ... }   ---  **Affects:** 3.1.1","closed","status: declined,","spring-projects-issues","2012-02-29T04:59:01Z","2019-01-12T16:36:44Z"
"","13651","Spring 2.5.6 with Toplink 11g ORM java.lang.ClassNotFoundException: oracle.toplink.publicinterface.UnitOfWork [SPR-9012]","**[Barani Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=barani)** opened **[SPR-9012](https://jira.spring.io/browse/SPR-9012?redirect=false)** and commented  ClassNotFound Exception is thrown as there is no such package in Toplink 11g. Also looking at source code for the Spring framework it all refers to the correct package but at the run time it tries to load a class which is not defined in the class file and not sure where it gets picked up.   ---  **Affects:** 2.5.6  **Attachments:** - [Stack Trace.txt](https://jira.spring.io/secure/attachment/19287/Stack+Trace.txt) (_7.41 kB_)","closed","in: core,","spring-projects-issues","2012-01-10T04:00:04Z","2019-01-12T16:36:58Z"
"","13447","Minor typo in code sample of Cache Abstraction documentation [SPR-8805]","**[Auke van Leeuwen](https://jira.spring.io/secure/ViewProfile.jspa?name=auke)** opened **[SPR-8805](https://jira.spring.io/browse/SPR-8805?redirect=false)** and commented  There is a small typo in the one of the code samples in the Cache Abstraction documentation: http://static.springsource.org/spring/docs/3.1.0.M1/spring-framework-reference/html/cache.html:  ```     ```  Instead of `org.springframework.cache.ehcache.EhcacheCacheManager` it's actually: `org.springframework.cache.ehcache.Eh{*}C{*}acheCacheManager`. Just a small typo but it will of course not start your spring-context if you copy-paste it.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13277 Use lowercase 'c' in 'Ehcache' consistently (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-10-27T08:30:27Z","2019-01-11T14:41:09Z"
"","13492","Spring 3.1 RC1 includes stale duplicate of spring-cache XSD [SPR-8850]","**[Ashish](https://jira.spring.io/secure/ViewProfile.jspa?name=javapro123)** opened **[SPR-8850](https://jira.spring.io/browse/SPR-8850?redirect=false)** and commented  I am trying to specify a custom key generator. When I have the following in the config file for enabling annotation based caching I get the error while loading the config file. I need to generate a hashCode based on the combination of methodName + params    Error:  ---  Exception in thread ""Main Thread"" org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 10 in XML document from class path resource [MyContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'key-generator' is not allowed to appear in element 'cache:annotation-driven'. at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:243) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:94) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:523) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:436) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:84) at com.iw.cache.CacheTest.main(CacheTest.java:10) Caused by: org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'key-generator' is not allowed to appear in element 'cache:annotation-driven'. at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195) at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:131) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:384) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:318) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:417) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3182) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processAttributes(XMLSchemaValidator.java:2659) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:2066) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.emptyElement(XMLSchemaValidator.java:725) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:377) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:140) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:235) at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:284) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:388) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:243) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:522) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:436) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) ... 1 more  ---  **Affects:** 3.1 RC1","closed","in: core,","spring-projects-issues","2011-11-14T13:11:52Z","2019-01-13T21:41:32Z"
"","13708","[HandlerMethodInvoker] Invoking request handler method throws throws java.lang.Exception [SPR-9069]","**[Ashish Kulkarni](https://jira.spring.io/secure/ViewProfile.jspa?name=kulkarni_ash)** opened **[SPR-9069](https://jira.spring.io/browse/SPR-9069?redirect=false)** and commented  I am seeing this error message in my log file, and then after one of this messages, my web application stops to work the only way to recover it is to restart tomcat,  DEBUG [HandlerMethodInvoker] Invoking request handler method: public com.tauck.model.helper.DataTablesResponse com.tauck.controller.AirportController.displayAirportAjax() throws java.lang.Exception   --- No further details from [SPR-9069](https://jira.spring.io/browse/SPR-9069?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-01-30T06:15:15Z","2019-01-12T05:29:18Z"
"","13605","Would like have better custom exception handling using RestTemplate [SPR-8965]","**[Arvind Patil](https://jira.spring.io/secure/ViewProfile.jspa?name=arvindpatil)** opened **[SPR-8965](https://jira.spring.io/browse/SPR-8965?redirect=false)** and commented  Hello,  Would like to have better API's at Rest Template to get custom exception thrown `@controllers` in Rest based applications. It is becoming extremely difficult to deal with custom exception using only HTTP status codes.  I appreciate the lot of effort put in by Arjen and team to provide Rest Template based client projects for REST services. In my opinion it will be complete/rather more powerful when developer like me to extract exceptions thrown by below layers like controllers/services/dao's.  May be spring team can provide generic Response and Request objects/classes so that we can extend from our domain model/POJO and at controller we can set the exceptions/codes and can be retrieved as part of standard  RestTemplate based api's like getException().  Regards, Arvind   ---  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-12-28T03:38:50Z","2014-01-30T09:16:19Z"
"","13474","JPA without persistence.xml fails when all classpath items are jars [SPR-8832]","**[Artem Troitskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=axtavt)** opened **[SPR-8832](https://jira.spring.io/browse/SPR-8832?redirect=false)** and commented  `LocalContainerEntityManagerFactoryBean` with `setPackagesToScan()` and without `persistence.xml` fails when all classpath items are jars with the following exception:  ``` Caused by: java.io.FileNotFoundException: class path resource [] cannot be resolved to URL because it does not exist         at org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:179)         at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl(DefaultPersistenceUnitManager.java:426) ```  It doesn't fail if at least one classpath item is a folder.  It's caused by attempt to resolve a pattern pointing to the classpath root (`""classpath:""`) that  doesn't work for jars.  ---  **Affects:** 3.1 RC1  **Issue Links:** - #19869 Unable to resolve persistence unit root URL with LocalContainerEntityManagerFactoryBean - #18819 DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl fails when run from a shaded jar  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62e5b9da0499779ab572390082cd98d1ac70509b  9 votes, 11 watchers","closed","type: bug,","spring-projects-issues","2011-11-09T10:30:07Z","2019-01-11T15:04:19Z"
"","13380","Make org.springframework.http.MediaType Serializable [SPR-8738]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-8738](https://jira.spring.io/browse/SPR-8738?redirect=false)** and commented  Immediately show an example. 1. HttpRequest is received with Spring-integration **** without any mapped-request-headers restrictions. 2. So it applies all HttpHeaders including **Accept** 3. Then that String parsed with **MediaType.parseMediaTypes** and resulted **ArrayList** stored in MessageHeaders 4. So, when I use some external **messageStore** in nested message-flow  > java.io.NotSerializableException: org.springframework.http.MediaType  is throwed. Total: add imlementation **java.io.Serializable** to **org.springframework.http.MediaType** for full compatibility of Spring-Web and Spring-integration-http   ---  **Affects:** 3.0.6  **Issue Links:** - [INT-2432](https://jira.spring.io/browse/INT-2432) Multi-Valued Non-Serializable Http Headers Cause NotSerializableException in MessageHeaders.writeObject  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1fd7bc3ee52d5b8a5052850abe9b9a41390711da","closed","type: enhancement,","spring-projects-issues","2011-10-03T23:27:36Z","2013-08-29T16:20:44Z"
"","13175","META-INF/spring.handlers are hidden resources when running with special isolated ClassLoader, for example as osgi Netbeans plugins or javawebstart [SPR-8531]","**[Arnaud Nauwynck](https://jira.spring.io/secure/ViewProfile.jspa?name=arnaud.nauwynck)** opened **[SPR-8531](https://jira.spring.io/browse/SPR-8531?redirect=false)** and commented  the META-INF/ is a hidden package for isolated ClassLoader, for example as osgi Netbeans plugins  Suppose you want to use Spring in your netbeans plugins application, and your application in split into several plugins depending of each others, you can not start the ClassPathXmlApplicationContext, because it fails to validate xml files, as none of the META-INF/spring.handlers are seen by the ClassLoader of your plugin.  Unfortunately, this resource name ""META-INF/spring.handlers"" is hard-coded in org.springframework.beans.factory.xml.PluggableSchemaResolver and the stack calling this constructor from ClassPathXmlApplicationContext is extremely difficult (impossible?) to customize so as to change the default value.  Would it be possible to use another (additionnal) resource name than ""META-INF/spring.handlers"", for example ""org/springframework/spring.handlers"" ? A simple migration plan would be to search for both names, and simply concatenate results : no backward compatible problem, and no more problem with all these strange isolated ClassLoader such as osgi, Netbeans, JavaWebStart...  ---  **Issue Links:** - #13015 Spring XSD validation fails in the presence of non-standard classloaders due to problems resolving ""schema.handlers"" etc. (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-07-14T06:30:02Z","2019-01-12T16:48:44Z"
"","13813","Backport: ""Jaxb2Marshaller::supports() ignores classes found by packages scanning"" [SPR-9175]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-9175](https://jira.spring.io/browse/SPR-9175?redirect=false)** and commented  ---  This issue is a backport sub-task of #13790  3 votes, 2 watchers","closed","in: data,","spring-projects-issues","2012-02-28T00:58:34Z","2019-01-11T22:16:28Z"
"","13053","Create separate handler stereotype for RESTful web services [SPR-8406]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-8406](https://jira.spring.io/browse/SPR-8406?redirect=false)** and commented  The `@Controller` stereotype is tailored for a role within an MVC environment. As such, it makes certain assumptions that are not completely valid in a web services scenario (for instance, implicit view name resolution, and the ModelAndView concept).  We could add another stereotype (eg. `@Resource`) that suits a web service scenario better. For instance, it would not (implicitly) use the ModelAndView paradigm, and default to having `@Request-` and `@ResponseBody` on all methods.  ---  **Issue Links:** - #13928 Spring MVC: Guidance on reporting un-handled errors as data when implementing a REST API - #13948 DefaultHandlerExceptionResolver doesn't handle BindException but does handled other data binding related exceptions - #12029 void method in MVC controller that is not annotated with `@ResponseStatus` and does not take a HttpServletResponse as parameter results in misleading 404 (_**""supersedes""**_)  12 votes, 15 watchers","closed","has: votes-jira,","spring-projects-issues","2011-06-06T02:50:02Z","2019-01-13T07:08:57Z"
"","12891","Accept mediatype overwrites charset [SPR-8243]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-8243](https://jira.spring.io/browse/SPR-8243?redirect=false)** and commented  When a client HTTP request contains an Accept header with media types, Spring MVC will pass on this media type to the MappingJacksonHttpMessageConverter, thus overriding the specific media type (which might contain addition information, such as a charset).  For example:  Request: Accept: application/json  Actual response: Content-Type: application/json  Expected response: Content-Type: application/json;charset=UTF-8    --- No further details from [SPR-8243](https://jira.spring.io/browse/SPR-8243?redirect=false)","closed","in: web,","spring-projects-issues","2011-04-11T04:16:35Z","2019-01-11T12:53:40Z"
"","13345","AbstractSingleBeanDefinitionParser should handle depends-on, lazy-init, scope, etc. [SPR-8703]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-8703](https://jira.spring.io/browse/SPR-8703?redirect=false)** and commented  `AbstractSingleBeanDefinitionParser` has support for setting bean name and aliases (via superclass), parent name, and bean class, but not depends-on, lazy-init, scope etc.  This seems arbitrarily incomplete. Ideally, this class would include support and default handling for all of the settable properties of the `BeanDefinition` interface.  A nice design would be for the superclass `AbstractBeanDefinitionParser` to have methods like this:  ``` protected void parseDependsOn(BeanDefinition beanDefinition, String value, ParserContext parserContext) {     ... } protected void parseScope(BeanDefinition beanDefinition, String value, ParserContext parserContext) {     ... } ```  so the subclass could easily use different attributes (or other sources) for these settings.  `AbstractSingleBeanDefinitionParser` could then invoke these helper methods by default with the usual attributes, but in an easily overridable way.   ---  **Affects:** 3.0.6  1 votes, 1 watchers","open","status: bulk-closed,","spring-projects-issues","2011-09-16T09:35:15Z","2022-06-14T20:44:32Z"
"","13508","Default element remains added while form property binds to a List type datatype [SPR-8866]","**[Apurav Chauhan](https://jira.spring.io/secure/ViewProfile.jspa?name=apurav)** opened **[SPR-8866](https://jira.spring.io/browse/SPR-8866?redirect=false)** and commented  In the method ""setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv)"" in case the propValue Object is of List type, the current code keeps the size of the list in a variable before logic processing. The size of the list changes after we get the new convertedValue. But after that instead of getting the new size, the already declared size is picked which results in wrong conditioning.  The size should be recalculated  considering the list might get modified.  For eg: In case of AutopopulatingList, the get call to an index which is not having an element will automatically add a default element at that index. So the size of this list will change. And should be recalculated .   ---  **Affects:** 3.0.6  **Attachments:** - [BeanWrapperImpl.java](https://jira.spring.io/secure/attachment/19129/BeanWrapperImpl.java) (_43.02 kB_)","closed","status: bulk-closed,","spring-projects-issues","2011-11-22T03:45:06Z","2019-01-12T02:36:53Z"
"","13127","A mismatch in the @RequestParam paramter name causes spring mvc to ingnore the method mapping alltogether [SPR-8481]","**[Anwar Chirakkattil](https://jira.spring.io/secure/ViewProfile.jspa?name=sadikanwar)** opened **[SPR-8481](https://jira.spring.io/browse/SPR-8481?redirect=false)** and commented  If there is a mismatch in the `@RequestParam` parameter of a method argument, that method is completely ignore by spring. For eg:  ```java @Controller @RequestMapping(""/reportload/singleload/*"") public class SingleReportUploadViewController{     @RequestMapping(value = ""uploadDocument"", method = RequestMethod.POST) 	public @ResponseBody 	ResponseJsonDataHolder uploadDocument(@RequestParam(""publishDate"") String publishDate,){   }  } ```  If I pass publishDat instead of publishDate as a request parameter ,invoking the URL(just an eg:) http://localhost:999/app/reportload/singleload/uploadDocument/ is silently ignored by spring MVC and there are indication of what went wrong. Also, a HTTP 200 comes back from the server as if the request was completed successfully. There has to be some kind of exception or feedback mechanism to the developer that there is a mismatch or something doesn't look good.    ---  **Affects:** 3.0.5  **Attachments:** - [log.txt](https://jira.spring.io/secure/attachment/18390/log.txt) (_1.69 kB_)","closed","in: web,","spring-projects-issues","2011-06-22T15:35:51Z","2019-01-11T13:09:43Z"
"","13587","""Ambiguous handler methods"" with RequestMapping of ""/{folderName}"" and ""/{folderName}/"" - regression in Spring 3.1 [SPR-8947]","**[Anthony Gerrard](https://jira.spring.io/secure/ViewProfile.jspa?name=anthonygerrard)** opened **[SPR-8947](https://jira.spring.io/browse/SPR-8947?redirect=false)** and commented  In my Spring MVC controller I have the following mappings  `@RequestMapping`(value = ""/{folderName}"", method = RequestMethod.GET)  and  `@RequestMapping`(value = ""/{folderName}/"", method = RequestMethod.GET)  In Spring 3.0 this worked without problems but in Spring 3.1 when I send a request that should match the second mapping (with the trailing slash) I get an NestedServletException with root cause IllegalStateException: Ambiguous handler methods mapped for HTTP path.  Full stack trace attached.  A request that matches the first mapping works fine.    ---  **Affects:** 3.1 GA  **Attachments:** - [stack.txt](https://jira.spring.io/secure/attachment/19230/stack.txt) (_3.12 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/c43fce977f6e21f08443d07e8cc7b4b1ca588f3c","closed","status: declined,","spring-projects-issues","2011-12-20T01:39:22Z","2019-01-12T16:37:05Z"
"","12877","SPEL - Spring Expression Language Problem Issue [SPR-8228]","**[Anirban](https://jira.spring.io/secure/ViewProfile.jspa?name=anirban1978)** opened **[SPR-8228](https://jira.spring.io/browse/SPR-8228?redirect=false)** and commented  I could see SPEL reserves some token like 'NE' 'EQ' etc for expression processing.  However if a object map has any data attribute with the above names then it fails to parse.  For example if an object has an attrbute NE we access it using Object.NE  This always fails as it tries to access it with Object.NE!=  ..  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=106600  **Issue Links:** - #14495 Allow SpEL reserved words in type package names","closed","in: core,","spring-projects-issues","2011-04-07T03:14:44Z","2019-01-11T13:07:13Z"
"","13326","Form tag should prepend the contextPath and servletPath if not present [SPR-8684]","**[Angel](https://jira.spring.io/secure/ViewProfile.jspa?name=pakin)** opened **[SPR-8684](https://jira.spring.io/browse/SPR-8684?redirect=false)** and commented  Rossen,  in order to have this functionality available and be backward compatible at the same time could be having two additional paramters in the form tag:  ```html    ...  ```  If you agree I am happy to implement :-)  Cheers.  ---  **Affects:** 3.1 M2  **Reference URL:** https://jira.springsource.org/browse/SPR-8638  **Issue Links:** - #11609 Prepend contextPath in form tag (_**""duplicates""**_) - #10449 Allow links to `@Controller` methods from views without hardcoding URLs - #15015 Form tag prepending context/servlet path breaks use for portlets  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad025b59c5e933fb7181c76f530e1f4ecc8f7c50","closed","type: enhancement,","spring-projects-issues","2011-09-12T17:33:57Z","2019-01-13T07:07:55Z"
"","13311","Annotation @DateTimeFormat needs a parameter to specify if you want to acept null or blank values to avoid exceptions when a date field is not mandatory [SPR-8669]","**[Angel](https://jira.spring.io/secure/ViewProfile.jspa?name=pakin)** opened **[SPR-8669](https://jira.spring.io/browse/SPR-8669?redirect=false)** and commented  This enhancement would make the following addition to my controller completely unnecessary:  ```java     @InitBinder     public void initBinder(WebDataBinder binder) {         SimpleDateFormat dateFormat = new SimpleDateFormat(""dd/MM/yyyy"");         dateFormat.setLenient(false);          // true passed to CustomDateEditor constructor means convert empty String to null         binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));     } ```    ---  **Affects:** 3.1 M2  4 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-09-05T21:36:30Z","2019-01-12T03:49:22Z"
"","13300","Spring MVC do not resolve correctly Custom Validation messages using Hibernate Validator [SPR-8658]","**[Angel](https://jira.spring.io/secure/ViewProfile.jspa?name=pakin)** opened **[SPR-8658](https://jira.spring.io/browse/SPR-8658?redirect=false)** and commented  I have the following Spring beans definition file:  ```xml                                                classpath:i18n/messages                 classpath:i18n/validation                                                       ```  the following properties:  ``` NotEmpty.custom=is required. registerForm.register.abn=ABN NotEmpty.abnYn={registerForm.register.abn} {NotEmpty.custom} ```  and this POJO:  ```java public class Registration implements Serializable {      @NotEmpty(message = ""{NotEmpty.abnYn}"")     private String abnYn;     private String abn;      public String getAbnYn() {         return abnYn;     }      public void setAbnYn(String abnYn) {         this.abnYn = abnYn;     }      public String getAbn() {         return abn;     }      public void setAbn(String abn) {         this.abn = abn;     } } ```  If I execute this test:  ```java public class BeanValidationTest {      private static ApplicationContext applicationContext;      @BeforeClass     public static void initialize() {         applicationContext = new ClassPathXmlApplicationContext(""classpath:spring/resource-bundle.xml"");         assertNotNull(applicationContext);     }      @Test     public void test() {         LocalValidatorFactoryBean factory = applicationContext.getBean(""validator"", LocalValidatorFactoryBean.class);         Validator validator = factory.getValidator();         Registration registration = new Registration();         Set violations = validator.validate(registration);         for(ConstraintViolation violation : violations) {             System.out.println(violation.getMessage());         }     } } ```  After executing the test I get the following result:  ``` abn is required. ```  But if I try to do same within a form using Spring MVC the resolved message is just this:  ``` {registerForm.register.abn} {NotEmpty.custom} ```  because the message interpolator is not resolving the brackets recursively as it is supposed to do: http://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html/validator-usingvalidator.html#section-message-interpolation  > The interpolator will try to resolve any message parameters, meaning string literals enclosed in braces. In order to resolve these parameters Hibernate Validator's default MessageInterpolator first **recursively resolves parameters** against a custom ResourceBundle called ValidationMessages.properties at the root of the classpath (It is up to you to create this file). If no further replacements are possible against the custom bundle the default ResourceBundle under /org/hibernate/validator/ValidationMessages.properties gets evaluated.  From the test above it is clear what the behaviour should be.    ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/d76b6717be15e57fde452365306ef4bce3eedf64  8 votes, 5 watchers","closed","in: web,","spring-projects-issues","2011-08-31T03:35:32Z","2019-01-11T14:20:43Z"
"","13299","Multi action controller driven by url and submit button parameter value shouls have i18n support through the defined resource bundle [SPR-8657]","**[Angel](https://jira.spring.io/secure/ViewProfile.jspa?name=pakin)** opened **[SPR-8657](https://jira.spring.io/browse/SPR-8657?redirect=false)** and commented  This improvement would enhance Spring MVC i18n support.  In order to support one form with several submit buttons:  ```html         ```  through a ""Multi Action"" controller, I think the following is the most elegant approach or design:  ```java @Controller public class RegistrationAction {     @RequestMapping(value = ""/registration/submit"", method = RequestMethod.POST, params = ""submitButton=Submit 1"")     public String submit() {       ...     }      @RequestMapping(value = ""/registration/submit"", method = RequestMethod.POST, params = ""submitButton=Submit 2"")     public String submit() {       ...     } } ```  The problem with this approach is that you need to hardcode the text label for the value attribute of the submit button, which is not nice in itself for refactoring, but also represents a huge drawback when you are dealing with a i18n/internationalized web applications, because you often have to customized the submit button text label, depending on the client locale.  So given the following **messages.properties** resource bundle:  ``` button.submit1=Submit 1 button.submit2=Submit 2 ```  I would have something like the following in my i18n compliant jsp:  ```html         ```  Then I was expecting the Spring MVC framework to accept something like this:  ```java @Controller public class RegistrationAction {     @RequestMapping(value = ""/registration/submit"", method = RequestMethod.POST, params = ""submitButton=button.submit1"")     public String submit() {       ...     }      @RequestMapping(value = ""/registration/submit"", method = RequestMethod.POST, params = ""submitButton=button.submit2"")     public String submit() {       ...     } } ```  The Struts Action class **LookupDispatchAction** resolves this in a very elegant way.   ---  **Affects:** 3.1 M2  4 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-08-30T23:31:28Z","2011-11-23T06:09:17Z"
"","13280","form tag does not automatically resolve the application context and teh servlet mapping prefix or suffix in the uri provided in the action parameter [SPR-8638]","**[Angel](https://jira.spring.io/secure/ViewProfile.jspa?name=pakin)** opened **[SPR-8638](https://jira.spring.io/browse/SPR-8638?redirect=false)** and commented  When using the Spring MVC **form tag**, the action parameter should be resolved to append the application context uri and thh dispatcher servlet prefix or suffix.  Currently I have to do the following to submit a form:  ```     ...","closed","status: declined,","spring-projects-issues","2011-08-25T23:53:17Z","2019-01-12T16:37:29Z"
"","13278","When a controller method redirect to any url, the framework automatically appends all the model attributes in url query string even if those attributes are stored in session. [SPR-8636]","**[Angel](https://jira.spring.io/secure/ViewProfile.jspa?name=pakin)** opened **[SPR-8636](https://jira.spring.io/browse/SPR-8636?redirect=false)** and commented  Example  ```java @Controller @SessionAttributes({""context""}) public class AuthenticationAction {     @RequestMapping(""/login"")     public String login(@RequestParam(required=false, ""errorCode"") String errorCode,                         @ModelAttribute(""context"") String context) {         return ""redirect:/action/login/"" + context;     } } ```  This example will redirect to the url: .../action/login/{context}?context=value  The parameter ""context"" and its value should not appear in the url query string by default in this case  because they are already in session.  ---  **Affects:** 3.1 M2  **Issue Links:** - #11462 Provide precise control over the attributes used in a redirect scenario (_**""duplicates""**_)  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2011-08-24T23:08:20Z","2019-01-11T14:22:11Z"
"","13793","@Autowired(required=false) does not work as documented for constructor injection of optional Collection dependencies [SPR-9155]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-9155](https://jira.spring.io/browse/SPR-9155?redirect=false)** and commented  Consider the following `@Autowired` constructor:  ``` @Autowired(required=false) public Alpha(Bravo bravo, Set charlies) {     ... } ```  Assuming that an instance of Bravo existed, the documentation for `@Autowired` leads me to believe that this constructor should be called irrespective of whether or not any instances of `Charlie` are available. If no instance are available, I'd expect `charlies` to be `null` or an empty `Set` (preferably the latter). However, in reality, instantiation of `Alpha` will fail if no `Charlie` instances are available as the `Set` dependency cannot be satisfied.  Somewhat in desperation, we tried adding a second constructor to the class:  ``` @Autowired(required=false) public Alpha(Bravo bravo) {     ... } ```  Surprisingly, given that the javadoc for `@Autowired` states that ""only one constructor (at max) of any given bean class may carry this annotation"", this works. If there are no `Charlie` instances the single-argument constructor is called, and if there's one or more instances of `Charlie`, the two-argument constructor is called.  There's a couple of problems with this workaround. The first is that it's at odds with the documentation quoted above. The second is that it's not very extensible as, if you have multiple optional dependencies, you have to provide constructors for each permutation. For example:  ``` @Autowired(required=false) public Alpha(Bravo bravo) {     ... }  @Autowired(required=false) public Alpha(Bravo bravo, Set) {     ... }  @Autowired(required=false) public Alpha(Set deltas, Bravo bravo) {     ... }  @Autowired(required=false) public Alpha(Bravo bravo, Set charlies, Set deltas) {     ... } ```  If you only have the first and last constructor, Spring will always choose the first constructor that just takes `Bravo` unless there are one or more instances of both `Charlie` and `Delta` available for it to inject.  I'll submit a pull request with a project that reproduces the various permutations.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/47e29c5379d537762f1d491eb255ab7d2f6973f0, https://github.com/spring-projects/spring-framework-issues/commit/d2ca86436a478253b998879d56dfe93bed7294b8, https://github.com/spring-projects/spring-framework-issues/commit/6c32b91d3fdbba0753429bf379154188c83e9cd4  7 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-02-23T06:46:53Z","2019-01-12T03:49:05Z"
"","13284","Throw a more specific exception for a missing part in a multipart request, providing access to the name of the missing part [SPR-8642]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-8642](https://jira.spring.io/browse/SPR-8642?redirect=false)** and commented  When `RequestPartMethodArgumentResolver` looks for a part that does not exist an `IllegalArgumentException` is thrown by `RequestPartServletServerHttpRequest's` constructor. The generic nature of `IllegalArgumentException` makes it impossible to determine the specific cause of the failure in an exception handler. It also makes it impossible to determine the name of the part that was missing.  I'd like to be able to catch a specific exception for a missing request part for two reasons:  1. To allow it to be mapped to an appropriate response code (most probably a 400). 2. To allow the name of the missing part to be included in a localised message that's returned to the client, i.e. I'd like to have programmatic access in my exception handler to the name of the missing request part.  ---  **Affects:** 3.1 M2  **Issue Links:** - #13129 Allow access to named sections of a multipart request body  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/56c8c69c4ce04e9d35d19e26d279ccd3b2e5a385","closed","type: enhancement,","spring-projects-issues","2011-08-26T07:45:00Z","2019-01-11T14:20:59Z"
"","13276","NumberFormatException caused by property paths from JSR-303 based validation with no index into a collection [SPR-8634]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-8634](https://jira.spring.io/browse/SPR-8634?redirect=false)** and commented  When validation of a type in a Collection that can't be indexed, e.g. a Set, fails, Hibernate Validator produces a property path with no index. For example:  public final class Input {      @NotEmpty     @Valid     private final Set nodes;          ...  }  If validation of a URI in nodes fails, the property path in the resulting constraint violation is nodes[]. This causes the logic that processes the constraint violations to blow up with a NumberFormatException:  java.lang.NumberFormatException: For input string: """" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48) at java.lang.Integer.parseInt(Integer.java:470) at java.lang.Integer.parseInt(Integer.java:499) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:794) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:717) at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:99) at org.springframework.validation.AbstractBindingResult.rejectValue(AbstractBindingResult.java:105) at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:92) at org.springframework.validation.DataBinder.validate(DataBinder.java:711) at org.springframework.web.servlet.mvc.method.annotation.support.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:71) ...  Judging by https://forum.hibernate.org/viewtopic.php?f=9&t=1010626 it would appear that the lack of index in the path is expected behaviour for Hibernate Validator. We can probably work around this by using a custom List implementation that also maintains Set semantics, but it'd be nice if Spring coped with the absence of the index more gracefully than it does at the moment.  ---  **Affects:** 3.0.6, 3.1 M2  **Issue Links:** - #13536 Hibernate Class Level Validators cause IllegalArgument Exception - #20725 NumberFormatException caused by property paths from JSR-303 based validation with no index into a collection  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e2f49104d2c8b02db422e97aada923e73b6178e","closed","type: bug,","spring-projects-issues","2011-08-24T09:17:45Z","2019-01-11T14:21:47Z"
"","13154","FormatHelper formatMethodForMessage outputs each argument type as org.springframework.core.convert.TypeDescriptor rather than its actual type [SPR-8508]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-8508](https://jira.spring.io/browse/SPR-8508?redirect=false)** and commented  When formatting a method, FormatHelper uses typeDescriptor.getClass() to add each argument's type to the message. This results in the message containing org.springframework.core.convert.TypeDescriptor for each argument's type, rather than the argument's actual type.  For example, `FormatHelper.formatMethodForMessage(""foo"", Arrays.asList(TypeDescriptor.forObject(""a string"")))` produces `foo(org.springframework.core.convert.TypeDescriptor)` rather than the expected `foo(java.lang.String)`.  I've attached a patch that includes a couple of tests that illustrate the problem and provides a possible fix.   ---  **Affects:** 3.1 M2  **Attachments:** - [FormatHelper.patch](https://jira.spring.io/secure/attachment/18421/FormatHelper.patch) (_1.96 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c68021760ded9b7d6ab46e13f92e64d6347c5b3a","closed","type: bug,","spring-projects-issues","2011-07-05T03:38:16Z","2012-06-19T03:39:09Z"
"","13141","Build fails with class not found org.springframework.aws.ivy.S3Resolver() [SPR-8495]","**[Andy Peng](https://jira.spring.io/secure/ViewProfile.jspa?name=andy-peng)** opened **[SPR-8495](https://jira.spring.io/browse/SPR-8495?redirect=false)** and commented  BUILD FAILED /home/pisces/文档/open-sources/spring-framework/spring-build/multi-bundle/artifact.xml:60: The following error occurred while executing this line: /home/pisces/文档/open-sources/spring-framework/spring-build/multi-bundle/common.xml:86: The following error occurred while executing this line: /home/pisces/文档/open-sources/spring-framework/spring-build/common/common.xml:106: impossible to configure ivy:settings with given file: /home/pisces/文档/open-sources/spring-framework/spring-build/common/ivysettings.xml : java.text.ParseException: failed to load settings from file:/home/pisces/文档/open-sources/spring-framework/spring-build/common/ivysettings.xml: impossible to define new type: class not found: org.springframework.aws.ivy.S3Resolver in [] nor Ivy classloader at org.apache.ivy.core.settings.XmlSettingsParser.doParse(XmlSettingsParser.java:165) at org.apache.ivy.core.settings.XmlSettingsParser.parse(XmlSettingsParser.java:150) at org.apache.ivy.core.settings.IvySettings.load(IvySettings.java:388) at org.apache.ivy.Ivy.configure(Ivy.java:411) at org.apache.ivy.ant.IvyAntSettings.createIvyEngine(IvyAntSettings.java:272) at org.apache.ivy.ant.IvyAntSettings.getConfiguredIvyInstance(IvyAntSettings.java:237) at org.apache.ivy.ant.IvyTask.getIvyInstance(IvyTask.java:92) at org.apache.ivy.ant.IvyTask.prepareTask(IvyTask.java:256) at org.apache.ivy.ant.IvyTask.execute(IvyTask.java:276) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) at org.apache.tools.ant.Task.perform(Task.java:348) at org.apache.tools.ant.Target.execute(Target.java:390) at org.apache.tools.ant.Target.performTasks(Target.java:411) at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399) at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38) at org.apache.tools.ant.Project.executeTargets(Project.java:1251) at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:442) at org.apache.tools.ant.taskdefs.SubAnt.execute(SubAnt.java:302) at org.apache.tools.ant.taskdefs.SubAnt.execute(SubAnt.java:221) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) at org.apache.tools.ant.Task.perform(Task.java:348) at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) at org.apache.tools.ant.Task.perform(Task.java:348) at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291) at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) at org.apache.tools.ant.Task.perform(Task.java:348) at org.apache.tools.ant.Target.execute(Target.java:390) at org.apache.tools.ant.Target.performTasks(Target.java:411) at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399) at org.apache.tools.ant.Project.executeTarget(Project.java:1368) at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41) at org.apache.tools.ant.Project.executeTargets(Project.java:1251) at org.apache.tools.ant.Main.runBuild(Main.java:809) at org.apache.tools.ant.Main.startAnt(Main.java:217) at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280) at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109) Caused by: java.lang.RuntimeException: impossible to define new type: class not found: org.springframework.aws.ivy.S3Resolver in [] nor Ivy classloader at org.apache.ivy.core.settings.IvySettings.classForName(IvySettings.java:652) at org.apache.ivy.core.settings.IvySettings.typeDef(IvySettings.java:636) at org.apache.ivy.core.settings.IvySettings.typeDef(IvySettings.java:632) at org.apache.ivy.core.settings.XmlSettingsParser.typedefStarted(XmlSettingsParser.java:513) at org.apache.ivy.core.settings.XmlSettingsParser.startElement(XmlSettingsParser.java:205) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501) at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:179) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) at javax.xml.parsers.SAXParser.parse(SAXParser.java:395) at javax.xml.parsers.SAXParser.parse(SAXParser.java:277) at org.apache.ivy.core.settings.XmlSettingsParser.doParse(XmlSettingsParser.java:160) ... 52 more   ---  **Affects:** 3.0.5","closed","status: invalid,","spring-projects-issues","2011-06-28T12:20:17Z","2019-01-12T05:30:07Z"
"","13294","Incorrect output of big numbers when using NamedParameterJdbcTemplate.queryForLong [SPR-8652]","**[André Rouél](https://jira.spring.io/secure/ViewProfile.jspa?name=andre.rouel)** opened **[SPR-8652](https://jira.spring.io/browse/SPR-8652?redirect=false)** and commented  In a table column we use 19-digit IDs. The column type is set to NUMBER. An example of an ID is ""1000000009704976470"". Now, if we access by using `NamedParameterJdbcTemplate.queryForLong (String sql, SqlParameterSource paramSource)` or overloaded methods, it returns the for example the long `1000000009704976512L` instead of `1000000009704976470L`. The cause lies in the implementation of the method `queryForLong`.  The current implementation looks like this: `public long queryForLong(String sql, SqlParameterSource paramSource) throws DataAccessException {` `Number number = queryForObject(sql, paramSource, *Number.class*);` `return (number != null ? number.longValue() : 0);` `}`  A solution could look like this: `public long queryForLong(String sql, SqlParameterSource paramSource) throws DataAccessException {` `Number number = queryForObject(sql, paramSource, *Long.class*);` `return (number != null ? number.longValue() : 0);` `}`  One note, the `JdbcTemplate` class implements the method `queryForLong` properly.   ---  **Affects:** 2.5.6, 3.0.5  **Issue Links:** - [DATAJDBC-15](https://jira.spring.io/browse/DATAJDBC-15) Incorrect output of big numbers when using NamedParameterJdbcTemplate.queryForLong (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77372d7cdb9cbb70ebc99ca86fc9eb949b4dba93, https://github.com/spring-projects/spring-framework/commit/9b0412f35fd9cc3a14b1a737af98f5c3119cea41, https://github.com/spring-projects/spring-framework/commit/118ee3fce89f305ea2fc938d539435218fa4e9cc","closed","type: bug,","spring-projects-issues","2011-08-30T07:38:01Z","2012-06-19T03:39:09Z"
"","13186","Add setInstanceName and setInstanceId methods into LocalTaskExecutorThreadPool [SPR-8542]","**[Andruschuk Borislav](https://jira.spring.io/secure/ViewProfile.jspa?name=borislav.andruschuk)** opened **[SPR-8542](https://jira.spring.io/browse/SPR-8542?redirect=false)** and commented  Starting from Quartz 1.7 interface org.quartz.spi.ThreadPool is changed and SchedulerDetailsSetter is added to tolerate Spring old implementation. But there's warning in a log like:  WARN [SchedulerDetailsSetter]: org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool does not implement setInstanceName(String) WARN [SchedulerDetailsSetter]: org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool does not implement setInstanceId(String)  Could you please add setInstanceName(String) and setInstanceId(String) methods into LocalTaskExecutorThreadPool to avoid this ugly warn message.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-07-18T06:34:25Z","2012-06-19T03:39:40Z"
"","12983","'default-lazy-init' attribute is not processed when XSD validation is disabled [SPR-8335]","**[Andruschuk Borislav](https://jira.spring.io/secure/ViewProfile.jspa?name=borislav.andruschuk)** opened **[SPR-8335](https://jira.spring.io/browse/SPR-8335?redirect=false)** and commented  I've noticed that default-lazy-init attribute inside beans element is not processed when XSD validation is disabled. Thus all singletons that should be lazy become initialized. Tests are attached to the issue.   ---  **Affects:** 3.0.5  **Attachments:** - [LazyInitXmlBeanDefinitionWOValidationTest.java](https://jira.spring.io/secure/attachment/18222/LazyInitXmlBeanDefinitionWOValidationTest.java) (_1.35 kB_) - [test-context.xml](https://jira.spring.io/secure/attachment/18223/test-context.xml) (_434 bytes_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/2071, and commits https://github.com/spring-projects/spring-framework/commit/21d3bf8db4af5877beac73186c688e3845cd4a47, https://github.com/spring-projects/spring-framework/commit/4938dab0ae8b508a4933f14f18e39c3d84aa6e69, https://github.com/spring-projects/spring-framework/commit/cba355a4d20bf6c76633c7f05a5b7cf403185c3d  **Backported to:** [5.0.12](https://github.com/spring-projects/spring-framework/milestone/193?closed=1), [4.3.22](https://github.com/spring-projects/spring-framework/milestone/171?closed=1)  3 votes, 5 watchers","closed","in: core,","spring-projects-issues","2011-05-13T07:18:38Z","2019-01-09T09:57:56Z"
"","13632","@ActiveProfiles are not cascaded down to contexts loaded via @ImportResource [SPR-8992]","**[Andrew Walters](https://jira.spring.io/secure/ViewProfile.jspa?name=nugs)** opened **[SPR-8992](https://jira.spring.io/browse/SPR-8992?redirect=false)** and commented  Given:  ``` @RunWith(SpringJUnit4ClassRunner.class) @ActiveProfiles(profiles = ""test"") @ContextConfiguration(classes = MyClass.class) @ImportResource(""/appContext.xml"") public class MyClass {   @Autowired   private ProfileSpecificResource resource;    @Bean   public String aBean() {...}    @Test   public void aTest() {...} } ```  Spring is not cascading/passing through the active profile(s) down to the imported resource (where profile specific beans are defined).  If the tests are invoked with the -Dspring.profiles.active=test argument, the tests run as expected.  ---  **Affects:** 3.1 GA  **Issue Links:** - #13685 `@ActiveProfiles` not taken into account for `@ImportResource-imported` XML context definitions from an `@Configuration` context definition (_**""is duplicated by""**_) - #13040 AnnotatedBeanDefinitionReader's constructor should inherit Environment of supplied BeanDefinitionRegistry  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ee36c80ca961a5b2af233cd26a5483d57939c0af, https://github.com/spring-projects/spring-framework/commit/b17d545bb71b51ae46689a88487898dac496544c  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2012-01-04T09:24:44Z","2019-01-13T07:06:45Z"
"","13593","Where no beans are defined in @Configration class, @ImportResource annotation is not respected [SPR-8953]","**[Andrew Walters](https://jira.spring.io/secure/ViewProfile.jspa?name=nugs)** opened **[SPR-8953](https://jira.spring.io/browse/SPR-8953?redirect=false)** and commented  Given:  ``` @Configuration(classes = {ThisClass.class, OtherClass.class}) @ImportResource(""/application-context.xml"") public class TestClass {     @Autowired     private DependencyDefinedInApplicationContextXml aBean; } ```  Where aBean is defined in application-context.xml, the application-context.xml is not read where no `@Bean` is detected in TestClass - spring seems to ignore this class as being a configuration context if no beans are present irrespective of the `@Configuration` setup.   ---  **Affects:** 3.1 GA  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2011-12-21T05:35:55Z","2019-01-12T05:29:25Z"
"","13562","Update reference documentation regarding 3.1 schema versions [SPR-8922]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-8922](https://jira.spring.io/browse/SPR-8922?redirect=false)** and commented  from the following URL, it seems as though the reference docs have not yet been updated to reflect the new schema locations of the Spring XML schemas:      http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/xsd-config.html  They all seem to reference the 3.0 schemas...  ---  **Issue Links:** - #14644 Remove xsd versions from reference samples (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2011-12-14T02:06:46Z","2019-01-11T14:27:55Z"
"","13027","Reference documentation has incorrect name for Eval tag's ""htmlEscape"" attribute [SPR-8380]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-8380](https://jira.spring.io/browse/SPR-8380?redirect=false)** and commented  The reference documentation for the spring.tld library's [""eval"" tag](http://static.springsource.org/spring/docs/3.1.0.M1/spring-framework-reference/html/spring.tld.html#spring.tld.eval) describes the ""htmlEncoding"" attribute. However the correct name of this attribute is ""htmlEscape"".  When fixing this, it might be worth checking the documentation of any other tags that extend `HtmlEscapingAwareTag`.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/25e2537c178d57f71b3e243b88071f98b5142c56","closed","type: bug,","spring-projects-issues","2011-05-29T19:11:06Z","2012-06-19T03:39:27Z"
"","13655","Provide property in RedirectView to disable treating the redirect URL as a URI template [SPR-9016]","**[Andrew Muraco](https://jira.spring.io/secure/ViewProfile.jspa?name=amuraco)** opened **[SPR-9016](https://jira.spring.io/browse/SPR-9016?redirect=false)** and commented  Previously in Spring 3.0.6, it was entirely valid to return a redirect view with any arbitrary data in the anchor:  Map pojo = new HashMap(); pojo.put(""one"", ""abc""); String json = (new ObjectMapper()).writeValueAsString(pojo); return new RedirectView(""/test#"" + json, true);  It seems like Spring 3.1GA attempts to replace '{' ABC  '}' with the corresponding variable in the model. However, it's perfectly valid for the anchor to json, which wouldn't work, or be expected.  I don't see any option on the RedirectView to disable applying Uri Template Variables, or it should ignore everything after the '#', or both.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/21966990c89a51fbcc36a778682b021d983aabd8","closed","type: regression,","spring-projects-issues","2012-01-11T06:00:30Z","2019-01-11T22:21:53Z"
"","13753","Spring beans in Tomcat Resource definitions [SPR-9115]","**[Andrei Tuzhilin](https://jira.spring.io/secure/ViewProfile.jspa?name=astorath)** opened **[SPR-9115](https://jira.spring.io/browse/SPR-9115?redirect=false)** and commented  Consider creating Bean Factory class able to export Spring beans as Tomcat resources.  Tomcat Resource definitions lacks flexibility in some cases (unlike Spring beans definitions).   --- No further details from [SPR-9115](https://jira.spring.io/browse/SPR-9115?redirect=false)","closed","","spring-projects-issues","2012-02-12T12:50:01Z","2019-01-11T22:11:48Z"
"","13752","Add receive-timeout option to  or  definition [SPR-9114]","**[Andrei Tuzhilin](https://jira.spring.io/secure/ViewProfile.jspa?name=astorath)** opened **[SPR-9114](https://jira.spring.io/browse/SPR-9114?redirect=false)** and commented  This option is enabled in the ```xml   ```definition. Pretty useful. ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/94e3f08a444a9f80d162a5963702697308b699e6","closed","type: enhancement,","spring-projects-issues","2012-02-12T12:08:50Z","2012-06-19T03:39:52Z"
"","13537","Documentation update regarding aspectjrt and aspectjweaver jars usage [SPR-8896]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-8896](https://jira.spring.io/browse/SPR-8896?redirect=false)** and commented  In this section of the Spring Framework reference documentation it is mentioned that both aspectjrt.jar and aspectjweaver.jar files should be present in the classpath in case `@AspectJ` support needs to be enabled in the project. Also, it is mentioned where is the location of those jars within the Spring distribution.  I believe there are two small issues with that respective section of the documentation: * the two jars are not available anymore with a Spring distribution * the classes and package structure in aspectjrt.jar form a subset of the classes that can be found in aspectjweaver.jar. Using both at the same time doesn't seem to be actually required.  ---  **Affects:** 2.5.6, 3.0.6, 3.1 RC2  **Sub-tasks:** - #14643 Backport ""Documentation update regarding aspectjrt and aspectjweaver jars usage""  **Issue Links:** - #12444 Chapter 7.2.1 of the ref manual still refers to the Spring-with-dependencies distribution (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-12-05T13:24:14Z","2019-01-11T15:06:42Z"
"","12986","Better description for DispatcherServlet's ""No adapter for handler: Does your handler implement a supported interface like Controller?"" exception message [SPR-8338]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-8338](https://jira.spring.io/browse/SPR-8338?redirect=false)** and commented  At the moment DispatcherServlet in its getHandlerAdapter() method throws an exception in case no adapter is found for a specific handler and the message the exception contains puts more focus on the idea that the handler might not implement a certain interface.  Could be worth considering another message, that should put equal focus on the missing interface implementation and, also, on the fact that the adapter itself might not be defined for that particular handler? Maybe, something around these lines: ""No adapter for handler ["" + handler + ""]: Does your handler implement a supported interface like Controller or have you defined all needed handler adapters?""   ---  **Affects:** 2.0.9, 2.5.6, 3.0.5  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-05-16T04:34:37Z","2013-01-06T20:12:16Z"
"","13643","Used dataSource bean is ignored by a custom BeanPostProcessor [SPR-9003]","**[Andreas Höhmann](https://jira.spring.io/secure/ViewProfile.jspa?name=ahoehma)** opened **[SPR-9003](https://jira.spring.io/browse/SPR-9003?redirect=false)** and commented  \ \Enable this bean to log all jdbc statements with values\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \${jpa.driver}\ \ \ \ \ \ \ \ \ \ \ \this datasource would be used for test because the pooled ds doesn't work very well in our tests\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ then the ""pooledDataSource"" will never given to the net.sourceforge.jdbclogger.spring.JdbcLoggerBeanPostProcessor, only the **unused** ""dataSource"" given to the beanprocessor. I don't understand why this happens ... If I enabled some debug-log for org.springframework.beans.factory.* then I see that the datasource bean created before the beanprocessor exists ""for cycle-checks"" ... hmmm ?   ---  **Affects:** 3.0.5  **Attachments:** - [SPR-9003.zip](https://jira.spring.io/secure/attachment/19501/SPR-9003.zip) (_5.27 kB_)","closed","status: invalid,","spring-projects-issues","2012-01-06T06:52:52Z","2019-01-12T05:29:21Z"
"","13440","DefaultFlashMapManager does not support URLs with multiple parameter values [SPR-8798]","**[Andrea](https://jira.spring.io/secure/ViewProfile.jspa?name=ciaccia)** opened **[SPR-8798](https://jira.spring.io/browse/SPR-8798?redirect=false)** and commented  org.springframework.web.servlet.support.DefaultFlashMapManager does not support URLs with multiple parameter values. Consider the following annotated methods that performs a redirect after a POST:  ```java @RequestMapping(value=""/test/"", method = RequestMethod.POST) public String testRedirect(HttpServletRequest request, RedirectAttributes redirectAttrs) {     redirectAttrs.addAttribute(""id1"", 10);     redirectAttrs.addAttribute(""id2"", 20);     redirectAttrs.addFlashAttribute(""message"", ""Hallo World"");     return ""redirect:/?id={id1}&id={id2}""; } ```  After the /test/ method is executed, the browser is redirected to the **/?id=10&id=20** URL.  When DefaultFlashMapManager tries to match the FlashMap object in the session with the URL, it always fails since it just supports one value for parameter. In this case, it would not match the path since it would think 20 is not a valid value for parameter id.  This is the current code in 3.1 RC:  /** * Whether the given FlashMap matches the current request. * The default implementation uses the target request path and query params * saved in the FlashMap.   */protected boolean isFlashMapForRequest(FlashMap flashMap, HttpServletRequest request) {if (flashMap.getTargetRequestPath() != null) {String requestUri = this.urlPathHelper.getRequestUri(request);if (!requestUri.equals(flashMap.getTargetRequestPath())   && !requestUri.equals(flashMap.getTargetRequestPath() + ""/"")) {return false;   }   }   MultiValueMap params = flashMap.getTargetRequestParams();for (String key : params.keySet()) {for (String value : params.get(key)) {if (!value.equals(request.getParameter(key))) {return false;   }   }   }return true;   }  The code should iterate through all values for a given parameter in the request before rejecting it:  protected boolean isFlashMapForRequest(FlashMap flashMap, HttpServletRequest request) { if (flashMap.getTargetRequestPath() != null) { String requestUri = this.urlPathHelper.getRequestUri(request); if (!requestUri.equals(flashMap.getTargetRequestPath()) && !requestUri.equals(flashMap.getTargetRequestPath() + ""/"")) { return false; } } MultiValueMap params = flashMap.getTargetRequestParams(); for (String key : params.keySet()) { // FIX FROM HERE...        String requestValues[] = request.getParameterValues(key); if (requestValues == null || requestValues.length == 0) { return false; }          for (String value : params.get(key)) {             boolean contains = false;             for (String requestValue : requestValues) {                 if (value.equals(requestValue)) {                     contains = true;                     break;                 }             }             if (!contains) {                 return false;             }         }         // ...TO HERE    }     return true;  }   ---  **Affects:** 3.1 RC1","closed","type: bug,","spring-projects-issues","2011-10-24T04:12:26Z","2012-06-19T03:39:50Z"
"","13425","RedirectAttributes parameter results in IllegalArgumentException if using DefaultAnnotationHandlerMapping or AnnotationMethodHandlerAdapter [SPR-8782]","**[Andrea](https://jira.spring.io/secure/ViewProfile.jspa?name=ciaccia)** opened **[SPR-8782](https://jira.spring.io/browse/SPR-8782?redirect=false)** and commented  When a `@RequestMapping` method contains a RedirectAttributes parameter, an IllegalArgumentException is thrown.  For example, consider this HTML form:  \ \ \ \ \  When submitted, the following method is executed properly:  `@RequestMapping`(value = ""/deleteaction"", method = RequestMethod.POST, params={""delete""}) public String deleteItems(`@RequestParam`(value=""itemId"", required=false) String itemId[], Model model) { // DO BUSINESS LOGIC return ""redirect:/""; }  If instead of a Model, I put a RedirectAttributes parameter in the method, HandlerMethodInvoker throws an exception:  `@RequestMapping`(value = ""/deleteaction"", method = RequestMethod.POST, params={""delete""}) public String deleteItems(`@RequestParam`(value=""itemId"", required=false) String itemId[], RedirectAttributes redirectAttributes) { // DO BUSINESS LOGIC return ""redirect:/""; }  The problem is at line 317 in class HandlerMethodInvoker, where a BindingAwareModelMap (which is fine for Model) is resolved as parameter for RedirectAttributes. When the BindingAwareModelMap parameter is passed as argument to the request mapping method, the exception occurs.   ---  **Affects:** 3.1 RC1  **Reference URL:** http://forum.springsource.org/showthread.php?115976-Spring-MVC-FlashMap-and-RedirectAttributes-request-mapping  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1164f5a9fcfabd487fc930c14531d407c8ea86a0","closed","type: bug,","spring-projects-issues","2011-10-17T03:47:52Z","2012-06-19T03:39:08Z"
"","13378","is not configurable by  [SPR-8736]","**[Amir Pashazadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=pasha)** opened **[SPR-8736](https://jira.spring.io/browse/SPR-8736?redirect=false)** and commented  I declared something like:  ```  ```  and then tried to put the locations in a properties file, and configure it with   but this does not work at all.  ---  **Affects:** 3.0.6  **Issue Links:** - #13929  location param shoud support SpEL  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/d338d3854799429b6da665783fcc3319e200d1dc  1 votes, 4 watchers","closed","in: web,","spring-projects-issues","2011-10-03T08:22:38Z","2019-01-11T14:04:33Z"
"","13377","ResourceHttpRequestHandler can expose the classes [SPR-8735]","**[Amir Pashazadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=pasha)** opened **[SPR-8735](https://jira.spring.io/browse/SPR-8735?redirect=false)** and commented  I having something like  ```  ```  a person can download a class file (or other forbidden files) within /com/payeshgaran/framework.  I think ResourceHttpRequestHandler needs to have properties to set **rejected** or **allowed** content types for it.   ---  **Affects:** 3.0.6","closed","type: enhancement,","spring-projects-issues","2011-10-03T06:34:36Z","2012-05-18T22:05:06Z"
"","13262","Add Chain of Responsibility support for Spring Tags [SPR-8619]","**[Amir Pashazadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=pasha)** opened **[SPR-8619](https://jira.spring.io/browse/SPR-8619?redirect=false)** and commented  It is not so easy to add a feature to all Spring Tags (for example all input Tags); All I think is add the features to parent tags in the hierarchy and recreate each child tag again.  All I think is some kind of chain of responsibility pattern.   --- No further details from [SPR-8619](https://jira.spring.io/browse/SPR-8619?redirect=false)","closed","in: web,","spring-projects-issues","2011-08-17T08:41:38Z","2019-01-11T14:17:32Z"
"","12913","Add support of decorator pattern to Spring Tags [SPR-8265]","**[Amir Pashazadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=pasha)** opened **[SPR-8265](https://jira.spring.io/browse/SPR-8265?redirect=false)** and commented  Spring Form Tags are so useful, but some times an extension to most of the tags are needed, it would be nice to have possibility of decorator support on this tags. For this I think there should be an interface for each tag defining all public methods in that tag (so TagSupport.findAncestorWithClass is called on this interface within Spring Tags).  I think it would be good to have some abstract decorator tags for main classes.  I am trying to implement this pattern, but I feel lack of the mentioned interfaces.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-04-20T21:21:12Z","2018-12-28T11:23:35Z"
"","13184","Change  to  in documentation [SPR-8540]","**[Alfonso Vásquez Drexler](https://jira.spring.io/secure/ViewProfile.jspa?name=avasquez614)** opened **[SPR-8540](https://jira.spring.io/browse/SPR-8540?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/view.html#view-velocity-forms. http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/web/servlet/view/freemarker/FreeMarkerConfigurer.html.  To import the spring.ftl with the Spring Freemarker, the documentation states that you have to add the import directive . But, after testing and debugging, I found out that this won't work, since the import directive treats spring.ftl as a relative path (in current Freemarker version 2.3.18), so for example, if I'm adding the import to an ftl that's under {templates_root}/pages/index.ftl, the final template name will be resolved to /pages/spring.ftl, and the ClassPathTemplateLoader won't find it. By adding a / at the beginning, like in , Freemarker will treat the path as absolute, so the final template name will be resolved to spring.ftl.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9347ac358c477c92f9b3cf196942a7aa4df87e77","closed","type: task,","spring-projects-issues","2011-07-16T18:24:37Z","2012-06-19T03:39:04Z"
"","13582","Test execution issue: for ""shared"" test contexts in multithreading [SPR-8942]","**[Alexey Semenov](https://jira.spring.io/secure/ViewProfile.jspa?name=asemenov)** opened **[SPR-8942](https://jira.spring.io/browse/SPR-8942?redirect=false)** and commented  There are several db aware tests. 1. `*mvn* test -Dtest.thread.count=*1*` - tests always passed 2. `*mvn* test -Dtest.thread.count=*10*` - tests sometimes failed (running tests in several threads) 3. `*mvn* test -Dtest.thread.count=*10* -Pex` - tests always passed (running tests in several threads, test with **""inherited test context""** in excluded from execution)  `@DirtiesContext` didn't help. Most common reason of a test failure is inability to load entity just saved. Reproducible for both: AbstractTestNGSpringContextTests and AbstractTransactionalTestNGSpringContextTests. It looks like there is an issue in context loading/caching/sharing mechanism in case of multithreading execution.  Reproducible only from command line (not IDE). spring versions: all (2.5.6 - 3.1.0.M2) testng versions: all (5.* - 6.\*) hibernate versions: all (3.* - 4.0.0.Final) maven versions: 2.**, 3.**  p.s. the issue is same as #11897  ---  **Affects:** 3.0.3, 3.0.4, 3.0.5, 3.0.6  **Attachments:** - [spring-test-shared-contexts.zip](https://jira.spring.io/secure/attachment/19227/spring-test-shared-contexts.zip) (_10.89 kB_)  **Issue Links:** - #10532 Allow for concurrent test execution in the TestContext framework  2 votes, 3 watchers","closed","in: test,","spring-projects-issues","2011-12-17T12:35:25Z","2019-01-11T14:26:10Z"
"","13351","contentLength method is not correctly implemented for all Resource subclasses [SPR-8709]","**[Alexandre Garnier](https://jira.spring.io/secure/ViewProfile.jspa?name=zigarn)** opened **[SPR-8709](https://jira.spring.io/browse/SPR-8709?redirect=false)** and commented  #10138 (SVN revision 3545) added contentLength method on Resource with a default implementation in AbstractResource. This default implementation is based on underlying File but this one does not exists in some implementations: * ByteArrayResource * InputStreamResource * ...   And the contentLength method raise an IOException instead of giving computable contentLength.  Combined with SVN revision 3582, it breaks all HTTP POST requests when using this type of Resource (ResourceHttpMessageConverter tries to get Resource contentLength but no more ignore IOException)  Before 3.0.4 everything was working.  ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7187029ef6bacf73104367b3c8f6f218d60de30a, https://github.com/spring-projects/spring-framework/commit/f7b9eb8fe302f0b54133a4611ae0eb7017ef7f64","closed","in: core,","spring-projects-issues","2011-09-19T07:57:00Z","2019-01-11T14:05:21Z"
"","12873","[SpEL] Enhance ReflectiveMethodResolver with the method judge algorithm and generics handling [SPR-8224]","**[Alexander Savov](https://jira.spring.io/secure/ViewProfile.jspa?name=asavov)** opened **[SPR-8224](https://jira.spring.io/browse/SPR-8224?redirect=false)** and commented  - Current behavior --  org.springframework.expression.spel.support.ReflectiveMethodResolver:  - Does not implement algorithm that judges the match between expected parameters and actual arguments (by analogy with org.springframework.util.MethodInvoker.getTypeDifferenceWeight method). This might be ambiguous, cause ""resolve"" method returns the ""closeMatch"" method which calculation depends on the order in which the methods are defined. This is fragile in case the class is being re-structured.  - Does not support 1.5 generics during method parameter matching (using GenericTypeResolver.resolveParameterType and TypeUtils). This breaks Java 5 compiler rules. See example:    public class ReflectionUtil\ {        public Object methodToCall(T param) {             return ""Object methodToCall(T param)"";       }              public static void main(String[] args) {             // Java compiler does NOT allow passing Long!             new ReflectionUtil< Integer >().methodToCall( (Long) Long.MAX_VALUE );                    // ReflectiveMethodResolver DOES allow. As a result ClassCastExc is thrown at run-time             ReflectiveMethodResolver.invoke(new ReflectionUtil< Integer >(), ""methodToCall"", (Long) Long.MAX_VALUE);       }         }  - Expected behavior --  As discussed with Andy Clement:  - Integrate method judge algorithm implemented by MethodInvoker into ReflectiveMethodResolver. This will prevent calling of different method on each class restructuring. - Use GenericTypeResolver.resolveParameterType(MethodParameter) and TypeUtils.isAssignable to handle generics.    ---  **Affects:** 3.0 GA  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-04-07T00:52:32Z","2019-01-12T03:49:57Z"
"","13820","Caching mode=aspectj doesn't work [SPR-9182]","**[Alexander Fedorov](https://jira.spring.io/secure/ViewProfile.jspa?name=xpoft)** opened **[SPR-9182](https://jira.spring.io/browse/SPR-9182?redirect=false)** and commented  AspectJ configured and work. Tomcat with LWT instrument.  Did't work:  Work's fine:   If I use my adviser: `@Before`(""execution(`@org`.springframework.cache.annotation.Cacheable * *(..))"") It executed fine too.  Log with aop -verbose: info register aspect org.springframework.cache.aspectj.AnnotationCacheAspect  aop.xml  \ \                               \   ---  **Affects:** 3.1.1  **Attachments:** - [spr-9182.zip](https://jira.spring.io/secure/attachment/21660/spr-9182.zip) (_6.68 kB_)  1 votes, 7 watchers","closed","in: core,","spring-projects-issues","2012-02-29T00:00:19Z","2019-01-11T22:15:39Z"
"","13578","Wrong metadata name in Spring documentation : 28.3.1.4 Available caching SpEL evaluation context [SPR-8938]","**[Alexander Derenbach](https://jira.spring.io/secure/ViewProfile.jspa?name=derenbacha)** opened **[SPR-8938](https://jira.spring.io/browse/SPR-8938?redirect=false)** and commented  In table 28.1. in the actual documentation there is a SpEL field #root.params listed. The fields is actualy named args in class CacheExpressionRootObject.  `@Cacheable`(value=""databaseCache"",key=""{#root.methodName,#root.args}"") public test(Long t1) { }  will work.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e9ab1a7abb24f6bfc22df6365c0aa52446808968","closed","in: core,","spring-projects-issues","2011-12-16T01:35:58Z","2012-06-19T03:39:11Z"
"","13573","Caching Abstraction ignores method name? [SPR-8933]","**[Alexander Derenbach](https://jira.spring.io/secure/ViewProfile.jspa?name=derenbacha)** opened **[SPR-8933](https://jira.spring.io/browse/SPR-8933?redirect=false)** and commented  When I read the reference documentation I thought the caching abstraction is on method level, but it seems it is only on the parameter value of the methods.  If I have several methods with the same parameter type it get always the same return value:  `@Component` public class CacheTestImpl implements CacheTest { `@Cacheable`(""databaseCache"") public Long test1() { return 1L; }      @Cacheable(""databaseCache"")     public Long test2() {         return 2L;     }          @Cacheable(""databaseCache"")     public Long test3() {         return 3L;     }                  @Cacheable(""databaseCache"")     public String test4() {         return ""4"";     }  }  Calling now:      System.out.println(test.test1());     System.out.println(test.test2());     System.out.println(test.test3());     System.out.println(test.test4());  results in:  1 1 1 ClassCastException: java.lang.Long cannot be cast to java.lang.String  Is this the desired behaviour? I would expect:  1 2 3 4  If I use different caches it works.  I can't access github from my place (firewall) so I have added a tar with a small maven project showing this problem.  Greets Alex  ---  **Affects:** 3.1 GA  **Attachments:** - [cacheproblem.tar](https://jira.spring.io/secure/attachment/19224/cacheproblem.tar) (_70.00 kB_) - [MethodAwareCacheKeyGenerator.java](https://jira.spring.io/secure/attachment/20892/MethodAwareCacheKeyGenerator.java) (_455 bytes_)  **Issue Links:** - #16358 Cacheable javadoc wrongly explains how cache keys are generated  5 votes, 9 watchers","closed","in: core,","spring-projects-issues","2011-12-15T08:48:21Z","2019-01-12T16:37:07Z"
"","13514","@Scheduled does not work in classes annotated with @Cacheable [SPR-8873]","**[Alexander Derenbach](https://jira.spring.io/secure/ViewProfile.jspa?name=derenbacha)** opened **[SPR-8873](https://jira.spring.io/browse/SPR-8873?redirect=false)** and commented  I want to have a cache class which clears itself. Since the both annotations are not working together I have to create a special task class. The problem is that the cache class is a proxy and then the scheduler runs into a ClassCastException.  Perhaps it is no real bug. For me it is. It is also possible that is already a known issue without any possible solution.  Desired syntax would be something like that:  `@Scheduled`(fixedDelay=50000) `@CacheEvict`(value = ""country"", allEntries=true) public void clearCache() { //only clear cache; }  greets Alex  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13293 `@Scheduled` doesn't work with well with proxies (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-11-24T07:00:09Z","2019-01-13T07:07:12Z"
"","13622","Allow overriding @ActiveProfiles in test classes with system property [SPR-8982]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=verdyan)** opened **[SPR-8982](https://jira.spring.io/browse/SPR-8982?redirect=false)** and commented  #### Status Quo  Support for setting the _active_ bean definition profiles in an integration test within the Spring TestContext Framework (TCF) is currently limited to one of the following techniques:  1. Providing a hard-coded list of profiles declared via the `value` or `profiles` attribute of `@ActiveProfiles`   - since Spring Framework 3.1 2. Specifying a custom `ActiveProfilesResolver` (which programmatically determines the active profiles) declared via the `resolver` attribute of `@ActiveProfiles`   - since Spring Framework 4.0  In stand-alone or production code, Spring honors the `spring.profiles.active` system property for determining the set of active profiles to use when loading an `ApplicationContext`; however, the TCF _ignores_ this system property, relying solely on configuration via `@ActiveProfiles`.  ---  #### Proposals  1. Provide the ability to override `@ActiveProfiles` specified in an integration test via the `spring.profiles.active` system property or some other system property specific to the TCF. 2. Set the `spring.profiles.active` system property to the value specified via `@ActiveProfiles`    - See comments in this issue for background.    - This point likely warrants its own JIRA issue for proper consideration.  ---  #### Implementation Notes  - Consider introducing a new `boolean` flag in `@ActiveProfiles` that allows profiles declared via the annotation to be overridden by those defined via the `spring.profiles.active` system property (if it is present).  ---  #### Further Resources  Related discussions at Stack Overflow:  - [Spring integration tests with profile](http://stackoverflow.com/a/20571356/388980) - [Defining a spring active profile within a test use case](http://stackoverflow.com/questions/23213869/defining-a-spring-active-profile-within-a-test-use-case) - [@ActiveProfiles value is not being assigned to config](http://stackoverflow.com/questions/22053683/activeprofiles-value-is-not-being-assigned-to-config)  ---  **Affects:** 3.1 GA  **Issue Links:** - #12410 Decide what to do with `@IfProfileValue` - #9538 Introduce strategy for determining if a profile value is enabled for a particular test environment - #13625 SystemProfileValueSource is not very compatible with the new 3.1 default system property profiles - #16300 Introduce annotation to skip test based on active Spring profile - #15761 spring.profiles.active is not honored when building the context cache key in the TestContext framework  19 votes, 24 watchers","open","has: votes-jira,","spring-projects-issues","2012-01-03T01:08:02Z","2022-03-16T15:23:51Z"
"","13526","NoClassDefFoundError: org/hibernate/engine/SessionFactoryImplementor thrown from SessionFactoryUtils when using LocalSessionFactoryBuilder [SPR-8885]","**[Alex Barnes](https://jira.spring.io/secure/ViewProfile.jspa?name=alexbarnes)** opened **[SPR-8885](https://jira.spring.io/browse/SPR-8885?redirect=false)** and commented  I just updated my Maven dependency to Spring 3.1.RC2 and whilst playing around I decided to upgrade my Hibernate dependency to 4.0.0.CR6. I have existing code which configures a `SessionFactory` using `@Configuration`. I appreciate that the `LocalSessionFactoryBuilder#buildSessionFactory` method is deprecated but it appears that `SessionFactoryUtils` is not compatible with the new layout in Hibernate 4. Specifically `SessionFactoryImplementor` has moved from `org.hibernate.engine` to `org.hibernate.engine.spi`.  ``` return new LocalSessionFactoryBuilder(dataSource)   .addAnnotatedClasses(Spot.class, SupportedBuoy.class)   .addProperties(properties).buildSessionFactory(); ```  Full stack track:  ``` Caused by: java.lang.NoClassDefFoundError: org/hibernate/engine/SessionFactoryImplementor 	at org.springframework.orm.hibernate3.SessionFactoryUtils.getDataSource(SessionFactoryUtils.java:121) 	at org.springframework.orm.hibernate3.HibernateTransactionManager.afterPropertiesSet(HibernateTransactionManager.java:411) 	at org.springframework.orm.hibernate3.HibernateTransactionManager.(HibernateTransactionManager.java:174) 	at com.devcentre.app.config.HibernateConfiguration.transactionManager(HibernateConfiguration.java:75) 	at com.devcentre.app.config.HibernateConfiguration$$EnhancerByCGLIB$$e2ff8f9b.CGLIB$transactionManager$1() 	at com.devcentre.app.config.HibernateConfiguration$$EnhancerByCGLIB$$e2ff8f9b$$FastClassByCGLIB$$3db91f52.invoke() 	at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:167) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:279) 	at com.devcentre.app.config.HibernateConfiguration$$EnhancerByCGLIB$$e2ff8f9b.transactionManager() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:149) ```    ---  **Affects:** 3.1 RC2","closed","in: core,","spring-projects-issues","2011-11-29T14:11:35Z","2019-01-12T05:29:36Z"
"","13115","Exception thrown when updating Hibernate search indexes when SessionFactory is configured using the AnnotationSessionFactoryBuilder [SPR-8469]","**[Alex Barnes](https://jira.spring.io/secure/ViewProfile.jspa?name=alexbarnes)** opened **[SPR-8469](https://jira.spring.io/browse/SPR-8469?redirect=false)** and commented  I have encountered an issue (detailed in the linked forum post) whereby an exception is thrown when Hibernate Search indexes are updated after an entity is inserted and the transaction committed using a `SessionFactory` build using the `AnnotationSessionFactoryBuilder`.  The exception is as follows:  ``` ERROR - http-8080-Processor25 - org.hibernate.annotations.common.AssertionFailure - an assertion failure occured (this may indicate a bug in Hibernate) org.hibernate.annotations.common.AssertionFailure: Access a Sealed WorkQueue which has not been sealed 	at org.hibernate.search.backend.WorkQueue.getSealedQueue(WorkQueue.java:87) 	at org.hibernate.search.backend.impl.BatchedQueueingProcessor.performWorks(BatchedQueueingProcessor.java:128) 	at org.hibernate.search.backend.impl.PostTransactionWorkQueueSynchronization.afterCompletion(PostTransactionWorkQueueSynchronization.java:102) 	at org.hibernate.search.backend.impl.EventSourceTransactionContext$DelegateToSynchronizationOnAfterTx.doAfterTransactionCompletion(EventSourceTransactionContext.java:189) 	at org.hibernate.engine.ActionQueue$AfterTransactionCompletionProcessQueue.afterTransactionCompletion(ActionQueue.java:591) 	at org.hibernate.engine.ActionQueue.afterTransactionCompletion(ActionQueue.java:209) 	at org.hibernate.impl.SessionImpl.afterTransactionCompletion(SessionImpl.java:602) 	at org.springframework.orm.hibernate3.SpringSessionSynchronization.afterCompletion(SpringSessionSynchronization.java:229) 	at org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCompletion(TransactionSynchronizationUtils.java:168) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.invokeAfterCompletion(AbstractPlatformTransactionManager.java:996) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCompletion(AbstractPlatformTransactionManager.java:971) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:799) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:393) 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:120) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) 	at $Proxy29.save(Unknown Source) 	at com.devcentre.application.action.TestAction.execute(TestAction.java:33) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:452) 	at com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:291) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:254) 	at com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:176) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:263) 	at org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:68) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:133) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:207) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:207) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:190) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:75) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:94) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:243) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:270) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:176) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:190) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:187) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.devcentre.core.interceptors.RequestInterceptor.intercept(RequestInterceptor.java:32) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:52) 	at org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:498) 	at org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:77) 	at org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:215) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188) 	at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:198) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:215) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:172) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:433) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:174) 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:875) 	at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665) 	at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528) 	at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81) 	at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689) 	at java.lang.Thread.run(Thread.java:619) ERROR - http-8080-Processor25 - org.hibernate.AssertionFailure - an assertion failure occured (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session) org.hibernate.HibernateException: Error while indexing in Hibernate Search (ater transaction completion) 	at org.hibernate.search.backend.impl.EventSourceTransactionContext$DelegateToSynchronizationOnAfterTx.doAfterTransactionCompletion(EventSourceTransactionContext.java:192) 	at org.hibernate.engine.ActionQueue$AfterTransactionCompletionProcessQueue.afterTransactionCompletion(ActionQueue.java:591) 	at org.hibernate.engine.ActionQueue.afterTransactionCompletion(ActionQueue.java:209) 	at org.hibernate.impl.SessionImpl.afterTransactionCompletion(SessionImpl.java:602) 	at org.springframework.orm.hibernate3.SpringSessionSynchronization.afterCompletion(SpringSessionSynchronization.java:229) 	at org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCompletion(TransactionSynchronizationUtils.java:168) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.invokeAfterCompletion(AbstractPlatformTransactionManager.java:996) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCompletion(AbstractPlatformTransactionManager.java:971) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:799) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:393) 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:120) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) 	at $Proxy29.save(Unknown Source) 	at com.devcentre.application.action.TestAction.execute(TestAction.java:33) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:452) 	at com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:291) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:254) 	at com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:176) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:263) 	at org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:68) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:133) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:207) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:207) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:190) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:75) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:94) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:243) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:270) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:176) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:190) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:187) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.devcentre.core.interceptors.RequestInterceptor.intercept(RequestInterceptor.java:32) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:52) 	at org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:498) 	at org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:77) 	at org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:215) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188) 	at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:198) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:215) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:172) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:433) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:174) 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:875) 	at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665) 	at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528) 	at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81) 	at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.hibernate.annotations.common.AssertionFailure: Access a Sealed WorkQueue which has not been sealed 	at org.hibernate.search.backend.WorkQueue.getSealedQueue(WorkQueue.java:87) 	at org.hibernate.search.backend.impl.BatchedQueueingProcessor.performWorks(BatchedQueueingProcessor.java:128) 	at org.hibernate.search.backend.impl.PostTransactionWorkQueueSynchronization.afterCompletion(PostTransactionWorkQueueSynchronization.java:102) 	at org.hibernate.search.backend.impl.EventSourceTransactionContext$DelegateToSynchronizationOnAfterTx.doAfterTransactionCompletion(EventSourceTransactionContext.java:189) 	... 89 more ERROR - http-8080-Processor25 - org.springframework.transaction.support.TransactionSynchronizationUtils - TransactionSynchronization.afterCompletion threw exception org.hibernate.AssertionFailure: Exception releasing cache locks 	at org.hibernate.engine.ActionQueue$AfterTransactionCompletionProcessQueue.afterTransactionCompletion(ActionQueue.java:598) 	at org.hibernate.engine.ActionQueue.afterTransactionCompletion(ActionQueue.java:209) 	at org.hibernate.impl.SessionImpl.afterTransactionCompletion(SessionImpl.java:602) 	at org.springframework.orm.hibernate3.SpringSessionSynchronization.afterCompletion(SpringSessionSynchronization.java:229) 	at org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCompletion(TransactionSynchronizationUtils.java:168) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.invokeAfterCompletion(AbstractPlatformTransactionManager.java:996) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCompletion(AbstractPlatformTransactionManager.java:971) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:799) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:393) 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:120) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) 	at $Proxy29.save(Unknown Source) 	at com.devcentre.application.action.TestAction.execute(TestAction.java:33) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:452) 	at com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:291) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:254) 	at com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:176) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:263) 	at org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:68) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:133) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:207) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:207) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:190) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:75) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:94) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:243) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:270) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171) 	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:176) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:190) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:187) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at com.devcentre.core.interceptors.RequestInterceptor.intercept(RequestInterceptor.java:32) 	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:248) 	at org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:52) 	at org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:498) 	at org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:77) 	at org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:91) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:215) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188) 	at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:198) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:215) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:172) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:433) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:174) 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:875) 	at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665) 	at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528) 	at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81) 	at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.hibernate.HibernateException: Error while indexing in Hibernate Search (ater transaction completion) 	at org.hibernate.search.backend.impl.EventSourceTransactionContext$DelegateToSynchronizationOnAfterTx.doAfterTransactionCompletion(EventSourceTransactionContext.java:192) 	at org.hibernate.engine.ActionQueue$AfterTransactionCompletionProcessQueue.afterTransactionCompletion(ActionQueue.java:591) 	... 88 more Caused by: org.hibernate.annotations.common.AssertionFailure: Access a Sealed WorkQueue which has not been sealed 	at org.hibernate.search.backend.WorkQueue.getSealedQueue(WorkQueue.java:87) 	at org.hibernate.search.backend.impl.BatchedQueueingProcessor.performWorks(BatchedQueueingProcessor.java:128) 	at org.hibernate.search.backend.impl.PostTransactionWorkQueueSynchronization.afterCompletion(PostTransactionWorkQueueSynchronization.java:102) 	at org.hibernate.search.backend.impl.EventSourceTransactionContext$DelegateToSynchronizationOnAfterTx.doAfterTransactionCompletion(EventSourceTransactionContext.java:189) 	... 89 more ```  This exception is not encountered when I build my `SessionFactory` using the `AnnotationSessionFactoryBean`. Having done some debugging I have discovered that:  When I build my session factory using the builder class the datasource is not set on the `HibernateTransactionManager` in the `HibernateTransactionManager#afterPropertiesSet()` method. This is because `SessionFactoryUtils.getDataSource(getSessionFactory())` returns `null` because the `getSessionFactory()` method returns a Proxy rather than an instance of `SessionFactoryImpl`.  ---  **Affects:** 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?110780-Configuration-of-Spring-Hibernate-and-Hibernate-Search-using-Configuration-3.1.0.M2  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18438/mylyn-context.zip) (_47.40 kB_)  **Issue Links:** - #13138 Transaction problem with AnnotationSessionFactoryBuilder and `@EnableTransactionManagement`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b82d5ae8da7a62a5b2187b6595ffe2111d2bd212, https://github.com/spring-projects/spring-framework/commit/5aa24af1269bf0ac9691afc63da6f6051543ad6a","closed","in: core,","spring-projects-issues","2011-06-20T07:37:37Z","2019-01-13T07:08:44Z"
"","13728","context:component-scan picks up test classes [SPR-9090]","**[Aleksandr Dubinsky](https://jira.spring.io/secure/ViewProfile.jspa?name=almson)** opened **[SPR-9090](https://jira.spring.io/browse/SPR-9090?redirect=false)** and commented  context:component-scan picks up classes annotated with `@ContextConfiguration` as well their nested static ContextConfiguration classes. This messes up the ApplicationContext. There is never a case that component-scan should be looking inside classes annotated with ContextConfiguration. How these classes configure themselves is none of component-scan's business.  Granted, this generally occurs with test code and most people separate their test code from their source code, but there is no requirement that this MUST be so. For me, at least, it isn't. Anyway, shouldn't be a difficult fix to make this right.  Workaround: use an exclude filter of type regex and expression "".**?Test.**?""   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c2b1d2c8576391d665e0f25a17427eacd56bf5c","closed","in: core,","spring-projects-issues","2012-02-02T20:29:37Z","2019-01-12T16:36:53Z"
"","13382","PrimeFacesInterceptor for making PrimeFaces work with Spring MVC (NOT Webflow) [SPR-8740]","**[Akshay Jain](https://jira.spring.io/secure/ViewProfile.jspa?name=akshay.jain.7983)** opened **[SPR-8740](https://jira.spring.io/browse/SPR-8740?redirect=false)** and commented  I was trying to integrate JSF 2.0 and Spring MVC Controllers while NOT using any flows but just using webflow configurations so as to make Spring beans available in JSF files. So for JSF components I picked up PrimeFaces. Now in some input components of PrimeFaces (like ) the input field in HTML gets named as ""componentId_input"" and are Posted back as such. But in our ModelAttribute we have fields as ""componentId"". But because the post back parameters have ""componentId_input"" but not ""componentId"" so binding did not happen which for all practical purposes meant that certain PrimeFaces component values were not being binded to ModelAttribute by spring.  So to overcome this problem I have coded a PrimeFacesInterceptor class. What this class does is that it wraps the original request and adds more parameters to wrapped request with name=""componentId"" if ""componentId_input"" was present in original request. So in context xml file one can do something like:  [code] \ \ \ \ \ \ \ [/code]  This will register PrimeFaces interceptor with handler mapping bean and will pre-handle the requests appropriately.  I will be delighted to see an improvement to my solution.   ---  **Affects:** 3.0.6  **Attachments:** - [PrimeFacesInterceptor.java](https://jira.spring.io/secure/attachment/18867/PrimeFacesInterceptor.java) (_4.63 kB_)","closed","type: enhancement,","spring-projects-issues","2011-10-05T07:28:40Z","2012-09-10T16:00:37Z"
"","13032","Add support to set @TransactionConfiguration on multiple transaction managers [SPR-8385]","**[Adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=nitegate)** opened **[SPR-8385](https://jira.spring.io/browse/SPR-8385?redirect=false)** and commented  When writing a test case which accesses multiple databases it is not possible to set the defaultRollback property on multiple/all transaction managers.  I looked at the code around TransactionalTestExecutionListener and I think it is a lot of code you'll have to change. Sorry for that. ;)  You can drop the request if you think this is too much...   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-06-01T03:26:04Z","2013-06-09T06:39:24Z"
"","13314","Easier messageSource handling (in Spring MVC and Spring Core) [SPR-8672]","**[adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=gonzalad)** opened **[SPR-8672](https://jira.spring.io/browse/SPR-8672?redirect=false)** and commented  Internationalisation in Spring MVC is done with spring:message tag.   This issue is about : * exporting messagesSource as a Map in Spring Context (with the name messages for instance). * And afterward exporting messages to request scope for easy access from JSP pages.  This would allow : * easier display of messages in JSP files :    is replaced with ${messages['personne.nom']}   This is even more interesting when using i18n value inside a JSP attribute (i.e. :  * this whould allow easy access to i18n codes from Spring El (i.e. inside annotation attributes for instance).    ---  **Attachments:** - [MessageSourceMapAdapterFactory.java](https://jira.spring.io/secure/attachment/18732/MessageSourceMapAdapterFactory.java) (_1.89 kB_)","closed","type: enhancement,","spring-projects-issues","2011-09-08T07:26:59Z","2011-12-01T16:41:22Z"
"","13296","Make DateTimeFormatter value configurable through Spring EL [SPR-8654]","**[adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=gonzalad)** opened **[SPR-8654](https://jira.spring.io/browse/SPR-8654?redirect=false)** and commented  DateTimeFormat cannot be used for the moment within an i18n application : * pattern attribute can only be parameterized with property-placeholder (one pattern shared by all clients). * style attribute (""S-"") isn't usable for some locales (i.e French) because year is only 2 digits.  Best and easiest way to handle this situation is to be able to use SpEl inside the attributes.  i.e. `@DateTimeFormat`(pattern=""#{messageSource.getMessage('date_format')}"")  I could then have :**messages_fr.properties**date_format = dd/MM/YYYY  **messages.properties**date_format = MM-dd-YYYY  Note issue is similar to https://jira.springsource.org/browse/SPR-7087 but not a duplicate one.   ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?113518-DateTimeFormat-and-pattern-i18n  6 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-08-30T12:13:45Z","2019-01-12T03:49:24Z"
"","13195","Component Scan not finding @Component's in a JAR in Tomcat webapp [SPR-8551]","**[Adrian Rodriguez](https://jira.spring.io/secure/ViewProfile.jspa?name=adrianrm)** opened **[SPR-8551](https://jira.spring.io/browse/SPR-8551?redirect=false)** and commented  I tracked down a problem with  to this statement. Given the two following classes which are in the same JAR in WEB-INF/lib of a web application:  test/TheBean.java: package test; `@Component` public class TheBean{ }  test/BeanSearcher.java: package test; public class BeanSearcher{  public void init(){ AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(); ctx.scan(""test""); ctx.refresh();      TheBean b= ctx.getBean(TheBean.class);          // What is the value of b?  } }  If I run new BeanSearcher().init() in a jUnit test case or other type of standalone application, b is getting assigned an instance of TheBean, but if I run it, say, in a JSP, ctx.getBean is returning null.   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2011-07-21T02:11:25Z","2019-01-11T13:22:10Z"
"","13748","Spring 3.0 and 3.1 Docs do not mention the issue with LTW not working tomcat due to the way tomcat scans the class path to support Servlets 3.0 features [SPR-9110]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-9110](https://jira.spring.io/browse/SPR-9110?redirect=false)** and commented  Documentation in section ""8.8.4.6 Environment-specific configuration"" should be updated to explain that Tomcat 7 Servlet 3.0 support breaks LTW due to the way that tomcat scans the class path. See issues  https://jira.springsource.org/browse/SPR-7440 https://issues.apache.org/bugzilla/show_bug.cgi?id=52549 https://issues.apache.org/bugzilla/show_bug.cgi?id=52444  I only wasted about 2 days to find the the above links and tried all sorts of fixes. I the docs should explain this issue to avoid frustrating users I came very close to giving up on LTW even though I had managed to get it working many times with tomcat 6.0 Here is the recommend text you can add to the user manual in some sort of visible side note in that section.  Tomcat 7.x requires an extra step to make it work with LTW. You must use a web.xml that is configured for servlets 2.5 or set metadata-complete=""true"" attribute on the web-app element. The problem arises because tomcat scans the web application class path looking for classes containing selvets, listeners, and other features of Servlets 3.0 and while scanning it loads the classes before spring has had a chance to initialize itself and configure LTW.    ---  **Affects:** 3.0.7, 3.1 GA","closed","in: core,","spring-projects-issues","2012-02-10T10:42:05Z","2019-01-12T05:29:13Z"
"","13614","UriUtils query parser broken from 3.0.7 to 3.1.0 [SPR-8974]","**[Adam Zell](https://jira.spring.io/secure/ViewProfile.jspa?name=zellster)** opened **[SPR-8974](https://jira.spring.io/browse/SPR-8974?redirect=false)** and commented  Given the following URL: http://www.youtube.com/oembed?format=json&url=http://www.youtube.com/watch?v=gWmsYVk0A-c  Running UriUtils.encodeUri(url, ""UTF-8"") yields:  Spring 3.0.7: http://www.youtube.com/oembed?format=json&url=http://www.youtube.com/watch?v=gWmsYVk0A-c Spring 3.1.0: http://www.youtube.com/oembed?format=json&url=http://www.youtube.com/watch?v&gWmsYVk0A-c  Note how 3.1.0 changed ""v=gW.."" in the query string to ""v&gW.."".  This is due to UriComponentsBuilder.QUERY_PARAM_PATTERN which is defined as ""([^&=]+)=?([^&=]+)?"".  The regex will assume that the equals sign after v signals the end of the name/value pair.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bcd8355e61ed784346d4d5259ba8bfb28ea30313","closed","type: bug,","spring-projects-issues","2011-12-29T18:23:01Z","2019-01-11T14:30:24Z"
"","13283","Make  namespace configuration open for custom namespaces. [SPR-8641]","**[Adam Skogman](https://jira.spring.io/secure/ViewProfile.jspa?name=askogman)** opened **[SPR-8641](https://jira.spring.io/browse/SPR-8641?redirect=false)** and commented  The new configuration for HTTP message converters is restrictive, and doesn't allow other custom namespaces to simplify configuration.  This is the currently allowed config:  ```xml                      ```  This is what I would like to do:  ```xml                  ```    ---  **Affects:** 3.1 M2  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-08-26T05:13:07Z","2015-09-22T18:20:31Z"
"","13996","Provide UriTemplate methods that can create a UriTemplate [SPR-9359]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-9359](https://jira.spring.io/browse/SPR-9359?redirect=false)** and commented  Background: I opened an improvement [SWS-746](https://jira.spring.io/browse/SWS-746) but it was incorrectly closed. It is OK if the improvement is not accepted but the fact that it was closed because ""here has been a UriTemplate class since version 3.0, which allows you to create a URI template quite easily."" is incorrect. There is no method in UriTemplate that can do what I am suggesting.  Improvement: There is no code to create an UriTemplate. UriTemplate has methods to expand the following URI but nothing to create it. http://example.com/hotels/{hotel}/bookings/{booking}  ``` public String createUriTemplate(String endpoint, Map queryParams) { 	final String queryParamsStart = ""?""; 	final String uriVariableStart = ""{""; 	final String uriVariableEnd = ""}""; 	final String uriVariableSeparator = ""&""; 	final char uriPathSeparator = '/';  	StringBuilder uriTemplate = new StringBuilder(endpoint);  	Set keys = queryParams.keySet();  	if (!(uriTemplate.codePointBefore(uriTemplate.length()) == uriPathSeparator)) 	    uriTemplate.append(uriPathSeparator);  	uriTemplate.append(queryParamsStart);  	for (String key : keys) 	    uriTemplate.append(key).append(""="").append(uriVariableStart) 		    .append(key).append(uriVariableEnd) 		    .append(uriVariableSeparator);  	uriTemplate.deleteCharAt((uriTemplate.length() - 1));  	logger.debug(""Created URI template: "" + uriTemplate);  	return uriTemplate.toString(); } ```    ---  **Issue Links:** - [SWS-746](https://jira.spring.io/browse/SWS-746) Provide RestTemplate methods that can create a UriTemplate using a Map (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-01-12T15:50:52Z","2012-08-13T06:34:06Z"
"","13438","NoSuchFieldError: org/springframework/core/convert/TypeDescriptor.NULL [SPR-8796]","**[Abdulaziz](https://jira.spring.io/secure/ViewProfile.jspa?name=almalki.a)** opened **[SPR-8796](https://jira.spring.io/browse/SPR-8796?redirect=false)** and commented  I got the following exception while i was trying to run my application with 3.1.0.RC1, the app worked fine with version 3.0.6  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'propertyConfigurer' defined in ServletContext resource [/WEB-INF/config/applicationContext.xml]: Initialization of bean failed; nested exception is java.lang.NoSuchFieldError: org/springframework/core/convert/TypeDescriptor.NULL at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:530) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:459) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:644) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:446) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:381) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at com.ibm.ws.webcontainer.webapp.WebApp.notifyServletContextCreated(WebApp.java:1707) at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinish(WebApp.java:380) at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:299) at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:100) at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:166) at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:731) at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:616) at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:376) at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:668) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1123) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1319) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:610) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:944) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:726) at com.ibm.ws.runtime.component.ApplicationMgrImpl$1.run(ApplicationMgrImpl.java:1268) at com.ibm.ws.security.auth.ContextManagerImpl.runAs(ContextManagerImpl.java:4588) at com.ibm.ws.security.auth.ContextManagerImpl.runAsSystem(ContextManagerImpl.java:4766) at com.ibm.ws.security.core.SecurityContext.runAsSystem(SecurityContext.java:255) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplicationDynamically(ApplicationMgrImpl.java:1273) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2045) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:441) at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:384) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:655) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:617) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:1180) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:611) at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:49) at sun.reflect.GeneratedMethodAccessor321.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:611) at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:256) at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1085) at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:966) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:848) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:773) at com.ibm.ws.management.AdminServiceImpl$1.run(AdminServiceImpl.java:1332) at com.ibm.ws.security.util.AccessController.doPrivileged(AccessController.java:118) at com.ibm.ws.management.AdminServiceImpl.invoke(AdminServiceImpl.java:1225) at com.ibm.ws.management.connector.AdminServiceDelegator.invoke(AdminServiceDelegator.java:181) at com.ibm.ws.management.connector.ipc.CallRouter.route(CallRouter.java:242) at com.ibm.ws.management.connector.ipc.IPCConnectorInboundLink.doWork(IPCConnectorInboundLink.java:353) at com.ibm.ws.management.connector.ipc.IPCConnectorInboundLink$IPCConnectorReadCallback.complete(IPCConnectorInboundLink.java:595) at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:165) at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217) at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161) at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138) at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204) at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775) at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1604)  Caused by: java.lang.NoSuchFieldError: org/springframework/core/convert/TypeDescriptor.NULL at org.springframework.expression.TypedValue.\(TypedValue.java:32) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:200) at org.springframework.expression.spel.support.StandardEvaluationContext.setRootObject(StandardEvaluationContext.java:85) at org.springframework.expression.spel.support.StandardEvaluationContext.\(StandardEvaluationContext.java:74) at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:124) at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1299) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:210) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:182) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:353) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:153) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1350) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1111) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:520) ... 64 more  ---  **Affects:** 3.1 RC1  **Issue Links:** - #13885 Missing TypeDescriptor.NULL when upgrading from Spring 3.0.x to 3.1.x -> Eclipse Gemini Blueprint cannot be upgraded","closed","in: core,","spring-projects-issues","2011-10-22T09:32:07Z","2019-01-12T05:29:44Z"
"","13201","SpringServletContainerInitializer in 3.1.M2 does not seem to work when using JSF 2.0 implementations [SPR-8557]","**[aappddeevv](https://jira.spring.io/secure/ViewProfile.jspa?name=aappddeevv)** opened **[SPR-8557](https://jira.spring.io/browse/SPR-8557?redirect=false)** and commented  The SpringServletContainerInitializer seems to think that a number of classes implement WebApplicationInitializer and tries to initialize them. However, the classes do not implement that interface. In my case, it tries to ""initialize"" classes belonging to the richfaces JSF implementation.  web.xml has a context listener and a requestcontext listener defined in them. My applicationContext is blank.  Here's the log:  Jul 23, 2011 1:32:14 PM com.springsource.tcserver.security.PropertyDecoder \ INFO: tc Runtime property decoder using memory-based key Jul 23, 2011 1:32:15 PM com.springsource.tcserver.security.PropertyDecoder \ INFO: tcServer Runtime property decoder has been initialized in 917 ms Jul 23, 2011 1:32:15 PM org.apache.coyote.AbstractProtocolHandler init INFO: Initializing ProtocolHandler [""http-bio-8080""] Jul 23, 2011 1:32:16 PM com.springsource.tcserver.serviceability.rmi.JmxSocketListener init INFO: Started up JMX registry on 127.0.0.1:6969 in 203 ms Jul 23, 2011 1:32:16 PM org.apache.catalina.startup.Catalina load INFO: Initialization processed in 2067 ms Jul 23, 2011 1:32:16 PM org.apache.catalina.core.StandardService startInternal INFO: Starting service Catalina Jul 23, 2011 1:32:16 PM org.apache.catalina.core.StandardEngine startInternal INFO: Starting Servlet Engine: SpringSource tc Runtime 2.5.0.RELEASE/7.0.12.A.RELEASE Jul 23, 2011 1:32:16 PM org.apache.catalina.startup.HostConfig deployDescriptor INFO: Deploying configuration descriptor testprimefaces.xml from C:\tmp\eclipse\springsource-tool-suite-2.7.0-e3.62-win32-x86_64\vfabric-tc-server-developer-2.5.0.RELEASE\dev\conf\Catalina\localhost Jul 23, 2011 1:32:16 PM org.apache.catalina.startup.SetContextPropertiesRule begin WARNING: [SetContextPropertiesRule]{Context} Setting property 'source' to 'org.eclipse.jst.jee.server:testprimefaces' did not find a matching property. Jul 23, 2011 1:32:28 PM org.apache.catalina.startup.HostConfig deployDescriptor SEVERE: Error deploying configuration descriptor testprimefaces.xml java.lang.IllegalArgumentException: class org.ajax4jsf.renderkit.AjaxBehaviorRenderer is not assignable to interface org.springframework.web.WebApplicationInitializer at org.springframework.util.Assert.isAssignable(Assert.java:368) at org.springframework.util.Assert.isAssignable(Assert.java:351) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:128) at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:145) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5184) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1322) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:379) at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:324) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1041) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.startup.Catalina.start(Catalina.java:620) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:613) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:303) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:431) Jul 23, 2011 1:32:28 PM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deploying web application directory manager Jul 23, 2011 1:32:29 PM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deploying web application directory ROOT Jul 23, 2011 1:32:29 PM org.apache.coyote.AbstractProtocolHandler start INFO: Starting ProtocolHandler [""http-bio-8080""] Jul 23, 2011 1:32:29 PM org.apache.catalina.startup.Catalina start INFO: Server startup in 12818 ms Jul 23, 2011 1:32:39 PM org.apache.catalina.startup.HostConfig deployDescriptor INFO: Deploying configuration descriptor testprimefaces.xml from C:\tmp\eclipse\springsource-tool-suite-2.7.0-e3.62-win32-x86_64\vfabric-tc-server-developer-2.5.0.RELEASE\dev\conf\Catalina\localhost Jul 23, 2011 1:32:39 PM org.apache.catalina.startup.SetContextPropertiesRule begin WARNING: [SetContextPropertiesRule]{Context} Setting property 'source' to 'org.eclipse.jst.jee.server:testprimefaces' did not find a matching property. Jul 23, 2011 1:32:47 PM org.apache.catalina.core.NamingContextListener lifecycleEvent SEVERE: Creation of the naming context failed: javax.naming.NamingException: Context is read only Jul 23, 2011 1:32:47 PM org.apache.catalina.startup.HostConfig deployDescriptor SEVERE: Error deploying configuration descriptor testprimefaces.xml java.lang.IllegalArgumentException: class com.sun.faces.renderkit.html_basic.CompositeRenderer is not assignable to interface org.springframework.web.WebApplicationInitializer at org.springframework.util.Assert.isAssignable(Assert.java:368) at org.springframework.util.Assert.isAssignable(Assert.java:351) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:128) at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:145) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5184) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1363) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:294) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1233) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1391) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1401) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1380) at java.lang.Thread.run(Thread.java:722) Jul 23, 2011 1:32:57 PM org.apache.catalina.startup.HostConfig deployDescriptor INFO: Deploying configuration descriptor testprimefaces.xml from C:\tmp\eclipse\springsource-tool-suite-2.7.0-e3.62-win32-x86_64\vfabric-tc-server-developer-2.5.0.RELEASE\dev\conf\Catalina\localhost Jul 23, 2011 1:32:57 PM org.apache.catalina.startup.SetContextPropertiesRule begin WARNING: [SetContextPropertiesRule]{Context} Setting property 'source' to 'org.eclipse.jst.jee.server:testprimefaces' did not find a matching property. Jul 23, 2011 1:33:04 PM org.apache.catalina.core.NamingContextListener lifecycleEvent SEVERE: Creation of the naming context failed: javax.naming.NamingException: Context is read only Jul 23, 2011 1:33:04 PM org.apache.catalina.startup.HostConfig deployDescriptor SEVERE: Error deploying configuration descriptor testprimefaces.xml java.lang.IllegalArgumentException: class javax.faces.component.UIViewParameter is not assignable to interface org.springframework.web.WebApplicationInitializer at org.springframework.util.Assert.isAssignable(Assert.java:368) at org.springframework.util.Assert.isAssignable(Assert.java:351) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:128) at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:145) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5184) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1363) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:294) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1233) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1391) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1401) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1380) at java.lang.Thread.run(Thread.java:722) Jul 23, 2011 1:33:14 PM org.apache.catalina.startup.HostConfig deployDescriptor INFO: Deploying configuration descriptor testprimefaces.xml from C:\tmp\eclipse\springsource-tool-suite-2.7.0-e3.62-win32-x86_64\vfabric-tc-server-developer-2.5.0.RELEASE\dev\conf\Catalina\localhost Jul 23, 2011 1:33:14 PM org.apache.catalina.startup.SetContextPropertiesRule begin WARNING: [SetContextPropertiesRule]{Context} Setting property 'source' to 'org.eclipse.jst.jee.server:testprimefaces' did not find a matching property. Jul 23, 2011 1:33:20 PM org.apache.catalina.core.NamingContextListener lifecycleEvent SEVERE: Creation of the naming context failed: javax.naming.NamingException: Context is read only Jul 23, 2011 1:33:20 PM org.apache.catalina.startup.HostConfig deployDescriptor SEVERE: Error deploying configuration descriptor testprimefaces.xml java.lang.IllegalArgumentException: class org.richfaces.renderkit.html.HtmlMessagesRenderer is not assignable to interface org.springframework.web.WebApplicationInitializer at org.springframework.util.Assert.isAssignable(Assert.java:368) at org.springframework.util.Assert.isAssignable(Assert.java:351) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:128) at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:145) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5184) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1363) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:294) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1233) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1391) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1401) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1380) at java.lang.Thread.run(Thread.java:722) Jul 23, 2011 1:33:30 PM org.apache.catalina.startup.HostConfig deployDescriptor INFO: Deploying configuration descriptor testprimefaces.xml from C:\tmp\eclipse\springsource-tool-suite-2.7.0-e3.62-win32-x86_64\vfabric-tc-server-developer-2.5.0.RELEASE\dev\conf\Catalina\localhost Jul 23, 2011 1:33:30 PM org.apache.catalina.startup.SetContextPropertiesRule begin WARNING: [SetContextPropertiesRule]{Context} Setting property 'source' to 'org.eclipse.jst.jee.server:testprimefaces' did not find a matching property. Jul 23, 2011 1:33:37 PM org.apache.catalina.core.NamingContextListener lifecycleEvent SEVERE: Creation of the naming context failed: javax.naming.NamingException: Context is read only Jul 23, 2011 1:33:37 PM org.apache.catalina.startup.HostConfig deployDescriptor SEVERE: Error deploying configuration descriptor testprimefaces.xml java.lang.IllegalArgumentException: class org.richfaces.renderkit.CollapsibleSubTableRenderer is not assignable to interface org.springframework.web.WebApplicationInitializer at org.springframework.util.Assert.isAssignable(Assert.java:368) at org.springframework.util.Assert.isAssignable(Assert.java:351) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:128) at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:145) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5184) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1363) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:294) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1233) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1391) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1401) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1380) at java.lang.Thread.run(Thread.java:722) Jul 23, 2011 1:33:47 PM org.apache.catalina.startup.HostConfig deployDescriptor INFO: Deploying configuration descriptor testprimefaces.xml from C:\tmp\eclipse\springsource-tool-suite-2.7.0-e3.62-win32-x86_64\vfabric-tc-server-developer-2.5.0.RELEASE\dev\conf\Catalina\localhost Jul 23, 2011 1:33:47 PM org.apache.catalina.startup.SetContextPropertiesRule begin WARNING: [SetContextPropertiesRule]{Context} Setting property 'source' to 'org.eclipse.jst.jee.server:testprimefaces' did not find a matching property. Jul 23, 2011 1:33:53 PM org.apache.catalina.core.NamingContextListener lifecycleEvent SEVERE: Creation of the naming context failed: javax.naming.NamingException: Context is read only Jul 23, 2011 1:33:53 PM org.apache.catalina.startup.HostConfig deployDescriptor SEVERE: Error deploying configuration descriptor testprimefaces.xml java.lang.IllegalArgumentException: class javax.faces.component.UISelectBoolean is not assignable to interface org.springframework.web.WebApplicationInitializer at org.springframework.util.Assert.isAssignable(Assert.java:368) at org.springframework.util.Assert.isAssignable(Assert.java:351) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:128) at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:145) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5184) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1363) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:294) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1233) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1391) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1401) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1380) at java.lang.Thread.run(Thread.java:722) Jul 23, 2011 1:34:03 PM org.apache.catalina.startup.HostConfig deployDescriptor INFO: Deploying configuration descriptor testprimefaces.xml from C:\tmp\eclipse\springsource-tool-suite-2.7.0-e3.62-win32-x86_64\vfabric-tc-server-developer-2.5.0.RELEASE\dev\conf\Catalina\localhost Jul 23, 2011 1:34:03 PM org.apache.catalina.startup.SetContextPropertiesRule begin WARNING: [SetContextPropertiesRule]{Context} Setting property 'source' to 'org.eclipse.jst.jee.server:testprimefaces' did not find a matching property. Jul 23, 2011 1:34:10 PM org.apache.catalina.core.NamingContextListener lifecycleEvent SEVERE: Creation of the naming context failed: javax.naming.NamingException: Context is read only Jul 23, 2011 1:34:10 PM org.apache.catalina.startup.HostConfig deployDescriptor SEVERE: Error deploying configuration descriptor testprimefaces.xml java.lang.IllegalArgumentException: class com.sun.faces.facelets.tag.ui.UIDebug is not assignable to interface org.springframework.web.WebApplicationInitializer at org.springframework.util.Assert.isAssignable(Assert.java:368) at org.springframework.util.Assert.isAssignable(Assert.java:351) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:128) at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:145) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5184) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1363) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:294) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1233) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1391) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1401) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1380) at java.lang.Thread.run(Thread.java:722) Jul 23, 2011 1:34:20 PM org.apache.catalina.startup.HostConfig deployDescriptor INFO: Deploying configuration descriptor testprimefaces.xml from C:\tmp\eclipse\springsource-tool-suite-2.7.0-e3.62-win32-x86_64\vfabric-tc-server-developer-2.5.0.RELEASE\dev\conf\Catalina\localhost Jul 23, 2011 1:34:20 PM org.apache.catalina.startup.SetContextPropertiesRule begin WARNING: [SetContextPropertiesRule]{Context} Setting property 'source' to 'org.eclipse.jst.jee.server:testprimefaces' did not find a matching property. Jul 23, 2011 1:34:27 PM org.apache.catalina.core.NamingContextListener lifecycleEvent SEVERE: Creation of the naming context failed: javax.naming.NamingException: Context is read only Jul 23, 2011 1:34:27 PM org.apache.catalina.startup.HostConfig deployDescriptor SEVERE: Error deploying configuration descriptor testprimefaces.xml java.lang.IllegalArgumentException: class com.sun.faces.renderkit.html_basic.SelectManyCheckboxListRenderer is not assignable to interface org.springframework.web.WebApplicationInitializer at org.springframework.util.Assert.isAssignable(Assert.java:368) at org.springframework.util.Assert.isAssignable(Assert.java:351) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:128) at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:145) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5184) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1363) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:294) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1233) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1391) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1401) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1380) at java.lang.Thread.run(Thread.java:722) Jul 23, 2011 1:34:37 PM org.apache.catalina.startup.HostConfig deployDescriptor INFO: Deploying configuration descriptor testprimefaces.xml from C:\tmp\eclipse\springsource-tool-suite-2.7.0-e3.62-win32-x86_64\vfabric-tc-server-developer-2.5.0.RELEASE\dev\conf\Catalina\localhost Jul 23, 2011 1:34:37 PM org.apache.catalina.startup.SetContextPropertiesRule begin WARNING: [SetContextPropertiesRule]{Context} Setting property 'source' to 'org.eclipse.jst.jee.server:testprimefaces' did not find a matching property. Exception in thread ""ContainerBackgroundProcessor[StandardEngine[Catalina]]"" java.lang.OutOfMemoryError: PermGen space at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:794) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:144) at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:2818) at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:1148) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1643) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1521) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:1956) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1919) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1806) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1765) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1751) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1255) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:882) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:317) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5081) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1363) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:294) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1233) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1391) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1401) Exception in thread ""RMI RenewClean-[127.0.0.1:6969]"" java.lang.OutOfMemoryError: PermGen space at sun.misc.Unsafe.defineClass(Native Method) at sun.reflect.ClassDefiner.defineClass(ClassDefiner.java:63) at sun.reflect.MethodAccessorGenerator$1.run(MethodAccessorGenerator.java:399) at sun.reflect.MethodAccessorGenerator$1.run(MethodAccessorGenerator.java:396) at java.security.AccessController.doPrivileged(Native Method) at sun.reflect.MethodAccessorGenerator.generate(MethodAccessorGenerator.java:395) at sun.reflect.MethodAccessorGenerator.generateSerializationConstructor(MethodAccessorGenerator.java:113) at sun.reflect.ReflectionFactory.newConstructorForSerialization(ReflectionFactory.java:331) at java.io.ObjectStreamClass.getSerializableConstructor(ObjectStreamClass.java:1343) at java.io.ObjectStreamClass.access$1500(ObjectStreamClass.java:69) at java.io.ObjectStreamClass$2.run(ObjectStreamClass.java:454) at java.io.ObjectStreamClass$2.run(ObjectStreamClass.java:430) at java.security.AccessController.doPrivileged(Native Method) at java.io.ObjectStreamClass.\(ObjectStreamClass.java:430) at java.io.ObjectStreamClass.lookup(ObjectStreamClass.java:327) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1130) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:346) at sun.rmi.transport.DGCImpl_Stub.dirty(Unknown Source) at sun.rmi.transport.DGCClient$EndpointEntry.makeDirtyCall(DGCClient.java:360) at sun.rmi.transport.DGCClient$EndpointEntry.access$1600(DGCClient.java:171) at sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run(DGCClient.java:574) at java.lang.Thread.run(Thread.java:722)   ---  **Affects:** 3.1 M2  **Reference URL:** http://forum.springsource.org/showthread.php?112139-is-not-assignable-to-WebApplicationInitializer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/179dad8c249dc7debb55aa181710af8e437d9807","closed","type: bug,","spring-projects-issues","2011-07-23T10:51:10Z","2012-06-19T03:39:04Z"
"","13023","LocalEntityManagerFactoryBean : Illegal Argument Exception while using in WAS7 [SPR-8376]","**[123](https://jira.spring.io/secure/ViewProfile.jspa?name=somjitc)** opened **[SPR-8376](https://jira.spring.io/browse/SPR-8376?redirect=false)** and commented  Hi was trying to integrate JPA with spring and deploy in WAS7.  I encountered with Illegal argument exception as depicted below  ""    [java.lang.IllegalArgumentException: methods with same signature createEntityManager() but incompatible return types: [interface com.ibm.websphere.persistence.WsJpaEntityManager, interface org.apache.openjpa.persistence.OpenJPAEntityManagerSPI] ""  I also saw the similar JIRA https://jira.springsource.org/browse/SPR-4383.  Logs are attached.  If it is fixed please  let us know the IBM's fix pack number.  ---  **Affects:** 3.0.2  **Reference URL:** https://jira.springsource.org/browse/SPR-4383  **Attachments:** - [SystemOut.log](https://jira.spring.io/secure/attachment/18275/SystemOut.log) (_76.72 kB_)  **Issue Links:** - #19224 Entity manager factory bean: Support native WebSphere JPA implementation","closed","status: invalid,","spring-projects-issues","2011-05-25T06:54:37Z","2019-01-12T05:30:17Z"
"","13340","GenericTypeResolver can throw null pointer exception when types cannot be resolved [SPR-8698]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-8698](https://jira.spring.io/browse/SPR-8698?redirect=false)** and commented  The GenericTypeResolver can throw null pointer exception when types cannot be resolved, I think that it should simply return a null value.  ``` java.lang.NullPointerException 	at java.lang.Class.isAssignableFrom(Native Method) 	at org.springframework.core.GenericTypeResolver.doResolveTypeArguments(GenericTypeResolver.java:209) 	at org.springframework.core.GenericTypeResolver.doResolveTypeArguments(GenericTypeResolver.java:181) 	at org.springframework.core.GenericTypeResolver.resolveTypeArguments(GenericTypeResolver.java:166) 	at org.springframework.core.GenericTypeResolver.resolveTypeArgument(GenericTypeResolver.java:145) ```  Here is a test to replicate:  ``` @Test public void resolvesNullIfNotResolvable() throws Exception { 	GenericClass o = new GenericClass(); 	assertNull(GenericTypeResolver.resolveTypeArgument(o.getClass(), GenericClass.class)); }  static class GenericClass { } ```  I think the fix should be to add a null check on doResolveTypeArguments  ``` private static Class[] doResolveTypeArguments(Class ownerClass, Type ifc, Class genericIfc) { 	if (ifc != null) { 		if (ifc instanceof ParameterizedType) { 		... ```    ---  **Affects:** 3.0.6, 3.1 M2  **Issue Links:** - [DATACMNS-104](https://jira.spring.io/browse/DATACMNS-104) Upgrade to Spring 3.0.7. (_**""is depended on by""**_)","closed","in: core,","spring-projects-issues","2011-09-15T05:12:38Z","2012-06-19T03:39:07Z"
"","13288","RedirectView does not URL encode expanded path variable  [SPR-8646]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-8646](https://jira.spring.io/browse/SPR-8646?redirect=false)** and commented  When using RedirectView to redirect to a URL that includes a path variable the model value is not correctly URL encoded.  This differs from the query parameter where URL encoding occurs.  Eg:  ```java RedirectView view = new RedirectView(""/ab/{cd}""); view.render(Collections.singletonMap(""cd"", ""C D""), request, response); // Currently throws URISyntaxException, Should redirect to /ab/C+D ```    ---  **Affects:** 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/498d81f696127c0c8a24cb04ec1c4fa6c40ae4d0","closed","type: bug,","spring-projects-issues","2011-08-27T08:45:37Z","2012-06-19T03:39:15Z"
"","13134","RequestMappingHandlerAdapter .setInitBinderArgumentResolvers() & .setArgumentResolvers() do provide full control [SPR-8488]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-8488](https://jira.spring.io/browse/SPR-8488?redirect=false)** and commented  I might have my understanding of this a little wrong, so apologies in advance if this is not a bug.  The JavaDoc on RequestMappingHandlerAdapter.setInitBinderArgumentResolvers and RequestMappingHandlerAdapter.setArgumentResolvers seems to imply that any resolvers set will completely replace the default values.  I am not sure that this is actually the case.  I think that afterPropertiesSet() method will actually still add the default resolvers.  perhaps  ``` private void initReturnValueHandlers() { 	if (returnValueHandlers == null) { 		returnValueHandlers = new HandlerMethodReturnValueHandlerComposite(); 	} ```  should be:  ``` private void initReturnValueHandlers() { 	if (returnValueHandlers != null) { 		return; 	} ```  Sorry again if I have misunderstood the intent.   ---  **Affects:** 3.1 M2","closed","type: bug,","spring-projects-issues","2011-06-25T06:30:10Z","2012-06-19T03:39:13Z"
"","13133","RequestMappingHandlerAdapter.initInitBinderArgumentResolvers() does not add custom resolvers [SPR-8487]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-8487](https://jira.spring.io/browse/SPR-8487?redirect=false)** and commented  I think that RequestMappingHandlerAdapter.initInitBinderArgumentResolvers() is incorrectly adding custom resolvers to the wrong variable.  ``` initBinderArgumentResolvers.addResolver(new ExpressionValueMethodArgumentResolver(beanFactory)); // Custom resolvers argumentResolvers.addResolvers(customArgumentResolvers); // Type-based resolvers initBinderArgumentResolvers.addResolver(new ServletRequestMethodArgumentResolver()); ```  I think should be:  ``` initBinderArgumentResolvers.addResolver(new ExpressionValueMethodArgumentResolver(beanFactory)); // Custom resolvers initBinderArgumentResolvers.addResolvers(customArgumentResolvers); // Type-based resolvers initBinderArgumentResolvers.addResolver(new ServletRequestMethodArgumentResolver()); ```    ---  **Affects:** 3.1 M2","closed","type: bug,","spring-projects-issues","2011-06-25T05:25:34Z","2012-06-19T03:39:24Z"
"","13109","TypeConverterDelegate contains commented out code [SPR-8463]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-8463](https://jira.spring.io/browse/SPR-8463?redirect=false)** and commented  As of 3.1M2 the class org.springframework.beans.TypeConverterDelegate has the following method:  ``` /**  * Find a default editor for the given type.  * @param requiredType the type to find an editor for  * @param descriptor the JavaBeans descriptor for the property  * @return the corresponding editor, or null if none  */ protected PropertyEditor findDefaultEditor(Class requiredType, TypeDescriptor typeDescriptor) {      PropertyEditor editor = null;      //if (typeDescriptor instanceof PropertyTypeDescriptor) {           //PropertyDescriptor pd = ((PropertyTypeDescriptor) typeDescriptor).getPropertyDescriptor();           //editor = pd.createPropertyEditor(this.targetObject);      //}      if (editor == null && requiredType != null) {           // No custom editor -> check BeanWrapperImpl's default editors.           editor = this.propertyEditorRegistry.getDefaultEditor(requiredType);           if (editor == null && !String.class.equals(requiredType)) {                // No BeanWrapper default editor -> check standard JavaBean editor.                editor = BeanUtils.findEditorByConvention(requiredType);           }      }      return editor; } ```  I have a class that needs to perform an identical lookup, so I have been paying close attention to this method:  https://github.com/philwebb/springfaces/blob/master/springfaces-mvc/src/main/java/org/springframework/springfaces/mvc/bind/ReverseDataBinder.java#L213  As the PropertyTypeDescriptor class has now been removed could the commented out lines be removed all together?  Looking at the code I was not entirely sure if they had been commented out as a temporary measure, or if the change is intended to be permanent.  Would it also be possible to have this method exposed as a static utility somewhere so that it can be reused?  Something like:  ```   /**  * Find a default editor for the given type.  * @param requiredType the type to find an editor for  * @param descriptor the JavaBeans descriptor for the property  * @return the corresponding editor, or null if none  */ protected PropertyEditor findDefaultEditor(Class requiredType, TypeDescriptor typeDescriptor) {      return findDefaultEditor(requiredType, typeDescriptor, this.propertyEditorRegistry); } /**  * Find a default editor for the given type.  * @param requiredType the type to find an editor for  * @param descriptor the JavaBeans descriptor for the property  * @return the corresponding editor, or null if none  */ public static PropertyEditor findDefaultEditor(Class requiredType,           TypeDescriptor typeDescriptor,           PropertyEditorRegistrySupport propertyEditorRegistry) {      PropertyEditor editor = null;      if (requiredType != null) {           // check BeanWrapperImpl's default editors.           editor = propertyEditorRegistry.getDefaultEditor(requiredType);           if (editor == null && !String.class.equals(requiredType)) {                // No BeanWrapper default editor -> check standard JavaBean editor.                editor = BeanUtils.findEditorByConvention(requiredType);           }      }      return editor; } ```  ---  **Affects:** 3.1 M2  **Issue Links:** - #14304 Poor Performance with lots of Prototype Scoped Beans","closed","type: enhancement,","spring-projects-issues","2011-06-17T02:48:22Z","2019-01-11T13:35:18Z"
"","13077","Allow RedirectView to expose a bookmarkable URL [SPR-8431]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-8431](https://jira.spring.io/browse/SPR-8431?redirect=false)** and commented  In order to provide deeper integration between Spring and JSF I would like it if RedirectView could expose a bookmark string.  This would allow me to implement JSFs ViewHandler.getBookmarkableURL using MVC views.  Attached is a patch that provides a new BookmarkableView interface and modifies RedirectView to implement it.  I have also updated the test case.    ---  **Affects:** 3.1 M2  **Attachments:** - [bookmarkable.patch](https://jira.spring.io/secure/attachment/18325/bookmarkable.patch) (_9.17 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a58bd3073d12e4523a5ce3a6e5652316704e1a8c","closed","type: enhancement,","spring-projects-issues","2011-06-10T06:23:32Z","2019-01-11T13:37:35Z"
"","13011","Conversion service in Spring 3.1 removes items from Lists in Maps causing Spring Security exceptions [SPR-8364]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-8364](https://jira.spring.io/browse/SPR-8364?redirect=false)** and commented  Using the latest snapshot build of Spring 3.1 an IllegalArgumentException is thrown from Spring Security FilterChainProxy.checkContents.  After a bit of hunting I believe that this is due to an error in the converter service.  The conversion services is being invoked to convert Map to Map, this invokes the MapToMapConverter for the Map and then the CollectionToObjectConverter.  The collection to object converter returns the 1st item in the list and discards the rest.  Here is a test case that you can use to verify.  This will pass on 3.0.5 and fail on 3.1.0.BUILD-SNAPSHOT  ``` @Test @SuppressWarnings(""unchecked"") public void shouldConvertMaps() throws Exception { 	HashMap src = new LinkedHashMap(); 	List value = new ArrayList(); 	value.add(1); 	value.add(2); 	value.add(3); 	src.put(""k"", value); 	GenericConversionService cs = ConversionServiceFactory.createDefaultConversionService(); 	Map converted = cs.convert(src, Map.class); 	assertEquals(value, converted.get(""k"")); } ```    ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d6a5849f70288b5f5c19030b1fd8f087a6cb90b, https://github.com/spring-projects/spring-framework/commit/7430fcd9049331d1e28af2879beb036ae45eb905","closed","in: core,","spring-projects-issues","2011-05-22T05:15:20Z","2019-01-11T13:23:32Z"
"","12889","StandardEvaluationContext.setRootObject should test parameter rather than private for null [SPR-8241]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-8241](https://jira.spring.io/browse/SPR-8241?redirect=false)** and commented  The StandardEvaluationContext implementation allows the root object to be set.  I believe that setRootObject is incorrectly testing the private member rather than the argument for null:  ``` public void setRootObject(Object rootObject) {      if (this.rootObject == null) {           this.rootObject = TypedValue.NULL;      } else {           this.rootObject = new TypedValue(rootObject);//, TypeDescriptor.forObject(rootObject));      } } ```  should be?  ``` public void setRootObject(Object rootObject) {      if (rootObject == null) {           this.rootObject = TypedValue.NULL;      } else {           this.rootObject = new TypedValue(rootObject);//, TypeDescriptor.forObject(rootObject));      } } ```    ---  **Affects:** 3.0.5, 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/641bc35a50a0f2b6b5eae9bbb1d50cff85454a08, https://github.com/spring-projects/spring-framework/commit/81e9f6cc2c87d1ed94587a1c93132e76f8bccb96","closed","in: core,","spring-projects-issues","2011-04-10T03:28:06Z","2012-06-19T03:39:20Z"
"","22","Migrate build system to Gradle","## Major changes - Remove Ant-based spring-build and related resources - Replace with Gradle-based build - Remove (and .gitignore) all IDE metadata files - Remove hand-maintained Maven poms in favor of generation by Gradle - Move integration-tests subproject to root src/test dir - Move spring-framework-reference subproject to root src/reference dir - Rename org.springframework.\* subprojects => spring-*  See individual messages for the commits included in this pull request for details on each of these changes.  Issue: SPR-8116 ## Plan for merging  @jhoeller, @costin, @rstoyanchev, @poutsma, @sbrannen, @markfisher -- I'm planning to merge these changes into master on Monday.  It would be great if in the meantime at least a few of you could take the new build for a spin.  Even if you don't get a chance to try it before Monday, merging into master will be low-impact, as everyone is focused on 3.1.x work right now anyway (3.1.x will remain permanently on spring-build).  Just follow the instructions at https://github.com/cbeams/spring-framework#building_from_source, but instead of cloning a new repository as the documentation suggests, you can simply add me as a remote to your existing spring-framework repository and check out the 'gradle' branch there:  ``` $ git remote add cbeams git@github.com:cbeams/spring-framework.git $ git fetch cbeams $ git checkout -b gradle cbeams/gradle $ ./gradlew build ``` ## Documentation  I would also appreciate feedback on these new wiki docs: - [Gradle build and release FAQ](https://github.com/cbeams/spring-framework/wiki/Gradle-build-and-release-FAQ) - [SpringSource repository FAQ](https://github.com/cbeams/spring-framework/wiki/SpringSource-repository-FAQ)  Note that a lot of the information there is general and not specific only to Spring Framework, but I wanted to get all this down in one place for now.  We can think about hosting it somewhere more general later.  While these are written for a mixed audience of committers and end-users, I want to make sure that this is documentation that any project lead can look at to understand how things work, particularly with regard to release management.  Basically, if anything is confusing to you, it should probably be in one of those FAQs.  Please let me know what questions you have as you try this out, and we'll get it in there.","closed","","cbeams","2012-01-27T17:17:22Z","2014-07-28T13:13:16Z"
"","44","Remove extraneous misspelled word ""hvae"" from file.","","closed","","mjkrumlauf","2012-02-29T19:10:31Z","2014-06-26T20:10:13Z"
"","33","SQL exception translation enhancements","","closed","","trisberg","2012-02-09T19:35:21Z","2014-06-18T13:32:48Z"
"","26","Improved ResourceDatabasePopulator [SPR-8932]","","closed","","trisberg","2012-02-03T21:53:35Z","2014-06-15T05:55:48Z"
"","25","Fixes for SimpleJdbcInsert [SPR-9006]","","closed","","trisberg","2012-02-03T21:51:22Z","2012-02-12T15:17:15Z"
"","8","Add readme","","closed","","cbeams","2011-12-20T12:56:34Z","2014-07-31T22:50:06Z"